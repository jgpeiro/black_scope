
test_g473_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020b24  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db8  08020d08  08020d08  00030d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023ac0  08023ac0  00040358  2**0
                  CONTENTS
  4 .ARM          00000000  08023ac0  08023ac0  00040358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08023ac0  08023ac0  00040358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023ac0  08023ac0  00033ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023ac4  08023ac4  00033ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08023ac8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016728  20000358  08023e20  00040358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016a80  08023e20  00046a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040358  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040388  2**0
                  CONTENTS, READONLY
 13 .debug_info   00062170  00000000  00000000  000403cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009427  00000000  00000000  000a253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ce8  00000000  00000000  000ab968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002360  00000000  00000000  000ae650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b4c  00000000  00000000  000b09b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003aa7a  00000000  00000000  000d94fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff6e9  00000000  00000000  00113f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cf68  00000000  00000000  00213660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  002205c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000358 	.word	0x20000358
 80001fc:	00000000 	.word	0x00000000
 8000200:	08020cec 	.word	0x08020cec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000035c 	.word	0x2000035c
 800021c:	08020cec 	.word	0x08020cec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f01d f9ec 	bl	801e0e2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d54:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d7a:	f005 ff43 	bl	8006c04 <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f003 febb 	bl	8004afe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d94:	f007 fdd2 	bl	800893c <HAL_ADCEx_MultiModeConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d9e:	f003 feae 	bl	8004afe <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC1_Init+0x168>)
 8000da4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000da6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 4095;
 8000db6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 2048+768;
 8000dbc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dce:	f007 f8bb 	bl	8007f48 <HAL_ADC_AnalogWDGConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f003 fe91 	bl	8004afe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	237f      	movs	r3, #127	; 0x7f
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dec:	2304      	movs	r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dfa:	f006 fc65 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000e04:	f003 fe7b 	bl	8004afe <Error_Handler>
  }

  /** Configure the channel to be monitored by WatchDog 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x170>)
 8000e0a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REGINJEC;
 8000e0c:	f04f 73e0 	mov.w	r3, #29360128	; 0x1c00000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2816;
 8000e12:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000e24:	f007 f890 	bl	8007f48 <HAL_ADC_AnalogWDGConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000e2e:	f003 fe66 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3748      	adds	r7, #72	; 0x48
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000374 	.word	0x20000374
 8000e40:	7dc00000 	.word	0x7dc00000
 8000e44:	b6902000 	.word	0xb6902000
 8000e48:	0017ffff 	.word	0x0017ffff

08000e4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f01d f93c 	bl	801e0e2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <MX_ADC3_Init+0xec>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eb2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed8:	f005 fe94 	bl	8006c04 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ee2:	f003 fe0c 	bl	8004afe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ef2:	f007 fd23 	bl	800893c <HAL_ADCEx_MultiModeConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000efc:	f003 fdff 	bl	8004afe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_ADC3_Init+0xf0>)
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0c:	237f      	movs	r3, #127	; 0x7f
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000f1e:	f006 fbd3 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000f28:	f003 fde9 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200003e0 	.word	0x200003e0
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	b6982000 	.word	0xb6982000

08000f40 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f01d f8c8 	bl	801e0e2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_ADC4_Init+0xc8>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f9a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fc0:	f005 fe20 	bl	8006c04 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f003 fd98 	bl	8004afe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC4_Init+0xcc>)
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	237f      	movs	r3, #127	; 0x7f
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fec:	f006 fb6c 	bl	80076c8 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000ff6:	f003 fd82 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000044c 	.word	0x2000044c
 8001008:	50000500 	.word	0x50000500
 800100c:	c75a0000 	.word	0xc75a0000

08001010 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f01d f860 	bl	801e0e2 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_ADC5_Init+0xc8>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800104a:	2204      	movs	r2, #4
 800104c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800106a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001090:	f005 fdb8 	bl	8006c04 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800109a:	f003 fd30 	bl	8004afe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC5_Init+0xcc>)
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010aa:	237f      	movs	r3, #127	; 0x7f
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_ADC5_Init+0xc4>)
 80010bc:	f006 fb04 	bl	80076c8 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80010c6:	f003 fd1a 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004b8 	.word	0x200004b8
 80010d8:	50000600 	.word	0x50000600
 80010dc:	8c900008 	.word	0x8c900008

080010e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f01c fff6 	bl	801e0e2 <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d14f      	bne.n	80011a0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001106:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f00a f849 	bl	800b1a8 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800111c:	f003 fcef 	bl	8004afe <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a74      	ldr	r2, [pc, #464]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_ADC_MspInit+0x220>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001140:	2205      	movs	r2, #5
 8001142:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001168:	2220      	movs	r2, #32
 800116a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	4862      	ldr	r0, [pc, #392]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001174:	f008 f9b4 	bl	80094e0 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800117e:	f003 fcbe 	bl	8004afe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2012      	movs	r0, #18
 8001194:	f007 fdb5 	bl	8008d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f007 fdcc 	bl	8008d36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800119e:	e114      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_ADC_MspInit+0x224>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d150      	bne.n	800124c <HAL_ADC_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f009 fff4 	bl	800b1a8 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_ADC_MspInit+0xea>
      Error_Handler();
 80011c6:	f003 fc9a 	bl	8004afe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    hdma_adc3.Instance = DMA1_Channel5;
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_ADC_MspInit+0x230>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011fc:	2225      	movs	r2, #37	; 0x25
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001224:	2220      	movs	r2, #32
 8001226:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800122e:	4837      	ldr	r0, [pc, #220]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001230:	f008 f956 	bl	80094e0 <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x15e>
      Error_Handler();
 800123a:	f003 fc60 	bl	8004afe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
}
 800124a:	e0be      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_ADC_MspInit+0x234>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d164      	bne.n	8001320 <HAL_ADC_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800125c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f009 ff9e 	bl	800b1a8 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8001272:	f003 fc44 	bl	8004afe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_ADC_MspInit+0x228>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x1c0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel6;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_ADC_MspInit+0x23c>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a8:	2226      	movs	r2, #38	; 0x26
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012dc:	f008 f900 	bl	80094e0 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 80012e6:	f003 fc0a 	bl	8004afe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012f6:	e068      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	20000524 	.word	0x20000524
 8001300:	4002001c 	.word	0x4002001c
 8001304:	50000400 	.word	0x50000400
 8001308:	200006a4 	.word	0x200006a4
 800130c:	20000584 	.word	0x20000584
 8001310:	40020058 	.word	0x40020058
 8001314:	50000500 	.word	0x50000500
 8001318:	200005e4 	.word	0x200005e4
 800131c:	4002006c 	.word	0x4002006c
  else if(adcHandle->Instance==ADC5)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <HAL_ADC_MspInit+0x2f4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14f      	bne.n	80013ca <HAL_ADC_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001334:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4618      	mov	r0, r3
 800133c:	f009 ff34 	bl	800b1a8 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0x26a>
      Error_Handler();
 8001346:	f003 fbda 	bl	8004afe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x294>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel7;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_ADC_MspInit+0x304>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800137c:	2227      	movs	r2, #39	; 0x27
 800137e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013b0:	f008 f896 	bl	80094e0 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_ADC_MspInit+0x2de>
      Error_Handler();
 80013ba:	f003 fba0 	bl	8004afe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	3770      	adds	r7, #112	; 0x70
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	50000600 	.word	0x50000600
 80013d8:	200006a4 	.word	0x200006a4
 80013dc:	40021000 	.word	0x40021000
 80013e0:	20000644 	.word	0x20000644
 80013e4:	40020080 	.word	0x40020080

080013e8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f01c fe74 	bl	801e0e2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_DAC1_Init+0x80>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <MX_DAC1_Init+0x84>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <MX_DAC1_Init+0x80>)
 8001402:	f007 fcb2 	bl	8008d6a <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f003 fb77 	bl	8004afe <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001410:	2302      	movs	r3, #2
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001420:	2322      	movs	r3, #34	; 0x22
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_DAC1_Init+0x80>)
 800143c:	f007 fe1e 	bl	800907c <HAL_DAC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001446:	f003 fb5a 	bl	8004afe <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2210      	movs	r2, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_DAC1_Init+0x80>)
 8001452:	f007 fe13 	bl	800907c <HAL_DAC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800145c:	f003 fb4f 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200006a8 	.word	0x200006a8
 800146c:	50000800 	.word	0x50000800

08001470 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f01c fe30 	bl	801e0e2 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_DAC2_Init+0x6c>)
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <MX_DAC2_Init+0x70>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_DAC2_Init+0x6c>)
 800148a:	f007 fc6e 	bl	8008d6a <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001494:	f003 fb33 	bl	8004afe <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001498:	2302      	movs	r3, #2
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_DAC2_Init+0x6c>)
 80014c4:	f007 fdda 	bl	800907c <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80014ce:	f003 fb16 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200006bc 	.word	0x200006bc
 80014e0:	50000c00 	.word	0x50000c00

080014e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DAC_MspInit+0x178>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d17b      	bne.n	80015fe <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2330      	movs	r3, #48	; 0x30
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f008 fafa 	bl	8009b44 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001552:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_DAC_MspInit+0x184>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001558:	2206      	movs	r2, #6
 800155a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800155e:	2210      	movs	r2, #16
 8001560:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800158c:	f007 ffa8 	bl	80094e0 <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001596:	f003 fab2 	bl	8004afe <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_DAC_MspInit+0x180>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DAC_MspInit+0x18c>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015e2:	f007 ff7d 	bl	80094e0 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80015ec:	f003 fa87 	bl	8004afe <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015fc:	e029      	b.n	8001652 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_DAC_MspInit+0x190>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f008 fa79 	bl	8009b44 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50000800 	.word	0x50000800
 8001660:	40021000 	.word	0x40021000
 8001664:	200006d0 	.word	0x200006d0
 8001668:	40020030 	.word	0x40020030
 800166c:	20000730 	.word	0x20000730
 8001670:	40020044 	.word	0x40020044
 8001674:	50000c00 	.word	0x50000c00

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_DMA_Init+0xb0>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_DMA_Init+0xb0>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_DMA_Init+0xb0>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_DMA_Init+0xb0>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_DMA_Init+0xb0>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	; 0x48
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_DMA_Init+0xb0>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f007 fb25 	bl	8008d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f007 fb3c 	bl	8008d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200c      	movs	r0, #12
 80016c4:	f007 fb1d 	bl	8008d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f007 fb34 	bl	8008d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200d      	movs	r0, #13
 80016d4:	f007 fb15 	bl	8008d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d8:	200d      	movs	r0, #13
 80016da:	f007 fb2c 	bl	8008d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200e      	movs	r0, #14
 80016e4:	f007 fb0d 	bl	8008d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f007 fb24 	bl	8008d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200f      	movs	r0, #15
 80016f4:	f007 fb05 	bl	8008d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f007 fb1c 	bl	8008d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2010      	movs	r0, #16
 8001704:	f007 fafd 	bl	8008d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f007 fb14 	bl	8008d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2011      	movs	r0, #17
 8001714:	f007 faf5 	bl	8008d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f007 fb0c 	bl	8008d36 <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f01c fcd2 	bl	801e0e2 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001740:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001744:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <MX_FMC_Init+0xd0>)
 800174a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_FMC_Init+0xcc>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_FMC_Init+0xcc>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001760:	2210      	movs	r2, #16
 8001762:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_FMC_Init+0xcc>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_FMC_Init+0xcc>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001792:	2200      	movs	r2, #0
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_FMC_Init+0xcc>)
 800179e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80017b8:	230f      	movs	r3, #15
 80017ba:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80017bc:	230f      	movs	r3, #15
 80017be:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 15;
 80017c0:	230f      	movs	r3, #15
 80017c2:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80017c8:	230f      	movs	r3, #15
 80017ca:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80017cc:	2310      	movs	r3, #16
 80017ce:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017d0:	2311      	movs	r3, #17
 80017d2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017e0:	f00a fb52 	bl	800be88 <HAL_SRAM_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_FMC_Init+0xc2>
  {
    Error_Handler( );
 80017ea:	f003 f988 	bl	8004afe <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000790 	.word	0x20000790
 80017fc:	a0000104 	.word	0xa0000104

08001800 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d13f      	bne.n	800189c <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6513      	str	r3, [r2, #80]	; 0x50
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184c:	230c      	movs	r3, #12
 800184e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <HAL_FMC_MspInit+0xac>)
 8001856:	f008 f975 	bl	8009b44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800185a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800185e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186c:	230c      	movs	r3, #12
 800186e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <HAL_FMC_MspInit+0xb0>)
 8001876:	f008 f965 	bl	8009b44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800187a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800187e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188c:	230c      	movs	r3, #12
 800188e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_FMC_MspInit+0xb4>)
 8001896:	f008 f955 	bl	8009b44 <HAL_GPIO_Init>
 800189a:	e000      	b.n	800189e <HAL_FMC_MspInit+0x9e>
    return;
 800189c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200007e8 	.word	0x200007e8
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48001400 	.word	0x48001400
 80018b0:	48001000 	.word	0x48001000
 80018b4:	48000c00 	.word	0x48000c00

080018b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018c0:	f7ff ff9e 	bl	8001800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a24      	ldr	r2, [pc, #144]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f248 3104 	movw	r1, #33540	; 0x8304
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f008 fa64 	bl	8009e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001980:	f248 3304 	movw	r3, #33540	; 0x8304
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f008 f8d2 	bl	8009b44 <HAL_GPIO_Init>

}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019d4:	e000      	b.n	80019d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f9      	beq.n	80019d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80019e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffc9 	bl	80019ac <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
    return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <get_systick>:

int32_t get_systick()
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <get_systick+0x14>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <diff_systick>:

int32_t diff_systick( int32_t b, int32_t a )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	int d = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
	if( b < a )
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da04      	bge.n	8001a6c <diff_systick+0x20>
	{
	  d = a-b;
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e006      	b.n	8001a7a <diff_systick+0x2e>
	}
	else
	{
	  d = a+(SysTick->LOAD-b);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <diff_systick+0x3c>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
	}
	return d;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <text_width_f>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color );
tRectangle get_char_rect( const tFont *pFont, uint8_t c );
tRectangle get_text_rect( const tFont *pFont, char *pString );

float text_width_f( nk_handle handle, float h, const char* t, int len )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a98:	6079      	str	r1, [r7, #4]
 8001a9a:	603a      	str	r2, [r7, #0]

	return get_text_rect( &fontUbuntuBookRNormal16, t ).width;
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <text_width_f+0x34>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fc30 	bl	800230a <get_text_rect>
 8001aaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	08022c78 	.word	0x08022c78

08001ac4 <lcd_config>:

void lcd_config( void );
void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color );

void lcd_config( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET );
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f008 f9b8 	bl	8009e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f008 f9b1 	bl	8009e48 <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f004 fcdc 	bl	80064a4 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_SET );
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f008 f9a7 	bl	8009e48 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	f004 fcd2 	bl	80064a4 <HAL_Delay>

	*addr_cmd = 0x01;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <lcd_config+0xa0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 100 );
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f004 fccb 	bl	80064a4 <HAL_Delay>
	*addr_cmd = 0x11;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <lcd_config+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2211      	movs	r2, #17
 8001b14:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b16:	200a      	movs	r0, #10
 8001b18:	f004 fcc4 	bl	80064a4 <HAL_Delay>
	*addr_cmd = 0x3A;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <lcd_config+0xa0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	223a      	movs	r2, #58	; 0x3a
 8001b22:	801a      	strh	r2, [r3, #0]
	*addr_data = 0x06;//0x05;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <lcd_config+0xa4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2206      	movs	r2, #6
 8001b2a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x36;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <lcd_config+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2236      	movs	r2, #54	; 0x36
 8001b32:	801a      	strh	r2, [r3, #0]
	*addr_data = (0x01<<5)|(0x01<<6)|(0x01<<7);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <lcd_config+0xa4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22e0      	movs	r2, #224	; 0xe0
 8001b3a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x29;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <lcd_config+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2229      	movs	r2, #41	; 0x29
 8001b42:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b44:	200a      	movs	r0, #10
 8001b46:	f004 fcad 	bl	80064a4 <HAL_Delay>

	lcd_rect( 0, 0, 480, 320, 0x0000 );
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 f867 	bl	8001c2c <lcd_rect>
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <nk_colot_to_rgb666>:

uint32_t nk_colot_to_rgb666( struct nk_color color )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	uint32_t rgb666 = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]

	color.r = (color.r*color.a)/256.0;
 8001b78:	793b      	ldrb	r3, [r7, #4]
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcf7 	bl	8000574 <__aeabi_i2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001b8c:	f7fe fe86 	bl	800089c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f82e 	bl	8000bf8 <__aeabi_d2uiz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	713b      	strb	r3, [r7, #4]
	color.g = (color.g*color.a)/256.0;
 8001ba2:	797b      	ldrb	r3, [r7, #5]
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fce2 	bl	8000574 <__aeabi_i2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001bb6:	f7fe fe71 	bl	800089c <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff f819 	bl	8000bf8 <__aeabi_d2uiz>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	717b      	strb	r3, [r7, #5]
	color.b = (color.b*color.a)/256.0;
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fccd 	bl	8000574 <__aeabi_i2d>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001be0:	f7fe fe5c 	bl	800089c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff f804 	bl	8000bf8 <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	71bb      	strb	r3, [r7, #6]

	color.r >>= 2;
 8001bf6:	793b      	ldrb	r3, [r7, #4]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	713b      	strb	r3, [r7, #4]
	color.g >>= 2;
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	717b      	strb	r3, [r7, #5]
	color.b >>= 2;
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	71bb      	strb	r3, [r7, #6]
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	031a      	lsls	r2, r3, #12
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	4313      	orrs	r3, r2
 8001c18:	79ba      	ldrb	r2, [r7, #6]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
	return rgb666;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40700000 	.word	0x40700000

08001c2c <lcd_rect>:

void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color )
{
 8001c2c:	b490      	push	{r4, r7}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y0 = y;
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t x1 = x + w - 1;
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t y1 = y + h - 1;
 8001c60:	88ba      	ldrh	r2, [r7, #4]
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	843b      	strh	r3, [r7, #32]

	if( x0 < 0 )
 8001c6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da02      	bge.n	8001c7c <lcd_rect+0x50>
	{
		x0 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c7a:	e007      	b.n	8001c8c <lcd_rect+0x60>
	}
	else if( x0 > 480 - 1 )
 8001c7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c80:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c84:	db02      	blt.n	8001c8c <lcd_rect+0x60>
	{
		x0 = 480 - 1;
 8001c86:	f240 13df 	movw	r3, #479	; 0x1df
 8001c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	if( x1 < 0 )
 8001c8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da02      	bge.n	8001c9a <lcd_rect+0x6e>
	{
		x1 = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c98:	e007      	b.n	8001caa <lcd_rect+0x7e>
	}
	else if( x1 > 480 - 1 )
 8001c9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c9e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ca2:	db02      	blt.n	8001caa <lcd_rect+0x7e>
	{
		x1 = 480 - 1;
 8001ca4:	f240 13df 	movw	r3, #479	; 0x1df
 8001ca8:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 < 0 )
 8001caa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da02      	bge.n	8001cb8 <lcd_rect+0x8c>
	{
		y0 = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001cb6:	e007      	b.n	8001cc8 <lcd_rect+0x9c>
	}
	else if( y0 > 320 - 1 )
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cc0:	db02      	blt.n	8001cc8 <lcd_rect+0x9c>
	{
		y0 = 320 - 1;
 8001cc2:	f240 133f 	movw	r3, #319	; 0x13f
 8001cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( y1 < 0 )
 8001cc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da02      	bge.n	8001cd6 <lcd_rect+0xaa>
	{
		y1 = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	843b      	strh	r3, [r7, #32]
 8001cd4:	e007      	b.n	8001ce6 <lcd_rect+0xba>
	}
	else if( y1 > 320 - 1 )
 8001cd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001cda:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cde:	db02      	blt.n	8001ce6 <lcd_rect+0xba>
	{
		y1 = 320 - 1;
 8001ce0:	f240 133f 	movw	r3, #319	; 0x13f
 8001ce4:	843b      	strh	r3, [r7, #32]
	}

	if( x0 > x1 )
 8001ce6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001cea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dd06      	ble.n	8001d00 <lcd_rect+0xd4>
	{
		int tmp = x0;
 8001cf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001cf6:	61bb      	str	r3, [r7, #24]
		x0 = x1;
 8001cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
		x1 = tmp;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 > y1 )
 8001d00:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001d04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dd06      	ble.n	8001d1a <lcd_rect+0xee>
	{
		int tmp = y0;
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d10:	617b      	str	r3, [r7, #20]
		y0 = y1;
 8001d12:	8c3b      	ldrh	r3, [r7, #32]
 8001d14:	84bb      	strh	r3, [r7, #36]	; 0x24
		y1 = tmp;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	843b      	strh	r3, [r7, #32]
	}

	w = x1 - x0 + 1;
 8001d1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8001d28:	8c3a      	ldrh	r2, [r7, #32]
 8001d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
	uint32_t n = w*h;
 8001d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	613b      	str	r3, [r7, #16]

	uint16_t color_l = (color>>0)&0x1FF;
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	0a5b      	lsrs	r3, r3, #9
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5c:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <lcd_rect+0x1dc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	222a      	movs	r2, #42	; 0x2a
 8001d64:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001d66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <lcd_rect+0x1e0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a12      	lsrs	r2, r2, #8
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001d72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <lcd_rect+0x1e0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001d7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <lcd_rect+0x1e0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0a12      	lsrs	r2, r2, #8
 8001d86:	b292      	uxth	r2, r2
 8001d88:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001d8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <lcd_rect+0x1e0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	b292      	uxth	r2, r2
 8001d94:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <lcd_rect+0x1dc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	222b      	movs	r2, #43	; 0x2b
 8001d9c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <lcd_rect+0x1e0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0a12      	lsrs	r2, r2, #8
 8001da6:	b292      	uxth	r2, r2
 8001da8:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <lcd_rect+0x1e0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	b292      	uxth	r2, r2
 8001db4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001db6:	8c3a      	ldrh	r2, [r7, #32]
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <lcd_rect+0x1e0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0a12      	lsrs	r2, r2, #8
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001dc2:	8c3a      	ldrh	r2, [r7, #32]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <lcd_rect+0x1e0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <lcd_rect+0x1dc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	222c      	movs	r2, #44	; 0x2c
 8001dd4:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e00a      	b.n	8001df2 <lcd_rect+0x1c6>
	{
		*addr_data = color_l;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <lcd_rect+0x1e0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	89fa      	ldrh	r2, [r7, #14]
 8001de2:	801a      	strh	r2, [r3, #0]
		*addr_data = color_h;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <lcd_rect+0x1e0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	89ba      	ldrh	r2, [r7, #12]
 8001dea:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f0      	bcc.n	8001ddc <lcd_rect+0x1b0>
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <lcd_set_pixel>:

void lcd_set_pixel( int16_t x, int16_t y, uint32_t color )
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	603a      	str	r2, [r7, #0]
 8001e1a:	80fb      	strh	r3, [r7, #6]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	80bb      	strh	r3, [r7, #4]
	int16_t x0 = x;
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	82fb      	strh	r3, [r7, #22]
	int16_t y0 = y;
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	82bb      	strh	r3, [r7, #20]
	int16_t x1 = x + 1;
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	827b      	strh	r3, [r7, #18]
	int16_t y1 = y + 1;
 8001e30:	88bb      	ldrh	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	823b      	strh	r3, [r7, #16]
	uint16_t color_l = (color>>0)&0x1FF;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e40:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4c:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	222a      	movs	r2, #42	; 0x2a
 8001e54:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001e56:	8afa      	ldrh	r2, [r7, #22]
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0a12      	lsrs	r2, r2, #8
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001e62:	8afa      	ldrh	r2, [r7, #22]
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001e6e:	8a7a      	ldrh	r2, [r7, #18]
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0a12      	lsrs	r2, r2, #8
 8001e76:	b292      	uxth	r2, r2
 8001e78:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001e7a:	8a7a      	ldrh	r2, [r7, #18]
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	b292      	uxth	r2, r2
 8001e84:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	222b      	movs	r2, #43	; 0x2b
 8001e8c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001e8e:	8aba      	ldrh	r2, [r7, #20]
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0a12      	lsrs	r2, r2, #8
 8001e96:	b292      	uxth	r2, r2
 8001e98:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001e9a:	8aba      	ldrh	r2, [r7, #20]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001ea6:	8a3a      	ldrh	r2, [r7, #16]
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0a12      	lsrs	r2, r2, #8
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001eb2:	8a3a      	ldrh	r2, [r7, #16]
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	222c      	movs	r2, #44	; 0x2c
 8001ec4:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	89fa      	ldrh	r2, [r7, #14]
 8001ecc:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	89ba      	ldrh	r2, [r7, #12]
 8001ed4:	801a      	strh	r2, [r3, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <lcd_set_pixel_bench>:


int32_t lcd_set_pixel_bench( int16_t x, int16_t y, uint32_t color )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	603a      	str	r2, [r7, #0]
 8001ef6:	80fb      	strh	r3, [r7, #6]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	80bb      	strh	r3, [r7, #4]
	int32_t a, b, d;
	int16_t x0 = x;
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + 4;
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	3304      	adds	r3, #4
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + 4;
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	833b      	strh	r3, [r7, #24]
	uint16_t color_l = (color>>0)&0x1FF;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	82fb      	strh	r3, [r7, #22]
	uint16_t color_h = (color>>9)&0x1FF;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	0a5b      	lsrs	r3, r3, #9
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f28:	82bb      	strh	r3, [r7, #20]

	*addr_cmd = 0x2A;
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	222a      	movs	r2, #42	; 0x2a
 8001f30:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001f32:	8bfa      	ldrh	r2, [r7, #30]
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0a12      	lsrs	r2, r2, #8
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001f3e:	8bfa      	ldrh	r2, [r7, #30]
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	b292      	uxth	r2, r2
 8001f48:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001f4a:	8b7a      	ldrh	r2, [r7, #26]
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0a12      	lsrs	r2, r2, #8
 8001f52:	b292      	uxth	r2, r2
 8001f54:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001f56:	8b7a      	ldrh	r2, [r7, #26]
 8001f58:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	222b      	movs	r2, #43	; 0x2b
 8001f68:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001f6a:	8bba      	ldrh	r2, [r7, #28]
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0a12      	lsrs	r2, r2, #8
 8001f72:	b292      	uxth	r2, r2
 8001f74:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001f76:	8bba      	ldrh	r2, [r7, #28]
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001f82:	8b3a      	ldrh	r2, [r7, #24]
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0a12      	lsrs	r2, r2, #8
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001f8e:	8b3a      	ldrh	r2, [r7, #24]
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]

	a = get_systick();
 8001f9a:	f7ff fd4b 	bl	8001a34 <get_systick>
 8001f9e:	6138      	str	r0, [r7, #16]
	*addr_cmd = 0x2C;
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	222c      	movs	r2, #44	; 0x2c
 8001fa6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	8afa      	ldrh	r2, [r7, #22]
 8001fae:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fb0:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	8aba      	ldrh	r2, [r7, #20]
 8001fb6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	8afa      	ldrh	r2, [r7, #22]
 8001fbe:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	8aba      	ldrh	r2, [r7, #20]
 8001fc6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	8afa      	ldrh	r2, [r7, #22]
 8001fce:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	8aba      	ldrh	r2, [r7, #20]
 8001fd6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	8aba      	ldrh	r2, [r7, #20]
 8001fe6:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	8afa      	ldrh	r2, [r7, #22]
 8001fee:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	8aba      	ldrh	r2, [r7, #20]
 8001ff6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	8aba      	ldrh	r2, [r7, #20]
 8002006:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	8afa      	ldrh	r2, [r7, #22]
 800200e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	8aba      	ldrh	r2, [r7, #20]
 8002016:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	8afa      	ldrh	r2, [r7, #22]
 800201e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	8aba      	ldrh	r2, [r7, #20]
 8002026:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	8afa      	ldrh	r2, [r7, #22]
 800202e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	8aba      	ldrh	r2, [r7, #20]
 8002036:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	8afa      	ldrh	r2, [r7, #22]
 800203e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	8aba      	ldrh	r2, [r7, #20]
 8002046:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	8afa      	ldrh	r2, [r7, #22]
 800204e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	8aba      	ldrh	r2, [r7, #20]
 8002056:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	8afa      	ldrh	r2, [r7, #22]
 800205e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	8aba      	ldrh	r2, [r7, #20]
 8002066:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	8afa      	ldrh	r2, [r7, #22]
 800206e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	8aba      	ldrh	r2, [r7, #20]
 8002076:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	8afa      	ldrh	r2, [r7, #22]
 800207e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	8aba      	ldrh	r2, [r7, #20]
 8002086:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	8afa      	ldrh	r2, [r7, #22]
 800208e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	8aba      	ldrh	r2, [r7, #20]
 8002096:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	8afa      	ldrh	r2, [r7, #22]
 800209e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	8aba      	ldrh	r2, [r7, #20]
 80020a6:	801a      	strh	r2, [r3, #0]
	b = get_systick();
 80020a8:	f7ff fcc4 	bl	8001a34 <get_systick>
 80020ac:	60f8      	str	r0, [r7, #12]
	d = diff_systick(b,a);
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fccb 	bl	8001a4c <diff_systick>
 80020b6:	60b8      	str	r0, [r7, #8]
	return d;
 80020b8:	68bb      	ldr	r3, [r7, #8]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <lcd_text>:
void lcd_text( const tFramebuf *fb, uint16_t x0, uint16_t y0, char *str, uint32_t color )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	4613      	mov	r3, r2
 80020dc:	813b      	strh	r3, [r7, #8]
	for(; *str; ++str) {
 80020de:	e02a      	b.n	8002136 <lcd_text+0x6a>
	        // get char and make sure its in range of font
	        int chr = *(uint8_t *)str;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	61fb      	str	r3, [r7, #28]
	        if (chr < 32 || chr > 127) {
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b1f      	cmp	r3, #31
 80020ea:	dd02      	ble.n	80020f2 <lcd_text+0x26>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b7f      	cmp	r3, #127	; 0x7f
 80020f0:	dd01      	ble.n	80020f6 <lcd_text+0x2a>
	            chr = 127;
 80020f2:	237f      	movs	r3, #127	; 0x7f
 80020f4:	61fb      	str	r3, [r7, #28]
	        }
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
 80020f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80020fa:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002104:	9201      	str	r2, [sp, #4]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4603      	mov	r3, r0
 800210a:	460a      	mov	r2, r1
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <lcd_text+0x7c>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f81c 	bl	800214c <draw_char>
	        x0 += get_char_rect( &fontUbuntuBookRNormal16, chr ).width;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	490a      	ldr	r1, [pc, #40]	; (8002148 <lcd_text+0x7c>)
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f8c9 	bl	80022b6 <get_char_rect>
 8002124:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002128:	b29a      	uxth	r2, r3
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	4413      	add	r3, r2
 800212e:	817b      	strh	r3, [r7, #10]
	for(; *str; ++str) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1d0      	bne.n	80020e0 <lcd_text+0x14>
	}
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	08022c78 	.word	0x08022c78

0800214c <draw_char>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	; 0x30
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	460b      	mov	r3, r1
 800215c:	80fb      	strh	r3, [r7, #6]
 800215e:	4613      	mov	r3, r2
 8002160:	80bb      	strh	r3, [r7, #4]
    int16_t x, y, w, bitmap, b;
    int16_t px, py;
    const tGlyph *pGlyph;

    pGlyph = pFont->pGlyphs[c-32];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800216a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800216e:	3b20      	subs	r3, #32
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61fb      	str	r3, [r7, #28]

    y0 += pFont->bbxh;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800217e:	b29a      	uxth	r2, r3
 8002180:	88bb      	ldrh	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	80bb      	strh	r3, [r7, #4]
    y0 -= pFont->descent;
 8002188:	88ba      	ldrh	r2, [r7, #4]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	79db      	ldrb	r3, [r3, #7]
 800218e:	b29b      	uxth	r3, r3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b29b      	uxth	r3, r3
 8002194:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxh;
 8002196:	88ba      	ldrh	r2, [r7, #4]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxy;
 80021a6:	88ba      	ldrh	r2, [r7, #4]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	80bb      	strh	r3, [r7, #4]

    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 80021b6:	2300      	movs	r3, #0
 80021b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021ba:	e06f      	b.n	800229c <draw_char+0x150>
    {
        py = y0+y;
 80021bc:	88ba      	ldrh	r2, [r7, #4]
 80021be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021c0:	4413      	add	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	837b      	strh	r3, [r7, #26]

        w = (pGlyph->bbxw-1)/8+1;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da00      	bge.n	80021d4 <draw_char+0x88>
 80021d2:	3307      	adds	r3, #7
 80021d4:	10db      	asrs	r3, r3, #3
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	833b      	strh	r3, [r7, #24]

        int16_t yw = y*w;
 80021de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021e0:	8b3b      	ldrh	r3, [r7, #24]
 80021e2:	fb12 f303 	smulbb	r3, r2, r3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	82fb      	strh	r3, [r7, #22]
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 80021ea:	2300      	movs	r3, #0
 80021ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021ee:	e047      	b.n	8002280 <draw_char+0x134>
        {
            bitmap = pGlyph->pBitmap[yw+x/8];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80021f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	da00      	bge.n	8002202 <draw_char+0xb6>
 8002200:	3307      	adds	r3, #7
 8002202:	10db      	asrs	r3, r3, #3
 8002204:	b21b      	sxth	r3, r3
 8002206:	440b      	add	r3, r1
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	82bb      	strh	r3, [r7, #20]

            for( b = 0 ; b < 8 ; b++ )
 800220e:	2300      	movs	r3, #0
 8002210:	847b      	strh	r3, [r7, #34]	; 0x22
 8002212:	e02b      	b.n	800226c <draw_char+0x120>
            {
                if( x+b >= pGlyph->bbxw )
 8002214:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002218:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800221c:	4413      	add	r3, r2
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	f992 2009 	ldrsb.w	r2, [r2, #9]
 8002224:	4293      	cmp	r3, r2
 8002226:	da26      	bge.n	8002276 <draw_char+0x12a>
                {
                    break;
                }

                px = x0+x+b;
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002232:	4413      	add	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	827b      	strh	r3, [r7, #18]

                if( bitmap & (0x80>>b) )
 8002238:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800223c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	fa41 f303 	asr.w	r3, r1, r3
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <draw_char+0x114>
                {
                    //set_pixel( px, py, color );
                    //lcd_rect( px, py, 1, 1, color);
                	setpixel_checked(fb, px, py, color, 1);
 800224c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002250:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	2001      	movs	r0, #1
 8002258:	9000      	str	r0, [sp, #0]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f00b fae6 	bl	800d82c <setpixel_checked>
            for( b = 0 ; b < 8 ; b++ )
 8002260:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002264:	b29b      	uxth	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	b29b      	uxth	r3, r3
 800226a:	847b      	strh	r3, [r7, #34]	; 0x22
 800226c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002270:	2b07      	cmp	r3, #7
 8002272:	ddcf      	ble.n	8002214 <draw_char+0xc8>
 8002274:	e000      	b.n	8002278 <draw_char+0x12c>
                    break;
 8002276:	bf00      	nop
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 8002278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800227a:	3308      	adds	r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002286:	b21b      	sxth	r3, r3
 8002288:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800228c:	429a      	cmp	r2, r3
 800228e:	dbaf      	blt.n	80021f0 <draw_char+0xa4>
    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 8002290:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002294:	b29b      	uxth	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80022a8:	429a      	cmp	r2, r3
 80022aa:	db87      	blt.n	80021bc <draw_char+0x70>
                }
            }
        }
    }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <get_char_rect>:


tRectangle get_char_rect( const tFont *pFont, uint8_t c )
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
    tRectangle rect = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]

    rect.width = pFont->pGlyphs[c-32]->dwidthx;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d8:	3b20      	subs	r3, #32
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	79db      	ldrb	r3, [r3, #7]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	82bb      	strh	r3, [r7, #20]
    rect.height = pFont->bbxh;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	82fb      	strh	r3, [r7, #22]
    return rect;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	cb03      	ldmia	r3!, {r0, r1}
 80022fa:	6010      	str	r0, [r2, #0]
 80022fc:	6051      	str	r1, [r2, #4]
}
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <get_text_rect>:

tRectangle get_text_rect( const tFont *pFont, char *pString )
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08a      	sub	sp, #40	; 0x28
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
	uint8_t i;
	tRectangle rect = {0};
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]

	rect.height = pFont->bbxh;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002326:	b21b      	sxth	r3, r3
 8002328:	837b      	strh	r3, [r7, #26]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002330:	e019      	b.n	8002366 <get_text_rect+0x5c>
	{
		rect.width += get_char_rect( pFont, pString[i] ).width;
 8002332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffb7 	bl	80022b6 <get_char_rect>
 8002348:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800234c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002350:	b292      	uxth	r2, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	b21b      	sxth	r3, r3
 800235a:	833b      	strh	r3, [r7, #24]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	3301      	adds	r3, #1
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1de      	bne.n	8002332 <get_text_rect+0x28>
    }

    return rect;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	cb03      	ldmia	r3!, {r0, r1}
 800237e:	6010      	str	r0, [r2, #0]
 8002380:	6051      	str	r1, [r2, #4]
}
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <lcd_bmp>:
	        }
	    }
}

void lcd_bmp( int16_t x, int16_t y, int16_t w, int16_t h, uint8_t *buf )
{
 800238c:	b490      	push	{r4, r7}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	80fb      	strh	r3, [r7, #6]
 800239e:	4603      	mov	r3, r0
 80023a0:	80bb      	strh	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	4613      	mov	r3, r2
 80023a8:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + w - 1;
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4413      	add	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + h - 1;
 80023c0:	88ba      	ldrh	r2, [r7, #4]
 80023c2:	883b      	ldrh	r3, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	833b      	strh	r3, [r7, #24]

	if( x0 < 0 )
 80023ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da02      	bge.n	80023dc <lcd_bmp+0x50>
	{
		x0 = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	83fb      	strh	r3, [r7, #30]
 80023da:	e007      	b.n	80023ec <lcd_bmp+0x60>
	}
	else if( x0 > 480 - 1 )
 80023dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80023e4:	db02      	blt.n	80023ec <lcd_bmp+0x60>
	{
		x0 = 480 - 1;
 80023e6:	f240 13df 	movw	r3, #479	; 0x1df
 80023ea:	83fb      	strh	r3, [r7, #30]
	}

	if( x1 < 0 )
 80023ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	da02      	bge.n	80023fa <lcd_bmp+0x6e>
	{
		x1 = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	837b      	strh	r3, [r7, #26]
 80023f8:	e007      	b.n	800240a <lcd_bmp+0x7e>
	}
	else if( x1 > 480 - 1 )
 80023fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023fe:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002402:	db02      	blt.n	800240a <lcd_bmp+0x7e>
	{
		x1 = 480 - 1;
 8002404:	f240 13df 	movw	r3, #479	; 0x1df
 8002408:	837b      	strh	r3, [r7, #26]
	}

	if( y0 < 0 )
 800240a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	da02      	bge.n	8002418 <lcd_bmp+0x8c>
	{
		y0 = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	83bb      	strh	r3, [r7, #28]
 8002416:	e007      	b.n	8002428 <lcd_bmp+0x9c>
	}
	else if( y0 > 320 - 1 )
 8002418:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800241c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002420:	db02      	blt.n	8002428 <lcd_bmp+0x9c>
	{
		y0 = 320 - 1;
 8002422:	f240 133f 	movw	r3, #319	; 0x13f
 8002426:	83bb      	strh	r3, [r7, #28]
	}

	if( y1 < 0 )
 8002428:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	da02      	bge.n	8002436 <lcd_bmp+0xaa>
	{
		y1 = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	833b      	strh	r3, [r7, #24]
 8002434:	e007      	b.n	8002446 <lcd_bmp+0xba>
	}
	else if( y1 > 320 - 1 )
 8002436:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800243a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800243e:	db02      	blt.n	8002446 <lcd_bmp+0xba>
	{
		y1 = 320 - 1;
 8002440:	f240 133f 	movw	r3, #319	; 0x13f
 8002444:	833b      	strh	r3, [r7, #24]
	}

	if( x0 > x1 )
 8002446:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800244a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800244e:	429a      	cmp	r2, r3
 8002450:	dd06      	ble.n	8002460 <lcd_bmp+0xd4>
	{
		int tmp = x0;
 8002452:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002456:	613b      	str	r3, [r7, #16]
		x0 = x1;
 8002458:	8b7b      	ldrh	r3, [r7, #26]
 800245a:	83fb      	strh	r3, [r7, #30]
		x1 = tmp;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	837b      	strh	r3, [r7, #26]
	}

	if( y0 > y1 )
 8002460:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002464:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002468:	429a      	cmp	r2, r3
 800246a:	dd06      	ble.n	800247a <lcd_bmp+0xee>
	{
		int tmp = y0;
 800246c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002470:	60fb      	str	r3, [r7, #12]
		y0 = y1;
 8002472:	8b3b      	ldrh	r3, [r7, #24]
 8002474:	83bb      	strh	r3, [r7, #28]
		y1 = tmp;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	833b      	strh	r3, [r7, #24]
	}

	w = x1 - x0 + 1;
 800247a:	8b7a      	ldrh	r2, [r7, #26]
 800247c:	8bfb      	ldrh	r3, [r7, #30]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	b29b      	uxth	r3, r3
 8002482:	3301      	adds	r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8002488:	8b3a      	ldrh	r2, [r7, #24]
 800248a:	8bbb      	ldrh	r3, [r7, #28]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
	uint32_t n = w*h;
 800249a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800249e:	f9b7 2000 	ldrsh.w	r2, [r7]
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	60bb      	str	r3, [r7, #8]

	//uint16_t color_l = (color>>0)&0x1FF;
	//uint16_t color_h = (color>>9)&0x1FF;

	*addr_cmd = 0x2A;
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <lcd_bmp+0x1d8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	222a      	movs	r2, #42	; 0x2a
 80024ae:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 80024b0:	8bfa      	ldrh	r2, [r7, #30]
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <lcd_bmp+0x1dc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0a12      	lsrs	r2, r2, #8
 80024b8:	b292      	uxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 80024bc:	8bfa      	ldrh	r2, [r7, #30]
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <lcd_bmp+0x1dc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 80024c8:	8b7a      	ldrh	r2, [r7, #26]
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <lcd_bmp+0x1dc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0a12      	lsrs	r2, r2, #8
 80024d0:	b292      	uxth	r2, r2
 80024d2:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 80024d4:	8b7a      	ldrh	r2, [r7, #26]
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <lcd_bmp+0x1dc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	b292      	uxth	r2, r2
 80024de:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <lcd_bmp+0x1d8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	222b      	movs	r2, #43	; 0x2b
 80024e6:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 80024e8:	8bba      	ldrh	r2, [r7, #28]
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <lcd_bmp+0x1dc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0a12      	lsrs	r2, r2, #8
 80024f0:	b292      	uxth	r2, r2
 80024f2:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 80024f4:	8bba      	ldrh	r2, [r7, #28]
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <lcd_bmp+0x1dc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	b292      	uxth	r2, r2
 80024fe:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8002500:	8b3a      	ldrh	r2, [r7, #24]
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <lcd_bmp+0x1dc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0a12      	lsrs	r2, r2, #8
 8002508:	b292      	uxth	r2, r2
 800250a:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 800250c:	8b3a      	ldrh	r2, [r7, #24]
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <lcd_bmp+0x1dc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	b292      	uxth	r2, r2
 8002516:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <lcd_bmp+0x1d8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	222c      	movs	r2, #44	; 0x2c
 800251e:	801a      	strh	r2, [r3, #0]
	for( i = n ; i ; i-- )
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e014      	b.n	8002550 <lcd_bmp+0x1c4>
	{
		*addr_data = *buf;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <lcd_bmp+0x1dc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b292      	uxth	r2, r2
 8002530:	801a      	strh	r2, [r3, #0]
		buf++;
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	3301      	adds	r3, #1
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
		*addr_data = *buf;
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <lcd_bmp+0x1dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b292      	uxth	r2, r2
 8002542:	801a      	strh	r2, [r3, #0]
		buf++;
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	3301      	adds	r3, #1
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
	for( i = n ; i ; i-- )
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3b01      	subs	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e7      	bne.n	8002526 <lcd_bmp+0x19a>
	}
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bc90      	pop	{r4, r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <oscilloscope_process>:
    nk_bool draw_bg;
    int draw_signals;
};
int visible = 0;
void oscilloscope_process(struct Oscilloscope *osc, struct nk_context *ctx)
{
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b0f6      	sub	sp, #472	; 0x1d8
 8002570:	af04      	add	r7, sp, #16
 8002572:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002576:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800257a:	6018      	str	r0, [r3, #0]
 800257c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002580:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002584:	6019      	str	r1, [r3, #0]
	visible = 0;
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <oscilloscope_process+0x1d0>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
	if( nk_begin(ctx, "STM32G4 Scope", nk_rect(0, 0, 480, 320), NK_WINDOW_MINIMIZABLE ) )
 800258c:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8002740 <oscilloscope_process+0x1d4>
 8002590:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8002744 <oscilloscope_process+0x1d8>
 8002594:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8002748 <oscilloscope_process+0x1dc>
 8002598:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002748 <oscilloscope_process+0x1dc>
 800259c:	f011 fc76 	bl	8013e8c <nk_rect>
 80025a0:	eeb0 6a40 	vmov.f32	s12, s0
 80025a4:	eef0 6a60 	vmov.f32	s13, s1
 80025a8:	eeb0 7a41 	vmov.f32	s14, s2
 80025ac:	eef0 7a61 	vmov.f32	s15, s3
 80025b0:	ed87 6a53 	vstr	s12, [r7, #332]	; 0x14c
 80025b4:	edc7 6a54 	vstr	s13, [r7, #336]	; 0x150
 80025b8:	ed87 7a55 	vstr	s14, [r7, #340]	; 0x154
 80025bc:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
 80025c0:	ed97 6a53 	vldr	s12, [r7, #332]	; 0x14c
 80025c4:	edd7 6a54 	vldr	s13, [r7, #336]	; 0x150
 80025c8:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 80025cc:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 80025d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80025d4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80025d8:	2210      	movs	r2, #16
 80025da:	eeb0 0a46 	vmov.f32	s0, s12
 80025de:	eef0 0a66 	vmov.f32	s1, s13
 80025e2:	eeb0 1a47 	vmov.f32	s2, s14
 80025e6:	eef0 1a67 	vmov.f32	s3, s15
 80025ea:	4958      	ldr	r1, [pc, #352]	; (800274c <oscilloscope_process+0x1e0>)
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	f01a f938 	bl	801c862 <nk_begin>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f001 84cf 	beq.w	8003f98 <oscilloscope_process+0x1a2c>
	{
		visible = 1;
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <oscilloscope_process+0x1d0>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
        osc->draw_bg = nk_true;
 8002600:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002604:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2201      	movs	r2, #1
 800260c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if( nk_tree_push( ctx, NK_TREE_TAB, "Acquire", NK_MAXIMIZED) ){
 8002610:	484f      	ldr	r0, [pc, #316]	; (8002750 <oscilloscope_process+0x1e4>)
 8002612:	f019 fae3 	bl	801bbdc <nk_strlen>
 8002616:	4603      	mov	r3, r0
 8002618:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800261c:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8002620:	f240 2267 	movw	r2, #615	; 0x267
 8002624:	9202      	str	r2, [sp, #8]
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	4b49      	ldr	r3, [pc, #292]	; (8002750 <oscilloscope_process+0x1e4>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	4a49      	ldr	r2, [pc, #292]	; (8002754 <oscilloscope_process+0x1e8>)
 8002630:	2101      	movs	r1, #1
 8002632:	6800      	ldr	r0, [r0, #0]
 8002634:	f019 f824 	bl	801b680 <nk_tree_push_hashed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80a5 	beq.w	800278a <oscilloscope_process+0x21e>
            osc->draw_bg = nk_false;
 8002640:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002644:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 60, 60, 60});
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <oscilloscope_process+0x1ec>)
 8002652:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8002656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800265c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002660:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002664:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8002668:	2204      	movs	r2, #4
 800266a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800266e:	2101      	movs	r1, #1
 8002670:	6800      	ldr	r0, [r0, #0]
 8002672:	f010 feb7 	bl	80133e4 <nk_layout_row>
            if (osc->acquire_run) {
 8002676:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800267a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <oscilloscope_process+0x140>
                if (nk_button_label(ctx, "Stop")) {
 8002686:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800268a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800268e:	4933      	ldr	r1, [pc, #204]	; (800275c <oscilloscope_process+0x1f0>)
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	f00c feb3 	bl	800f3fc <nk_button_label>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d019      	beq.n	80026d0 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_false;
 800269c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026a0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e011      	b.n	80026d0 <oscilloscope_process+0x164>
                }
            } else {
                if (nk_button_label(ctx, "Run")) {
 80026ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026b0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80026b4:	492a      	ldr	r1, [pc, #168]	; (8002760 <oscilloscope_process+0x1f4>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	f00c fea0 	bl	800f3fc <nk_button_label>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_true;
 80026c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
                }
            }

            if (nk_button_label(ctx, "Single")) {
 80026d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026d4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80026d8:	4922      	ldr	r1, [pc, #136]	; (8002764 <oscilloscope_process+0x1f8>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	f00c fe8e 	bl	800f3fc <nk_button_label>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <oscilloscope_process+0x188>
                osc->acquire_single = nk_true;
 80026e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	605a      	str	r2, [r3, #4]
            }

            if (nk_button_label(ctx, "Draw")) {
 80026f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026f8:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80026fc:	491a      	ldr	r1, [pc, #104]	; (8002768 <oscilloscope_process+0x1fc>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f00c fe7c 	bl	800f3fc <nk_button_label>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d038      	beq.n	800277c <oscilloscope_process+0x210>
                if (osc->draw_signals + 1 < 3) {
 800270a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800270e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002718:	2b01      	cmp	r3, #1
 800271a:	dc27      	bgt.n	800276c <oscilloscope_process+0x200>
                    osc->draw_signals += 1;
 800271c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002720:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002730:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800273a:	e01f      	b.n	800277c <oscilloscope_process+0x210>
 800273c:	200007ec 	.word	0x200007ec
 8002740:	43a00000 	.word	0x43a00000
 8002744:	43f00000 	.word	0x43f00000
 8002748:	00000000 	.word	0x00000000
 800274c:	08020d08 	.word	0x08020d08
 8002750:	08020d18 	.word	0x08020d18
 8002754:	08020d30 	.word	0x08020d30
 8002758:	08020e88 	.word	0x08020e88
 800275c:	08020d38 	.word	0x08020d38
 8002760:	08020d40 	.word	0x08020d40
 8002764:	08020d44 	.word	0x08020d44
 8002768:	08020d4c 	.word	0x08020d4c
                } else {
                    osc->draw_signals = 0;
 800276c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002770:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                }
            }
            nk_tree_pop(ctx);
 800277c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002780:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	f018 ff98 	bl	801b6ba <nk_tree_pop>
        }

        {
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Horizontal", NK_MINIMIZED) ){
 800278a:	48d8      	ldr	r0, [pc, #864]	; (8002aec <oscilloscope_process+0x580>)
 800278c:	f019 fa26 	bl	801bbdc <nk_strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002796:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 800279a:	f240 2283 	movw	r2, #643	; 0x283
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	4bd2      	ldr	r3, [pc, #840]	; (8002aec <oscilloscope_process+0x580>)
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	4ad1      	ldr	r2, [pc, #836]	; (8002af0 <oscilloscope_process+0x584>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f018 ff67 	bl	801b680 <nk_tree_push_hashed>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80f4 	beq.w	80029a2 <oscilloscope_process+0x436>
        		nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80027ba:	4bce      	ldr	r3, [pc, #824]	; (8002af4 <oscilloscope_process+0x588>)
 80027bc:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 80027c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027c6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80027ca:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80027ce:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80027d2:	2204      	movs	r2, #4
 80027d4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80027d8:	2101      	movs	r1, #1
 80027da:	6800      	ldr	r0, [r0, #0]
 80027dc:	f010 fe02 	bl	80133e4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_ALIGN_LEFT );
 80027e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80027e4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80027e8:	2201      	movs	r2, #1
 80027ea:	49c3      	ldr	r1, [pc, #780]	; (8002af8 <oscilloscope_process+0x58c>)
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	f018 fb01 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80027f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80027f6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80027fa:	2101      	movs	r1, #1
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	f00c fcf9 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002802:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002806:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800280a:	2109      	movs	r1, #9
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	f00c feab 	bl	800f568 <nk_button_symbol>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d011      	beq.n	800283c <oscilloscope_process+0x2d0>
        		{
        			osc->horizontal_offset -= 1;
 8002818:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800281c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	edd3 7a02 	vldr	s15, [r3, #8]
 8002826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800282a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800282e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002832:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	edc3 7a02 	vstr	s15, [r3, #8]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->horizontal_offset);
 800283c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002840:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fea5 	bl	8000598 <__aeabi_f2d>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	f107 000c 	add.w	r0, r7, #12
 8002856:	49a9      	ldr	r1, [pc, #676]	; (8002afc <oscilloscope_process+0x590>)
 8002858:	f01b fbe0 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 800285c:	f107 010c 	add.w	r1, r7, #12
 8002860:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002864:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002868:	2202      	movs	r2, #2
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f018 fac2 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002870:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002874:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002878:	2101      	movs	r1, #1
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f00c fcba 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002880:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002884:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002888:	210a      	movs	r1, #10
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f00c fe6c 	bl	800f568 <nk_button_symbol>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d011      	beq.n	80028ba <oscilloscope_process+0x34e>
        		{
        			osc->horizontal_offset += 1;
 8002896:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800289a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80028a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028b0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	edc3 7a02 	vstr	s15, [r3, #8]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_ALIGN_LEFT );
 80028ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028be:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028c2:	2201      	movs	r2, #1
 80028c4:	498e      	ldr	r1, [pc, #568]	; (8002b00 <oscilloscope_process+0x594>)
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	f018 fa94 	bl	801adf4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80028cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028d0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028d4:	2101      	movs	r1, #1
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f00c fc8c 	bl	800f1f4 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80028dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028e0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028e4:	2109      	movs	r1, #9
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f00c fe3e 	bl	800f568 <nk_button_symbol>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d011      	beq.n	8002916 <oscilloscope_process+0x3aa>
				{
					osc->horizontal_scale -= 1;
 80028f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002908:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800290c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->horizontal_scale);
 8002916:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800291a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe38 	bl	8000598 <__aeabi_f2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	f107 000c 	add.w	r0, r7, #12
 8002930:	4972      	ldr	r1, [pc, #456]	; (8002afc <oscilloscope_process+0x590>)
 8002932:	f01b fb73 	bl	801e01c <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8002936:	f107 010c 	add.w	r1, r7, #12
 800293a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800293e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002942:	2202      	movs	r2, #2
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	f018 fa55 	bl	801adf4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800294a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800294e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002952:	2101      	movs	r1, #1
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	f00c fc4d 	bl	800f1f4 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800295a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800295e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002962:	210a      	movs	r1, #10
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	f00c fdff 	bl	800f568 <nk_button_symbol>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d011      	beq.n	8002994 <oscilloscope_process+0x428>
				{
					osc->horizontal_scale += 1;
 8002970:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002974:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	edd3 7a03 	vldr	s15, [r3, #12]
 800297e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002986:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800298a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	edc3 7a03 	vstr	s15, [r3, #12]
				}
                nk_tree_pop(ctx);
 8002994:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002998:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	f018 fe8c 	bl	801b6ba <nk_tree_pop>
            }

        	if( nk_tree_push( ctx, NK_TREE_TAB, "Vertical", NK_MINIMIZED) ){
 80029a2:	4858      	ldr	r0, [pc, #352]	; (8002b04 <oscilloscope_process+0x598>)
 80029a4:	f019 f91a 	bl	801bbdc <nk_strlen>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80029ae:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80029b2:	f240 22a5 	movw	r2, #677	; 0x2a5
 80029b6:	9202      	str	r2, [sp, #8]
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <oscilloscope_process+0x598>)
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2300      	movs	r3, #0
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <oscilloscope_process+0x59c>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	6800      	ldr	r0, [r0, #0]
 80029c6:	f018 fe5b 	bl	801b680 <nk_tree_push_hashed>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8292 	beq.w	8002ef6 <oscilloscope_process+0x98a>
        		nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <oscilloscope_process+0x5a0>)
 80029d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029dc:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80029e0:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80029e4:	2201      	movs	r2, #1
 80029e6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80029ea:	2101      	movs	r1, #1
 80029ec:	6800      	ldr	r0, [r0, #0]
 80029ee:	f010 fcf9 	bl	80133e4 <nk_layout_row>
        		//nk_style_push_style_item(&ctx, &ctx->style.combo.button.text_background, nk_style_item_color(nk_rgb(255,0,0)));
        		osc->channel_selected = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->channel_selected, 30, nk_vec2(100, 160));
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <oscilloscope_process+0x5a4>)
 80029f4:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80029f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029fe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002a02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a0a:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002b14 <oscilloscope_process+0x5a8>
 8002a0e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002b18 <oscilloscope_process+0x5ac>
 8002a12:	f011 faed 	bl	8013ff0 <nk_vec2>
 8002a16:	eeb0 7a40 	vmov.f32	s14, s0
 8002a1a:	eef0 7a60 	vmov.f32	s15, s1
 8002a1e:	ed87 7a57 	vstr	s14, [r7, #348]	; 0x15c
 8002a22:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
 8002a26:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 8002a2a:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8002a2e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002a32:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002a36:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8002a3a:	231e      	movs	r3, #30
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a42:	eef0 0a67 	vmov.f32	s1, s15
 8002a46:	4623      	mov	r3, r4
 8002a48:	2204      	movs	r2, #4
 8002a4a:	6800      	ldr	r0, [r0, #0]
 8002a4c:	f00d fa8e 	bl	800ff6c <nk_combo>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002a56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
        		//nk_style_pop_style_item(&ctx);
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 8002a5e:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <oscilloscope_process+0x5b0>)
 8002a60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a68:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a70:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002a74:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8002a78:	2202      	movs	r2, #2
 8002a7a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002a7e:	2101      	movs	r1, #1
 8002a80:	6800      	ldr	r0, [r0, #0]
 8002a82:	f010 fcaf 	bl	80133e4 <nk_layout_row>
                osc->channels[osc->channel_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->channels[osc->channel_selected].enabled, 30, nk_vec2(100, 120));
 8002a86:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <oscilloscope_process+0x5b4>)
 8002a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a90:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a94:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002a98:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002aa4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3328      	adds	r3, #40	; 0x28
 8002ab6:	681d      	ldr	r5, [r3, #0]
 8002ab8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002b24 <oscilloscope_process+0x5b8>
 8002abc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002b18 <oscilloscope_process+0x5ac>
 8002ac0:	f011 fa96 	bl	8013ff0 <nk_vec2>
 8002ac4:	eeb0 7a40 	vmov.f32	s14, s0
 8002ac8:	eef0 7a60 	vmov.f32	s15, s1
 8002acc:	ed87 7a59 	vstr	s14, [r7, #356]	; 0x164
 8002ad0:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
 8002ad4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ad8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002ae0:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 8002ae4:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 8002ae8:	e01e      	b.n	8002b28 <oscilloscope_process+0x5bc>
 8002aea:	bf00      	nop
 8002aec:	08020d54 	.word	0x08020d54
 8002af0:	08020d6c 	.word	0x08020d6c
 8002af4:	08020e98 	.word	0x08020e98
 8002af8:	08020d78 	.word	0x08020d78
 8002afc:	08020d80 	.word	0x08020d80
 8002b00:	08020d88 	.word	0x08020d88
 8002b04:	08020d90 	.word	0x08020d90
 8002b08:	08020da8 	.word	0x08020da8
 8002b0c:	42c80000 	.word	0x42c80000
 8002b10:	08020eb8 	.word	0x08020eb8
 8002b14:	43200000 	.word	0x43200000
 8002b18:	42c80000 	.word	0x42c80000
 8002b1c:	08020ec8 	.word	0x08020ec8
 8002b20:	08020ed8 	.word	0x08020ed8
 8002b24:	42f00000 	.word	0x42f00000
 8002b28:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002b2c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b30:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8002b34:	231e      	movs	r3, #30
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3c:	eef0 0a67 	vmov.f32	s1, s15
 8002b40:	462b      	mov	r3, r5
 8002b42:	2202      	movs	r2, #2
 8002b44:	6800      	ldr	r0, [r0, #0]
 8002b46:	f00d fa11 	bl	800ff6c <nk_combo>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b50:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4623      	mov	r3, r4
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4423      	add	r3, r4
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3328      	adds	r3, #40	; 0x28
 8002b62:	6019      	str	r1, [r3, #0]
                osc->channels[osc->channel_selected].coupling = nk_combo(ctx, (const char*[]){"DC", "AC", "Gnd"}, 3, osc->channels[osc->channel_selected].coupling, 30, nk_vec2(100, 120));
 8002b64:	4ad9      	ldr	r2, [pc, #868]	; (8002ecc <oscilloscope_process+0x960>)
 8002b66:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b70:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b74:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b80:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	332c      	adds	r3, #44	; 0x2c
 8002b92:	681d      	ldr	r5, [r3, #0]
 8002b94:	eddf 0ace 	vldr	s1, [pc, #824]	; 8002ed0 <oscilloscope_process+0x964>
 8002b98:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8002ed4 <oscilloscope_process+0x968>
 8002b9c:	f011 fa28 	bl	8013ff0 <nk_vec2>
 8002ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ba4:	eef0 7a60 	vmov.f32	s15, s1
 8002ba8:	ed87 7a5b 	vstr	s14, [r7, #364]	; 0x16c
 8002bac:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
 8002bb0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002bb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002bbc:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 8002bc0:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 8002bc4:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002bc8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002bcc:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8002bd0:	231e      	movs	r3, #30
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd8:	eef0 0a67 	vmov.f32	s1, s15
 8002bdc:	462b      	mov	r3, r5
 8002bde:	2203      	movs	r2, #3
 8002be0:	6800      	ldr	r0, [r0, #0]
 8002be2:	f00d f9c3 	bl	800ff6c <nk_combo>
 8002be6:	4601      	mov	r1, r0
 8002be8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002bec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4423      	add	r3, r4
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	332c      	adds	r3, #44	; 0x2c
 8002bfe:	6019      	str	r1, [r3, #0]
                //osc->channels[osc->channel_selected].offset = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].offset, 10.0f, 1.0f);
                //osc->channels[osc->channel_selected].scale = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].scale, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002c00:	4bb5      	ldr	r3, [pc, #724]	; (8002ed8 <oscilloscope_process+0x96c>)
 8002c02:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8002c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c10:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002c14:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8002c18:	2204      	movs	r2, #4
 8002c1a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002c1e:	2101      	movs	r1, #1
 8002c20:	6800      	ldr	r0, [r0, #0]
 8002c22:	f010 fbdf 	bl	80133e4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_ALIGN_LEFT );
 8002c26:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c2a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002c2e:	2201      	movs	r2, #1
 8002c30:	49aa      	ldr	r1, [pc, #680]	; (8002edc <oscilloscope_process+0x970>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f018 f8de 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002c38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c3c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002c40:	2101      	movs	r1, #1
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f00c fad6 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002c48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c4c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002c50:	2109      	movs	r1, #9
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	f00c fc88 	bl	800f568 <nk_button_symbol>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d029      	beq.n	8002cb2 <oscilloscope_process+0x746>
        		{
        			osc->channels[osc->channel_selected].offset -= 1;
 8002c5e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c62:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c6e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3330      	adds	r3, #48	; 0x30
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c9c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3330      	adds	r3, #48	; 0x30
 8002cae:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].offset);
 8002cb2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002cb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002cc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3330      	adds	r3, #48	; 0x30
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc5e 	bl	8000598 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	f107 000c 	add.w	r0, r7, #12
 8002ce4:	497e      	ldr	r1, [pc, #504]	; (8002ee0 <oscilloscope_process+0x974>)
 8002ce6:	f01b f999 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8002cea:	f107 010c 	add.w	r1, r7, #12
 8002cee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002cf2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	f018 f87b 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002cfe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d02:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d06:	2101      	movs	r1, #1
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	f00c fa73 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002d0e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d12:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d16:	210a      	movs	r1, #10
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f00c fc25 	bl	800f568 <nk_button_symbol>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d029      	beq.n	8002d78 <oscilloscope_process+0x80c>
        		{
        			osc->channels[osc->channel_selected].offset += 1;
 8002d24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d28:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d34:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3330      	adds	r3, #48	; 0x30
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d5e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d62:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3330      	adds	r3, #48	; 0x30
 8002d74:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_ALIGN_LEFT );
 8002d78:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d7c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d80:	2201      	movs	r2, #1
 8002d82:	4958      	ldr	r1, [pc, #352]	; (8002ee4 <oscilloscope_process+0x978>)
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	f018 f835 	bl	801adf4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002d8a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d8e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d92:	2101      	movs	r1, #1
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	f00c fa2d 	bl	800f1f4 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002d9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d9e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002da2:	2109      	movs	r1, #9
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	f00c fbdf 	bl	800f568 <nk_button_symbol>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d029      	beq.n	8002e04 <oscilloscope_process+0x898>
				{
					osc->channels[osc->channel_selected].scale -= 1;
 8002db0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002db4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002dc0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3334      	adds	r3, #52	; 0x34
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002dda:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002de6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002dee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3334      	adds	r3, #52	; 0x34
 8002e00:	edc3 7a00 	vstr	s15, [r3]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].scale);
 8002e04:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e08:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e10:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e14:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3334      	adds	r3, #52	; 0x34
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fbb5 	bl	8000598 <__aeabi_f2d>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	f107 000c 	add.w	r0, r7, #12
 8002e36:	492a      	ldr	r1, [pc, #168]	; (8002ee0 <oscilloscope_process+0x974>)
 8002e38:	f01b f8f0 	bl	801e01c <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8002e3c:	f107 010c 	add.w	r1, r7, #12
 8002e40:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e44:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002e48:	2202      	movs	r2, #2
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	f017 ffd2 	bl	801adf4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002e50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e54:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002e58:	2101      	movs	r1, #1
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	f00c f9ca 	bl	800f1f4 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002e60:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e64:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002e68:	210a      	movs	r1, #10
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	f00c fb7c 	bl	800f568 <nk_button_symbol>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d038      	beq.n	8002ee8 <oscilloscope_process+0x97c>
				{
					osc->channels[osc->channel_selected].scale += 1;
 8002e76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3334      	adds	r3, #52	; 0x34
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ea0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eb0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002eb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3334      	adds	r3, #52	; 0x34
 8002ec6:	edc3 7a00 	vstr	s15, [r3]
 8002eca:	e00d      	b.n	8002ee8 <oscilloscope_process+0x97c>
 8002ecc:	08020eec 	.word	0x08020eec
 8002ed0:	42f00000 	.word	0x42f00000
 8002ed4:	42c80000 	.word	0x42c80000
 8002ed8:	08020e98 	.word	0x08020e98
 8002edc:	08020d78 	.word	0x08020d78
 8002ee0:	08020d80 	.word	0x08020d80
 8002ee4:	08020d88 	.word	0x08020d88
				}
                nk_tree_pop(ctx);
 8002ee8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002eec:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f018 fbe2 	bl	801b6ba <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Trigger", NK_MINIMIZED) ){
 8002ef6:	48da      	ldr	r0, [pc, #872]	; (8003260 <oscilloscope_process+0xcf4>)
 8002ef8:	f018 fe70 	bl	801bbdc <nk_strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002f02:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8002f06:	f240 22d1 	movw	r2, #721	; 0x2d1
 8002f0a:	9202      	str	r2, [sp, #8]
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	4bd4      	ldr	r3, [pc, #848]	; (8003260 <oscilloscope_process+0xcf4>)
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2300      	movs	r3, #0
 8002f14:	4ad3      	ldr	r2, [pc, #844]	; (8003264 <oscilloscope_process+0xcf8>)
 8002f16:	2101      	movs	r1, #1
 8002f18:	6800      	ldr	r0, [r0, #0]
 8002f1a:	f018 fbb1 	bl	801b680 <nk_tree_push_hashed>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8156 	beq.w	80031d2 <oscilloscope_process+0xc66>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 8002f26:	4bd0      	ldr	r3, [pc, #832]	; (8003268 <oscilloscope_process+0xcfc>)
 8002f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f30:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002f34:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8002f38:	2201      	movs	r2, #1
 8002f3a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002f3e:	2101      	movs	r1, #1
 8002f40:	6800      	ldr	r0, [r0, #0]
 8002f42:	f010 fa4f 	bl	80133e4 <nk_layout_row>
                osc->trigger_source = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->trigger_source, 30, nk_vec2(100, 160));
 8002f46:	4bc9      	ldr	r3, [pc, #804]	; (800326c <oscilloscope_process+0xd00>)
 8002f48:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8002f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69dc      	ldr	r4, [r3, #28]
 8002f5e:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8003270 <oscilloscope_process+0xd04>
 8002f62:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8003274 <oscilloscope_process+0xd08>
 8002f66:	f011 f843 	bl	8013ff0 <nk_vec2>
 8002f6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f6e:	eef0 7a60 	vmov.f32	s15, s1
 8002f72:	ed87 7a5d 	vstr	s14, [r7, #372]	; 0x174
 8002f76:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
 8002f7a:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 8002f7e:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 8002f82:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8002f86:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f8a:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8002f8e:	231e      	movs	r3, #30
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	eeb0 0a47 	vmov.f32	s0, s14
 8002f96:	eef0 0a67 	vmov.f32	s1, s15
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	6800      	ldr	r0, [r0, #0]
 8002fa0:	f00c ffe4 	bl	800ff6c <nk_combo>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002faa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61da      	str	r2, [r3, #28]
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 8002fb2:	4ab1      	ldr	r2, [pc, #708]	; (8003278 <oscilloscope_process+0xd0c>)
 8002fb4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fc0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002fc4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002fc8:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8002fcc:	2202      	movs	r2, #2
 8002fce:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	6800      	ldr	r0, [r0, #0]
 8002fd6:	f010 fa05 	bl	80133e4 <nk_layout_row>
                osc->trigger_mode = nk_combo(ctx, (const char*[]){"Normal", "Auto"}, 2, osc->trigger_mode, 30, nk_vec2(100, 120));
 8002fda:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002fde:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fe2:	4aa6      	ldr	r2, [pc, #664]	; (800327c <oscilloscope_process+0xd10>)
 8002fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fe8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ff0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695c      	ldr	r4, [r3, #20]
 8002ff8:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8003280 <oscilloscope_process+0xd14>
 8002ffc:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8003274 <oscilloscope_process+0xd08>
 8003000:	f010 fff6 	bl	8013ff0 <nk_vec2>
 8003004:	eeb0 7a40 	vmov.f32	s14, s0
 8003008:	eef0 7a60 	vmov.f32	s15, s1
 800300c:	ed87 7a5f 	vstr	s14, [r7, #380]	; 0x17c
 8003010:	edc7 7a60 	vstr	s15, [r7, #384]	; 0x180
 8003014:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 8003018:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 800301c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003020:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003024:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8003028:	231e      	movs	r3, #30
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	eeb0 0a47 	vmov.f32	s0, s14
 8003030:	eef0 0a67 	vmov.f32	s1, s15
 8003034:	4623      	mov	r3, r4
 8003036:	2202      	movs	r2, #2
 8003038:	6800      	ldr	r0, [r0, #0]
 800303a:	f00c ff97 	bl	800ff6c <nk_combo>
 800303e:	4602      	mov	r2, r0
 8003040:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003044:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	615a      	str	r2, [r3, #20]
                osc->trigger_slope = nk_combo(ctx, (const char*[]){"Rising", "Falling", "Both"}, 3, osc->trigger_slope, 30, nk_vec2(100, 120));
 800304c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003050:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003054:	4a8b      	ldr	r2, [pc, #556]	; (8003284 <oscilloscope_process+0xd18>)
 8003056:	ca07      	ldmia	r2, {r0, r1, r2}
 8003058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800305c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003060:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699c      	ldr	r4, [r3, #24]
 8003068:	eddf 0a85 	vldr	s1, [pc, #532]	; 8003280 <oscilloscope_process+0xd14>
 800306c:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8003274 <oscilloscope_process+0xd08>
 8003070:	f010 ffbe 	bl	8013ff0 <nk_vec2>
 8003074:	eeb0 7a40 	vmov.f32	s14, s0
 8003078:	eef0 7a60 	vmov.f32	s15, s1
 800307c:	ed87 7a61 	vstr	s14, [r7, #388]	; 0x184
 8003080:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
 8003084:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 8003088:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800308c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8003090:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003094:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8003098:	231e      	movs	r3, #30
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	eeb0 0a47 	vmov.f32	s0, s14
 80030a0:	eef0 0a67 	vmov.f32	s1, s15
 80030a4:	4623      	mov	r3, r4
 80030a6:	2203      	movs	r2, #3
 80030a8:	6800      	ldr	r0, [r0, #0]
 80030aa:	f00c ff5f 	bl	800ff6c <nk_combo>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80030b4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	619a      	str	r2, [r3, #24]
                //nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){200});
                //nk_slider_float(ctx, -10.0f, &osc->trigger_offset, 10.0f, 1.0f);


                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80030bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80030c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030c4:	4a70      	ldr	r2, [pc, #448]	; (8003288 <oscilloscope_process+0xd1c>)
 80030c6:	461c      	mov	r4, r3
 80030c8:	4613      	mov	r3, r2
 80030ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030d4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80030d8:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80030dc:	2204      	movs	r2, #4
 80030de:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80030e2:	2101      	movs	r1, #1
 80030e4:	6800      	ldr	r0, [r0, #0]
 80030e6:	f010 f97d 	bl	80133e4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_ALIGN_LEFT );
 80030ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80030ee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80030f2:	2201      	movs	r2, #1
 80030f4:	4965      	ldr	r1, [pc, #404]	; (800328c <oscilloscope_process+0xd20>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	f017 fe7c 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80030fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003100:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003104:	2101      	movs	r1, #1
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	f00c f874 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 800310c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003110:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003114:	2109      	movs	r1, #9
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	f00c fa26 	bl	800f568 <nk_button_symbol>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d011      	beq.n	8003146 <oscilloscope_process+0xbda>
        		{
        			osc->trigger_offset -= 1;
 8003122:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003126:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003138:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800313c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	edc3 7a04 	vstr	s15, [r3, #16]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->trigger_offset);
 8003146:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800314a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fa20 	bl	8000598 <__aeabi_f2d>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	f107 000c 	add.w	r0, r7, #12
 8003160:	494b      	ldr	r1, [pc, #300]	; (8003290 <oscilloscope_process+0xd24>)
 8003162:	f01a ff5b 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8003166:	f107 010c 	add.w	r1, r7, #12
 800316a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800316e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003172:	2202      	movs	r2, #2
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f017 fe3d 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800317a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800317e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003182:	2101      	movs	r1, #1
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	f00c f835 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800318a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800318e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003192:	210a      	movs	r1, #10
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	f00c f9e7 	bl	800f568 <nk_button_symbol>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <oscilloscope_process+0xc58>
        		{
        			osc->trigger_offset += 1;
 80031a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80031ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	edc3 7a04 	vstr	s15, [r3, #16]
        		}


                nk_tree_pop(ctx);
 80031c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031c8:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	f018 fa74 	bl	801b6ba <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Waveform", NK_MINIMIZED) ){
 80031d2:	4830      	ldr	r0, [pc, #192]	; (8003294 <oscilloscope_process+0xd28>)
 80031d4:	f018 fd02 	bl	801bbdc <nk_strlen>
 80031d8:	4603      	mov	r3, r0
 80031da:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80031de:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80031e2:	f240 22ef 	movw	r2, #751	; 0x2ef
 80031e6:	9202      	str	r2, [sp, #8]
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <oscilloscope_process+0xd28>)
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2300      	movs	r3, #0
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <oscilloscope_process+0xd2c>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	6800      	ldr	r0, [r0, #0]
 80031f6:	f018 fa43 	bl	801b680 <nk_tree_push_hashed>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 835a 	beq.w	80038b6 <oscilloscope_process+0x134a>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 8003202:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003206:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <oscilloscope_process+0xcfc>)
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003212:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003216:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 800321a:	2201      	movs	r2, #1
 800321c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003220:	2101      	movs	r1, #1
 8003222:	6800      	ldr	r0, [r0, #0]
 8003224:	f010 f8de 	bl	80133e4 <nk_layout_row>
                osc->waveform_selected = nk_combo(ctx, (const char*[]){"Wf1", "Wf2"}, WAVEFORM_COUNT, osc->waveform_selected, 30, nk_vec2(100, 80));
 8003228:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800322c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003230:	4a1a      	ldr	r2, [pc, #104]	; (800329c <oscilloscope_process+0xd30>)
 8003232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003236:	e883 0003 	stmia.w	r3, {r0, r1}
 800323a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800323e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003246:	eddf 0a16 	vldr	s1, [pc, #88]	; 80032a0 <oscilloscope_process+0xd34>
 800324a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003274 <oscilloscope_process+0xd08>
 800324e:	f010 fecf 	bl	8013ff0 <nk_vec2>
 8003252:	eeb0 7a40 	vmov.f32	s14, s0
 8003256:	eef0 7a60 	vmov.f32	s15, s1
 800325a:	ed87 7a63 	vstr	s14, [r7, #396]	; 0x18c
 800325e:	e021      	b.n	80032a4 <oscilloscope_process+0xd38>
 8003260:	08020db4 	.word	0x08020db4
 8003264:	08020dcc 	.word	0x08020dcc
 8003268:	42c80000 	.word	0x42c80000
 800326c:	08020eb8 	.word	0x08020eb8
 8003270:	43200000 	.word	0x43200000
 8003274:	42c80000 	.word	0x42c80000
 8003278:	08020ec8 	.word	0x08020ec8
 800327c:	08020f08 	.word	0x08020f08
 8003280:	42f00000 	.word	0x42f00000
 8003284:	08020f28 	.word	0x08020f28
 8003288:	08020e98 	.word	0x08020e98
 800328c:	08020d78 	.word	0x08020d78
 8003290:	08020d80 	.word	0x08020d80
 8003294:	08020dd4 	.word	0x08020dd4
 8003298:	08020dec 	.word	0x08020dec
 800329c:	08020f3c 	.word	0x08020f3c
 80032a0:	42a00000 	.word	0x42a00000
 80032a4:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
 80032a8:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 80032ac:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80032b0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80032b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80032b8:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 80032bc:	231e      	movs	r3, #30
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	eeb0 0a47 	vmov.f32	s0, s14
 80032c4:	eef0 0a67 	vmov.f32	s1, s15
 80032c8:	4623      	mov	r3, r4
 80032ca:	2202      	movs	r2, #2
 80032cc:	6800      	ldr	r0, [r0, #0]
 80032ce:	f00c fe4d 	bl	800ff6c <nk_combo>
 80032d2:	4602      	mov	r2, r0
 80032d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80032d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	679a      	str	r2, [r3, #120]	; 0x78
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 80032e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80032e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032e8:	4aca      	ldr	r2, [pc, #808]	; (8003614 <oscilloscope_process+0x10a8>)
 80032ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80032f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032f6:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80032fa:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80032fe:	2202      	movs	r2, #2
 8003300:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003304:	2101      	movs	r1, #1
 8003306:	6800      	ldr	r0, [r0, #0]
 8003308:	f010 f86c 	bl	80133e4 <nk_layout_row>
                osc->waveforms[osc->waveform_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->waveforms[osc->waveform_selected].enabled, 30, nk_vec2(100, 200));
 800330c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003310:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003314:	4ac0      	ldr	r2, [pc, #768]	; (8003618 <oscilloscope_process+0x10ac>)
 8003316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800331a:	e883 0003 	stmia.w	r3, {r0, r1}
 800331e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003322:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800332a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800332e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	337c      	adds	r3, #124	; 0x7c
 8003340:	681d      	ldr	r5, [r3, #0]
 8003342:	eddf 0ab6 	vldr	s1, [pc, #728]	; 800361c <oscilloscope_process+0x10b0>
 8003346:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8003620 <oscilloscope_process+0x10b4>
 800334a:	f010 fe51 	bl	8013ff0 <nk_vec2>
 800334e:	eeb0 7a40 	vmov.f32	s14, s0
 8003352:	eef0 7a60 	vmov.f32	s15, s1
 8003356:	ed87 7a65 	vstr	s14, [r7, #404]	; 0x194
 800335a:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
 800335e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003362:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800336a:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800336e:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8003372:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003376:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800337a:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 800337e:	231e      	movs	r3, #30
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	eeb0 0a47 	vmov.f32	s0, s14
 8003386:	eef0 0a67 	vmov.f32	s1, s15
 800338a:	462b      	mov	r3, r5
 800338c:	2202      	movs	r2, #2
 800338e:	6800      	ldr	r0, [r0, #0]
 8003390:	f00c fdec 	bl	800ff6c <nk_combo>
 8003394:	4601      	mov	r1, r0
 8003396:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800339a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4623      	mov	r3, r4
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4423      	add	r3, r4
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	337c      	adds	r3, #124	; 0x7c
 80033ac:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].type = nk_combo(ctx, (const char*[]){"DC", "PWM", "Sine", "Tria", "Saw", "Noise"}, 6, osc->waveforms[osc->waveform_selected].type, 30, nk_vec2(100, 240));
 80033ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80033b2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033b6:	4a9b      	ldr	r2, [pc, #620]	; (8003624 <oscilloscope_process+0x10b8>)
 80033b8:	461c      	mov	r4, r3
 80033ba:	4615      	mov	r5, r2
 80033bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80033c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80033c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80033cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80033d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80033d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3380      	adds	r3, #128	; 0x80
 80033ea:	681d      	ldr	r5, [r3, #0]
 80033ec:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8003628 <oscilloscope_process+0x10bc>
 80033f0:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8003620 <oscilloscope_process+0x10b4>
 80033f4:	f010 fdfc 	bl	8013ff0 <nk_vec2>
 80033f8:	eeb0 7a40 	vmov.f32	s14, s0
 80033fc:	eef0 7a60 	vmov.f32	s15, s1
 8003400:	ed87 7a67 	vstr	s14, [r7, #412]	; 0x19c
 8003404:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
 8003408:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800340c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003414:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8003418:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800341c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003420:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003424:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8003428:	231e      	movs	r3, #30
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	eeb0 0a47 	vmov.f32	s0, s14
 8003430:	eef0 0a67 	vmov.f32	s1, s15
 8003434:	462b      	mov	r3, r5
 8003436:	2206      	movs	r2, #6
 8003438:	6800      	ldr	r0, [r0, #0]
 800343a:	f00c fd97 	bl	800ff6c <nk_combo>
 800343e:	4601      	mov	r1, r0
 8003440:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003444:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4623      	mov	r3, r4
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4423      	add	r3, r4
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	3380      	adds	r3, #128	; 0x80
 8003456:	6019      	str	r1, [r3, #0]
                //osc->waveforms[osc->waveform_selected].offset = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].offset, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].scale = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].scale, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].duty_cycle = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].duty_cycle, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8003458:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800345c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003460:	4a72      	ldr	r2, [pc, #456]	; (800362c <oscilloscope_process+0x10c0>)
 8003462:	461c      	mov	r4, r3
 8003464:	4613      	mov	r3, r2
 8003466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800346c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003470:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003474:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8003478:	2204      	movs	r2, #4
 800347a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800347e:	2101      	movs	r1, #1
 8003480:	6800      	ldr	r0, [r0, #0]
 8003482:	f00f ffaf 	bl	80133e4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_ALIGN_LEFT );
 8003486:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800348a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800348e:	2201      	movs	r2, #1
 8003490:	4967      	ldr	r1, [pc, #412]	; (8003630 <oscilloscope_process+0x10c4>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	f017 fcae 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003498:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800349c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80034a0:	2101      	movs	r1, #1
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	f00b fea6 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80034a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80034ac:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80034b0:	2109      	movs	r1, #9
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	f00c f858 	bl	800f568 <nk_button_symbol>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d029      	beq.n	8003512 <oscilloscope_process+0xfa6>
        		{
        			osc->waveforms[osc->waveform_selected].offset -= 1;
 80034be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80034c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034ca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80034ce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	3384      	adds	r3, #132	; 0x84
 80034e0:	edd3 7a00 	vldr	s15, [r3]
 80034e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80034e8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80034fc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	3384      	adds	r3, #132	; 0x84
 800350e:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].offset);
 8003512:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003516:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800351e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003522:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	3384      	adds	r3, #132	; 0x84
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd f82e 	bl	8000598 <__aeabi_f2d>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	f107 000c 	add.w	r0, r7, #12
 8003544:	493b      	ldr	r1, [pc, #236]	; (8003634 <oscilloscope_process+0x10c8>)
 8003546:	f01a fd69 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 800354a:	f107 010c 	add.w	r1, r7, #12
 800354e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003552:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003556:	2202      	movs	r2, #2
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	f017 fc4b 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800355e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003562:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003566:	2101      	movs	r1, #1
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	f00b fe43 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800356e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003572:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003576:	210a      	movs	r1, #10
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	f00b fff5 	bl	800f568 <nk_button_symbol>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d029      	beq.n	80035d8 <oscilloscope_process+0x106c>
        		{
        			osc->waveforms[osc->waveform_selected].offset += 1;
 8003584:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003588:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003590:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003594:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003598:	6819      	ldr	r1, [r3, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	3384      	adds	r3, #132	; 0x84
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80035b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	3384      	adds	r3, #132	; 0x84
 80035d4:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_ALIGN_LEFT );
 80035d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035dc:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80035e0:	2201      	movs	r2, #1
 80035e2:	4915      	ldr	r1, [pc, #84]	; (8003638 <oscilloscope_process+0x10cc>)
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	f017 fc05 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80035ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035ee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80035f2:	2101      	movs	r1, #1
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	f00b fdfd 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80035fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035fe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003602:	2109      	movs	r1, #9
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	f00b ffaf 	bl	800f568 <nk_button_symbol>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03f      	beq.n	8003690 <oscilloscope_process+0x1124>
 8003610:	e014      	b.n	800363c <oscilloscope_process+0x10d0>
 8003612:	bf00      	nop
 8003614:	08020ec8 	.word	0x08020ec8
 8003618:	08020ed8 	.word	0x08020ed8
 800361c:	43480000 	.word	0x43480000
 8003620:	42c80000 	.word	0x42c80000
 8003624:	08020f64 	.word	0x08020f64
 8003628:	43700000 	.word	0x43700000
 800362c:	08020e98 	.word	0x08020e98
 8003630:	08020d78 	.word	0x08020d78
 8003634:	08020d80 	.word	0x08020d80
 8003638:	08020d88 	.word	0x08020d88
        		{
        			osc->waveforms[osc->waveform_selected].scale -= 1;
 800363c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003640:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003648:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800364c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	3388      	adds	r3, #136	; 0x88
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003666:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800366e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003676:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800367a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	3388      	adds	r3, #136	; 0x88
 800368c:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].scale);
 8003690:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003694:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800369c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036a0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	3388      	adds	r3, #136	; 0x88
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fc ff6f 	bl	8000598 <__aeabi_f2d>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	f107 000c 	add.w	r0, r7, #12
 80036c2:	49dd      	ldr	r1, [pc, #884]	; (8003a38 <oscilloscope_process+0x14cc>)
 80036c4:	f01a fcaa 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 80036c8:	f107 010c 	add.w	r1, r7, #12
 80036cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036d0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80036d4:	2202      	movs	r2, #2
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	f017 fb8c 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80036dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036e0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80036e4:	2101      	movs	r1, #1
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	f00b fd84 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80036ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036f0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80036f4:	210a      	movs	r1, #10
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	f00b ff36 	bl	800f568 <nk_button_symbol>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d029      	beq.n	8003756 <oscilloscope_process+0x11ea>
        		{
        			osc->waveforms[osc->waveform_selected].scale += 1;
 8003702:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003706:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800370e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003712:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	3388      	adds	r3, #136	; 0x88
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800372c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800373c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003740:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	440b      	add	r3, r1
 8003750:	3388      	adds	r3, #136	; 0x88
 8003752:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Duty", NK_TEXT_ALIGN_LEFT );
 8003756:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800375a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800375e:	2201      	movs	r2, #1
 8003760:	49b6      	ldr	r1, [pc, #728]	; (8003a3c <oscilloscope_process+0x14d0>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	f017 fb46 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003768:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800376c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003770:	2101      	movs	r1, #1
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	f00b fd3e 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003778:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800377c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003780:	2109      	movs	r1, #9
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	f00b fef0 	bl	800f568 <nk_button_symbol>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d029      	beq.n	80037e2 <oscilloscope_process+0x1276>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle -= 1;
 800378e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003792:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800379a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800379e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	338c      	adds	r3, #140	; 0x8c
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80037b8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80037cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	338c      	adds	r3, #140	; 0x8c
 80037de:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].duty_cycle);
 80037e2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80037e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037ee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80037f2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	338c      	adds	r3, #140	; 0x8c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fec6 	bl	8000598 <__aeabi_f2d>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	f107 000c 	add.w	r0, r7, #12
 8003814:	4988      	ldr	r1, [pc, #544]	; (8003a38 <oscilloscope_process+0x14cc>)
 8003816:	f01a fc01 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 800381a:	f107 010c 	add.w	r1, r7, #12
 800381e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003822:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003826:	2202      	movs	r2, #2
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	f017 fae3 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800382e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003832:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003836:	2101      	movs	r1, #1
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	f00b fcdb 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800383e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003842:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003846:	210a      	movs	r1, #10
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	f00b fe8d 	bl	800f568 <nk_button_symbol>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d029      	beq.n	80038a8 <oscilloscope_process+0x133c>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle += 1;
 8003854:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003858:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003860:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003864:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	338c      	adds	r3, #140	; 0x8c
 8003876:	edd3 7a00 	vldr	s15, [r3]
 800387a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800387e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800388e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003892:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	338c      	adds	r3, #140	; 0x8c
 80038a4:	edc3 7a00 	vstr	s15, [r3]
        		}
                nk_tree_pop(ctx);
 80038a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80038ac:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	f017 ff02 	bl	801b6ba <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Cursor", NK_MINIMIZED) ){
 80038b6:	4862      	ldr	r0, [pc, #392]	; (8003a40 <oscilloscope_process+0x14d4>)
 80038b8:	f018 f990 	bl	801bbdc <nk_strlen>
 80038bc:	4603      	mov	r3, r0
 80038be:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80038c2:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80038c6:	f240 3229 	movw	r2, #809	; 0x329
 80038ca:	9202      	str	r2, [sp, #8]
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <oscilloscope_process+0x14d4>)
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	4a5b      	ldr	r2, [pc, #364]	; (8003a44 <oscilloscope_process+0x14d8>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	6800      	ldr	r0, [r0, #0]
 80038da:	f017 fed1 	bl	801b680 <nk_tree_push_hashed>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 82a6 	beq.w	8003e32 <oscilloscope_process+0x18c6>
				nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 80038e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80038ea:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <oscilloscope_process+0x14dc>)
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038f6:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80038fa:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80038fe:	2201      	movs	r2, #1
 8003900:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003904:	2101      	movs	r1, #1
 8003906:	6800      	ldr	r0, [r0, #0]
 8003908:	f00f fd6c 	bl	80133e4 <nk_layout_row>
                osc->cursor_selected = nk_combo(ctx, (const char*[]){"C1", "C2"}, CURSOR_COUNT, osc->cursor_selected, 20, nk_vec2(100, 100));
 800390c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003910:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003914:	4a4d      	ldr	r2, [pc, #308]	; (8003a4c <oscilloscope_process+0x14e0>)
 8003916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800391a:	e883 0003 	stmia.w	r3, {r0, r1}
 800391e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003922:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800392c:	eddf 0a48 	vldr	s1, [pc, #288]	; 8003a50 <oscilloscope_process+0x14e4>
 8003930:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8003a50 <oscilloscope_process+0x14e4>
 8003934:	f010 fb5c 	bl	8013ff0 <nk_vec2>
 8003938:	eeb0 7a40 	vmov.f32	s14, s0
 800393c:	eef0 7a60 	vmov.f32	s15, s1
 8003940:	ed87 7a69 	vstr	s14, [r7, #420]	; 0x1a4
 8003944:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
 8003948:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800394c:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8003950:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003954:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003958:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 800395c:	2314      	movs	r3, #20
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	eeb0 0a47 	vmov.f32	s0, s14
 8003964:	eef0 0a67 	vmov.f32	s1, s15
 8003968:	4623      	mov	r3, r4
 800396a:	2202      	movs	r2, #2
 800396c:	6800      	ldr	r0, [r0, #0]
 800396e:	f00c fafd 	bl	800ff6c <nk_combo>
 8003972:	4602      	mov	r2, r0
 8003974:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003978:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 8003982:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003986:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800398a:	4a32      	ldr	r2, [pc, #200]	; (8003a54 <oscilloscope_process+0x14e8>)
 800398c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003990:	e883 0003 	stmia.w	r3, {r0, r1}
 8003994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003998:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800399c:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 80039a0:	2202      	movs	r2, #2
 80039a2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80039a6:	2101      	movs	r1, #1
 80039a8:	6800      	ldr	r0, [r0, #0]
 80039aa:	f00f fd1b 	bl	80133e4 <nk_layout_row>
                osc->cursors[osc->cursor_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->cursors[osc->cursor_selected].enabled, 30, nk_vec2(100, 100));
 80039ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80039b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039b6:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <oscilloscope_process+0x14ec>)
 80039b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80039c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80039c4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80039ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80039d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	33b0      	adds	r3, #176	; 0xb0
 80039e4:	681d      	ldr	r5, [r3, #0]
 80039e6:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8003a50 <oscilloscope_process+0x14e4>
 80039ea:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003a50 <oscilloscope_process+0x14e4>
 80039ee:	f010 faff 	bl	8013ff0 <nk_vec2>
 80039f2:	eeb0 7a40 	vmov.f32	s14, s0
 80039f6:	eef0 7a60 	vmov.f32	s15, s1
 80039fa:	ed87 7a6b 	vstr	s14, [r7, #428]	; 0x1ac
 80039fe:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
 8003a02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003a06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003a10:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8003a14:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003a18:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003a1c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003a20:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8003a24:	231e      	movs	r3, #30
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	eeb0 0a47 	vmov.f32	s0, s14
 8003a2c:	eef0 0a67 	vmov.f32	s1, s15
 8003a30:	462b      	mov	r3, r5
 8003a32:	2202      	movs	r2, #2
 8003a34:	e012      	b.n	8003a5c <oscilloscope_process+0x14f0>
 8003a36:	bf00      	nop
 8003a38:	08020d80 	.word	0x08020d80
 8003a3c:	08020df8 	.word	0x08020df8
 8003a40:	08020e00 	.word	0x08020e00
 8003a44:	08020e18 	.word	0x08020e18
 8003a48:	42c80000 	.word	0x42c80000
 8003a4c:	08020f84 	.word	0x08020f84
 8003a50:	42c80000 	.word	0x42c80000
 8003a54:	08020ec8 	.word	0x08020ec8
 8003a58:	08020ed8 	.word	0x08020ed8
 8003a5c:	6800      	ldr	r0, [r0, #0]
 8003a5e:	f00c fa85 	bl	800ff6c <nk_combo>
 8003a62:	4601      	mov	r1, r0
 8003a64:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003a68:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4623      	mov	r3, r4
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4423      	add	r3, r4
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	33b0      	adds	r3, #176	; 0xb0
 8003a7a:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].horizontal = nk_combo(ctx, (const char*[]){"Track", "Free"}, 2, osc->cursors[osc->cursor_selected].horizontal, 30, nk_vec2(100, 100));
 8003a7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003a80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003a84:	4acb      	ldr	r2, [pc, #812]	; (8003db4 <oscilloscope_process+0x1848>)
 8003a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003a92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003a9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003aa0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	33b4      	adds	r3, #180	; 0xb4
 8003ab2:	681d      	ldr	r5, [r3, #0]
 8003ab4:	eddf 0ac0 	vldr	s1, [pc, #768]	; 8003db8 <oscilloscope_process+0x184c>
 8003ab8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8003db8 <oscilloscope_process+0x184c>
 8003abc:	f010 fa98 	bl	8013ff0 <nk_vec2>
 8003ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8003ac4:	eef0 7a60 	vmov.f32	s15, s1
 8003ac8:	ed87 7a6d 	vstr	s14, [r7, #436]	; 0x1b4
 8003acc:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 8003ad0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003ad4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003ade:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 8003ae2:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8003ae6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003aea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003aee:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8003af2:	231e      	movs	r3, #30
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	eeb0 0a47 	vmov.f32	s0, s14
 8003afa:	eef0 0a67 	vmov.f32	s1, s15
 8003afe:	462b      	mov	r3, r5
 8003b00:	2202      	movs	r2, #2
 8003b02:	6800      	ldr	r0, [r0, #0]
 8003b04:	f00c fa32 	bl	800ff6c <nk_combo>
 8003b08:	4601      	mov	r1, r0
 8003b0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003b0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4623      	mov	r3, r4
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4423      	add	r3, r4
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	33b4      	adds	r3, #180	; 0xb4
 8003b20:	6019      	str	r1, [r3, #0]


                //osc->cursors[osc->cursor_selected].offset = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].offset, 10.0f, 1.0f);
                //osc->cursors[osc->cursor_selected].track = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].track, 10.0f, 1.0f);
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8003b22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003b26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003b2a:	4aa4      	ldr	r2, [pc, #656]	; (8003dbc <oscilloscope_process+0x1850>)
 8003b2c:	461c      	mov	r4, r3
 8003b2e:	4613      	mov	r3, r2
 8003b30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003b36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b3a:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003b3e:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8003b42:	2204      	movs	r2, #4
 8003b44:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003b48:	2101      	movs	r1, #1
 8003b4a:	6800      	ldr	r0, [r0, #0]
 8003b4c:	f00f fc4a 	bl	80133e4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_ALIGN_LEFT );
 8003b50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003b54:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4999      	ldr	r1, [pc, #612]	; (8003dc0 <oscilloscope_process+0x1854>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	f017 f949 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003b62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003b66:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	f00b fb41 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003b72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003b76:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003b7a:	2109      	movs	r1, #9
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	f00b fcf3 	bl	800f568 <nk_button_symbol>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02b      	beq.n	8003be0 <oscilloscope_process+0x1674>
        		{
        			osc->cursors[osc->cursor_selected].offset -= 1;
 8003b88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003b8c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003b9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	33b8      	adds	r3, #184	; 0xb8
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003bb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bc6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003bca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	33b8      	adds	r3, #184	; 0xb8
 8003bdc:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].offset);
 8003be0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003be4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003bf2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	33b8      	adds	r3, #184	; 0xb8
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc fcc6 	bl	8000598 <__aeabi_f2d>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	f107 000c 	add.w	r0, r7, #12
 8003c14:	496b      	ldr	r1, [pc, #428]	; (8003dc4 <oscilloscope_process+0x1858>)
 8003c16:	f01a fa01 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8003c1a:	f107 010c 	add.w	r1, r7, #12
 8003c1e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003c22:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003c26:	2202      	movs	r2, #2
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	f017 f8e3 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003c2e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003c32:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003c36:	2101      	movs	r1, #1
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	f00b fadb 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003c3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003c42:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003c46:	210a      	movs	r1, #10
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	f00b fc8d 	bl	800f568 <nk_button_symbol>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02b      	beq.n	8003cac <oscilloscope_process+0x1740>
        		{
        			osc->cursors[osc->cursor_selected].offset += 1;
 8003c54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003c58:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003c66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	33b8      	adds	r3, #184	; 0xb8
 8003c78:	edd3 7a00 	vldr	s15, [r3]
 8003c7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003c80:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c92:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003c96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	33b8      	adds	r3, #184	; 0xb8
 8003ca8:	edc3 7a00 	vstr	s15, [r3]
        		}


        		nk_label( ctx, "Track", NK_TEXT_ALIGN_LEFT );
 8003cac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003cb0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4944      	ldr	r1, [pc, #272]	; (8003dc8 <oscilloscope_process+0x185c>)
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	f017 f89b 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003cbe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003cc2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f00b fa93 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003cce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003cd2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003cd6:	2109      	movs	r1, #9
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f00b fc45 	bl	800f568 <nk_button_symbol>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02b      	beq.n	8003d3c <oscilloscope_process+0x17d0>
        		{
        			osc->cursors[osc->cursor_selected].track -= 1;
 8003ce4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003ce8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cf2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003cf6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	33bc      	adds	r3, #188	; 0xbc
 8003d08:	edd3 7a00 	vldr	s15, [r3]
 8003d0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003d10:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003d26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d2a:	6819      	ldr	r1, [r3, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	33bc      	adds	r3, #188	; 0xbc
 8003d38:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].track);
 8003d3c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003d40:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d4a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003d4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	33bc      	adds	r3, #188	; 0xbc
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fc18 	bl	8000598 <__aeabi_f2d>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	f107 000c 	add.w	r0, r7, #12
 8003d70:	4914      	ldr	r1, [pc, #80]	; (8003dc4 <oscilloscope_process+0x1858>)
 8003d72:	f01a f953 	bl	801e01c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8003d76:	f107 010c 	add.w	r1, r7, #12
 8003d7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003d7e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003d82:	2202      	movs	r2, #2
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	f017 f835 	bl	801adf4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003d8a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003d8e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003d92:	2101      	movs	r1, #1
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f00b fa2d 	bl	800f1f4 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003d9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003d9e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003da2:	210a      	movs	r1, #10
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f00b fbdf 	bl	800f568 <nk_button_symbol>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d039      	beq.n	8003e24 <oscilloscope_process+0x18b8>
 8003db0:	e00c      	b.n	8003dcc <oscilloscope_process+0x1860>
 8003db2:	bf00      	nop
 8003db4:	08020f94 	.word	0x08020f94
 8003db8:	42c80000 	.word	0x42c80000
 8003dbc:	08020e98 	.word	0x08020e98
 8003dc0:	08020d78 	.word	0x08020d78
 8003dc4:	08020d80 	.word	0x08020d80
 8003dc8:	08020e20 	.word	0x08020e20
        		{
        			osc->cursors[osc->cursor_selected].track += 1;
 8003dcc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003dd0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003dda:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003dde:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	33bc      	adds	r3, #188	; 0xbc
 8003df0:	edd3 7a00 	vldr	s15, [r3]
 8003df4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003df8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003e0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	33bc      	adds	r3, #188	; 0xbc
 8003e20:	edc3 7a00 	vstr	s15, [r3]
        		}


                nk_tree_pop(ctx);
 8003e24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003e28:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f017 fc44 	bl	801b6ba <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Measurements", NK_MINIMIZED) ){
 8003e32:	485f      	ldr	r0, [pc, #380]	; (8003fb0 <oscilloscope_process+0x1a44>)
 8003e34:	f017 fed2 	bl	801bbdc <nk_strlen>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003e3e:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8003e42:	f240 3257 	movw	r2, #855	; 0x357
 8003e46:	9202      	str	r2, [sp, #8]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <oscilloscope_process+0x1a44>)
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <oscilloscope_process+0x1a48>)
 8003e52:	2101      	movs	r1, #1
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	f017 fc13 	bl	801b680 <nk_tree_push_hashed>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00f      	beq.n	8003e80 <oscilloscope_process+0x1914>
                nk_label(ctx, "Todo", NK_TEXT_LEFT);
 8003e60:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003e64:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003e68:	2211      	movs	r2, #17
 8003e6a:	4953      	ldr	r1, [pc, #332]	; (8003fb8 <oscilloscope_process+0x1a4c>)
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	f016 ffc1 	bl	801adf4 <nk_label>
                nk_tree_pop(ctx);
 8003e72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003e76:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	f017 fc1d 	bl	801b6ba <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Info", NK_MINIMIZED) ){
 8003e80:	484e      	ldr	r0, [pc, #312]	; (8003fbc <oscilloscope_process+0x1a50>)
 8003e82:	f017 feab 	bl	801bbdc <nk_strlen>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003e8c:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8003e90:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8003e94:	9202      	str	r2, [sp, #8]
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	4b48      	ldr	r3, [pc, #288]	; (8003fbc <oscilloscope_process+0x1a50>)
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4a48      	ldr	r2, [pc, #288]	; (8003fc0 <oscilloscope_process+0x1a54>)
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	6800      	ldr	r0, [r0, #0]
 8003ea4:	f017 fbec 	bl	801b680 <nk_tree_push_hashed>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d074      	beq.n	8003f98 <oscilloscope_process+0x1a2c>
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8003eae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003eb2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003eb6:	4a43      	ldr	r2, [pc, #268]	; (8003fc4 <oscilloscope_process+0x1a58>)
 8003eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ebc:	e883 0003 	stmia.w	r3, {r0, r1}
 8003ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ec4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003ec8:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 8003ecc:	2202      	movs	r2, #2
 8003ece:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	6800      	ldr	r0, [r0, #0]
 8003ed6:	f00f fa85 	bl	80133e4 <nk_layout_row>

                float fps = 0.0f; // Calculate fps here
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                nk_label(ctx, "FPS", NK_TEXT_LEFT);
 8003ee2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003ee6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003eea:	2211      	movs	r2, #17
 8003eec:	4936      	ldr	r1, [pc, #216]	; (8003fc8 <oscilloscope_process+0x1a5c>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	f016 ff80 	bl	801adf4 <nk_label>

                static int a = 0;
                static int b = 0;
                b = a;
 8003ef4:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <oscilloscope_process+0x1a60>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <oscilloscope_process+0x1a64>)
 8003efa:	6013      	str	r3, [r2, #0]
                a = get_systick();
 8003efc:	f7fd fd9a 	bl	8001a34 <get_systick>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <oscilloscope_process+0x1a60>)
 8003f04:	6013      	str	r3, [r2, #0]
                int d = diff_systick(b,a);
 8003f06:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <oscilloscope_process+0x1a64>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a30      	ldr	r2, [pc, #192]	; (8003fcc <oscilloscope_process+0x1a60>)
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd fd9b 	bl	8001a4c <diff_systick>
 8003f16:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
                char buffer[32];
                sprintf(buffer, "%d", d);
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003f22:	492c      	ldr	r1, [pc, #176]	; (8003fd4 <oscilloscope_process+0x1a68>)
 8003f24:	4618      	mov	r0, r3
 8003f26:	f01a f879 	bl	801e01c <siprintf>

                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual fps
 8003f2a:	f107 010c 	add.w	r1, r7, #12
 8003f2e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f32:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f36:	2211      	movs	r2, #17
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f016 ff5b 	bl	801adf4 <nk_label>

                float ratio = 0.0f; // Calculate memory ratio here
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
                nk_label(ctx, "Memory", NK_TEXT_LEFT);
 8003f46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f4a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f4e:	2211      	movs	r2, #17
 8003f50:	4921      	ldr	r1, [pc, #132]	; (8003fd8 <oscilloscope_process+0x1a6c>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	f016 ff4e 	bl	801adf4 <nk_label>

                sprintf(buffer, "%d", ctx->memory.allocated );
 8003f58:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f5c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f66:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	4919      	ldr	r1, [pc, #100]	; (8003fd4 <oscilloscope_process+0x1a68>)
 8003f70:	4618      	mov	r0, r3
 8003f72:	f01a f853 	bl	801e01c <siprintf>
                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual memory ratio
 8003f76:	f107 010c 	add.w	r1, r7, #12
 8003f7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f7e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f82:	2211      	movs	r2, #17
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	f016 ff35 	bl	801adf4 <nk_label>

                nk_tree_pop(ctx);
 8003f8a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f8e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	f017 fb91 	bl	801b6ba <nk_tree_pop>
            }
        }
        //nk_end(ctx);
    }
	nk_end(ctx);
 8003f98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f9c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f019 f8cf 	bl	801d144 <nk_end>
}
 8003fa6:	bf00      	nop
 8003fa8:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb0:	08020e28 	.word	0x08020e28
 8003fb4:	08020e40 	.word	0x08020e40
 8003fb8:	08020e50 	.word	0x08020e50
 8003fbc:	08020e58 	.word	0x08020e58
 8003fc0:	08020e70 	.word	0x08020e70
 8003fc4:	08020f9c 	.word	0x08020f9c
 8003fc8:	08020e78 	.word	0x08020e78
 8003fcc:	200007f0 	.word	0x200007f0
 8003fd0:	200007f4 	.word	0x200007f4
 8003fd4:	08020e7c 	.word	0x08020e7c
 8003fd8:	08020e80 	.word	0x08020e80

08003fdc <nk_draw_fb>:



int quadrant = 0x01;
void nk_draw_fb( struct nk_context *ctx, const tFramebuf *pfb )
{
 8003fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe0:	b096      	sub	sp, #88	; 0x58
 8003fe2:	af02      	add	r7, sp, #8
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
	  for( int y0 = 0 ; y0 < 320 ; y0 += 40 )
 8003fe8:	2300      	movs	r3, #0
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fec:	e3b0      	b.n	8004750 <nk_draw_fb+0x774>
	  {
	   framebuf_fill( pfb, 0x00000000 );
 8003fee:	2100      	movs	r1, #0
 8003ff0:	68b8      	ldr	r0, [r7, #8]
 8003ff2:	f009 fcd4 	bl	800d99e <framebuf_fill>

	  {
		  const struct nk_command *cmd = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
		  nk_foreach(cmd, ctx)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f00c fcf2 	bl	80109e4 <nk__begin>
 8004000:	64b8      	str	r0, [r7, #72]	; 0x48
 8004002:	e393      	b.n	800472c <nk_draw_fb+0x750>
		  {
			  //printf( "cmd->type = %d\n", cmd->type );
			  switch (cmd->type) {
 8004004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b11      	cmp	r3, #17
 800400a:	f200 8389 	bhi.w	8004720 <nk_draw_fb+0x744>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <nk_draw_fb+0x38>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004721 	.word	0x08004721
 8004018:	0800405d 	.word	0x0800405d
 800401c:	08004063 	.word	0x08004063
 8004020:	08004721 	.word	0x08004721
 8004024:	08004159 	.word	0x08004159
 8004028:	0800435f 	.word	0x0800435f
 800402c:	08004721 	.word	0x08004721
 8004030:	08004505 	.word	0x08004505
 8004034:	0800457f 	.word	0x0800457f
 8004038:	08004721 	.word	0x08004721
 800403c:	08004721 	.word	0x08004721
 8004040:	08004721 	.word	0x08004721
 8004044:	08004657 	.word	0x08004657
 8004048:	08004721 	.word	0x08004721
 800404c:	08004721 	.word	0x08004721
 8004050:	08004721 	.word	0x08004721
 8004054:	080045f3 	.word	0x080045f3
 8004058:	08004621 	.word	0x08004621
			  case NK_COMMAND_NOP: break;
			  case NK_COMMAND_SCISSOR: {
				  const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	61fb      	str	r3, [r7, #28]
			  } break;
 8004060:	e35f      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_LINE: {
				  const struct nk_command_line *l = (const struct nk_command_line*)cmd;
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	623b      	str	r3, [r7, #32]
				  if( l->begin.y == l->end.y )
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	d121      	bne.n	80040ba <nk_draw_fb+0xde>
				  {
					  framebuf_hline( pfb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800407c:	461e      	mov	r6, r3
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004084:	461a      	mov	r2, r3
 8004086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004088:	1ad4      	subs	r4, r2, r3
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004090:	461a      	mov	r2, r3
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004098:	1ad5      	subs	r5, r2, r3
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80040a0:	4613      	mov	r3, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fd62 	bl	8001b6c <nk_colot_to_rgb666>
 80040a8:	4603      	mov	r3, r0
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	462b      	mov	r3, r5
 80040ae:	4622      	mov	r2, r4
 80040b0:	4631      	mov	r1, r6
 80040b2:	68b8      	ldr	r0, [r7, #8]
 80040b4:	f009 fcc3 	bl	800da3e <framebuf_hline>
				  }
				  else
				  {
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
				  }
			  } break;
 80040b8:	e333      	b.n	8004722 <nk_draw_fb+0x746>
				  else if( l->begin.x == l->end.x )
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d121      	bne.n	800410e <nk_draw_fb+0x132>
					  framebuf_vline( pfb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80040d0:	461e      	mov	r6, r3
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80040d8:	461a      	mov	r2, r3
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	1ad4      	subs	r4, r2, r3
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80040ec:	1ad5      	subs	r5, r2, r3
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80040f4:	4613      	mov	r3, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fd38 	bl	8001b6c <nk_colot_to_rgb666>
 80040fc:	4603      	mov	r3, r0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	462b      	mov	r3, r5
 8004102:	4622      	mov	r2, r4
 8004104:	4631      	mov	r1, r6
 8004106:	68b8      	ldr	r0, [r7, #8]
 8004108:	f009 fcae 	bl	800da68 <framebuf_vline>
			  } break;
 800410c:	e309      	b.n	8004722 <nk_draw_fb+0x746>
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004114:	461e      	mov	r6, r3
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800411c:	461a      	mov	r2, r3
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	1ad5      	subs	r5, r2, r3
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004128:	4698      	mov	r8, r3
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004130:	461a      	mov	r2, r3
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	1ad4      	subs	r4, r2, r3
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800413c:	4613      	mov	r3, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fd14 	bl	8001b6c <nk_colot_to_rgb666>
 8004144:	4603      	mov	r3, r0
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	9400      	str	r4, [sp, #0]
 800414a:	4643      	mov	r3, r8
 800414c:	462a      	mov	r2, r5
 800414e:	4631      	mov	r1, r6
 8004150:	68b8      	ldr	r0, [r7, #8]
 8004152:	f009 fd55 	bl	800dc00 <framebuf_line>
			  } break;
 8004156:	e2e4      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_RECT: {
				  const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;
 8004158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
				  //printf( "NK_COMMAND_RECT x: %d, y: %d, width: %d, height: %d, rounding: %d, thickness: %d\n", r->x, r->y, r->w, r->h, r->rounding, r->line_thickness );
				  //framebuf_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
				  int rad = 4;//r->rounding;
 800415c:	2304      	movs	r3, #4
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_0 );
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	8a1b      	ldrh	r3, [r3, #16]
 800416c:	441a      	add	r2, r3
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	1ad4      	subs	r4, r2, r3
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004178:	461a      	mov	r2, r3
 800417a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004180:	8a52      	ldrh	r2, [r2, #18]
 8004182:	441a      	add	r2, r3
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1ad5      	subs	r5, r2, r3
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	6958      	ldr	r0, [r3, #20]
 800418c:	f7fd fcee 	bl	8001b6c <nk_colot_to_rgb666>
 8004190:	4603      	mov	r3, r0
 8004192:	2201      	movs	r2, #1
 8004194:	9201      	str	r2, [sp, #4]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	462a      	mov	r2, r5
 800419c:	4621      	mov	r1, r4
 800419e:	68b8      	ldr	r0, [r7, #8]
 80041a0:	f009 fdc5 	bl	800dd2e <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_90 );
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	18d4      	adds	r4, r2, r3
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041be:	8a52      	ldrh	r2, [r2, #18]
 80041c0:	441a      	add	r2, r3
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad5      	subs	r5, r2, r3
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	6958      	ldr	r0, [r3, #20]
 80041ca:	f7fd fccf 	bl	8001b6c <nk_colot_to_rgb666>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2202      	movs	r2, #2
 80041d2:	9201      	str	r2, [sp, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	462a      	mov	r2, r5
 80041da:	4621      	mov	r1, r4
 80041dc:	68b8      	ldr	r0, [r7, #8]
 80041de:	f009 fda6 	bl	800dd2e <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_180 );
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	18d4      	adds	r4, r2, r3
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	18d5      	adds	r5, r2, r3
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	6958      	ldr	r0, [r3, #20]
 8004202:	f7fd fcb3 	bl	8001b6c <nk_colot_to_rgb666>
 8004206:	4603      	mov	r3, r0
 8004208:	2204      	movs	r2, #4
 800420a:	9201      	str	r2, [sp, #4]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	462a      	mov	r2, r5
 8004212:	4621      	mov	r1, r4
 8004214:	68b8      	ldr	r0, [r7, #8]
 8004216:	f009 fd8a 	bl	800dd2e <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_270 );
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004220:	461a      	mov	r2, r3
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	8a1b      	ldrh	r3, [r3, #16]
 8004226:	441a      	add	r2, r3
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	1ad4      	subs	r4, r2, r3
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004232:	461a      	mov	r2, r3
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	18d5      	adds	r5, r2, r3
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	6958      	ldr	r0, [r3, #20]
 8004240:	f7fd fc94 	bl	8001b6c <nk_colot_to_rgb666>
 8004244:	4603      	mov	r3, r0
 8004246:	2208      	movs	r2, #8
 8004248:	9201      	str	r2, [sp, #4]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	462a      	mov	r2, r5
 8004250:	4621      	mov	r1, r4
 8004252:	68b8      	ldr	r0, [r7, #8]
 8004254:	f009 fd6b 	bl	800dd2e <framebuf_circle_quadrant>
                    framebuf_hline( pfb, r->x+rad, r->y-y0, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800425e:	461a      	mov	r2, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	18d4      	adds	r4, r2, r3
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800426a:	461a      	mov	r2, r3
 800426c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426e:	1ad5      	subs	r5, r2, r3
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	8a1b      	ldrh	r3, [r3, #16]
 8004274:	461a      	mov	r2, r3
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1ad2      	subs	r2, r2, r3
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad6      	subs	r6, r2, r3
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	6958      	ldr	r0, [r3, #20]
 8004282:	f7fd fc73 	bl	8001b6c <nk_colot_to_rgb666>
 8004286:	4603      	mov	r3, r0
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4633      	mov	r3, r6
 800428c:	462a      	mov	r2, r5
 800428e:	4621      	mov	r1, r4
 8004290:	68b8      	ldr	r0, [r7, #8]
 8004292:	f009 fbd4 	bl	800da3e <framebuf_hline>
                    framebuf_hline( pfb, r->x+rad, r->y-y0+r->h, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800429c:	461a      	mov	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	18d4      	adds	r4, r2, r3
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b0:	8a52      	ldrh	r2, [r2, #18]
 80042b2:	189d      	adds	r5, r3, r2
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	8a1b      	ldrh	r3, [r3, #16]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1ad6      	subs	r6, r2, r3
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	6958      	ldr	r0, [r3, #20]
 80042c6:	f7fd fc51 	bl	8001b6c <nk_colot_to_rgb666>
 80042ca:	4603      	mov	r3, r0
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	4633      	mov	r3, r6
 80042d0:	462a      	mov	r2, r5
 80042d2:	4621      	mov	r1, r4
 80042d4:	68b8      	ldr	r0, [r7, #8]
 80042d6:	f009 fbb2 	bl	800da3e <framebuf_hline>
                    framebuf_vline( pfb, r->x, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80042e0:	461e      	mov	r6, r3
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ec:	1ad2      	subs	r2, r2, r3
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	18d4      	adds	r4, r2, r3
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	8a5b      	ldrh	r3, [r3, #18]
 80042f6:	461a      	mov	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	1ad5      	subs	r5, r2, r3
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	6958      	ldr	r0, [r3, #20]
 8004304:	f7fd fc32 	bl	8001b6c <nk_colot_to_rgb666>
 8004308:	4603      	mov	r3, r0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	462b      	mov	r3, r5
 800430e:	4622      	mov	r2, r4
 8004310:	4631      	mov	r1, r6
 8004312:	68b8      	ldr	r0, [r7, #8]
 8004314:	f009 fba8 	bl	800da68 <framebuf_vline>
                    framebuf_vline( pfb, r->x+r->w, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	8a1b      	ldrh	r3, [r3, #16]
 8004324:	18d4      	adds	r4, r2, r3
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	18d5      	adds	r5, r2, r3
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	8a5b      	ldrh	r3, [r3, #18]
 800433a:	461a      	mov	r2, r3
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	1ad6      	subs	r6, r2, r3
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	6958      	ldr	r0, [r3, #20]
 8004348:	f7fd fc10 	bl	8001b6c <nk_colot_to_rgb666>
 800434c:	4603      	mov	r3, r0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4633      	mov	r3, r6
 8004352:	462a      	mov	r2, r5
 8004354:	4621      	mov	r1, r4
 8004356:	68b8      	ldr	r0, [r7, #8]
 8004358:	f009 fb86 	bl	800da68 <framebuf_vline>
			  } break;
 800435c:	e1e1      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_RECT_FILLED: {
				  const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;
 800435e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
				  //framebuf_fill_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
                  int rad = 4;//r->rounding;
 8004362:	2304      	movs	r3, #4
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
                  struct nk_color r_color = r->color;
 8004366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004368:	f107 0318 	add.w	r3, r7, #24
 800436c:	3212      	adds	r2, #18
 800436e:	6810      	ldr	r0, [r2, #0]
 8004370:	6018      	str	r0, [r3, #0]
                  if( r_color.r == 50 )
 8004372:	7e3b      	ldrb	r3, [r7, #24]
 8004374:	2b32      	cmp	r3, #50	; 0x32
 8004376:	d107      	bne.n	8004388 <nk_draw_fb+0x3ac>
                  {
                	  r_color.r = 40;
 8004378:	2328      	movs	r3, #40	; 0x28
 800437a:	763b      	strb	r3, [r7, #24]
                	  r_color.g = 40;
 800437c:	2328      	movs	r3, #40	; 0x28
 800437e:	767b      	strb	r3, [r7, #25]
                	  r_color.b = 40;
 8004380:	2328      	movs	r3, #40	; 0x28
 8004382:	76bb      	strb	r3, [r7, #26]
                	  r_color.a = 255;
 8004384:	23ff      	movs	r3, #255	; 0xff
 8004386:	76fb      	strb	r3, [r7, #27]
                  }
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800438e:	461a      	mov	r2, r3
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	89db      	ldrh	r3, [r3, #14]
 8004394:	441a      	add	r2, r3
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	1ad4      	subs	r4, r2, r3
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a8:	8a12      	ldrh	r2, [r2, #16]
 80043aa:	441a      	add	r2, r3
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	1ad5      	subs	r5, r2, r3
 80043b0:	69b8      	ldr	r0, [r7, #24]
 80043b2:	f7fd fbdb 	bl	8001b6c <nk_colot_to_rgb666>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2202      	movs	r2, #2
 80043ba:	9201      	str	r2, [sp, #4]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	462a      	mov	r2, r5
 80043c2:	4621      	mov	r1, r4
 80043c4:	68b8      	ldr	r0, [r7, #8]
 80043c6:	f009 fdc9 	bl	800df5c <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	18d4      	adds	r4, r2, r3
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043dc:	461a      	mov	r2, r3
 80043de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e4:	8a12      	ldrh	r2, [r2, #16]
 80043e6:	441a      	add	r2, r3
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	1ad5      	subs	r5, r2, r3
 80043ec:	69b8      	ldr	r0, [r7, #24]
 80043ee:	f7fd fbbd 	bl	8001b6c <nk_colot_to_rgb666>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2202      	movs	r2, #2
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	462a      	mov	r2, r5
 80043fe:	4621      	mov	r1, r4
 8004400:	68b8      	ldr	r0, [r7, #8]
 8004402:	f009 fdab 	bl	800df5c <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800440c:	461a      	mov	r2, r3
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	18d4      	adds	r4, r2, r3
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004418:	461a      	mov	r2, r3
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	1ad2      	subs	r2, r2, r3
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	18d5      	adds	r5, r2, r3
 8004422:	69b8      	ldr	r0, [r7, #24]
 8004424:	f7fd fba2 	bl	8001b6c <nk_colot_to_rgb666>
 8004428:	4603      	mov	r3, r0
 800442a:	2202      	movs	r2, #2
 800442c:	9201      	str	r2, [sp, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	462a      	mov	r2, r5
 8004434:	4621      	mov	r1, r4
 8004436:	68b8      	ldr	r0, [r7, #8]
 8004438:	f009 fd90 	bl	800df5c <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004442:	461a      	mov	r2, r3
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	89db      	ldrh	r3, [r3, #14]
 8004448:	441a      	add	r2, r3
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	1ad4      	subs	r4, r2, r3
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004454:	461a      	mov	r2, r3
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	18d5      	adds	r5, r2, r3
 800445e:	69b8      	ldr	r0, [r7, #24]
 8004460:	f7fd fb84 	bl	8001b6c <nk_colot_to_rgb666>
 8004464:	4603      	mov	r3, r0
 8004466:	2202      	movs	r2, #2
 8004468:	9201      	str	r2, [sp, #4]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	462a      	mov	r2, r5
 8004470:	4621      	mov	r1, r4
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f009 fd72 	bl	800df5c <framebuf_fill_circle_quadrant>
                    // up and down
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, r->h, nk_colot_to_rgb666( r_color ) );
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800447e:	461a      	mov	r2, r3
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	18d4      	adds	r4, r2, r3
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448e:	1ad5      	subs	r5, r2, r3
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	89db      	ldrh	r3, [r3, #14]
 8004494:	461a      	mov	r2, r3
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	1ad2      	subs	r2, r2, r3
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	1ad6      	subs	r6, r2, r3
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	8a1b      	ldrh	r3, [r3, #16]
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	69b8      	ldr	r0, [r7, #24]
 80044a6:	f7fd fb61 	bl	8001b6c <nk_colot_to_rgb666>
 80044aa:	4603      	mov	r3, r0
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4633      	mov	r3, r6
 80044b4:	462a      	mov	r2, r5
 80044b6:	4621      	mov	r1, r4
 80044b8:	68b8      	ldr	r0, [r7, #8]
 80044ba:	f009 fa88 	bl	800d9ce <framebuf_fill_rect>
                    // middle
                    framebuf_fill_rect(  pfb, r->x, r->y-y0+rad, r->w, r->h-rad-rad, nk_colot_to_rgb666( r_color ) );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80044c4:	461e      	mov	r6, r3
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	1ad2      	subs	r2, r2, r3
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	18d5      	adds	r5, r2, r3
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	89db      	ldrh	r3, [r3, #14]
 80044da:	4698      	mov	r8, r3
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	8a1b      	ldrh	r3, [r3, #16]
 80044e0:	461a      	mov	r2, r3
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	1ad2      	subs	r2, r2, r3
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	1ad4      	subs	r4, r2, r3
 80044ea:	69b8      	ldr	r0, [r7, #24]
 80044ec:	f7fd fb3e 	bl	8001b6c <nk_colot_to_rgb666>
 80044f0:	4603      	mov	r3, r0
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	9400      	str	r4, [sp, #0]
 80044f6:	4643      	mov	r3, r8
 80044f8:	462a      	mov	r2, r5
 80044fa:	4631      	mov	r1, r6
 80044fc:	68b8      	ldr	r0, [r7, #8]
 80044fe:	f009 fa66 	bl	800d9ce <framebuf_fill_rect>
			 } break;
 8004502:	e10e      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_CIRCLE: {
				  const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;
 8004504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
				  framebuf_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800450e:	461a      	mov	r2, r3
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	89db      	ldrh	r3, [r3, #14]
 8004514:	4619      	mov	r1, r3
 8004516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004518:	8a1b      	ldrh	r3, [r3, #16]
 800451a:	440b      	add	r3, r1
 800451c:	2b00      	cmp	r3, #0
 800451e:	da00      	bge.n	8004522 <nk_draw_fb+0x546>
 8004520:	3303      	adds	r3, #3
 8004522:	109b      	asrs	r3, r3, #2
 8004524:	18d4      	adds	r4, r2, r3
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800452c:	461a      	mov	r2, r3
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	1ad2      	subs	r2, r2, r3
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	89db      	ldrh	r3, [r3, #14]
 8004536:	4619      	mov	r1, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	8a1b      	ldrh	r3, [r3, #16]
 800453c:	440b      	add	r3, r1
 800453e:	2b00      	cmp	r3, #0
 8004540:	da00      	bge.n	8004544 <nk_draw_fb+0x568>
 8004542:	3303      	adds	r3, #3
 8004544:	109b      	asrs	r3, r3, #2
 8004546:	18d5      	adds	r5, r2, r3
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	89db      	ldrh	r3, [r3, #14]
 800454c:	461a      	mov	r2, r3
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004550:	8a1b      	ldrh	r3, [r3, #16]
 8004552:	4413      	add	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	da00      	bge.n	800455a <nk_draw_fb+0x57e>
 8004558:	3303      	adds	r3, #3
 800455a:	109b      	asrs	r3, r3, #2
 800455c:	461e      	mov	r6, r3
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004564:	4613      	mov	r3, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd fb00 	bl	8001b6c <nk_colot_to_rgb666>
 800456c:	4603      	mov	r3, r0
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	4633      	mov	r3, r6
 8004572:	462a      	mov	r2, r5
 8004574:	4621      	mov	r1, r4
 8004576:	68b8      	ldr	r0, [r7, #8]
 8004578:	f009 fb57 	bl	800dc2a <framebuf_circle>
			  } break;
 800457c:	e0d1      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_CIRCLE_FILLED: {
				  const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;
 800457e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
				  framebuf_fill_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004588:	461a      	mov	r2, r3
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	899b      	ldrh	r3, [r3, #12]
 800458e:	4619      	mov	r1, r3
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	89db      	ldrh	r3, [r3, #14]
 8004594:	440b      	add	r3, r1
 8004596:	2b00      	cmp	r3, #0
 8004598:	da00      	bge.n	800459c <nk_draw_fb+0x5c0>
 800459a:	3303      	adds	r3, #3
 800459c:	109b      	asrs	r3, r3, #2
 800459e:	18d4      	adds	r4, r2, r3
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	899b      	ldrh	r3, [r3, #12]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	89db      	ldrh	r3, [r3, #14]
 80045b6:	440b      	add	r3, r1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da00      	bge.n	80045be <nk_draw_fb+0x5e2>
 80045bc:	3303      	adds	r3, #3
 80045be:	109b      	asrs	r3, r3, #2
 80045c0:	18d5      	adds	r5, r2, r3
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	899b      	ldrh	r3, [r3, #12]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	89db      	ldrh	r3, [r3, #14]
 80045cc:	4413      	add	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da00      	bge.n	80045d4 <nk_draw_fb+0x5f8>
 80045d2:	3303      	adds	r3, #3
 80045d4:	109b      	asrs	r3, r3, #2
 80045d6:	461e      	mov	r6, r3
 80045d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045da:	6918      	ldr	r0, [r3, #16]
 80045dc:	f7fd fac6 	bl	8001b6c <nk_colot_to_rgb666>
 80045e0:	4603      	mov	r3, r0
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	4633      	mov	r3, r6
 80045e6:	462a      	mov	r2, r5
 80045e8:	4621      	mov	r1, r4
 80045ea:	68b8      	ldr	r0, [r7, #8]
 80045ec:	f009 fc3a 	bl	800de64 <framebuf_fill_circle>
			  } break;
 80045f0:	e097      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_TEXT: {
				  const struct nk_command_text *t = (const struct nk_command_text*)cmd;
 80045f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f4:	643b      	str	r3, [r7, #64]	; 0x40
				  //framebuf_text( pfb, t->x, t->y-y0, (char *)t->string, nk_colot_to_rgb666( t->foreground ) );
				  lcd_text( pfb,  t->x, t->y-y0, (char *)t->string, 0xFFFF );
 80045f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80045fc:	b299      	uxth	r1, r3
 80045fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004600:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004604:	b29a      	uxth	r2, r3
 8004606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004608:	b29b      	uxth	r3, r3
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	b29a      	uxth	r2, r3
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	3324      	adds	r3, #36	; 0x24
 8004612:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004616:	9000      	str	r0, [sp, #0]
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f7fd fd57 	bl	80020cc <lcd_text>
			  } break;
 800461e:	e080      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_IMAGE: {
				  const struct nk_command_image *i = (const struct nk_command_image*)cmd;
 8004620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004622:	647b      	str	r3, [r7, #68]	; 0x44
				  framebuf_fill_rect( pfb, i->x, i->y-y0, i->w, i->h, 0x0003FFFF );
 8004624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004626:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004632:	461a      	mov	r2, r3
 8004634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463a:	899b      	ldrh	r3, [r3, #12]
 800463c:	461c      	mov	r4, r3
 800463e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004640:	89db      	ldrh	r3, [r3, #14]
 8004642:	4619      	mov	r1, r3
 8004644:	4b48      	ldr	r3, [pc, #288]	; (8004768 <nk_draw_fb+0x78c>)
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	9100      	str	r1, [sp, #0]
 800464a:	4623      	mov	r3, r4
 800464c:	4601      	mov	r1, r0
 800464e:	68b8      	ldr	r0, [r7, #8]
 8004650:	f009 f9bd 	bl	800d9ce <framebuf_fill_rect>
			  } break;
 8004654:	e065      	b.n	8004722 <nk_draw_fb+0x746>
			  case NK_COMMAND_TRIANGLE_FILLED: {
				  const struct nk_command_triangle_filled *t = (const struct nk_command_triangle_filled*)cmd;
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
				  struct nk_color t_color = t->color;
 800465a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	617b      	str	r3, [r7, #20]
				if( 1 )
				{
				  t_color.r = 175;
 8004660:	23af      	movs	r3, #175	; 0xaf
 8004662:	753b      	strb	r3, [r7, #20]
				  t_color.g = 175;
 8004664:	23af      	movs	r3, #175	; 0xaf
 8004666:	757b      	strb	r3, [r7, #21]
				  t_color.b = 175;
 8004668:	23af      	movs	r3, #175	; 0xaf
 800466a:	75bb      	strb	r3, [r7, #22]
				  t_color.a = 255;
 800466c:	23ff      	movs	r3, #255	; 0xff
 800466e:	75fb      	strb	r3, [r7, #23]
				}

				  framebuf_line( pfb, t->a.x, t->a.y-y0, t->b.x, t->b.y-y0, 0xFFFF );
 8004670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004672:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800467e:	461a      	mov	r2, r3
 8004680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004686:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800468a:	461c      	mov	r4, r3
 800468c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004692:	4619      	mov	r1, r3
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	1acb      	subs	r3, r1, r3
 8004698:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800469c:	9101      	str	r1, [sp, #4]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4623      	mov	r3, r4
 80046a2:	4601      	mov	r1, r0
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f009 faab 	bl	800dc00 <framebuf_line>
				  framebuf_line( pfb, t->b.x, t->b.y-y0, t->c.x, t->c.y-y0, 0xFFFF );
 80046aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046b0:	4618      	mov	r0, r3
 80046b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80046b8:	461a      	mov	r2, r3
 80046ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046bc:	1ad2      	subs	r2, r2, r3
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80046c4:	461c      	mov	r4, r3
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80046cc:	4619      	mov	r1, r3
 80046ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d0:	1acb      	subs	r3, r1, r3
 80046d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046d6:	9101      	str	r1, [sp, #4]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4623      	mov	r3, r4
 80046dc:	4601      	mov	r1, r0
 80046de:	68b8      	ldr	r0, [r7, #8]
 80046e0:	f009 fa8e 	bl	800dc00 <framebuf_line>
				  framebuf_line( pfb, t->c.x, t->c.y-y0, t->a.x, t->a.y-y0, 0xFFFF );
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80046ea:	4618      	mov	r0, r3
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046fe:	461c      	mov	r4, r3
 8004700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004702:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004706:	4619      	mov	r1, r3
 8004708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004710:	9101      	str	r1, [sp, #4]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	4623      	mov	r3, r4
 8004716:	4601      	mov	r1, r0
 8004718:	68b8      	ldr	r0, [r7, #8]
 800471a:	f009 fa71 	bl	800dc00 <framebuf_line>
			  } break;
 800471e:	e000      	b.n	8004722 <nk_draw_fb+0x746>
			  default: break;
 8004720:	bf00      	nop
		  nk_foreach(cmd, ctx)
 8004722:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f00c f9c9 	bl	8010abc <nk__next>
 800472a:	64b8      	str	r0, [r7, #72]	; 0x48
 800472c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472e:	2b00      	cmp	r3, #0
 8004730:	f47f ac68 	bne.w	8004004 <nk_draw_fb+0x28>
			  }
		  }
	  }

		lcd_bmp( 0, y0, 480, 40, pfb->buf );
 8004734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004736:	b219      	sxth	r1, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2328      	movs	r3, #40	; 0x28
 8004740:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004744:	2000      	movs	r0, #0
 8004746:	f7fd fe21 	bl	800238c <lcd_bmp>
	  for( int y0 = 0 ; y0 < 320 ; y0 += 40 )
 800474a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474c:	3328      	adds	r3, #40	; 0x28
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004752:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004756:	f6ff ac4a 	blt.w	8003fee <nk_draw_fb+0x12>
	  }
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	3750      	adds	r7, #80	; 0x50
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004766:	bf00      	nop
 8004768:	0003ffff 	.word	0x0003ffff

0800476c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b09c      	sub	sp, #112	; 0x70
 8004770:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004772:	f001 fe26 	bl	80063c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004776:	f000 f979 	bl	8004a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800477a:	f7fd f8a7 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 800477e:	f7fc ff7b 	bl	8001678 <MX_DMA_Init>
  MX_QUADSPI1_Init();
 8004782:	f000 fb41 	bl	8004e08 <MX_QUADSPI1_Init>
  MX_ADC1_Init();
 8004786:	f7fc faa7 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC2_Init();
 800478a:	f7fc fe71 	bl	8001470 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 800478e:	f000 f9bb 	bl	8004b08 <MX_OPAMP1_Init>
  MX_DAC1_Init();
 8004792:	f7fc fe29 	bl	80013e8 <MX_DAC1_Init>
  MX_ADC3_Init();
 8004796:	f7fc fb59 	bl	8000e4c <MX_ADC3_Init>
  MX_ADC4_Init();
 800479a:	f7fc fbd1 	bl	8000f40 <MX_ADC4_Init>
  MX_ADC5_Init();
 800479e:	f7fc fc37 	bl	8001010 <MX_ADC5_Init>
  MX_OPAMP3_Init();
 80047a2:	f000 f9dd 	bl	8004b60 <MX_OPAMP3_Init>
  MX_OPAMP5_Init();
 80047a6:	f000 fa07 	bl	8004bb8 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80047aa:	f000 fa31 	bl	8004c10 <MX_OPAMP6_Init>
  MX_FMC_Init();
 80047ae:	f7fc ffbd 	bl	800172c <MX_FMC_Init>
  MX_SPI3_Init();
 80047b2:	f001 fa77 	bl	8005ca4 <MX_SPI3_Init>
  MX_TIM1_Init();
 80047b6:	f001 fc7b 	bl	80060b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80047ba:	f001 fccb 	bl	8006154 <MX_TIM2_Init>
  MX_TIM3_Init();
 80047be:	f001 fd3d 	bl	800623c <MX_TIM3_Init>
  //float bx = -15800/989.0;
  //float ay = 250/1407.0;
  //float by = -1150/67.0;

  //solve([50=a*250+b,480-50=a*1760+b],[a,b])
  float ax = 38.0/151.0;
 80047c2:	4b9a      	ldr	r3, [pc, #616]	; (8004a2c <main+0x2c0>)
 80047c4:	65bb      	str	r3, [r7, #88]	; 0x58
  float bx = -1950.0/151.0;
 80047c6:	4b9a      	ldr	r3, [pc, #616]	; (8004a30 <main+0x2c4>)
 80047c8:	657b      	str	r3, [r7, #84]	; 0x54
  //solve([50=a*387+b,320-50=a*1627+b],[a,b])
  float ay = 11.0/62.0;
 80047ca:	4b9a      	ldr	r3, [pc, #616]	; (8004a34 <main+0x2c8>)
 80047cc:	653b      	str	r3, [r7, #80]	; 0x50
  float by = -1157.0/62.0;
 80047ce:	4b9a      	ldr	r3, [pc, #616]	; (8004a38 <main+0x2cc>)
 80047d0:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint16_t x = 0, y = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80047d6:	2300      	movs	r3, #0
 80047d8:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t x_bck = 0, y_bck = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48



  tTsc2046 tsc;
  tsc2046_init( &tsc, &hspi3, GPIOA, GPIO_PIN_15, ax, bx, ay, by, 32 );
 80047e6:	f107 0010 	add.w	r0, r7, #16
 80047ea:	2320      	movs	r3, #32
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	edd7 1a13 	vldr	s3, [r7, #76]	; 0x4c
 80047f2:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 80047f6:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 80047fa:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80047fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004802:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004806:	498d      	ldr	r1, [pc, #564]	; (8004a3c <main+0x2d0>)
 8004808:	f018 fdb0 	bl	801d36c <tsc2046_init>

  lcd_config();
 800480c:	f7fd f95a 	bl	8001ac4 <lcd_config>

  lcd_rect( 50, 50, 2, 2, 0xFFFF );
 8004810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2302      	movs	r3, #2
 8004818:	2202      	movs	r2, #2
 800481a:	2132      	movs	r1, #50	; 0x32
 800481c:	2032      	movs	r0, #50	; 0x32
 800481e:	f7fd fa05 	bl	8001c2c <lcd_rect>
  lcd_rect( 480-50, 50, 2, 2, 0xFFFF );
 8004822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2302      	movs	r3, #2
 800482a:	2202      	movs	r2, #2
 800482c:	2132      	movs	r1, #50	; 0x32
 800482e:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8004832:	f7fd f9fb 	bl	8001c2c <lcd_rect>
  lcd_rect( 50, 320-50, 2, 2, 0xFFFF );
 8004836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2302      	movs	r3, #2
 800483e:	2202      	movs	r2, #2
 8004840:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004844:	2032      	movs	r0, #50	; 0x32
 8004846:	f7fd f9f1 	bl	8001c2c <lcd_rect>
  lcd_rect( 480-50, 320-50, 2, 2, 0xFFFF );
 800484a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2302      	movs	r3, #2
 8004852:	2202      	movs	r2, #2
 8004854:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004858:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 800485c:	f7fd f9e6 	bl	8001c2c <lcd_rect>

  while( 0 )
 8004860:	bf00      	nop
	  lcd_rect( x, y, 2, 2, 0xFFFF );
	  printf("%d, %d, %d\n", cnt++, x, y );
	  HAL_Delay( 1 );
  }

  int d = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
  d = lcd_set_pixel_bench( 100, 100, 0xFFFF );
 8004866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800486a:	2164      	movs	r1, #100	; 0x64
 800486c:	2064      	movs	r0, #100	; 0x64
 800486e:	f7fd fb3d 	bl	8001eec <lcd_set_pixel_bench>
 8004872:	6478      	str	r0, [r7, #68]	; 0x44
  d = d+1;
 8004874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004876:	3301      	adds	r3, #1
 8004878:	647b      	str	r3, [r7, #68]	; 0x44
  static struct nk_buffer pool;
  static struct nk_user_font font;
  static uint8_t buf_cmds[1024*8] = {0};
  static uint8_t buf_pool[1024*8] = {0};

  nk_buffer_init_fixed( &cmds, buf_cmds, 1024*8 );
 800487a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800487e:	4970      	ldr	r1, [pc, #448]	; (8004a40 <main+0x2d4>)
 8004880:	4870      	ldr	r0, [pc, #448]	; (8004a44 <main+0x2d8>)
 8004882:	f009 fc3f 	bl	800e104 <nk_buffer_init_fixed>
  nk_buffer_init_fixed( &pool, buf_pool, 1024*8 );
 8004886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800488a:	496f      	ldr	r1, [pc, #444]	; (8004a48 <main+0x2dc>)
 800488c:	486f      	ldr	r0, [pc, #444]	; (8004a4c <main+0x2e0>)
 800488e:	f009 fc39 	bl	800e104 <nk_buffer_init_fixed>

  font.height = 20;//fontUbuntuBookRNormal16.bbxh;
 8004892:	4b6f      	ldr	r3, [pc, #444]	; (8004a50 <main+0x2e4>)
 8004894:	4a6f      	ldr	r2, [pc, #444]	; (8004a54 <main+0x2e8>)
 8004896:	605a      	str	r2, [r3, #4]
  font.width = text_width_f;
 8004898:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <main+0x2e4>)
 800489a:	4a6f      	ldr	r2, [pc, #444]	; (8004a58 <main+0x2ec>)
 800489c:	609a      	str	r2, [r3, #8]
  nk_init_custom( &ctx, &cmds, &pool, &font );
 800489e:	4b6c      	ldr	r3, [pc, #432]	; (8004a50 <main+0x2e4>)
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <main+0x2e0>)
 80048a2:	4968      	ldr	r1, [pc, #416]	; (8004a44 <main+0x2d8>)
 80048a4:	486d      	ldr	r0, [pc, #436]	; (8004a5c <main+0x2f0>)
 80048a6:	f00b fc75 	bl	8010194 <nk_init_custom>

	static uint8_t fb_buf[480*40*2];
	tFramebuf fb;

	framebuf_init( &fb, 480, 40, fb_buf );
 80048aa:	1d38      	adds	r0, r7, #4
 80048ac:	4b6c      	ldr	r3, [pc, #432]	; (8004a60 <main+0x2f4>)
 80048ae:	2228      	movs	r2, #40	; 0x28
 80048b0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80048b4:	f009 f857 	bl	800d966 <framebuf_init>

	  int pressed = 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	667b      	str	r3, [r7, #100]	; 0x64
	  int pressed_bck = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	663b      	str	r3, [r7, #96]	; 0x60
	  int pressed_bck2 = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	643b      	str	r3, [r7, #64]	; 0x40
	int pressed_cnt = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	65fb      	str	r3, [r7, #92]	; 0x5c
	static struct Oscilloscope osc = {0};

  while( 1 )
  {
	  x_bck = x;
 80048c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  y_bck = y;
 80048ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80048d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  tsc2046_read( &tsc, &x, &y );
 80048d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048d8:	f107 0132 	add.w	r1, r7, #50	; 0x32
 80048dc:	f107 0310 	add.w	r3, r7, #16
 80048e0:	4618      	mov	r0, r3
 80048e2:	f018 fddb 	bl	801d49c <tsc2046_read>

	  pressed_bck2 = pressed_bck;
 80048e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
	  pressed_bck = pressed;
 80048ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
	  pressed = (x!=0);
 80048ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	667b      	str	r3, [r7, #100]	; 0x64

	  if(  (pressed || pressed_bck) )// && (pressed != pressed_bck) )
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <main+0x19e>
 8004902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8083 	beq.w	8004a10 <main+0x2a4>
	  {
		  //printf("%d, %d, %d, %d, %d, %d, %d,\n", pressed_cnt, pressed, pressed_bck, x, y, x_bck, y_bck );
		  int a, b, d;
		  a = get_systick();
 800490a:	f7fd f893 	bl	8001a34 <get_systick>
 800490e:	63f8      	str	r0, [r7, #60]	; 0x3c
		  pressed_cnt++;
 8004910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004912:	3301      	adds	r3, #1
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
		  nk_input_begin( &ctx );
 8004916:	4851      	ldr	r0, [pc, #324]	; (8004a5c <main+0x2f0>)
 8004918:	f00d ff2e 	bl	8012778 <nk_input_begin>
		  if( pressed )
 800491c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800491e:	2b00      	cmp	r3, #0
 8004920:	d012      	beq.n	8004948 <main+0x1dc>
		  {
			  nk_input_motion( &ctx, x, y );
 8004922:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004924:	4619      	mov	r1, r3
 8004926:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004928:	461a      	mov	r2, r3
 800492a:	484c      	ldr	r0, [pc, #304]	; (8004a5c <main+0x2f0>)
 800492c:	f00d ffc4 	bl	80128b8 <nk_input_motion>
			  nk_input_button( &ctx, 0, x, y, 1 );
 8004930:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004932:	461a      	mov	r2, r3
 8004934:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004936:	4619      	mov	r1, r3
 8004938:	2301      	movs	r3, #1
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	460b      	mov	r3, r1
 800493e:	2100      	movs	r1, #0
 8004940:	4846      	ldr	r0, [pc, #280]	; (8004a5c <main+0x2f0>)
 8004942:	f00d ffff 	bl	8012944 <nk_input_button>
 8004946:	e014      	b.n	8004972 <main+0x206>
		  }
		  else if( pressed_bck )
 8004948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800494a:	2b00      	cmp	r3, #0
 800494c:	d011      	beq.n	8004972 <main+0x206>
		  {
			  nk_input_motion( &ctx, x_bck, y_bck );
 800494e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004952:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004956:	4619      	mov	r1, r3
 8004958:	4840      	ldr	r0, [pc, #256]	; (8004a5c <main+0x2f0>)
 800495a:	f00d ffad 	bl	80128b8 <nk_input_motion>
			  nk_input_button( &ctx, 0, x_bck, y_bck, 0 );
 800495e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004962:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004966:	2100      	movs	r1, #0
 8004968:	9100      	str	r1, [sp, #0]
 800496a:	2100      	movs	r1, #0
 800496c:	483b      	ldr	r0, [pc, #236]	; (8004a5c <main+0x2f0>)
 800496e:	f00d ffe9 	bl	8012944 <nk_input_button>
		  }
		  nk_input_end( &ctx );
 8004972:	483a      	ldr	r0, [pc, #232]	; (8004a5c <main+0x2f0>)
 8004974:	f00d ff68 	bl	8012848 <nk_input_end>

		  oscilloscope_process(&osc, &ctx);
 8004978:	4938      	ldr	r1, [pc, #224]	; (8004a5c <main+0x2f0>)
 800497a:	483a      	ldr	r0, [pc, #232]	; (8004a64 <main+0x2f8>)
 800497c:	f7fd fdf6 	bl	800256c <oscilloscope_process>
		  nk_draw_fb( &ctx, &fb );
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4835      	ldr	r0, [pc, #212]	; (8004a5c <main+0x2f0>)
 8004986:	f7ff fb29 	bl	8003fdc <nk_draw_fb>
		  nk_clear(&ctx);
 800498a:	4834      	ldr	r0, [pc, #208]	; (8004a5c <main+0x2f0>)
 800498c:	f00b fc6a 	bl	8010264 <nk_clear>
		  //HAL_Delay(10);
		  b = get_systick();
 8004990:	f7fd f850 	bl	8001a34 <get_systick>
 8004994:	63b8      	str	r0, [r7, #56]	; 0x38
		  d = diff_systick( b, a );
 8004996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800499a:	f7fd f857 	bl	8001a4c <diff_systick>
 800499e:	6378      	str	r0, [r7, #52]	; 0x34
		  if( x )
 80049a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d03f      	beq.n	8004a26 <main+0x2ba>
		  {
			  lcd_rect( x-4, y, 4, 2, 0xFFFF );
 80049a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049a8:	3b04      	subs	r3, #4
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	b218      	sxth	r0, r3
 80049ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049b0:	b219      	sxth	r1, r3
 80049b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2302      	movs	r3, #2
 80049ba:	2204      	movs	r2, #4
 80049bc:	f7fd f936 	bl	8001c2c <lcd_rect>
			  lcd_rect( x+2, y, 4, 2, 0xFFFF );
 80049c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049c2:	3302      	adds	r3, #2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	b218      	sxth	r0, r3
 80049c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049ca:	b219      	sxth	r1, r3
 80049cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2302      	movs	r3, #2
 80049d4:	2204      	movs	r2, #4
 80049d6:	f7fd f929 	bl	8001c2c <lcd_rect>
			  lcd_rect( x, y-4, 2, 4, 0xFFFF );
 80049da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049dc:	b218      	sxth	r0, r3
 80049de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049e0:	3b04      	subs	r3, #4
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	b219      	sxth	r1, r3
 80049e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	2304      	movs	r3, #4
 80049ee:	2202      	movs	r2, #2
 80049f0:	f7fd f91c 	bl	8001c2c <lcd_rect>
			  lcd_rect( x, y+2, 2, 4, 0xFFFF );
 80049f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049f6:	b218      	sxth	r0, r3
 80049f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049fa:	3302      	adds	r3, #2
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	b219      	sxth	r1, r3
 8004a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2304      	movs	r3, #4
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f7fd f90f 	bl	8001c2c <lcd_rect>
	  {
 8004a0e:	e00a      	b.n	8004a26 <main+0x2ba>
		  }
	  }
	  else if( nk_window_is_collapsed( &ctx, "STM32G4 Scope" ) )
 8004a10:	4915      	ldr	r1, [pc, #84]	; (8004a68 <main+0x2fc>)
 8004a12:	4812      	ldr	r0, [pc, #72]	; (8004a5c <main+0x2f0>)
 8004a14:	f018 fc72 	bl	801d2fc <nk_window_is_collapsed>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f43f af54 	beq.w	80048c8 <main+0x15c>
	  {
		  test_scope();
 8004a20:	f000 fde6 	bl	80055f0 <test_scope>
 8004a24:	e750      	b.n	80048c8 <main+0x15c>
	  {
 8004a26:	bf00      	nop
	  x_bck = x;
 8004a28:	e74e      	b.n	80048c8 <main+0x15c>
 8004a2a:	bf00      	nop
 8004a2c:	3e80d902 	.word	0x3e80d902
 8004a30:	c14e9f5d 	.word	0xc14e9f5d
 8004a34:	3e35ad6b 	.word	0x3e35ad6b
 8004a38:	c1954a53 	.word	0xc1954a53
 8004a3c:	200167e4 	.word	0x200167e4
 8004a40:	20000834 	.word	0x20000834
 8004a44:	200007f8 	.word	0x200007f8
 8004a48:	20002870 	.word	0x20002870
 8004a4c:	20002834 	.word	0x20002834
 8004a50:	20004870 	.word	0x20004870
 8004a54:	41a00000 	.word	0x41a00000
 8004a58:	08001a8d 	.word	0x08001a8d
 8004a5c:	2000487c 	.word	0x2000487c
 8004a60:	20007ee4 	.word	0x20007ee4
 8004a64:	200114e4 	.word	0x200114e4
 8004a68:	08020d08 	.word	0x08020d08

08004a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b094      	sub	sp, #80	; 0x50
 8004a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a72:	f107 0318 	add.w	r3, r7, #24
 8004a76:	2238      	movs	r2, #56	; 0x38
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f019 fb31 	bl	801e0e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f005 faf4 	bl	800a07c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a9c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8004aa6:	2306      	movs	r3, #6
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004aaa:	2355      	movs	r3, #85	; 0x55
 8004aac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aba:	f107 0318 	add.w	r3, r7, #24
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f005 fe6a 	bl	800a798 <HAL_RCC_OscConfig>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004aca:	f000 f818 	bl	8004afe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ace:	230f      	movs	r3, #15
 8004ad0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ae2:	1d3b      	adds	r3, r7, #4
 8004ae4:	2104      	movs	r1, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f006 f96e 	bl	800adc8 <HAL_RCC_ClockConfig>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004af2:	f000 f804 	bl	8004afe <Error_Handler>
  }
}
 8004af6:	bf00      	nop
 8004af8:	3750      	adds	r7, #80	; 0x50
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b02:	b672      	cpsid	i
}
 8004b04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b06:	e7fe      	b.n	8004b06 <Error_Handler+0x8>

08004b08 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp5;
OPAMP_HandleTypeDef hopamp6;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b0e:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <MX_OPAMP1_Init+0x54>)
 8004b10:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004b18:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b1a:	2240      	movs	r2, #64	; 0x40
 8004b1c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b20:	2208      	movs	r2, #8
 8004b22:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004b44:	4804      	ldr	r0, [pc, #16]	; (8004b58 <MX_OPAMP1_Init+0x50>)
 8004b46:	f005 f997 	bl	8009e78 <HAL_OPAMP_Init>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 8004b50:	f7ff ffd5 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200115c4 	.word	0x200115c4
 8004b5c:	40010300 	.word	0x40010300

08004b60 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b66:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <MX_OPAMP3_Init+0x54>)
 8004b68:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004b6a:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b72:	2240      	movs	r2, #64	; 0x40
 8004b74:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b76:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004b9c:	4804      	ldr	r0, [pc, #16]	; (8004bb0 <MX_OPAMP3_Init+0x50>)
 8004b9e:	f005 f96b 	bl	8009e78 <HAL_OPAMP_Init>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 8004ba8:	f7ff ffa9 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20011600 	.word	0x20011600
 8004bb4:	40010308 	.word	0x40010308

08004bb8 <MX_OPAMP5_Init>:
/* OPAMP5 init function */
void MX_OPAMP5_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <MX_OPAMP5_Init+0x54>)
 8004bc0:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8004bf4:	4804      	ldr	r0, [pc, #16]	; (8004c08 <MX_OPAMP5_Init+0x50>)
 8004bf6:	f005 f93f 	bl	8009e78 <HAL_OPAMP_Init>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <MX_OPAMP5_Init+0x4c>
  {
    Error_Handler();
 8004c00:	f7ff ff7d 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8004c04:	bf00      	nop
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2001163c 	.word	0x2001163c
 8004c0c:	40010310 	.word	0x40010310

08004c10 <MX_OPAMP6_Init>:
/* OPAMP6 init function */
void MX_OPAMP6_Init(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c16:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <MX_OPAMP6_Init+0x54>)
 8004c18:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c22:	2240      	movs	r2, #64	; 0x40
 8004c24:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004c26:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c28:	2208      	movs	r2, #8
 8004c2a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8004c4c:	4804      	ldr	r0, [pc, #16]	; (8004c60 <MX_OPAMP6_Init+0x50>)
 8004c4e:	f005 f913 	bl	8009e78 <HAL_OPAMP_Init>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 8004c58:	f7ff ff51 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8004c5c:	bf00      	nop
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20011678 	.word	0x20011678
 8004c64:	40010314 	.word	0x40010314

08004c68 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08c      	sub	sp, #48	; 0x30
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c70:	f107 031c 	add.w	r3, r7, #28
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a4a      	ldr	r2, [pc, #296]	; (8004db0 <HAL_OPAMP_MspInit+0x148>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d119      	bne.n	8004cbe <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4a49      	ldr	r2, [pc, #292]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c96:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8004ca2:	2388      	movs	r3, #136	; 0x88
 8004ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cae:	f107 031c 	add.w	r3, r7, #28
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cb8:	f004 ff44 	bl	8009b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }
}
 8004cbc:	e073      	b.n	8004da6 <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP3)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3d      	ldr	r2, [pc, #244]	; (8004db8 <HAL_OPAMP_MspInit+0x150>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d118      	bne.n	8004cfa <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ccc:	4a39      	ldr	r2, [pc, #228]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004cce:	f043 0302 	orr.w	r3, r3, #2
 8004cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd4:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004ce0:	2305      	movs	r3, #5
 8004ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cec:	f107 031c 	add.w	r3, r7, #28
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4832      	ldr	r0, [pc, #200]	; (8004dbc <HAL_OPAMP_MspInit+0x154>)
 8004cf4:	f004 ff26 	bl	8009b44 <HAL_GPIO_Init>
}
 8004cf8:	e055      	b.n	8004da6 <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP5)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a30      	ldr	r2, [pc, #192]	; (8004dc0 <HAL_OPAMP_MspInit+0x158>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d119      	bne.n	8004d38 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d08:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d0a:	f043 0302 	orr.w	r3, r3, #2
 8004d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d10:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004d1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d22:	2303      	movs	r3, #3
 8004d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2a:	f107 031c 	add.w	r3, r7, #28
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4822      	ldr	r0, [pc, #136]	; (8004dbc <HAL_OPAMP_MspInit+0x154>)
 8004d32:	f004 ff07 	bl	8009b44 <HAL_GPIO_Init>
}
 8004d36:	e036      	b.n	8004da6 <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP6)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <HAL_OPAMP_MspInit+0x15c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d131      	bne.n	8004da6 <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d42:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d4e:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d5a:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d66:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <HAL_OPAMP_MspInit+0x14c>)
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d72:	2302      	movs	r3, #2
 8004d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d76:	2303      	movs	r3, #3
 8004d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7e:	f107 031c 	add.w	r3, r7, #28
 8004d82:	4619      	mov	r1, r3
 8004d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d88:	f004 fedc 	bl	8009b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d92:	2303      	movs	r3, #3
 8004d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9a:	f107 031c 	add.w	r3, r7, #28
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4806      	ldr	r0, [pc, #24]	; (8004dbc <HAL_OPAMP_MspInit+0x154>)
 8004da2:	f004 fecf 	bl	8009b44 <HAL_GPIO_Init>
}
 8004da6:	bf00      	nop
 8004da8:	3730      	adds	r7, #48	; 0x30
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40010300 	.word	0x40010300
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40010308 	.word	0x40010308
 8004dbc:	48000400 	.word	0x48000400
 8004dc0:	40010310 	.word	0x40010310
 8004dc4:	40010314 	.word	0x40010314

08004dc8 <HAL_QSPI_TxCpltCallback>:
    uint32_t SIOOMode,
	enum ePsram_Direction direction
);

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
    TxCpltCallback = 1;
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <HAL_QSPI_TxCpltCallback+0x1c>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	200116b4 	.word	0x200116b4

08004de8 <HAL_QSPI_RxCpltCallback>:
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
    RxCpltCallback = 1;
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_QSPI_RxCpltCallback+0x1c>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	200116b5 	.word	0x200116b5

08004e08 <MX_QUADSPI1_Init>:
QSPI_HandleTypeDef hqspi1;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8004e0c:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <MX_QUADSPI1_Init+0x54>)
 8004e10:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 6;
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e14:	2206      	movs	r2, #6
 8004e16:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 23;
 8004e24:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e26:	2217      	movs	r2, #23
 8004e28:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_2;
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e38:	2280      	movs	r2, #128	; 0x80
 8004e3a:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8004e42:	4805      	ldr	r0, [pc, #20]	; (8004e58 <MX_QUADSPI1_Init+0x50>)
 8004e44:	f005 f9be 	bl	800a1c4 <HAL_QSPI_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 8004e4e:	f7ff fe56 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200116b8 	.word	0x200116b8
 8004e5c:	a0001000 	.word	0xa0001000

08004e60 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b0a0      	sub	sp, #128	; 0x80
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e78:	f107 0318 	add.w	r3, r7, #24
 8004e7c:	2254      	movs	r2, #84	; 0x54
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f019 f92e 	bl	801e0e2 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a54      	ldr	r2, [pc, #336]	; (8004fdc <HAL_QSPI_MspInit+0x17c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	f040 80a1 	bne.w	8004fd4 <HAL_QSPI_MspInit+0x174>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8004e92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e9c:	f107 0318 	add.w	r3, r7, #24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f006 f981 	bl	800b1a8 <HAL_RCCEx_PeriphCLKConfig>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8004eac:	f7ff fe27 	bl	8004afe <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004eb0:	4b4b      	ldr	r3, [pc, #300]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	4a4a      	ldr	r2, [pc, #296]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eba:	6513      	str	r3, [r2, #80]	; 0x50
 8004ebc:	4b48      	ldr	r3, [pc, #288]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ec8:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ecc:	4a44      	ldr	r2, [pc, #272]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004ece:	f043 0304 	orr.w	r3, r3, #4
 8004ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ed4:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee4:	4a3e      	ldr	r2, [pc, #248]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004ee6:	f043 0302 	orr.w	r3, r3, #2
 8004eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eec:	4b3c      	ldr	r3, [pc, #240]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efc:	4a38      	ldr	r2, [pc, #224]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004efe:	f043 0308 	orr.w	r3, r3, #8
 8004f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f04:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <HAL_QSPI_MspInit+0x180>)
 8004f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> QUADSPI1_BK2_IO2
    PC4     ------> QUADSPI1_BK2_IO3
    PB10     ------> QUADSPI1_CLK
    PD3     ------> QUADSPI1_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8004f10:	231e      	movs	r3, #30
 8004f12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f14:	2302      	movs	r3, #2
 8004f16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f20:	230a      	movs	r3, #10
 8004f22:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004f28:	4619      	mov	r1, r3
 8004f2a:	482e      	ldr	r0, [pc, #184]	; (8004fe4 <HAL_QSPI_MspInit+0x184>)
 8004f2c:	f004 fe0a 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f34:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f36:	2302      	movs	r3, #2
 8004f38:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f42:	230a      	movs	r3, #10
 8004f44:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4826      	ldr	r0, [pc, #152]	; (8004fe8 <HAL_QSPI_MspInit+0x188>)
 8004f4e:	f004 fdf9 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004f52:	2308      	movs	r3, #8
 8004f54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	2302      	movs	r3, #2
 8004f58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f62:	230a      	movs	r3, #10
 8004f64:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	481f      	ldr	r0, [pc, #124]	; (8004fec <HAL_QSPI_MspInit+0x18c>)
 8004f6e:	f004 fde9 	bl	8009b44 <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA1_Channel1;
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f74:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <HAL_QSPI_MspInit+0x194>)
 8004f76:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_QUADSPI;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f7a:	2228      	movs	r2, #40	; 0x28
 8004f7c:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f80:	2210      	movs	r2, #16
 8004f82:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 8004f8a:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f8c:	2280      	movs	r2, #128	; 0x80
 8004f8e:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f96:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 8004fa8:	4811      	ldr	r0, [pc, #68]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004faa:	f004 fa99 	bl	80094e0 <HAL_DMA_Init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_QSPI_MspInit+0x158>
    {
      Error_Handler();
 8004fb4:	f7ff fda3 	bl	8004afe <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fbe:	4a0c      	ldr	r2, [pc, #48]	; (8004ff0 <HAL_QSPI_MspInit+0x190>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6293      	str	r3, [r2, #40]	; 0x28

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	205f      	movs	r0, #95	; 0x5f
 8004fca:	f003 fe9a 	bl	8008d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8004fce:	205f      	movs	r0, #95	; 0x5f
 8004fd0:	f003 feb1 	bl	8008d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	3780      	adds	r7, #128	; 0x80
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	a0001000 	.word	0xa0001000
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	48000800 	.word	0x48000800
 8004fe8:	48000400 	.word	0x48000400
 8004fec:	48000c00 	.word	0x48000c00
 8004ff0:	20011704 	.word	0x20011704
 8004ff4:	40020008 	.word	0x40020008

08004ff8 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	605a      	str	r2, [r3, #4]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <scope_init>:
#include "scope.h"

static tScope *_scope;

void scope_init( tScope *scope, uint16_t trigger_level, uint16_t sample_rate, uint16_t *buffer1, uint16_t *buffer2, uint16_t *buffer3, uint16_t *buffer4, uint16_t len )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	817b      	strh	r3, [r7, #10]
 8005086:	4613      	mov	r3, r2
 8005088:	813b      	strh	r3, [r7, #8]
	scope->trigger_level = trigger_level;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	897a      	ldrh	r2, [r7, #10]
 800508e:	82da      	strh	r2, [r3, #22]
	scope->sample_rate = sample_rate;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	893a      	ldrh	r2, [r7, #8]
 8005094:	805a      	strh	r2, [r3, #2]
	scope->buffer1 = buffer1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	605a      	str	r2, [r3, #4]
	scope->buffer2 = buffer2;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	609a      	str	r2, [r3, #8]
	scope->buffer3 = buffer3;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	60da      	str	r2, [r3, #12]
	scope->buffer4 = buffer4;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	611a      	str	r2, [r3, #16]
	scope->len = len;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050b2:	829a      	strh	r2, [r3, #20]
	scope->trigger_location = 0;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	831a      	strh	r2, [r3, #24]
	scope->state = SCOPE_STATE_RESET;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]

	_scope = scope;
 80050c0:	4a13      	ldr	r2, [pc, #76]	; (8005110 <scope_init+0x98>)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6013      	str	r3, [r2, #0]
	extern DMA_HandleTypeDef hdma_adc5;
	extern DMA_HandleTypeDef hdma_adc4;
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim2;

	scope->hadc1 = &hadc1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a12      	ldr	r2, [pc, #72]	; (8005114 <scope_init+0x9c>)
 80050ca:	61da      	str	r2, [r3, #28]
	scope->hadc2 = &hadc3;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4a12      	ldr	r2, [pc, #72]	; (8005118 <scope_init+0xa0>)
 80050d0:	621a      	str	r2, [r3, #32]
	scope->hadc3 = &hadc5;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4a11      	ldr	r2, [pc, #68]	; (800511c <scope_init+0xa4>)
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24
	scope->hadc4 = &hadc4;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a11      	ldr	r2, [pc, #68]	; (8005120 <scope_init+0xa8>)
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
	scope->hdma_adc1 = &hdma_adc1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a10      	ldr	r2, [pc, #64]	; (8005124 <scope_init+0xac>)
 80050e2:	62da      	str	r2, [r3, #44]	; 0x2c
	scope->hdma_adc2 = &hdma_adc3;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4a10      	ldr	r2, [pc, #64]	; (8005128 <scope_init+0xb0>)
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
	scope->hdma_adc3 = &hdma_adc5;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a0f      	ldr	r2, [pc, #60]	; (800512c <scope_init+0xb4>)
 80050ee:	635a      	str	r2, [r3, #52]	; 0x34
	scope->hdma_adc4 = &hdma_adc4;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <scope_init+0xb8>)
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
	scope->htim1 = &htim1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <scope_init+0xbc>)
 80050fa:	63da      	str	r2, [r3, #60]	; 0x3c
	scope->htim2 = &htim2;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <scope_init+0xc0>)
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
	//MX_DMA_Init();
	//MX_ADC1_Init();
	//MX_OPAMP1_Init();
	//MX_TIM1_Init();
	//MX_TIM2_Init();
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20011764 	.word	0x20011764
 8005114:	20000374 	.word	0x20000374
 8005118:	200003e0 	.word	0x200003e0
 800511c:	200004b8 	.word	0x200004b8
 8005120:	2000044c 	.word	0x2000044c
 8005124:	20000524 	.word	0x20000524
 8005128:	20000584 	.word	0x20000584
 800512c:	20000644 	.word	0x20000644
 8005130:	200005e4 	.word	0x200005e4
 8005134:	2001684c 	.word	0x2001684c
 8005138:	20016898 	.word	0x20016898
 800513c:	00000000 	.word	0x00000000

08005140 <scope_start>:
	scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = 0;
	scope->state = SCOPE_STATE_RESET;
}

void scope_start( tScope *scope )
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e009      	b.n	8005162 <scope_start+0x22>
	{
		scope->CNDTRs[i] = 0;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3310      	adds	r3, #16
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	2200      	movs	r2, #0
 800515a:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b05      	cmp	r3, #5
 8005166:	ddf2      	ble.n	800514e <scope_start+0xe>
	}

	__HAL_DBGMCU_FREEZE_TIM1();
 8005168:	4b5b      	ldr	r3, [pc, #364]	; (80052d8 <scope_start+0x198>)
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	4a5a      	ldr	r2, [pc, #360]	; (80052d8 <scope_start+0x198>)
 800516e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005172:	6113      	str	r3, [r2, #16]
	__HAL_DBGMCU_FREEZE_TIM2();
 8005174:	4b58      	ldr	r3, [pc, #352]	; (80052d8 <scope_start+0x198>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <scope_start+0x198>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6093      	str	r3, [r2, #8]

	extern DAC_HandleTypeDef hdac2;
	int vcc = 3.3;
 8005180:	2303      	movs	r3, #3
 8005182:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (vcc/2.0)/vcc*4095);
 8005184:	68b8      	ldr	r0, [r7, #8]
 8005186:	f7fb f9f5 	bl	8000574 <__aeabi_i2d>
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005192:	f7fb fb83 	bl	800089c <__aeabi_ddiv>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4614      	mov	r4, r2
 800519c:	461d      	mov	r5, r3
 800519e:	68b8      	ldr	r0, [r7, #8]
 80051a0:	f7fb f9e8 	bl	8000574 <__aeabi_i2d>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb fb76 	bl	800089c <__aeabi_ddiv>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	a345      	add	r3, pc, #276	; (adr r3, 80052d0 <scope_start+0x190>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fb fa43 	bl	8000648 <__aeabi_dmul>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fb fd15 	bl	8000bf8 <__aeabi_d2uiz>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2200      	movs	r2, #0
 80051d2:	2100      	movs	r1, #0
 80051d4:	4841      	ldr	r0, [pc, #260]	; (80052dc <scope_start+0x19c>)
 80051d6:	f003 ff0b 	bl	8008ff0 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80051da:	2100      	movs	r1, #0
 80051dc:	483f      	ldr	r0, [pc, #252]	; (80052dc <scope_start+0x19c>)
 80051de:	f003 fde6 	bl	8008dae <HAL_DAC_Start>

	extern OPAMP_HandleTypeDef hopamp1;
	extern OPAMP_HandleTypeDef hopamp3;
	extern OPAMP_HandleTypeDef hopamp5;
	extern OPAMP_HandleTypeDef hopamp6;
	HAL_OPAMP_Start(&hopamp1);
 80051e2:	483f      	ldr	r0, [pc, #252]	; (80052e0 <scope_start+0x1a0>)
 80051e4:	f004 ff18 	bl	800a018 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 80051e8:	483e      	ldr	r0, [pc, #248]	; (80052e4 <scope_start+0x1a4>)
 80051ea:	f004 ff15 	bl	800a018 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 80051ee:	483e      	ldr	r0, [pc, #248]	; (80052e8 <scope_start+0x1a8>)
 80051f0:	f004 ff12 	bl	800a018 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp6);
 80051f4:	483d      	ldr	r0, [pc, #244]	; (80052ec <scope_start+0x1ac>)
 80051f6:	f004 ff0f 	bl	800a018 <HAL_OPAMP_Start>

	HAL_ADCEx_Calibration_Start( scope->hadc1, ADC_SINGLE_ENDED );
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	217f      	movs	r1, #127	; 0x7f
 8005200:	4618      	mov	r0, r3
 8005202:	f003 fb11 	bl	8008828 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc2, ADC_SINGLE_ENDED );
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	217f      	movs	r1, #127	; 0x7f
 800520c:	4618      	mov	r0, r3
 800520e:	f003 fb0b 	bl	8008828 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc3, ADC_SINGLE_ENDED );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	217f      	movs	r1, #127	; 0x7f
 8005218:	4618      	mov	r0, r3
 800521a:	f003 fb05 	bl	8008828 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc4, ADC_SINGLE_ENDED );
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	217f      	movs	r1, #127	; 0x7f
 8005224:	4618      	mov	r0, r3
 8005226:	f003 faff 	bl	8008828 <HAL_ADCEx_Calibration_Start>

	LL_ADC_DisableIT_AWD1( scope->hadc1->Instance );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff01 	bl	8005038 <LL_ADC_DisableIT_AWD1>
	LL_ADC_DisableIT_AWD2( scope->hadc1->Instance );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff ff0b 	bl	8005058 <LL_ADC_DisableIT_AWD2>
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD1 );
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2280      	movs	r2, #128	; 0x80
 800524a:	601a      	str	r2, [r3, #0]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD2 );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005256:	601a      	str	r2, [r3, #0]

	scope->htim1->Instance->CNT = 0;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	625a      	str	r2, [r3, #36]	; 0x24
	scope->htim2->Instance->CNT = 0;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_ADC_Start_DMA( scope->hadc1, (uint32_t*)scope->buffer1, scope->len );
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69d8      	ldr	r0, [r3, #28]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8a9b      	ldrh	r3, [r3, #20]
 8005278:	461a      	mov	r2, r3
 800527a:	f001 fe85 	bl	8006f88 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc2, (uint32_t*)scope->buffer2, scope->len );
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a18      	ldr	r0, [r3, #32]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6899      	ldr	r1, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8a9b      	ldrh	r3, [r3, #20]
 800528a:	461a      	mov	r2, r3
 800528c:	f001 fe7c 	bl	8006f88 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc3, (uint32_t*)scope->buffer3, scope->len );
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68d9      	ldr	r1, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8a9b      	ldrh	r3, [r3, #20]
 800529c:	461a      	mov	r2, r3
 800529e:	f001 fe73 	bl	8006f88 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc4, (uint32_t*)scope->buffer4, scope->len );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6919      	ldr	r1, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8a9b      	ldrh	r3, [r3, #20]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f001 fe6a 	bl	8006f88 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start( scope->htim1 );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	4618      	mov	r0, r3
 80052ba:	f006 fe85 	bl	800bfc8 <HAL_TIM_Base_Start>
	scope->state = SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bdb0      	pop	{r4, r5, r7, pc}
 80052cc:	f3af 8000 	nop.w
 80052d0:	00000000 	.word	0x00000000
 80052d4:	40affe00 	.word	0x40affe00
 80052d8:	e0042000 	.word	0xe0042000
 80052dc:	200006bc 	.word	0x200006bc
 80052e0:	200115c4 	.word	0x200115c4
 80052e4:	20011600 	.word	0x20011600
 80052e8:	2001163c 	.word	0x2001163c
 80052ec:	20011678 	.word	0x20011678

080052f0 <scope_stop>:

void scope_stop( tScope *scope )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop( scope->htim1 );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	4618      	mov	r0, r3
 80052fe:	f006 fed3 	bl	800c0a8 <HAL_TIM_Base_Stop>
	HAL_TIM_OnePulse_Stop_IT( scope->htim2, TIM_CHANNEL_1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f006 ffe3 	bl	800c2d4 <HAL_TIM_OnePulse_Stop_IT>
	HAL_TIM_Base_Stop( scope->htim2 );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	4618      	mov	r0, r3
 8005314:	f006 fec8 	bl	800c0a8 <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA( scope->hadc1 );
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4618      	mov	r0, r3
 800531e:	f001 ff07 	bl	8007130 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc2 );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4618      	mov	r0, r3
 8005328:	f001 ff02 	bl	8007130 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc3 );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	4618      	mov	r0, r3
 8005332:	f001 fefd 	bl	8007130 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc4 );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	4618      	mov	r0, r3
 800533c:	f001 fef8 	bl	8007130 <HAL_ADC_Stop_DMA>
	scope->state = SCOPE_STATE_DONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2205      	movs	r2, #5
 8005344:	701a      	strb	r2, [r3, #0]
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <scope_is_busy>:

uint8_t scope_is_busy( tScope *scope )
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	return scope->state != SCOPE_STATE_DONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b05      	cmp	r3, #5
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <scope_get_trigger>:

int32_t scope_get_trigger( tScope *scope )
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	return scope->len - scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP];
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8a9b      	ldrh	r3, [r3, #20]
 800537c:	461a      	mov	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	1ad3      	subs	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_ADC_ConvHalfCpltCallback>:

// ********************** IRQs ********************** //
int cndtr1 = 0;
int cndtr2 = 0;
void HAL_ADC_ConvHalfCpltCallback( ADC_HandleTypeDef* hadc )
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
	{
	}
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 80053ac:	4b15      	ldr	r3, [pc, #84]	; (8005404 <HAL_ADC_ConvCpltCallback+0x60>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d120      	bne.n	80053fa <HAL_ADC_ConvCpltCallback+0x56>
	{
		if( 1 && _scope->state == SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE )
 80053b8:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_ADC_ConvCpltCallback+0x60>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d11b      	bne.n	80053fa <HAL_ADC_ConvCpltCallback+0x56>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_ARM;
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <HAL_ADC_ConvCpltCallback+0x60>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_ARM] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 80053ca:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <HAL_ADC_ConvCpltCallback+0x60>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a0e      	ldr	r2, [pc, #56]	; (8005408 <HAL_ADC_ConvCpltCallback+0x64>)
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	64da      	str	r2, [r3, #76]	; 0x4c
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_ADC_ConvCpltCallback+0x60>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2280      	movs	r2, #128	; 0x80
 80053de:	601a      	str	r2, [r3, #0]
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
			LL_ADC_EnableIT_AWD1( _scope->hadc1->Instance );
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <HAL_ADC_ConvCpltCallback+0x60>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fe05 	bl	8004ff8 <LL_ADC_EnableIT_AWD1>
			cndtr1 = 0;
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_ADC_ConvCpltCallback+0x64>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
			cndtr2 = 0;
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_ADC_ConvCpltCallback+0x68>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20011764 	.word	0x20011764
 8005408:	20011768 	.word	0x20011768
 800540c:	2001176c 	.word	0x2001176c

08005410 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback( ADC_HandleTypeDef* hadc )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d125      	bne.n	8005470 <HAL_ADC_LevelOutOfWindowCallback+0x60>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_ARM )
 8005424:	4b14      	ldr	r3, [pc, #80]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d120      	bne.n	8005470 <HAL_ADC_LevelOutOfWindowCallback+0x60>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_TRIGGER;
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2203      	movs	r2, #3
 8005434:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_TRIGGER] = _scope->hdma_adc1->Instance->CNDTR;
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	651a      	str	r2, [r3, #80]	; 0x50
			LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fdf2 	bl	8005038 <LL_ADC_DisableIT_AWD1>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
 8005454:	4b08      	ldr	r3, [pc, #32]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005460:	601a      	str	r2, [r3, #0]
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fdd4 	bl	8005018 <LL_ADC_EnableIT_AWD2>
		}
	}
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	20011764 	.word	0x20011764

0800547c <HAL_ADCEx_LevelOutOfWindow2Callback>:
uint32_t start_cpu;
uint32_t stop_cpu;

void HAL_ADCEx_LevelOutOfWindow2Callback( ADC_HandleTypeDef* hadc )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d14f      	bne.n	8005530 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_TRIGGER )
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b03      	cmp	r3, #3
 8005498:	d14a      	bne.n	8005530 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_STOP;
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2204      	movs	r2, #4
 80054a0:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 80054a2:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a25      	ldr	r2, [pc, #148]	; (800553c <HAL_ADCEx_LevelOutOfWindow2Callback+0xc0>)
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54

			//_scope->htim2->Instance->CCR1 = 127;
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC1 );
 80054ac:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0202 	mvn.w	r2, #2
 80054b8:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC2 );
 80054ba:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f06f 0204 	mvn.w	r2, #4
 80054c6:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_UPDATE );
 80054c8:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0201 	mvn.w	r2, #1
 80054d4:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC1 );
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0202 	mvn.w	r2, #2
 80054e2:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC2 );
 80054e4:	4b14      	ldr	r3, [pc, #80]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0204 	mvn.w	r2, #4
 80054f0:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_UPDATE );
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0201 	mvn.w	r2, #1
 80054fe:	611a      	str	r2, [r3, #16]
			start_cpu = SysTick->VAL;
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc4>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a0f      	ldr	r2, [pc, #60]	; (8005544 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc8>)
 8005506:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start( _scope->htim2 );
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	4618      	mov	r0, r3
 8005510:	f006 fd5a 	bl	800bfc8 <HAL_TIM_Base_Start>
			HAL_TIM_OnePulse_Start_IT( _scope->htim2, TIM_CHANNEL_1);
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f006 fe4b 	bl	800c1b8 <HAL_TIM_OnePulse_Start_IT>
			//LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fd94 	bl	8005058 <LL_ADC_DisableIT_AWD2>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20011764 	.word	0x20011764
 800553c:	20011768 	.word	0x20011768
 8005540:	e000e010 	.word	0xe000e010
 8005544:	20011770 	.word	0x20011770

08005548 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	if( htim == _scope->htim2 ) // htim2
 8005550:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d13c      	bne.n	80055d6 <HAL_TIM_OC_DelayElapsedCallback+0x8e>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_STOP )
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b04      	cmp	r3, #4
 8005564:	d137      	bne.n	80055d6 <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		{
			stop_cpu = SysTick->VAL;
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	4a1f      	ldr	r2, [pc, #124]	; (80055e8 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 800556c:	6013      	str	r3, [r2, #0]
			_scope->state = SCOPE_STATE_DONE;
 800556e:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2205      	movs	r2, #5
 8005574:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_DONE] = cndtr2;//_scope->hdma_adc1->Instance->CNDTR;
 8005576:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_TIM_Base_Stop( _scope->htim1 );
 8005580:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	4618      	mov	r0, r3
 8005588:	f006 fd8e 	bl	800c0a8 <HAL_TIM_Base_Stop>
			HAL_ADC_Stop_DMA( _scope->hadc1 );
 800558c:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	4618      	mov	r0, r3
 8005594:	f001 fdcc 	bl	8007130 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc2 );
 8005598:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 fdc6 	bl	8007130 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc3 );
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 fdc0 	bl	8007130 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc4 );
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fdba 	bl	8007130 <HAL_ADC_Stop_DMA>
			HAL_TIM_OnePulse_Stop_IT( _scope->htim2, TIM_CHANNEL_1);
 80055bc:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f006 fe85 	bl	800c2d4 <HAL_TIM_OnePulse_Stop_IT>
			HAL_TIM_Base_Stop( _scope->htim2 );
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	4618      	mov	r0, r3
 80055d2:	f006 fd69 	bl	800c0a8 <HAL_TIM_Base_Stop>
		}
	}
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20011764 	.word	0x20011764
 80055e4:	e000e010 	.word	0xe000e010
 80055e8:	20011774 	.word	0x20011774
 80055ec:	2001176c 	.word	0x2001176c

080055f0 <test_scope>:
uint16_t buffer6[BUFFER_LEN];
uint16_t buffer7[BUFFER_LEN];
uint16_t buffer8[BUFFER_LEN];
tScope scope = {0};
void test_scope( void )
{
 80055f0:	b5b0      	push	{r4, r5, r7, lr}
 80055f2:	b092      	sub	sp, #72	; 0x48
 80055f4:	af04      	add	r7, sp, #16
	// test scope

	uint16_t start = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	83fb      	strh	r3, [r7, #30]
	  static int trigger_bck = 0;
	  static int i = 0;

	if( _scope_init == 0 )
 80055fa:	4bad      	ldr	r3, [pc, #692]	; (80058b0 <test_scope+0x2c0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d17e      	bne.n	8005700 <test_scope+0x110>
	{

		float freq = 3;
 8005602:	4bac      	ldr	r3, [pc, #688]	; (80058b4 <test_scope+0x2c4>)
 8005604:	61bb      	str	r3, [r7, #24]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
 800560a:	e057      	b.n	80056bc <test_scope+0xcc>
		{
			dac1_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*1023 + 2048;
 800560c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005610:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005614:	ee17 0a90 	vmov	r0, s15
 8005618:	f7fa ffbe 	bl	8000598 <__aeabi_f2d>
 800561c:	a3a2      	add	r3, pc, #648	; (adr r3, 80058a8 <test_scope+0x2b8>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fb f811 	bl	8000648 <__aeabi_dmul>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4614      	mov	r4, r2
 800562c:	461d      	mov	r5, r3
 800562e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005630:	f7fa ffa0 	bl	8000574 <__aeabi_i2d>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4620      	mov	r0, r4
 800563a:	4629      	mov	r1, r5
 800563c:	f7fb f804 	bl	8000648 <__aeabi_dmul>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4610      	mov	r0, r2
 8005646:	4619      	mov	r1, r3
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	4b9a      	ldr	r3, [pc, #616]	; (80058b8 <test_scope+0x2c8>)
 800564e:	f7fb f925 	bl	800089c <__aeabi_ddiv>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	f7fb faed 	bl	8000c38 <__aeabi_d2f>
 800565e:	4603      	mov	r3, r0
 8005660:	ee00 3a10 	vmov	s0, r3
 8005664:	f01a fe08 	bl	8020278 <sinf>
 8005668:	eef0 7a40 	vmov.f32	s15, s0
 800566c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80058bc <test_scope+0x2cc>
 8005670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005674:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80058c0 <test_scope+0x2d0>
 8005678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800567c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005680:	ee17 3a90 	vmov	r3, s15
 8005684:	b299      	uxth	r1, r3
 8005686:	4a8f      	ldr	r2, [pc, #572]	; (80058c4 <test_scope+0x2d4>)
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//dac2_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*2000 + 2048;
			dac2_buffer[i] = 1024+(((BUFFER_LEN-i-1)*8)%2048);
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005694:	3303      	adds	r3, #3
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	425a      	negs	r2, r3
 800569a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800569e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80056a2:	bf58      	it	pl
 80056a4:	4253      	negpl	r3, r2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ac:	b299      	uxth	r1, r3
 80056ae:	4a86      	ldr	r2, [pc, #536]	; (80058c8 <test_scope+0x2d8>)
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	3301      	adds	r3, #1
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
 80056bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	dba3      	blt.n	800560c <test_scope+0x1c>
		}
		extern DAC_HandleTypeDef hdac1;
		extern TIM_HandleTypeDef htim2;
		extern TIM_HandleTypeDef htim3;
		__HAL_DBGMCU_FREEZE_TIM3();
 80056c4:	4b81      	ldr	r3, [pc, #516]	; (80058cc <test_scope+0x2dc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a80      	ldr	r2, [pc, #512]	; (80058cc <test_scope+0x2dc>)
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	6093      	str	r3, [r2, #8]
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d8:	4a7a      	ldr	r2, [pc, #488]	; (80058c4 <test_scope+0x2d4>)
 80056da:	2100      	movs	r1, #0
 80056dc:	487c      	ldr	r0, [pc, #496]	; (80058d0 <test_scope+0x2e0>)
 80056de:	f003 fbb9 	bl	8008e54 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_2, (uint32_t*)dac2_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 80056e2:	2300      	movs	r3, #0
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ea:	4a77      	ldr	r2, [pc, #476]	; (80058c8 <test_scope+0x2d8>)
 80056ec:	2110      	movs	r1, #16
 80056ee:	4878      	ldr	r0, [pc, #480]	; (80058d0 <test_scope+0x2e0>)
 80056f0:	f003 fbb0 	bl	8008e54 <HAL_DAC_Start_DMA>
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start( &htim3 );
 80056f4:	4877      	ldr	r0, [pc, #476]	; (80058d4 <test_scope+0x2e4>)
 80056f6:	f006 fc67 	bl	800bfc8 <HAL_TIM_Base_Start>
		//htim1.Instance->ARR = 0x54;
		//htim1.Instance->CNT = 0x2A;
		//HAL_TIM_Base_Start( &htim1 );


		_scope_init = 1;
 80056fa:	4b6d      	ldr	r3, [pc, #436]	; (80058b0 <test_scope+0x2c0>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	601a      	str	r2, [r3, #0]


	{

		static int dd = 0;
		if( dd<10 )
 8005700:	4b75      	ldr	r3, [pc, #468]	; (80058d8 <test_scope+0x2e8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b09      	cmp	r3, #9
 8005706:	dc05      	bgt.n	8005714 <test_scope+0x124>
		{
			dd++;
 8005708:	4b73      	ldr	r3, [pc, #460]	; (80058d8 <test_scope+0x2e8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3301      	adds	r3, #1
 800570e:	4a72      	ldr	r2, [pc, #456]	; (80058d8 <test_scope+0x2e8>)
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e04a      	b.n	80057aa <test_scope+0x1ba>
		}
		else
		{
			dd = 0;
 8005714:	4b70      	ldr	r3, [pc, #448]	; (80058d8 <test_scope+0x2e8>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
			for( int d = 0 ; d < 480 ; d += 40 )
 800571a:	2300      	movs	r3, #0
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
 800571e:	e00c      	b.n	800573a <test_scope+0x14a>
			{
				lcd_rect( d, 0, 1, 320, 0x55555555 );
 8005720:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800572a:	2201      	movs	r2, #1
 800572c:	2100      	movs	r1, #0
 800572e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005730:	f7fc fa7c 	bl	8001c2c <lcd_rect>
			for( int d = 0 ; d < 480 ; d += 40 )
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	3328      	adds	r3, #40	; 0x28
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005740:	dbee      	blt.n	8005720 <test_scope+0x130>
			}
			lcd_rect( 480, 0, 1, 320, 0x55555555 );
 8005742:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800574c:	2201      	movs	r2, #1
 800574e:	2100      	movs	r1, #0
 8005750:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005754:	f7fc fa6a 	bl	8001c2c <lcd_rect>
			for( int d = 0 ; d < 320 ; d += 40 )
 8005758:	2300      	movs	r3, #0
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	e00c      	b.n	8005778 <test_scope+0x188>
			{
				lcd_rect( 0, d, 480, 1, 0x55555555 );
 800575e:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2301      	movs	r3, #1
 8005766:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800576a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800576c:	2000      	movs	r0, #0
 800576e:	f7fc fa5d 	bl	8001c2c <lcd_rect>
			for( int d = 0 ; d < 320 ; d += 40 )
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	3328      	adds	r3, #40	; 0x28
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800577e:	dbee      	blt.n	800575e <test_scope+0x16e>
			}
			lcd_rect( 0, 320, 480, 1, 0x55555555 );
 8005780:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2301      	movs	r3, #1
 8005788:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800578c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005790:	2000      	movs	r0, #0
 8005792:	f7fc fa4b 	bl	8001c2c <lcd_rect>

			lcd_rect( 0, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8005796:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	2301      	movs	r3, #1
 800579e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80057a2:	2164      	movs	r1, #100	; 0x64
 80057a4:	2000      	movs	r0, #0
 80057a6:	f7fc fa41 	bl	8001c2c <lcd_rect>

		}


		scope_init( &scope, 2048, 1000000,
				(i&0x01)?buffer1:buffer5,
 80057aa:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <test_scope+0x2ec>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <test_scope+0x1ca>
 80057b6:	484a      	ldr	r0, [pc, #296]	; (80058e0 <test_scope+0x2f0>)
 80057b8:	e000      	b.n	80057bc <test_scope+0x1cc>
 80057ba:	484a      	ldr	r0, [pc, #296]	; (80058e4 <test_scope+0x2f4>)
				(i&0x01)?buffer2:buffer6,
 80057bc:	4b47      	ldr	r3, [pc, #284]	; (80058dc <test_scope+0x2ec>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <test_scope+0x1dc>
 80057c8:	4b47      	ldr	r3, [pc, #284]	; (80058e8 <test_scope+0x2f8>)
 80057ca:	e000      	b.n	80057ce <test_scope+0x1de>
 80057cc:	4b47      	ldr	r3, [pc, #284]	; (80058ec <test_scope+0x2fc>)
				(i&0x01)?buffer3:buffer7,
 80057ce:	4a43      	ldr	r2, [pc, #268]	; (80058dc <test_scope+0x2ec>)
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	f002 0201 	and.w	r2, r2, #1
		scope_init( &scope, 2048, 1000000,
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	d001      	beq.n	80057de <test_scope+0x1ee>
 80057da:	4a45      	ldr	r2, [pc, #276]	; (80058f0 <test_scope+0x300>)
 80057dc:	e000      	b.n	80057e0 <test_scope+0x1f0>
 80057de:	4a45      	ldr	r2, [pc, #276]	; (80058f4 <test_scope+0x304>)
				(i&0x01)?buffer4:buffer8,
 80057e0:	493e      	ldr	r1, [pc, #248]	; (80058dc <test_scope+0x2ec>)
 80057e2:	6809      	ldr	r1, [r1, #0]
 80057e4:	f001 0101 	and.w	r1, r1, #1
		scope_init( &scope, 2048, 1000000,
 80057e8:	2900      	cmp	r1, #0
 80057ea:	d001      	beq.n	80057f0 <test_scope+0x200>
 80057ec:	4942      	ldr	r1, [pc, #264]	; (80058f8 <test_scope+0x308>)
 80057ee:	e000      	b.n	80057f2 <test_scope+0x202>
 80057f0:	4942      	ldr	r1, [pc, #264]	; (80058fc <test_scope+0x30c>)
 80057f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80057f6:	9403      	str	r4, [sp, #12]
 80057f8:	9102      	str	r1, [sp, #8]
 80057fa:	9201      	str	r2, [sp, #4]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4603      	mov	r3, r0
 8005800:	f244 2240 	movw	r2, #16960	; 0x4240
 8005804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005808:	483d      	ldr	r0, [pc, #244]	; (8005900 <test_scope+0x310>)
 800580a:	f7ff fc35 	bl	8005078 <scope_init>
				BUFFER_LEN );
		scope_start( &scope );
 800580e:	483c      	ldr	r0, [pc, #240]	; (8005900 <test_scope+0x310>)
 8005810:	f7ff fc96 	bl	8005140 <scope_start>
		while( scope_is_busy( &scope ) );
 8005814:	bf00      	nop
 8005816:	483a      	ldr	r0, [pc, #232]	; (8005900 <test_scope+0x310>)
 8005818:	f7ff fd99 	bl	800534e <scope_is_busy>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f9      	bne.n	8005816 <test_scope+0x226>
		scope_stop( &scope );
 8005822:	4837      	ldr	r0, [pc, #220]	; (8005900 <test_scope+0x310>)
 8005824:	f7ff fd64 	bl	80052f0 <scope_stop>

		int32_t trigger = scope_get_trigger( &scope ) - BUFFER_LEN/2;
 8005828:	4835      	ldr	r0, [pc, #212]	; (8005900 <test_scope+0x310>)
 800582a:	f7ff fda1 	bl	8005370 <scope_get_trigger>
 800582e:	4603      	mov	r3, r0
 8005830:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8005834:	617b      	str	r3, [r7, #20]

		//printf( "data%d = np.array( [", i );
		for( int jj = 0; jj < 480; jj++ )
 8005836:	2300      	movs	r3, #0
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
 800583a:	e21b      	b.n	8005c74 <test_scope+0x684>
		//for( int jj = 0; jj < BUFFER_LEN; jj++ )
		{
			int j = (jj*BUFFER_LEN)/480.0;
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	4618      	mov	r0, r3
 8005842:	f7fa fe97 	bl	8000574 <__aeabi_i2d>
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <test_scope+0x314>)
 800584c:	f7fb f826 	bl	800089c <__aeabi_ddiv>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	f7fb f9a6 	bl	8000ba8 <__aeabi_d2iz>
 800585c:	4603      	mov	r3, r0
 800585e:	613b      	str	r3, [r7, #16]
			//int j = jj;
			int n = trigger + j;
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
			if( n < 0 )
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	da04      	bge.n	8005878 <test_scope+0x288>
			{
				n += BUFFER_LEN;
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
 8005876:	e007      	b.n	8005888 <test_scope+0x298>
			}
			else if( n >= BUFFER_LEN )
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587e:	db03      	blt.n	8005888 <test_scope+0x298>
			{
				n -= BUFFER_LEN;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
			}

			int n2 = trigger_bck + j;
 8005888:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <test_scope+0x318>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	623b      	str	r3, [r7, #32]
			if( n2 < 0 )
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	2b00      	cmp	r3, #0
 8005896:	da39      	bge.n	800590c <test_scope+0x31c>
			{
				n2 += BUFFER_LEN;
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	e03c      	b.n	800591c <test_scope+0x32c>
 80058a2:	bf00      	nop
 80058a4:	f3af 8000 	nop.w
 80058a8:	54442d18 	.word	0x54442d18
 80058ac:	400921fb 	.word	0x400921fb
 80058b0:	20011778 	.word	0x20011778
 80058b4:	40400000 	.word	0x40400000
 80058b8:	40900000 	.word	0x40900000
 80058bc:	447fc000 	.word	0x447fc000
 80058c0:	45000000 	.word	0x45000000
 80058c4:	2001177c 	.word	0x2001177c
 80058c8:	20011f7c 	.word	0x20011f7c
 80058cc:	e0042000 	.word	0xe0042000
 80058d0:	200006a8 	.word	0x200006a8
 80058d4:	200168e4 	.word	0x200168e4
 80058d8:	200167d8 	.word	0x200167d8
 80058dc:	200167dc 	.word	0x200167dc
 80058e0:	2001277c 	.word	0x2001277c
 80058e4:	2001477c 	.word	0x2001477c
 80058e8:	20012f7c 	.word	0x20012f7c
 80058ec:	20014f7c 	.word	0x20014f7c
 80058f0:	2001377c 	.word	0x2001377c
 80058f4:	2001577c 	.word	0x2001577c
 80058f8:	20013f7c 	.word	0x20013f7c
 80058fc:	20015f7c 	.word	0x20015f7c
 8005900:	2001677c 	.word	0x2001677c
 8005904:	407e0000 	.word	0x407e0000
 8005908:	200167e0 	.word	0x200167e0
			}
			else if( n2 >= BUFFER_LEN )
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005912:	db03      	blt.n	800591c <test_scope+0x32c>
			{
				n2 -= BUFFER_LEN;
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800591a:	623b      	str	r3, [r7, #32]
			}
			//printf( "%d, ", buffer[n] );

			int x0, y0, y1;
			x0 = jj;//(j*480)/BUFFER_LEN;
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	60fb      	str	r3, [r7, #12]
			y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8005920:	4bb7      	ldr	r3, [pc, #732]	; (8005c00 <test_scope+0x610>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d011      	beq.n	8005950 <test_scope+0x360>
 800592c:	4ab5      	ldr	r2, [pc, #724]	; (8005c04 <test_scope+0x614>)
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005934:	461a      	mov	r2, r3
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	019b      	lsls	r3, r3, #6
 800593e:	2b00      	cmp	r3, #0
 8005940:	da01      	bge.n	8005946 <test_scope+0x356>
 8005942:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005946:	131b      	asrs	r3, r3, #12
 8005948:	425b      	negs	r3, r3
 800594a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800594e:	e010      	b.n	8005972 <test_scope+0x382>
 8005950:	4aad      	ldr	r2, [pc, #692]	; (8005c08 <test_scope+0x618>)
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005958:	461a      	mov	r2, r3
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	2b00      	cmp	r3, #0
 8005964:	da01      	bge.n	800596a <test_scope+0x37a>
 8005966:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800596a:	131b      	asrs	r3, r3, #12
 800596c:	425b      	negs	r3, r3
 800596e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005972:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8005974:	4ba2      	ldr	r3, [pc, #648]	; (8005c00 <test_scope+0x610>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d011      	beq.n	80059a4 <test_scope+0x3b4>
 8005980:	4aa1      	ldr	r2, [pc, #644]	; (8005c08 <test_scope+0x618>)
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005988:	461a      	mov	r2, r3
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	2b00      	cmp	r3, #0
 8005994:	da01      	bge.n	800599a <test_scope+0x3aa>
 8005996:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800599a:	131b      	asrs	r3, r3, #12
 800599c:	425b      	negs	r3, r3
 800599e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80059a2:	e010      	b.n	80059c6 <test_scope+0x3d6>
 80059a4:	4a97      	ldr	r2, [pc, #604]	; (8005c04 <test_scope+0x614>)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ac:	461a      	mov	r2, r3
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da01      	bge.n	80059be <test_scope+0x3ce>
 80059ba:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80059be:	131b      	asrs	r3, r3, #12
 80059c0:	425b      	negs	r3, r3
 80059c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80059c6:	607b      	str	r3, [r7, #4]
			extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
			lcd_set_pixel( x0, y0, 0x00000000 );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	b211      	sxth	r1, r2
 80059d0:	2200      	movs	r2, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fc fa1c 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x0001C007 );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	b21b      	sxth	r3, r3
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	b211      	sxth	r1, r2
 80059e0:	4a8a      	ldr	r2, [pc, #552]	; (8005c0c <test_scope+0x61c>)
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fc fa14 	bl	8001e10 <lcd_set_pixel>

			y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 80059e8:	4b85      	ldr	r3, [pc, #532]	; (8005c00 <test_scope+0x610>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d011      	beq.n	8005a18 <test_scope+0x428>
 80059f4:	4a86      	ldr	r2, [pc, #536]	; (8005c10 <test_scope+0x620>)
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	da01      	bge.n	8005a0e <test_scope+0x41e>
 8005a0a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005a0e:	131b      	asrs	r3, r3, #12
 8005a10:	425b      	negs	r3, r3
 8005a12:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005a16:	e010      	b.n	8005a3a <test_scope+0x44a>
 8005a18:	4a7e      	ldr	r2, [pc, #504]	; (8005c14 <test_scope+0x624>)
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a20:	461a      	mov	r2, r3
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	019b      	lsls	r3, r3, #6
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	da01      	bge.n	8005a32 <test_scope+0x442>
 8005a2e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005a32:	131b      	asrs	r3, r3, #12
 8005a34:	425b      	negs	r3, r3
 8005a36:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005a3a:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8005a3c:	4b70      	ldr	r3, [pc, #448]	; (8005c00 <test_scope+0x610>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d011      	beq.n	8005a6c <test_scope+0x47c>
 8005a48:	4a72      	ldr	r2, [pc, #456]	; (8005c14 <test_scope+0x624>)
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a50:	461a      	mov	r2, r3
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	019b      	lsls	r3, r3, #6
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da01      	bge.n	8005a62 <test_scope+0x472>
 8005a5e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005a62:	131b      	asrs	r3, r3, #12
 8005a64:	425b      	negs	r3, r3
 8005a66:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005a6a:	e010      	b.n	8005a8e <test_scope+0x49e>
 8005a6c:	4a68      	ldr	r2, [pc, #416]	; (8005c10 <test_scope+0x620>)
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a74:	461a      	mov	r2, r3
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	019b      	lsls	r3, r3, #6
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da01      	bge.n	8005a86 <test_scope+0x496>
 8005a82:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005a86:	131b      	asrs	r3, r3, #12
 8005a88:	425b      	negs	r3, r3
 8005a8a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005a8e:	607b      	str	r3, [r7, #4]
			lcd_set_pixel( x0, y0, 0x00000000 );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	b211      	sxth	r1, r2
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc f9b8 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x00003F00 );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	b21b      	sxth	r3, r3
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	b211      	sxth	r1, r2
 8005aa8:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fc f9af 	bl	8001e10 <lcd_set_pixel>

			y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8005ab2:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <test_scope+0x610>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d011      	beq.n	8005ae2 <test_scope+0x4f2>
 8005abe:	4a56      	ldr	r2, [pc, #344]	; (8005c18 <test_scope+0x628>)
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	019b      	lsls	r3, r3, #6
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da01      	bge.n	8005ad8 <test_scope+0x4e8>
 8005ad4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005ad8:	131b      	asrs	r3, r3, #12
 8005ada:	425b      	negs	r3, r3
 8005adc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ae0:	e010      	b.n	8005b04 <test_scope+0x514>
 8005ae2:	4a4e      	ldr	r2, [pc, #312]	; (8005c1c <test_scope+0x62c>)
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aea:	461a      	mov	r2, r3
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	019b      	lsls	r3, r3, #6
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da01      	bge.n	8005afc <test_scope+0x50c>
 8005af8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005afc:	131b      	asrs	r3, r3, #12
 8005afe:	425b      	negs	r3, r3
 8005b00:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005b04:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8005b06:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <test_scope+0x610>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d011      	beq.n	8005b36 <test_scope+0x546>
 8005b12:	4a42      	ldr	r2, [pc, #264]	; (8005c1c <test_scope+0x62c>)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	019b      	lsls	r3, r3, #6
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da01      	bge.n	8005b2c <test_scope+0x53c>
 8005b28:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005b2c:	131b      	asrs	r3, r3, #12
 8005b2e:	425b      	negs	r3, r3
 8005b30:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005b34:	e010      	b.n	8005b58 <test_scope+0x568>
 8005b36:	4a38      	ldr	r2, [pc, #224]	; (8005c18 <test_scope+0x628>)
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	019b      	lsls	r3, r3, #6
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da01      	bge.n	8005b50 <test_scope+0x560>
 8005b4c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005b50:	131b      	asrs	r3, r3, #12
 8005b52:	425b      	negs	r3, r3
 8005b54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005b58:	607b      	str	r3, [r7, #4]
			lcd_set_pixel( x0, y0, 0x00000000 );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	b21b      	sxth	r3, r3
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	b211      	sxth	r1, r2
 8005b62:	2200      	movs	r2, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fc f953 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x000001F8 );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	b21b      	sxth	r3, r3
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	b211      	sxth	r1, r2
 8005b72:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fc f94a 	bl	8001e10 <lcd_set_pixel>

			y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <test_scope+0x610>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d011      	beq.n	8005bac <test_scope+0x5bc>
 8005b88:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <test_scope+0x630>)
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b90:	461a      	mov	r2, r3
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da01      	bge.n	8005ba2 <test_scope+0x5b2>
 8005b9e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005ba2:	131b      	asrs	r3, r3, #12
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005baa:	e010      	b.n	8005bce <test_scope+0x5de>
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <test_scope+0x634>)
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	019b      	lsls	r3, r3, #6
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da01      	bge.n	8005bc6 <test_scope+0x5d6>
 8005bc2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005bc6:	131b      	asrs	r3, r3, #12
 8005bc8:	425b      	negs	r3, r3
 8005bca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005bce:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <test_scope+0x610>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d025      	beq.n	8005c28 <test_scope+0x638>
 8005bdc:	4a11      	ldr	r2, [pc, #68]	; (8005c24 <test_scope+0x634>)
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be4:	461a      	mov	r2, r3
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da01      	bge.n	8005bf6 <test_scope+0x606>
 8005bf2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005bf6:	131b      	asrs	r3, r3, #12
 8005bf8:	425b      	negs	r3, r3
 8005bfa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005bfe:	e024      	b.n	8005c4a <test_scope+0x65a>
 8005c00:	200167dc 	.word	0x200167dc
 8005c04:	2001477c 	.word	0x2001477c
 8005c08:	2001277c 	.word	0x2001277c
 8005c0c:	0001c007 	.word	0x0001c007
 8005c10:	20014f7c 	.word	0x20014f7c
 8005c14:	20012f7c 	.word	0x20012f7c
 8005c18:	2001577c 	.word	0x2001577c
 8005c1c:	2001377c 	.word	0x2001377c
 8005c20:	20015f7c 	.word	0x20015f7c
 8005c24:	20013f7c 	.word	0x20013f7c
 8005c28:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <test_scope+0x6a8>)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c30:	461a      	mov	r2, r3
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da01      	bge.n	8005c42 <test_scope+0x652>
 8005c3e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005c42:	131b      	asrs	r3, r3, #12
 8005c44:	425b      	negs	r3, r3
 8005c46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005c4a:	607b      	str	r3, [r7, #4]
			lcd_set_pixel( x0, y0, 0x00000000 );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	b21b      	sxth	r3, r3
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	b211      	sxth	r1, r2
 8005c54:	2200      	movs	r2, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fc f8da 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0xFFFFFFFF );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	b21b      	sxth	r3, r3
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	b211      	sxth	r1, r2
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fc f8d1 	bl	8001e10 <lcd_set_pixel>
		for( int jj = 0; jj < 480; jj++ )
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	3301      	adds	r3, #1
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005c7a:	f6ff addf 	blt.w	800583c <test_scope+0x24c>

		}

		//lcd_rect( 240, 0, 1, 320, 0xFFFFFF00 );
		//printf( "], dtype=np.float32 )\n" );
		i += 1;
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <test_scope+0x6ac>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <test_scope+0x6ac>)
 8005c86:	6013      	str	r3, [r2, #0]
		trigger_bck = trigger;
 8005c88:	4a05      	ldr	r2, [pc, #20]	; (8005ca0 <test_scope+0x6b0>)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	6013      	str	r3, [r2, #0]
		//HAL_Delay( 10 );
	}
}
 8005c8e:	bf00      	nop
 8005c90:	3738      	adds	r7, #56	; 0x38
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bdb0      	pop	{r4, r5, r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20015f7c 	.word	0x20015f7c
 8005c9c:	200167dc 	.word	0x200167dc
 8005ca0:	200167e0 	.word	0x200167e0

08005ca4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <MX_SPI3_Init+0x78>)
 8005cac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005cae:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005cb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cbc:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005cc2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc4:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cca:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cda:	2230      	movs	r2, #48	; 0x30
 8005cdc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cde:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cf2:	2207      	movs	r2, #7
 8005cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005cf6:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005d02:	4805      	ldr	r0, [pc, #20]	; (8005d18 <MX_SPI3_Init+0x74>)
 8005d04:	f005 fc9e 	bl	800b644 <HAL_SPI_Init>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005d0e:	f7fe fef6 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200167e4 	.word	0x200167e4
 8005d1c:	40003c00 	.word	0x40003c00

08005d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	; 0x28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	60da      	str	r2, [r3, #12]
 8005d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <HAL_SPI_MspInit+0x7c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d128      	bne.n	8005d94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <HAL_SPI_MspInit+0x80>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <HAL_SPI_MspInit+0x80>)
 8005d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d4e:	4b14      	ldr	r3, [pc, #80]	; (8005da0 <HAL_SPI_MspInit+0x80>)
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <HAL_SPI_MspInit+0x80>)
 8005d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5e:	4a10      	ldr	r2, [pc, #64]	; (8005da0 <HAL_SPI_MspInit+0x80>)
 8005d60:	f043 0304 	orr.w	r3, r3, #4
 8005d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d66:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <HAL_SPI_MspInit+0x80>)
 8005d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005d72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d80:	2300      	movs	r3, #0
 8005d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005d84:	2306      	movs	r3, #6
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4805      	ldr	r0, [pc, #20]	; (8005da4 <HAL_SPI_MspInit+0x84>)
 8005d90:	f003 fed8 	bl	8009b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005d94:	bf00      	nop
 8005d96:	3728      	adds	r7, #40	; 0x28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40003c00 	.word	0x40003c00
 8005da0:	40021000 	.word	0x40021000
 8005da4:	48000800 	.word	0x48000800

08005da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <HAL_MspInit+0x48>)
 8005db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db2:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <HAL_MspInit+0x48>)
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6613      	str	r3, [r2, #96]	; 0x60
 8005dba:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <HAL_MspInit+0x48>)
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	607b      	str	r3, [r7, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <HAL_MspInit+0x48>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <HAL_MspInit+0x48>)
 8005dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd2:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <HAL_MspInit+0x48>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8005dde:	f000 fb97 	bl	8006510 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8005de2:	2002      	movs	r0, #2
 8005de4:	f000 fb80 	bl	80064e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000

08005df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005df8:	e7fe      	b.n	8005df8 <NMI_Handler+0x4>

08005dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dfe:	e7fe      	b.n	8005dfe <HardFault_Handler+0x4>

08005e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e04:	e7fe      	b.n	8005e04 <MemManage_Handler+0x4>

08005e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e06:	b480      	push	{r7}
 8005e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e0a:	e7fe      	b.n	8005e0a <BusFault_Handler+0x4>

08005e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e10:	e7fe      	b.n	8005e10 <UsageFault_Handler+0x4>

08005e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e12:	b480      	push	{r7}
 8005e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e40:	f000 fb12 	bl	8006468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e44:	bf00      	nop
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 8005e4c:	4802      	ldr	r0, [pc, #8]	; (8005e58 <DMA1_Channel1_IRQHandler+0x10>)
 8005e4e:	f003 fd2a 	bl	80098a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20011704 	.word	0x20011704

08005e5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005e60:	4802      	ldr	r0, [pc, #8]	; (8005e6c <DMA1_Channel2_IRQHandler+0x10>)
 8005e62:	f003 fd20 	bl	80098a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000524 	.word	0x20000524

08005e70 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005e74:	4802      	ldr	r0, [pc, #8]	; (8005e80 <DMA1_Channel3_IRQHandler+0x10>)
 8005e76:	f003 fd16 	bl	80098a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005e7a:	bf00      	nop
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200006d0 	.word	0x200006d0

08005e84 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8005e88:	4802      	ldr	r0, [pc, #8]	; (8005e94 <DMA1_Channel4_IRQHandler+0x10>)
 8005e8a:	f003 fd0c 	bl	80098a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000730 	.word	0x20000730

08005e98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005e9c:	4802      	ldr	r0, [pc, #8]	; (8005ea8 <DMA1_Channel5_IRQHandler+0x10>)
 8005e9e:	f003 fd02 	bl	80098a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005ea2:	bf00      	nop
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000584 	.word	0x20000584

08005eac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8005eb0:	4802      	ldr	r0, [pc, #8]	; (8005ebc <DMA1_Channel6_IRQHandler+0x10>)
 8005eb2:	f003 fcf8 	bl	80098a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200005e4 	.word	0x200005e4

08005ec0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8005ec4:	4802      	ldr	r0, [pc, #8]	; (8005ed0 <DMA1_Channel7_IRQHandler+0x10>)
 8005ec6:	f003 fcee 	bl	80098a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005eca:	bf00      	nop
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000644 	.word	0x20000644

08005ed4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	extern int cndtr1;
	cndtr1 = hdma_adc1.Instance->CNDTR;
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <ADC1_2_IRQHandler+0x1c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <ADC1_2_IRQHandler+0x20>)
 8005ee2:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ee4:	4804      	ldr	r0, [pc, #16]	; (8005ef8 <ADC1_2_IRQHandler+0x24>)
 8005ee6:	f001 f985 	bl	80071f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000524 	.word	0x20000524
 8005ef4:	20011768 	.word	0x20011768
 8005ef8:	20000374 	.word	0x20000374

08005efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern int cndtr2;
	cndtr2 = hdma_adc1.Instance->CNDTR;
 8005f00:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <TIM2_IRQHandler+0x1c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	461a      	mov	r2, r3
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <TIM2_IRQHandler+0x20>)
 8005f0a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005f0c:	4804      	ldr	r0, [pc, #16]	; (8005f20 <TIM2_IRQHandler+0x24>)
 8005f0e:	f006 fa79 	bl	800c404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005f12:	bf00      	nop
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000524 	.word	0x20000524
 8005f1c:	2001176c 	.word	0x2001176c
 8005f20:	20016898 	.word	0x20016898

08005f24 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi1);
 8005f28:	4802      	ldr	r0, [pc, #8]	; (8005f34 <QUADSPI_IRQHandler+0x10>)
 8005f2a:	f004 f9c7 	bl	800a2bc <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8005f2e:	bf00      	nop
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200116b8 	.word	0x200116b8

08005f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return 1;
 8005f3c:	2301      	movs	r3, #1
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <_kill>:

int _kill(int pid, int sig)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005f52:	f018 f919 	bl	801e188 <__errno>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2216      	movs	r2, #22
 8005f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8005f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <_exit>:

void _exit (int status)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005f70:	f04f 31ff 	mov.w	r1, #4294967295
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ffe7 	bl	8005f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005f7a:	e7fe      	b.n	8005f7a <_exit+0x12>

08005f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e00a      	b.n	8005fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f8e:	f3af 8000 	nop.w
 8005f92:	4601      	mov	r1, r0
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	60ba      	str	r2, [r7, #8]
 8005f9a:	b2ca      	uxtb	r2, r1
 8005f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	dbf0      	blt.n	8005f8e <_read+0x12>
  }

  return len;
 8005fac:	687b      	ldr	r3, [r7, #4]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fde:	605a      	str	r2, [r3, #4]
  return 0;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <_isatty>:

int _isatty(int file)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ff6:	2301      	movs	r3, #1
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006028:	4a14      	ldr	r2, [pc, #80]	; (800607c <_sbrk+0x5c>)
 800602a:	4b15      	ldr	r3, [pc, #84]	; (8006080 <_sbrk+0x60>)
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <_sbrk+0x64>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800603c:	4b11      	ldr	r3, [pc, #68]	; (8006084 <_sbrk+0x64>)
 800603e:	4a12      	ldr	r2, [pc, #72]	; (8006088 <_sbrk+0x68>)
 8006040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006042:	4b10      	ldr	r3, [pc, #64]	; (8006084 <_sbrk+0x64>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	429a      	cmp	r2, r3
 800604e:	d207      	bcs.n	8006060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006050:	f018 f89a 	bl	801e188 <__errno>
 8006054:	4603      	mov	r3, r0
 8006056:	220c      	movs	r2, #12
 8006058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	e009      	b.n	8006074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <_sbrk+0x64>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006066:	4b07      	ldr	r3, [pc, #28]	; (8006084 <_sbrk+0x64>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	4a05      	ldr	r2, [pc, #20]	; (8006084 <_sbrk+0x64>)
 8006070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20020000 	.word	0x20020000
 8006080:	00000400 	.word	0x00000400
 8006084:	20016848 	.word	0x20016848
 8006088:	20016a80 	.word	0x20016a80

0800608c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <SystemInit+0x20>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	4a05      	ldr	r2, [pc, #20]	; (80060ac <SystemInit+0x20>)
 8006098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800609c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060a0:	bf00      	nop
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	e000ed00 	.word	0xe000ed00

080060b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060b6:	f107 0310 	add.w	r3, r7, #16
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	609a      	str	r2, [r3, #8]
 80060c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80060ce:	4b1f      	ldr	r3, [pc, #124]	; (800614c <MX_TIM1_Init+0x9c>)
 80060d0:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <MX_TIM1_Init+0xa0>)
 80060d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 80060d4:	4b1d      	ldr	r3, [pc, #116]	; (800614c <MX_TIM1_Init+0x9c>)
 80060d6:	2254      	movs	r2, #84	; 0x54
 80060d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060da:	4b1c      	ldr	r3, [pc, #112]	; (800614c <MX_TIM1_Init+0x9c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <MX_TIM1_Init+0x9c>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e6:	4b19      	ldr	r3, [pc, #100]	; (800614c <MX_TIM1_Init+0x9c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80060ec:	4b17      	ldr	r3, [pc, #92]	; (800614c <MX_TIM1_Init+0x9c>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060f2:	4b16      	ldr	r3, [pc, #88]	; (800614c <MX_TIM1_Init+0x9c>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80060f8:	4814      	ldr	r0, [pc, #80]	; (800614c <MX_TIM1_Init+0x9c>)
 80060fa:	f005 ff0d 	bl	800bf18 <HAL_TIM_Base_Init>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006104:	f7fe fcfb 	bl	8004afe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800610c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800610e:	f107 0310 	add.w	r3, r7, #16
 8006112:	4619      	mov	r1, r3
 8006114:	480d      	ldr	r0, [pc, #52]	; (800614c <MX_TIM1_Init+0x9c>)
 8006116:	f006 fb6f 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8006120:	f7fe fced 	bl	8004afe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006124:	2320      	movs	r3, #32
 8006126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006128:	2300      	movs	r3, #0
 800612a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	4619      	mov	r1, r3
 8006134:	4805      	ldr	r0, [pc, #20]	; (800614c <MX_TIM1_Init+0x9c>)
 8006136:	f007 f927 	bl	800d388 <HAL_TIMEx_MasterConfigSynchronization>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8006140:	f7fe fcdd 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006144:	bf00      	nop
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	2001684c 	.word	0x2001684c
 8006150:	40012c00 	.word	0x40012c00

08006154 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08e      	sub	sp, #56	; 0x38
 8006158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800615a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	605a      	str	r2, [r3, #4]
 8006164:	609a      	str	r2, [r3, #8]
 8006166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006168:	f107 031c 	add.w	r3, r7, #28
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006174:	463b      	mov	r3, r7
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	60da      	str	r2, [r3, #12]
 8006180:	611a      	str	r2, [r3, #16]
 8006182:	615a      	str	r2, [r3, #20]
 8006184:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006186:	4b2c      	ldr	r3, [pc, #176]	; (8006238 <MX_TIM2_Init+0xe4>)
 8006188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800618c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 85-1;
 800618e:	4b2a      	ldr	r3, [pc, #168]	; (8006238 <MX_TIM2_Init+0xe4>)
 8006190:	2254      	movs	r2, #84	; 0x54
 8006192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006194:	4b28      	ldr	r3, [pc, #160]	; (8006238 <MX_TIM2_Init+0xe4>)
 8006196:	2200      	movs	r2, #0
 8006198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <MX_TIM2_Init+0xe4>)
 800619c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80061a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061a2:	4b25      	ldr	r3, [pc, #148]	; (8006238 <MX_TIM2_Init+0xe4>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061a8:	4b23      	ldr	r3, [pc, #140]	; (8006238 <MX_TIM2_Init+0xe4>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80061ae:	4822      	ldr	r0, [pc, #136]	; (8006238 <MX_TIM2_Init+0xe4>)
 80061b0:	f005 feb2 	bl	800bf18 <HAL_TIM_Base_Init>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80061ba:	f7fe fca0 	bl	8004afe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80061c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061c8:	4619      	mov	r1, r3
 80061ca:	481b      	ldr	r0, [pc, #108]	; (8006238 <MX_TIM2_Init+0xe4>)
 80061cc:	f006 fb14 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80061d6:	f7fe fc92 	bl	8004afe <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80061da:	4817      	ldr	r0, [pc, #92]	; (8006238 <MX_TIM2_Init+0xe4>)
 80061dc:	f005 ff8b 	bl	800c0f6 <HAL_TIM_OC_Init>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80061e6:	f7fe fc8a 	bl	8004afe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80061f2:	f107 031c 	add.w	r3, r7, #28
 80061f6:	4619      	mov	r1, r3
 80061f8:	480f      	ldr	r0, [pc, #60]	; (8006238 <MX_TIM2_Init+0xe4>)
 80061fa:	f007 f8c5 	bl	800d388 <HAL_TIMEx_MasterConfigSynchronization>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8006204:	f7fe fc7b 	bl	8004afe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006208:	2300      	movs	r3, #0
 800620a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1023;
 800620c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006210:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800621a:	463b      	mov	r3, r7
 800621c:	2200      	movs	r2, #0
 800621e:	4619      	mov	r1, r3
 8006220:	4805      	ldr	r0, [pc, #20]	; (8006238 <MX_TIM2_Init+0xe4>)
 8006222:	f006 fa6f 	bl	800c704 <HAL_TIM_OC_ConfigChannel>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800622c:	f7fe fc67 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006230:	bf00      	nop
 8006232:	3738      	adds	r7, #56	; 0x38
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20016898 	.word	0x20016898

0800623c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006242:	f107 0310 	add.w	r3, r7, #16
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	605a      	str	r2, [r3, #4]
 800624c:	609a      	str	r2, [r3, #8]
 800624e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800625a:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <MX_TIM3_Init+0x94>)
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <MX_TIM3_Init+0x98>)
 800625e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85-1;
 8006260:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <MX_TIM3_Init+0x94>)
 8006262:	2254      	movs	r2, #84	; 0x54
 8006264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006266:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <MX_TIM3_Init+0x94>)
 8006268:	2200      	movs	r2, #0
 800626a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800626c:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <MX_TIM3_Init+0x94>)
 800626e:	2201      	movs	r2, #1
 8006270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <MX_TIM3_Init+0x94>)
 8006274:	2200      	movs	r2, #0
 8006276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <MX_TIM3_Init+0x94>)
 800627a:	2200      	movs	r2, #0
 800627c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800627e:	4814      	ldr	r0, [pc, #80]	; (80062d0 <MX_TIM3_Init+0x94>)
 8006280:	f005 fe4a 	bl	800bf18 <HAL_TIM_Base_Init>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800628a:	f7fe fc38 	bl	8004afe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800628e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006294:	f107 0310 	add.w	r3, r7, #16
 8006298:	4619      	mov	r1, r3
 800629a:	480d      	ldr	r0, [pc, #52]	; (80062d0 <MX_TIM3_Init+0x94>)
 800629c:	f006 faac 	bl	800c7f8 <HAL_TIM_ConfigClockSource>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80062a6:	f7fe fc2a 	bl	8004afe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80062aa:	2320      	movs	r3, #32
 80062ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80062b2:	1d3b      	adds	r3, r7, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4806      	ldr	r0, [pc, #24]	; (80062d0 <MX_TIM3_Init+0x94>)
 80062b8:	f007 f866 	bl	800d388 <HAL_TIMEx_MasterConfigSynchronization>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80062c2:	f7fe fc1c 	bl	8004afe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80062c6:	bf00      	nop
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200168e4 	.word	0x200168e4
 80062d4:	40000400 	.word	0x40000400

080062d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_TIM_Base_MspInit+0x8c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10c      	bne.n	8006304 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062ea:	4b1f      	ldr	r3, [pc, #124]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 80062ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ee:	4a1e      	ldr	r2, [pc, #120]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 80062f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062f4:	6613      	str	r3, [r2, #96]	; 0x60
 80062f6:	4b1c      	ldr	r3, [pc, #112]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 80062f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006302:	e02a      	b.n	800635a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630c:	d114      	bne.n	8006338 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800630e:	4b16      	ldr	r3, [pc, #88]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	6593      	str	r3, [r2, #88]	; 0x58
 800631a:	4b13      	ldr	r3, [pc, #76]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	201c      	movs	r0, #28
 800632c:	f002 fce9 	bl	8008d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006330:	201c      	movs	r0, #28
 8006332:	f002 fd00 	bl	8008d36 <HAL_NVIC_EnableIRQ>
}
 8006336:	e010      	b.n	800635a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a0b      	ldr	r2, [pc, #44]	; (800636c <HAL_TIM_Base_MspInit+0x94>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10b      	bne.n	800635a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	4a08      	ldr	r2, [pc, #32]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	6593      	str	r3, [r2, #88]	; 0x58
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <HAL_TIM_Base_MspInit+0x90>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40021000 	.word	0x40021000
 800636c:	40000400 	.word	0x40000400

08006370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006370:	480d      	ldr	r0, [pc, #52]	; (80063a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006372:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006374:	480d      	ldr	r0, [pc, #52]	; (80063ac <LoopForever+0x6>)
  ldr r1, =_edata
 8006376:	490e      	ldr	r1, [pc, #56]	; (80063b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006378:	4a0e      	ldr	r2, [pc, #56]	; (80063b4 <LoopForever+0xe>)
  movs r3, #0
 800637a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800637c:	e002      	b.n	8006384 <LoopCopyDataInit>

0800637e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800637e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006382:	3304      	adds	r3, #4

08006384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006388:	d3f9      	bcc.n	800637e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800638a:	4a0b      	ldr	r2, [pc, #44]	; (80063b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800638c:	4c0b      	ldr	r4, [pc, #44]	; (80063bc <LoopForever+0x16>)
  movs r3, #0
 800638e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006390:	e001      	b.n	8006396 <LoopFillZerobss>

08006392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006394:	3204      	adds	r2, #4

08006396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006398:	d3fb      	bcc.n	8006392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800639a:	f7ff fe77 	bl	800608c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800639e:	f017 fef9 	bl	801e194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80063a2:	f7fe f9e3 	bl	800476c <main>

080063a6 <LoopForever>:

LoopForever:
    b LoopForever
 80063a6:	e7fe      	b.n	80063a6 <LoopForever>
  ldr   r0, =_estack
 80063a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063b0:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80063b4:	08023ac8 	.word	0x08023ac8
  ldr r2, =_sbss
 80063b8:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80063bc:	20016a80 	.word	0x20016a80

080063c0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80063c0:	e7fe      	b.n	80063c0 <ADC3_IRQHandler>

080063c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063cc:	2003      	movs	r0, #3
 80063ce:	f002 fc8d 	bl	8008cec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063d2:	2000      	movs	r0, #0
 80063d4:	f000 f80e 	bl	80063f4 <HAL_InitTick>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	71fb      	strb	r3, [r7, #7]
 80063e2:	e001      	b.n	80063e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063e4:	f7ff fce0 	bl	8005da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063e8:	79fb      	ldrb	r3, [r7, #7]

}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006400:	4b16      	ldr	r3, [pc, #88]	; (800645c <HAL_InitTick+0x68>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d022      	beq.n	800644e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <HAL_InitTick+0x6c>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b13      	ldr	r3, [pc, #76]	; (800645c <HAL_InitTick+0x68>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006414:	fbb1 f3f3 	udiv	r3, r1, r3
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	4618      	mov	r0, r3
 800641e:	f002 fc98 	bl	8008d52 <HAL_SYSTICK_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10f      	bne.n	8006448 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d809      	bhi.n	8006442 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800642e:	2200      	movs	r2, #0
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
 8006436:	f002 fc64 	bl	8008d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800643a:	4a0a      	ldr	r2, [pc, #40]	; (8006464 <HAL_InitTick+0x70>)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e007      	b.n	8006452 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	e004      	b.n	8006452 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
 800644c:	e001      	b.n	8006452 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000010 	.word	0x20000010
 8006460:	20000008 	.word	0x20000008
 8006464:	2000000c 	.word	0x2000000c

08006468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <HAL_IncTick+0x1c>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <HAL_IncTick+0x20>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4413      	add	r3, r2
 8006476:	4a03      	ldr	r2, [pc, #12]	; (8006484 <HAL_IncTick+0x1c>)
 8006478:	6013      	str	r3, [r2, #0]
}
 800647a:	bf00      	nop
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20016930 	.word	0x20016930
 8006488:	20000010 	.word	0x20000010

0800648c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return uwTick;
 8006490:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <HAL_GetTick+0x14>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20016930 	.word	0x20016930

080064a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064ac:	f7ff ffee 	bl	800648c <HAL_GetTick>
 80064b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d004      	beq.n	80064c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <HAL_Delay+0x40>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80064c8:	bf00      	nop
 80064ca:	f7ff ffdf 	bl	800648c <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d8f7      	bhi.n	80064ca <HAL_Delay+0x26>
  {
  }
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000010 	.word	0x20000010

080064e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80064f0:	4b06      	ldr	r3, [pc, #24]	; (800650c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f023 0202 	bic.w	r2, r3, #2
 80064f8:	4904      	ldr	r1, [pc, #16]	; (800650c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	600b      	str	r3, [r1, #0]
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40010030 	.word	0x40010030

08006510 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800651a:	f023 0301 	bic.w	r3, r3, #1
 800651e:	6013      	str	r3, [r2, #0]
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40010030 	.word	0x40010030

08006530 <LL_ADC_SetCommonClock>:
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	609a      	str	r2, [r3, #8]
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <LL_ADC_SetCommonPathInternalCh>:
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <LL_ADC_GetCommonPathInternalCh>:
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <LL_ADC_SetOffset>:
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3360      	adds	r3, #96	; 0x60
 80065aa:	461a      	mov	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b08      	ldr	r3, [pc, #32]	; (80065dc <LL_ADC_SetOffset+0x44>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	601a      	str	r2, [r3, #0]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	03fff000 	.word	0x03fff000

080065e0 <LL_ADC_GetOffsetChannel>:
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3360      	adds	r3, #96	; 0x60
 80065ee:	461a      	mov	r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <LL_ADC_SetOffsetState>:
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3360      	adds	r3, #96	; 0x60
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	431a      	orrs	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_SetOffsetSign>:
{
 8006642:	b480      	push	{r7}
 8006644:	b087      	sub	sp, #28
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3360      	adds	r3, #96	; 0x60
 8006652:	461a      	mov	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	431a      	orrs	r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	601a      	str	r2, [r3, #0]
}
 800666c:	bf00      	nop
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <LL_ADC_SetOffsetSaturation>:
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3360      	adds	r3, #96	; 0x60
 8006688:	461a      	mov	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	431a      	orrs	r2, r3
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	601a      	str	r2, [r3, #0]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	615a      	str	r2, [r3, #20]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <LL_ADC_REG_SetSequencerRanks>:
{
 80066fa:	b480      	push	{r7}
 80066fc:	b087      	sub	sp, #28
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3330      	adds	r3, #48	; 0x30
 800670a:	461a      	mov	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	f003 030c 	and.w	r3, r3, #12
 8006716:	4413      	add	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	211f      	movs	r1, #31
 8006726:	fa01 f303 	lsl.w	r3, r1, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	401a      	ands	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	0e9b      	lsrs	r3, r3, #26
 8006732:	f003 011f 	and.w	r1, r3, #31
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	fa01 f303 	lsl.w	r3, r1, r3
 8006740:	431a      	orrs	r2, r3
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	601a      	str	r2, [r3, #0]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <LL_ADC_SetChannelSamplingTime>:
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3314      	adds	r3, #20
 8006788:	461a      	mov	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	0e5b      	lsrs	r3, r3, #25
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	4413      	add	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	0d1b      	lsrs	r3, r3, #20
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2107      	movs	r1, #7
 80067a6:	fa01 f303 	lsl.w	r3, r1, r3
 80067aa:	43db      	mvns	r3, r3
 80067ac:	401a      	ands	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	0d1b      	lsrs	r3, r3, #20
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	fa01 f303 	lsl.w	r3, r1, r3
 80067bc:	431a      	orrs	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	601a      	str	r2, [r3, #0]
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <LL_ADC_SetChannelSingleDiff>:
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a0f      	ldr	r2, [pc, #60]	; (800681c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d10a      	bne.n	80067fa <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80067f8:	e00a      	b.n	8006810 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006806:	43db      	mvns	r3, r3
 8006808:	401a      	ands	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	407f0000 	.word	0x407f0000

08006820 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	330c      	adds	r3, #12
 8006830:	4618      	mov	r0, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	0d1b      	lsrs	r3, r3, #20
 8006836:	f003 0103 	and.w	r1, r3, #3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f003 0201 	and.w	r2, r3, #1
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4403      	add	r3, r0
 800684e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800685a:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800685e:	43db      	mvns	r3, r3
 8006860:	401a      	ands	r2, r3
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	400b      	ands	r3, r1
 8006868:	431a      	orrs	r2, r3
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	601a      	str	r2, [r3, #0]
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <LL_ADC_ConfigAnalogWDThresholds>:
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3320      	adds	r3, #32
 800688c:	461a      	mov	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	0d1b      	lsrs	r3, r3, #20
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	4413      	add	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0419      	lsls	r1, r3, #16
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	430b      	orrs	r3, r1
 80068ac:	431a      	orrs	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	601a      	str	r2, [r3, #0]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <LL_ADC_GetMultimode>:
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <LL_ADC_GetMultiDMATransfer>:
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <LL_ADC_DisableDeepPowerDown>:
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006906:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6093      	str	r3, [r2, #8]
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <LL_ADC_IsDeepPowerDownEnabled>:
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800692a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692e:	d101      	bne.n	8006934 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <LL_ADC_EnableInternalRegulator>:
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006952:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006956:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	609a      	str	r2, [r3, #8]
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <LL_ADC_IsInternalRegulatorEnabled>:
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800697e:	d101      	bne.n	8006984 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <LL_ADC_Enable>:
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069a6:	f043 0201 	orr.w	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	609a      	str	r2, [r3, #8]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <LL_ADC_Disable>:
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069ce:	f043 0202 	orr.w	r2, r3, #2
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <LL_ADC_IsEnabled>:
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <LL_ADC_IsEnabled+0x18>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <LL_ADC_IsEnabled+0x1a>
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <LL_ADC_IsDisableOngoing>:
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d101      	bne.n	8006a20 <LL_ADC_IsDisableOngoing+0x18>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <LL_ADC_IsDisableOngoing+0x1a>
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <LL_ADC_REG_StartConversion>:
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a42:	f043 0204 	orr.w	r2, r3, #4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	609a      	str	r2, [r3, #8]
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <LL_ADC_REG_StopConversion>:
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a6a:	f043 0210 	orr.w	r2, r3, #16
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	609a      	str	r2, [r3, #8]
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <LL_ADC_REG_IsConversionOngoing>:
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d101      	bne.n	8006a96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <LL_ADC_INJ_StopConversion>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ab8:	f043 0220 	orr.w	r2, r3, #32
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <LL_ADC_INJ_IsConversionOngoing>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d101      	bne.n	8006ae4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_ADC_ClearFlag_AWD1>:
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2280      	movs	r2, #128	; 0x80
 8006afe:	601a      	str	r2, [r3, #0]
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_ADC_ClearFlag_AWD2>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b1a:	601a      	str	r2, [r3, #0]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <LL_ADC_ClearFlag_AWD3>:
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b36:	601a      	str	r2, [r3, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <LL_ADC_EnableIT_AWD1>:
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	605a      	str	r2, [r3, #4]
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <LL_ADC_EnableIT_AWD2>:
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	605a      	str	r2, [r3, #4]
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <LL_ADC_EnableIT_AWD3>:
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	605a      	str	r2, [r3, #4]
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <LL_ADC_DisableIT_AWD1>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	605a      	str	r2, [r3, #4]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <LL_ADC_DisableIT_AWD2>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	605a      	str	r2, [r3, #4]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	605a      	str	r2, [r3, #4]
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e1af      	b.n	8006f7e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fa fa57 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fe68 	bl	800691a <LL_ADC_IsDeepPowerDownEnabled>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fe4e 	bl	80068f6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff fe83 	bl	800696a <LL_ADC_IsInternalRegulatorEnabled>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d115      	bne.n	8006c96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fe67 	bl	8006942 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c74:	4b9f      	ldr	r3, [pc, #636]	; (8006ef4 <HAL_ADC_Init+0x2f0>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	4a9f      	ldr	r2, [pc, #636]	; (8006ef8 <HAL_ADC_Init+0x2f4>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	3301      	adds	r3, #1
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c88:	e002      	b.n	8006c90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f9      	bne.n	8006c8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fe65 	bl	800696a <LL_ADC_IsInternalRegulatorEnabled>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10d      	bne.n	8006cc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006caa:	f043 0210 	orr.w	r2, r3, #16
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb6:	f043 0201 	orr.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fed9 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 8006ccc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	f003 0310 	and.w	r3, r3, #16
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f040 8148 	bne.w	8006f6c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8144 	bne.w	8006f6c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006cec:	f043 0202 	orr.w	r2, r3, #2
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fe72 	bl	80069e2 <LL_ADC_IsEnabled>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d141      	bne.n	8006d88 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d0c:	d004      	beq.n	8006d18 <HAL_ADC_Init+0x114>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a7a      	ldr	r2, [pc, #488]	; (8006efc <HAL_ADC_Init+0x2f8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10f      	bne.n	8006d38 <HAL_ADC_Init+0x134>
 8006d18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006d1c:	f7ff fe61 	bl	80069e2 <LL_ADC_IsEnabled>
 8006d20:	4604      	mov	r4, r0
 8006d22:	4876      	ldr	r0, [pc, #472]	; (8006efc <HAL_ADC_Init+0x2f8>)
 8006d24:	f7ff fe5d 	bl	80069e2 <LL_ADC_IsEnabled>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4323      	orrs	r3, r4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf0c      	ite	eq
 8006d30:	2301      	moveq	r3, #1
 8006d32:	2300      	movne	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e012      	b.n	8006d5e <HAL_ADC_Init+0x15a>
 8006d38:	4871      	ldr	r0, [pc, #452]	; (8006f00 <HAL_ADC_Init+0x2fc>)
 8006d3a:	f7ff fe52 	bl	80069e2 <LL_ADC_IsEnabled>
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4870      	ldr	r0, [pc, #448]	; (8006f04 <HAL_ADC_Init+0x300>)
 8006d42:	f7ff fe4e 	bl	80069e2 <LL_ADC_IsEnabled>
 8006d46:	4603      	mov	r3, r0
 8006d48:	431c      	orrs	r4, r3
 8006d4a:	486f      	ldr	r0, [pc, #444]	; (8006f08 <HAL_ADC_Init+0x304>)
 8006d4c:	f7ff fe49 	bl	80069e2 <LL_ADC_IsEnabled>
 8006d50:	4603      	mov	r3, r0
 8006d52:	4323      	orrs	r3, r4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bf0c      	ite	eq
 8006d58:	2301      	moveq	r3, #1
 8006d5a:	2300      	movne	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d012      	beq.n	8006d88 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d6a:	d004      	beq.n	8006d76 <HAL_ADC_Init+0x172>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a62      	ldr	r2, [pc, #392]	; (8006efc <HAL_ADC_Init+0x2f8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d101      	bne.n	8006d7a <HAL_ADC_Init+0x176>
 8006d76:	4a65      	ldr	r2, [pc, #404]	; (8006f0c <HAL_ADC_Init+0x308>)
 8006d78:	e000      	b.n	8006d7c <HAL_ADC_Init+0x178>
 8006d7a:	4a65      	ldr	r2, [pc, #404]	; (8006f10 <HAL_ADC_Init+0x30c>)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f7ff fbd4 	bl	8006530 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7f5b      	ldrb	r3, [r3, #29]
 8006d8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006d98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006d9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006da6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d106      	bne.n	8006dc4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	045b      	lsls	r3, r3, #17
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d009      	beq.n	8006de0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	4b4b      	ldr	r3, [pc, #300]	; (8006f14 <HAL_ADC_Init+0x310>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	69b9      	ldr	r1, [r7, #24]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff fe35 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 8006e14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fe56 	bl	8006acc <LL_ADC_INJ_IsConversionOngoing>
 8006e20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d17f      	bne.n	8006f28 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d17c      	bne.n	8006f28 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006e32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e3a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4a:	f023 0302 	bic.w	r3, r3, #2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	69b9      	ldr	r1, [r7, #24]
 8006e54:	430b      	orrs	r3, r1
 8006e56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d017      	beq.n	8006e90 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006e7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6911      	ldr	r1, [r2, #16]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006e8e:	e013      	b.n	8006eb8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006eb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d12a      	bne.n	8006f18 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ecc:	f023 0304 	bic.w	r3, r3, #4
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ed8:	4311      	orrs	r1, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ede:	4311      	orrs	r1, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0201 	orr.w	r2, r2, #1
 8006ef0:	611a      	str	r2, [r3, #16]
 8006ef2:	e019      	b.n	8006f28 <HAL_ADC_Init+0x324>
 8006ef4:	20000008 	.word	0x20000008
 8006ef8:	053e2d63 	.word	0x053e2d63
 8006efc:	50000100 	.word	0x50000100
 8006f00:	50000400 	.word	0x50000400
 8006f04:	50000500 	.word	0x50000500
 8006f08:	50000600 	.word	0x50000600
 8006f0c:	50000300 	.word	0x50000300
 8006f10:	50000700 	.word	0x50000700
 8006f14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d10c      	bne.n	8006f4a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f023 010f 	bic.w	r1, r3, #15
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	1e5a      	subs	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
 8006f48:	e007      	b.n	8006f5a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 020f 	bic.w	r2, r2, #15
 8006f58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	f043 0201 	orr.w	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f6a:	e007      	b.n	8006f7c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f70:	f043 0210 	orr.w	r2, r3, #16
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3724      	adds	r7, #36	; 0x24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd90      	pop	{r4, r7, pc}
 8006f86:	bf00      	nop

08006f88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f9c:	d004      	beq.n	8006fa8 <HAL_ADC_Start_DMA+0x20>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a5a      	ldr	r2, [pc, #360]	; (800710c <HAL_ADC_Start_DMA+0x184>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d101      	bne.n	8006fac <HAL_ADC_Start_DMA+0x24>
 8006fa8:	4b59      	ldr	r3, [pc, #356]	; (8007110 <HAL_ADC_Start_DMA+0x188>)
 8006faa:	e000      	b.n	8006fae <HAL_ADC_Start_DMA+0x26>
 8006fac:	4b59      	ldr	r3, [pc, #356]	; (8007114 <HAL_ADC_Start_DMA+0x18c>)
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fc85 	bl	80068be <LL_ADC_GetMultimode>
 8006fb4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fd5f 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 809b 	bne.w	80070fe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_ADC_Start_DMA+0x4e>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e096      	b.n	8007104 <HAL_ADC_Start_DMA+0x17c>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a4d      	ldr	r2, [pc, #308]	; (8007118 <HAL_ADC_Start_DMA+0x190>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d008      	beq.n	8006ffa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b05      	cmp	r3, #5
 8006ff2:	d002      	beq.n	8006ffa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d17a      	bne.n	80070f0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f001 fa6c 	bl	80084d8 <ADC_Enable>
 8007000:	4603      	mov	r3, r0
 8007002:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d16d      	bne.n	80070e6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a3a      	ldr	r2, [pc, #232]	; (800710c <HAL_ADC_Start_DMA+0x184>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_ADC_Start_DMA+0xb4>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a3b      	ldr	r2, [pc, #236]	; (800711c <HAL_ADC_Start_DMA+0x194>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d002      	beq.n	8007038 <HAL_ADC_Start_DMA+0xb0>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	e003      	b.n	8007040 <HAL_ADC_Start_DMA+0xb8>
 8007038:	4b39      	ldr	r3, [pc, #228]	; (8007120 <HAL_ADC_Start_DMA+0x198>)
 800703a:	e001      	b.n	8007040 <HAL_ADC_Start_DMA+0xb8>
 800703c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	4293      	cmp	r3, r2
 8007046:	d002      	beq.n	800704e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d006      	beq.n	8007074 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706a:	f023 0206 	bic.w	r2, r3, #6
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	661a      	str	r2, [r3, #96]	; 0x60
 8007072:	e002      	b.n	800707a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	4a29      	ldr	r2, [pc, #164]	; (8007124 <HAL_ADC_Start_DMA+0x19c>)
 8007080:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	4a28      	ldr	r2, [pc, #160]	; (8007128 <HAL_ADC_Start_DMA+0x1a0>)
 8007088:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	4a27      	ldr	r2, [pc, #156]	; (800712c <HAL_ADC_Start_DMA+0x1a4>)
 8007090:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	221c      	movs	r2, #28
 8007098:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0210 	orr.w	r2, r2, #16
 80070b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0201 	orr.w	r2, r2, #1
 80070c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3340      	adds	r3, #64	; 0x40
 80070cc:	4619      	mov	r1, r3
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f002 faad 	bl	8009630 <HAL_DMA_Start_IT>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fca5 	bl	8006a2e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80070e4:	e00d      	b.n	8007102 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80070ee:	e008      	b.n	8007102 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80070fc:	e001      	b.n	8007102 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80070fe:	2302      	movs	r3, #2
 8007100:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	50000100 	.word	0x50000100
 8007110:	50000300 	.word	0x50000300
 8007114:	50000700 	.word	0x50000700
 8007118:	50000600 	.word	0x50000600
 800711c:	50000500 	.word	0x50000500
 8007120:	50000400 	.word	0x50000400
 8007124:	0800865b 	.word	0x0800865b
 8007128:	08008733 	.word	0x08008733
 800712c:	0800874f 	.word	0x0800874f

08007130 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_ADC_Stop_DMA+0x16>
 8007142:	2302      	movs	r3, #2
 8007144:	e051      	b.n	80071ea <HAL_ADC_Stop_DMA+0xba>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800714e:	2103      	movs	r1, #3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f905 	bl	8008360 <ADC_ConversionStop>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d13f      	bne.n	80071e0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007174:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d10f      	bne.n	800719e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	4618      	mov	r0, r3
 8007184:	f002 facf 	bl	8009726 <HAL_DMA_Abort>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0210 	bic.w	r2, r2, #16
 80071ac:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f9f1 	bl	800859c <ADC_Disable>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
 80071be:	e002      	b.n	80071c6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f9eb 	bl	800859c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	f043 0201 	orr.w	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	; 0x28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80071fc:	2300      	movs	r3, #0
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007218:	d004      	beq.n	8007224 <HAL_ADC_IRQHandler+0x30>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a8e      	ldr	r2, [pc, #568]	; (8007458 <HAL_ADC_IRQHandler+0x264>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d101      	bne.n	8007228 <HAL_ADC_IRQHandler+0x34>
 8007224:	4b8d      	ldr	r3, [pc, #564]	; (800745c <HAL_ADC_IRQHandler+0x268>)
 8007226:	e000      	b.n	800722a <HAL_ADC_IRQHandler+0x36>
 8007228:	4b8d      	ldr	r3, [pc, #564]	; (8007460 <HAL_ADC_IRQHandler+0x26c>)
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fb47 	bl	80068be <LL_ADC_GetMultimode>
 8007230:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <HAL_ADC_IRQHandler+0x78>
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d012      	beq.n	800726c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b00      	cmp	r3, #0
 8007250:	d105      	bne.n	800725e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007256:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fb62 	bl	8008928 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2202      	movs	r2, #2
 800726a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <HAL_ADC_IRQHandler+0x8c>
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8094 	beq.w	80073b4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 808e 	beq.w	80073b4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fa0d 	bl	80066d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d072      	beq.n	80073a6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a64      	ldr	r2, [pc, #400]	; (8007458 <HAL_ADC_IRQHandler+0x264>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d009      	beq.n	80072de <HAL_ADC_IRQHandler+0xea>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a65      	ldr	r2, [pc, #404]	; (8007464 <HAL_ADC_IRQHandler+0x270>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d002      	beq.n	80072da <HAL_ADC_IRQHandler+0xe6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	e003      	b.n	80072e2 <HAL_ADC_IRQHandler+0xee>
 80072da:	4b63      	ldr	r3, [pc, #396]	; (8007468 <HAL_ADC_IRQHandler+0x274>)
 80072dc:	e001      	b.n	80072e2 <HAL_ADC_IRQHandler+0xee>
 80072de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d008      	beq.n	80072fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b05      	cmp	r3, #5
 80072f4:	d002      	beq.n	80072fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b09      	cmp	r3, #9
 80072fa:	d104      	bne.n	8007306 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	623b      	str	r3, [r7, #32]
 8007304:	e014      	b.n	8007330 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a53      	ldr	r2, [pc, #332]	; (8007458 <HAL_ADC_IRQHandler+0x264>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d009      	beq.n	8007324 <HAL_ADC_IRQHandler+0x130>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a53      	ldr	r2, [pc, #332]	; (8007464 <HAL_ADC_IRQHandler+0x270>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d002      	beq.n	8007320 <HAL_ADC_IRQHandler+0x12c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	e003      	b.n	8007328 <HAL_ADC_IRQHandler+0x134>
 8007320:	4b51      	ldr	r3, [pc, #324]	; (8007468 <HAL_ADC_IRQHandler+0x274>)
 8007322:	e001      	b.n	8007328 <HAL_ADC_IRQHandler+0x134>
 8007324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007328:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d135      	bne.n	80073a6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b08      	cmp	r3, #8
 8007346:	d12e      	bne.n	80073a6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fb96 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11a      	bne.n	800738e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 020c 	bic.w	r2, r2, #12
 8007366:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d112      	bne.n	80073a6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	f043 0201 	orr.w	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	65da      	str	r2, [r3, #92]	; 0x5c
 800738c:	e00b      	b.n	80073a6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007392:	f043 0210 	orr.w	r2, r3, #16
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739e:	f043 0201 	orr.w	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fd fffc 	bl	80053a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	220c      	movs	r2, #12
 80073b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <HAL_ADC_IRQHandler+0x1d4>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80b3 	beq.w	800753a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80ad 	beq.w	800753a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff f9a8 	bl	8006752 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007402:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff f963 	bl	80066d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800740e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a10      	ldr	r2, [pc, #64]	; (8007458 <HAL_ADC_IRQHandler+0x264>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d009      	beq.n	800742e <HAL_ADC_IRQHandler+0x23a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a11      	ldr	r2, [pc, #68]	; (8007464 <HAL_ADC_IRQHandler+0x270>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d002      	beq.n	800742a <HAL_ADC_IRQHandler+0x236>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	e003      	b.n	8007432 <HAL_ADC_IRQHandler+0x23e>
 800742a:	4b0f      	ldr	r3, [pc, #60]	; (8007468 <HAL_ADC_IRQHandler+0x274>)
 800742c:	e001      	b.n	8007432 <HAL_ADC_IRQHandler+0x23e>
 800742e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	4293      	cmp	r3, r2
 8007438:	d008      	beq.n	800744c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b06      	cmp	r3, #6
 8007444:	d002      	beq.n	800744c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b07      	cmp	r3, #7
 800744a:	d10f      	bne.n	800746c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	623b      	str	r3, [r7, #32]
 8007454:	e01f      	b.n	8007496 <HAL_ADC_IRQHandler+0x2a2>
 8007456:	bf00      	nop
 8007458:	50000100 	.word	0x50000100
 800745c:	50000300 	.word	0x50000300
 8007460:	50000700 	.word	0x50000700
 8007464:	50000500 	.word	0x50000500
 8007468:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a8b      	ldr	r2, [pc, #556]	; (80076a0 <HAL_ADC_IRQHandler+0x4ac>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_ADC_IRQHandler+0x296>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a8a      	ldr	r2, [pc, #552]	; (80076a4 <HAL_ADC_IRQHandler+0x4b0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d002      	beq.n	8007486 <HAL_ADC_IRQHandler+0x292>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	e003      	b.n	800748e <HAL_ADC_IRQHandler+0x29a>
 8007486:	4b88      	ldr	r3, [pc, #544]	; (80076a8 <HAL_ADC_IRQHandler+0x4b4>)
 8007488:	e001      	b.n	800748e <HAL_ADC_IRQHandler+0x29a>
 800748a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800748e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d047      	beq.n	800752c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <HAL_ADC_IRQHandler+0x2c2>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d03f      	beq.n	800752c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d13a      	bne.n	800752c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d133      	bne.n	800752c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d12e      	bne.n	800752c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fafa 	bl	8006acc <LL_ADC_INJ_IsConversionOngoing>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11a      	bne.n	8007514 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007502:	2b00      	cmp	r3, #0
 8007504:	d112      	bne.n	800752c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	f043 0201 	orr.w	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	65da      	str	r2, [r3, #92]	; 0x5c
 8007512:	e00b      	b.n	800752c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007518:	f043 0210 	orr.w	r2, r3, #16
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007524:	f043 0201 	orr.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f9dd 	bl	80088ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2260      	movs	r2, #96	; 0x60
 8007538:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007540:	2b00      	cmp	r3, #0
 8007542:	d011      	beq.n	8007568 <HAL_ADC_IRQHandler+0x374>
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fd ff58 	bl	8005410 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2280      	movs	r2, #128	; 0x80
 8007566:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d012      	beq.n	8007598 <HAL_ADC_IRQHandler+0x3a4>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00d      	beq.n	8007598 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7fd ff77 	bl	800547c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007596:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d012      	beq.n	80075c8 <HAL_ADC_IRQHandler+0x3d4>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 f9ab 	bl	8008914 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d043      	beq.n	800765a <HAL_ADC_IRQHandler+0x466>
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d03e      	beq.n	800765a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80075e4:	2301      	movs	r3, #1
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
 80075e8:	e021      	b.n	800762e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d015      	beq.n	800761c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075f8:	d004      	beq.n	8007604 <HAL_ADC_IRQHandler+0x410>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a28      	ldr	r2, [pc, #160]	; (80076a0 <HAL_ADC_IRQHandler+0x4ac>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d101      	bne.n	8007608 <HAL_ADC_IRQHandler+0x414>
 8007604:	4b29      	ldr	r3, [pc, #164]	; (80076ac <HAL_ADC_IRQHandler+0x4b8>)
 8007606:	e000      	b.n	800760a <HAL_ADC_IRQHandler+0x416>
 8007608:	4b29      	ldr	r3, [pc, #164]	; (80076b0 <HAL_ADC_IRQHandler+0x4bc>)
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff f965 	bl	80068da <LL_ADC_GetMultiDMATransfer>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00b      	beq.n	800762e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8007616:	2301      	movs	r3, #1
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
 800761a:	e008      	b.n	800762e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800762a:	2301      	movs	r3, #1
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b01      	cmp	r3, #1
 8007632:	d10e      	bne.n	8007652 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007638:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007644:	f043 0202 	orr.w	r2, r3, #2
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f831 	bl	80076b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2210      	movs	r2, #16
 8007658:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007660:	2b00      	cmp	r3, #0
 8007662:	d018      	beq.n	8007696 <HAL_ADC_IRQHandler+0x4a2>
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766a:	2b00      	cmp	r3, #0
 800766c:	d013      	beq.n	8007696 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007672:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767e:	f043 0208 	orr.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800768e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 f935 	bl	8008900 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007696:	bf00      	nop
 8007698:	3728      	adds	r7, #40	; 0x28
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	50000100 	.word	0x50000100
 80076a4:	50000500 	.word	0x50000500
 80076a8:	50000400 	.word	0x50000400
 80076ac:	50000300 	.word	0x50000300
 80076b0:	50000700 	.word	0x50000700

080076b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b0b6      	sub	sp, #216	; 0xd8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d102      	bne.n	80076ec <HAL_ADC_ConfigChannel+0x24>
 80076e6:	2302      	movs	r3, #2
 80076e8:	f000 bc13 	b.w	8007f12 <HAL_ADC_ConfigChannel+0x84a>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff f9c0 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	f040 83f3 	bne.w	8007eec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f7fe fff1 	bl	80066fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff f9ae 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 8007722:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff f9ce 	bl	8006acc <LL_ADC_INJ_IsConversionOngoing>
 8007730:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007734:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007738:	2b00      	cmp	r3, #0
 800773a:	f040 81d9 	bne.w	8007af0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800773e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 81d4 	bne.w	8007af0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007750:	d10f      	bne.n	8007772 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2200      	movs	r2, #0
 800775c:	4619      	mov	r1, r3
 800775e:	f7ff f80b 	bl	8006778 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe ff9f 	bl	80066ae <LL_ADC_SetSamplingTimeCommonConfig>
 8007770:	e00e      	b.n	8007790 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	461a      	mov	r2, r3
 8007780:	f7fe fffa 	bl	8006778 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe ff8f 	bl	80066ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	695a      	ldr	r2, [r3, #20]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d022      	beq.n	80077f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6919      	ldr	r1, [r3, #16]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077c2:	f7fe fee9 	bl	8006598 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6919      	ldr	r1, [r3, #16]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f7fe ff35 	bl	8006642 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	6919      	ldr	r1, [r3, #16]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	7f1b      	ldrb	r3, [r3, #28]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d102      	bne.n	80077ee <HAL_ADC_ConfigChannel+0x126>
 80077e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ec:	e000      	b.n	80077f0 <HAL_ADC_ConfigChannel+0x128>
 80077ee:	2300      	movs	r3, #0
 80077f0:	461a      	mov	r2, r3
 80077f2:	f7fe ff41 	bl	8006678 <LL_ADC_SetOffsetSaturation>
 80077f6:	e17b      	b.n	8007af0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe feee 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 8007804:	4603      	mov	r3, r0
 8007806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <HAL_ADC_ConfigChannel+0x15c>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe fee3 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 800781a:	4603      	mov	r3, r0
 800781c:	0e9b      	lsrs	r3, r3, #26
 800781e:	f003 021f 	and.w	r2, r3, #31
 8007822:	e01e      	b.n	8007862 <HAL_ADC_ConfigChannel+0x19a>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fed8 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 8007830:	4603      	mov	r3, r0
 8007832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007836:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800783a:	fa93 f3a3 	rbit	r3, r3
 800783e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800784a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007852:	2320      	movs	r3, #32
 8007854:	e004      	b.n	8007860 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007856:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800785a:	fab3 f383 	clz	r3, r3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <HAL_ADC_ConfigChannel+0x1b2>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	0e9b      	lsrs	r3, r3, #26
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	e018      	b.n	80078ac <HAL_ADC_ConfigChannel+0x1e4>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007882:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007886:	fa93 f3a3 	rbit	r3, r3
 800788a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800788e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800789e:	2320      	movs	r3, #32
 80078a0:	e004      	b.n	80078ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80078a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078a6:	fab3 f383 	clz	r3, r3
 80078aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d106      	bne.n	80078be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fea7 	bl	800660c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2101      	movs	r1, #1
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fe8b 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <HAL_ADC_ConfigChannel+0x222>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fe80 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 80078e0:	4603      	mov	r3, r0
 80078e2:	0e9b      	lsrs	r3, r3, #26
 80078e4:	f003 021f 	and.w	r2, r3, #31
 80078e8:	e01e      	b.n	8007928 <HAL_ADC_ConfigChannel+0x260>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2101      	movs	r1, #1
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fe75 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007900:	fa93 f3a3 	rbit	r3, r3
 8007904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800790c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007918:	2320      	movs	r3, #32
 800791a:	e004      	b.n	8007926 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800791c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007920:	fab3 f383 	clz	r3, r3
 8007924:	b2db      	uxtb	r3, r3
 8007926:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <HAL_ADC_ConfigChannel+0x278>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	0e9b      	lsrs	r3, r3, #26
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	e018      	b.n	8007972 <HAL_ADC_ConfigChannel+0x2aa>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800795c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007964:	2320      	movs	r3, #32
 8007966:	e004      	b.n	8007972 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800796c:	fab3 f383 	clz	r3, r3
 8007970:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007972:	429a      	cmp	r2, r3
 8007974:	d106      	bne.n	8007984 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2200      	movs	r2, #0
 800797c:	2101      	movs	r1, #1
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fe44 	bl	800660c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2102      	movs	r1, #2
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fe28 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 8007990:	4603      	mov	r3, r0
 8007992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <HAL_ADC_ConfigChannel+0x2e8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2102      	movs	r1, #2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe fe1d 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 80079a6:	4603      	mov	r3, r0
 80079a8:	0e9b      	lsrs	r3, r3, #26
 80079aa:	f003 021f 	and.w	r2, r3, #31
 80079ae:	e01e      	b.n	80079ee <HAL_ADC_ConfigChannel+0x326>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2102      	movs	r1, #2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fe12 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 80079bc:	4603      	mov	r3, r0
 80079be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079c6:	fa93 f3a3 	rbit	r3, r3
 80079ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80079ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80079d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80079de:	2320      	movs	r3, #32
 80079e0:	e004      	b.n	80079ec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80079e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079e6:	fab3 f383 	clz	r3, r3
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <HAL_ADC_ConfigChannel+0x33e>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	0e9b      	lsrs	r3, r3, #26
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	e016      	b.n	8007a34 <HAL_ADC_ConfigChannel+0x36c>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a12:	fa93 f3a3 	rbit	r3, r3
 8007a16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007a18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007a26:	2320      	movs	r3, #32
 8007a28:	e004      	b.n	8007a34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a2e:	fab3 f383 	clz	r3, r3
 8007a32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d106      	bne.n	8007a46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fde3 	bl	800660c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2103      	movs	r1, #3
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fdc7 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <HAL_ADC_ConfigChannel+0x3aa>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2103      	movs	r1, #3
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fdbc 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	0e9b      	lsrs	r3, r3, #26
 8007a6c:	f003 021f 	and.w	r2, r3, #31
 8007a70:	e017      	b.n	8007aa2 <HAL_ADC_ConfigChannel+0x3da>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2103      	movs	r1, #3
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fdb1 	bl	80065e0 <LL_ADC_GetOffsetChannel>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a84:	fa93 f3a3 	rbit	r3, r3
 8007a88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007a94:	2320      	movs	r3, #32
 8007a96:	e003      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a9a:	fab3 f383 	clz	r3, r3
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d105      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x3f2>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	0e9b      	lsrs	r3, r3, #26
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	e011      	b.n	8007ade <HAL_ADC_ConfigChannel+0x416>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac2:	fa93 f3a3 	rbit	r3, r3
 8007ac6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007ad2:	2320      	movs	r3, #32
 8007ad4:	e003      	b.n	8007ade <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad8:	fab3 f383 	clz	r3, r3
 8007adc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d106      	bne.n	8007af0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2103      	movs	r1, #3
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fd8e 	bl	800660c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe ff74 	bl	80069e2 <LL_ADC_IsEnabled>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 813d 	bne.w	8007d7c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f7fe fe5e 	bl	80067d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4aa2      	ldr	r2, [pc, #648]	; (8007da4 <HAL_ADC_ConfigChannel+0x6dc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	f040 812e 	bne.w	8007d7c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10b      	bne.n	8007b48 <HAL_ADC_ConfigChannel+0x480>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	0e9b      	lsrs	r3, r3, #26
 8007b36:	3301      	adds	r3, #1
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	bf94      	ite	ls
 8007b40:	2301      	movls	r3, #1
 8007b42:	2300      	movhi	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	e019      	b.n	8007b7c <HAL_ADC_ConfigChannel+0x4b4>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b50:	fa93 f3a3 	rbit	r3, r3
 8007b54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007b60:	2320      	movs	r3, #32
 8007b62:	e003      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b66:	fab3 f383 	clz	r3, r3
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2b09      	cmp	r3, #9
 8007b74:	bf94      	ite	ls
 8007b76:	2301      	movls	r3, #1
 8007b78:	2300      	movhi	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d079      	beq.n	8007c74 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d107      	bne.n	8007b9c <HAL_ADC_ConfigChannel+0x4d4>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	0e9b      	lsrs	r3, r3, #26
 8007b92:	3301      	adds	r3, #1
 8007b94:	069b      	lsls	r3, r3, #26
 8007b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b9a:	e015      	b.n	8007bc8 <HAL_ADC_ConfigChannel+0x500>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba4:	fa93 f3a3 	rbit	r3, r3
 8007ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	e003      	b.n	8007bc0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bba:	fab3 f383 	clz	r3, r3
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	069b      	lsls	r3, r3, #26
 8007bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <HAL_ADC_ConfigChannel+0x520>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	0e9b      	lsrs	r3, r3, #26
 8007bda:	3301      	adds	r3, #1
 8007bdc:	f003 031f 	and.w	r3, r3, #31
 8007be0:	2101      	movs	r1, #1
 8007be2:	fa01 f303 	lsl.w	r3, r1, r3
 8007be6:	e017      	b.n	8007c18 <HAL_ADC_ConfigChannel+0x550>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf0:	fa93 f3a3 	rbit	r3, r3
 8007bf4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007c00:	2320      	movs	r3, #32
 8007c02:	e003      	b.n	8007c0c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c06:	fab3 f383 	clz	r3, r3
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2101      	movs	r1, #1
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	ea42 0103 	orr.w	r1, r2, r3
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <HAL_ADC_ConfigChannel+0x576>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	0e9b      	lsrs	r3, r3, #26
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f003 021f 	and.w	r2, r3, #31
 8007c34:	4613      	mov	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	051b      	lsls	r3, r3, #20
 8007c3c:	e018      	b.n	8007c70 <HAL_ADC_ConfigChannel+0x5a8>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	fa93 f3a3 	rbit	r3, r3
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007c56:	2320      	movs	r3, #32
 8007c58:	e003      	b.n	8007c62 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	fab3 f383 	clz	r3, r3
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	3301      	adds	r3, #1
 8007c64:	f003 021f 	and.w	r2, r3, #31
 8007c68:	4613      	mov	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c70:	430b      	orrs	r3, r1
 8007c72:	e07e      	b.n	8007d72 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d107      	bne.n	8007c90 <HAL_ADC_ConfigChannel+0x5c8>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	0e9b      	lsrs	r3, r3, #26
 8007c86:	3301      	adds	r3, #1
 8007c88:	069b      	lsls	r3, r3, #26
 8007c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c8e:	e015      	b.n	8007cbc <HAL_ADC_ConfigChannel+0x5f4>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	fa93 f3a3 	rbit	r3, r3
 8007c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007ca8:	2320      	movs	r3, #32
 8007caa:	e003      	b.n	8007cb4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	fab3 f383 	clz	r3, r3
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	069b      	lsls	r3, r3, #26
 8007cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d109      	bne.n	8007cdc <HAL_ADC_ConfigChannel+0x614>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	0e9b      	lsrs	r3, r3, #26
 8007cce:	3301      	adds	r3, #1
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cda:	e017      	b.n	8007d0c <HAL_ADC_ConfigChannel+0x644>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	fa93 f3a3 	rbit	r3, r3
 8007ce8:	61fb      	str	r3, [r7, #28]
  return result;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	e003      	b.n	8007d00 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	fab3 f383 	clz	r3, r3
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	3301      	adds	r3, #1
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	2101      	movs	r1, #1
 8007d08:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0c:	ea42 0103 	orr.w	r1, r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <HAL_ADC_ConfigChannel+0x670>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	0e9b      	lsrs	r3, r3, #26
 8007d22:	3301      	adds	r3, #1
 8007d24:	f003 021f 	and.w	r2, r3, #31
 8007d28:	4613      	mov	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3b1e      	subs	r3, #30
 8007d30:	051b      	lsls	r3, r3, #20
 8007d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d36:	e01b      	b.n	8007d70 <HAL_ADC_ConfigChannel+0x6a8>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	fa93 f3a3 	rbit	r3, r3
 8007d44:	613b      	str	r3, [r7, #16]
  return result;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007d50:	2320      	movs	r3, #32
 8007d52:	e003      	b.n	8007d5c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	fab3 f383 	clz	r3, r3
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	f003 021f 	and.w	r2, r3, #31
 8007d62:	4613      	mov	r3, r2
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4413      	add	r3, r2
 8007d68:	3b1e      	subs	r3, #30
 8007d6a:	051b      	lsls	r3, r3, #20
 8007d6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d70:	430b      	orrs	r3, r1
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	6892      	ldr	r2, [r2, #8]
 8007d76:	4619      	mov	r1, r3
 8007d78:	f7fe fcfe 	bl	8006778 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <HAL_ADC_ConfigChannel+0x6e0>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80be 	beq.w	8007f06 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d92:	d004      	beq.n	8007d9e <HAL_ADC_ConfigChannel+0x6d6>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a04      	ldr	r2, [pc, #16]	; (8007dac <HAL_ADC_ConfigChannel+0x6e4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10a      	bne.n	8007db4 <HAL_ADC_ConfigChannel+0x6ec>
 8007d9e:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <HAL_ADC_ConfigChannel+0x6e8>)
 8007da0:	e009      	b.n	8007db6 <HAL_ADC_ConfigChannel+0x6ee>
 8007da2:	bf00      	nop
 8007da4:	407f0000 	.word	0x407f0000
 8007da8:	80080000 	.word	0x80080000
 8007dac:	50000100 	.word	0x50000100
 8007db0:	50000300 	.word	0x50000300
 8007db4:	4b59      	ldr	r3, [pc, #356]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fbe0 	bl	800657c <LL_ADC_GetCommonPathInternalCh>
 8007dbc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a56      	ldr	r2, [pc, #344]	; (8007f20 <HAL_ADC_ConfigChannel+0x858>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d004      	beq.n	8007dd4 <HAL_ADC_ConfigChannel+0x70c>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a55      	ldr	r2, [pc, #340]	; (8007f24 <HAL_ADC_ConfigChannel+0x85c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d13a      	bne.n	8007e4a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d134      	bne.n	8007e4a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de8:	d005      	beq.n	8007df6 <HAL_ADC_ConfigChannel+0x72e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a4e      	ldr	r2, [pc, #312]	; (8007f28 <HAL_ADC_ConfigChannel+0x860>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	f040 8085 	bne.w	8007f00 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dfe:	d004      	beq.n	8007e0a <HAL_ADC_ConfigChannel+0x742>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a49      	ldr	r2, [pc, #292]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d101      	bne.n	8007e0e <HAL_ADC_ConfigChannel+0x746>
 8007e0a:	4a49      	ldr	r2, [pc, #292]	; (8007f30 <HAL_ADC_ConfigChannel+0x868>)
 8007e0c:	e000      	b.n	8007e10 <HAL_ADC_ConfigChannel+0x748>
 8007e0e:	4a43      	ldr	r2, [pc, #268]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	f7fe fb9b 	bl	8006556 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e20:	4b44      	ldr	r3, [pc, #272]	; (8007f34 <HAL_ADC_ConfigChannel+0x86c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	099b      	lsrs	r3, r3, #6
 8007e26:	4a44      	ldr	r2, [pc, #272]	; (8007f38 <HAL_ADC_ConfigChannel+0x870>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	099b      	lsrs	r3, r3, #6
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	4613      	mov	r3, r2
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e3a:	e002      	b.n	8007e42 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f9      	bne.n	8007e3c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e48:	e05a      	b.n	8007f00 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a3b      	ldr	r2, [pc, #236]	; (8007f3c <HAL_ADC_ConfigChannel+0x874>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d125      	bne.n	8007ea0 <HAL_ADC_ConfigChannel+0x7d8>
 8007e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11f      	bne.n	8007ea0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a31      	ldr	r2, [pc, #196]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d104      	bne.n	8007e74 <HAL_ADC_ConfigChannel+0x7ac>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a34      	ldr	r2, [pc, #208]	; (8007f40 <HAL_ADC_ConfigChannel+0x878>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d047      	beq.n	8007f04 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e7c:	d004      	beq.n	8007e88 <HAL_ADC_ConfigChannel+0x7c0>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a2a      	ldr	r2, [pc, #168]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d101      	bne.n	8007e8c <HAL_ADC_ConfigChannel+0x7c4>
 8007e88:	4a29      	ldr	r2, [pc, #164]	; (8007f30 <HAL_ADC_ConfigChannel+0x868>)
 8007e8a:	e000      	b.n	8007e8e <HAL_ADC_ConfigChannel+0x7c6>
 8007e8c:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fe fb5c 	bl	8006556 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e9e:	e031      	b.n	8007f04 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a27      	ldr	r2, [pc, #156]	; (8007f44 <HAL_ADC_ConfigChannel+0x87c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d12d      	bne.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d127      	bne.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d022      	beq.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec8:	d004      	beq.n	8007ed4 <HAL_ADC_ConfigChannel+0x80c>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a17      	ldr	r2, [pc, #92]	; (8007f2c <HAL_ADC_ConfigChannel+0x864>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d101      	bne.n	8007ed8 <HAL_ADC_ConfigChannel+0x810>
 8007ed4:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <HAL_ADC_ConfigChannel+0x868>)
 8007ed6:	e000      	b.n	8007eda <HAL_ADC_ConfigChannel+0x812>
 8007ed8:	4a10      	ldr	r2, [pc, #64]	; (8007f1c <HAL_ADC_ConfigChannel+0x854>)
 8007eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7fe fb36 	bl	8006556 <LL_ADC_SetCommonPathInternalCh>
 8007eea:	e00c      	b.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef0:	f043 0220 	orr.w	r2, r3, #32
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007efe:	e002      	b.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007f04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007f0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	37d8      	adds	r7, #216	; 0xd8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	50000700 	.word	0x50000700
 8007f20:	c3210000 	.word	0xc3210000
 8007f24:	90c00010 	.word	0x90c00010
 8007f28:	50000600 	.word	0x50000600
 8007f2c:	50000100 	.word	0x50000100
 8007f30:	50000300 	.word	0x50000300
 8007f34:	20000008 	.word	0x20000008
 8007f38:	053e2d63 	.word	0x053e2d63
 8007f3c:	c7520000 	.word	0xc7520000
 8007f40:	50000500 	.word	0x50000500
 8007f44:	cb840000 	.word	0xcb840000

08007f48 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08e      	sub	sp, #56	; 0x38
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f60:	d003      	beq.n	8007f6a <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007f66:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_ADC_AnalogWDGConfig+0x30>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e1ea      	b.n	800834e <HAL_ADC_AnalogWDGConfig+0x406>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fd7a 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 8007f8a:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe fd9b 	bl	8006acc <LL_ADC_INJ_IsConversionOngoing>
 8007f96:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 8175 	bne.w	800828a <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f040 8171 	bne.w	800828a <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a90      	ldr	r2, [pc, #576]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	f040 808d 	bne.w	80080ce <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007fbc:	d034      	beq.n	8008028 <HAL_ADC_AnalogWDGConfig+0xe0>
 8007fbe:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007fc2:	d856      	bhi.n	8008072 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fc8:	d04b      	beq.n	8008062 <HAL_ADC_AnalogWDGConfig+0x11a>
 8007fca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fce:	d850      	bhi.n	8008072 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007fd0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007fd4:	d01b      	beq.n	800800e <HAL_ADC_AnalogWDGConfig+0xc6>
 8007fd6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007fda:	d84a      	bhi.n	8008072 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fe0:	d037      	beq.n	8008052 <HAL_ADC_AnalogWDGConfig+0x10a>
 8007fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fe6:	d844      	bhi.n	8008072 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007fe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fec:	d029      	beq.n	8008042 <HAL_ADC_AnalogWDGConfig+0xfa>
 8007fee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ff2:	d13e      	bne.n	8008072 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008000:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008004:	461a      	mov	r2, r3
 8008006:	497a      	ldr	r1, [pc, #488]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008008:	f7fe fc0a 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800800c:	e039      	b.n	8008082 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800801a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800801e:	461a      	mov	r2, r3
 8008020:	4973      	ldr	r1, [pc, #460]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008022:	f7fe fbfd 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8008026:	e02c      	b.n	8008082 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6818      	ldr	r0, [r3, #0]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008034:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8008038:	461a      	mov	r2, r3
 800803a:	496d      	ldr	r1, [pc, #436]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800803c:	f7fe fbf0 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8008040:	e01f      	b.n	8008082 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a6b      	ldr	r2, [pc, #428]	; (80081f4 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8008048:	4969      	ldr	r1, [pc, #420]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fbe8 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008050:	e017      	b.n	8008082 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a68      	ldr	r2, [pc, #416]	; (80081f8 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8008058:	4965      	ldr	r1, [pc, #404]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fbe0 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008060:	e00f      	b.n	8008082 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a65      	ldr	r2, [pc, #404]	; (80081fc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008068:	4961      	ldr	r1, [pc, #388]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fbd8 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008070:	e007      	b.n	8008082 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	495d      	ldr	r1, [pc, #372]	; (80081f0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800807a:	4618      	mov	r0, r3
 800807c:	f7fe fbd0 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008080:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	699a      	ldr	r2, [r3, #24]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fd22 	bl	8006af2 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	7b1b      	ldrb	r3, [r3, #12]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d105      	bne.n	80080c2 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fd42 	bl	8006b44 <LL_ADC_EnableIT_AWD1>
 80080c0:	e0e3      	b.n	800828a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fd6c 	bl	8006ba4 <LL_ADC_DisableIT_AWD1>
 80080cc:	e0dd      	b.n	800828a <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80080d6:	d01d      	beq.n	8008114 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80080d8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80080dc:	f200 8092 	bhi.w	8008204 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80080e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080e4:	d07b      	beq.n	80081de <HAL_ADC_AnalogWDGConfig+0x296>
 80080e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080ea:	f200 808b 	bhi.w	8008204 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80080ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80080f2:	d00f      	beq.n	8008114 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80080f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80080f8:	f200 8084 	bhi.w	8008204 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80080fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008100:	d06d      	beq.n	80081de <HAL_ADC_AnalogWDGConfig+0x296>
 8008102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008106:	d87d      	bhi.n	8008204 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800810c:	d067      	beq.n	80081de <HAL_ADC_AnalogWDGConfig+0x296>
 800810e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008112:	d177      	bne.n	8008204 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a39      	ldr	r2, [pc, #228]	; (8008200 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d12f      	bne.n	800817e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008126:	2b00      	cmp	r3, #0
 8008128:	d108      	bne.n	800813c <HAL_ADC_AnalogWDGConfig+0x1f4>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	0e9b      	lsrs	r3, r3, #26
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	2201      	movs	r2, #1
 8008136:	fa02 f303 	lsl.w	r3, r2, r3
 800813a:	e016      	b.n	800816a <HAL_ADC_AnalogWDGConfig+0x222>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	fa93 f3a3 	rbit	r3, r3
 8008148:	61bb      	str	r3, [r7, #24]
  return result;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8008154:	2320      	movs	r3, #32
 8008156:	e003      	b.n	8008160 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	fab3 f383 	clz	r3, r3
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	2201      	movs	r2, #1
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	430b      	orrs	r3, r1
 8008178:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800817c:	e04b      	b.n	8008216 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008186:	2b00      	cmp	r3, #0
 8008188:	d108      	bne.n	800819c <HAL_ADC_AnalogWDGConfig+0x254>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	0e9b      	lsrs	r3, r3, #26
 8008190:	f003 031f 	and.w	r3, r3, #31
 8008194:	2201      	movs	r2, #1
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	e016      	b.n	80081ca <HAL_ADC_AnalogWDGConfig+0x282>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	fa93 f3a3 	rbit	r3, r3
 80081a8:	60fb      	str	r3, [r7, #12]
  return result;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 80081b4:	2320      	movs	r3, #32
 80081b6:	e003      	b.n	80081c0 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	fab3 f383 	clz	r3, r3
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	2201      	movs	r2, #1
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	430b      	orrs	r3, r1
 80081d8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80081dc:	e01b      	b.n	8008216 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a05      	ldr	r2, [pc, #20]	; (80081fc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80081e8:	4619      	mov	r1, r3
 80081ea:	f7fe fb19 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80081ee:	e012      	b.n	8008216 <HAL_ADC_AnalogWDGConfig+0x2ce>
 80081f0:	7dc00000 	.word	0x7dc00000
 80081f4:	0087ffff 	.word	0x0087ffff
 80081f8:	0107ffff 	.word	0x0107ffff
 80081fc:	0187ffff 	.word	0x0187ffff
 8008200:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2200      	movs	r2, #0
 800820e:	4619      	mov	r1, r3
 8008210:	f7fe fb06 	bl	8006820 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008214:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a4f      	ldr	r2, [pc, #316]	; (8008358 <HAL_ADC_AnalogWDGConfig+0x410>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d11a      	bne.n	8008256 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008224:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fc6b 	bl	8006b0c <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	7b1b      	ldrb	r3, [r3, #12]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d105      	bne.n	800824a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe fc8e 	bl	8006b64 <LL_ADC_EnableIT_AWD2>
 8008248:	e01f      	b.n	800828a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fcb8 	bl	8006bc4 <LL_ADC_DisableIT_AWD2>
 8008254:	e019      	b.n	800828a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800825a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe fc5e 	bl	8006b28 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	7b1b      	ldrb	r3, [r3, #12]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d105      	bne.n	8008280 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fc83 	bl	8006b84 <LL_ADC_EnableIT_AWD3>
 800827e:	e004      	b.n	800828a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fcad 	bl	8006be4 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a33      	ldr	r2, [pc, #204]	; (800835c <HAL_ADC_AnalogWDGConfig+0x414>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d118      	bne.n	80082c6 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	08db      	lsrs	r3, r3, #3
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	695a      	ldr	r2, [r3, #20]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	08db      	lsrs	r3, r3, #3
 80082b8:	f003 0303 	and.w	r3, r3, #3
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	633b      	str	r3, [r7, #48]	; 0x30
 80082c4:	e035      	b.n	8008332 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f003 0318 	and.w	r3, r3, #24
 80082d0:	2b18      	cmp	r3, #24
 80082d2:	d00f      	beq.n	80082f4 <HAL_ADC_AnalogWDGConfig+0x3ac>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	691a      	ldr	r2, [r3, #16]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	08db      	lsrs	r3, r3, #3
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	f1c3 0302 	rsb	r3, r3, #2
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	f003 031e 	and.w	r3, r3, #30
 80082ee:	fa22 f303 	lsr.w	r3, r2, r3
 80082f2:	e002      	b.n	80082fa <HAL_ADC_AnalogWDGConfig+0x3b2>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f003 0318 	and.w	r3, r3, #24
 8008306:	2b18      	cmp	r3, #24
 8008308:	d00f      	beq.n	800832a <HAL_ADC_AnalogWDGConfig+0x3e2>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	695a      	ldr	r2, [r3, #20]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	f1c3 0302 	rsb	r3, r3, #2
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	f003 031e 	and.w	r3, r3, #30
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
 8008328:	e002      	b.n	8008330 <HAL_ADC_AnalogWDGConfig+0x3e8>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	6819      	ldr	r1, [r3, #0]
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800833e:	f7fe fa9c 	bl	800687a <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800834a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800834e:	4618      	mov	r0, r3
 8008350:	3738      	adds	r7, #56	; 0x38
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	0017ffff 	.word	0x0017ffff
 800835c:	7dc00000 	.word	0x7dc00000

08008360 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800836a:	2300      	movs	r3, #0
 800836c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fb81 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 800837c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fba2 	bl	8006acc <LL_ADC_INJ_IsConversionOngoing>
 8008388:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d103      	bne.n	8008398 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8098 	beq.w	80084c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d02a      	beq.n	80083fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7f5b      	ldrb	r3, [r3, #29]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d126      	bne.n	80083fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7f1b      	ldrb	r3, [r3, #28]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d122      	bne.n	80083fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80083b6:	2301      	movs	r3, #1
 80083b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80083ba:	e014      	b.n	80083e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	4a45      	ldr	r2, [pc, #276]	; (80084d4 <ADC_ConversionStop+0x174>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d90d      	bls.n	80083e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c8:	f043 0210 	orr.w	r2, r3, #16
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d4:	f043 0201 	orr.w	r2, r3, #1
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e074      	b.n	80084ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	3301      	adds	r3, #1
 80083e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b40      	cmp	r3, #64	; 0x40
 80083f2:	d1e3      	bne.n	80083bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2240      	movs	r2, #64	; 0x40
 80083fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d014      	beq.n	800842c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fb39 	bl	8006a7e <LL_ADC_REG_IsConversionOngoing>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00c      	beq.n	800842c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe faf6 	bl	8006a08 <LL_ADC_IsDisableOngoing>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fb15 	bl	8006a56 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d014      	beq.n	800845c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fb48 	bl	8006acc <LL_ADC_INJ_IsConversionOngoing>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00c      	beq.n	800845c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fade 	bl	8006a08 <LL_ADC_IsDisableOngoing>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d104      	bne.n	800845c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fb24 	bl	8006aa4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d005      	beq.n	800846e <ADC_ConversionStop+0x10e>
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b03      	cmp	r3, #3
 8008466:	d105      	bne.n	8008474 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008468:	230c      	movs	r3, #12
 800846a:	617b      	str	r3, [r7, #20]
        break;
 800846c:	e005      	b.n	800847a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800846e:	2308      	movs	r3, #8
 8008470:	617b      	str	r3, [r7, #20]
        break;
 8008472:	e002      	b.n	800847a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008474:	2304      	movs	r3, #4
 8008476:	617b      	str	r3, [r7, #20]
        break;
 8008478:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800847a:	f7fe f807 	bl	800648c <HAL_GetTick>
 800847e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008480:	e01b      	b.n	80084ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008482:	f7fe f803 	bl	800648c <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b05      	cmp	r3, #5
 800848e:	d914      	bls.n	80084ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	4013      	ands	r3, r2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a2:	f043 0210 	orr.w	r2, r3, #16
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ae:	f043 0201 	orr.w	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e007      	b.n	80084ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	4013      	ands	r3, r2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1dc      	bne.n	8008482 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3720      	adds	r7, #32
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	a33fffff 	.word	0xa33fffff

080084d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fa7c 	bl	80069e2 <LL_ADC_IsEnabled>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d14d      	bne.n	800858c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	4b28      	ldr	r3, [pc, #160]	; (8008598 <ADC_Enable+0xc0>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	f043 0210 	orr.w	r2, r3, #16
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850e:	f043 0201 	orr.w	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e039      	b.n	800858e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fa37 	bl	8006992 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008524:	f7fd ffb2 	bl	800648c <HAL_GetTick>
 8008528:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800852a:	e028      	b.n	800857e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe fa56 	bl	80069e2 <LL_ADC_IsEnabled>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe fa26 	bl	8006992 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008546:	f7fd ffa1 	bl	800648c <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b02      	cmp	r3, #2
 8008552:	d914      	bls.n	800857e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b01      	cmp	r3, #1
 8008560:	d00d      	beq.n	800857e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008566:	f043 0210 	orr.w	r2, r3, #16
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008572:	f043 0201 	orr.w	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e007      	b.n	800858e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b01      	cmp	r3, #1
 800858a:	d1cf      	bne.n	800852c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	8000003f 	.word	0x8000003f

0800859c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fe fa2d 	bl	8006a08 <LL_ADC_IsDisableOngoing>
 80085ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fa14 	bl	80069e2 <LL_ADC_IsEnabled>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d047      	beq.n	8008650 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d144      	bne.n	8008650 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f003 030d 	and.w	r3, r3, #13
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10c      	bne.n	80085ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fe f9ee 	bl	80069ba <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2203      	movs	r2, #3
 80085e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80085e6:	f7fd ff51 	bl	800648c <HAL_GetTick>
 80085ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80085ec:	e029      	b.n	8008642 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f2:	f043 0210 	orr.w	r2, r3, #16
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fe:	f043 0201 	orr.w	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e023      	b.n	8008652 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800860a:	f7fd ff3f 	bl	800648c <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	2b02      	cmp	r3, #2
 8008616:	d914      	bls.n	8008642 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00d      	beq.n	8008642 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862a:	f043 0210 	orr.w	r2, r3, #16
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008636:	f043 0201 	orr.w	r2, r3, #1
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e007      	b.n	8008652 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1dc      	bne.n	800860a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800866c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008670:	2b00      	cmp	r3, #0
 8008672:	d14b      	bne.n	800870c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008678:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0308 	and.w	r3, r3, #8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d021      	beq.n	80086d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe f81e 	bl	80066d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d032      	beq.n	8008704 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d12b      	bne.n	8008704 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11f      	bne.n	8008704 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c8:	f043 0201 	orr.w	r2, r3, #1
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80086d0:	e018      	b.n	8008704 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d111      	bne.n	8008704 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fc:	f043 0201 	orr.w	r2, r3, #1
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7fc fe4d 	bl	80053a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800870a:	e00e      	b.n	800872a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7fe ffcb 	bl	80076b4 <HAL_ADC_ErrorCallback>
}
 800871e:	e004      	b.n	800872a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7fc fe25 	bl	8005390 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008760:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876c:	f043 0204 	orr.w	r2, r3, #4
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7fe ff9d 	bl	80076b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <LL_ADC_IsEnabled>:
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b01      	cmp	r3, #1
 8008794:	d101      	bne.n	800879a <LL_ADC_IsEnabled+0x18>
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <LL_ADC_IsEnabled+0x1a>
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <LL_ADC_StartCalibration>:
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80087ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	609a      	str	r2, [r3, #8]
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <LL_ADC_IsCalibrationOnGoing>:
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ee:	d101      	bne.n	80087f4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <LL_ADC_REG_IsConversionOngoing>:
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b04      	cmp	r3, #4
 8008814:	d101      	bne.n	800881a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_ADCEx_Calibration_Start+0x1c>
 8008840:	2302      	movs	r3, #2
 8008842:	e04d      	b.n	80088e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fea5 	bl	800859c <ADC_Disable>
 8008852:	4603      	mov	r3, r0
 8008854:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d136      	bne.n	80088ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008860:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008864:	f023 0302 	bic.w	r3, r3, #2
 8008868:	f043 0202 	orr.w	r2, r3, #2
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff ff96 	bl	80087a8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800887c:	e014      	b.n	80088a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	3301      	adds	r3, #1
 8008882:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d90d      	bls.n	80088a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008890:	f023 0312 	bic.w	r3, r3, #18
 8008894:	f043 0210 	orr.w	r2, r3, #16
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e01b      	b.n	80088e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff ff94 	bl	80087da <LL_ADC_IsCalibrationOnGoing>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e2      	bne.n	800887e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088bc:	f023 0303 	bic.w	r3, r3, #3
 80088c0:	f043 0201 	orr.w	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80088c8:	e005      	b.n	80088d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ce:	f043 0210 	orr.w	r2, r3, #16
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	0004de01 	.word	0x0004de01

080088ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800893c:	b590      	push	{r4, r7, lr}
 800893e:	b0a1      	sub	sp, #132	; 0x84
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008956:	2302      	movs	r3, #2
 8008958:	e0e7      	b.n	8008b2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8008962:	2300      	movs	r3, #0
 8008964:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8008966:	2300      	movs	r3, #0
 8008968:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008972:	d102      	bne.n	800897a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008974:	4b6f      	ldr	r3, [pc, #444]	; (8008b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008976:	60bb      	str	r3, [r7, #8]
 8008978:	e009      	b.n	800898e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a6e      	ldr	r2, [pc, #440]	; (8008b38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d102      	bne.n	800898a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8008984:	4b6d      	ldr	r3, [pc, #436]	; (8008b3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008986:	60bb      	str	r3, [r7, #8]
 8008988:	e001      	b.n	800898e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800898a:	2300      	movs	r3, #0
 800898c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10b      	bne.n	80089ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008998:	f043 0220 	orr.w	r2, r3, #32
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0be      	b.n	8008b2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff ff27 	bl	8008802 <LL_ADC_REG_IsConversionOngoing>
 80089b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff ff21 	bl	8008802 <LL_ADC_REG_IsConversionOngoing>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 80a0 	bne.w	8008b08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80089c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f040 809c 	bne.w	8008b08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089d8:	d004      	beq.n	80089e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a55      	ldr	r2, [pc, #340]	; (8008b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d101      	bne.n	80089e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80089e4:	4b56      	ldr	r3, [pc, #344]	; (8008b40 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80089e6:	e000      	b.n	80089ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80089e8:	4b56      	ldr	r3, [pc, #344]	; (8008b44 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80089ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d04b      	beq.n	8008a8c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80089f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	6859      	ldr	r1, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a06:	035b      	lsls	r3, r3, #13
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a18:	d004      	beq.n	8008a24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a45      	ldr	r2, [pc, #276]	; (8008b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d10f      	bne.n	8008a44 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008a24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008a28:	f7ff feab 	bl	8008782 <LL_ADC_IsEnabled>
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	4841      	ldr	r0, [pc, #260]	; (8008b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008a30:	f7ff fea7 	bl	8008782 <LL_ADC_IsEnabled>
 8008a34:	4603      	mov	r3, r0
 8008a36:	4323      	orrs	r3, r4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2301      	moveq	r3, #1
 8008a3e:	2300      	movne	r3, #0
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	e012      	b.n	8008a6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008a44:	483c      	ldr	r0, [pc, #240]	; (8008b38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008a46:	f7ff fe9c 	bl	8008782 <LL_ADC_IsEnabled>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	483b      	ldr	r0, [pc, #236]	; (8008b3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008a4e:	f7ff fe98 	bl	8008782 <LL_ADC_IsEnabled>
 8008a52:	4603      	mov	r3, r0
 8008a54:	431c      	orrs	r4, r3
 8008a56:	483c      	ldr	r0, [pc, #240]	; (8008b48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008a58:	f7ff fe93 	bl	8008782 <LL_ADC_IsEnabled>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4323      	orrs	r3, r4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d056      	beq.n	8008b1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008a76:	f023 030f 	bic.w	r3, r3, #15
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	6811      	ldr	r1, [r2, #0]
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	6892      	ldr	r2, [r2, #8]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	431a      	orrs	r2, r3
 8008a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008a8a:	e047      	b.n	8008b1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aa0:	d004      	beq.n	8008aac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d10f      	bne.n	8008acc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008aac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008ab0:	f7ff fe67 	bl	8008782 <LL_ADC_IsEnabled>
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	481f      	ldr	r0, [pc, #124]	; (8008b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ab8:	f7ff fe63 	bl	8008782 <LL_ADC_IsEnabled>
 8008abc:	4603      	mov	r3, r0
 8008abe:	4323      	orrs	r3, r4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bf0c      	ite	eq
 8008ac4:	2301      	moveq	r3, #1
 8008ac6:	2300      	movne	r3, #0
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	e012      	b.n	8008af2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008acc:	481a      	ldr	r0, [pc, #104]	; (8008b38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008ace:	f7ff fe58 	bl	8008782 <LL_ADC_IsEnabled>
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4819      	ldr	r0, [pc, #100]	; (8008b3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008ad6:	f7ff fe54 	bl	8008782 <LL_ADC_IsEnabled>
 8008ada:	4603      	mov	r3, r0
 8008adc:	431c      	orrs	r4, r3
 8008ade:	481a      	ldr	r0, [pc, #104]	; (8008b48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008ae0:	f7ff fe4f 	bl	8008782 <LL_ADC_IsEnabled>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	4323      	orrs	r3, r4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bf0c      	ite	eq
 8008aec:	2301      	moveq	r3, #1
 8008aee:	2300      	movne	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d012      	beq.n	8008b1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008afe:	f023 030f 	bic.w	r3, r3, #15
 8008b02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008b04:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b06:	e009      	b.n	8008b1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0c:	f043 0220 	orr.w	r2, r3, #32
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008b1a:	e000      	b.n	8008b1e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008b26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3784      	adds	r7, #132	; 0x84
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd90      	pop	{r4, r7, pc}
 8008b32:	bf00      	nop
 8008b34:	50000100 	.word	0x50000100
 8008b38:	50000400 	.word	0x50000400
 8008b3c:	50000500 	.word	0x50000500
 8008b40:	50000300 	.word	0x50000300
 8008b44:	50000700 	.word	0x50000700
 8008b48:	50000600 	.word	0x50000600

08008b4c <__NVIC_SetPriorityGrouping>:
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <__NVIC_SetPriorityGrouping+0x44>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b68:	4013      	ands	r3, r2
 8008b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b7e:	4a04      	ldr	r2, [pc, #16]	; (8008b90 <__NVIC_SetPriorityGrouping+0x44>)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	60d3      	str	r3, [r2, #12]
}
 8008b84:	bf00      	nop
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	e000ed00 	.word	0xe000ed00

08008b94 <__NVIC_GetPriorityGrouping>:
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b98:	4b04      	ldr	r3, [pc, #16]	; (8008bac <__NVIC_GetPriorityGrouping+0x18>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	0a1b      	lsrs	r3, r3, #8
 8008b9e:	f003 0307 	and.w	r3, r3, #7
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	e000ed00 	.word	0xe000ed00

08008bb0 <__NVIC_EnableIRQ>:
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	db0b      	blt.n	8008bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	f003 021f 	and.w	r2, r3, #31
 8008bc8:	4907      	ldr	r1, [pc, #28]	; (8008be8 <__NVIC_EnableIRQ+0x38>)
 8008bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bce:	095b      	lsrs	r3, r3, #5
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8008bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	e000e100 	.word	0xe000e100

08008bec <__NVIC_SetPriority>:
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	db0a      	blt.n	8008c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	490c      	ldr	r1, [pc, #48]	; (8008c38 <__NVIC_SetPriority+0x4c>)
 8008c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c0a:	0112      	lsls	r2, r2, #4
 8008c0c:	b2d2      	uxtb	r2, r2
 8008c0e:	440b      	add	r3, r1
 8008c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c14:	e00a      	b.n	8008c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4908      	ldr	r1, [pc, #32]	; (8008c3c <__NVIC_SetPriority+0x50>)
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	f003 030f 	and.w	r3, r3, #15
 8008c22:	3b04      	subs	r3, #4
 8008c24:	0112      	lsls	r2, r2, #4
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	440b      	add	r3, r1
 8008c2a:	761a      	strb	r2, [r3, #24]
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	e000e100 	.word	0xe000e100
 8008c3c:	e000ed00 	.word	0xe000ed00

08008c40 <NVIC_EncodePriority>:
{
 8008c40:	b480      	push	{r7}
 8008c42:	b089      	sub	sp, #36	; 0x24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	f1c3 0307 	rsb	r3, r3, #7
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	bf28      	it	cs
 8008c5e:	2304      	movcs	r3, #4
 8008c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	3304      	adds	r3, #4
 8008c66:	2b06      	cmp	r3, #6
 8008c68:	d902      	bls.n	8008c70 <NVIC_EncodePriority+0x30>
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	3b03      	subs	r3, #3
 8008c6e:	e000      	b.n	8008c72 <NVIC_EncodePriority+0x32>
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c74:	f04f 32ff 	mov.w	r2, #4294967295
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	43da      	mvns	r2, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	401a      	ands	r2, r3
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c88:	f04f 31ff 	mov.w	r1, #4294967295
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c92:	43d9      	mvns	r1, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c98:	4313      	orrs	r3, r2
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3724      	adds	r7, #36	; 0x24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
	...

08008ca8 <SysTick_Config>:
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cb8:	d301      	bcc.n	8008cbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e00f      	b.n	8008cde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008cbe:	4a0a      	ldr	r2, [pc, #40]	; (8008ce8 <SysTick_Config+0x40>)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cc6:	210f      	movs	r1, #15
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ccc:	f7ff ff8e 	bl	8008bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <SysTick_Config+0x40>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cd6:	4b04      	ldr	r3, [pc, #16]	; (8008ce8 <SysTick_Config+0x40>)
 8008cd8:	2207      	movs	r2, #7
 8008cda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	e000e010 	.word	0xe000e010

08008cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff ff29 	bl	8008b4c <__NVIC_SetPriorityGrouping>
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	4603      	mov	r3, r0
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
 8008d0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d10:	f7ff ff40 	bl	8008b94 <__NVIC_GetPriorityGrouping>
 8008d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	6978      	ldr	r0, [r7, #20]
 8008d1c:	f7ff ff90 	bl	8008c40 <NVIC_EncodePriority>
 8008d20:	4602      	mov	r2, r0
 8008d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d26:	4611      	mov	r1, r2
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff ff5f 	bl	8008bec <__NVIC_SetPriority>
}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff ff33 	bl	8008bb0 <__NVIC_EnableIRQ>
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff ffa4 	bl	8008ca8 <SysTick_Config>
 8008d60:	4603      	mov	r3, r0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e014      	b.n	8008da6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	791b      	ldrb	r3, [r3, #4]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7f8 fba9 	bl	80014e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2202      	movs	r2, #2
 8008d96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	795b      	ldrb	r3, [r3, #5]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_DAC_Start+0x16>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e043      	b.n	8008e4c <HAL_DAC_Start+0x9e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6819      	ldr	r1, [r3, #0]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	f003 0310 	and.w	r3, r3, #16
 8008ddc:	2201      	movs	r2, #1
 8008dde:	409a      	lsls	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8008de8:	2001      	movs	r0, #1
 8008dea:	f7fd fb5b 	bl	80064a4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10f      	bne.n	8008e14 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d11d      	bne.n	8008e3e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0201 	orr.w	r2, r2, #1
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	e014      	b.n	8008e3e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2102      	movs	r1, #2
 8008e26:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d107      	bne.n	8008e3e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0202 	orr.w	r2, r2, #2
 8008e3c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	795b      	ldrb	r3, [r3, #5]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_DAC_Start_DMA+0x1e>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e0ae      	b.n	8008fd0 <HAL_DAC_Start_DMA+0x17c>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d12f      	bne.n	8008ee4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	4a53      	ldr	r2, [pc, #332]	; (8008fd8 <HAL_DAC_Start_DMA+0x184>)
 8008e8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	4a52      	ldr	r2, [pc, #328]	; (8008fdc <HAL_DAC_Start_DMA+0x188>)
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	4a51      	ldr	r2, [pc, #324]	; (8008fe0 <HAL_DAC_Start_DMA+0x18c>)
 8008e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eaa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d013      	beq.n	8008eda <HAL_DAC_Start_DMA+0x86>
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d845      	bhi.n	8008f44 <HAL_DAC_Start_DMA+0xf0>
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <HAL_DAC_Start_DMA+0x72>
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	d005      	beq.n	8008ed0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8008ec4:	e03e      	b.n	8008f44 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	613b      	str	r3, [r7, #16]
        break;
 8008ece:	e03c      	b.n	8008f4a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	330c      	adds	r3, #12
 8008ed6:	613b      	str	r3, [r7, #16]
        break;
 8008ed8:	e037      	b.n	8008f4a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3310      	adds	r3, #16
 8008ee0:	613b      	str	r3, [r7, #16]
        break;
 8008ee2:	e032      	b.n	8008f4a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	4a3e      	ldr	r2, [pc, #248]	; (8008fe4 <HAL_DAC_Start_DMA+0x190>)
 8008eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	4a3d      	ldr	r2, [pc, #244]	; (8008fe8 <HAL_DAC_Start_DMA+0x194>)
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	4a3c      	ldr	r2, [pc, #240]	; (8008fec <HAL_DAC_Start_DMA+0x198>)
 8008efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d013      	beq.n	8008f3a <HAL_DAC_Start_DMA+0xe6>
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d817      	bhi.n	8008f48 <HAL_DAC_Start_DMA+0xf4>
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_DAC_Start_DMA+0xd2>
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d005      	beq.n	8008f30 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8008f24:	e010      	b.n	8008f48 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3314      	adds	r3, #20
 8008f2c:	613b      	str	r3, [r7, #16]
        break;
 8008f2e:	e00c      	b.n	8008f4a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3318      	adds	r3, #24
 8008f36:	613b      	str	r3, [r7, #16]
        break;
 8008f38:	e007      	b.n	8008f4a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	331c      	adds	r3, #28
 8008f40:	613b      	str	r3, [r7, #16]
        break;
 8008f42:	e002      	b.n	8008f4a <HAL_DAC_Start_DMA+0xf6>
        break;
 8008f44:	bf00      	nop
 8008f46:	e000      	b.n	8008f4a <HAL_DAC_Start_DMA+0xf6>
        break;
 8008f48:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d111      	bne.n	8008f74 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6898      	ldr	r0, [r3, #8]
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	f000 fb61 	bl	8009630 <HAL_DMA_Start_IT>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]
 8008f72:	e010      	b.n	8008f96 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008f82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68d8      	ldr	r0, [r3, #12]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	f000 fb4f 	bl	8009630 <HAL_DMA_Start_IT>
 8008f92:	4603      	mov	r3, r0
 8008f94:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10f      	bne.n	8008fc2 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6819      	ldr	r1, [r3, #0]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2201      	movs	r2, #1
 8008fb0:	409a      	lsls	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8008fba:	2001      	movs	r0, #1
 8008fbc:	f7fd fa72 	bl	80064a4 <HAL_Delay>
 8008fc0:	e005      	b.n	8008fce <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f043 0204 	orr.w	r2, r3, #4
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	080093cd 	.word	0x080093cd
 8008fdc:	080093ef 	.word	0x080093ef
 8008fe0:	0800940b 	.word	0x0800940b
 8008fe4:	08009475 	.word	0x08009475
 8008fe8:	08009497 	.word	0x08009497
 8008fec:	080094b3 	.word	0x080094b3

08008ff0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4413      	add	r3, r2
 800901a:	3308      	adds	r3, #8
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	e004      	b.n	800902a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4413      	add	r3, r2
 8009026:	3314      	adds	r3, #20
 8009028:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	461a      	mov	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	795b      	ldrb	r3, [r3, #5]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_DAC_ConfigChannel+0x18>
 8009090:	2302      	movs	r3, #2
 8009092:	e192      	b.n	80093ba <HAL_DAC_ConfigChannel+0x33e>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2202      	movs	r2, #2
 800909e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d174      	bne.n	8009192 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80090a8:	f7fd f9f0 	bl	800648c <HAL_GetTick>
 80090ac:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d134      	bne.n	800911e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090b4:	e011      	b.n	80090da <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80090b6:	f7fd f9e9 	bl	800648c <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d90a      	bls.n	80090da <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f043 0208 	orr.w	r2, r3, #8
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2203      	movs	r2, #3
 80090d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e16f      	b.n	80093ba <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e6      	bne.n	80090b6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80090e8:	2001      	movs	r0, #1
 80090ea:	f7fd f9db 	bl	80064a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090f6:	641a      	str	r2, [r3, #64]	; 0x40
 80090f8:	e01e      	b.n	8009138 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80090fa:	f7fd f9c7 	bl	800648c <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d90a      	bls.n	800911e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f043 0208 	orr.w	r2, r3, #8
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2203      	movs	r2, #3
 8009118:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e14d      	b.n	80093ba <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	2b00      	cmp	r3, #0
 8009126:	dbe8      	blt.n	80090fa <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8009128:	2001      	movs	r0, #1
 800912a:	f7fd f9bb 	bl	80064a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009136:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009148:	fa01 f303 	lsl.w	r3, r1, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	ea02 0103 	and.w	r1, r2, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	409a      	lsls	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f003 0310 	and.w	r3, r3, #16
 8009172:	21ff      	movs	r1, #255	; 0xff
 8009174:	fa01 f303 	lsl.w	r3, r1, r3
 8009178:	43db      	mvns	r3, r3
 800917a:	ea02 0103 	and.w	r1, r2, r3
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f003 0310 	and.w	r3, r3, #16
 8009188:	409a      	lsls	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d11d      	bne.n	80091d6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	221f      	movs	r2, #31
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	43db      	mvns	r3, r3
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	4013      	ands	r3, r2
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	69ba      	ldr	r2, [r7, #24]
 80091c4:	fa02 f303 	lsl.w	r3, r2, r3
 80091c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ca:	4313      	orrs	r3, r2
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2207      	movs	r2, #7
 80091e6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ea:	43db      	mvns	r3, r3
 80091ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ee:	4013      	ands	r3, r2
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d102      	bne.n	8009200 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	623b      	str	r3, [r7, #32]
 80091fe:	e00f      	b.n	8009220 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d102      	bne.n	800920e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009208:	2301      	movs	r3, #1
 800920a:	623b      	str	r3, [r7, #32]
 800920c:	e008      	b.n	8009220 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009216:	2301      	movs	r3, #1
 8009218:	623b      	str	r3, [r7, #32]
 800921a:	e001      	b.n	8009220 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800921c:	2300      	movs	r3, #0
 800921e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	4313      	orrs	r3, r2
 800922a:	6a3a      	ldr	r2, [r7, #32]
 800922c:	4313      	orrs	r3, r2
 800922e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f003 0310 	and.w	r3, r3, #16
 8009236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800923a:	fa02 f303 	lsl.w	r3, r2, r3
 800923e:	43db      	mvns	r3, r3
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	4013      	ands	r3, r2
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d102      	bne.n	8009254 <HAL_DAC_ConfigChannel+0x1d8>
 800924e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009252:	e000      	b.n	8009256 <HAL_DAC_ConfigChannel+0x1da>
 8009254:	2300      	movs	r3, #0
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	4313      	orrs	r3, r2
 800925a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f003 0310 	and.w	r3, r3, #16
 8009262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009266:	fa02 f303 	lsl.w	r3, r2, r3
 800926a:	43db      	mvns	r3, r3
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	4013      	ands	r3, r2
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	795b      	ldrb	r3, [r3, #5]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d102      	bne.n	8009280 <HAL_DAC_ConfigChannel+0x204>
 800927a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800927e:	e000      	b.n	8009282 <HAL_DAC_ConfigChannel+0x206>
 8009280:	2300      	movs	r3, #0
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	4313      	orrs	r3, r2
 8009286:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d114      	bne.n	80092c2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009298:	f001 ff34 	bl	800b104 <HAL_RCC_GetHCLKFreq>
 800929c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	4a48      	ldr	r2, [pc, #288]	; (80093c4 <HAL_DAC_ConfigChannel+0x348>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d904      	bls.n	80092b0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
 80092ae:	e00f      	b.n	80092d0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	4a45      	ldr	r2, [pc, #276]	; (80093c8 <HAL_DAC_ConfigChannel+0x34c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d90a      	bls.n	80092ce <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
 80092c0:	e006      	b.n	80092d0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c8:	4313      	orrs	r3, r2
 80092ca:	627b      	str	r3, [r7, #36]	; 0x24
 80092cc:	e000      	b.n	80092d0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80092ce:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f003 0310 	and.w	r3, r3, #16
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	fa02 f303 	lsl.w	r3, r2, r3
 80092dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092de:	4313      	orrs	r3, r2
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6819      	ldr	r1, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80092fa:	fa02 f303 	lsl.w	r3, r2, r3
 80092fe:	43da      	mvns	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	400a      	ands	r2, r1
 8009306:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f003 0310 	and.w	r3, r3, #16
 8009316:	f640 72fe 	movw	r2, #4094	; 0xffe
 800931a:	fa02 f303 	lsl.w	r3, r2, r3
 800931e:	43db      	mvns	r3, r3
 8009320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009322:	4013      	ands	r3, r2
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f003 0310 	and.w	r3, r3, #16
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	fa02 f303 	lsl.w	r3, r2, r3
 8009338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933a:	4313      	orrs	r3, r2
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009344:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6819      	ldr	r1, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f003 0310 	and.w	r3, r3, #16
 8009352:	22c0      	movs	r2, #192	; 0xc0
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	43da      	mvns	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	400a      	ands	r2, r1
 8009360:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	089b      	lsrs	r3, r3, #2
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	089b      	lsrs	r3, r3, #2
 8009374:	021b      	lsls	r3, r3, #8
 8009376:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	4313      	orrs	r3, r2
 800937e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f003 0310 	and.w	r3, r3, #16
 800938c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009390:	fa01 f303 	lsl.w	r3, r1, r3
 8009394:	43db      	mvns	r3, r3
 8009396:	ea02 0103 	and.w	r1, r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f003 0310 	and.w	r3, r3, #16
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	409a      	lsls	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	430a      	orrs	r2, r1
 80093aa:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3728      	adds	r7, #40	; 0x28
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	09896800 	.word	0x09896800
 80093c8:	04c4b400 	.word	0x04c4b400

080093cc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7ff fe30 	bl	8009040 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	711a      	strb	r2, [r3, #4]
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fe29 	bl	8009054 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009402:	bf00      	nop
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009416:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f043 0204 	orr.w	r2, r3, #4
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f7ff fe1f 	bl	8009068 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	711a      	strb	r2, [r3, #4]
}
 8009430:	bf00      	nop
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f7ff ffd8 	bl	8009438 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2201      	movs	r2, #1
 800948c:	711a      	strb	r2, [r3, #4]
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7ff ffd1 	bl	800944c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80094aa:	bf00      	nop
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094be:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f043 0204 	orr.w	r2, r3, #4
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff ffc7 	bl	8009460 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	711a      	strb	r2, [r3, #4]
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e08d      	b.n	800960e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b47      	ldr	r3, [pc, #284]	; (8009618 <HAL_DMA_Init+0x138>)
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d80f      	bhi.n	800951e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	4b45      	ldr	r3, [pc, #276]	; (800961c <HAL_DMA_Init+0x13c>)
 8009506:	4413      	add	r3, r2
 8009508:	4a45      	ldr	r2, [pc, #276]	; (8009620 <HAL_DMA_Init+0x140>)
 800950a:	fba2 2303 	umull	r2, r3, r2, r3
 800950e:	091b      	lsrs	r3, r3, #4
 8009510:	009a      	lsls	r2, r3, #2
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a42      	ldr	r2, [pc, #264]	; (8009624 <HAL_DMA_Init+0x144>)
 800951a:	641a      	str	r2, [r3, #64]	; 0x40
 800951c:	e00e      	b.n	800953c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	4b40      	ldr	r3, [pc, #256]	; (8009628 <HAL_DMA_Init+0x148>)
 8009526:	4413      	add	r3, r2
 8009528:	4a3d      	ldr	r2, [pc, #244]	; (8009620 <HAL_DMA_Init+0x140>)
 800952a:	fba2 2303 	umull	r2, r3, r2, r3
 800952e:	091b      	lsrs	r3, r3, #4
 8009530:	009a      	lsls	r2, r3, #2
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a3c      	ldr	r2, [pc, #240]	; (800962c <HAL_DMA_Init+0x14c>)
 800953a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800956c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fa76 	bl	8009a80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800959c:	d102      	bne.n	80095a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ac:	b2d2      	uxtb	r2, r2
 80095ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80095b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d010      	beq.n	80095e4 <HAL_DMA_Init+0x104>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d80c      	bhi.n	80095e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fa96 	bl	8009afc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80095e0:	605a      	str	r2, [r3, #4]
 80095e2:	e008      	b.n	80095f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	40020407 	.word	0x40020407
 800961c:	bffdfff8 	.word	0xbffdfff8
 8009620:	cccccccd 	.word	0xcccccccd
 8009624:	40020000 	.word	0x40020000
 8009628:	bffdfbf8 	.word	0xbffdfbf8
 800962c:	40020400 	.word	0x40020400

08009630 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009648:	2b01      	cmp	r3, #1
 800964a:	d101      	bne.n	8009650 <HAL_DMA_Start_IT+0x20>
 800964c:	2302      	movs	r3, #2
 800964e:	e066      	b.n	800971e <HAL_DMA_Start_IT+0xee>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b01      	cmp	r3, #1
 8009662:	d155      	bne.n	8009710 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0201 	bic.w	r2, r2, #1
 8009680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 f9bb 	bl	8009a04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	2b00      	cmp	r3, #0
 8009694:	d008      	beq.n	80096a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f042 020e 	orr.w	r2, r2, #14
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	e00f      	b.n	80096c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0204 	bic.w	r2, r2, #4
 80096b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 020a 	orr.w	r2, r2, #10
 80096c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d007      	beq.n	80096e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d007      	beq.n	80096fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0201 	orr.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e005      	b.n	800971c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009718:	2302      	movs	r3, #2
 800971a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d005      	beq.n	800974a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2204      	movs	r2, #4
 8009742:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]
 8009748:	e037      	b.n	80097ba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 020e 	bic.w	r2, r2, #14
 8009758:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009768:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977e:	f003 021f 	and.w	r2, r3, #31
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	2101      	movs	r1, #1
 8009788:	fa01 f202 	lsl.w	r2, r1, r2
 800978c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009796:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00c      	beq.n	80097ba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097ae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80097b8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d00d      	beq.n	800980c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2204      	movs	r2, #4
 80097f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]
 800980a:	e047      	b.n	800989c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 020e 	bic.w	r2, r2, #14
 800981a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0201 	bic.w	r2, r2, #1
 800982a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800983a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009840:	f003 021f 	and.w	r2, r3, #31
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009848:	2101      	movs	r1, #1
 800984a:	fa01 f202 	lsl.w	r2, r1, r2
 800984e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009858:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00c      	beq.n	800987c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009870:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800987a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	4798      	blx	r3
    }
  }
  return status;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c2:	f003 031f 	and.w	r3, r3, #31
 80098c6:	2204      	movs	r2, #4
 80098c8:	409a      	lsls	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4013      	ands	r3, r2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d026      	beq.n	8009920 <HAL_DMA_IRQHandler+0x7a>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d021      	beq.n	8009920 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d107      	bne.n	80098fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 0204 	bic.w	r2, r2, #4
 80098f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	f003 021f 	and.w	r2, r3, #31
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	2104      	movs	r1, #4
 8009908:	fa01 f202 	lsl.w	r2, r1, r2
 800990c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	2b00      	cmp	r3, #0
 8009914:	d071      	beq.n	80099fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800991e:	e06c      	b.n	80099fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009924:	f003 031f 	and.w	r3, r3, #31
 8009928:	2202      	movs	r2, #2
 800992a:	409a      	lsls	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4013      	ands	r3, r2
 8009930:	2b00      	cmp	r3, #0
 8009932:	d02e      	beq.n	8009992 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d029      	beq.n	8009992 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0320 	and.w	r3, r3, #32
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10b      	bne.n	8009964 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f022 020a 	bic.w	r2, r2, #10
 800995a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009968:	f003 021f 	and.w	r2, r3, #31
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009970:	2102      	movs	r1, #2
 8009972:	fa01 f202 	lsl.w	r2, r1, r2
 8009976:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	2b00      	cmp	r3, #0
 8009986:	d038      	beq.n	80099fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009990:	e033      	b.n	80099fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009996:	f003 031f 	and.w	r3, r3, #31
 800999a:	2208      	movs	r2, #8
 800999c:	409a      	lsls	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4013      	ands	r3, r2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d02a      	beq.n	80099fc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d025      	beq.n	80099fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 020e 	bic.w	r2, r2, #14
 80099be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c4:	f003 021f 	and.w	r2, r3, #31
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099cc:	2101      	movs	r1, #1
 80099ce:	fa01 f202 	lsl.w	r2, r1, r2
 80099d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80099fa:	bf00      	nop
 80099fc:	bf00      	nop
}
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009a2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a32:	f003 021f 	and.w	r2, r3, #31
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8009a40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	d108      	bne.n	8009a64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009a62:	e007      	b.n	8009a74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	60da      	str	r2, [r3, #12]
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d802      	bhi.n	8009a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009a94:	4b15      	ldr	r3, [pc, #84]	; (8009aec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e001      	b.n	8009a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009a9a:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009a9c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	3b08      	subs	r3, #8
 8009aaa:	4a12      	ldr	r2, [pc, #72]	; (8009af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009aac:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab0:	091b      	lsrs	r3, r3, #4
 8009ab2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab8:	089b      	lsrs	r3, r3, #2
 8009aba:	009a      	lsls	r2, r3, #2
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	4413      	add	r3, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a0b      	ldr	r2, [pc, #44]	; (8009af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009aca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	409a      	lsls	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009ada:	bf00      	nop
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	40020407 	.word	0x40020407
 8009aec:	40020800 	.word	0x40020800
 8009af0:	40020820 	.word	0x40020820
 8009af4:	cccccccd 	.word	0xcccccccd
 8009af8:	40020880 	.word	0x40020880

08009afc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	461a      	mov	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a08      	ldr	r2, [pc, #32]	; (8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009b1e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	f003 031f 	and.w	r3, r3, #31
 8009b28:	2201      	movs	r2, #1
 8009b2a:	409a      	lsls	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009b30:	bf00      	nop
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	1000823f 	.word	0x1000823f
 8009b40:	40020940 	.word	0x40020940

08009b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009b52:	e15a      	b.n	8009e0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	2101      	movs	r1, #1
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b60:	4013      	ands	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 814c 	beq.w	8009e04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f003 0303 	and.w	r3, r3, #3
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d005      	beq.n	8009b84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d130      	bne.n	8009be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	2203      	movs	r2, #3
 8009b90:	fa02 f303 	lsl.w	r3, r2, r3
 8009b94:	43db      	mvns	r3, r3
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4013      	ands	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	68da      	ldr	r2, [r3, #12]
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009bba:	2201      	movs	r2, #1
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc2:	43db      	mvns	r3, r3
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	091b      	lsrs	r3, r3, #4
 8009bd0:	f003 0201 	and.w	r2, r3, #1
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d017      	beq.n	8009c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	005b      	lsls	r3, r3, #1
 8009bfc:	2203      	movs	r2, #3
 8009bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009c02:	43db      	mvns	r3, r3
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4013      	ands	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	689a      	ldr	r2, [r3, #8]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	fa02 f303 	lsl.w	r3, r2, r3
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d123      	bne.n	8009c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	08da      	lsrs	r2, r3, #3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3208      	adds	r2, #8
 8009c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	220f      	movs	r2, #15
 8009c46:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4a:	43db      	mvns	r3, r3
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4013      	ands	r3, r2
 8009c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	691a      	ldr	r2, [r3, #16]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f003 0307 	and.w	r3, r3, #7
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	08da      	lsrs	r2, r3, #3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3208      	adds	r2, #8
 8009c70:	6939      	ldr	r1, [r7, #16]
 8009c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	2203      	movs	r2, #3
 8009c82:	fa02 f303 	lsl.w	r3, r2, r3
 8009c86:	43db      	mvns	r3, r3
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f003 0203 	and.w	r2, r3, #3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 80a6 	beq.w	8009e04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cb8:	4b5b      	ldr	r3, [pc, #364]	; (8009e28 <HAL_GPIO_Init+0x2e4>)
 8009cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cbc:	4a5a      	ldr	r2, [pc, #360]	; (8009e28 <HAL_GPIO_Init+0x2e4>)
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8009cc4:	4b58      	ldr	r3, [pc, #352]	; (8009e28 <HAL_GPIO_Init+0x2e4>)
 8009cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	60bb      	str	r3, [r7, #8]
 8009cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009cd0:	4a56      	ldr	r2, [pc, #344]	; (8009e2c <HAL_GPIO_Init+0x2e8>)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	089b      	lsrs	r3, r3, #2
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	220f      	movs	r2, #15
 8009ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cec:	43db      	mvns	r3, r3
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009cfa:	d01f      	beq.n	8009d3c <HAL_GPIO_Init+0x1f8>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a4c      	ldr	r2, [pc, #304]	; (8009e30 <HAL_GPIO_Init+0x2ec>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d019      	beq.n	8009d38 <HAL_GPIO_Init+0x1f4>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a4b      	ldr	r2, [pc, #300]	; (8009e34 <HAL_GPIO_Init+0x2f0>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d013      	beq.n	8009d34 <HAL_GPIO_Init+0x1f0>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a4a      	ldr	r2, [pc, #296]	; (8009e38 <HAL_GPIO_Init+0x2f4>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00d      	beq.n	8009d30 <HAL_GPIO_Init+0x1ec>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a49      	ldr	r2, [pc, #292]	; (8009e3c <HAL_GPIO_Init+0x2f8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d007      	beq.n	8009d2c <HAL_GPIO_Init+0x1e8>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a48      	ldr	r2, [pc, #288]	; (8009e40 <HAL_GPIO_Init+0x2fc>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d101      	bne.n	8009d28 <HAL_GPIO_Init+0x1e4>
 8009d24:	2305      	movs	r3, #5
 8009d26:	e00a      	b.n	8009d3e <HAL_GPIO_Init+0x1fa>
 8009d28:	2306      	movs	r3, #6
 8009d2a:	e008      	b.n	8009d3e <HAL_GPIO_Init+0x1fa>
 8009d2c:	2304      	movs	r3, #4
 8009d2e:	e006      	b.n	8009d3e <HAL_GPIO_Init+0x1fa>
 8009d30:	2303      	movs	r3, #3
 8009d32:	e004      	b.n	8009d3e <HAL_GPIO_Init+0x1fa>
 8009d34:	2302      	movs	r3, #2
 8009d36:	e002      	b.n	8009d3e <HAL_GPIO_Init+0x1fa>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e000      	b.n	8009d3e <HAL_GPIO_Init+0x1fa>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	f002 0203 	and.w	r2, r2, #3
 8009d44:	0092      	lsls	r2, r2, #2
 8009d46:	4093      	lsls	r3, r2
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d4e:	4937      	ldr	r1, [pc, #220]	; (8009e2c <HAL_GPIO_Init+0x2e8>)
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	089b      	lsrs	r3, r3, #2
 8009d54:	3302      	adds	r3, #2
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d5c:	4b39      	ldr	r3, [pc, #228]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	43db      	mvns	r3, r3
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009d80:	4a30      	ldr	r2, [pc, #192]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009d86:	4b2f      	ldr	r3, [pc, #188]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	43db      	mvns	r3, r3
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4013      	ands	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009daa:	4a26      	ldr	r2, [pc, #152]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009db0:	4b24      	ldr	r3, [pc, #144]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	43db      	mvns	r3, r3
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009dd4:	4a1b      	ldr	r2, [pc, #108]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009dda:	4b1a      	ldr	r3, [pc, #104]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	43db      	mvns	r3, r3
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4013      	ands	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009dfe:	4a11      	ldr	r2, [pc, #68]	; (8009e44 <HAL_GPIO_Init+0x300>)
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	3301      	adds	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	fa22 f303 	lsr.w	r3, r2, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f47f ae9d 	bne.w	8009b54 <HAL_GPIO_Init+0x10>
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	40021000 	.word	0x40021000
 8009e2c:	40010000 	.word	0x40010000
 8009e30:	48000400 	.word	0x48000400
 8009e34:	48000800 	.word	0x48000800
 8009e38:	48000c00 	.word	0x48000c00
 8009e3c:	48001000 	.word	0x48001000
 8009e40:	48001400 	.word	0x48001400
 8009e44:	40010400 	.word	0x40010400

08009e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	807b      	strh	r3, [r7, #2]
 8009e54:	4613      	mov	r3, r2
 8009e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e58:	787b      	ldrb	r3, [r7, #1]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009e5e:	887a      	ldrh	r2, [r7, #2]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009e64:	e002      	b.n	8009e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009e66:	887a      	ldrh	r2, [r7, #2]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e0bb      	b.n	800a006 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d101      	bne.n	8009e9e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e0b3      	b.n	800a006 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d101      	bne.n	8009eae <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e0ab      	b.n	800a006 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009eae:	4b58      	ldr	r3, [pc, #352]	; (800a010 <HAL_OPAMP_Init+0x198>)
 8009eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eb2:	4a57      	ldr	r2, [pc, #348]	; (800a010 <HAL_OPAMP_Init+0x198>)
 8009eb4:	f043 0301 	orr.w	r3, r3, #1
 8009eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8009eba:	4b55      	ldr	r3, [pc, #340]	; (800a010 <HAL_OPAMP_Init+0x198>)
 8009ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	60bb      	str	r3, [r7, #8]
 8009ec4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7fa fec4 	bl	8004c68 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	2b40      	cmp	r3, #64	; 0x40
 8009ee6:	d003      	beq.n	8009ef0 <HAL_OPAMP_Init+0x78>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	2b60      	cmp	r3, #96	; 0x60
 8009eee:	d133      	bne.n	8009f58 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f023 0110 	bic.w	r1, r3, #16
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	4b41      	ldr	r3, [pc, #260]	; (800a014 <HAL_OPAMP_Init+0x19c>)
 8009f0e:	4013      	ands	r3, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6851      	ldr	r1, [r2, #4]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6892      	ldr	r2, [r2, #8]
 8009f18:	4311      	orrs	r1, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6912      	ldr	r2, [r2, #16]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	7d09      	ldrb	r1, [r1, #20]
 8009f24:	2901      	cmp	r1, #1
 8009f26:	d102      	bne.n	8009f2e <HAL_OPAMP_Init+0xb6>
 8009f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f2c:	e000      	b.n	8009f30 <HAL_OPAMP_Init+0xb8>
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4311      	orrs	r1, r2
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f36:	4311      	orrs	r1, r2
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009f3c:	4311      	orrs	r1, r2
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f42:	04d2      	lsls	r2, r2, #19
 8009f44:	4311      	orrs	r1, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f4a:	0612      	lsls	r2, r2, #24
 8009f4c:	4311      	orrs	r1, r2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6812      	ldr	r2, [r2, #0]
 8009f52:	430b      	orrs	r3, r1
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	e035      	b.n	8009fc4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f023 0110 	bic.w	r1, r3, #16
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	4b27      	ldr	r3, [pc, #156]	; (800a014 <HAL_OPAMP_Init+0x19c>)
 8009f76:	4013      	ands	r3, r2
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6851      	ldr	r1, [r2, #4]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	6892      	ldr	r2, [r2, #8]
 8009f80:	4311      	orrs	r1, r2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	68d2      	ldr	r2, [r2, #12]
 8009f86:	4311      	orrs	r1, r2
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6912      	ldr	r2, [r2, #16]
 8009f8c:	430a      	orrs	r2, r1
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	7d09      	ldrb	r1, [r1, #20]
 8009f92:	2901      	cmp	r1, #1
 8009f94:	d102      	bne.n	8009f9c <HAL_OPAMP_Init+0x124>
 8009f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f9a:	e000      	b.n	8009f9e <HAL_OPAMP_Init+0x126>
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4311      	orrs	r1, r2
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009fa4:	4311      	orrs	r1, r2
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009faa:	4311      	orrs	r1, r2
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009fb0:	04d2      	lsls	r2, r2, #19
 8009fb2:	4311      	orrs	r1, r2
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009fb8:	0612      	lsls	r2, r2, #24
 8009fba:	4311      	orrs	r1, r2
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	430b      	orrs	r3, r1
 8009fc2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	db10      	blt.n	8009ff0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699a      	ldr	r2, [r3, #24]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800a004:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	40021000 	.word	0x40021000
 800a014:	e0003e11 	.word	0xe0003e11

0800a018 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d102      	bne.n	800a030 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	73fb      	strb	r3, [r7, #15]
 800a02e:	e01d      	b.n	800a06c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b05      	cmp	r3, #5
 800a03a:	d102      	bne.n	800a042 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]
 800a040:	e014      	b.n	800a06c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d10c      	bne.n	800a068 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f042 0201 	orr.w	r2, r2, #1
 800a05c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2204      	movs	r2, #4
 800a062:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a066:	e001      	b.n	800a06c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
	...

0800a07c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d141      	bne.n	800a10e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a08a:	4b4b      	ldr	r3, [pc, #300]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a096:	d131      	bne.n	800a0fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a098:	4b47      	ldr	r3, [pc, #284]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a09e:	4a46      	ldr	r2, [pc, #280]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a0a8:	4b43      	ldr	r3, [pc, #268]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a0b0:	4a41      	ldr	r2, [pc, #260]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a0b8:	4b40      	ldr	r3, [pc, #256]	; (800a1bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2232      	movs	r2, #50	; 0x32
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
 800a0c2:	4a3f      	ldr	r2, [pc, #252]	; (800a1c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c8:	0c9b      	lsrs	r3, r3, #18
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0ce:	e002      	b.n	800a0d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0d6:	4b38      	ldr	r3, [pc, #224]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e2:	d102      	bne.n	800a0ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1f2      	bne.n	800a0d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a0ea:	4b33      	ldr	r3, [pc, #204]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f6:	d158      	bne.n	800a1aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e057      	b.n	800a1ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a0fc:	4b2e      	ldr	r3, [pc, #184]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a102:	4a2d      	ldr	r2, [pc, #180]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a10c:	e04d      	b.n	800a1aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a114:	d141      	bne.n	800a19a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a116:	4b28      	ldr	r3, [pc, #160]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a122:	d131      	bne.n	800a188 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a124:	4b24      	ldr	r3, [pc, #144]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a12a:	4a23      	ldr	r2, [pc, #140]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a12c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a134:	4b20      	ldr	r3, [pc, #128]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a13c:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a13e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a144:	4b1d      	ldr	r3, [pc, #116]	; (800a1bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2232      	movs	r2, #50	; 0x32
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
 800a14e:	4a1c      	ldr	r2, [pc, #112]	; (800a1c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a150:	fba2 2303 	umull	r2, r3, r2, r3
 800a154:	0c9b      	lsrs	r3, r3, #18
 800a156:	3301      	adds	r3, #1
 800a158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a15a:	e002      	b.n	800a162 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3b01      	subs	r3, #1
 800a160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a16a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a16e:	d102      	bne.n	800a176 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1f2      	bne.n	800a15c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a182:	d112      	bne.n	800a1aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e011      	b.n	800a1ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a188:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18e:	4a0a      	ldr	r2, [pc, #40]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a198:	e007      	b.n	800a1aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a19a:	4b07      	ldr	r3, [pc, #28]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a1a2:	4a05      	ldr	r2, [pc, #20]	; (800a1b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	40007000 	.word	0x40007000
 800a1bc:	20000008 	.word	0x20000008
 800a1c0:	431bde83 	.word	0x431bde83

0800a1c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a1cc:	f7fc f95e 	bl	800648c <HAL_GetTick>
 800a1d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e069      	b.n	800a2b0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10b      	bne.n	800a200 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7fa fe35 	bl	8004e60 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a1f6:	f241 3188 	movw	r1, #5000	; 0x1388
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fa54 	bl	800a6a8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	3b01      	subs	r3, #1
 800a210:	021a      	lsls	r2, r3, #8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	430a      	orrs	r2, r1
 800a218:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	2120      	movs	r1, #32
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fa7f 	bl	800a72a <QSPI_WaitFlagStateUntilTimeout>
 800a22c:	4603      	mov	r3, r0
 800a22e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a230:	7afb      	ldrb	r3, [r7, #11]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d137      	bne.n	800a2a6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a240:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	6852      	ldr	r2, [r2, #4]
 800a248:	0611      	lsls	r1, r2, #24
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	68d2      	ldr	r2, [r2, #12]
 800a24e:	4311      	orrs	r1, r2
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	69d2      	ldr	r2, [r2, #28]
 800a254:	4311      	orrs	r1, r2
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6a12      	ldr	r2, [r2, #32]
 800a25a:	4311      	orrs	r1, r2
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6812      	ldr	r2, [r2, #0]
 800a260:	430b      	orrs	r3, r1
 800a262:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <HAL_QSPI_Init+0xf4>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6912      	ldr	r2, [r2, #16]
 800a272:	0411      	lsls	r1, r2, #16
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	6952      	ldr	r2, [r2, #20]
 800a278:	4311      	orrs	r1, r2
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6992      	ldr	r2, [r2, #24]
 800a27e:	4311      	orrs	r1, r2
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	430b      	orrs	r3, r1
 800a286:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f042 0201 	orr.w	r2, r2, #1
 800a296:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	ffe0f8fe 	.word	0xffe0f8fe

0800a2bc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f003 0304 	and.w	r3, r3, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d064      	beq.n	800a3a8 <HAL_QSPI_IRQHandler+0xec>
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d05f      	beq.n	800a3a8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3320      	adds	r3, #32
 800a2ee:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b12      	cmp	r3, #18
 800a2fa:	d125      	bne.n	800a348 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a2fc:	e01c      	b.n	800a338 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00f      	beq.n	800a326 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31e:	1e5a      	subs	r2, r3, #1
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	62da      	str	r2, [r3, #44]	; 0x2c
 800a324:	e008      	b.n	800a338 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a334:	601a      	str	r2, [r3, #0]
          break;
 800a336:	e033      	b.n	800a3a0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1db      	bne.n	800a2fe <HAL_QSPI_IRQHandler+0x42>
 800a346:	e02b      	b.n	800a3a0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b22      	cmp	r3, #34	; 0x22
 800a352:	d125      	bne.n	800a3a0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a354:	e01d      	b.n	800a392 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d010      	beq.n	800a380 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	b2d2      	uxtb	r2, r2
 800a368:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a378:	1e5a      	subs	r2, r3, #1
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	639a      	str	r2, [r3, #56]	; 0x38
 800a37e:	e008      	b.n	800a392 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a38e:	601a      	str	r2, [r3, #0]
          break;
 800a390:	e006      	b.n	800a3a0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1da      	bne.n	800a356 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f963 	bl	800a66c <HAL_QSPI_FifoThresholdCallback>
 800a3a6:	e13c      	b.n	800a622 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 80b0 	beq.w	800a514 <HAL_QSPI_IRQHandler+0x258>
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 80aa 	beq.w	800a514 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a3d6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b12      	cmp	r3, #18
 800a3e2:	d120      	bne.n	800a426 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d011      	beq.n	800a416 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0204 	bic.w	r2, r2, #4
 800a400:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0201 	bic.w	r2, r2, #1
 800a414:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7fa fcd2 	bl	8004dc8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a424:	e0fa      	b.n	800a61c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b22      	cmp	r3, #34	; 0x22
 800a430:	d143      	bne.n	800a4ba <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d012      	beq.n	800a466 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0204 	bic.w	r2, r2, #4
 800a44e:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f022 0201 	bic.w	r2, r2, #1
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	e021      	b.n	800a4aa <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3320      	adds	r3, #32
 800a46c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a46e:	e013      	b.n	800a498 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d017      	beq.n	800a4a8 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	7812      	ldrb	r2, [r2, #0]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	1e5a      	subs	r2, r3, #1
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e4      	bne.n	800a470 <HAL_QSPI_IRQHandler+0x1b4>
 800a4a6:	e000      	b.n	800a4aa <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800a4a8:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7fa fc98 	bl	8004de8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a4b8:	e0b0      	b.n	800a61c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d107      	bne.n	800a4d6 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8c2 	bl	800a658 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a4d4:	e0a2      	b.n	800a61c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b08      	cmp	r3, #8
 800a4e0:	f040 809c 	bne.w	800a61c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	695a      	ldr	r2, [r3, #20]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a4f2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a500:	2b00      	cmp	r3, #0
 800a502:	d103      	bne.n	800a50c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f89d 	bl	800a644 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a50a:	e087      	b.n	800a61c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f88f 	bl	800a630 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a512:	e083      	b.n	800a61c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f003 0308 	and.w	r3, r3, #8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d01f      	beq.n	800a55e <HAL_QSPI_IRQHandler+0x2a2>
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01a      	beq.n	800a55e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2208      	movs	r2, #8
 800a52e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00b      	beq.n	800a556 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a54c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f892 	bl	800a680 <HAL_QSPI_StatusMatchCallback>
 800a55c:	e061      	b.n	800a622 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d047      	beq.n	800a5f8 <HAL_QSPI_IRQHandler+0x33c>
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d042      	beq.n	800a5f8 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2201      	movs	r2, #1
 800a578:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800a588:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58e:	f043 0202 	orr.w	r2, r3, #2
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d021      	beq.n	800a5e8 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 0204 	bic.w	r2, r2, #4
 800a5b2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b8:	4a1c      	ldr	r2, [pc, #112]	; (800a62c <HAL_QSPI_IRQHandler+0x370>)
 800a5ba:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff f909 	bl	80097d8 <HAL_DMA_Abort_IT>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d029      	beq.n	800a620 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d0:	f043 0204 	orr.w	r2, r3, #4
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f825 	bl	800a630 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a5e6:	e01b      	b.n	800a620 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f81d 	bl	800a630 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a5f6:	e013      	b.n	800a620 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f003 0310 	and.w	r3, r3, #16
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00f      	beq.n	800a622 <HAL_QSPI_IRQHandler+0x366>
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2210      	movs	r2, #16
 800a612:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f83d 	bl	800a694 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800a61a:	e002      	b.n	800a622 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a61c:	bf00      	nop
 800a61e:	e000      	b.n	800a622 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a620:	bf00      	nop
}
 800a622:	bf00      	nop
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	0800a6c5 	.word	0x0800a6c5

0800a630 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b08      	cmp	r3, #8
 800a6e8:	d114      	bne.n	800a714 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a700:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f042 0202 	orr.w	r2, r2, #2
 800a710:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800a712:	e006      	b.n	800a722 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff ff87 	bl	800a630 <HAL_QSPI_ErrorCallback>
}
 800a722:	bf00      	nop
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	603b      	str	r3, [r7, #0]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a73a:	e01a      	b.n	800a772 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d016      	beq.n	800a772 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a744:	f7fb fea2 	bl	800648c <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	429a      	cmp	r2, r3
 800a752:	d302      	bcc.n	800a75a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2204      	movs	r2, #4
 800a75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a766:	f043 0201 	orr.w	r2, r3, #1
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e00e      	b.n	800a790 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689a      	ldr	r2, [r3, #8]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bf14      	ite	ne
 800a780:	2301      	movne	r3, #1
 800a782:	2300      	moveq	r3, #0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	461a      	mov	r2, r3
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d1d6      	bne.n	800a73c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e306      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d075      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7b6:	4b97      	ldr	r3, [pc, #604]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f003 030c 	and.w	r3, r3, #12
 800a7be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7c0:	4b94      	ldr	r3, [pc, #592]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f003 0303 	and.w	r3, r3, #3
 800a7c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b0c      	cmp	r3, #12
 800a7ce:	d102      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x3e>
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d002      	beq.n	800a7dc <HAL_RCC_OscConfig+0x44>
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b08      	cmp	r3, #8
 800a7da:	d10b      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7dc:	4b8d      	ldr	r3, [pc, #564]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d05b      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x108>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d157      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e2e1      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7fc:	d106      	bne.n	800a80c <HAL_RCC_OscConfig+0x74>
 800a7fe:	4b85      	ldr	r3, [pc, #532]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a84      	ldr	r2, [pc, #528]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	e01d      	b.n	800a848 <HAL_RCC_OscConfig+0xb0>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a814:	d10c      	bne.n	800a830 <HAL_RCC_OscConfig+0x98>
 800a816:	4b7f      	ldr	r3, [pc, #508]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a7e      	ldr	r2, [pc, #504]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a81c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	4b7c      	ldr	r3, [pc, #496]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a7b      	ldr	r2, [pc, #492]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	e00b      	b.n	800a848 <HAL_RCC_OscConfig+0xb0>
 800a830:	4b78      	ldr	r3, [pc, #480]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a77      	ldr	r2, [pc, #476]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	4b75      	ldr	r3, [pc, #468]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a74      	ldr	r2, [pc, #464]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d013      	beq.n	800a878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a850:	f7fb fe1c 	bl	800648c <HAL_GetTick>
 800a854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a856:	e008      	b.n	800a86a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a858:	f7fb fe18 	bl	800648c <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	2b64      	cmp	r3, #100	; 0x64
 800a864:	d901      	bls.n	800a86a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e2a6      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a86a:	4b6a      	ldr	r3, [pc, #424]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0f0      	beq.n	800a858 <HAL_RCC_OscConfig+0xc0>
 800a876:	e014      	b.n	800a8a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a878:	f7fb fe08 	bl	800648c <HAL_GetTick>
 800a87c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a87e:	e008      	b.n	800a892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a880:	f7fb fe04 	bl	800648c <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b64      	cmp	r3, #100	; 0x64
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e292      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a892:	4b60      	ldr	r3, [pc, #384]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f0      	bne.n	800a880 <HAL_RCC_OscConfig+0xe8>
 800a89e:	e000      	b.n	800a8a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d075      	beq.n	800a99a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ae:	4b59      	ldr	r3, [pc, #356]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f003 030c 	and.w	r3, r3, #12
 800a8b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8b8:	4b56      	ldr	r3, [pc, #344]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f003 0303 	and.w	r3, r3, #3
 800a8c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	2b0c      	cmp	r3, #12
 800a8c6:	d102      	bne.n	800a8ce <HAL_RCC_OscConfig+0x136>
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d002      	beq.n	800a8d4 <HAL_RCC_OscConfig+0x13c>
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	d11f      	bne.n	800a914 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8d4:	4b4f      	ldr	r3, [pc, #316]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_RCC_OscConfig+0x154>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e265      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8ec:	4b49      	ldr	r3, [pc, #292]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	061b      	lsls	r3, r3, #24
 800a8fa:	4946      	ldr	r1, [pc, #280]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a900:	4b45      	ldr	r3, [pc, #276]	; (800aa18 <HAL_RCC_OscConfig+0x280>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4618      	mov	r0, r3
 800a906:	f7fb fd75 	bl	80063f4 <HAL_InitTick>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d043      	beq.n	800a998 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e251      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d023      	beq.n	800a964 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a91c:	4b3d      	ldr	r3, [pc, #244]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a3c      	ldr	r2, [pc, #240]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a928:	f7fb fdb0 	bl	800648c <HAL_GetTick>
 800a92c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a92e:	e008      	b.n	800a942 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a930:	f7fb fdac 	bl	800648c <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d901      	bls.n	800a942 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e23a      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a942:	4b34      	ldr	r3, [pc, #208]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0f0      	beq.n	800a930 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a94e:	4b31      	ldr	r3, [pc, #196]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	061b      	lsls	r3, r3, #24
 800a95c:	492d      	ldr	r1, [pc, #180]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	604b      	str	r3, [r1, #4]
 800a962:	e01a      	b.n	800a99a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a964:	4b2b      	ldr	r3, [pc, #172]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a2a      	ldr	r2, [pc, #168]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a96a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a96e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a970:	f7fb fd8c 	bl	800648c <HAL_GetTick>
 800a974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a976:	e008      	b.n	800a98a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a978:	f7fb fd88 	bl	800648c <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b02      	cmp	r3, #2
 800a984:	d901      	bls.n	800a98a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e216      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a98a:	4b22      	ldr	r3, [pc, #136]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1f0      	bne.n	800a978 <HAL_RCC_OscConfig+0x1e0>
 800a996:	e000      	b.n	800a99a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d041      	beq.n	800aa2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d01c      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9ae:	4b19      	ldr	r3, [pc, #100]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a9b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9b4:	4a17      	ldr	r2, [pc, #92]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a9b6:	f043 0301 	orr.w	r3, r3, #1
 800a9ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9be:	f7fb fd65 	bl	800648c <HAL_GetTick>
 800a9c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9c4:	e008      	b.n	800a9d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9c6:	f7fb fd61 	bl	800648c <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d901      	bls.n	800a9d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e1ef      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9d8:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a9da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0ef      	beq.n	800a9c6 <HAL_RCC_OscConfig+0x22e>
 800a9e6:	e020      	b.n	800aa2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <HAL_RCC_OscConfig+0x27c>)
 800a9f0:	f023 0301 	bic.w	r3, r3, #1
 800a9f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9f8:	f7fb fd48 	bl	800648c <HAL_GetTick>
 800a9fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a9fe:	e00d      	b.n	800aa1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa00:	f7fb fd44 	bl	800648c <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d906      	bls.n	800aa1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e1d2      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
 800aa12:	bf00      	nop
 800aa14:	40021000 	.word	0x40021000
 800aa18:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aa1c:	4b8c      	ldr	r3, [pc, #560]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aa1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1ea      	bne.n	800aa00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0304 	and.w	r3, r3, #4
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 80a6 	beq.w	800ab84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aa3c:	4b84      	ldr	r3, [pc, #528]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aa3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <HAL_RCC_OscConfig+0x2b4>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e000      	b.n	800aa4e <HAL_RCC_OscConfig+0x2b6>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00d      	beq.n	800aa6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa52:	4b7f      	ldr	r3, [pc, #508]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aa54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa56:	4a7e      	ldr	r2, [pc, #504]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aa58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa5c:	6593      	str	r3, [r2, #88]	; 0x58
 800aa5e:	4b7c      	ldr	r3, [pc, #496]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa6e:	4b79      	ldr	r3, [pc, #484]	; (800ac54 <HAL_RCC_OscConfig+0x4bc>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d118      	bne.n	800aaac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa7a:	4b76      	ldr	r3, [pc, #472]	; (800ac54 <HAL_RCC_OscConfig+0x4bc>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a75      	ldr	r2, [pc, #468]	; (800ac54 <HAL_RCC_OscConfig+0x4bc>)
 800aa80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa86:	f7fb fd01 	bl	800648c <HAL_GetTick>
 800aa8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa8c:	e008      	b.n	800aaa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa8e:	f7fb fcfd 	bl	800648c <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d901      	bls.n	800aaa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e18b      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aaa0:	4b6c      	ldr	r3, [pc, #432]	; (800ac54 <HAL_RCC_OscConfig+0x4bc>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0f0      	beq.n	800aa8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d108      	bne.n	800aac6 <HAL_RCC_OscConfig+0x32e>
 800aab4:	4b66      	ldr	r3, [pc, #408]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaba:	4a65      	ldr	r2, [pc, #404]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aabc:	f043 0301 	orr.w	r3, r3, #1
 800aac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aac4:	e024      	b.n	800ab10 <HAL_RCC_OscConfig+0x378>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	d110      	bne.n	800aaf0 <HAL_RCC_OscConfig+0x358>
 800aace:	4b60      	ldr	r3, [pc, #384]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad4:	4a5e      	ldr	r2, [pc, #376]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aad6:	f043 0304 	orr.w	r3, r3, #4
 800aada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aade:	4b5c      	ldr	r3, [pc, #368]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aae4:	4a5a      	ldr	r2, [pc, #360]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aae6:	f043 0301 	orr.w	r3, r3, #1
 800aaea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aaee:	e00f      	b.n	800ab10 <HAL_RCC_OscConfig+0x378>
 800aaf0:	4b57      	ldr	r3, [pc, #348]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf6:	4a56      	ldr	r2, [pc, #344]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aaf8:	f023 0301 	bic.w	r3, r3, #1
 800aafc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab00:	4b53      	ldr	r3, [pc, #332]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ab02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab06:	4a52      	ldr	r2, [pc, #328]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ab08:	f023 0304 	bic.w	r3, r3, #4
 800ab0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d016      	beq.n	800ab46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab18:	f7fb fcb8 	bl	800648c <HAL_GetTick>
 800ab1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab1e:	e00a      	b.n	800ab36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab20:	f7fb fcb4 	bl	800648c <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d901      	bls.n	800ab36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e140      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab36:	4b46      	ldr	r3, [pc, #280]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ab38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab3c:	f003 0302 	and.w	r3, r3, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0ed      	beq.n	800ab20 <HAL_RCC_OscConfig+0x388>
 800ab44:	e015      	b.n	800ab72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab46:	f7fb fca1 	bl	800648c <HAL_GetTick>
 800ab4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab4c:	e00a      	b.n	800ab64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab4e:	f7fb fc9d 	bl	800648c <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d901      	bls.n	800ab64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e129      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab64:	4b3a      	ldr	r3, [pc, #232]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ab66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1ed      	bne.n	800ab4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ab72:	7ffb      	ldrb	r3, [r7, #31]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d105      	bne.n	800ab84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab78:	4b35      	ldr	r3, [pc, #212]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ab7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab7c:	4a34      	ldr	r2, [pc, #208]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ab7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0320 	and.w	r3, r3, #32
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d03c      	beq.n	800ac0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01c      	beq.n	800abd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab98:	4b2d      	ldr	r3, [pc, #180]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ab9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab9e:	4a2c      	ldr	r2, [pc, #176]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800aba0:	f043 0301 	orr.w	r3, r3, #1
 800aba4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aba8:	f7fb fc70 	bl	800648c <HAL_GetTick>
 800abac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800abae:	e008      	b.n	800abc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abb0:	f7fb fc6c 	bl	800648c <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e0fa      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800abc2:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800abc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0ef      	beq.n	800abb0 <HAL_RCC_OscConfig+0x418>
 800abd0:	e01b      	b.n	800ac0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800abd2:	4b1f      	ldr	r3, [pc, #124]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800abd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abd8:	4a1d      	ldr	r2, [pc, #116]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800abda:	f023 0301 	bic.w	r3, r3, #1
 800abde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abe2:	f7fb fc53 	bl	800648c <HAL_GetTick>
 800abe6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800abe8:	e008      	b.n	800abfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abea:	f7fb fc4f 	bl	800648c <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d901      	bls.n	800abfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e0dd      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800abfc:	4b14      	ldr	r3, [pc, #80]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800abfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1ef      	bne.n	800abea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 80d1 	beq.w	800adb6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac14:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f003 030c 	and.w	r3, r3, #12
 800ac1c:	2b0c      	cmp	r3, #12
 800ac1e:	f000 808b 	beq.w	800ad38 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d15e      	bne.n	800ace8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac2a:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a08      	ldr	r2, [pc, #32]	; (800ac50 <HAL_RCC_OscConfig+0x4b8>)
 800ac30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac36:	f7fb fc29 	bl	800648c <HAL_GetTick>
 800ac3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac3c:	e00c      	b.n	800ac58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac3e:	f7fb fc25 	bl	800648c <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d905      	bls.n	800ac58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e0b3      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
 800ac50:	40021000 	.word	0x40021000
 800ac54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac58:	4b59      	ldr	r3, [pc, #356]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1ec      	bne.n	800ac3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac64:	4b56      	ldr	r3, [pc, #344]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	4b56      	ldr	r3, [pc, #344]	; (800adc4 <HAL_RCC_OscConfig+0x62c>)
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6a11      	ldr	r1, [r2, #32]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac74:	3a01      	subs	r2, #1
 800ac76:	0112      	lsls	r2, r2, #4
 800ac78:	4311      	orrs	r1, r2
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ac7e:	0212      	lsls	r2, r2, #8
 800ac80:	4311      	orrs	r1, r2
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac86:	0852      	lsrs	r2, r2, #1
 800ac88:	3a01      	subs	r2, #1
 800ac8a:	0552      	lsls	r2, r2, #21
 800ac8c:	4311      	orrs	r1, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac92:	0852      	lsrs	r2, r2, #1
 800ac94:	3a01      	subs	r2, #1
 800ac96:	0652      	lsls	r2, r2, #25
 800ac98:	4311      	orrs	r1, r2
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ac9e:	06d2      	lsls	r2, r2, #27
 800aca0:	430a      	orrs	r2, r1
 800aca2:	4947      	ldr	r1, [pc, #284]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aca8:	4b45      	ldr	r3, [pc, #276]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a44      	ldr	r2, [pc, #272]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800acb4:	4b42      	ldr	r3, [pc, #264]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4a41      	ldr	r2, [pc, #260]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc0:	f7fb fbe4 	bl	800648c <HAL_GetTick>
 800acc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acc6:	e008      	b.n	800acda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acc8:	f7fb fbe0 	bl	800648c <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d901      	bls.n	800acda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e06e      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acda:	4b39      	ldr	r3, [pc, #228]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d0f0      	beq.n	800acc8 <HAL_RCC_OscConfig+0x530>
 800ace6:	e066      	b.n	800adb6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ace8:	4b35      	ldr	r3, [pc, #212]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a34      	ldr	r2, [pc, #208]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acf2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800acf4:	4b32      	ldr	r3, [pc, #200]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	4a31      	ldr	r2, [pc, #196]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800acfa:	f023 0303 	bic.w	r3, r3, #3
 800acfe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ad00:	4b2f      	ldr	r3, [pc, #188]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	4a2e      	ldr	r2, [pc, #184]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800ad06:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ad0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad10:	f7fb fbbc 	bl	800648c <HAL_GetTick>
 800ad14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad16:	e008      	b.n	800ad2a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad18:	f7fb fbb8 	bl	800648c <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e046      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad2a:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1f0      	bne.n	800ad18 <HAL_RCC_OscConfig+0x580>
 800ad36:	e03e      	b.n	800adb6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e039      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ad44:	4b1e      	ldr	r3, [pc, #120]	; (800adc0 <HAL_RCC_OscConfig+0x628>)
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f003 0203 	and.w	r2, r3, #3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d12c      	bne.n	800adb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	3b01      	subs	r3, #1
 800ad64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d123      	bne.n	800adb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d11b      	bne.n	800adb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d113      	bne.n	800adb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad94:	085b      	lsrs	r3, r3, #1
 800ad96:	3b01      	subs	r3, #1
 800ad98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d109      	bne.n	800adb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada8:	085b      	lsrs	r3, r3, #1
 800adaa:	3b01      	subs	r3, #1
 800adac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800adae:	429a      	cmp	r2, r3
 800adb0:	d001      	beq.n	800adb6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	40021000 	.word	0x40021000
 800adc4:	019f800c 	.word	0x019f800c

0800adc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e11e      	b.n	800b01e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ade0:	4b91      	ldr	r3, [pc, #580]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 030f 	and.w	r3, r3, #15
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d910      	bls.n	800ae10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adee:	4b8e      	ldr	r3, [pc, #568]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f023 020f 	bic.w	r2, r3, #15
 800adf6:	498c      	ldr	r1, [pc, #560]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adfe:	4b8a      	ldr	r3, [pc, #552]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 030f 	and.w	r3, r3, #15
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d001      	beq.n	800ae10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e106      	b.n	800b01e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d073      	beq.n	800af04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d129      	bne.n	800ae78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae24:	4b81      	ldr	r3, [pc, #516]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e0f4      	b.n	800b01e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ae34:	f000 f972 	bl	800b11c <RCC_GetSysClockFreqFromPLLSource>
 800ae38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	4a7c      	ldr	r2, [pc, #496]	; (800b030 <HAL_RCC_ClockConfig+0x268>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d93f      	bls.n	800aec2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ae42:	4b7a      	ldr	r3, [pc, #488]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d009      	beq.n	800ae62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d033      	beq.n	800aec2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d12f      	bne.n	800aec2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ae62:	4b72      	ldr	r3, [pc, #456]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae6a:	4a70      	ldr	r2, [pc, #448]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800ae6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ae72:	2380      	movs	r3, #128	; 0x80
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	e024      	b.n	800aec2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d107      	bne.n	800ae90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae80:	4b6a      	ldr	r3, [pc, #424]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d109      	bne.n	800aea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e0c6      	b.n	800b01e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae90:	4b66      	ldr	r3, [pc, #408]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e0be      	b.n	800b01e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800aea0:	f000 f8ce 	bl	800b040 <HAL_RCC_GetSysClockFreq>
 800aea4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	4a61      	ldr	r2, [pc, #388]	; (800b030 <HAL_RCC_ClockConfig+0x268>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d909      	bls.n	800aec2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aeae:	4b5f      	ldr	r3, [pc, #380]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aeb6:	4a5d      	ldr	r2, [pc, #372]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800aeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aebc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800aebe:	2380      	movs	r3, #128	; 0x80
 800aec0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aec2:	4b5a      	ldr	r3, [pc, #360]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f023 0203 	bic.w	r2, r3, #3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4957      	ldr	r1, [pc, #348]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aed4:	f7fb fada 	bl	800648c <HAL_GetTick>
 800aed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeda:	e00a      	b.n	800aef2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aedc:	f7fb fad6 	bl	800648c <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d901      	bls.n	800aef2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e095      	b.n	800b01e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aef2:	4b4e      	ldr	r3, [pc, #312]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f003 020c 	and.w	r2, r3, #12
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	429a      	cmp	r2, r3
 800af02:	d1eb      	bne.n	800aedc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d023      	beq.n	800af58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0304 	and.w	r3, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d005      	beq.n	800af28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af1c:	4b43      	ldr	r3, [pc, #268]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	4a42      	ldr	r2, [pc, #264]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0308 	and.w	r3, r3, #8
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800af34:	4b3d      	ldr	r3, [pc, #244]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af3c:	4a3b      	ldr	r2, [pc, #236]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af44:	4b39      	ldr	r3, [pc, #228]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	4936      	ldr	r1, [pc, #216]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af52:	4313      	orrs	r3, r2
 800af54:	608b      	str	r3, [r1, #8]
 800af56:	e008      	b.n	800af6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2b80      	cmp	r3, #128	; 0x80
 800af5c:	d105      	bne.n	800af6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800af5e:	4b33      	ldr	r3, [pc, #204]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	4a32      	ldr	r2, [pc, #200]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800af64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af6a:	4b2f      	ldr	r3, [pc, #188]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d21d      	bcs.n	800afb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af78:	4b2b      	ldr	r3, [pc, #172]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f023 020f 	bic.w	r2, r3, #15
 800af80:	4929      	ldr	r1, [pc, #164]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	4313      	orrs	r3, r2
 800af86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800af88:	f7fb fa80 	bl	800648c <HAL_GetTick>
 800af8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af8e:	e00a      	b.n	800afa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af90:	f7fb fa7c 	bl	800648c <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d901      	bls.n	800afa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e03b      	b.n	800b01e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afa6:	4b20      	ldr	r3, [pc, #128]	; (800b028 <HAL_RCC_ClockConfig+0x260>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d1ed      	bne.n	800af90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d008      	beq.n	800afd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800afc0:	4b1a      	ldr	r3, [pc, #104]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	4917      	ldr	r1, [pc, #92]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800afce:	4313      	orrs	r3, r2
 800afd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0308 	and.w	r3, r3, #8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d009      	beq.n	800aff2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	490f      	ldr	r1, [pc, #60]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aff2:	f000 f825 	bl	800b040 <HAL_RCC_GetSysClockFreq>
 800aff6:	4602      	mov	r2, r0
 800aff8:	4b0c      	ldr	r3, [pc, #48]	; (800b02c <HAL_RCC_ClockConfig+0x264>)
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	091b      	lsrs	r3, r3, #4
 800affe:	f003 030f 	and.w	r3, r3, #15
 800b002:	490c      	ldr	r1, [pc, #48]	; (800b034 <HAL_RCC_ClockConfig+0x26c>)
 800b004:	5ccb      	ldrb	r3, [r1, r3]
 800b006:	f003 031f 	and.w	r3, r3, #31
 800b00a:	fa22 f303 	lsr.w	r3, r2, r3
 800b00e:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <HAL_RCC_ClockConfig+0x270>)
 800b010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b012:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <HAL_RCC_ClockConfig+0x274>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4618      	mov	r0, r3
 800b018:	f7fb f9ec 	bl	80063f4 <HAL_InitTick>
 800b01c:	4603      	mov	r3, r0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	40022000 	.word	0x40022000
 800b02c:	40021000 	.word	0x40021000
 800b030:	04c4b400 	.word	0x04c4b400
 800b034:	08021fe0 	.word	0x08021fe0
 800b038:	20000008 	.word	0x20000008
 800b03c:	2000000c 	.word	0x2000000c

0800b040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b046:	4b2c      	ldr	r3, [pc, #176]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f003 030c 	and.w	r3, r3, #12
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d102      	bne.n	800b058 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b052:	4b2a      	ldr	r3, [pc, #168]	; (800b0fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800b054:	613b      	str	r3, [r7, #16]
 800b056:	e047      	b.n	800b0e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b058:	4b27      	ldr	r3, [pc, #156]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f003 030c 	and.w	r3, r3, #12
 800b060:	2b08      	cmp	r3, #8
 800b062:	d102      	bne.n	800b06a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b064:	4b26      	ldr	r3, [pc, #152]	; (800b100 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	e03e      	b.n	800b0e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b06a:	4b23      	ldr	r3, [pc, #140]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	f003 030c 	and.w	r3, r3, #12
 800b072:	2b0c      	cmp	r3, #12
 800b074:	d136      	bne.n	800b0e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b076:	4b20      	ldr	r3, [pc, #128]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b080:	4b1d      	ldr	r3, [pc, #116]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	091b      	lsrs	r3, r3, #4
 800b086:	f003 030f 	and.w	r3, r3, #15
 800b08a:	3301      	adds	r3, #1
 800b08c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b03      	cmp	r3, #3
 800b092:	d10c      	bne.n	800b0ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b094:	4a1a      	ldr	r2, [pc, #104]	; (800b100 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	fbb2 f3f3 	udiv	r3, r2, r3
 800b09c:	4a16      	ldr	r2, [pc, #88]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b09e:	68d2      	ldr	r2, [r2, #12]
 800b0a0:	0a12      	lsrs	r2, r2, #8
 800b0a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0a6:	fb02 f303 	mul.w	r3, r2, r3
 800b0aa:	617b      	str	r3, [r7, #20]
      break;
 800b0ac:	e00c      	b.n	800b0c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0ae:	4a13      	ldr	r2, [pc, #76]	; (800b0fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b6:	4a10      	ldr	r2, [pc, #64]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0b8:	68d2      	ldr	r2, [r2, #12]
 800b0ba:	0a12      	lsrs	r2, r2, #8
 800b0bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0c0:	fb02 f303 	mul.w	r3, r2, r3
 800b0c4:	617b      	str	r3, [r7, #20]
      break;
 800b0c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b0c8:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	0e5b      	lsrs	r3, r3, #25
 800b0ce:	f003 0303 	and.w	r3, r3, #3
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e0:	613b      	str	r3, [r7, #16]
 800b0e2:	e001      	b.n	800b0e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b0e8:	693b      	ldr	r3, [r7, #16]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	40021000 	.word	0x40021000
 800b0fc:	00f42400 	.word	0x00f42400
 800b100:	016e3600 	.word	0x016e3600

0800b104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b104:	b480      	push	{r7}
 800b106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b108:	4b03      	ldr	r3, [pc, #12]	; (800b118 <HAL_RCC_GetHCLKFreq+0x14>)
 800b10a:	681b      	ldr	r3, [r3, #0]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	20000008 	.word	0x20000008

0800b11c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b122:	4b1e      	ldr	r3, [pc, #120]	; (800b19c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b12c:	4b1b      	ldr	r3, [pc, #108]	; (800b19c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	091b      	lsrs	r3, r3, #4
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	3301      	adds	r3, #1
 800b138:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d10c      	bne.n	800b15a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b140:	4a17      	ldr	r2, [pc, #92]	; (800b1a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	fbb2 f3f3 	udiv	r3, r2, r3
 800b148:	4a14      	ldr	r2, [pc, #80]	; (800b19c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b14a:	68d2      	ldr	r2, [r2, #12]
 800b14c:	0a12      	lsrs	r2, r2, #8
 800b14e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b152:	fb02 f303 	mul.w	r3, r2, r3
 800b156:	617b      	str	r3, [r7, #20]
    break;
 800b158:	e00c      	b.n	800b174 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b15a:	4a12      	ldr	r2, [pc, #72]	; (800b1a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b162:	4a0e      	ldr	r2, [pc, #56]	; (800b19c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b164:	68d2      	ldr	r2, [r2, #12]
 800b166:	0a12      	lsrs	r2, r2, #8
 800b168:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b16c:	fb02 f303 	mul.w	r3, r2, r3
 800b170:	617b      	str	r3, [r7, #20]
    break;
 800b172:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b174:	4b09      	ldr	r3, [pc, #36]	; (800b19c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	0e5b      	lsrs	r3, r3, #25
 800b17a:	f003 0303 	and.w	r3, r3, #3
 800b17e:	3301      	adds	r3, #1
 800b180:	005b      	lsls	r3, r3, #1
 800b182:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b18e:	687b      	ldr	r3, [r7, #4]
}
 800b190:	4618      	mov	r0, r3
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	40021000 	.word	0x40021000
 800b1a0:	016e3600 	.word	0x016e3600
 800b1a4:	00f42400 	.word	0x00f42400

0800b1a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 8098 	beq.w	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1ca:	4b43      	ldr	r3, [pc, #268]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10d      	bne.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1d6:	4b40      	ldr	r3, [pc, #256]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1da:	4a3f      	ldr	r2, [pc, #252]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b1e2:	4b3d      	ldr	r3, [pc, #244]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ea:	60bb      	str	r3, [r7, #8]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1f2:	4b3a      	ldr	r3, [pc, #232]	; (800b2dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a39      	ldr	r2, [pc, #228]	; (800b2dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b1f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b1fe:	f7fb f945 	bl	800648c <HAL_GetTick>
 800b202:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b204:	e009      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b206:	f7fb f941 	bl	800648c <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	2b02      	cmp	r3, #2
 800b212:	d902      	bls.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	74fb      	strb	r3, [r7, #19]
        break;
 800b218:	e005      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b21a:	4b30      	ldr	r3, [pc, #192]	; (800b2dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0ef      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b226:	7cfb      	ldrb	r3, [r7, #19]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d159      	bne.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b22c:	4b2a      	ldr	r3, [pc, #168]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b236:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01e      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	429a      	cmp	r2, r3
 800b246:	d019      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b248:	4b23      	ldr	r3, [pc, #140]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b24e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b252:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b254:	4b20      	ldr	r3, [pc, #128]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25a:	4a1f      	ldr	r2, [pc, #124]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b25c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b264:	4b1c      	ldr	r3, [pc, #112]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b26a:	4a1b      	ldr	r2, [pc, #108]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b26c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b274:	4a18      	ldr	r2, [pc, #96]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d016      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b286:	f7fb f901 	bl	800648c <HAL_GetTick>
 800b28a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b28c:	e00b      	b.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b28e:	f7fb f8fd 	bl	800648c <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	f241 3288 	movw	r2, #5000	; 0x1388
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d902      	bls.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	74fb      	strb	r3, [r7, #19]
            break;
 800b2a4:	e006      	b.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2a6:	4b0c      	ldr	r3, [pc, #48]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0ec      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b2b4:	7cfb      	ldrb	r3, [r7, #19]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10b      	bne.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2ba:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c8:	4903      	ldr	r1, [pc, #12]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b2d0:	e008      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2d2:	7cfb      	ldrb	r3, [r7, #19]
 800b2d4:	74bb      	strb	r3, [r7, #18]
 800b2d6:	e005      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b2d8:	40021000 	.word	0x40021000
 800b2dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e0:	7cfb      	ldrb	r3, [r7, #19]
 800b2e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b2e4:	7c7b      	ldrb	r3, [r7, #17]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d105      	bne.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2ea:	4ba7      	ldr	r3, [pc, #668]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ee:	4aa6      	ldr	r2, [pc, #664]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b302:	4ba1      	ldr	r3, [pc, #644]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b308:	f023 0203 	bic.w	r2, r3, #3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	499d      	ldr	r1, [pc, #628]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b312:	4313      	orrs	r3, r2
 800b314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00a      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b324:	4b98      	ldr	r3, [pc, #608]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b32a:	f023 020c 	bic.w	r2, r3, #12
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	4995      	ldr	r1, [pc, #596]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b334:	4313      	orrs	r3, r2
 800b336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 0304 	and.w	r3, r3, #4
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b346:	4b90      	ldr	r3, [pc, #576]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b34c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	498c      	ldr	r1, [pc, #560]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b356:	4313      	orrs	r3, r2
 800b358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0308 	and.w	r3, r3, #8
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00a      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b368:	4b87      	ldr	r3, [pc, #540]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b36e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	4984      	ldr	r1, [pc, #528]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0310 	and.w	r3, r3, #16
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00a      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b38a:	4b7f      	ldr	r3, [pc, #508]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	497b      	ldr	r1, [pc, #492]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00a      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b3ac:	4b76      	ldr	r3, [pc, #472]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	4973      	ldr	r1, [pc, #460]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b3ce:	4b6e      	ldr	r3, [pc, #440]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	69db      	ldr	r3, [r3, #28]
 800b3dc:	496a      	ldr	r1, [pc, #424]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00a      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b3f0:	4b65      	ldr	r3, [pc, #404]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	4962      	ldr	r1, [pc, #392]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b400:	4313      	orrs	r3, r2
 800b402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b412:	4b5d      	ldr	r3, [pc, #372]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	4959      	ldr	r1, [pc, #356]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b422:	4313      	orrs	r3, r2
 800b424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00a      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b434:	4b54      	ldr	r3, [pc, #336]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b43a:	f023 0203 	bic.w	r2, r3, #3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b442:	4951      	ldr	r1, [pc, #324]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b444:	4313      	orrs	r3, r2
 800b446:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b456:	4b4c      	ldr	r3, [pc, #304]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b45c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	4948      	ldr	r1, [pc, #288]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b466:	4313      	orrs	r3, r2
 800b468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b474:	2b00      	cmp	r3, #0
 800b476:	d015      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b478:	4b43      	ldr	r3, [pc, #268]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b47e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b486:	4940      	ldr	r1, [pc, #256]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b496:	d105      	bne.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b498:	4b3b      	ldr	r3, [pc, #236]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	4a3a      	ldr	r2, [pc, #232]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b49e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d015      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b4b0:	4b35      	ldr	r3, [pc, #212]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4be:	4932      	ldr	r1, [pc, #200]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4ce:	d105      	bne.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4d0:	4b2d      	ldr	r3, [pc, #180]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	4a2c      	ldr	r2, [pc, #176]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d015      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b4e8:	4b27      	ldr	r3, [pc, #156]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	4924      	ldr	r1, [pc, #144]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b506:	d105      	bne.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b508:	4b1f      	ldr	r3, [pc, #124]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	4a1e      	ldr	r2, [pc, #120]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b50e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b512:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d015      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b520:	4b19      	ldr	r3, [pc, #100]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52e:	4916      	ldr	r1, [pc, #88]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b530:	4313      	orrs	r3, r2
 800b532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b53e:	d105      	bne.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b540:	4b11      	ldr	r3, [pc, #68]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	4a10      	ldr	r2, [pc, #64]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b54a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d019      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b558:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b55e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b566:	4908      	ldr	r1, [pc, #32]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b576:	d109      	bne.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b578:	4b03      	ldr	r3, [pc, #12]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	4a02      	ldr	r2, [pc, #8]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b57e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b582:	60d3      	str	r3, [r2, #12]
 800b584:	e002      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b586:	bf00      	nop
 800b588:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d015      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b598:	4b29      	ldr	r3, [pc, #164]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5a6:	4926      	ldr	r1, [pc, #152]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5b6:	d105      	bne.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b5b8:	4b21      	ldr	r3, [pc, #132]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	4a20      	ldr	r2, [pc, #128]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d015      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b5d0:	4b1b      	ldr	r3, [pc, #108]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5de:	4918      	ldr	r1, [pc, #96]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ee:	d105      	bne.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b5f0:	4b13      	ldr	r3, [pc, #76]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	4a12      	ldr	r2, [pc, #72]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d015      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b608:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b60a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b60e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b616:	490a      	ldr	r1, [pc, #40]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b618:	4313      	orrs	r3, r2
 800b61a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b626:	d105      	bne.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b628:	4b05      	ldr	r3, [pc, #20]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	4a04      	ldr	r2, [pc, #16]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b62e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b632:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b634:	7cbb      	ldrb	r3, [r7, #18]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	40021000 	.word	0x40021000

0800b644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e09d      	b.n	800b792 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d108      	bne.n	800b670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b666:	d009      	beq.n	800b67c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	61da      	str	r2, [r3, #28]
 800b66e:	e005      	b.n	800b67c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7fa fb42 	bl	8005d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6bc:	d902      	bls.n	800b6c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	e002      	b.n	800b6ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b6d2:	d007      	beq.n	800b6e4 <HAL_SPI_Init+0xa0>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6dc:	d002      	beq.n	800b6e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b6f4:	431a      	orrs	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	431a      	orrs	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b712:	431a      	orrs	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b71c:	431a      	orrs	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b726:	ea42 0103 	orr.w	r1, r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	430a      	orrs	r2, r1
 800b738:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	0c1b      	lsrs	r3, r3, #16
 800b740:	f003 0204 	and.w	r2, r3, #4
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	f003 0310 	and.w	r3, r3, #16
 800b74c:	431a      	orrs	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	431a      	orrs	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b760:	ea42 0103 	orr.w	r1, r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	430a      	orrs	r2, r1
 800b770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	69da      	ldr	r2, [r3, #28]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b08a      	sub	sp, #40	; 0x28
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	60b9      	str	r1, [r7, #8]
 800b7a4:	607a      	str	r2, [r7, #4]
 800b7a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d101      	bne.n	800b7c0 <HAL_SPI_TransmitReceive+0x26>
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e1fb      	b.n	800bbb8 <HAL_SPI_TransmitReceive+0x41e>
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7c8:	f7fa fe60 	bl	800648c <HAL_GetTick>
 800b7cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b7dc:	887b      	ldrh	r3, [r7, #2]
 800b7de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b7e0:	887b      	ldrh	r3, [r7, #2]
 800b7e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b7e4:	7efb      	ldrb	r3, [r7, #27]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d00e      	beq.n	800b808 <HAL_SPI_TransmitReceive+0x6e>
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7f0:	d106      	bne.n	800b800 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d102      	bne.n	800b800 <HAL_SPI_TransmitReceive+0x66>
 800b7fa:	7efb      	ldrb	r3, [r7, #27]
 800b7fc:	2b04      	cmp	r3, #4
 800b7fe:	d003      	beq.n	800b808 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b800:	2302      	movs	r3, #2
 800b802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b806:	e1cd      	b.n	800bba4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d005      	beq.n	800b81a <HAL_SPI_TransmitReceive+0x80>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <HAL_SPI_TransmitReceive+0x80>
 800b814:	887b      	ldrh	r3, [r7, #2]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d103      	bne.n	800b822 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b820:	e1c0      	b.n	800bba4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b04      	cmp	r3, #4
 800b82c:	d003      	beq.n	800b836 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2205      	movs	r2, #5
 800b832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	887a      	ldrh	r2, [r7, #2]
 800b846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	887a      	ldrh	r2, [r7, #2]
 800b84e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	887a      	ldrh	r2, [r7, #2]
 800b85c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	887a      	ldrh	r2, [r7, #2]
 800b862:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b878:	d802      	bhi.n	800b880 <HAL_SPI_TransmitReceive+0xe6>
 800b87a:	8a3b      	ldrh	r3, [r7, #16]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d908      	bls.n	800b892 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b88e:	605a      	str	r2, [r3, #4]
 800b890:	e007      	b.n	800b8a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ac:	2b40      	cmp	r3, #64	; 0x40
 800b8ae:	d007      	beq.n	800b8c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b8c8:	d97c      	bls.n	800b9c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <HAL_SPI_TransmitReceive+0x13e>
 800b8d2:	8a7b      	ldrh	r3, [r7, #18]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d169      	bne.n	800b9ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	881a      	ldrh	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e8:	1c9a      	adds	r2, r3, #2
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8fc:	e056      	b.n	800b9ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	f003 0302 	and.w	r3, r3, #2
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d11b      	bne.n	800b944 <HAL_SPI_TransmitReceive+0x1aa>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b910:	b29b      	uxth	r3, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d016      	beq.n	800b944 <HAL_SPI_TransmitReceive+0x1aa>
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d113      	bne.n	800b944 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b920:	881a      	ldrh	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92c:	1c9a      	adds	r2, r3, #2
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b936:	b29b      	uxth	r3, r3
 800b938:	3b01      	subs	r3, #1
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d11c      	bne.n	800b98c <HAL_SPI_TransmitReceive+0x1f2>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b958:	b29b      	uxth	r3, r3
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d016      	beq.n	800b98c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b968:	b292      	uxth	r2, r2
 800b96a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	1c9a      	adds	r2, r3, #2
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	3b01      	subs	r3, #1
 800b980:	b29a      	uxth	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b988:	2301      	movs	r3, #1
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b98c:	f7fa fd7e 	bl	800648c <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b998:	429a      	cmp	r2, r3
 800b99a:	d807      	bhi.n	800b9ac <HAL_SPI_TransmitReceive+0x212>
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d003      	beq.n	800b9ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b9aa:	e0fb      	b.n	800bba4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1a3      	bne.n	800b8fe <HAL_SPI_TransmitReceive+0x164>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d19d      	bne.n	800b8fe <HAL_SPI_TransmitReceive+0x164>
 800b9c2:	e0df      	b.n	800bb84 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <HAL_SPI_TransmitReceive+0x23a>
 800b9cc:	8a7b      	ldrh	r3, [r7, #18]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	f040 80cb 	bne.w	800bb6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d912      	bls.n	800ba04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e2:	881a      	ldrh	r2, [r3, #0]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ee:	1c9a      	adds	r2, r3, #2
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	3b02      	subs	r3, #2
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba02:	e0b2      	b.n	800bb6a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	330c      	adds	r3, #12
 800ba0e:	7812      	ldrb	r2, [r2, #0]
 800ba10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba2a:	e09e      	b.n	800bb6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d134      	bne.n	800baa4 <HAL_SPI_TransmitReceive+0x30a>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d02f      	beq.n	800baa4 <HAL_SPI_TransmitReceive+0x30a>
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d12c      	bne.n	800baa4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d912      	bls.n	800ba7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba58:	881a      	ldrh	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	1c9a      	adds	r2, r3, #2
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	3b02      	subs	r3, #2
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba78:	e012      	b.n	800baa0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	330c      	adds	r3, #12
 800ba84:	7812      	ldrb	r2, [r2, #0]
 800ba86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800baa0:	2300      	movs	r3, #0
 800baa2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d148      	bne.n	800bb44 <HAL_SPI_TransmitReceive+0x3aa>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bab8:	b29b      	uxth	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d042      	beq.n	800bb44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d923      	bls.n	800bb12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68da      	ldr	r2, [r3, #12]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad4:	b292      	uxth	r2, r2
 800bad6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800badc:	1c9a      	adds	r2, r3, #2
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bae8:	b29b      	uxth	r3, r3
 800baea:	3b02      	subs	r3, #2
 800baec:	b29a      	uxth	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d81f      	bhi.n	800bb40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb0e:	605a      	str	r2, [r3, #4]
 800bb10:	e016      	b.n	800bb40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f103 020c 	add.w	r2, r3, #12
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	7812      	ldrb	r2, [r2, #0]
 800bb20:	b2d2      	uxtb	r2, r2
 800bb22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb40:	2301      	movs	r3, #1
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb44:	f7fa fca2 	bl	800648c <HAL_GetTick>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d803      	bhi.n	800bb5c <HAL_SPI_TransmitReceive+0x3c2>
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d102      	bne.n	800bb62 <HAL_SPI_TransmitReceive+0x3c8>
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800bb62:	2303      	movs	r3, #3
 800bb64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bb68:	e01c      	b.n	800bba4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f47f af5b 	bne.w	800ba2c <HAL_SPI_TransmitReceive+0x292>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f47f af54 	bne.w	800ba2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb84:	69fa      	ldr	r2, [r7, #28]
 800bb86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 f937 	bl	800bdfc <SPI_EndRxTxTransaction>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d006      	beq.n	800bba2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2220      	movs	r2, #32
 800bb9e:	661a      	str	r2, [r3, #96]	; 0x60
 800bba0:	e000      	b.n	800bba4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800bba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bbb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3728      	adds	r7, #40	; 0x28
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	603b      	str	r3, [r7, #0]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bbd0:	f7fa fc5c 	bl	800648c <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	1a9b      	subs	r3, r3, r2
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	4413      	add	r3, r2
 800bbde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bbe0:	f7fa fc54 	bl	800648c <HAL_GetTick>
 800bbe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bbe6:	4b39      	ldr	r3, [pc, #228]	; (800bccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	015b      	lsls	r3, r3, #5
 800bbec:	0d1b      	lsrs	r3, r3, #20
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	fb02 f303 	mul.w	r3, r2, r3
 800bbf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bbf6:	e054      	b.n	800bca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfe:	d050      	beq.n	800bca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc00:	f7fa fc44 	bl	800648c <HAL_GetTick>
 800bc04:	4602      	mov	r2, r0
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	69fa      	ldr	r2, [r7, #28]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d902      	bls.n	800bc16 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d13d      	bne.n	800bc92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc2e:	d111      	bne.n	800bc54 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc38:	d004      	beq.n	800bc44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc42:	d107      	bne.n	800bc54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc5c:	d10f      	bne.n	800bc7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e017      	b.n	800bcc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	bf0c      	ite	eq
 800bcb2:	2301      	moveq	r3, #1
 800bcb4:	2300      	movne	r3, #0
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	461a      	mov	r2, r3
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d19b      	bne.n	800bbf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20000008 	.word	0x20000008

0800bcd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08a      	sub	sp, #40	; 0x28
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bce2:	f7fa fbd3 	bl	800648c <HAL_GetTick>
 800bce6:	4602      	mov	r2, r0
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	4413      	add	r3, r2
 800bcf0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bcf2:	f7fa fbcb 	bl	800648c <HAL_GetTick>
 800bcf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	330c      	adds	r3, #12
 800bcfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bd00:	4b3d      	ldr	r3, [pc, #244]	; (800bdf8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	4613      	mov	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	00da      	lsls	r2, r3, #3
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	0d1b      	lsrs	r3, r3, #20
 800bd10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd12:	fb02 f303 	mul.w	r3, r2, r3
 800bd16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bd18:	e060      	b.n	800bddc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bd20:	d107      	bne.n	800bd32 <SPI_WaitFifoStateUntilTimeout+0x62>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d104      	bne.n	800bd32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd38:	d050      	beq.n	800bddc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd3a:	f7fa fba7 	bl	800648c <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d902      	bls.n	800bd50 <SPI_WaitFifoStateUntilTimeout+0x80>
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d13d      	bne.n	800bdcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd68:	d111      	bne.n	800bd8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd72:	d004      	beq.n	800bd7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd7c:	d107      	bne.n	800bd8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd96:	d10f      	bne.n	800bdb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bdb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e010      	b.n	800bdee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	689a      	ldr	r2, [r3, #8]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	4013      	ands	r3, r2
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d196      	bne.n	800bd1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3728      	adds	r7, #40	; 0x28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000008 	.word	0x20000008

0800bdfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af02      	add	r7, sp, #8
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	2200      	movs	r2, #0
 800be10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f7ff ff5b 	bl	800bcd0 <SPI_WaitFifoStateUntilTimeout>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d007      	beq.n	800be30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be24:	f043 0220 	orr.w	r2, r3, #32
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be2c:	2303      	movs	r3, #3
 800be2e:	e027      	b.n	800be80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2200      	movs	r2, #0
 800be38:	2180      	movs	r1, #128	; 0x80
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fec0 	bl	800bbc0 <SPI_WaitFlagStateUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d007      	beq.n	800be56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be4a:	f043 0220 	orr.w	r2, r3, #32
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e014      	b.n	800be80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f7ff ff34 	bl	800bcd0 <SPI_WaitFifoStateUntilTimeout>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d007      	beq.n	800be7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be72:	f043 0220 	orr.w	r2, r3, #32
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e000      	b.n	800be80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e038      	b.n	800bf10 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7f5 fd00 	bl	80018b8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3308      	adds	r3, #8
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f001 fb3c 	bl	800d540 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6818      	ldr	r0, [r3, #0]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	461a      	mov	r2, r3
 800bed2:	68b9      	ldr	r1, [r7, #8]
 800bed4:	f001 fc02 	bl	800d6dc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6858      	ldr	r0, [r3, #4]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	689a      	ldr	r2, [r3, #8]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	f001 fc4b 	bl	800d780 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	6892      	ldr	r2, [r2, #8]
 800bef2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	6892      	ldr	r2, [r2, #8]
 800befe:	f041 0101 	orr.w	r1, r1, #1
 800bf02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e049      	b.n	800bfbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7fa f9ca 	bl	80062d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f000 fd82 	bl	800ca60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d001      	beq.n	800bfe0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e04c      	b.n	800c07a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a26      	ldr	r2, [pc, #152]	; (800c088 <HAL_TIM_Base_Start+0xc0>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d022      	beq.n	800c038 <HAL_TIM_Base_Start+0x70>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bffa:	d01d      	beq.n	800c038 <HAL_TIM_Base_Start+0x70>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a22      	ldr	r2, [pc, #136]	; (800c08c <HAL_TIM_Base_Start+0xc4>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d018      	beq.n	800c038 <HAL_TIM_Base_Start+0x70>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a21      	ldr	r2, [pc, #132]	; (800c090 <HAL_TIM_Base_Start+0xc8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d013      	beq.n	800c038 <HAL_TIM_Base_Start+0x70>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a1f      	ldr	r2, [pc, #124]	; (800c094 <HAL_TIM_Base_Start+0xcc>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d00e      	beq.n	800c038 <HAL_TIM_Base_Start+0x70>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a1e      	ldr	r2, [pc, #120]	; (800c098 <HAL_TIM_Base_Start+0xd0>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d009      	beq.n	800c038 <HAL_TIM_Base_Start+0x70>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a1c      	ldr	r2, [pc, #112]	; (800c09c <HAL_TIM_Base_Start+0xd4>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d004      	beq.n	800c038 <HAL_TIM_Base_Start+0x70>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a1b      	ldr	r2, [pc, #108]	; (800c0a0 <HAL_TIM_Base_Start+0xd8>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d115      	bne.n	800c064 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	689a      	ldr	r2, [r3, #8]
 800c03e:	4b19      	ldr	r3, [pc, #100]	; (800c0a4 <HAL_TIM_Base_Start+0xdc>)
 800c040:	4013      	ands	r3, r2
 800c042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b06      	cmp	r3, #6
 800c048:	d015      	beq.n	800c076 <HAL_TIM_Base_Start+0xae>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c050:	d011      	beq.n	800c076 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f042 0201 	orr.w	r2, r2, #1
 800c060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c062:	e008      	b.n	800c076 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0201 	orr.w	r2, r2, #1
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	e000      	b.n	800c078 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	40012c00 	.word	0x40012c00
 800c08c:	40000400 	.word	0x40000400
 800c090:	40000800 	.word	0x40000800
 800c094:	40000c00 	.word	0x40000c00
 800c098:	40013400 	.word	0x40013400
 800c09c:	40014000 	.word	0x40014000
 800c0a0:	40015000 	.word	0x40015000
 800c0a4:	00010007 	.word	0x00010007

0800c0a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6a1a      	ldr	r2, [r3, #32]
 800c0b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10f      	bne.n	800c0e0 <HAL_TIM_Base_Stop+0x38>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6a1a      	ldr	r2, [r3, #32]
 800c0c6:	f244 4344 	movw	r3, #17476	; 0x4444
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d107      	bne.n	800c0e0 <HAL_TIM_Base_Stop+0x38>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f022 0201 	bic.w	r2, r2, #1
 800c0de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e049      	b.n	800c19c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d106      	bne.n	800c122 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f841 	bl	800c1a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2202      	movs	r2, #2
 800c126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f000 fc93 	bl	800ca60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2201      	movs	r2, #1
 800c146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c1d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1e0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d108      	bne.n	800c1fa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d105      	bne.n	800c1fa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1ee:	7b7b      	ldrb	r3, [r7, #13]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d102      	bne.n	800c1fa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1f4:	7b3b      	ldrb	r3, [r7, #12]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d001      	beq.n	800c1fe <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e059      	b.n	800c2b2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2202      	movs	r2, #2
 800c202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2202      	movs	r2, #2
 800c20a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2202      	movs	r2, #2
 800c212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2202      	movs	r2, #2
 800c21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68da      	ldr	r2, [r3, #12]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f042 0202 	orr.w	r2, r2, #2
 800c22c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68da      	ldr	r2, [r3, #12]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f042 0204 	orr.w	r2, r2, #4
 800c23c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2201      	movs	r2, #1
 800c244:	2100      	movs	r1, #0
 800c246:	4618      	mov	r0, r3
 800c248:	f001 f878 	bl	800d33c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2201      	movs	r2, #1
 800c252:	2104      	movs	r1, #4
 800c254:	4618      	mov	r0, r3
 800c256:	f001 f871 	bl	800d33c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a17      	ldr	r2, [pc, #92]	; (800c2bc <HAL_TIM_OnePulse_Start_IT+0x104>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d018      	beq.n	800c296 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a15      	ldr	r2, [pc, #84]	; (800c2c0 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d013      	beq.n	800c296 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a14      	ldr	r2, [pc, #80]	; (800c2c4 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d00e      	beq.n	800c296 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a12      	ldr	r2, [pc, #72]	; (800c2c8 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d009      	beq.n	800c296 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a11      	ldr	r2, [pc, #68]	; (800c2cc <HAL_TIM_OnePulse_Start_IT+0x114>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d004      	beq.n	800c296 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0f      	ldr	r2, [pc, #60]	; (800c2d0 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d101      	bne.n	800c29a <HAL_TIM_OnePulse_Start_IT+0xe2>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d007      	beq.n	800c2b0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	40012c00 	.word	0x40012c00
 800c2c0:	40013400 	.word	0x40013400
 800c2c4:	40014000 	.word	0x40014000
 800c2c8:	40014400 	.word	0x40014400
 800c2cc:	40014800 	.word	0x40014800
 800c2d0:	40015000 	.word	0x40015000

0800c2d4 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68da      	ldr	r2, [r3, #12]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 0202 	bic.w	r2, r2, #2
 800c2ec:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68da      	ldr	r2, [r3, #12]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f022 0204 	bic.w	r2, r2, #4
 800c2fc:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2200      	movs	r2, #0
 800c304:	2100      	movs	r1, #0
 800c306:	4618      	mov	r0, r3
 800c308:	f001 f818 	bl	800d33c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2200      	movs	r2, #0
 800c312:	2104      	movs	r1, #4
 800c314:	4618      	mov	r0, r3
 800c316:	f001 f811 	bl	800d33c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a33      	ldr	r2, [pc, #204]	; (800c3ec <HAL_TIM_OnePulse_Stop_IT+0x118>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d018      	beq.n	800c356 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a31      	ldr	r2, [pc, #196]	; (800c3f0 <HAL_TIM_OnePulse_Stop_IT+0x11c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d013      	beq.n	800c356 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a30      	ldr	r2, [pc, #192]	; (800c3f4 <HAL_TIM_OnePulse_Stop_IT+0x120>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d00e      	beq.n	800c356 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a2e      	ldr	r2, [pc, #184]	; (800c3f8 <HAL_TIM_OnePulse_Stop_IT+0x124>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d009      	beq.n	800c356 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a2d      	ldr	r2, [pc, #180]	; (800c3fc <HAL_TIM_OnePulse_Stop_IT+0x128>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d004      	beq.n	800c356 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a2b      	ldr	r2, [pc, #172]	; (800c400 <HAL_TIM_OnePulse_Stop_IT+0x12c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d101      	bne.n	800c35a <HAL_TIM_OnePulse_Stop_IT+0x86>
 800c356:	2301      	movs	r3, #1
 800c358:	e000      	b.n	800c35c <HAL_TIM_OnePulse_Stop_IT+0x88>
 800c35a:	2300      	movs	r3, #0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d017      	beq.n	800c390 <HAL_TIM_OnePulse_Stop_IT+0xbc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6a1a      	ldr	r2, [r3, #32]
 800c366:	f241 1311 	movw	r3, #4369	; 0x1111
 800c36a:	4013      	ands	r3, r2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10f      	bne.n	800c390 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6a1a      	ldr	r2, [r3, #32]
 800c376:	f244 4344 	movw	r3, #17476	; 0x4444
 800c37a:	4013      	ands	r3, r2
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d107      	bne.n	800c390 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c38e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6a1a      	ldr	r2, [r3, #32]
 800c396:	f241 1311 	movw	r3, #4369	; 0x1111
 800c39a:	4013      	ands	r3, r2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10f      	bne.n	800c3c0 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6a1a      	ldr	r2, [r3, #32]
 800c3a6:	f244 4344 	movw	r3, #17476	; 0x4444
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d107      	bne.n	800c3c0 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f022 0201 	bic.w	r2, r2, #1
 800c3be:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	40012c00 	.word	0x40012c00
 800c3f0:	40013400 	.word	0x40013400
 800c3f4:	40014000 	.word	0x40014000
 800c3f8:	40014400 	.word	0x40014400
 800c3fc:	40014800 	.word	0x40014800
 800c400:	40015000 	.word	0x40015000

0800c404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	f003 0302 	and.w	r3, r3, #2
 800c416:	2b02      	cmp	r3, #2
 800c418:	d122      	bne.n	800c460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f003 0302 	and.w	r3, r3, #2
 800c424:	2b02      	cmp	r3, #2
 800c426:	d11b      	bne.n	800c460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f06f 0202 	mvn.w	r2, #2
 800c430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	f003 0303 	and.w	r3, r3, #3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d003      	beq.n	800c44e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 faec 	bl	800ca24 <HAL_TIM_IC_CaptureCallback>
 800c44c:	e005      	b.n	800c45a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7f9 f87a 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 faef 	bl	800ca38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	f003 0304 	and.w	r3, r3, #4
 800c46a:	2b04      	cmp	r3, #4
 800c46c:	d122      	bne.n	800c4b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f003 0304 	and.w	r3, r3, #4
 800c478:	2b04      	cmp	r3, #4
 800c47a:	d11b      	bne.n	800c4b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f06f 0204 	mvn.w	r2, #4
 800c484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2202      	movs	r2, #2
 800c48a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	699b      	ldr	r3, [r3, #24]
 800c492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fac2 	bl	800ca24 <HAL_TIM_IC_CaptureCallback>
 800c4a0:	e005      	b.n	800c4ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7f9 f850 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fac5 	bl	800ca38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	f003 0308 	and.w	r3, r3, #8
 800c4be:	2b08      	cmp	r3, #8
 800c4c0:	d122      	bne.n	800c508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	f003 0308 	and.w	r3, r3, #8
 800c4cc:	2b08      	cmp	r3, #8
 800c4ce:	d11b      	bne.n	800c508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f06f 0208 	mvn.w	r2, #8
 800c4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2204      	movs	r2, #4
 800c4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	f003 0303 	and.w	r3, r3, #3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fa98 	bl	800ca24 <HAL_TIM_IC_CaptureCallback>
 800c4f4:	e005      	b.n	800c502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7f9 f826 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fa9b 	bl	800ca38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	f003 0310 	and.w	r3, r3, #16
 800c512:	2b10      	cmp	r3, #16
 800c514:	d122      	bne.n	800c55c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	f003 0310 	and.w	r3, r3, #16
 800c520:	2b10      	cmp	r3, #16
 800c522:	d11b      	bne.n	800c55c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f06f 0210 	mvn.w	r2, #16
 800c52c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2208      	movs	r2, #8
 800c532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d003      	beq.n	800c54a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fa6e 	bl	800ca24 <HAL_TIM_IC_CaptureCallback>
 800c548:	e005      	b.n	800c556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7f8 fffc 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fa71 	bl	800ca38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b01      	cmp	r3, #1
 800c568:	d10e      	bne.n	800c588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b01      	cmp	r3, #1
 800c576:	d107      	bne.n	800c588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f06f 0201 	mvn.w	r2, #1
 800c580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fa44 	bl	800ca10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c592:	2b80      	cmp	r3, #128	; 0x80
 800c594:	d10e      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5a0:	2b80      	cmp	r3, #128	; 0x80
 800c5a2:	d107      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 ff8a 	bl	800d4c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5c2:	d10e      	bne.n	800c5e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ce:	2b80      	cmp	r3, #128	; 0x80
 800c5d0:	d107      	bne.n	800c5e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c5da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 ff7d 	bl	800d4dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ec:	2b40      	cmp	r3, #64	; 0x40
 800c5ee:	d10e      	bne.n	800c60e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5fa:	2b40      	cmp	r3, #64	; 0x40
 800c5fc:	d107      	bne.n	800c60e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fa1f 	bl	800ca4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	f003 0320 	and.w	r3, r3, #32
 800c618:	2b20      	cmp	r3, #32
 800c61a:	d10e      	bne.n	800c63a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f003 0320 	and.w	r3, r3, #32
 800c626:	2b20      	cmp	r3, #32
 800c628:	d107      	bne.n	800c63a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f06f 0220 	mvn.w	r2, #32
 800c632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 ff3d 	bl	800d4b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c648:	d10f      	bne.n	800c66a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c658:	d107      	bne.n	800c66a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 ff43 	bl	800d4f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c678:	d10f      	bne.n	800c69a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c688:	d107      	bne.n	800c69a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 ff35 	bl	800d504 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6a8:	d10f      	bne.n	800c6ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6b8:	d107      	bne.n	800c6ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 ff27 	bl	800d518 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6d8:	d10f      	bne.n	800c6fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6e8:	d107      	bne.n	800c6fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 ff19 	bl	800d52c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b086      	sub	sp, #24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c710:	2300      	movs	r3, #0
 800c712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d101      	bne.n	800c722 <HAL_TIM_OC_ConfigChannel+0x1e>
 800c71e:	2302      	movs	r3, #2
 800c720:	e066      	b.n	800c7f0 <HAL_TIM_OC_ConfigChannel+0xec>
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2201      	movs	r2, #1
 800c726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b14      	cmp	r3, #20
 800c72e:	d857      	bhi.n	800c7e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800c730:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c736:	bf00      	nop
 800c738:	0800c78d 	.word	0x0800c78d
 800c73c:	0800c7e1 	.word	0x0800c7e1
 800c740:	0800c7e1 	.word	0x0800c7e1
 800c744:	0800c7e1 	.word	0x0800c7e1
 800c748:	0800c79b 	.word	0x0800c79b
 800c74c:	0800c7e1 	.word	0x0800c7e1
 800c750:	0800c7e1 	.word	0x0800c7e1
 800c754:	0800c7e1 	.word	0x0800c7e1
 800c758:	0800c7a9 	.word	0x0800c7a9
 800c75c:	0800c7e1 	.word	0x0800c7e1
 800c760:	0800c7e1 	.word	0x0800c7e1
 800c764:	0800c7e1 	.word	0x0800c7e1
 800c768:	0800c7b7 	.word	0x0800c7b7
 800c76c:	0800c7e1 	.word	0x0800c7e1
 800c770:	0800c7e1 	.word	0x0800c7e1
 800c774:	0800c7e1 	.word	0x0800c7e1
 800c778:	0800c7c5 	.word	0x0800c7c5
 800c77c:	0800c7e1 	.word	0x0800c7e1
 800c780:	0800c7e1 	.word	0x0800c7e1
 800c784:	0800c7e1 	.word	0x0800c7e1
 800c788:	0800c7d3 	.word	0x0800c7d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68b9      	ldr	r1, [r7, #8]
 800c792:	4618      	mov	r0, r3
 800c794:	f000 fa0c 	bl	800cbb0 <TIM_OC1_SetConfig>
      break;
 800c798:	e025      	b.n	800c7e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68b9      	ldr	r1, [r7, #8]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 fa9f 	bl	800cce4 <TIM_OC2_SetConfig>
      break;
 800c7a6:	e01e      	b.n	800c7e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68b9      	ldr	r1, [r7, #8]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 fb2c 	bl	800ce0c <TIM_OC3_SetConfig>
      break;
 800c7b4:	e017      	b.n	800c7e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68b9      	ldr	r1, [r7, #8]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 fbb7 	bl	800cf30 <TIM_OC4_SetConfig>
      break;
 800c7c2:	e010      	b.n	800c7e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68b9      	ldr	r1, [r7, #8]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fc44 	bl	800d058 <TIM_OC5_SetConfig>
      break;
 800c7d0:	e009      	b.n	800c7e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 fca7 	bl	800d12c <TIM_OC6_SetConfig>
      break;
 800c7de:	e002      	b.n	800c7e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d101      	bne.n	800c814 <HAL_TIM_ConfigClockSource+0x1c>
 800c810:	2302      	movs	r3, #2
 800c812:	e0ee      	b.n	800c9f2 <HAL_TIM_ConfigClockSource+0x1fa>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c83e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a6b      	ldr	r2, [pc, #428]	; (800c9fc <HAL_TIM_ConfigClockSource+0x204>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	f000 80b9 	beq.w	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c854:	4a69      	ldr	r2, [pc, #420]	; (800c9fc <HAL_TIM_ConfigClockSource+0x204>)
 800c856:	4293      	cmp	r3, r2
 800c858:	f200 80be 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c85c:	4a68      	ldr	r2, [pc, #416]	; (800ca00 <HAL_TIM_ConfigClockSource+0x208>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	f000 80b1 	beq.w	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c864:	4a66      	ldr	r2, [pc, #408]	; (800ca00 <HAL_TIM_ConfigClockSource+0x208>)
 800c866:	4293      	cmp	r3, r2
 800c868:	f200 80b6 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c86c:	4a65      	ldr	r2, [pc, #404]	; (800ca04 <HAL_TIM_ConfigClockSource+0x20c>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	f000 80a9 	beq.w	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c874:	4a63      	ldr	r2, [pc, #396]	; (800ca04 <HAL_TIM_ConfigClockSource+0x20c>)
 800c876:	4293      	cmp	r3, r2
 800c878:	f200 80ae 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c87c:	4a62      	ldr	r2, [pc, #392]	; (800ca08 <HAL_TIM_ConfigClockSource+0x210>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	f000 80a1 	beq.w	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c884:	4a60      	ldr	r2, [pc, #384]	; (800ca08 <HAL_TIM_ConfigClockSource+0x210>)
 800c886:	4293      	cmp	r3, r2
 800c888:	f200 80a6 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c88c:	4a5f      	ldr	r2, [pc, #380]	; (800ca0c <HAL_TIM_ConfigClockSource+0x214>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	f000 8099 	beq.w	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c894:	4a5d      	ldr	r2, [pc, #372]	; (800ca0c <HAL_TIM_ConfigClockSource+0x214>)
 800c896:	4293      	cmp	r3, r2
 800c898:	f200 809e 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c89c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c8a0:	f000 8091 	beq.w	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c8a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c8a8:	f200 8096 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8b0:	f000 8089 	beq.w	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c8b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8b8:	f200 808e 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8c0:	d03e      	beq.n	800c940 <HAL_TIM_ConfigClockSource+0x148>
 800c8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8c6:	f200 8087 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8ce:	f000 8086 	beq.w	800c9de <HAL_TIM_ConfigClockSource+0x1e6>
 800c8d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8d6:	d87f      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8d8:	2b70      	cmp	r3, #112	; 0x70
 800c8da:	d01a      	beq.n	800c912 <HAL_TIM_ConfigClockSource+0x11a>
 800c8dc:	2b70      	cmp	r3, #112	; 0x70
 800c8de:	d87b      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8e0:	2b60      	cmp	r3, #96	; 0x60
 800c8e2:	d050      	beq.n	800c986 <HAL_TIM_ConfigClockSource+0x18e>
 800c8e4:	2b60      	cmp	r3, #96	; 0x60
 800c8e6:	d877      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8e8:	2b50      	cmp	r3, #80	; 0x50
 800c8ea:	d03c      	beq.n	800c966 <HAL_TIM_ConfigClockSource+0x16e>
 800c8ec:	2b50      	cmp	r3, #80	; 0x50
 800c8ee:	d873      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8f0:	2b40      	cmp	r3, #64	; 0x40
 800c8f2:	d058      	beq.n	800c9a6 <HAL_TIM_ConfigClockSource+0x1ae>
 800c8f4:	2b40      	cmp	r3, #64	; 0x40
 800c8f6:	d86f      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c8f8:	2b30      	cmp	r3, #48	; 0x30
 800c8fa:	d064      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c8fc:	2b30      	cmp	r3, #48	; 0x30
 800c8fe:	d86b      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c900:	2b20      	cmp	r3, #32
 800c902:	d060      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c904:	2b20      	cmp	r3, #32
 800c906:	d867      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d05c      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c90c:	2b10      	cmp	r3, #16
 800c90e:	d05a      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x1ce>
 800c910:	e062      	b.n	800c9d8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	6899      	ldr	r1, [r3, #8]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	685a      	ldr	r2, [r3, #4]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f000 fceb 	bl	800d2fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	609a      	str	r2, [r3, #8]
      break;
 800c93e:	e04f      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	6899      	ldr	r1, [r3, #8]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	f000 fcd4 	bl	800d2fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c962:	609a      	str	r2, [r3, #8]
      break;
 800c964:	e03c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	6859      	ldr	r1, [r3, #4]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	461a      	mov	r2, r3
 800c974:	f000 fc46 	bl	800d204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2150      	movs	r1, #80	; 0x50
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 fc9f 	bl	800d2c2 <TIM_ITRx_SetConfig>
      break;
 800c984:	e02c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6818      	ldr	r0, [r3, #0]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	6859      	ldr	r1, [r3, #4]
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	461a      	mov	r2, r3
 800c994:	f000 fc65 	bl	800d262 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2160      	movs	r1, #96	; 0x60
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 fc8f 	bl	800d2c2 <TIM_ITRx_SetConfig>
      break;
 800c9a4:	e01c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6818      	ldr	r0, [r3, #0]
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	6859      	ldr	r1, [r3, #4]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	f000 fc26 	bl	800d204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2140      	movs	r1, #64	; 0x40
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 fc7f 	bl	800d2c2 <TIM_ITRx_SetConfig>
      break;
 800c9c4:	e00c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f000 fc76 	bl	800d2c2 <TIM_ITRx_SetConfig>
      break;
 800c9d6:	e003      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]
      break;
 800c9dc:	e000      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800c9de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	00100070 	.word	0x00100070
 800ca00:	00100050 	.word	0x00100050
 800ca04:	00100040 	.word	0x00100040
 800ca08:	00100030 	.word	0x00100030
 800ca0c:	00100020 	.word	0x00100020

0800ca10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a46      	ldr	r2, [pc, #280]	; (800cb8c <TIM_Base_SetConfig+0x12c>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d017      	beq.n	800caa8 <TIM_Base_SetConfig+0x48>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca7e:	d013      	beq.n	800caa8 <TIM_Base_SetConfig+0x48>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a43      	ldr	r2, [pc, #268]	; (800cb90 <TIM_Base_SetConfig+0x130>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d00f      	beq.n	800caa8 <TIM_Base_SetConfig+0x48>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a42      	ldr	r2, [pc, #264]	; (800cb94 <TIM_Base_SetConfig+0x134>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d00b      	beq.n	800caa8 <TIM_Base_SetConfig+0x48>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a41      	ldr	r2, [pc, #260]	; (800cb98 <TIM_Base_SetConfig+0x138>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d007      	beq.n	800caa8 <TIM_Base_SetConfig+0x48>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a40      	ldr	r2, [pc, #256]	; (800cb9c <TIM_Base_SetConfig+0x13c>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d003      	beq.n	800caa8 <TIM_Base_SetConfig+0x48>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a3f      	ldr	r2, [pc, #252]	; (800cba0 <TIM_Base_SetConfig+0x140>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d108      	bne.n	800caba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4a33      	ldr	r2, [pc, #204]	; (800cb8c <TIM_Base_SetConfig+0x12c>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d023      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cac8:	d01f      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4a30      	ldr	r2, [pc, #192]	; (800cb90 <TIM_Base_SetConfig+0x130>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d01b      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4a2f      	ldr	r2, [pc, #188]	; (800cb94 <TIM_Base_SetConfig+0x134>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d017      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a2e      	ldr	r2, [pc, #184]	; (800cb98 <TIM_Base_SetConfig+0x138>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d013      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a2d      	ldr	r2, [pc, #180]	; (800cb9c <TIM_Base_SetConfig+0x13c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d00f      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a2d      	ldr	r2, [pc, #180]	; (800cba4 <TIM_Base_SetConfig+0x144>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d00b      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a2c      	ldr	r2, [pc, #176]	; (800cba8 <TIM_Base_SetConfig+0x148>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d007      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a2b      	ldr	r2, [pc, #172]	; (800cbac <TIM_Base_SetConfig+0x14c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d003      	beq.n	800cb0a <TIM_Base_SetConfig+0xaa>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a26      	ldr	r2, [pc, #152]	; (800cba0 <TIM_Base_SetConfig+0x140>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d108      	bne.n	800cb1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	695b      	ldr	r3, [r3, #20]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	689a      	ldr	r2, [r3, #8]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a12      	ldr	r2, [pc, #72]	; (800cb8c <TIM_Base_SetConfig+0x12c>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d013      	beq.n	800cb70 <TIM_Base_SetConfig+0x110>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a14      	ldr	r2, [pc, #80]	; (800cb9c <TIM_Base_SetConfig+0x13c>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d00f      	beq.n	800cb70 <TIM_Base_SetConfig+0x110>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a14      	ldr	r2, [pc, #80]	; (800cba4 <TIM_Base_SetConfig+0x144>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d00b      	beq.n	800cb70 <TIM_Base_SetConfig+0x110>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a13      	ldr	r2, [pc, #76]	; (800cba8 <TIM_Base_SetConfig+0x148>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d007      	beq.n	800cb70 <TIM_Base_SetConfig+0x110>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a12      	ldr	r2, [pc, #72]	; (800cbac <TIM_Base_SetConfig+0x14c>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d003      	beq.n	800cb70 <TIM_Base_SetConfig+0x110>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a0d      	ldr	r2, [pc, #52]	; (800cba0 <TIM_Base_SetConfig+0x140>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d103      	bne.n	800cb78 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	691a      	ldr	r2, [r3, #16]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	615a      	str	r2, [r3, #20]
}
 800cb7e:	bf00      	nop
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	40012c00 	.word	0x40012c00
 800cb90:	40000400 	.word	0x40000400
 800cb94:	40000800 	.word	0x40000800
 800cb98:	40000c00 	.word	0x40000c00
 800cb9c:	40013400 	.word	0x40013400
 800cba0:	40015000 	.word	0x40015000
 800cba4:	40014000 	.word	0x40014000
 800cba8:	40014400 	.word	0x40014400
 800cbac:	40014800 	.word	0x40014800

0800cbb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	f023 0201 	bic.w	r2, r3, #1
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0303 	bic.w	r3, r3, #3
 800cbea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	f023 0302 	bic.w	r3, r3, #2
 800cbfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	697a      	ldr	r2, [r7, #20]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a30      	ldr	r2, [pc, #192]	; (800cccc <TIM_OC1_SetConfig+0x11c>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d013      	beq.n	800cc38 <TIM_OC1_SetConfig+0x88>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a2f      	ldr	r2, [pc, #188]	; (800ccd0 <TIM_OC1_SetConfig+0x120>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d00f      	beq.n	800cc38 <TIM_OC1_SetConfig+0x88>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a2e      	ldr	r2, [pc, #184]	; (800ccd4 <TIM_OC1_SetConfig+0x124>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d00b      	beq.n	800cc38 <TIM_OC1_SetConfig+0x88>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a2d      	ldr	r2, [pc, #180]	; (800ccd8 <TIM_OC1_SetConfig+0x128>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d007      	beq.n	800cc38 <TIM_OC1_SetConfig+0x88>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a2c      	ldr	r2, [pc, #176]	; (800ccdc <TIM_OC1_SetConfig+0x12c>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d003      	beq.n	800cc38 <TIM_OC1_SetConfig+0x88>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a2b      	ldr	r2, [pc, #172]	; (800cce0 <TIM_OC1_SetConfig+0x130>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d10c      	bne.n	800cc52 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f023 0308 	bic.w	r3, r3, #8
 800cc3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	697a      	ldr	r2, [r7, #20]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f023 0304 	bic.w	r3, r3, #4
 800cc50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a1d      	ldr	r2, [pc, #116]	; (800cccc <TIM_OC1_SetConfig+0x11c>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d013      	beq.n	800cc82 <TIM_OC1_SetConfig+0xd2>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a1c      	ldr	r2, [pc, #112]	; (800ccd0 <TIM_OC1_SetConfig+0x120>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d00f      	beq.n	800cc82 <TIM_OC1_SetConfig+0xd2>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a1b      	ldr	r2, [pc, #108]	; (800ccd4 <TIM_OC1_SetConfig+0x124>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d00b      	beq.n	800cc82 <TIM_OC1_SetConfig+0xd2>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a1a      	ldr	r2, [pc, #104]	; (800ccd8 <TIM_OC1_SetConfig+0x128>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d007      	beq.n	800cc82 <TIM_OC1_SetConfig+0xd2>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a19      	ldr	r2, [pc, #100]	; (800ccdc <TIM_OC1_SetConfig+0x12c>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d003      	beq.n	800cc82 <TIM_OC1_SetConfig+0xd2>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a18      	ldr	r2, [pc, #96]	; (800cce0 <TIM_OC1_SetConfig+0x130>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d111      	bne.n	800cca6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	693a      	ldr	r2, [r7, #16]
 800ccaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	621a      	str	r2, [r3, #32]
}
 800ccc0:	bf00      	nop
 800ccc2:	371c      	adds	r7, #28
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	40012c00 	.word	0x40012c00
 800ccd0:	40013400 	.word	0x40013400
 800ccd4:	40014000 	.word	0x40014000
 800ccd8:	40014400 	.word	0x40014400
 800ccdc:	40014800 	.word	0x40014800
 800cce0:	40015000 	.word	0x40015000

0800cce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b087      	sub	sp, #28
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	f023 0210 	bic.w	r2, r3, #16
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	f023 0320 	bic.w	r3, r3, #32
 800cd32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	011b      	lsls	r3, r3, #4
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a2c      	ldr	r2, [pc, #176]	; (800cdf4 <TIM_OC2_SetConfig+0x110>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d007      	beq.n	800cd58 <TIM_OC2_SetConfig+0x74>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a2b      	ldr	r2, [pc, #172]	; (800cdf8 <TIM_OC2_SetConfig+0x114>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d003      	beq.n	800cd58 <TIM_OC2_SetConfig+0x74>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a2a      	ldr	r2, [pc, #168]	; (800cdfc <TIM_OC2_SetConfig+0x118>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d10d      	bne.n	800cd74 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	011b      	lsls	r3, r3, #4
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a1f      	ldr	r2, [pc, #124]	; (800cdf4 <TIM_OC2_SetConfig+0x110>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d013      	beq.n	800cda4 <TIM_OC2_SetConfig+0xc0>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a1e      	ldr	r2, [pc, #120]	; (800cdf8 <TIM_OC2_SetConfig+0x114>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d00f      	beq.n	800cda4 <TIM_OC2_SetConfig+0xc0>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a1e      	ldr	r2, [pc, #120]	; (800ce00 <TIM_OC2_SetConfig+0x11c>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d00b      	beq.n	800cda4 <TIM_OC2_SetConfig+0xc0>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a1d      	ldr	r2, [pc, #116]	; (800ce04 <TIM_OC2_SetConfig+0x120>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d007      	beq.n	800cda4 <TIM_OC2_SetConfig+0xc0>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a1c      	ldr	r2, [pc, #112]	; (800ce08 <TIM_OC2_SetConfig+0x124>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d003      	beq.n	800cda4 <TIM_OC2_SetConfig+0xc0>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a17      	ldr	r2, [pc, #92]	; (800cdfc <TIM_OC2_SetConfig+0x118>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d113      	bne.n	800cdcc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	697a      	ldr	r2, [r7, #20]
 800cde4:	621a      	str	r2, [r3, #32]
}
 800cde6:	bf00      	nop
 800cde8:	371c      	adds	r7, #28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	40012c00 	.word	0x40012c00
 800cdf8:	40013400 	.word	0x40013400
 800cdfc:	40015000 	.word	0x40015000
 800ce00:	40014000 	.word	0x40014000
 800ce04:	40014400 	.word	0x40014400
 800ce08:	40014800 	.word	0x40014800

0800ce0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	69db      	ldr	r3, [r3, #28]
 800ce32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f023 0303 	bic.w	r3, r3, #3
 800ce46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	021b      	lsls	r3, r3, #8
 800ce60:	697a      	ldr	r2, [r7, #20]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a2b      	ldr	r2, [pc, #172]	; (800cf18 <TIM_OC3_SetConfig+0x10c>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d007      	beq.n	800ce7e <TIM_OC3_SetConfig+0x72>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4a2a      	ldr	r2, [pc, #168]	; (800cf1c <TIM_OC3_SetConfig+0x110>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d003      	beq.n	800ce7e <TIM_OC3_SetConfig+0x72>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a29      	ldr	r2, [pc, #164]	; (800cf20 <TIM_OC3_SetConfig+0x114>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d10d      	bne.n	800ce9a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	021b      	lsls	r3, r3, #8
 800ce8c:	697a      	ldr	r2, [r7, #20]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a1e      	ldr	r2, [pc, #120]	; (800cf18 <TIM_OC3_SetConfig+0x10c>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d013      	beq.n	800ceca <TIM_OC3_SetConfig+0xbe>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a1d      	ldr	r2, [pc, #116]	; (800cf1c <TIM_OC3_SetConfig+0x110>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d00f      	beq.n	800ceca <TIM_OC3_SetConfig+0xbe>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a1d      	ldr	r2, [pc, #116]	; (800cf24 <TIM_OC3_SetConfig+0x118>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d00b      	beq.n	800ceca <TIM_OC3_SetConfig+0xbe>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a1c      	ldr	r2, [pc, #112]	; (800cf28 <TIM_OC3_SetConfig+0x11c>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d007      	beq.n	800ceca <TIM_OC3_SetConfig+0xbe>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a1b      	ldr	r2, [pc, #108]	; (800cf2c <TIM_OC3_SetConfig+0x120>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d003      	beq.n	800ceca <TIM_OC3_SetConfig+0xbe>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a16      	ldr	r2, [pc, #88]	; (800cf20 <TIM_OC3_SetConfig+0x114>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d113      	bne.n	800cef2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ced0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ced8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	011b      	lsls	r3, r3, #4
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	011b      	lsls	r3, r3, #4
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	685a      	ldr	r2, [r3, #4]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	697a      	ldr	r2, [r7, #20]
 800cf0a:	621a      	str	r2, [r3, #32]
}
 800cf0c:	bf00      	nop
 800cf0e:	371c      	adds	r7, #28
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	40012c00 	.word	0x40012c00
 800cf1c:	40013400 	.word	0x40013400
 800cf20:	40015000 	.word	0x40015000
 800cf24:	40014000 	.word	0x40014000
 800cf28:	40014400 	.word	0x40014400
 800cf2c:	40014800 	.word	0x40014800

0800cf30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b087      	sub	sp, #28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	021b      	lsls	r3, r3, #8
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	031b      	lsls	r3, r3, #12
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4a2c      	ldr	r2, [pc, #176]	; (800d040 <TIM_OC4_SetConfig+0x110>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d007      	beq.n	800cfa4 <TIM_OC4_SetConfig+0x74>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a2b      	ldr	r2, [pc, #172]	; (800d044 <TIM_OC4_SetConfig+0x114>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d003      	beq.n	800cfa4 <TIM_OC4_SetConfig+0x74>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a2a      	ldr	r2, [pc, #168]	; (800d048 <TIM_OC4_SetConfig+0x118>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d10d      	bne.n	800cfc0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	031b      	lsls	r3, r3, #12
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a1f      	ldr	r2, [pc, #124]	; (800d040 <TIM_OC4_SetConfig+0x110>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d013      	beq.n	800cff0 <TIM_OC4_SetConfig+0xc0>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a1e      	ldr	r2, [pc, #120]	; (800d044 <TIM_OC4_SetConfig+0x114>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d00f      	beq.n	800cff0 <TIM_OC4_SetConfig+0xc0>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a1e      	ldr	r2, [pc, #120]	; (800d04c <TIM_OC4_SetConfig+0x11c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d00b      	beq.n	800cff0 <TIM_OC4_SetConfig+0xc0>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a1d      	ldr	r2, [pc, #116]	; (800d050 <TIM_OC4_SetConfig+0x120>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d007      	beq.n	800cff0 <TIM_OC4_SetConfig+0xc0>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a1c      	ldr	r2, [pc, #112]	; (800d054 <TIM_OC4_SetConfig+0x124>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d003      	beq.n	800cff0 <TIM_OC4_SetConfig+0xc0>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a17      	ldr	r2, [pc, #92]	; (800d048 <TIM_OC4_SetConfig+0x118>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d113      	bne.n	800d018 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cff6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cffe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	695b      	ldr	r3, [r3, #20]
 800d004:	019b      	lsls	r3, r3, #6
 800d006:	693a      	ldr	r2, [r7, #16]
 800d008:	4313      	orrs	r3, r2
 800d00a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	019b      	lsls	r3, r3, #6
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	4313      	orrs	r3, r2
 800d016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	621a      	str	r2, [r3, #32]
}
 800d032:	bf00      	nop
 800d034:	371c      	adds	r7, #28
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	40012c00 	.word	0x40012c00
 800d044:	40013400 	.word	0x40013400
 800d048:	40015000 	.word	0x40015000
 800d04c:	40014000 	.word	0x40014000
 800d050:	40014400 	.word	0x40014400
 800d054:	40014800 	.word	0x40014800

0800d058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d058:	b480      	push	{r7}
 800d05a:	b087      	sub	sp, #28
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	4313      	orrs	r3, r2
 800d094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d09c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	041b      	lsls	r3, r3, #16
 800d0a4:	693a      	ldr	r2, [r7, #16]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a19      	ldr	r2, [pc, #100]	; (800d114 <TIM_OC5_SetConfig+0xbc>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d013      	beq.n	800d0da <TIM_OC5_SetConfig+0x82>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a18      	ldr	r2, [pc, #96]	; (800d118 <TIM_OC5_SetConfig+0xc0>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d00f      	beq.n	800d0da <TIM_OC5_SetConfig+0x82>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a17      	ldr	r2, [pc, #92]	; (800d11c <TIM_OC5_SetConfig+0xc4>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d00b      	beq.n	800d0da <TIM_OC5_SetConfig+0x82>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a16      	ldr	r2, [pc, #88]	; (800d120 <TIM_OC5_SetConfig+0xc8>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d007      	beq.n	800d0da <TIM_OC5_SetConfig+0x82>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4a15      	ldr	r2, [pc, #84]	; (800d124 <TIM_OC5_SetConfig+0xcc>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d003      	beq.n	800d0da <TIM_OC5_SetConfig+0x82>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a14      	ldr	r2, [pc, #80]	; (800d128 <TIM_OC5_SetConfig+0xd0>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d109      	bne.n	800d0ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	021b      	lsls	r3, r3, #8
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	697a      	ldr	r2, [r7, #20]
 800d0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	685a      	ldr	r2, [r3, #4]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	693a      	ldr	r2, [r7, #16]
 800d106:	621a      	str	r2, [r3, #32]
}
 800d108:	bf00      	nop
 800d10a:	371c      	adds	r7, #28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	40012c00 	.word	0x40012c00
 800d118:	40013400 	.word	0x40013400
 800d11c:	40014000 	.word	0x40014000
 800d120:	40014400 	.word	0x40014400
 800d124:	40014800 	.word	0x40014800
 800d128:	40015000 	.word	0x40015000

0800d12c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d15e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	021b      	lsls	r3, r3, #8
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	4313      	orrs	r3, r2
 800d16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	051b      	lsls	r3, r3, #20
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a1a      	ldr	r2, [pc, #104]	; (800d1ec <TIM_OC6_SetConfig+0xc0>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d013      	beq.n	800d1b0 <TIM_OC6_SetConfig+0x84>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a19      	ldr	r2, [pc, #100]	; (800d1f0 <TIM_OC6_SetConfig+0xc4>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d00f      	beq.n	800d1b0 <TIM_OC6_SetConfig+0x84>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a18      	ldr	r2, [pc, #96]	; (800d1f4 <TIM_OC6_SetConfig+0xc8>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d00b      	beq.n	800d1b0 <TIM_OC6_SetConfig+0x84>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a17      	ldr	r2, [pc, #92]	; (800d1f8 <TIM_OC6_SetConfig+0xcc>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d007      	beq.n	800d1b0 <TIM_OC6_SetConfig+0x84>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a16      	ldr	r2, [pc, #88]	; (800d1fc <TIM_OC6_SetConfig+0xd0>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d003      	beq.n	800d1b0 <TIM_OC6_SetConfig+0x84>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a15      	ldr	r2, [pc, #84]	; (800d200 <TIM_OC6_SetConfig+0xd4>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d109      	bne.n	800d1c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	029b      	lsls	r3, r3, #10
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	621a      	str	r2, [r3, #32]
}
 800d1de:	bf00      	nop
 800d1e0:	371c      	adds	r7, #28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	40012c00 	.word	0x40012c00
 800d1f0:	40013400 	.word	0x40013400
 800d1f4:	40014000 	.word	0x40014000
 800d1f8:	40014400 	.word	0x40014400
 800d1fc:	40014800 	.word	0x40014800
 800d200:	40015000 	.word	0x40015000

0800d204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6a1b      	ldr	r3, [r3, #32]
 800d214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	f023 0201 	bic.w	r2, r3, #1
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d22e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	011b      	lsls	r3, r3, #4
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	4313      	orrs	r3, r2
 800d238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	f023 030a 	bic.w	r3, r3, #10
 800d240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	4313      	orrs	r3, r2
 800d248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	621a      	str	r2, [r3, #32]
}
 800d256:	bf00      	nop
 800d258:	371c      	adds	r7, #28
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d262:	b480      	push	{r7}
 800d264:	b087      	sub	sp, #28
 800d266:	af00      	add	r7, sp, #0
 800d268:	60f8      	str	r0, [r7, #12]
 800d26a:	60b9      	str	r1, [r7, #8]
 800d26c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	f023 0210 	bic.w	r2, r3, #16
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6a1b      	ldr	r3, [r3, #32]
 800d284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d28c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	031b      	lsls	r3, r3, #12
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	4313      	orrs	r3, r2
 800d296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d29e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	011b      	lsls	r3, r3, #4
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	621a      	str	r2, [r3, #32]
}
 800d2b6:	bf00      	nop
 800d2b8:	371c      	adds	r7, #28
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d2c2:	b480      	push	{r7}
 800d2c4:	b085      	sub	sp, #20
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f043 0307 	orr.w	r3, r3, #7
 800d2e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	609a      	str	r2, [r3, #8]
}
 800d2f0:	bf00      	nop
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	021a      	lsls	r2, r3, #8
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	431a      	orrs	r2, r3
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	4313      	orrs	r3, r2
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	4313      	orrs	r3, r2
 800d328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	609a      	str	r2, [r3, #8]
}
 800d330:	bf00      	nop
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b087      	sub	sp, #28
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f003 031f 	and.w	r3, r3, #31
 800d34e:	2201      	movs	r2, #1
 800d350:	fa02 f303 	lsl.w	r3, r2, r3
 800d354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6a1a      	ldr	r2, [r3, #32]
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	43db      	mvns	r3, r3
 800d35e:	401a      	ands	r2, r3
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6a1a      	ldr	r2, [r3, #32]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f003 031f 	and.w	r3, r3, #31
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	fa01 f303 	lsl.w	r3, r1, r3
 800d374:	431a      	orrs	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	621a      	str	r2, [r3, #32]
}
 800d37a:	bf00      	nop
 800d37c:	371c      	adds	r7, #28
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d101      	bne.n	800d3a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d39c:	2302      	movs	r3, #2
 800d39e:	e074      	b.n	800d48a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a34      	ldr	r2, [pc, #208]	; (800d498 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d009      	beq.n	800d3de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a33      	ldr	r2, [pc, #204]	; (800d49c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d004      	beq.n	800d3de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a31      	ldr	r2, [pc, #196]	; (800d4a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d108      	bne.n	800d3f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d3e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	4313      	orrs	r3, r2
 800d404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a21      	ldr	r2, [pc, #132]	; (800d498 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d022      	beq.n	800d45e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d420:	d01d      	beq.n	800d45e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a1f      	ldr	r2, [pc, #124]	; (800d4a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d018      	beq.n	800d45e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a1d      	ldr	r2, [pc, #116]	; (800d4a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d013      	beq.n	800d45e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a1c      	ldr	r2, [pc, #112]	; (800d4ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d00e      	beq.n	800d45e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a15      	ldr	r2, [pc, #84]	; (800d49c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d009      	beq.n	800d45e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a18      	ldr	r2, [pc, #96]	; (800d4b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d004      	beq.n	800d45e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a11      	ldr	r2, [pc, #68]	; (800d4a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d10c      	bne.n	800d478 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	40012c00 	.word	0x40012c00
 800d49c:	40013400 	.word	0x40013400
 800d4a0:	40015000 	.word	0x40015000
 800d4a4:	40000400 	.word	0x40000400
 800d4a8:	40000800 	.word	0x40000800
 800d4ac:	40000c00 	.word	0x40000c00
 800d4b0:	40014000 	.word	0x40014000

0800d4b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d50c:	bf00      	nop
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	6812      	ldr	r2, [r2, #0]
 800d558:	f023 0101 	bic.w	r1, r3, #1
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	2b08      	cmp	r3, #8
 800d568:	d102      	bne.n	800d570 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d56a:	2340      	movs	r3, #64	; 0x40
 800d56c:	617b      	str	r3, [r7, #20]
 800d56e:	e001      	b.n	800d574 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d570:	2300      	movs	r3, #0
 800d572:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d580:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d586:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d58c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d592:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d598:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d59e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d5a4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d5aa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d5b0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5be:	693a      	ldr	r2, [r7, #16]
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c8:	693a      	ldr	r2, [r7, #16]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	693a      	ldr	r2, [r7, #16]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800d5e2:	4b3d      	ldr	r3, [pc, #244]	; (800d6d8 <FMC_NORSRAM_Init+0x198>)
 800d5e4:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5ec:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5f4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800d5fc:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d604:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	43db      	mvns	r3, r3
 800d614:	ea02 0103 	and.w	r1, r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	4319      	orrs	r1, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d62e:	d10c      	bne.n	800d64a <FMC_NORSRAM_Init+0x10a>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d008      	beq.n	800d64a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d644:	431a      	orrs	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d006      	beq.n	800d660 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d65a:	431a      	orrs	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d666:	2b01      	cmp	r3, #1
 800d668:	d12f      	bne.n	800d6ca <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	0c1b      	lsrs	r3, r3, #16
 800d670:	041b      	lsls	r3, r3, #16
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b04      	cmp	r3, #4
 800d682:	d014      	beq.n	800d6ae <FMC_NORSRAM_Init+0x16e>
 800d684:	2b04      	cmp	r3, #4
 800d686:	d819      	bhi.n	800d6bc <FMC_NORSRAM_Init+0x17c>
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <FMC_NORSRAM_Init+0x152>
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d007      	beq.n	800d6a0 <FMC_NORSRAM_Init+0x160>
 800d690:	e014      	b.n	800d6bc <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	621a      	str	r2, [r3, #32]
        break;
 800d69e:	e014      	b.n	800d6ca <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a1b      	ldr	r3, [r3, #32]
 800d6a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	621a      	str	r2, [r3, #32]
        break;
 800d6ac:	e00d      	b.n	800d6ca <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	621a      	str	r2, [r3, #32]
        break;
 800d6ba:	e006      	b.n	800d6ca <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	621a      	str	r2, [r3, #32]
        break;
 800d6c8:	bf00      	nop
    }
  }

  return HAL_OK;
 800d6ca:	2300      	movs	r3, #0
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	371c      	adds	r7, #28
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	0008fb7f 	.word	0x0008fb7f

0800d6dc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	011b      	lsls	r3, r3, #4
 800d6fc:	431a      	orrs	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	021b      	lsls	r3, r3, #8
 800d704:	431a      	orrs	r2, r3
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	079b      	lsls	r3, r3, #30
 800d70c:	431a      	orrs	r2, r3
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	041b      	lsls	r3, r3, #16
 800d714:	431a      	orrs	r2, r3
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	051b      	lsls	r3, r3, #20
 800d71e:	431a      	orrs	r2, r3
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	3b02      	subs	r3, #2
 800d726:	061b      	lsls	r3, r3, #24
 800d728:	ea42 0103 	orr.w	r1, r2, r3
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	69db      	ldr	r3, [r3, #28]
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	3201      	adds	r2, #1
 800d734:	4319      	orrs	r1, r3
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d748:	d113      	bne.n	800d772 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d752:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	3b01      	subs	r3, #1
 800d75a:	051b      	lsls	r3, r3, #20
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	4313      	orrs	r3, r2
 800d760:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	431a      	orrs	r2, r3
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	371c      	adds	r7, #28
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d794:	d121      	bne.n	800d7da <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	6819      	ldr	r1, [r3, #0]
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	011b      	lsls	r3, r3, #4
 800d7ac:	4319      	orrs	r1, r3
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	021b      	lsls	r3, r3, #8
 800d7b4:	4319      	orrs	r1, r3
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	079b      	lsls	r3, r3, #30
 800d7bc:	4319      	orrs	r1, r3
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	69db      	ldr	r3, [r3, #28]
 800d7c2:	4319      	orrs	r1, r3
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	041b      	lsls	r3, r3, #16
 800d7ca:	430b      	orrs	r3, r1
 800d7cc:	ea42 0103 	orr.w	r1, r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d7d8:	e005      	b.n	800d7e6 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d7e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3714      	adds	r7, #20
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <setpixel>:
#include "framebuf.h"

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

void setpixel(const tFramebuf *fb, unsigned int x, unsigned int y, uint32_t col) {
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
 800d800:	603b      	str	r3, [r7, #0]
	((uint16_t *)fb->buf)[x + y * fb->stride] = col;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	891b      	ldrh	r3, [r3, #8]
 800d80a:	4619      	mov	r1, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	fb03 f101 	mul.w	r1, r3, r1
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	440b      	add	r3, r1
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	4413      	add	r3, r2
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	b292      	uxth	r2, r2
 800d81e:	801a      	strh	r2, [r3, #0]
}
 800d820:	bf00      	nop
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <setpixel_checked>:

void setpixel_checked(const tFramebuf *fb, int x, int y, int col, int mask) {
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	603b      	str	r3, [r7, #0]
    if (mask && 0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d017      	beq.n	800d870 <setpixel_checked+0x44>
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	db14      	blt.n	800d870 <setpixel_checked+0x44>
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	889b      	ldrh	r3, [r3, #4]
 800d84a:	461a      	mov	r2, r3
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	4293      	cmp	r3, r2
 800d850:	da0e      	bge.n	800d870 <setpixel_checked+0x44>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	db0b      	blt.n	800d870 <setpixel_checked+0x44>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	88db      	ldrh	r3, [r3, #6]
 800d85c:	461a      	mov	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4293      	cmp	r3, r2
 800d862:	da05      	bge.n	800d870 <setpixel_checked+0x44>
        setpixel(fb, x, y, col);
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f7ff ffc2 	bl	800d7f4 <setpixel>
    }
}
 800d870:	bf00      	nop
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <fill_rect>:

uint32_t getpixel(const tFramebuf *fb, unsigned int x, unsigned int y) {
	return ((uint16_t *)fb->buf)[x + y * fb->stride];
}

void fill_rect(const tFramebuf *fb, int x, int y, int w, int h, uint32_t col) {
 800d878:	b480      	push	{r7}
 800d87a:	b089      	sub	sp, #36	; 0x24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	603b      	str	r3, [r7, #0]
    if (h < 1 || w < 1 || x + w <= 0 || y + h <= 0 || y >= fb->height || x >= fb->width) {
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	2b00      	cmp	r3, #0
 800d88a:	dd66      	ble.n	800d95a <fill_rect+0xe2>
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dd63      	ble.n	800d95a <fill_rect+0xe2>
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	4413      	add	r3, r2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	dd5e      	ble.n	800d95a <fill_rect+0xe2>
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	4413      	add	r3, r2
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	dd59      	ble.n	800d95a <fill_rect+0xe2>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	88db      	ldrh	r3, [r3, #6]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	da53      	bge.n	800d95a <fill_rect+0xe2>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	889b      	ldrh	r3, [r3, #4]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	da4d      	bge.n	800d95a <fill_rect+0xe2>
        // No operation needed.
        return;
    }

    // clip to the framebuffer
    int xend = MIN(fb->width, x + w);
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	8892      	ldrh	r2, [r2, #4]
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	bfa8      	it	ge
 800d8cc:	4613      	movge	r3, r2
 800d8ce:	617b      	str	r3, [r7, #20]
    int yend = MIN(fb->height, y + h);
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	4413      	add	r3, r2
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	88d2      	ldrh	r2, [r2, #6]
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	bfa8      	it	ge
 800d8de:	4613      	movge	r3, r2
 800d8e0:	613b      	str	r3, [r7, #16]
    x = MAX(x, 0);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d8e8:	60bb      	str	r3, [r7, #8]
    y = MAX(y, 0);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d8f0:	607b      	str	r3, [r7, #4]

    w = xend - x;
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	603b      	str	r3, [r7, #0]
    h = yend - y;
 800d8fa:	693a      	ldr	r2, [r7, #16]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *b = &((uint16_t *)fb->buf)[x + y * fb->stride];
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	891b      	ldrh	r3, [r3, #8]
 800d90a:	4619      	mov	r1, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	fb03 f101 	mul.w	r1, r3, r1
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	440b      	add	r3, r1
 800d916:	005b      	lsls	r3, r3, #1
 800d918:	4413      	add	r3, r2
 800d91a:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800d91c:	e017      	b.n	800d94e <fill_rect+0xd6>
    	for (unsigned int ww = w; ww; --ww) {
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	61bb      	str	r3, [r7, #24]
 800d922:	e008      	b.n	800d936 <fill_rect+0xbe>
            *b++ = col;
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	1c9a      	adds	r2, r3, #2
 800d928:	61fa      	str	r2, [r7, #28]
 800d92a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d92c:	b292      	uxth	r2, r2
 800d92e:	801a      	strh	r2, [r3, #0]
    	for (unsigned int ww = w; ww; --ww) {
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	3b01      	subs	r3, #1
 800d934:	61bb      	str	r3, [r7, #24]
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1f3      	bne.n	800d924 <fill_rect+0xac>
        }
        b += fb->stride - w;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	891b      	ldrh	r3, [r3, #8]
 800d940:	461a      	mov	r2, r3
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	69fa      	ldr	r2, [r7, #28]
 800d94a:	4413      	add	r3, r2
 800d94c:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d950:	1e5a      	subs	r2, r3, #1
 800d952:	62ba      	str	r2, [r7, #40]	; 0x28
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1e2      	bne.n	800d91e <fill_rect+0xa6>
 800d958:	e000      	b.n	800d95c <fill_rect+0xe4>
        return;
 800d95a:	bf00      	nop
    }

}
 800d95c:	3724      	adds	r7, #36	; 0x24
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <framebuf_init>:

void framebuf_init(tFramebuf *fb, uint16_t width, uint16_t height, char *buf ) {
 800d966:	b480      	push	{r7}
 800d968:	b085      	sub	sp, #20
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	607b      	str	r3, [r7, #4]
 800d970:	460b      	mov	r3, r1
 800d972:	817b      	strh	r3, [r7, #10]
 800d974:	4613      	mov	r3, r2
 800d976:	813b      	strh	r3, [r7, #8]
    fb->width = width;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	897a      	ldrh	r2, [r7, #10]
 800d97c:	809a      	strh	r2, [r3, #4]
    fb->height = height;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	893a      	ldrh	r2, [r7, #8]
 800d982:	80da      	strh	r2, [r3, #6]
	fb->buf = buf;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	601a      	str	r2, [r3, #0]
	fb->stride = fb->width;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	889a      	ldrh	r2, [r3, #4]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	811a      	strh	r2, [r3, #8]
}
 800d992:	bf00      	nop
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <framebuf_fill>:

void framebuf_fill( const tFramebuf *fb, uint32_t col ) {
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	af02      	add	r7, sp, #8
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
    fill_rect( fb, 0, 0, fb->width, fb->height, col);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	889b      	ldrh	r3, [r3, #4]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	88db      	ldrh	r3, [r3, #6]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	9301      	str	r3, [sp, #4]
 800d9b8:	9200      	str	r2, [sp, #0]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2100      	movs	r1, #0
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff ff59 	bl	800d878 <fill_rect>
}
 800d9c6:	bf00      	nop
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <framebuf_fill_rect>:

void framebuf_fill_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b086      	sub	sp, #24
 800d9d2:	af02      	add	r7, sp, #8
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	60b9      	str	r1, [r7, #8]
 800d9d8:	607a      	str	r2, [r7, #4]
 800d9da:	603b      	str	r3, [r7, #0]
    fill_rect( fb, x, y, w, h, col );
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	9301      	str	r3, [sp, #4]
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	68b9      	ldr	r1, [r7, #8]
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7ff ff44 	bl	800d878 <fill_rect>
}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <framebuf_pixel>:

void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
    if (0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	db14      	blt.n	800da36 <framebuf_pixel+0x3e>
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	889b      	ldrh	r3, [r3, #4]
 800da10:	461a      	mov	r2, r3
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	4293      	cmp	r3, r2
 800da16:	da0e      	bge.n	800da36 <framebuf_pixel+0x3e>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	db0b      	blt.n	800da36 <framebuf_pixel+0x3e>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	88db      	ldrh	r3, [r3, #6]
 800da22:	461a      	mov	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4293      	cmp	r3, r2
 800da28:	da05      	bge.n	800da36 <framebuf_pixel+0x3e>
		setpixel( fb, x, y,  col );
 800da2a:	68b9      	ldr	r1, [r7, #8]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f7ff fedf 	bl	800d7f4 <setpixel>
    }
}
 800da36:	bf00      	nop
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <framebuf_hline>:

void framebuf_hline( const tFramebuf *fb, int x, int y, int w, uint32_t col ) {
 800da3e:	b580      	push	{r7, lr}
 800da40:	b086      	sub	sp, #24
 800da42:	af02      	add	r7, sp, #8
 800da44:	60f8      	str	r0, [r7, #12]
 800da46:	60b9      	str	r1, [r7, #8]
 800da48:	607a      	str	r2, [r7, #4]
 800da4a:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, w, 1, col );
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	9301      	str	r3, [sp, #4]
 800da50:	2301      	movs	r3, #1
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	68b9      	ldr	r1, [r7, #8]
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f7ff ff0c 	bl	800d878 <fill_rect>
}
 800da60:	bf00      	nop
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <framebuf_vline>:

void framebuf_vline( const tFramebuf *fb, int x, int y, int h, uint32_t col ) {
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
 800da74:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, 1, h, col );
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	2301      	movs	r3, #1
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	68b9      	ldr	r1, [r7, #8]
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f7ff fef7 	bl	800d878 <fill_rect>
}
 800da8a:	bf00      	nop
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <line>:
	fill_rect( fb, x, y + h - 1, w, 1, col );
	fill_rect( fb, x, y, 1, h, col );
	fill_rect( fb, x + w - 1, y, 1, h, col );
}

void line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800da92:	b580      	push	{r7, lr}
 800da94:	b08c      	sub	sp, #48	; 0x30
 800da96:	af00      	add	r7, sp, #0
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	607a      	str	r2, [r7, #4]
 800da9e:	603b      	str	r3, [r7, #0]
	int dx = x2 - x1;
 800daa0:	683a      	ldr	r2, [r7, #0]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int sx;
    if (dx > 0) {
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	2b00      	cmp	r3, #0
 800daac:	dd02      	ble.n	800dab4 <line+0x22>
        sx = 1;
 800daae:	2301      	movs	r3, #1
 800dab0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dab2:	e005      	b.n	800dac0 <line+0x2e>
    } else {
        dx = -dx;
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	425b      	negs	r3, r3
 800dab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sx = -1;
 800daba:	f04f 33ff 	mov.w	r3, #4294967295
 800dabe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    int dy = y2 - y1;
 800dac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
    int sy;
    if (dy > 0) {
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	2b00      	cmp	r3, #0
 800dacc:	dd02      	ble.n	800dad4 <line+0x42>
        sy = 1;
 800dace:	2301      	movs	r3, #1
 800dad0:	623b      	str	r3, [r7, #32]
 800dad2:	e005      	b.n	800dae0 <line+0x4e>
    } else {
        dy = -dy;
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	425b      	negs	r3, r3
 800dad8:	627b      	str	r3, [r7, #36]	; 0x24
        sy = -1;
 800dada:	f04f 33ff 	mov.w	r3, #4294967295
 800dade:	623b      	str	r3, [r7, #32]
    }

    int steep;
    if (dy > dx) {
 800dae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	429a      	cmp	r2, r3
 800dae6:	dd14      	ble.n	800db12 <line+0x80>
        int temp;
        temp = x1;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	613b      	str	r3, [r7, #16]
        x1 = y1;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	60bb      	str	r3, [r7, #8]
        y1 = temp;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	607b      	str	r3, [r7, #4]
        temp = dx;
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	613b      	str	r3, [r7, #16]
        dx = dy;
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	62fb      	str	r3, [r7, #44]	; 0x2c
        dy = temp;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	627b      	str	r3, [r7, #36]	; 0x24
        temp = sx;
 800db00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db02:	613b      	str	r3, [r7, #16]
        sx = sy;
 800db04:	6a3b      	ldr	r3, [r7, #32]
 800db06:	62bb      	str	r3, [r7, #40]	; 0x28
        sy = temp;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	623b      	str	r3, [r7, #32]
        steep = 1;
 800db0c:	2301      	movs	r3, #1
 800db0e:	61fb      	str	r3, [r7, #28]
 800db10:	e001      	b.n	800db16 <line+0x84>
    } else {
        steep = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	61fb      	str	r3, [r7, #28]
    }

    int e = 2 * dy - dx;
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	005a      	lsls	r2, r3, #1
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800db20:	2300      	movs	r3, #0
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	e04c      	b.n	800dbc0 <line+0x12e>
        if (steep) {
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d018      	beq.n	800db5e <line+0xcc>
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	db37      	blt.n	800dba2 <line+0x110>
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	889b      	ldrh	r3, [r3, #4]
 800db36:	461a      	mov	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4293      	cmp	r3, r2
 800db3c:	da31      	bge.n	800dba2 <line+0x110>
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	db2e      	blt.n	800dba2 <line+0x110>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	88db      	ldrh	r3, [r3, #6]
 800db48:	461a      	mov	r2, r3
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	4293      	cmp	r3, r2
 800db4e:	da28      	bge.n	800dba2 <line+0x110>
                setpixel(fb, y1, x1, col);
 800db50:	6879      	ldr	r1, [r7, #4]
 800db52:	68ba      	ldr	r2, [r7, #8]
 800db54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f7ff fe4c 	bl	800d7f4 <setpixel>
 800db5c:	e021      	b.n	800dba2 <line+0x110>
            }
        } else {
            if (0 <= x1 && x1 < fb->width && 0 <= y1 && y1 < fb->height) {
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	db1e      	blt.n	800dba2 <line+0x110>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	889b      	ldrh	r3, [r3, #4]
 800db68:	461a      	mov	r2, r3
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	4293      	cmp	r3, r2
 800db6e:	da18      	bge.n	800dba2 <line+0x110>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	db15      	blt.n	800dba2 <line+0x110>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	88db      	ldrh	r3, [r3, #6]
 800db7a:	461a      	mov	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4293      	cmp	r3, r2
 800db80:	da0f      	bge.n	800dba2 <line+0x110>
                setpixel(fb, x1, y1, col);
 800db82:	68b9      	ldr	r1, [r7, #8]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f7ff fe33 	bl	800d7f4 <setpixel>
            }
        }
        while (e >= 0) {
 800db8e:	e008      	b.n	800dba2 <line+0x110>
            y1 += sy;
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	4413      	add	r3, r2
 800db96:	607b      	str	r3, [r7, #4]
            e -= 2 * dx;
 800db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	69ba      	ldr	r2, [r7, #24]
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	61bb      	str	r3, [r7, #24]
        while (e >= 0) {
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	daf3      	bge.n	800db90 <line+0xfe>
        }
        x1 += sx;
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbac:	4413      	add	r3, r2
 800dbae:	60bb      	str	r3, [r7, #8]
        e += 2 * dy;
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	005b      	lsls	r3, r3, #1
 800dbb4:	69ba      	ldr	r2, [r7, #24]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	617b      	str	r3, [r7, #20]
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	dbae      	blt.n	800db26 <line+0x94>
    }

    if (0 <= x2 && x2 < fb->width && 0 <= y2 && y2 < fb->height) {
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	db14      	blt.n	800dbf8 <line+0x166>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	889b      	ldrh	r3, [r3, #4]
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	da0e      	bge.n	800dbf8 <line+0x166>
 800dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	db0b      	blt.n	800dbf8 <line+0x166>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	88db      	ldrh	r3, [r3, #6]
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	da05      	bge.n	800dbf8 <line+0x166>
        setpixel(fb, x2, y2, col);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f7ff fdfe 	bl	800d7f4 <setpixel>
    }
}
 800dbf8:	bf00      	nop
 800dbfa:	3730      	adds	r7, #48	; 0x30
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <framebuf_line>:

void framebuf_line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	603b      	str	r3, [r7, #0]
    line( fb, x1, y1, x2, y2, col );
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	68b9      	ldr	r1, [r7, #8]
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f7ff ff38 	bl	800da92 <line>
}
 800dc22:	bf00      	nop
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <framebuf_circle>:
        }
    }
}
*/

void framebuf_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b088      	sub	sp, #32
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	60f8      	str	r0, [r7, #12]
 800dc32:	60b9      	str	r1, [r7, #8]
 800dc34:	607a      	str	r2, [r7, #4]
 800dc36:	603b      	str	r3, [r7, #0]
    int x = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	f1c3 0303 	rsb	r3, r3, #3
 800dc48:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800dc4a:	e067      	b.n	800dd1c <framebuf_circle+0xf2>
        framebuf_pixel(fb, xc + x, yc + y, col);
 800dc4c:	68ba      	ldr	r2, [r7, #8]
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	18d1      	adds	r1, r2, r3
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	441a      	add	r2, r3
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f7ff fecc 	bl	800d9f8 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc + y, col);
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	1ad1      	subs	r1, r2, r3
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	441a      	add	r2, r3
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f7ff fec2 	bl	800d9f8 <framebuf_pixel>
        framebuf_pixel(fb, xc + x, yc - y, col);
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	18d1      	adds	r1, r2, r3
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	1ad2      	subs	r2, r2, r3
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f7ff feb8 	bl	800d9f8 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc - y, col);
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	1ad1      	subs	r1, r2, r3
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	1ad2      	subs	r2, r2, r3
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7ff feae 	bl	800d9f8 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc + x, col);
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	18d1      	adds	r1, r2, r3
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	441a      	add	r2, r3
 800dca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7ff fea4 	bl	800d9f8 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc + x, col);
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	1ad1      	subs	r1, r2, r3
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	441a      	add	r2, r3
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7ff fe9a 	bl	800d9f8 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc - x, col);
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	18d1      	adds	r1, r2, r3
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	1ad2      	subs	r2, r2, r3
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f7ff fe90 	bl	800d9f8 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc - x, col);
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	1ad1      	subs	r1, r2, r3
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	1ad2      	subs	r2, r2, r3
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f7ff fe86 	bl	800d9f8 <framebuf_pixel>

        if (d < 0) {
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	da06      	bge.n	800dd00 <framebuf_circle+0xd6>
            d = d + 4 * x + 6;
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	009a      	lsls	r2, r3, #2
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	3306      	adds	r3, #6
 800dcfc:	617b      	str	r3, [r7, #20]
 800dcfe:	e00a      	b.n	800dd16 <framebuf_circle+0xec>
        } else {
            d = d + 4 * (x - y) + 10;
 800dd00:	69fa      	ldr	r2, [r7, #28]
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	009a      	lsls	r2, r3, #2
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	330a      	adds	r3, #10
 800dd0e:	617b      	str	r3, [r7, #20]
            y--;
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800dd1c:	69fa      	ldr	r2, [r7, #28]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	dd93      	ble.n	800dc4c <framebuf_circle+0x22>
    }
}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	3720      	adds	r7, #32
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <framebuf_circle_quadrant>:
#define QUADRANT_0   0x01
#define QUADRANT_90  0x02
#define QUADRANT_180 0x04
#define QUADRANT_270 0x08
void framebuf_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b088      	sub	sp, #32
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	60f8      	str	r0, [r7, #12]
 800dd36:	60b9      	str	r1, [r7, #8]
 800dd38:	607a      	str	r2, [r7, #4]
 800dd3a:	603b      	str	r3, [r7, #0]
    int x = 0;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	005b      	lsls	r3, r3, #1
 800dd48:	f1c3 0303 	rsb	r3, r3, #3
 800dd4c:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800dd4e:	e07f      	b.n	800de50 <framebuf_circle_quadrant+0x122>
        if (quadrant & QUADRANT_0) {
 800dd50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd54:	f003 0301 	and.w	r3, r3, #1
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d013      	beq.n	800dd84 <framebuf_circle_quadrant+0x56>
            framebuf_pixel(fb, xc + x, yc + y, col);
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	18d1      	adds	r1, r2, r3
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	441a      	add	r2, r3
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f7ff fe44 	bl	800d9f8 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc + x, col);
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	18d1      	adds	r1, r2, r3
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	441a      	add	r2, r3
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f7ff fe3a 	bl	800d9f8 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_90) {
 800dd84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd88:	f003 0302 	and.w	r3, r3, #2
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d013      	beq.n	800ddb8 <framebuf_circle_quadrant+0x8a>
            framebuf_pixel(fb, xc - x, yc + y, col);
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	1ad1      	subs	r1, r2, r3
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	441a      	add	r2, r3
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff fe2a 	bl	800d9f8 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc + x, col);
 800dda4:	68ba      	ldr	r2, [r7, #8]
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	1ad1      	subs	r1, r2, r3
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	441a      	add	r2, r3
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f7ff fe20 	bl	800d9f8 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_180) {
 800ddb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ddbc:	f003 0304 	and.w	r3, r3, #4
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d013      	beq.n	800ddec <framebuf_circle_quadrant+0xbe>
            framebuf_pixel(fb, xc - x, yc - y, col);
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	1ad1      	subs	r1, r2, r3
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	1ad2      	subs	r2, r2, r3
 800ddd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7ff fe10 	bl	800d9f8 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc - x, col);
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	1ad1      	subs	r1, r2, r3
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	1ad2      	subs	r2, r2, r3
 800dde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	f7ff fe06 	bl	800d9f8 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_270) {
 800ddec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ddf0:	f003 0308 	and.w	r3, r3, #8
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d013      	beq.n	800de20 <framebuf_circle_quadrant+0xf2>
            framebuf_pixel(fb, xc + x, yc - y, col);
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	18d1      	adds	r1, r2, r3
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	1ad2      	subs	r2, r2, r3
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7ff fdf6 	bl	800d9f8 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc - x, col);
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	18d1      	adds	r1, r2, r3
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	1ad2      	subs	r2, r2, r3
 800de18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7ff fdec 	bl	800d9f8 <framebuf_pixel>
        }

        if (d < 0) {
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2b00      	cmp	r3, #0
 800de24:	da06      	bge.n	800de34 <framebuf_circle_quadrant+0x106>
            d = d + 4 * x + 6;
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	009a      	lsls	r2, r3, #2
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	4413      	add	r3, r2
 800de2e:	3306      	adds	r3, #6
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	e00a      	b.n	800de4a <framebuf_circle_quadrant+0x11c>
        } else {
            d = d + 4 * (x - y) + 10;
 800de34:	69fa      	ldr	r2, [r7, #28]
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	009a      	lsls	r2, r3, #2
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	4413      	add	r3, r2
 800de40:	330a      	adds	r3, #10
 800de42:	617b      	str	r3, [r7, #20]
            y--;
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	3b01      	subs	r3, #1
 800de48:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	3301      	adds	r3, #1
 800de4e:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800de50:	69fa      	ldr	r2, [r7, #28]
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	429a      	cmp	r2, r3
 800de56:	f77f af7b 	ble.w	800dd50 <framebuf_circle_quadrant+0x22>
    }
}
 800de5a:	bf00      	nop
 800de5c:	bf00      	nop
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <framebuf_fill_circle>:

void framebuf_fill_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800de64:	b580      	push	{r7, lr}
 800de66:	b08a      	sub	sp, #40	; 0x28
 800de68:	af02      	add	r7, sp, #8
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	1ad1      	subs	r1, r2, r3
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	005a      	lsls	r2, r3, #1
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4613      	mov	r3, r2
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f7ff fdda 	bl	800da3e <framebuf_hline>

    int x = 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	f1c3 0303 	rsb	r3, r3, #3
 800de9a:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800de9c:	e055      	b.n	800df4a <framebuf_fill_circle+0xe6>
        if (y > 0) {
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	dd1b      	ble.n	800dedc <framebuf_fill_circle+0x78>
            framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	1ad1      	subs	r1, r2, r3
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	1ad2      	subs	r2, r2, r3
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	0058      	lsls	r0, r3, #1
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	4603      	mov	r3, r0
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f7ff fdbf 	bl	800da3e <framebuf_hline>
            framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800dec0:	68ba      	ldr	r2, [r7, #8]
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	1ad1      	subs	r1, r2, r3
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	441a      	add	r2, r3
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	0058      	lsls	r0, r3, #1
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	4603      	mov	r3, r0
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff fdb1 	bl	800da3e <framebuf_hline>
        }

        if (x > 0) {
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dd1b      	ble.n	800df1a <framebuf_fill_circle+0xb6>
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800dee2:	68ba      	ldr	r2, [r7, #8]
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	1ad1      	subs	r1, r2, r3
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	1ad2      	subs	r2, r2, r3
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	0058      	lsls	r0, r3, #1
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	4603      	mov	r3, r0
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f7ff fda0 	bl	800da3e <framebuf_hline>
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	1ad1      	subs	r1, r2, r3
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	441a      	add	r2, r3
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	0058      	lsls	r0, r3, #1
 800df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	4603      	mov	r3, r0
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f7ff fd92 	bl	800da3e <framebuf_hline>
        }

        if (d < 0) {
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	da06      	bge.n	800df2e <framebuf_fill_circle+0xca>
            d = d + 4 * x + 6;
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	009a      	lsls	r2, r3, #2
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	4413      	add	r3, r2
 800df28:	3306      	adds	r3, #6
 800df2a:	617b      	str	r3, [r7, #20]
 800df2c:	e00a      	b.n	800df44 <framebuf_fill_circle+0xe0>
        } else {
            d = d + 4 * (x - y) + 10;
 800df2e:	69fa      	ldr	r2, [r7, #28]
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	009a      	lsls	r2, r3, #2
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	4413      	add	r3, r2
 800df3a:	330a      	adds	r3, #10
 800df3c:	617b      	str	r3, [r7, #20]
            y--;
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	3b01      	subs	r3, #1
 800df42:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	3301      	adds	r3, #1
 800df48:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800df4a:	69fa      	ldr	r2, [r7, #28]
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	429a      	cmp	r2, r3
 800df50:	dda5      	ble.n	800de9e <framebuf_fill_circle+0x3a>
    }
}
 800df52:	bf00      	nop
 800df54:	bf00      	nop
 800df56:	3720      	adds	r7, #32
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <framebuf_fill_circle_quadrant>:

void framebuf_fill_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08a      	sub	sp, #40	; 0x28
 800df60:	af02      	add	r7, sp, #8
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
 800df68:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	1ad1      	subs	r1, r2, r3
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	005a      	lsls	r2, r3, #1
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	4613      	mov	r3, r2
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f7ff fd5e 	bl	800da3e <framebuf_hline>

    int x = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	f1c3 0303 	rsb	r3, r3, #3
 800df92:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800df94:	e0ab      	b.n	800e0ee <framebuf_fill_circle_quadrant+0x192>
        if (quadrant & QUADRANT_0) {
 800df96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d01e      	beq.n	800dfe0 <framebuf_fill_circle_quadrant+0x84>
            if (y > 0) {
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dd1b      	ble.n	800dfe0 <framebuf_fill_circle_quadrant+0x84>
                framebuf_hline(fb, xc + x, yc - y, 2 * x, col);
 800dfa8:	68ba      	ldr	r2, [r7, #8]
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	18d1      	adds	r1, r2, r3
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	1ad2      	subs	r2, r2, r3
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	0058      	lsls	r0, r3, #1
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7ff fd3d 	bl	800da3e <framebuf_hline>
                framebuf_hline(fb, xc + x, yc + y, 2 * x, col);
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	18d1      	adds	r1, r2, r3
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	441a      	add	r2, r3
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	0058      	lsls	r0, r3, #1
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	4603      	mov	r3, r0
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f7ff fd2f 	bl	800da3e <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_90) {
 800dfe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dfe4:	f003 0302 	and.w	r3, r3, #2
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d01e      	beq.n	800e02a <framebuf_fill_circle_quadrant+0xce>
            if (x > 0) {
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	dd1b      	ble.n	800e02a <framebuf_fill_circle_quadrant+0xce>
                framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	1ad1      	subs	r1, r2, r3
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	1ad2      	subs	r2, r2, r3
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	0058      	lsls	r0, r3, #1
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	4603      	mov	r3, r0
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f7ff fd18 	bl	800da3e <framebuf_hline>
                framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	1ad1      	subs	r1, r2, r3
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	441a      	add	r2, r3
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	0058      	lsls	r0, r3, #1
 800e01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	4603      	mov	r3, r0
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f7ff fd0a 	bl	800da3e <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_180) {
 800e02a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e02e:	f003 0304 	and.w	r3, r3, #4
 800e032:	2b00      	cmp	r3, #0
 800e034:	d01e      	beq.n	800e074 <framebuf_fill_circle_quadrant+0x118>
            if (y > 0) {
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	dd1b      	ble.n	800e074 <framebuf_fill_circle_quadrant+0x118>
                framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	1ad1      	subs	r1, r2, r3
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	0058      	lsls	r0, r3, #1
 800e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	4603      	mov	r3, r0
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff fcf3 	bl	800da3e <framebuf_hline>
                framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	1ad1      	subs	r1, r2, r3
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	441a      	add	r2, r3
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	0058      	lsls	r0, r3, #1
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	4603      	mov	r3, r0
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f7ff fce5 	bl	800da3e <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_270) {
 800e074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e078:	f003 0308 	and.w	r3, r3, #8
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01e      	beq.n	800e0be <framebuf_fill_circle_quadrant+0x162>
            if (x > 0) {
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	2b00      	cmp	r3, #0
 800e084:	dd1b      	ble.n	800e0be <framebuf_fill_circle_quadrant+0x162>
                framebuf_hline(fb, xc + y, yc - x, 2 * y, col);
 800e086:	68ba      	ldr	r2, [r7, #8]
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	18d1      	adds	r1, r2, r3
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	1ad2      	subs	r2, r2, r3
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	0058      	lsls	r0, r3, #1
 800e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	4603      	mov	r3, r0
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff fcce 	bl	800da3e <framebuf_hline>
                framebuf_hline(fb, xc + y, yc + x, 2 * y, col);
 800e0a2:	68ba      	ldr	r2, [r7, #8]
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	18d1      	adds	r1, r2, r3
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	441a      	add	r2, r3
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	0058      	lsls	r0, r3, #1
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f7ff fcc0 	bl	800da3e <framebuf_hline>
            }
        }

        if (d < 0) {
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	da06      	bge.n	800e0d2 <framebuf_fill_circle_quadrant+0x176>
            d = d + 4 * x + 6;
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	009a      	lsls	r2, r3, #2
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	3306      	adds	r3, #6
 800e0ce:	617b      	str	r3, [r7, #20]
 800e0d0:	e00a      	b.n	800e0e8 <framebuf_fill_circle_quadrant+0x18c>
        } else {
            d = d + 4 * (x - y) + 10;
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	1ad3      	subs	r3, r2, r3
 800e0d8:	009a      	lsls	r2, r3, #2
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	4413      	add	r3, r2
 800e0de:	330a      	adds	r3, #10
 800e0e0:	617b      	str	r3, [r7, #20]
            y--;
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e0ee:	69fa      	ldr	r2, [r7, #28]
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	f77f af4f 	ble.w	800df96 <framebuf_fill_circle_quadrant+0x3a>
    }
}
 800e0f8:	bf00      	nop
 800e0fa:	bf00      	nop
 800e0fc:	3720      	adds	r7, #32
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <nk_buffer_init_fixed>:
    b->grow_factor = 2.0f;
    b->pool = *a;
}
NK_API void
nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
    NK_ASSERT(b);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d105      	bne.n	800e122 <nk_buffer_init_fixed+0x1e>
 800e116:	4b1b      	ldr	r3, [pc, #108]	; (800e184 <nk_buffer_init_fixed+0x80>)
 800e118:	4a1b      	ldr	r2, [pc, #108]	; (800e188 <nk_buffer_init_fixed+0x84>)
 800e11a:	2136      	movs	r1, #54	; 0x36
 800e11c:	481b      	ldr	r0, [pc, #108]	; (800e18c <nk_buffer_init_fixed+0x88>)
 800e11e:	f00f fa37 	bl	801d590 <__assert_func>
    NK_ASSERT(m);
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d105      	bne.n	800e134 <nk_buffer_init_fixed+0x30>
 800e128:	4b19      	ldr	r3, [pc, #100]	; (800e190 <nk_buffer_init_fixed+0x8c>)
 800e12a:	4a17      	ldr	r2, [pc, #92]	; (800e188 <nk_buffer_init_fixed+0x84>)
 800e12c:	2137      	movs	r1, #55	; 0x37
 800e12e:	4817      	ldr	r0, [pc, #92]	; (800e18c <nk_buffer_init_fixed+0x88>)
 800e130:	f00f fa2e 	bl	801d590 <__assert_func>
    NK_ASSERT(size);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d105      	bne.n	800e146 <nk_buffer_init_fixed+0x42>
 800e13a:	4b16      	ldr	r3, [pc, #88]	; (800e194 <nk_buffer_init_fixed+0x90>)
 800e13c:	4a12      	ldr	r2, [pc, #72]	; (800e188 <nk_buffer_init_fixed+0x84>)
 800e13e:	2138      	movs	r1, #56	; 0x38
 800e140:	4812      	ldr	r0, [pc, #72]	; (800e18c <nk_buffer_init_fixed+0x88>)
 800e142:	f00f fa25 	bl	801d590 <__assert_func>
    if (!b || !m || !size) return;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d016      	beq.n	800e17a <nk_buffer_init_fixed+0x76>
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d013      	beq.n	800e17a <nk_buffer_init_fixed+0x76>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d010      	beq.n	800e17a <nk_buffer_init_fixed+0x76>

    nk_zero(b, sizeof(*b));
 800e158:	213c      	movs	r1, #60	; 0x3c
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f00d fd20 	bl	801bba0 <nk_zero>
    b->type = NK_BUFFER_FIXED;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2200      	movs	r2, #0
 800e164:	771a      	strb	r2, [r3, #28]
    b->memory.ptr = m;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	621a      	str	r2, [r3, #32]
    b->memory.size = size;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	625a      	str	r2, [r3, #36]	; 0x24
    b->size = size;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	639a      	str	r2, [r3, #56]	; 0x38
 800e178:	e000      	b.n	800e17c <nk_buffer_init_fixed+0x78>
    if (!b || !m || !size) return;
 800e17a:	bf00      	nop
}
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	08020fb8 	.word	0x08020fb8
 800e188:	08022c88 	.word	0x08022c88
 800e18c:	08020fbc 	.word	0x08020fbc
 800e190:	08020fec 	.word	0x08020fec
 800e194:	08020ff0 	.word	0x08020ff0

0800e198 <nk_buffer_align>:
NK_LIB void*
nk_buffer_align(void *unaligned,
    nk_size align, nk_size *alignment,
    enum nk_buffer_allocation_type type)
{
 800e198:	b480      	push	{r7}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	70fb      	strb	r3, [r7, #3]
    void *memory = 0;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	617b      	str	r3, [r7, #20]
    switch (type) {
 800e1aa:	78fb      	ldrb	r3, [r7, #3]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d018      	beq.n	800e1e2 <nk_buffer_align+0x4a>
    default:
    case NK_BUFFER_MAX:
    case NK_BUFFER_FRONT:
        if (align) {
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00f      	beq.n	800e1d6 <nk_buffer_align+0x3e>
            memory = NK_ALIGN_PTR(unaligned, align);
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	4413      	add	r3, r2
 800e1be:	461a      	mov	r2, r3
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	425b      	negs	r3, r3
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	1ad3      	subs	r3, r2, r3
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e1d4:	e01a      	b.n	800e20c <nk_buffer_align+0x74>
            memory = unaligned;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	601a      	str	r2, [r3, #0]
        break;
 800e1e0:	e014      	b.n	800e20c <nk_buffer_align+0x74>
    case NK_BUFFER_BACK:
        if (align) {
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00b      	beq.n	800e200 <nk_buffer_align+0x68>
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	425a      	negs	r2, r3
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4013      	ands	r3, r2
 800e1f0:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e1fe:	e004      	b.n	800e20a <nk_buffer_align+0x72>
            memory = unaligned;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
        break;
 800e20a:	bf00      	nop
    }
    return memory;
 800e20c:	697b      	ldr	r3, [r7, #20]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	371c      	adds	r7, #28
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
	...

0800e21c <nk_buffer_realloc>:
NK_LIB void*
nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	; 0x28
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
    void *temp;
    nk_size buffer_size;

    NK_ASSERT(b);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d105      	bne.n	800e23a <nk_buffer_realloc+0x1e>
 800e22e:	4b3c      	ldr	r3, [pc, #240]	; (800e320 <nk_buffer_realloc+0x104>)
 800e230:	4a3c      	ldr	r2, [pc, #240]	; (800e324 <nk_buffer_realloc+0x108>)
 800e232:	2165      	movs	r1, #101	; 0x65
 800e234:	483c      	ldr	r0, [pc, #240]	; (800e328 <nk_buffer_realloc+0x10c>)
 800e236:	f00f f9ab 	bl	801d590 <__assert_func>
    NK_ASSERT(size);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d105      	bne.n	800e24c <nk_buffer_realloc+0x30>
 800e240:	4b3a      	ldr	r3, [pc, #232]	; (800e32c <nk_buffer_realloc+0x110>)
 800e242:	4a38      	ldr	r2, [pc, #224]	; (800e324 <nk_buffer_realloc+0x108>)
 800e244:	2166      	movs	r1, #102	; 0x66
 800e246:	4838      	ldr	r0, [pc, #224]	; (800e328 <nk_buffer_realloc+0x10c>)
 800e248:	f00f f9a2 	bl	801d590 <__assert_func>
    if (!b || !size || !b->pool.alloc || !b->pool.free)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00a      	beq.n	800e268 <nk_buffer_realloc+0x4c>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d007      	beq.n	800e268 <nk_buffer_realloc+0x4c>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	695b      	ldr	r3, [r3, #20]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d003      	beq.n	800e268 <nk_buffer_realloc+0x4c>
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <nk_buffer_realloc+0x50>
        return 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	e054      	b.n	800e316 <nk_buffer_realloc+0xfa>

    buffer_size = b->memory.size;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e270:	627b      	str	r3, [r7, #36]	; 0x24
    temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	695b      	ldr	r3, [r3, #20]
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	6a11      	ldr	r1, [r2, #32]
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	6900      	ldr	r0, [r0, #16]
 800e280:	4798      	blx	r3
 800e282:	6238      	str	r0, [r7, #32]
    NK_ASSERT(temp);
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d105      	bne.n	800e296 <nk_buffer_realloc+0x7a>
 800e28a:	4b29      	ldr	r3, [pc, #164]	; (800e330 <nk_buffer_realloc+0x114>)
 800e28c:	4a25      	ldr	r2, [pc, #148]	; (800e324 <nk_buffer_realloc+0x108>)
 800e28e:	216c      	movs	r1, #108	; 0x6c
 800e290:	4825      	ldr	r0, [pc, #148]	; (800e328 <nk_buffer_realloc+0x10c>)
 800e292:	f00f f97d 	bl	801d590 <__assert_func>
    if (!temp) return 0;
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <nk_buffer_realloc+0x84>
 800e29c:	2300      	movs	r3, #0
 800e29e:	e03a      	b.n	800e316 <nk_buffer_realloc+0xfa>

    *size = capacity;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	601a      	str	r2, [r3, #0]
    if (temp != b->memory.ptr) {
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6a1b      	ldr	r3, [r3, #32]
 800e2aa:	6a3a      	ldr	r2, [r7, #32]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d00d      	beq.n	800e2cc <nk_buffer_realloc+0xb0>
        NK_MEMCPY(temp, b->memory.ptr, buffer_size);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6a1b      	ldr	r3, [r3, #32]
 800e2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6a38      	ldr	r0, [r7, #32]
 800e2ba:	f00d fb21 	bl	801b900 <nk_memcopy>
        b->pool.free(b->pool.userdata, b->memory.ptr);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	6a11      	ldr	r1, [r2, #32]
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	6910      	ldr	r0, [r2, #16]
 800e2ca:	4798      	blx	r3
    }

    if (b->size == buffer_size) {
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d104      	bne.n	800e2e0 <nk_buffer_realloc+0xc4>
        /* no back buffer so just set correct size */
        b->size = capacity;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	639a      	str	r2, [r3, #56]	; 0x38
        return temp;
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	e01a      	b.n	800e316 <nk_buffer_realloc+0xfa>
    } else {
        /* copy back buffer to the end of the new buffer */
        void *dst, *src;
        nk_size back_size;
        back_size = buffer_size - b->size;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	61fb      	str	r3, [r7, #28]
        dst = nk_ptr_add(void, temp, capacity - back_size);
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	6a3a      	ldr	r2, [r7, #32]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	61bb      	str	r3, [r7, #24]
        src = nk_ptr_add(void, temp, b->size);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fa:	6a3a      	ldr	r2, [r7, #32]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	617b      	str	r3, [r7, #20]
        NK_MEMCPY(dst, src, back_size);
 800e300:	69fa      	ldr	r2, [r7, #28]
 800e302:	6979      	ldr	r1, [r7, #20]
 800e304:	69b8      	ldr	r0, [r7, #24]
 800e306:	f00d fafb 	bl	801b900 <nk_memcopy>
        b->size = capacity - back_size;
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	1ad2      	subs	r2, r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return temp;
 800e314:	6a3b      	ldr	r3, [r7, #32]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3728      	adds	r7, #40	; 0x28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	08020fb8 	.word	0x08020fb8
 800e324:	08022ca0 	.word	0x08022ca0
 800e328:	08020fbc 	.word	0x08020fbc
 800e32c:	08020ff0 	.word	0x08020ff0
 800e330:	08020ff8 	.word	0x08020ff8

0800e334 <nk_buffer_alloc>:
NK_LIB void*
nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,
    nk_size size, nk_size align)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b08a      	sub	sp, #40	; 0x28
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	607a      	str	r2, [r7, #4]
 800e33e:	603b      	str	r3, [r7, #0]
 800e340:	460b      	mov	r3, r1
 800e342:	72fb      	strb	r3, [r7, #11]
    int full;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d105      	bne.n	800e356 <nk_buffer_alloc+0x22>
 800e34a:	4b7a      	ldr	r3, [pc, #488]	; (800e534 <nk_buffer_alloc+0x200>)
 800e34c:	4a7a      	ldr	r2, [pc, #488]	; (800e538 <nk_buffer_alloc+0x204>)
 800e34e:	218e      	movs	r1, #142	; 0x8e
 800e350:	487a      	ldr	r0, [pc, #488]	; (800e53c <nk_buffer_alloc+0x208>)
 800e352:	f00f f91d 	bl	801d590 <__assert_func>
    NK_ASSERT(size);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d105      	bne.n	800e368 <nk_buffer_alloc+0x34>
 800e35c:	4b78      	ldr	r3, [pc, #480]	; (800e540 <nk_buffer_alloc+0x20c>)
 800e35e:	4a76      	ldr	r2, [pc, #472]	; (800e538 <nk_buffer_alloc+0x204>)
 800e360:	218f      	movs	r1, #143	; 0x8f
 800e362:	4876      	ldr	r0, [pc, #472]	; (800e53c <nk_buffer_alloc+0x208>)
 800e364:	f00f f914 	bl	801d590 <__assert_func>
    if (!b || !size) return 0;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <nk_buffer_alloc+0x40>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d101      	bne.n	800e378 <nk_buffer_alloc+0x44>
 800e374:	2300      	movs	r3, #0
 800e376:	e0d9      	b.n	800e52c <nk_buffer_alloc+0x1f8>
    b->needed += size;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	441a      	add	r2, r3
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	631a      	str	r2, [r3, #48]	; 0x30

    /* calculate total size with needed alignment + size */
    if (type == NK_BUFFER_FRONT)
 800e384:	7afb      	ldrb	r3, [r7, #11]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d106      	bne.n	800e398 <nk_buffer_alloc+0x64>
        unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6a1a      	ldr	r2, [r3, #32]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e392:	4413      	add	r3, r2
 800e394:	623b      	str	r3, [r7, #32]
 800e396:	e007      	b.n	800e3a8 <nk_buffer_alloc+0x74>
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6a1a      	ldr	r2, [r3, #32]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	1acb      	subs	r3, r1, r3
 800e3a4:	4413      	add	r3, r2
 800e3a6:	623b      	str	r3, [r7, #32]
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 800e3a8:	7afb      	ldrb	r3, [r7, #11]
 800e3aa:	f107 0214 	add.w	r2, r7, #20
 800e3ae:	6839      	ldr	r1, [r7, #0]
 800e3b0:	6a38      	ldr	r0, [r7, #32]
 800e3b2:	f7ff fef1 	bl	800e198 <nk_buffer_align>
 800e3b6:	61f8      	str	r0, [r7, #28]

    /* check if buffer has enough memory*/
    if (type == NK_BUFFER_FRONT)
 800e3b8:	7afb      	ldrb	r3, [r7, #11]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10e      	bne.n	800e3dc <nk_buffer_alloc+0xa8>
        full = ((b->allocated + size + alignment) > b->size);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	441a      	add	r2, r3
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	441a      	add	r2, r3
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	bf8c      	ite	hi
 800e3d2:	2301      	movhi	r3, #1
 800e3d4:	2300      	movls	r3, #0
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e3da:	e012      	b.n	800e402 <nk_buffer_alloc+0xce>
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3e0:	6979      	ldr	r1, [r7, #20]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4419      	add	r1, r3
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ea:	428b      	cmp	r3, r1
 800e3ec:	bf28      	it	cs
 800e3ee:	460b      	movcs	r3, r1
 800e3f0:	1ad2      	subs	r2, r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	bf94      	ite	ls
 800e3fa:	2301      	movls	r3, #1
 800e3fc:	2300      	movhi	r3, #0
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	627b      	str	r3, [r7, #36]	; 0x24

    if (full) {
 800e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e404:	2b00      	cmp	r3, #0
 800e406:	d071      	beq.n	800e4ec <nk_buffer_alloc+0x1b8>
        nk_size capacity;
        if (b->type != NK_BUFFER_DYNAMIC)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	7f1b      	ldrb	r3, [r3, #28]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d001      	beq.n	800e414 <nk_buffer_alloc+0xe0>
            return 0;
 800e410:	2300      	movs	r3, #0
 800e412:	e08b      	b.n	800e52c <nk_buffer_alloc+0x1f8>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	695b      	ldr	r3, [r3, #20]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d003      	beq.n	800e424 <nk_buffer_alloc+0xf0>
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d105      	bne.n	800e430 <nk_buffer_alloc+0xfc>
 800e424:	4b47      	ldr	r3, [pc, #284]	; (800e544 <nk_buffer_alloc+0x210>)
 800e426:	4a44      	ldr	r2, [pc, #272]	; (800e538 <nk_buffer_alloc+0x204>)
 800e428:	21a2      	movs	r1, #162	; 0xa2
 800e42a:	4844      	ldr	r0, [pc, #272]	; (800e53c <nk_buffer_alloc+0x208>)
 800e42c:	f00f f8b0 	bl	801d590 <__assert_func>
        if (b->type != NK_BUFFER_DYNAMIC || !b->pool.alloc || !b->pool.free)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	7f1b      	ldrb	r3, [r3, #28]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d107      	bne.n	800e448 <nk_buffer_alloc+0x114>
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	695b      	ldr	r3, [r3, #20]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d003      	beq.n	800e448 <nk_buffer_alloc+0x114>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d101      	bne.n	800e44c <nk_buffer_alloc+0x118>
            return 0;
 800e448:	2300      	movs	r3, #0
 800e44a:	e06f      	b.n	800e52c <nk_buffer_alloc+0x1f8>

        /* buffer is full so allocate bigger buffer if dynamic */
        capacity = (nk_size)((float)b->memory.size * b->grow_factor);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e450:	ee07 3a90 	vmov	s15, r3
 800e454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800e45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e466:	ee17 3a90 	vmov	r3, s15
 800e46a:	61bb      	str	r3, [r7, #24]
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4413      	add	r3, r2
 800e474:	4618      	mov	r0, r3
 800e476:	f005 fcdf 	bl	8013e38 <nk_round_up_pow2>
 800e47a:	4602      	mov	r2, r0
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	4293      	cmp	r3, r2
 800e480:	d208      	bcs.n	800e494 <nk_buffer_alloc+0x160>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	4413      	add	r3, r2
 800e48a:	4618      	mov	r0, r3
 800e48c:	f005 fcd4 	bl	8013e38 <nk_round_up_pow2>
 800e490:	4603      	mov	r3, r0
 800e492:	e000      	b.n	800e496 <nk_buffer_alloc+0x162>
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	61bb      	str	r3, [r7, #24]
        b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3324      	adds	r3, #36	; 0x24
 800e49c:	461a      	mov	r2, r3
 800e49e:	69b9      	ldr	r1, [r7, #24]
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f7ff febb 	bl	800e21c <nk_buffer_realloc>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	621a      	str	r2, [r3, #32]
        if (!b->memory.ptr) return 0;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6a1b      	ldr	r3, [r3, #32]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d101      	bne.n	800e4b8 <nk_buffer_alloc+0x184>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e039      	b.n	800e52c <nk_buffer_alloc+0x1f8>

        /* align newly allocated pointer */
        if (type == NK_BUFFER_FRONT)
 800e4b8:	7afb      	ldrb	r3, [r7, #11]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d106      	bne.n	800e4cc <nk_buffer_alloc+0x198>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6a1a      	ldr	r2, [r3, #32]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c6:	4413      	add	r3, r2
 800e4c8:	623b      	str	r3, [r7, #32]
 800e4ca:	e007      	b.n	800e4dc <nk_buffer_alloc+0x1a8>
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6a1a      	ldr	r2, [r3, #32]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	1acb      	subs	r3, r1, r3
 800e4d8:	4413      	add	r3, r2
 800e4da:	623b      	str	r3, [r7, #32]
        memory = nk_buffer_align(unaligned, align, &alignment, type);
 800e4dc:	7afb      	ldrb	r3, [r7, #11]
 800e4de:	f107 0214 	add.w	r2, r7, #20
 800e4e2:	6839      	ldr	r1, [r7, #0]
 800e4e4:	6a38      	ldr	r0, [r7, #32]
 800e4e6:	f7ff fe57 	bl	800e198 <nk_buffer_align>
 800e4ea:	61f8      	str	r0, [r7, #28]
    }
    if (type == NK_BUFFER_FRONT)
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d108      	bne.n	800e504 <nk_buffer_alloc+0x1d0>
        b->allocated += size + alignment;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f6:	6979      	ldr	r1, [r7, #20]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	440b      	add	r3, r1
 800e4fc:	441a      	add	r2, r3
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	62da      	str	r2, [r3, #44]	; 0x2c
 800e502:	e007      	b.n	800e514 <nk_buffer_alloc+0x1e0>
    else b->size -= (size + alignment);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e508:	6979      	ldr	r1, [r7, #20]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	440b      	add	r3, r1
 800e50e:	1ad2      	subs	r2, r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	639a      	str	r2, [r3, #56]	; 0x38
    b->needed += alignment;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	441a      	add	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30
    b->calls++;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e524:	1c5a      	adds	r2, r3, #1
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	635a      	str	r2, [r3, #52]	; 0x34
    return memory;
 800e52a:	69fb      	ldr	r3, [r7, #28]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3728      	adds	r7, #40	; 0x28
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	08020fb8 	.word	0x08020fb8
 800e538:	08022cb4 	.word	0x08022cb4
 800e53c:	08020fbc 	.word	0x08020fbc
 800e540:	08020ff0 	.word	0x08020ff0
 800e544:	08021000 	.word	0x08021000

0800e548 <nk_buffer_reset>:
        buffer->marker[type].offset = buffer->size;
    else buffer->marker[type].offset = buffer->allocated;
}
NK_API void
nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	460b      	mov	r3, r1
 800e552:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(buffer);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d105      	bne.n	800e566 <nk_buffer_reset+0x1e>
 800e55a:	4b2c      	ldr	r3, [pc, #176]	; (800e60c <nk_buffer_reset+0xc4>)
 800e55c:	4a2c      	ldr	r2, [pc, #176]	; (800e610 <nk_buffer_reset+0xc8>)
 800e55e:	21ce      	movs	r1, #206	; 0xce
 800e560:	482c      	ldr	r0, [pc, #176]	; (800e614 <nk_buffer_reset+0xcc>)
 800e562:	f00f f815 	bl	801d590 <__assert_func>
    if (!buffer) return;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d04b      	beq.n	800e604 <nk_buffer_reset+0xbc>
    if (type == NK_BUFFER_BACK) {
 800e56c:	78fb      	ldrb	r3, [r7, #3]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d124      	bne.n	800e5bc <nk_buffer_reset+0x74>
        /* reset back buffer either back to marker or empty */
        buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e576:	78fb      	ldrb	r3, [r7, #3]
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	00db      	lsls	r3, r3, #3
 800e57c:	440b      	add	r3, r1
 800e57e:	6859      	ldr	r1, [r3, #4]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e584:	1acb      	subs	r3, r1, r3
 800e586:	441a      	add	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800e58c:	78fa      	ldrb	r2, [r7, #3]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d007      	beq.n	800e5a8 <nk_buffer_reset+0x60>
            buffer->size = buffer->marker[type].offset;
 800e598:	78fb      	ldrb	r3, [r7, #3]
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	00db      	lsls	r3, r3, #3
 800e59e:	4413      	add	r3, r2
 800e5a0:	685a      	ldr	r2, [r3, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	639a      	str	r2, [r3, #56]	; 0x38
 800e5a6:	e003      	b.n	800e5b0 <nk_buffer_reset+0x68>
        else buffer->size = buffer->memory.size;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	639a      	str	r2, [r3, #56]	; 0x38
        buffer->marker[type].active = nk_false;
 800e5b0:	78fa      	ldrb	r2, [r7, #3]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800e5ba:	e024      	b.n	800e606 <nk_buffer_reset+0xbe>
    } else {
        /* reset front buffer either back to back marker or empty */
        buffer->needed -= (buffer->allocated - buffer->marker[type].offset);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5c0:	78fb      	ldrb	r3, [r7, #3]
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	440b      	add	r3, r1
 800e5c8:	6859      	ldr	r1, [r3, #4]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ce:	1acb      	subs	r3, r1, r3
 800e5d0:	441a      	add	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800e5d6:	78fa      	ldrb	r2, [r7, #3]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d007      	beq.n	800e5f2 <nk_buffer_reset+0xaa>
            buffer->allocated = buffer->marker[type].offset;
 800e5e2:	78fb      	ldrb	r3, [r7, #3]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	00db      	lsls	r3, r3, #3
 800e5e8:	4413      	add	r3, r2
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	62da      	str	r2, [r3, #44]	; 0x2c
 800e5f0:	e002      	b.n	800e5f8 <nk_buffer_reset+0xb0>
        else buffer->allocated = 0;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	62da      	str	r2, [r3, #44]	; 0x2c
        buffer->marker[type].active = nk_false;
 800e5f8:	78fa      	ldrb	r2, [r7, #3]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800e602:	e000      	b.n	800e606 <nk_buffer_reset+0xbe>
    if (!buffer) return;
 800e604:	bf00      	nop
    }
}
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	08021020 	.word	0x08021020
 800e610:	08022cc4 	.word	0x08022cc4
 800e614:	08020fbc 	.word	0x08020fbc

0800e618 <nk_buffer_clear>:
NK_API void
nk_buffer_clear(struct nk_buffer *b)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d105      	bne.n	800e632 <nk_buffer_clear+0x1a>
 800e626:	4b0d      	ldr	r3, [pc, #52]	; (800e65c <nk_buffer_clear+0x44>)
 800e628:	4a0d      	ldr	r2, [pc, #52]	; (800e660 <nk_buffer_clear+0x48>)
 800e62a:	21e3      	movs	r1, #227	; 0xe3
 800e62c:	480d      	ldr	r0, [pc, #52]	; (800e664 <nk_buffer_clear+0x4c>)
 800e62e:	f00e ffaf 	bl	801d590 <__assert_func>
    if (!b) return;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00d      	beq.n	800e654 <nk_buffer_clear+0x3c>
    b->allocated = 0;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	62da      	str	r2, [r3, #44]	; 0x2c
    b->size = b->memory.size;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	639a      	str	r2, [r3, #56]	; 0x38
    b->calls = 0;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	635a      	str	r2, [r3, #52]	; 0x34
    b->needed = 0;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	631a      	str	r2, [r3, #48]	; 0x30
 800e652:	e000      	b.n	800e656 <nk_buffer_clear+0x3e>
    if (!b) return;
 800e654:	bf00      	nop
}
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	08020fb8 	.word	0x08020fb8
 800e660:	08022cd4 	.word	0x08022cd4
 800e664:	08020fbc 	.word	0x08020fbc

0800e668 <nk_draw_symbol>:
 * ===============================================================*/
NK_LIB void
nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,
    struct nk_rect content, struct nk_color background, struct nk_color foreground,
    float border_width, const struct nk_user_font *font)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b0a0      	sub	sp, #128	; 0x80
 800e66c:	af02      	add	r7, sp, #8
 800e66e:	6278      	str	r0, [r7, #36]	; 0x24
 800e670:	eeb0 6a40 	vmov.f32	s12, s0
 800e674:	eef0 6a60 	vmov.f32	s13, s1
 800e678:	eeb0 7a41 	vmov.f32	s14, s2
 800e67c:	eef0 7a61 	vmov.f32	s15, s3
 800e680:	60fa      	str	r2, [r7, #12]
 800e682:	60bb      	str	r3, [r7, #8]
 800e684:	ed87 2a01 	vstr	s4, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e68e:	ed87 6a04 	vstr	s12, [r7, #16]
 800e692:	edc7 6a05 	vstr	s13, [r7, #20]
 800e696:	ed87 7a06 	vstr	s14, [r7, #24]
 800e69a:	edc7 7a07 	vstr	s15, [r7, #28]
    switch (type) {
 800e69e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	2b0b      	cmp	r3, #11
 800e6a6:	f200 815e 	bhi.w	800e966 <nk_draw_symbol+0x2fe>
 800e6aa:	a201      	add	r2, pc, #4	; (adr r2, 800e6b0 <nk_draw_symbol+0x48>)
 800e6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b0:	0800e6e1 	.word	0x0800e6e1
 800e6b4:	0800e6e1 	.word	0x0800e6e1
 800e6b8:	0800e769 	.word	0x0800e769
 800e6bc:	0800e769 	.word	0x0800e769
 800e6c0:	0800e769 	.word	0x0800e769
 800e6c4:	0800e769 	.word	0x0800e769
 800e6c8:	0800e8cb 	.word	0x0800e8cb
 800e6cc:	0800e8cb 	.word	0x0800e8cb
 800e6d0:	0800e8cb 	.word	0x0800e8cb
 800e6d4:	0800e8cb 	.word	0x0800e8cb
 800e6d8:	0800e6e1 	.word	0x0800e6e1
 800e6dc:	0800e6e1 	.word	0x0800e6e1
    case NK_SYMBOL_X:
    case NK_SYMBOL_UNDERSCORE:
    case NK_SYMBOL_PLUS:
    case NK_SYMBOL_MINUS: {
        /* single character text symbol */
        const char *X = (type == NK_SYMBOL_X) ? "x":
 800e6e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d00d      	beq.n	800e704 <nk_draw_symbol+0x9c>
 800e6e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d007      	beq.n	800e700 <nk_draw_symbol+0x98>
 800e6f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6f4:	2b0b      	cmp	r3, #11
 800e6f6:	d101      	bne.n	800e6fc <nk_draw_symbol+0x94>
 800e6f8:	4b9e      	ldr	r3, [pc, #632]	; (800e974 <nk_draw_symbol+0x30c>)
 800e6fa:	e004      	b.n	800e706 <nk_draw_symbol+0x9e>
 800e6fc:	4b9e      	ldr	r3, [pc, #632]	; (800e978 <nk_draw_symbol+0x310>)
 800e6fe:	e002      	b.n	800e706 <nk_draw_symbol+0x9e>
 800e700:	4b9e      	ldr	r3, [pc, #632]	; (800e97c <nk_draw_symbol+0x314>)
 800e702:	e000      	b.n	800e706 <nk_draw_symbol+0x9e>
 800e704:	4b9e      	ldr	r3, [pc, #632]	; (800e980 <nk_draw_symbol+0x318>)
 800e706:	673b      	str	r3, [r7, #112]	; 0x70
            (type == NK_SYMBOL_UNDERSCORE) ? "_":
            (type == NK_SYMBOL_PLUS) ? "+": "-";
        struct nk_text text;
        text.padding = nk_vec2(0,0);
 800e708:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800e984 <nk_draw_symbol+0x31c>
 800e70c:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800e984 <nk_draw_symbol+0x31c>
 800e710:	f005 fc6e 	bl	8013ff0 <nk_vec2>
 800e714:	eeb0 7a40 	vmov.f32	s14, s0
 800e718:	eef0 7a60 	vmov.f32	s15, s1
 800e71c:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800e720:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        text.background = background;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	64bb      	str	r3, [r7, #72]	; 0x48
        text.text = foreground;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	64fb      	str	r3, [r7, #76]	; 0x4c
        nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);
 800e72c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e730:	ed97 6a04 	vldr	s12, [r7, #16]
 800e734:	edd7 6a05 	vldr	s13, [r7, #20]
 800e738:	ed97 7a06 	vldr	s14, [r7, #24]
 800e73c:	edd7 7a07 	vldr	s15, [r7, #28]
 800e740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e744:	9301      	str	r3, [sp, #4]
 800e746:	2312      	movs	r3, #18
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	4613      	mov	r3, r2
 800e74c:	2201      	movs	r2, #1
 800e74e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e750:	eeb0 0a46 	vmov.f32	s0, s12
 800e754:	eef0 0a66 	vmov.f32	s1, s13
 800e758:	eeb0 1a47 	vmov.f32	s2, s14
 800e75c:	eef0 1a67 	vmov.f32	s3, s15
 800e760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e762:	f00c f863 	bl	801a82c <nk_widget_text>
    } break;
 800e766:	e101      	b.n	800e96c <nk_draw_symbol+0x304>
    case NK_SYMBOL_CIRCLE_SOLID:
    case NK_SYMBOL_CIRCLE_OUTLINE:
    case NK_SYMBOL_RECT_SOLID:
    case NK_SYMBOL_RECT_OUTLINE: {
        /* simple empty/filled shapes */
        if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {
 800e768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e76c:	2b05      	cmp	r3, #5
 800e76e:	d003      	beq.n	800e778 <nk_draw_symbol+0x110>
 800e770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e774:	2b06      	cmp	r3, #6
 800e776:	d155      	bne.n	800e824 <nk_draw_symbol+0x1bc>
            nk_fill_rect(out, content,  0, foreground);
 800e778:	ed97 6a04 	vldr	s12, [r7, #16]
 800e77c:	edd7 6a05 	vldr	s13, [r7, #20]
 800e780:	ed97 7a06 	vldr	s14, [r7, #24]
 800e784:	edd7 7a07 	vldr	s15, [r7, #28]
 800e788:	68b9      	ldr	r1, [r7, #8]
 800e78a:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800e984 <nk_draw_symbol+0x31c>
 800e78e:	eeb0 0a46 	vmov.f32	s0, s12
 800e792:	eef0 0a66 	vmov.f32	s1, s13
 800e796:	eeb0 1a47 	vmov.f32	s2, s14
 800e79a:	eef0 1a67 	vmov.f32	s3, s15
 800e79e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7a0:	f002 fe18 	bl	80113d4 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800e7a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e7a8:	2b06      	cmp	r3, #6
 800e7aa:	f040 808d 	bne.w	800e8c8 <nk_draw_symbol+0x260>
                nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);
 800e7ae:	ed97 6a04 	vldr	s12, [r7, #16]
 800e7b2:	edd7 6a05 	vldr	s13, [r7, #20]
 800e7b6:	ed97 7a06 	vldr	s14, [r7, #24]
 800e7ba:	edd7 7a07 	vldr	s15, [r7, #28]
 800e7be:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7c2:	eeb0 0a46 	vmov.f32	s0, s12
 800e7c6:	eef0 0a66 	vmov.f32	s1, s13
 800e7ca:	eeb0 1a47 	vmov.f32	s2, s14
 800e7ce:	eef0 1a67 	vmov.f32	s3, s15
 800e7d2:	f005 fb8d 	bl	8013ef0 <nk_shrink_rect>
 800e7d6:	eeb0 6a40 	vmov.f32	s12, s0
 800e7da:	eef0 6a60 	vmov.f32	s13, s1
 800e7de:	eeb0 7a41 	vmov.f32	s14, s2
 800e7e2:	eef0 7a61 	vmov.f32	s15, s3
 800e7e6:	ed87 6a14 	vstr	s12, [r7, #80]	; 0x50
 800e7ea:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 800e7ee:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 800e7f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800e7f6:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800e7fa:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800e7fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800e802:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e806:	68f9      	ldr	r1, [r7, #12]
 800e808:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800e984 <nk_draw_symbol+0x31c>
 800e80c:	eeb0 0a46 	vmov.f32	s0, s12
 800e810:	eef0 0a66 	vmov.f32	s1, s13
 800e814:	eeb0 1a47 	vmov.f32	s2, s14
 800e818:	eef0 1a67 	vmov.f32	s3, s15
 800e81c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e81e:	f002 fdd9 	bl	80113d4 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800e822:	e051      	b.n	800e8c8 <nk_draw_symbol+0x260>
        } else {
            nk_fill_circle(out, content, foreground);
 800e824:	ed97 6a04 	vldr	s12, [r7, #16]
 800e828:	edd7 6a05 	vldr	s13, [r7, #20]
 800e82c:	ed97 7a06 	vldr	s14, [r7, #24]
 800e830:	edd7 7a07 	vldr	s15, [r7, #28]
 800e834:	68b9      	ldr	r1, [r7, #8]
 800e836:	eeb0 0a46 	vmov.f32	s0, s12
 800e83a:	eef0 0a66 	vmov.f32	s1, s13
 800e83e:	eeb0 1a47 	vmov.f32	s2, s14
 800e842:	eef0 1a67 	vmov.f32	s3, s15
 800e846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e848:	f002 feba 	bl	80115c0 <nk_fill_circle>
            if (type == NK_SYMBOL_CIRCLE_OUTLINE)
 800e84c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e850:	2b04      	cmp	r3, #4
 800e852:	f040 808a 	bne.w	800e96a <nk_draw_symbol+0x302>
                nk_fill_circle(out, nk_shrink_rect(content, 1), background);
 800e856:	ed97 6a04 	vldr	s12, [r7, #16]
 800e85a:	edd7 6a05 	vldr	s13, [r7, #20]
 800e85e:	ed97 7a06 	vldr	s14, [r7, #24]
 800e862:	edd7 7a07 	vldr	s15, [r7, #28]
 800e866:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800e86a:	eeb0 0a46 	vmov.f32	s0, s12
 800e86e:	eef0 0a66 	vmov.f32	s1, s13
 800e872:	eeb0 1a47 	vmov.f32	s2, s14
 800e876:	eef0 1a67 	vmov.f32	s3, s15
 800e87a:	f005 fb39 	bl	8013ef0 <nk_shrink_rect>
 800e87e:	eeb0 6a40 	vmov.f32	s12, s0
 800e882:	eef0 6a60 	vmov.f32	s13, s1
 800e886:	eeb0 7a41 	vmov.f32	s14, s2
 800e88a:	eef0 7a61 	vmov.f32	s15, s3
 800e88e:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 800e892:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 800e896:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 800e89a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800e89e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800e8a2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800e8a6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800e8aa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e8ae:	68f9      	ldr	r1, [r7, #12]
 800e8b0:	eeb0 0a46 	vmov.f32	s0, s12
 800e8b4:	eef0 0a66 	vmov.f32	s1, s13
 800e8b8:	eeb0 1a47 	vmov.f32	s2, s14
 800e8bc:	eef0 1a67 	vmov.f32	s3, s15
 800e8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8c2:	f002 fe7d 	bl	80115c0 <nk_fill_circle>
        }
    } break;
 800e8c6:	e050      	b.n	800e96a <nk_draw_symbol+0x302>
 800e8c8:	e04f      	b.n	800e96a <nk_draw_symbol+0x302>
    case NK_SYMBOL_TRIANGLE_DOWN:
    case NK_SYMBOL_TRIANGLE_LEFT:
    case NK_SYMBOL_TRIANGLE_RIGHT: {
        enum nk_heading heading;
        struct nk_vec2 points[3];
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 800e8ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8ce:	2b0a      	cmp	r3, #10
 800e8d0:	d00d      	beq.n	800e8ee <nk_draw_symbol+0x286>
 800e8d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8d6:	2b09      	cmp	r3, #9
 800e8d8:	d007      	beq.n	800e8ea <nk_draw_symbol+0x282>
 800e8da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8de:	2b07      	cmp	r3, #7
 800e8e0:	d101      	bne.n	800e8e6 <nk_draw_symbol+0x27e>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	e004      	b.n	800e8f0 <nk_draw_symbol+0x288>
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	e002      	b.n	800e8f0 <nk_draw_symbol+0x288>
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	e000      	b.n	800e8f0 <nk_draw_symbol+0x288>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            (type == NK_SYMBOL_TRIANGLE_LEFT) ? NK_LEFT:
            (type == NK_SYMBOL_TRIANGLE_UP) ? NK_UP: NK_DOWN;
        nk_triangle_from_direction(points, content, 0, 0, heading);
 800e8f4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800e8f8:	ed97 6a04 	vldr	s12, [r7, #16]
 800e8fc:	edd7 6a05 	vldr	s13, [r7, #20]
 800e900:	ed97 7a06 	vldr	s14, [r7, #24]
 800e904:	edd7 7a07 	vldr	s15, [r7, #28]
 800e908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e90c:	4611      	mov	r1, r2
 800e90e:	eddf 2a1d 	vldr	s5, [pc, #116]	; 800e984 <nk_draw_symbol+0x31c>
 800e912:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 800e984 <nk_draw_symbol+0x31c>
 800e916:	eeb0 0a46 	vmov.f32	s0, s12
 800e91a:	eef0 0a66 	vmov.f32	s1, s13
 800e91e:	eeb0 1a47 	vmov.f32	s2, s14
 800e922:	eef0 1a67 	vmov.f32	s3, s15
 800e926:	4618      	mov	r0, r3
 800e928:	f005 fc34 	bl	8014194 <nk_triangle_from_direction>
        nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
 800e92c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e930:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e934:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800e938:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800e93c:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800e940:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800e944:	68b9      	ldr	r1, [r7, #8]
 800e946:	eef0 2a45 	vmov.f32	s5, s10
 800e94a:	eeb0 2a65 	vmov.f32	s4, s11
 800e94e:	eef0 1a46 	vmov.f32	s3, s12
 800e952:	eeb0 1a66 	vmov.f32	s2, s13
 800e956:	eef0 0a47 	vmov.f32	s1, s14
 800e95a:	eeb0 0a67 	vmov.f32	s0, s15
 800e95e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e960:	f002 ff18 	bl	8011794 <nk_fill_triangle>
            points[2].x, points[2].y, foreground);
    } break;
 800e964:	e002      	b.n	800e96c <nk_draw_symbol+0x304>
    default:
    case NK_SYMBOL_NONE:
    case NK_SYMBOL_MAX: break;
 800e966:	bf00      	nop
 800e968:	e000      	b.n	800e96c <nk_draw_symbol+0x304>
    } break;
 800e96a:	bf00      	nop
    }
}
 800e96c:	bf00      	nop
 800e96e:	3778      	adds	r7, #120	; 0x78
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	0802103c 	.word	0x0802103c
 800e978:	08021040 	.word	0x08021040
 800e97c:	08021044 	.word	0x08021044
 800e980:	08021048 	.word	0x08021048
 800e984:	00000000 	.word	0x00000000

0800e988 <nk_button_behavior>:
NK_LIB nk_bool
nk_button_behavior(nk_flags *state, struct nk_rect r,
    const struct nk_input *i, enum nk_button_behavior behavior)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b08a      	sub	sp, #40	; 0x28
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	61f8      	str	r0, [r7, #28]
 800e990:	eeb0 6a40 	vmov.f32	s12, s0
 800e994:	eef0 6a60 	vmov.f32	s13, s1
 800e998:	eeb0 7a41 	vmov.f32	s14, s2
 800e99c:	eef0 7a61 	vmov.f32	s15, s3
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	ed87 6a03 	vstr	s12, [r7, #12]
 800e9a8:	edc7 6a04 	vstr	s13, [r7, #16]
 800e9ac:	ed87 7a05 	vstr	s14, [r7, #20]
 800e9b0:	edc7 7a06 	vstr	s15, [r7, #24]
 800e9b4:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	627b      	str	r3, [r7, #36]	; 0x24
    nk_widget_state_reset(state);
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f003 0302 	and.w	r3, r3, #2
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d003      	beq.n	800e9ce <nk_button_behavior+0x46>
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	2206      	movs	r2, #6
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	e002      	b.n	800e9d4 <nk_button_behavior+0x4c>
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	2204      	movs	r2, #4
 800e9d2:	601a      	str	r2, [r3, #0]
    if (!i) return 0;
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d101      	bne.n	800e9de <nk_button_behavior+0x56>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	e088      	b.n	800eaf0 <nk_button_behavior+0x168>
    if (nk_input_is_mouse_hovering_rect(i, r)) {
 800e9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9e2:	edd7 6a04 	vldr	s13, [r7, #16]
 800e9e6:	ed97 7a05 	vldr	s14, [r7, #20]
 800e9ea:	edd7 7a06 	vldr	s15, [r7, #24]
 800e9ee:	eeb0 0a46 	vmov.f32	s0, s12
 800e9f2:	eef0 0a66 	vmov.f32	s1, s13
 800e9f6:	eeb0 1a47 	vmov.f32	s2, s14
 800e9fa:	eef0 1a67 	vmov.f32	s3, s15
 800e9fe:	68b8      	ldr	r0, [r7, #8]
 800ea00:	f004 f929 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d032      	beq.n	800ea70 <nk_button_behavior+0xe8>
        *state = NK_WIDGET_STATE_HOVERED;
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	2212      	movs	r2, #18
 800ea0e:	601a      	str	r2, [r3, #0]
        if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))
 800ea10:	2100      	movs	r1, #0
 800ea12:	68b8      	ldr	r0, [r7, #8]
 800ea14:	f004 f9c3 	bl	8012d9e <nk_input_is_mouse_down>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d002      	beq.n	800ea24 <nk_button_behavior+0x9c>
            *state = NK_WIDGET_STATE_ACTIVE;
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	2222      	movs	r2, #34	; 0x22
 800ea22:	601a      	str	r2, [r3, #0]
        if (nk_input_has_mouse_click_in_button_rect(i, NK_BUTTON_LEFT, r)) {
 800ea24:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea28:	edd7 6a04 	vldr	s13, [r7, #16]
 800ea2c:	ed97 7a05 	vldr	s14, [r7, #20]
 800ea30:	edd7 7a06 	vldr	s15, [r7, #24]
 800ea34:	eeb0 0a46 	vmov.f32	s0, s12
 800ea38:	eef0 0a66 	vmov.f32	s1, s13
 800ea3c:	eeb0 1a47 	vmov.f32	s2, s14
 800ea40:	eef0 1a67 	vmov.f32	s3, s15
 800ea44:	2100      	movs	r1, #0
 800ea46:	68b8      	ldr	r0, [r7, #8]
 800ea48:	f004 f843 	bl	8012ad2 <nk_input_has_mouse_click_in_button_rect>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00e      	beq.n	800ea70 <nk_button_behavior+0xe8>
            ret = (behavior != NK_BUTTON_DEFAULT) ?
                nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
 800ea52:	79fb      	ldrb	r3, [r7, #7]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d005      	beq.n	800ea64 <nk_button_behavior+0xdc>
 800ea58:	2100      	movs	r1, #0
 800ea5a:	68b8      	ldr	r0, [r7, #8]
 800ea5c:	f004 f99f 	bl	8012d9e <nk_input_is_mouse_down>
 800ea60:	4603      	mov	r3, r0
 800ea62:	e004      	b.n	800ea6e <nk_button_behavior+0xe6>
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
                nk_input_is_mouse_released(i, NK_BUTTON_LEFT);
#else
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
 800ea64:	2100      	movs	r1, #0
 800ea66:	68b8      	ldr	r0, [r7, #8]
 800ea68:	f004 f9b1 	bl	8012dce <nk_input_is_mouse_pressed>
 800ea6c:	4603      	mov	r3, r0
            ret = (behavior != NK_BUTTON_DEFAULT) ?
 800ea6e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f003 0310 	and.w	r3, r3, #16
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d01c      	beq.n	800eab6 <nk_button_behavior+0x12e>
 800ea7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea80:	edd7 6a04 	vldr	s13, [r7, #16]
 800ea84:	ed97 7a05 	vldr	s14, [r7, #20]
 800ea88:	edd7 7a06 	vldr	s15, [r7, #24]
 800ea8c:	eeb0 0a46 	vmov.f32	s0, s12
 800ea90:	eef0 0a66 	vmov.f32	s1, s13
 800ea94:	eeb0 1a47 	vmov.f32	s2, s14
 800ea98:	eef0 1a67 	vmov.f32	s3, s15
 800ea9c:	68b8      	ldr	r0, [r7, #8]
 800ea9e:	f004 f92c 	bl	8012cfa <nk_input_is_mouse_prev_hovering_rect>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d106      	bne.n	800eab6 <nk_button_behavior+0x12e>
        *state |= NK_WIDGET_STATE_ENTERED;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f043 0208 	orr.w	r2, r3, #8
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	e01b      	b.n	800eaee <nk_button_behavior+0x166>
    else if (nk_input_is_mouse_prev_hovering_rect(i, r))
 800eab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800eaba:	edd7 6a04 	vldr	s13, [r7, #16]
 800eabe:	ed97 7a05 	vldr	s14, [r7, #20]
 800eac2:	edd7 7a06 	vldr	s15, [r7, #24]
 800eac6:	eeb0 0a46 	vmov.f32	s0, s12
 800eaca:	eef0 0a66 	vmov.f32	s1, s13
 800eace:	eeb0 1a47 	vmov.f32	s2, s14
 800ead2:	eef0 1a67 	vmov.f32	s3, s15
 800ead6:	68b8      	ldr	r0, [r7, #8]
 800ead8:	f004 f90f 	bl	8012cfa <nk_input_is_mouse_prev_hovering_rect>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d005      	beq.n	800eaee <nk_button_behavior+0x166>
        *state |= NK_WIDGET_STATE_LEFT;
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	601a      	str	r2, [r3, #0]
    return ret;
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3728      	adds	r7, #40	; 0x28
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <nk_draw_button>:
NK_LIB const struct nk_style_item*
nk_draw_button(struct nk_command_buffer *out,
    const struct nk_rect *bounds, nk_flags state,
    const struct nk_style_button *style)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    if (state & NK_WIDGET_STATE_HOVER)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f003 0310 	and.w	r3, r3, #16
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <nk_draw_button+0x20>
        background = &style->hover;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	331c      	adds	r3, #28
 800eb14:	617b      	str	r3, [r7, #20]
 800eb16:	e00a      	b.n	800eb2e <nk_draw_button+0x36>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f003 0320 	and.w	r3, r3, #32
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d003      	beq.n	800eb2a <nk_draw_button+0x32>
        background = &style->active;
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	3338      	adds	r3, #56	; 0x38
 800eb26:	617b      	str	r3, [r7, #20]
 800eb28:	e001      	b.n	800eb2e <nk_draw_button+0x36>
    else background = &style->normal;
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	617b      	str	r3, [r7, #20]

    switch(background->type) {
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d01e      	beq.n	800eb74 <nk_draw_button+0x7c>
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	dc71      	bgt.n	800ec1e <nk_draw_button+0x126>
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d033      	beq.n	800eba6 <nk_draw_button+0xae>
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d16d      	bne.n	800ec1e <nk_draw_button+0x126>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	1d19      	adds	r1, r3, #4
 800eb46:	4a38      	ldr	r2, [pc, #224]	; (800ec28 <nk_draw_button+0x130>)
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	ed93 6a00 	vldr	s12, [r3]
 800eb4e:	edd3 6a01 	vldr	s13, [r3, #4]
 800eb52:	ed93 7a02 	vldr	s14, [r3, #8]
 800eb56:	edd3 7a03 	vldr	s15, [r3, #12]
 800eb5a:	6812      	ldr	r2, [r2, #0]
 800eb5c:	eeb0 0a46 	vmov.f32	s0, s12
 800eb60:	eef0 0a66 	vmov.f32	s1, s13
 800eb64:	eeb0 1a47 	vmov.f32	s2, s14
 800eb68:	eef0 1a67 	vmov.f32	s3, s15
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f002 ff8b 	bl	8011a88 <nk_draw_image>
            break;
 800eb72:	e054      	b.n	800ec1e <nk_draw_button+0x126>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	1d19      	adds	r1, r3, #4
 800eb78:	4a2b      	ldr	r2, [pc, #172]	; (800ec28 <nk_draw_button+0x130>)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	ed93 6a00 	vldr	s12, [r3]
 800eb80:	edd3 6a01 	vldr	s13, [r3, #4]
 800eb84:	ed93 7a02 	vldr	s14, [r3, #8]
 800eb88:	edd3 7a03 	vldr	s15, [r3, #12]
 800eb8c:	6812      	ldr	r2, [r2, #0]
 800eb8e:	eeb0 0a46 	vmov.f32	s0, s12
 800eb92:	eef0 0a66 	vmov.f32	s1, s13
 800eb96:	eeb0 1a47 	vmov.f32	s2, s14
 800eb9a:	eef0 1a67 	vmov.f32	s3, s15
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f003 f864 	bl	8011c6c <nk_draw_nine_slice>
            break;
 800eba4:	e03b      	b.n	800ec1e <nk_draw_button+0x126>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800ebac:	697a      	ldr	r2, [r7, #20]
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	ed93 6a00 	vldr	s12, [r3]
 800ebb4:	edd3 6a01 	vldr	s13, [r3, #4]
 800ebb8:	ed93 7a02 	vldr	s14, [r3, #8]
 800ebbc:	edd3 7a03 	vldr	s15, [r3, #12]
 800ebc0:	6851      	ldr	r1, [r2, #4]
 800ebc2:	eeb0 2a65 	vmov.f32	s4, s11
 800ebc6:	eeb0 0a46 	vmov.f32	s0, s12
 800ebca:	eef0 0a66 	vmov.f32	s1, s13
 800ebce:	eeb0 1a47 	vmov.f32	s2, s14
 800ebd2:	eef0 1a67 	vmov.f32	s3, s15
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f002 fbfc 	bl	80113d4 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
 800ebe8:	683a      	ldr	r2, [r7, #0]
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	ed93 6a00 	vldr	s12, [r3]
 800ebf0:	edd3 6a01 	vldr	s13, [r3, #4]
 800ebf4:	ed93 7a02 	vldr	s14, [r3, #8]
 800ebf8:	edd3 7a03 	vldr	s15, [r3, #12]
 800ebfc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ebfe:	eef0 2a45 	vmov.f32	s5, s10
 800ec02:	eeb0 2a65 	vmov.f32	s4, s11
 800ec06:	eeb0 0a46 	vmov.f32	s0, s12
 800ec0a:	eef0 0a66 	vmov.f32	s1, s13
 800ec0e:	eeb0 1a47 	vmov.f32	s2, s14
 800ec12:	eef0 1a67 	vmov.f32	s3, s15
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f002 fad4 	bl	80111c4 <nk_stroke_rect>
            break;
 800ec1c:	bf00      	nop
    }
    return background;
 800ec1e:	697b      	ldr	r3, [r7, #20]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3718      	adds	r7, #24
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	08022ce4 	.word	0x08022ce4

0800ec2c <nk_do_button>:
NK_LIB nk_bool
nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,
    const struct nk_style_button *style, const struct nk_input *in,
    enum nk_button_behavior behavior, struct nk_rect *content)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b08c      	sub	sp, #48	; 0x30
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	61f8      	str	r0, [r7, #28]
 800ec34:	61b9      	str	r1, [r7, #24]
 800ec36:	eeb0 6a40 	vmov.f32	s12, s0
 800ec3a:	eef0 6a60 	vmov.f32	s13, s1
 800ec3e:	eeb0 7a41 	vmov.f32	s14, s2
 800ec42:	eef0 7a61 	vmov.f32	s15, s3
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	603b      	str	r3, [r7, #0]
 800ec4a:	ed87 6a02 	vstr	s12, [r7, #8]
 800ec4e:	edc7 6a03 	vstr	s13, [r7, #12]
 800ec52:	ed87 7a04 	vstr	s14, [r7, #16]
 800ec56:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect bounds;
    NK_ASSERT(style);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d105      	bne.n	800ec6c <nk_do_button+0x40>
 800ec60:	4b5d      	ldr	r3, [pc, #372]	; (800edd8 <nk_do_button+0x1ac>)
 800ec62:	4a5e      	ldr	r2, [pc, #376]	; (800eddc <nk_do_button+0x1b0>)
 800ec64:	2179      	movs	r1, #121	; 0x79
 800ec66:	485e      	ldr	r0, [pc, #376]	; (800ede0 <nk_do_button+0x1b4>)
 800ec68:	f00e fc92 	bl	801d590 <__assert_func>
    NK_ASSERT(state);
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d105      	bne.n	800ec7e <nk_do_button+0x52>
 800ec72:	4b5c      	ldr	r3, [pc, #368]	; (800ede4 <nk_do_button+0x1b8>)
 800ec74:	4a59      	ldr	r2, [pc, #356]	; (800eddc <nk_do_button+0x1b0>)
 800ec76:	217a      	movs	r1, #122	; 0x7a
 800ec78:	4859      	ldr	r0, [pc, #356]	; (800ede0 <nk_do_button+0x1b4>)
 800ec7a:	f00e fc89 	bl	801d590 <__assert_func>
    NK_ASSERT(out);
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d105      	bne.n	800ec90 <nk_do_button+0x64>
 800ec84:	4b58      	ldr	r3, [pc, #352]	; (800ede8 <nk_do_button+0x1bc>)
 800ec86:	4a55      	ldr	r2, [pc, #340]	; (800eddc <nk_do_button+0x1b0>)
 800ec88:	217b      	movs	r1, #123	; 0x7b
 800ec8a:	4855      	ldr	r0, [pc, #340]	; (800ede0 <nk_do_button+0x1b4>)
 800ec8c:	f00e fc80 	bl	801d590 <__assert_func>
    if (!out || !style)
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <nk_do_button+0x70>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d101      	bne.n	800eca0 <nk_do_button+0x74>
        return nk_false;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	e097      	b.n	800edd0 <nk_do_button+0x1a4>

    /* calculate button content space */
    content->x = r.x + style->padding.x + style->border + style->rounding;
 800eca0:	ed97 7a02 	vldr	s14, [r7, #8]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ecaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ecb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ecbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc4:	edc3 7a00 	vstr	s15, [r3]
    content->y = r.y + style->padding.y + style->border + style->rounding;
 800ecc8:	ed97 7a03 	vldr	s14, [r7, #12]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ecd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ecdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ece6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecec:	edc3 7a01 	vstr	s15, [r3, #4]
    content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);
 800ecf0:	ed97 7a04 	vldr	s14, [r7, #16]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ecfa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ed04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ed0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ed12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed1c:	edc3 7a02 	vstr	s15, [r3, #8]
    content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);
 800ed20:	ed97 7a05 	vldr	s14, [r7, #20]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ed2a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ed34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ed3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ed42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed4c:	edc3 7a03 	vstr	s15, [r3, #12]

    /* execute button behavior */
    bounds.x = r.x - style->touch_padding.x;
 800ed50:	ed97 7a02 	vldr	s14, [r7, #8]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800ed5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed5e:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.y = r.y - style->touch_padding.y;
 800ed62:	ed97 7a03 	vldr	s14, [r7, #12]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800ed6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = r.w + 2 * style->touch_padding.x;
 800ed74:	ed97 7a04 	vldr	s14, [r7, #16]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800ed7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ed82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed86:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    bounds.h = r.h + 2 * style->touch_padding.y;
 800ed8a:	ed97 7a05 	vldr	s14, [r7, #20]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800ed94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ed98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return nk_button_behavior(state, bounds, in, behavior);
 800eda0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800eda4:	ed97 6a08 	vldr	s12, [r7, #32]
 800eda8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800edac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800edb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800edb4:	461a      	mov	r2, r3
 800edb6:	6839      	ldr	r1, [r7, #0]
 800edb8:	eeb0 0a46 	vmov.f32	s0, s12
 800edbc:	eef0 0a66 	vmov.f32	s1, s13
 800edc0:	eeb0 1a47 	vmov.f32	s2, s14
 800edc4:	eef0 1a67 	vmov.f32	s3, s15
 800edc8:	69f8      	ldr	r0, [r7, #28]
 800edca:	f7ff fddd 	bl	800e988 <nk_button_behavior>
 800edce:	4603      	mov	r3, r0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3730      	adds	r7, #48	; 0x30
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	0802104c 	.word	0x0802104c
 800eddc:	08022ce8 	.word	0x08022ce8
 800ede0:	08021054 	.word	0x08021054
 800ede4:	08021070 	.word	0x08021070
 800ede8:	08021078 	.word	0x08021078

0800edec <nk_draw_button_text>:
NK_LIB void
nk_draw_button_text(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content, nk_flags state,
    const struct nk_style_button *style, const char *txt, int len,
    nk_flags text_alignment, const struct nk_user_font *font)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08c      	sub	sp, #48	; 0x30
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
 800edf8:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;
    background = nk_draw_button(out, bounds, state, style);
 800edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	68b9      	ldr	r1, [r7, #8]
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f7ff fe79 	bl	800eaf8 <nk_draw_button>
 800ee06:	6278      	str	r0, [r7, #36]	; 0x24

    /* select correct colors/images */
    if (background->type == NK_STYLE_ITEM_COLOR)
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d103      	bne.n	800ee18 <nk_draw_button_text+0x2c>
        text.background = background->data.color;
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	61fb      	str	r3, [r7, #28]
 800ee16:	e002      	b.n	800ee1e <nk_draw_button_text+0x32>
    else text.background = style->text_background;
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee1c:	61fb      	str	r3, [r7, #28]
    if (state & NK_WIDGET_STATE_HOVER)
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	f003 0310 	and.w	r3, r3, #16
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <nk_draw_button_text+0x44>
        text.text = style->text_hover;
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee2c:	623b      	str	r3, [r7, #32]
 800ee2e:	e00b      	b.n	800ee48 <nk_draw_button_text+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	f003 0320 	and.w	r3, r3, #32
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d003      	beq.n	800ee42 <nk_draw_button_text+0x56>
        text.text = style->text_active;
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee3e:	623b      	str	r3, [r7, #32]
 800ee40:	e002      	b.n	800ee48 <nk_draw_button_text+0x5c>
    else text.text = style->text_normal;
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee46:	623b      	str	r3, [r7, #32]

    text.padding = nk_vec2(0,0);
 800ee48:	eddf 0a17 	vldr	s1, [pc, #92]	; 800eea8 <nk_draw_button_text+0xbc>
 800ee4c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800eea8 <nk_draw_button_text+0xbc>
 800ee50:	f005 f8ce 	bl	8013ff0 <nk_vec2>
 800ee54:	eeb0 7a40 	vmov.f32	s14, s0
 800ee58:	eef0 7a60 	vmov.f32	s15, s1
 800ee5c:	ed87 7a05 	vstr	s14, [r7, #20]
 800ee60:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *content, txt, len, &text, text_alignment, font);
 800ee64:	f107 0214 	add.w	r2, r7, #20
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	ed93 6a00 	vldr	s12, [r3]
 800ee6e:	edd3 6a01 	vldr	s13, [r3, #4]
 800ee72:	ed93 7a02 	vldr	s14, [r3, #8]
 800ee76:	edd3 7a03 	vldr	s15, [r3, #12]
 800ee7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	4613      	mov	r3, r2
 800ee84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee88:	eeb0 0a46 	vmov.f32	s0, s12
 800ee8c:	eef0 0a66 	vmov.f32	s1, s13
 800ee90:	eeb0 1a47 	vmov.f32	s2, s14
 800ee94:	eef0 1a67 	vmov.f32	s3, s15
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f00b fcc7 	bl	801a82c <nk_widget_text>
}
 800ee9e:	bf00      	nop
 800eea0:	3728      	adds	r7, #40	; 0x28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	00000000 	.word	0x00000000

0800eeac <nk_do_button_text>:
nk_do_button_text(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    const char *string, int len, nk_flags align, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b094      	sub	sp, #80	; 0x50
 800eeb0:	af06      	add	r7, sp, #24
 800eeb2:	61f8      	str	r0, [r7, #28]
 800eeb4:	61b9      	str	r1, [r7, #24]
 800eeb6:	eeb0 6a40 	vmov.f32	s12, s0
 800eeba:	eef0 6a60 	vmov.f32	s13, s1
 800eebe:	eeb0 7a41 	vmov.f32	s14, s2
 800eec2:	eef0 7a61 	vmov.f32	s15, s3
 800eec6:	607a      	str	r2, [r7, #4]
 800eec8:	603b      	str	r3, [r7, #0]
 800eeca:	ed87 6a02 	vstr	s12, [r7, #8]
 800eece:	edc7 6a03 	vstr	s13, [r7, #12]
 800eed2:	ed87 7a04 	vstr	s14, [r7, #16]
 800eed6:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect content;
    int ret = nk_false;
 800eeda:	2300      	movs	r3, #0
 800eedc:	637b      	str	r3, [r7, #52]	; 0x34

    NK_ASSERT(state);
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d105      	bne.n	800eef0 <nk_do_button_text+0x44>
 800eee4:	4b43      	ldr	r3, [pc, #268]	; (800eff4 <nk_do_button_text+0x148>)
 800eee6:	4a44      	ldr	r2, [pc, #272]	; (800eff8 <nk_do_button_text+0x14c>)
 800eee8:	21ad      	movs	r1, #173	; 0xad
 800eeea:	4844      	ldr	r0, [pc, #272]	; (800effc <nk_do_button_text+0x150>)
 800eeec:	f00e fb50 	bl	801d590 <__assert_func>
    NK_ASSERT(style);
 800eef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d105      	bne.n	800ef02 <nk_do_button_text+0x56>
 800eef6:	4b42      	ldr	r3, [pc, #264]	; (800f000 <nk_do_button_text+0x154>)
 800eef8:	4a3f      	ldr	r2, [pc, #252]	; (800eff8 <nk_do_button_text+0x14c>)
 800eefa:	21ae      	movs	r1, #174	; 0xae
 800eefc:	483f      	ldr	r0, [pc, #252]	; (800effc <nk_do_button_text+0x150>)
 800eefe:	f00e fb47 	bl	801d590 <__assert_func>
    NK_ASSERT(out);
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d105      	bne.n	800ef14 <nk_do_button_text+0x68>
 800ef08:	4b3e      	ldr	r3, [pc, #248]	; (800f004 <nk_do_button_text+0x158>)
 800ef0a:	4a3b      	ldr	r2, [pc, #236]	; (800eff8 <nk_do_button_text+0x14c>)
 800ef0c:	21af      	movs	r1, #175	; 0xaf
 800ef0e:	483b      	ldr	r0, [pc, #236]	; (800effc <nk_do_button_text+0x150>)
 800ef10:	f00e fb3e 	bl	801d590 <__assert_func>
    NK_ASSERT(string);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d105      	bne.n	800ef26 <nk_do_button_text+0x7a>
 800ef1a:	4b3b      	ldr	r3, [pc, #236]	; (800f008 <nk_do_button_text+0x15c>)
 800ef1c:	4a36      	ldr	r2, [pc, #216]	; (800eff8 <nk_do_button_text+0x14c>)
 800ef1e:	21b0      	movs	r1, #176	; 0xb0
 800ef20:	4836      	ldr	r0, [pc, #216]	; (800effc <nk_do_button_text+0x150>)
 800ef22:	f00e fb35 	bl	801d590 <__assert_func>
    NK_ASSERT(font);
 800ef26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d105      	bne.n	800ef38 <nk_do_button_text+0x8c>
 800ef2c:	4b37      	ldr	r3, [pc, #220]	; (800f00c <nk_do_button_text+0x160>)
 800ef2e:	4a32      	ldr	r2, [pc, #200]	; (800eff8 <nk_do_button_text+0x14c>)
 800ef30:	21b1      	movs	r1, #177	; 0xb1
 800ef32:	4832      	ldr	r0, [pc, #200]	; (800effc <nk_do_button_text+0x150>)
 800ef34:	f00e fb2c 	bl	801d590 <__assert_func>
    if (!out || !style || !font || !string)
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d008      	beq.n	800ef50 <nk_do_button_text+0xa4>
 800ef3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d005      	beq.n	800ef50 <nk_do_button_text+0xa4>
 800ef44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d002      	beq.n	800ef50 <nk_do_button_text+0xa4>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <nk_do_button_text+0xa8>
        return nk_false;
 800ef50:	2300      	movs	r3, #0
 800ef52:	e04b      	b.n	800efec <nk_do_button_text+0x140>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800ef54:	ed97 6a02 	vldr	s12, [r7, #8]
 800ef58:	edd7 6a03 	vldr	s13, [r7, #12]
 800ef5c:	ed97 7a04 	vldr	s14, [r7, #16]
 800ef60:	edd7 7a05 	vldr	s15, [r7, #20]
 800ef64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef68:	9301      	str	r3, [sp, #4]
 800ef6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef74:	eeb0 0a46 	vmov.f32	s0, s12
 800ef78:	eef0 0a66 	vmov.f32	s1, s13
 800ef7c:	eeb0 1a47 	vmov.f32	s2, s14
 800ef80:	eef0 1a67 	vmov.f32	s3, s15
 800ef84:	69b9      	ldr	r1, [r7, #24]
 800ef86:	69f8      	ldr	r0, [r7, #28]
 800ef88:	f7ff fe50 	bl	800ec2c <nk_do_button>
 800ef8c:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800ef8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d007      	beq.n	800efa8 <nk_do_button_text+0xfc>
 800ef98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efa0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800efa4:	69b8      	ldr	r0, [r7, #24]
 800efa6:	4798      	blx	r3
    nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	6818      	ldr	r0, [r3, #0]
 800efac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800efb0:	f107 0108 	add.w	r1, r7, #8
 800efb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efb6:	9304      	str	r3, [sp, #16]
 800efb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efba:	9303      	str	r3, [sp, #12]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	9302      	str	r3, [sp, #8]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	4603      	mov	r3, r0
 800efca:	69b8      	ldr	r0, [r7, #24]
 800efcc:	f7ff ff0e 	bl	800edec <nk_draw_button_text>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800efd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d007      	beq.n	800efea <nk_do_button_text+0x13e>
 800efda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efe2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800efe6:	69b8      	ldr	r0, [r7, #24]
 800efe8:	4798      	blx	r3
    return ret;
 800efea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800efec:	4618      	mov	r0, r3
 800efee:	3738      	adds	r7, #56	; 0x38
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	08021070 	.word	0x08021070
 800eff8:	08022cf8 	.word	0x08022cf8
 800effc:	08021054 	.word	0x08021054
 800f000:	0802104c 	.word	0x0802104c
 800f004:	08021078 	.word	0x08021078
 800f008:	0802107c 	.word	0x0802107c
 800f00c:	08021084 	.word	0x08021084

0800f010 <nk_draw_button_symbol>:
NK_LIB void
nk_draw_button_symbol(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content,
    nk_flags state, const struct nk_style_button *style,
    enum nk_symbol_type type, const struct nk_user_font *font)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08a      	sub	sp, #40	; 0x28
 800f014:	af02      	add	r7, sp, #8
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
 800f01c:	603b      	str	r3, [r7, #0]
    struct nk_color sym, bg;
    const struct nk_style_item *background;

    /* select correct colors/images */
    background = nk_draw_button(out, bounds, state, style);
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	683a      	ldr	r2, [r7, #0]
 800f022:	68b9      	ldr	r1, [r7, #8]
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f7ff fd67 	bl	800eaf8 <nk_draw_button>
 800f02a:	61f8      	str	r0, [r7, #28]
    if (background->type == NK_STYLE_ITEM_COLOR)
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d103      	bne.n	800f03c <nk_draw_button_symbol+0x2c>
        bg = background->data.color;
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	617b      	str	r3, [r7, #20]
 800f03a:	e002      	b.n	800f042 <nk_draw_button_symbol+0x32>
    else bg = style->text_background;
 800f03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f040:	617b      	str	r3, [r7, #20]

    if (state & NK_WIDGET_STATE_HOVER)
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	f003 0310 	and.w	r3, r3, #16
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d003      	beq.n	800f054 <nk_draw_button_symbol+0x44>
        sym = style->text_hover;
 800f04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f050:	61bb      	str	r3, [r7, #24]
 800f052:	e00b      	b.n	800f06c <nk_draw_button_symbol+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	f003 0320 	and.w	r3, r3, #32
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d003      	beq.n	800f066 <nk_draw_button_symbol+0x56>
        sym = style->text_active;
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f062:	61bb      	str	r3, [r7, #24]
 800f064:	e002      	b.n	800f06c <nk_draw_button_symbol+0x5c>
    else sym = style->text_normal;
 800f066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f06a:	61bb      	str	r3, [r7, #24]
    nk_draw_symbol(out, type, *content, bg, sym, 1, font);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	ed93 6a00 	vldr	s12, [r3]
 800f072:	edd3 6a01 	vldr	s13, [r3, #4]
 800f076:	ed93 7a02 	vldr	s14, [r3, #8]
 800f07a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f07e:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f084:	9300      	str	r3, [sp, #0]
 800f086:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	eeb0 0a46 	vmov.f32	s0, s12
 800f092:	eef0 0a66 	vmov.f32	s1, s13
 800f096:	eeb0 1a47 	vmov.f32	s2, s14
 800f09a:	eef0 1a67 	vmov.f32	s3, s15
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f7ff fae2 	bl	800e668 <nk_draw_symbol>
}
 800f0a4:	bf00      	nop
 800f0a6:	3720      	adds	r7, #32
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <nk_do_button_symbol>:
nk_do_button_symbol(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    enum nk_symbol_type symbol, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b092      	sub	sp, #72	; 0x48
 800f0b0:	af04      	add	r7, sp, #16
 800f0b2:	61f8      	str	r0, [r7, #28]
 800f0b4:	61b9      	str	r1, [r7, #24]
 800f0b6:	eeb0 6a40 	vmov.f32	s12, s0
 800f0ba:	eef0 6a60 	vmov.f32	s13, s1
 800f0be:	eeb0 7a41 	vmov.f32	s14, s2
 800f0c2:	eef0 7a61 	vmov.f32	s15, s3
 800f0c6:	4611      	mov	r1, r2
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	ed87 6a02 	vstr	s12, [r7, #8]
 800f0ce:	edc7 6a03 	vstr	s13, [r7, #12]
 800f0d2:	ed87 7a04 	vstr	s14, [r7, #16]
 800f0d6:	edc7 7a05 	vstr	s15, [r7, #20]
 800f0da:	460b      	mov	r3, r1
 800f0dc:	71fb      	strb	r3, [r7, #7]
 800f0de:	4613      	mov	r3, r2
 800f0e0:	71bb      	strb	r3, [r7, #6]
    int ret;
    struct nk_rect content;

    NK_ASSERT(state);
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d105      	bne.n	800f0f4 <nk_do_button_symbol+0x48>
 800f0e8:	4b3c      	ldr	r3, [pc, #240]	; (800f1dc <nk_do_button_symbol+0x130>)
 800f0ea:	4a3d      	ldr	r2, [pc, #244]	; (800f1e0 <nk_do_button_symbol+0x134>)
 800f0ec:	21db      	movs	r1, #219	; 0xdb
 800f0ee:	483d      	ldr	r0, [pc, #244]	; (800f1e4 <nk_do_button_symbol+0x138>)
 800f0f0:	f00e fa4e 	bl	801d590 <__assert_func>
    NK_ASSERT(style);
 800f0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d105      	bne.n	800f106 <nk_do_button_symbol+0x5a>
 800f0fa:	4b3b      	ldr	r3, [pc, #236]	; (800f1e8 <nk_do_button_symbol+0x13c>)
 800f0fc:	4a38      	ldr	r2, [pc, #224]	; (800f1e0 <nk_do_button_symbol+0x134>)
 800f0fe:	21dc      	movs	r1, #220	; 0xdc
 800f100:	4838      	ldr	r0, [pc, #224]	; (800f1e4 <nk_do_button_symbol+0x138>)
 800f102:	f00e fa45 	bl	801d590 <__assert_func>
    NK_ASSERT(font);
 800f106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d105      	bne.n	800f118 <nk_do_button_symbol+0x6c>
 800f10c:	4b37      	ldr	r3, [pc, #220]	; (800f1ec <nk_do_button_symbol+0x140>)
 800f10e:	4a34      	ldr	r2, [pc, #208]	; (800f1e0 <nk_do_button_symbol+0x134>)
 800f110:	21dd      	movs	r1, #221	; 0xdd
 800f112:	4834      	ldr	r0, [pc, #208]	; (800f1e4 <nk_do_button_symbol+0x138>)
 800f114:	f00e fa3c 	bl	801d590 <__assert_func>
    NK_ASSERT(out);
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d105      	bne.n	800f12a <nk_do_button_symbol+0x7e>
 800f11e:	4b34      	ldr	r3, [pc, #208]	; (800f1f0 <nk_do_button_symbol+0x144>)
 800f120:	4a2f      	ldr	r2, [pc, #188]	; (800f1e0 <nk_do_button_symbol+0x134>)
 800f122:	21de      	movs	r1, #222	; 0xde
 800f124:	482f      	ldr	r0, [pc, #188]	; (800f1e4 <nk_do_button_symbol+0x138>)
 800f126:	f00e fa33 	bl	801d590 <__assert_func>
    if (!out || !style || !font || !state)
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d008      	beq.n	800f142 <nk_do_button_symbol+0x96>
 800f130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f132:	2b00      	cmp	r3, #0
 800f134:	d005      	beq.n	800f142 <nk_do_button_symbol+0x96>
 800f136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d002      	beq.n	800f142 <nk_do_button_symbol+0x96>
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d101      	bne.n	800f146 <nk_do_button_symbol+0x9a>
        return nk_false;
 800f142:	2300      	movs	r3, #0
 800f144:	e046      	b.n	800f1d4 <nk_do_button_symbol+0x128>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800f146:	ed97 6a02 	vldr	s12, [r7, #8]
 800f14a:	edd7 6a03 	vldr	s13, [r7, #12]
 800f14e:	ed97 7a04 	vldr	s14, [r7, #16]
 800f152:	edd7 7a05 	vldr	s15, [r7, #20]
 800f156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f15a:	9301      	str	r3, [sp, #4]
 800f15c:	79bb      	ldrb	r3, [r7, #6]
 800f15e:	9300      	str	r3, [sp, #0]
 800f160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f164:	eeb0 0a46 	vmov.f32	s0, s12
 800f168:	eef0 0a66 	vmov.f32	s1, s13
 800f16c:	eeb0 1a47 	vmov.f32	s2, s14
 800f170:	eef0 1a67 	vmov.f32	s3, s15
 800f174:	69b9      	ldr	r1, [r7, #24]
 800f176:	69f8      	ldr	r0, [r7, #28]
 800f178:	f7ff fd58 	bl	800ec2c <nk_do_button>
 800f17c:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800f17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f184:	2b00      	cmp	r3, #0
 800f186:	d007      	beq.n	800f198 <nk_do_button_symbol+0xec>
 800f188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f18e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f190:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f194:	69b8      	ldr	r0, [r7, #24]
 800f196:	4798      	blx	r3
    nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	6818      	ldr	r0, [r3, #0]
 800f19c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f1a0:	f107 0108 	add.w	r1, r7, #8
 800f1a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1a6:	9302      	str	r3, [sp, #8]
 800f1a8:	79fb      	ldrb	r3, [r7, #7]
 800f1aa:	9301      	str	r3, [sp, #4]
 800f1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	69b8      	ldr	r0, [r7, #24]
 800f1b4:	f7ff ff2c 	bl	800f010 <nk_draw_button_symbol>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800f1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d007      	beq.n	800f1d2 <nk_do_button_symbol+0x126>
 800f1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f1c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1ca:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f1ce:	69b8      	ldr	r0, [r7, #24]
 800f1d0:	4798      	blx	r3
    return ret;
 800f1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3738      	adds	r7, #56	; 0x38
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	08021070 	.word	0x08021070
 800f1e0:	08022d0c 	.word	0x08022d0c
 800f1e4:	08021054 	.word	0x08021054
 800f1e8:	0802104c 	.word	0x0802104c
 800f1ec:	08021084 	.word	0x08021084
 800f1f0:	08021078 	.word	0x08021078

0800f1f4 <nk_button_set_behavior>:
    if (style->draw_end) style->draw_end(out, style->userdata);
    return ret;
}
NK_API void
nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d106      	bne.n	800f214 <nk_button_set_behavior+0x20>
 800f206:	4b0b      	ldr	r3, [pc, #44]	; (800f234 <nk_button_set_behavior+0x40>)
 800f208:	4a0b      	ldr	r2, [pc, #44]	; (800f238 <nk_button_set_behavior+0x44>)
 800f20a:	f240 118b 	movw	r1, #395	; 0x18b
 800f20e:	480b      	ldr	r0, [pc, #44]	; (800f23c <nk_button_set_behavior+0x48>)
 800f210:	f00e f9be 	bl	801d590 <__assert_func>
    if (!ctx) return;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d007      	beq.n	800f22a <nk_button_set_behavior+0x36>
    ctx->button_behavior = behavior;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f220:	461a      	mov	r2, r3
 800f222:	78fb      	ldrb	r3, [r7, #3]
 800f224:	f882 3ad8 	strb.w	r3, [r2, #2776]	; 0xad8
 800f228:	e000      	b.n	800f22c <nk_button_set_behavior+0x38>
    if (!ctx) return;
 800f22a:	bf00      	nop
}
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	0802108c 	.word	0x0802108c
 800f238:	08022d20 	.word	0x08022d20
 800f23c:	08021054 	.word	0x08021054

0800f240 <nk_button_text_styled>:
    return 1;
}
NK_API nk_bool
nk_button_text_styled(struct nk_context *ctx,
    const struct nk_style_button *style, const char *title, int len)
{
 800f240:	b590      	push	{r4, r7, lr}
 800f242:	b093      	sub	sp, #76	; 0x4c
 800f244:	af06      	add	r7, sp, #24
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
 800f24c:	603b      	str	r3, [r7, #0]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d106      	bne.n	800f262 <nk_button_text_styled+0x22>
 800f254:	4b4f      	ldr	r3, [pc, #316]	; (800f394 <nk_button_text_styled+0x154>)
 800f256:	4a50      	ldr	r2, [pc, #320]	; (800f398 <nk_button_text_styled+0x158>)
 800f258:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f25c:	484f      	ldr	r0, [pc, #316]	; (800f39c <nk_button_text_styled+0x15c>)
 800f25e:	f00e f997 	bl	801d590 <__assert_func>
    NK_ASSERT(style);
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <nk_button_text_styled+0x36>
 800f268:	4b4d      	ldr	r3, [pc, #308]	; (800f3a0 <nk_button_text_styled+0x160>)
 800f26a:	4a4b      	ldr	r2, [pc, #300]	; (800f398 <nk_button_text_styled+0x158>)
 800f26c:	f240 11c1 	movw	r1, #449	; 0x1c1
 800f270:	484a      	ldr	r0, [pc, #296]	; (800f39c <nk_button_text_styled+0x15c>)
 800f272:	f00e f98d 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f27c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f280:	2b00      	cmp	r3, #0
 800f282:	d106      	bne.n	800f292 <nk_button_text_styled+0x52>
 800f284:	4b47      	ldr	r3, [pc, #284]	; (800f3a4 <nk_button_text_styled+0x164>)
 800f286:	4a44      	ldr	r2, [pc, #272]	; (800f398 <nk_button_text_styled+0x158>)
 800f288:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800f28c:	4843      	ldr	r0, [pc, #268]	; (800f39c <nk_button_text_styled+0x15c>)
 800f28e:	f00e f97f 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f298:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d106      	bne.n	800f2b2 <nk_button_text_styled+0x72>
 800f2a4:	4b40      	ldr	r3, [pc, #256]	; (800f3a8 <nk_button_text_styled+0x168>)
 800f2a6:	4a3c      	ldr	r2, [pc, #240]	; (800f398 <nk_button_text_styled+0x158>)
 800f2a8:	f240 11c3 	movw	r1, #451	; 0x1c3
 800f2ac:	483b      	ldr	r0, [pc, #236]	; (800f39c <nk_button_text_styled+0x15c>)
 800f2ae:	f00e f96f 	bl	801d590 <__assert_func>
    if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d012      	beq.n	800f2de <nk_button_text_styled+0x9e>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00f      	beq.n	800f2de <nk_button_text_styled+0x9e>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f2c4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d008      	beq.n	800f2de <nk_button_text_styled+0x9e>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f2d2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d101      	bne.n	800f2e2 <nk_button_text_styled+0xa2>
 800f2de:	2300      	movs	r3, #0
 800f2e0:	e054      	b.n	800f38c <nk_button_text_styled+0x14c>

    win = ctx->current;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f2e8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800f2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2f4:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800f2f6:	f107 0310 	add.w	r3, r7, #16
 800f2fa:	68f9      	ldr	r1, [r7, #12]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f00c fe5f 	bl	801bfc0 <nk_widget>
 800f302:	4603      	mov	r3, r0
 800f304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!state) return 0;
 800f308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d101      	bne.n	800f314 <nk_button_text_styled+0xd4>
 800f310:	2300      	movs	r3, #0
 800f312:	e03b      	b.n	800f38c <nk_button_text_styled+0x14c>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800f314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d007      	beq.n	800f32c <nk_button_text_styled+0xec>
 800f31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f324:	2b00      	cmp	r3, #0
 800f326:	d101      	bne.n	800f32c <nk_button_text_styled+0xec>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	e000      	b.n	800f32e <nk_button_text_styled+0xee>
 800f32c:	2300      	movs	r3, #0
 800f32e:	623b      	str	r3, [r7, #32]
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800f336:	3014      	adds	r0, #20
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	f103 0464 	add.w	r4, r3, #100	; 0x64
                    title, len, style->text_alignment, ctx->button_behavior,
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f348:	f892 2ad8 	ldrb.w	r2, [r2, #2776]	; 0xad8
 800f34c:	68f9      	ldr	r1, [r7, #12]
 800f34e:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 800f352:	ed97 6a04 	vldr	s12, [r7, #16]
 800f356:	edd7 6a05 	vldr	s13, [r7, #20]
 800f35a:	ed97 7a06 	vldr	s14, [r7, #24]
 800f35e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f362:	9104      	str	r1, [sp, #16]
 800f364:	6a39      	ldr	r1, [r7, #32]
 800f366:	9103      	str	r1, [sp, #12]
 800f368:	68b9      	ldr	r1, [r7, #8]
 800f36a:	9102      	str	r1, [sp, #8]
 800f36c:	9201      	str	r2, [sp, #4]
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	eeb0 0a46 	vmov.f32	s0, s12
 800f378:	eef0 0a66 	vmov.f32	s1, s13
 800f37c:	eeb0 1a47 	vmov.f32	s2, s14
 800f380:	eef0 1a67 	vmov.f32	s3, s15
 800f384:	4621      	mov	r1, r4
 800f386:	f7ff fd91 	bl	800eeac <nk_do_button_text>
 800f38a:	4603      	mov	r3, r0
                    style, in, ctx->style.font);
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3734      	adds	r7, #52	; 0x34
 800f390:	46bd      	mov	sp, r7
 800f392:	bd90      	pop	{r4, r7, pc}
 800f394:	0802108c 	.word	0x0802108c
 800f398:	08022d38 	.word	0x08022d38
 800f39c:	08021054 	.word	0x08021054
 800f3a0:	0802104c 	.word	0x0802104c
 800f3a4:	08021108 	.word	0x08021108
 800f3a8:	08021118 	.word	0x08021118

0800f3ac <nk_button_text>:
NK_API nk_bool
nk_button_text(struct nk_context *ctx, const char *title, int len)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
    NK_ASSERT(ctx);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d106      	bne.n	800f3cc <nk_button_text+0x20>
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <nk_button_text+0x44>)
 800f3c0:	4a0c      	ldr	r2, [pc, #48]	; (800f3f4 <nk_button_text+0x48>)
 800f3c2:	f240 11d3 	movw	r1, #467	; 0x1d3
 800f3c6:	480c      	ldr	r0, [pc, #48]	; (800f3f8 <nk_button_text+0x4c>)
 800f3c8:	f00e f8e2 	bl	801d590 <__assert_func>
    if (!ctx) return 0;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <nk_button_text+0x2a>
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	e008      	b.n	800f3e8 <nk_button_text+0x3c>
    return nk_button_text_styled(ctx, &ctx->style.button, title, len);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f7ff ff2d 	bl	800f240 <nk_button_text_styled>
 800f3e6:	4603      	mov	r3, r0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	0802108c 	.word	0x0802108c
 800f3f4:	08022d50 	.word	0x08022d50
 800f3f8:	08021054 	.word	0x08021054

0800f3fc <nk_button_label>:
    const struct nk_style_button *style, const char *title)
{
    return nk_button_text_styled(ctx, style, title, nk_strlen(title));
}
NK_API nk_bool nk_button_label(struct nk_context *ctx, const char *title)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
    return nk_button_text(ctx, title, nk_strlen(title));
 800f406:	6838      	ldr	r0, [r7, #0]
 800f408:	f00c fbe8 	bl	801bbdc <nk_strlen>
 800f40c:	4603      	mov	r3, r0
 800f40e:	461a      	mov	r2, r3
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7ff ffca 	bl	800f3ac <nk_button_text>
 800f418:	4603      	mov	r3, r0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
	...

0800f424 <nk_button_symbol_styled>:
    return ret;
}
NK_API nk_bool
nk_button_symbol_styled(struct nk_context *ctx,
    const struct nk_style_button *style, enum nk_symbol_type symbol)
{
 800f424:	b590      	push	{r4, r7, lr}
 800f426:	b091      	sub	sp, #68	; 0x44
 800f428:	af04      	add	r7, sp, #16
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	4613      	mov	r3, r2
 800f430:	71fb      	strb	r3, [r7, #7]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d106      	bne.n	800f446 <nk_button_symbol_styled+0x22>
 800f438:	4b46      	ldr	r3, [pc, #280]	; (800f554 <nk_button_symbol_styled+0x130>)
 800f43a:	4a47      	ldr	r2, [pc, #284]	; (800f558 <nk_button_symbol_styled+0x134>)
 800f43c:	f240 210e 	movw	r1, #526	; 0x20e
 800f440:	4846      	ldr	r0, [pc, #280]	; (800f55c <nk_button_symbol_styled+0x138>)
 800f442:	f00e f8a5 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f44c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f450:	2b00      	cmp	r3, #0
 800f452:	d106      	bne.n	800f462 <nk_button_symbol_styled+0x3e>
 800f454:	4b42      	ldr	r3, [pc, #264]	; (800f560 <nk_button_symbol_styled+0x13c>)
 800f456:	4a40      	ldr	r2, [pc, #256]	; (800f558 <nk_button_symbol_styled+0x134>)
 800f458:	f240 210f 	movw	r1, #527	; 0x20f
 800f45c:	483f      	ldr	r0, [pc, #252]	; (800f55c <nk_button_symbol_styled+0x138>)
 800f45e:	f00e f897 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f468:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f470:	2b00      	cmp	r3, #0
 800f472:	d106      	bne.n	800f482 <nk_button_symbol_styled+0x5e>
 800f474:	4b3b      	ldr	r3, [pc, #236]	; (800f564 <nk_button_symbol_styled+0x140>)
 800f476:	4a38      	ldr	r2, [pc, #224]	; (800f558 <nk_button_symbol_styled+0x134>)
 800f478:	f44f 7104 	mov.w	r1, #528	; 0x210
 800f47c:	4837      	ldr	r0, [pc, #220]	; (800f55c <nk_button_symbol_styled+0x138>)
 800f47e:	f00e f887 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00f      	beq.n	800f4a8 <nk_button_symbol_styled+0x84>
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f48e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f492:	2b00      	cmp	r3, #0
 800f494:	d008      	beq.n	800f4a8 <nk_button_symbol_styled+0x84>
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f49c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <nk_button_symbol_styled+0x88>
        return 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	e04f      	b.n	800f54c <nk_button_symbol_styled+0x128>

    win = ctx->current;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f4b2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800f4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4be:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800f4c0:	f107 0310 	add.w	r3, r7, #16
 800f4c4:	68f9      	ldr	r1, [r7, #12]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f00c fd7a 	bl	801bfc0 <nk_widget>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return 0;
 800f4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d101      	bne.n	800f4de <nk_button_symbol_styled+0xba>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	e036      	b.n	800f54c <nk_button_symbol_styled+0x128>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800f4de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4e2:	2b02      	cmp	r3, #2
 800f4e4:	d007      	beq.n	800f4f6 <nk_button_symbol_styled+0xd2>
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d101      	bne.n	800f4f6 <nk_button_symbol_styled+0xd2>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	e000      	b.n	800f4f8 <nk_button_symbol_styled+0xd4>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	623b      	str	r3, [r7, #32]
    return nk_do_button_symbol(&ctx->last_widget_state, &win->buffer, bounds,
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800f500:	3014      	adds	r0, #20
 800f502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f504:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f50e:	f893 4ad8 	ldrb.w	r4, [r3, #2776]	; 0xad8
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800f518:	79fa      	ldrb	r2, [r7, #7]
 800f51a:	ed97 6a04 	vldr	s12, [r7, #16]
 800f51e:	edd7 6a05 	vldr	s13, [r7, #20]
 800f522:	ed97 7a06 	vldr	s14, [r7, #24]
 800f526:	edd7 7a07 	vldr	s15, [r7, #28]
 800f52a:	9302      	str	r3, [sp, #8]
 800f52c:	6a3b      	ldr	r3, [r7, #32]
 800f52e:	9301      	str	r3, [sp, #4]
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	4623      	mov	r3, r4
 800f536:	eeb0 0a46 	vmov.f32	s0, s12
 800f53a:	eef0 0a66 	vmov.f32	s1, s13
 800f53e:	eeb0 1a47 	vmov.f32	s2, s14
 800f542:	eef0 1a67 	vmov.f32	s3, s15
 800f546:	f7ff fdb1 	bl	800f0ac <nk_do_button_symbol>
 800f54a:	4603      	mov	r3, r0
            symbol, ctx->button_behavior, style, in, ctx->style.font);
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3734      	adds	r7, #52	; 0x34
 800f550:	46bd      	mov	sp, r7
 800f552:	bd90      	pop	{r4, r7, pc}
 800f554:	0802108c 	.word	0x0802108c
 800f558:	08022d60 	.word	0x08022d60
 800f55c:	08021054 	.word	0x08021054
 800f560:	08021108 	.word	0x08021108
 800f564:	08021118 	.word	0x08021118

0800f568 <nk_button_symbol>:
NK_API nk_bool
nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	460b      	mov	r3, r1
 800f572:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d106      	bne.n	800f588 <nk_button_symbol+0x20>
 800f57a:	4b0c      	ldr	r3, [pc, #48]	; (800f5ac <nk_button_symbol+0x44>)
 800f57c:	4a0c      	ldr	r2, [pc, #48]	; (800f5b0 <nk_button_symbol+0x48>)
 800f57e:	f240 211f 	movw	r1, #543	; 0x21f
 800f582:	480c      	ldr	r0, [pc, #48]	; (800f5b4 <nk_button_symbol+0x4c>)
 800f584:	f00e f804 	bl	801d590 <__assert_func>
    if (!ctx) return 0;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d101      	bne.n	800f592 <nk_button_symbol+0x2a>
 800f58e:	2300      	movs	r3, #0
 800f590:	e008      	b.n	800f5a4 <nk_button_symbol+0x3c>
    return nk_button_symbol_styled(ctx, &ctx->style.button, symbol);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f598:	78fa      	ldrb	r2, [r7, #3]
 800f59a:	4619      	mov	r1, r3
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff ff41 	bl	800f424 <nk_button_symbol_styled>
 800f5a2:	4603      	mov	r3, r0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	0802108c 	.word	0x0802108c
 800f5b0:	08022d78 	.word	0x08022d78
 800f5b4:	08021054 	.word	0x08021054

0800f5b8 <nk_rgba>:
    }
    return i;
}
NK_API struct nk_color
nk_rgba(int r, int g, int b, int a)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	603b      	str	r3, [r7, #0]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	db07      	blt.n	800f5dc <nk_rgba+0x24>
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2bfe      	cmp	r3, #254	; 0xfe
 800f5d0:	dc02      	bgt.n	800f5d8 <nk_rgba+0x20>
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	e002      	b.n	800f5de <nk_rgba+0x26>
 800f5d8:	23ff      	movs	r3, #255	; 0xff
 800f5da:	e000      	b.n	800f5de <nk_rgba+0x26>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	db07      	blt.n	800f5f6 <nk_rgba+0x3e>
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	2bfe      	cmp	r3, #254	; 0xfe
 800f5ea:	dc02      	bgt.n	800f5f2 <nk_rgba+0x3a>
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	e002      	b.n	800f5f8 <nk_rgba+0x40>
 800f5f2:	23ff      	movs	r3, #255	; 0xff
 800f5f4:	e000      	b.n	800f5f8 <nk_rgba+0x40>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	db07      	blt.n	800f610 <nk_rgba+0x58>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2bfe      	cmp	r3, #254	; 0xfe
 800f604:	dc02      	bgt.n	800f60c <nk_rgba+0x54>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	e002      	b.n	800f612 <nk_rgba+0x5a>
 800f60c:	23ff      	movs	r3, #255	; 0xff
 800f60e:	e000      	b.n	800f612 <nk_rgba+0x5a>
 800f610:	2300      	movs	r3, #0
 800f612:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	db07      	blt.n	800f62a <nk_rgba+0x72>
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	2bfe      	cmp	r3, #254	; 0xfe
 800f61e:	dc02      	bgt.n	800f626 <nk_rgba+0x6e>
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	b2db      	uxtb	r3, r3
 800f624:	e002      	b.n	800f62c <nk_rgba+0x74>
 800f626:	23ff      	movs	r3, #255	; 0xff
 800f628:	e000      	b.n	800f62c <nk_rgba+0x74>
 800f62a:	2300      	movs	r3, #0
 800f62c:	74fb      	strb	r3, [r7, #19]
    return ret;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	617b      	str	r3, [r7, #20]
 800f632:	2300      	movs	r3, #0
 800f634:	7d3a      	ldrb	r2, [r7, #20]
 800f636:	f362 0307 	bfi	r3, r2, #0, #8
 800f63a:	7d7a      	ldrb	r2, [r7, #21]
 800f63c:	f362 230f 	bfi	r3, r2, #8, #8
 800f640:	7dba      	ldrb	r2, [r7, #22]
 800f642:	f362 4317 	bfi	r3, r2, #16, #8
 800f646:	7dfa      	ldrb	r2, [r7, #23]
 800f648:	f362 631f 	bfi	r3, r2, #24, #8
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	371c      	adds	r7, #28
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <nk_rgb>:
{
    return nk_rgba(c[0], c[1], c[2], c[3]);
}
NK_API struct nk_color
nk_rgb(int r, int g, int b)
{
 800f658:	b480      	push	{r7}
 800f65a:	b087      	sub	sp, #28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	db07      	blt.n	800f67a <nk_rgb+0x22>
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2bfe      	cmp	r3, #254	; 0xfe
 800f66e:	dc02      	bgt.n	800f676 <nk_rgb+0x1e>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	b2db      	uxtb	r3, r3
 800f674:	e002      	b.n	800f67c <nk_rgb+0x24>
 800f676:	23ff      	movs	r3, #255	; 0xff
 800f678:	e000      	b.n	800f67c <nk_rgb+0x24>
 800f67a:	2300      	movs	r3, #0
 800f67c:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	2b00      	cmp	r3, #0
 800f682:	db07      	blt.n	800f694 <nk_rgb+0x3c>
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	2bfe      	cmp	r3, #254	; 0xfe
 800f688:	dc02      	bgt.n	800f690 <nk_rgb+0x38>
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	e002      	b.n	800f696 <nk_rgb+0x3e>
 800f690:	23ff      	movs	r3, #255	; 0xff
 800f692:	e000      	b.n	800f696 <nk_rgb+0x3e>
 800f694:	2300      	movs	r3, #0
 800f696:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	db07      	blt.n	800f6ae <nk_rgb+0x56>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2bfe      	cmp	r3, #254	; 0xfe
 800f6a2:	dc02      	bgt.n	800f6aa <nk_rgb+0x52>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	e002      	b.n	800f6b0 <nk_rgb+0x58>
 800f6aa:	23ff      	movs	r3, #255	; 0xff
 800f6ac:	e000      	b.n	800f6b0 <nk_rgb+0x58>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)255;
 800f6b2:	23ff      	movs	r3, #255	; 0xff
 800f6b4:	74fb      	strb	r3, [r7, #19]
    return ret;
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	617b      	str	r3, [r7, #20]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	7d3a      	ldrb	r2, [r7, #20]
 800f6be:	f362 0307 	bfi	r3, r2, #0, #8
 800f6c2:	7d7a      	ldrb	r2, [r7, #21]
 800f6c4:	f362 230f 	bfi	r3, r2, #8, #8
 800f6c8:	7dba      	ldrb	r2, [r7, #22]
 800f6ca:	f362 4317 	bfi	r3, r2, #16, #8
 800f6ce:	7dfa      	ldrb	r2, [r7, #23]
 800f6d0:	f362 631f 	bfi	r3, r2, #24, #8
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	371c      	adds	r7, #28
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <nk_combo_begin>:
 *
 * ===============================================================*/
NK_INTERN nk_bool
nk_combo_begin(struct nk_context *ctx, struct nk_window *win,
    struct nk_vec2 size, nk_bool is_clicked, struct nk_rect header)
{
 800f6e0:	b590      	push	{r4, r7, lr}
 800f6e2:	b097      	sub	sp, #92	; 0x5c
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6278      	str	r0, [r7, #36]	; 0x24
 800f6e8:	6239      	str	r1, [r7, #32]
 800f6ea:	eeb0 5a40 	vmov.f32	s10, s0
 800f6ee:	eef0 5a60 	vmov.f32	s11, s1
 800f6f2:	617a      	str	r2, [r7, #20]
 800f6f4:	eeb0 6a41 	vmov.f32	s12, s2
 800f6f8:	eef0 6a61 	vmov.f32	s13, s3
 800f6fc:	eeb0 7a42 	vmov.f32	s14, s4
 800f700:	eef0 7a62 	vmov.f32	s15, s5
 800f704:	ed87 5a06 	vstr	s10, [r7, #24]
 800f708:	edc7 5a07 	vstr	s11, [r7, #28]
 800f70c:	ed87 6a01 	vstr	s12, [r7, #4]
 800f710:	edc7 6a02 	vstr	s13, [r7, #8]
 800f714:	ed87 7a03 	vstr	s14, [r7, #12]
 800f718:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *popup;
    int is_open = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	657b      	str	r3, [r7, #84]	; 0x54
    int is_active = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	653b      	str	r3, [r7, #80]	; 0x50
    struct nk_rect body;
    nk_hash hash;

    NK_ASSERT(ctx);
 800f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f726:	2b00      	cmp	r3, #0
 800f728:	d105      	bne.n	800f736 <nk_combo_begin+0x56>
 800f72a:	4b75      	ldr	r3, [pc, #468]	; (800f900 <nk_combo_begin+0x220>)
 800f72c:	4a75      	ldr	r2, [pc, #468]	; (800f904 <nk_combo_begin+0x224>)
 800f72e:	2113      	movs	r1, #19
 800f730:	4875      	ldr	r0, [pc, #468]	; (800f908 <nk_combo_begin+0x228>)
 800f732:	f00d ff2d 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f73c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f740:	2b00      	cmp	r3, #0
 800f742:	d105      	bne.n	800f750 <nk_combo_begin+0x70>
 800f744:	4b71      	ldr	r3, [pc, #452]	; (800f90c <nk_combo_begin+0x22c>)
 800f746:	4a6f      	ldr	r2, [pc, #444]	; (800f904 <nk_combo_begin+0x224>)
 800f748:	2114      	movs	r1, #20
 800f74a:	486f      	ldr	r0, [pc, #444]	; (800f908 <nk_combo_begin+0x228>)
 800f74c:	f00d ff20 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f756:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d105      	bne.n	800f76e <nk_combo_begin+0x8e>
 800f762:	4b6b      	ldr	r3, [pc, #428]	; (800f910 <nk_combo_begin+0x230>)
 800f764:	4a67      	ldr	r2, [pc, #412]	; (800f904 <nk_combo_begin+0x224>)
 800f766:	2115      	movs	r1, #21
 800f768:	4867      	ldr	r0, [pc, #412]	; (800f908 <nk_combo_begin+0x228>)
 800f76a:	f00d ff11 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800f76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00f      	beq.n	800f794 <nk_combo_begin+0xb4>
 800f774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f776:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f77a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d008      	beq.n	800f794 <nk_combo_begin+0xb4>
 800f782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f784:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f788:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <nk_combo_begin+0xb8>
        return 0;
 800f794:	2300      	movs	r3, #0
 800f796:	e0af      	b.n	800f8f8 <nk_combo_begin+0x218>

    popup = win->popup.win;
 800f798:	6a3b      	ldr	r3, [r7, #32]
 800f79a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800f79e:	64fb      	str	r3, [r7, #76]	; 0x4c
    body.x = header.x;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	62bb      	str	r3, [r7, #40]	; 0x28
    body.w = size.x;
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	633b      	str	r3, [r7, #48]	; 0x30
    body.y = header.y + header.h-ctx->style.window.combo_border;
 800f7a8:	ed97 7a02 	vldr	s14, [r7, #8]
 800f7ac:	edd7 7a04 	vldr	s15, [r7, #16]
 800f7b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ba:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 800f7be:	edd3 7a00 	vldr	s15, [r3]
 800f7c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    body.h = size.y;
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	637b      	str	r3, [r7, #52]	; 0x34

    hash = win->popup.combo_count++;
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f7d4:	1c59      	adds	r1, r3, #1
 800f7d6:	6a3a      	ldr	r2, [r7, #32]
 800f7d8:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 800f7dc:	64bb      	str	r3, [r7, #72]	; 0x48
    is_open = (popup) ? nk_true:nk_false;
 800f7de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	bf14      	ite	ne
 800f7e4:	2301      	movne	r3, #1
 800f7e6:	2300      	moveq	r3, #0
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	657b      	str	r3, [r7, #84]	; 0x54
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 800f7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00c      	beq.n	800f80c <nk_combo_begin+0x12c>
 800f7f2:	6a3b      	ldr	r3, [r7, #32]
 800f7f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f7f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d106      	bne.n	800f80c <nk_combo_begin+0x12c>
 800f7fe:	6a3b      	ldr	r3, [r7, #32]
 800f800:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f804:	2b20      	cmp	r3, #32
 800f806:	d101      	bne.n	800f80c <nk_combo_begin+0x12c>
 800f808:	2301      	movs	r3, #1
 800f80a:	e000      	b.n	800f80e <nk_combo_begin+0x12e>
 800f80c:	2300      	movs	r3, #0
 800f80e:	653b      	str	r3, [r7, #80]	; 0x50
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d005      	beq.n	800f822 <nk_combo_begin+0x142>
 800f816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <nk_combo_begin+0x142>
 800f81c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00e      	beq.n	800f840 <nk_combo_begin+0x160>
 800f822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f824:	2b00      	cmp	r3, #0
 800f826:	d002      	beq.n	800f82e <nk_combo_begin+0x14e>
 800f828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d008      	beq.n	800f840 <nk_combo_begin+0x160>
 800f82e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f830:	2b00      	cmp	r3, #0
 800f832:	d107      	bne.n	800f844 <nk_combo_begin+0x164>
        (!is_open && !is_active && !is_clicked)) return 0;
 800f834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f836:	2b00      	cmp	r3, #0
 800f838:	d104      	bne.n	800f844 <nk_combo_begin+0x164>
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <nk_combo_begin+0x164>
 800f840:	2300      	movs	r3, #0
 800f842:	e059      	b.n	800f8f8 <nk_combo_begin+0x218>
    if (!nk_nonblock_begin(ctx, 0, body,
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d01d      	beq.n	800f886 <nk_combo_begin+0x1a6>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800f84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d01a      	beq.n	800f886 <nk_combo_begin+0x1a6>
 800f850:	eddf 1a30 	vldr	s3, [pc, #192]	; 800f914 <nk_combo_begin+0x234>
 800f854:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800f914 <nk_combo_begin+0x234>
 800f858:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800f914 <nk_combo_begin+0x234>
 800f85c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800f914 <nk_combo_begin+0x234>
 800f860:	f004 fb14 	bl	8013e8c <nk_rect>
 800f864:	eeb0 6a40 	vmov.f32	s12, s0
 800f868:	eef0 6a60 	vmov.f32	s13, s1
 800f86c:	eeb0 7a41 	vmov.f32	s14, s2
 800f870:	eef0 7a61 	vmov.f32	s15, s3
 800f874:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 800f878:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800f87c:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800f880:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    if (!nk_nonblock_begin(ctx, 0, body,
 800f884:	e005      	b.n	800f892 <nk_combo_begin+0x1b2>
 800f886:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800f88a:	1d3b      	adds	r3, r7, #4
 800f88c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f88e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f892:	ed97 4a0e 	vldr	s8, [r7, #56]	; 0x38
 800f896:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800f89a:	ed97 5a10 	vldr	s10, [r7, #64]	; 0x40
 800f89e:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 800f8a2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f8a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f8aa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f8ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f8b2:	2220      	movs	r2, #32
 800f8b4:	eeb0 2a44 	vmov.f32	s4, s8
 800f8b8:	eef0 2a64 	vmov.f32	s5, s9
 800f8bc:	eeb0 3a45 	vmov.f32	s6, s10
 800f8c0:	eef0 3a65 	vmov.f32	s7, s11
 800f8c4:	eeb0 0a46 	vmov.f32	s0, s12
 800f8c8:	eef0 0a66 	vmov.f32	s1, s13
 800f8cc:	eeb0 1a47 	vmov.f32	s2, s14
 800f8d0:	eef0 1a67 	vmov.f32	s3, s15
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8d8:	f007 f93a 	bl	8016b50 <nk_nonblock_begin>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <nk_combo_begin+0x206>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	e008      	b.n	800f8f8 <nk_combo_begin+0x218>

    win->popup.type = NK_PANEL_COMBO;
 800f8e6:	6a3b      	ldr	r3, [r7, #32]
 800f8e8:	2220      	movs	r2, #32
 800f8ea:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    win->popup.name = hash;
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    return 1;
 800f8f6:	2301      	movs	r3, #1
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	375c      	adds	r7, #92	; 0x5c
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd90      	pop	{r4, r7, pc}
 800f900:	08021130 	.word	0x08021130
 800f904:	08022d90 	.word	0x08022d90
 800f908:	08021134 	.word	0x08021134
 800f90c:	08021150 	.word	0x08021150
 800f910:	08021160 	.word	0x08021160
 800f914:	00000000 	.word	0x00000000

0800f918 <nk_combo_begin_text>:
NK_API nk_bool
nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,
    struct nk_vec2 size)
{
 800f918:	b5b0      	push	{r4, r5, r7, lr}
 800f91a:	b0a6      	sub	sp, #152	; 0x98
 800f91c:	af04      	add	r7, sp, #16
 800f91e:	6178      	str	r0, [r7, #20]
 800f920:	6139      	str	r1, [r7, #16]
 800f922:	60fa      	str	r2, [r7, #12]
 800f924:	eeb0 7a40 	vmov.f32	s14, s0
 800f928:	eef0 7a60 	vmov.f32	s15, s1
 800f92c:	ed87 7a01 	vstr	s14, [r7, #4]
 800f930:	edc7 7a02 	vstr	s15, [r7, #8]
    const struct nk_input *in;
    struct nk_window *win;
    struct nk_style *style;

    enum nk_widget_layout_states s;
    int is_clicked = nk_false;
 800f934:	2300      	movs	r3, #0
 800f936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    struct nk_rect header;
    const struct nk_style_item *background;
    struct nk_text text;

    NK_ASSERT(ctx);
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d105      	bne.n	800f94c <nk_combo_begin_text+0x34>
 800f940:	4bc3      	ldr	r3, [pc, #780]	; (800fc50 <nk_combo_begin_text+0x338>)
 800f942:	4ac4      	ldr	r2, [pc, #784]	; (800fc54 <nk_combo_begin_text+0x33c>)
 800f944:	2139      	movs	r1, #57	; 0x39
 800f946:	48c4      	ldr	r0, [pc, #784]	; (800fc58 <nk_combo_begin_text+0x340>)
 800f948:	f00d fe22 	bl	801d590 <__assert_func>
    NK_ASSERT(selected);
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d105      	bne.n	800f95e <nk_combo_begin_text+0x46>
 800f952:	4bc2      	ldr	r3, [pc, #776]	; (800fc5c <nk_combo_begin_text+0x344>)
 800f954:	4abf      	ldr	r2, [pc, #764]	; (800fc54 <nk_combo_begin_text+0x33c>)
 800f956:	213a      	movs	r1, #58	; 0x3a
 800f958:	48bf      	ldr	r0, [pc, #764]	; (800fc58 <nk_combo_begin_text+0x340>)
 800f95a:	f00d fe19 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f964:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d105      	bne.n	800f978 <nk_combo_begin_text+0x60>
 800f96c:	4bbc      	ldr	r3, [pc, #752]	; (800fc60 <nk_combo_begin_text+0x348>)
 800f96e:	4ab9      	ldr	r2, [pc, #740]	; (800fc54 <nk_combo_begin_text+0x33c>)
 800f970:	213b      	movs	r1, #59	; 0x3b
 800f972:	48b9      	ldr	r0, [pc, #740]	; (800fc58 <nk_combo_begin_text+0x340>)
 800f974:	f00d fe0c 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f97e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f986:	2b00      	cmp	r3, #0
 800f988:	d105      	bne.n	800f996 <nk_combo_begin_text+0x7e>
 800f98a:	4bb6      	ldr	r3, [pc, #728]	; (800fc64 <nk_combo_begin_text+0x34c>)
 800f98c:	4ab1      	ldr	r2, [pc, #708]	; (800fc54 <nk_combo_begin_text+0x33c>)
 800f98e:	213c      	movs	r1, #60	; 0x3c
 800f990:	48b1      	ldr	r0, [pc, #708]	; (800fc58 <nk_combo_begin_text+0x340>)
 800f992:	f00d fdfd 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !selected)
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d012      	beq.n	800f9c2 <nk_combo_begin_text+0xaa>
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00b      	beq.n	800f9c2 <nk_combo_begin_text+0xaa>
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d002      	beq.n	800f9c2 <nk_combo_begin_text+0xaa>
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <nk_combo_begin_text+0xae>
        return 0;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e28f      	b.n	800fee6 <nk_combo_begin_text+0x5ce>

    win = ctx->current;
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9cc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9d0:	67bb      	str	r3, [r7, #120]	; 0x78
    style = &ctx->style;
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f9d8:	677b      	str	r3, [r7, #116]	; 0x74
    s = nk_widget(&header, ctx);
 800f9da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f9de:	6979      	ldr	r1, [r7, #20]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f00c faed 	bl	801bfc0 <nk_widget>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if (s == NK_WIDGET_INVALID)
 800f9ec:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <nk_combo_begin_text+0xe0>
        return 0;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	e276      	b.n	800fee6 <nk_combo_begin_text+0x5ce>

    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 800f9f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d105      	bne.n	800fa14 <nk_combo_begin_text+0xfc>
 800fa08:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fa0c:	2b02      	cmp	r3, #2
 800fa0e:	d001      	beq.n	800fa14 <nk_combo_begin_text+0xfc>
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	e000      	b.n	800fa16 <nk_combo_begin_text+0xfe>
 800fa14:	2300      	movs	r3, #0
 800fa16:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	f503 53d6 	add.w	r3, r3, #6848	; 0x1ac0
 800fa1e:	3314      	adds	r3, #20
 800fa20:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800fa24:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800fa28:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fa2c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800fa30:	2200      	movs	r2, #0
 800fa32:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fa34:	eeb0 0a46 	vmov.f32	s0, s12
 800fa38:	eef0 0a66 	vmov.f32	s1, s13
 800fa3c:	eeb0 1a47 	vmov.f32	s2, s14
 800fa40:	eef0 1a67 	vmov.f32	s3, s15
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fe ff9f 	bl	800e988 <nk_button_behavior>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <nk_combo_begin_text+0x13e>
        is_clicked = nk_true;
 800fa50:	2301      	movs	r3, #1
 800fa52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* draw combo box header background and border */
    if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa5c:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800fa60:	f003 0320 	and.w	r3, r3, #32
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d00c      	beq.n	800fa82 <nk_combo_begin_text+0x16a>
        background = &style->combo.active;
 800fa68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa6a:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 800fa6e:	3318      	adds	r3, #24
 800fa70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_active;
 800fa74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa7a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800fa7e:	657b      	str	r3, [r7, #84]	; 0x54
 800fa80:	e020      	b.n	800fac4 <nk_combo_begin_text+0x1ac>
    } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa88:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800fa8c:	f003 0310 	and.w	r3, r3, #16
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00c      	beq.n	800faae <nk_combo_begin_text+0x196>
        background = &style->combo.hover;
 800fa94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa96:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800fa9a:	331c      	adds	r3, #28
 800fa9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_hover;
 800faa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800faa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faa6:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 800faaa:	657b      	str	r3, [r7, #84]	; 0x54
 800faac:	e00a      	b.n	800fac4 <nk_combo_begin_text+0x1ac>
    } else {
        background = &style->combo.normal;
 800faae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fab0:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800fab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_normal;
 800fab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800faba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fabe:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 800fac2:	657b      	str	r3, [r7, #84]	; 0x54
    }

    switch(background->type) {
 800fac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	2b02      	cmp	r3, #2
 800facc:	d02b      	beq.n	800fb26 <nk_combo_begin_text+0x20e>
 800face:	2b02      	cmp	r3, #2
 800fad0:	f300 80a1 	bgt.w	800fc16 <nk_combo_begin_text+0x2fe>
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d04a      	beq.n	800fb6e <nk_combo_begin_text+0x256>
 800fad8:	2b01      	cmp	r3, #1
 800fada:	f040 809c 	bne.w	800fc16 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 800fade:	2300      	movs	r3, #0
 800fae0:	2200      	movs	r2, #0
 800fae2:	2100      	movs	r1, #0
 800fae4:	2000      	movs	r0, #0
 800fae6:	f7ff fd67 	bl	800f5b8 <nk_rgba>
 800faea:	4603      	mov	r3, r0
 800faec:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 800faee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800faf0:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800faf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800faf8:	3304      	adds	r3, #4
 800fafa:	4a5b      	ldr	r2, [pc, #364]	; (800fc68 <nk_combo_begin_text+0x350>)
 800fafc:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800fb00:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800fb04:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fb08:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800fb0c:	6812      	ldr	r2, [r2, #0]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	eeb0 0a46 	vmov.f32	s0, s12
 800fb14:	eef0 0a66 	vmov.f32	s1, s13
 800fb18:	eeb0 1a47 	vmov.f32	s2, s14
 800fb1c:	eef0 1a67 	vmov.f32	s3, s15
 800fb20:	f001 ffb2 	bl	8011a88 <nk_draw_image>
            break;
 800fb24:	e077      	b.n	800fc16 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 800fb26:	2300      	movs	r3, #0
 800fb28:	2200      	movs	r2, #0
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	f7ff fd43 	bl	800f5b8 <nk_rgba>
 800fb32:	4603      	mov	r3, r0
 800fb34:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 800fb36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb38:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800fb3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb40:	3304      	adds	r3, #4
 800fb42:	4a49      	ldr	r2, [pc, #292]	; (800fc68 <nk_combo_begin_text+0x350>)
 800fb44:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800fb48:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800fb4c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fb50:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800fb54:	6812      	ldr	r2, [r2, #0]
 800fb56:	4619      	mov	r1, r3
 800fb58:	eeb0 0a46 	vmov.f32	s0, s12
 800fb5c:	eef0 0a66 	vmov.f32	s1, s13
 800fb60:	eeb0 1a47 	vmov.f32	s2, s14
 800fb64:	eef0 1a67 	vmov.f32	s3, s15
 800fb68:	f002 f880 	bl	8011c6c <nk_draw_nine_slice>
            break;
 800fb6c:	e053      	b.n	800fc16 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 800fb6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	653b      	str	r3, [r7, #80]	; 0x50
            nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);
 800fb76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb78:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800fb7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb82:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800fb86:	edd3 5a00 	vldr	s11, [r3]
 800fb8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb8e:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800fb92:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800fb96:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fb9a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800fb9e:	6859      	ldr	r1, [r3, #4]
 800fba0:	eeb0 2a65 	vmov.f32	s4, s11
 800fba4:	eeb0 0a46 	vmov.f32	s0, s12
 800fba8:	eef0 0a66 	vmov.f32	s1, s13
 800fbac:	eeb0 1a47 	vmov.f32	s2, s14
 800fbb0:	eef0 1a67 	vmov.f32	s3, s15
 800fbb4:	4610      	mov	r0, r2
 800fbb6:	f001 fc0d 	bl	80113d4 <nk_fill_rect>
            nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);
 800fbba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbbc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800fbc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbc6:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800fbca:	edd3 5a00 	vldr	s11, [r3]
 800fbce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbd4:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800fbd8:	ed93 5a00 	vldr	s10, [r3]
 800fbdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbe2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800fbe6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800fbea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fbee:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800fbf2:	f8d3 15d4 	ldr.w	r1, [r3, #1492]	; 0x5d4
 800fbf6:	eef0 2a45 	vmov.f32	s5, s10
 800fbfa:	eeb0 2a65 	vmov.f32	s4, s11
 800fbfe:	eeb0 0a46 	vmov.f32	s0, s12
 800fc02:	eef0 0a66 	vmov.f32	s1, s13
 800fc06:	eeb0 1a47 	vmov.f32	s2, s14
 800fc0a:	eef0 1a67 	vmov.f32	s3, s15
 800fc0e:	4610      	mov	r0, r2
 800fc10:	f001 fad8 	bl	80111c4 <nk_stroke_rect>
            break;
 800fc14:	bf00      	nop
        struct nk_rect button;
        struct nk_rect content;
        int draw_button_symbol;

        enum nk_symbol_type sym;
        if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc1c:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800fc20:	f003 0310 	and.w	r3, r3, #16
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d007      	beq.n	800fc38 <nk_combo_begin_text+0x320>
            sym = style->combo.sym_hover;
 800fc28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc2e:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 800fc32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800fc36:	e022      	b.n	800fc7e <nk_combo_begin_text+0x366>
        else if (is_clicked)
 800fc38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d017      	beq.n	800fc70 <nk_combo_begin_text+0x358>
            sym = style->combo.sym_active;
 800fc40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc46:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 800fc4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800fc4e:	e016      	b.n	800fc7e <nk_combo_begin_text+0x366>
 800fc50:	08021130 	.word	0x08021130
 800fc54:	08022da0 	.word	0x08022da0
 800fc58:	08021134 	.word	0x08021134
 800fc5c:	08021178 	.word	0x08021178
 800fc60:	08021150 	.word	0x08021150
 800fc64:	08021160 	.word	0x08021160
 800fc68:	08022d8c 	.word	0x08022d8c
 800fc6c:	00000000 	.word	0x00000000
        else
            sym = style->combo.sym_normal;
 800fc70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc76:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 800fc7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* represents whether or not the combo's button symbol should be drawn */
        draw_button_symbol = sym != NK_SYMBOL_NONE;
 800fc7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	bf14      	ite	ne
 800fc86:	2301      	movne	r3, #1
 800fc88:	2300      	moveq	r3, #0
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	66bb      	str	r3, [r7, #104]	; 0x68

        /* calculate button */
        button.w = header.h - 2 * style->combo.button_padding.y;
 800fc8e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800fc92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc98:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800fc9c:	edd3 7a00 	vldr	s15, [r3]
 800fca0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fca8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;
 800fcac:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800fcb0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800fcb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fcb8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800fcbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcc6:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 800fcca:	edd3 7a00 	vldr	s15, [r3]
 800fcce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcd2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        button.y = header.y + style->combo.button_padding.y;
 800fcd6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800fcda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fce0:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800fce4:	edd3 7a00 	vldr	s15, [r3]
 800fce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        button.h = button.w;
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	637b      	str	r3, [r7, #52]	; 0x34

        content.x = button.x + style->combo.button.padding.x;
 800fcf4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800fcf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcfe:	f203 6364 	addw	r3, r3, #1636	; 0x664
 800fd02:	edd3 7a00 	vldr	s15, [r3]
 800fd06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd0a:	edc7 7a06 	vstr	s15, [r7, #24]
        content.y = button.y + style->combo.button.padding.y;
 800fd0e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800fd12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd18:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800fd1c:	edd3 7a00 	vldr	s15, [r3]
 800fd20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd24:	edc7 7a07 	vstr	s15, [r7, #28]
        content.w = button.w - 2 * style->combo.button.padding.x;
 800fd28:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800fd2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd32:	f203 6364 	addw	r3, r3, #1636	; 0x664
 800fd36:	edd3 7a00 	vldr	s15, [r3]
 800fd3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fd3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd42:	edc7 7a08 	vstr	s15, [r7, #32]
        content.h = button.h - 2 * style->combo.button.padding.y;
 800fd46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800fd4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd50:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800fd54:	edd3 7a00 	vldr	s15, [r3]
 800fd58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fd5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        /* draw selected label */
        text.padding = nk_vec2(0,0);
 800fd64:	ed5f 0a3f 	vldr	s1, [pc, #-252]	; 800fc6c <nk_combo_begin_text+0x354>
 800fd68:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 800fc6c <nk_combo_begin_text+0x354>
 800fd6c:	f004 f940 	bl	8013ff0 <nk_vec2>
 800fd70:	eeb0 7a40 	vmov.f32	s14, s0
 800fd74:	eef0 7a60 	vmov.f32	s15, s1
 800fd78:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800fd7c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        label.x = header.x + style->combo.content_padding.x;
 800fd80:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800fd84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd8a:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800fd8e:	edd3 7a00 	vldr	s15, [r3]
 800fd92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd96:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.y = header.y + style->combo.content_padding.y;
 800fd9a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800fd9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fda0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fda4:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800fda8:	edd3 7a00 	vldr	s15, [r3]
 800fdac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdb0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.h = header.h - 2 * style->combo.content_padding.y;
 800fdb4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800fdb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fdba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdbe:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800fdc2:	edd3 7a00 	vldr	s15, [r3]
 800fdc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fdca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdce:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        if (draw_button_symbol)
 800fdd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d01a      	beq.n	800fe0e <nk_combo_begin_text+0x4f6>
            label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;
 800fdd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800fddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fdde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fde2:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800fde6:	edd3 6a00 	vldr	s13, [r3]
 800fdea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fdec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdf0:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800fdf4:	edd3 7a00 	vldr	s15, [r3]
 800fdf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe00:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fe04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe08:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800fe0c:	e00e      	b.n	800fe2c <nk_combo_begin_text+0x514>
        else
            label.w = header.w - 2 * style->combo.content_padding.x;
 800fe0e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fe12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe18:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800fe1c:	edd3 7a00 	vldr	s15, [r3]
 800fe20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fe24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe28:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        nk_widget_text(&win->buffer, label, selected, len, &text,
 800fe2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe2e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800fe38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fe3c:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800fe40:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800fe44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fe48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	2311      	movs	r3, #17
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	4613      	mov	r3, r2
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	6939      	ldr	r1, [r7, #16]
 800fe58:	eeb0 0a46 	vmov.f32	s0, s12
 800fe5c:	eef0 0a66 	vmov.f32	s1, s13
 800fe60:	eeb0 1a47 	vmov.f32	s2, s14
 800fe64:	eef0 1a67 	vmov.f32	s3, s15
 800fe68:	f00a fce0 	bl	801a82c <nk_widget_text>
            NK_TEXT_LEFT, ctx->style.font);

        /* draw open/close button */
        if (draw_button_symbol)
 800fe6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d01a      	beq.n	800fea8 <nk_combo_begin_text+0x590>
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800fe72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe74:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe7e:	f8d3 5ad4 	ldr.w	r5, [r3, #2772]	; 0xad4
                &ctx->style.combo.button, sym, style->font);
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 800fe88:	3318      	adds	r3, #24
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800fe8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fe8c:	6812      	ldr	r2, [r2, #0]
 800fe8e:	f107 0418 	add.w	r4, r7, #24
 800fe92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fe96:	9202      	str	r2, [sp, #8]
 800fe98:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800fe9c:	9201      	str	r2, [sp, #4]
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	462b      	mov	r3, r5
 800fea2:	4622      	mov	r2, r4
 800fea4:	f7ff f8b4 	bl	800f010 <nk_draw_button_symbol>
    }
    return nk_combo_begin(ctx, win, size, is_clicked, header);
 800fea8:	ed97 5a16 	vldr	s10, [r7, #88]	; 0x58
 800feac:	edd7 5a17 	vldr	s11, [r7, #92]	; 0x5c
 800feb0:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800feb4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800feb8:	ed97 7a01 	vldr	s14, [r7, #4]
 800febc:	edd7 7a02 	vldr	s15, [r7, #8]
 800fec0:	eeb0 1a45 	vmov.f32	s2, s10
 800fec4:	eef0 1a65 	vmov.f32	s3, s11
 800fec8:	eeb0 2a46 	vmov.f32	s4, s12
 800fecc:	eef0 2a66 	vmov.f32	s5, s13
 800fed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fed4:	eeb0 0a47 	vmov.f32	s0, s14
 800fed8:	eef0 0a67 	vmov.f32	s1, s15
 800fedc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fede:	6978      	ldr	r0, [r7, #20]
 800fee0:	f7ff fbfe 	bl	800f6e0 <nk_combo_begin>
 800fee4:	4603      	mov	r3, r0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3788      	adds	r7, #136	; 0x88
 800feea:	46bd      	mov	sp, r7
 800feec:	bdb0      	pop	{r4, r5, r7, pc}
 800feee:	bf00      	nop

0800fef0 <nk_combo_begin_label>:
NK_API nk_bool
nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	eeb0 7a40 	vmov.f32	s14, s0
 800fefe:	eef0 7a60 	vmov.f32	s15, s1
 800ff02:	ed87 7a00 	vstr	s14, [r7]
 800ff06:	edc7 7a01 	vstr	s15, [r7, #4]
    return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);
 800ff0a:	68b8      	ldr	r0, [r7, #8]
 800ff0c:	f00b fe66 	bl	801bbdc <nk_strlen>
 800ff10:	4603      	mov	r3, r0
 800ff12:	ed97 7a00 	vldr	s14, [r7]
 800ff16:	edd7 7a01 	vldr	s15, [r7, #4]
 800ff1a:	eeb0 0a47 	vmov.f32	s0, s14
 800ff1e:	eef0 0a67 	vmov.f32	s1, s15
 800ff22:	461a      	mov	r2, r3
 800ff24:	68b9      	ldr	r1, [r7, #8]
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f7ff fcf6 	bl	800f918 <nk_combo_begin_text>
 800ff2c:	4603      	mov	r3, r0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <nk_combo_item_label>:
{
    return nk_contextual_item_text(ctx, text, len, align);
}
NK_API nk_bool
nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b084      	sub	sp, #16
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	60f8      	str	r0, [r7, #12]
 800ff3e:	60b9      	str	r1, [r7, #8]
 800ff40:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_label(ctx, label, align);
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	68b9      	ldr	r1, [r7, #8]
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f000 feaa 	bl	8010ca0 <nk_contextual_item_label>
 800ff4c:	4603      	mov	r3, r0
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <nk_combo_end>:
    const char *label, nk_flags alignment)
{
    return nk_contextual_item_symbol_label(ctx, sym, label, alignment);
}
NK_API void nk_combo_end(struct nk_context *ctx)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b082      	sub	sp, #8
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
    nk_contextual_end(ctx);
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f000 ff00 	bl	8010d64 <nk_contextual_end>
}
 800ff64:	bf00      	nop
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <nk_combo>:
    nk_contextual_close(ctx);
}
NK_API int
nk_combo(struct nk_context *ctx, const char **items, int count,
    int selected, int item_height, struct nk_vec2 size)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08c      	sub	sp, #48	; 0x30
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6178      	str	r0, [r7, #20]
 800ff74:	6139      	str	r1, [r7, #16]
 800ff76:	60fa      	str	r2, [r7, #12]
 800ff78:	60bb      	str	r3, [r7, #8]
 800ff7a:	eeb0 7a40 	vmov.f32	s14, s0
 800ff7e:	eef0 7a60 	vmov.f32	s15, s1
 800ff82:	ed87 7a00 	vstr	s14, [r7]
 800ff86:	edc7 7a01 	vstr	s15, [r7, #4]
    int i = 0;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int max_height;
    struct nk_vec2 item_spacing;
    struct nk_vec2 window_padding;

    NK_ASSERT(ctx);
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d106      	bne.n	800ffa2 <nk_combo+0x36>
 800ff94:	4b61      	ldr	r3, [pc, #388]	; (801011c <nk_combo+0x1b0>)
 800ff96:	4a62      	ldr	r2, [pc, #392]	; (8010120 <nk_combo+0x1b4>)
 800ff98:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800ff9c:	4861      	ldr	r0, [pc, #388]	; (8010124 <nk_combo+0x1b8>)
 800ff9e:	f00d faf7 	bl	801d590 <__assert_func>
    NK_ASSERT(items);
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d106      	bne.n	800ffb6 <nk_combo+0x4a>
 800ffa8:	4b5f      	ldr	r3, [pc, #380]	; (8010128 <nk_combo+0x1bc>)
 800ffaa:	4a5d      	ldr	r2, [pc, #372]	; (8010120 <nk_combo+0x1b4>)
 800ffac:	f240 21c1 	movw	r1, #705	; 0x2c1
 800ffb0:	485c      	ldr	r0, [pc, #368]	; (8010124 <nk_combo+0x1b8>)
 800ffb2:	f00d faed 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ffbc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d106      	bne.n	800ffd2 <nk_combo+0x66>
 800ffc4:	4b59      	ldr	r3, [pc, #356]	; (801012c <nk_combo+0x1c0>)
 800ffc6:	4a56      	ldr	r2, [pc, #344]	; (8010120 <nk_combo+0x1b4>)
 800ffc8:	f240 21c2 	movw	r1, #706	; 0x2c2
 800ffcc:	4855      	ldr	r0, [pc, #340]	; (8010124 <nk_combo+0x1b8>)
 800ffce:	f00d fadf 	bl	801d590 <__assert_func>
    if (!ctx || !items ||!count)
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <nk_combo+0x78>
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d002      	beq.n	800ffe4 <nk_combo+0x78>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d101      	bne.n	800ffe8 <nk_combo+0x7c>
        return selected;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	e094      	b.n	8010112 <nk_combo+0x1a6>

    item_spacing = ctx->style.window.spacing;
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffee:	461a      	mov	r2, r3
 800fff0:	f107 0320 	add.w	r3, r7, #32
 800fff4:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 800fff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fffc:	e883 0003 	stmia.w	r3, {r0, r1}
    window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801000c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	4619      	mov	r1, r3
 8010018:	4610      	mov	r0, r2
 801001a:	f004 fba3 	bl	8014764 <nk_panel_get_padding>
 801001e:	eeb0 7a40 	vmov.f32	s14, s0
 8010022:	eef0 7a60 	vmov.f32	s15, s1
 8010026:	ed87 7a06 	vstr	s14, [r7, #24]
 801002a:	edc7 7a07 	vstr	s15, [r7, #28]
    max_height = count * item_height + count * (int)item_spacing.y;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010032:	fb03 f202 	mul.w	r2, r3, r2
 8010036:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801003a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801003e:	ee17 1a90 	vmov	r1, s15
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	fb01 f303 	mul.w	r3, r1, r3
 8010048:	4413      	add	r3, r2
 801004a:	62bb      	str	r3, [r7, #40]	; 0x28
    max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;
 801004c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010054:	ee17 2a90 	vmov	r2, s15
 8010058:	edd7 7a07 	vldr	s15, [r7, #28]
 801005c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010060:	ee17 3a90 	vmov	r3, s15
 8010064:	4413      	add	r3, r2
 8010066:	005b      	lsls	r3, r3, #1
 8010068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801006a:	4413      	add	r3, r2
 801006c:	62bb      	str	r3, [r7, #40]	; 0x28
    size.y = NK_MIN(size.y, (float)max_height);
 801006e:	ed97 7a01 	vldr	s14, [r7, #4]
 8010072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010074:	ee07 3a90 	vmov	s15, r3
 8010078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801007c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010084:	d502      	bpl.n	801008c <nk_combo+0x120>
 8010086:	edd7 7a01 	vldr	s15, [r7, #4]
 801008a:	e004      	b.n	8010096 <nk_combo+0x12a>
 801008c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008e:	ee07 3a90 	vmov	s15, r3
 8010092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010096:	edc7 7a01 	vstr	s15, [r7, #4]
    if (nk_combo_begin_label(ctx, items[selected], size)) {
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	693a      	ldr	r2, [r7, #16]
 80100a0:	4413      	add	r3, r2
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	ed97 7a00 	vldr	s14, [r7]
 80100a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80100ac:	eeb0 0a47 	vmov.f32	s0, s14
 80100b0:	eef0 0a67 	vmov.f32	s1, s15
 80100b4:	4619      	mov	r1, r3
 80100b6:	6978      	ldr	r0, [r7, #20]
 80100b8:	f7ff ff1a 	bl	800fef0 <nk_combo_begin_label>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d026      	beq.n	8010110 <nk_combo+0x1a4>
        nk_layout_row_dynamic(ctx, (float)item_height, 1);
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	ee07 3a90 	vmov	s15, r3
 80100c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100cc:	2101      	movs	r1, #1
 80100ce:	eeb0 0a67 	vmov.f32	s0, s15
 80100d2:	6978      	ldr	r0, [r7, #20]
 80100d4:	f003 f972 	bl	80133bc <nk_layout_row_dynamic>
        for (i = 0; i < count; ++i) {
 80100d8:	2300      	movs	r3, #0
 80100da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100dc:	e011      	b.n	8010102 <nk_combo+0x196>
            if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	693a      	ldr	r2, [r7, #16]
 80100e4:	4413      	add	r3, r2
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2211      	movs	r2, #17
 80100ea:	4619      	mov	r1, r3
 80100ec:	6978      	ldr	r0, [r7, #20]
 80100ee:	f7ff ff22 	bl	800ff36 <nk_combo_item_label>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d001      	beq.n	80100fc <nk_combo+0x190>
                selected = i;
 80100f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fa:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < count; ++i) {
 80100fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fe:	3301      	adds	r3, #1
 8010100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	429a      	cmp	r2, r3
 8010108:	dbe9      	blt.n	80100de <nk_combo+0x172>
        }
        nk_combo_end(ctx);
 801010a:	6978      	ldr	r0, [r7, #20]
 801010c:	f7ff ff23 	bl	800ff56 <nk_combo_end>
    }
    return selected;
 8010110:	68bb      	ldr	r3, [r7, #8]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3730      	adds	r7, #48	; 0x30
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	08021130 	.word	0x08021130
 8010120:	08022db4 	.word	0x08022db4
 8010124:	08021134 	.word	0x08021134
 8010128:	08021184 	.word	0x08021184
 801012c:	08021150 	.word	0x08021150

08010130 <nk_setup>:
 *                          CONTEXT
 *
 * ===============================================================*/
NK_INTERN void
nk_setup(struct nk_context *ctx, const struct nk_user_font *font)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d105      	bne.n	801014c <nk_setup+0x1c>
 8010140:	4b11      	ldr	r3, [pc, #68]	; (8010188 <nk_setup+0x58>)
 8010142:	4a12      	ldr	r2, [pc, #72]	; (801018c <nk_setup+0x5c>)
 8010144:	210c      	movs	r1, #12
 8010146:	4812      	ldr	r0, [pc, #72]	; (8010190 <nk_setup+0x60>)
 8010148:	f00d fa22 	bl	801d590 <__assert_func>
    if (!ctx) return;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d016      	beq.n	8010180 <nk_setup+0x50>
    nk_zero_struct(*ctx);
 8010152:	f243 6168 	movw	r1, #13928	; 0x3668
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f00b fd22 	bl	801bba0 <nk_zero>
    nk_style_default(ctx);
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f008 f93b 	bl	80183d8 <nk_style_default>
    ctx->seq = 1;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010168:	461a      	mov	r2, r3
 801016a:	2301      	movs	r3, #1
 801016c:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
    if (font) ctx->style.font = font;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d005      	beq.n	8010182 <nk_setup+0x52>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 801017e:	e000      	b.n	8010182 <nk_setup+0x52>
    if (!ctx) return;
 8010180:	bf00      	nop
#ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
    nk_draw_list_init(&ctx->draw_list);
#endif
}
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	080211b8 	.word	0x080211b8
 801018c:	08022dd4 	.word	0x08022dd4
 8010190:	080211bc 	.word	0x080211bc

08010194 <nk_init_custom>:
    return 1;
}
NK_API nk_bool
nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,
    struct nk_buffer *pool, const struct nk_user_font *font)
{
 8010194:	b5b0      	push	{r4, r5, r7, lr}
 8010196:	b086      	sub	sp, #24
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	60b9      	str	r1, [r7, #8]
 801019e:	607a      	str	r2, [r7, #4]
 80101a0:	603b      	str	r3, [r7, #0]
    NK_ASSERT(cmds);
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d105      	bne.n	80101b4 <nk_init_custom+0x20>
 80101a8:	4b2a      	ldr	r3, [pc, #168]	; (8010254 <nk_init_custom+0xc0>)
 80101aa:	4a2b      	ldr	r2, [pc, #172]	; (8010258 <nk_init_custom+0xc4>)
 80101ac:	2130      	movs	r1, #48	; 0x30
 80101ae:	482b      	ldr	r0, [pc, #172]	; (801025c <nk_init_custom+0xc8>)
 80101b0:	f00d f9ee 	bl	801d590 <__assert_func>
    NK_ASSERT(pool);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d105      	bne.n	80101c6 <nk_init_custom+0x32>
 80101ba:	4b29      	ldr	r3, [pc, #164]	; (8010260 <nk_init_custom+0xcc>)
 80101bc:	4a26      	ldr	r2, [pc, #152]	; (8010258 <nk_init_custom+0xc4>)
 80101be:	2131      	movs	r1, #49	; 0x31
 80101c0:	4826      	ldr	r0, [pc, #152]	; (801025c <nk_init_custom+0xc8>)
 80101c2:	f00d f9e5 	bl	801d590 <__assert_func>
    if (!cmds || !pool) return 0;
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <nk_init_custom+0x3e>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d101      	bne.n	80101d6 <nk_init_custom+0x42>
 80101d2:	2300      	movs	r3, #0
 80101d4:	e039      	b.n	801024a <nk_init_custom+0xb6>

    nk_setup(ctx, font);
 80101d6:	6839      	ldr	r1, [r7, #0]
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f7ff ffa9 	bl	8010130 <nk_setup>
    ctx->memory = *cmds;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101e4:	461a      	mov	r2, r3
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	f602 248c 	addw	r4, r2, #2700	; 0xa8c
 80101ec:	461d      	mov	r5, r3
 80101ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80101fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (pool->type == NK_BUFFER_FIXED) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	7f1b      	ldrb	r3, [r3, #28]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10b      	bne.n	8010222 <nk_init_custom+0x8e>
        /* take memory from buffer and alloc fixed pool */
        nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8010210:	3324      	adds	r3, #36	; 0x24
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	6a11      	ldr	r1, [r2, #32]
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801021a:	4618      	mov	r0, r3
 801021c:	f006 fbf4 	bl	8016a08 <nk_pool_init_fixed>
 8010220:	e00b      	b.n	801023a <nk_init_custom+0xa6>
    } else {
        /* create dynamic pool from buffer allocator */
        struct nk_allocator *alloc = &pool->pool;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	3310      	adds	r3, #16
 8010226:	617b      	str	r3, [r7, #20]
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 801022e:	3324      	adds	r3, #36	; 0x24
 8010230:	2210      	movs	r2, #16
 8010232:	6979      	ldr	r1, [r7, #20]
 8010234:	4618      	mov	r0, r3
 8010236:	f006 fbbb 	bl	80169b0 <nk_pool_init>
    }
    ctx->use_pool = nk_true;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010240:	461a      	mov	r2, r3
 8010242:	2301      	movs	r3, #1
 8010244:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
    return 1;
 8010248:	2301      	movs	r3, #1
}
 801024a:	4618      	mov	r0, r3
 801024c:	3718      	adds	r7, #24
 801024e:	46bd      	mov	sp, r7
 8010250:	bdb0      	pop	{r4, r5, r7, pc}
 8010252:	bf00      	nop
 8010254:	080211e4 	.word	0x080211e4
 8010258:	08022de0 	.word	0x08022de0
 801025c:	080211bc 	.word	0x080211bc
 8010260:	080211ec 	.word	0x080211ec

08010264 <nk_clear>:
    ctx->freelist = 0;
    ctx->count = 0;
}
NK_API void
nk_clear(struct nk_context *ctx)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b086      	sub	sp, #24
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    struct nk_window *next;
    NK_ASSERT(ctx);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d105      	bne.n	801027e <nk_clear+0x1a>
 8010272:	4b96      	ldr	r3, [pc, #600]	; (80104cc <nk_clear+0x268>)
 8010274:	4a96      	ldr	r2, [pc, #600]	; (80104d0 <nk_clear+0x26c>)
 8010276:	2172      	movs	r1, #114	; 0x72
 8010278:	4896      	ldr	r0, [pc, #600]	; (80104d4 <nk_clear+0x270>)
 801027a:	f00d f989 	bl	801d590 <__assert_func>

    if (!ctx) return;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 811e 	beq.w	80104c2 <nk_clear+0x25e>
    if (ctx->use_pool)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801028c:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8010290:	2b00      	cmp	r3, #0
 8010292:	d007      	beq.n	80102a4 <nk_clear+0x40>
        nk_buffer_clear(&ctx->memory);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801029a:	330c      	adds	r3, #12
 801029c:	4618      	mov	r0, r3
 801029e:	f7fe f9bb 	bl	800e618 <nk_buffer_clear>
 80102a2:	e007      	b.n	80102b4 <nk_clear+0x50>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 80102aa:	330c      	adds	r3, #12
 80102ac:	2100      	movs	r1, #0
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fe f94a 	bl	800e548 <nk_buffer_reset>

    ctx->build = 0;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80102ba:	461a      	mov	r2, r3
 80102bc:	2300      	movs	r3, #0
 80102be:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    ctx->memory.calls = 0;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102c8:	461a      	mov	r2, r3
 80102ca:	2300      	movs	r3, #0
 80102cc:	f8c2 3ac0 	str.w	r3, [r2, #2752]	; 0xac0
    ctx->last_widget_state = 0;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102d6:	461a      	mov	r2, r3
 80102d8:	2300      	movs	r3, #0
 80102da:	f8c2 3ad4 	str.w	r3, [r2, #2772]	; 0xad4
    ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80102f0:	3334      	adds	r3, #52	; 0x34
 80102f2:	2228      	movs	r2, #40	; 0x28
 80102f4:	2100      	movs	r1, #0
 80102f6:	4618      	mov	r0, r3
 80102f8:	f00b fbe1 	bl	801babe <nk_memset>

    /* garbage collector */
    iter = ctx->begin;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010302:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010306:	617b      	str	r3, [r7, #20]
    while (iter) {
 8010308:	e0cb      	b.n	80104a2 <nk_clear+0x23e>
        /* make sure valid minimized windows do not get removed */
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801030e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010312:	2b00      	cmp	r3, #0
 8010314:	d013      	beq.n	801033e <nk_clear+0xda>
            !(iter->flags & NK_WINDOW_CLOSED) &&
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801031a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10d      	bne.n	801033e <nk_clear+0xda>
            iter->seq == ctx->seq) {
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801032c:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
            !(iter->flags & NK_WINDOW_CLOSED) &&
 8010330:	429a      	cmp	r2, r3
 8010332:	d104      	bne.n	801033e <nk_clear+0xda>
            iter = iter->next;
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801033a:	617b      	str	r3, [r7, #20]
            continue;
 801033c:	e0b1      	b.n	80104a2 <nk_clear+0x23e>
        }
        /* remove hotness from hidden or closed windows*/
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010346:	2b00      	cmp	r3, #0
 8010348:	d105      	bne.n	8010356 <nk_clear+0xf2>
            (iter->flags & NK_WINDOW_CLOSED)) &&
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801034e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 8010352:	2b00      	cmp	r3, #0
 8010354:	d03a      	beq.n	80103cc <nk_clear+0x168>
            iter == ctx->active) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801035c:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
            (iter->flags & NK_WINDOW_CLOSED)) &&
 8010360:	697a      	ldr	r2, [r7, #20]
 8010362:	429a      	cmp	r2, r3
 8010364:	d132      	bne.n	80103cc <nk_clear+0x168>
            ctx->active = iter->prev;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010372:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = iter->prev;
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010382:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (!ctx->end)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801038c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8010390:	2b00      	cmp	r3, #0
 8010392:	d106      	bne.n	80103a2 <nk_clear+0x13e>
                ctx->begin = 0;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801039a:	461a      	mov	r2, r3
 801039c:	2300      	movs	r3, #0
 801039e:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (ctx->active)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103a8:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00d      	beq.n	80103cc <nk_clear+0x168>
                ctx->active->flags &= ~(unsigned)NK_WINDOW_ROM;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103b6:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80103ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103c2:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80103c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80103ca:	649a      	str	r2, [r3, #72]	; 0x48
        }
        /* free unused popup windows */
        if (iter->popup.win && iter->popup.win->seq != ctx->seq) {
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d015      	beq.n	8010402 <nk_clear+0x19e>
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103e4:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d00a      	beq.n	8010402 <nk_clear+0x19e>
            nk_free_window(ctx, iter->popup.win);
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80103f2:	4619      	mov	r1, r3
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f00c f804 	bl	801c402 <nk_free_window>
            iter->popup.win = 0;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	2200      	movs	r2, #0
 80103fe:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        }
        /* remove unused window state tables */
        {struct nk_table *n, *it = iter->tables;
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010408:	613b      	str	r3, [r7, #16]
        while (it) {
 801040a:	e025      	b.n	8010458 <nk_clear+0x1f4>
            n = it->next;
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8010412:	60bb      	str	r3, [r7, #8]
            if (it->seq != ctx->seq) {
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801041e:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010422:	429a      	cmp	r2, r3
 8010424:	d016      	beq.n	8010454 <nk_clear+0x1f0>
                nk_remove_table(iter, it);
 8010426:	6939      	ldr	r1, [r7, #16]
 8010428:	6978      	ldr	r0, [r7, #20]
 801042a:	f00a f910 	bl	801a64e <nk_remove_table>
                nk_zero(it, sizeof(union nk_page_data));
 801042e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8010432:	6938      	ldr	r0, [r7, #16]
 8010434:	f00b fbb4 	bl	801bba0 <nk_zero>
                nk_free_table(ctx, it);
 8010438:	6939      	ldr	r1, [r7, #16]
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f00a f8b5 	bl	801a5aa <nk_free_table>
                if (it == iter->tables)
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010446:	693a      	ldr	r2, [r7, #16]
 8010448:	429a      	cmp	r2, r3
 801044a:	d103      	bne.n	8010454 <nk_clear+0x1f0>
                    iter->tables = n;
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
            } it = n;
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	613b      	str	r3, [r7, #16]
        while (it) {
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1d6      	bne.n	801040c <nk_clear+0x1a8>
        }}
        /* window itself is not used anymore so free */
        if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010468:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 801046c:	429a      	cmp	r2, r3
 801046e:	d105      	bne.n	801047c <nk_clear+0x218>
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00e      	beq.n	801049a <nk_clear+0x236>
            next = iter->next;
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010482:	60fb      	str	r3, [r7, #12]
            nk_remove_window(ctx, iter);
 8010484:	6979      	ldr	r1, [r7, #20]
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f00c f93c 	bl	801c704 <nk_remove_window>
            nk_free_window(ctx, iter);
 801048c:	6979      	ldr	r1, [r7, #20]
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f00b ffb7 	bl	801c402 <nk_free_window>
            iter = next;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	617b      	str	r3, [r7, #20]
 8010498:	e003      	b.n	80104a2 <nk_clear+0x23e>
        } else iter = iter->next;
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80104a0:	617b      	str	r3, [r7, #20]
    while (iter) {
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	f47f af30 	bne.w	801030a <nk_clear+0xa6>
    }
    ctx->seq++;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80104b0:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 80104b4:	3301      	adds	r3, #1
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80104bc:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
 80104c0:	e000      	b.n	80104c4 <nk_clear+0x260>
    if (!ctx) return;
 80104c2:	bf00      	nop
}
 80104c4:	3718      	adds	r7, #24
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	080211b8 	.word	0x080211b8
 80104d0:	08022df0 	.word	0x08022df0
 80104d4:	080211bc 	.word	0x080211bc

080104d8 <nk_start_buffer>:
NK_LIB void
nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 80104d8:	b590      	push	{r4, r7, lr}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d105      	bne.n	80104f4 <nk_start_buffer+0x1c>
 80104e8:	4b17      	ldr	r3, [pc, #92]	; (8010548 <nk_start_buffer+0x70>)
 80104ea:	4a18      	ldr	r2, [pc, #96]	; (801054c <nk_start_buffer+0x74>)
 80104ec:	21b2      	movs	r1, #178	; 0xb2
 80104ee:	4818      	ldr	r0, [pc, #96]	; (8010550 <nk_start_buffer+0x78>)
 80104f0:	f00d f84e 	bl	801d590 <__assert_func>
    NK_ASSERT(buffer);
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d105      	bne.n	8010506 <nk_start_buffer+0x2e>
 80104fa:	4b16      	ldr	r3, [pc, #88]	; (8010554 <nk_start_buffer+0x7c>)
 80104fc:	4a13      	ldr	r2, [pc, #76]	; (801054c <nk_start_buffer+0x74>)
 80104fe:	21b3      	movs	r1, #179	; 0xb3
 8010500:	4813      	ldr	r0, [pc, #76]	; (8010550 <nk_start_buffer+0x78>)
 8010502:	f00d f845 	bl	801d590 <__assert_func>
    if (!ctx || !buffer) return;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d019      	beq.n	8010540 <nk_start_buffer+0x68>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d016      	beq.n	8010540 <nk_start_buffer+0x68>
    buffer->begin = ctx->memory.allocated;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010518:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	61da      	str	r2, [r3, #28]
    buffer->end = buffer->begin;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	69da      	ldr	r2, [r3, #28]
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	621a      	str	r2, [r3, #32]
    buffer->last = buffer->begin;
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	69da      	ldr	r2, [r3, #28]
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	625a      	str	r2, [r3, #36]	; 0x24
    buffer->clip = nk_null_rect;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	4a09      	ldr	r2, [pc, #36]	; (8010558 <nk_start_buffer+0x80>)
 8010534:	1d1c      	adds	r4, r3, #4
 8010536:	4613      	mov	r3, r2
 8010538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801053a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801053e:	e000      	b.n	8010542 <nk_start_buffer+0x6a>
    if (!ctx || !buffer) return;
 8010540:	bf00      	nop
}
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	bd90      	pop	{r4, r7, pc}
 8010548:	080211b8 	.word	0x080211b8
 801054c:	08022dfc 	.word	0x08022dfc
 8010550:	080211bc 	.word	0x080211bc
 8010554:	080211fc 	.word	0x080211fc
 8010558:	08022dc0 	.word	0x08022dc0

0801055c <nk_start>:
NK_LIB void
nk_start(struct nk_context *ctx, struct nk_window *win)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d105      	bne.n	8010578 <nk_start+0x1c>
 801056c:	4b0c      	ldr	r3, [pc, #48]	; (80105a0 <nk_start+0x44>)
 801056e:	4a0d      	ldr	r2, [pc, #52]	; (80105a4 <nk_start+0x48>)
 8010570:	21bd      	movs	r1, #189	; 0xbd
 8010572:	480d      	ldr	r0, [pc, #52]	; (80105a8 <nk_start+0x4c>)
 8010574:	f00d f80c 	bl	801d590 <__assert_func>
    NK_ASSERT(win);
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d105      	bne.n	801058a <nk_start+0x2e>
 801057e:	4b0b      	ldr	r3, [pc, #44]	; (80105ac <nk_start+0x50>)
 8010580:	4a08      	ldr	r2, [pc, #32]	; (80105a4 <nk_start+0x48>)
 8010582:	21be      	movs	r1, #190	; 0xbe
 8010584:	4808      	ldr	r0, [pc, #32]	; (80105a8 <nk_start+0x4c>)
 8010586:	f00d f803 	bl	801d590 <__assert_func>
    nk_start_buffer(ctx, &win->buffer);
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	3364      	adds	r3, #100	; 0x64
 801058e:	4619      	mov	r1, r3
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f7ff ffa1 	bl	80104d8 <nk_start_buffer>
}
 8010596:	bf00      	nop
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	080211b8 	.word	0x080211b8
 80105a4:	08022e0c 	.word	0x08022e0c
 80105a8:	080211bc 	.word	0x080211bc
 80105ac:	08021204 	.word	0x08021204

080105b0 <nk_start_popup>:
NK_LIB void
nk_start_popup(struct nk_context *ctx, struct nk_window *win)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d105      	bne.n	80105cc <nk_start_popup+0x1c>
 80105c0:	4b19      	ldr	r3, [pc, #100]	; (8010628 <nk_start_popup+0x78>)
 80105c2:	4a1a      	ldr	r2, [pc, #104]	; (801062c <nk_start_popup+0x7c>)
 80105c4:	21c5      	movs	r1, #197	; 0xc5
 80105c6:	481a      	ldr	r0, [pc, #104]	; (8010630 <nk_start_popup+0x80>)
 80105c8:	f00c ffe2 	bl	801d590 <__assert_func>
    NK_ASSERT(win);
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d105      	bne.n	80105de <nk_start_popup+0x2e>
 80105d2:	4b18      	ldr	r3, [pc, #96]	; (8010634 <nk_start_popup+0x84>)
 80105d4:	4a15      	ldr	r2, [pc, #84]	; (801062c <nk_start_popup+0x7c>)
 80105d6:	21c6      	movs	r1, #198	; 0xc6
 80105d8:	4815      	ldr	r0, [pc, #84]	; (8010630 <nk_start_popup+0x80>)
 80105da:	f00c ffd9 	bl	801d590 <__assert_func>
    if (!ctx || !win) return;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d01d      	beq.n	8010620 <nk_start_popup+0x70>
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d01a      	beq.n	8010620 <nk_start_popup+0x70>

    /* save buffer fill state for popup */
    buf = &win->popup.buf;
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80105f0:	60fb      	str	r3, [r7, #12]
    buf->begin = win->buffer.end;
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	601a      	str	r2, [r3, #0]
    buf->end = win->buffer.end;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	60da      	str	r2, [r3, #12]
    buf->parent = win->buffer.last;
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	605a      	str	r2, [r3, #4]
    buf->last = buf->begin;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	609a      	str	r2, [r3, #8]
    buf->active = nk_true;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2201      	movs	r2, #1
 801061c:	611a      	str	r2, [r3, #16]
 801061e:	e000      	b.n	8010622 <nk_start_popup+0x72>
    if (!ctx || !win) return;
 8010620:	bf00      	nop
}
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	080211b8 	.word	0x080211b8
 801062c:	08022e18 	.word	0x08022e18
 8010630:	080211bc 	.word	0x080211bc
 8010634:	08021204 	.word	0x08021204

08010638 <nk_finish_popup>:
NK_LIB void
nk_finish_popup(struct nk_context *ctx, struct nk_window *win)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d105      	bne.n	8010654 <nk_finish_popup+0x1c>
 8010648:	4b13      	ldr	r3, [pc, #76]	; (8010698 <nk_finish_popup+0x60>)
 801064a:	4a14      	ldr	r2, [pc, #80]	; (801069c <nk_finish_popup+0x64>)
 801064c:	21d5      	movs	r1, #213	; 0xd5
 801064e:	4814      	ldr	r0, [pc, #80]	; (80106a0 <nk_finish_popup+0x68>)
 8010650:	f00c ff9e 	bl	801d590 <__assert_func>
    NK_ASSERT(win);
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d105      	bne.n	8010666 <nk_finish_popup+0x2e>
 801065a:	4b12      	ldr	r3, [pc, #72]	; (80106a4 <nk_finish_popup+0x6c>)
 801065c:	4a0f      	ldr	r2, [pc, #60]	; (801069c <nk_finish_popup+0x64>)
 801065e:	21d6      	movs	r1, #214	; 0xd6
 8010660:	480f      	ldr	r0, [pc, #60]	; (80106a0 <nk_finish_popup+0x68>)
 8010662:	f00c ff95 	bl	801d590 <__assert_func>
    if (!ctx || !win) return;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d011      	beq.n	8010690 <nk_finish_popup+0x58>
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00e      	beq.n	8010690 <nk_finish_popup+0x58>

    buf = &win->popup.buf;
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010678:	60fb      	str	r3, [r7, #12]
    buf->last = win->buffer.last;
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	609a      	str	r2, [r3, #8]
    buf->end = win->buffer.end;
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	60da      	str	r2, [r3, #12]
 801068e:	e000      	b.n	8010692 <nk_finish_popup+0x5a>
    if (!ctx || !win) return;
 8010690:	bf00      	nop
}
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	080211b8 	.word	0x080211b8
 801069c:	08022e28 	.word	0x08022e28
 80106a0:	080211bc 	.word	0x080211bc
 80106a4:	08021204 	.word	0x08021204

080106a8 <nk_finish_buffer>:
NK_LIB void
nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d105      	bne.n	80106c4 <nk_finish_buffer+0x1c>
 80106b8:	4b10      	ldr	r3, [pc, #64]	; (80106fc <nk_finish_buffer+0x54>)
 80106ba:	4a11      	ldr	r2, [pc, #68]	; (8010700 <nk_finish_buffer+0x58>)
 80106bc:	21e0      	movs	r1, #224	; 0xe0
 80106be:	4811      	ldr	r0, [pc, #68]	; (8010704 <nk_finish_buffer+0x5c>)
 80106c0:	f00c ff66 	bl	801d590 <__assert_func>
    NK_ASSERT(buffer);
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d105      	bne.n	80106d6 <nk_finish_buffer+0x2e>
 80106ca:	4b0f      	ldr	r3, [pc, #60]	; (8010708 <nk_finish_buffer+0x60>)
 80106cc:	4a0c      	ldr	r2, [pc, #48]	; (8010700 <nk_finish_buffer+0x58>)
 80106ce:	21e1      	movs	r1, #225	; 0xe1
 80106d0:	480c      	ldr	r0, [pc, #48]	; (8010704 <nk_finish_buffer+0x5c>)
 80106d2:	f00c ff5d 	bl	801d590 <__assert_func>
    if (!ctx || !buffer) return;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00a      	beq.n	80106f2 <nk_finish_buffer+0x4a>
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d007      	beq.n	80106f2 <nk_finish_buffer+0x4a>
    buffer->end = ctx->memory.allocated;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106e8:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	621a      	str	r2, [r3, #32]
 80106f0:	e000      	b.n	80106f4 <nk_finish_buffer+0x4c>
    if (!ctx || !buffer) return;
 80106f2:	bf00      	nop
}
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	080211b8 	.word	0x080211b8
 8010700:	08022e38 	.word	0x08022e38
 8010704:	080211bc 	.word	0x080211bc
 8010708:	080211fc 	.word	0x080211fc

0801070c <nk_finish>:
NK_LIB void
nk_finish(struct nk_context *ctx, struct nk_window *win)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    struct nk_command *parent_last;
    void *memory;

    NK_ASSERT(ctx);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d105      	bne.n	8010728 <nk_finish+0x1c>
 801071c:	4b1c      	ldr	r3, [pc, #112]	; (8010790 <nk_finish+0x84>)
 801071e:	4a1d      	ldr	r2, [pc, #116]	; (8010794 <nk_finish+0x88>)
 8010720:	21ec      	movs	r1, #236	; 0xec
 8010722:	481d      	ldr	r0, [pc, #116]	; (8010798 <nk_finish+0x8c>)
 8010724:	f00c ff34 	bl	801d590 <__assert_func>
    NK_ASSERT(win);
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d105      	bne.n	801073a <nk_finish+0x2e>
 801072e:	4b1b      	ldr	r3, [pc, #108]	; (801079c <nk_finish+0x90>)
 8010730:	4a18      	ldr	r2, [pc, #96]	; (8010794 <nk_finish+0x88>)
 8010732:	21ed      	movs	r1, #237	; 0xed
 8010734:	4818      	ldr	r0, [pc, #96]	; (8010798 <nk_finish+0x8c>)
 8010736:	f00c ff2b 	bl	801d590 <__assert_func>
    if (!ctx || !win) return;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d021      	beq.n	8010784 <nk_finish+0x78>
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d01e      	beq.n	8010784 <nk_finish+0x78>
    nk_finish_buffer(ctx, &win->buffer);
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	3364      	adds	r3, #100	; 0x64
 801074a:	4619      	mov	r1, r3
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff ffab 	bl	80106a8 <nk_finish_buffer>
    if (!win->popup.buf.active) return;
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010758:	2b00      	cmp	r3, #0
 801075a:	d015      	beq.n	8010788 <nk_finish+0x7c>

    buf = &win->popup.buf;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010762:	617b      	str	r3, [r7, #20]
    memory = ctx->memory.memory.ptr;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801076a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 801076e:	613b      	str	r3, [r7, #16]
    parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	693a      	ldr	r2, [r7, #16]
 8010776:	4413      	add	r3, r2
 8010778:	60fb      	str	r3, [r7, #12]
    parent_last->next = buf->end;
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	68da      	ldr	r2, [r3, #12]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	605a      	str	r2, [r3, #4]
 8010782:	e002      	b.n	801078a <nk_finish+0x7e>
    if (!ctx || !win) return;
 8010784:	bf00      	nop
 8010786:	e000      	b.n	801078a <nk_finish+0x7e>
    if (!win->popup.buf.active) return;
 8010788:	bf00      	nop
}
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	080211b8 	.word	0x080211b8
 8010794:	08022e4c 	.word	0x08022e4c
 8010798:	080211bc 	.word	0x080211bc
 801079c:	08021204 	.word	0x08021204

080107a0 <nk_build>:
NK_LIB void
nk_build(struct nk_context *ctx)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b08e      	sub	sp, #56	; 0x38
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
    struct nk_window *it = 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command *cmd = 0;
 80107ac:	2300      	movs	r3, #0
 80107ae:	633b      	str	r3, [r7, #48]	; 0x30
    nk_byte *buffer = 0;
 80107b0:	2300      	movs	r3, #0
 80107b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* draw cursor overlay */
    if (!ctx->style.cursor_active)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d105      	bne.n	80107ca <nk_build+0x2a>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d05d      	beq.n	8010890 <nk_build+0xf0>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d158      	bne.n	8010890 <nk_build+0xf0>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d053      	beq.n	8010890 <nk_build+0xf0>
        struct nk_rect mouse_bounds;
        const struct nk_cursor *cursor = ctx->style.cursor_active;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80107ee:	627b      	str	r3, [r7, #36]	; 0x24
        nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80107f6:	3334      	adds	r3, #52	; 0x34
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	f502 51d4 	add.w	r1, r2, #6784	; 0x1a80
 80107fe:	310c      	adds	r1, #12
 8010800:	2200      	movs	r2, #0
 8010802:	4618      	mov	r0, r3
 8010804:	f000 fb94 	bl	8010f30 <nk_command_buffer_init>
        nk_start_buffer(ctx, &ctx->overlay);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 801080e:	3334      	adds	r3, #52	; 0x34
 8010810:	4619      	mov	r1, r3
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7ff fe60 	bl	80104d8 <nk_start_buffer>

        mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	edd3 7a06 	vldr	s15, [r3, #24]
 8010824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010828:	edc7 7a03 	vstr	s15, [r7, #12]
        mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8010832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010834:	edd3 7a07 	vldr	s15, [r3, #28]
 8010838:	ee77 7a67 	vsub.f32	s15, s14, s15
 801083c:	edc7 7a04 	vstr	s15, [r7, #16]
        mouse_bounds.w = cursor->size.x;
 8010840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010842:	691b      	ldr	r3, [r3, #16]
 8010844:	617b      	str	r3, [r7, #20]
        mouse_bounds.h = cursor->size.y;
 8010846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010848:	695b      	ldr	r3, [r3, #20]
 801084a:	61bb      	str	r3, [r7, #24]

        nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010852:	3334      	adds	r3, #52	; 0x34
 8010854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010856:	4a62      	ldr	r2, [pc, #392]	; (80109e0 <nk_build+0x240>)
 8010858:	ed97 6a03 	vldr	s12, [r7, #12]
 801085c:	edd7 6a04 	vldr	s13, [r7, #16]
 8010860:	ed97 7a05 	vldr	s14, [r7, #20]
 8010864:	edd7 7a06 	vldr	s15, [r7, #24]
 8010868:	6812      	ldr	r2, [r2, #0]
 801086a:	eeb0 0a46 	vmov.f32	s0, s12
 801086e:	eef0 0a66 	vmov.f32	s1, s13
 8010872:	eeb0 1a47 	vmov.f32	s2, s14
 8010876:	eef0 1a67 	vmov.f32	s3, s15
 801087a:	4618      	mov	r0, r3
 801087c:	f001 f904 	bl	8011a88 <nk_draw_image>
        nk_finish_buffer(ctx, &ctx->overlay);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010886:	3334      	adds	r3, #52	; 0x34
 8010888:	4619      	mov	r1, r3
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff ff0c 	bl	80106a8 <nk_finish_buffer>
    }
    /* build one big draw command list out of all window buffers */
    it = ctx->begin;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010896:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801089a:	637b      	str	r3, [r7, #52]	; 0x34
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108a2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80108a6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (it != 0) {
 80108a8:	e04d      	b.n	8010946 <nk_build+0x1a6>
        struct nk_window *next = it->next;
 80108aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ac:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80108b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 80108b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80108b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108be:	429a      	cmp	r2, r3
 80108c0:	d03c      	beq.n	801093c <nk_build+0x19c>
 80108c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d136      	bne.n	801093c <nk_build+0x19c>
            it->seq != ctx->seq)
 80108ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80108d8:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 80108dc:	429a      	cmp	r2, r3
 80108de:	d12d      	bne.n	801093c <nk_build+0x19c>
            goto cont;

        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
 80108e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108e8:	4413      	add	r3, r2
 80108ea:	633b      	str	r3, [r7, #48]	; 0x30
        while (next && ((next->buffer.last == next->buffer.begin) ||
 80108ec:	e003      	b.n	80108f6 <nk_build+0x156>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
            next = next->next; /* skip empty command buffers */
 80108ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80108f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (next && ((next->buffer.last == next->buffer.begin) ||
 80108f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d016      	beq.n	801092a <nk_build+0x18a>
 80108fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010908:	429a      	cmp	r2, r3
 801090a:	d0f0      	beq.n	80108ee <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 801090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1ea      	bne.n	80108ee <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8010918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010922:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010926:	429a      	cmp	r2, r3
 8010928:	d1e1      	bne.n	80108ee <nk_build+0x14e>

        if (next) cmd->next = next->buffer.begin;
 801092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092c:	2b00      	cmp	r3, #0
 801092e:	d007      	beq.n	8010940 <nk_build+0x1a0>
 8010930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010932:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8010936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010938:	605a      	str	r2, [r3, #4]
 801093a:	e002      	b.n	8010942 <nk_build+0x1a2>
            goto cont;
 801093c:	bf00      	nop
 801093e:	e000      	b.n	8010942 <nk_build+0x1a2>
        cont: it = next;
 8010940:	bf00      	nop
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8010946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1ae      	bne.n	80108aa <nk_build+0x10a>
    }
    /* append all popup draw commands into lists */
    it = ctx->begin;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010952:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010956:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8010958:	e01c      	b.n	8010994 <nk_build+0x1f4>
        struct nk_window *next = it->next;
 801095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010960:	623b      	str	r3, [r7, #32]
        struct nk_popup_buffer *buf;
        if (!it->popup.buf.active)
 8010962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010964:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010968:	2b00      	cmp	r3, #0
 801096a:	d010      	beq.n	801098e <nk_build+0x1ee>
            goto skip;

        buf = &it->popup.buf;
 801096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010972:	61fb      	str	r3, [r7, #28]
        cmd->next = buf->begin;
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097a:	605a      	str	r2, [r3, #4]
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010982:	4413      	add	r3, r2
 8010984:	633b      	str	r3, [r7, #48]	; 0x30
        buf->active = nk_false;
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	2200      	movs	r2, #0
 801098a:	611a      	str	r2, [r3, #16]
 801098c:	e000      	b.n	8010990 <nk_build+0x1f0>
            goto skip;
 801098e:	bf00      	nop
        skip: it = next;
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8010994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1df      	bne.n	801095a <nk_build+0x1ba>
    }
    if (cmd) {
 801099a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099c:	2b00      	cmp	r3, #0
 801099e:	d01a      	beq.n	80109d6 <nk_build+0x236>
        /* append overlay commands */
        if (ctx->overlay.end != ctx->overlay.begin)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109a6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109b0:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d007      	beq.n	80109c8 <nk_build+0x228>
            cmd->next = ctx->overlay.begin;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109be:	f8d3 2610 	ldr.w	r2, [r3, #1552]	; 0x610
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	605a      	str	r2, [r3, #4]
        else cmd->next = ctx->memory.allocated;
    }
}
 80109c6:	e006      	b.n	80109d6 <nk_build+0x236>
        else cmd->next = ctx->memory.allocated;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ce:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 80109d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d4:	605a      	str	r2, [r3, #4]
}
 80109d6:	bf00      	nop
 80109d8:	3738      	adds	r7, #56	; 0x38
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	08022dd0 	.word	0x08022dd0

080109e4 <nk__begin>:
NK_API const struct nk_command*
nk__begin(struct nk_context *ctx)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    nk_byte *buffer;
    NK_ASSERT(ctx);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <nk__begin+0x1c>
 80109f2:	4b2f      	ldr	r3, [pc, #188]	; (8010ab0 <nk__begin+0xcc>)
 80109f4:	4a2f      	ldr	r2, [pc, #188]	; (8010ab4 <nk__begin+0xd0>)
 80109f6:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80109fa:	482f      	ldr	r0, [pc, #188]	; (8010ab8 <nk__begin+0xd4>)
 80109fc:	f00c fdc8 	bl	801d590 <__assert_func>
    if (!ctx) return 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <nk__begin+0x26>
 8010a06:	2300      	movs	r3, #0
 8010a08:	e04e      	b.n	8010aa8 <nk__begin+0xc4>
    if (!ctx->count) return 0;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a10:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d101      	bne.n	8010a1c <nk__begin+0x38>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	e045      	b.n	8010aa8 <nk__begin+0xc4>

    buffer = (nk_byte*)ctx->memory.memory.ptr;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a22:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010a26:	60bb      	str	r3, [r7, #8]
    if (!ctx->build) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a2e:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d109      	bne.n	8010a4a <nk__begin+0x66>
        nk_build(ctx);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7ff feb2 	bl	80107a0 <nk_build>
        ctx->build = nk_true;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a42:	461a      	mov	r2, r3
 8010a44:	2301      	movs	r3, #1
 8010a46:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    }
    iter = ctx->begin;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a50:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010a54:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 8010a56:	e003      	b.n	8010a60 <nk__begin+0x7c>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
        iter = iter->next;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010a5e:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d016      	beq.n	8010a94 <nk__begin+0xb0>
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d0f0      	beq.n	8010a58 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d1ea      	bne.n	8010a58 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a8c:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d1e1      	bne.n	8010a58 <nk__begin+0x74>
    if (!iter) return 0;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d101      	bne.n	8010a9e <nk__begin+0xba>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	e004      	b.n	8010aa8 <nk__begin+0xc4>
    return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa4:	68ba      	ldr	r2, [r7, #8]
 8010aa6:	4413      	add	r3, r2
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3710      	adds	r7, #16
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	080211b8 	.word	0x080211b8
 8010ab4:	08022e58 	.word	0x08022e58
 8010ab8:	080211bc 	.word	0x080211bc

08010abc <nk__next>:

NK_API const struct nk_command*
nk__next(struct nk_context *ctx, const struct nk_command *cmd)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
    nk_byte *buffer;
    const struct nk_command *next;
    NK_ASSERT(ctx);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d106      	bne.n	8010ada <nk__next+0x1e>
 8010acc:	4b18      	ldr	r3, [pc, #96]	; (8010b30 <nk__next+0x74>)
 8010ace:	4a19      	ldr	r2, [pc, #100]	; (8010b34 <nk__next+0x78>)
 8010ad0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010ad4:	4818      	ldr	r0, [pc, #96]	; (8010b38 <nk__next+0x7c>)
 8010ad6:	f00c fd5b 	bl	801d590 <__assert_func>
    if (!ctx || !cmd || !ctx->count) return 0;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d009      	beq.n	8010af4 <nk__next+0x38>
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d006      	beq.n	8010af4 <nk__next+0x38>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010aec:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d101      	bne.n	8010af8 <nk__next+0x3c>
 8010af4:	2300      	movs	r3, #0
 8010af6:	e016      	b.n	8010b26 <nk__next+0x6a>
    if (cmd->next >= ctx->memory.allocated) return 0;
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	685a      	ldr	r2, [r3, #4]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b02:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d301      	bcc.n	8010b0e <nk__next+0x52>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	e00b      	b.n	8010b26 <nk__next+0x6a>
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b14:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010b18:	60fb      	str	r3, [r7, #12]
    next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	68fa      	ldr	r2, [r7, #12]
 8010b20:	4413      	add	r3, r2
 8010b22:	60bb      	str	r3, [r7, #8]
    return next;
 8010b24:	68bb      	ldr	r3, [r7, #8]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	080211b8 	.word	0x080211b8
 8010b34:	08022e64 	.word	0x08022e64
 8010b38:	080211bc 	.word	0x080211bc

08010b3c <nk_contextual_item_text>:
    return ret;
}
NK_API nk_bool
nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,
    nk_flags alignment)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b092      	sub	sp, #72	; 0x48
 8010b40:	af06      	add	r7, sp, #24
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
 8010b48:	603b      	str	r3, [r7, #0]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d105      	bne.n	8010b5c <nk_contextual_item_text+0x20>
 8010b50:	4b4e      	ldr	r3, [pc, #312]	; (8010c8c <nk_contextual_item_text+0x150>)
 8010b52:	4a4f      	ldr	r2, [pc, #316]	; (8010c90 <nk_contextual_item_text+0x154>)
 8010b54:	214f      	movs	r1, #79	; 0x4f
 8010b56:	484f      	ldr	r0, [pc, #316]	; (8010c94 <nk_contextual_item_text+0x158>)
 8010b58:	f00c fd1a 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b62:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d105      	bne.n	8010b76 <nk_contextual_item_text+0x3a>
 8010b6a:	4b4b      	ldr	r3, [pc, #300]	; (8010c98 <nk_contextual_item_text+0x15c>)
 8010b6c:	4a48      	ldr	r2, [pc, #288]	; (8010c90 <nk_contextual_item_text+0x154>)
 8010b6e:	2150      	movs	r1, #80	; 0x50
 8010b70:	4848      	ldr	r0, [pc, #288]	; (8010c94 <nk_contextual_item_text+0x158>)
 8010b72:	f00c fd0d 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b7c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d105      	bne.n	8010b94 <nk_contextual_item_text+0x58>
 8010b88:	4b44      	ldr	r3, [pc, #272]	; (8010c9c <nk_contextual_item_text+0x160>)
 8010b8a:	4a41      	ldr	r2, [pc, #260]	; (8010c90 <nk_contextual_item_text+0x154>)
 8010b8c:	2151      	movs	r1, #81	; 0x51
 8010b8e:	4841      	ldr	r0, [pc, #260]	; (8010c94 <nk_contextual_item_text+0x158>)
 8010b90:	f00c fcfe 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00f      	beq.n	8010bba <nk_contextual_item_text+0x7e>
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010ba0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d008      	beq.n	8010bba <nk_contextual_item_text+0x7e>
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010bae:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d101      	bne.n	8010bbe <nk_contextual_item_text+0x82>
        return 0;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	e061      	b.n	8010c82 <nk_contextual_item_text+0x146>

    win = ctx->current;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010bc4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    style = &ctx->style;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);
 8010bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd4:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8010bd8:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8010bdc:	f107 0310 	add.w	r3, r7, #16
 8010be0:	eeb0 0a47 	vmov.f32	s0, s14
 8010be4:	eef0 0a67 	vmov.f32	s1, s15
 8010be8:	68f9      	ldr	r1, [r7, #12]
 8010bea:	4618      	mov	r0, r3
 8010bec:	f00b fb94 	bl	801c318 <nk_widget_fitting>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return nk_false;
 8010bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d101      	bne.n	8010c02 <nk_contextual_item_text+0xc6>
 8010bfe:	2300      	movs	r3, #0
 8010c00:	e03f      	b.n	8010c82 <nk_contextual_item_text+0x146>

    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8010c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c06:	2b02      	cmp	r3, #2
 8010c08:	d009      	beq.n	8010c1e <nk_contextual_item_text+0xe2>
 8010c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d101      	bne.n	8010c1e <nk_contextual_item_text+0xe2>
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	e000      	b.n	8010c20 <nk_contextual_item_text+0xe4>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	623b      	str	r3, [r7, #32]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 8010c28:	3014      	adds	r0, #20
 8010c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c2c:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8010c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c32:	33d0      	adds	r3, #208	; 0xd0
        text, len, alignment, NK_BUTTON_DEFAULT, &style->contextual_button, in, style->font)) {
 8010c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c36:	6812      	ldr	r2, [r2, #0]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8010c38:	ed97 6a04 	vldr	s12, [r7, #16]
 8010c3c:	edd7 6a05 	vldr	s13, [r7, #20]
 8010c40:	ed97 7a06 	vldr	s14, [r7, #24]
 8010c44:	edd7 7a07 	vldr	s15, [r7, #28]
 8010c48:	9204      	str	r2, [sp, #16]
 8010c4a:	6a3a      	ldr	r2, [r7, #32]
 8010c4c:	9203      	str	r2, [sp, #12]
 8010c4e:	9302      	str	r3, [sp, #8]
 8010c50:	2300      	movs	r3, #0
 8010c52:	9301      	str	r3, [sp, #4]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	eeb0 0a46 	vmov.f32	s0, s12
 8010c60:	eef0 0a66 	vmov.f32	s1, s13
 8010c64:	eeb0 1a47 	vmov.f32	s2, s14
 8010c68:	eef0 1a67 	vmov.f32	s3, s15
 8010c6c:	f7fe f91e 	bl	800eeac <nk_do_button_text>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d004      	beq.n	8010c80 <nk_contextual_item_text+0x144>
        nk_contextual_close(ctx);
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f000 f826 	bl	8010cc8 <nk_contextual_close>
        return nk_true;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e000      	b.n	8010c82 <nk_contextual_item_text+0x146>
    }
    return nk_false;
 8010c80:	2300      	movs	r3, #0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3730      	adds	r7, #48	; 0x30
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	08021208 	.word	0x08021208
 8010c90:	08022e70 	.word	0x08022e70
 8010c94:	0802120c 	.word	0x0802120c
 8010c98:	0802122c 	.word	0x0802122c
 8010c9c:	0802123c 	.word	0x0802123c

08010ca0 <nk_contextual_item_label>:
NK_API nk_bool
nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_text(ctx, label, nk_strlen(label), align);
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	f00a ff95 	bl	801bbdc <nk_strlen>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	68b9      	ldr	r1, [r7, #8]
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f7ff ff3f 	bl	8010b3c <nk_contextual_item_text>
 8010cbe:	4603      	mov	r3, r0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3710      	adds	r7, #16
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <nk_contextual_close>:
{
    return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);
}
NK_API void
nk_contextual_close(struct nk_context *ctx)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d105      	bne.n	8010ce2 <nk_contextual_close+0x1a>
 8010cd6:	4b1e      	ldr	r3, [pc, #120]	; (8010d50 <nk_contextual_close+0x88>)
 8010cd8:	4a1e      	ldr	r2, [pc, #120]	; (8010d54 <nk_contextual_close+0x8c>)
 8010cda:	21b2      	movs	r1, #178	; 0xb2
 8010cdc:	481e      	ldr	r0, [pc, #120]	; (8010d58 <nk_contextual_close+0x90>)
 8010cde:	f00c fc57 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010ce8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d105      	bne.n	8010cfc <nk_contextual_close+0x34>
 8010cf0:	4b1a      	ldr	r3, [pc, #104]	; (8010d5c <nk_contextual_close+0x94>)
 8010cf2:	4a18      	ldr	r2, [pc, #96]	; (8010d54 <nk_contextual_close+0x8c>)
 8010cf4:	21b3      	movs	r1, #179	; 0xb3
 8010cf6:	4818      	ldr	r0, [pc, #96]	; (8010d58 <nk_contextual_close+0x90>)
 8010cf8:	f00c fc4a 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010d02:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d105      	bne.n	8010d1a <nk_contextual_close+0x52>
 8010d0e:	4b14      	ldr	r3, [pc, #80]	; (8010d60 <nk_contextual_close+0x98>)
 8010d10:	4a10      	ldr	r2, [pc, #64]	; (8010d54 <nk_contextual_close+0x8c>)
 8010d12:	21b4      	movs	r1, #180	; 0xb4
 8010d14:	4810      	ldr	r0, [pc, #64]	; (8010d58 <nk_contextual_close+0x90>)
 8010d16:	f00c fc3b 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d013      	beq.n	8010d48 <nk_contextual_close+0x80>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010d26:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00c      	beq.n	8010d48 <nk_contextual_close+0x80>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010d34:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d003      	beq.n	8010d48 <nk_contextual_close+0x80>
    nk_popup_close(ctx);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f006 f8b3 	bl	8016eac <nk_popup_close>
 8010d46:	e000      	b.n	8010d4a <nk_contextual_close+0x82>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 8010d48:	bf00      	nop
}
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	08021208 	.word	0x08021208
 8010d54:	08022e88 	.word	0x08022e88
 8010d58:	0802120c 	.word	0x0802120c
 8010d5c:	0802122c 	.word	0x0802122c
 8010d60:	0802123c 	.word	0x0802123c

08010d64 <nk_contextual_end>:
NK_API void
nk_contextual_end(struct nk_context *ctx)
{
 8010d64:	b590      	push	{r4, r7, lr}
 8010d66:	b08d      	sub	sp, #52	; 0x34
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    struct nk_panel *panel;
    NK_ASSERT(ctx);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d105      	bne.n	8010d7e <nk_contextual_end+0x1a>
 8010d72:	4b69      	ldr	r3, [pc, #420]	; (8010f18 <nk_contextual_end+0x1b4>)
 8010d74:	4a69      	ldr	r2, [pc, #420]	; (8010f1c <nk_contextual_end+0x1b8>)
 8010d76:	21bd      	movs	r1, #189	; 0xbd
 8010d78:	4869      	ldr	r0, [pc, #420]	; (8010f20 <nk_contextual_end+0x1bc>)
 8010d7a:	f00c fc09 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010d84:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d105      	bne.n	8010d98 <nk_contextual_end+0x34>
 8010d8c:	4b65      	ldr	r3, [pc, #404]	; (8010f24 <nk_contextual_end+0x1c0>)
 8010d8e:	4a63      	ldr	r2, [pc, #396]	; (8010f1c <nk_contextual_end+0x1b8>)
 8010d90:	21be      	movs	r1, #190	; 0xbe
 8010d92:	4863      	ldr	r0, [pc, #396]	; (8010f20 <nk_contextual_end+0x1bc>)
 8010d94:	f00c fbfc 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current) return;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f000 80b8 	beq.w	8010f10 <nk_contextual_end+0x1ac>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010da6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f000 80b0 	beq.w	8010f10 <nk_contextual_end+0x1ac>

    popup = ctx->current;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010db6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    panel = popup->layout;
 8010dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    NK_ASSERT(popup->parent);
 8010dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d105      	bne.n	8010dda <nk_contextual_end+0x76>
 8010dce:	4b56      	ldr	r3, [pc, #344]	; (8010f28 <nk_contextual_end+0x1c4>)
 8010dd0:	4a52      	ldr	r2, [pc, #328]	; (8010f1c <nk_contextual_end+0x1b8>)
 8010dd2:	21c3      	movs	r1, #195	; 0xc3
 8010dd4:	4852      	ldr	r0, [pc, #328]	; (8010f20 <nk_contextual_end+0x1bc>)
 8010dd6:	f00c fbdb 	bl	801d590 <__assert_func>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 8010dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d105      	bne.n	8010df2 <nk_contextual_end+0x8e>
 8010de6:	4b51      	ldr	r3, [pc, #324]	; (8010f2c <nk_contextual_end+0x1c8>)
 8010de8:	4a4c      	ldr	r2, [pc, #304]	; (8010f1c <nk_contextual_end+0x1b8>)
 8010dea:	21c4      	movs	r1, #196	; 0xc4
 8010dec:	484c      	ldr	r0, [pc, #304]	; (8010f20 <nk_contextual_end+0x1bc>)
 8010dee:	f00c fbcf 	bl	801d590 <__assert_func>
    if (panel->flags & NK_WINDOW_DYNAMIC) {
 8010df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d07b      	beq.n	8010ef6 <nk_contextual_end+0x192>
        /* Close behavior
        This is a bit of a hack solution since we do not know before we end our popup
        how big it will be. We therefore do not directly know when a
        click outside the non-blocking popup must close it at that direct frame.
        Instead it will be closed in the next frame.*/
        struct nk_rect body = {0,0,0,0};
 8010dfe:	f107 0310 	add.w	r3, r7, #16
 8010e02:	2200      	movs	r2, #0
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	605a      	str	r2, [r3, #4]
 8010e08:	609a      	str	r2, [r3, #8]
 8010e0a:	60da      	str	r2, [r3, #12]
        if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e14:	edd3 6a03 	vldr	s13, [r3, #12]
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8010e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e2a:	d53d      	bpl.n	8010ea8 <nk_contextual_end+0x144>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8010e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	4619      	mov	r1, r3
 8010e38:	4610      	mov	r0, r2
 8010e3a:	f003 fc93 	bl	8014764 <nk_panel_get_padding>
 8010e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8010e42:	eef0 7a60 	vmov.f32	s15, s1
 8010e46:	ed87 7a02 	vstr	s14, [r7, #8]
 8010e4a:	edc7 7a03 	vstr	s15, [r7, #12]
            body = panel->bounds;
 8010e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e50:	f107 0410 	add.w	r4, r7, #16
 8010e54:	3308      	adds	r3, #8
 8010e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e64:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010e72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8010e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e80:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8010e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e88:	edc7 7a05 	vstr	s15, [r7, #20]
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
 8010e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8010e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e94:	edd3 7a05 	vldr	s15, [r3, #20]
 8010e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ea4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2100      	movs	r1, #0
 8010eac:	4618      	mov	r0, r3
 8010eae:	f001 ff8e 	bl	8012dce <nk_input_is_mouse_pressed>
 8010eb2:	6278      	str	r0, [r7, #36]	; 0x24
        int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8010eba:	edd7 6a05 	vldr	s13, [r7, #20]
 8010ebe:	ed97 7a06 	vldr	s14, [r7, #24]
 8010ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ec6:	eeb0 0a46 	vmov.f32	s0, s12
 8010eca:	eef0 0a66 	vmov.f32	s1, s13
 8010ece:	eeb0 1a47 	vmov.f32	s2, s14
 8010ed2:	eef0 1a67 	vmov.f32	s3, s15
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f001 febd 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 8010edc:	6238      	str	r0, [r7, #32]
        if (pressed && in_body)
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d008      	beq.n	8010ef6 <nk_contextual_end+0x192>
 8010ee4:	6a3b      	ldr	r3, [r7, #32]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d005      	beq.n	8010ef6 <nk_contextual_end+0x192>
            popup->flags |= NK_WINDOW_HIDDEN;
 8010eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010eee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef4:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    if (popup->flags & NK_WINDOW_HIDDEN)
 8010ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d002      	beq.n	8010f08 <nk_contextual_end+0x1a4>
        popup->seq = 0;
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	2200      	movs	r2, #0
 8010f06:	601a      	str	r2, [r3, #0]
    nk_popup_end(ctx);
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f006 f81b 	bl	8016f44 <nk_popup_end>
    return;
 8010f0e:	e000      	b.n	8010f12 <nk_contextual_end+0x1ae>
    if (!ctx || !ctx->current) return;
 8010f10:	bf00      	nop
}
 8010f12:	3734      	adds	r7, #52	; 0x34
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd90      	pop	{r4, r7, pc}
 8010f18:	08021208 	.word	0x08021208
 8010f1c:	08022e9c 	.word	0x08022e9c
 8010f20:	0802120c 	.word	0x0802120c
 8010f24:	0802122c 	.word	0x0802122c
 8010f28:	08021254 	.word	0x08021254
 8010f2c:	08021264 	.word	0x08021264

08010f30 <nk_command_buffer_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_command_buffer_init(struct nk_command_buffer *cb,
    struct nk_buffer *b, enum nk_command_clipping clip)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(cb);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d105      	bne.n	8010f50 <nk_command_buffer_init+0x20>
 8010f44:	4b15      	ldr	r3, [pc, #84]	; (8010f9c <nk_command_buffer_init+0x6c>)
 8010f46:	4a16      	ldr	r2, [pc, #88]	; (8010fa0 <nk_command_buffer_init+0x70>)
 8010f48:	210d      	movs	r1, #13
 8010f4a:	4816      	ldr	r0, [pc, #88]	; (8010fa4 <nk_command_buffer_init+0x74>)
 8010f4c:	f00c fb20 	bl	801d590 <__assert_func>
    NK_ASSERT(b);
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d105      	bne.n	8010f62 <nk_command_buffer_init+0x32>
 8010f56:	4b14      	ldr	r3, [pc, #80]	; (8010fa8 <nk_command_buffer_init+0x78>)
 8010f58:	4a11      	ldr	r2, [pc, #68]	; (8010fa0 <nk_command_buffer_init+0x70>)
 8010f5a:	210e      	movs	r1, #14
 8010f5c:	4811      	ldr	r0, [pc, #68]	; (8010fa4 <nk_command_buffer_init+0x74>)
 8010f5e:	f00c fb17 	bl	801d590 <__assert_func>
    if (!cb || !b) return;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d015      	beq.n	8010f94 <nk_command_buffer_init+0x64>
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d012      	beq.n	8010f94 <nk_command_buffer_init+0x64>
    cb->base = b;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	601a      	str	r2, [r3, #0]
    cb->use_clipping = (int)clip;
 8010f74:	79fa      	ldrb	r2, [r7, #7]
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	615a      	str	r2, [r3, #20]
    cb->begin = b->allocated;
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	61da      	str	r2, [r3, #28]
    cb->end = b->allocated;
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	621a      	str	r2, [r3, #32]
    cb->last = b->allocated;
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	625a      	str	r2, [r3, #36]	; 0x24
 8010f92:	e000      	b.n	8010f96 <nk_command_buffer_init+0x66>
    if (!cb || !b) return;
 8010f94:	bf00      	nop
}
 8010f96:	3710      	adds	r7, #16
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	08021288 	.word	0x08021288
 8010fa0:	08022ec0 	.word	0x08022ec0
 8010fa4:	0802128c 	.word	0x0802128c
 8010fa8:	080212a8 	.word	0x080212a8

08010fac <nk_command_buffer_reset>:
NK_LIB void
nk_command_buffer_reset(struct nk_command_buffer *b)
{
 8010fac:	b590      	push	{r4, r7, lr}
 8010fae:	b083      	sub	sp, #12
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d105      	bne.n	8010fc6 <nk_command_buffer_reset+0x1a>
 8010fba:	4b0f      	ldr	r3, [pc, #60]	; (8010ff8 <nk_command_buffer_reset+0x4c>)
 8010fbc:	4a0f      	ldr	r2, [pc, #60]	; (8010ffc <nk_command_buffer_reset+0x50>)
 8010fbe:	2119      	movs	r1, #25
 8010fc0:	480f      	ldr	r0, [pc, #60]	; (8011000 <nk_command_buffer_reset+0x54>)
 8010fc2:	f00c fae5 	bl	801d590 <__assert_func>
    if (!b) return;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d010      	beq.n	8010fee <nk_command_buffer_reset+0x42>
    b->begin = 0;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	61da      	str	r2, [r3, #28]
    b->end = 0;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	621a      	str	r2, [r3, #32]
    b->last = 0;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	625a      	str	r2, [r3, #36]	; 0x24
    b->clip = nk_null_rect;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4a08      	ldr	r2, [pc, #32]	; (8011004 <nk_command_buffer_reset+0x58>)
 8010fe2:	1d1c      	adds	r4, r3, #4
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010fec:	e000      	b.n	8010ff0 <nk_command_buffer_reset+0x44>
    if (!b) return;
 8010fee:	bf00      	nop
#ifdef NK_INCLUDE_COMMAND_USERDATA
    b->userdata.ptr = 0;
#endif
}
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd90      	pop	{r4, r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	080212a8 	.word	0x080212a8
 8010ffc:	08022ed8 	.word	0x08022ed8
 8011000:	0802128c 	.word	0x0802128c
 8011004:	08022eb0 	.word	0x08022eb0

08011008 <nk_command_buffer_push>:
NK_LIB void*
nk_command_buffer_push(struct nk_command_buffer* b,
    enum nk_command_type t, nk_size size)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b088      	sub	sp, #32
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	460b      	mov	r3, r1
 8011012:	607a      	str	r2, [r7, #4]
 8011014:	72fb      	strb	r3, [r7, #11]
    struct nk_command *cmd;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d105      	bne.n	8011028 <nk_command_buffer_push+0x20>
 801101c:	4b28      	ldr	r3, [pc, #160]	; (80110c0 <nk_command_buffer_push+0xb8>)
 801101e:	4a29      	ldr	r2, [pc, #164]	; (80110c4 <nk_command_buffer_push+0xbc>)
 8011020:	212d      	movs	r1, #45	; 0x2d
 8011022:	4829      	ldr	r0, [pc, #164]	; (80110c8 <nk_command_buffer_push+0xc0>)
 8011024:	f00c fab4 	bl	801d590 <__assert_func>
    NK_ASSERT(b->base);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d105      	bne.n	801103c <nk_command_buffer_push+0x34>
 8011030:	4b26      	ldr	r3, [pc, #152]	; (80110cc <nk_command_buffer_push+0xc4>)
 8011032:	4a24      	ldr	r2, [pc, #144]	; (80110c4 <nk_command_buffer_push+0xbc>)
 8011034:	212e      	movs	r1, #46	; 0x2e
 8011036:	4824      	ldr	r0, [pc, #144]	; (80110c8 <nk_command_buffer_push+0xc0>)
 8011038:	f00c faaa 	bl	801d590 <__assert_func>
    if (!b) return 0;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d101      	bne.n	8011046 <nk_command_buffer_push+0x3e>
 8011042:	2300      	movs	r3, #0
 8011044:	e037      	b.n	80110b6 <nk_command_buffer_push+0xae>
    cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6818      	ldr	r0, [r3, #0]
 801104a:	4b21      	ldr	r3, [pc, #132]	; (80110d0 <nk_command_buffer_push+0xc8>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	2100      	movs	r1, #0
 8011052:	f7fd f96f 	bl	800e334 <nk_buffer_alloc>
 8011056:	61f8      	str	r0, [r7, #28]
    if (!cmd) return 0;
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <nk_command_buffer_push+0x5a>
 801105e:	2300      	movs	r3, #0
 8011060:	e029      	b.n	80110b6 <nk_command_buffer_push+0xae>

    /* make sure the offset to the next command is aligned */
    b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	6a1b      	ldr	r3, [r3, #32]
 8011068:	69fa      	ldr	r2, [r7, #28]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	461a      	mov	r2, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	625a      	str	r2, [r3, #36]	; 0x24
    unaligned = (nk_byte*)cmd + size;
 8011072:	69fa      	ldr	r2, [r7, #28]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	4413      	add	r3, r2
 8011078:	61bb      	str	r3, [r7, #24]
    memory = NK_ALIGN_PTR(unaligned, align);
 801107a:	4b15      	ldr	r3, [pc, #84]	; (80110d0 <nk_command_buffer_push+0xc8>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	3b01      	subs	r3, #1
 8011080:	69ba      	ldr	r2, [r7, #24]
 8011082:	4413      	add	r3, r2
 8011084:	461a      	mov	r2, r3
 8011086:	4b12      	ldr	r3, [pc, #72]	; (80110d0 <nk_command_buffer_push+0xc8>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	425b      	negs	r3, r3
 801108c:	4013      	ands	r3, r2
 801108e:	617b      	str	r3, [r7, #20]
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 8011090:	697a      	ldr	r2, [r7, #20]
 8011092:	69bb      	ldr	r3, [r7, #24]
 8011094:	1ad3      	subs	r3, r2, r3
 8011096:	613b      	str	r3, [r7, #16]
#ifdef NK_ZERO_COMMAND_MEMORY
    NK_MEMSET(cmd, 0, size + alignment);
#endif

    cmd->type = t;
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	7afa      	ldrb	r2, [r7, #11]
 801109c:	701a      	strb	r2, [r3, #0]
    cmd->next = b->base->allocated + alignment;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	441a      	add	r2, r3
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	605a      	str	r2, [r3, #4]
#ifdef NK_INCLUDE_COMMAND_USERDATA
    cmd->userdata = b->userdata;
#endif
    b->end = cmd->next;
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	685a      	ldr	r2, [r3, #4]
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	621a      	str	r2, [r3, #32]
    return cmd;
 80110b4:	69fb      	ldr	r3, [r7, #28]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3720      	adds	r7, #32
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	080212a8 	.word	0x080212a8
 80110c4:	08022ef0 	.word	0x08022ef0
 80110c8:	0802128c 	.word	0x0802128c
 80110cc:	080212ac 	.word	0x080212ac
 80110d0:	08022f08 	.word	0x08022f08

080110d4 <nk_push_scissor>:
NK_API void
nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b088      	sub	sp, #32
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6178      	str	r0, [r7, #20]
 80110dc:	eeb0 6a40 	vmov.f32	s12, s0
 80110e0:	eef0 6a60 	vmov.f32	s13, s1
 80110e4:	eeb0 7a41 	vmov.f32	s14, s2
 80110e8:	eef0 7a61 	vmov.f32	s15, s3
 80110ec:	ed87 6a01 	vstr	s12, [r7, #4]
 80110f0:	edc7 6a02 	vstr	s13, [r7, #8]
 80110f4:	ed87 7a03 	vstr	s14, [r7, #12]
 80110f8:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_scissor *cmd;
    NK_ASSERT(b);
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d105      	bne.n	801110e <nk_push_scissor+0x3a>
 8011102:	4b2d      	ldr	r3, [pc, #180]	; (80111b8 <nk_push_scissor+0xe4>)
 8011104:	4a2d      	ldr	r2, [pc, #180]	; (80111bc <nk_push_scissor+0xe8>)
 8011106:	2148      	movs	r1, #72	; 0x48
 8011108:	482d      	ldr	r0, [pc, #180]	; (80111c0 <nk_push_scissor+0xec>)
 801110a:	f00c fa41 	bl	801d590 <__assert_func>
    if (!b) return;
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d04b      	beq.n	80111ac <nk_push_scissor+0xd8>

    b->clip.x = r.x;
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	605a      	str	r2, [r3, #4]
    b->clip.y = r.y;
 801111a:	68ba      	ldr	r2, [r7, #8]
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	609a      	str	r2, [r3, #8]
    b->clip.w = r.w;
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	60da      	str	r2, [r3, #12]
    b->clip.h = r.h;
 8011126:	693a      	ldr	r2, [r7, #16]
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	611a      	str	r2, [r3, #16]
    cmd = (struct nk_command_scissor*)
        nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));
 801112c:	2210      	movs	r2, #16
 801112e:	2101      	movs	r1, #1
 8011130:	6978      	ldr	r0, [r7, #20]
 8011132:	f7ff ff69 	bl	8011008 <nk_command_buffer_push>
 8011136:	61f8      	str	r0, [r7, #28]

    if (!cmd) return;
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d038      	beq.n	80111b0 <nk_push_scissor+0xdc>
    cmd->x = (short)r.x;
 801113e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011146:	ee17 3a90 	vmov	r3, s15
 801114a:	b21a      	sxth	r2, r3
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8011150:	edd7 7a02 	vldr	s15, [r7, #8]
 8011154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011158:	ee17 3a90 	vmov	r3, s15
 801115c:	b21a      	sxth	r2, r3
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 8011162:	edd7 7a03 	vldr	s15, [r7, #12]
 8011166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116e:	dd07      	ble.n	8011180 <nk_push_scissor+0xac>
 8011170:	edd7 7a03 	vldr	s15, [r7, #12]
 8011174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011178:	ee17 3a90 	vmov	r3, s15
 801117c:	b29a      	uxth	r2, r3
 801117e:	e000      	b.n	8011182 <nk_push_scissor+0xae>
 8011180:	2200      	movs	r2, #0
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 8011186:	edd7 7a04 	vldr	s15, [r7, #16]
 801118a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011192:	dd07      	ble.n	80111a4 <nk_push_scissor+0xd0>
 8011194:	edd7 7a04 	vldr	s15, [r7, #16]
 8011198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801119c:	ee17 3a90 	vmov	r3, s15
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	e000      	b.n	80111a6 <nk_push_scissor+0xd2>
 80111a4:	2200      	movs	r2, #0
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	81da      	strh	r2, [r3, #14]
 80111aa:	e002      	b.n	80111b2 <nk_push_scissor+0xde>
    if (!b) return;
 80111ac:	bf00      	nop
 80111ae:	e000      	b.n	80111b2 <nk_push_scissor+0xde>
    if (!cmd) return;
 80111b0:	bf00      	nop
}
 80111b2:	3720      	adds	r7, #32
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	080212a8 	.word	0x080212a8
 80111bc:	08022f0c 	.word	0x08022f0c
 80111c0:	0802128c 	.word	0x0802128c

080111c4 <nk_stroke_rect>:
    cmd->color = col;
}
NK_API void
nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, float line_thickness, struct nk_color c)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b08a      	sub	sp, #40	; 0x28
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	61f8      	str	r0, [r7, #28]
 80111cc:	eeb0 6a40 	vmov.f32	s12, s0
 80111d0:	eef0 6a60 	vmov.f32	s13, s1
 80111d4:	eeb0 7a41 	vmov.f32	s14, s2
 80111d8:	eef0 7a61 	vmov.f32	s15, s3
 80111dc:	ed87 2a02 	vstr	s4, [r7, #8]
 80111e0:	edc7 2a01 	vstr	s5, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
 80111e6:	ed87 6a03 	vstr	s12, [r7, #12]
 80111ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80111ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80111f2:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect *cmd;
    NK_ASSERT(b);
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d105      	bne.n	8011208 <nk_stroke_rect+0x44>
 80111fc:	4b72      	ldr	r3, [pc, #456]	; (80113c8 <nk_stroke_rect+0x204>)
 80111fe:	4a73      	ldr	r2, [pc, #460]	; (80113cc <nk_stroke_rect+0x208>)
 8011200:	2185      	movs	r1, #133	; 0x85
 8011202:	4873      	ldr	r0, [pc, #460]	; (80113d0 <nk_stroke_rect+0x20c>)
 8011204:	f00c f9c4 	bl	801d590 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	2b00      	cmp	r3, #0
 801120c:	f000 80d4 	beq.w	80113b8 <nk_stroke_rect+0x1f4>
 8011210:	78fb      	ldrb	r3, [r7, #3]
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 80d0 	beq.w	80113b8 <nk_stroke_rect+0x1f4>
 8011218:	edd7 7a05 	vldr	s15, [r7, #20]
 801121c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011224:	f000 80c8 	beq.w	80113b8 <nk_stroke_rect+0x1f4>
 8011228:	edd7 7a06 	vldr	s15, [r7, #24]
 801122c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011234:	f000 80c0 	beq.w	80113b8 <nk_stroke_rect+0x1f4>
 8011238:	edd7 7a01 	vldr	s15, [r7, #4]
 801123c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011244:	f240 80b8 	bls.w	80113b8 <nk_stroke_rect+0x1f4>
    if (b->use_clipping) {
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	695b      	ldr	r3, [r3, #20]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d05e      	beq.n	801130e <nk_stroke_rect+0x14a>
        const struct nk_rect *clip = &b->clip;
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	3304      	adds	r3, #4
 8011254:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	ed93 7a00 	vldr	s14, [r3]
 801125c:	edd7 6a03 	vldr	s13, [r7, #12]
 8011260:	edd7 7a05 	vldr	s15, [r7, #20]
 8011264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011270:	bf4c      	ite	mi
 8011272:	2301      	movmi	r3, #1
 8011274:	2300      	movpl	r3, #0
 8011276:	b2db      	uxtb	r3, r3
 8011278:	f083 0301 	eor.w	r3, r3, #1
 801127c:	b2db      	uxtb	r3, r3
 801127e:	2b00      	cmp	r3, #0
 8011280:	f040 809c 	bne.w	80113bc <nk_stroke_rect+0x1f8>
 8011284:	ed97 7a03 	vldr	s14, [r7, #12]
 8011288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128a:	edd3 6a00 	vldr	s13, [r3]
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	edd3 7a02 	vldr	s15, [r3, #8]
 8011294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a0:	bf4c      	ite	mi
 80112a2:	2301      	movmi	r3, #1
 80112a4:	2300      	movpl	r3, #0
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	f083 0301 	eor.w	r3, r3, #1
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f040 8084 	bne.w	80113bc <nk_stroke_rect+0x1f8>
 80112b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80112ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80112be:	edd7 7a06 	vldr	s15, [r7, #24]
 80112c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ce:	bf4c      	ite	mi
 80112d0:	2301      	movmi	r3, #1
 80112d2:	2300      	movpl	r3, #0
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	f083 0301 	eor.w	r3, r3, #1
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d16d      	bne.n	80113bc <nk_stroke_rect+0x1f8>
 80112e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80112e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80112ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80112f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	bf4c      	ite	mi
 80112fe:	2301      	movmi	r3, #1
 8011300:	2300      	movpl	r3, #0
 8011302:	b2db      	uxtb	r3, r3
 8011304:	f083 0301 	eor.w	r3, r3, #1
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	d156      	bne.n	80113bc <nk_stroke_rect+0x1f8>
            clip->x, clip->y, clip->w, clip->h)) return;
    }
    cmd = (struct nk_command_rect*)
        nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));
 801130e:	2218      	movs	r2, #24
 8011310:	2104      	movs	r1, #4
 8011312:	69f8      	ldr	r0, [r7, #28]
 8011314:	f7ff fe78 	bl	8011008 <nk_command_buffer_push>
 8011318:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 801131a:	6a3b      	ldr	r3, [r7, #32]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d04f      	beq.n	80113c0 <nk_stroke_rect+0x1fc>
    cmd->rounding = (unsigned short)rounding;
 8011320:	edd7 7a02 	vldr	s15, [r7, #8]
 8011324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011328:	ee17 3a90 	vmov	r3, s15
 801132c:	b29a      	uxth	r2, r3
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	811a      	strh	r2, [r3, #8]
    cmd->line_thickness = (unsigned short)line_thickness;
 8011332:	edd7 7a01 	vldr	s15, [r7, #4]
 8011336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801133a:	ee17 3a90 	vmov	r3, s15
 801133e:	b29a      	uxth	r2, r3
 8011340:	6a3b      	ldr	r3, [r7, #32]
 8011342:	815a      	strh	r2, [r3, #10]
    cmd->x = (short)rect.x;
 8011344:	edd7 7a03 	vldr	s15, [r7, #12]
 8011348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801134c:	ee17 3a90 	vmov	r3, s15
 8011350:	b21a      	sxth	r2, r3
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	819a      	strh	r2, [r3, #12]
    cmd->y = (short)rect.y;
 8011356:	edd7 7a04 	vldr	s15, [r7, #16]
 801135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801135e:	ee17 3a90 	vmov	r3, s15
 8011362:	b21a      	sxth	r2, r3
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	81da      	strh	r2, [r3, #14]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011368:	edd7 7a05 	vldr	s15, [r7, #20]
 801136c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011374:	dd07      	ble.n	8011386 <nk_stroke_rect+0x1c2>
 8011376:	edd7 7a05 	vldr	s15, [r7, #20]
 801137a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801137e:	ee17 3a90 	vmov	r3, s15
 8011382:	b29a      	uxth	r2, r3
 8011384:	e000      	b.n	8011388 <nk_stroke_rect+0x1c4>
 8011386:	2200      	movs	r2, #0
 8011388:	6a3b      	ldr	r3, [r7, #32]
 801138a:	821a      	strh	r2, [r3, #16]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 801138c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011398:	dd07      	ble.n	80113aa <nk_stroke_rect+0x1e6>
 801139a:	edd7 7a06 	vldr	s15, [r7, #24]
 801139e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113a2:	ee17 3a90 	vmov	r3, s15
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	e000      	b.n	80113ac <nk_stroke_rect+0x1e8>
 80113aa:	2200      	movs	r2, #0
 80113ac:	6a3b      	ldr	r3, [r7, #32]
 80113ae:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 80113b0:	6a3b      	ldr	r3, [r7, #32]
 80113b2:	683a      	ldr	r2, [r7, #0]
 80113b4:	615a      	str	r2, [r3, #20]
 80113b6:	e004      	b.n	80113c2 <nk_stroke_rect+0x1fe>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 80113b8:	bf00      	nop
 80113ba:	e002      	b.n	80113c2 <nk_stroke_rect+0x1fe>
            clip->x, clip->y, clip->w, clip->h)) return;
 80113bc:	bf00      	nop
 80113be:	e000      	b.n	80113c2 <nk_stroke_rect+0x1fe>
    if (!cmd) return;
 80113c0:	bf00      	nop
}
 80113c2:	3728      	adds	r7, #40	; 0x28
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	080212a8 	.word	0x080212a8
 80113cc:	08022f1c 	.word	0x08022f1c
 80113d0:	0802128c 	.word	0x0802128c

080113d4 <nk_fill_rect>:
NK_API void
nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, struct nk_color c)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b08a      	sub	sp, #40	; 0x28
 80113d8:	af00      	add	r7, sp, #0
 80113da:	61f8      	str	r0, [r7, #28]
 80113dc:	eeb0 6a40 	vmov.f32	s12, s0
 80113e0:	eef0 6a60 	vmov.f32	s13, s1
 80113e4:	eeb0 7a41 	vmov.f32	s14, s2
 80113e8:	eef0 7a61 	vmov.f32	s15, s3
 80113ec:	ed87 2a02 	vstr	s4, [r7, #8]
 80113f0:	6079      	str	r1, [r7, #4]
 80113f2:	ed87 6a03 	vstr	s12, [r7, #12]
 80113f6:	edc7 6a04 	vstr	s13, [r7, #16]
 80113fa:	ed87 7a05 	vstr	s14, [r7, #20]
 80113fe:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect_filled *cmd;
    NK_ASSERT(b);
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d105      	bne.n	8011414 <nk_fill_rect+0x40>
 8011408:	4b6a      	ldr	r3, [pc, #424]	; (80115b4 <nk_fill_rect+0x1e0>)
 801140a:	4a6b      	ldr	r2, [pc, #428]	; (80115b8 <nk_fill_rect+0x1e4>)
 801140c:	219c      	movs	r1, #156	; 0x9c
 801140e:	486b      	ldr	r0, [pc, #428]	; (80115bc <nk_fill_rect+0x1e8>)
 8011410:	f00c f8be 	bl	801d590 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 80c4 	beq.w	80115a4 <nk_fill_rect+0x1d0>
 801141c:	79fb      	ldrb	r3, [r7, #7]
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 80c0 	beq.w	80115a4 <nk_fill_rect+0x1d0>
 8011424:	edd7 7a05 	vldr	s15, [r7, #20]
 8011428:	eef5 7a40 	vcmp.f32	s15, #0.0
 801142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011430:	f000 80b8 	beq.w	80115a4 <nk_fill_rect+0x1d0>
 8011434:	edd7 7a06 	vldr	s15, [r7, #24]
 8011438:	eef5 7a40 	vcmp.f32	s15, #0.0
 801143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011440:	f000 80b0 	beq.w	80115a4 <nk_fill_rect+0x1d0>
    if (b->use_clipping) {
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	695b      	ldr	r3, [r3, #20]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d05d      	beq.n	8011508 <nk_fill_rect+0x134>
        const struct nk_rect *clip = &b->clip;
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	3304      	adds	r3, #4
 8011450:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8011452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011454:	ed93 7a00 	vldr	s14, [r3]
 8011458:	edd7 6a03 	vldr	s13, [r7, #12]
 801145c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146c:	bf4c      	ite	mi
 801146e:	2301      	movmi	r3, #1
 8011470:	2300      	movpl	r3, #0
 8011472:	b2db      	uxtb	r3, r3
 8011474:	f083 0301 	eor.w	r3, r3, #1
 8011478:	b2db      	uxtb	r3, r3
 801147a:	2b00      	cmp	r3, #0
 801147c:	f040 8094 	bne.w	80115a8 <nk_fill_rect+0x1d4>
 8011480:	ed97 7a03 	vldr	s14, [r7, #12]
 8011484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011486:	edd3 6a00 	vldr	s13, [r3]
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801149c:	bf4c      	ite	mi
 801149e:	2301      	movmi	r3, #1
 80114a0:	2300      	movpl	r3, #0
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	f083 0301 	eor.w	r3, r3, #1
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d17c      	bne.n	80115a8 <nk_fill_rect+0x1d4>
 80114ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80114b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80114b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80114bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c8:	bf4c      	ite	mi
 80114ca:	2301      	movmi	r3, #1
 80114cc:	2300      	movpl	r3, #0
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	f083 0301 	eor.w	r3, r3, #1
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d166      	bne.n	80115a8 <nk_fill_rect+0x1d4>
 80114da:	ed97 7a04 	vldr	s14, [r7, #16]
 80114de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80114e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80114ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f6:	bf4c      	ite	mi
 80114f8:	2301      	movmi	r3, #1
 80114fa:	2300      	movpl	r3, #0
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	f083 0301 	eor.w	r3, r3, #1
 8011502:	b2db      	uxtb	r3, r3
 8011504:	2b00      	cmp	r3, #0
 8011506:	d14f      	bne.n	80115a8 <nk_fill_rect+0x1d4>
            clip->x, clip->y, clip->w, clip->h)) return;
    }

    cmd = (struct nk_command_rect_filled*)
        nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));
 8011508:	2218      	movs	r2, #24
 801150a:	2105      	movs	r1, #5
 801150c:	69f8      	ldr	r0, [r7, #28]
 801150e:	f7ff fd7b 	bl	8011008 <nk_command_buffer_push>
 8011512:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8011514:	6a3b      	ldr	r3, [r7, #32]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d048      	beq.n	80115ac <nk_fill_rect+0x1d8>
    cmd->rounding = (unsigned short)rounding;
 801151a:	edd7 7a02 	vldr	s15, [r7, #8]
 801151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011522:	ee17 3a90 	vmov	r3, s15
 8011526:	b29a      	uxth	r2, r3
 8011528:	6a3b      	ldr	r3, [r7, #32]
 801152a:	811a      	strh	r2, [r3, #8]
    cmd->x = (short)rect.x;
 801152c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011534:	ee17 3a90 	vmov	r3, s15
 8011538:	b21a      	sxth	r2, r3
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	815a      	strh	r2, [r3, #10]
    cmd->y = (short)rect.y;
 801153e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011546:	ee17 3a90 	vmov	r3, s15
 801154a:	b21a      	sxth	r2, r3
 801154c:	6a3b      	ldr	r3, [r7, #32]
 801154e:	819a      	strh	r2, [r3, #12]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011550:	edd7 7a05 	vldr	s15, [r7, #20]
 8011554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155c:	dd07      	ble.n	801156e <nk_fill_rect+0x19a>
 801155e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011566:	ee17 3a90 	vmov	r3, s15
 801156a:	b29a      	uxth	r2, r3
 801156c:	e000      	b.n	8011570 <nk_fill_rect+0x19c>
 801156e:	2200      	movs	r2, #0
 8011570:	6a3b      	ldr	r3, [r7, #32]
 8011572:	81da      	strh	r2, [r3, #14]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8011574:	edd7 7a06 	vldr	s15, [r7, #24]
 8011578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011580:	dd07      	ble.n	8011592 <nk_fill_rect+0x1be>
 8011582:	edd7 7a06 	vldr	s15, [r7, #24]
 8011586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801158a:	ee17 3a90 	vmov	r3, s15
 801158e:	b29a      	uxth	r2, r3
 8011590:	e000      	b.n	8011594 <nk_fill_rect+0x1c0>
 8011592:	2200      	movs	r2, #0
 8011594:	6a3b      	ldr	r3, [r7, #32]
 8011596:	821a      	strh	r2, [r3, #16]
    cmd->color = c;
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	3312      	adds	r3, #18
 801159c:	1d3a      	adds	r2, r7, #4
 801159e:	6810      	ldr	r0, [r2, #0]
 80115a0:	6018      	str	r0, [r3, #0]
 80115a2:	e004      	b.n	80115ae <nk_fill_rect+0x1da>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 80115a4:	bf00      	nop
 80115a6:	e002      	b.n	80115ae <nk_fill_rect+0x1da>
            clip->x, clip->y, clip->w, clip->h)) return;
 80115a8:	bf00      	nop
 80115aa:	e000      	b.n	80115ae <nk_fill_rect+0x1da>
    if (!cmd) return;
 80115ac:	bf00      	nop
}
 80115ae:	3728      	adds	r7, #40	; 0x28
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	080212a8 	.word	0x080212a8
 80115b8:	08022f2c 	.word	0x08022f2c
 80115bc:	0802128c 	.word	0x0802128c

080115c0 <nk_fill_circle>:
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
    cmd->color = c;
}
NK_API void
nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b088      	sub	sp, #32
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6178      	str	r0, [r7, #20]
 80115c8:	eeb0 6a40 	vmov.f32	s12, s0
 80115cc:	eef0 6a60 	vmov.f32	s13, s1
 80115d0:	eeb0 7a41 	vmov.f32	s14, s2
 80115d4:	eef0 7a61 	vmov.f32	s15, s3
 80115d8:	6039      	str	r1, [r7, #0]
 80115da:	ed87 6a01 	vstr	s12, [r7, #4]
 80115de:	edc7 6a02 	vstr	s13, [r7, #8]
 80115e2:	ed87 7a03 	vstr	s14, [r7, #12]
 80115e6:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_circle_filled *cmd;
    NK_ASSERT(b);
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d105      	bne.n	80115fc <nk_fill_circle+0x3c>
 80115f0:	4b65      	ldr	r3, [pc, #404]	; (8011788 <nk_fill_circle+0x1c8>)
 80115f2:	4a66      	ldr	r2, [pc, #408]	; (801178c <nk_fill_circle+0x1cc>)
 80115f4:	21e2      	movs	r1, #226	; 0xe2
 80115f6:	4866      	ldr	r0, [pc, #408]	; (8011790 <nk_fill_circle+0x1d0>)
 80115f8:	f00b ffca 	bl	801d590 <__assert_func>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 80b9 	beq.w	8011776 <nk_fill_circle+0x1b6>
 8011604:	78fb      	ldrb	r3, [r7, #3]
 8011606:	2b00      	cmp	r3, #0
 8011608:	f000 80b5 	beq.w	8011776 <nk_fill_circle+0x1b6>
 801160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011610:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011618:	f000 80ad 	beq.w	8011776 <nk_fill_circle+0x1b6>
 801161c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011628:	f000 80a5 	beq.w	8011776 <nk_fill_circle+0x1b6>
    if (b->use_clipping) {
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	695b      	ldr	r3, [r3, #20]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d05d      	beq.n	80116f0 <nk_fill_circle+0x130>
        const struct nk_rect *clip = &b->clip;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	3304      	adds	r3, #4
 8011638:	61fb      	str	r3, [r7, #28]
        if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	ed93 7a00 	vldr	s14, [r3]
 8011640:	edd7 6a01 	vldr	s13, [r7, #4]
 8011644:	edd7 7a03 	vldr	s15, [r7, #12]
 8011648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801164c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011654:	bf4c      	ite	mi
 8011656:	2301      	movmi	r3, #1
 8011658:	2300      	movpl	r3, #0
 801165a:	b2db      	uxtb	r3, r3
 801165c:	f083 0301 	eor.w	r3, r3, #1
 8011660:	b2db      	uxtb	r3, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	f040 8089 	bne.w	801177a <nk_fill_circle+0x1ba>
 8011668:	ed97 7a01 	vldr	s14, [r7, #4]
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	edd3 6a00 	vldr	s13, [r3]
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	edd3 7a02 	vldr	s15, [r3, #8]
 8011678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801167c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011684:	bf4c      	ite	mi
 8011686:	2301      	movmi	r3, #1
 8011688:	2300      	movpl	r3, #0
 801168a:	b2db      	uxtb	r3, r3
 801168c:	f083 0301 	eor.w	r3, r3, #1
 8011690:	b2db      	uxtb	r3, r3
 8011692:	2b00      	cmp	r3, #0
 8011694:	d171      	bne.n	801177a <nk_fill_circle+0x1ba>
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	ed93 7a01 	vldr	s14, [r3, #4]
 801169c:	edd7 6a02 	vldr	s13, [r7, #8]
 80116a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80116a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80116ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b0:	bf4c      	ite	mi
 80116b2:	2301      	movmi	r3, #1
 80116b4:	2300      	movpl	r3, #0
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	f083 0301 	eor.w	r3, r3, #1
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d15b      	bne.n	801177a <nk_fill_circle+0x1ba>
 80116c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80116d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80116da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116de:	bf4c      	ite	mi
 80116e0:	2301      	movmi	r3, #1
 80116e2:	2300      	movpl	r3, #0
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	f083 0301 	eor.w	r3, r3, #1
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d144      	bne.n	801177a <nk_fill_circle+0x1ba>
            return;
    }

    cmd = (struct nk_command_circle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));
 80116f0:	2214      	movs	r2, #20
 80116f2:	2108      	movs	r1, #8
 80116f4:	6978      	ldr	r0, [r7, #20]
 80116f6:	f7ff fc87 	bl	8011008 <nk_command_buffer_push>
 80116fa:	61b8      	str	r0, [r7, #24]
    if (!cmd) return;
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d03d      	beq.n	801177e <nk_fill_circle+0x1be>
    cmd->x = (short)r.x;
 8011702:	edd7 7a01 	vldr	s15, [r7, #4]
 8011706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801170a:	ee17 3a90 	vmov	r3, s15
 801170e:	b21a      	sxth	r2, r3
 8011710:	69bb      	ldr	r3, [r7, #24]
 8011712:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8011714:	edd7 7a02 	vldr	s15, [r7, #8]
 8011718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801171c:	ee17 3a90 	vmov	r3, s15
 8011720:	b21a      	sxth	r2, r3
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(r.w, 0);
 8011726:	edd7 7a03 	vldr	s15, [r7, #12]
 801172a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011732:	d501      	bpl.n	8011738 <nk_fill_circle+0x178>
 8011734:	2200      	movs	r2, #0
 8011736:	e006      	b.n	8011746 <nk_fill_circle+0x186>
 8011738:	edd7 7a03 	vldr	s15, [r7, #12]
 801173c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011740:	ee17 3a90 	vmov	r3, s15
 8011744:	b29a      	uxth	r2, r3
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
 801174a:	edd7 7a04 	vldr	s15, [r7, #16]
 801174e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011756:	d501      	bpl.n	801175c <nk_fill_circle+0x19c>
 8011758:	2200      	movs	r2, #0
 801175a:	e006      	b.n	801176a <nk_fill_circle+0x1aa>
 801175c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011764:	ee17 3a90 	vmov	r3, s15
 8011768:	b29a      	uxth	r2, r3
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	81da      	strh	r2, [r3, #14]
    cmd->color = c;
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	683a      	ldr	r2, [r7, #0]
 8011772:	611a      	str	r2, [r3, #16]
 8011774:	e004      	b.n	8011780 <nk_fill_circle+0x1c0>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8011776:	bf00      	nop
 8011778:	e002      	b.n	8011780 <nk_fill_circle+0x1c0>
            return;
 801177a:	bf00      	nop
 801177c:	e000      	b.n	8011780 <nk_fill_circle+0x1c0>
    if (!cmd) return;
 801177e:	bf00      	nop
}
 8011780:	3720      	adds	r7, #32
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	080212a8 	.word	0x080212a8
 801178c:	08022f3c 	.word	0x08022f3c
 8011790:	0802128c 	.word	0x0802128c

08011794 <nk_fill_triangle>:
    cmd->color = c;
}
NK_API void
nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,
    float y1, float x2, float y2, struct nk_color c)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b08a      	sub	sp, #40	; 0x28
 8011798:	af00      	add	r7, sp, #0
 801179a:	61f8      	str	r0, [r7, #28]
 801179c:	ed87 0a06 	vstr	s0, [r7, #24]
 80117a0:	edc7 0a05 	vstr	s1, [r7, #20]
 80117a4:	ed87 1a04 	vstr	s2, [r7, #16]
 80117a8:	edc7 1a03 	vstr	s3, [r7, #12]
 80117ac:	ed87 2a02 	vstr	s4, [r7, #8]
 80117b0:	edc7 2a01 	vstr	s5, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
    struct nk_command_triangle_filled *cmd;
    NK_ASSERT(b);
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d106      	bne.n	80117ca <nk_fill_triangle+0x36>
 80117bc:	4baf      	ldr	r3, [pc, #700]	; (8011a7c <nk_fill_triangle+0x2e8>)
 80117be:	4ab0      	ldr	r2, [pc, #704]	; (8011a80 <nk_fill_triangle+0x2ec>)
 80117c0:	f240 1135 	movw	r1, #309	; 0x135
 80117c4:	48af      	ldr	r0, [pc, #700]	; (8011a84 <nk_fill_triangle+0x2f0>)
 80117c6:	f00b fee3 	bl	801d590 <__assert_func>
    if (!b || c.a == 0) return;
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 814b 	beq.w	8011a68 <nk_fill_triangle+0x2d4>
 80117d2:	78fb      	ldrb	r3, [r7, #3]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f000 8147 	beq.w	8011a68 <nk_fill_triangle+0x2d4>
    if (!b) return;
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f000 8145 	beq.w	8011a6c <nk_fill_triangle+0x2d8>
    if (b->use_clipping) {
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	695b      	ldr	r3, [r3, #20]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 80fb 	beq.w	80119e2 <nk_fill_triangle+0x24e>
        const struct nk_rect *clip = &b->clip;
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	3304      	adds	r3, #4
 80117f0:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 80117f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f4:	edd3 7a00 	vldr	s15, [r3]
 80117f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80117fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011804:	bfac      	ite	ge
 8011806:	2301      	movge	r3, #1
 8011808:	2300      	movlt	r3, #0
 801180a:	b2db      	uxtb	r3, r3
 801180c:	f083 0301 	eor.w	r3, r3, #1
 8011810:	b2db      	uxtb	r3, r3
 8011812:	2b00      	cmp	r3, #0
 8011814:	d140      	bne.n	8011898 <nk_fill_triangle+0x104>
 8011816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011818:	ed93 7a00 	vldr	s14, [r3]
 801181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011826:	ed97 7a06 	vldr	s14, [r7, #24]
 801182a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011832:	bf4c      	ite	mi
 8011834:	2301      	movmi	r3, #1
 8011836:	2300      	movpl	r3, #0
 8011838:	b2db      	uxtb	r3, r3
 801183a:	f083 0301 	eor.w	r3, r3, #1
 801183e:	b2db      	uxtb	r3, r3
 8011840:	2b00      	cmp	r3, #0
 8011842:	d129      	bne.n	8011898 <nk_fill_triangle+0x104>
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	edd3 7a01 	vldr	s15, [r3, #4]
 801184a:	ed97 7a05 	vldr	s14, [r7, #20]
 801184e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011856:	bfac      	ite	ge
 8011858:	2301      	movge	r3, #1
 801185a:	2300      	movlt	r3, #0
 801185c:	b2db      	uxtb	r3, r3
 801185e:	f083 0301 	eor.w	r3, r3, #1
 8011862:	b2db      	uxtb	r3, r3
 8011864:	2b00      	cmp	r3, #0
 8011866:	d117      	bne.n	8011898 <nk_fill_triangle+0x104>
 8011868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186a:	ed93 7a01 	vldr	s14, [r3, #4]
 801186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011870:	edd3 7a03 	vldr	s15, [r3, #12]
 8011874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011878:	ed97 7a05 	vldr	s14, [r7, #20]
 801187c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011884:	bf4c      	ite	mi
 8011886:	2301      	movmi	r3, #1
 8011888:	2300      	movpl	r3, #0
 801188a:	b2db      	uxtb	r3, r3
 801188c:	f083 0301 	eor.w	r3, r3, #1
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b00      	cmp	r3, #0
 8011894:	f000 80a5 	beq.w	80119e2 <nk_fill_triangle+0x24e>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8011898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189a:	edd3 7a00 	vldr	s15, [r3]
 801189e:	ed97 7a04 	vldr	s14, [r7, #16]
 80118a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118aa:	bfac      	ite	ge
 80118ac:	2301      	movge	r3, #1
 80118ae:	2300      	movlt	r3, #0
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	f083 0301 	eor.w	r3, r3, #1
 80118b6:	b2db      	uxtb	r3, r3
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d13f      	bne.n	801193c <nk_fill_triangle+0x1a8>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 80118bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118be:	ed93 7a00 	vldr	s14, [r3]
 80118c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80118c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80118d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d8:	bf4c      	ite	mi
 80118da:	2301      	movmi	r3, #1
 80118dc:	2300      	movpl	r3, #0
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	f083 0301 	eor.w	r3, r3, #1
 80118e4:	b2db      	uxtb	r3, r3
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d128      	bne.n	801193c <nk_fill_triangle+0x1a8>
 80118ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80118f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80118f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fc:	bfac      	ite	ge
 80118fe:	2301      	movge	r3, #1
 8011900:	2300      	movlt	r3, #0
 8011902:	b2db      	uxtb	r3, r3
 8011904:	f083 0301 	eor.w	r3, r3, #1
 8011908:	b2db      	uxtb	r3, r3
 801190a:	2b00      	cmp	r3, #0
 801190c:	d116      	bne.n	801193c <nk_fill_triangle+0x1a8>
 801190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011910:	ed93 7a01 	vldr	s14, [r3, #4]
 8011914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011916:	edd3 7a03 	vldr	s15, [r3, #12]
 801191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801191e:	ed97 7a03 	vldr	s14, [r7, #12]
 8011922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192a:	bf4c      	ite	mi
 801192c:	2301      	movmi	r3, #1
 801192e:	2300      	movpl	r3, #0
 8011930:	b2db      	uxtb	r3, r3
 8011932:	f083 0301 	eor.w	r3, r3, #1
 8011936:	b2db      	uxtb	r3, r3
 8011938:	2b00      	cmp	r3, #0
 801193a:	d052      	beq.n	80119e2 <nk_fill_triangle+0x24e>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 801193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193e:	edd3 7a00 	vldr	s15, [r3]
 8011942:	ed97 7a02 	vldr	s14, [r7, #8]
 8011946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801194e:	bfac      	ite	ge
 8011950:	2301      	movge	r3, #1
 8011952:	2300      	movlt	r3, #0
 8011954:	b2db      	uxtb	r3, r3
 8011956:	f083 0301 	eor.w	r3, r3, #1
 801195a:	b2db      	uxtb	r3, r3
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 801195c:	2b00      	cmp	r3, #0
 801195e:	f040 8087 	bne.w	8011a70 <nk_fill_triangle+0x2dc>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 8011962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011964:	ed93 7a00 	vldr	s14, [r3]
 8011968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196a:	edd3 7a02 	vldr	s15, [r3, #8]
 801196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011972:	ed97 7a02 	vldr	s14, [r7, #8]
 8011976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197e:	bf4c      	ite	mi
 8011980:	2301      	movmi	r3, #1
 8011982:	2300      	movpl	r3, #0
 8011984:	b2db      	uxtb	r3, r3
 8011986:	f083 0301 	eor.w	r3, r3, #1
 801198a:	b2db      	uxtb	r3, r3
 801198c:	2b00      	cmp	r3, #0
 801198e:	d16f      	bne.n	8011a70 <nk_fill_triangle+0x2dc>
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	edd3 7a01 	vldr	s15, [r3, #4]
 8011996:	ed97 7a01 	vldr	s14, [r7, #4]
 801199a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a2:	bfac      	ite	ge
 80119a4:	2301      	movge	r3, #1
 80119a6:	2300      	movlt	r3, #0
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	f083 0301 	eor.w	r3, r3, #1
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d15d      	bne.n	8011a70 <nk_fill_triangle+0x2dc>
 80119b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80119c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80119c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d0:	bf4c      	ite	mi
 80119d2:	2301      	movmi	r3, #1
 80119d4:	2300      	movpl	r3, #0
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	f083 0301 	eor.w	r3, r3, #1
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d146      	bne.n	8011a70 <nk_fill_triangle+0x2dc>
            return;
    }

    cmd = (struct nk_command_triangle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));
 80119e2:	2218      	movs	r2, #24
 80119e4:	210c      	movs	r1, #12
 80119e6:	69f8      	ldr	r0, [r7, #28]
 80119e8:	f7ff fb0e 	bl	8011008 <nk_command_buffer_push>
 80119ec:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 80119ee:	6a3b      	ldr	r3, [r7, #32]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d03f      	beq.n	8011a74 <nk_fill_triangle+0x2e0>
    cmd->a.x = (short)x0;
 80119f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80119f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119fc:	ee17 3a90 	vmov	r3, s15
 8011a00:	b21a      	sxth	r2, r3
 8011a02:	6a3b      	ldr	r3, [r7, #32]
 8011a04:	811a      	strh	r2, [r3, #8]
    cmd->a.y = (short)y0;
 8011a06:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a0e:	ee17 3a90 	vmov	r3, s15
 8011a12:	b21a      	sxth	r2, r3
 8011a14:	6a3b      	ldr	r3, [r7, #32]
 8011a16:	815a      	strh	r2, [r3, #10]
    cmd->b.x = (short)x1;
 8011a18:	edd7 7a04 	vldr	s15, [r7, #16]
 8011a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a20:	ee17 3a90 	vmov	r3, s15
 8011a24:	b21a      	sxth	r2, r3
 8011a26:	6a3b      	ldr	r3, [r7, #32]
 8011a28:	819a      	strh	r2, [r3, #12]
    cmd->b.y = (short)y1;
 8011a2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8011a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a32:	ee17 3a90 	vmov	r3, s15
 8011a36:	b21a      	sxth	r2, r3
 8011a38:	6a3b      	ldr	r3, [r7, #32]
 8011a3a:	81da      	strh	r2, [r3, #14]
    cmd->c.x = (short)x2;
 8011a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8011a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a44:	ee17 3a90 	vmov	r3, s15
 8011a48:	b21a      	sxth	r2, r3
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	821a      	strh	r2, [r3, #16]
    cmd->c.y = (short)y2;
 8011a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a56:	ee17 3a90 	vmov	r3, s15
 8011a5a:	b21a      	sxth	r2, r3
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 8011a60:	6a3b      	ldr	r3, [r7, #32]
 8011a62:	683a      	ldr	r2, [r7, #0]
 8011a64:	615a      	str	r2, [r3, #20]
 8011a66:	e006      	b.n	8011a76 <nk_fill_triangle+0x2e2>
    if (!b || c.a == 0) return;
 8011a68:	bf00      	nop
 8011a6a:	e004      	b.n	8011a76 <nk_fill_triangle+0x2e2>
    if (!b) return;
 8011a6c:	bf00      	nop
 8011a6e:	e002      	b.n	8011a76 <nk_fill_triangle+0x2e2>
            return;
 8011a70:	bf00      	nop
 8011a72:	e000      	b.n	8011a76 <nk_fill_triangle+0x2e2>
    if (!cmd) return;
 8011a74:	bf00      	nop
}
 8011a76:	3728      	adds	r7, #40	; 0x28
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	080212a8 	.word	0x080212a8
 8011a80:	08022f4c 	.word	0x08022f4c
 8011a84:	0802128c 	.word	0x0802128c

08011a88 <nk_draw_image>:
    }
}
NK_API void
nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_image *img, struct nk_color col)
{
 8011a88:	b590      	push	{r4, r7, lr}
 8011a8a:	b08b      	sub	sp, #44	; 0x2c
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	61f8      	str	r0, [r7, #28]
 8011a90:	eeb0 6a40 	vmov.f32	s12, s0
 8011a94:	eef0 6a60 	vmov.f32	s13, s1
 8011a98:	eeb0 7a41 	vmov.f32	s14, s2
 8011a9c:	eef0 7a61 	vmov.f32	s15, s3
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
 8011aa4:	ed87 6a03 	vstr	s12, [r7, #12]
 8011aa8:	edc7 6a04 	vstr	s13, [r7, #16]
 8011aac:	ed87 7a05 	vstr	s14, [r7, #20]
 8011ab0:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_image *cmd;
    NK_ASSERT(b);
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d106      	bne.n	8011ac8 <nk_draw_image+0x40>
 8011aba:	4b69      	ldr	r3, [pc, #420]	; (8011c60 <nk_draw_image+0x1d8>)
 8011abc:	4a69      	ldr	r2, [pc, #420]	; (8011c64 <nk_draw_image+0x1dc>)
 8011abe:	f240 118f 	movw	r1, #399	; 0x18f
 8011ac2:	4869      	ldr	r0, [pc, #420]	; (8011c68 <nk_draw_image+0x1e0>)
 8011ac4:	f00b fd64 	bl	801d590 <__assert_func>
    if (!b) return;
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f000 80bf 	beq.w	8011c4e <nk_draw_image+0x1c6>
    if (b->use_clipping) {
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d06f      	beq.n	8011bb8 <nk_draw_image+0x130>
        const struct nk_rect *c = &b->clip;
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	3304      	adds	r3, #4
 8011adc:	627b      	str	r3, [r7, #36]	; 0x24
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	edd3 7a02 	vldr	s15, [r3, #8]
 8011ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aec:	f000 80b1 	beq.w	8011c52 <nk_draw_image+0x1ca>
 8011af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af2:	edd3 7a03 	vldr	s15, [r3, #12]
 8011af6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afe:	f000 80a8 	beq.w	8011c52 <nk_draw_image+0x1ca>
 8011b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b04:	ed93 7a00 	vldr	s14, [r3]
 8011b08:	edd7 6a03 	vldr	s13, [r7, #12]
 8011b0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b1c:	bf4c      	ite	mi
 8011b1e:	2301      	movmi	r3, #1
 8011b20:	2300      	movpl	r3, #0
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	f083 0301 	eor.w	r3, r3, #1
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	f040 8091 	bne.w	8011c52 <nk_draw_image+0x1ca>
 8011b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8011b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b36:	edd3 6a00 	vldr	s13, [r3]
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4c:	bf4c      	ite	mi
 8011b4e:	2301      	movmi	r3, #1
 8011b50:	2300      	movpl	r3, #0
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	f083 0301 	eor.w	r3, r3, #1
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d179      	bne.n	8011c52 <nk_draw_image+0x1ca>
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b60:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b64:	edd7 6a04 	vldr	s13, [r7, #16]
 8011b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b78:	bf4c      	ite	mi
 8011b7a:	2301      	movmi	r3, #1
 8011b7c:	2300      	movpl	r3, #0
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	f083 0301 	eor.w	r3, r3, #1
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d163      	bne.n	8011c52 <nk_draw_image+0x1ca>
 8011b8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	edd3 6a01 	vldr	s13, [r3, #4]
 8011b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b96:	edd3 7a03 	vldr	s15, [r3, #12]
 8011b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba6:	bf4c      	ite	mi
 8011ba8:	2301      	movmi	r3, #1
 8011baa:	2300      	movpl	r3, #0
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	f083 0301 	eor.w	r3, r3, #1
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d14c      	bne.n	8011c52 <nk_draw_image+0x1ca>
            return;
    }

    cmd = (struct nk_command_image*)
        nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));
 8011bb8:	2224      	movs	r2, #36	; 0x24
 8011bba:	2111      	movs	r1, #17
 8011bbc:	69f8      	ldr	r0, [r7, #28]
 8011bbe:	f7ff fa23 	bl	8011008 <nk_command_buffer_push>
 8011bc2:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d045      	beq.n	8011c56 <nk_draw_image+0x1ce>
    cmd->x = (short)r.x;
 8011bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8011bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bd2:	ee17 3a90 	vmov	r3, s15
 8011bd6:	b21a      	sxth	r2, r3
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8011bdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8011be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011be4:	ee17 3a90 	vmov	r3, s15
 8011be8:	b21a      	sxth	r2, r3
 8011bea:	6a3b      	ldr	r3, [r7, #32]
 8011bec:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 8011bee:	edd7 7a05 	vldr	s15, [r7, #20]
 8011bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfa:	dd07      	ble.n	8011c0c <nk_draw_image+0x184>
 8011bfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c04:	ee17 3a90 	vmov	r3, s15
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	e000      	b.n	8011c0e <nk_draw_image+0x186>
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	6a3b      	ldr	r3, [r7, #32]
 8011c10:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 8011c12:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	dd07      	ble.n	8011c30 <nk_draw_image+0x1a8>
 8011c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c28:	ee17 3a90 	vmov	r3, s15
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	e000      	b.n	8011c32 <nk_draw_image+0x1aa>
 8011c30:	2200      	movs	r2, #0
 8011c32:	6a3b      	ldr	r3, [r7, #32]
 8011c34:	81da      	strh	r2, [r3, #14]
    cmd->img = *img;
 8011c36:	6a3b      	ldr	r3, [r7, #32]
 8011c38:	68ba      	ldr	r2, [r7, #8]
 8011c3a:	f103 0410 	add.w	r4, r3, #16
 8011c3e:	4613      	mov	r3, r2
 8011c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cmd->col = col;
 8011c46:	6a3b      	ldr	r3, [r7, #32]
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	621a      	str	r2, [r3, #32]
 8011c4c:	e004      	b.n	8011c58 <nk_draw_image+0x1d0>
    if (!b) return;
 8011c4e:	bf00      	nop
 8011c50:	e002      	b.n	8011c58 <nk_draw_image+0x1d0>
            return;
 8011c52:	bf00      	nop
 8011c54:	e000      	b.n	8011c58 <nk_draw_image+0x1d0>
    if (!cmd) return;
 8011c56:	bf00      	nop
}
 8011c58:	372c      	adds	r7, #44	; 0x2c
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd90      	pop	{r4, r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	080212a8 	.word	0x080212a8
 8011c64:	08022f60 	.word	0x08022f60
 8011c68:	0802128c 	.word	0x0802128c

08011c6c <nk_draw_nine_slice>:
NK_API void
nk_draw_nine_slice(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_nine_slice *slc, struct nk_color col)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b0b4      	sub	sp, #208	; 0xd0
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	61f8      	str	r0, [r7, #28]
 8011c74:	eeb0 6a40 	vmov.f32	s12, s0
 8011c78:	eef0 6a60 	vmov.f32	s13, s1
 8011c7c:	eeb0 7a41 	vmov.f32	s14, s2
 8011c80:	eef0 7a61 	vmov.f32	s15, s3
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]
 8011c88:	ed87 6a03 	vstr	s12, [r7, #12]
 8011c8c:	edc7 6a04 	vstr	s13, [r7, #16]
 8011c90:	ed87 7a05 	vstr	s14, [r7, #20]
 8011c94:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_image img;
    const struct nk_image *slcimg = (const struct nk_image*)slc;
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    nk_ushort rgnX, rgnY, rgnW, rgnH;
    rgnX = slcimg->region[0];
 8011c9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011ca2:	891b      	ldrh	r3, [r3, #8]
 8011ca4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    rgnY = slcimg->region[1];
 8011ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011cac:	895b      	ldrh	r3, [r3, #10]
 8011cae:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    rgnW = slcimg->region[2];
 8011cb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011cb6:	899b      	ldrh	r3, [r3, #12]
 8011cb8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    rgnH = slcimg->region[3];
 8011cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011cc0:	89db      	ldrh	r3, [r3, #14]
 8011cc2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

    /* top-left */
    img.handle = slcimg->handle;
 8011cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	627b      	str	r3, [r7, #36]	; 0x24
    img.w = slcimg->w;
 8011cce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011cd2:	889b      	ldrh	r3, [r3, #4]
 8011cd4:	853b      	strh	r3, [r7, #40]	; 0x28
    img.h = slcimg->h;
 8011cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011cda:	88db      	ldrh	r3, [r3, #6]
 8011cdc:	857b      	strh	r3, [r7, #42]	; 0x2a
    img.region[0] = rgnX;
 8011cde:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011ce2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    img.region[1] = rgnY;
 8011ce4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011ce8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    img.region[2] = slc->l;
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	8a1b      	ldrh	r3, [r3, #16]
 8011cee:	863b      	strh	r3, [r7, #48]	; 0x30
    img.region[3] = slc->t;
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	8a5b      	ldrh	r3, [r3, #18]
 8011cf4:	867b      	strh	r3, [r7, #50]	; 0x32

    nk_draw_image(b,
 8011cf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8011cfa:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 8011d02:	ee06 3a90 	vmov	s13, r3
 8011d06:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8011d0e:	ee06 3a10 	vmov	s12, r3
 8011d12:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8011d16:	eef0 1a46 	vmov.f32	s3, s12
 8011d1a:	eeb0 1a66 	vmov.f32	s2, s13
 8011d1e:	eef0 0a47 	vmov.f32	s1, s14
 8011d22:	eeb0 0a67 	vmov.f32	s0, s15
 8011d26:	f002 f8b1 	bl	8013e8c <nk_rect>
 8011d2a:	eeb0 6a40 	vmov.f32	s12, s0
 8011d2e:	eef0 6a60 	vmov.f32	s13, s1
 8011d32:	eeb0 7a41 	vmov.f32	s14, s2
 8011d36:	eef0 7a61 	vmov.f32	s15, s3
 8011d3a:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 8011d3e:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8011d42:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8011d46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8011d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d4e:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8011d52:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8011d56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011d5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	4619      	mov	r1, r3
 8011d62:	eeb0 0a46 	vmov.f32	s0, s12
 8011d66:	eef0 0a66 	vmov.f32	s1, s13
 8011d6a:	eeb0 1a47 	vmov.f32	s2, s14
 8011d6e:	eef0 1a67 	vmov.f32	s3, s15
 8011d72:	69f8      	ldr	r0, [r7, #28]
 8011d74:	f7ff fe88 	bl	8011a88 <nk_draw_image>
        &img, col);

#define IMG_RGN(x, y, w, h) img.region[0] = (nk_ushort)(x); img.region[1] = (nk_ushort)(y); img.region[2] = (nk_ushort)(w); img.region[3] = (nk_ushort)(h);

    /* top-center */
    IMG_RGN(rgnX + slc->l, rgnY, rgnW - slc->l - slc->r, slc->t);
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	8a1a      	ldrh	r2, [r3, #16]
 8011d7c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011d80:	4413      	add	r3, r2
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011d86:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011d8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	8a1b      	ldrh	r3, [r3, #16]
 8011d90:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8011d94:	1ad3      	subs	r3, r2, r3
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	8a9b      	ldrh	r3, [r3, #20]
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	863b      	strh	r3, [r7, #48]	; 0x30
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	8a5b      	ldrh	r3, [r3, #18]
 8011da6:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8011da8:	ed97 7a03 	vldr	s14, [r7, #12]
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	8a1b      	ldrh	r3, [r3, #16]
 8011db0:	ee07 3a90 	vmov	s15, r3
 8011db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011db8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8011dbc:	ed97 6a04 	vldr	s12, [r7, #16]
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8011dc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	8a1b      	ldrh	r3, [r3, #16]
 8011dc8:	ee07 3a90 	vmov	s15, r3
 8011dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	8a9b      	ldrh	r3, [r3, #20]
 8011dd8:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8011ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011de0:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8011de8:	ee07 3a10 	vmov	s14, r3
 8011dec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011df0:	eef0 1a47 	vmov.f32	s3, s14
 8011df4:	eeb0 1a67 	vmov.f32	s2, s15
 8011df8:	eef0 0a46 	vmov.f32	s1, s12
 8011dfc:	eeb0 0a66 	vmov.f32	s0, s13
 8011e00:	f002 f844 	bl	8013e8c <nk_rect>
 8011e04:	eeb0 6a40 	vmov.f32	s12, s0
 8011e08:	eef0 6a60 	vmov.f32	s13, s1
 8011e0c:	eeb0 7a41 	vmov.f32	s14, s2
 8011e10:	eef0 7a61 	vmov.f32	s15, s3
 8011e14:	ed87 6a11 	vstr	s12, [r7, #68]	; 0x44
 8011e18:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8011e1c:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8011e20:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8011e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e28:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8011e2c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8011e30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011e34:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	4619      	mov	r1, r3
 8011e3c:	eeb0 0a46 	vmov.f32	s0, s12
 8011e40:	eef0 0a66 	vmov.f32	s1, s13
 8011e44:	eeb0 1a47 	vmov.f32	s2, s14
 8011e48:	eef0 1a67 	vmov.f32	s3, s15
 8011e4c:	69f8      	ldr	r0, [r7, #28]
 8011e4e:	f7ff fe1b 	bl	8011a88 <nk_draw_image>
        &img, col);

    /* top-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY, slc->r, slc->t);
 8011e52:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8011e56:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8011e5a:	4413      	add	r3, r2
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	8a9b      	ldrh	r3, [r3, #20]
 8011e62:	1ad3      	subs	r3, r2, r3
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011e68:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011e6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	8a9b      	ldrh	r3, [r3, #20]
 8011e72:	863b      	strh	r3, [r7, #48]	; 0x30
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	8a5b      	ldrh	r3, [r3, #18]
 8011e78:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8011e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8011e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	8a9b      	ldrh	r3, [r3, #20]
 8011e8a:	ee07 3a90 	vmov	s15, r3
 8011e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e96:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8011e9e:	ee06 3a90 	vmov	s13, r3
 8011ea2:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8011eaa:	ee06 3a10 	vmov	s12, r3
 8011eae:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8011eb2:	eef0 1a46 	vmov.f32	s3, s12
 8011eb6:	eeb0 1a66 	vmov.f32	s2, s13
 8011eba:	eef0 0a47 	vmov.f32	s1, s14
 8011ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8011ec2:	f001 ffe3 	bl	8013e8c <nk_rect>
 8011ec6:	eeb0 6a40 	vmov.f32	s12, s0
 8011eca:	eef0 6a60 	vmov.f32	s13, s1
 8011ece:	eeb0 7a41 	vmov.f32	s14, s2
 8011ed2:	eef0 7a61 	vmov.f32	s15, s3
 8011ed6:	ed87 6a15 	vstr	s12, [r7, #84]	; 0x54
 8011eda:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8011ede:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 8011ee2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8011ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011eea:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8011eee:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8011ef2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011ef6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	4619      	mov	r1, r3
 8011efe:	eeb0 0a46 	vmov.f32	s0, s12
 8011f02:	eef0 0a66 	vmov.f32	s1, s13
 8011f06:	eeb0 1a47 	vmov.f32	s2, s14
 8011f0a:	eef0 1a67 	vmov.f32	s3, s15
 8011f0e:	69f8      	ldr	r0, [r7, #28]
 8011f10:	f7ff fdba 	bl	8011a88 <nk_draw_image>
        &img, col);

    /* center-left */
    IMG_RGN(rgnX, rgnY + slc->t, slc->l, rgnH - slc->t - slc->b);
 8011f14:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011f18:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	8a5a      	ldrh	r2, [r3, #18]
 8011f1e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011f22:	4413      	add	r3, r2
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	8a1b      	ldrh	r3, [r3, #16]
 8011f2c:	863b      	strh	r3, [r7, #48]	; 0x30
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	8a5b      	ldrh	r3, [r3, #18]
 8011f32:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	b29a      	uxth	r2, r3
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	8adb      	ldrh	r3, [r3, #22]
 8011f3e:	1ad3      	subs	r3, r2, r3
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8011f44:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8011f48:	ed97 7a04 	vldr	s14, [r7, #16]
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	8a5b      	ldrh	r3, [r3, #18]
 8011f50:	ee07 3a90 	vmov	s15, r3
 8011f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011f58:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 8011f60:	ee07 3a90 	vmov	s15, r3
 8011f64:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8011f68:	ed97 7a06 	vldr	s14, [r7, #24]
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	8a5b      	ldrh	r3, [r3, #18]
 8011f70:	ee07 3a90 	vmov	s15, r3
 8011f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	8adb      	ldrh	r3, [r3, #22]
 8011f80:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8011f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f8c:	eef0 1a67 	vmov.f32	s3, s15
 8011f90:	eeb0 1a65 	vmov.f32	s2, s11
 8011f94:	eef0 0a46 	vmov.f32	s1, s12
 8011f98:	eeb0 0a66 	vmov.f32	s0, s13
 8011f9c:	f001 ff76 	bl	8013e8c <nk_rect>
 8011fa0:	eeb0 6a40 	vmov.f32	s12, s0
 8011fa4:	eef0 6a60 	vmov.f32	s13, s1
 8011fa8:	eeb0 7a41 	vmov.f32	s14, s2
 8011fac:	eef0 7a61 	vmov.f32	s15, s3
 8011fb0:	ed87 6a19 	vstr	s12, [r7, #100]	; 0x64
 8011fb4:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8011fb8:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8011fbc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8011fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fc4:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8011fc8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8011fcc:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8011fd0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	eeb0 0a46 	vmov.f32	s0, s12
 8011fdc:	eef0 0a66 	vmov.f32	s1, s13
 8011fe0:	eeb0 1a47 	vmov.f32	s2, s14
 8011fe4:	eef0 1a67 	vmov.f32	s3, s15
 8011fe8:	69f8      	ldr	r0, [r7, #28]
 8011fea:	f7ff fd4d 	bl	8011a88 <nk_draw_image>
        &img, col);

    /* center */
    IMG_RGN(rgnX + slc->l, rgnY + slc->t, rgnW - slc->l - slc->r, rgnH - slc->t - slc->b);
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	8a1a      	ldrh	r2, [r3, #16]
 8011ff2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011ff6:	4413      	add	r3, r2
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	8a5a      	ldrh	r2, [r3, #18]
 8012000:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012004:	4413      	add	r3, r2
 8012006:	b29b      	uxth	r3, r3
 8012008:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	8a1b      	ldrh	r3, [r3, #16]
 801200e:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	b29a      	uxth	r2, r3
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	8a9b      	ldrh	r3, [r3, #20]
 801201a:	1ad3      	subs	r3, r2, r3
 801201c:	b29b      	uxth	r3, r3
 801201e:	863b      	strh	r3, [r7, #48]	; 0x30
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	8a5b      	ldrh	r3, [r3, #18]
 8012024:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	b29a      	uxth	r2, r3
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	8adb      	ldrh	r3, [r3, #22]
 8012030:	1ad3      	subs	r3, r2, r3
 8012032:	b29b      	uxth	r3, r3
 8012034:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012036:	ed97 7a03 	vldr	s14, [r7, #12]
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	8a1b      	ldrh	r3, [r3, #16]
 801203e:	ee07 3a90 	vmov	s15, r3
 8012042:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012046:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801204a:	ed97 7a04 	vldr	s14, [r7, #16]
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	8a5b      	ldrh	r3, [r3, #18]
 8012052:	ee07 3a90 	vmov	s15, r3
 8012056:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801205a:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801205e:	ed97 7a05 	vldr	s14, [r7, #20]
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	8a1b      	ldrh	r3, [r3, #16]
 8012066:	ee07 3a90 	vmov	s15, r3
 801206a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801206e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	8a9b      	ldrh	r3, [r3, #20]
 8012076:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801207a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801207e:	ee77 5a67 	vsub.f32	s11, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012082:	ed97 7a06 	vldr	s14, [r7, #24]
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	8a5b      	ldrh	r3, [r3, #18]
 801208a:	ee07 3a90 	vmov	s15, r3
 801208e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012092:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	8adb      	ldrh	r3, [r3, #22]
 801209a:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801209e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120a6:	eef0 1a67 	vmov.f32	s3, s15
 80120aa:	eeb0 1a65 	vmov.f32	s2, s11
 80120ae:	eef0 0a46 	vmov.f32	s1, s12
 80120b2:	eeb0 0a66 	vmov.f32	s0, s13
 80120b6:	f001 fee9 	bl	8013e8c <nk_rect>
 80120ba:	eeb0 6a40 	vmov.f32	s12, s0
 80120be:	eef0 6a60 	vmov.f32	s13, s1
 80120c2:	eeb0 7a41 	vmov.f32	s14, s2
 80120c6:	eef0 7a61 	vmov.f32	s15, s3
 80120ca:	ed87 6a1d 	vstr	s12, [r7, #116]	; 0x74
 80120ce:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 80120d2:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 80120d6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 80120da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120de:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 80120e2:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80120e6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80120ea:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	4619      	mov	r1, r3
 80120f2:	eeb0 0a46 	vmov.f32	s0, s12
 80120f6:	eef0 0a66 	vmov.f32	s1, s13
 80120fa:	eeb0 1a47 	vmov.f32	s2, s14
 80120fe:	eef0 1a67 	vmov.f32	s3, s15
 8012102:	69f8      	ldr	r0, [r7, #28]
 8012104:	f7ff fcc0 	bl	8011a88 <nk_draw_image>
        &img, col);

    /* center-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + slc->t, slc->r, rgnH - slc->t - slc->b);
 8012108:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 801210c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8012110:	4413      	add	r3, r2
 8012112:	b29a      	uxth	r2, r3
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	8a9b      	ldrh	r3, [r3, #20]
 8012118:	1ad3      	subs	r3, r2, r3
 801211a:	b29b      	uxth	r3, r3
 801211c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	8a5a      	ldrh	r2, [r3, #18]
 8012122:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012126:	4413      	add	r3, r2
 8012128:	b29b      	uxth	r3, r3
 801212a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	8a9b      	ldrh	r3, [r3, #20]
 8012130:	863b      	strh	r3, [r7, #48]	; 0x30
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	8a5b      	ldrh	r3, [r3, #18]
 8012136:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	b29a      	uxth	r2, r3
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	8adb      	ldrh	r3, [r3, #22]
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	b29b      	uxth	r3, r3
 8012146:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012148:	ed97 7a03 	vldr	s14, [r7, #12]
 801214c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	8a9b      	ldrh	r3, [r3, #20]
 8012158:	ee07 3a90 	vmov	s15, r3
 801215c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012160:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012164:	ed97 7a04 	vldr	s14, [r7, #16]
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	8a5b      	ldrh	r3, [r3, #18]
 801216c:	ee07 3a90 	vmov	s15, r3
 8012170:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012174:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 801217c:	ee07 3a90 	vmov	s15, r3
 8012180:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012184:	ed97 7a06 	vldr	s14, [r7, #24]
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	8a5b      	ldrh	r3, [r3, #18]
 801218c:	ee07 3a90 	vmov	s15, r3
 8012190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012194:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	8adb      	ldrh	r3, [r3, #22]
 801219c:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80121a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121a8:	eef0 1a67 	vmov.f32	s3, s15
 80121ac:	eeb0 1a65 	vmov.f32	s2, s11
 80121b0:	eef0 0a46 	vmov.f32	s1, s12
 80121b4:	eeb0 0a66 	vmov.f32	s0, s13
 80121b8:	f001 fe68 	bl	8013e8c <nk_rect>
 80121bc:	eeb0 6a40 	vmov.f32	s12, s0
 80121c0:	eef0 6a60 	vmov.f32	s13, s1
 80121c4:	eeb0 7a41 	vmov.f32	s14, s2
 80121c8:	eef0 7a61 	vmov.f32	s15, s3
 80121cc:	ed87 6a21 	vstr	s12, [r7, #132]	; 0x84
 80121d0:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 80121d4:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 80121d8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 80121dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80121e0:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 80121e4:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80121e8:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80121ec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	4619      	mov	r1, r3
 80121f4:	eeb0 0a46 	vmov.f32	s0, s12
 80121f8:	eef0 0a66 	vmov.f32	s1, s13
 80121fc:	eeb0 1a47 	vmov.f32	s2, s14
 8012200:	eef0 1a67 	vmov.f32	s3, s15
 8012204:	69f8      	ldr	r0, [r7, #28]
 8012206:	f7ff fc3f 	bl	8011a88 <nk_draw_image>
        &img, col);

    /* bottom-left */
    IMG_RGN(rgnX, rgnY + rgnH - slc->b, slc->l, slc->b);
 801220a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801220e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012210:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8012214:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8012218:	4413      	add	r3, r2
 801221a:	b29a      	uxth	r2, r3
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	8adb      	ldrh	r3, [r3, #22]
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	b29b      	uxth	r3, r3
 8012224:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	8a1b      	ldrh	r3, [r3, #16]
 801222a:	863b      	strh	r3, [r7, #48]	; 0x30
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	8adb      	ldrh	r3, [r3, #22]
 8012230:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8012232:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8012236:	ed97 7a04 	vldr	s14, [r7, #16]
 801223a:	edd7 7a06 	vldr	s15, [r7, #24]
 801223e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	8adb      	ldrh	r3, [r3, #22]
 8012246:	ee07 3a90 	vmov	s15, r3
 801224a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801224e:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 8012256:	ee07 3a10 	vmov	s14, r3
 801225a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012262:	ee06 3a10 	vmov	s12, r3
 8012266:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801226a:	eef0 1a46 	vmov.f32	s3, s12
 801226e:	eeb0 1a47 	vmov.f32	s2, s14
 8012272:	eef0 0a67 	vmov.f32	s1, s15
 8012276:	eeb0 0a66 	vmov.f32	s0, s13
 801227a:	f001 fe07 	bl	8013e8c <nk_rect>
 801227e:	eeb0 6a40 	vmov.f32	s12, s0
 8012282:	eef0 6a60 	vmov.f32	s13, s1
 8012286:	eeb0 7a41 	vmov.f32	s14, s2
 801228a:	eef0 7a61 	vmov.f32	s15, s3
 801228e:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 8012292:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 8012296:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 801229a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 801229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122a2:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80122a6:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80122aa:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80122ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80122b2:	687a      	ldr	r2, [r7, #4]
 80122b4:	4619      	mov	r1, r3
 80122b6:	eeb0 0a46 	vmov.f32	s0, s12
 80122ba:	eef0 0a66 	vmov.f32	s1, s13
 80122be:	eeb0 1a47 	vmov.f32	s2, s14
 80122c2:	eef0 1a67 	vmov.f32	s3, s15
 80122c6:	69f8      	ldr	r0, [r7, #28]
 80122c8:	f7ff fbde 	bl	8011a88 <nk_draw_image>
        &img, col);

    /* bottom-center */
    IMG_RGN(rgnX + slc->l, rgnY + rgnH - slc->b, rgnW - slc->l - slc->r, slc->b);
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	8a1a      	ldrh	r2, [r3, #16]
 80122d0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80122d4:	4413      	add	r3, r2
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80122da:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80122de:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80122e2:	4413      	add	r3, r2
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	8adb      	ldrh	r3, [r3, #22]
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	8a1b      	ldrh	r3, [r3, #16]
 80122f4:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	8a9b      	ldrh	r3, [r3, #20]
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	b29b      	uxth	r3, r3
 8012304:	863b      	strh	r3, [r7, #48]	; 0x30
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	8adb      	ldrh	r3, [r3, #22]
 801230a:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 801230c:	ed97 7a03 	vldr	s14, [r7, #12]
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	8a1b      	ldrh	r3, [r3, #16]
 8012314:	ee07 3a90 	vmov	s15, r3
 8012318:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801231c:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012320:	ed97 7a04 	vldr	s14, [r7, #16]
 8012324:	edd7 7a06 	vldr	s15, [r7, #24]
 8012328:	ee37 7a27 	vadd.f32	s14, s14, s15
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	8adb      	ldrh	r3, [r3, #22]
 8012330:	ee07 3a90 	vmov	s15, r3
 8012334:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012338:	ee37 6a67 	vsub.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 801233c:	ed97 7a05 	vldr	s14, [r7, #20]
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	8a1b      	ldrh	r3, [r3, #16]
 8012344:	ee07 3a90 	vmov	s15, r3
 8012348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801234c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	8a9b      	ldrh	r3, [r3, #20]
 8012354:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801235c:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012364:	ee07 3a10 	vmov	s14, r3
 8012368:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801236c:	eef0 1a47 	vmov.f32	s3, s14
 8012370:	eeb0 1a67 	vmov.f32	s2, s15
 8012374:	eef0 0a46 	vmov.f32	s1, s12
 8012378:	eeb0 0a66 	vmov.f32	s0, s13
 801237c:	f001 fd86 	bl	8013e8c <nk_rect>
 8012380:	eeb0 6a40 	vmov.f32	s12, s0
 8012384:	eef0 6a60 	vmov.f32	s13, s1
 8012388:	eeb0 7a41 	vmov.f32	s14, s2
 801238c:	eef0 7a61 	vmov.f32	s15, s3
 8012390:	ed87 6a29 	vstr	s12, [r7, #164]	; 0xa4
 8012394:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 8012398:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 801239c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 80123a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123a4:	ed97 6a29 	vldr	s12, [r7, #164]	; 0xa4
 80123a8:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80123ac:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80123b0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	4619      	mov	r1, r3
 80123b8:	eeb0 0a46 	vmov.f32	s0, s12
 80123bc:	eef0 0a66 	vmov.f32	s1, s13
 80123c0:	eeb0 1a47 	vmov.f32	s2, s14
 80123c4:	eef0 1a67 	vmov.f32	s3, s15
 80123c8:	69f8      	ldr	r0, [r7, #28]
 80123ca:	f7ff fb5d 	bl	8011a88 <nk_draw_image>
        &img, col);

    /* bottom-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + rgnH - slc->b, slc->r, slc->b);
 80123ce:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80123d2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80123d6:	4413      	add	r3, r2
 80123d8:	b29a      	uxth	r2, r3
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	8a9b      	ldrh	r3, [r3, #20]
 80123de:	1ad3      	subs	r3, r2, r3
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80123e4:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80123e8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80123ec:	4413      	add	r3, r2
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	8adb      	ldrh	r3, [r3, #22]
 80123f4:	1ad3      	subs	r3, r2, r3
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	8a9b      	ldrh	r3, [r3, #20]
 80123fe:	863b      	strh	r3, [r7, #48]	; 0x30
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	8adb      	ldrh	r3, [r3, #22]
 8012404:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012406:	ed97 7a03 	vldr	s14, [r7, #12]
 801240a:	edd7 7a05 	vldr	s15, [r7, #20]
 801240e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	8a9b      	ldrh	r3, [r3, #20]
 8012416:	ee07 3a90 	vmov	s15, r3
 801241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801241e:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012422:	ed97 7a04 	vldr	s14, [r7, #16]
 8012426:	edd7 7a06 	vldr	s15, [r7, #24]
 801242a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	8adb      	ldrh	r3, [r3, #22]
 8012432:	ee07 3a90 	vmov	s15, r3
 8012436:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801243a:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8012442:	ee07 3a10 	vmov	s14, r3
 8012446:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 801244e:	ee06 3a10 	vmov	s12, r3
 8012452:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012456:	eef0 1a46 	vmov.f32	s3, s12
 801245a:	eeb0 1a47 	vmov.f32	s2, s14
 801245e:	eef0 0a67 	vmov.f32	s1, s15
 8012462:	eeb0 0a66 	vmov.f32	s0, s13
 8012466:	f001 fd11 	bl	8013e8c <nk_rect>
 801246a:	eeb0 6a40 	vmov.f32	s12, s0
 801246e:	eef0 6a60 	vmov.f32	s13, s1
 8012472:	eeb0 7a41 	vmov.f32	s14, s2
 8012476:	eef0 7a61 	vmov.f32	s15, s3
 801247a:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 801247e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8012482:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8012486:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 801248a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801248e:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8012492:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8012496:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 801249a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	4619      	mov	r1, r3
 80124a2:	eeb0 0a46 	vmov.f32	s0, s12
 80124a6:	eef0 0a66 	vmov.f32	s1, s13
 80124aa:	eeb0 1a47 	vmov.f32	s2, s14
 80124ae:	eef0 1a67 	vmov.f32	s3, s15
 80124b2:	69f8      	ldr	r0, [r7, #28]
 80124b4:	f7ff fae8 	bl	8011a88 <nk_draw_image>
        &img, col);

#undef IMG_RGN
}
 80124b8:	bf00      	nop
 80124ba:	37d0      	adds	r7, #208	; 0xd0
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <nk_draw_text>:
}
NK_API void
nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,
    const char *string, int length, const struct nk_user_font *font,
    struct nk_color bg, struct nk_color fg)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b092      	sub	sp, #72	; 0x48
 80124c4:	af04      	add	r7, sp, #16
 80124c6:	61f8      	str	r0, [r7, #28]
 80124c8:	eeb0 6a40 	vmov.f32	s12, s0
 80124cc:	eef0 6a60 	vmov.f32	s13, s1
 80124d0:	eeb0 7a41 	vmov.f32	s14, s2
 80124d4:	eef0 7a61 	vmov.f32	s15, s3
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
 80124dc:	603b      	str	r3, [r7, #0]
 80124de:	ed87 6a03 	vstr	s12, [r7, #12]
 80124e2:	edc7 6a04 	vstr	s13, [r7, #16]
 80124e6:	ed87 7a05 	vstr	s14, [r7, #20]
 80124ea:	edc7 7a06 	vstr	s15, [r7, #24]
    float text_width = 0;
 80124ee:	f04f 0300 	mov.w	r3, #0
 80124f2:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command_text *cmd;

    NK_ASSERT(b);
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d106      	bne.n	8012508 <nk_draw_text+0x48>
 80124fa:	4b93      	ldr	r3, [pc, #588]	; (8012748 <nk_draw_text+0x288>)
 80124fc:	4a93      	ldr	r2, [pc, #588]	; (801274c <nk_draw_text+0x28c>)
 80124fe:	f240 210d 	movw	r1, #525	; 0x20d
 8012502:	4893      	ldr	r0, [pc, #588]	; (8012750 <nk_draw_text+0x290>)
 8012504:	f00b f844 	bl	801d590 <__assert_func>
    NK_ASSERT(font);
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d106      	bne.n	801251c <nk_draw_text+0x5c>
 801250e:	4b91      	ldr	r3, [pc, #580]	; (8012754 <nk_draw_text+0x294>)
 8012510:	4a8e      	ldr	r2, [pc, #568]	; (801274c <nk_draw_text+0x28c>)
 8012512:	f240 210e 	movw	r1, #526	; 0x20e
 8012516:	488e      	ldr	r0, [pc, #568]	; (8012750 <nk_draw_text+0x290>)
 8012518:	f00b f83a 	bl	801d590 <__assert_func>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	2b00      	cmp	r3, #0
 8012520:	f000 8107 	beq.w	8012732 <nk_draw_text+0x272>
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2b00      	cmp	r3, #0
 8012528:	f000 8103 	beq.w	8012732 <nk_draw_text+0x272>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	f000 80ff 	beq.w	8012732 <nk_draw_text+0x272>
 8012534:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012538:	2b00      	cmp	r3, #0
 801253a:	d104      	bne.n	8012546 <nk_draw_text+0x86>
 801253c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012540:	2b00      	cmp	r3, #0
 8012542:	f000 80f6 	beq.w	8012732 <nk_draw_text+0x272>
    if (b->use_clipping) {
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d072      	beq.n	8012634 <nk_draw_text+0x174>
        const struct nk_rect *c = &b->clip;
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	3304      	adds	r3, #4
 8012552:	633b      	str	r3, [r7, #48]	; 0x30
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 8012554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012556:	edd3 7a02 	vldr	s15, [r3, #8]
 801255a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012562:	f000 80e8 	beq.w	8012736 <nk_draw_text+0x276>
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	edd3 7a03 	vldr	s15, [r3, #12]
 801256c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012574:	f000 80df 	beq.w	8012736 <nk_draw_text+0x276>
 8012578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257a:	ed93 7a00 	vldr	s14, [r3]
 801257e:	edd7 6a03 	vldr	s13, [r7, #12]
 8012582:	edd7 7a05 	vldr	s15, [r7, #20]
 8012586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801258a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012592:	bf4c      	ite	mi
 8012594:	2301      	movmi	r3, #1
 8012596:	2300      	movpl	r3, #0
 8012598:	b2db      	uxtb	r3, r3
 801259a:	f083 0301 	eor.w	r3, r3, #1
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f040 80c8 	bne.w	8012736 <nk_draw_text+0x276>
 80125a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80125aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ac:	edd3 6a00 	vldr	s13, [r3]
 80125b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80125b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c2:	bf4c      	ite	mi
 80125c4:	2301      	movmi	r3, #1
 80125c6:	2300      	movpl	r3, #0
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	f083 0301 	eor.w	r3, r3, #1
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	f040 80b0 	bne.w	8012736 <nk_draw_text+0x276>
 80125d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80125dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80125e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80125e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f0:	bf4c      	ite	mi
 80125f2:	2301      	movmi	r3, #1
 80125f4:	2300      	movpl	r3, #0
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	f083 0301 	eor.w	r3, r3, #1
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f040 8099 	bne.w	8012736 <nk_draw_text+0x276>
 8012604:	ed97 7a04 	vldr	s14, [r7, #16]
 8012608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260a:	edd3 6a01 	vldr	s13, [r3, #4]
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	edd3 7a03 	vldr	s15, [r3, #12]
 8012614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012620:	bf4c      	ite	mi
 8012622:	2301      	movmi	r3, #1
 8012624:	2300      	movpl	r3, #0
 8012626:	b2db      	uxtb	r3, r3
 8012628:	f083 0301 	eor.w	r3, r3, #1
 801262c:	b2db      	uxtb	r3, r3
 801262e:	2b00      	cmp	r3, #0
 8012630:	f040 8081 	bne.w	8012736 <nk_draw_text+0x276>
            return;
    }

    /* make sure text fits inside bounds */
    text_width = font->width(font->userdata, font->height, string, length);
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	683a      	ldr	r2, [r7, #0]
 801263a:	edd2 7a01 	vldr	s15, [r2, #4]
 801263e:	6838      	ldr	r0, [r7, #0]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	68b9      	ldr	r1, [r7, #8]
 8012644:	eeb0 0a67 	vmov.f32	s0, s15
 8012648:	6800      	ldr	r0, [r0, #0]
 801264a:	4798      	blx	r3
 801264c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    if (text_width > r.w){
 8012650:	edd7 7a05 	vldr	s15, [r7, #20]
 8012654:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012660:	dd17      	ble.n	8012692 <nk_draw_text+0x1d2>
        int glyphs = 0;
 8012662:	2300      	movs	r3, #0
 8012664:	62bb      	str	r3, [r7, #40]	; 0x28
        float txt_width = (float)text_width;
 8012666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012668:	627b      	str	r3, [r7, #36]	; 0x24
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
 801266a:	edd7 7a05 	vldr	s15, [r7, #20]
 801266e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012672:	2300      	movs	r3, #0
 8012674:	9302      	str	r3, [sp, #8]
 8012676:	2300      	movs	r3, #0
 8012678:	9301      	str	r3, [sp, #4]
 801267a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	4613      	mov	r3, r2
 8012682:	eeb0 0a67 	vmov.f32	s0, s15
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	68b9      	ldr	r1, [r7, #8]
 801268a:	6838      	ldr	r0, [r7, #0]
 801268c:	f009 fbf4 	bl	801be78 <nk_text_clamp>
 8012690:	6078      	str	r0, [r7, #4]
    }

    if (!length) return;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d050      	beq.n	801273a <nk_draw_text+0x27a>
    cmd = (struct nk_command_text*)
        nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	3329      	adds	r3, #41	; 0x29
 801269c:	461a      	mov	r2, r3
 801269e:	2110      	movs	r1, #16
 80126a0:	69f8      	ldr	r0, [r7, #28]
 80126a2:	f7fe fcb1 	bl	8011008 <nk_command_buffer_push>
 80126a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (!cmd) return;
 80126a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d047      	beq.n	801273e <nk_draw_text+0x27e>
    cmd->x = (short)r.x;
 80126ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80126b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126b6:	ee17 3a90 	vmov	r3, s15
 80126ba:	b21a      	sxth	r2, r3
 80126bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126be:	829a      	strh	r2, [r3, #20]
    cmd->y = (short)r.y;
 80126c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80126c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126c8:	ee17 3a90 	vmov	r3, s15
 80126cc:	b21a      	sxth	r2, r3
 80126ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d0:	82da      	strh	r2, [r3, #22]
    cmd->w = (unsigned short)r.w;
 80126d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80126d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126da:	ee17 3a90 	vmov	r3, s15
 80126de:	b29a      	uxth	r2, r3
 80126e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e2:	831a      	strh	r2, [r3, #24]
    cmd->h = (unsigned short)r.h;
 80126e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80126e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126ec:	ee17 3a90 	vmov	r3, s15
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f4:	835a      	strh	r2, [r3, #26]
    cmd->background = bg;
 80126f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126fa:	60da      	str	r2, [r3, #12]
    cmd->foreground = fg;
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012700:	611a      	str	r2, [r3, #16]
    cmd->font = font;
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	683a      	ldr	r2, [r7, #0]
 8012706:	609a      	str	r2, [r3, #8]
    cmd->length = length;
 8012708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	621a      	str	r2, [r3, #32]
    cmd->height = font->height;
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	685a      	ldr	r2, [r3, #4]
 8012712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012714:	61da      	str	r2, [r3, #28]
    NK_MEMCPY(cmd->string, string, (nk_size)length);
 8012716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012718:	3324      	adds	r3, #36	; 0x24
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	68b9      	ldr	r1, [r7, #8]
 801271e:	4618      	mov	r0, r3
 8012720:	f009 f8ee 	bl	801b900 <nk_memcopy>
    cmd->string[length] = '\0';
 8012724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4413      	add	r3, r2
 801272a:	3324      	adds	r3, #36	; 0x24
 801272c:	2200      	movs	r2, #0
 801272e:	701a      	strb	r2, [r3, #0]
 8012730:	e006      	b.n	8012740 <nk_draw_text+0x280>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8012732:	bf00      	nop
 8012734:	e004      	b.n	8012740 <nk_draw_text+0x280>
            return;
 8012736:	bf00      	nop
 8012738:	e002      	b.n	8012740 <nk_draw_text+0x280>
    if (!length) return;
 801273a:	bf00      	nop
 801273c:	e000      	b.n	8012740 <nk_draw_text+0x280>
    if (!cmd) return;
 801273e:	bf00      	nop
}
 8012740:	3738      	adds	r7, #56	; 0x38
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	080212a8 	.word	0x080212a8
 801274c:	08022f70 	.word	0x08022f70
 8012750:	0802128c 	.word	0x0802128c
 8012754:	080212b4 	.word	0x080212b4

08012758 <nk_handle_ptr>:
 *                          IMAGE
 *
 * ===============================================================*/
NK_API nk_handle
nk_handle_ptr(void *ptr)
{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
    nk_handle handle = {0};
 8012760:	2300      	movs	r3, #0
 8012762:	60fb      	str	r3, [r7, #12]
    handle.ptr = ptr;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	60fb      	str	r3, [r7, #12]
    return handle;
 8012768:	68fb      	ldr	r3, [r7, #12]
}
 801276a:	4618      	mov	r0, r3
 801276c:	3714      	adds	r7, #20
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr
	...

08012778 <nk_input_begin>:
 *                          INPUT
 *
 * ===============================================================*/
NK_API void
nk_input_begin(struct nk_context *ctx)
{
 8012778:	b590      	push	{r4, r7, lr}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
    int i;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d105      	bne.n	8012792 <nk_input_begin+0x1a>
 8012786:	4b2c      	ldr	r3, [pc, #176]	; (8012838 <nk_input_begin+0xc0>)
 8012788:	4a2c      	ldr	r2, [pc, #176]	; (801283c <nk_input_begin+0xc4>)
 801278a:	210e      	movs	r1, #14
 801278c:	482c      	ldr	r0, [pc, #176]	; (8012840 <nk_input_begin+0xc8>)
 801278e:	f00a feff 	bl	801d590 <__assert_func>
    if (!ctx) return;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d04b      	beq.n	8012830 <nk_input_begin+0xb8>
    in = &ctx->input;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 801279c:	2300      	movs	r3, #0
 801279e:	60fb      	str	r3, [r7, #12]
 80127a0:	e00a      	b.n	80127b8 <nk_input_begin+0x40>
        in->mouse.buttons[i].clicked = 0;
 80127a2:	68ba      	ldr	r2, [r7, #8]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	3310      	adds	r3, #16
 80127a8:	011b      	lsls	r3, r3, #4
 80127aa:	4413      	add	r3, r2
 80127ac:	3308      	adds	r3, #8
 80127ae:	2200      	movs	r2, #0
 80127b0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	3301      	adds	r3, #1
 80127b6:	60fb      	str	r3, [r7, #12]
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2b03      	cmp	r3, #3
 80127bc:	ddf1      	ble.n	80127a2 <nk_input_begin+0x2a>

    in->keyboard.text_len = 0;
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	2200      	movs	r2, #0
 80127c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    in->mouse.scroll_delta = nk_vec2(0,0);
 80127c6:	68bc      	ldr	r4, [r7, #8]
 80127c8:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8012844 <nk_input_begin+0xcc>
 80127cc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012844 <nk_input_begin+0xcc>
 80127d0:	f001 fc0e 	bl	8013ff0 <nk_vec2>
 80127d4:	eeb0 7a40 	vmov.f32	s14, s0
 80127d8:	eef0 7a60 	vmov.f32	s15, s1
 80127dc:	ed84 7a57 	vstr	s14, [r4, #348]	; 0x15c
 80127e0:	edc4 7a58 	vstr	s15, [r4, #352]	; 0x160
    in->mouse.prev.x = in->mouse.pos.x;
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    in->mouse.prev.y = in->mouse.pos.y;
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    in->mouse.delta.x = 0;
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	f04f 0200 	mov.w	r2, #0
 8012802:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    in->mouse.delta.y = 0;
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	f04f 0200 	mov.w	r2, #0
 801280c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    for (i = 0; i < NK_KEY_MAX; i++)
 8012810:	2300      	movs	r3, #0
 8012812:	60fb      	str	r3, [r7, #12]
 8012814:	e008      	b.n	8012828 <nk_input_begin+0xb0>
        in->keyboard.keys[i].clicked = 0;
 8012816:	68ba      	ldr	r2, [r7, #8]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	00db      	lsls	r3, r3, #3
 801281c:	4413      	add	r3, r2
 801281e:	2200      	movs	r2, #0
 8012820:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NK_KEY_MAX; i++)
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	3301      	adds	r3, #1
 8012826:	60fb      	str	r3, [r7, #12]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2b1d      	cmp	r3, #29
 801282c:	ddf3      	ble.n	8012816 <nk_input_begin+0x9e>
 801282e:	e000      	b.n	8012832 <nk_input_begin+0xba>
    if (!ctx) return;
 8012830:	bf00      	nop
}
 8012832:	3714      	adds	r7, #20
 8012834:	46bd      	mov	sp, r7
 8012836:	bd90      	pop	{r4, r7, pc}
 8012838:	080212bc 	.word	0x080212bc
 801283c:	08022f80 	.word	0x08022f80
 8012840:	080212c0 	.word	0x080212c0
 8012844:	00000000 	.word	0x00000000

08012848 <nk_input_end>:
NK_API void
nk_input_end(struct nk_context *ctx)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d105      	bne.n	8012862 <nk_input_end+0x1a>
 8012856:	4b15      	ldr	r3, [pc, #84]	; (80128ac <nk_input_end+0x64>)
 8012858:	4a15      	ldr	r2, [pc, #84]	; (80128b0 <nk_input_end+0x68>)
 801285a:	2121      	movs	r1, #33	; 0x21
 801285c:	4815      	ldr	r0, [pc, #84]	; (80128b4 <nk_input_end+0x6c>)
 801285e:	f00a fe97 	bl	801d590 <__assert_func>
    if (!ctx) return;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d01c      	beq.n	80128a2 <nk_input_end+0x5a>
    in = &ctx->input;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	60fb      	str	r3, [r7, #12]
    if (in->mouse.grab)
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 8012872:	2b00      	cmp	r3, #0
 8012874:	d003      	beq.n	801287e <nk_input_end+0x36>
        in->mouse.grab = 0;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2200      	movs	r2, #0
 801287a:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    if (in->mouse.ungrab) {
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00d      	beq.n	80128a4 <nk_input_end+0x5c>
        in->mouse.grabbed = 0;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	2200      	movs	r2, #0
 801288c:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        in->mouse.ungrab = 0;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	2200      	movs	r2, #0
 8012894:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        in->mouse.grab = 0;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	2200      	movs	r2, #0
 801289c:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 80128a0:	e000      	b.n	80128a4 <nk_input_end+0x5c>
    if (!ctx) return;
 80128a2:	bf00      	nop
    }
}
 80128a4:	3710      	adds	r7, #16
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	080212bc 	.word	0x080212bc
 80128b0:	08022f90 	.word	0x08022f90
 80128b4:	080212c0 	.word	0x080212c0

080128b8 <nk_input_motion>:
NK_API void
nk_input_motion(struct nk_context *ctx, int x, int y)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b086      	sub	sp, #24
 80128bc:	af00      	add	r7, sp, #0
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	607a      	str	r2, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d105      	bne.n	80128d6 <nk_input_motion+0x1e>
 80128ca:	4b1b      	ldr	r3, [pc, #108]	; (8012938 <nk_input_motion+0x80>)
 80128cc:	4a1b      	ldr	r2, [pc, #108]	; (801293c <nk_input_motion+0x84>)
 80128ce:	2130      	movs	r1, #48	; 0x30
 80128d0:	481b      	ldr	r0, [pc, #108]	; (8012940 <nk_input_motion+0x88>)
 80128d2:	f00a fe5d 	bl	801d590 <__assert_func>
    if (!ctx) return;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d028      	beq.n	801292e <nk_input_motion+0x76>
    in = &ctx->input;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	617b      	str	r3, [r7, #20]
    in->mouse.pos.x = (float)x;
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	ee07 3a90 	vmov	s15, r3
 80128e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
    in->mouse.pos.y = (float)y;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	ee07 3a90 	vmov	s15, r3
 80128f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
    in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 801290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
    in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8012922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
 801292c:	e000      	b.n	8012930 <nk_input_motion+0x78>
    if (!ctx) return;
 801292e:	bf00      	nop
}
 8012930:	3718      	adds	r7, #24
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	080212bc 	.word	0x080212bc
 801293c:	08022fa0 	.word	0x08022fa0
 8012940:	080212c0 	.word	0x080212c0

08012944 <nk_input_button>:
#endif
    in->keyboard.keys[key].down = down;
}
NK_API void
nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, nk_bool down)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b086      	sub	sp, #24
 8012948:	af00      	add	r7, sp, #0
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	607a      	str	r2, [r7, #4]
 801294e:	603b      	str	r3, [r7, #0]
 8012950:	460b      	mov	r3, r1
 8012952:	72fb      	strb	r3, [r7, #11]
    struct nk_mouse_button *btn;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d105      	bne.n	8012966 <nk_input_button+0x22>
 801295a:	4b1d      	ldr	r3, [pc, #116]	; (80129d0 <nk_input_button+0x8c>)
 801295c:	4a1d      	ldr	r2, [pc, #116]	; (80129d4 <nk_input_button+0x90>)
 801295e:	214c      	movs	r1, #76	; 0x4c
 8012960:	481d      	ldr	r0, [pc, #116]	; (80129d8 <nk_input_button+0x94>)
 8012962:	f00a fe15 	bl	801d590 <__assert_func>
    if (!ctx) return;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d02b      	beq.n	80129c4 <nk_input_button+0x80>
    in = &ctx->input;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	617b      	str	r3, [r7, #20]
    if (in->mouse.buttons[id].down == down) return;
 8012970:	7afb      	ldrb	r3, [r7, #11]
 8012972:	697a      	ldr	r2, [r7, #20]
 8012974:	3310      	adds	r3, #16
 8012976:	011b      	lsls	r3, r3, #4
 8012978:	4413      	add	r3, r2
 801297a:	3304      	adds	r3, #4
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	6a3a      	ldr	r2, [r7, #32]
 8012980:	429a      	cmp	r2, r3
 8012982:	d021      	beq.n	80129c8 <nk_input_button+0x84>

    btn = &in->mouse.buttons[id];
 8012984:	7afb      	ldrb	r3, [r7, #11]
 8012986:	3310      	adds	r3, #16
 8012988:	011b      	lsls	r3, r3, #4
 801298a:	697a      	ldr	r2, [r7, #20]
 801298c:	4413      	add	r3, r2
 801298e:	3304      	adds	r3, #4
 8012990:	613b      	str	r3, [r7, #16]
    btn->clicked_pos.x = (float)x;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	ee07 3a90 	vmov	s15, r3
 8012998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	edc3 7a02 	vstr	s15, [r3, #8]
    btn->clicked_pos.y = (float)y;
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	ee07 3a90 	vmov	s15, r3
 80129a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	edc3 7a03 	vstr	s15, [r3, #12]
    btn->down = down;
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	6a3a      	ldr	r2, [r7, #32]
 80129b6:	601a      	str	r2, [r3, #0]
    btn->clicked++;
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	1c5a      	adds	r2, r3, #1
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	605a      	str	r2, [r3, #4]
 80129c2:	e002      	b.n	80129ca <nk_input_button+0x86>
    if (!ctx) return;
 80129c4:	bf00      	nop
 80129c6:	e000      	b.n	80129ca <nk_input_button+0x86>
    if (in->mouse.buttons[id].down == down) return;
 80129c8:	bf00      	nop
    {
        in->mouse.down_pos.x = btn->clicked_pos.x;
        in->mouse.down_pos.y = btn->clicked_pos.y;
    }
#endif
}
 80129ca:	3718      	adds	r7, #24
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	080212bc 	.word	0x080212bc
 80129d4:	08022fb0 	.word	0x08022fb0
 80129d8:	080212c0 	.word	0x080212c0

080129dc <nk_input_has_mouse_click_in_rect>:
    return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 80129dc:	b480      	push	{r7}
 80129de:	b089      	sub	sp, #36	; 0x24
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6178      	str	r0, [r7, #20]
 80129e4:	460b      	mov	r3, r1
 80129e6:	eeb0 6a40 	vmov.f32	s12, s0
 80129ea:	eef0 6a60 	vmov.f32	s13, s1
 80129ee:	eeb0 7a41 	vmov.f32	s14, s2
 80129f2:	eef0 7a61 	vmov.f32	s15, s3
 80129f6:	74fb      	strb	r3, [r7, #19]
 80129f8:	ed87 6a00 	vstr	s12, [r7]
 80129fc:	edc7 6a01 	vstr	s13, [r7, #4]
 8012a00:	ed87 7a02 	vstr	s14, [r7, #8]
 8012a04:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d101      	bne.n	8012a12 <nk_input_has_mouse_click_in_rect+0x36>
 8012a0e:	2300      	movs	r3, #0
 8012a10:	e059      	b.n	8012ac6 <nk_input_has_mouse_click_in_rect+0xea>
    btn = &i->mouse.buttons[id];
 8012a12:	7cfb      	ldrb	r3, [r7, #19]
 8012a14:	3310      	adds	r3, #16
 8012a16:	011b      	lsls	r3, r3, #4
 8012a18:	697a      	ldr	r2, [r7, #20]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	3304      	adds	r3, #4
 8012a1e:	61fb      	str	r3, [r7, #28]
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 8012a20:	ed97 7a00 	vldr	s14, [r7]
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	edd3 7a02 	vldr	s15, [r3, #8]
 8012a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a32:	bf94      	ite	ls
 8012a34:	2301      	movls	r3, #1
 8012a36:	2300      	movhi	r3, #0
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	f083 0301 	eor.w	r3, r3, #1
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d13d      	bne.n	8012ac0 <nk_input_has_mouse_click_in_rect+0xe4>
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	ed93 7a02 	vldr	s14, [r3, #8]
 8012a4a:	edd7 6a00 	vldr	s13, [r7]
 8012a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5e:	bf4c      	ite	mi
 8012a60:	2301      	movmi	r3, #1
 8012a62:	2300      	movpl	r3, #0
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	f083 0301 	eor.w	r3, r3, #1
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d127      	bne.n	8012ac0 <nk_input_has_mouse_click_in_rect+0xe4>
 8012a70:	ed97 7a01 	vldr	s14, [r7, #4]
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	edd3 7a03 	vldr	s15, [r3, #12]
 8012a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a82:	bf94      	ite	ls
 8012a84:	2301      	movls	r3, #1
 8012a86:	2300      	movhi	r3, #0
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	f083 0301 	eor.w	r3, r3, #1
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d115      	bne.n	8012ac0 <nk_input_has_mouse_click_in_rect+0xe4>
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	ed93 7a03 	vldr	s14, [r3, #12]
 8012a9a:	edd7 6a01 	vldr	s13, [r7, #4]
 8012a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8012aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012aa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aae:	bf4c      	ite	mi
 8012ab0:	2301      	movmi	r3, #1
 8012ab2:	2300      	movpl	r3, #0
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	f083 0301 	eor.w	r3, r3, #1
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d001      	beq.n	8012ac4 <nk_input_has_mouse_click_in_rect+0xe8>
        return nk_false;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	e000      	b.n	8012ac6 <nk_input_has_mouse_click_in_rect+0xea>
    return nk_true;
 8012ac4:	2301      	movs	r3, #1
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3724      	adds	r7, #36	; 0x24
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr

08012ad2 <nk_input_has_mouse_click_in_button_rect>:
NK_API nk_bool
nk_input_has_mouse_click_in_button_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 8012ad2:	b480      	push	{r7}
 8012ad4:	b089      	sub	sp, #36	; 0x24
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	6178      	str	r0, [r7, #20]
 8012ada:	460b      	mov	r3, r1
 8012adc:	eeb0 6a40 	vmov.f32	s12, s0
 8012ae0:	eef0 6a60 	vmov.f32	s13, s1
 8012ae4:	eeb0 7a41 	vmov.f32	s14, s2
 8012ae8:	eef0 7a61 	vmov.f32	s15, s3
 8012aec:	74fb      	strb	r3, [r7, #19]
 8012aee:	ed87 6a00 	vstr	s12, [r7]
 8012af2:	edc7 6a01 	vstr	s13, [r7, #4]
 8012af6:	ed87 7a02 	vstr	s14, [r7, #8]
 8012afa:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d101      	bne.n	8012b08 <nk_input_has_mouse_click_in_button_rect+0x36>
 8012b04:	2300      	movs	r3, #0
 8012b06:	e059      	b.n	8012bbc <nk_input_has_mouse_click_in_button_rect+0xea>
    btn = &i->mouse.buttons[id];
 8012b08:	7cfb      	ldrb	r3, [r7, #19]
 8012b0a:	3310      	adds	r3, #16
 8012b0c:	011b      	lsls	r3, r3, #4
 8012b0e:	697a      	ldr	r2, [r7, #20]
 8012b10:	4413      	add	r3, r2
 8012b12:	3304      	adds	r3, #4
 8012b14:	61fb      	str	r3, [r7, #28]
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h)
        || !NK_INBOX(i->mouse.down_pos.x,i->mouse.down_pos.y,b.x,b.y,b.w,b.h))
#else
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 8012b16:	ed97 7a00 	vldr	s14, [r7]
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b28:	bf94      	ite	ls
 8012b2a:	2301      	movls	r3, #1
 8012b2c:	2300      	movhi	r3, #0
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	f083 0301 	eor.w	r3, r3, #1
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d13d      	bne.n	8012bb6 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8012b40:	edd7 6a00 	vldr	s13, [r7]
 8012b44:	edd7 7a02 	vldr	s15, [r7, #8]
 8012b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b54:	bf4c      	ite	mi
 8012b56:	2301      	movmi	r3, #1
 8012b58:	2300      	movpl	r3, #0
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	f083 0301 	eor.w	r3, r3, #1
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d127      	bne.n	8012bb6 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8012b66:	ed97 7a01 	vldr	s14, [r7, #4]
 8012b6a:	69fb      	ldr	r3, [r7, #28]
 8012b6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8012b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b78:	bf94      	ite	ls
 8012b7a:	2301      	movls	r3, #1
 8012b7c:	2300      	movhi	r3, #0
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	f083 0301 	eor.w	r3, r3, #1
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d115      	bne.n	8012bb6 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012b90:	edd7 6a01 	vldr	s13, [r7, #4]
 8012b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8012b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba4:	bf4c      	ite	mi
 8012ba6:	2301      	movmi	r3, #1
 8012ba8:	2300      	movpl	r3, #0
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	f083 0301 	eor.w	r3, r3, #1
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <nk_input_has_mouse_click_in_button_rect+0xe8>
#endif
        return nk_false;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	e000      	b.n	8012bbc <nk_input_has_mouse_click_in_button_rect+0xea>
    return nk_true;
 8012bba:	2301      	movs	r3, #1
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3724      	adds	r7, #36	; 0x24
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr

08012bc8 <nk_input_has_mouse_click_down_in_rect>:
NK_API nk_bool
nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b08a      	sub	sp, #40	; 0x28
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	61f8      	str	r0, [r7, #28]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	eeb0 6a40 	vmov.f32	s12, s0
 8012bd6:	eef0 6a60 	vmov.f32	s13, s1
 8012bda:	eeb0 7a41 	vmov.f32	s14, s2
 8012bde:	eef0 7a61 	vmov.f32	s15, s3
 8012be2:	607a      	str	r2, [r7, #4]
 8012be4:	76fb      	strb	r3, [r7, #27]
 8012be6:	ed87 6a02 	vstr	s12, [r7, #8]
 8012bea:	edc7 6a03 	vstr	s13, [r7, #12]
 8012bee:	ed87 7a04 	vstr	s14, [r7, #16]
 8012bf2:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d101      	bne.n	8012c00 <nk_input_has_mouse_click_down_in_rect+0x38>
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	e026      	b.n	8012c4e <nk_input_has_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 8012c00:	7efb      	ldrb	r3, [r7, #27]
 8012c02:	3310      	adds	r3, #16
 8012c04:	011b      	lsls	r3, r3, #4
 8012c06:	69fa      	ldr	r2, [r7, #28]
 8012c08:	4413      	add	r3, r2
 8012c0a:	3304      	adds	r3, #4
 8012c0c:	627b      	str	r3, [r7, #36]	; 0x24
    return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);
 8012c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8012c12:	edd7 6a03 	vldr	s13, [r7, #12]
 8012c16:	ed97 7a04 	vldr	s14, [r7, #16]
 8012c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c1e:	7efb      	ldrb	r3, [r7, #27]
 8012c20:	eeb0 0a46 	vmov.f32	s0, s12
 8012c24:	eef0 0a66 	vmov.f32	s1, s13
 8012c28:	eeb0 1a47 	vmov.f32	s2, s14
 8012c2c:	eef0 1a67 	vmov.f32	s3, s15
 8012c30:	4619      	mov	r1, r3
 8012c32:	69f8      	ldr	r0, [r7, #28]
 8012c34:	f7ff fed2 	bl	80129dc <nk_input_has_mouse_click_in_rect>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d006      	beq.n	8012c4c <nk_input_has_mouse_click_down_in_rect+0x84>
 8012c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d101      	bne.n	8012c4c <nk_input_has_mouse_click_down_in_rect+0x84>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	e000      	b.n	8012c4e <nk_input_has_mouse_click_down_in_rect+0x86>
 8012c4c:	2300      	movs	r3, #0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3728      	adds	r7, #40	; 0x28
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}

08012c56 <nk_input_is_mouse_hovering_rect>:
        down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);
    return down;
}
NK_API nk_bool
nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8012c56:	b480      	push	{r7}
 8012c58:	b087      	sub	sp, #28
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6178      	str	r0, [r7, #20]
 8012c5e:	eeb0 6a40 	vmov.f32	s12, s0
 8012c62:	eef0 6a60 	vmov.f32	s13, s1
 8012c66:	eeb0 7a41 	vmov.f32	s14, s2
 8012c6a:	eef0 7a61 	vmov.f32	s15, s3
 8012c6e:	ed87 6a01 	vstr	s12, [r7, #4]
 8012c72:	edc7 6a02 	vstr	s13, [r7, #8]
 8012c76:	ed87 7a03 	vstr	s14, [r7, #12]
 8012c7a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d101      	bne.n	8012c88 <nk_input_is_mouse_hovering_rect+0x32>
 8012c84:	2300      	movs	r3, #0
 8012c86:	e032      	b.n	8012cee <nk_input_is_mouse_hovering_rect+0x98>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 8012c88:	ed97 7a01 	vldr	s14, [r7, #4]
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8012c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9a:	d827      	bhi.n	8012cec <nk_input_is_mouse_hovering_rect+0x96>
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8012ca2:	edd7 6a01 	vldr	s13, [r7, #4]
 8012ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8012caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb6:	d519      	bpl.n	8012cec <nk_input_is_mouse_hovering_rect+0x96>
 8012cb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8012cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cca:	d80f      	bhi.n	8012cec <nk_input_is_mouse_hovering_rect+0x96>
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8012cd2:	edd7 6a02 	vldr	s13, [r7, #8]
 8012cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8012cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce6:	d501      	bpl.n	8012cec <nk_input_is_mouse_hovering_rect+0x96>
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e000      	b.n	8012cee <nk_input_is_mouse_hovering_rect+0x98>
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	371c      	adds	r7, #28
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <nk_input_is_mouse_prev_hovering_rect>:
NK_API nk_bool
nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8012cfa:	b480      	push	{r7}
 8012cfc:	b087      	sub	sp, #28
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6178      	str	r0, [r7, #20]
 8012d02:	eeb0 6a40 	vmov.f32	s12, s0
 8012d06:	eef0 6a60 	vmov.f32	s13, s1
 8012d0a:	eeb0 7a41 	vmov.f32	s14, s2
 8012d0e:	eef0 7a61 	vmov.f32	s15, s3
 8012d12:	ed87 6a01 	vstr	s12, [r7, #4]
 8012d16:	edc7 6a02 	vstr	s13, [r7, #8]
 8012d1a:	ed87 7a03 	vstr	s14, [r7, #12]
 8012d1e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d101      	bne.n	8012d2c <nk_input_is_mouse_prev_hovering_rect+0x32>
 8012d28:	2300      	movs	r3, #0
 8012d2a:	e032      	b.n	8012d92 <nk_input_is_mouse_prev_hovering_rect+0x98>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 8012d2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8012d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3e:	d827      	bhi.n	8012d90 <nk_input_is_mouse_prev_hovering_rect+0x96>
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8012d46:	edd7 6a01 	vldr	s13, [r7, #4]
 8012d4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8012d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d5a:	d519      	bpl.n	8012d90 <nk_input_is_mouse_prev_hovering_rect+0x96>
 8012d5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8012d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d6e:	d80f      	bhi.n	8012d90 <nk_input_is_mouse_prev_hovering_rect+0x96>
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8012d76:	edd7 6a02 	vldr	s13, [r7, #8]
 8012d7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8012d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8a:	d501      	bpl.n	8012d90 <nk_input_is_mouse_prev_hovering_rect+0x96>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e000      	b.n	8012d92 <nk_input_is_mouse_prev_hovering_rect+0x98>
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	371c      	adds	r7, #28
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr

08012d9e <nk_input_is_mouse_down>:
    if (!nk_input_is_mouse_hovering_rect(i, rect)) return nk_false;
    return nk_input_is_mouse_click_in_rect(i, id, rect);
}
NK_API nk_bool
nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)
{
 8012d9e:	b480      	push	{r7}
 8012da0:	b083      	sub	sp, #12
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
 8012da6:	460b      	mov	r3, r1
 8012da8:	70fb      	strb	r3, [r7, #3]
    if (!i) return nk_false;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d101      	bne.n	8012db4 <nk_input_is_mouse_down+0x16>
 8012db0:	2300      	movs	r3, #0
 8012db2:	e006      	b.n	8012dc2 <nk_input_is_mouse_down+0x24>
    return i->mouse.buttons[id].down;
 8012db4:	78fb      	ldrb	r3, [r7, #3]
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	3310      	adds	r3, #16
 8012dba:	011b      	lsls	r3, r3, #4
 8012dbc:	4413      	add	r3, r2
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	681b      	ldr	r3, [r3, #0]
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	370c      	adds	r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr

08012dce <nk_input_is_mouse_pressed>:
NK_API nk_bool
nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)
{
 8012dce:	b480      	push	{r7}
 8012dd0:	b085      	sub	sp, #20
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	6078      	str	r0, [r7, #4]
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	70fb      	strb	r3, [r7, #3]
    const struct nk_mouse_button *b;
    if (!i) return nk_false;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d101      	bne.n	8012de4 <nk_input_is_mouse_pressed+0x16>
 8012de0:	2300      	movs	r3, #0
 8012de2:	e011      	b.n	8012e08 <nk_input_is_mouse_pressed+0x3a>
    b = &i->mouse.buttons[id];
 8012de4:	78fb      	ldrb	r3, [r7, #3]
 8012de6:	3310      	adds	r3, #16
 8012de8:	011b      	lsls	r3, r3, #4
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	4413      	add	r3, r2
 8012dee:	3304      	adds	r3, #4
 8012df0:	60fb      	str	r3, [r7, #12]
    if (b->down && b->clicked)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d005      	beq.n	8012e06 <nk_input_is_mouse_pressed+0x38>
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <nk_input_is_mouse_pressed+0x38>
        return nk_true;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e000      	b.n	8012e08 <nk_input_is_mouse_pressed+0x3a>
    return nk_false;
 8012e06:	2300      	movs	r3, #0
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3714      	adds	r7, #20
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr

08012e14 <nk_input_is_key_pressed>:
    if (!i) return nk_false;
    return (!i->mouse.buttons[id].down && i->mouse.buttons[id].clicked);
}
NK_API nk_bool
nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)
{
 8012e14:	b480      	push	{r7}
 8012e16:	b085      	sub	sp, #20
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	70fb      	strb	r3, [r7, #3]
    const struct nk_key *k;
    if (!i) return nk_false;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d101      	bne.n	8012e2a <nk_input_is_key_pressed+0x16>
 8012e26:	2300      	movs	r3, #0
 8012e28:	e017      	b.n	8012e5a <nk_input_is_key_pressed+0x46>
    k = &i->keyboard.keys[key];
 8012e2a:	78fb      	ldrb	r3, [r7, #3]
 8012e2c:	00db      	lsls	r3, r3, #3
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	4413      	add	r3, r2
 8012e32:	60fb      	str	r3, [r7, #12]
    if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d003      	beq.n	8012e44 <nk_input_is_key_pressed+0x30>
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d107      	bne.n	8012e54 <nk_input_is_key_pressed+0x40>
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d105      	bne.n	8012e58 <nk_input_is_key_pressed+0x44>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d901      	bls.n	8012e58 <nk_input_is_key_pressed+0x44>
        return nk_true;
 8012e54:	2301      	movs	r3, #1
 8012e56:	e000      	b.n	8012e5a <nk_input_is_key_pressed+0x46>
    return nk_false;
 8012e58:	2300      	movs	r3, #0
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3714      	adds	r7, #20
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr
	...

08012e68 <nk_layout_set_min_row_height>:
 *                          LAYOUT
 *
 * ===============================================================*/
NK_API void
nk_layout_set_min_row_height(struct nk_context *ctx, float height)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	ed87 0a00 	vstr	s0, [r7]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d105      	bne.n	8012e86 <nk_layout_set_min_row_height+0x1e>
 8012e7a:	4b23      	ldr	r3, [pc, #140]	; (8012f08 <nk_layout_set_min_row_height+0xa0>)
 8012e7c:	4a23      	ldr	r2, [pc, #140]	; (8012f0c <nk_layout_set_min_row_height+0xa4>)
 8012e7e:	210f      	movs	r1, #15
 8012e80:	4823      	ldr	r0, [pc, #140]	; (8012f10 <nk_layout_set_min_row_height+0xa8>)
 8012e82:	f00a fb85 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012e8c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d105      	bne.n	8012ea0 <nk_layout_set_min_row_height+0x38>
 8012e94:	4b1f      	ldr	r3, [pc, #124]	; (8012f14 <nk_layout_set_min_row_height+0xac>)
 8012e96:	4a1d      	ldr	r2, [pc, #116]	; (8012f0c <nk_layout_set_min_row_height+0xa4>)
 8012e98:	2110      	movs	r1, #16
 8012e9a:	481d      	ldr	r0, [pc, #116]	; (8012f10 <nk_layout_set_min_row_height+0xa8>)
 8012e9c:	f00a fb78 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012ea6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d105      	bne.n	8012ebe <nk_layout_set_min_row_height+0x56>
 8012eb2:	4b19      	ldr	r3, [pc, #100]	; (8012f18 <nk_layout_set_min_row_height+0xb0>)
 8012eb4:	4a15      	ldr	r2, [pc, #84]	; (8012f0c <nk_layout_set_min_row_height+0xa4>)
 8012eb6:	2111      	movs	r1, #17
 8012eb8:	4815      	ldr	r0, [pc, #84]	; (8012f10 <nk_layout_set_min_row_height+0xa8>)
 8012eba:	f00a fb69 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d01d      	beq.n	8012f00 <nk_layout_set_min_row_height+0x98>
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012eca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d016      	beq.n	8012f00 <nk_layout_set_min_row_height+0x98>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012ed8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d00d      	beq.n	8012f00 <nk_layout_set_min_row_height+0x98>
        return;

    win = ctx->current;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012eea:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012eee:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ef6:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = height;
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	683a      	ldr	r2, [r7, #0]
 8012efc:	671a      	str	r2, [r3, #112]	; 0x70
 8012efe:	e000      	b.n	8012f02 <nk_layout_set_min_row_height+0x9a>
        return;
 8012f00:	bf00      	nop
}
 8012f02:	3710      	adds	r7, #16
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	080212dc 	.word	0x080212dc
 8012f0c:	08022fc0 	.word	0x08022fc0
 8012f10:	080212e0 	.word	0x080212e0
 8012f14:	080212fc 	.word	0x080212fc
 8012f18:	0802130c 	.word	0x0802130c

08012f1c <nk_layout_reset_min_row_height>:
NK_API void
nk_layout_reset_min_row_height(struct nk_context *ctx)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b084      	sub	sp, #16
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d105      	bne.n	8012f36 <nk_layout_reset_min_row_height+0x1a>
 8012f2a:	4b34      	ldr	r3, [pc, #208]	; (8012ffc <nk_layout_reset_min_row_height+0xe0>)
 8012f2c:	4a34      	ldr	r2, [pc, #208]	; (8013000 <nk_layout_reset_min_row_height+0xe4>)
 8012f2e:	211f      	movs	r1, #31
 8012f30:	4834      	ldr	r0, [pc, #208]	; (8013004 <nk_layout_reset_min_row_height+0xe8>)
 8012f32:	f00a fb2d 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f3c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d105      	bne.n	8012f50 <nk_layout_reset_min_row_height+0x34>
 8012f44:	4b30      	ldr	r3, [pc, #192]	; (8013008 <nk_layout_reset_min_row_height+0xec>)
 8012f46:	4a2e      	ldr	r2, [pc, #184]	; (8013000 <nk_layout_reset_min_row_height+0xe4>)
 8012f48:	2120      	movs	r1, #32
 8012f4a:	482e      	ldr	r0, [pc, #184]	; (8013004 <nk_layout_reset_min_row_height+0xe8>)
 8012f4c:	f00a fb20 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f56:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d105      	bne.n	8012f6e <nk_layout_reset_min_row_height+0x52>
 8012f62:	4b2a      	ldr	r3, [pc, #168]	; (801300c <nk_layout_reset_min_row_height+0xf0>)
 8012f64:	4a26      	ldr	r2, [pc, #152]	; (8013000 <nk_layout_reset_min_row_height+0xe4>)
 8012f66:	2121      	movs	r1, #33	; 0x21
 8012f68:	4826      	ldr	r0, [pc, #152]	; (8013004 <nk_layout_reset_min_row_height+0xe8>)
 8012f6a:	f00a fb11 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d03e      	beq.n	8012ff2 <nk_layout_reset_min_row_height+0xd6>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f7a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d037      	beq.n	8012ff2 <nk_layout_reset_min_row_height+0xd6>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f88:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d02e      	beq.n	8012ff2 <nk_layout_reset_min_row_height+0xd6>
        return;

    win = ctx->current;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f9a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f9e:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012fa6:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = ctx->style.font->height;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8012fae:	685a      	ldr	r2, [r3, #4]
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	671a      	str	r2, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.text.padding.y*2;
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8012fc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.window.min_row_height_padding*2;
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fda:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 8012fde:	edd3 7a00 	vldr	s15, [r3]
 8012fe2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8012ff0:	e000      	b.n	8012ff4 <nk_layout_reset_min_row_height+0xd8>
        return;
 8012ff2:	bf00      	nop
}
 8012ff4:	3710      	adds	r7, #16
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	080212dc 	.word	0x080212dc
 8013000:	08022fe0 	.word	0x08022fe0
 8013004:	080212e0 	.word	0x080212e0
 8013008:	080212fc 	.word	0x080212fc
 801300c:	0802130c 	.word	0x0802130c

08013010 <nk_layout_row_calculate_usable_space>:
NK_LIB float
nk_layout_row_calculate_usable_space(const struct nk_style *style, enum nk_panel_type type,
    float total_space, int columns)
{
 8013010:	b480      	push	{r7}
 8013012:	b089      	sub	sp, #36	; 0x24
 8013014:	af00      	add	r7, sp, #0
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	460b      	mov	r3, r1
 801301a:	ed87 0a01 	vstr	s0, [r7, #4]
 801301e:	603a      	str	r2, [r7, #0]
 8013020:	72fb      	strb	r3, [r7, #11]

    struct nk_vec2 spacing;

    NK_UNUSED(type);

    spacing = style->window.spacing;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013028:	461a      	mov	r2, r3
 801302a:	f107 0310 	add.w	r3, r7, #16
 801302e:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8013032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013036:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate the usable panel space */
    panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	dd06      	ble.n	801304e <nk_layout_row_calculate_usable_space+0x3e>
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	3b01      	subs	r3, #1
 8013044:	ee07 3a90 	vmov	s15, r3
 8013048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801304c:	e001      	b.n	8013052 <nk_layout_row_calculate_usable_space+0x42>
 801304e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013084 <nk_layout_row_calculate_usable_space+0x74>
 8013052:	ed97 7a04 	vldr	s14, [r7, #16]
 8013056:	ee67 7a87 	vmul.f32	s15, s15, s14
 801305a:	edc7 7a07 	vstr	s15, [r7, #28]
    panel_space  = total_space - panel_spacing;
 801305e:	ed97 7a01 	vldr	s14, [r7, #4]
 8013062:	edd7 7a07 	vldr	s15, [r7, #28]
 8013066:	ee77 7a67 	vsub.f32	s15, s14, s15
 801306a:	edc7 7a06 	vstr	s15, [r7, #24]
    return panel_space;
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	ee07 3a90 	vmov	s15, r3
}
 8013074:	eeb0 0a67 	vmov.f32	s0, s15
 8013078:	3724      	adds	r7, #36	; 0x24
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	00000000 	.word	0x00000000

08013088 <nk_panel_layout>:
NK_LIB void
nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,
    float height, int cols)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b08e      	sub	sp, #56	; 0x38
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	ed87 0a01 	vstr	s0, [r7, #4]
 8013096:	603a      	str	r2, [r7, #0]
    struct nk_command_buffer *out;

    struct nk_vec2 item_spacing;
    struct nk_color color;

    NK_ASSERT(ctx);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d105      	bne.n	80130aa <nk_panel_layout+0x22>
 801309e:	4b78      	ldr	r3, [pc, #480]	; (8013280 <nk_panel_layout+0x1f8>)
 80130a0:	4a78      	ldr	r2, [pc, #480]	; (8013284 <nk_panel_layout+0x1fc>)
 80130a2:	2148      	movs	r1, #72	; 0x48
 80130a4:	4878      	ldr	r0, [pc, #480]	; (8013288 <nk_panel_layout+0x200>)
 80130a6:	f00a fa73 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80130b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d105      	bne.n	80130c4 <nk_panel_layout+0x3c>
 80130b8:	4b74      	ldr	r3, [pc, #464]	; (801328c <nk_panel_layout+0x204>)
 80130ba:	4a72      	ldr	r2, [pc, #456]	; (8013284 <nk_panel_layout+0x1fc>)
 80130bc:	2149      	movs	r1, #73	; 0x49
 80130be:	4872      	ldr	r0, [pc, #456]	; (8013288 <nk_panel_layout+0x200>)
 80130c0:	f00a fa66 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80130ca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80130ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d105      	bne.n	80130e2 <nk_panel_layout+0x5a>
 80130d6:	4b6e      	ldr	r3, [pc, #440]	; (8013290 <nk_panel_layout+0x208>)
 80130d8:	4a6a      	ldr	r2, [pc, #424]	; (8013284 <nk_panel_layout+0x1fc>)
 80130da:	214a      	movs	r1, #74	; 0x4a
 80130dc:	486a      	ldr	r0, [pc, #424]	; (8013288 <nk_panel_layout+0x200>)
 80130de:	f00a fa57 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f000 80c6 	beq.w	8013276 <nk_panel_layout+0x1ee>
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80130f0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f000 80be 	beq.w	8013276 <nk_panel_layout+0x1ee>
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013100:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013108:	2b00      	cmp	r3, #0
 801310a:	f000 80b4 	beq.w	8013276 <nk_panel_layout+0x1ee>
        return;

    /* prefetch some configuration data */
    layout = win->layout;
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013114:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801311c:	633b      	str	r3, [r7, #48]	; 0x30
    out = &win->buffer;
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	3364      	adds	r3, #100	; 0x64
 8013122:	62fb      	str	r3, [r7, #44]	; 0x2c
    color = style->window.background;
 8013124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801312a:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801312e:	623b      	str	r3, [r7, #32]
    item_spacing = style->window.spacing;
 8013130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013136:	461a      	mov	r2, r3
 8013138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801313c:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8013140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013144:	e883 0003 	stmia.w	r3, {r0, r1}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 8013148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013150:	2b00      	cmp	r3, #0
 8013152:	d005      	beq.n	8013160 <nk_panel_layout+0xd8>
 8013154:	4b4f      	ldr	r3, [pc, #316]	; (8013294 <nk_panel_layout+0x20c>)
 8013156:	4a4b      	ldr	r2, [pc, #300]	; (8013284 <nk_panel_layout+0x1fc>)
 8013158:	215a      	movs	r1, #90	; 0x5a
 801315a:	484b      	ldr	r0, [pc, #300]	; (8013288 <nk_panel_layout+0x200>)
 801315c:	f00a fa18 	bl	801d590 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 8013160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013168:	2b00      	cmp	r3, #0
 801316a:	d005      	beq.n	8013178 <nk_panel_layout+0xf0>
 801316c:	4b4a      	ldr	r3, [pc, #296]	; (8013298 <nk_panel_layout+0x210>)
 801316e:	4a45      	ldr	r2, [pc, #276]	; (8013284 <nk_panel_layout+0x1fc>)
 8013170:	215b      	movs	r1, #91	; 0x5b
 8013172:	4845      	ldr	r0, [pc, #276]	; (8013288 <nk_panel_layout+0x200>)
 8013174:	f00a fa0c 	bl	801d590 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 8013178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013180:	2b00      	cmp	r3, #0
 8013182:	d005      	beq.n	8013190 <nk_panel_layout+0x108>
 8013184:	4b45      	ldr	r3, [pc, #276]	; (801329c <nk_panel_layout+0x214>)
 8013186:	4a3f      	ldr	r2, [pc, #252]	; (8013284 <nk_panel_layout+0x1fc>)
 8013188:	215c      	movs	r1, #92	; 0x5c
 801318a:	483f      	ldr	r0, [pc, #252]	; (8013288 <nk_panel_layout+0x200>)
 801318c:	f00a fa00 	bl	801d590 <__assert_func>

    /* update the current row and set the current row layout */
    layout->row.index = 0;
 8013190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013192:	2200      	movs	r2, #0
 8013194:	669a      	str	r2, [r3, #104]	; 0x68
    layout->at_y += layout->row.height;
 8013196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013198:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801319e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80131a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131a8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    layout->row.columns = cols;
 80131ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ae:	683a      	ldr	r2, [r7, #0]
 80131b0:	675a      	str	r2, [r3, #116]	; 0x74
    if (height == 0.0f)
 80131b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80131b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80131ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131be:	d117      	bne.n	80131f0 <nk_panel_layout+0x168>
        layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;
 80131c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80131c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80131ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d2:	d503      	bpl.n	80131dc <nk_panel_layout+0x154>
 80131d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131d6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80131da:	e001      	b.n	80131e0 <nk_panel_layout+0x158>
 80131dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80131e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80131e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ea:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 80131ee:	e008      	b.n	8013202 <nk_panel_layout+0x17a>
    else layout->row.height = height + item_spacing.y;
 80131f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80131f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80131f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    layout->row.item_offset = 0;
 8013202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013204:	f04f 0200 	mov.w	r2, #0
 8013208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (layout->flags & NK_WINDOW_DYNAMIC) {
 801320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013214:	2b00      	cmp	r3, #0
 8013216:	d02f      	beq.n	8013278 <nk_panel_layout+0x1f0>
        /* draw background for dynamic panels */
        struct nk_rect background;
        background.x = win->bounds.x;
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801321c:	613b      	str	r3, [r7, #16]
        background.w = win->bounds.w;
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013222:	61bb      	str	r3, [r7, #24]
        background.y = layout->at_y - 1.0f;
 8013224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013226:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801322a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801322e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013232:	edc7 7a05 	vstr	s15, [r7, #20]
        background.h = layout->row.height + 1.0f;
 8013236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013238:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 801323c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013244:	edc7 7a07 	vstr	s15, [r7, #28]
        nk_fill_rect(out, background, 0, color);
 8013248:	ed97 6a04 	vldr	s12, [r7, #16]
 801324c:	edd7 6a05 	vldr	s13, [r7, #20]
 8013250:	ed97 7a06 	vldr	s14, [r7, #24]
 8013254:	edd7 7a07 	vldr	s15, [r7, #28]
 8013258:	6a39      	ldr	r1, [r7, #32]
 801325a:	ed9f 2a11 	vldr	s4, [pc, #68]	; 80132a0 <nk_panel_layout+0x218>
 801325e:	eeb0 0a46 	vmov.f32	s0, s12
 8013262:	eef0 0a66 	vmov.f32	s1, s13
 8013266:	eeb0 1a47 	vmov.f32	s2, s14
 801326a:	eef0 1a67 	vmov.f32	s3, s15
 801326e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013270:	f7fe f8b0 	bl	80113d4 <nk_fill_rect>
 8013274:	e000      	b.n	8013278 <nk_panel_layout+0x1f0>
        return;
 8013276:	bf00      	nop
    }
}
 8013278:	3738      	adds	r7, #56	; 0x38
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	080212dc 	.word	0x080212dc
 8013284:	08023000 	.word	0x08023000
 8013288:	080212e0 	.word	0x080212e0
 801328c:	080212fc 	.word	0x080212fc
 8013290:	0802130c 	.word	0x0802130c
 8013294:	08021324 	.word	0x08021324
 8013298:	0802134c 	.word	0x0802134c
 801329c:	08021370 	.word	0x08021370
 80132a0:	00000000 	.word	0x00000000

080132a4 <nk_row_layout>:
NK_LIB void
nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, int width)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b088      	sub	sp, #32
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6178      	str	r0, [r7, #20]
 80132ac:	ed87 0a03 	vstr	s0, [r7, #12]
 80132b0:	60ba      	str	r2, [r7, #8]
 80132b2:	607b      	str	r3, [r7, #4]
 80132b4:	460b      	mov	r3, r1
 80132b6:	74fb      	strb	r3, [r7, #19]
    /* update the current row and set the current row layout */
    struct nk_window *win;
    NK_ASSERT(ctx);
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d105      	bne.n	80132ca <nk_row_layout+0x26>
 80132be:	4b3a      	ldr	r3, [pc, #232]	; (80133a8 <nk_row_layout+0x104>)
 80132c0:	4a3a      	ldr	r2, [pc, #232]	; (80133ac <nk_row_layout+0x108>)
 80132c2:	2177      	movs	r1, #119	; 0x77
 80132c4:	483a      	ldr	r0, [pc, #232]	; (80133b0 <nk_row_layout+0x10c>)
 80132c6:	f00a f963 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80132d0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d105      	bne.n	80132e4 <nk_row_layout+0x40>
 80132d8:	4b36      	ldr	r3, [pc, #216]	; (80133b4 <nk_row_layout+0x110>)
 80132da:	4a34      	ldr	r2, [pc, #208]	; (80133ac <nk_row_layout+0x108>)
 80132dc:	2178      	movs	r1, #120	; 0x78
 80132de:	4834      	ldr	r0, [pc, #208]	; (80133b0 <nk_row_layout+0x10c>)
 80132e0:	f00a f956 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80132ea:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80132ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d105      	bne.n	8013302 <nk_row_layout+0x5e>
 80132f6:	4b30      	ldr	r3, [pc, #192]	; (80133b8 <nk_row_layout+0x114>)
 80132f8:	4a2c      	ldr	r2, [pc, #176]	; (80133ac <nk_row_layout+0x108>)
 80132fa:	2179      	movs	r1, #121	; 0x79
 80132fc:	482c      	ldr	r0, [pc, #176]	; (80133b0 <nk_row_layout+0x10c>)
 80132fe:	f00a f947 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d04a      	beq.n	801339e <nk_row_layout+0xfa>
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801330e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013312:	2b00      	cmp	r3, #0
 8013314:	d043      	beq.n	801339e <nk_row_layout+0xfa>
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801331c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013324:	2b00      	cmp	r3, #0
 8013326:	d03a      	beq.n	801339e <nk_row_layout+0xfa>
        return;

    win = ctx->current;
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801332e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013332:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8013334:	68ba      	ldr	r2, [r7, #8]
 8013336:	ed97 0a03 	vldr	s0, [r7, #12]
 801333a:	69f9      	ldr	r1, [r7, #28]
 801333c:	6978      	ldr	r0, [r7, #20]
 801333e:	f7ff fea3 	bl	8013088 <nk_panel_layout>
    if (fmt == NK_DYNAMIC)
 8013342:	7cfb      	ldrb	r3, [r7, #19]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d106      	bne.n	8013356 <nk_row_layout+0xb2>
        win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801334e:	2200      	movs	r2, #0
 8013350:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013354:	e005      	b.n	8013362 <nk_row_layout+0xbe>
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801335c:	2204      	movs	r2, #4
 801335e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    win->layout->row.ratio = 0;
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013368:	2200      	movs	r2, #0
 801336a:	679a      	str	r2, [r3, #120]	; 0x78
    win->layout->row.filled = 0;
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013372:	f04f 0200 	mov.w	r2, #0
 8013376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    win->layout->row.item_offset = 0;
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013380:	f04f 0200 	mov.w	r2, #0
 8013384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    win->layout->row.item_width = (float)width;
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	ee07 2a90 	vmov	s15, r2
 8013394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013398:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 801339c:	e000      	b.n	80133a0 <nk_row_layout+0xfc>
        return;
 801339e:	bf00      	nop
}
 80133a0:	3720      	adds	r7, #32
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
 80133a6:	bf00      	nop
 80133a8:	080212dc 	.word	0x080212dc
 80133ac:	08023010 	.word	0x08023010
 80133b0:	080212e0 	.word	0x080212e0
 80133b4:	080212fc 	.word	0x080212fc
 80133b8:	0802130c 	.word	0x0802130c

080133bc <nk_layout_row_dynamic>:
    win = ctx->current;
    return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);
}
NK_API void
nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b084      	sub	sp, #16
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80133c8:	6079      	str	r1, [r7, #4]
    nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);
 80133ca:	2300      	movs	r3, #0
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80133d2:	2100      	movs	r1, #0
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	f7ff ff65 	bl	80132a4 <nk_row_layout>
}
 80133da:	bf00      	nop
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
	...

080133e4 <nk_layout_row>:
    layout->row.item_offset = 0;
}
NK_API void
nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, const float *ratio)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b08c      	sub	sp, #48	; 0x30
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6178      	str	r0, [r7, #20]
 80133ec:	ed87 0a03 	vstr	s0, [r7, #12]
 80133f0:	60ba      	str	r2, [r7, #8]
 80133f2:	607b      	str	r3, [r7, #4]
 80133f4:	460b      	mov	r3, r1
 80133f6:	74fb      	strb	r3, [r7, #19]
    int i;
    int n_undef = 0;
 80133f8:	2300      	movs	r3, #0
 80133fa:	62bb      	str	r3, [r7, #40]	; 0x28
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d105      	bne.n	801340e <nk_layout_row+0x2a>
 8013402:	4b73      	ldr	r3, [pc, #460]	; (80135d0 <nk_layout_row+0x1ec>)
 8013404:	4a73      	ldr	r2, [pc, #460]	; (80135d4 <nk_layout_row+0x1f0>)
 8013406:	21ed      	movs	r1, #237	; 0xed
 8013408:	4873      	ldr	r0, [pc, #460]	; (80135d8 <nk_layout_row+0x1f4>)
 801340a:	f00a f8c1 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013414:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013418:	2b00      	cmp	r3, #0
 801341a:	d105      	bne.n	8013428 <nk_layout_row+0x44>
 801341c:	4b6f      	ldr	r3, [pc, #444]	; (80135dc <nk_layout_row+0x1f8>)
 801341e:	4a6d      	ldr	r2, [pc, #436]	; (80135d4 <nk_layout_row+0x1f0>)
 8013420:	21ee      	movs	r1, #238	; 0xee
 8013422:	486d      	ldr	r0, [pc, #436]	; (80135d8 <nk_layout_row+0x1f4>)
 8013424:	f00a f8b4 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801342e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013436:	2b00      	cmp	r3, #0
 8013438:	d105      	bne.n	8013446 <nk_layout_row+0x62>
 801343a:	4b69      	ldr	r3, [pc, #420]	; (80135e0 <nk_layout_row+0x1fc>)
 801343c:	4a65      	ldr	r2, [pc, #404]	; (80135d4 <nk_layout_row+0x1f0>)
 801343e:	21ef      	movs	r1, #239	; 0xef
 8013440:	4865      	ldr	r0, [pc, #404]	; (80135d8 <nk_layout_row+0x1f4>)
 8013442:	f00a f8a5 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	2b00      	cmp	r3, #0
 801344a:	f000 80bd 	beq.w	80135c8 <nk_layout_row+0x1e4>
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013454:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013458:	2b00      	cmp	r3, #0
 801345a:	f000 80b5 	beq.w	80135c8 <nk_layout_row+0x1e4>
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013464:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801346c:	2b00      	cmp	r3, #0
 801346e:	f000 80ab 	beq.w	80135c8 <nk_layout_row+0x1e4>
        return;

    win = ctx->current;
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013478:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801347c:	623b      	str	r3, [r7, #32]
    layout = win->layout;
 801347e:	6a3b      	ldr	r3, [r7, #32]
 8013480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013484:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8013486:	68ba      	ldr	r2, [r7, #8]
 8013488:	ed97 0a03 	vldr	s0, [r7, #12]
 801348c:	6a39      	ldr	r1, [r7, #32]
 801348e:	6978      	ldr	r0, [r7, #20]
 8013490:	f7ff fdfa 	bl	8013088 <nk_panel_layout>
    if (fmt == NK_DYNAMIC) {
 8013494:	7cfb      	ldrb	r3, [r7, #19]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d17b      	bne.n	8013592 <nk_layout_row+0x1ae>
        /* calculate width of undefined widget ratios */
        float r = 0;
 801349a:	f04f 0300 	mov.w	r3, #0
 801349e:	627b      	str	r3, [r7, #36]	; 0x24
        layout->row.ratio = ratio;
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	679a      	str	r2, [r3, #120]	; 0x78
        for (i = 0; i < cols; ++i) {
 80134a6:	2300      	movs	r3, #0
 80134a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80134aa:	e01d      	b.n	80134e8 <nk_layout_row+0x104>
            if (ratio[i] < 0.0f)
 80134ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	4413      	add	r3, r2
 80134b4:	edd3 7a00 	vldr	s15, [r3]
 80134b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80134bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c0:	d503      	bpl.n	80134ca <nk_layout_row+0xe6>
                n_undef++;
 80134c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c4:	3301      	adds	r3, #1
 80134c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80134c8:	e00b      	b.n	80134e2 <nk_layout_row+0xfe>
            else r += ratio[i];
 80134ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	4413      	add	r3, r2
 80134d2:	edd3 7a00 	vldr	s15, [r3]
 80134d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80134da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (i = 0; i < cols; ++i) {
 80134e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e4:	3301      	adds	r3, #1
 80134e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80134e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	dbdd      	blt.n	80134ac <nk_layout_row+0xc8>
        }
        r = NK_SATURATE(1.0f - r);
 80134f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80134f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80134f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013508:	dc0a      	bgt.n	8013520 <nk_layout_row+0x13c>
 801350a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801350e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801351e:	dd16      	ble.n	801354e <nk_layout_row+0x16a>
 8013520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013524:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013528:	ee77 7a67 	vsub.f32	s15, s14, s15
 801352c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013538:	dd02      	ble.n	8013540 <nk_layout_row+0x15c>
 801353a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801353e:	e008      	b.n	8013552 <nk_layout_row+0x16e>
 8013540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013544:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013548:	ee77 7a67 	vsub.f32	s15, s14, s15
 801354c:	e001      	b.n	8013552 <nk_layout_row+0x16e>
 801354e:	eddf 7a25 	vldr	s15, [pc, #148]	; 80135e4 <nk_layout_row+0x200>
 8013552:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        layout->row.type = NK_LAYOUT_DYNAMIC;
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	2203      	movs	r2, #3
 801355a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 801355e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356a:	dd0c      	ble.n	8013586 <nk_layout_row+0x1a2>
 801356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801356e:	2b00      	cmp	r3, #0
 8013570:	dd09      	ble.n	8013586 <nk_layout_row+0x1a2>
 8013572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013574:	ee07 3a90 	vmov	s15, r3
 8013578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801357c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8013580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013584:	e001      	b.n	801358a <nk_layout_row+0x1a6>
 8013586:	eddf 7a17 	vldr	s15, [pc, #92]	; 80135e4 <nk_layout_row+0x200>
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8013590:	e00f      	b.n	80135b2 <nk_layout_row+0x1ce>
    } else {
        layout->row.ratio = ratio;
 8013592:	69fb      	ldr	r3, [r7, #28]
 8013594:	687a      	ldr	r2, [r7, #4]
 8013596:	679a      	str	r2, [r3, #120]	; 0x78
        layout->row.type = NK_LAYOUT_STATIC;
 8013598:	69fb      	ldr	r3, [r7, #28]
 801359a:	2207      	movs	r2, #7
 801359c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = 0;
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	f04f 0200 	mov.w	r2, #0
 80135a6:	67da      	str	r2, [r3, #124]	; 0x7c
        layout->row.item_offset = 0;
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	f04f 0200 	mov.w	r2, #0
 80135ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }
    layout->row.item_offset = 0;
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	f04f 0200 	mov.w	r2, #0
 80135b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    layout->row.filled = 0;
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	f04f 0200 	mov.w	r2, #0
 80135c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80135c6:	e000      	b.n	80135ca <nk_layout_row+0x1e6>
        return;
 80135c8:	bf00      	nop
}
 80135ca:	3730      	adds	r7, #48	; 0x30
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	080212dc 	.word	0x080212dc
 80135d4:	08023020 	.word	0x08023020
 80135d8:	080212e0 	.word	0x080212e0
 80135dc:	080212fc 	.word	0x080212fc
 80135e0:	0802130c 	.word	0x0802130c
 80135e4:	00000000 	.word	0x00000000

080135e8 <nk_panel_alloc_row>:
    ret.y += -layout->at_y + (float)*layout->offset_y;
    return ret;
}
NK_LIB void
nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b086      	sub	sp, #24
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
    struct nk_panel *layout = win->layout;
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135f8:	617b      	str	r3, [r7, #20]
    struct nk_vec2 spacing = ctx->style.window.spacing;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013600:	461a      	mov	r2, r3
 8013602:	f107 0308 	add.w	r3, r7, #8
 8013606:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 801360a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801360e:	e883 0003 	stmia.w	r3, {r0, r1}
    const float row_height = layout->row.height - spacing.y;
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8013618:	edd7 7a03 	vldr	s15, [r7, #12]
 801361c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013620:	edc7 7a04 	vstr	s15, [r7, #16]
    nk_panel_layout(ctx, win, row_height, layout->row.columns);
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013628:	461a      	mov	r2, r3
 801362a:	ed97 0a04 	vldr	s0, [r7, #16]
 801362e:	6839      	ldr	r1, [r7, #0]
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f7ff fd29 	bl	8013088 <nk_panel_layout>
}
 8013636:	bf00      	nop
 8013638:	3718      	adds	r7, #24
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
	...

08013640 <nk_layout_widget_space>:
NK_LIB void
nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,
    struct nk_window *win, int modify)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b092      	sub	sp, #72	; 0x48
 8013644:	af00      	add	r7, sp, #0
 8013646:	60f8      	str	r0, [r7, #12]
 8013648:	60b9      	str	r1, [r7, #8]
 801364a:	607a      	str	r2, [r7, #4]
 801364c:	603b      	str	r3, [r7, #0]
    struct nk_panel *layout;
    const struct nk_style *style;

    struct nk_vec2 spacing;

    float item_offset = 0;
 801364e:	f04f 0300 	mov.w	r3, #0
 8013652:	647b      	str	r3, [r7, #68]	; 0x44
    float item_width = 0;
 8013654:	f04f 0300 	mov.w	r3, #0
 8013658:	643b      	str	r3, [r7, #64]	; 0x40
    float item_spacing = 0;
 801365a:	f04f 0300 	mov.w	r3, #0
 801365e:	63fb      	str	r3, [r7, #60]	; 0x3c
    float panel_space = 0;
 8013660:	f04f 0300 	mov.w	r3, #0
 8013664:	63bb      	str	r3, [r7, #56]	; 0x38

    NK_ASSERT(ctx);
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d106      	bne.n	801367a <nk_layout_widget_space+0x3a>
 801366c:	4bc4      	ldr	r3, [pc, #784]	; (8013980 <nk_layout_widget_space+0x340>)
 801366e:	4ac5      	ldr	r2, [pc, #788]	; (8013984 <nk_layout_widget_space+0x344>)
 8013670:	f240 214d 	movw	r1, #589	; 0x24d
 8013674:	48c4      	ldr	r0, [pc, #784]	; (8013988 <nk_layout_widget_space+0x348>)
 8013676:	f009 ff8b 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013680:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013684:	2b00      	cmp	r3, #0
 8013686:	d106      	bne.n	8013696 <nk_layout_widget_space+0x56>
 8013688:	4bc0      	ldr	r3, [pc, #768]	; (801398c <nk_layout_widget_space+0x34c>)
 801368a:	4abe      	ldr	r2, [pc, #760]	; (8013984 <nk_layout_widget_space+0x344>)
 801368c:	f240 214e 	movw	r1, #590	; 0x24e
 8013690:	48bd      	ldr	r0, [pc, #756]	; (8013988 <nk_layout_widget_space+0x348>)
 8013692:	f009 ff7d 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801369c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d106      	bne.n	80136b6 <nk_layout_widget_space+0x76>
 80136a8:	4bb9      	ldr	r3, [pc, #740]	; (8013990 <nk_layout_widget_space+0x350>)
 80136aa:	4ab6      	ldr	r2, [pc, #728]	; (8013984 <nk_layout_widget_space+0x344>)
 80136ac:	f240 214f 	movw	r1, #591	; 0x24f
 80136b0:	48b5      	ldr	r0, [pc, #724]	; (8013988 <nk_layout_widget_space+0x348>)
 80136b2:	f009 ff6d 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f000 8340 	beq.w	8013d3e <nk_layout_widget_space+0x6fe>
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80136c4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f000 8338 	beq.w	8013d3e <nk_layout_widget_space+0x6fe>
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80136d4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f000 832e 	beq.w	8013d3e <nk_layout_widget_space+0x6fe>
        return;

    win = ctx->current;
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80136e8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80136ec:	607b      	str	r3, [r7, #4]
    layout = win->layout;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136f4:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80136fc:	633b      	str	r3, [r7, #48]	; 0x30
    NK_ASSERT(bounds);
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d106      	bne.n	8013712 <nk_layout_widget_space+0xd2>
 8013704:	4ba3      	ldr	r3, [pc, #652]	; (8013994 <nk_layout_widget_space+0x354>)
 8013706:	4a9f      	ldr	r2, [pc, #636]	; (8013984 <nk_layout_widget_space+0x344>)
 8013708:	f240 2156 	movw	r1, #598	; 0x256
 801370c:	489e      	ldr	r0, [pc, #632]	; (8013988 <nk_layout_widget_space+0x348>)
 801370e:	f009 ff3f 	bl	801d590 <__assert_func>

    spacing = style->window.spacing;
 8013712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013718:	461a      	mov	r2, r3
 801371a:	f107 0314 	add.w	r3, r7, #20
 801371e:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8013722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013726:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8013730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013732:	7819      	ldrb	r1, [r3, #0]
 8013734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013736:	edd3 7a04 	vldr	s15, [r3, #16]
 801373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801373e:	461a      	mov	r2, r3
 8013740:	eeb0 0a67 	vmov.f32	s0, s15
 8013744:	f7ff fc64 	bl	8013010 <nk_layout_row_calculate_usable_space>
 8013748:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                                            layout->bounds.w, layout->row.columns);

    #define NK_FRAC(x) (x - (float)(int)x) /* will be used to remove fookin gaps */
    /* calculate the width of one item inside the current layout space */
    switch (layout->row.type) {
 801374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801374e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8013752:	2b08      	cmp	r3, #8
 8013754:	f200 828b 	bhi.w	8013c6e <nk_layout_widget_space+0x62e>
 8013758:	a201      	add	r2, pc, #4	; (adr r2, 8013760 <nk_layout_widget_space+0x120>)
 801375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801375e:	bf00      	nop
 8013760:	08013785 	.word	0x08013785
 8013764:	08013807 	.word	0x08013807
 8013768:	08013889 	.word	0x08013889
 801376c:	0801396b 	.word	0x0801396b
 8013770:	08013a4f 	.word	0x08013a4f
 8013774:	08013a87 	.word	0x08013a87
 8013778:	08013acb 	.word	0x08013acb
 801377c:	08013b85 	.word	0x08013b85
 8013780:	08013bd1 	.word	0x08013bd1
    case NK_LAYOUT_DYNAMIC_FIXED: {
        /* scaling fixed size widgets item width */
        float w = NK_MAX(1.0f,panel_space) / (float)layout->row.columns;
 8013784:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801378c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013794:	dd02      	ble.n	801379c <nk_layout_widget_space+0x15c>
 8013796:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801379a:	e001      	b.n	80137a0 <nk_layout_widget_space+0x160>
 801379c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80137a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137a4:	ee07 3a10 	vmov	s14, r3
 80137a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80137ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80137b0:	ed87 7a07 	vstr	s14, [r7, #28]
        item_offset = (float)layout->row.index * w;
 80137b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137b8:	ee07 3a90 	vmov	s15, r3
 80137bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80137c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 80137cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80137d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80137dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80137e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 80137ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137f0:	ee07 3a90 	vmov	s15, r3
 80137f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80137f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80137fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013800:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8013804:	e243      	b.n	8013c8e <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_DYNAMIC_ROW: {
        /* scaling single ratio widget width */
        float w = layout->row.item_width * panel_space;
 8013806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013808:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 801380c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013814:	edc7 7a08 	vstr	s15, [r7, #32]
        item_offset = layout->row.item_offset;
 8013818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801381e:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8013820:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801382c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013834:	ed97 7a08 	vldr	s14, [r7, #32]
 8013838:	ee77 7a27 	vadd.f32	s15, s14, s15
 801383c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = 0;
 8013840:	f04f 0300 	mov.w	r3, #0
 8013844:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (modify) {
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 8217 	beq.w	8013c7c <nk_layout_widget_space+0x63c>
            layout->row.item_offset += w + spacing.x;
 801384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013850:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013854:	edd7 6a05 	vldr	s13, [r7, #20]
 8013858:	edd7 7a08 	vldr	s15, [r7, #32]
 801385c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013866:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += layout->row.item_width;
 801386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801386c:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8013870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013872:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8013876:	ee77 7a27 	vadd.f32	s15, s14, s15
 801387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            layout->row.index = 0;
 8013880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013882:	2200      	movs	r2, #0
 8013884:	669a      	str	r2, [r3, #104]	; 0x68
        }
    } break;
 8013886:	e1f9      	b.n	8013c7c <nk_layout_widget_space+0x63c>
    case NK_LAYOUT_DYNAMIC_FREE: {
        /* panel width depended free widget placing */
        bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);
 8013888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801388a:	ed93 7a08 	vldr	s14, [r3, #32]
 801388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013890:	edd3 6a04 	vldr	s13, [r3, #16]
 8013894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013896:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 801389a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801389e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	edc3 7a00 	vstr	s15, [r3]
        bounds->x -= (float)*layout->offset_x;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	ed93 7a00 	vldr	s14, [r3]
 80138ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138b0:	699b      	ldr	r3, [r3, #24]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	ee07 3a90 	vmov	s15, r3
 80138b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);
 80138c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138c8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80138cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ce:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80138d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138d4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80138d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80138dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80138ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ee:	69db      	ldr	r3, [r3, #28]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	ee07 3a90 	vmov	s15, r3
 80138f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->w = layout->bounds.w  * layout->row.item.w + NK_FRAC(bounds->x);
 8013904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013906:	ed93 7a04 	vldr	s14, [r3, #16]
 801390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801390c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8013910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	edd3 6a00 	vldr	s13, [r3]
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	edd3 7a00 	vldr	s15, [r3]
 8013920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013928:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801392c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	edc3 7a02 	vstr	s15, [r3, #8]
        bounds->h = layout->row.height * layout->row.item.h + NK_FRAC(bounds->y);
 8013936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013938:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 801393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801393e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8013942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	edd3 6a01 	vldr	s13, [r3, #4]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801395a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801395e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 8013968:	e1ea      	b.n	8013d40 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_DYNAMIC: {
        /* scaling arrays of panel width ratios for every widget */
        float ratio, w;
        NK_ASSERT(layout->row.ratio);
 801396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801396c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801396e:	2b00      	cmp	r3, #0
 8013970:	d114      	bne.n	801399c <nk_layout_widget_space+0x35c>
 8013972:	4b09      	ldr	r3, [pc, #36]	; (8013998 <nk_layout_widget_space+0x358>)
 8013974:	4a03      	ldr	r2, [pc, #12]	; (8013984 <nk_layout_widget_space+0x344>)
 8013976:	f44f 7120 	mov.w	r1, #640	; 0x280
 801397a:	4803      	ldr	r0, [pc, #12]	; (8013988 <nk_layout_widget_space+0x348>)
 801397c:	f009 fe08 	bl	801d590 <__assert_func>
 8013980:	080212dc 	.word	0x080212dc
 8013984:	08023030 	.word	0x08023030
 8013988:	080212e0 	.word	0x080212e0
 801398c:	080212fc 	.word	0x080212fc
 8013990:	0802130c 	.word	0x0802130c
 8013994:	0802143c 	.word	0x0802143c
 8013998:	08021444 	.word	0x08021444
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 801399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801399e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80139a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139a4:	009b      	lsls	r3, r3, #2
 80139a6:	4413      	add	r3, r2
 80139a8:	edd3 7a00 	vldr	s15, [r3]
            layout->row.item_width : layout->row.ratio[layout->row.index];
 80139ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80139b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b4:	d502      	bpl.n	80139bc <nk_layout_widget_space+0x37c>
 80139b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139ba:	e006      	b.n	80139ca <nk_layout_widget_space+0x38a>
 80139bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139be:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80139c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	4413      	add	r3, r2
 80139c8:	681b      	ldr	r3, [r3, #0]
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 80139ca:	62bb      	str	r3, [r7, #40]	; 0x28

        w = (ratio * panel_space);
 80139cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80139d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80139d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        item_spacing = (float)layout->row.index * spacing.x;
 80139dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139e0:	ee07 3a90 	vmov	s15, r3
 80139e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80139ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_offset = layout->row.item_offset;
 80139f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139fa:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 80139fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a08:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a10:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a18:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

        if (modify) {
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	f000 812e 	beq.w	8013c80 <nk_layout_widget_space+0x640>
            layout->row.item_offset += w;
 8013a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a26:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013a2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a34:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += ratio;
 8013a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a3a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8013a3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a48:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
        }
    } break;
 8013a4c:	e118      	b.n	8013c80 <nk_layout_widget_space+0x640>
    case NK_LAYOUT_STATIC_FIXED: {
        /* non-scaling fixed widgets item width */
        item_width = layout->row.item_width;
 8013a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a52:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = (float)layout->row.index * item_width;
 8013a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a58:	ee07 3a90 	vmov	s15, r3
 8013a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a60:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 8013a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a70:	ee07 3a90 	vmov	s15, r3
 8013a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8013a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8013a84:	e103      	b.n	8013c8e <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_STATIC_ROW: {
        /* scaling single ratio widget width */
        item_width = layout->row.item_width;
 8013a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a8a:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 8013a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a92:	647b      	str	r3, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 8013a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a98:	ee07 3a90 	vmov	s15, r3
 8013a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013aa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8013aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013aa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += item_width;
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f000 80e8 	beq.w	8013c84 <nk_layout_widget_space+0x644>
 8013ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ab6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013aba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8013abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8013ac8:	e0dc      	b.n	8013c84 <nk_layout_widget_space+0x644>
    case NK_LAYOUT_STATIC_FREE: {
        /* free widget placing */
        bounds->x = layout->at_x + layout->row.item.x;
 8013aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013acc:	ed93 7a08 	vldr	s14, [r3, #32]
 8013ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ad2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8013ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	edc3 7a00 	vstr	s15, [r3]
        bounds->w = layout->row.item.w;
 8013ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	609a      	str	r2, [r3, #8]
        if (((bounds->x + bounds->w) > layout->max_x) && modify)
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	ed93 7a00 	vldr	s14, [r3]
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	edd3 7a02 	vldr	s15, [r3, #8]
 8013af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013afc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b08:	dd0d      	ble.n	8013b26 <nk_layout_widget_space+0x4e6>
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d00a      	beq.n	8013b26 <nk_layout_widget_space+0x4e6>
            layout->max_x = (bounds->x + bounds->w);
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	ed93 7a00 	vldr	s14, [r3]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b22:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        bounds->x -= (float)*layout->offset_x;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	ed93 7a00 	vldr	s14, [r3]
 8013b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	ee07 3a90 	vmov	s15, r3
 8013b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + layout->row.item.y;
 8013b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b46:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8013b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b4c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8013b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8013b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b62:	69db      	ldr	r3, [r3, #28]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	ee07 3a90 	vmov	s15, r3
 8013b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->h = layout->row.item.h;
 8013b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b7a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	60da      	str	r2, [r3, #12]
        return;
 8013b82:	e0dd      	b.n	8013d40 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_STATIC: {
        /* non-scaling array of panel pixel width for every widget */
        item_spacing = (float)layout->row.index * spacing.x;
 8013b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b88:	ee07 3a90 	vmov	s15, r3
 8013b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8013b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_width = layout->row.ratio[layout->row.index];
 8013b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b9e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8013ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	4413      	add	r3, r2
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 8013bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bb2:	647b      	str	r3, [r7, #68]	; 0x44
        if (modify) layout->row.item_offset += item_width;
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d066      	beq.n	8013c88 <nk_layout_widget_space+0x648>
 8013bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bbc:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013bc0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8013bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bca:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8013bce:	e05b      	b.n	8013c88 <nk_layout_widget_space+0x648>
    case NK_LAYOUT_TEMPLATE: {
        /* stretchy row layout with combined dynamic/static widget width*/
        float w;
        NK_ASSERT(layout->row.index < layout->row.columns);
 8013bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bd2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	db06      	blt.n	8013bea <nk_layout_widget_space+0x5aa>
 8013bdc:	4b5a      	ldr	r3, [pc, #360]	; (8013d48 <nk_layout_widget_space+0x708>)
 8013bde:	4a5b      	ldr	r2, [pc, #364]	; (8013d4c <nk_layout_widget_space+0x70c>)
 8013be0:	f240 21b1 	movw	r1, #689	; 0x2b1
 8013be4:	485a      	ldr	r0, [pc, #360]	; (8013d50 <nk_layout_widget_space+0x710>)
 8013be6:	f009 fcd3 	bl	801d590 <__assert_func>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 8013bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013bee:	2b0f      	cmp	r3, #15
 8013bf0:	dd06      	ble.n	8013c00 <nk_layout_widget_space+0x5c0>
 8013bf2:	4b58      	ldr	r3, [pc, #352]	; (8013d54 <nk_layout_widget_space+0x714>)
 8013bf4:	4a55      	ldr	r2, [pc, #340]	; (8013d4c <nk_layout_widget_space+0x70c>)
 8013bf6:	f240 21b2 	movw	r1, #690	; 0x2b2
 8013bfa:	4855      	ldr	r0, [pc, #340]	; (8013d50 <nk_layout_widget_space+0x710>)
 8013bfc:	f009 fcc8 	bl	801d590 <__assert_func>
        w = layout->row.templates[layout->row.index];
 8013c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c06:	3326      	adds	r3, #38	; 0x26
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	4413      	add	r3, r2
 8013c0c:	3308      	adds	r3, #8
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        item_offset = layout->row.item_offset;
 8013c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c18:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8013c1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c26:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c2e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8013c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c36:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 8013c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c3e:	ee07 3a90 	vmov	s15, r3
 8013c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8013c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c4e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += w;
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d019      	beq.n	8013c8c <nk_layout_widget_space+0x64c>
 8013c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c5a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013c5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c68:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8013c6c:	e00e      	b.n	8013c8c <nk_layout_widget_space+0x64c>
    #undef NK_FRAC
    default: NK_ASSERT(0); break;
 8013c6e:	4b3a      	ldr	r3, [pc, #232]	; (8013d58 <nk_layout_widget_space+0x718>)
 8013c70:	4a36      	ldr	r2, [pc, #216]	; (8013d4c <nk_layout_widget_space+0x70c>)
 8013c72:	f240 21ba 	movw	r1, #698	; 0x2ba
 8013c76:	4836      	ldr	r0, [pc, #216]	; (8013d50 <nk_layout_widget_space+0x710>)
 8013c78:	f009 fc8a 	bl	801d590 <__assert_func>
    } break;
 8013c7c:	bf00      	nop
 8013c7e:	e006      	b.n	8013c8e <nk_layout_widget_space+0x64e>
    } break;
 8013c80:	bf00      	nop
 8013c82:	e004      	b.n	8013c8e <nk_layout_widget_space+0x64e>
    } break;
 8013c84:	bf00      	nop
 8013c86:	e002      	b.n	8013c8e <nk_layout_widget_space+0x64e>
    } break;
 8013c88:	bf00      	nop
 8013c8a:	e000      	b.n	8013c8e <nk_layout_widget_space+0x64e>
    } break;
 8013c8c:	bf00      	nop
    };

    /* set the bounds of the newly allocated widget */
    bounds->w = item_width;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c92:	609a      	str	r2, [r3, #8]
    bounds->h = layout->row.height - spacing.y;
 8013c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c96:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8013c9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8013c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	edc3 7a03 	vstr	s15, [r3, #12]
    bounds->y = layout->at_y - (float)*layout->offset_y;
 8013ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013caa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8013cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cb0:	69db      	ldr	r3, [r3, #28]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	ee07 3a90 	vmov	s15, r3
 8013cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->x = layout->at_x + item_offset + item_spacing;
 8013cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cc8:	ed93 7a08 	vldr	s14, [r3, #32]
 8013ccc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cd4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	edc3 7a00 	vstr	s15, [r3]
    if (((bounds->x + bounds->w) > layout->max_x) && modify)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	ed93 7a00 	vldr	s14, [r3]
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	edd3 7a02 	vldr	s15, [r3, #8]
 8013cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cf4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d00:	dd0d      	ble.n	8013d1e <nk_layout_widget_space+0x6de>
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00a      	beq.n	8013d1e <nk_layout_widget_space+0x6de>
        layout->max_x = bounds->x + bounds->w;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	ed93 7a00 	vldr	s14, [r3]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	edd3 7a02 	vldr	s15, [r3, #8]
 8013d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d1a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    bounds->x -= (float)*layout->offset_x;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	ed93 7a00 	vldr	s14, [r3]
 8013d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d26:	699b      	ldr	r3, [r3, #24]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	ee07 3a90 	vmov	s15, r3
 8013d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	edc3 7a00 	vstr	s15, [r3]
 8013d3c:	e000      	b.n	8013d40 <nk_layout_widget_space+0x700>
        return;
 8013d3e:	bf00      	nop
}
 8013d40:	3748      	adds	r7, #72	; 0x48
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	08021458 	.word	0x08021458
 8013d4c:	08023030 	.word	0x08023030
 8013d50:	080212e0 	.word	0x080212e0
 8013d54:	08021480 	.word	0x08021480
 8013d58:	08021498 	.word	0x08021498

08013d5c <nk_panel_alloc_space>:
NK_LIB void
nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b084      	sub	sp, #16
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	6039      	str	r1, [r7, #0]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d106      	bne.n	8013d7a <nk_panel_alloc_space+0x1e>
 8013d6c:	4b2d      	ldr	r3, [pc, #180]	; (8013e24 <nk_panel_alloc_space+0xc8>)
 8013d6e:	4a2e      	ldr	r2, [pc, #184]	; (8013e28 <nk_panel_alloc_space+0xcc>)
 8013d70:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8013d74:	482d      	ldr	r0, [pc, #180]	; (8013e2c <nk_panel_alloc_space+0xd0>)
 8013d76:	f009 fc0b 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d80:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d106      	bne.n	8013d96 <nk_panel_alloc_space+0x3a>
 8013d88:	4b29      	ldr	r3, [pc, #164]	; (8013e30 <nk_panel_alloc_space+0xd4>)
 8013d8a:	4a27      	ldr	r2, [pc, #156]	; (8013e28 <nk_panel_alloc_space+0xcc>)
 8013d8c:	f240 21cd 	movw	r1, #717	; 0x2cd
 8013d90:	4826      	ldr	r0, [pc, #152]	; (8013e2c <nk_panel_alloc_space+0xd0>)
 8013d92:	f009 fbfd 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d9c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d106      	bne.n	8013db6 <nk_panel_alloc_space+0x5a>
 8013da8:	4b22      	ldr	r3, [pc, #136]	; (8013e34 <nk_panel_alloc_space+0xd8>)
 8013daa:	4a1f      	ldr	r2, [pc, #124]	; (8013e28 <nk_panel_alloc_space+0xcc>)
 8013dac:	f240 21ce 	movw	r1, #718	; 0x2ce
 8013db0:	481e      	ldr	r0, [pc, #120]	; (8013e2c <nk_panel_alloc_space+0xd0>)
 8013db2:	f009 fbed 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d02f      	beq.n	8013e1c <nk_panel_alloc_space+0xc0>
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013dc2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d028      	beq.n	8013e1c <nk_panel_alloc_space+0xc0>
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013dd0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d01f      	beq.n	8013e1c <nk_panel_alloc_space+0xc0>
        return;

    /* check if the end of the row has been hit and begin new row if so */
    win = ctx->current;
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013de2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013de6:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013dee:	60bb      	str	r3, [r7, #8]
    if (layout->row.index >= layout->row.columns)
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	db03      	blt.n	8013e04 <nk_panel_alloc_space+0xa8>
        nk_panel_alloc_row(ctx, win);
 8013dfc:	68f9      	ldr	r1, [r7, #12]
 8013dfe:	6838      	ldr	r0, [r7, #0]
 8013e00:	f7ff fbf2 	bl	80135e8 <nk_panel_alloc_row>

    /* calculate widget position and size */
    nk_layout_widget_space(bounds, ctx, win, nk_true);
 8013e04:	2301      	movs	r3, #1
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	6839      	ldr	r1, [r7, #0]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7ff fc18 	bl	8013640 <nk_layout_widget_space>
    layout->row.index++;
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e14:	1c5a      	adds	r2, r3, #1
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	669a      	str	r2, [r3, #104]	; 0x68
 8013e1a:	e000      	b.n	8013e1e <nk_panel_alloc_space+0xc2>
        return;
 8013e1c:	bf00      	nop
}
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	080212dc 	.word	0x080212dc
 8013e28:	08023048 	.word	0x08023048
 8013e2c:	080212e0 	.word	0x080212e0
 8013e30:	080212fc 	.word	0x080212fc
 8013e34:	0802130c 	.word	0x0802130c

08013e38 <nk_round_up_pow2>:
    return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*(a7 + x*a8)))))));
}
#endif
NK_LIB nk_uint
nk_round_up_pow2(nk_uint v)
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
    v--;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	3b01      	subs	r3, #1
 8013e44:	607b      	str	r3, [r7, #4]
    v |= v >> 1;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	085b      	lsrs	r3, r3, #1
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	607b      	str	r3, [r7, #4]
    v |= v >> 2;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	089b      	lsrs	r3, r3, #2
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	4313      	orrs	r3, r2
 8013e58:	607b      	str	r3, [r7, #4]
    v |= v >> 4;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	091b      	lsrs	r3, r3, #4
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	4313      	orrs	r3, r2
 8013e62:	607b      	str	r3, [r7, #4]
    v |= v >> 8;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	0a1b      	lsrs	r3, r3, #8
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	607b      	str	r3, [r7, #4]
    v |= v >> 16;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	0c1b      	lsrs	r3, r3, #16
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	4313      	orrs	r3, r2
 8013e76:	607b      	str	r3, [r7, #4]
    v++;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	607b      	str	r3, [r7, #4]
    return v;
 8013e7e:	687b      	ldr	r3, [r7, #4]
}
 8013e80:	4618      	mov	r0, r3
 8013e82:	370c      	adds	r7, #12
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <nk_rect>:
{
    return nk_null_rect;
}
NK_API struct nk_rect
nk_rect(float x, float y, float w, float h)
{
 8013e8c:	b490      	push	{r4, r7}
 8013e8e:	b090      	sub	sp, #64	; 0x40
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	ed87 0a07 	vstr	s0, [r7, #28]
 8013e96:	edc7 0a06 	vstr	s1, [r7, #24]
 8013e9a:	ed87 1a05 	vstr	s2, [r7, #20]
 8013e9e:	edc7 1a04 	vstr	s3, [r7, #16]
    struct nk_rect r;
    r.x = x; r.y = y;
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	623b      	str	r3, [r7, #32]
 8013ea6:	69bb      	ldr	r3, [r7, #24]
 8013ea8:	627b      	str	r3, [r7, #36]	; 0x24
    r.w = w; r.h = h;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 8013eb2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8013eb6:	f107 0320 	add.w	r3, r7, #32
 8013eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ec8:	ee06 0a10 	vmov	s12, r0
 8013ecc:	ee06 1a90 	vmov	s13, r1
 8013ed0:	ee07 2a10 	vmov	s14, r2
 8013ed4:	ee07 3a90 	vmov	s15, r3
}
 8013ed8:	eeb0 0a46 	vmov.f32	s0, s12
 8013edc:	eef0 0a66 	vmov.f32	s1, s13
 8013ee0:	eeb0 1a47 	vmov.f32	s2, s14
 8013ee4:	eef0 1a67 	vmov.f32	s3, s15
 8013ee8:	3740      	adds	r7, #64	; 0x40
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bc90      	pop	{r4, r7}
 8013eee:	4770      	bx	lr

08013ef0 <nk_shrink_rect>:
    ret.x = r.w; ret.y = r.h;
    return ret;
}
NK_LIB struct nk_rect
nk_shrink_rect(struct nk_rect r, float amount)
{
 8013ef0:	b490      	push	{r4, r7}
 8013ef2:	b092      	sub	sp, #72	; 0x48
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	eeb0 6a40 	vmov.f32	s12, s0
 8013efa:	eef0 6a60 	vmov.f32	s13, s1
 8013efe:	eeb0 7a41 	vmov.f32	s14, s2
 8013f02:	eef0 7a61 	vmov.f32	s15, s3
 8013f06:	ed87 2a05 	vstr	s4, [r7, #20]
 8013f0a:	ed87 6a06 	vstr	s12, [r7, #24]
 8013f0e:	edc7 6a07 	vstr	s13, [r7, #28]
 8013f12:	ed87 7a08 	vstr	s14, [r7, #32]
 8013f16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    struct nk_rect res;
    r.w = NK_MAX(r.w, 2 * amount);
 8013f1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8013f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f2e:	d504      	bpl.n	8013f3a <nk_shrink_rect+0x4a>
 8013f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f38:	e001      	b.n	8013f3e <nk_shrink_rect+0x4e>
 8013f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8013f3e:	edc7 7a08 	vstr	s15, [r7, #32]
    r.h = NK_MAX(r.h, 2 * amount);
 8013f42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013f46:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f56:	d504      	bpl.n	8013f62 <nk_shrink_rect+0x72>
 8013f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f60:	e001      	b.n	8013f66 <nk_shrink_rect+0x76>
 8013f62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013f66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    res.x = r.x + amount;
 8013f6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8013f6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    res.y = r.y + amount;
 8013f7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8013f7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    res.w = r.w - 2 * amount;
 8013f8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8013f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013f92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f9a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    res.h = r.h - 2 * amount;
 8013f9e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013fa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8013fa6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return res;
 8013fb2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8013fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013fc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013fc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc8:	ee06 0a10 	vmov	s12, r0
 8013fcc:	ee06 1a90 	vmov	s13, r1
 8013fd0:	ee07 2a10 	vmov	s14, r2
 8013fd4:	ee07 3a90 	vmov	s15, r3
}
 8013fd8:	eeb0 0a46 	vmov.f32	s0, s12
 8013fdc:	eef0 0a66 	vmov.f32	s1, s13
 8013fe0:	eeb0 1a47 	vmov.f32	s2, s14
 8013fe4:	eef0 1a67 	vmov.f32	s3, s15
 8013fe8:	3748      	adds	r7, #72	; 0x48
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bc90      	pop	{r4, r7}
 8013fee:	4770      	bx	lr

08013ff0 <nk_vec2>:
    r.h -= 2 * pad.y;
    return r;
}
NK_API struct nk_vec2
nk_vec2(float x, float y)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b089      	sub	sp, #36	; 0x24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	ed87 0a03 	vstr	s0, [r7, #12]
 8013ffa:	edc7 0a02 	vstr	s1, [r7, #8]
    struct nk_vec2 ret;
    ret.x = x; ret.y = y;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	613b      	str	r3, [r7, #16]
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	617b      	str	r3, [r7, #20]
    return ret;
 8014006:	f107 0318 	add.w	r3, r7, #24
 801400a:	f107 0210 	add.w	r2, r7, #16
 801400e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014012:	e883 0003 	stmia.w	r3, {r0, r1}
 8014016:	69ba      	ldr	r2, [r7, #24]
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	ee07 2a10 	vmov	s14, r2
 801401e:	ee07 3a90 	vmov	s15, r3
}
 8014022:	eeb0 0a47 	vmov.f32	s0, s14
 8014026:	eef0 0a67 	vmov.f32	s1, s15
 801402a:	3724      	adds	r7, #36	; 0x24
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr

08014034 <nk_unify>:
    return nk_vec2i(v[0], v[1]);
}
NK_LIB void
nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,
    float x1, float y1)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af00      	add	r7, sp, #0
 801403a:	6178      	str	r0, [r7, #20]
 801403c:	6139      	str	r1, [r7, #16]
 801403e:	ed87 0a03 	vstr	s0, [r7, #12]
 8014042:	edc7 0a02 	vstr	s1, [r7, #8]
 8014046:	ed87 1a01 	vstr	s2, [r7, #4]
 801404a:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(a);
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d106      	bne.n	8014062 <nk_unify+0x2e>
 8014054:	4b4b      	ldr	r3, [pc, #300]	; (8014184 <nk_unify+0x150>)
 8014056:	4a4c      	ldr	r2, [pc, #304]	; (8014188 <nk_unify+0x154>)
 8014058:	f240 1101 	movw	r1, #257	; 0x101
 801405c:	484b      	ldr	r0, [pc, #300]	; (801418c <nk_unify+0x158>)
 801405e:	f009 fa97 	bl	801d590 <__assert_func>
    NK_ASSERT(clip);
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d106      	bne.n	8014076 <nk_unify+0x42>
 8014068:	4b49      	ldr	r3, [pc, #292]	; (8014190 <nk_unify+0x15c>)
 801406a:	4a47      	ldr	r2, [pc, #284]	; (8014188 <nk_unify+0x154>)
 801406c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8014070:	4846      	ldr	r0, [pc, #280]	; (801418c <nk_unify+0x158>)
 8014072:	f009 fa8d 	bl	801d590 <__assert_func>
    clip->x = NK_MAX(a->x, x0);
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	edd3 7a00 	vldr	s15, [r3]
 801407c:	ed97 7a03 	vldr	s14, [r7, #12]
 8014080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014088:	dd01      	ble.n	801408e <nk_unify+0x5a>
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	e001      	b.n	8014092 <nk_unify+0x5e>
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	697a      	ldr	r2, [r7, #20]
 8014094:	6013      	str	r3, [r2, #0]
    clip->y = NK_MAX(a->y, y0);
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	edd3 7a01 	vldr	s15, [r3, #4]
 801409c:	ed97 7a02 	vldr	s14, [r7, #8]
 80140a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a8:	dd01      	ble.n	80140ae <nk_unify+0x7a>
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	e001      	b.n	80140b2 <nk_unify+0x7e>
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	697a      	ldr	r2, [r7, #20]
 80140b4:	6053      	str	r3, [r2, #4]
    clip->w = NK_MIN(a->x + a->w, x1) - clip->x;
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	ed93 7a00 	vldr	s14, [r3]
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	edd3 7a02 	vldr	s15, [r3, #8]
 80140c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80140ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d2:	dd08      	ble.n	80140e6 <nk_unify+0xb2>
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	ed93 7a00 	vldr	s14, [r3]
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80140e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140e4:	e001      	b.n	80140ea <nk_unify+0xb6>
 80140e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	ed93 7a00 	vldr	s14, [r3]
 80140f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	edc3 7a02 	vstr	s15, [r3, #8]
    clip->h = NK_MIN(a->y + a->h, y1) - clip->y;
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	edd3 7a03 	vldr	s15, [r3, #12]
 8014106:	ee77 7a27 	vadd.f32	s15, s14, s15
 801410a:	ed97 7a00 	vldr	s14, [r7]
 801410e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014116:	dd08      	ble.n	801412a <nk_unify+0xf6>
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	ed93 7a01 	vldr	s14, [r3, #4]
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	edd3 7a03 	vldr	s15, [r3, #12]
 8014124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014128:	e001      	b.n	801412e <nk_unify+0xfa>
 801412a:	edd7 7a00 	vldr	s15, [r7]
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	ed93 7a01 	vldr	s14, [r3, #4]
 8014134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	edc3 7a03 	vstr	s15, [r3, #12]
    clip->w = NK_MAX(0, clip->w);
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	edd3 7a02 	vldr	s15, [r3, #8]
 8014144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414c:	dd02      	ble.n	8014154 <nk_unify+0x120>
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	689b      	ldr	r3, [r3, #8]
 8014152:	e001      	b.n	8014158 <nk_unify+0x124>
 8014154:	f04f 0300 	mov.w	r3, #0
 8014158:	697a      	ldr	r2, [r7, #20]
 801415a:	6093      	str	r3, [r2, #8]
    clip->h = NK_MAX(0, clip->h);
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	edd3 7a03 	vldr	s15, [r3, #12]
 8014162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416a:	dd02      	ble.n	8014172 <nk_unify+0x13e>
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	e001      	b.n	8014176 <nk_unify+0x142>
 8014172:	f04f 0300 	mov.w	r3, #0
 8014176:	697a      	ldr	r2, [r7, #20]
 8014178:	60d3      	str	r3, [r2, #12]
}
 801417a:	bf00      	nop
 801417c:	3718      	adds	r7, #24
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	0802149c 	.word	0x0802149c
 8014188:	08023060 	.word	0x08023060
 801418c:	080214a0 	.word	0x080214a0
 8014190:	080214bc 	.word	0x080214bc

08014194 <nk_triangle_from_direction>:

NK_API void
nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,
    float pad_x, float pad_y, enum nk_heading direction)
{
 8014194:	b590      	push	{r4, r7, lr}
 8014196:	b08b      	sub	sp, #44	; 0x2c
 8014198:	af00      	add	r7, sp, #0
 801419a:	61f8      	str	r0, [r7, #28]
 801419c:	eeb0 6a40 	vmov.f32	s12, s0
 80141a0:	eef0 6a60 	vmov.f32	s13, s1
 80141a4:	eeb0 7a41 	vmov.f32	s14, s2
 80141a8:	eef0 7a61 	vmov.f32	s15, s3
 80141ac:	ed87 2a02 	vstr	s4, [r7, #8]
 80141b0:	edc7 2a01 	vstr	s5, [r7, #4]
 80141b4:	460b      	mov	r3, r1
 80141b6:	ed87 6a03 	vstr	s12, [r7, #12]
 80141ba:	edc7 6a04 	vstr	s13, [r7, #16]
 80141be:	ed87 7a05 	vstr	s14, [r7, #20]
 80141c2:	edc7 7a06 	vstr	s15, [r7, #24]
 80141c6:	70fb      	strb	r3, [r7, #3]
    float w_half, h_half;
    NK_ASSERT(result);
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d106      	bne.n	80141dc <nk_triangle_from_direction+0x48>
 80141ce:	4bcf      	ldr	r3, [pc, #828]	; (801450c <nk_triangle_from_direction+0x378>)
 80141d0:	4acf      	ldr	r2, [pc, #828]	; (8014510 <nk_triangle_from_direction+0x37c>)
 80141d2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80141d6:	48cf      	ldr	r0, [pc, #828]	; (8014514 <nk_triangle_from_direction+0x380>)
 80141d8:	f009 f9da 	bl	801d590 <__assert_func>

    r.w = NK_MAX(2 * pad_x, r.w);
 80141dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80141e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80141e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80141e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f0:	d502      	bpl.n	80141f8 <nk_triangle_from_direction+0x64>
 80141f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80141f6:	e003      	b.n	8014200 <nk_triangle_from_direction+0x6c>
 80141f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80141fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014200:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = NK_MAX(2 * pad_y, r.h);
 8014204:	edd7 7a01 	vldr	s15, [r7, #4]
 8014208:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801420c:	edd7 7a06 	vldr	s15, [r7, #24]
 8014210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014218:	d502      	bpl.n	8014220 <nk_triangle_from_direction+0x8c>
 801421a:	edd7 7a06 	vldr	s15, [r7, #24]
 801421e:	e003      	b.n	8014228 <nk_triangle_from_direction+0x94>
 8014220:	edd7 7a01 	vldr	s15, [r7, #4]
 8014224:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014228:	edc7 7a06 	vstr	s15, [r7, #24]
    r.w = r.w - 2 * pad_x;
 801422c:	ed97 7a05 	vldr	s14, [r7, #20]
 8014230:	edd7 7a02 	vldr	s15, [r7, #8]
 8014234:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014238:	ee77 7a67 	vsub.f32	s15, s14, s15
 801423c:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = r.h - 2 * pad_y;
 8014240:	ed97 7a06 	vldr	s14, [r7, #24]
 8014244:	edd7 7a01 	vldr	s15, [r7, #4]
 8014248:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801424c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014250:	edc7 7a06 	vstr	s15, [r7, #24]

    r.x = r.x + pad_x;
 8014254:	ed97 7a03 	vldr	s14, [r7, #12]
 8014258:	edd7 7a02 	vldr	s15, [r7, #8]
 801425c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014260:	edc7 7a03 	vstr	s15, [r7, #12]
    r.y = r.y + pad_y;
 8014264:	ed97 7a04 	vldr	s14, [r7, #16]
 8014268:	edd7 7a01 	vldr	s15, [r7, #4]
 801426c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014270:	edc7 7a04 	vstr	s15, [r7, #16]

    w_half = r.w / 2.0f;
 8014274:	ed97 7a05 	vldr	s14, [r7, #20]
 8014278:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801427c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014280:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    h_half = r.h / 2.0f;
 8014284:	ed97 7a06 	vldr	s14, [r7, #24]
 8014288:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801428c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014290:	edc7 7a08 	vstr	s15, [r7, #32]

    if (direction == NK_UP) {
 8014294:	78fb      	ldrb	r3, [r7, #3]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d14d      	bne.n	8014336 <nk_triangle_from_direction+0x1a2>
        result[0] = nk_vec2(r.x + w_half, r.y);
 801429a:	ed97 7a03 	vldr	s14, [r7, #12]
 801429e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80142a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80142aa:	eef0 0a47 	vmov.f32	s1, s14
 80142ae:	eeb0 0a67 	vmov.f32	s0, s15
 80142b2:	f7ff fe9d 	bl	8013ff0 <nk_vec2>
 80142b6:	eeb0 7a40 	vmov.f32	s14, s0
 80142ba:	eef0 7a60 	vmov.f32	s15, s1
 80142be:	69fb      	ldr	r3, [r7, #28]
 80142c0:	ed83 7a00 	vstr	s14, [r3]
 80142c4:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 80142c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80142cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80142d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80142d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80142d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80142dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	f103 0408 	add.w	r4, r3, #8
 80142e6:	eef0 0a67 	vmov.f32	s1, s15
 80142ea:	eeb0 0a66 	vmov.f32	s0, s13
 80142ee:	f7ff fe7f 	bl	8013ff0 <nk_vec2>
 80142f2:	eeb0 7a40 	vmov.f32	s14, s0
 80142f6:	eef0 7a60 	vmov.f32	s15, s1
 80142fa:	ed84 7a00 	vstr	s14, [r4]
 80142fe:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8014302:	edd7 6a03 	vldr	s13, [r7, #12]
 8014306:	ed97 7a04 	vldr	s14, [r7, #16]
 801430a:	edd7 7a06 	vldr	s15, [r7, #24]
 801430e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	f103 0410 	add.w	r4, r3, #16
 8014318:	eef0 0a67 	vmov.f32	s1, s15
 801431c:	eeb0 0a66 	vmov.f32	s0, s13
 8014320:	f7ff fe66 	bl	8013ff0 <nk_vec2>
 8014324:	eeb0 7a40 	vmov.f32	s14, s0
 8014328:	eef0 7a60 	vmov.f32	s15, s1
 801432c:	ed84 7a00 	vstr	s14, [r4]
 8014330:	edc4 7a01 	vstr	s15, [r4, #4]
    } else {
        result[0] = nk_vec2(r.x, r.y + h_half);
        result[1] = nk_vec2(r.x + r.w, r.y);
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
    }
}
 8014334:	e0e6      	b.n	8014504 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_RIGHT) {
 8014336:	78fb      	ldrb	r3, [r7, #3]
 8014338:	2b01      	cmp	r3, #1
 801433a:	d149      	bne.n	80143d0 <nk_triangle_from_direction+0x23c>
        result[0] = nk_vec2(r.x, r.y);
 801433c:	edd7 7a03 	vldr	s15, [r7, #12]
 8014340:	ed97 7a04 	vldr	s14, [r7, #16]
 8014344:	eef0 0a47 	vmov.f32	s1, s14
 8014348:	eeb0 0a67 	vmov.f32	s0, s15
 801434c:	f7ff fe50 	bl	8013ff0 <nk_vec2>
 8014350:	eeb0 7a40 	vmov.f32	s14, s0
 8014354:	eef0 7a60 	vmov.f32	s15, s1
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	ed83 7a00 	vstr	s14, [r3]
 801435e:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
 8014362:	ed97 7a03 	vldr	s14, [r7, #12]
 8014366:	edd7 7a05 	vldr	s15, [r7, #20]
 801436a:	ee77 6a27 	vadd.f32	s13, s14, s15
 801436e:	ed97 7a04 	vldr	s14, [r7, #16]
 8014372:	edd7 7a08 	vldr	s15, [r7, #32]
 8014376:	ee77 7a27 	vadd.f32	s15, s14, s15
 801437a:	69fb      	ldr	r3, [r7, #28]
 801437c:	f103 0408 	add.w	r4, r3, #8
 8014380:	eef0 0a67 	vmov.f32	s1, s15
 8014384:	eeb0 0a66 	vmov.f32	s0, s13
 8014388:	f7ff fe32 	bl	8013ff0 <nk_vec2>
 801438c:	eeb0 7a40 	vmov.f32	s14, s0
 8014390:	eef0 7a60 	vmov.f32	s15, s1
 8014394:	ed84 7a00 	vstr	s14, [r4]
 8014398:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 801439c:	edd7 6a03 	vldr	s13, [r7, #12]
 80143a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80143a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80143a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	f103 0410 	add.w	r4, r3, #16
 80143b2:	eef0 0a67 	vmov.f32	s1, s15
 80143b6:	eeb0 0a66 	vmov.f32	s0, s13
 80143ba:	f7ff fe19 	bl	8013ff0 <nk_vec2>
 80143be:	eeb0 7a40 	vmov.f32	s14, s0
 80143c2:	eef0 7a60 	vmov.f32	s15, s1
 80143c6:	ed84 7a00 	vstr	s14, [r4]
 80143ca:	edc4 7a01 	vstr	s15, [r4, #4]
}
 80143ce:	e099      	b.n	8014504 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_DOWN) {
 80143d0:	78fb      	ldrb	r3, [r7, #3]
 80143d2:	2b02      	cmp	r3, #2
 80143d4:	d149      	bne.n	801446a <nk_triangle_from_direction+0x2d6>
        result[0] = nk_vec2(r.x, r.y);
 80143d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80143da:	ed97 7a04 	vldr	s14, [r7, #16]
 80143de:	eef0 0a47 	vmov.f32	s1, s14
 80143e2:	eeb0 0a67 	vmov.f32	s0, s15
 80143e6:	f7ff fe03 	bl	8013ff0 <nk_vec2>
 80143ea:	eeb0 7a40 	vmov.f32	s14, s0
 80143ee:	eef0 7a60 	vmov.f32	s15, s1
 80143f2:	69fb      	ldr	r3, [r7, #28]
 80143f4:	ed83 7a00 	vstr	s14, [r3]
 80143f8:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 80143fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8014400:	edd7 7a05 	vldr	s15, [r7, #20]
 8014404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014408:	ed97 7a04 	vldr	s14, [r7, #16]
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	f103 0408 	add.w	r4, r3, #8
 8014412:	eef0 0a47 	vmov.f32	s1, s14
 8014416:	eeb0 0a67 	vmov.f32	s0, s15
 801441a:	f7ff fde9 	bl	8013ff0 <nk_vec2>
 801441e:	eeb0 7a40 	vmov.f32	s14, s0
 8014422:	eef0 7a60 	vmov.f32	s15, s1
 8014426:	ed84 7a00 	vstr	s14, [r4]
 801442a:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + w_half, r.y + r.h);
 801442e:	ed97 7a03 	vldr	s14, [r7, #12]
 8014432:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014436:	ee77 6a27 	vadd.f32	s13, s14, s15
 801443a:	ed97 7a04 	vldr	s14, [r7, #16]
 801443e:	edd7 7a06 	vldr	s15, [r7, #24]
 8014442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014446:	69fb      	ldr	r3, [r7, #28]
 8014448:	f103 0410 	add.w	r4, r3, #16
 801444c:	eef0 0a67 	vmov.f32	s1, s15
 8014450:	eeb0 0a66 	vmov.f32	s0, s13
 8014454:	f7ff fdcc 	bl	8013ff0 <nk_vec2>
 8014458:	eeb0 7a40 	vmov.f32	s14, s0
 801445c:	eef0 7a60 	vmov.f32	s15, s1
 8014460:	ed84 7a00 	vstr	s14, [r4]
 8014464:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8014468:	e04c      	b.n	8014504 <nk_triangle_from_direction+0x370>
        result[0] = nk_vec2(r.x, r.y + h_half);
 801446a:	edd7 6a03 	vldr	s13, [r7, #12]
 801446e:	ed97 7a04 	vldr	s14, [r7, #16]
 8014472:	edd7 7a08 	vldr	s15, [r7, #32]
 8014476:	ee77 7a27 	vadd.f32	s15, s14, s15
 801447a:	eef0 0a67 	vmov.f32	s1, s15
 801447e:	eeb0 0a66 	vmov.f32	s0, s13
 8014482:	f7ff fdb5 	bl	8013ff0 <nk_vec2>
 8014486:	eeb0 7a40 	vmov.f32	s14, s0
 801448a:	eef0 7a60 	vmov.f32	s15, s1
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	ed83 7a00 	vstr	s14, [r3]
 8014494:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8014498:	ed97 7a03 	vldr	s14, [r7, #12]
 801449c:	edd7 7a05 	vldr	s15, [r7, #20]
 80144a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	f103 0408 	add.w	r4, r3, #8
 80144ae:	eef0 0a47 	vmov.f32	s1, s14
 80144b2:	eeb0 0a67 	vmov.f32	s0, s15
 80144b6:	f7ff fd9b 	bl	8013ff0 <nk_vec2>
 80144ba:	eeb0 7a40 	vmov.f32	s14, s0
 80144be:	eef0 7a60 	vmov.f32	s15, s1
 80144c2:	ed84 7a00 	vstr	s14, [r4]
 80144c6:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
 80144ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80144ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80144d2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80144d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80144da:	edd7 7a06 	vldr	s15, [r7, #24]
 80144de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144e2:	69fb      	ldr	r3, [r7, #28]
 80144e4:	f103 0410 	add.w	r4, r3, #16
 80144e8:	eef0 0a67 	vmov.f32	s1, s15
 80144ec:	eeb0 0a66 	vmov.f32	s0, s13
 80144f0:	f7ff fd7e 	bl	8013ff0 <nk_vec2>
 80144f4:	eeb0 7a40 	vmov.f32	s14, s0
 80144f8:	eef0 7a60 	vmov.f32	s15, s1
 80144fc:	ed84 7a00 	vstr	s14, [r4]
 8014500:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8014504:	bf00      	nop
 8014506:	372c      	adds	r7, #44	; 0x2c
 8014508:	46bd      	mov	sp, r7
 801450a:	bd90      	pop	{r4, r7, pc}
 801450c:	080214c4 	.word	0x080214c4
 8014510:	0802306c 	.word	0x0802306c
 8014514:	080214a0 	.word	0x080214a0

08014518 <nk_create_page_element>:
 *                          PAGE ELEMENT
 *
 * ===============================================================*/
NK_LIB struct nk_page_element*
nk_create_page_element(struct nk_context *ctx)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    if (ctx->freelist) {
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014526:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00e      	beq.n	801454c <nk_create_page_element+0x34>
        /* unlink page element from free list */
        elem = ctx->freelist;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014534:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8014538:	60fb      	str	r3, [r7, #12]
        ctx->freelist = elem->next;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8014546:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
 801454a:	e036      	b.n	80145ba <nk_create_page_element+0xa2>
    } else if (ctx->use_pool) {
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014552:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8014556:	2b00      	cmp	r3, #0
 8014558:	d015      	beq.n	8014586 <nk_create_page_element+0x6e>
        /* allocate page element from memory pool */
        elem = nk_pool_alloc(&ctx->pool);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8014560:	3324      	adds	r3, #36	; 0x24
 8014562:	4618      	mov	r0, r3
 8014564:	f002 fa88 	bl	8016a78 <nk_pool_alloc>
 8014568:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d105      	bne.n	801457c <nk_create_page_element+0x64>
 8014570:	4b1b      	ldr	r3, [pc, #108]	; (80145e0 <nk_create_page_element+0xc8>)
 8014572:	4a1c      	ldr	r2, [pc, #112]	; (80145e4 <nk_create_page_element+0xcc>)
 8014574:	2114      	movs	r1, #20
 8014576:	481c      	ldr	r0, [pc, #112]	; (80145e8 <nk_create_page_element+0xd0>)
 8014578:	f009 f80a 	bl	801d590 <__assert_func>
        if (!elem) return 0;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d11b      	bne.n	80145ba <nk_create_page_element+0xa2>
 8014582:	2300      	movs	r3, #0
 8014584:	e027      	b.n	80145d6 <nk_create_page_element+0xbe>
    } else {
        /* allocate new page element from back of fixed size memory buffer */
        NK_STORAGE const nk_size size = sizeof(struct nk_page_element);
        NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f503 50d4 	add.w	r0, r3, #6784	; 0x1a80
 801458c:	300c      	adds	r0, #12
 801458e:	4b17      	ldr	r3, [pc, #92]	; (80145ec <nk_create_page_element+0xd4>)
 8014590:	681a      	ldr	r2, [r3, #0]
 8014592:	4b17      	ldr	r3, [pc, #92]	; (80145f0 <nk_create_page_element+0xd8>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2101      	movs	r1, #1
 8014598:	f7f9 fecc 	bl	800e334 <nk_buffer_alloc>
 801459c:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d105      	bne.n	80145b0 <nk_create_page_element+0x98>
 80145a4:	4b0e      	ldr	r3, [pc, #56]	; (80145e0 <nk_create_page_element+0xc8>)
 80145a6:	4a0f      	ldr	r2, [pc, #60]	; (80145e4 <nk_create_page_element+0xcc>)
 80145a8:	211b      	movs	r1, #27
 80145aa:	480f      	ldr	r0, [pc, #60]	; (80145e8 <nk_create_page_element+0xd0>)
 80145ac:	f008 fff0 	bl	801d590 <__assert_func>
        if (!elem) return 0;
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d101      	bne.n	80145ba <nk_create_page_element+0xa2>
 80145b6:	2300      	movs	r3, #0
 80145b8:	e00d      	b.n	80145d6 <nk_create_page_element+0xbe>
    }
    nk_zero_struct(*elem);
 80145ba:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f007 faee 	bl	801bba0 <nk_zero>
    elem->next = 0;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2200      	movs	r2, #0
 80145c8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    elem->prev = 0;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	2200      	movs	r2, #0
 80145d0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    return elem;
 80145d4:	68fb      	ldr	r3, [r7, #12]
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3710      	adds	r7, #16
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	080214cc 	.word	0x080214cc
 80145e4:	08023088 	.word	0x08023088
 80145e8:	080214d4 	.word	0x080214d4
 80145ec:	080230a0 	.word	0x080230a0
 80145f0:	080230a4 	.word	0x080230a4

080145f4 <nk_link_page_element_into_freelist>:
NK_LIB void
nk_link_page_element_into_freelist(struct nk_context *ctx,
    struct nk_page_element *elem)
{
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
    /* link table into freelist */
    if (!ctx->freelist) {
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014604:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8014608:	2b00      	cmp	r3, #0
 801460a:	d107      	bne.n	801461c <nk_link_page_element_into_freelist+0x28>
        ctx->freelist = elem;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014612:	461a      	mov	r2, r3
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
    } else {
        elem->next = ctx->freelist;
        ctx->freelist = elem;
    }
}
 801461a:	e00e      	b.n	801463a <nk_link_page_element_into_freelist+0x46>
        elem->next = ctx->freelist;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014622:	f8d3 265c 	ldr.w	r2, [r3, #1628]	; 0x65c
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        ctx->freelist = elem;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014632:	461a      	mov	r2, r3
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
}
 801463a:	bf00      	nop
 801463c:	370c      	adds	r7, #12
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr

08014646 <nk_free_page_element>:
NK_LIB void
nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)
{
 8014646:	b580      	push	{r7, lr}
 8014648:	b084      	sub	sp, #16
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
 801464e:	6039      	str	r1, [r7, #0]
    /* we have a pool so just add to free list */
    if (ctx->use_pool) {
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014656:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 801465a:	2b00      	cmp	r3, #0
 801465c:	d004      	beq.n	8014668 <nk_free_page_element+0x22>
        nk_link_page_element_into_freelist(ctx, elem);
 801465e:	6839      	ldr	r1, [r7, #0]
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f7ff ffc7 	bl	80145f4 <nk_link_page_element_into_freelist>
        return;
 8014666:	e024      	b.n	80146b2 <nk_free_page_element+0x6c>
    }
    /* if possible remove last element from back of fixed memory buffer */
    {void *elem_end = (void*)(elem + 1);
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801466e:	60fb      	str	r3, [r7, #12]
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014676:	f8d3 2aac 	ldr.w	r2, [r3, #2732]	; 0xaac
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014680:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8014684:	4413      	add	r3, r2
 8014686:	60bb      	str	r3, [r7, #8]
    if (elem_end == buffer_end)
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	429a      	cmp	r2, r3
 801468e:	d10c      	bne.n	80146aa <nk_free_page_element+0x64>
        ctx->memory.size -= sizeof(struct nk_page_element);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014696:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 801469a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80146a4:	f8c2 3ac4 	str.w	r3, [r2, #2756]	; 0xac4
 80146a8:	e003      	b.n	80146b2 <nk_free_page_element+0x6c>
    else nk_link_page_element_into_freelist(ctx, elem);}
 80146aa:	6839      	ldr	r1, [r7, #0]
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7ff ffa1 	bl	80145f4 <nk_link_page_element_into_freelist>
}
 80146b2:	3710      	adds	r7, #16
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <nk_create_panel>:
 *                              PANEL
 *
 * ===============================================================*/
NK_LIB void*
nk_create_panel(struct nk_context *ctx)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f7ff ff29 	bl	8014518 <nk_create_page_element>
 80146c6:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d101      	bne.n	80146d2 <nk_create_panel+0x1a>
 80146ce:	2300      	movs	r3, #0
 80146d0:	e005      	b.n	80146de <nk_create_panel+0x26>
    nk_zero_struct(*elem);
 80146d2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80146d6:	68f8      	ldr	r0, [r7, #12]
 80146d8:	f007 fa62 	bl	801bba0 <nk_zero>
    return &elem->data.pan;
 80146dc:	68fb      	ldr	r3, [r7, #12]
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3710      	adds	r7, #16
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}

080146e6 <nk_free_panel>:
NK_LIB void
nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)
{
 80146e6:	b580      	push	{r7, lr}
 80146e8:	b084      	sub	sp, #16
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
 80146ee:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 80146f8:	68b9      	ldr	r1, [r7, #8]
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f7ff ffa3 	bl	8014646 <nk_free_page_element>
}
 8014700:	bf00      	nop
 8014702:	3710      	adds	r7, #16
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <nk_panel_has_header>:
NK_LIB nk_bool
nk_panel_has_header(nk_flags flags, const char *title)
{
 8014708:	b480      	push	{r7}
 801470a:	b085      	sub	sp, #20
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
    nk_bool active = 0;
 8014712:	2300      	movs	r3, #0
 8014714:	60fb      	str	r3, [r7, #12]
    active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f003 0318 	and.w	r3, r3, #24
 801471c:	60fb      	str	r3, [r7, #12]
    active = active || (flags & NK_WINDOW_TITLE);
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d104      	bne.n	801472e <nk_panel_has_header+0x26>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801472a:	2b00      	cmp	r3, #0
 801472c:	d001      	beq.n	8014732 <nk_panel_has_header+0x2a>
 801472e:	2301      	movs	r3, #1
 8014730:	e000      	b.n	8014734 <nk_panel_has_header+0x2c>
 8014732:	2300      	movs	r3, #0
 8014734:	60fb      	str	r3, [r7, #12]
    active = active && !(flags & NK_WINDOW_HIDDEN) && title;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d009      	beq.n	8014750 <nk_panel_has_header+0x48>
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014742:	2b00      	cmp	r3, #0
 8014744:	d104      	bne.n	8014750 <nk_panel_has_header+0x48>
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d001      	beq.n	8014750 <nk_panel_has_header+0x48>
 801474c:	2301      	movs	r3, #1
 801474e:	e000      	b.n	8014752 <nk_panel_has_header+0x4a>
 8014750:	2300      	movs	r3, #0
 8014752:	60fb      	str	r3, [r7, #12]
    return active;
 8014754:	68fb      	ldr	r3, [r7, #12]
}
 8014756:	4618      	mov	r0, r3
 8014758:	3714      	adds	r7, #20
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr
	...

08014764 <nk_panel_get_padding>:
NK_LIB struct nk_vec2
nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)
{
 8014764:	b480      	push	{r7}
 8014766:	b087      	sub	sp, #28
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	460b      	mov	r3, r1
 801476e:	72fb      	strb	r3, [r7, #11]
    switch (type) {
 8014770:	7afb      	ldrb	r3, [r7, #11]
 8014772:	2b80      	cmp	r3, #128	; 0x80
 8014774:	f000 809a 	beq.w	80148ac <nk_panel_get_padding+0x148>
 8014778:	2b80      	cmp	r3, #128	; 0x80
 801477a:	dc49      	bgt.n	8014810 <nk_panel_get_padding+0xac>
 801477c:	2b20      	cmp	r3, #32
 801477e:	dc45      	bgt.n	801480c <nk_panel_get_padding+0xa8>
 8014780:	2b02      	cmp	r3, #2
 8014782:	db45      	blt.n	8014810 <nk_panel_get_padding+0xac>
 8014784:	3b02      	subs	r3, #2
 8014786:	2b1e      	cmp	r3, #30
 8014788:	d842      	bhi.n	8014810 <nk_panel_get_padding+0xac>
 801478a:	a201      	add	r2, pc, #4	; (adr r2, 8014790 <nk_panel_get_padding+0x2c>)
 801478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014790:	0801482b 	.word	0x0801482b
 8014794:	08014811 	.word	0x08014811
 8014798:	08014845 	.word	0x08014845
 801479c:	08014811 	.word	0x08014811
 80147a0:	08014811 	.word	0x08014811
 80147a4:	08014811 	.word	0x08014811
 80147a8:	08014811 	.word	0x08014811
 80147ac:	08014811 	.word	0x08014811
 80147b0:	08014811 	.word	0x08014811
 80147b4:	08014811 	.word	0x08014811
 80147b8:	08014811 	.word	0x08014811
 80147bc:	08014811 	.word	0x08014811
 80147c0:	08014811 	.word	0x08014811
 80147c4:	08014811 	.word	0x08014811
 80147c8:	0801485f 	.word	0x0801485f
 80147cc:	08014811 	.word	0x08014811
 80147d0:	08014811 	.word	0x08014811
 80147d4:	08014811 	.word	0x08014811
 80147d8:	08014811 	.word	0x08014811
 80147dc:	08014811 	.word	0x08014811
 80147e0:	08014811 	.word	0x08014811
 80147e4:	08014811 	.word	0x08014811
 80147e8:	08014811 	.word	0x08014811
 80147ec:	08014811 	.word	0x08014811
 80147f0:	08014811 	.word	0x08014811
 80147f4:	08014811 	.word	0x08014811
 80147f8:	08014811 	.word	0x08014811
 80147fc:	08014811 	.word	0x08014811
 8014800:	08014811 	.word	0x08014811
 8014804:	08014811 	.word	0x08014811
 8014808:	08014879 	.word	0x08014879
 801480c:	2b40      	cmp	r3, #64	; 0x40
 801480e:	d040      	beq.n	8014892 <nk_panel_get_padding+0x12e>
    default:
    case NK_PANEL_WINDOW: return style->window.padding;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014816:	461a      	mov	r2, r3
 8014818:	f107 0310 	add.w	r3, r7, #16
 801481c:	f602 02ec 	addw	r2, r2, #2284	; 0x8ec
 8014820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014824:	e883 0003 	stmia.w	r3, {r0, r1}
 8014828:	e04c      	b.n	80148c4 <nk_panel_get_padding+0x160>
    case NK_PANEL_GROUP: return style->window.group_padding;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014830:	461a      	mov	r2, r3
 8014832:	f107 0310 	add.w	r3, r7, #16
 8014836:	f602 02f4 	addw	r2, r2, #2292	; 0x8f4
 801483a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801483e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014842:	e03f      	b.n	80148c4 <nk_panel_get_padding+0x160>
    case NK_PANEL_POPUP: return style->window.popup_padding;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801484a:	461a      	mov	r2, r3
 801484c:	f107 0310 	add.w	r3, r7, #16
 8014850:	f602 02fc 	addw	r2, r2, #2300	; 0x8fc
 8014854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014858:	e883 0003 	stmia.w	r3, {r0, r1}
 801485c:	e032      	b.n	80148c4 <nk_panel_get_padding+0x160>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014864:	461a      	mov	r2, r3
 8014866:	f107 0310 	add.w	r3, r7, #16
 801486a:	f602 120c 	addw	r2, r2, #2316	; 0x90c
 801486e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014872:	e883 0003 	stmia.w	r3, {r0, r1}
 8014876:	e025      	b.n	80148c4 <nk_panel_get_padding+0x160>
    case NK_PANEL_COMBO: return style->window.combo_padding;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801487e:	461a      	mov	r2, r3
 8014880:	f107 0310 	add.w	r3, r7, #16
 8014884:	f602 1204 	addw	r2, r2, #2308	; 0x904
 8014888:	e892 0003 	ldmia.w	r2, {r0, r1}
 801488c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014890:	e018      	b.n	80148c4 <nk_panel_get_padding+0x160>
    case NK_PANEL_MENU: return style->window.menu_padding;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014898:	461a      	mov	r2, r3
 801489a:	f107 0310 	add.w	r3, r7, #16
 801489e:	f602 1214 	addw	r2, r2, #2324	; 0x914
 80148a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80148aa:	e00b      	b.n	80148c4 <nk_panel_get_padding+0x160>
    case NK_PANEL_TOOLTIP: return style->window.menu_padding;}
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80148b2:	461a      	mov	r2, r3
 80148b4:	f107 0310 	add.w	r3, r7, #16
 80148b8:	f602 1214 	addw	r2, r2, #2324	; 0x914
 80148bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148c0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80148c4:	693a      	ldr	r2, [r7, #16]
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	ee07 2a10 	vmov	s14, r2
 80148cc:	ee07 3a90 	vmov	s15, r3
 80148d0:	eeb0 0a47 	vmov.f32	s0, s14
 80148d4:	eef0 0a67 	vmov.f32	s1, s15
 80148d8:	371c      	adds	r7, #28
 80148da:	46bd      	mov	sp, r7
 80148dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e0:	4770      	bx	lr
 80148e2:	bf00      	nop

080148e4 <nk_panel_get_border>:
NK_LIB float
nk_panel_get_border(const struct nk_style *style, nk_flags flags,
    enum nk_panel_type type)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b085      	sub	sp, #20
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	4613      	mov	r3, r2
 80148f0:	71fb      	strb	r3, [r7, #7]
    if (flags & NK_WINDOW_BORDER) {
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	f003 0301 	and.w	r3, r3, #1
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	f000 8080 	beq.w	80149fe <nk_panel_get_border+0x11a>
        switch (type) {
 80148fe:	79fb      	ldrb	r3, [r7, #7]
 8014900:	2b80      	cmp	r3, #128	; 0x80
 8014902:	d075      	beq.n	80149f0 <nk_panel_get_border+0x10c>
 8014904:	2b80      	cmp	r3, #128	; 0x80
 8014906:	dc49      	bgt.n	801499c <nk_panel_get_border+0xb8>
 8014908:	2b20      	cmp	r3, #32
 801490a:	dc45      	bgt.n	8014998 <nk_panel_get_border+0xb4>
 801490c:	2b02      	cmp	r3, #2
 801490e:	db45      	blt.n	801499c <nk_panel_get_border+0xb8>
 8014910:	3b02      	subs	r3, #2
 8014912:	2b1e      	cmp	r3, #30
 8014914:	d842      	bhi.n	801499c <nk_panel_get_border+0xb8>
 8014916:	a201      	add	r2, pc, #4	; (adr r2, 801491c <nk_panel_get_border+0x38>)
 8014918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801491c:	080149ab 	.word	0x080149ab
 8014920:	0801499d 	.word	0x0801499d
 8014924:	080149b9 	.word	0x080149b9
 8014928:	0801499d 	.word	0x0801499d
 801492c:	0801499d 	.word	0x0801499d
 8014930:	0801499d 	.word	0x0801499d
 8014934:	0801499d 	.word	0x0801499d
 8014938:	0801499d 	.word	0x0801499d
 801493c:	0801499d 	.word	0x0801499d
 8014940:	0801499d 	.word	0x0801499d
 8014944:	0801499d 	.word	0x0801499d
 8014948:	0801499d 	.word	0x0801499d
 801494c:	0801499d 	.word	0x0801499d
 8014950:	0801499d 	.word	0x0801499d
 8014954:	080149c7 	.word	0x080149c7
 8014958:	0801499d 	.word	0x0801499d
 801495c:	0801499d 	.word	0x0801499d
 8014960:	0801499d 	.word	0x0801499d
 8014964:	0801499d 	.word	0x0801499d
 8014968:	0801499d 	.word	0x0801499d
 801496c:	0801499d 	.word	0x0801499d
 8014970:	0801499d 	.word	0x0801499d
 8014974:	0801499d 	.word	0x0801499d
 8014978:	0801499d 	.word	0x0801499d
 801497c:	0801499d 	.word	0x0801499d
 8014980:	0801499d 	.word	0x0801499d
 8014984:	0801499d 	.word	0x0801499d
 8014988:	0801499d 	.word	0x0801499d
 801498c:	0801499d 	.word	0x0801499d
 8014990:	0801499d 	.word	0x0801499d
 8014994:	080149d5 	.word	0x080149d5
 8014998:	2b40      	cmp	r3, #64	; 0x40
 801499a:	d022      	beq.n	80149e2 <nk_panel_get_border+0xfe>
        default:
        case NK_PANEL_WINDOW: return style->window.border;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149a2:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	e02b      	b.n	8014a02 <nk_panel_get_border+0x11e>
        case NK_PANEL_GROUP: return style->window.group_border;
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149b0:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	e024      	b.n	8014a02 <nk_panel_get_border+0x11e>
        case NK_PANEL_POPUP: return style->window.popup_border;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149be:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	e01d      	b.n	8014a02 <nk_panel_get_border+0x11e>
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149cc:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	e016      	b.n	8014a02 <nk_panel_get_border+0x11e>
        case NK_PANEL_COMBO: return style->window.combo_border;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149da:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	e00f      	b.n	8014a02 <nk_panel_get_border+0x11e>
        case NK_PANEL_MENU: return style->window.menu_border;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149e8:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	e008      	b.n	8014a02 <nk_panel_get_border+0x11e>
        case NK_PANEL_TOOLTIP: return style->window.menu_border;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149f6:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	e001      	b.n	8014a02 <nk_panel_get_border+0x11e>
    }} else return 0;
 80149fe:	f04f 0300 	mov.w	r3, #0
}
 8014a02:	ee07 3a90 	vmov	s15, r3
 8014a06:	eeb0 0a67 	vmov.f32	s0, s15
 8014a0a:	3714      	adds	r7, #20
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a12:	4770      	bx	lr

08014a14 <nk_panel_get_border_color>:
NK_LIB struct nk_color
nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)
{
 8014a14:	b480      	push	{r7}
 8014a16:	b085      	sub	sp, #20
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 8014a20:	78fb      	ldrb	r3, [r7, #3]
 8014a22:	2b80      	cmp	r3, #128	; 0x80
 8014a24:	d076      	beq.n	8014b14 <nk_panel_get_border_color+0x100>
 8014a26:	2b80      	cmp	r3, #128	; 0x80
 8014a28:	dc4a      	bgt.n	8014ac0 <nk_panel_get_border_color+0xac>
 8014a2a:	2b20      	cmp	r3, #32
 8014a2c:	dc46      	bgt.n	8014abc <nk_panel_get_border_color+0xa8>
 8014a2e:	2b02      	cmp	r3, #2
 8014a30:	db46      	blt.n	8014ac0 <nk_panel_get_border_color+0xac>
 8014a32:	3b02      	subs	r3, #2
 8014a34:	2b1e      	cmp	r3, #30
 8014a36:	d843      	bhi.n	8014ac0 <nk_panel_get_border_color+0xac>
 8014a38:	a201      	add	r2, pc, #4	; (adr r2, 8014a40 <nk_panel_get_border_color+0x2c>)
 8014a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a3e:	bf00      	nop
 8014a40:	08014acf 	.word	0x08014acf
 8014a44:	08014ac1 	.word	0x08014ac1
 8014a48:	08014add 	.word	0x08014add
 8014a4c:	08014ac1 	.word	0x08014ac1
 8014a50:	08014ac1 	.word	0x08014ac1
 8014a54:	08014ac1 	.word	0x08014ac1
 8014a58:	08014ac1 	.word	0x08014ac1
 8014a5c:	08014ac1 	.word	0x08014ac1
 8014a60:	08014ac1 	.word	0x08014ac1
 8014a64:	08014ac1 	.word	0x08014ac1
 8014a68:	08014ac1 	.word	0x08014ac1
 8014a6c:	08014ac1 	.word	0x08014ac1
 8014a70:	08014ac1 	.word	0x08014ac1
 8014a74:	08014ac1 	.word	0x08014ac1
 8014a78:	08014aeb 	.word	0x08014aeb
 8014a7c:	08014ac1 	.word	0x08014ac1
 8014a80:	08014ac1 	.word	0x08014ac1
 8014a84:	08014ac1 	.word	0x08014ac1
 8014a88:	08014ac1 	.word	0x08014ac1
 8014a8c:	08014ac1 	.word	0x08014ac1
 8014a90:	08014ac1 	.word	0x08014ac1
 8014a94:	08014ac1 	.word	0x08014ac1
 8014a98:	08014ac1 	.word	0x08014ac1
 8014a9c:	08014ac1 	.word	0x08014ac1
 8014aa0:	08014ac1 	.word	0x08014ac1
 8014aa4:	08014ac1 	.word	0x08014ac1
 8014aa8:	08014ac1 	.word	0x08014ac1
 8014aac:	08014ac1 	.word	0x08014ac1
 8014ab0:	08014ac1 	.word	0x08014ac1
 8014ab4:	08014ac1 	.word	0x08014ac1
 8014ab8:	08014af9 	.word	0x08014af9
 8014abc:	2b40      	cmp	r3, #64	; 0x40
 8014abe:	d022      	beq.n	8014b06 <nk_panel_get_border_color+0xf2>
    default:
    case NK_PANEL_WINDOW: return style->window.border_color;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ac6:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 8014aca:	60fb      	str	r3, [r7, #12]
 8014acc:	e028      	b.n	8014b20 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_GROUP: return style->window.group_border_color;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ad4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8014ad8:	60fb      	str	r3, [r7, #12]
 8014ada:	e021      	b.n	8014b20 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_POPUP: return style->window.popup_border_color;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ae2:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 8014ae6:	60fb      	str	r3, [r7, #12]
 8014ae8:	e01a      	b.n	8014b20 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014af0:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8014af4:	60fb      	str	r3, [r7, #12]
 8014af6:	e013      	b.n	8014b20 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_COMBO: return style->window.combo_border_color;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014afe:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8014b02:	60fb      	str	r3, [r7, #12]
 8014b04:	e00c      	b.n	8014b20 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_MENU: return style->window.menu_border_color;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b0c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 8014b10:	60fb      	str	r3, [r7, #12]
 8014b12:	e005      	b.n	8014b20 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_TOOLTIP: return style->window.menu_border_color;}
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b1a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 8014b1e:	60fb      	str	r3, [r7, #12]
}
 8014b20:	2300      	movs	r3, #0
 8014b22:	7b3a      	ldrb	r2, [r7, #12]
 8014b24:	f362 0307 	bfi	r3, r2, #0, #8
 8014b28:	7b7a      	ldrb	r2, [r7, #13]
 8014b2a:	f362 230f 	bfi	r3, r2, #8, #8
 8014b2e:	7bba      	ldrb	r2, [r7, #14]
 8014b30:	f362 4317 	bfi	r3, r2, #16, #8
 8014b34:	7bfa      	ldrb	r2, [r7, #15]
 8014b36:	f362 631f 	bfi	r3, r2, #24, #8
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3714      	adds	r7, #20
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b44:	4770      	bx	lr
 8014b46:	bf00      	nop

08014b48 <nk_panel_is_sub>:
NK_LIB nk_bool
nk_panel_is_sub(enum nk_panel_type type)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	4603      	mov	r3, r0
 8014b50:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_SUB)?1:0;
 8014b52:	79fb      	ldrb	r3, [r7, #7]
 8014b54:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	bf14      	ite	ne
 8014b5c:	2301      	movne	r3, #1
 8014b5e:	2300      	moveq	r3, #0
 8014b60:	b2db      	uxtb	r3, r3
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	370c      	adds	r7, #12
 8014b66:	46bd      	mov	sp, r7
 8014b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6c:	4770      	bx	lr

08014b6e <nk_panel_is_nonblock>:
NK_LIB nk_bool
nk_panel_is_nonblock(enum nk_panel_type type)
{
 8014b6e:	b480      	push	{r7}
 8014b70:	b083      	sub	sp, #12
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	4603      	mov	r3, r0
 8014b76:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_NONBLOCK)?1:0;
 8014b78:	79fb      	ldrb	r3, [r7, #7]
 8014b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	bf14      	ite	ne
 8014b82:	2301      	movne	r3, #1
 8014b84:	2300      	moveq	r3, #0
 8014b86:	b2db      	uxtb	r3, r3
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	370c      	adds	r7, #12
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b92:	4770      	bx	lr

08014b94 <nk_panel_begin>:
NK_LIB nk_bool
nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)
{
 8014b94:	b590      	push	{r4, r7, lr}
 8014b96:	b0b7      	sub	sp, #220	; 0xdc
 8014b98:	af04      	add	r7, sp, #16
 8014b9a:	60f8      	str	r0, [r7, #12]
 8014b9c:	60b9      	str	r1, [r7, #8]
 8014b9e:	4613      	mov	r3, r2
 8014ba0:	71fb      	strb	r3, [r7, #7]
    const struct nk_user_font *font;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d105      	bne.n	8014bb4 <nk_panel_begin+0x20>
 8014ba8:	4b7e      	ldr	r3, [pc, #504]	; (8014da4 <nk_panel_begin+0x210>)
 8014baa:	4a7f      	ldr	r2, [pc, #508]	; (8014da8 <nk_panel_begin+0x214>)
 8014bac:	2163      	movs	r1, #99	; 0x63
 8014bae:	487f      	ldr	r0, [pc, #508]	; (8014dac <nk_panel_begin+0x218>)
 8014bb0:	f008 fcee 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014bba:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d105      	bne.n	8014bce <nk_panel_begin+0x3a>
 8014bc2:	4b7b      	ldr	r3, [pc, #492]	; (8014db0 <nk_panel_begin+0x21c>)
 8014bc4:	4a78      	ldr	r2, [pc, #480]	; (8014da8 <nk_panel_begin+0x214>)
 8014bc6:	2164      	movs	r1, #100	; 0x64
 8014bc8:	4878      	ldr	r0, [pc, #480]	; (8014dac <nk_panel_begin+0x218>)
 8014bca:	f008 fce1 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014bd4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d105      	bne.n	8014bec <nk_panel_begin+0x58>
 8014be0:	4b74      	ldr	r3, [pc, #464]	; (8014db4 <nk_panel_begin+0x220>)
 8014be2:	4a71      	ldr	r2, [pc, #452]	; (8014da8 <nk_panel_begin+0x214>)
 8014be4:	2165      	movs	r1, #101	; 0x65
 8014be6:	4871      	ldr	r0, [pc, #452]	; (8014dac <nk_panel_begin+0x218>)
 8014be8:	f008 fcd2 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return 0;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d00f      	beq.n	8014c12 <nk_panel_begin+0x7e>
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014bf8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d008      	beq.n	8014c12 <nk_panel_begin+0x7e>
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c06:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d102      	bne.n	8014c18 <nk_panel_begin+0x84>
 8014c12:	2300      	movs	r3, #0
 8014c14:	f000 bef7 	b.w	8015a06 <nk_panel_begin+0xe72>
    nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c1e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014c26:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f006 ffb8 	bl	801bba0 <nk_zero>
    if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c36:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d109      	bne.n	8014c58 <nk_panel_begin+0xc4>
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c4a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d017      	beq.n	8014c88 <nk_panel_begin+0xf4>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c5e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014c66:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f006 ff98 	bl	801bba0 <nk_zero>
        ctx->current->layout->type = panel_type;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014c76:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014c7e:	79fa      	ldrb	r2, [r7, #7]
 8014c80:	701a      	strb	r2, [r3, #0]
        return 0;
 8014c82:	2300      	movs	r3, #0
 8014c84:	f000 bebf 	b.w	8015a06 <nk_panel_begin+0xe72>
    }
    /* pull state into local stack */
    style = &ctx->style;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    font = style->font;
 8014c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    win = ctx->current;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014ca2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    layout = win->layout;
 8014caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    out = &win->buffer;
 8014cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cba:	3364      	adds	r3, #100	; 0x64
 8014cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;
 8014cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d101      	bne.n	8014cd2 <nk_panel_begin+0x13e>
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	e000      	b.n	8014cd4 <nk_panel_begin+0x140>
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#ifdef NK_INCLUDE_COMMAND_USERDATA
    win->buffer.userdata = ctx->userdata;
#endif
    /* pull style configuration into local stack */
    scrollbar_size = style->window.scrollbar_size;
 8014cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ce0:	461a      	mov	r2, r3
 8014ce2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014ce6:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 8014cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014cee:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, panel_type);
 8014cf2:	79fb      	ldrb	r3, [r7, #7]
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8014cfa:	f7ff fd33 	bl	8014764 <nk_panel_get_padding>
 8014cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8014d02:	eef0 7a60 	vmov.f32	s15, s1
 8014d06:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 8014d0a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

    /* window movement */
    if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {
 8014d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d14:	f003 0302 	and.w	r3, r3, #2
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	f000 80bf 	beq.w	8014e9c <nk_panel_begin+0x308>
 8014d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	f040 80b7 	bne.w	8014e9c <nk_panel_begin+0x308>
        unsigned int left_mouse_clicked;
        int left_mouse_click_in_cursor;

        /* calculate draggable window space */
        struct nk_rect header;
        header.x = win->bounds.x;
 8014d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d34:	67bb      	str	r3, [r7, #120]	; 0x78
        header.y = win->bounds.y;
 8014d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
        header.w = win->bounds.w;
 8014d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (nk_panel_has_header(win->flags, title)) {
 8014d48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d4e:	68b9      	ldr	r1, [r7, #8]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7ff fcd9 	bl	8014708 <nk_panel_has_header>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d02d      	beq.n	8014db8 <nk_panel_begin+0x224>
            header.h = font->height + 2.0f * style->window.header.padding.y;
 8014d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014d60:	ed93 7a01 	vldr	s14, [r3, #4]
 8014d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d6c:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8014d70:	edd3 7a00 	vldr	s15, [r3]
 8014d74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d7c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            header.h += 2.0f * style->window.header.label_padding.y;
 8014d80:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d8c:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8014d90:	edd3 7a00 	vldr	s15, [r3]
 8014d94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d9c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8014da0:	e00e      	b.n	8014dc0 <nk_panel_begin+0x22c>
 8014da2:	bf00      	nop
 8014da4:	080214f8 	.word	0x080214f8
 8014da8:	080230bc 	.word	0x080230bc
 8014dac:	080214fc 	.word	0x080214fc
 8014db0:	08021518 	.word	0x08021518
 8014db4:	08021528 	.word	0x08021528
        } else header.h = panel_padding.y;
 8014db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* window movement by dragging */
        left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8014dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014dc4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8014dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 8014dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014dd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8014dd8:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8014ddc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8014de0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014de4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014de8:	2201      	movs	r2, #1
 8014dea:	eeb0 0a46 	vmov.f32	s0, s12
 8014dee:	eef0 0a66 	vmov.f32	s1, s13
 8014df2:	eeb0 1a47 	vmov.f32	s2, s14
 8014df6:	eef0 1a67 	vmov.f32	s3, s15
 8014dfa:	2100      	movs	r1, #0
 8014dfc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014e00:	f7fd fee2 	bl	8012bc8 <nk_input_has_mouse_click_down_in_rect>
 8014e04:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
            NK_BUTTON_LEFT, header, nk_true);
        if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8014e08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d045      	beq.n	8014e9c <nk_panel_begin+0x308>
 8014e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d041      	beq.n	8014e9c <nk_panel_begin+0x308>
 8014e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d13d      	bne.n	8014e9c <nk_panel_begin+0x308>
            win->bounds.x = win->bounds.x + in->mouse.delta.x;
 8014e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e24:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8014e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e2c:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8014e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e38:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            win->bounds.y = win->bounds.y + in->mouse.delta.y;
 8014e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e40:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8014e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e48:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8014e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e54:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;
 8014e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e5c:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8014e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e64:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8014e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e70:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;
 8014e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e78:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8014e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e80:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8014e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e8c:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        }
    }

    /* setup panel */
    layout->type = panel_type;
 8014e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ea0:	79fa      	ldrb	r2, [r7, #7]
 8014ea2:	701a      	strb	r2, [r3, #0]
    layout->flags = win->flags;
 8014ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014eae:	605a      	str	r2, [r3, #4]
    layout->bounds = win->bounds;
 8014eb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014eb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014eb8:	f102 0408 	add.w	r4, r2, #8
 8014ebc:	334c      	adds	r3, #76	; 0x4c
 8014ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    layout->bounds.x += panel_padding.x;
 8014ec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ec8:	ed93 7a02 	vldr	s14, [r3, #8]
 8014ecc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ed8:	edc3 7a02 	vstr	s15, [r3, #8]
    layout->bounds.w -= 2*panel_padding.x;
 8014edc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ee0:	ed93 7a04 	vldr	s14, [r3, #16]
 8014ee4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014ee8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ef4:	edc3 7a04 	vstr	s15, [r3, #16]
    if (win->flags & NK_WINDOW_BORDER) {
 8014ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014efe:	f003 0301 	and.w	r3, r3, #1
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d03b      	beq.n	8014f7e <nk_panel_begin+0x3ea>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
 8014f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f0c:	79fa      	ldrb	r2, [r7, #7]
 8014f0e:	4619      	mov	r1, r3
 8014f10:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8014f14:	f7ff fce6 	bl	80148e4 <nk_panel_get_border>
 8014f18:	eef0 7a40 	vmov.f32	s15, s0
 8014f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f20:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
 8014f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f28:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 8014f2c:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8014f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f34:	ed93 6a02 	vldr	s12, [r3, #8]
 8014f38:	edd3 6a03 	vldr	s13, [r3, #12]
 8014f3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8014f40:	edd3 7a05 	vldr	s15, [r3, #20]
 8014f44:	eeb0 2a65 	vmov.f32	s4, s11
 8014f48:	eeb0 0a46 	vmov.f32	s0, s12
 8014f4c:	eef0 0a66 	vmov.f32	s1, s13
 8014f50:	eeb0 1a47 	vmov.f32	s2, s14
 8014f54:	eef0 1a67 	vmov.f32	s3, s15
 8014f58:	f7fe ffca 	bl	8013ef0 <nk_shrink_rect>
 8014f5c:	eeb0 6a40 	vmov.f32	s12, s0
 8014f60:	eef0 6a60 	vmov.f32	s13, s1
 8014f64:	eeb0 7a41 	vmov.f32	s14, s2
 8014f68:	eef0 7a61 	vmov.f32	s15, s3
 8014f6c:	ed84 6a02 	vstr	s12, [r4, #8]
 8014f70:	edc4 6a03 	vstr	s13, [r4, #12]
 8014f74:	ed84 7a04 	vstr	s14, [r4, #16]
 8014f78:	edc4 7a05 	vstr	s15, [r4, #20]
 8014f7c:	e004      	b.n	8014f88 <nk_panel_begin+0x3f4>
    } else layout->border = 0;
 8014f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f82:	f04f 0200 	mov.w	r2, #0
 8014f86:	635a      	str	r2, [r3, #52]	; 0x34
    layout->at_y = layout->bounds.y;
 8014f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f8c:	68da      	ldr	r2, [r3, #12]
 8014f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f92:	625a      	str	r2, [r3, #36]	; 0x24
    layout->at_x = layout->bounds.x;
 8014f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f98:	689a      	ldr	r2, [r3, #8]
 8014f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f9e:	621a      	str	r2, [r3, #32]
    layout->max_x = 0;
 8014fa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fa4:	f04f 0200 	mov.w	r2, #0
 8014fa8:	629a      	str	r2, [r3, #40]	; 0x28
    layout->header_height = 0;
 8014faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fae:	f04f 0200 	mov.w	r2, #0
 8014fb2:	631a      	str	r2, [r3, #48]	; 0x30
    layout->footer_height = 0;
 8014fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fb8:	f04f 0200 	mov.w	r2, #0
 8014fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    nk_layout_reset_min_row_height(ctx);
 8014fbe:	68f8      	ldr	r0, [r7, #12]
 8014fc0:	f7fd ffac 	bl	8012f1c <nk_layout_reset_min_row_height>
    layout->row.index = 0;
 8014fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fc8:	2200      	movs	r2, #0
 8014fca:	669a      	str	r2, [r3, #104]	; 0x68
    layout->row.columns = 0;
 8014fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	675a      	str	r2, [r3, #116]	; 0x74
    layout->row.ratio = 0;
 8014fd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fd8:	2200      	movs	r2, #0
 8014fda:	679a      	str	r2, [r3, #120]	; 0x78
    layout->row.item_width = 0;
 8014fdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fe0:	f04f 0200 	mov.w	r2, #0
 8014fe4:	67da      	str	r2, [r3, #124]	; 0x7c
    layout->row.tree_depth = 0;
 8014fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fea:	2200      	movs	r2, #0
 8014fec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    layout->row.height = panel_padding.y;
 8014ff0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ff8:	66da      	str	r2, [r3, #108]	; 0x6c
    layout->has_scrolling = nk_true;
 8014ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ffe:	2201      	movs	r2, #1
 8015000:	639a      	str	r2, [r3, #56]	; 0x38
    if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))
 8015002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015008:	f003 0320 	and.w	r3, r3, #32
 801500c:	2b00      	cmp	r3, #0
 801500e:	d10b      	bne.n	8015028 <nk_panel_begin+0x494>
        layout->bounds.w -= scrollbar_size.x;
 8015010:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015014:	ed93 7a04 	vldr	s14, [r3, #16]
 8015018:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801501c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015020:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015024:	edc3 7a04 	vstr	s15, [r3, #16]
    if (!nk_panel_is_nonblock(panel_type)) {
 8015028:	79fb      	ldrb	r3, [r7, #7]
 801502a:	4618      	mov	r0, r3
 801502c:	f7ff fd9f 	bl	8014b6e <nk_panel_is_nonblock>
 8015030:	4603      	mov	r3, r0
 8015032:	2b00      	cmp	r3, #0
 8015034:	d125      	bne.n	8015082 <nk_panel_begin+0x4ee>
        layout->footer_height = 0;
 8015036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801503a:	f04f 0200 	mov.w	r2, #0
 801503e:	62da      	str	r2, [r3, #44]	; 0x2c
        if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)
 8015040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015046:	f003 0320 	and.w	r3, r3, #32
 801504a:	2b00      	cmp	r3, #0
 801504c:	d006      	beq.n	801505c <nk_panel_begin+0x4c8>
 801504e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015054:	f003 0304 	and.w	r3, r3, #4
 8015058:	2b00      	cmp	r3, #0
 801505a:	d004      	beq.n	8015066 <nk_panel_begin+0x4d2>
            layout->footer_height = scrollbar_size.y;
 801505c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015064:	62da      	str	r2, [r3, #44]	; 0x2c
        layout->bounds.h -= layout->footer_height;
 8015066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801506a:	ed93 7a05 	vldr	s14, [r3, #20]
 801506e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015072:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8015076:	ee77 7a67 	vsub.f32	s15, s14, s15
 801507a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801507e:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    /* panel header */
    if (nk_panel_has_header(win->flags, title))
 8015082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015088:	68b9      	ldr	r1, [r7, #8]
 801508a:	4618      	mov	r0, r3
 801508c:	f7ff fb3c 	bl	8014708 <nk_panel_has_header>
 8015090:	4603      	mov	r3, r0
 8015092:	2b00      	cmp	r3, #0
 8015094:	f000 83bc 	beq.w	8015810 <nk_panel_begin+0xc7c>
    {
        struct nk_text text;
        struct nk_rect header;
        const struct nk_style_item *background = 0;
 8015098:	2300      	movs	r3, #0
 801509a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /* calculate header bounds */
        header.x = win->bounds.x;
 801509e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80150a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80150a4:	65bb      	str	r3, [r7, #88]	; 0x58
        header.y = win->bounds.y;
 80150a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80150aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        header.w = win->bounds.w;
 80150ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80150b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150b4:	663b      	str	r3, [r7, #96]	; 0x60
        header.h = font->height + 2.0f * style->window.header.padding.y;
 80150b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80150ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80150be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80150c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80150c6:	f603 0344 	addw	r3, r3, #2116	; 0x844
 80150ca:	edd3 7a00 	vldr	s15, [r3]
 80150ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80150d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        header.h += (2.0f * style->window.header.label_padding.y);
 80150da:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80150de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80150e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80150e6:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80150ea:	edd3 7a00 	vldr	s15, [r3]
 80150ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80150f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150f6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        /* shrink panel by header */
        layout->header_height = header.h;
 80150fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80150fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015100:	631a      	str	r2, [r3, #48]	; 0x30
        layout->bounds.y += header.h;
 8015102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015106:	ed93 7a03 	vldr	s14, [r3, #12]
 801510a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801510e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015112:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015116:	edc3 7a03 	vstr	s15, [r3, #12]
        layout->bounds.h -= header.h;
 801511a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801511e:	ed93 7a05 	vldr	s14, [r3, #20]
 8015122:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8015126:	ee77 7a67 	vsub.f32	s15, s14, s15
 801512a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801512e:	edc3 7a05 	vstr	s15, [r3, #20]
        layout->at_y += header.h;
 8015132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015136:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801513a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801513e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015146:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        /* select correct header background and text color */
        if (ctx->active == win) {
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015150:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015154:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015158:	429a      	cmp	r2, r3
 801515a:	d112      	bne.n	8015182 <nk_panel_begin+0x5ee>
            background = &style->window.header.active;
 801515c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015160:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8015164:	3304      	adds	r3, #4
 8015166:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_active;
 801516a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801516e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015172:	461a      	mov	r2, r3
 8015174:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015178:	f602 023b 	addw	r2, r2, #2107	; 0x83b
 801517c:	6810      	ldr	r0, [r2, #0]
 801517e:	6018      	str	r0, [r3, #0]
 8015180:	e03b      	b.n	80151fa <nk_panel_begin+0x666>
        } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8015188:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801518c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015190:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8015194:	eeb0 0a46 	vmov.f32	s0, s12
 8015198:	eef0 0a66 	vmov.f32	s1, s13
 801519c:	eeb0 1a47 	vmov.f32	s2, s14
 80151a0:	eef0 1a67 	vmov.f32	s3, s15
 80151a4:	4618      	mov	r0, r3
 80151a6:	f7fd fd56 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 80151aa:	4603      	mov	r3, r0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d012      	beq.n	80151d6 <nk_panel_begin+0x642>
            background = &style->window.header.hover;
 80151b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80151b4:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 80151b8:	3308      	adds	r3, #8
 80151ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_hover;
 80151be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80151c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80151c6:	461a      	mov	r2, r3
 80151c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80151cc:	f602 0237 	addw	r2, r2, #2103	; 0x837
 80151d0:	6810      	ldr	r0, [r2, #0]
 80151d2:	6018      	str	r0, [r3, #0]
 80151d4:	e011      	b.n	80151fa <nk_panel_begin+0x666>
        } else {
            background = &style->window.header.normal;
 80151d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80151da:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 80151de:	330c      	adds	r3, #12
 80151e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_normal;
 80151e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80151e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80151ec:	461a      	mov	r2, r3
 80151ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80151f2:	f602 0233 	addw	r2, r2, #2099	; 0x833
 80151f6:	6810      	ldr	r0, [r2, #0]
 80151f8:	6018      	str	r0, [r3, #0]
        }

        /* draw header background */
        header.h += 1.0f;
 80151fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80151fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015206:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        switch(background->type) {
 801520a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	2b02      	cmp	r3, #2
 8015212:	d02a      	beq.n	801526a <nk_panel_begin+0x6d6>
 8015214:	2b02      	cmp	r3, #2
 8015216:	dc6b      	bgt.n	80152f0 <nk_panel_begin+0x75c>
 8015218:	2b00      	cmp	r3, #0
 801521a:	d04b      	beq.n	80152b4 <nk_panel_begin+0x720>
 801521c:	2b01      	cmp	r3, #1
 801521e:	d167      	bne.n	80152f0 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_IMAGE:
                text.background = nk_rgba(0,0,0,0);
 8015220:	2300      	movs	r3, #0
 8015222:	2200      	movs	r2, #0
 8015224:	2100      	movs	r1, #0
 8015226:	2000      	movs	r0, #0
 8015228:	f7fa f9c6 	bl	800f5b8 <nk_rgba>
 801522c:	4603      	mov	r3, r0
 801522e:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 8015230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015234:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8015238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801523c:	3304      	adds	r3, #4
 801523e:	4ad9      	ldr	r2, [pc, #868]	; (80155a4 <nk_panel_begin+0xa10>)
 8015240:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8015244:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015248:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801524c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8015250:	6812      	ldr	r2, [r2, #0]
 8015252:	4619      	mov	r1, r3
 8015254:	eeb0 0a46 	vmov.f32	s0, s12
 8015258:	eef0 0a66 	vmov.f32	s1, s13
 801525c:	eeb0 1a47 	vmov.f32	s2, s14
 8015260:	eef0 1a67 	vmov.f32	s3, s15
 8015264:	f7fc fc10 	bl	8011a88 <nk_draw_image>
                break;
 8015268:	e042      	b.n	80152f0 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_NINE_SLICE:
                text.background = nk_rgba(0, 0, 0, 0);
 801526a:	2300      	movs	r3, #0
 801526c:	2200      	movs	r2, #0
 801526e:	2100      	movs	r1, #0
 8015270:	2000      	movs	r0, #0
 8015272:	f7fa f9a1 	bl	800f5b8 <nk_rgba>
 8015276:	4603      	mov	r3, r0
 8015278:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 801527a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801527e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8015282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015286:	3304      	adds	r3, #4
 8015288:	4ac6      	ldr	r2, [pc, #792]	; (80155a4 <nk_panel_begin+0xa10>)
 801528a:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 801528e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015292:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015296:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801529a:	6812      	ldr	r2, [r2, #0]
 801529c:	4619      	mov	r1, r3
 801529e:	eeb0 0a46 	vmov.f32	s0, s12
 80152a2:	eef0 0a66 	vmov.f32	s1, s13
 80152a6:	eeb0 1a47 	vmov.f32	s2, s14
 80152aa:	eef0 1a67 	vmov.f32	s3, s15
 80152ae:	f7fc fcdd 	bl	8011c6c <nk_draw_nine_slice>
                break;
 80152b2:	e01d      	b.n	80152f0 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_COLOR:
                text.background = background->data.color;
 80152b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	673b      	str	r3, [r7, #112]	; 0x70
                nk_fill_rect(out, header, 0, background->data.color);
 80152bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80152c0:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80152c4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80152c8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80152cc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80152d0:	6859      	ldr	r1, [r3, #4]
 80152d2:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 80155a8 <nk_panel_begin+0xa14>
 80152d6:	eeb0 0a46 	vmov.f32	s0, s12
 80152da:	eef0 0a66 	vmov.f32	s1, s13
 80152de:	eeb0 1a47 	vmov.f32	s2, s14
 80152e2:	eef0 1a67 	vmov.f32	s3, s15
 80152e6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80152ea:	f7fc f873 	bl	80113d4 <nk_fill_rect>
                break;
 80152ee:	bf00      	nop
        }

        /* window close button */
        {struct nk_rect button;
        button.y = header.y + style->window.header.padding.y;
 80152f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80152f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80152f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80152fc:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8015300:	edd3 7a00 	vldr	s15, [r3]
 8015304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015308:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        button.h = header.h - 2 * style->window.header.padding.y;
 801530c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8015310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015318:	f603 0344 	addw	r3, r3, #2116	; 0x844
 801531c:	edd3 7a00 	vldr	s15, [r3]
 8015320:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015328:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        button.w = button.h;
 801532c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801532e:	653b      	str	r3, [r7, #80]	; 0x50
        if (win->flags & NK_WINDOW_CLOSABLE) {
 8015330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015336:	f003 0308 	and.w	r3, r3, #8
 801533a:	2b00      	cmp	r3, #0
 801533c:	f000 80ad 	beq.w	801549a <nk_panel_begin+0x906>
            nk_flags ws = 0;
 8015340:	2300      	movs	r3, #0
 8015342:	647b      	str	r3, [r7, #68]	; 0x44
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8015344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801534c:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8015350:	2b01      	cmp	r3, #1
 8015352:	d132      	bne.n	80153ba <nk_panel_begin+0x826>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
 8015354:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015358:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801535c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015360:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801536c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015370:	edd3 7a00 	vldr	s15, [r3]
 8015374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015378:	ee77 7a67 	vsub.f32	s15, s14, s15
 801537c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8015380:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015384:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801538c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015390:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015394:	edd3 7a00 	vldr	s15, [r3]
 8015398:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801539c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80153a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153a4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80153a8:	edd3 7a00 	vldr	s15, [r3]
 80153ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80153b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153b4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80153b8:	e029      	b.n	801540e <nk_panel_begin+0x87a>
            } else {
                button.x = header.x + style->window.header.padding.x;
 80153ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80153be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80153c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153c6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80153ca:	edd3 7a00 	vldr	s15, [r3]
 80153ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 80153d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80153da:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80153de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80153e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153e6:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80153ea:	edd3 7a00 	vldr	s15, [r3]
 80153ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80153f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80153f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153fa:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80153fe:	edd3 7a00 	vldr	s15, [r3]
 8015402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015406:	ee77 7a27 	vadd.f32	s15, s14, s15
 801540a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }

            if (nk_do_button_symbol(&ws, &win->buffer, button,
 801540e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015412:	f103 0164 	add.w	r1, r3, #100	; 0x64
                style->window.header.close_symbol, NK_BUTTON_DEFAULT,
 8015416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801541a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801541e:	f893 4830 	ldrb.w	r4, [r3, #2096]	; 0x830
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8015422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015426:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 801542a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801542e:	6812      	ldr	r2, [r2, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8015430:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8015434:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8015438:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801543c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015440:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8015444:	9202      	str	r2, [sp, #8]
 8015446:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801544a:	9201      	str	r2, [sp, #4]
 801544c:	9300      	str	r3, [sp, #0]
 801544e:	2300      	movs	r3, #0
 8015450:	4622      	mov	r2, r4
 8015452:	eeb0 0a46 	vmov.f32	s0, s12
 8015456:	eef0 0a66 	vmov.f32	s1, s13
 801545a:	eeb0 1a47 	vmov.f32	s2, s14
 801545e:	eef0 1a67 	vmov.f32	s3, s15
 8015462:	f7f9 fe23 	bl	800f0ac <nk_do_button_symbol>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d016      	beq.n	801549a <nk_panel_begin+0x906>
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 801546c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015476:	2b00      	cmp	r3, #0
 8015478:	d10f      	bne.n	801549a <nk_panel_begin+0x906>
            {
                layout->flags |= NK_WINDOW_HIDDEN;
 801547a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8015484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015488:	605a      	str	r2, [r3, #4]
                layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;
 801548a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8015494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015498:	605a      	str	r2, [r3, #4]
            }
        }

        /* window minimize button */
        if (win->flags & NK_WINDOW_MINIMIZABLE) {
 801549a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801549e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154a0:	f003 0310 	and.w	r3, r3, #16
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f000 80c9 	beq.w	801563c <nk_panel_begin+0xaa8>
            nk_flags ws = 0;
 80154aa:	2300      	movs	r3, #0
 80154ac:	643b      	str	r3, [r7, #64]	; 0x40
            if (style->window.header.align == NK_HEADER_RIGHT) {
 80154ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80154b6:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 80154ba:	2b01      	cmp	r3, #1
 80154bc:	d141      	bne.n	8015542 <nk_panel_begin+0x9ae>
                button.x = (header.w + header.x) - button.w;
 80154be:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80154c2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80154c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80154ca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80154ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                if (!(win->flags & NK_WINDOW_CLOSABLE)) {
 80154d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80154da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154dc:	f003 0308 	and.w	r3, r3, #8
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d11b      	bne.n	801551c <nk_panel_begin+0x988>
                    button.x -= style->window.header.padding.x;
 80154e4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80154e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80154f0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80154f4:	edd3 7a00 	vldr	s15, [r3]
 80154f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    header.w -= style->window.header.padding.x;
 8015500:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801550c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8015510:	edd3 7a00 	vldr	s15, [r3]
 8015514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015518:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
                }
                header.w -= button.w + style->window.header.spacing.x;
 801551c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015520:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8015524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801552c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015530:	edd3 7a00 	vldr	s15, [r3]
 8015534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015538:	ee77 7a67 	vsub.f32	s15, s14, s15
 801553c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8015540:	e01d      	b.n	801557e <nk_panel_begin+0x9ea>
            } else {
                button.x = header.x;
 8015542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015544:	64bb      	str	r3, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8015546:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801554a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 801554e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015556:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801555a:	edd3 7a00 	vldr	s15, [r3]
 801555e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801556a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 801556e:	edd3 7a00 	vldr	s15, [r3]
 8015572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015576:	ee77 7a27 	vadd.f32	s15, s14, s15
 801557a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 801557e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015582:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8015586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801558a:	685b      	ldr	r3, [r3, #4]
 801558c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015590:	2b00      	cmp	r3, #0
 8015592:	d00b      	beq.n	80155ac <nk_panel_begin+0xa18>
 8015594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801559c:	f893 2832 	ldrb.w	r2, [r3, #2098]	; 0x832
 80155a0:	e00a      	b.n	80155b8 <nk_panel_begin+0xa24>
 80155a2:	bf00      	nop
 80155a4:	080230b8 	.word	0x080230b8
 80155a8:	00000000 	.word	0x00000000
 80155ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80155b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80155b4:	f893 2831 	ldrb.w	r2, [r3, #2097]	; 0x831
 80155b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80155bc:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80155c0:	3318      	adds	r3, #24
                style->window.header.maximize_symbol: style->window.header.minimize_symbol,
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 80155c2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80155c6:	6809      	ldr	r1, [r1, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 80155c8:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 80155cc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80155d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80155d4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80155d8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80155dc:	9102      	str	r1, [sp, #8]
 80155de:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80155e2:	9101      	str	r1, [sp, #4]
 80155e4:	9300      	str	r3, [sp, #0]
 80155e6:	2300      	movs	r3, #0
 80155e8:	eeb0 0a46 	vmov.f32	s0, s12
 80155ec:	eef0 0a66 	vmov.f32	s1, s13
 80155f0:	eeb0 1a47 	vmov.f32	s2, s14
 80155f4:	eef0 1a67 	vmov.f32	s3, s15
 80155f8:	4621      	mov	r1, r4
 80155fa:	f7f9 fd57 	bl	800f0ac <nk_do_button_symbol>
 80155fe:	4603      	mov	r3, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	d01b      	beq.n	801563c <nk_panel_begin+0xaa8>
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8015604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801560a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801560e:	2b00      	cmp	r3, #0
 8015610:	d114      	bne.n	801563c <nk_panel_begin+0xaa8>
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8015612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 801561c:	2b00      	cmp	r3, #0
 801561e:	d005      	beq.n	801562c <nk_panel_begin+0xa98>
 8015620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801562a:	e004      	b.n	8015636 <nk_panel_begin+0xaa2>
                    layout->flags | NK_WINDOW_MINIMIZED;
 801562c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015630:	685b      	ldr	r3, [r3, #4]
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8015632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8015636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801563a:	6053      	str	r3, [r2, #4]
        }}

        {/* window header title */
        int text_len = nk_strlen(title);
 801563c:	68b8      	ldr	r0, [r7, #8]
 801563e:	f006 facd 	bl	801bbdc <nk_strlen>
 8015642:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        struct nk_rect label = {0,0,0,0};
 8015646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801564a:	2200      	movs	r2, #0
 801564c:	601a      	str	r2, [r3, #0]
 801564e:	605a      	str	r2, [r3, #4]
 8015650:	609a      	str	r2, [r3, #8]
 8015652:	60da      	str	r2, [r3, #12]
        float t = font->width(font->userdata, font->height, title, text_len);
 8015654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015658:	689b      	ldr	r3, [r3, #8]
 801565a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801565e:	edd2 7a01 	vldr	s15, [r2, #4]
 8015662:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015666:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801566a:	68b9      	ldr	r1, [r7, #8]
 801566c:	eeb0 0a67 	vmov.f32	s0, s15
 8015670:	6800      	ldr	r0, [r0, #0]
 8015672:	4798      	blx	r3
 8015674:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        text.padding = nk_vec2(0,0);
 8015678:	ed5f 0a35 	vldr	s1, [pc, #-212]	; 80155a8 <nk_panel_begin+0xa14>
 801567c:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 80155a8 <nk_panel_begin+0xa14>
 8015680:	f7fe fcb6 	bl	8013ff0 <nk_vec2>
 8015684:	eeb0 7a40 	vmov.f32	s14, s0
 8015688:	eef0 7a60 	vmov.f32	s15, s1
 801568c:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8015690:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        label.x = header.x + style->window.header.padding.x;
 8015694:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801569c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80156a0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 80156a4:	edd3 7a00 	vldr	s15, [r3]
 80156a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156ac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.x += style->window.header.label_padding.x;
 80156b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80156b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80156b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80156bc:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80156c0:	edd3 7a00 	vldr	s15, [r3]
 80156c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.y = header.y + style->window.header.label_padding.y;
 80156cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80156d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80156d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80156d8:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80156dc:	edd3 7a00 	vldr	s15, [r3]
 80156e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        label.h = font->height + 2 * style->window.header.label_padding.y;
 80156e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80156ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80156f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80156f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80156f8:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80156fc:	edd3 7a00 	vldr	s15, [r3]
 8015700:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015708:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.w = t + 2 * style->window.header.spacing.x;
 801570c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015714:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8015718:	edd3 7a00 	vldr	s15, [r3]
 801571c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8015720:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015728:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 801572c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015730:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015734:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015738:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801573c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015740:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801574c:	d50a      	bpl.n	8015764 <nk_panel_begin+0xbd0>
 801574e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801575a:	bf4c      	ite	mi
 801575c:	2301      	movmi	r3, #1
 801575e:	2300      	movpl	r3, #0
 8015760:	b2db      	uxtb	r3, r3
 8015762:	e011      	b.n	8015788 <nk_panel_begin+0xbf4>
 8015764:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015768:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801576c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015770:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015780:	bf4c      	ite	mi
 8015782:	2301      	movmi	r3, #1
 8015784:	2300      	movpl	r3, #0
 8015786:	b2db      	uxtb	r3, r3
 8015788:	2b00      	cmp	r3, #0
 801578a:	d002      	beq.n	8015792 <nk_panel_begin+0xbfe>
 801578c:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 80155a8 <nk_panel_begin+0xa14>
 8015790:	e01d      	b.n	80157ce <nk_panel_begin+0xc3a>
 8015792:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015796:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801579a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801579e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80157a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80157a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80157aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b2:	d502      	bpl.n	80157ba <nk_panel_begin+0xc26>
 80157b4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80157b8:	e009      	b.n	80157ce <nk_panel_begin+0xc3a>
 80157ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80157be:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80157c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80157c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80157ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_widget_text(out, label, (const char*)title, text_len, &text, NK_TEXT_LEFT, font);}
 80157d2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80157d6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80157da:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80157de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80157e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80157e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80157ea:	9301      	str	r3, [sp, #4]
 80157ec:	2311      	movs	r3, #17
 80157ee:	9300      	str	r3, [sp, #0]
 80157f0:	4613      	mov	r3, r2
 80157f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80157f6:	68b9      	ldr	r1, [r7, #8]
 80157f8:	eeb0 0a46 	vmov.f32	s0, s12
 80157fc:	eef0 0a66 	vmov.f32	s1, s13
 8015800:	eeb0 1a47 	vmov.f32	s2, s14
 8015804:	eef0 1a67 	vmov.f32	s3, s15
 8015808:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801580c:	f005 f80e 	bl	801a82c <nk_widget_text>
    }

    /* draw window background */
    if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {
 8015810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015814:	685b      	ldr	r3, [r3, #4]
 8015816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801581a:	2b00      	cmp	r3, #0
 801581c:	f040 808d 	bne.w	801593a <nk_panel_begin+0xda6>
 8015820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801582a:	2b00      	cmp	r3, #0
 801582c:	f040 8085 	bne.w	801593a <nk_panel_begin+0xda6>
        struct nk_rect body;
        body.x = win->bounds.x;
 8015830:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015836:	623b      	str	r3, [r7, #32]
        body.w = win->bounds.w;
 8015838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801583e:	62bb      	str	r3, [r7, #40]	; 0x28
        body.y = (win->bounds.y + layout->header_height);
 8015840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015844:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8015848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801584c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015854:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        body.h = (win->bounds.h - layout->header_height);
 8015858:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801585c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8015860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015864:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015868:	ee77 7a67 	vsub.f32	s15, s14, s15
 801586c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        switch(style->window.fixed_background.type) {
 8015870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015878:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 801587c:	2b02      	cmp	r3, #2
 801587e:	d022      	beq.n	80158c6 <nk_panel_begin+0xd32>
 8015880:	2b02      	cmp	r3, #2
 8015882:	dc5a      	bgt.n	801593a <nk_panel_begin+0xda6>
 8015884:	2b00      	cmp	r3, #0
 8015886:	d03b      	beq.n	8015900 <nk_panel_begin+0xd6c>
 8015888:	2b01      	cmp	r3, #1
 801588a:	d156      	bne.n	801593a <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);
 801588c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015890:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8015894:	331c      	adds	r3, #28
 8015896:	4a5e      	ldr	r2, [pc, #376]	; (8015a10 <nk_panel_begin+0xe7c>)
 8015898:	ed97 6a08 	vldr	s12, [r7, #32]
 801589c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80158a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80158a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80158a8:	6812      	ldr	r2, [r2, #0]
 80158aa:	4619      	mov	r1, r3
 80158ac:	eeb0 0a46 	vmov.f32	s0, s12
 80158b0:	eef0 0a66 	vmov.f32	s1, s13
 80158b4:	eeb0 1a47 	vmov.f32	s2, s14
 80158b8:	eef0 1a67 	vmov.f32	s3, s15
 80158bc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80158c0:	f7fc f8e2 	bl	8011a88 <nk_draw_image>
                break;
 80158c4:	e039      	b.n	801593a <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, body, &style->window.fixed_background.data.slice, nk_white);
 80158c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80158ca:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80158ce:	331c      	adds	r3, #28
 80158d0:	4a4f      	ldr	r2, [pc, #316]	; (8015a10 <nk_panel_begin+0xe7c>)
 80158d2:	ed97 6a08 	vldr	s12, [r7, #32]
 80158d6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80158da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80158de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80158e2:	6812      	ldr	r2, [r2, #0]
 80158e4:	4619      	mov	r1, r3
 80158e6:	eeb0 0a46 	vmov.f32	s0, s12
 80158ea:	eef0 0a66 	vmov.f32	s1, s13
 80158ee:	eeb0 1a47 	vmov.f32	s2, s14
 80158f2:	eef0 1a67 	vmov.f32	s3, s15
 80158f6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80158fa:	f7fc f9b7 	bl	8011c6c <nk_draw_nine_slice>
                break;
 80158fe:	e01c      	b.n	801593a <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);
 8015900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015908:	ed97 6a08 	vldr	s12, [r7, #32]
 801590c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8015910:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015914:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015918:	f8d3 185c 	ldr.w	r1, [r3, #2140]	; 0x85c
 801591c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8015a14 <nk_panel_begin+0xe80>
 8015920:	eeb0 0a46 	vmov.f32	s0, s12
 8015924:	eef0 0a66 	vmov.f32	s1, s13
 8015928:	eeb0 1a47 	vmov.f32	s2, s14
 801592c:	eef0 1a67 	vmov.f32	s3, s15
 8015930:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8015934:	f7fb fd4e 	bl	80113d4 <nk_fill_rect>
                break;
 8015938:	bf00      	nop
        }
    }

    /* set clipping rectangle */
    {struct nk_rect clip;
    layout->clip = layout->bounds;
 801593a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801593e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015942:	f102 043c 	add.w	r4, r2, #60	; 0x3c
 8015946:	3308      	adds	r3, #8
 8015948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801594a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 801594e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015952:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801595a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 801595e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015962:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 8015966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801596a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801596e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015972:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 8015976:	ee77 5a27 	vadd.f32	s11, s14, s15
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 801597a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801597e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8015982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015986:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 801598a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801598e:	f107 0310 	add.w	r3, r7, #16
 8015992:	eef0 1a67 	vmov.f32	s3, s15
 8015996:	eeb0 1a65 	vmov.f32	s2, s11
 801599a:	eef0 0a46 	vmov.f32	s1, s12
 801599e:	eeb0 0a66 	vmov.f32	s0, s13
 80159a2:	4611      	mov	r1, r2
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7fe fb45 	bl	8014034 <nk_unify>
    nk_push_scissor(out, clip);
 80159aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80159ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80159b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80159b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80159ba:	eeb0 0a46 	vmov.f32	s0, s12
 80159be:	eef0 0a66 	vmov.f32	s1, s13
 80159c2:	eeb0 1a47 	vmov.f32	s2, s14
 80159c6:	eef0 1a67 	vmov.f32	s3, s15
 80159ca:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80159ce:	f7fb fb81 	bl	80110d4 <nk_push_scissor>
    layout->clip = clip;}
 80159d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80159d6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80159da:	f107 0310 	add.w	r3, r7, #16
 80159de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);
 80159e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d108      	bne.n	8015a04 <nk_panel_begin+0xe70>
 80159f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d101      	bne.n	8015a04 <nk_panel_begin+0xe70>
 8015a00:	2301      	movs	r3, #1
 8015a02:	e000      	b.n	8015a06 <nk_panel_begin+0xe72>
 8015a04:	2300      	movs	r3, #0
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	37cc      	adds	r7, #204	; 0xcc
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd90      	pop	{r4, r7, pc}
 8015a0e:	bf00      	nop
 8015a10:	080230b8 	.word	0x080230b8
 8015a14:	00000000 	.word	0x00000000

08015a18 <nk_panel_end>:
NK_LIB void
nk_panel_end(struct nk_context *ctx)
{
 8015a18:	b590      	push	{r4, r7, lr}
 8015a1a:	b0b3      	sub	sp, #204	; 0xcc
 8015a1c:	af02      	add	r7, sp, #8
 8015a1e:	6078      	str	r0, [r7, #4]
    struct nk_command_buffer *out;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d106      	bne.n	8015a34 <nk_panel_end+0x1c>
 8015a26:	4b31      	ldr	r3, [pc, #196]	; (8015aec <nk_panel_end+0xd4>)
 8015a28:	4a31      	ldr	r2, [pc, #196]	; (8015af0 <nk_panel_end+0xd8>)
 8015a2a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8015a2e:	4831      	ldr	r0, [pc, #196]	; (8015af4 <nk_panel_end+0xdc>)
 8015a30:	f007 fdae 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015a3a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d106      	bne.n	8015a50 <nk_panel_end+0x38>
 8015a42:	4b2d      	ldr	r3, [pc, #180]	; (8015af8 <nk_panel_end+0xe0>)
 8015a44:	4a2a      	ldr	r2, [pc, #168]	; (8015af0 <nk_panel_end+0xd8>)
 8015a46:	f240 1153 	movw	r1, #339	; 0x153
 8015a4a:	482a      	ldr	r0, [pc, #168]	; (8015af4 <nk_panel_end+0xdc>)
 8015a4c:	f007 fda0 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015a56:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d106      	bne.n	8015a70 <nk_panel_end+0x58>
 8015a62:	4b26      	ldr	r3, [pc, #152]	; (8015afc <nk_panel_end+0xe4>)
 8015a64:	4a22      	ldr	r2, [pc, #136]	; (8015af0 <nk_panel_end+0xd8>)
 8015a66:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8015a6a:	4822      	ldr	r0, [pc, #136]	; (8015af4 <nk_panel_end+0xdc>)
 8015a6c:	f007 fd90 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	f000 8792 	beq.w	801699c <nk_panel_end+0xf84>
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015a7e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	f000 878a 	beq.w	801699c <nk_panel_end+0xf84>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015a8e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	f000 8780 	beq.w	801699c <nk_panel_end+0xf84>
        return;

    window = ctx->current;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015aa2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    layout = window->layout;
 8015aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    style = &ctx->style;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8015abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    out = &window->buffer;
 8015ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ac4:	3364      	adds	r3, #100	; 0x64
 8015ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;
 8015aca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d113      	bne.n	8015b00 <nk_panel_end+0xe8>
 8015ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d10c      	bne.n	8015b00 <nk_panel_end+0xe8>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	e00b      	b.n	8015b02 <nk_panel_end+0xea>
 8015aea:	bf00      	nop
 8015aec:	080214f8 	.word	0x080214f8
 8015af0:	080230cc 	.word	0x080230cc
 8015af4:	080214fc 	.word	0x080214fc
 8015af8:	08021518 	.word	0x08021518
 8015afc:	08021528 	.word	0x08021528
 8015b00:	2300      	movs	r3, #0
 8015b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (!nk_panel_is_sub(layout->type))
 8015b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7ff f81b 	bl	8014b48 <nk_panel_is_sub>
 8015b12:	4603      	mov	r3, r0
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d114      	bne.n	8015b42 <nk_panel_end+0x12a>
        nk_push_scissor(out, nk_null_rect);
 8015b18:	4bcb      	ldr	r3, [pc, #812]	; (8015e48 <nk_panel_end+0x430>)
 8015b1a:	ed93 6a00 	vldr	s12, [r3]
 8015b1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015b22:	ed93 7a02 	vldr	s14, [r3, #8]
 8015b26:	edd3 7a03 	vldr	s15, [r3, #12]
 8015b2a:	eeb0 0a46 	vmov.f32	s0, s12
 8015b2e:	eef0 0a66 	vmov.f32	s1, s13
 8015b32:	eeb0 1a47 	vmov.f32	s2, s14
 8015b36:	eef0 1a67 	vmov.f32	s3, s15
 8015b3a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015b3e:	f7fb fac9 	bl	80110d4 <nk_push_scissor>

    /* cache configuration data */
    scrollbar_size = style->window.scrollbar_size;
 8015b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015b50:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 8015b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015b58:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, layout->type);
 8015b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	4619      	mov	r1, r3
 8015b64:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8015b68:	f7fe fdfc 	bl	8014764 <nk_panel_get_padding>
 8015b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8015b70:	eef0 7a60 	vmov.f32	s15, s1
 8015b74:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8015b78:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* update the current cursor Y-position to point over the last added widget */
    layout->at_y += layout->row.height;
 8015b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b80:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8015b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b88:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8015b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b94:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    /* dynamic panels */
    if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))
 8015b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	f000 8111 	beq.w	8015dca <nk_panel_end+0x3b2>
 8015ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bac:	685b      	ldr	r3, [r3, #4]
 8015bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	f040 8109 	bne.w	8015dca <nk_panel_end+0x3b2>
    {
        /* update panel height to fit dynamic growth */
        struct nk_rect empty_space;
        if (layout->at_y < (layout->bounds.y + layout->bounds.h))
 8015bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bbc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8015bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bc4:	edd3 6a03 	vldr	s13, [r3, #12]
 8015bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bcc:	edd3 7a05 	vldr	s15, [r3, #20]
 8015bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bdc:	d50d      	bpl.n	8015bfa <nk_panel_end+0x1e2>
            layout->bounds.h = layout->at_y - layout->bounds.y;
 8015bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015be2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8015be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bea:	edd3 7a03 	vldr	s15, [r3, #12]
 8015bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bf6:	edc3 7a05 	vstr	s15, [r3, #20]

        /* fill top empty space */
        empty_space.x = window->bounds.x;
 8015bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c00:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8015c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c06:	68db      	ldr	r3, [r3, #12]
 8015c08:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.h = panel_padding.y;
 8015c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
        empty_space.w = window->bounds.w;
 8015c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c14:	65bb      	str	r3, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8015c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c1e:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8015c22:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8015c26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015c2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015c2e:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8015c32:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8015e4c <nk_panel_end+0x434>
 8015c36:	eeb0 0a46 	vmov.f32	s0, s12
 8015c3a:	eef0 0a66 	vmov.f32	s1, s13
 8015c3e:	eeb0 1a47 	vmov.f32	s2, s14
 8015c42:	eef0 1a67 	vmov.f32	s3, s15
 8015c46:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015c4a:	f7fb fbc3 	bl	80113d4 <nk_fill_rect>

        /* fill left empty space */
        empty_space.x = window->bounds.x;
 8015c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c54:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8015c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c5a:	68db      	ldr	r3, [r3, #12]
 8015c5c:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 8015c5e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8015c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 8015c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c76:	695b      	ldr	r3, [r3, #20]
 8015c78:	65fb      	str	r3, [r7, #92]	; 0x5c
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8015c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c82:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8015c86:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8015c8a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015c8e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015c92:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8015c96:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8015e4c <nk_panel_end+0x434>
 8015c9a:	eeb0 0a46 	vmov.f32	s0, s12
 8015c9e:	eef0 0a66 	vmov.f32	s1, s13
 8015ca2:	eeb0 1a47 	vmov.f32	s2, s14
 8015ca6:	eef0 1a67 	vmov.f32	s3, s15
 8015caa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015cae:	f7fb fb91 	bl	80113d4 <nk_fill_rect>

        /* fill right empty space */
        empty_space.x = layout->bounds.x + layout->bounds.w;
 8015cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cb6:	ed93 7a02 	vldr	s14, [r3, #8]
 8015cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8015cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cc6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8015cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 8015cd2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8015cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ce2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 8015ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cea:	695b      	ldr	r3, [r3, #20]
 8015cec:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))
 8015cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cf2:	69db      	ldr	r3, [r3, #28]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d10e      	bne.n	8015d18 <nk_panel_end+0x300>
 8015cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	f003 0320 	and.w	r3, r3, #32
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d107      	bne.n	8015d18 <nk_panel_end+0x300>
            empty_space.w += scrollbar_size.x;
 8015d08:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015d0c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8015d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d14:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8015d18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d20:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8015d24:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8015d28:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015d2c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015d30:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8015d34:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8015e4c <nk_panel_end+0x434>
 8015d38:	eeb0 0a46 	vmov.f32	s0, s12
 8015d3c:	eef0 0a66 	vmov.f32	s1, s13
 8015d40:	eeb0 1a47 	vmov.f32	s2, s14
 8015d44:	eef0 1a67 	vmov.f32	s3, s15
 8015d48:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015d4c:	f7fb fb42 	bl	80113d4 <nk_fill_rect>

        /* fill bottom empty space */
        if (layout->footer_height > 0) {
 8015d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015d54:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8015d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d60:	dd33      	ble.n	8015dca <nk_panel_end+0x3b2>
            empty_space.x = window->bounds.x;
 8015d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015d68:	653b      	str	r3, [r7, #80]	; 0x50
            empty_space.y = layout->bounds.y + layout->bounds.h;
 8015d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015d6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8015d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015d76:	edd3 7a05 	vldr	s15, [r3, #20]
 8015d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d7e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            empty_space.w = window->bounds.w;
 8015d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d88:	65bb      	str	r3, [r7, #88]	; 0x58
            empty_space.h = layout->footer_height;
 8015d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d90:	65fb      	str	r3, [r7, #92]	; 0x5c
            nk_fill_rect(out, empty_space, 0, style->window.background);
 8015d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d9a:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8015d9e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8015da2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015da6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015daa:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8015dae:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8015e4c <nk_panel_end+0x434>
 8015db2:	eeb0 0a46 	vmov.f32	s0, s12
 8015db6:	eef0 0a66 	vmov.f32	s1, s13
 8015dba:	eeb0 1a47 	vmov.f32	s2, s14
 8015dbe:	eef0 1a67 	vmov.f32	s3, s15
 8015dc2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015dc6:	f7fb fb05 	bl	80113d4 <nk_fill_rect>
        }
    }

    /* scrollbars */
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8015dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	f003 0320 	and.w	r3, r3, #32
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	f040 8232 	bne.w	801623e <nk_panel_end+0x826>
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 8015dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	f040 822a 	bne.w	801623e <nk_panel_end+0x826>
        window->scrollbar_hiding_timer < NK_SCROLLBAR_HIDING_TIMEOUT)
 8015dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015dee:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 8015df2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8015df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dfe:	f140 821e 	bpl.w	801623e <nk_panel_end+0x826>
        float scroll_offset;
        float scroll_step;
        float scroll_inc;

        /* mouse wheel scrolling */
        if (nk_panel_is_sub(layout->type))
 8015e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7fe fe9d 	bl	8014b48 <nk_panel_is_sub>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	f000 80cb 	beq.w	8015fac <nk_panel_end+0x594>
        {
            /* sub-window mouse wheel scrolling */
            struct nk_window *root_window = window;
 8015e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015e1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            struct nk_panel *root_panel = window->layout;
 8015e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 8015e2a:	e005      	b.n	8015e38 <nk_panel_end+0x420>
                root_panel = root_panel->parent;
 8015e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015e30:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8015e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 8015e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015e3c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d1f3      	bne.n	8015e2c <nk_panel_end+0x414>
            while (root_window->parent)
 8015e44:	e012      	b.n	8015e6c <nk_panel_end+0x454>
 8015e46:	bf00      	nop
 8015e48:	080230a8 	.word	0x080230a8
 8015e4c:	00000000 	.word	0x00000000
 8015e50:	3dcccccd 	.word	0x3dcccccd
 8015e54:	3c23d70a 	.word	0x3c23d70a
 8015e58:	3d4ccccd 	.word	0x3d4ccccd
 8015e5c:	3ba3d70a 	.word	0x3ba3d70a
                root_window = root_window->parent;
 8015e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015e64:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8015e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while (root_window->parent)
 8015e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015e70:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d1f3      	bne.n	8015e60 <nk_panel_end+0x448>

            /* only allow scrolling if parent window is active */
            scroll_has_scrolling = 0;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if ((root_window == ctx->active) && layout->has_scrolling) {
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015e84:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015e88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	f040 80d2 	bne.w	8016036 <nk_panel_end+0x61e>
 8015e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	f000 80cc 	beq.w	8016036 <nk_panel_end+0x61e>
                /* and panel is being hovered and inside clip rect*/
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 8015e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015ea2:	ed93 6a02 	vldr	s12, [r3, #8]
 8015ea6:	edd3 6a03 	vldr	s13, [r3, #12]
 8015eaa:	ed93 7a04 	vldr	s14, [r3, #16]
 8015eae:	edd3 7a05 	vldr	s15, [r3, #20]
 8015eb2:	eeb0 0a46 	vmov.f32	s0, s12
 8015eb6:	eef0 0a66 	vmov.f32	s1, s13
 8015eba:	eeb0 1a47 	vmov.f32	s2, s14
 8015ebe:	eef0 1a67 	vmov.f32	s3, s15
 8015ec2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015ec6:	f7fc fec6 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	f000 80b2 	beq.w	8016036 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 8015ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015ed6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8015eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015ede:	edd3 6a02 	vldr	s13, [r3, #8]
 8015ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015ee6:	edd3 7a04 	vldr	s15, [r3, #16]
 8015eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 8015eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef6:	f140 809e 	bpl.w	8016036 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 8015efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015efe:	ed93 7a02 	vldr	s14, [r3, #8]
 8015f02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f06:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8015f0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f0e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8015f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f1e:	f140 808a 	bpl.w	8016036 <nk_panel_end+0x61e>
 8015f22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f26:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8015f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015f2e:	edd3 6a03 	vldr	s13, [r3, #12]
 8015f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015f36:	edd3 7a05 	vldr	s15, [r3, #20]
 8015f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f46:	d576      	bpl.n	8016036 <nk_panel_end+0x61e>
 8015f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015f4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8015f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f54:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8015f58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f5c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8015f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f6c:	d563      	bpl.n	8016036 <nk_panel_end+0x61e>
                        root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))
                {
                    /* deactivate all parent scrolling */
                    root_panel = window->layout;
 8015f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 8015f7a:	e009      	b.n	8015f90 <nk_panel_end+0x578>
                        root_panel->has_scrolling = nk_false;
 8015f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f80:	2200      	movs	r2, #0
 8015f82:	639a      	str	r2, [r3, #56]	; 0x38
                        root_panel = root_panel->parent;
 8015f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f88:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8015f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 8015f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f94:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d1ef      	bne.n	8015f7c <nk_panel_end+0x564>
                    }
                    root_panel->has_scrolling = nk_false;
 8015f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	639a      	str	r2, [r3, #56]	; 0x38
                    scroll_has_scrolling = nk_true;
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015faa:	e044      	b.n	8016036 <nk_panel_end+0x61e>
                }
            }
        } else if (!nk_panel_is_sub(layout->type)) {
 8015fac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7fe fdc8 	bl	8014b48 <nk_panel_is_sub>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d138      	bne.n	8016030 <nk_panel_end+0x618>
            /* window mouse wheel scrolling */
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015fc4:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015fc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d106      	bne.n	8015fde <nk_panel_end+0x5c6>
 8015fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d001      	beq.n	8015fde <nk_panel_end+0x5c6>
 8015fda:	2301      	movs	r3, #1
 8015fdc:	e000      	b.n	8015fe0 <nk_panel_end+0x5c8>
 8015fde:	2300      	movs	r3, #0
 8015fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 8015fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d01b      	beq.n	8016024 <nk_panel_end+0x60c>
 8015fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ff0:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8015ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ffc:	dc08      	bgt.n	8016010 <nk_panel_end+0x5f8>
 8015ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016002:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 8016006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801600a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801600e:	dd09      	ble.n	8016024 <nk_panel_end+0x60c>
 8016010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016014:	2b00      	cmp	r3, #0
 8016016:	d005      	beq.n	8016024 <nk_panel_end+0x60c>
                window->scrolled = nk_true;
 8016018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801601c:	2201      	movs	r2, #1
 801601e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8016022:	e008      	b.n	8016036 <nk_panel_end+0x61e>
            else window->scrolled = nk_false;
 8016024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016028:	2200      	movs	r2, #0
 801602a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801602e:	e002      	b.n	8016036 <nk_panel_end+0x61e>
        } else scroll_has_scrolling = nk_false;
 8016030:	2300      	movs	r3, #0
 8016032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        {
            /* vertical scrollbar */
            nk_flags state = 0;
 8016036:	2300      	movs	r3, #0
 8016038:	63fb      	str	r3, [r7, #60]	; 0x3c
            scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 801603a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801603e:	ed93 7a02 	vldr	s14, [r3, #8]
 8016042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016046:	edd3 7a04 	vldr	s15, [r3, #16]
 801604a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801604e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8016052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016056:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y;
 801605a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801605e:	68db      	ldr	r3, [r3, #12]
 8016060:	647b      	str	r3, [r7, #68]	; 0x44
            scroll.w = scrollbar_size.x;
 8016062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016064:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = layout->bounds.h;
 8016066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801606a:	695b      	ldr	r3, [r3, #20]
 801606c:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_y;
 801606e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016072:	69db      	ldr	r3, [r3, #28]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	ee07 3a90 	vmov	s15, r3
 801607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801607e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_step = scroll.h * 0.10f;
 8016082:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8016086:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 8015e50 <nk_panel_end+0x438>
 801608a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801608e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = scroll.h * 0.01f;
 8016092:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8016096:	ed1f 7a91 	vldr	s14, [pc, #-580]	; 8015e54 <nk_panel_end+0x43c>
 801609a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801609e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_target = (float)(int)(layout->at_y - scroll.y);
 80160a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80160a6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80160aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80160ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80160b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80160ba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollv, in, style->font);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80160c4:	3318      	adds	r3, #24
 80160c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80160ca:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
 80160cc:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80160d0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80160d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80160d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80160dc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80160e0:	9201      	str	r2, [sp, #4]
 80160e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80160e6:	9200      	str	r2, [sp, #0]
 80160e8:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 80160ec:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 80160f0:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 80160f4:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 80160f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80160fc:	eeb0 0a46 	vmov.f32	s0, s12
 8016100:	eef0 0a66 	vmov.f32	s1, s13
 8016104:	eeb0 1a47 	vmov.f32	s2, s14
 8016108:	eef0 1a67 	vmov.f32	s3, s15
 801610c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8016110:	f001 fc82 	bl	8017a18 <nk_do_scrollbarv>
 8016114:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_y = (nk_uint)scroll_offset;
 8016118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801611c:	69db      	ldr	r3, [r3, #28]
 801611e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8016122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016126:	ee17 2a90 	vmov	r2, s15
 801612a:	601a      	str	r2, [r3, #0]
            if (in && scroll_has_scrolling)
 801612c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016130:	2b00      	cmp	r3, #0
 8016132:	d009      	beq.n	8016148 <nk_panel_end+0x730>
 8016134:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016138:	2b00      	cmp	r3, #0
 801613a:	d005      	beq.n	8016148 <nk_panel_end+0x730>
                in->mouse.scroll_delta.y = 0;
 801613c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016140:	f04f 0200 	mov.w	r2, #0
 8016144:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        }
        {
            /* horizontal scrollbar */
            nk_flags state = 0;
 8016148:	2300      	movs	r3, #0
 801614a:	63bb      	str	r3, [r7, #56]	; 0x38
            scroll.x = layout->bounds.x;
 801614c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016150:	689b      	ldr	r3, [r3, #8]
 8016152:	643b      	str	r3, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y + layout->bounds.h;
 8016154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016158:	ed93 7a03 	vldr	s14, [r3, #12]
 801615c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016160:	edd3 7a05 	vldr	s15, [r3, #20]
 8016164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016168:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            scroll.w = layout->bounds.w;
 801616c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016170:	691b      	ldr	r3, [r3, #16]
 8016172:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = scrollbar_size.y;
 8016174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016176:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_x;
 8016178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801617c:	699b      	ldr	r3, [r3, #24]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	ee07 3a90 	vmov	s15, r3
 8016184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016188:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 801618c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016190:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8016194:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016198:	ee77 7a67 	vsub.f32	s15, s14, s15
 801619c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80161a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161a4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_step = layout->max_x * 0.05f;
 80161a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80161ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80161b0:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 8015e58 <nk_panel_end+0x440>
 80161b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80161b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = layout->max_x * 0.005f;
 80161bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80161c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80161c4:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8015e5c <nk_panel_end+0x444>
 80161c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80161cc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollh, in, style->font);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80161d6:	330c      	adds	r3, #12
 80161d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80161dc:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 80161de:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80161e2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80161e6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80161ea:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80161ee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80161f2:	9201      	str	r2, [sp, #4]
 80161f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80161f8:	9200      	str	r2, [sp, #0]
 80161fa:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 80161fe:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8016202:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8016206:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 801620a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801620e:	eeb0 0a46 	vmov.f32	s0, s12
 8016212:	eef0 0a66 	vmov.f32	s1, s13
 8016216:	eeb0 1a47 	vmov.f32	s2, s14
 801621a:	eef0 1a67 	vmov.f32	s3, s15
 801621e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8016222:	f001 fe97 	bl	8017f54 <nk_do_scrollbarh>
 8016226:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_x = (nk_uint)scroll_offset;
 801622a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801622e:	699b      	ldr	r3, [r3, #24]
 8016230:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8016234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016238:	ee17 2a90 	vmov	r2, s15
 801623c:	601a      	str	r2, [r3, #0]
        }
    }

    /* hide scroll if no user input */
    if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {
 801623e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016248:	2b00      	cmp	r3, #0
 801624a:	d051      	beq.n	80162f0 <nk_panel_end+0x8d8>
        int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8016252:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801625a:	d10f      	bne.n	801627c <nk_panel_end+0x864>
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016262:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801626a:	d107      	bne.n	801627c <nk_panel_end+0x864>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8016272:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801627a:	d001      	beq.n	8016280 <nk_panel_end+0x868>
 801627c:	2301      	movs	r3, #1
 801627e:	e000      	b.n	8016282 <nk_panel_end+0x86a>
 8016280:	2300      	movs	r3, #0
 8016282:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int is_window_hovered = nk_window_is_hovered(ctx);
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f006 ffc6 	bl	801d218 <nk_window_is_hovered>
 801628c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016296:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 801629a:	f003 0302 	and.w	r3, r3, #2
 801629e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 80162a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d103      	bne.n	80162b2 <nk_panel_end+0x89a>
 80162aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d107      	bne.n	80162c2 <nk_panel_end+0x8aa>
 80162b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d113      	bne.n	80162e2 <nk_panel_end+0x8ca>
 80162ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d10f      	bne.n	80162e2 <nk_panel_end+0x8ca>
            window->scrollbar_hiding_timer += ctx->delta_time_seconds;
 80162c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80162c6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80162d0:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 80162d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80162dc:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 80162e0:	e00c      	b.n	80162fc <nk_panel_end+0x8e4>
        else window->scrollbar_hiding_timer = 0;
 80162e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80162e6:	f04f 0200 	mov.w	r2, #0
 80162ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80162ee:	e005      	b.n	80162fc <nk_panel_end+0x8e4>
    } else window->scrollbar_hiding_timer = 0;
 80162f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80162f4:	f04f 0200 	mov.w	r2, #0
 80162f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* window border */
    if (layout->flags & NK_WINDOW_BORDER)
 80162fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	f003 0301 	and.w	r3, r3, #1
 8016306:	2b00      	cmp	r3, #0
 8016308:	d078      	beq.n	80163fc <nk_panel_end+0x9e4>
    {
        struct nk_color border_color = nk_panel_get_border_color(style, layout->type);
 801630a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	4619      	mov	r1, r3
 8016312:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8016316:	f7fe fb7d 	bl	8014a14 <nk_panel_get_border_color>
 801631a:	4603      	mov	r3, r0
 801631c:	637b      	str	r3, [r7, #52]	; 0x34
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 801631e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            ? (style->window.border + window->bounds.y + layout->header_height)
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8016328:	2b00      	cmp	r3, #0
 801632a:	d014      	beq.n	8016356 <nk_panel_end+0x93e>
            ? (style->window.border + window->bounds.y + layout->header_height)
 801632c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016334:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8016338:	ed93 7a00 	vldr	s14, [r3]
 801633c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016340:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8016344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801634c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8016350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016354:	e021      	b.n	801639a <nk_panel_end+0x982>
 8016356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
                : (window->bounds.y + window->bounds.h));
 8016360:	2b00      	cmp	r3, #0
 8016362:	d010      	beq.n	8016386 <nk_panel_end+0x96e>
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
 8016364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016368:	ed93 7a03 	vldr	s14, [r3, #12]
 801636c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016370:	edd3 7a05 	vldr	s15, [r3, #20]
 8016374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801637c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                : (window->bounds.y + window->bounds.h));
 8016380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016384:	e009      	b.n	801639a <nk_panel_end+0x982>
 8016386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801638a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801638e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016392:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8016396:	ee77 7a27 	vadd.f32	s15, s14, s15
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 801639a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        struct nk_rect b = window->bounds;
 801639e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80163a2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80163a6:	334c      	adds	r3, #76	; 0x4c
 80163a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80163aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        b.h = padding_y - window->bounds.y;
 80163ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80163b2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80163b6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80163ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        nk_stroke_rect(out, b, 0, layout->border, border_color);
 80163c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80163c6:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 80163ca:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80163ce:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80163d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80163d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80163da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80163dc:	eef0 2a65 	vmov.f32	s5, s11
 80163e0:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 801655c <nk_panel_end+0xb44>
 80163e4:	eeb0 0a46 	vmov.f32	s0, s12
 80163e8:	eef0 0a66 	vmov.f32	s1, s13
 80163ec:	eeb0 1a47 	vmov.f32	s2, s14
 80163f0:	eef0 1a67 	vmov.f32	s3, s15
 80163f4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80163f8:	f7fa fee4 	bl	80111c4 <nk_stroke_rect>
    }

    /* scaler */
    if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))
 80163fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	f003 0304 	and.w	r3, r3, #4
 8016406:	2b00      	cmp	r3, #0
 8016408:	f000 81e1 	beq.w	80167ce <nk_panel_end+0xdb6>
 801640c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016410:	2b00      	cmp	r3, #0
 8016412:	f000 81dc 	beq.w	80167ce <nk_panel_end+0xdb6>
 8016416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016420:	2b00      	cmp	r3, #0
 8016422:	f040 81d4 	bne.w	80167ce <nk_panel_end+0xdb6>
    {
        /* calculate scaler bounds */
        struct nk_rect scaler;
        scaler.w = scrollbar_size.x;
 8016426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016428:	61fb      	str	r3, [r7, #28]
        scaler.h = scrollbar_size.y;
 801642a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801642c:	623b      	str	r3, [r7, #32]
        scaler.y = layout->bounds.y + layout->bounds.h;
 801642e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016432:	ed93 7a03 	vldr	s14, [r3, #12]
 8016436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801643a:	edd3 7a05 	vldr	s15, [r3, #20]
 801643e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016442:	edc7 7a06 	vstr	s15, [r7, #24]
        if (layout->flags & NK_WINDOW_SCALE_LEFT)
 8016446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016450:	2b00      	cmp	r3, #0
 8016452:	d00e      	beq.n	8016472 <nk_panel_end+0xa5a>
            scaler.x = layout->bounds.x - panel_padding.x * 0.5f;
 8016454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016458:	ed93 7a02 	vldr	s14, [r3, #8]
 801645c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8016460:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016468:	ee77 7a67 	vsub.f32	s15, s14, s15
 801646c:	edc7 7a05 	vstr	s15, [r7, #20]
 8016470:	e00f      	b.n	8016492 <nk_panel_end+0xa7a>
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 8016472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016476:	ed93 7a02 	vldr	s14, [r3, #8]
 801647a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801647e:	edd3 7a04 	vldr	s15, [r3, #16]
 8016482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016486:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801648a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801648e:	edc7 7a05 	vstr	s15, [r7, #20]
        if (layout->flags & NK_WINDOW_NO_SCROLLBAR)
 8016492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	f003 0320 	and.w	r3, r3, #32
 801649c:	2b00      	cmp	r3, #0
 801649e:	d007      	beq.n	80164b0 <nk_panel_end+0xa98>
            scaler.x -= scaler.w;
 80164a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80164a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80164a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164ac:	edc7 7a05 	vstr	s15, [r7, #20]

        /* draw scaler */
        {const struct nk_style_item *item = &style->window.scaler;
 80164b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80164b4:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 80164b8:	3314      	adds	r3, #20
 80164ba:	67bb      	str	r3, [r7, #120]	; 0x78
        if (item->type == NK_STYLE_ITEM_IMAGE)
 80164bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164be:	781b      	ldrb	r3, [r3, #0]
 80164c0:	2b01      	cmp	r3, #1
 80164c2:	d119      	bne.n	80164f8 <nk_panel_end+0xae0>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
 80164c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164c6:	3304      	adds	r3, #4
 80164c8:	4a25      	ldr	r2, [pc, #148]	; (8016560 <nk_panel_end+0xb48>)
 80164ca:	ed97 6a05 	vldr	s12, [r7, #20]
 80164ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80164d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80164d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80164da:	6812      	ldr	r2, [r2, #0]
 80164dc:	4619      	mov	r1, r3
 80164de:	eeb0 0a46 	vmov.f32	s0, s12
 80164e2:	eef0 0a66 	vmov.f32	s1, s13
 80164e6:	eeb0 1a47 	vmov.f32	s2, s14
 80164ea:	eef0 1a67 	vmov.f32	s3, s15
 80164ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80164f2:	f7fb fac9 	bl	8011a88 <nk_draw_image>
 80164f6:	e063      	b.n	80165c0 <nk_panel_end+0xba8>
        else {
            if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 80164f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80164fc:	685b      	ldr	r3, [r3, #4]
 80164fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016502:	2b00      	cmp	r3, #0
 8016504:	d02e      	beq.n	8016564 <nk_panel_end+0xb4c>
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8016506:	edd7 6a05 	vldr	s13, [r7, #20]
 801650a:	ed97 6a06 	vldr	s12, [r7, #24]
 801650e:	edd7 5a05 	vldr	s11, [r7, #20]
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8016512:	ed97 7a06 	vldr	s14, [r7, #24]
 8016516:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 801651a:	ee37 5a27 	vadd.f32	s10, s14, s15
                    scaler.y + scaler.h, scaler.x + scaler.w,
 801651e:	ed97 7a05 	vldr	s14, [r7, #20]
 8016522:	edd7 7a07 	vldr	s15, [r7, #28]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8016526:	ee77 4a27 	vadd.f32	s9, s14, s15
                    scaler.y + scaler.h, item->data.color);
 801652a:	ed97 7a06 	vldr	s14, [r7, #24]
 801652e:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8016532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016538:	6859      	ldr	r1, [r3, #4]
 801653a:	eef0 2a67 	vmov.f32	s5, s15
 801653e:	eeb0 2a64 	vmov.f32	s4, s9
 8016542:	eef0 1a45 	vmov.f32	s3, s10
 8016546:	eeb0 1a65 	vmov.f32	s2, s11
 801654a:	eef0 0a46 	vmov.f32	s1, s12
 801654e:	eeb0 0a66 	vmov.f32	s0, s13
 8016552:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016556:	f7fb f91d 	bl	8011794 <nk_fill_triangle>
 801655a:	e031      	b.n	80165c0 <nk_panel_end+0xba8>
 801655c:	00000000 	.word	0x00000000
 8016560:	080230b8 	.word	0x080230b8
            } else {
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8016564:	ed97 7a05 	vldr	s14, [r7, #20]
 8016568:	edd7 7a07 	vldr	s15, [r7, #28]
 801656c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016570:	ed97 6a06 	vldr	s12, [r7, #24]
 8016574:	ed97 7a05 	vldr	s14, [r7, #20]
 8016578:	edd7 7a07 	vldr	s15, [r7, #28]
 801657c:	ee77 5a27 	vadd.f32	s11, s14, s15
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8016580:	ed97 7a06 	vldr	s14, [r7, #24]
 8016584:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8016588:	ee37 5a27 	vadd.f32	s10, s14, s15
 801658c:	edd7 4a05 	vldr	s9, [r7, #20]
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8016590:	ed97 7a06 	vldr	s14, [r7, #24]
 8016594:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8016598:	ee77 7a27 	vadd.f32	s15, s14, s15
 801659c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801659e:	6859      	ldr	r1, [r3, #4]
 80165a0:	eef0 2a67 	vmov.f32	s5, s15
 80165a4:	eeb0 2a64 	vmov.f32	s4, s9
 80165a8:	eef0 1a45 	vmov.f32	s3, s10
 80165ac:	eeb0 1a65 	vmov.f32	s2, s11
 80165b0:	eef0 0a46 	vmov.f32	s1, s12
 80165b4:	eeb0 0a66 	vmov.f32	s0, s13
 80165b8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80165bc:	f7fb f8ea 	bl	8011794 <nk_fill_triangle>
            }
        }}

        /* do window scaling */
        if (!(window->flags & NK_WINDOW_ROM)) {
 80165c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80165c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f040 80ff 	bne.w	80167ce <nk_panel_end+0xdb6>
            struct nk_vec2 window_size = style->window.min_size;
 80165d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80165d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80165d8:	461a      	mov	r2, r3
 80165da:	f107 030c 	add.w	r3, r7, #12
 80165de:	f602 02e4 	addw	r2, r2, #2276	; 0x8e4
 80165e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165e6:	e883 0003 	stmia.w	r3, {r0, r1}
            int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 80165ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80165ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80165f2:	677b      	str	r3, [r7, #116]	; 0x74
            int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
 80165f4:	ed97 6a05 	vldr	s12, [r7, #20]
 80165f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80165fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8016600:	edd7 7a08 	vldr	s15, [r7, #32]
 8016604:	2201      	movs	r2, #1
 8016606:	eeb0 0a46 	vmov.f32	s0, s12
 801660a:	eef0 0a66 	vmov.f32	s1, s13
 801660e:	eeb0 1a47 	vmov.f32	s2, s14
 8016612:	eef0 1a67 	vmov.f32	s3, s15
 8016616:	2100      	movs	r1, #0
 8016618:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801661c:	f7fc fad4 	bl	8012bc8 <nk_input_has_mouse_click_down_in_rect>
 8016620:	6738      	str	r0, [r7, #112]	; 0x70
                    NK_BUTTON_LEFT, scaler, nk_true);

            if (left_mouse_down && left_mouse_click_in_scaler) {
 8016622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016624:	2b00      	cmp	r3, #0
 8016626:	f000 80d2 	beq.w	80167ce <nk_panel_end+0xdb6>
 801662a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801662c:	2b00      	cmp	r3, #0
 801662e:	f000 80ce 	beq.w	80167ce <nk_panel_end+0xdb6>
                float delta_x = in->mouse.delta.x;
 8016632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016636:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801663a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 801663e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016642:	685b      	ldr	r3, [r3, #4]
 8016644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016648:	2b00      	cmp	r3, #0
 801664a:	d013      	beq.n	8016674 <nk_panel_end+0xc5c>
                    delta_x = -delta_x;
 801664c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016650:	eef1 7a67 	vneg.f32	s15, s15
 8016654:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
                    window->bounds.x += in->mouse.delta.x;
 8016658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801665c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8016660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016664:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8016668:	ee77 7a27 	vadd.f32	s15, s14, s15
 801666c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016670:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
                }
                /* dragging in x-direction  */
                if (window->bounds.w + delta_x >= window_size.x) {
 8016674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016678:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 801667c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016684:	edd7 7a03 	vldr	s15, [r7, #12]
 8016688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016690:	db2e      	blt.n	80166f0 <nk_panel_end+0xcd8>
                    if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {
 8016692:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801669e:	d411      	bmi.n	80166c4 <nk_panel_end+0xcac>
 80166a0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80166a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80166a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ac:	dd20      	ble.n	80166f0 <nk_panel_end+0xcd8>
 80166ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80166b2:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80166b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80166ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c2:	db15      	blt.n	80166f0 <nk_panel_end+0xcd8>
                        window->bounds.w = window->bounds.w + delta_x;
 80166c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166c8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80166cc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80166d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166d8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                        scaler.x += in->mouse.delta.x;
 80166dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80166e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80166e4:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80166e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166ec:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                /* dragging in y-direction (only possible if static window) */
                if (!(layout->flags & NK_WINDOW_DYNAMIC)) {
 80166f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d145      	bne.n	801678a <nk_panel_end+0xd72>
                    if (window_size.y < window->bounds.h + in->mouse.delta.y) {
 80166fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8016702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016706:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 801670a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801670e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671e:	d534      	bpl.n	801678a <nk_panel_end+0xd72>
                        if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {
 8016720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016724:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801672c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016730:	d413      	bmi.n	801675a <nk_panel_end+0xd42>
 8016732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016736:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801673a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801673e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016742:	dd22      	ble.n	801678a <nk_panel_end+0xd72>
 8016744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016748:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801674c:	edd7 7a06 	vldr	s15, [r7, #24]
 8016750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016758:	db17      	blt.n	801678a <nk_panel_end+0xd72>
                            window->bounds.h = window->bounds.h + in->mouse.delta.y;
 801675a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801675e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8016762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016766:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801676a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801676e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016772:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                            scaler.y += in->mouse.delta.y;
 8016776:	ed97 7a06 	vldr	s14, [r7, #24]
 801677a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801677e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016786:	edc7 7a06 	vstr	s15, [r7, #24]
                        }
                    }
                }
                ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
 8016796:	ed97 7a05 	vldr	s14, [r7, #20]
 801679a:	edd7 6a07 	vldr	s13, [r7, #28]
 801679e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80167a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80167a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80167ae:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
 80167b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80167b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80167ba:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80167be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80167c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80167ca:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            }
        }
    }
    if (!nk_panel_is_sub(layout->type)) {
 80167ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7fe f9b7 	bl	8014b48 <nk_panel_is_sub>
 80167da:	4603      	mov	r3, r0
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d112      	bne.n	8016806 <nk_panel_end+0xdee>
        /* window is hidden so clear command buffer  */
        if (layout->flags & NK_WINDOW_HIDDEN)
 80167e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d006      	beq.n	80167fc <nk_panel_end+0xde4>
            nk_command_buffer_reset(&window->buffer);
 80167ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80167f2:	3364      	adds	r3, #100	; 0x64
 80167f4:	4618      	mov	r0, r3
 80167f6:	f7fa fbd9 	bl	8010fac <nk_command_buffer_reset>
 80167fa:	e004      	b.n	8016806 <nk_panel_end+0xdee>
        /* window is visible and not tab */
        else nk_finish(ctx, window);
 80167fc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f7f9 ff83 	bl	801070c <nk_finish>
    }

    /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
    if (layout->flags & NK_WINDOW_REMOVE_ROM) {
 8016806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016810:	2b00      	cmp	r3, #0
 8016812:	d00f      	beq.n	8016834 <nk_panel_end+0xe1c>
        layout->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8016814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801681e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016822:	605a      	str	r2, [r3, #4]
        layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 8016824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801682e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016832:	605a      	str	r2, [r3, #4]
    }
    window->flags = layout->flags;
 8016834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016838:	685a      	ldr	r2, [r3, #4]
 801683a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801683e:	649a      	str	r2, [r3, #72]	; 0x48

    /* property garbage collector */
    if (window->property.active && window->property.old != window->property.seq &&
 8016840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016848:	2b00      	cmp	r3, #0
 801684a:	d01b      	beq.n	8016884 <nk_panel_end+0xe6c>
 801684c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016850:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8016854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801685c:	429a      	cmp	r2, r3
 801685e:	d011      	beq.n	8016884 <nk_panel_end+0xe6c>
        window->property.active == window->property.prev) {
 8016860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016864:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8016868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801686c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    if (window->property.active && window->property.old != window->property.seq &&
 8016870:	429a      	cmp	r2, r3
 8016872:	d107      	bne.n	8016884 <nk_panel_end+0xe6c>
        nk_zero(&window->property, sizeof(window->property));
 8016874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016878:	3394      	adds	r3, #148	; 0x94
 801687a:	2168      	movs	r1, #104	; 0x68
 801687c:	4618      	mov	r0, r3
 801687e:	f005 f98f 	bl	801bba0 <nk_zero>
 8016882:	e014      	b.n	80168ae <nk_panel_end+0xe96>
    } else {
        window->property.old = window->property.seq;
 8016884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016888:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801688c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016890:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        window->property.prev = window->property.active;
 8016894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016898:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801689c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        window->property.seq = 0;
 80168a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168a8:	2200      	movs	r2, #0
 80168aa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    }
    /* edit garbage collector */
    if (window->edit.active && window->edit.old != window->edit.seq &&
 80168ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168b2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d01c      	beq.n	80168f4 <nk_panel_end+0xedc>
 80168ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168be:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80168c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d012      	beq.n	80168f4 <nk_panel_end+0xedc>
       window->edit.active == window->edit.prev) {
 80168ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168d2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80168d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    if (window->edit.active && window->edit.old != window->edit.seq &&
 80168de:	429a      	cmp	r2, r3
 80168e0:	d108      	bne.n	80168f4 <nk_panel_end+0xedc>
        nk_zero(&window->edit, sizeof(window->edit));
 80168e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168e6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80168ea:	212c      	movs	r1, #44	; 0x2c
 80168ec:	4618      	mov	r0, r3
 80168ee:	f005 f957 	bl	801bba0 <nk_zero>
 80168f2:	e014      	b.n	801691e <nk_panel_end+0xf06>
    } else {
        window->edit.old = window->edit.seq;
 80168f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168f8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80168fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016900:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        window->edit.prev = window->edit.active;
 8016904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016908:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 801690c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016910:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        window->edit.seq = 0;
 8016914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016918:	2200      	movs	r2, #0
 801691a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    }
    /* contextual garbage collector */
    if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {
 801691e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016922:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8016926:	2b00      	cmp	r3, #0
 8016928:	d019      	beq.n	801695e <nk_panel_end+0xf46>
 801692a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801692e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8016932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016936:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801693a:	429a      	cmp	r2, r3
 801693c:	d00f      	beq.n	801695e <nk_panel_end+0xf46>
        window->popup.con_count = 0;
 801693e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016942:	2200      	movs	r2, #0
 8016944:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        window->popup.con_old = 0;
 8016948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801694c:	2200      	movs	r2, #0
 801694e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.active_con = 0;
 8016952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016956:	2200      	movs	r2, #0
 8016958:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 801695c:	e00c      	b.n	8016978 <nk_panel_end+0xf60>
    } else {
        window->popup.con_old = window->popup.con_count;
 801695e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016962:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8016966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801696a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.con_count = 0;
 801696e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016972:	2200      	movs	r2, #0
 8016974:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
    window->popup.combo_count = 0;
 8016978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801697c:	2200      	movs	r2, #0
 801697e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
    NK_ASSERT(!layout->row.tree_depth);
 8016982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801698a:	2b00      	cmp	r3, #0
 801698c:	d007      	beq.n	801699e <nk_panel_end+0xf86>
 801698e:	4b05      	ldr	r3, [pc, #20]	; (80169a4 <nk_panel_end+0xf8c>)
 8016990:	4a05      	ldr	r2, [pc, #20]	; (80169a8 <nk_panel_end+0xf90>)
 8016992:	f240 216b 	movw	r1, #619	; 0x26b
 8016996:	4805      	ldr	r0, [pc, #20]	; (80169ac <nk_panel_end+0xf94>)
 8016998:	f006 fdfa 	bl	801d590 <__assert_func>
        return;
 801699c:	bf00      	nop
}
 801699e:	37c4      	adds	r7, #196	; 0xc4
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd90      	pop	{r4, r7, pc}
 80169a4:	08021540 	.word	0x08021540
 80169a8:	080230cc 	.word	0x080230cc
 80169ac:	080214fc 	.word	0x080214fc

080169b0 <nk_pool_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,
    unsigned int capacity)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b084      	sub	sp, #16
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	607a      	str	r2, [r7, #4]
    NK_ASSERT(capacity >= 1);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d105      	bne.n	80169ce <nk_pool_init+0x1e>
 80169c2:	4b0e      	ldr	r3, [pc, #56]	; (80169fc <nk_pool_init+0x4c>)
 80169c4:	4a0e      	ldr	r2, [pc, #56]	; (8016a00 <nk_pool_init+0x50>)
 80169c6:	210d      	movs	r1, #13
 80169c8:	480e      	ldr	r0, [pc, #56]	; (8016a04 <nk_pool_init+0x54>)
 80169ca:	f006 fde1 	bl	801d590 <__assert_func>
    nk_zero(pool, sizeof(*pool));
 80169ce:	2128      	movs	r1, #40	; 0x28
 80169d0:	68f8      	ldr	r0, [r7, #12]
 80169d2:	f005 f8e5 	bl	801bba0 <nk_zero>
    pool->alloc = *alloc;
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	68ba      	ldr	r2, [r7, #8]
 80169da:	ca07      	ldmia	r2, {r0, r1, r2}
 80169dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pool->capacity = capacity;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	61da      	str	r2, [r3, #28]
    pool->type = NK_BUFFER_DYNAMIC;
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	2201      	movs	r2, #1
 80169ea:	731a      	strb	r2, [r3, #12]
    pool->pages = 0;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	2200      	movs	r2, #0
 80169f0:	615a      	str	r2, [r3, #20]
}
 80169f2:	bf00      	nop
 80169f4:	3710      	adds	r7, #16
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}
 80169fa:	bf00      	nop
 80169fc:	08021558 	.word	0x08021558
 8016a00:	080230dc 	.word	0x080230dc
 8016a04:	08021568 	.word	0x08021568

08016a08 <nk_pool_init_fixed>:
        iter = next;
    }
}
NK_LIB void
nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b084      	sub	sp, #16
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	60f8      	str	r0, [r7, #12]
 8016a10:	60b9      	str	r1, [r7, #8]
 8016a12:	607a      	str	r2, [r7, #4]
    nk_zero(pool, sizeof(*pool));
 8016a14:	2128      	movs	r1, #40	; 0x28
 8016a16:	68f8      	ldr	r0, [r7, #12]
 8016a18:	f005 f8c2 	bl	801bba0 <nk_zero>
    NK_ASSERT(size >= sizeof(struct nk_page));
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8016a22:	d205      	bcs.n	8016a30 <nk_pool_init_fixed+0x28>
 8016a24:	4b10      	ldr	r3, [pc, #64]	; (8016a68 <nk_pool_init_fixed+0x60>)
 8016a26:	4a11      	ldr	r2, [pc, #68]	; (8016a6c <nk_pool_init_fixed+0x64>)
 8016a28:	2125      	movs	r1, #37	; 0x25
 8016a2a:	4811      	ldr	r0, [pc, #68]	; (8016a70 <nk_pool_init_fixed+0x68>)
 8016a2c:	f006 fdb0 	bl	801d590 <__assert_func>
    if (size < sizeof(struct nk_page)) return;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8016a36:	d313      	bcc.n	8016a60 <nk_pool_init_fixed+0x58>
    /* first nk_page_element is embedded in nk_page, additional elements follow in adjacent space */
    pool->capacity = (unsigned)(1 + (size - sizeof(struct nk_page)) / sizeof(struct nk_page_element));
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8016a3e:	091b      	lsrs	r3, r3, #4
 8016a40:	4a0c      	ldr	r2, [pc, #48]	; (8016a74 <nk_pool_init_fixed+0x6c>)
 8016a42:	fba2 2303 	umull	r2, r3, r2, r3
 8016a46:	1c5a      	adds	r2, r3, #1
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	61da      	str	r2, [r3, #28]
    pool->pages = (struct nk_page*)memory;
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	68ba      	ldr	r2, [r7, #8]
 8016a50:	615a      	str	r2, [r3, #20]
    pool->type = NK_BUFFER_FIXED;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	2200      	movs	r2, #0
 8016a56:	731a      	strb	r2, [r3, #12]
    pool->size = size;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	687a      	ldr	r2, [r7, #4]
 8016a5c:	621a      	str	r2, [r3, #32]
 8016a5e:	e000      	b.n	8016a62 <nk_pool_init_fixed+0x5a>
    if (size < sizeof(struct nk_page)) return;
 8016a60:	bf00      	nop
}
 8016a62:	3710      	adds	r7, #16
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	08021584 	.word	0x08021584
 8016a6c:	080230ec 	.word	0x080230ec
 8016a70:	08021568 	.word	0x08021568
 8016a74:	097b425f 	.word	0x097b425f

08016a78 <nk_pool_alloc>:
NK_LIB struct nk_page_element*
nk_pool_alloc(struct nk_pool *pool)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b084      	sub	sp, #16
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
    if (!pool->pages || pool->pages->size >= pool->capacity) {
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	695b      	ldr	r3, [r3, #20]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d006      	beq.n	8016a96 <nk_pool_alloc+0x1e>
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	695b      	ldr	r3, [r3, #20]
 8016a8c:	681a      	ldr	r2, [r3, #0]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	69db      	ldr	r3, [r3, #28]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d342      	bcc.n	8016b1c <nk_pool_alloc+0xa4>
        /* allocate new page */
        struct nk_page *page;
        if (pool->type == NK_BUFFER_FIXED) {
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	7b1b      	ldrb	r3, [r3, #12]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d11e      	bne.n	8016adc <nk_pool_alloc+0x64>
            NK_ASSERT(pool->pages);
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	695b      	ldr	r3, [r3, #20]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d105      	bne.n	8016ab2 <nk_pool_alloc+0x3a>
 8016aa6:	4b26      	ldr	r3, [pc, #152]	; (8016b40 <nk_pool_alloc+0xc8>)
 8016aa8:	4a26      	ldr	r2, [pc, #152]	; (8016b44 <nk_pool_alloc+0xcc>)
 8016aaa:	2134      	movs	r1, #52	; 0x34
 8016aac:	4826      	ldr	r0, [pc, #152]	; (8016b48 <nk_pool_alloc+0xd0>)
 8016aae:	f006 fd6f 	bl	801d590 <__assert_func>
            if (!pool->pages) return 0;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	695b      	ldr	r3, [r3, #20]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d101      	bne.n	8016abe <nk_pool_alloc+0x46>
 8016aba:	2300      	movs	r3, #0
 8016abc:	e03b      	b.n	8016b36 <nk_pool_alloc+0xbe>
            NK_ASSERT(pool->pages->size < pool->capacity);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	695b      	ldr	r3, [r3, #20]
 8016ac2:	681a      	ldr	r2, [r3, #0]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	69db      	ldr	r3, [r3, #28]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d305      	bcc.n	8016ad8 <nk_pool_alloc+0x60>
 8016acc:	4b1f      	ldr	r3, [pc, #124]	; (8016b4c <nk_pool_alloc+0xd4>)
 8016ace:	4a1d      	ldr	r2, [pc, #116]	; (8016b44 <nk_pool_alloc+0xcc>)
 8016ad0:	2136      	movs	r1, #54	; 0x36
 8016ad2:	481d      	ldr	r0, [pc, #116]	; (8016b48 <nk_pool_alloc+0xd0>)
 8016ad4:	f006 fd5c 	bl	801d590 <__assert_func>
            return 0;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	e02c      	b.n	8016b36 <nk_pool_alloc+0xbe>
        } else {
            nk_size size = sizeof(struct nk_page);
 8016adc:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8016ae0:	60fb      	str	r3, [r7, #12]
            size += (pool->capacity - 1) * sizeof(struct nk_page_element);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	69db      	ldr	r3, [r3, #28]
 8016ae6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8016aea:	fb03 f202 	mul.w	r2, r3, r2
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	4413      	add	r3, r2
 8016af2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8016af6:	60fb      	str	r3, [r7, #12]
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	685b      	ldr	r3, [r3, #4]
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	68fa      	ldr	r2, [r7, #12]
 8016b00:	2100      	movs	r1, #0
 8016b02:	6800      	ldr	r0, [r0, #0]
 8016b04:	4798      	blx	r3
 8016b06:	60b8      	str	r0, [r7, #8]
            page->next = pool->pages;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	695a      	ldr	r2, [r3, #20]
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	605a      	str	r2, [r3, #4]
            pool->pages = page;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	68ba      	ldr	r2, [r7, #8]
 8016b14:	615a      	str	r2, [r3, #20]
            page->size = 0;
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	2200      	movs	r2, #0
 8016b1a:	601a      	str	r2, [r3, #0]
        }
    } return &pool->pages->win[pool->pages->size++];
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6959      	ldr	r1, [r3, #20]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	695a      	ldr	r2, [r3, #20]
 8016b24:	6813      	ldr	r3, [r2, #0]
 8016b26:	1c58      	adds	r0, r3, #1
 8016b28:	6010      	str	r0, [r2, #0]
 8016b2a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8016b2e:	fb02 f303 	mul.w	r3, r2, r3
 8016b32:	3308      	adds	r3, #8
 8016b34:	440b      	add	r3, r1
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3710      	adds	r7, #16
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	080215a4 	.word	0x080215a4
 8016b44:	08023100 	.word	0x08023100
 8016b48:	08021568 	.word	0x08021568
 8016b4c:	080215b0 	.word	0x080215b0

08016b50 <nk_nonblock_begin>:
}
NK_LIB nk_bool
nk_nonblock_begin(struct nk_context *ctx,
    nk_flags flags, struct nk_rect body, struct nk_rect header,
    enum nk_panel_type panel_type)
{
 8016b50:	b5b0      	push	{r4, r5, r7, lr}
 8016b52:	b096      	sub	sp, #88	; 0x58
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016b58:	62b9      	str	r1, [r7, #40]	; 0x28
 8016b5a:	eeb0 4a40 	vmov.f32	s8, s0
 8016b5e:	eef0 4a60 	vmov.f32	s9, s1
 8016b62:	eeb0 5a41 	vmov.f32	s10, s2
 8016b66:	eef0 5a61 	vmov.f32	s11, s3
 8016b6a:	eeb0 6a42 	vmov.f32	s12, s4
 8016b6e:	eef0 6a62 	vmov.f32	s13, s5
 8016b72:	eeb0 7a43 	vmov.f32	s14, s6
 8016b76:	eef0 7a63 	vmov.f32	s15, s7
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	ed87 4a06 	vstr	s8, [r7, #24]
 8016b80:	edc7 4a07 	vstr	s9, [r7, #28]
 8016b84:	ed87 5a08 	vstr	s10, [r7, #32]
 8016b88:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8016b8c:	ed87 6a02 	vstr	s12, [r7, #8]
 8016b90:	edc7 6a03 	vstr	s13, [r7, #12]
 8016b94:	ed87 7a04 	vstr	s14, [r7, #16]
 8016b98:	edc7 7a05 	vstr	s15, [r7, #20]
 8016b9c:	71fb      	strb	r3, [r7, #7]
    struct nk_window *popup;
    struct nk_window *win;
    struct nk_panel *panel;
    int is_active = nk_true;
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	653b      	str	r3, [r7, #80]	; 0x50

    NK_ASSERT(ctx);
 8016ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d105      	bne.n	8016bb4 <nk_nonblock_begin+0x64>
 8016ba8:	4baf      	ldr	r3, [pc, #700]	; (8016e68 <nk_nonblock_begin+0x318>)
 8016baa:	4ab0      	ldr	r2, [pc, #704]	; (8016e6c <nk_nonblock_begin+0x31c>)
 8016bac:	2173      	movs	r1, #115	; 0x73
 8016bae:	48b0      	ldr	r0, [pc, #704]	; (8016e70 <nk_nonblock_begin+0x320>)
 8016bb0:	f006 fcee 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8016bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016bba:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d105      	bne.n	8016bce <nk_nonblock_begin+0x7e>
 8016bc2:	4bac      	ldr	r3, [pc, #688]	; (8016e74 <nk_nonblock_begin+0x324>)
 8016bc4:	4aa9      	ldr	r2, [pc, #676]	; (8016e6c <nk_nonblock_begin+0x31c>)
 8016bc6:	2174      	movs	r1, #116	; 0x74
 8016bc8:	48a9      	ldr	r0, [pc, #676]	; (8016e70 <nk_nonblock_begin+0x320>)
 8016bca:	f006 fce1 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8016bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016bd4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d105      	bne.n	8016bec <nk_nonblock_begin+0x9c>
 8016be0:	4ba5      	ldr	r3, [pc, #660]	; (8016e78 <nk_nonblock_begin+0x328>)
 8016be2:	4aa2      	ldr	r2, [pc, #648]	; (8016e6c <nk_nonblock_begin+0x31c>)
 8016be4:	2175      	movs	r1, #117	; 0x75
 8016be6:	48a2      	ldr	r0, [pc, #648]	; (8016e70 <nk_nonblock_begin+0x320>)
 8016be8:	f006 fcd2 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8016bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d00f      	beq.n	8016c12 <nk_nonblock_begin+0xc2>
 8016bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016bf8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d008      	beq.n	8016c12 <nk_nonblock_begin+0xc2>
 8016c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016c06:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d101      	bne.n	8016c16 <nk_nonblock_begin+0xc6>
        return 0;
 8016c12:	2300      	movs	r3, #0
 8016c14:	e146      	b.n	8016ea4 <nk_nonblock_begin+0x354>

    /* popups cannot have popups */
    win = ctx->current;
 8016c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016c1c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016c20:	647b      	str	r3, [r7, #68]	; 0x44
    panel = win->layout;
 8016c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016c28:	643b      	str	r3, [r7, #64]	; 0x40
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 8016c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d005      	beq.n	8016c42 <nk_nonblock_begin+0xf2>
 8016c36:	4b91      	ldr	r3, [pc, #580]	; (8016e7c <nk_nonblock_begin+0x32c>)
 8016c38:	4a8c      	ldr	r2, [pc, #560]	; (8016e6c <nk_nonblock_begin+0x31c>)
 8016c3a:	217c      	movs	r1, #124	; 0x7c
 8016c3c:	488c      	ldr	r0, [pc, #560]	; (8016e70 <nk_nonblock_begin+0x320>)
 8016c3e:	f006 fca7 	bl	801d590 <__assert_func>
    (void)panel;
    popup = win->popup.win;
 8016c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c44:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8016c48:	657b      	str	r3, [r7, #84]	; 0x54
    if (!popup) {
 8016c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d11b      	bne.n	8016c88 <nk_nonblock_begin+0x138>
        /* create window for nonblocking popup */
        popup = (struct nk_window*)nk_create_window(ctx);
 8016c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c52:	f005 fbbd 	bl	801c3d0 <nk_create_window>
 8016c56:	6578      	str	r0, [r7, #84]	; 0x54
        popup->parent = win;
 8016c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c5c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 8016c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c64:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.type = panel_type;
 8016c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c6a:	79fa      	ldrb	r2, [r7, #7]
 8016c6c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);
 8016c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c72:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8016c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c78:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8016c7c:	330c      	adds	r3, #12
 8016c7e:	2201      	movs	r2, #1
 8016c80:	4619      	mov	r1, r3
 8016c82:	f7fa f955 	bl	8010f30 <nk_command_buffer_init>
 8016c86:	e03a      	b.n	8016cfe <nk_nonblock_begin+0x1ae>
        /* close the popup if user pressed outside or in the header */
        int pressed, in_body, in_header;
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
        pressed = nk_input_is_mouse_released(&ctx->input, NK_BUTTON_LEFT);
#else
        pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 8016c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8a:	2100      	movs	r1, #0
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7fc f89e 	bl	8012dce <nk_input_is_mouse_pressed>
 8016c92:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
        in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8016c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c96:	ed97 6a06 	vldr	s12, [r7, #24]
 8016c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8016c9e:	ed97 7a08 	vldr	s14, [r7, #32]
 8016ca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016ca6:	eeb0 0a46 	vmov.f32	s0, s12
 8016caa:	eef0 0a66 	vmov.f32	s1, s13
 8016cae:	eeb0 1a47 	vmov.f32	s2, s14
 8016cb2:	eef0 1a67 	vmov.f32	s3, s15
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f7fb ffcd 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 8016cbc:	63b8      	str	r0, [r7, #56]	; 0x38
        in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);
 8016cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8016cc4:	edd7 6a03 	vldr	s13, [r7, #12]
 8016cc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8016ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8016cd0:	eeb0 0a46 	vmov.f32	s0, s12
 8016cd4:	eef0 0a66 	vmov.f32	s1, s13
 8016cd8:	eeb0 1a47 	vmov.f32	s2, s14
 8016cdc:	eef0 1a67 	vmov.f32	s3, s15
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f7fb ffb8 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 8016ce6:	6378      	str	r0, [r7, #52]	; 0x34
        if (pressed && (!in_body || in_header))
 8016ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d007      	beq.n	8016cfe <nk_nonblock_begin+0x1ae>
 8016cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d002      	beq.n	8016cfa <nk_nonblock_begin+0x1aa>
 8016cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d001      	beq.n	8016cfe <nk_nonblock_begin+0x1ae>
            is_active = nk_false;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	653b      	str	r3, [r7, #80]	; 0x50
    }
    win->popup.header = header;
 8016cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d00:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8016d04:	f107 0308 	add.w	r3, r7, #8
 8016d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (!is_active) {
 8016d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d113      	bne.n	8016d3c <nk_nonblock_begin+0x1ec>
        /* remove read only mode from all parent panels */
        struct nk_panel *root = win->layout;
 8016d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 8016d1c:	e009      	b.n	8016d32 <nk_nonblock_begin+0x1e2>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8016d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d28:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8016d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d2c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8016d30:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 8016d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d1f2      	bne.n	8016d1e <nk_nonblock_begin+0x1ce>
        }
        return is_active;
 8016d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d3a:	e0b3      	b.n	8016ea4 <nk_nonblock_begin+0x354>
    }
    popup->bounds = body;
 8016d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d3e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8016d42:	f107 0318 	add.w	r3, r7, #24
 8016d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->parent = win;
 8016d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 8016d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d56:	f7fd fcaf 	bl	80146b8 <nk_create_panel>
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 8016d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d66:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 8016d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d6c:	f043 0201 	orr.w	r2, r3, #1
 8016d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d72:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_DYNAMIC;
 8016d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d78:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8016d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d7e:	649a      	str	r2, [r3, #72]	; 0x48
    popup->seq = ctx->seq;
 8016d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016d86:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8016d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d8c:	601a      	str	r2, [r3, #0]
    win->popup.active = 1;
 8016d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d90:	2201      	movs	r2, #1
 8016d92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NK_ASSERT(popup->layout);
 8016d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d105      	bne.n	8016dac <nk_nonblock_begin+0x25c>
 8016da0:	4b37      	ldr	r3, [pc, #220]	; (8016e80 <nk_nonblock_begin+0x330>)
 8016da2:	4a32      	ldr	r2, [pc, #200]	; (8016e6c <nk_nonblock_begin+0x31c>)
 8016da4:	21a6      	movs	r1, #166	; 0xa6
 8016da6:	4832      	ldr	r0, [pc, #200]	; (8016e70 <nk_nonblock_begin+0x320>)
 8016da8:	f006 fbf2 	bl	801d590 <__assert_func>

    nk_start_popup(ctx, win);
 8016dac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016db0:	f7f9 fbfe 	bl	80105b0 <nk_start_popup>
    popup->buffer = win->buffer;
 8016db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016db8:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8016dbc:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8016dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016dc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016dcc:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8016dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016dd2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8016dd6:	4b2b      	ldr	r3, [pc, #172]	; (8016e84 <nk_nonblock_begin+0x334>)
 8016dd8:	ed93 6a00 	vldr	s12, [r3]
 8016ddc:	edd3 6a01 	vldr	s13, [r3, #4]
 8016de0:	ed93 7a02 	vldr	s14, [r3, #8]
 8016de4:	edd3 7a03 	vldr	s15, [r3, #12]
 8016de8:	eeb0 0a46 	vmov.f32	s0, s12
 8016dec:	eef0 0a66 	vmov.f32	s1, s13
 8016df0:	eeb0 1a47 	vmov.f32	s2, s14
 8016df4:	eef0 1a67 	vmov.f32	s3, s15
 8016df8:	4610      	mov	r0, r2
 8016dfa:	f7fa f96b 	bl	80110d4 <nk_push_scissor>
    ctx->current = popup;
 8016dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016e04:	461a      	mov	r2, r3
 8016e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e08:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658

    nk_panel_begin(ctx, 0, panel_type);
 8016e0c:	79fb      	ldrb	r3, [r7, #7]
 8016e0e:	461a      	mov	r2, r3
 8016e10:	2100      	movs	r1, #0
 8016e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e14:	f7fd febe 	bl	8014b94 <nk_panel_begin>
    win->buffer = popup->buffer;
 8016e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e1c:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8016e20:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8016e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016e30:	e884 0003 	stmia.w	r4, {r0, r1}
    popup->layout->parent = win->layout;
 8016e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e3c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8016e40:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    popup->layout->offset_x = &popup->scrollbar.x;
 8016e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016e4c:	325c      	adds	r2, #92	; 0x5c
 8016e4e:	619a      	str	r2, [r3, #24]
    popup->layout->offset_y = &popup->scrollbar.y;
 8016e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016e58:	3260      	adds	r2, #96	; 0x60
 8016e5a:	61da      	str	r2, [r3, #28]

    /* set read only mode to all parent panels */
    {struct nk_panel *root;
    root = win->layout;
 8016e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e62:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8016e64:	e01a      	b.n	8016e9c <nk_nonblock_begin+0x34c>
 8016e66:	bf00      	nop
 8016e68:	080215d4 	.word	0x080215d4
 8016e6c:	08023120 	.word	0x08023120
 8016e70:	080215d8 	.word	0x080215d8
 8016e74:	080215fc 	.word	0x080215fc
 8016e78:	0802160c 	.word	0x0802160c
 8016e7c:	08021674 	.word	0x08021674
 8016e80:	08021698 	.word	0x08021698
 8016e84:	08023110 	.word	0x08023110
        root->flags |= NK_WINDOW_ROM;
 8016e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8016e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e92:	605a      	str	r2, [r3, #4]
        root = root->parent;
 8016e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e96:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8016e9a:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8016e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d1f2      	bne.n	8016e88 <nk_nonblock_begin+0x338>
    }}
    return is_active;
 8016ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3758      	adds	r7, #88	; 0x58
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bdb0      	pop	{r4, r5, r7, pc}

08016eac <nk_popup_close>:
NK_API void
nk_popup_close(struct nk_context *ctx)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    NK_ASSERT(ctx);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d105      	bne.n	8016ec6 <nk_popup_close+0x1a>
 8016eba:	4b1d      	ldr	r3, [pc, #116]	; (8016f30 <nk_popup_close+0x84>)
 8016ebc:	4a1d      	ldr	r2, [pc, #116]	; (8016f34 <nk_popup_close+0x88>)
 8016ebe:	21c0      	movs	r1, #192	; 0xc0
 8016ec0:	481d      	ldr	r0, [pc, #116]	; (8016f38 <nk_popup_close+0x8c>)
 8016ec2:	f006 fb65 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current) return;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d02c      	beq.n	8016f26 <nk_popup_close+0x7a>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016ed2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d025      	beq.n	8016f26 <nk_popup_close+0x7a>

    popup = ctx->current;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016ee0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016ee4:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(popup->parent);
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d105      	bne.n	8016efc <nk_popup_close+0x50>
 8016ef0:	4b12      	ldr	r3, [pc, #72]	; (8016f3c <nk_popup_close+0x90>)
 8016ef2:	4a10      	ldr	r2, [pc, #64]	; (8016f34 <nk_popup_close+0x88>)
 8016ef4:	21c4      	movs	r1, #196	; 0xc4
 8016ef6:	4810      	ldr	r0, [pc, #64]	; (8016f38 <nk_popup_close+0x8c>)
 8016ef8:	f006 fb4a 	bl	801d590 <__assert_func>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f02:	781b      	ldrb	r3, [r3, #0]
 8016f04:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d105      	bne.n	8016f18 <nk_popup_close+0x6c>
 8016f0c:	4b0c      	ldr	r3, [pc, #48]	; (8016f40 <nk_popup_close+0x94>)
 8016f0e:	4a09      	ldr	r2, [pc, #36]	; (8016f34 <nk_popup_close+0x88>)
 8016f10:	21c5      	movs	r1, #197	; 0xc5
 8016f12:	4809      	ldr	r0, [pc, #36]	; (8016f38 <nk_popup_close+0x8c>)
 8016f14:	f006 fb3c 	bl	801d590 <__assert_func>
    popup->flags |= NK_WINDOW_HIDDEN;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	649a      	str	r2, [r3, #72]	; 0x48
 8016f24:	e000      	b.n	8016f28 <nk_popup_close+0x7c>
    if (!ctx || !ctx->current) return;
 8016f26:	bf00      	nop
}
 8016f28:	3710      	adds	r7, #16
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	080215d4 	.word	0x080215d4
 8016f34:	08023134 	.word	0x08023134
 8016f38:	080215d8 	.word	0x080215d8
 8016f3c:	080216a8 	.word	0x080216a8
 8016f40:	080216b8 	.word	0x080216b8

08016f44 <nk_popup_end>:
NK_API void
nk_popup_end(struct nk_context *ctx)
{
 8016f44:	b5b0      	push	{r4, r5, r7, lr}
 8016f46:	b086      	sub	sp, #24
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_window *popup;

    NK_ASSERT(ctx);
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d105      	bne.n	8016f5e <nk_popup_end+0x1a>
 8016f52:	4b5a      	ldr	r3, [pc, #360]	; (80170bc <nk_popup_end+0x178>)
 8016f54:	4a5a      	ldr	r2, [pc, #360]	; (80170c0 <nk_popup_end+0x17c>)
 8016f56:	21ce      	movs	r1, #206	; 0xce
 8016f58:	485a      	ldr	r0, [pc, #360]	; (80170c4 <nk_popup_end+0x180>)
 8016f5a:	f006 fb19 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016f64:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d105      	bne.n	8016f78 <nk_popup_end+0x34>
 8016f6c:	4b56      	ldr	r3, [pc, #344]	; (80170c8 <nk_popup_end+0x184>)
 8016f6e:	4a54      	ldr	r2, [pc, #336]	; (80170c0 <nk_popup_end+0x17c>)
 8016f70:	21cf      	movs	r1, #207	; 0xcf
 8016f72:	4854      	ldr	r0, [pc, #336]	; (80170c4 <nk_popup_end+0x180>)
 8016f74:	f006 fb0c 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016f7e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d105      	bne.n	8016f96 <nk_popup_end+0x52>
 8016f8a:	4b50      	ldr	r3, [pc, #320]	; (80170cc <nk_popup_end+0x188>)
 8016f8c:	4a4c      	ldr	r2, [pc, #304]	; (80170c0 <nk_popup_end+0x17c>)
 8016f8e:	21d0      	movs	r1, #208	; 0xd0
 8016f90:	484c      	ldr	r0, [pc, #304]	; (80170c4 <nk_popup_end+0x180>)
 8016f92:	f006 fafd 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	f000 8089 	beq.w	80170b0 <nk_popup_end+0x16c>
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fa4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	f000 8081 	beq.w	80170b0 <nk_popup_end+0x16c>
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fb4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d077      	beq.n	80170b0 <nk_popup_end+0x16c>
        return;

    popup = ctx->current;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fc6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016fca:	613b      	str	r3, [r7, #16]
    if (!popup->parent) return;
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d06e      	beq.n	80170b4 <nk_popup_end+0x170>
    win = popup->parent;
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8016fdc:	60fb      	str	r3, [r7, #12]
    if (popup->flags & NK_WINDOW_HIDDEN) {
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d015      	beq.n	8017016 <nk_popup_end+0xd2>
        struct nk_panel *root;
        root = win->layout;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016ff0:	617b      	str	r3, [r7, #20]
        while (root) {
 8016ff2:	e009      	b.n	8017008 <nk_popup_end+0xc4>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016ffc:	697b      	ldr	r3, [r7, #20]
 8016ffe:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8017006:	617b      	str	r3, [r7, #20]
        while (root) {
 8017008:	697b      	ldr	r3, [r7, #20]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d1f2      	bne.n	8016ff4 <nk_popup_end+0xb0>
        }
        win->popup.active = 0;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2200      	movs	r2, #0
 8017012:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    }
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	f103 0264 	add.w	r2, r3, #100	; 0x64
 801701c:	4b2c      	ldr	r3, [pc, #176]	; (80170d0 <nk_popup_end+0x18c>)
 801701e:	ed93 6a00 	vldr	s12, [r3]
 8017022:	edd3 6a01 	vldr	s13, [r3, #4]
 8017026:	ed93 7a02 	vldr	s14, [r3, #8]
 801702a:	edd3 7a03 	vldr	s15, [r3, #12]
 801702e:	eeb0 0a46 	vmov.f32	s0, s12
 8017032:	eef0 0a66 	vmov.f32	s1, s13
 8017036:	eeb0 1a47 	vmov.f32	s2, s14
 801703a:	eef0 1a67 	vmov.f32	s3, s15
 801703e:	4610      	mov	r0, r2
 8017040:	f7fa f848 	bl	80110d4 <nk_push_scissor>
    nk_end(ctx);
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f006 f87d 	bl	801d144 <nk_end>

    win->buffer = popup->buffer;
 801704a:	68fa      	ldr	r2, [r7, #12]
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8017052:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8017056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801705a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801705c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801705e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017062:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_finish_popup(ctx, win);
 8017066:	68f9      	ldr	r1, [r7, #12]
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7f9 fae5 	bl	8010638 <nk_finish_popup>
    ctx->current = win;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017074:	461a      	mov	r2, r3
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    nk_push_scissor(&win->buffer, win->layout->clip);
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017088:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 801708c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8017090:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8017094:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8017098:	eeb0 0a46 	vmov.f32	s0, s12
 801709c:	eef0 0a66 	vmov.f32	s1, s13
 80170a0:	eeb0 1a47 	vmov.f32	s2, s14
 80170a4:	eef0 1a67 	vmov.f32	s3, s15
 80170a8:	4610      	mov	r0, r2
 80170aa:	f7fa f813 	bl	80110d4 <nk_push_scissor>
 80170ae:	e002      	b.n	80170b6 <nk_popup_end+0x172>
        return;
 80170b0:	bf00      	nop
 80170b2:	e000      	b.n	80170b6 <nk_popup_end+0x172>
    if (!popup->parent) return;
 80170b4:	bf00      	nop
}
 80170b6:	3718      	adds	r7, #24
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bdb0      	pop	{r4, r5, r7, pc}
 80170bc:	080215d4 	.word	0x080215d4
 80170c0:	08023144 	.word	0x08023144
 80170c4:	080215d8 	.word	0x080215d8
 80170c8:	080215fc 	.word	0x080215fc
 80170cc:	0802160c 	.word	0x0802160c
 80170d0:	08023110 	.word	0x08023110

080170d4 <nk_scrollbar_behavior>:
nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,
    int has_scrolling, const struct nk_rect *scroll,
    const struct nk_rect *cursor, const struct nk_rect *empty0,
    const struct nk_rect *empty1, float scroll_offset,
    float target, float scroll_step, enum nk_orientation o)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b092      	sub	sp, #72	; 0x48
 80170d8:	af00      	add	r7, sp, #0
 80170da:	61f8      	str	r0, [r7, #28]
 80170dc:	61b9      	str	r1, [r7, #24]
 80170de:	617a      	str	r2, [r7, #20]
 80170e0:	613b      	str	r3, [r7, #16]
 80170e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80170e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80170ea:	ed87 1a01 	vstr	s2, [r7, #4]
    nk_flags ws = 0;
 80170ee:	2300      	movs	r3, #0
 80170f0:	627b      	str	r3, [r7, #36]	; 0x24
    int left_mouse_down;
    unsigned int left_mouse_clicked;
    int left_mouse_click_in_cursor;
    float scroll_delta;

    nk_widget_state_reset(state);
 80170f2:	69fb      	ldr	r3, [r7, #28]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	f003 0302 	and.w	r3, r3, #2
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d003      	beq.n	8017106 <nk_scrollbar_behavior+0x32>
 80170fe:	69fb      	ldr	r3, [r7, #28]
 8017100:	2206      	movs	r2, #6
 8017102:	601a      	str	r2, [r3, #0]
 8017104:	e002      	b.n	801710c <nk_scrollbar_behavior+0x38>
 8017106:	69fb      	ldr	r3, [r7, #28]
 8017108:	2204      	movs	r2, #4
 801710a:	601a      	str	r2, [r3, #0]
    if (!in) return scroll_offset;
 801710c:	69bb      	ldr	r3, [r7, #24]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d101      	bne.n	8017116 <nk_scrollbar_behavior+0x42>
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	e35c      	b.n	80177d0 <nk_scrollbar_behavior+0x6fc>

    left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8017116:	69bb      	ldr	r3, [r7, #24]
 8017118:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801711c:	647b      	str	r3, [r7, #68]	; 0x44
    left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 801711e:	69bb      	ldr	r3, [r7, #24]
 8017120:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017124:	643b      	str	r3, [r7, #64]	; 0x40
    left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8017126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017128:	ed93 6a00 	vldr	s12, [r3]
 801712c:	edd3 6a01 	vldr	s13, [r3, #4]
 8017130:	ed93 7a02 	vldr	s14, [r3, #8]
 8017134:	edd3 7a03 	vldr	s15, [r3, #12]
 8017138:	2201      	movs	r2, #1
 801713a:	eeb0 0a46 	vmov.f32	s0, s12
 801713e:	eef0 0a66 	vmov.f32	s1, s13
 8017142:	eeb0 1a47 	vmov.f32	s2, s14
 8017146:	eef0 1a67 	vmov.f32	s3, s15
 801714a:	2100      	movs	r1, #0
 801714c:	69b8      	ldr	r0, [r7, #24]
 801714e:	f7fb fd3b 	bl	8012bc8 <nk_input_has_mouse_click_down_in_rect>
 8017152:	63f8      	str	r0, [r7, #60]	; 0x3c
        NK_BUTTON_LEFT, *cursor, nk_true);
    if (nk_input_is_mouse_hovering_rect(in, *scroll))
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	ed93 6a00 	vldr	s12, [r3]
 801715a:	edd3 6a01 	vldr	s13, [r3, #4]
 801715e:	ed93 7a02 	vldr	s14, [r3, #8]
 8017162:	edd3 7a03 	vldr	s15, [r3, #12]
 8017166:	eeb0 0a46 	vmov.f32	s0, s12
 801716a:	eef0 0a66 	vmov.f32	s1, s13
 801716e:	eeb0 1a47 	vmov.f32	s2, s14
 8017172:	eef0 1a67 	vmov.f32	s3, s15
 8017176:	69b8      	ldr	r0, [r7, #24]
 8017178:	f7fb fd6d 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 801717c:	4603      	mov	r3, r0
 801717e:	2b00      	cmp	r3, #0
 8017180:	d002      	beq.n	8017188 <nk_scrollbar_behavior+0xb4>
        *state = NK_WIDGET_STATE_HOVERED;
 8017182:	69fb      	ldr	r3, [r7, #28]
 8017184:	2212      	movs	r2, #18
 8017186:	601a      	str	r2, [r3, #0]

    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 8017188:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801718c:	2b00      	cmp	r3, #0
 801718e:	d103      	bne.n	8017198 <nk_scrollbar_behavior+0xc4>
 8017190:	69bb      	ldr	r3, [r7, #24]
 8017192:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8017196:	e002      	b.n	801719e <nk_scrollbar_behavior+0xca>
 8017198:	69bb      	ldr	r3, [r7, #24]
 801719a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 801719e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 80171a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	f000 8122 	beq.w	80173ec <nk_scrollbar_behavior+0x318>
 80171a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	f000 811e 	beq.w	80173ec <nk_scrollbar_behavior+0x318>
 80171b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	f040 811a 	bne.w	80173ec <nk_scrollbar_behavior+0x318>
        /* update cursor by mouse dragging */
        float pixel, delta;
        *state = NK_WIDGET_STATE_ACTIVE;
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	2222      	movs	r2, #34	; 0x22
 80171bc:	601a      	str	r2, [r3, #0]
        if (o == NK_VERTICAL) {
 80171be:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	f040 8089 	bne.w	80172da <nk_scrollbar_behavior+0x206>
            float cursor_y;
            pixel = in->mouse.delta.y;
 80171c8:	69bb      	ldr	r3, [r7, #24]
 80171ca:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80171ce:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->h) * target;
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80171d6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80171da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80171de:	ed97 7a02 	vldr	s14, [r7, #8]
 80171e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80171e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 80171ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80171ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80171f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80171f6:	693b      	ldr	r3, [r7, #16]
 80171f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80171fc:	edd7 6a02 	vldr	s13, [r7, #8]
 8017200:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801720c:	d50e      	bpl.n	801722c <nk_scrollbar_behavior+0x158>
 801720e:	ed97 7a03 	vldr	s14, [r7, #12]
 8017212:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017216:	ee77 7a27 	vadd.f32	s15, s14, s15
 801721a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017222:	bf4c      	ite	mi
 8017224:	2301      	movmi	r3, #1
 8017226:	2300      	movpl	r3, #0
 8017228:	b2db      	uxtb	r3, r3
 801722a:	e00e      	b.n	801724a <nk_scrollbar_behavior+0x176>
 801722c:	693b      	ldr	r3, [r7, #16]
 801722e:	edd3 7a03 	vldr	s15, [r3, #12]
 8017232:	ed97 7a02 	vldr	s14, [r7, #8]
 8017236:	ee77 7a67 	vsub.f32	s15, s14, s15
 801723a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017242:	bf4c      	ite	mi
 8017244:	2301      	movmi	r3, #1
 8017246:	2300      	movpl	r3, #0
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b00      	cmp	r3, #0
 801724c:	d002      	beq.n	8017254 <nk_scrollbar_behavior+0x180>
 801724e:	eddf 7acd 	vldr	s15, [pc, #820]	; 8017584 <nk_scrollbar_behavior+0x4b0>
 8017252:	e01f      	b.n	8017294 <nk_scrollbar_behavior+0x1c0>
 8017254:	ed97 7a03 	vldr	s14, [r7, #12]
 8017258:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801725c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	edd3 7a03 	vldr	s15, [r3, #12]
 8017266:	edd7 6a02 	vldr	s13, [r7, #8]
 801726a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801726e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017276:	d506      	bpl.n	8017286 <nk_scrollbar_behavior+0x1b2>
 8017278:	ed97 7a03 	vldr	s14, [r7, #12]
 801727c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017284:	e006      	b.n	8017294 <nk_scrollbar_behavior+0x1c0>
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	edd3 7a03 	vldr	s15, [r3, #12]
 801728c:	ed97 7a02 	vldr	s14, [r7, #8]
 8017290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017294:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);
 8017298:	693b      	ldr	r3, [r7, #16]
 801729a:	ed93 7a01 	vldr	s14, [r3, #4]
 801729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80172a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80172a6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80172b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80172b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;
 80172bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172be:	edd3 7a03 	vldr	s15, [r3, #12]
 80172c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80172c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80172ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80172ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172d2:	69bb      	ldr	r3, [r7, #24]
 80172d4:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 80172d8:	e238      	b.n	801774c <nk_scrollbar_behavior+0x678>
        } else {
            float cursor_x;
            pixel = in->mouse.delta.x;
 80172da:	69bb      	ldr	r3, [r7, #24]
 80172dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80172e0:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->w) * target;
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80172e8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80172ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80172f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80172f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172f8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 80172fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8017300:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017308:	693b      	ldr	r3, [r7, #16]
 801730a:	edd3 7a02 	vldr	s15, [r3, #8]
 801730e:	edd7 6a02 	vldr	s13, [r7, #8]
 8017312:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801731e:	d50e      	bpl.n	801733e <nk_scrollbar_behavior+0x26a>
 8017320:	ed97 7a03 	vldr	s14, [r7, #12]
 8017324:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017328:	ee77 7a27 	vadd.f32	s15, s14, s15
 801732c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017334:	bf4c      	ite	mi
 8017336:	2301      	movmi	r3, #1
 8017338:	2300      	movpl	r3, #0
 801733a:	b2db      	uxtb	r3, r3
 801733c:	e00e      	b.n	801735c <nk_scrollbar_behavior+0x288>
 801733e:	693b      	ldr	r3, [r7, #16]
 8017340:	edd3 7a02 	vldr	s15, [r3, #8]
 8017344:	ed97 7a02 	vldr	s14, [r7, #8]
 8017348:	ee77 7a67 	vsub.f32	s15, s14, s15
 801734c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017354:	bf4c      	ite	mi
 8017356:	2301      	movmi	r3, #1
 8017358:	2300      	movpl	r3, #0
 801735a:	b2db      	uxtb	r3, r3
 801735c:	2b00      	cmp	r3, #0
 801735e:	d002      	beq.n	8017366 <nk_scrollbar_behavior+0x292>
 8017360:	eddf 7a88 	vldr	s15, [pc, #544]	; 8017584 <nk_scrollbar_behavior+0x4b0>
 8017364:	e01f      	b.n	80173a6 <nk_scrollbar_behavior+0x2d2>
 8017366:	ed97 7a03 	vldr	s14, [r7, #12]
 801736a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801736e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	edd3 7a02 	vldr	s15, [r3, #8]
 8017378:	edd7 6a02 	vldr	s13, [r7, #8]
 801737c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017388:	d506      	bpl.n	8017398 <nk_scrollbar_behavior+0x2c4>
 801738a:	ed97 7a03 	vldr	s14, [r7, #12]
 801738e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017396:	e006      	b.n	80173a6 <nk_scrollbar_behavior+0x2d2>
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	edd3 7a02 	vldr	s15, [r3, #8]
 801739e:	ed97 7a02 	vldr	s14, [r7, #8]
 80173a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173a6:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	ed93 7a00 	vldr	s14, [r3]
 80173b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80173b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80173b8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	edd3 7a02 	vldr	s15, [r3, #8]
 80173c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80173c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;
 80173ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80173d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80173d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80173e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173e4:	69bb      	ldr	r3, [r7, #24]
 80173e6:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 80173ea:	e1af      	b.n	801774c <nk_scrollbar_behavior+0x678>
        }
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 80173ec:	211d      	movs	r1, #29
 80173ee:	69b8      	ldr	r0, [r7, #24]
 80173f0:	f7fb fd10 	bl	8012e14 <nk_input_is_key_pressed>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d006      	beq.n	8017408 <nk_scrollbar_behavior+0x334>
 80173fa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d102      	bne.n	8017408 <nk_scrollbar_behavior+0x334>
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d11a      	bne.n	801743e <nk_scrollbar_behavior+0x36a>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 8017408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801740a:	ed93 6a00 	vldr	s12, [r3]
 801740e:	edd3 6a01 	vldr	s13, [r3, #4]
 8017412:	ed93 7a02 	vldr	s14, [r3, #8]
 8017416:	edd3 7a03 	vldr	s15, [r3, #12]
 801741a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801741e:	2200      	movs	r2, #0
 8017420:	69b9      	ldr	r1, [r7, #24]
 8017422:	eeb0 0a46 	vmov.f32	s0, s12
 8017426:	eef0 0a66 	vmov.f32	s1, s13
 801742a:	eeb0 1a47 	vmov.f32	s2, s14
 801742e:	eef0 1a67 	vmov.f32	s3, s15
 8017432:	4618      	mov	r0, r3
 8017434:	f7f7 faa8 	bl	800e988 <nk_button_behavior>
 8017438:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 801743a:	2b00      	cmp	r3, #0
 801743c:	d035      	beq.n	80174aa <nk_scrollbar_behavior+0x3d6>
        /* scroll page up by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 801743e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017442:	2b00      	cmp	r3, #0
 8017444:	d118      	bne.n	8017478 <nk_scrollbar_behavior+0x3a4>
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 8017446:	693b      	ldr	r3, [r7, #16]
 8017448:	edd3 7a03 	vldr	s15, [r3, #12]
 801744c:	ed97 7a03 	vldr	s14, [r7, #12]
 8017450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801745c:	dd07      	ble.n	801746e <nk_scrollbar_behavior+0x39a>
 801745e:	693b      	ldr	r3, [r7, #16]
 8017460:	edd3 7a03 	vldr	s15, [r3, #12]
 8017464:	ed97 7a03 	vldr	s14, [r7, #12]
 8017468:	ee77 7a67 	vsub.f32	s15, s14, s15
 801746c:	e001      	b.n	8017472 <nk_scrollbar_behavior+0x39e>
 801746e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8017584 <nk_scrollbar_behavior+0x4b0>
 8017472:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8017476:	e169      	b.n	801774c <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	edd3 7a02 	vldr	s15, [r3, #8]
 801747e:	ed97 7a03 	vldr	s14, [r7, #12]
 8017482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801748e:	dd07      	ble.n	80174a0 <nk_scrollbar_behavior+0x3cc>
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	edd3 7a02 	vldr	s15, [r3, #8]
 8017496:	ed97 7a03 	vldr	s14, [r7, #12]
 801749a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801749e:	e001      	b.n	80174a4 <nk_scrollbar_behavior+0x3d0>
 80174a0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8017584 <nk_scrollbar_behavior+0x4b0>
 80174a4:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 80174a8:	e150      	b.n	801774c <nk_scrollbar_behavior+0x678>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 80174aa:	211c      	movs	r1, #28
 80174ac:	69b8      	ldr	r0, [r7, #24]
 80174ae:	f7fb fcb1 	bl	8012e14 <nk_input_is_key_pressed>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d006      	beq.n	80174c6 <nk_scrollbar_behavior+0x3f2>
 80174b8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d102      	bne.n	80174c6 <nk_scrollbar_behavior+0x3f2>
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d11a      	bne.n	80174fc <nk_scrollbar_behavior+0x428>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 80174c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80174c8:	ed93 6a00 	vldr	s12, [r3]
 80174cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80174d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80174d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80174d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80174dc:	2200      	movs	r2, #0
 80174de:	69b9      	ldr	r1, [r7, #24]
 80174e0:	eeb0 0a46 	vmov.f32	s0, s12
 80174e4:	eef0 0a66 	vmov.f32	s1, s13
 80174e8:	eeb0 1a47 	vmov.f32	s2, s14
 80174ec:	eef0 1a67 	vmov.f32	s3, s15
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7f7 fa49 	bl	800e988 <nk_button_behavior>
 80174f6:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d04f      	beq.n	801759c <nk_scrollbar_behavior+0x4c8>
        /* scroll page down by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 80174fc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017500:	2b00      	cmp	r3, #0
 8017502:	d124      	bne.n	801754e <nk_scrollbar_behavior+0x47a>
            scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	ed93 7a03 	vldr	s14, [r3, #12]
 801750a:	edd7 7a03 	vldr	s15, [r7, #12]
 801750e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	edd3 7a03 	vldr	s15, [r3, #12]
 8017518:	edd7 6a02 	vldr	s13, [r7, #8]
 801751c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017528:	d507      	bpl.n	801753a <nk_scrollbar_behavior+0x466>
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	ed93 7a03 	vldr	s14, [r3, #12]
 8017530:	edd7 7a03 	vldr	s15, [r7, #12]
 8017534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017538:	e006      	b.n	8017548 <nk_scrollbar_behavior+0x474>
 801753a:	693b      	ldr	r3, [r7, #16]
 801753c:	edd3 7a03 	vldr	s15, [r3, #12]
 8017540:	ed97 7a02 	vldr	s14, [r7, #8]
 8017544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017548:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801754c:	e0fe      	b.n	801774c <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);
 801754e:	693b      	ldr	r3, [r7, #16]
 8017550:	ed93 7a02 	vldr	s14, [r3, #8]
 8017554:	edd7 7a03 	vldr	s15, [r7, #12]
 8017558:	ee37 7a27 	vadd.f32	s14, s14, s15
 801755c:	693b      	ldr	r3, [r7, #16]
 801755e:	edd3 7a02 	vldr	s15, [r3, #8]
 8017562:	edd7 6a02 	vldr	s13, [r7, #8]
 8017566:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801756a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801756e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017572:	d509      	bpl.n	8017588 <nk_scrollbar_behavior+0x4b4>
 8017574:	693b      	ldr	r3, [r7, #16]
 8017576:	ed93 7a02 	vldr	s14, [r3, #8]
 801757a:	edd7 7a03 	vldr	s15, [r7, #12]
 801757e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017582:	e008      	b.n	8017596 <nk_scrollbar_behavior+0x4c2>
 8017584:	00000000 	.word	0x00000000
 8017588:	693b      	ldr	r3, [r7, #16]
 801758a:	edd3 7a02 	vldr	s15, [r3, #8]
 801758e:	ed97 7a02 	vldr	s14, [r7, #8]
 8017592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017596:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801759a:	e0d7      	b.n	801774c <nk_scrollbar_behavior+0x678>
    } else if (has_scrolling) {
 801759c:	697b      	ldr	r3, [r7, #20]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	f000 80d4 	beq.w	801774c <nk_scrollbar_behavior+0x678>
        if ((scroll_delta < 0 || (scroll_delta > 0))) {
 80175a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80175a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80175ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b0:	d407      	bmi.n	80175c2 <nk_scrollbar_behavior+0x4ee>
 80175b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80175b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80175ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175be:	f340 80a2 	ble.w	8017706 <nk_scrollbar_behavior+0x632>
            /* update cursor by mouse scrolling */
            scroll_offset = scroll_offset + scroll_step * (-scroll_delta);
 80175c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80175c6:	eeb1 7a67 	vneg.f32	s14, s15
 80175ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80175ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80175d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80175d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175da:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 80175de:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d147      	bne.n	8017676 <nk_scrollbar_behavior+0x5a2>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80175ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80175f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80175f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80175f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80175fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017600:	d50a      	bpl.n	8017618 <nk_scrollbar_behavior+0x544>
 8017602:	edd7 7a03 	vldr	s15, [r7, #12]
 8017606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801760e:	bf4c      	ite	mi
 8017610:	2301      	movmi	r3, #1
 8017612:	2300      	movpl	r3, #0
 8017614:	b2db      	uxtb	r3, r3
 8017616:	e00e      	b.n	8017636 <nk_scrollbar_behavior+0x562>
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	edd3 7a03 	vldr	s15, [r3, #12]
 801761e:	ed97 7a02 	vldr	s14, [r7, #8]
 8017622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801762e:	bf4c      	ite	mi
 8017630:	2301      	movmi	r3, #1
 8017632:	2300      	movpl	r3, #0
 8017634:	b2db      	uxtb	r3, r3
 8017636:	2b00      	cmp	r3, #0
 8017638:	d002      	beq.n	8017640 <nk_scrollbar_behavior+0x56c>
 801763a:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 8017584 <nk_scrollbar_behavior+0x4b0>
 801763e:	e017      	b.n	8017670 <nk_scrollbar_behavior+0x59c>
 8017640:	693b      	ldr	r3, [r7, #16]
 8017642:	edd3 7a03 	vldr	s15, [r3, #12]
 8017646:	ed97 7a02 	vldr	s14, [r7, #8]
 801764a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801764e:	ed97 7a03 	vldr	s14, [r7, #12]
 8017652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801765a:	d502      	bpl.n	8017662 <nk_scrollbar_behavior+0x58e>
 801765c:	edd7 7a03 	vldr	s15, [r7, #12]
 8017660:	e006      	b.n	8017670 <nk_scrollbar_behavior+0x59c>
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	edd3 7a03 	vldr	s15, [r3, #12]
 8017668:	ed97 7a02 	vldr	s14, [r7, #8]
 801766c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017670:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8017674:	e06a      	b.n	801774c <nk_scrollbar_behavior+0x678>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 8017676:	693b      	ldr	r3, [r7, #16]
 8017678:	edd3 7a02 	vldr	s15, [r3, #8]
 801767c:	ed97 7a02 	vldr	s14, [r7, #8]
 8017680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017684:	ed97 7a03 	vldr	s14, [r7, #12]
 8017688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017690:	d50a      	bpl.n	80176a8 <nk_scrollbar_behavior+0x5d4>
 8017692:	edd7 7a03 	vldr	s15, [r7, #12]
 8017696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801769e:	bf4c      	ite	mi
 80176a0:	2301      	movmi	r3, #1
 80176a2:	2300      	movpl	r3, #0
 80176a4:	b2db      	uxtb	r3, r3
 80176a6:	e00e      	b.n	80176c6 <nk_scrollbar_behavior+0x5f2>
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80176ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80176b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80176b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80176ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176be:	bf4c      	ite	mi
 80176c0:	2301      	movmi	r3, #1
 80176c2:	2300      	movpl	r3, #0
 80176c4:	b2db      	uxtb	r3, r3
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d002      	beq.n	80176d0 <nk_scrollbar_behavior+0x5fc>
 80176ca:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 8017584 <nk_scrollbar_behavior+0x4b0>
 80176ce:	e017      	b.n	8017700 <nk_scrollbar_behavior+0x62c>
 80176d0:	693b      	ldr	r3, [r7, #16]
 80176d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80176d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80176da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80176de:	ed97 7a03 	vldr	s14, [r7, #12]
 80176e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ea:	d502      	bpl.n	80176f2 <nk_scrollbar_behavior+0x61e>
 80176ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80176f0:	e006      	b.n	8017700 <nk_scrollbar_behavior+0x62c>
 80176f2:	693b      	ldr	r3, [r7, #16]
 80176f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80176f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80176fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017700:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8017704:	e022      	b.n	801774c <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {
 8017706:	211a      	movs	r1, #26
 8017708:	69b8      	ldr	r0, [r7, #24]
 801770a:	f7fb fb83 	bl	8012e14 <nk_input_is_key_pressed>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d007      	beq.n	8017724 <nk_scrollbar_behavior+0x650>
            /* update cursor to the beginning  */
            if (o == NK_VERTICAL) scroll_offset = 0;
 8017714:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017718:	2b00      	cmp	r3, #0
 801771a:	d117      	bne.n	801774c <nk_scrollbar_behavior+0x678>
 801771c:	f04f 0300 	mov.w	r3, #0
 8017720:	60fb      	str	r3, [r7, #12]
 8017722:	e013      	b.n	801774c <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
 8017724:	211b      	movs	r1, #27
 8017726:	69b8      	ldr	r0, [r7, #24]
 8017728:	f7fb fb74 	bl	8012e14 <nk_input_is_key_pressed>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d00c      	beq.n	801774c <nk_scrollbar_behavior+0x678>
            /* update cursor to the end */
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
 8017732:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8017736:	2b00      	cmp	r3, #0
 8017738:	d108      	bne.n	801774c <nk_scrollbar_behavior+0x678>
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	edd3 7a03 	vldr	s15, [r3, #12]
 8017740:	ed97 7a02 	vldr	s14, [r7, #8]
 8017744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017748:	edc7 7a03 	vstr	s15, [r7, #12]
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 801774c:	69fb      	ldr	r3, [r7, #28]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	f003 0310 	and.w	r3, r3, #16
 8017754:	2b00      	cmp	r3, #0
 8017756:	d01d      	beq.n	8017794 <nk_scrollbar_behavior+0x6c0>
 8017758:	693b      	ldr	r3, [r7, #16]
 801775a:	ed93 6a00 	vldr	s12, [r3]
 801775e:	edd3 6a01 	vldr	s13, [r3, #4]
 8017762:	ed93 7a02 	vldr	s14, [r3, #8]
 8017766:	edd3 7a03 	vldr	s15, [r3, #12]
 801776a:	eeb0 0a46 	vmov.f32	s0, s12
 801776e:	eef0 0a66 	vmov.f32	s1, s13
 8017772:	eeb0 1a47 	vmov.f32	s2, s14
 8017776:	eef0 1a67 	vmov.f32	s3, s15
 801777a:	69b8      	ldr	r0, [r7, #24]
 801777c:	f7fb fabd 	bl	8012cfa <nk_input_is_mouse_prev_hovering_rect>
 8017780:	4603      	mov	r3, r0
 8017782:	2b00      	cmp	r3, #0
 8017784:	d106      	bne.n	8017794 <nk_scrollbar_behavior+0x6c0>
        *state |= NK_WIDGET_STATE_ENTERED;
 8017786:	69fb      	ldr	r3, [r7, #28]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f043 0208 	orr.w	r2, r3, #8
 801778e:	69fb      	ldr	r3, [r7, #28]
 8017790:	601a      	str	r2, [r3, #0]
 8017792:	e01c      	b.n	80177ce <nk_scrollbar_behavior+0x6fa>
    else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	ed93 6a00 	vldr	s12, [r3]
 801779a:	edd3 6a01 	vldr	s13, [r3, #4]
 801779e:	ed93 7a02 	vldr	s14, [r3, #8]
 80177a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80177a6:	eeb0 0a46 	vmov.f32	s0, s12
 80177aa:	eef0 0a66 	vmov.f32	s1, s13
 80177ae:	eeb0 1a47 	vmov.f32	s2, s14
 80177b2:	eef0 1a67 	vmov.f32	s3, s15
 80177b6:	69b8      	ldr	r0, [r7, #24]
 80177b8:	f7fb fa9f 	bl	8012cfa <nk_input_is_mouse_prev_hovering_rect>
 80177bc:	4603      	mov	r3, r0
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d005      	beq.n	80177ce <nk_scrollbar_behavior+0x6fa>
        *state |= NK_WIDGET_STATE_LEFT;
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80177ca:	69fb      	ldr	r3, [r7, #28]
 80177cc:	601a      	str	r2, [r3, #0]
    return scroll_offset;
 80177ce:	68fb      	ldr	r3, [r7, #12]
}
 80177d0:	ee07 3a90 	vmov	s15, r3
 80177d4:	eeb0 0a67 	vmov.f32	s0, s15
 80177d8:	3748      	adds	r7, #72	; 0x48
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop

080177e0 <nk_draw_scrollbar>:
NK_LIB void
nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_scrollbar *style, const struct nk_rect *bounds,
    const struct nk_rect *scroll)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b086      	sub	sp, #24
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	60f8      	str	r0, [r7, #12]
 80177e8:	60b9      	str	r1, [r7, #8]
 80177ea:	607a      	str	r2, [r7, #4]
 80177ec:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;

    /* select correct colors/images to draw */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	f003 0320 	and.w	r3, r3, #32
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d006      	beq.n	8017806 <nk_draw_scrollbar+0x26>
        background = &style->active;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	3338      	adds	r3, #56	; 0x38
 80177fc:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_active;
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	3390      	adds	r3, #144	; 0x90
 8017802:	613b      	str	r3, [r7, #16]
 8017804:	e010      	b.n	8017828 <nk_draw_scrollbar+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	f003 0310 	and.w	r3, r3, #16
 801780c:	2b00      	cmp	r3, #0
 801780e:	d006      	beq.n	801781e <nk_draw_scrollbar+0x3e>
        background = &style->hover;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	331c      	adds	r3, #28
 8017814:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_hover;
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	3374      	adds	r3, #116	; 0x74
 801781a:	613b      	str	r3, [r7, #16]
 801781c:	e004      	b.n	8017828 <nk_draw_scrollbar+0x48>
    } else {
        background = &style->normal;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_normal;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	3358      	adds	r3, #88	; 0x58
 8017826:	613b      	str	r3, [r7, #16]
    }

    /* draw background */
    switch (background->type) {
 8017828:	697b      	ldr	r3, [r7, #20]
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2b02      	cmp	r3, #2
 801782e:	d01e      	beq.n	801786e <nk_draw_scrollbar+0x8e>
 8017830:	2b02      	cmp	r3, #2
 8017832:	dc71      	bgt.n	8017918 <nk_draw_scrollbar+0x138>
 8017834:	2b00      	cmp	r3, #0
 8017836:	d033      	beq.n	80178a0 <nk_draw_scrollbar+0xc0>
 8017838:	2b01      	cmp	r3, #1
 801783a:	d16d      	bne.n	8017918 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	1d19      	adds	r1, r3, #4
 8017840:	4a74      	ldr	r2, [pc, #464]	; (8017a14 <nk_draw_scrollbar+0x234>)
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	ed93 6a00 	vldr	s12, [r3]
 8017848:	edd3 6a01 	vldr	s13, [r3, #4]
 801784c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017850:	edd3 7a03 	vldr	s15, [r3, #12]
 8017854:	6812      	ldr	r2, [r2, #0]
 8017856:	eeb0 0a46 	vmov.f32	s0, s12
 801785a:	eef0 0a66 	vmov.f32	s1, s13
 801785e:	eeb0 1a47 	vmov.f32	s2, s14
 8017862:	eef0 1a67 	vmov.f32	s3, s15
 8017866:	68f8      	ldr	r0, [r7, #12]
 8017868:	f7fa f90e 	bl	8011a88 <nk_draw_image>
            break;
 801786c:	e054      	b.n	8017918 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	1d19      	adds	r1, r3, #4
 8017872:	4a68      	ldr	r2, [pc, #416]	; (8017a14 <nk_draw_scrollbar+0x234>)
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	ed93 6a00 	vldr	s12, [r3]
 801787a:	edd3 6a01 	vldr	s13, [r3, #4]
 801787e:	ed93 7a02 	vldr	s14, [r3, #8]
 8017882:	edd3 7a03 	vldr	s15, [r3, #12]
 8017886:	6812      	ldr	r2, [r2, #0]
 8017888:	eeb0 0a46 	vmov.f32	s0, s12
 801788c:	eef0 0a66 	vmov.f32	s1, s13
 8017890:	eeb0 1a47 	vmov.f32	s2, s14
 8017894:	eef0 1a67 	vmov.f32	s3, s15
 8017898:	68f8      	ldr	r0, [r7, #12]
 801789a:	f7fa f9e7 	bl	8011c6c <nk_draw_nine_slice>
            break;
 801789e:	e03b      	b.n	8017918 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 80178a6:	697a      	ldr	r2, [r7, #20]
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	ed93 6a00 	vldr	s12, [r3]
 80178ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80178b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80178b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80178ba:	6851      	ldr	r1, [r2, #4]
 80178bc:	eeb0 2a65 	vmov.f32	s4, s11
 80178c0:	eeb0 0a46 	vmov.f32	s0, s12
 80178c4:	eef0 0a66 	vmov.f32	s1, s13
 80178c8:	eeb0 1a47 	vmov.f32	s2, s14
 80178cc:	eef0 1a67 	vmov.f32	s3, s15
 80178d0:	68f8      	ldr	r0, [r7, #12]
 80178d2:	f7f9 fd7f 	bl	80113d4 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
 80178e2:	687a      	ldr	r2, [r7, #4]
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	ed93 6a00 	vldr	s12, [r3]
 80178ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80178ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80178f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80178f6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80178f8:	eef0 2a45 	vmov.f32	s5, s10
 80178fc:	eeb0 2a65 	vmov.f32	s4, s11
 8017900:	eeb0 0a46 	vmov.f32	s0, s12
 8017904:	eef0 0a66 	vmov.f32	s1, s13
 8017908:	eeb0 1a47 	vmov.f32	s2, s14
 801790c:	eef0 1a67 	vmov.f32	s3, s15
 8017910:	68f8      	ldr	r0, [r7, #12]
 8017912:	f7f9 fc57 	bl	80111c4 <nk_stroke_rect>
            break;
 8017916:	bf00      	nop
    }

    /* draw cursor */
    switch (cursor->type) {
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	2b02      	cmp	r3, #2
 801791e:	d01e      	beq.n	801795e <nk_draw_scrollbar+0x17e>
 8017920:	2b02      	cmp	r3, #2
 8017922:	dc72      	bgt.n	8017a0a <nk_draw_scrollbar+0x22a>
 8017924:	2b00      	cmp	r3, #0
 8017926:	d033      	beq.n	8017990 <nk_draw_scrollbar+0x1b0>
 8017928:	2b01      	cmp	r3, #1
 801792a:	d16e      	bne.n	8017a0a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *scroll, &cursor->data.image, nk_white);
 801792c:	693b      	ldr	r3, [r7, #16]
 801792e:	1d19      	adds	r1, r3, #4
 8017930:	4a38      	ldr	r2, [pc, #224]	; (8017a14 <nk_draw_scrollbar+0x234>)
 8017932:	6a3b      	ldr	r3, [r7, #32]
 8017934:	ed93 6a00 	vldr	s12, [r3]
 8017938:	edd3 6a01 	vldr	s13, [r3, #4]
 801793c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017940:	edd3 7a03 	vldr	s15, [r3, #12]
 8017944:	6812      	ldr	r2, [r2, #0]
 8017946:	eeb0 0a46 	vmov.f32	s0, s12
 801794a:	eef0 0a66 	vmov.f32	s1, s13
 801794e:	eeb0 1a47 	vmov.f32	s2, s14
 8017952:	eef0 1a67 	vmov.f32	s3, s15
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f7fa f896 	bl	8011a88 <nk_draw_image>
            break;
 801795c:	e055      	b.n	8017a0a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *scroll, &cursor->data.slice, nk_white);
 801795e:	693b      	ldr	r3, [r7, #16]
 8017960:	1d19      	adds	r1, r3, #4
 8017962:	4a2c      	ldr	r2, [pc, #176]	; (8017a14 <nk_draw_scrollbar+0x234>)
 8017964:	6a3b      	ldr	r3, [r7, #32]
 8017966:	ed93 6a00 	vldr	s12, [r3]
 801796a:	edd3 6a01 	vldr	s13, [r3, #4]
 801796e:	ed93 7a02 	vldr	s14, [r3, #8]
 8017972:	edd3 7a03 	vldr	s15, [r3, #12]
 8017976:	6812      	ldr	r2, [r2, #0]
 8017978:	eeb0 0a46 	vmov.f32	s0, s12
 801797c:	eef0 0a66 	vmov.f32	s1, s13
 8017980:	eeb0 1a47 	vmov.f32	s2, s14
 8017984:	eef0 1a67 	vmov.f32	s3, s15
 8017988:	68f8      	ldr	r0, [r7, #12]
 801798a:	f7fa f96f 	bl	8011c6c <nk_draw_nine_slice>
            break;
 801798e:	e03c      	b.n	8017a0a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8017996:	693a      	ldr	r2, [r7, #16]
 8017998:	6a3b      	ldr	r3, [r7, #32]
 801799a:	ed93 6a00 	vldr	s12, [r3]
 801799e:	edd3 6a01 	vldr	s13, [r3, #4]
 80179a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80179a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80179aa:	6851      	ldr	r1, [r2, #4]
 80179ac:	eeb0 2a65 	vmov.f32	s4, s11
 80179b0:	eeb0 0a46 	vmov.f32	s0, s12
 80179b4:	eef0 0a66 	vmov.f32	s1, s13
 80179b8:	eeb0 1a47 	vmov.f32	s2, s14
 80179bc:	eef0 1a67 	vmov.f32	s3, s15
 80179c0:	68f8      	ldr	r0, [r7, #12]
 80179c2:	f7f9 fd07 	bl	80113d4 <nk_fill_rect>
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	ed93 5a2e 	vldr	s10, [r3, #184]	; 0xb8
 80179d2:	687a      	ldr	r2, [r7, #4]
 80179d4:	6a3b      	ldr	r3, [r7, #32]
 80179d6:	ed93 6a00 	vldr	s12, [r3]
 80179da:	edd3 6a01 	vldr	s13, [r3, #4]
 80179de:	ed93 7a02 	vldr	s14, [r3, #8]
 80179e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80179e6:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 80179ea:	eef0 2a45 	vmov.f32	s5, s10
 80179ee:	eeb0 2a65 	vmov.f32	s4, s11
 80179f2:	eeb0 0a46 	vmov.f32	s0, s12
 80179f6:	eef0 0a66 	vmov.f32	s1, s13
 80179fa:	eeb0 1a47 	vmov.f32	s2, s14
 80179fe:	eef0 1a67 	vmov.f32	s3, s15
 8017a02:	68f8      	ldr	r0, [r7, #12]
 8017a04:	f7f9 fbde 	bl	80111c4 <nk_stroke_rect>
            break;
 8017a08:	bf00      	nop
    }
}
 8017a0a:	bf00      	nop
 8017a0c:	3718      	adds	r7, #24
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}
 8017a12:	bf00      	nop
 8017a14:	08023154 	.word	0x08023154

08017a18 <nk_do_scrollbarv>:
nk_do_scrollbarv(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b0a6      	sub	sp, #152	; 0x98
 8017a1c:	af04      	add	r7, sp, #16
 8017a1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017a20:	62b9      	str	r1, [r7, #40]	; 0x28
 8017a22:	eeb0 6a40 	vmov.f32	s12, s0
 8017a26:	eef0 6a60 	vmov.f32	s13, s1
 8017a2a:	eeb0 7a41 	vmov.f32	s14, s2
 8017a2e:	eef0 7a61 	vmov.f32	s15, s3
 8017a32:	617a      	str	r2, [r7, #20]
 8017a34:	ed87 2a04 	vstr	s4, [r7, #16]
 8017a38:	edc7 2a03 	vstr	s5, [r7, #12]
 8017a3c:	ed87 3a02 	vstr	s6, [r7, #8]
 8017a40:	edc7 3a01 	vstr	s7, [r7, #4]
 8017a44:	603b      	str	r3, [r7, #0]
 8017a46:	ed87 6a06 	vstr	s12, [r7, #24]
 8017a4a:	edc7 6a07 	vstr	s13, [r7, #28]
 8017a4e:	ed87 7a08 	vstr	s14, [r7, #32]
 8017a52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 8017a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d105      	bne.n	8017a68 <nk_do_scrollbarv+0x50>
 8017a5c:	4bb6      	ldr	r3, [pc, #728]	; (8017d38 <nk_do_scrollbarv+0x320>)
 8017a5e:	4ab7      	ldr	r2, [pc, #732]	; (8017d3c <nk_do_scrollbarv+0x324>)
 8017a60:	2195      	movs	r1, #149	; 0x95
 8017a62:	48b7      	ldr	r0, [pc, #732]	; (8017d40 <nk_do_scrollbarv+0x328>)
 8017a64:	f005 fd94 	bl	801d590 <__assert_func>
    NK_ASSERT(style);
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d105      	bne.n	8017a7a <nk_do_scrollbarv+0x62>
 8017a6e:	4bb5      	ldr	r3, [pc, #724]	; (8017d44 <nk_do_scrollbarv+0x32c>)
 8017a70:	4ab2      	ldr	r2, [pc, #712]	; (8017d3c <nk_do_scrollbarv+0x324>)
 8017a72:	2196      	movs	r1, #150	; 0x96
 8017a74:	48b2      	ldr	r0, [pc, #712]	; (8017d40 <nk_do_scrollbarv+0x328>)
 8017a76:	f005 fd8b 	bl	801d590 <__assert_func>
    NK_ASSERT(state);
 8017a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d105      	bne.n	8017a8c <nk_do_scrollbarv+0x74>
 8017a80:	4bb1      	ldr	r3, [pc, #708]	; (8017d48 <nk_do_scrollbarv+0x330>)
 8017a82:	4aae      	ldr	r2, [pc, #696]	; (8017d3c <nk_do_scrollbarv+0x324>)
 8017a84:	2197      	movs	r1, #151	; 0x97
 8017a86:	48ae      	ldr	r0, [pc, #696]	; (8017d40 <nk_do_scrollbarv+0x328>)
 8017a88:	f005 fd82 	bl	801d590 <__assert_func>
    if (!out || !style) return 0;
 8017a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d002      	beq.n	8017a98 <nk_do_scrollbarv+0x80>
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d102      	bne.n	8017a9e <nk_do_scrollbarv+0x86>
 8017a98:	f04f 0300 	mov.w	r3, #0
 8017a9c:	e253      	b.n	8017f46 <nk_do_scrollbarv+0x52e>

    scroll.w = NK_MAX(scroll.w, 1);
 8017a9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8017aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aae:	d502      	bpl.n	8017ab6 <nk_do_scrollbarv+0x9e>
 8017ab0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017ab4:	e000      	b.n	8017ab8 <nk_do_scrollbarv+0xa0>
 8017ab6:	6a3b      	ldr	r3, [r7, #32]
 8017ab8:	623b      	str	r3, [r7, #32]
    scroll.h = NK_MAX(scroll.h, 0);
 8017aba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ac6:	d502      	bpl.n	8017ace <nk_do_scrollbarv+0xb6>
 8017ac8:	f04f 0300 	mov.w	r3, #0
 8017acc:	e000      	b.n	8017ad0 <nk_do_scrollbarv+0xb8>
 8017ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad0:	627b      	str	r3, [r7, #36]	; 0x24
    if (target <= scroll.h) return 0;
 8017ad2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8017ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ae2:	d802      	bhi.n	8017aea <nk_do_scrollbarv+0xd2>
 8017ae4:	f04f 0300 	mov.w	r3, #0
 8017ae8:	e22d      	b.n	8017f46 <nk_do_scrollbarv+0x52e>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 8017aea:	683b      	ldr	r3, [r7, #0]
 8017aec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	f000 80a4 	beq.w	8017c3e <nk_do_scrollbarv+0x226>
        nk_flags ws;
        float scroll_h;
        struct nk_rect button;

        button.x = scroll.x;
 8017af6:	69bb      	ldr	r3, [r7, #24]
 8017af8:	633b      	str	r3, [r7, #48]	; 0x30
        button.w = scroll.w;
 8017afa:	6a3b      	ldr	r3, [r7, #32]
 8017afc:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.w;
 8017afe:	6a3b      	ldr	r3, [r7, #32]
 8017b00:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_h = NK_MAX(scroll.h - 2 * button.h,0);
 8017b02:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017b06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017b0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b1a:	d502      	bpl.n	8017b22 <nk_do_scrollbarv+0x10a>
 8017b1c:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8017d4c <nk_do_scrollbarv+0x334>
 8017b20:	e007      	b.n	8017b32 <nk_do_scrollbarv+0x11a>
 8017b22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017b26:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017b2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b32:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 8017b36:	ed97 7a02 	vldr	s14, [r7, #8]
 8017b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8017b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b46:	d501      	bpl.n	8017b4c <nk_do_scrollbarv+0x134>
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	e000      	b.n	8017b4e <nk_do_scrollbarv+0x136>
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.y = scroll.y;
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017b62:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8017b66:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8017b6a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8017b6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017b72:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017b7a:	9202      	str	r2, [sp, #8]
 8017b7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017b80:	9201      	str	r2, [sp, #4]
 8017b82:	9300      	str	r3, [sp, #0]
 8017b84:	2301      	movs	r3, #1
 8017b86:	460a      	mov	r2, r1
 8017b88:	eeb0 0a46 	vmov.f32	s0, s12
 8017b8c:	eef0 0a66 	vmov.f32	s1, s13
 8017b90:	eeb0 1a47 	vmov.f32	s2, s14
 8017b94:	eef0 1a67 	vmov.f32	s3, s15
 8017b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017b9a:	f7f7 fa87 	bl	800f0ac <nk_do_button_symbol>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d007      	beq.n	8017bb4 <nk_do_scrollbarv+0x19c>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 8017ba4:	ed97 7a04 	vldr	s14, [r7, #16]
 8017ba8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8017bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017bb0:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.y = scroll.y + scroll.h - button.h;
 8017bb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8017bb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017bc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017bc8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8017bcc:	683b      	ldr	r3, [r7, #0]
 8017bce:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 8017bd2:	683b      	ldr	r3, [r7, #0]
 8017bd4:	33cc      	adds	r3, #204	; 0xcc
 8017bd6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8017bda:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8017bde:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8017be2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017be6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017bee:	9202      	str	r2, [sp, #8]
 8017bf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017bf4:	9201      	str	r2, [sp, #4]
 8017bf6:	9300      	str	r3, [sp, #0]
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	460a      	mov	r2, r1
 8017bfc:	eeb0 0a46 	vmov.f32	s0, s12
 8017c00:	eef0 0a66 	vmov.f32	s1, s13
 8017c04:	eeb0 1a47 	vmov.f32	s2, s14
 8017c08:	eef0 1a67 	vmov.f32	s3, s15
 8017c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017c0e:	f7f7 fa4d 	bl	800f0ac <nk_do_button_symbol>
 8017c12:	4603      	mov	r3, r0
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d007      	beq.n	8017c28 <nk_do_scrollbarv+0x210>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 8017c18:	ed97 7a04 	vldr	s14, [r7, #16]
 8017c1c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8017c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017c24:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.y = scroll.y + button.h;
 8017c28:	ed97 7a07 	vldr	s14, [r7, #28]
 8017c2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017c34:	edc7 7a07 	vstr	s15, [r7, #28]
        scroll.h = scroll_h;
 8017c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017c3c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.h);
 8017c3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017c42:	ed97 7a02 	vldr	s14, [r7, #8]
 8017c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c4e:	d501      	bpl.n	8017c54 <nk_do_scrollbarv+0x23c>
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	e000      	b.n	8017c56 <nk_do_scrollbarv+0x23e>
 8017c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 8017c5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017c5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8017c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c66:	ed97 7a04 	vldr	s14, [r7, #16]
 8017c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c72:	d50a      	bpl.n	8017c8a <nk_do_scrollbarv+0x272>
 8017c74:	edd7 7a04 	vldr	s15, [r7, #16]
 8017c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c80:	bf4c      	ite	mi
 8017c82:	2301      	movmi	r3, #1
 8017c84:	2300      	movpl	r3, #0
 8017c86:	b2db      	uxtb	r3, r3
 8017c88:	e00d      	b.n	8017ca6 <nk_do_scrollbarv+0x28e>
 8017c8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017c8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8017c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c9e:	bf4c      	ite	mi
 8017ca0:	2301      	movmi	r3, #1
 8017ca2:	2300      	movpl	r3, #0
 8017ca4:	b2db      	uxtb	r3, r3
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d002      	beq.n	8017cb0 <nk_do_scrollbarv+0x298>
 8017caa:	eddf 7a28 	vldr	s15, [pc, #160]	; 8017d4c <nk_do_scrollbarv+0x334>
 8017cae:	e015      	b.n	8017cdc <nk_do_scrollbarv+0x2c4>
 8017cb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017cb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8017cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017cbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8017cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc8:	d502      	bpl.n	8017cd0 <nk_do_scrollbarv+0x2b8>
 8017cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8017cce:	e005      	b.n	8017cdc <nk_do_scrollbarv+0x2c4>
 8017cd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017cd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8017cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017cdc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.h / target;
 8017ce0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8017ce4:	ed97 7a03 	vldr	s14, [r7, #12]
 8017ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017cec:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 8017cf0:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017cf4:	ed97 7a03 	vldr	s14, [r7, #12]
 8017cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017cfc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate scrollbar cursor bounds */
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 8017d00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017d04:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8017d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017d12:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8017d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d30:	d50e      	bpl.n	8017d50 <nk_do_scrollbarv+0x338>
 8017d32:	eddf 7a06 	vldr	s15, [pc, #24]	; 8017d4c <nk_do_scrollbarv+0x334>
 8017d36:	e01f      	b.n	8017d78 <nk_do_scrollbarv+0x360>
 8017d38:	080216e4 	.word	0x080216e4
 8017d3c:	08023158 	.word	0x08023158
 8017d40:	080216e8 	.word	0x080216e8
 8017d44:	08021708 	.word	0x08021708
 8017d48:	08021710 	.word	0x08021710
 8017d4c:	00000000 	.word	0x00000000
 8017d50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017d54:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8017d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017d62:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8017d6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d78:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;
 8017d7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8017d80:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8017d84:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8017d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8017da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017da4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);
 8017da8:	ed97 7a08 	vldr	s14, [r7, #32]
 8017dac:	683b      	ldr	r3, [r7, #0]
 8017dae:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017db2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8017dbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017dc8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    cursor.x = scroll.x + style->border + style->padding.x;
 8017dcc:	ed97 7a06 	vldr	s14, [r7, #24]
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8017de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017de4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    /* calculate empty space around cursor */
    empty_north.x = scroll.x;
 8017de8:	69bb      	ldr	r3, [r7, #24]
 8017dea:	667b      	str	r3, [r7, #100]	; 0x64
    empty_north.y = scroll.y;
 8017dec:	69fb      	ldr	r3, [r7, #28]
 8017dee:	66bb      	str	r3, [r7, #104]	; 0x68
    empty_north.w = scroll.w;
 8017df0:	6a3b      	ldr	r3, [r7, #32]
 8017df2:	66fb      	str	r3, [r7, #108]	; 0x6c
    empty_north.h = NK_MAX(cursor.y - scroll.y, 0);
 8017df4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017df8:	edd7 7a07 	vldr	s15, [r7, #28]
 8017dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e08:	d502      	bpl.n	8017e10 <nk_do_scrollbarv+0x3f8>
 8017e0a:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8017d4c <nk_do_scrollbarv+0x334>
 8017e0e:	e005      	b.n	8017e1c <nk_do_scrollbarv+0x404>
 8017e10:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017e14:	edd7 7a07 	vldr	s15, [r7, #28]
 8017e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e1c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    empty_south.x = scroll.x;
 8017e20:	69bb      	ldr	r3, [r7, #24]
 8017e22:	657b      	str	r3, [r7, #84]	; 0x54
    empty_south.y = cursor.y + cursor.h;
 8017e24:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017e28:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8017e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e30:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    empty_south.w = scroll.w;
 8017e34:	6a3b      	ldr	r3, [r7, #32]
 8017e36:	65fb      	str	r3, [r7, #92]	; 0x5c
    empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);
 8017e38:	ed97 7a07 	vldr	s14, [r7, #28]
 8017e3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e44:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8017e48:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8017e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e5c:	d502      	bpl.n	8017e64 <nk_do_scrollbarv+0x44c>
 8017e5e:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 8017d4c <nk_do_scrollbarv+0x334>
 8017e62:	e00d      	b.n	8017e80 <nk_do_scrollbarv+0x468>
 8017e64:	ed97 7a07 	vldr	s14, [r7, #28]
 8017e68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e70:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8017e74:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8017e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e80:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8017e84:	f107 0218 	add.w	r2, r7, #24
 8017e88:	2300      	movs	r3, #0
 8017e8a:	9303      	str	r3, [sp, #12]
 8017e8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017e90:	9302      	str	r3, [sp, #8]
 8017e92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017e96:	9301      	str	r3, [sp, #4]
 8017e98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017e9c:	9300      	str	r3, [sp, #0]
 8017e9e:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 8017ea2:	edd7 0a03 	vldr	s1, [r7, #12]
 8017ea6:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8017eaa:	4613      	mov	r3, r2
 8017eac:	697a      	ldr	r2, [r7, #20]
 8017eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017eb4:	f7ff f90e 	bl	80170d4 <nk_scrollbar_behavior>
 8017eb8:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);
    scroll_off = scroll_offset / target;
 8017ebc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017ec0:	ed97 7a03 	vldr	s14, [r7, #12]
 8017ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017ec8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;
 8017ecc:	ed97 7a07 	vldr	s14, [r7, #28]
 8017ed0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8017ed4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8017ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8017ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017eea:	683b      	ldr	r3, [r7, #0]
 8017eec:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8017ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ef4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8017ef8:	683b      	ldr	r3, [r7, #0]
 8017efa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d007      	beq.n	8017f12 <nk_do_scrollbarv+0x4fa>
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8017f08:	683a      	ldr	r2, [r7, #0]
 8017f0a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8017f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f10:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 8017f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f14:	6819      	ldr	r1, [r3, #0]
 8017f16:	f107 0218 	add.w	r2, r7, #24
 8017f1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	4613      	mov	r3, r2
 8017f22:	683a      	ldr	r2, [r7, #0]
 8017f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f26:	f7ff fc5b 	bl	80177e0 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d007      	beq.n	8017f44 <nk_do_scrollbarv+0x52c>
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8017f3a:	683a      	ldr	r2, [r7, #0]
 8017f3c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8017f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f42:	4798      	blx	r3
    return scroll_offset;
 8017f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8017f46:	ee07 3a90 	vmov	s15, r3
 8017f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8017f4e:	3788      	adds	r7, #136	; 0x88
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <nk_do_scrollbarh>:
nk_do_scrollbarh(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b0a6      	sub	sp, #152	; 0x98
 8017f58:	af04      	add	r7, sp, #16
 8017f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017f5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8017f5e:	eeb0 6a40 	vmov.f32	s12, s0
 8017f62:	eef0 6a60 	vmov.f32	s13, s1
 8017f66:	eeb0 7a41 	vmov.f32	s14, s2
 8017f6a:	eef0 7a61 	vmov.f32	s15, s3
 8017f6e:	617a      	str	r2, [r7, #20]
 8017f70:	ed87 2a04 	vstr	s4, [r7, #16]
 8017f74:	edc7 2a03 	vstr	s5, [r7, #12]
 8017f78:	ed87 3a02 	vstr	s6, [r7, #8]
 8017f7c:	edc7 3a01 	vstr	s7, [r7, #4]
 8017f80:	603b      	str	r3, [r7, #0]
 8017f82:	ed87 6a06 	vstr	s12, [r7, #24]
 8017f86:	edc7 6a07 	vstr	s13, [r7, #28]
 8017f8a:	ed87 7a08 	vstr	s14, [r7, #32]
 8017f8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 8017f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d105      	bne.n	8017fa4 <nk_do_scrollbarh+0x50>
 8017f98:	4b94      	ldr	r3, [pc, #592]	; (80181ec <nk_do_scrollbarh+0x298>)
 8017f9a:	4a95      	ldr	r2, [pc, #596]	; (80181f0 <nk_do_scrollbarh+0x29c>)
 8017f9c:	21ee      	movs	r1, #238	; 0xee
 8017f9e:	4895      	ldr	r0, [pc, #596]	; (80181f4 <nk_do_scrollbarh+0x2a0>)
 8017fa0:	f005 faf6 	bl	801d590 <__assert_func>
    NK_ASSERT(style);
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d105      	bne.n	8017fb6 <nk_do_scrollbarh+0x62>
 8017faa:	4b93      	ldr	r3, [pc, #588]	; (80181f8 <nk_do_scrollbarh+0x2a4>)
 8017fac:	4a90      	ldr	r2, [pc, #576]	; (80181f0 <nk_do_scrollbarh+0x29c>)
 8017fae:	21ef      	movs	r1, #239	; 0xef
 8017fb0:	4890      	ldr	r0, [pc, #576]	; (80181f4 <nk_do_scrollbarh+0x2a0>)
 8017fb2:	f005 faed 	bl	801d590 <__assert_func>
    if (!out || !style) return 0;
 8017fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d002      	beq.n	8017fc2 <nk_do_scrollbarh+0x6e>
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d102      	bne.n	8017fc8 <nk_do_scrollbarh+0x74>
 8017fc2:	f04f 0300 	mov.w	r3, #0
 8017fc6:	e200      	b.n	80183ca <nk_do_scrollbarh+0x476>

    /* scrollbar background */
    scroll.h = NK_MAX(scroll.h, 1);
 8017fc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fd8:	d502      	bpl.n	8017fe0 <nk_do_scrollbarh+0x8c>
 8017fda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017fde:	e000      	b.n	8017fe2 <nk_do_scrollbarh+0x8e>
 8017fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe2:	627b      	str	r3, [r7, #36]	; 0x24
    scroll.w = NK_MAX(scroll.w, 2 * scroll.h);
 8017fe4:	ed97 7a08 	vldr	s14, [r7, #32]
 8017fe8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017fec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ff8:	d504      	bpl.n	8018004 <nk_do_scrollbarh+0xb0>
 8017ffa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018002:	e001      	b.n	8018008 <nk_do_scrollbarh+0xb4>
 8018004:	edd7 7a08 	vldr	s15, [r7, #32]
 8018008:	edc7 7a08 	vstr	s15, [r7, #32]
    if (target <= scroll.w) return 0;
 801800c:	edd7 7a08 	vldr	s15, [r7, #32]
 8018010:	ed97 7a03 	vldr	s14, [r7, #12]
 8018014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801801c:	d802      	bhi.n	8018024 <nk_do_scrollbarh+0xd0>
 801801e:	f04f 0300 	mov.w	r3, #0
 8018022:	e1d2      	b.n	80183ca <nk_do_scrollbarh+0x476>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 8018024:	683b      	ldr	r3, [r7, #0]
 8018026:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801802a:	2b00      	cmp	r3, #0
 801802c:	f000 8094 	beq.w	8018158 <nk_do_scrollbarh+0x204>
        nk_flags ws;
        float scroll_w;
        struct nk_rect button;
        button.y = scroll.y;
 8018030:	69fb      	ldr	r3, [r7, #28]
 8018032:	637b      	str	r3, [r7, #52]	; 0x34
        button.w = scroll.h;
 8018034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018036:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.h;
 8018038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803a:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_w = scroll.w - 2 * button.w;
 801803c:	ed97 7a08 	vldr	s14, [r7, #32]
 8018040:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018044:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018048:	ee77 7a67 	vsub.f32	s15, s14, s15
 801804c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 8018050:	ed97 7a02 	vldr	s14, [r7, #8]
 8018054:	edd7 7a01 	vldr	s15, [r7, #4]
 8018058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018060:	d501      	bpl.n	8018066 <nk_do_scrollbarh+0x112>
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	e000      	b.n	8018068 <nk_do_scrollbarh+0x114>
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.x = scroll.x;
 801806c:	69bb      	ldr	r3, [r7, #24]
 801806e:	633b      	str	r3, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801807c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8018080:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8018084:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8018088:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801808c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8018090:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018094:	9202      	str	r2, [sp, #8]
 8018096:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801809a:	9201      	str	r2, [sp, #4]
 801809c:	9300      	str	r3, [sp, #0]
 801809e:	2301      	movs	r3, #1
 80180a0:	460a      	mov	r2, r1
 80180a2:	eeb0 0a46 	vmov.f32	s0, s12
 80180a6:	eef0 0a66 	vmov.f32	s1, s13
 80180aa:	eeb0 1a47 	vmov.f32	s2, s14
 80180ae:	eef0 1a67 	vmov.f32	s3, s15
 80180b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80180b4:	f7f6 fffa 	bl	800f0ac <nk_do_button_symbol>
 80180b8:	4603      	mov	r3, r0
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d007      	beq.n	80180ce <nk_do_scrollbarh+0x17a>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 80180be:	ed97 7a04 	vldr	s14, [r7, #16]
 80180c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80180c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80180ca:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = scroll.x + scroll.w - button.w;
 80180ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80180d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80180d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80180da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80180de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80180e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 80180e6:	683b      	ldr	r3, [r7, #0]
 80180e8:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	33cc      	adds	r3, #204	; 0xcc
 80180f0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80180f4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80180f8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80180fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018100:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8018104:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018108:	9202      	str	r2, [sp, #8]
 801810a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801810e:	9201      	str	r2, [sp, #4]
 8018110:	9300      	str	r3, [sp, #0]
 8018112:	2301      	movs	r3, #1
 8018114:	460a      	mov	r2, r1
 8018116:	eeb0 0a46 	vmov.f32	s0, s12
 801811a:	eef0 0a66 	vmov.f32	s1, s13
 801811e:	eeb0 1a47 	vmov.f32	s2, s14
 8018122:	eef0 1a67 	vmov.f32	s3, s15
 8018126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018128:	f7f6 ffc0 	bl	800f0ac <nk_do_button_symbol>
 801812c:	4603      	mov	r3, r0
 801812e:	2b00      	cmp	r3, #0
 8018130:	d007      	beq.n	8018142 <nk_do_scrollbarh+0x1ee>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 8018132:	ed97 7a04 	vldr	s14, [r7, #16]
 8018136:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801813a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801813e:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.x = scroll.x + button.w;
 8018142:	ed97 7a06 	vldr	s14, [r7, #24]
 8018146:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801814a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801814e:	edc7 7a06 	vstr	s15, [r7, #24]
        scroll.w = scroll_w;
 8018152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018156:	623b      	str	r3, [r7, #32]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.w);
 8018158:	edd7 7a08 	vldr	s15, [r7, #32]
 801815c:	ed97 7a02 	vldr	s14, [r7, #8]
 8018160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018168:	d501      	bpl.n	801816e <nk_do_scrollbarh+0x21a>
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	e000      	b.n	8018170 <nk_do_scrollbarh+0x21c>
 801816e:	6a3b      	ldr	r3, [r7, #32]
 8018170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 8018174:	edd7 7a08 	vldr	s15, [r7, #32]
 8018178:	ed97 7a03 	vldr	s14, [r7, #12]
 801817c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018180:	ed97 7a04 	vldr	s14, [r7, #16]
 8018184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801818c:	d50a      	bpl.n	80181a4 <nk_do_scrollbarh+0x250>
 801818e:	edd7 7a04 	vldr	s15, [r7, #16]
 8018192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801819a:	bf4c      	ite	mi
 801819c:	2301      	movmi	r3, #1
 801819e:	2300      	movpl	r3, #0
 80181a0:	b2db      	uxtb	r3, r3
 80181a2:	e00d      	b.n	80181c0 <nk_do_scrollbarh+0x26c>
 80181a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80181a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80181ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80181b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80181b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b8:	bf4c      	ite	mi
 80181ba:	2301      	movmi	r3, #1
 80181bc:	2300      	movpl	r3, #0
 80181be:	b2db      	uxtb	r3, r3
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <nk_do_scrollbarh+0x276>
 80181c4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80181fc <nk_do_scrollbarh+0x2a8>
 80181c8:	e020      	b.n	801820c <nk_do_scrollbarh+0x2b8>
 80181ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80181ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80181d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80181d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80181da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181e2:	d50d      	bpl.n	8018200 <nk_do_scrollbarh+0x2ac>
 80181e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80181e8:	e010      	b.n	801820c <nk_do_scrollbarh+0x2b8>
 80181ea:	bf00      	nop
 80181ec:	080216e4 	.word	0x080216e4
 80181f0:	0802316c 	.word	0x0802316c
 80181f4:	080216e8 	.word	0x080216e8
 80181f8:	08021708 	.word	0x08021708
 80181fc:	00000000 	.word	0x00000000
 8018200:	edd7 7a08 	vldr	s15, [r7, #32]
 8018204:	ed97 7a03 	vldr	s14, [r7, #12]
 8018208:	ee77 7a67 	vsub.f32	s15, s14, s15
 801820c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.w / target;
 8018210:	edd7 6a08 	vldr	s13, [r7, #32]
 8018214:	ed97 7a03 	vldr	s14, [r7, #12]
 8018218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801821c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 8018220:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8018224:	ed97 7a03 	vldr	s14, [r7, #12]
 8018228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801822c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate cursor bounds */
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 8018230:	ed97 7a08 	vldr	s14, [r7, #32]
 8018234:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8018238:	ee27 7a27 	vmul.f32	s14, s14, s15
 801823c:	683b      	ldr	r3, [r7, #0]
 801823e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018242:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801824c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018258:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 801825c:	ed97 7a06 	vldr	s14, [r7, #24]
 8018260:	edd7 6a08 	vldr	s13, [r7, #32]
 8018264:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8018268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801826c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018276:	ee37 7a27 	vadd.f32	s14, s14, s15
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8018280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018284:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);
 8018288:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8018292:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801829c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80182a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80182a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80182a8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    cursor.y = scroll.y + style->border + style->padding.y;
 80182ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80182b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80182c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80182c4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate empty space around cursor */
    empty_west.x = scroll.x;
 80182c8:	69bb      	ldr	r3, [r7, #24]
 80182ca:	657b      	str	r3, [r7, #84]	; 0x54
    empty_west.y = scroll.y;
 80182cc:	69fb      	ldr	r3, [r7, #28]
 80182ce:	65bb      	str	r3, [r7, #88]	; 0x58
    empty_west.w = cursor.x - scroll.x;
 80182d0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80182d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80182d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80182dc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    empty_west.h = scroll.h;
 80182e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e2:	663b      	str	r3, [r7, #96]	; 0x60

    empty_east.x = cursor.x + cursor.w;
 80182e4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80182e8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80182ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80182f0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    empty_east.y = scroll.y;
 80182f4:	69fb      	ldr	r3, [r7, #28]
 80182f6:	64bb      	str	r3, [r7, #72]	; 0x48
    empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);
 80182f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80182fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8018300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018304:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8018308:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801830c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018314:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    empty_east.h = scroll.h;
 8018318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831a:	653b      	str	r3, [r7, #80]	; 0x50

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 801831c:	f107 0218 	add.w	r2, r7, #24
 8018320:	2301      	movs	r3, #1
 8018322:	9303      	str	r3, [sp, #12]
 8018324:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018328:	9302      	str	r3, [sp, #8]
 801832a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801832e:	9301      	str	r3, [sp, #4]
 8018330:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018334:	9300      	str	r3, [sp, #0]
 8018336:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 801833a:	edd7 0a03 	vldr	s1, [r7, #12]
 801833e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8018342:	4613      	mov	r3, r2
 8018344:	697a      	ldr	r2, [r7, #20]
 8018346:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801834a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801834c:	f7fe fec2 	bl	80170d4 <nk_scrollbar_behavior>
 8018350:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);
    scroll_off = scroll_offset / target;
 8018354:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8018358:	ed97 7a03 	vldr	s14, [r7, #12]
 801835c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018360:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.x = scroll.x + (scroll_off * scroll.w);
 8018364:	ed97 7a06 	vldr	s14, [r7, #24]
 8018368:	edd7 6a08 	vldr	s13, [r7, #32]
 801836c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8018370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018378:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8018382:	2b00      	cmp	r3, #0
 8018384:	d007      	beq.n	8018396 <nk_do_scrollbarh+0x442>
 8018386:	683b      	ldr	r3, [r7, #0]
 8018388:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801838c:	683a      	ldr	r2, [r7, #0]
 801838e:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8018392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018394:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 8018396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018398:	6819      	ldr	r1, [r3, #0]
 801839a:	f107 0218 	add.w	r2, r7, #24
 801839e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80183a2:	9300      	str	r3, [sp, #0]
 80183a4:	4613      	mov	r3, r2
 80183a6:	683a      	ldr	r2, [r7, #0]
 80183a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80183aa:	f7ff fa19 	bl	80177e0 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d007      	beq.n	80183c8 <nk_do_scrollbarh+0x474>
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80183be:	683a      	ldr	r2, [r7, #0]
 80183c0:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80183c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80183c6:	4798      	blx	r3
    return scroll_offset;
 80183c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80183ca:	ee07 3a90 	vmov	s15, r3
 80183ce:	eeb0 0a67 	vmov.f32	s0, s15
 80183d2:	3788      	adds	r7, #136	; 0x88
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}

080183d8 <nk_style_default>:
/* ===============================================================
 *
 *                              STYLE
 *
 * ===============================================================*/
NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
 80183e0:	2100      	movs	r1, #0
 80183e2:	6878      	ldr	r0, [r7, #4]
 80183e4:	f000 f838 	bl	8018458 <nk_style_from_table>
 80183e8:	bf00      	nop
 80183ea:	3708      	adds	r7, #8
 80183ec:	46bd      	mov	sp, r7
 80183ee:	bd80      	pop	{r7, pc}

080183f0 <nk_style_item_color>:
{
    return nk_color_names[c];
}
NK_API struct nk_style_item
nk_style_item_color(struct nk_color col)
{
 80183f0:	b4b0      	push	{r4, r5, r7}
 80183f2:	b08b      	sub	sp, #44	; 0x2c
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
 80183f8:	6039      	str	r1, [r7, #0]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 80183fa:	2300      	movs	r3, #0
 80183fc:	733b      	strb	r3, [r7, #12]
    i.data.color = col;
 80183fe:	683b      	ldr	r3, [r7, #0]
 8018400:	613b      	str	r3, [r7, #16]
    return i;
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	461d      	mov	r5, r3
 8018406:	f107 040c 	add.w	r4, r7, #12
 801840a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801840c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801840e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018412:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8018416:	6878      	ldr	r0, [r7, #4]
 8018418:	372c      	adds	r7, #44	; 0x2c
 801841a:	46bd      	mov	sp, r7
 801841c:	bcb0      	pop	{r4, r5, r7}
 801841e:	4770      	bx	lr

08018420 <nk_style_item_hide>:
    i.data.slice = slice;
    return i;
}
NK_API struct nk_style_item
nk_style_item_hide(void)
{
 8018420:	b5b0      	push	{r4, r5, r7, lr}
 8018422:	b08a      	sub	sp, #40	; 0x28
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 8018428:	2300      	movs	r3, #0
 801842a:	733b      	strb	r3, [r7, #12]
    i.data.color = nk_rgba(0,0,0,0);
 801842c:	2300      	movs	r3, #0
 801842e:	2200      	movs	r2, #0
 8018430:	2100      	movs	r1, #0
 8018432:	2000      	movs	r0, #0
 8018434:	f7f7 f8c0 	bl	800f5b8 <nk_rgba>
 8018438:	4603      	mov	r3, r0
 801843a:	613b      	str	r3, [r7, #16]
    return i;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	461d      	mov	r5, r3
 8018440:	f107 040c 	add.w	r4, r7, #12
 8018444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018448:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801844c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8018450:	6878      	ldr	r0, [r7, #4]
 8018452:	3728      	adds	r7, #40	; 0x28
 8018454:	46bd      	mov	sp, r7
 8018456:	bdb0      	pop	{r4, r5, r7, pc}

08018458 <nk_style_from_table>:
NK_API void
nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)
{
 8018458:	b5b0      	push	{r4, r5, r7, lr}
 801845a:	b09e      	sub	sp, #120	; 0x78
 801845c:	af00      	add	r7, sp, #0
 801845e:	6278      	str	r0, [r7, #36]	; 0x24
 8018460:	6239      	str	r1, [r7, #32]
    struct nk_style_combo *combo;
    struct nk_style_chart *chart;
    struct nk_style_tab *tab;
    struct nk_style_window *win;

    NK_ASSERT(ctx);
 8018462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018464:	2b00      	cmp	r3, #0
 8018466:	d105      	bne.n	8018474 <nk_style_from_table+0x1c>
 8018468:	4b09      	ldr	r3, [pc, #36]	; (8018490 <nk_style_from_table+0x38>)
 801846a:	4a0a      	ldr	r2, [pc, #40]	; (8018494 <nk_style_from_table+0x3c>)
 801846c:	216b      	movs	r1, #107	; 0x6b
 801846e:	480a      	ldr	r0, [pc, #40]	; (8018498 <nk_style_from_table+0x40>)
 8018470:	f005 f88e 	bl	801d590 <__assert_func>
    if (!ctx) return;
 8018474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018476:	2b00      	cmp	r3, #0
 8018478:	f002 8079 	beq.w	801a56e <nk_style_from_table+0x2116>
    style = &ctx->style;
 801847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8018482:	677b      	str	r3, [r7, #116]	; 0x74
    table = (!table) ? nk_default_color_style: table;
 8018484:	6a3b      	ldr	r3, [r7, #32]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d008      	beq.n	801849c <nk_style_from_table+0x44>
 801848a:	6a3b      	ldr	r3, [r7, #32]
 801848c:	e007      	b.n	801849e <nk_style_from_table+0x46>
 801848e:	bf00      	nop
 8018490:	08021984 	.word	0x08021984
 8018494:	080231f0 	.word	0x080231f0
 8018498:	08021988 	.word	0x08021988
 801849c:	4bc6      	ldr	r3, [pc, #792]	; (80187b8 <nk_style_from_table+0x360>)
 801849e:	623b      	str	r3, [r7, #32]

    /* default text */
    text = &style->text;
 80184a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80184a2:	332c      	adds	r3, #44	; 0x2c
 80184a4:	673b      	str	r3, [r7, #112]	; 0x70
    text->color = table[NK_COLOR_TEXT];
 80184a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80184a8:	6a3a      	ldr	r2, [r7, #32]
 80184aa:	6810      	ldr	r0, [r2, #0]
 80184ac:	6018      	str	r0, [r3, #0]
    text->padding = nk_vec2(0,0);
 80184ae:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80184b0:	eddf 0ac2 	vldr	s1, [pc, #776]	; 80187bc <nk_style_from_table+0x364>
 80184b4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80187bc <nk_style_from_table+0x364>
 80184b8:	f7fb fd9a 	bl	8013ff0 <nk_vec2>
 80184bc:	eeb0 7a40 	vmov.f32	s14, s0
 80184c0:	eef0 7a60 	vmov.f32	s15, s1
 80184c4:	ed84 7a01 	vstr	s14, [r4, #4]
 80184c8:	edc4 7a02 	vstr	s15, [r4, #8]

    /* default button */
    button = &style->button;
 80184cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80184ce:	3338      	adds	r3, #56	; 0x38
 80184d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 80184d2:	2198      	movs	r1, #152	; 0x98
 80184d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80184d6:	f003 fb63 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);
 80184da:	6a3b      	ldr	r3, [r7, #32]
 80184dc:	3310      	adds	r3, #16
 80184de:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80184e0:	463a      	mov	r2, r7
 80184e2:	6819      	ldr	r1, [r3, #0]
 80184e4:	460b      	mov	r3, r1
 80184e6:	4619      	mov	r1, r3
 80184e8:	4610      	mov	r0, r2
 80184ea:	f7ff ff81 	bl	80183f0 <nk_style_item_color>
 80184ee:	4625      	mov	r5, r4
 80184f0:	463c      	mov	r4, r7
 80184f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80184f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80184fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 80184fe:	6a3b      	ldr	r3, [r7, #32]
 8018500:	3314      	adds	r3, #20
 8018502:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018504:	463a      	mov	r2, r7
 8018506:	6819      	ldr	r1, [r3, #0]
 8018508:	460b      	mov	r3, r1
 801850a:	4619      	mov	r1, r3
 801850c:	4610      	mov	r0, r2
 801850e:	f7ff ff6f 	bl	80183f0 <nk_style_item_color>
 8018512:	341c      	adds	r4, #28
 8018514:	463d      	mov	r5, r7
 8018516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801851a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801851e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 8018522:	6a3b      	ldr	r3, [r7, #32]
 8018524:	3318      	adds	r3, #24
 8018526:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018528:	463a      	mov	r2, r7
 801852a:	6819      	ldr	r1, [r3, #0]
 801852c:	460b      	mov	r3, r1
 801852e:	4619      	mov	r1, r3
 8018530:	4610      	mov	r0, r2
 8018532:	f7ff ff5d 	bl	80183f0 <nk_style_item_color>
 8018536:	3438      	adds	r4, #56	; 0x38
 8018538:	463d      	mov	r5, r7
 801853a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801853c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801853e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_BORDER];
 8018546:	6a3b      	ldr	r3, [r7, #32]
 8018548:	f103 020c 	add.w	r2, r3, #12
 801854c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801854e:	3354      	adds	r3, #84	; 0x54
 8018550:	6810      	ldr	r0, [r2, #0]
 8018552:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_BUTTON];
 8018554:	6a3b      	ldr	r3, [r7, #32]
 8018556:	f103 0210 	add.w	r2, r3, #16
 801855a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801855c:	3358      	adds	r3, #88	; 0x58
 801855e:	6810      	ldr	r0, [r2, #0]
 8018560:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8018562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018564:	6a3a      	ldr	r2, [r7, #32]
 8018566:	335c      	adds	r3, #92	; 0x5c
 8018568:	6810      	ldr	r0, [r2, #0]
 801856a:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801856e:	6a3a      	ldr	r2, [r7, #32]
 8018570:	3360      	adds	r3, #96	; 0x60
 8018572:	6810      	ldr	r0, [r2, #0]
 8018574:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8018576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018578:	6a3a      	ldr	r2, [r7, #32]
 801857a:	3364      	adds	r3, #100	; 0x64
 801857c:	6810      	ldr	r0, [r2, #0]
 801857e:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8018580:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018582:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018586:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801858a:	f7fb fd31 	bl	8013ff0 <nk_vec2>
 801858e:	eeb0 7a40 	vmov.f32	s14, s0
 8018592:	eef0 7a60 	vmov.f32	s15, s1
 8018596:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801859a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->image_padding   = nk_vec2(0.0f,0.0f);
 801859e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80185a0:	eddf 0a86 	vldr	s1, [pc, #536]	; 80187bc <nk_style_from_table+0x364>
 80185a4:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80187bc <nk_style_from_table+0x364>
 80185a8:	f7fb fd22 	bl	8013ff0 <nk_vec2>
 80185ac:	eeb0 7a40 	vmov.f32	s14, s0
 80185b0:	eef0 7a60 	vmov.f32	s15, s1
 80185b4:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 80185b8:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
    button->touch_padding   = nk_vec2(0.0f, 0.0f);
 80185bc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80185be:	eddf 0a7f 	vldr	s1, [pc, #508]	; 80187bc <nk_style_from_table+0x364>
 80185c2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80187bc <nk_style_from_table+0x364>
 80185c6:	f7fb fd13 	bl	8013ff0 <nk_vec2>
 80185ca:	eeb0 7a40 	vmov.f32	s14, s0
 80185ce:	eef0 7a60 	vmov.f32	s15, s1
 80185d2:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80185d6:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80185da:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80185dc:	2000      	movs	r0, #0
 80185de:	f7fa f8bb 	bl	8012758 <nk_handle_ptr>
 80185e2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80185e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185e8:	2212      	movs	r2, #18
 80185ea:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 80185ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80185f2:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 4.0f;
 80185f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185f6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80185fa:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80185fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185fe:	2200      	movs	r2, #0
 8018600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018606:	2200      	movs	r2, #0
 8018608:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* contextual button */
    button = &style->contextual_button;
 801860c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801860e:	33d0      	adds	r3, #208	; 0xd0
 8018610:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8018612:	2198      	movs	r1, #152	; 0x98
 8018614:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018616:	f003 fac3 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801861a:	6a3b      	ldr	r3, [r7, #32]
 801861c:	3304      	adds	r3, #4
 801861e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018620:	463a      	mov	r2, r7
 8018622:	6819      	ldr	r1, [r3, #0]
 8018624:	460b      	mov	r3, r1
 8018626:	4619      	mov	r1, r3
 8018628:	4610      	mov	r0, r2
 801862a:	f7ff fee1 	bl	80183f0 <nk_style_item_color>
 801862e:	4625      	mov	r5, r4
 8018630:	463c      	mov	r4, r7
 8018632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018636:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801863a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 801863e:	6a3b      	ldr	r3, [r7, #32]
 8018640:	3314      	adds	r3, #20
 8018642:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018644:	463a      	mov	r2, r7
 8018646:	6819      	ldr	r1, [r3, #0]
 8018648:	460b      	mov	r3, r1
 801864a:	4619      	mov	r1, r3
 801864c:	4610      	mov	r0, r2
 801864e:	f7ff fecf 	bl	80183f0 <nk_style_item_color>
 8018652:	341c      	adds	r4, #28
 8018654:	463d      	mov	r5, r7
 8018656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801865a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801865e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 8018662:	6a3b      	ldr	r3, [r7, #32]
 8018664:	3318      	adds	r3, #24
 8018666:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018668:	463a      	mov	r2, r7
 801866a:	6819      	ldr	r1, [r3, #0]
 801866c:	460b      	mov	r3, r1
 801866e:	4619      	mov	r1, r3
 8018670:	4610      	mov	r0, r2
 8018672:	f7ff febd 	bl	80183f0 <nk_style_item_color>
 8018676:	3438      	adds	r4, #56	; 0x38
 8018678:	463d      	mov	r5, r7
 801867a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801867c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801867e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 8018686:	6a3b      	ldr	r3, [r7, #32]
 8018688:	1d1a      	adds	r2, r3, #4
 801868a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801868c:	3354      	adds	r3, #84	; 0x54
 801868e:	6810      	ldr	r0, [r2, #0]
 8018690:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 8018692:	6a3b      	ldr	r3, [r7, #32]
 8018694:	1d1a      	adds	r2, r3, #4
 8018696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018698:	3358      	adds	r3, #88	; 0x58
 801869a:	6810      	ldr	r0, [r2, #0]
 801869c:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80186a0:	6a3a      	ldr	r2, [r7, #32]
 80186a2:	335c      	adds	r3, #92	; 0x5c
 80186a4:	6810      	ldr	r0, [r2, #0]
 80186a6:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 80186a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80186aa:	6a3a      	ldr	r2, [r7, #32]
 80186ac:	3360      	adds	r3, #96	; 0x60
 80186ae:	6810      	ldr	r0, [r2, #0]
 80186b0:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 80186b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80186b4:	6a3a      	ldr	r2, [r7, #32]
 80186b6:	3364      	adds	r3, #100	; 0x64
 80186b8:	6810      	ldr	r0, [r2, #0]
 80186ba:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 80186bc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80186c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80186c6:	f7fb fc93 	bl	8013ff0 <nk_vec2>
 80186ca:	eeb0 7a40 	vmov.f32	s14, s0
 80186ce:	eef0 7a60 	vmov.f32	s15, s1
 80186d2:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80186d6:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80186da:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186dc:	eddf 0a37 	vldr	s1, [pc, #220]	; 80187bc <nk_style_from_table+0x364>
 80186e0:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80187bc <nk_style_from_table+0x364>
 80186e4:	f7fb fc84 	bl	8013ff0 <nk_vec2>
 80186e8:	eeb0 7a40 	vmov.f32	s14, s0
 80186ec:	eef0 7a60 	vmov.f32	s15, s1
 80186f0:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80186f4:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80186f8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186fa:	2000      	movs	r0, #0
 80186fc:	f7fa f82c 	bl	8012758 <nk_handle_ptr>
 8018700:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8018704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018706:	2212      	movs	r2, #18
 8018708:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801870a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801870c:	f04f 0200 	mov.w	r2, #0
 8018710:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8018712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018714:	f04f 0200 	mov.w	r2, #0
 8018718:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801871a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801871c:	2200      	movs	r2, #0
 801871e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018724:	2200      	movs	r2, #0
 8018726:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* menu button */
    button = &style->menu_button;
 801872a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801872c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8018730:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8018732:	2198      	movs	r1, #152	; 0x98
 8018734:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018736:	f003 fa33 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801873a:	6a3b      	ldr	r3, [r7, #32]
 801873c:	3304      	adds	r3, #4
 801873e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018740:	463a      	mov	r2, r7
 8018742:	6819      	ldr	r1, [r3, #0]
 8018744:	460b      	mov	r3, r1
 8018746:	4619      	mov	r1, r3
 8018748:	4610      	mov	r0, r2
 801874a:	f7ff fe51 	bl	80183f0 <nk_style_item_color>
 801874e:	4625      	mov	r5, r4
 8018750:	463c      	mov	r4, r7
 8018752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018756:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801875a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801875e:	6a3b      	ldr	r3, [r7, #32]
 8018760:	3304      	adds	r3, #4
 8018762:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018764:	463a      	mov	r2, r7
 8018766:	6819      	ldr	r1, [r3, #0]
 8018768:	460b      	mov	r3, r1
 801876a:	4619      	mov	r1, r3
 801876c:	4610      	mov	r0, r2
 801876e:	f7ff fe3f 	bl	80183f0 <nk_style_item_color>
 8018772:	341c      	adds	r4, #28
 8018774:	463d      	mov	r5, r7
 8018776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801877a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801877e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8018782:	6a3b      	ldr	r3, [r7, #32]
 8018784:	3304      	adds	r3, #4
 8018786:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018788:	463a      	mov	r2, r7
 801878a:	6819      	ldr	r1, [r3, #0]
 801878c:	460b      	mov	r3, r1
 801878e:	4619      	mov	r1, r3
 8018790:	4610      	mov	r0, r2
 8018792:	f7ff fe2d 	bl	80183f0 <nk_style_item_color>
 8018796:	3438      	adds	r4, #56	; 0x38
 8018798:	463d      	mov	r5, r7
 801879a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801879c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801879e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80187a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 80187a6:	6a3b      	ldr	r3, [r7, #32]
 80187a8:	1d1a      	adds	r2, r3, #4
 80187aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187ac:	3354      	adds	r3, #84	; 0x54
 80187ae:	6810      	ldr	r0, [r2, #0]
 80187b0:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 80187b2:	6a3b      	ldr	r3, [r7, #32]
 80187b4:	1d1a      	adds	r2, r3, #4
 80187b6:	e003      	b.n	80187c0 <nk_style_from_table+0x368>
 80187b8:	08023180 	.word	0x08023180
 80187bc:	00000000 	.word	0x00000000
 80187c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187c2:	3358      	adds	r3, #88	; 0x58
 80187c4:	6810      	ldr	r0, [r2, #0]
 80187c6:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 80187c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187ca:	6a3a      	ldr	r2, [r7, #32]
 80187cc:	335c      	adds	r3, #92	; 0x5c
 80187ce:	6810      	ldr	r0, [r2, #0]
 80187d0:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 80187d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187d4:	6a3a      	ldr	r2, [r7, #32]
 80187d6:	3360      	adds	r3, #96	; 0x60
 80187d8:	6810      	ldr	r0, [r2, #0]
 80187da:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 80187dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187de:	6a3a      	ldr	r2, [r7, #32]
 80187e0:	3364      	adds	r3, #100	; 0x64
 80187e2:	6810      	ldr	r0, [r2, #0]
 80187e4:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 80187e6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80187e8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80187ec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80187f0:	f7fb fbfe 	bl	8013ff0 <nk_vec2>
 80187f4:	eeb0 7a40 	vmov.f32	s14, s0
 80187f8:	eef0 7a60 	vmov.f32	s15, s1
 80187fc:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8018800:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8018804:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018806:	ed5f 0a13 	vldr	s1, [pc, #-76]	; 80187bc <nk_style_from_table+0x364>
 801880a:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 80187bc <nk_style_from_table+0x364>
 801880e:	f7fb fbef 	bl	8013ff0 <nk_vec2>
 8018812:	eeb0 7a40 	vmov.f32	s14, s0
 8018816:	eef0 7a60 	vmov.f32	s15, s1
 801881a:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801881e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8018822:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018824:	2000      	movs	r0, #0
 8018826:	f7f9 ff97 	bl	8012758 <nk_handle_ptr>
 801882a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801882e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018830:	2212      	movs	r2, #18
 8018832:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8018834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018836:	f04f 0200 	mov.w	r2, #0
 801883a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 1.0f;
 801883c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801883e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018842:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8018844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018846:	2200      	movs	r2, #0
 8018848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801884c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801884e:	2200      	movs	r2, #0
 8018850:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* checkbox toggle */
    toggle = &style->checkbox;
 8018854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018856:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801885a:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 801885c:	21c8      	movs	r1, #200	; 0xc8
 801885e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8018860:	f003 f99e 	bl	801bba0 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8018864:	6a3b      	ldr	r3, [r7, #32]
 8018866:	331c      	adds	r3, #28
 8018868:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801886a:	463a      	mov	r2, r7
 801886c:	6819      	ldr	r1, [r3, #0]
 801886e:	460b      	mov	r3, r1
 8018870:	4619      	mov	r1, r3
 8018872:	4610      	mov	r0, r2
 8018874:	f7ff fdbc 	bl	80183f0 <nk_style_item_color>
 8018878:	4625      	mov	r5, r4
 801887a:	463c      	mov	r4, r7
 801887c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801887e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018880:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018884:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8018888:	6a3b      	ldr	r3, [r7, #32]
 801888a:	3320      	adds	r3, #32
 801888c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801888e:	463a      	mov	r2, r7
 8018890:	6819      	ldr	r1, [r3, #0]
 8018892:	460b      	mov	r3, r1
 8018894:	4619      	mov	r1, r3
 8018896:	4610      	mov	r0, r2
 8018898:	f7ff fdaa 	bl	80183f0 <nk_style_item_color>
 801889c:	341c      	adds	r4, #28
 801889e:	463d      	mov	r5, r7
 80188a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80188a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 80188ac:	6a3b      	ldr	r3, [r7, #32]
 80188ae:	3320      	adds	r3, #32
 80188b0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80188b2:	463a      	mov	r2, r7
 80188b4:	6819      	ldr	r1, [r3, #0]
 80188b6:	460b      	mov	r3, r1
 80188b8:	4619      	mov	r1, r3
 80188ba:	4610      	mov	r0, r2
 80188bc:	f7ff fd98 	bl	80183f0 <nk_style_item_color>
 80188c0:	3438      	adds	r4, #56	; 0x38
 80188c2:	463d      	mov	r5, r7
 80188c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80188cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 80188d0:	6a3b      	ldr	r3, [r7, #32]
 80188d2:	3324      	adds	r3, #36	; 0x24
 80188d4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80188d6:	463a      	mov	r2, r7
 80188d8:	6819      	ldr	r1, [r3, #0]
 80188da:	460b      	mov	r3, r1
 80188dc:	4619      	mov	r1, r3
 80188de:	4610      	mov	r0, r2
 80188e0:	f7ff fd86 	bl	80183f0 <nk_style_item_color>
 80188e4:	3458      	adds	r4, #88	; 0x58
 80188e6:	463d      	mov	r5, r7
 80188e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80188f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 80188f4:	6a3b      	ldr	r3, [r7, #32]
 80188f6:	3324      	adds	r3, #36	; 0x24
 80188f8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80188fa:	463a      	mov	r2, r7
 80188fc:	6819      	ldr	r1, [r3, #0]
 80188fe:	460b      	mov	r3, r1
 8018900:	4619      	mov	r1, r3
 8018902:	4610      	mov	r0, r2
 8018904:	f7ff fd74 	bl	80183f0 <nk_style_item_color>
 8018908:	3474      	adds	r4, #116	; 0x74
 801890a:	463d      	mov	r5, r7
 801890c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801890e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 8018918:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801891a:	2000      	movs	r0, #0
 801891c:	f7f9 ff1c 	bl	8012758 <nk_handle_ptr>
 8018920:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 8018924:	6a3b      	ldr	r3, [r7, #32]
 8018926:	1d1a      	adds	r2, r3, #4
 8018928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801892a:	339c      	adds	r3, #156	; 0x9c
 801892c:	6810      	ldr	r0, [r2, #0]
 801892e:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 8018930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018932:	6a3a      	ldr	r2, [r7, #32]
 8018934:	3390      	adds	r3, #144	; 0x90
 8018936:	6810      	ldr	r0, [r2, #0]
 8018938:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 801893a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801893c:	6a3a      	ldr	r2, [r7, #32]
 801893e:	3394      	adds	r3, #148	; 0x94
 8018940:	6810      	ldr	r0, [r2, #0]
 8018942:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 8018944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018946:	6a3a      	ldr	r2, [r7, #32]
 8018948:	3398      	adds	r3, #152	; 0x98
 801894a:	6810      	ldr	r0, [r2, #0]
 801894c:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(2.0f, 2.0f);
 801894e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018950:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018954:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018958:	f7fb fb4a 	bl	8013ff0 <nk_vec2>
 801895c:	eeb0 7a40 	vmov.f32	s14, s0
 8018960:	eef0 7a60 	vmov.f32	s15, s1
 8018964:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8018968:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 801896c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801896e:	ed5f 0a6d 	vldr	s1, [pc, #-436]	; 80187bc <nk_style_from_table+0x364>
 8018972:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 80187bc <nk_style_from_table+0x364>
 8018976:	f7fb fb3b 	bl	8013ff0 <nk_vec2>
 801897a:	eeb0 7a40 	vmov.f32	s14, s0
 801897e:	eef0 7a60 	vmov.f32	s15, s1
 8018982:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 8018986:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 801898a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801898c:	2300      	movs	r3, #0
 801898e:	2200      	movs	r2, #0
 8018990:	2100      	movs	r1, #0
 8018992:	2000      	movs	r0, #0
 8018994:	f7f6 fe10 	bl	800f5b8 <nk_rgba>
 8018998:	4603      	mov	r3, r0
 801899a:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 801899c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801899e:	f04f 0200 	mov.w	r2, #0
 80189a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 80189a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80189a8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80189ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* option toggle */
    toggle = &style->option;
 80189b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80189b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80189b6:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 80189b8:	21c8      	movs	r1, #200	; 0xc8
 80189ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80189bc:	f003 f8f0 	bl	801bba0 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 80189c0:	6a3b      	ldr	r3, [r7, #32]
 80189c2:	331c      	adds	r3, #28
 80189c4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80189c6:	463a      	mov	r2, r7
 80189c8:	6819      	ldr	r1, [r3, #0]
 80189ca:	460b      	mov	r3, r1
 80189cc:	4619      	mov	r1, r3
 80189ce:	4610      	mov	r0, r2
 80189d0:	f7ff fd0e 	bl	80183f0 <nk_style_item_color>
 80189d4:	4625      	mov	r5, r4
 80189d6:	463c      	mov	r4, r7
 80189d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80189dc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80189e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 80189e4:	6a3b      	ldr	r3, [r7, #32]
 80189e6:	3320      	adds	r3, #32
 80189e8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80189ea:	463a      	mov	r2, r7
 80189ec:	6819      	ldr	r1, [r3, #0]
 80189ee:	460b      	mov	r3, r1
 80189f0:	4619      	mov	r1, r3
 80189f2:	4610      	mov	r0, r2
 80189f4:	f7ff fcfc 	bl	80183f0 <nk_style_item_color>
 80189f8:	341c      	adds	r4, #28
 80189fa:	463d      	mov	r5, r7
 80189fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8018a08:	6a3b      	ldr	r3, [r7, #32]
 8018a0a:	3320      	adds	r3, #32
 8018a0c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018a0e:	463a      	mov	r2, r7
 8018a10:	6819      	ldr	r1, [r3, #0]
 8018a12:	460b      	mov	r3, r1
 8018a14:	4619      	mov	r1, r3
 8018a16:	4610      	mov	r0, r2
 8018a18:	f7ff fcea 	bl	80183f0 <nk_style_item_color>
 8018a1c:	3438      	adds	r4, #56	; 0x38
 8018a1e:	463d      	mov	r5, r7
 8018a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018a28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8018a2c:	6a3b      	ldr	r3, [r7, #32]
 8018a2e:	3324      	adds	r3, #36	; 0x24
 8018a30:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018a32:	463a      	mov	r2, r7
 8018a34:	6819      	ldr	r1, [r3, #0]
 8018a36:	460b      	mov	r3, r1
 8018a38:	4619      	mov	r1, r3
 8018a3a:	4610      	mov	r0, r2
 8018a3c:	f7ff fcd8 	bl	80183f0 <nk_style_item_color>
 8018a40:	3458      	adds	r4, #88	; 0x58
 8018a42:	463d      	mov	r5, r7
 8018a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8018a50:	6a3b      	ldr	r3, [r7, #32]
 8018a52:	3324      	adds	r3, #36	; 0x24
 8018a54:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018a56:	463a      	mov	r2, r7
 8018a58:	6819      	ldr	r1, [r3, #0]
 8018a5a:	460b      	mov	r3, r1
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	4610      	mov	r0, r2
 8018a60:	f7ff fcc6 	bl	80183f0 <nk_style_item_color>
 8018a64:	3474      	adds	r4, #116	; 0x74
 8018a66:	463d      	mov	r5, r7
 8018a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 8018a74:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018a76:	2000      	movs	r0, #0
 8018a78:	f7f9 fe6e 	bl	8012758 <nk_handle_ptr>
 8018a7c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 8018a80:	6a3b      	ldr	r3, [r7, #32]
 8018a82:	1d1a      	adds	r2, r3, #4
 8018a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a86:	339c      	adds	r3, #156	; 0x9c
 8018a88:	6810      	ldr	r0, [r2, #0]
 8018a8a:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 8018a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a8e:	6a3a      	ldr	r2, [r7, #32]
 8018a90:	3390      	adds	r3, #144	; 0x90
 8018a92:	6810      	ldr	r0, [r2, #0]
 8018a94:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 8018a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a98:	6a3a      	ldr	r2, [r7, #32]
 8018a9a:	3394      	adds	r3, #148	; 0x94
 8018a9c:	6810      	ldr	r0, [r2, #0]
 8018a9e:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 8018aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018aa2:	6a3a      	ldr	r2, [r7, #32]
 8018aa4:	3398      	adds	r3, #152	; 0x98
 8018aa6:	6810      	ldr	r0, [r2, #0]
 8018aa8:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(3.0f, 3.0f);
 8018aaa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018aac:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8018ab0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8018ab4:	f7fb fa9c 	bl	8013ff0 <nk_vec2>
 8018ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8018abc:	eef0 7a60 	vmov.f32	s15, s1
 8018ac0:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8018ac4:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 8018ac8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018aca:	ed5f 0ac4 	vldr	s1, [pc, #-784]	; 80187bc <nk_style_from_table+0x364>
 8018ace:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 80187bc <nk_style_from_table+0x364>
 8018ad2:	f7fb fa8d 	bl	8013ff0 <nk_vec2>
 8018ad6:	eeb0 7a40 	vmov.f32	s14, s0
 8018ada:	eef0 7a60 	vmov.f32	s15, s1
 8018ade:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 8018ae2:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8018ae6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018ae8:	2300      	movs	r3, #0
 8018aea:	2200      	movs	r2, #0
 8018aec:	2100      	movs	r1, #0
 8018aee:	2000      	movs	r0, #0
 8018af0:	f7f6 fd62 	bl	800f5b8 <nk_rgba>
 8018af4:	4603      	mov	r3, r0
 8018af6:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 8018af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018afa:	f04f 0200 	mov.w	r2, #0
 8018afe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 8018b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b04:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8018b08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* selectable */
    select = &style->selectable;
 8018b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018b0e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8018b12:	667b      	str	r3, [r7, #100]	; 0x64
    nk_zero_struct(*select);
 8018b14:	21f0      	movs	r1, #240	; 0xf0
 8018b16:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8018b18:	f003 f842 	bl	801bba0 <nk_zero>
    select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);
 8018b1c:	6a3b      	ldr	r3, [r7, #32]
 8018b1e:	3328      	adds	r3, #40	; 0x28
 8018b20:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018b22:	463a      	mov	r2, r7
 8018b24:	6819      	ldr	r1, [r3, #0]
 8018b26:	460b      	mov	r3, r1
 8018b28:	4619      	mov	r1, r3
 8018b2a:	4610      	mov	r0, r2
 8018b2c:	f7ff fc60 	bl	80183f0 <nk_style_item_color>
 8018b30:	4625      	mov	r5, r4
 8018b32:	463c      	mov	r4, r7
 8018b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018b38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018b3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);
 8018b40:	6a3b      	ldr	r3, [r7, #32]
 8018b42:	3328      	adds	r3, #40	; 0x28
 8018b44:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018b46:	463a      	mov	r2, r7
 8018b48:	6819      	ldr	r1, [r3, #0]
 8018b4a:	460b      	mov	r3, r1
 8018b4c:	4619      	mov	r1, r3
 8018b4e:	4610      	mov	r0, r2
 8018b50:	f7ff fc4e 	bl	80183f0 <nk_style_item_color>
 8018b54:	341c      	adds	r4, #28
 8018b56:	463d      	mov	r5, r7
 8018b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);
 8018b64:	6a3b      	ldr	r3, [r7, #32]
 8018b66:	3328      	adds	r3, #40	; 0x28
 8018b68:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018b6a:	463a      	mov	r2, r7
 8018b6c:	6819      	ldr	r1, [r3, #0]
 8018b6e:	460b      	mov	r3, r1
 8018b70:	4619      	mov	r1, r3
 8018b72:	4610      	mov	r0, r2
 8018b74:	f7ff fc3c 	bl	80183f0 <nk_style_item_color>
 8018b78:	3438      	adds	r4, #56	; 0x38
 8018b7a:	463d      	mov	r5, r7
 8018b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018b84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8018b88:	6a3b      	ldr	r3, [r7, #32]
 8018b8a:	332c      	adds	r3, #44	; 0x2c
 8018b8c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018b8e:	463a      	mov	r2, r7
 8018b90:	6819      	ldr	r1, [r3, #0]
 8018b92:	460b      	mov	r3, r1
 8018b94:	4619      	mov	r1, r3
 8018b96:	4610      	mov	r0, r2
 8018b98:	f7ff fc2a 	bl	80183f0 <nk_style_item_color>
 8018b9c:	3454      	adds	r4, #84	; 0x54
 8018b9e:	463d      	mov	r5, r7
 8018ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8018bac:	6a3b      	ldr	r3, [r7, #32]
 8018bae:	332c      	adds	r3, #44	; 0x2c
 8018bb0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018bb2:	463a      	mov	r2, r7
 8018bb4:	6819      	ldr	r1, [r3, #0]
 8018bb6:	460b      	mov	r3, r1
 8018bb8:	4619      	mov	r1, r3
 8018bba:	4610      	mov	r0, r2
 8018bbc:	f7ff fc18 	bl	80183f0 <nk_style_item_color>
 8018bc0:	3470      	adds	r4, #112	; 0x70
 8018bc2:	463d      	mov	r5, r7
 8018bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018bcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8018bd0:	6a3b      	ldr	r3, [r7, #32]
 8018bd2:	332c      	adds	r3, #44	; 0x2c
 8018bd4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018bd6:	463a      	mov	r2, r7
 8018bd8:	6819      	ldr	r1, [r3, #0]
 8018bda:	460b      	mov	r3, r1
 8018bdc:	4619      	mov	r1, r3
 8018bde:	4610      	mov	r0, r2
 8018be0:	f7ff fc06 	bl	80183f0 <nk_style_item_color>
 8018be4:	348c      	adds	r4, #140	; 0x8c
 8018be6:	463d      	mov	r5, r7
 8018be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018bec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018bf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->text_normal     = table[NK_COLOR_TEXT];
 8018bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018bf6:	6a3a      	ldr	r2, [r7, #32]
 8018bf8:	33a8      	adds	r3, #168	; 0xa8
 8018bfa:	6810      	ldr	r0, [r2, #0]
 8018bfc:	6018      	str	r0, [r3, #0]
    select->text_hover      = table[NK_COLOR_TEXT];
 8018bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c00:	6a3a      	ldr	r2, [r7, #32]
 8018c02:	33ac      	adds	r3, #172	; 0xac
 8018c04:	6810      	ldr	r0, [r2, #0]
 8018c06:	6018      	str	r0, [r3, #0]
    select->text_pressed    = table[NK_COLOR_TEXT];
 8018c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c0a:	6a3a      	ldr	r2, [r7, #32]
 8018c0c:	33b0      	adds	r3, #176	; 0xb0
 8018c0e:	6810      	ldr	r0, [r2, #0]
 8018c10:	6018      	str	r0, [r3, #0]
    select->text_normal_active  = table[NK_COLOR_TEXT];
 8018c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c14:	6a3a      	ldr	r2, [r7, #32]
 8018c16:	33b4      	adds	r3, #180	; 0xb4
 8018c18:	6810      	ldr	r0, [r2, #0]
 8018c1a:	6018      	str	r0, [r3, #0]
    select->text_hover_active   = table[NK_COLOR_TEXT];
 8018c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c1e:	6a3a      	ldr	r2, [r7, #32]
 8018c20:	33b8      	adds	r3, #184	; 0xb8
 8018c22:	6810      	ldr	r0, [r2, #0]
 8018c24:	6018      	str	r0, [r3, #0]
    select->text_pressed_active = table[NK_COLOR_TEXT];
 8018c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c28:	6a3a      	ldr	r2, [r7, #32]
 8018c2a:	33bc      	adds	r3, #188	; 0xbc
 8018c2c:	6810      	ldr	r0, [r2, #0]
 8018c2e:	6018      	str	r0, [r3, #0]
    select->padding         = nk_vec2(2.0f,2.0f);
 8018c30:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018c32:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018c36:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018c3a:	f7fb f9d9 	bl	8013ff0 <nk_vec2>
 8018c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8018c42:	eef0 7a60 	vmov.f32	s15, s1
 8018c46:	ed84 7a33 	vstr	s14, [r4, #204]	; 0xcc
 8018c4a:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    select->image_padding   = nk_vec2(2.0f,2.0f);
 8018c4e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018c50:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018c54:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018c58:	f7fb f9ca 	bl	8013ff0 <nk_vec2>
 8018c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8018c60:	eef0 7a60 	vmov.f32	s15, s1
 8018c64:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 8018c68:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
    select->touch_padding   = nk_vec2(0,0);
 8018c6c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018c6e:	eddf 0ad0 	vldr	s1, [pc, #832]	; 8018fb0 <nk_style_from_table+0xb58>
 8018c72:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8018fb0 <nk_style_from_table+0xb58>
 8018c76:	f7fb f9bb 	bl	8013ff0 <nk_vec2>
 8018c7a:	eeb0 7a40 	vmov.f32	s14, s0
 8018c7e:	eef0 7a60 	vmov.f32	s15, s1
 8018c82:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
 8018c86:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
    select->userdata        = nk_handle_ptr(0);
 8018c8a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018c8c:	2000      	movs	r0, #0
 8018c8e:	f7f9 fd63 	bl	8012758 <nk_handle_ptr>
 8018c92:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    select->rounding        = 0.0f;
 8018c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c98:	f04f 0200 	mov.w	r2, #0
 8018c9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    select->draw_begin      = 0;
 8018ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    select->draw_end        = 0;
 8018ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018caa:	2200      	movs	r2, #0
 8018cac:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    /* slider */
    slider = &style->slider;
 8018cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018cb2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018cb6:	663b      	str	r3, [r7, #96]	; 0x60
    nk_zero_struct(*slider);
 8018cb8:	f44f 7109 	mov.w	r1, #548	; 0x224
 8018cbc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8018cbe:	f002 ff6f 	bl	801bba0 <nk_zero>
    slider->normal          = nk_style_item_hide();
 8018cc2:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018cc4:	463b      	mov	r3, r7
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7ff fbaa 	bl	8018420 <nk_style_item_hide>
 8018ccc:	4625      	mov	r5, r4
 8018cce:	463c      	mov	r4, r7
 8018cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018cd4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018cd8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    slider->hover           = nk_style_item_hide();
 8018cdc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018cde:	463b      	mov	r3, r7
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7ff fb9d 	bl	8018420 <nk_style_item_hide>
 8018ce6:	341c      	adds	r4, #28
 8018ce8:	463d      	mov	r5, r7
 8018cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->active          = nk_style_item_hide();
 8018cf6:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018cf8:	463b      	mov	r3, r7
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7ff fb90 	bl	8018420 <nk_style_item_hide>
 8018d00:	3438      	adds	r4, #56	; 0x38
 8018d02:	463d      	mov	r5, r7
 8018d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->bar_normal      = table[NK_COLOR_SLIDER];
 8018d10:	6a3b      	ldr	r3, [r7, #32]
 8018d12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018d18:	3358      	adds	r3, #88	; 0x58
 8018d1a:	6810      	ldr	r0, [r2, #0]
 8018d1c:	6018      	str	r0, [r3, #0]
    slider->bar_hover       = table[NK_COLOR_SLIDER];
 8018d1e:	6a3b      	ldr	r3, [r7, #32]
 8018d20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018d26:	335c      	adds	r3, #92	; 0x5c
 8018d28:	6810      	ldr	r0, [r2, #0]
 8018d2a:	6018      	str	r0, [r3, #0]
    slider->bar_active      = table[NK_COLOR_SLIDER];
 8018d2c:	6a3b      	ldr	r3, [r7, #32]
 8018d2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018d34:	3360      	adds	r3, #96	; 0x60
 8018d36:	6810      	ldr	r0, [r2, #0]
 8018d38:	6018      	str	r0, [r3, #0]
    slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];
 8018d3a:	6a3b      	ldr	r3, [r7, #32]
 8018d3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018d42:	3364      	adds	r3, #100	; 0x64
 8018d44:	6810      	ldr	r0, [r2, #0]
 8018d46:	6018      	str	r0, [r3, #0]
    slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 8018d48:	6a3b      	ldr	r3, [r7, #32]
 8018d4a:	3334      	adds	r3, #52	; 0x34
 8018d4c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018d4e:	463a      	mov	r2, r7
 8018d50:	6819      	ldr	r1, [r3, #0]
 8018d52:	460b      	mov	r3, r1
 8018d54:	4619      	mov	r1, r3
 8018d56:	4610      	mov	r0, r2
 8018d58:	f7ff fb4a 	bl	80183f0 <nk_style_item_color>
 8018d5c:	3468      	adds	r4, #104	; 0x68
 8018d5e:	463d      	mov	r5, r7
 8018d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 8018d6c:	6a3b      	ldr	r3, [r7, #32]
 8018d6e:	3338      	adds	r3, #56	; 0x38
 8018d70:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018d72:	463a      	mov	r2, r7
 8018d74:	6819      	ldr	r1, [r3, #0]
 8018d76:	460b      	mov	r3, r1
 8018d78:	4619      	mov	r1, r3
 8018d7a:	4610      	mov	r0, r2
 8018d7c:	f7ff fb38 	bl	80183f0 <nk_style_item_color>
 8018d80:	3484      	adds	r4, #132	; 0x84
 8018d82:	463d      	mov	r5, r7
 8018d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018d8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 8018d90:	6a3b      	ldr	r3, [r7, #32]
 8018d92:	333c      	adds	r3, #60	; 0x3c
 8018d94:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018d96:	463a      	mov	r2, r7
 8018d98:	6819      	ldr	r1, [r3, #0]
 8018d9a:	460b      	mov	r3, r1
 8018d9c:	4619      	mov	r1, r3
 8018d9e:	4610      	mov	r0, r2
 8018da0:	f7ff fb26 	bl	80183f0 <nk_style_item_color>
 8018da4:	34a0      	adds	r4, #160	; 0xa0
 8018da6:	463d      	mov	r5, r7
 8018da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018dac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018db0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;
 8018db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018db6:	220a      	movs	r2, #10
 8018db8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;
 8018dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018dbe:	2209      	movs	r2, #9
 8018dc0:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
    slider->cursor_size     = nk_vec2(16,16);
 8018dc4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018dc6:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 8018dca:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8018dce:	f7fb f90f 	bl	8013ff0 <nk_vec2>
 8018dd2:	eeb0 7a40 	vmov.f32	s14, s0
 8018dd6:	eef0 7a60 	vmov.f32	s15, s1
 8018dda:	ed84 7a36 	vstr	s14, [r4, #216]	; 0xd8
 8018dde:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
    slider->padding         = nk_vec2(2,2);
 8018de2:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018de4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018de8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018dec:	f7fb f900 	bl	8013ff0 <nk_vec2>
 8018df0:	eeb0 7a40 	vmov.f32	s14, s0
 8018df4:	eef0 7a60 	vmov.f32	s15, s1
 8018df8:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
 8018dfc:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
    slider->spacing         = nk_vec2(2,2);
 8018e00:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018e02:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018e06:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018e0a:	f7fb f8f1 	bl	8013ff0 <nk_vec2>
 8018e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8018e12:	eef0 7a60 	vmov.f32	s15, s1
 8018e16:	ed84 7a34 	vstr	s14, [r4, #208]	; 0xd0
 8018e1a:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
    slider->userdata        = nk_handle_ptr(0);
 8018e1e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018e20:	2000      	movs	r0, #0
 8018e22:	f7f9 fc99 	bl	8012758 <nk_handle_ptr>
 8018e26:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    slider->show_buttons    = nk_false;
 8018e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e2c:	2200      	movs	r2, #0
 8018e2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    slider->bar_height      = 8;
 8018e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e34:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018e38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    slider->rounding        = 0;
 8018e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e3e:	f04f 0200 	mov.w	r2, #0
 8018e42:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    slider->draw_begin      = 0;
 8018e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e48:	2200      	movs	r2, #0
 8018e4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    slider->draw_end        = 0;
 8018e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e50:	2200      	movs	r2, #0
 8018e52:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    /* slider buttons */
    button = &style->slider.inc_button;
 8018e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018e58:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8018e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 8018e5e:	2228      	movs	r2, #40	; 0x28
 8018e60:	2128      	movs	r1, #40	; 0x28
 8018e62:	2028      	movs	r0, #40	; 0x28
 8018e64:	f7f6 fbf8 	bl	800f658 <nk_rgb>
 8018e68:	4603      	mov	r3, r0
 8018e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e6c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018e6e:	463b      	mov	r3, r7
 8018e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018e72:	4618      	mov	r0, r3
 8018e74:	f7ff fabc 	bl	80183f0 <nk_style_item_color>
 8018e78:	4625      	mov	r5, r4
 8018e7a:	463c      	mov	r4, r7
 8018e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018e80:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018e84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 8018e88:	222a      	movs	r2, #42	; 0x2a
 8018e8a:	212a      	movs	r1, #42	; 0x2a
 8018e8c:	202a      	movs	r0, #42	; 0x2a
 8018e8e:	f7f6 fbe3 	bl	800f658 <nk_rgb>
 8018e92:	4603      	mov	r3, r0
 8018e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e96:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018e98:	463b      	mov	r3, r7
 8018e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f7ff faa7 	bl	80183f0 <nk_style_item_color>
 8018ea2:	341c      	adds	r4, #28
 8018ea4:	463d      	mov	r5, r7
 8018ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018eaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 8018eb2:	222c      	movs	r2, #44	; 0x2c
 8018eb4:	212c      	movs	r1, #44	; 0x2c
 8018eb6:	202c      	movs	r0, #44	; 0x2c
 8018eb8:	f7f6 fbce 	bl	800f658 <nk_rgb>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8018ec0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018ec2:	463b      	mov	r3, r7
 8018ec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f7ff fa92 	bl	80183f0 <nk_style_item_color>
 8018ecc:	3438      	adds	r4, #56	; 0x38
 8018ece:	463d      	mov	r5, r7
 8018ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ed4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018ed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 8018edc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018ede:	2241      	movs	r2, #65	; 0x41
 8018ee0:	2141      	movs	r1, #65	; 0x41
 8018ee2:	2041      	movs	r0, #65	; 0x41
 8018ee4:	f7f6 fbb8 	bl	800f658 <nk_rgb>
 8018ee8:	4603      	mov	r3, r0
 8018eea:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 8018eec:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018eee:	2228      	movs	r2, #40	; 0x28
 8018ef0:	2128      	movs	r1, #40	; 0x28
 8018ef2:	2028      	movs	r0, #40	; 0x28
 8018ef4:	f7f6 fbb0 	bl	800f658 <nk_rgb>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 8018efc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018efe:	22af      	movs	r2, #175	; 0xaf
 8018f00:	21af      	movs	r1, #175	; 0xaf
 8018f02:	20af      	movs	r0, #175	; 0xaf
 8018f04:	f7f6 fba8 	bl	800f658 <nk_rgb>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 8018f0c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f0e:	22af      	movs	r2, #175	; 0xaf
 8018f10:	21af      	movs	r1, #175	; 0xaf
 8018f12:	20af      	movs	r0, #175	; 0xaf
 8018f14:	f7f6 fba0 	bl	800f658 <nk_rgb>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 8018f1c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f1e:	22af      	movs	r2, #175	; 0xaf
 8018f20:	21af      	movs	r1, #175	; 0xaf
 8018f22:	20af      	movs	r0, #175	; 0xaf
 8018f24:	f7f6 fb98 	bl	800f658 <nk_rgb>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(8.0f,8.0f);
 8018f2c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f2e:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8018f32:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8018f36:	f7fb f85b 	bl	8013ff0 <nk_vec2>
 8018f3a:	eeb0 7a40 	vmov.f32	s14, s0
 8018f3e:	eef0 7a60 	vmov.f32	s15, s1
 8018f42:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8018f46:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8018f4a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f4c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8018fb0 <nk_style_from_table+0xb58>
 8018f50:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8018fb0 <nk_style_from_table+0xb58>
 8018f54:	f7fb f84c 	bl	8013ff0 <nk_vec2>
 8018f58:	eeb0 7a40 	vmov.f32	s14, s0
 8018f5c:	eef0 7a60 	vmov.f32	s15, s1
 8018f60:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8018f64:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8018f68:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f6a:	2000      	movs	r0, #0
 8018f6c:	f7f9 fbf4 	bl	8012758 <nk_handle_ptr>
 8018f70:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8018f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f76:	2212      	movs	r2, #18
 8018f78:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 8018f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018f80:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8018f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f84:	f04f 0200 	mov.w	r2, #0
 8018f88:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8018f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f94:	2200      	movs	r2, #0
 8018f96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->slider.dec_button = style->slider.inc_button;
 8018f9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018f9e:	f202 50fc 	addw	r0, r2, #1532	; 0x5fc
 8018fa2:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8018fa6:	2298      	movs	r2, #152	; 0x98
 8018fa8:	4619      	mov	r1, r3
 8018faa:	f005 f919 	bl	801e1e0 <memcpy>
 8018fae:	e003      	b.n	8018fb8 <nk_style_from_table+0xb60>
	...

    /* progressbar */
    prog = &style->progress;
 8018fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018fba:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8018fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    nk_zero_struct(*prog);
 8018fc0:	21d4      	movs	r1, #212	; 0xd4
 8018fc2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018fc4:	f002 fdec 	bl	801bba0 <nk_zero>
    prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8018fc8:	6a3b      	ldr	r3, [r7, #32]
 8018fca:	3330      	adds	r3, #48	; 0x30
 8018fcc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8018fce:	463a      	mov	r2, r7
 8018fd0:	6819      	ldr	r1, [r3, #0]
 8018fd2:	460b      	mov	r3, r1
 8018fd4:	4619      	mov	r1, r3
 8018fd6:	4610      	mov	r0, r2
 8018fd8:	f7ff fa0a 	bl	80183f0 <nk_style_item_color>
 8018fdc:	4625      	mov	r5, r4
 8018fde:	463c      	mov	r4, r7
 8018fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018fe4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018fe8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8018fec:	6a3b      	ldr	r3, [r7, #32]
 8018fee:	3330      	adds	r3, #48	; 0x30
 8018ff0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8018ff2:	463a      	mov	r2, r7
 8018ff4:	6819      	ldr	r1, [r3, #0]
 8018ff6:	460b      	mov	r3, r1
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	4610      	mov	r0, r2
 8018ffc:	f7ff f9f8 	bl	80183f0 <nk_style_item_color>
 8019000:	341c      	adds	r4, #28
 8019002:	463d      	mov	r5, r7
 8019004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019008:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801900c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8019010:	6a3b      	ldr	r3, [r7, #32]
 8019012:	3330      	adds	r3, #48	; 0x30
 8019014:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019016:	463a      	mov	r2, r7
 8019018:	6819      	ldr	r1, [r3, #0]
 801901a:	460b      	mov	r3, r1
 801901c:	4619      	mov	r1, r3
 801901e:	4610      	mov	r0, r2
 8019020:	f7ff f9e6 	bl	80183f0 <nk_style_item_color>
 8019024:	3438      	adds	r4, #56	; 0x38
 8019026:	463d      	mov	r5, r7
 8019028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801902a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801902c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019030:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 8019034:	6a3b      	ldr	r3, [r7, #32]
 8019036:	3334      	adds	r3, #52	; 0x34
 8019038:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801903a:	463a      	mov	r2, r7
 801903c:	6819      	ldr	r1, [r3, #0]
 801903e:	460b      	mov	r3, r1
 8019040:	4619      	mov	r1, r3
 8019042:	4610      	mov	r0, r2
 8019044:	f7ff f9d4 	bl	80183f0 <nk_style_item_color>
 8019048:	3458      	adds	r4, #88	; 0x58
 801904a:	463d      	mov	r5, r7
 801904c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801904e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019050:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 8019058:	6a3b      	ldr	r3, [r7, #32]
 801905a:	3338      	adds	r3, #56	; 0x38
 801905c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801905e:	463a      	mov	r2, r7
 8019060:	6819      	ldr	r1, [r3, #0]
 8019062:	460b      	mov	r3, r1
 8019064:	4619      	mov	r1, r3
 8019066:	4610      	mov	r0, r2
 8019068:	f7ff f9c2 	bl	80183f0 <nk_style_item_color>
 801906c:	3474      	adds	r4, #116	; 0x74
 801906e:	463d      	mov	r5, r7
 8019070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 801907c:	6a3b      	ldr	r3, [r7, #32]
 801907e:	333c      	adds	r3, #60	; 0x3c
 8019080:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019082:	463a      	mov	r2, r7
 8019084:	6819      	ldr	r1, [r3, #0]
 8019086:	460b      	mov	r3, r1
 8019088:	4619      	mov	r1, r3
 801908a:	4610      	mov	r0, r2
 801908c:	f7ff f9b0 	bl	80183f0 <nk_style_item_color>
 8019090:	3490      	adds	r4, #144	; 0x90
 8019092:	463d      	mov	r5, r7
 8019094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019098:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801909c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->border_color      = nk_rgba(0,0,0,0);
 80190a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80190a2:	2300      	movs	r3, #0
 80190a4:	2200      	movs	r2, #0
 80190a6:	2100      	movs	r1, #0
 80190a8:	2000      	movs	r0, #0
 80190aa:	f7f6 fa85 	bl	800f5b8 <nk_rgba>
 80190ae:	4603      	mov	r3, r0
 80190b0:	6563      	str	r3, [r4, #84]	; 0x54
    prog->cursor_border_color = nk_rgba(0,0,0,0);
 80190b2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80190b4:	2300      	movs	r3, #0
 80190b6:	2200      	movs	r2, #0
 80190b8:	2100      	movs	r1, #0
 80190ba:	2000      	movs	r0, #0
 80190bc:	f7f6 fa7c 	bl	800f5b8 <nk_rgba>
 80190c0:	4603      	mov	r3, r0
 80190c2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    prog->userdata          = nk_handle_ptr(0);
 80190c6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80190c8:	2000      	movs	r0, #0
 80190ca:	f7f9 fb45 	bl	8012758 <nk_handle_ptr>
 80190ce:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    prog->padding           = nk_vec2(4,4);
 80190d2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80190d4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80190d8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80190dc:	f7fa ff88 	bl	8013ff0 <nk_vec2>
 80190e0:	eeb0 7a40 	vmov.f32	s14, s0
 80190e4:	eef0 7a60 	vmov.f32	s15, s1
 80190e8:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 80190ec:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    prog->rounding          = 0;
 80190f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190f2:	f04f 0200 	mov.w	r2, #0
 80190f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    prog->border            = 0;
 80190fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190fc:	f04f 0200 	mov.w	r2, #0
 8019100:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    prog->cursor_rounding   = 0;
 8019104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019106:	f04f 0200 	mov.w	r2, #0
 801910a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    prog->cursor_border     = 0;
 801910e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019110:	f04f 0200 	mov.w	r2, #0
 8019114:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    prog->draw_begin        = 0;
 8019118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801911a:	2200      	movs	r2, #0
 801911c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    prog->draw_end          = 0;
 8019120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019122:	2200      	movs	r2, #0
 8019124:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* scrollbars */
    scroll = &style->scrollh;
 8019128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801912a:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 801912e:	65bb      	str	r3, [r7, #88]	; 0x58
    nk_zero_struct(*scroll);
 8019130:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8019134:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8019136:	f002 fd33 	bl	801bba0 <nk_zero>
    scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801913a:	6a3b      	ldr	r3, [r7, #32]
 801913c:	335c      	adds	r3, #92	; 0x5c
 801913e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019140:	463a      	mov	r2, r7
 8019142:	6819      	ldr	r1, [r3, #0]
 8019144:	460b      	mov	r3, r1
 8019146:	4619      	mov	r1, r3
 8019148:	4610      	mov	r0, r2
 801914a:	f7ff f951 	bl	80183f0 <nk_style_item_color>
 801914e:	4625      	mov	r5, r4
 8019150:	463c      	mov	r4, r7
 8019152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019156:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801915a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801915e:	6a3b      	ldr	r3, [r7, #32]
 8019160:	335c      	adds	r3, #92	; 0x5c
 8019162:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019164:	463a      	mov	r2, r7
 8019166:	6819      	ldr	r1, [r3, #0]
 8019168:	460b      	mov	r3, r1
 801916a:	4619      	mov	r1, r3
 801916c:	4610      	mov	r0, r2
 801916e:	f7ff f93f 	bl	80183f0 <nk_style_item_color>
 8019172:	341c      	adds	r4, #28
 8019174:	463d      	mov	r5, r7
 8019176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801917a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801917e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8019182:	6a3b      	ldr	r3, [r7, #32]
 8019184:	335c      	adds	r3, #92	; 0x5c
 8019186:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019188:	463a      	mov	r2, r7
 801918a:	6819      	ldr	r1, [r3, #0]
 801918c:	460b      	mov	r3, r1
 801918e:	4619      	mov	r1, r3
 8019190:	4610      	mov	r0, r2
 8019192:	f7ff f92d 	bl	80183f0 <nk_style_item_color>
 8019196:	3438      	adds	r4, #56	; 0x38
 8019198:	463d      	mov	r5, r7
 801919a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801919c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801919e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80191a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);
 80191a6:	6a3b      	ldr	r3, [r7, #32]
 80191a8:	3360      	adds	r3, #96	; 0x60
 80191aa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80191ac:	463a      	mov	r2, r7
 80191ae:	6819      	ldr	r1, [r3, #0]
 80191b0:	460b      	mov	r3, r1
 80191b2:	4619      	mov	r1, r3
 80191b4:	4610      	mov	r0, r2
 80191b6:	f7ff f91b 	bl	80183f0 <nk_style_item_color>
 80191ba:	3458      	adds	r4, #88	; 0x58
 80191bc:	463d      	mov	r5, r7
 80191be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80191c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);
 80191ca:	6a3b      	ldr	r3, [r7, #32]
 80191cc:	3364      	adds	r3, #100	; 0x64
 80191ce:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80191d0:	463a      	mov	r2, r7
 80191d2:	6819      	ldr	r1, [r3, #0]
 80191d4:	460b      	mov	r3, r1
 80191d6:	4619      	mov	r1, r3
 80191d8:	4610      	mov	r0, r2
 80191da:	f7ff f909 	bl	80183f0 <nk_style_item_color>
 80191de:	3474      	adds	r4, #116	; 0x74
 80191e0:	463d      	mov	r5, r7
 80191e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80191ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);
 80191ee:	6a3b      	ldr	r3, [r7, #32]
 80191f0:	3368      	adds	r3, #104	; 0x68
 80191f2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80191f4:	463a      	mov	r2, r7
 80191f6:	6819      	ldr	r1, [r3, #0]
 80191f8:	460b      	mov	r3, r1
 80191fa:	4619      	mov	r1, r3
 80191fc:	4610      	mov	r0, r2
 80191fe:	f7ff f8f7 	bl	80183f0 <nk_style_item_color>
 8019202:	3490      	adds	r4, #144	; 0x90
 8019204:	463d      	mov	r5, r7
 8019206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801920a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801920e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 8019212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019214:	2203      	movs	r2, #3
 8019216:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 801921a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801921c:	2203      	movs	r2, #3
 801921e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    scroll->userdata        = nk_handle_ptr(0);
 8019222:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019224:	2000      	movs	r0, #0
 8019226:	f7f9 fa97 	bl	8012758 <nk_handle_ptr>
 801922a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    scroll->border_color    = table[NK_COLOR_SCROLLBAR];
 801922e:	6a3b      	ldr	r3, [r7, #32]
 8019230:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8019234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019236:	3354      	adds	r3, #84	; 0x54
 8019238:	6810      	ldr	r0, [r2, #0]
 801923a:	6018      	str	r0, [r3, #0]
    scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];
 801923c:	6a3b      	ldr	r3, [r7, #32]
 801923e:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8019242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019244:	33ac      	adds	r3, #172	; 0xac
 8019246:	6810      	ldr	r0, [r2, #0]
 8019248:	6018      	str	r0, [r3, #0]
    scroll->padding         = nk_vec2(0,0);
 801924a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801924c:	ed5f 0aa7 	vldr	s1, [pc, #-668]	; 8018fb4 <nk_style_from_table+0xb5c>
 8019250:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8018fb4 <nk_style_from_table+0xb5c>
 8019254:	f7fa fecc 	bl	8013ff0 <nk_vec2>
 8019258:	eeb0 7a40 	vmov.f32	s14, s0
 801925c:	eef0 7a60 	vmov.f32	s15, s1
 8019260:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8019264:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    scroll->show_buttons    = nk_false;
 8019268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801926a:	2200      	movs	r2, #0
 801926c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    scroll->border          = 0;
 8019270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019272:	f04f 0200 	mov.w	r2, #0
 8019276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    scroll->rounding        = 0;
 801927a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801927c:	f04f 0200 	mov.w	r2, #0
 8019280:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    scroll->border_cursor   = 0;
 8019284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019286:	f04f 0200 	mov.w	r2, #0
 801928a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    scroll->rounding_cursor = 0;
 801928e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019290:	f04f 0200 	mov.w	r2, #0
 8019294:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    scroll->draw_begin      = 0;
 8019298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801929a:	2200      	movs	r2, #0
 801929c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    scroll->draw_end        = 0;
 80192a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80192a2:	2200      	movs	r2, #0
 80192a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    style->scrollv = style->scrollh;
 80192a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80192aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80192ae:	461a      	mov	r2, r3
 80192b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80192b2:	f102 00d0 	add.w	r0, r2, #208	; 0xd0
 80192b6:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 80192ba:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80192be:	4619      	mov	r1, r3
 80192c0:	f004 ff8e 	bl	801e1e0 <memcpy>

    /* scrollbars buttons */
    button = &style->scrollh.inc_button;
 80192c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80192c6:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 80192ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 80192cc:	2228      	movs	r2, #40	; 0x28
 80192ce:	2128      	movs	r1, #40	; 0x28
 80192d0:	2028      	movs	r0, #40	; 0x28
 80192d2:	f7f6 f9c1 	bl	800f658 <nk_rgb>
 80192d6:	4603      	mov	r3, r0
 80192d8:	637b      	str	r3, [r7, #52]	; 0x34
 80192da:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192dc:	463b      	mov	r3, r7
 80192de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80192e0:	4618      	mov	r0, r3
 80192e2:	f7ff f885 	bl	80183f0 <nk_style_item_color>
 80192e6:	4625      	mov	r5, r4
 80192e8:	463c      	mov	r4, r7
 80192ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80192ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80192f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 80192f6:	222a      	movs	r2, #42	; 0x2a
 80192f8:	212a      	movs	r1, #42	; 0x2a
 80192fa:	202a      	movs	r0, #42	; 0x2a
 80192fc:	f7f6 f9ac 	bl	800f658 <nk_rgb>
 8019300:	4603      	mov	r3, r0
 8019302:	63bb      	str	r3, [r7, #56]	; 0x38
 8019304:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019306:	463b      	mov	r3, r7
 8019308:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801930a:	4618      	mov	r0, r3
 801930c:	f7ff f870 	bl	80183f0 <nk_style_item_color>
 8019310:	341c      	adds	r4, #28
 8019312:	463d      	mov	r5, r7
 8019314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801931c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 8019320:	222c      	movs	r2, #44	; 0x2c
 8019322:	212c      	movs	r1, #44	; 0x2c
 8019324:	202c      	movs	r0, #44	; 0x2c
 8019326:	f7f6 f997 	bl	800f658 <nk_rgb>
 801932a:	4603      	mov	r3, r0
 801932c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801932e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019330:	463b      	mov	r3, r7
 8019332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019334:	4618      	mov	r0, r3
 8019336:	f7ff f85b 	bl	80183f0 <nk_style_item_color>
 801933a:	3438      	adds	r4, #56	; 0x38
 801933c:	463d      	mov	r5, r7
 801933e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019342:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 801934a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801934c:	2241      	movs	r2, #65	; 0x41
 801934e:	2141      	movs	r1, #65	; 0x41
 8019350:	2041      	movs	r0, #65	; 0x41
 8019352:	f7f6 f981 	bl	800f658 <nk_rgb>
 8019356:	4603      	mov	r3, r0
 8019358:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 801935a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801935c:	2228      	movs	r2, #40	; 0x28
 801935e:	2128      	movs	r1, #40	; 0x28
 8019360:	2028      	movs	r0, #40	; 0x28
 8019362:	f7f6 f979 	bl	800f658 <nk_rgb>
 8019366:	4603      	mov	r3, r0
 8019368:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 801936a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801936c:	22af      	movs	r2, #175	; 0xaf
 801936e:	21af      	movs	r1, #175	; 0xaf
 8019370:	20af      	movs	r0, #175	; 0xaf
 8019372:	f7f6 f971 	bl	800f658 <nk_rgb>
 8019376:	4603      	mov	r3, r0
 8019378:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 801937a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801937c:	22af      	movs	r2, #175	; 0xaf
 801937e:	21af      	movs	r1, #175	; 0xaf
 8019380:	20af      	movs	r0, #175	; 0xaf
 8019382:	f7f6 f969 	bl	800f658 <nk_rgb>
 8019386:	4603      	mov	r3, r0
 8019388:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 801938a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801938c:	22af      	movs	r2, #175	; 0xaf
 801938e:	21af      	movs	r1, #175	; 0xaf
 8019390:	20af      	movs	r0, #175	; 0xaf
 8019392:	f7f6 f961 	bl	800f658 <nk_rgb>
 8019396:	4603      	mov	r3, r0
 8019398:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(4.0f,4.0f);
 801939a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801939c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80193a0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80193a4:	f7fa fe24 	bl	8013ff0 <nk_vec2>
 80193a8:	eeb0 7a40 	vmov.f32	s14, s0
 80193ac:	eef0 7a60 	vmov.f32	s15, s1
 80193b0:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80193b4:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80193b8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80193ba:	eddf 0ac9 	vldr	s1, [pc, #804]	; 80196e0 <nk_style_from_table+0x1288>
 80193be:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 80196e0 <nk_style_from_table+0x1288>
 80193c2:	f7fa fe15 	bl	8013ff0 <nk_vec2>
 80193c6:	eeb0 7a40 	vmov.f32	s14, s0
 80193ca:	eef0 7a60 	vmov.f32	s15, s1
 80193ce:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80193d2:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80193d6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80193d8:	2000      	movs	r0, #0
 80193da:	f7f9 f9bd 	bl	8012758 <nk_handle_ptr>
 80193de:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80193e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80193e4:	2212      	movs	r2, #18
 80193e6:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 80193e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80193ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80193ee:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 80193f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80193f2:	f04f 0200 	mov.w	r2, #0
 80193f6:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80193f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80193fa:	2200      	movs	r2, #0
 80193fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019402:	2200      	movs	r2, #0
 8019404:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->scrollh.dec_button = style->scrollh.inc_button;
 8019408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801940a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801940e:	461a      	mov	r2, r3
 8019410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019412:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8019416:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801941a:	2298      	movs	r2, #152	; 0x98
 801941c:	4619      	mov	r1, r3
 801941e:	f004 fedf 	bl	801e1e0 <memcpy>
    style->scrollv.inc_button = style->scrollh.inc_button;
 8019422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019428:	461a      	mov	r2, r3
 801942a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801942c:	f502 70ce 	add.w	r0, r2, #412	; 0x19c
 8019430:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8019434:	2298      	movs	r2, #152	; 0x98
 8019436:	4619      	mov	r1, r3
 8019438:	f004 fed2 	bl	801e1e0 <memcpy>
    style->scrollv.dec_button = style->scrollh.inc_button;
 801943c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801943e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019442:	461a      	mov	r2, r3
 8019444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019446:	f502 700d 	add.w	r0, r2, #564	; 0x234
 801944a:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801944e:	2298      	movs	r2, #152	; 0x98
 8019450:	4619      	mov	r1, r3
 8019452:	f004 fec5 	bl	801e1e0 <memcpy>

    /* edit */
    edit = &style->edit;
 8019456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019458:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 801945c:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 801945e:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8019462:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019464:	f002 fb9c 	bl	801bba0 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);
 8019468:	6a3b      	ldr	r3, [r7, #32]
 801946a:	3344      	adds	r3, #68	; 0x44
 801946c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801946e:	463a      	mov	r2, r7
 8019470:	6819      	ldr	r1, [r3, #0]
 8019472:	460b      	mov	r3, r1
 8019474:	4619      	mov	r1, r3
 8019476:	4610      	mov	r0, r2
 8019478:	f7fe ffba 	bl	80183f0 <nk_style_item_color>
 801947c:	4625      	mov	r5, r4
 801947e:	463c      	mov	r4, r7
 8019480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019484:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019488:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);
 801948c:	6a3b      	ldr	r3, [r7, #32]
 801948e:	3344      	adds	r3, #68	; 0x44
 8019490:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019492:	463a      	mov	r2, r7
 8019494:	6819      	ldr	r1, [r3, #0]
 8019496:	460b      	mov	r3, r1
 8019498:	4619      	mov	r1, r3
 801949a:	4610      	mov	r0, r2
 801949c:	f7fe ffa8 	bl	80183f0 <nk_style_item_color>
 80194a0:	341c      	adds	r4, #28
 80194a2:	463d      	mov	r5, r7
 80194a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);
 80194b0:	6a3b      	ldr	r3, [r7, #32]
 80194b2:	3344      	adds	r3, #68	; 0x44
 80194b4:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80194b6:	463a      	mov	r2, r7
 80194b8:	6819      	ldr	r1, [r3, #0]
 80194ba:	460b      	mov	r3, r1
 80194bc:	4619      	mov	r1, r3
 80194be:	4610      	mov	r0, r2
 80194c0:	f7fe ff96 	bl	80183f0 <nk_style_item_color>
 80194c4:	3438      	adds	r4, #56	; 0x38
 80194c6:	463d      	mov	r5, r7
 80194c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 80194d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194d6:	6a3a      	ldr	r2, [r7, #32]
 80194d8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80194dc:	6810      	ldr	r0, [r2, #0]
 80194de:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 80194e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194e2:	6a3a      	ldr	r2, [r7, #32]
 80194e4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80194e8:	6810      	ldr	r0, [r2, #0]
 80194ea:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 80194ec:	6a3b      	ldr	r3, [r7, #32]
 80194ee:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80194f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194f4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80194f8:	6810      	ldr	r0, [r2, #0]
 80194fa:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 80194fc:	6a3b      	ldr	r3, [r7, #32]
 80194fe:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019504:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8019508:	6810      	ldr	r0, [r2, #0]
 801950a:	6018      	str	r0, [r3, #0]
    edit->border_color      = table[NK_COLOR_BORDER];
 801950c:	6a3b      	ldr	r3, [r7, #32]
 801950e:	f103 020c 	add.w	r2, r3, #12
 8019512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019514:	3354      	adds	r3, #84	; 0x54
 8019516:	6810      	ldr	r0, [r2, #0]
 8019518:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 801951a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801951c:	6a3a      	ldr	r2, [r7, #32]
 801951e:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8019522:	6810      	ldr	r0, [r2, #0]
 8019524:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 8019526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019528:	6a3a      	ldr	r2, [r7, #32]
 801952a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801952e:	6810      	ldr	r0, [r2, #0]
 8019530:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 8019532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019534:	6a3a      	ldr	r2, [r7, #32]
 8019536:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801953a:	6810      	ldr	r0, [r2, #0]
 801953c:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801953e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019540:	6a3a      	ldr	r2, [r7, #32]
 8019542:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8019546:	6810      	ldr	r0, [r2, #0]
 8019548:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 801954a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801954c:	6a3a      	ldr	r2, [r7, #32]
 801954e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8019552:	6810      	ldr	r0, [r2, #0]
 8019554:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 8019556:	6a3b      	ldr	r3, [r7, #32]
 8019558:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801955c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801955e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019562:	6810      	ldr	r0, [r2, #0]
 8019564:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 8019566:	6a3b      	ldr	r3, [r7, #32]
 8019568:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801956c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801956e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019572:	6810      	ldr	r0, [r2, #0]
 8019574:	6018      	str	r0, [r3, #0]
    edit->scrollbar_size    = nk_vec2(10,10);
 8019576:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019578:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 801957c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8019580:	f7fa fd36 	bl	8013ff0 <nk_vec2>
 8019584:	eeb0 7a40 	vmov.f32	s14, s0
 8019588:	eef0 7a60 	vmov.f32	s15, s1
 801958c:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 8019590:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    edit->scrollbar         = style->scrollv;
 8019594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019596:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019598:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801959c:	3358      	adds	r3, #88	; 0x58
 801959e:	f102 01d0 	add.w	r1, r2, #208	; 0xd0
 80195a2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80195a6:	4618      	mov	r0, r3
 80195a8:	f004 fe1a 	bl	801e1e0 <memcpy>
    edit->padding           = nk_vec2(4,4);
 80195ac:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80195ae:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80195b2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80195b6:	f7fa fd1b 	bl	8013ff0 <nk_vec2>
 80195ba:	eeb0 7a40 	vmov.f32	s14, s0
 80195be:	eef0 7a60 	vmov.f32	s15, s1
 80195c2:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 80195c6:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->row_padding       = 2;
 80195ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80195d0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    edit->cursor_size       = 4;
 80195d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195d6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80195da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 1;
 80195de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80195e4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 80195e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195ea:	f04f 0200 	mov.w	r2, #0
 80195ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* property */
    property = &style->property;
 80195f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80195f4:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 80195f8:	653b      	str	r3, [r7, #80]	; 0x50
    nk_zero_struct(*property);
 80195fa:	f240 4164 	movw	r1, #1124	; 0x464
 80195fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019600:	f002 face 	bl	801bba0 <nk_zero>
    property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019604:	6a3b      	ldr	r3, [r7, #32]
 8019606:	3340      	adds	r3, #64	; 0x40
 8019608:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801960a:	463a      	mov	r2, r7
 801960c:	6819      	ldr	r1, [r3, #0]
 801960e:	460b      	mov	r3, r1
 8019610:	4619      	mov	r1, r3
 8019612:	4610      	mov	r0, r2
 8019614:	f7fe feec 	bl	80183f0 <nk_style_item_color>
 8019618:	4625      	mov	r5, r4
 801961a:	463c      	mov	r4, r7
 801961c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801961e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019620:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019624:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019628:	6a3b      	ldr	r3, [r7, #32]
 801962a:	3340      	adds	r3, #64	; 0x40
 801962c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801962e:	463a      	mov	r2, r7
 8019630:	6819      	ldr	r1, [r3, #0]
 8019632:	460b      	mov	r3, r1
 8019634:	4619      	mov	r1, r3
 8019636:	4610      	mov	r0, r2
 8019638:	f7fe feda 	bl	80183f0 <nk_style_item_color>
 801963c:	341c      	adds	r4, #28
 801963e:	463d      	mov	r5, r7
 8019640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801964c:	6a3b      	ldr	r3, [r7, #32]
 801964e:	3340      	adds	r3, #64	; 0x40
 8019650:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8019652:	463a      	mov	r2, r7
 8019654:	6819      	ldr	r1, [r3, #0]
 8019656:	460b      	mov	r3, r1
 8019658:	4619      	mov	r1, r3
 801965a:	4610      	mov	r0, r2
 801965c:	f7fe fec8 	bl	80183f0 <nk_style_item_color>
 8019660:	3438      	adds	r4, #56	; 0x38
 8019662:	463d      	mov	r5, r7
 8019664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801966c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->border_color  = table[NK_COLOR_BORDER];
 8019670:	6a3b      	ldr	r3, [r7, #32]
 8019672:	f103 020c 	add.w	r2, r3, #12
 8019676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019678:	3354      	adds	r3, #84	; 0x54
 801967a:	6810      	ldr	r0, [r2, #0]
 801967c:	6018      	str	r0, [r3, #0]
    property->label_normal  = table[NK_COLOR_TEXT];
 801967e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019680:	6a3a      	ldr	r2, [r7, #32]
 8019682:	3358      	adds	r3, #88	; 0x58
 8019684:	6810      	ldr	r0, [r2, #0]
 8019686:	6018      	str	r0, [r3, #0]
    property->label_hover   = table[NK_COLOR_TEXT];
 8019688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801968a:	6a3a      	ldr	r2, [r7, #32]
 801968c:	335c      	adds	r3, #92	; 0x5c
 801968e:	6810      	ldr	r0, [r2, #0]
 8019690:	6018      	str	r0, [r3, #0]
    property->label_active  = table[NK_COLOR_TEXT];
 8019692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019694:	6a3a      	ldr	r2, [r7, #32]
 8019696:	3360      	adds	r3, #96	; 0x60
 8019698:	6810      	ldr	r0, [r2, #0]
 801969a:	6018      	str	r0, [r3, #0]
    property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;
 801969c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801969e:	2209      	movs	r2, #9
 80196a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;
 80196a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196a6:	220a      	movs	r2, #10
 80196a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    property->userdata      = nk_handle_ptr(0);
 80196ac:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80196ae:	2000      	movs	r0, #0
 80196b0:	f7f9 f852 	bl	8012758 <nk_handle_ptr>
 80196b4:	f8c4 0458 	str.w	r0, [r4, #1112]	; 0x458
    property->padding       = nk_vec2(4,4);
 80196b8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80196ba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80196be:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80196c2:	f7fa fc95 	bl	8013ff0 <nk_vec2>
 80196c6:	eeb0 7a40 	vmov.f32	s14, s0
 80196ca:	eef0 7a60 	vmov.f32	s15, s1
 80196ce:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 80196d2:	edc4 7a1d 	vstr	s15, [r4, #116]	; 0x74
    property->border        = 1;
 80196d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80196dc:	e002      	b.n	80196e4 <nk_style_from_table+0x128c>
 80196de:	bf00      	nop
 80196e0:	00000000 	.word	0x00000000
 80196e4:	669a      	str	r2, [r3, #104]	; 0x68
    property->rounding      = 10;
 80196e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196e8:	4ac3      	ldr	r2, [pc, #780]	; (80199f8 <nk_style_from_table+0x15a0>)
 80196ea:	66da      	str	r2, [r3, #108]	; 0x6c
    property->draw_begin    = 0;
 80196ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196ee:	2200      	movs	r2, #0
 80196f0:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
    property->draw_end      = 0;
 80196f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196f6:	2200      	movs	r2, #0
 80196f8:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460

    /* property buttons */
    button = &style->property.dec_button;
 80196fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80196fe:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8019702:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019704:	2198      	movs	r1, #152	; 0x98
 8019706:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019708:	f002 fa4a 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801970c:	6a3b      	ldr	r3, [r7, #32]
 801970e:	3340      	adds	r3, #64	; 0x40
 8019710:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019712:	463a      	mov	r2, r7
 8019714:	6819      	ldr	r1, [r3, #0]
 8019716:	460b      	mov	r3, r1
 8019718:	4619      	mov	r1, r3
 801971a:	4610      	mov	r0, r2
 801971c:	f7fe fe68 	bl	80183f0 <nk_style_item_color>
 8019720:	4625      	mov	r5, r4
 8019722:	463c      	mov	r4, r7
 8019724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019728:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801972c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019730:	6a3b      	ldr	r3, [r7, #32]
 8019732:	3340      	adds	r3, #64	; 0x40
 8019734:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019736:	463a      	mov	r2, r7
 8019738:	6819      	ldr	r1, [r3, #0]
 801973a:	460b      	mov	r3, r1
 801973c:	4619      	mov	r1, r3
 801973e:	4610      	mov	r0, r2
 8019740:	f7fe fe56 	bl	80183f0 <nk_style_item_color>
 8019744:	341c      	adds	r4, #28
 8019746:	463d      	mov	r5, r7
 8019748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801974a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801974c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019754:	6a3b      	ldr	r3, [r7, #32]
 8019756:	3340      	adds	r3, #64	; 0x40
 8019758:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801975a:	463a      	mov	r2, r7
 801975c:	6819      	ldr	r1, [r3, #0]
 801975e:	460b      	mov	r3, r1
 8019760:	4619      	mov	r1, r3
 8019762:	4610      	mov	r0, r2
 8019764:	f7fe fe44 	bl	80183f0 <nk_style_item_color>
 8019768:	3438      	adds	r4, #56	; 0x38
 801976a:	463d      	mov	r5, r7
 801976c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801976e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019770:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019778:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801977a:	2300      	movs	r3, #0
 801977c:	2200      	movs	r2, #0
 801977e:	2100      	movs	r1, #0
 8019780:	2000      	movs	r0, #0
 8019782:	f7f5 ff19 	bl	800f5b8 <nk_rgba>
 8019786:	4603      	mov	r3, r0
 8019788:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_PROPERTY];
 801978a:	6a3b      	ldr	r3, [r7, #32]
 801978c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8019790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019792:	3358      	adds	r3, #88	; 0x58
 8019794:	6810      	ldr	r0, [r2, #0]
 8019796:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801979a:	6a3a      	ldr	r2, [r7, #32]
 801979c:	335c      	adds	r3, #92	; 0x5c
 801979e:	6810      	ldr	r0, [r2, #0]
 80197a0:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 80197a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197a4:	6a3a      	ldr	r2, [r7, #32]
 80197a6:	3360      	adds	r3, #96	; 0x60
 80197a8:	6810      	ldr	r0, [r2, #0]
 80197aa:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 80197ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197ae:	6a3a      	ldr	r2, [r7, #32]
 80197b0:	3364      	adds	r3, #100	; 0x64
 80197b2:	6810      	ldr	r0, [r2, #0]
 80197b4:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 80197b6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80197b8:	eddf 0a90 	vldr	s1, [pc, #576]	; 80199fc <nk_style_from_table+0x15a4>
 80197bc:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 80199fc <nk_style_from_table+0x15a4>
 80197c0:	f7fa fc16 	bl	8013ff0 <nk_vec2>
 80197c4:	eeb0 7a40 	vmov.f32	s14, s0
 80197c8:	eef0 7a60 	vmov.f32	s15, s1
 80197cc:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80197d0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80197d4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80197d6:	eddf 0a89 	vldr	s1, [pc, #548]	; 80199fc <nk_style_from_table+0x15a4>
 80197da:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80199fc <nk_style_from_table+0x15a4>
 80197de:	f7fa fc07 	bl	8013ff0 <nk_vec2>
 80197e2:	eeb0 7a40 	vmov.f32	s14, s0
 80197e6:	eef0 7a60 	vmov.f32	s15, s1
 80197ea:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80197ee:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80197f2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80197f4:	2000      	movs	r0, #0
 80197f6:	f7f8 ffaf 	bl	8012758 <nk_handle_ptr>
 80197fa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80197fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019800:	2212      	movs	r2, #18
 8019802:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8019804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019806:	f04f 0200 	mov.w	r2, #0
 801980a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801980c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801980e:	f04f 0200 	mov.w	r2, #0
 8019812:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019816:	2200      	movs	r2, #0
 8019818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801981c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801981e:	2200      	movs	r2, #0
 8019820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->property.inc_button = style->property.dec_button;
 8019824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019828:	f502 602a 	add.w	r0, r2, #2720	; 0xaa0
 801982c:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8019830:	2298      	movs	r2, #152	; 0x98
 8019832:	4619      	mov	r1, r3
 8019834:	f004 fcd4 	bl	801e1e0 <memcpy>

    /* property edit */
    edit = &style->property.edit;
 8019838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801983a:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 801983e:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 8019840:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8019844:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019846:	f002 f9ab 	bl	801bba0 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801984a:	6a3b      	ldr	r3, [r7, #32]
 801984c:	3340      	adds	r3, #64	; 0x40
 801984e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019850:	463a      	mov	r2, r7
 8019852:	6819      	ldr	r1, [r3, #0]
 8019854:	460b      	mov	r3, r1
 8019856:	4619      	mov	r1, r3
 8019858:	4610      	mov	r0, r2
 801985a:	f7fe fdc9 	bl	80183f0 <nk_style_item_color>
 801985e:	4625      	mov	r5, r4
 8019860:	463c      	mov	r4, r7
 8019862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019866:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801986a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801986e:	6a3b      	ldr	r3, [r7, #32]
 8019870:	3340      	adds	r3, #64	; 0x40
 8019872:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019874:	463a      	mov	r2, r7
 8019876:	6819      	ldr	r1, [r3, #0]
 8019878:	460b      	mov	r3, r1
 801987a:	4619      	mov	r1, r3
 801987c:	4610      	mov	r0, r2
 801987e:	f7fe fdb7 	bl	80183f0 <nk_style_item_color>
 8019882:	341c      	adds	r4, #28
 8019884:	463d      	mov	r5, r7
 8019886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801988a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801988e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019892:	6a3b      	ldr	r3, [r7, #32]
 8019894:	3340      	adds	r3, #64	; 0x40
 8019896:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019898:	463a      	mov	r2, r7
 801989a:	6819      	ldr	r1, [r3, #0]
 801989c:	460b      	mov	r3, r1
 801989e:	4619      	mov	r1, r3
 80198a0:	4610      	mov	r0, r2
 80198a2:	f7fe fda5 	bl	80183f0 <nk_style_item_color>
 80198a6:	3438      	adds	r4, #56	; 0x38
 80198a8:	463d      	mov	r5, r7
 80198aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80198b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->border_color      = nk_rgba(0,0,0,0);
 80198b6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80198b8:	2300      	movs	r3, #0
 80198ba:	2200      	movs	r2, #0
 80198bc:	2100      	movs	r1, #0
 80198be:	2000      	movs	r0, #0
 80198c0:	f7f5 fe7a 	bl	800f5b8 <nk_rgba>
 80198c4:	4603      	mov	r3, r0
 80198c6:	6563      	str	r3, [r4, #84]	; 0x54
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 80198c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198ca:	6a3a      	ldr	r2, [r7, #32]
 80198cc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80198d0:	6810      	ldr	r0, [r2, #0]
 80198d2:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 80198d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198d6:	6a3a      	ldr	r2, [r7, #32]
 80198d8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80198dc:	6810      	ldr	r0, [r2, #0]
 80198de:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 80198e0:	6a3b      	ldr	r3, [r7, #32]
 80198e2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80198e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198e8:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80198ec:	6810      	ldr	r0, [r2, #0]
 80198ee:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 80198f0:	6a3b      	ldr	r3, [r7, #32]
 80198f2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80198f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198f8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80198fc:	6810      	ldr	r0, [r2, #0]
 80198fe:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 8019900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019902:	6a3a      	ldr	r2, [r7, #32]
 8019904:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8019908:	6810      	ldr	r0, [r2, #0]
 801990a:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 801990c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801990e:	6a3a      	ldr	r2, [r7, #32]
 8019910:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8019914:	6810      	ldr	r0, [r2, #0]
 8019916:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 8019918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801991a:	6a3a      	ldr	r2, [r7, #32]
 801991c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8019920:	6810      	ldr	r0, [r2, #0]
 8019922:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 8019924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019926:	6a3a      	ldr	r2, [r7, #32]
 8019928:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801992c:	6810      	ldr	r0, [r2, #0]
 801992e:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 8019930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019932:	6a3a      	ldr	r2, [r7, #32]
 8019934:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8019938:	6810      	ldr	r0, [r2, #0]
 801993a:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 801993c:	6a3b      	ldr	r3, [r7, #32]
 801993e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019944:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019948:	6810      	ldr	r0, [r2, #0]
 801994a:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801994c:	6a3b      	ldr	r3, [r7, #32]
 801994e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019954:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019958:	6810      	ldr	r0, [r2, #0]
 801995a:	6018      	str	r0, [r3, #0]
    edit->padding           = nk_vec2(0,0);
 801995c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801995e:	eddf 0a27 	vldr	s1, [pc, #156]	; 80199fc <nk_style_from_table+0x15a4>
 8019962:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80199fc <nk_style_from_table+0x15a4>
 8019966:	f7fa fb43 	bl	8013ff0 <nk_vec2>
 801996a:	eeb0 7a40 	vmov.f32	s14, s0
 801996e:	eef0 7a60 	vmov.f32	s15, s1
 8019972:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 8019976:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->cursor_size       = 8;
 801997a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801997c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019980:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 0;
 8019984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019986:	f04f 0200 	mov.w	r2, #0
 801998a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 801998e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019990:	f04f 0200 	mov.w	r2, #0
 8019994:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* chart */
    chart = &style->chart;
 8019998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801999a:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 801999e:	64fb      	str	r3, [r7, #76]	; 0x4c
    nk_zero_struct(*chart);
 80199a0:	2138      	movs	r1, #56	; 0x38
 80199a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80199a4:	f002 f8fc 	bl	801bba0 <nk_zero>
    chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);
 80199a8:	6a3b      	ldr	r3, [r7, #32]
 80199aa:	3350      	adds	r3, #80	; 0x50
 80199ac:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80199ae:	463a      	mov	r2, r7
 80199b0:	6819      	ldr	r1, [r3, #0]
 80199b2:	460b      	mov	r3, r1
 80199b4:	4619      	mov	r1, r3
 80199b6:	4610      	mov	r0, r2
 80199b8:	f7fe fd1a 	bl	80183f0 <nk_style_item_color>
 80199bc:	4625      	mov	r5, r4
 80199be:	463c      	mov	r4, r7
 80199c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80199c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80199c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80199c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    chart->border_color     = table[NK_COLOR_BORDER];
 80199cc:	6a3b      	ldr	r3, [r7, #32]
 80199ce:	f103 020c 	add.w	r2, r3, #12
 80199d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199d4:	331c      	adds	r3, #28
 80199d6:	6810      	ldr	r0, [r2, #0]
 80199d8:	6018      	str	r0, [r3, #0]
    chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];
 80199da:	6a3b      	ldr	r3, [r7, #32]
 80199dc:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80199e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199e2:	3320      	adds	r3, #32
 80199e4:	6810      	ldr	r0, [r2, #0]
 80199e6:	6018      	str	r0, [r3, #0]
    chart->color            = table[NK_COLOR_CHART_COLOR];
 80199e8:	6a3b      	ldr	r3, [r7, #32]
 80199ea:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80199ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199f0:	3324      	adds	r3, #36	; 0x24
 80199f2:	6810      	ldr	r0, [r2, #0]
 80199f4:	6018      	str	r0, [r3, #0]
 80199f6:	e003      	b.n	8019a00 <nk_style_from_table+0x15a8>
 80199f8:	41200000 	.word	0x41200000
 80199fc:	00000000 	.word	0x00000000
    chart->padding          = nk_vec2(4,4);
 8019a00:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8019a02:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019a06:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019a0a:	f7fa faf1 	bl	8013ff0 <nk_vec2>
 8019a0e:	eeb0 7a40 	vmov.f32	s14, s0
 8019a12:	eef0 7a60 	vmov.f32	s15, s1
 8019a16:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
 8019a1a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    chart->border           = 0;
 8019a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a20:	f04f 0200 	mov.w	r2, #0
 8019a24:	629a      	str	r2, [r3, #40]	; 0x28
    chart->rounding         = 0;
 8019a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a28:	f04f 0200 	mov.w	r2, #0
 8019a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* combo */
    combo = &style->combo;
 8019a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019a30:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8019a34:	64bb      	str	r3, [r7, #72]	; 0x48
    combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019a36:	6a3b      	ldr	r3, [r7, #32]
 8019a38:	334c      	adds	r3, #76	; 0x4c
 8019a3a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019a3c:	463a      	mov	r2, r7
 8019a3e:	6819      	ldr	r1, [r3, #0]
 8019a40:	460b      	mov	r3, r1
 8019a42:	4619      	mov	r1, r3
 8019a44:	4610      	mov	r0, r2
 8019a46:	f7fe fcd3 	bl	80183f0 <nk_style_item_color>
 8019a4a:	4625      	mov	r5, r4
 8019a4c:	463c      	mov	r4, r7
 8019a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019a52:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019a56:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019a5a:	6a3b      	ldr	r3, [r7, #32]
 8019a5c:	334c      	adds	r3, #76	; 0x4c
 8019a5e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019a60:	463a      	mov	r2, r7
 8019a62:	6819      	ldr	r1, [r3, #0]
 8019a64:	460b      	mov	r3, r1
 8019a66:	4619      	mov	r1, r3
 8019a68:	4610      	mov	r0, r2
 8019a6a:	f7fe fcc1 	bl	80183f0 <nk_style_item_color>
 8019a6e:	341c      	adds	r4, #28
 8019a70:	463d      	mov	r5, r7
 8019a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019a7e:	6a3b      	ldr	r3, [r7, #32]
 8019a80:	334c      	adds	r3, #76	; 0x4c
 8019a82:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019a84:	463a      	mov	r2, r7
 8019a86:	6819      	ldr	r1, [r3, #0]
 8019a88:	460b      	mov	r3, r1
 8019a8a:	4619      	mov	r1, r3
 8019a8c:	4610      	mov	r0, r2
 8019a8e:	f7fe fcaf 	bl	80183f0 <nk_style_item_color>
 8019a92:	3438      	adds	r4, #56	; 0x38
 8019a94:	463d      	mov	r5, r7
 8019a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->border_color     = table[NK_COLOR_BORDER];
 8019aa2:	6a3b      	ldr	r3, [r7, #32]
 8019aa4:	f103 020c 	add.w	r2, r3, #12
 8019aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019aaa:	3354      	adds	r3, #84	; 0x54
 8019aac:	6810      	ldr	r0, [r2, #0]
 8019aae:	6018      	str	r0, [r3, #0]
    combo->label_normal     = table[NK_COLOR_TEXT];
 8019ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ab2:	6a3a      	ldr	r2, [r7, #32]
 8019ab4:	3358      	adds	r3, #88	; 0x58
 8019ab6:	6810      	ldr	r0, [r2, #0]
 8019ab8:	6018      	str	r0, [r3, #0]
    combo->label_hover      = table[NK_COLOR_TEXT];
 8019aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019abc:	6a3a      	ldr	r2, [r7, #32]
 8019abe:	335c      	adds	r3, #92	; 0x5c
 8019ac0:	6810      	ldr	r0, [r2, #0]
 8019ac2:	6018      	str	r0, [r3, #0]
    combo->label_active     = table[NK_COLOR_TEXT];
 8019ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ac6:	6a3a      	ldr	r2, [r7, #32]
 8019ac8:	3360      	adds	r3, #96	; 0x60
 8019aca:	6810      	ldr	r0, [r2, #0]
 8019acc:	6018      	str	r0, [r3, #0]
    combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;
 8019ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ad0:	2208      	movs	r2, #8
 8019ad2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;
 8019ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ad8:	2208      	movs	r2, #8
 8019ada:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;
 8019ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ae0:	2208      	movs	r2, #8
 8019ae2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    combo->content_padding  = nk_vec2(4,4);
 8019ae6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019ae8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019aec:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019af0:	f7fa fa7e 	bl	8013ff0 <nk_vec2>
 8019af4:	eeb0 7a40 	vmov.f32	s14, s0
 8019af8:	eef0 7a60 	vmov.f32	s15, s1
 8019afc:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 8019b00:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
    combo->button_padding   = nk_vec2(0,4);
 8019b04:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019b06:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019b0a:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 80199fc <nk_style_from_table+0x15a4>
 8019b0e:	f7fa fa6f 	bl	8013ff0 <nk_vec2>
 8019b12:	eeb0 7a40 	vmov.f32	s14, s0
 8019b16:	eef0 7a60 	vmov.f32	s15, s1
 8019b1a:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8019b1e:	edc4 7a48 	vstr	s15, [r4, #288]	; 0x120
    combo->spacing          = nk_vec2(4,0);
 8019b22:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019b24:	ed5f 0a4b 	vldr	s1, [pc, #-300]	; 80199fc <nk_style_from_table+0x15a4>
 8019b28:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019b2c:	f7fa fa60 	bl	8013ff0 <nk_vec2>
 8019b30:	eeb0 7a40 	vmov.f32	s14, s0
 8019b34:	eef0 7a60 	vmov.f32	s15, s1
 8019b38:	ed84 7a49 	vstr	s14, [r4, #292]	; 0x124
 8019b3c:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
    combo->border           = 1;
 8019b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019b46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    combo->rounding         = 0;
 8019b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b4c:	f04f 0200 	mov.w	r2, #0
 8019b50:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    /* combo button */
    button = &style->combo.button;
 8019b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b56:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 8019b5a:	3310      	adds	r3, #16
 8019b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019b5e:	2198      	movs	r1, #152	; 0x98
 8019b60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019b62:	f002 f81d 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019b66:	6a3b      	ldr	r3, [r7, #32]
 8019b68:	334c      	adds	r3, #76	; 0x4c
 8019b6a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019b6c:	463a      	mov	r2, r7
 8019b6e:	6819      	ldr	r1, [r3, #0]
 8019b70:	460b      	mov	r3, r1
 8019b72:	4619      	mov	r1, r3
 8019b74:	4610      	mov	r0, r2
 8019b76:	f7fe fc3b 	bl	80183f0 <nk_style_item_color>
 8019b7a:	4625      	mov	r5, r4
 8019b7c:	463c      	mov	r4, r7
 8019b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019b82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019b86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019b8a:	6a3b      	ldr	r3, [r7, #32]
 8019b8c:	334c      	adds	r3, #76	; 0x4c
 8019b8e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019b90:	463a      	mov	r2, r7
 8019b92:	6819      	ldr	r1, [r3, #0]
 8019b94:	460b      	mov	r3, r1
 8019b96:	4619      	mov	r1, r3
 8019b98:	4610      	mov	r0, r2
 8019b9a:	f7fe fc29 	bl	80183f0 <nk_style_item_color>
 8019b9e:	341c      	adds	r4, #28
 8019ba0:	463d      	mov	r5, r7
 8019ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019bae:	6a3b      	ldr	r3, [r7, #32]
 8019bb0:	334c      	adds	r3, #76	; 0x4c
 8019bb2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019bb4:	463a      	mov	r2, r7
 8019bb6:	6819      	ldr	r1, [r3, #0]
 8019bb8:	460b      	mov	r3, r1
 8019bba:	4619      	mov	r1, r3
 8019bbc:	4610      	mov	r0, r2
 8019bbe:	f7fe fc17 	bl	80183f0 <nk_style_item_color>
 8019bc2:	3438      	adds	r4, #56	; 0x38
 8019bc4:	463d      	mov	r5, r7
 8019bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019bca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019bce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019bd2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	2200      	movs	r2, #0
 8019bd8:	2100      	movs	r1, #0
 8019bda:	2000      	movs	r0, #0
 8019bdc:	f7f5 fcec 	bl	800f5b8 <nk_rgba>
 8019be0:	4603      	mov	r3, r0
 8019be2:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_COMBO];
 8019be4:	6a3b      	ldr	r3, [r7, #32]
 8019be6:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8019bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bec:	3358      	adds	r3, #88	; 0x58
 8019bee:	6810      	ldr	r0, [r2, #0]
 8019bf0:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bf4:	6a3a      	ldr	r2, [r7, #32]
 8019bf6:	335c      	adds	r3, #92	; 0x5c
 8019bf8:	6810      	ldr	r0, [r2, #0]
 8019bfa:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bfe:	6a3a      	ldr	r2, [r7, #32]
 8019c00:	3360      	adds	r3, #96	; 0x60
 8019c02:	6810      	ldr	r0, [r2, #0]
 8019c04:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8019c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c08:	6a3a      	ldr	r2, [r7, #32]
 8019c0a:	3364      	adds	r3, #100	; 0x64
 8019c0c:	6810      	ldr	r0, [r2, #0]
 8019c0e:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8019c10:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019c12:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019c16:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019c1a:	f7fa f9e9 	bl	8013ff0 <nk_vec2>
 8019c1e:	eeb0 7a40 	vmov.f32	s14, s0
 8019c22:	eef0 7a60 	vmov.f32	s15, s1
 8019c26:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019c2a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019c2e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019c30:	ed5f 0a8e 	vldr	s1, [pc, #-568]	; 80199fc <nk_style_from_table+0x15a4>
 8019c34:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 80199fc <nk_style_from_table+0x15a4>
 8019c38:	f7fa f9da 	bl	8013ff0 <nk_vec2>
 8019c3c:	eeb0 7a40 	vmov.f32	s14, s0
 8019c40:	eef0 7a60 	vmov.f32	s15, s1
 8019c44:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019c48:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019c4c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019c4e:	2000      	movs	r0, #0
 8019c50:	f7f8 fd82 	bl	8012758 <nk_handle_ptr>
 8019c54:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c5a:	2212      	movs	r2, #18
 8019c5c:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8019c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c60:	f04f 0200 	mov.w	r2, #0
 8019c64:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c68:	f04f 0200 	mov.w	r2, #0
 8019c6c:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c70:	2200      	movs	r2, #0
 8019c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c78:	2200      	movs	r2, #0
 8019c7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* tab */
    tab = &style->tab;
 8019c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c80:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8019c84:	331c      	adds	r3, #28
 8019c86:	647b      	str	r3, [r7, #68]	; 0x44
    tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8019c88:	6a3b      	ldr	r3, [r7, #32]
 8019c8a:	336c      	adds	r3, #108	; 0x6c
 8019c8c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8019c8e:	463a      	mov	r2, r7
 8019c90:	6819      	ldr	r1, [r3, #0]
 8019c92:	460b      	mov	r3, r1
 8019c94:	4619      	mov	r1, r3
 8019c96:	4610      	mov	r0, r2
 8019c98:	f7fe fbaa 	bl	80183f0 <nk_style_item_color>
 8019c9c:	4625      	mov	r5, r4
 8019c9e:	463c      	mov	r4, r7
 8019ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019ca4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019ca8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    tab->border_color       = table[NK_COLOR_BORDER];
 8019cac:	6a3b      	ldr	r3, [r7, #32]
 8019cae:	f103 020c 	add.w	r2, r3, #12
 8019cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cb4:	331c      	adds	r3, #28
 8019cb6:	6810      	ldr	r0, [r2, #0]
 8019cb8:	6018      	str	r0, [r3, #0]
    tab->text               = table[NK_COLOR_TEXT];
 8019cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cbc:	6a3a      	ldr	r2, [r7, #32]
 8019cbe:	3320      	adds	r3, #32
 8019cc0:	6810      	ldr	r0, [r2, #0]
 8019cc2:	6018      	str	r0, [r3, #0]
    tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;
 8019cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cc6:	220a      	movs	r2, #10
 8019cc8:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;
 8019ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cce:	2208      	movs	r2, #8
 8019cd0:	f883 2285 	strb.w	r2, [r3, #645]	; 0x285
    tab->padding            = nk_vec2(4,4);
 8019cd4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8019cd6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019cda:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019cde:	f7fa f987 	bl	8013ff0 <nk_vec2>
 8019ce2:	eeb0 7a40 	vmov.f32	s14, s0
 8019ce6:	eef0 7a60 	vmov.f32	s15, s1
 8019cea:	ed84 7aa5 	vstr	s14, [r4, #660]	; 0x294
 8019cee:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
    tab->spacing            = nk_vec2(4,4);
 8019cf2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8019cf4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019cf8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019cfc:	f7fa f978 	bl	8013ff0 <nk_vec2>
 8019d00:	eeb0 7a40 	vmov.f32	s14, s0
 8019d04:	eef0 7a60 	vmov.f32	s15, s1
 8019d08:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 8019d0c:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    tab->indent             = 10.0f;
 8019d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d12:	4aca      	ldr	r2, [pc, #808]	; (801a03c <nk_style_from_table+0x1be4>)
 8019d14:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    tab->border             = 1;
 8019d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019d1e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    tab->rounding           = 0;
 8019d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d24:	f04f 0200 	mov.w	r2, #0
 8019d28:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

    /* tab button */
    button = &style->tab.tab_minimize_button;
 8019d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d2e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8019d32:	3318      	adds	r3, #24
 8019d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019d36:	2198      	movs	r1, #152	; 0x98
 8019d38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019d3a:	f001 ff31 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8019d3e:	6a3b      	ldr	r3, [r7, #32]
 8019d40:	336c      	adds	r3, #108	; 0x6c
 8019d42:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019d44:	463a      	mov	r2, r7
 8019d46:	6819      	ldr	r1, [r3, #0]
 8019d48:	460b      	mov	r3, r1
 8019d4a:	4619      	mov	r1, r3
 8019d4c:	4610      	mov	r0, r2
 8019d4e:	f7fe fb4f 	bl	80183f0 <nk_style_item_color>
 8019d52:	4625      	mov	r5, r4
 8019d54:	463c      	mov	r4, r7
 8019d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d5a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019d5e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8019d62:	6a3b      	ldr	r3, [r7, #32]
 8019d64:	336c      	adds	r3, #108	; 0x6c
 8019d66:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019d68:	463a      	mov	r2, r7
 8019d6a:	6819      	ldr	r1, [r3, #0]
 8019d6c:	460b      	mov	r3, r1
 8019d6e:	4619      	mov	r1, r3
 8019d70:	4610      	mov	r0, r2
 8019d72:	f7fe fb3d 	bl	80183f0 <nk_style_item_color>
 8019d76:	341c      	adds	r4, #28
 8019d78:	463d      	mov	r5, r7
 8019d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8019d86:	6a3b      	ldr	r3, [r7, #32]
 8019d88:	336c      	adds	r3, #108	; 0x6c
 8019d8a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019d8c:	463a      	mov	r2, r7
 8019d8e:	6819      	ldr	r1, [r3, #0]
 8019d90:	460b      	mov	r3, r1
 8019d92:	4619      	mov	r1, r3
 8019d94:	4610      	mov	r0, r2
 8019d96:	f7fe fb2b 	bl	80183f0 <nk_style_item_color>
 8019d9a:	3438      	adds	r4, #56	; 0x38
 8019d9c:	463d      	mov	r5, r7
 8019d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019da2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019daa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019dac:	2300      	movs	r3, #0
 8019dae:	2200      	movs	r2, #0
 8019db0:	2100      	movs	r1, #0
 8019db2:	2000      	movs	r0, #0
 8019db4:	f7f5 fc00 	bl	800f5b8 <nk_rgba>
 8019db8:	4603      	mov	r3, r0
 8019dba:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 8019dbc:	6a3b      	ldr	r3, [r7, #32]
 8019dbe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8019dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019dc4:	3358      	adds	r3, #88	; 0x58
 8019dc6:	6810      	ldr	r0, [r2, #0]
 8019dc8:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019dcc:	6a3a      	ldr	r2, [r7, #32]
 8019dce:	335c      	adds	r3, #92	; 0x5c
 8019dd0:	6810      	ldr	r0, [r2, #0]
 8019dd2:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019dd6:	6a3a      	ldr	r2, [r7, #32]
 8019dd8:	3360      	adds	r3, #96	; 0x60
 8019dda:	6810      	ldr	r0, [r2, #0]
 8019ddc:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8019dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019de0:	6a3a      	ldr	r2, [r7, #32]
 8019de2:	3364      	adds	r3, #100	; 0x64
 8019de4:	6810      	ldr	r0, [r2, #0]
 8019de6:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8019de8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019dea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019dee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019df2:	f7fa f8fd 	bl	8013ff0 <nk_vec2>
 8019df6:	eeb0 7a40 	vmov.f32	s14, s0
 8019dfa:	eef0 7a60 	vmov.f32	s15, s1
 8019dfe:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019e02:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019e06:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e08:	eddf 0a8d 	vldr	s1, [pc, #564]	; 801a040 <nk_style_from_table+0x1be8>
 8019e0c:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801a040 <nk_style_from_table+0x1be8>
 8019e10:	f7fa f8ee 	bl	8013ff0 <nk_vec2>
 8019e14:	eeb0 7a40 	vmov.f32	s14, s0
 8019e18:	eef0 7a60 	vmov.f32	s15, s1
 8019e1c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019e20:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019e24:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e26:	2000      	movs	r0, #0
 8019e28:	f7f8 fc96 	bl	8012758 <nk_handle_ptr>
 8019e2c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e32:	2212      	movs	r2, #18
 8019e34:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8019e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e38:	f04f 0200 	mov.w	r2, #0
 8019e3c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e40:	f04f 0200 	mov.w	r2, #0
 8019e44:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e48:	2200      	movs	r2, #0
 8019e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e50:	2200      	movs	r2, #0
 8019e52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.tab_maximize_button =*button;
 8019e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8019e5e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019e62:	4611      	mov	r1, r2
 8019e64:	2298      	movs	r2, #152	; 0x98
 8019e66:	4618      	mov	r0, r3
 8019e68:	f004 f9ba 	bl	801e1e0 <memcpy>

    /* node button */
    button = &style->tab.node_minimize_button;
 8019e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e6e:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8019e72:	3308      	adds	r3, #8
 8019e74:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019e76:	2198      	movs	r1, #152	; 0x98
 8019e78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019e7a:	f001 fe91 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8019e7e:	6a3b      	ldr	r3, [r7, #32]
 8019e80:	3304      	adds	r3, #4
 8019e82:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019e84:	463a      	mov	r2, r7
 8019e86:	6819      	ldr	r1, [r3, #0]
 8019e88:	460b      	mov	r3, r1
 8019e8a:	4619      	mov	r1, r3
 8019e8c:	4610      	mov	r0, r2
 8019e8e:	f7fe faaf 	bl	80183f0 <nk_style_item_color>
 8019e92:	4625      	mov	r5, r4
 8019e94:	463c      	mov	r4, r7
 8019e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019e9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019e9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8019ea2:	6a3b      	ldr	r3, [r7, #32]
 8019ea4:	3304      	adds	r3, #4
 8019ea6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019ea8:	463a      	mov	r2, r7
 8019eaa:	6819      	ldr	r1, [r3, #0]
 8019eac:	460b      	mov	r3, r1
 8019eae:	4619      	mov	r1, r3
 8019eb0:	4610      	mov	r0, r2
 8019eb2:	f7fe fa9d 	bl	80183f0 <nk_style_item_color>
 8019eb6:	341c      	adds	r4, #28
 8019eb8:	463d      	mov	r5, r7
 8019eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019ec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8019ec6:	6a3b      	ldr	r3, [r7, #32]
 8019ec8:	3304      	adds	r3, #4
 8019eca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019ecc:	463a      	mov	r2, r7
 8019ece:	6819      	ldr	r1, [r3, #0]
 8019ed0:	460b      	mov	r3, r1
 8019ed2:	4619      	mov	r1, r3
 8019ed4:	4610      	mov	r0, r2
 8019ed6:	f7fe fa8b 	bl	80183f0 <nk_style_item_color>
 8019eda:	3438      	adds	r4, #56	; 0x38
 8019edc:	463d      	mov	r5, r7
 8019ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019eea:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019eec:	2300      	movs	r3, #0
 8019eee:	2200      	movs	r2, #0
 8019ef0:	2100      	movs	r1, #0
 8019ef2:	2000      	movs	r0, #0
 8019ef4:	f7f5 fb60 	bl	800f5b8 <nk_rgba>
 8019ef8:	4603      	mov	r3, r0
 8019efa:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 8019efc:	6a3b      	ldr	r3, [r7, #32]
 8019efe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8019f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f04:	3358      	adds	r3, #88	; 0x58
 8019f06:	6810      	ldr	r0, [r2, #0]
 8019f08:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f0c:	6a3a      	ldr	r2, [r7, #32]
 8019f0e:	335c      	adds	r3, #92	; 0x5c
 8019f10:	6810      	ldr	r0, [r2, #0]
 8019f12:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f16:	6a3a      	ldr	r2, [r7, #32]
 8019f18:	3360      	adds	r3, #96	; 0x60
 8019f1a:	6810      	ldr	r0, [r2, #0]
 8019f1c:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8019f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f20:	6a3a      	ldr	r2, [r7, #32]
 8019f22:	3364      	adds	r3, #100	; 0x64
 8019f24:	6810      	ldr	r0, [r2, #0]
 8019f26:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8019f28:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019f2a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019f2e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019f32:	f7fa f85d 	bl	8013ff0 <nk_vec2>
 8019f36:	eeb0 7a40 	vmov.f32	s14, s0
 8019f3a:	eef0 7a60 	vmov.f32	s15, s1
 8019f3e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019f42:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019f46:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019f48:	eddf 0a3d 	vldr	s1, [pc, #244]	; 801a040 <nk_style_from_table+0x1be8>
 8019f4c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801a040 <nk_style_from_table+0x1be8>
 8019f50:	f7fa f84e 	bl	8013ff0 <nk_vec2>
 8019f54:	eeb0 7a40 	vmov.f32	s14, s0
 8019f58:	eef0 7a60 	vmov.f32	s15, s1
 8019f5c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019f60:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019f64:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019f66:	2000      	movs	r0, #0
 8019f68:	f7f8 fbf6 	bl	8012758 <nk_handle_ptr>
 8019f6c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f72:	2212      	movs	r2, #18
 8019f74:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8019f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f78:	f04f 0200 	mov.w	r2, #0
 8019f7c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f80:	f04f 0200 	mov.w	r2, #0
 8019f84:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f88:	2200      	movs	r2, #0
 8019f8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f90:	2200      	movs	r2, #0
 8019f92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.node_maximize_button =*button;
 8019f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8019f9e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8019fa2:	4611      	mov	r1, r2
 8019fa4:	2298      	movs	r2, #152	; 0x98
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f004 f91a 	bl	801e1e0 <memcpy>

    /* window header */
    win = &style->window;
 8019fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019fae:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 8019fb2:	330c      	adds	r3, #12
 8019fb4:	643b      	str	r3, [r7, #64]	; 0x40
    win->header.align = NK_HEADER_RIGHT;
 8019fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fb8:	2201      	movs	r2, #1
 8019fba:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
    win->header.close_symbol = NK_SYMBOL_X;
 8019fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fc0:	2201      	movs	r2, #1
 8019fc2:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    win->header.minimize_symbol = NK_SYMBOL_MINUS;
 8019fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fc8:	220c      	movs	r2, #12
 8019fca:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
    win->header.maximize_symbol = NK_SYMBOL_PLUS;
 8019fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fd0:	220b      	movs	r2, #11
 8019fd2:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019fd6:	6a3b      	ldr	r3, [r7, #32]
 8019fd8:	3308      	adds	r3, #8
 8019fda:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019fdc:	463a      	mov	r2, r7
 8019fde:	6819      	ldr	r1, [r3, #0]
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	4619      	mov	r1, r3
 8019fe4:	4610      	mov	r0, r2
 8019fe6:	f7fe fa03 	bl	80183f0 <nk_style_item_color>
 8019fea:	4625      	mov	r5, r4
 8019fec:	463c      	mov	r4, r7
 8019fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019ff2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019ff6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019ffa:	6a3b      	ldr	r3, [r7, #32]
 8019ffc:	3308      	adds	r3, #8
 8019ffe:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a000:	463a      	mov	r2, r7
 801a002:	6819      	ldr	r1, [r3, #0]
 801a004:	460b      	mov	r3, r1
 801a006:	4619      	mov	r1, r3
 801a008:	4610      	mov	r0, r2
 801a00a:	f7fe f9f1 	bl	80183f0 <nk_style_item_color>
 801a00e:	341c      	adds	r4, #28
 801a010:	463d      	mov	r5, r7
 801a012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a01a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a01e:	6a3b      	ldr	r3, [r7, #32]
 801a020:	3308      	adds	r3, #8
 801a022:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a024:	463a      	mov	r2, r7
 801a026:	6819      	ldr	r1, [r3, #0]
 801a028:	460b      	mov	r3, r1
 801a02a:	4619      	mov	r1, r3
 801a02c:	4610      	mov	r0, r2
 801a02e:	f7fe f9df 	bl	80183f0 <nk_style_item_color>
 801a032:	3438      	adds	r4, #56	; 0x38
 801a034:	463d      	mov	r5, r7
 801a036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a038:	e004      	b.n	801a044 <nk_style_from_table+0x1bec>
 801a03a:	bf00      	nop
 801a03c:	41200000 	.word	0x41200000
 801a040:	00000000 	.word	0x00000000
 801a044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a046:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a04a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.label_normal = table[NK_COLOR_TEXT];
 801a04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a050:	6a3a      	ldr	r2, [r7, #32]
 801a052:	f203 1387 	addw	r3, r3, #391	; 0x187
 801a056:	6812      	ldr	r2, [r2, #0]
 801a058:	601a      	str	r2, [r3, #0]
    win->header.label_hover = table[NK_COLOR_TEXT];
 801a05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a05c:	6a3a      	ldr	r2, [r7, #32]
 801a05e:	f203 138b 	addw	r3, r3, #395	; 0x18b
 801a062:	6812      	ldr	r2, [r2, #0]
 801a064:	601a      	str	r2, [r3, #0]
    win->header.label_active = table[NK_COLOR_TEXT];
 801a066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a068:	6a3a      	ldr	r2, [r7, #32]
 801a06a:	f203 138f 	addw	r3, r3, #399	; 0x18f
 801a06e:	6812      	ldr	r2, [r2, #0]
 801a070:	601a      	str	r2, [r3, #0]
    win->header.label_padding = nk_vec2(4,4);
 801a072:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a074:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a078:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a07c:	f7f9 ffb8 	bl	8013ff0 <nk_vec2>
 801a080:	eeb0 7a40 	vmov.f32	s14, s0
 801a084:	eef0 7a60 	vmov.f32	s15, s1
 801a088:	ed84 7a67 	vstr	s14, [r4, #412]	; 0x19c
 801a08c:	edc4 7a68 	vstr	s15, [r4, #416]	; 0x1a0
    win->header.padding = nk_vec2(4,4);
 801a090:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a092:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a096:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a09a:	f7f9 ffa9 	bl	8013ff0 <nk_vec2>
 801a09e:	eeb0 7a40 	vmov.f32	s14, s0
 801a0a2:	eef0 7a60 	vmov.f32	s15, s1
 801a0a6:	ed84 7a65 	vstr	s14, [r4, #404]	; 0x194
 801a0aa:	edc4 7a66 	vstr	s15, [r4, #408]	; 0x198
    win->header.spacing = nk_vec2(0,0);
 801a0ae:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a0b0:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801a040 <nk_style_from_table+0x1be8>
 801a0b4:	ed1f 0a1e 	vldr	s0, [pc, #-120]	; 801a040 <nk_style_from_table+0x1be8>
 801a0b8:	f7f9 ff9a 	bl	8013ff0 <nk_vec2>
 801a0bc:	eeb0 7a40 	vmov.f32	s14, s0
 801a0c0:	eef0 7a60 	vmov.f32	s15, s1
 801a0c4:	ed84 7a69 	vstr	s14, [r4, #420]	; 0x1a4
 801a0c8:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8

    /* window header close button */
    button = &style->window.header.close_button;
 801a0cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a0ce:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 801a0d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a0d4:	2198      	movs	r1, #152	; 0x98
 801a0d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a0d8:	f001 fd62 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a0dc:	6a3b      	ldr	r3, [r7, #32]
 801a0de:	3308      	adds	r3, #8
 801a0e0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a0e2:	463a      	mov	r2, r7
 801a0e4:	6819      	ldr	r1, [r3, #0]
 801a0e6:	460b      	mov	r3, r1
 801a0e8:	4619      	mov	r1, r3
 801a0ea:	4610      	mov	r0, r2
 801a0ec:	f7fe f980 	bl	80183f0 <nk_style_item_color>
 801a0f0:	4625      	mov	r5, r4
 801a0f2:	463c      	mov	r4, r7
 801a0f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a0f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a0f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a0fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a100:	6a3b      	ldr	r3, [r7, #32]
 801a102:	3308      	adds	r3, #8
 801a104:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a106:	463a      	mov	r2, r7
 801a108:	6819      	ldr	r1, [r3, #0]
 801a10a:	460b      	mov	r3, r1
 801a10c:	4619      	mov	r1, r3
 801a10e:	4610      	mov	r0, r2
 801a110:	f7fe f96e 	bl	80183f0 <nk_style_item_color>
 801a114:	341c      	adds	r4, #28
 801a116:	463d      	mov	r5, r7
 801a118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a11c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a124:	6a3b      	ldr	r3, [r7, #32]
 801a126:	3308      	adds	r3, #8
 801a128:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a12a:	463a      	mov	r2, r7
 801a12c:	6819      	ldr	r1, [r3, #0]
 801a12e:	460b      	mov	r3, r1
 801a130:	4619      	mov	r1, r3
 801a132:	4610      	mov	r0, r2
 801a134:	f7fe f95c 	bl	80183f0 <nk_style_item_color>
 801a138:	3438      	adds	r4, #56	; 0x38
 801a13a:	463d      	mov	r5, r7
 801a13c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a13e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a140:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a148:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a14a:	2300      	movs	r3, #0
 801a14c:	2200      	movs	r2, #0
 801a14e:	2100      	movs	r1, #0
 801a150:	2000      	movs	r0, #0
 801a152:	f7f5 fa31 	bl	800f5b8 <nk_rgba>
 801a156:	4603      	mov	r3, r0
 801a158:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801a15a:	6a3b      	ldr	r3, [r7, #32]
 801a15c:	f103 0208 	add.w	r2, r3, #8
 801a160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a162:	3358      	adds	r3, #88	; 0x58
 801a164:	6810      	ldr	r0, [r2, #0]
 801a166:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a16a:	6a3a      	ldr	r2, [r7, #32]
 801a16c:	335c      	adds	r3, #92	; 0x5c
 801a16e:	6810      	ldr	r0, [r2, #0]
 801a170:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a174:	6a3a      	ldr	r2, [r7, #32]
 801a176:	3360      	adds	r3, #96	; 0x60
 801a178:	6810      	ldr	r0, [r2, #0]
 801a17a:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a17e:	6a3a      	ldr	r2, [r7, #32]
 801a180:	3364      	adds	r3, #100	; 0x64
 801a182:	6810      	ldr	r0, [r2, #0]
 801a184:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801a186:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a188:	ed5f 0a53 	vldr	s1, [pc, #-332]	; 801a040 <nk_style_from_table+0x1be8>
 801a18c:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 801a040 <nk_style_from_table+0x1be8>
 801a190:	f7f9 ff2e 	bl	8013ff0 <nk_vec2>
 801a194:	eeb0 7a40 	vmov.f32	s14, s0
 801a198:	eef0 7a60 	vmov.f32	s15, s1
 801a19c:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a1a0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a1a4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a1a6:	ed5f 0a5a 	vldr	s1, [pc, #-360]	; 801a040 <nk_style_from_table+0x1be8>
 801a1aa:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 801a040 <nk_style_from_table+0x1be8>
 801a1ae:	f7f9 ff1f 	bl	8013ff0 <nk_vec2>
 801a1b2:	eeb0 7a40 	vmov.f32	s14, s0
 801a1b6:	eef0 7a60 	vmov.f32	s15, s1
 801a1ba:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a1be:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a1c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a1c4:	2000      	movs	r0, #0
 801a1c6:	f7f8 fac7 	bl	8012758 <nk_handle_ptr>
 801a1ca:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1d0:	2212      	movs	r2, #18
 801a1d2:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1d6:	f04f 0200 	mov.w	r2, #0
 801a1da:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1de:	f04f 0200 	mov.w	r2, #0
 801a1e2:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a1e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a1ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window header minimize button */
    button = &style->window.header.minimize_button;
 801a1f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a1f6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 801a1fa:	3318      	adds	r3, #24
 801a1fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a1fe:	2198      	movs	r1, #152	; 0x98
 801a200:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a202:	f001 fccd 	bl	801bba0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a206:	6a3b      	ldr	r3, [r7, #32]
 801a208:	3308      	adds	r3, #8
 801a20a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a20c:	463a      	mov	r2, r7
 801a20e:	6819      	ldr	r1, [r3, #0]
 801a210:	460b      	mov	r3, r1
 801a212:	4619      	mov	r1, r3
 801a214:	4610      	mov	r0, r2
 801a216:	f7fe f8eb 	bl	80183f0 <nk_style_item_color>
 801a21a:	4625      	mov	r5, r4
 801a21c:	463c      	mov	r4, r7
 801a21e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a222:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a226:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a22a:	6a3b      	ldr	r3, [r7, #32]
 801a22c:	3308      	adds	r3, #8
 801a22e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a230:	463a      	mov	r2, r7
 801a232:	6819      	ldr	r1, [r3, #0]
 801a234:	460b      	mov	r3, r1
 801a236:	4619      	mov	r1, r3
 801a238:	4610      	mov	r0, r2
 801a23a:	f7fe f8d9 	bl	80183f0 <nk_style_item_color>
 801a23e:	341c      	adds	r4, #28
 801a240:	463d      	mov	r5, r7
 801a242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a246:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a24a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a24e:	6a3b      	ldr	r3, [r7, #32]
 801a250:	3308      	adds	r3, #8
 801a252:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a254:	463a      	mov	r2, r7
 801a256:	6819      	ldr	r1, [r3, #0]
 801a258:	460b      	mov	r3, r1
 801a25a:	4619      	mov	r1, r3
 801a25c:	4610      	mov	r0, r2
 801a25e:	f7fe f8c7 	bl	80183f0 <nk_style_item_color>
 801a262:	3438      	adds	r4, #56	; 0x38
 801a264:	463d      	mov	r5, r7
 801a266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a26a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a26e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a272:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a274:	2300      	movs	r3, #0
 801a276:	2200      	movs	r2, #0
 801a278:	2100      	movs	r1, #0
 801a27a:	2000      	movs	r0, #0
 801a27c:	f7f5 f99c 	bl	800f5b8 <nk_rgba>
 801a280:	4603      	mov	r3, r0
 801a282:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801a284:	6a3b      	ldr	r3, [r7, #32]
 801a286:	f103 0208 	add.w	r2, r3, #8
 801a28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a28c:	3358      	adds	r3, #88	; 0x58
 801a28e:	6810      	ldr	r0, [r2, #0]
 801a290:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a294:	6a3a      	ldr	r2, [r7, #32]
 801a296:	335c      	adds	r3, #92	; 0x5c
 801a298:	6810      	ldr	r0, [r2, #0]
 801a29a:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a29c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a29e:	6a3a      	ldr	r2, [r7, #32]
 801a2a0:	3360      	adds	r3, #96	; 0x60
 801a2a2:	6810      	ldr	r0, [r2, #0]
 801a2a4:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2a8:	6a3a      	ldr	r2, [r7, #32]
 801a2aa:	3364      	adds	r3, #100	; 0x64
 801a2ac:	6810      	ldr	r0, [r2, #0]
 801a2ae:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801a2b0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a2b2:	ed5f 0a9d 	vldr	s1, [pc, #-628]	; 801a040 <nk_style_from_table+0x1be8>
 801a2b6:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 801a040 <nk_style_from_table+0x1be8>
 801a2ba:	f7f9 fe99 	bl	8013ff0 <nk_vec2>
 801a2be:	eeb0 7a40 	vmov.f32	s14, s0
 801a2c2:	eef0 7a60 	vmov.f32	s15, s1
 801a2c6:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a2ca:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a2ce:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a2d0:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 801a040 <nk_style_from_table+0x1be8>
 801a2d4:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 801a040 <nk_style_from_table+0x1be8>
 801a2d8:	f7f9 fe8a 	bl	8013ff0 <nk_vec2>
 801a2dc:	eeb0 7a40 	vmov.f32	s14, s0
 801a2e0:	eef0 7a60 	vmov.f32	s15, s1
 801a2e4:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a2e8:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a2ec:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a2ee:	2000      	movs	r0, #0
 801a2f0:	f7f8 fa32 	bl	8012758 <nk_handle_ptr>
 801a2f4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2fa:	2212      	movs	r2, #18
 801a2fc:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a300:	f04f 0200 	mov.w	r2, #0
 801a304:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a308:	f04f 0200 	mov.w	r2, #0
 801a30c:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a310:	2200      	movs	r2, #0
 801a312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a318:	2200      	movs	r2, #0
 801a31a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window */
    win->background = table[NK_COLOR_WINDOW];
 801a31e:	6a3b      	ldr	r3, [r7, #32]
 801a320:	1d1a      	adds	r2, r3, #4
 801a322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a324:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801a328:	6810      	ldr	r0, [r2, #0]
 801a32a:	6018      	str	r0, [r3, #0]
    win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a32c:	6a3b      	ldr	r3, [r7, #32]
 801a32e:	3304      	adds	r3, #4
 801a330:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a332:	463a      	mov	r2, r7
 801a334:	6819      	ldr	r1, [r3, #0]
 801a336:	460b      	mov	r3, r1
 801a338:	4619      	mov	r1, r3
 801a33a:	4610      	mov	r0, r2
 801a33c:	f7fe f858 	bl	80183f0 <nk_style_item_color>
 801a340:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
 801a344:	463d      	mov	r5, r7
 801a346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a34a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a34e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->border_color = table[NK_COLOR_BORDER];
 801a352:	6a3b      	ldr	r3, [r7, #32]
 801a354:	f103 020c 	add.w	r2, r3, #12
 801a358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a35a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801a35e:	6810      	ldr	r0, [r2, #0]
 801a360:	6018      	str	r0, [r3, #0]
    win->popup_border_color = table[NK_COLOR_BORDER];
 801a362:	6a3b      	ldr	r3, [r7, #32]
 801a364:	f103 020c 	add.w	r2, r3, #12
 801a368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a36a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 801a36e:	6810      	ldr	r0, [r2, #0]
 801a370:	6018      	str	r0, [r3, #0]
    win->combo_border_color = table[NK_COLOR_BORDER];
 801a372:	6a3b      	ldr	r3, [r7, #32]
 801a374:	f103 020c 	add.w	r2, r3, #12
 801a378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a37a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801a37e:	6810      	ldr	r0, [r2, #0]
 801a380:	6018      	str	r0, [r3, #0]
    win->contextual_border_color = table[NK_COLOR_BORDER];
 801a382:	6a3b      	ldr	r3, [r7, #32]
 801a384:	f103 020c 	add.w	r2, r3, #12
 801a388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a38a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801a38e:	6810      	ldr	r0, [r2, #0]
 801a390:	6018      	str	r0, [r3, #0]
    win->menu_border_color = table[NK_COLOR_BORDER];
 801a392:	6a3b      	ldr	r3, [r7, #32]
 801a394:	f103 020c 	add.w	r2, r3, #12
 801a398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a39a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801a39e:	6810      	ldr	r0, [r2, #0]
 801a3a0:	6018      	str	r0, [r3, #0]
    win->group_border_color = table[NK_COLOR_BORDER];
 801a3a2:	6a3b      	ldr	r3, [r7, #32]
 801a3a4:	f103 020c 	add.w	r2, r3, #12
 801a3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3aa:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801a3ae:	6810      	ldr	r0, [r2, #0]
 801a3b0:	6018      	str	r0, [r3, #0]
    win->tooltip_border_color = table[NK_COLOR_BORDER];
 801a3b2:	6a3b      	ldr	r3, [r7, #32]
 801a3b4:	f103 020c 	add.w	r2, r3, #12
 801a3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801a3be:	6810      	ldr	r0, [r2, #0]
 801a3c0:	6018      	str	r0, [r3, #0]
    win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);
 801a3c2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a3c4:	463a      	mov	r2, r7
 801a3c6:	6a3b      	ldr	r3, [r7, #32]
 801a3c8:	6819      	ldr	r1, [r3, #0]
 801a3ca:	460b      	mov	r3, r1
 801a3cc:	4619      	mov	r1, r3
 801a3ce:	4610      	mov	r0, r2
 801a3d0:	f7fe f80e 	bl	80183f0 <nk_style_item_color>
 801a3d4:	f504 74f4 	add.w	r4, r4, #488	; 0x1e8
 801a3d8:	463d      	mov	r5, r7
 801a3da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a3dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a3de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a3e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    win->rounding = 0.0f;
 801a3e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3e8:	f04f 0200 	mov.w	r2, #0
 801a3ec:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    win->spacing = nk_vec2(4,4);
 801a3f0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a3f2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a3f6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a3fa:	f7f9 fdf9 	bl	8013ff0 <nk_vec2>
 801a3fe:	eeb0 7a40 	vmov.f32	s14, s0
 801a402:	eef0 7a60 	vmov.f32	s15, s1
 801a406:	ed84 7a8a 	vstr	s14, [r4, #552]	; 0x228
 801a40a:	edc4 7a8b 	vstr	s15, [r4, #556]	; 0x22c
    win->scrollbar_size = nk_vec2(20,20);
 801a40e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a410:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 801a414:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801a418:	f7f9 fdea 	bl	8013ff0 <nk_vec2>
 801a41c:	eeb0 7a40 	vmov.f32	s14, s0
 801a420:	eef0 7a60 	vmov.f32	s15, s1
 801a424:	ed84 7a8c 	vstr	s14, [r4, #560]	; 0x230
 801a428:	edc4 7a8d 	vstr	s15, [r4, #564]	; 0x234
    win->min_size = nk_vec2(64,64);
 801a42c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a42e:	eddf 0a52 	vldr	s1, [pc, #328]	; 801a578 <nk_style_from_table+0x2120>
 801a432:	ed9f 0a51 	vldr	s0, [pc, #324]	; 801a578 <nk_style_from_table+0x2120>
 801a436:	f7f9 fddb 	bl	8013ff0 <nk_vec2>
 801a43a:	eeb0 7a40 	vmov.f32	s14, s0
 801a43e:	eef0 7a60 	vmov.f32	s15, s1
 801a442:	ed84 7a8e 	vstr	s14, [r4, #568]	; 0x238
 801a446:	edc4 7a8f 	vstr	s15, [r4, #572]	; 0x23c

    win->combo_border = 1.0f;
 801a44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a44c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a450:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    win->contextual_border = 1.0f;
 801a454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a456:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a45a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    win->menu_border = 1.0f;
 801a45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a460:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a464:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    win->group_border = 1.0f;
 801a468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a46a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a46e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    win->tooltip_border = 1.0f;
 801a472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a474:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a478:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    win->popup_border = 1.0f;
 801a47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a47e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a482:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    win->border = 2.0f;
 801a486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a48c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    win->min_row_height_padding = 8;
 801a490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a492:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801a496:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    win->padding = nk_vec2(4,4);
 801a49a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a49c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a4a0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a4a4:	f7f9 fda4 	bl	8013ff0 <nk_vec2>
 801a4a8:	eeb0 7a40 	vmov.f32	s14, s0
 801a4ac:	eef0 7a60 	vmov.f32	s15, s1
 801a4b0:	ed84 7a90 	vstr	s14, [r4, #576]	; 0x240
 801a4b4:	edc4 7a91 	vstr	s15, [r4, #580]	; 0x244
    win->group_padding = nk_vec2(4,4);
 801a4b8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a4ba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a4be:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a4c2:	f7f9 fd95 	bl	8013ff0 <nk_vec2>
 801a4c6:	eeb0 7a40 	vmov.f32	s14, s0
 801a4ca:	eef0 7a60 	vmov.f32	s15, s1
 801a4ce:	ed84 7a92 	vstr	s14, [r4, #584]	; 0x248
 801a4d2:	edc4 7a93 	vstr	s15, [r4, #588]	; 0x24c
    win->popup_padding = nk_vec2(4,4);
 801a4d6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a4d8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a4dc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a4e0:	f7f9 fd86 	bl	8013ff0 <nk_vec2>
 801a4e4:	eeb0 7a40 	vmov.f32	s14, s0
 801a4e8:	eef0 7a60 	vmov.f32	s15, s1
 801a4ec:	ed84 7a94 	vstr	s14, [r4, #592]	; 0x250
 801a4f0:	edc4 7a95 	vstr	s15, [r4, #596]	; 0x254
    win->combo_padding = nk_vec2(4,4);
 801a4f4:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a4f6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a4fa:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a4fe:	f7f9 fd77 	bl	8013ff0 <nk_vec2>
 801a502:	eeb0 7a40 	vmov.f32	s14, s0
 801a506:	eef0 7a60 	vmov.f32	s15, s1
 801a50a:	ed84 7a96 	vstr	s14, [r4, #600]	; 0x258
 801a50e:	edc4 7a97 	vstr	s15, [r4, #604]	; 0x25c
    win->contextual_padding = nk_vec2(4,4);
 801a512:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a514:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a518:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a51c:	f7f9 fd68 	bl	8013ff0 <nk_vec2>
 801a520:	eeb0 7a40 	vmov.f32	s14, s0
 801a524:	eef0 7a60 	vmov.f32	s15, s1
 801a528:	ed84 7a98 	vstr	s14, [r4, #608]	; 0x260
 801a52c:	edc4 7a99 	vstr	s15, [r4, #612]	; 0x264
    win->menu_padding = nk_vec2(4,4);
 801a530:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a532:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a536:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a53a:	f7f9 fd59 	bl	8013ff0 <nk_vec2>
 801a53e:	eeb0 7a40 	vmov.f32	s14, s0
 801a542:	eef0 7a60 	vmov.f32	s15, s1
 801a546:	ed84 7a9a 	vstr	s14, [r4, #616]	; 0x268
 801a54a:	edc4 7a9b 	vstr	s15, [r4, #620]	; 0x26c
    win->tooltip_padding = nk_vec2(4,4);
 801a54e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a550:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a554:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a558:	f7f9 fd4a 	bl	8013ff0 <nk_vec2>
 801a55c:	eeb0 7a40 	vmov.f32	s14, s0
 801a560:	eef0 7a60 	vmov.f32	s15, s1
 801a564:	ed84 7a9c 	vstr	s14, [r4, #624]	; 0x270
 801a568:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
 801a56c:	e000      	b.n	801a570 <nk_style_from_table+0x2118>
    if (!ctx) return;
 801a56e:	bf00      	nop
}
 801a570:	3778      	adds	r7, #120	; 0x78
 801a572:	46bd      	mov	sp, r7
 801a574:	bdb0      	pop	{r4, r5, r7, pc}
 801a576:	bf00      	nop
 801a578:	42800000 	.word	0x42800000

0801a57c <nk_create_table>:
 *                              TABLE
 *
 * ===============================================================*/
NK_LIB struct nk_table*
nk_create_table(struct nk_context *ctx)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b084      	sub	sp, #16
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801a584:	6878      	ldr	r0, [r7, #4]
 801a586:	f7f9 ffc7 	bl	8014518 <nk_create_page_element>
 801a58a:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d101      	bne.n	801a596 <nk_create_table+0x1a>
 801a592:	2300      	movs	r3, #0
 801a594:	e005      	b.n	801a5a2 <nk_create_table+0x26>
    nk_zero_struct(*elem);
 801a596:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801a59a:	68f8      	ldr	r0, [r7, #12]
 801a59c:	f001 fb00 	bl	801bba0 <nk_zero>
    return &elem->data.tbl;
 801a5a0:	68fb      	ldr	r3, [r7, #12]
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3710      	adds	r7, #16
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bd80      	pop	{r7, pc}

0801a5aa <nk_free_table>:
NK_LIB void
nk_free_table(struct nk_context *ctx, struct nk_table *tbl)
{
 801a5aa:	b580      	push	{r7, lr}
 801a5ac:	b084      	sub	sp, #16
 801a5ae:	af00      	add	r7, sp, #0
 801a5b0:	6078      	str	r0, [r7, #4]
 801a5b2:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 801a5bc:	68b9      	ldr	r1, [r7, #8]
 801a5be:	6878      	ldr	r0, [r7, #4]
 801a5c0:	f7fa f841 	bl	8014646 <nk_free_page_element>
}
 801a5c4:	bf00      	nop
 801a5c6:	3710      	adds	r7, #16
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}

0801a5cc <nk_push_table>:
NK_LIB void
nk_push_table(struct nk_window *win, struct nk_table *tbl)
{
 801a5cc:	b480      	push	{r7}
 801a5ce:	b083      	sub	sp, #12
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	6039      	str	r1, [r7, #0]
    if (!win->tables) {
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d113      	bne.n	801a608 <nk_push_table+0x3c>
        win->tables = tbl;
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	683a      	ldr	r2, [r7, #0]
 801a5e4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        tbl->next = 0;
 801a5e8:	683b      	ldr	r3, [r7, #0]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        tbl->prev = 0;
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
        tbl->size = 0;
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	605a      	str	r2, [r3, #4]
        win->table_count = 1;
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	2201      	movs	r2, #1
 801a602:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        return;
 801a606:	e01d      	b.n	801a644 <nk_push_table+0x78>
    }
    win->tables->prev = tbl;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a60e:	683a      	ldr	r2, [r7, #0]
 801a610:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->next = win->tables;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	2200      	movs	r2, #0
 801a624:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->size = 0;
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	2200      	movs	r2, #0
 801a62c:	605a      	str	r2, [r3, #4]
    win->tables = tbl;
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	683a      	ldr	r2, [r7, #0]
 801a632:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    win->table_count++;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 801a63c:	1c5a      	adds	r2, r3, #1
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
}
 801a644:	370c      	adds	r7, #12
 801a646:	46bd      	mov	sp, r7
 801a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64c:	4770      	bx	lr

0801a64e <nk_remove_table>:
NK_LIB void
nk_remove_table(struct nk_window *win, struct nk_table *tbl)
{
 801a64e:	b480      	push	{r7}
 801a650:	b083      	sub	sp, #12
 801a652:	af00      	add	r7, sp, #0
 801a654:	6078      	str	r0, [r7, #4]
 801a656:	6039      	str	r1, [r7, #0]
    if (win->tables == tbl)
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a65e:	683a      	ldr	r2, [r7, #0]
 801a660:	429a      	cmp	r2, r3
 801a662:	d105      	bne.n	801a670 <nk_remove_table+0x22>
        win->tables = tbl->next;
 801a664:	683b      	ldr	r3, [r7, #0]
 801a666:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    if (tbl->next)
 801a670:	683b      	ldr	r3, [r7, #0]
 801a672:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801a676:	2b00      	cmp	r3, #0
 801a678:	d007      	beq.n	801a68a <nk_remove_table+0x3c>
        tbl->next->prev = tbl->prev;
 801a67a:	683b      	ldr	r3, [r7, #0]
 801a67c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801a680:	683a      	ldr	r2, [r7, #0]
 801a682:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 801a686:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    if (tbl->prev)
 801a68a:	683b      	ldr	r3, [r7, #0]
 801a68c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801a690:	2b00      	cmp	r3, #0
 801a692:	d007      	beq.n	801a6a4 <nk_remove_table+0x56>
        tbl->prev->next = tbl->next;
 801a694:	683b      	ldr	r3, [r7, #0]
 801a696:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801a69a:	683a      	ldr	r2, [r7, #0]
 801a69c:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 801a6a0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->next = 0;
 801a6a4:	683b      	ldr	r3, [r7, #0]
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801a6ac:	683b      	ldr	r3, [r7, #0]
 801a6ae:	2200      	movs	r2, #0
 801a6b0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 801a6b4:	bf00      	nop
 801a6b6:	370c      	adds	r7, #12
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6be:	4770      	bx	lr

0801a6c0 <nk_add_value>:
NK_LIB nk_uint*
nk_add_value(struct nk_context *ctx, struct nk_window *win,
            nk_hash name, nk_uint value)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b086      	sub	sp, #24
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	60f8      	str	r0, [r7, #12]
 801a6c8:	60b9      	str	r1, [r7, #8]
 801a6ca:	607a      	str	r2, [r7, #4]
 801a6cc:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d105      	bne.n	801a6e0 <nk_add_value+0x20>
 801a6d4:	4b32      	ldr	r3, [pc, #200]	; (801a7a0 <nk_add_value+0xe0>)
 801a6d6:	4a33      	ldr	r2, [pc, #204]	; (801a7a4 <nk_add_value+0xe4>)
 801a6d8:	213b      	movs	r1, #59	; 0x3b
 801a6da:	4833      	ldr	r0, [pc, #204]	; (801a7a8 <nk_add_value+0xe8>)
 801a6dc:	f002 ff58 	bl	801d590 <__assert_func>
    NK_ASSERT(win);
 801a6e0:	68bb      	ldr	r3, [r7, #8]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d105      	bne.n	801a6f2 <nk_add_value+0x32>
 801a6e6:	4b31      	ldr	r3, [pc, #196]	; (801a7ac <nk_add_value+0xec>)
 801a6e8:	4a2e      	ldr	r2, [pc, #184]	; (801a7a4 <nk_add_value+0xe4>)
 801a6ea:	213c      	movs	r1, #60	; 0x3c
 801a6ec:	482e      	ldr	r0, [pc, #184]	; (801a7a8 <nk_add_value+0xe8>)
 801a6ee:	f002 ff4f 	bl	801d590 <__assert_func>
    if (!win || !ctx) return 0;
 801a6f2:	68bb      	ldr	r3, [r7, #8]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d002      	beq.n	801a6fe <nk_add_value+0x3e>
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d101      	bne.n	801a702 <nk_add_value+0x42>
 801a6fe:	2300      	movs	r3, #0
 801a700:	e04a      	b.n	801a798 <nk_add_value+0xd8>
    if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {
 801a702:	68bb      	ldr	r3, [r7, #8]
 801a704:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d005      	beq.n	801a718 <nk_add_value+0x58>
 801a70c:	68bb      	ldr	r3, [r7, #8]
 801a70e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a712:	685b      	ldr	r3, [r3, #4]
 801a714:	2b32      	cmp	r3, #50	; 0x32
 801a716:	d915      	bls.n	801a744 <nk_add_value+0x84>
        struct nk_table *tbl = nk_create_table(ctx);
 801a718:	68f8      	ldr	r0, [r7, #12]
 801a71a:	f7ff ff2f 	bl	801a57c <nk_create_table>
 801a71e:	6178      	str	r0, [r7, #20]
        NK_ASSERT(tbl);
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	2b00      	cmp	r3, #0
 801a724:	d105      	bne.n	801a732 <nk_add_value+0x72>
 801a726:	4b22      	ldr	r3, [pc, #136]	; (801a7b0 <nk_add_value+0xf0>)
 801a728:	4a1e      	ldr	r2, [pc, #120]	; (801a7a4 <nk_add_value+0xe4>)
 801a72a:	2140      	movs	r1, #64	; 0x40
 801a72c:	481e      	ldr	r0, [pc, #120]	; (801a7a8 <nk_add_value+0xe8>)
 801a72e:	f002 ff2f 	bl	801d590 <__assert_func>
        if (!tbl) return 0;
 801a732:	697b      	ldr	r3, [r7, #20]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d101      	bne.n	801a73c <nk_add_value+0x7c>
 801a738:	2300      	movs	r3, #0
 801a73a:	e02d      	b.n	801a798 <nk_add_value+0xd8>
        nk_push_table(win, tbl);
 801a73c:	6979      	ldr	r1, [r7, #20]
 801a73e:	68b8      	ldr	r0, [r7, #8]
 801a740:	f7ff ff44 	bl	801a5cc <nk_push_table>
    }
    win->tables->seq = win->seq;
 801a744:	68bb      	ldr	r3, [r7, #8]
 801a746:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a74a:	68ba      	ldr	r2, [r7, #8]
 801a74c:	6812      	ldr	r2, [r2, #0]
 801a74e:	601a      	str	r2, [r3, #0]
    win->tables->keys[win->tables->size] = name;
 801a750:	68bb      	ldr	r3, [r7, #8]
 801a752:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a756:	68ba      	ldr	r2, [r7, #8]
 801a758:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 801a75c:	6852      	ldr	r2, [r2, #4]
 801a75e:	3202      	adds	r2, #2
 801a760:	6879      	ldr	r1, [r7, #4]
 801a762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    win->tables->values[win->tables->size] = value;
 801a766:	68bb      	ldr	r3, [r7, #8]
 801a768:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801a76c:	68bb      	ldr	r3, [r7, #8]
 801a76e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a772:	685b      	ldr	r3, [r3, #4]
 801a774:	3334      	adds	r3, #52	; 0x34
 801a776:	009b      	lsls	r3, r3, #2
 801a778:	4413      	add	r3, r2
 801a77a:	683a      	ldr	r2, [r7, #0]
 801a77c:	605a      	str	r2, [r3, #4]
    return &win->tables->values[win->tables->size++];
 801a77e:	68bb      	ldr	r3, [r7, #8]
 801a780:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801a78a:	6853      	ldr	r3, [r2, #4]
 801a78c:	1c58      	adds	r0, r3, #1
 801a78e:	6050      	str	r0, [r2, #4]
 801a790:	3334      	adds	r3, #52	; 0x34
 801a792:	009b      	lsls	r3, r3, #2
 801a794:	440b      	add	r3, r1
 801a796:	3304      	adds	r3, #4
}
 801a798:	4618      	mov	r0, r3
 801a79a:	3718      	adds	r7, #24
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	08021a84 	.word	0x08021a84
 801a7a4:	08023204 	.word	0x08023204
 801a7a8:	08021a88 	.word	0x08021a88
 801a7ac:	08021aa4 	.word	0x08021aa4
 801a7b0:	08021aa8 	.word	0x08021aa8

0801a7b4 <nk_find_value>:
NK_LIB nk_uint*
nk_find_value(struct nk_window *win, nk_hash name)
{
 801a7b4:	b480      	push	{r7}
 801a7b6:	b087      	sub	sp, #28
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	6078      	str	r0, [r7, #4]
 801a7bc:	6039      	str	r1, [r7, #0]
    struct nk_table *iter = win->tables;
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a7c4:	617b      	str	r3, [r7, #20]
    while (iter) {
 801a7c6:	e027      	b.n	801a818 <nk_find_value+0x64>
        unsigned int i = 0;
 801a7c8:	2300      	movs	r3, #0
 801a7ca:	613b      	str	r3, [r7, #16]
        unsigned int size = iter->size;
 801a7cc:	697b      	ldr	r3, [r7, #20]
 801a7ce:	685b      	ldr	r3, [r3, #4]
 801a7d0:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < size; ++i) {
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	613b      	str	r3, [r7, #16]
 801a7d6:	e015      	b.n	801a804 <nk_find_value+0x50>
            if (iter->keys[i] == name) {
 801a7d8:	697b      	ldr	r3, [r7, #20]
 801a7da:	693a      	ldr	r2, [r7, #16]
 801a7dc:	3202      	adds	r2, #2
 801a7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7e2:	683a      	ldr	r2, [r7, #0]
 801a7e4:	429a      	cmp	r2, r3
 801a7e6:	d10a      	bne.n	801a7fe <nk_find_value+0x4a>
                iter->seq = win->seq;
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681a      	ldr	r2, [r3, #0]
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	601a      	str	r2, [r3, #0]
                return &iter->values[i];
 801a7f0:	693b      	ldr	r3, [r7, #16]
 801a7f2:	3334      	adds	r3, #52	; 0x34
 801a7f4:	009b      	lsls	r3, r3, #2
 801a7f6:	697a      	ldr	r2, [r7, #20]
 801a7f8:	4413      	add	r3, r2
 801a7fa:	3304      	adds	r3, #4
 801a7fc:	e010      	b.n	801a820 <nk_find_value+0x6c>
        for (i = 0; i < size; ++i) {
 801a7fe:	693b      	ldr	r3, [r7, #16]
 801a800:	3301      	adds	r3, #1
 801a802:	613b      	str	r3, [r7, #16]
 801a804:	693a      	ldr	r2, [r7, #16]
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	429a      	cmp	r2, r3
 801a80a:	d3e5      	bcc.n	801a7d8 <nk_find_value+0x24>
            }
        } size = NK_VALUE_PAGE_CAPACITY;
 801a80c:	2333      	movs	r3, #51	; 0x33
 801a80e:	60fb      	str	r3, [r7, #12]
        iter = iter->next;
 801a810:	697b      	ldr	r3, [r7, #20]
 801a812:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801a816:	617b      	str	r3, [r7, #20]
    while (iter) {
 801a818:	697b      	ldr	r3, [r7, #20]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d1d4      	bne.n	801a7c8 <nk_find_value+0x14>
    }
    return 0;
 801a81e:	2300      	movs	r3, #0
}
 801a820:	4618      	mov	r0, r3
 801a822:	371c      	adds	r7, #28
 801a824:	46bd      	mov	sp, r7
 801a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82a:	4770      	bx	lr

0801a82c <nk_widget_text>:
 * ===============================================================*/
NK_LIB void
nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,
    const char *string, int len, const struct nk_text *t,
    nk_flags a, const struct nk_user_font *f)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b090      	sub	sp, #64	; 0x40
 801a830:	af02      	add	r7, sp, #8
 801a832:	61f8      	str	r0, [r7, #28]
 801a834:	eeb0 6a40 	vmov.f32	s12, s0
 801a838:	eef0 6a60 	vmov.f32	s13, s1
 801a83c:	eeb0 7a41 	vmov.f32	s14, s2
 801a840:	eef0 7a61 	vmov.f32	s15, s3
 801a844:	60b9      	str	r1, [r7, #8]
 801a846:	607a      	str	r2, [r7, #4]
 801a848:	603b      	str	r3, [r7, #0]
 801a84a:	ed87 6a03 	vstr	s12, [r7, #12]
 801a84e:	edc7 6a04 	vstr	s13, [r7, #16]
 801a852:	ed87 7a05 	vstr	s14, [r7, #20]
 801a856:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_rect label;
    float text_width;

    NK_ASSERT(o);
 801a85a:	69fb      	ldr	r3, [r7, #28]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d105      	bne.n	801a86c <nk_widget_text+0x40>
 801a860:	4bb0      	ldr	r3, [pc, #704]	; (801ab24 <nk_widget_text+0x2f8>)
 801a862:	4ab1      	ldr	r2, [pc, #708]	; (801ab28 <nk_widget_text+0x2fc>)
 801a864:	2111      	movs	r1, #17
 801a866:	48b1      	ldr	r0, [pc, #708]	; (801ab2c <nk_widget_text+0x300>)
 801a868:	f002 fe92 	bl	801d590 <__assert_func>
    NK_ASSERT(t);
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d105      	bne.n	801a87e <nk_widget_text+0x52>
 801a872:	4baf      	ldr	r3, [pc, #700]	; (801ab30 <nk_widget_text+0x304>)
 801a874:	4aac      	ldr	r2, [pc, #688]	; (801ab28 <nk_widget_text+0x2fc>)
 801a876:	2112      	movs	r1, #18
 801a878:	48ac      	ldr	r0, [pc, #688]	; (801ab2c <nk_widget_text+0x300>)
 801a87a:	f002 fe89 	bl	801d590 <__assert_func>
    if (!o || !t) return;
 801a87e:	69fb      	ldr	r3, [r7, #28]
 801a880:	2b00      	cmp	r3, #0
 801a882:	f000 81f4 	beq.w	801ac6e <nk_widget_text+0x442>
 801a886:	683b      	ldr	r3, [r7, #0]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f000 81f0 	beq.w	801ac6e <nk_widget_text+0x442>

    b.h = NK_MAX(b.h, 2 * t->padding.y);
 801a88e:	ed97 7a06 	vldr	s14, [r7, #24]
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	edd3 7a01 	vldr	s15, [r3, #4]
 801a898:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a89c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a4:	d505      	bpl.n	801a8b2 <nk_widget_text+0x86>
 801a8a6:	683b      	ldr	r3, [r7, #0]
 801a8a8:	edd3 7a01 	vldr	s15, [r3, #4]
 801a8ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a8b0:	e001      	b.n	801a8b6 <nk_widget_text+0x8a>
 801a8b2:	edd7 7a06 	vldr	s15, [r7, #24]
 801a8b6:	edc7 7a06 	vstr	s15, [r7, #24]
    label.x = 0; label.w = 0;
 801a8ba:	f04f 0300 	mov.w	r3, #0
 801a8be:	627b      	str	r3, [r7, #36]	; 0x24
 801a8c0:	f04f 0300 	mov.w	r3, #0
 801a8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    label.y = b.y + t->padding.y;
 801a8c6:	ed97 7a04 	vldr	s14, [r7, #16]
 801a8ca:	683b      	ldr	r3, [r7, #0]
 801a8cc:	edd3 7a01 	vldr	s15, [r3, #4]
 801a8d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a8d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);
 801a8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8da:	ed93 7a01 	vldr	s14, [r3, #4]
 801a8de:	edd7 6a06 	vldr	s13, [r7, #24]
 801a8e2:	683b      	ldr	r3, [r7, #0]
 801a8e4:	edd3 7a01 	vldr	s15, [r3, #4]
 801a8e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a8ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a8f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f8:	d503      	bpl.n	801a902 <nk_widget_text+0xd6>
 801a8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8fc:	edd3 7a01 	vldr	s15, [r3, #4]
 801a900:	e008      	b.n	801a914 <nk_widget_text+0xe8>
 801a902:	ed97 7a06 	vldr	s14, [r7, #24]
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	edd3 7a01 	vldr	s15, [r3, #4]
 801a90c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a910:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a914:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    text_width = f->width(f->userdata, f->height, (const char*)string, len);
 801a918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a91a:	689b      	ldr	r3, [r3, #8]
 801a91c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a91e:	edd2 7a01 	vldr	s15, [r2, #4]
 801a922:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a924:	687a      	ldr	r2, [r7, #4]
 801a926:	68b9      	ldr	r1, [r7, #8]
 801a928:	eeb0 0a67 	vmov.f32	s0, s15
 801a92c:	6800      	ldr	r0, [r0, #0]
 801a92e:	4798      	blx	r3
 801a930:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    text_width += (2.0f * t->padding.x);
 801a934:	683b      	ldr	r3, [r7, #0]
 801a936:	edd3 7a00 	vldr	s15, [r3]
 801a93a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a93e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a942:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a946:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* align in x-axis */
    if (a & NK_TEXT_ALIGN_LEFT) {
 801a94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a94c:	f003 0301 	and.w	r3, r3, #1
 801a950:	2b00      	cmp	r3, #0
 801a952:	d025      	beq.n	801a9a0 <nk_widget_text+0x174>
        label.x = b.x + t->padding.x;
 801a954:	ed97 7a03 	vldr	s14, [r7, #12]
 801a958:	683b      	ldr	r3, [r7, #0]
 801a95a:	edd3 7a00 	vldr	s15, [r3]
 801a95e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a962:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 801a966:	ed97 7a05 	vldr	s14, [r7, #20]
 801a96a:	683b      	ldr	r3, [r7, #0]
 801a96c:	edd3 7a00 	vldr	s15, [r3]
 801a970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a974:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a980:	dd09      	ble.n	801a996 <nk_widget_text+0x16a>
 801a982:	ed97 7a05 	vldr	s14, [r7, #20]
 801a986:	683b      	ldr	r3, [r7, #0]
 801a988:	edd3 7a00 	vldr	s15, [r3]
 801a98c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a990:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a994:	e001      	b.n	801a99a <nk_widget_text+0x16e>
 801a996:	eddf 7a67 	vldr	s15, [pc, #412]	; 801ab34 <nk_widget_text+0x308>
 801a99a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801a99e:	e0df      	b.n	801ab60 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_CENTERED) {
 801a9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9a2:	f003 0302 	and.w	r3, r3, #2
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	f000 8086 	beq.w	801aab8 <nk_widget_text+0x28c>
        label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);
 801a9ac:	683b      	ldr	r3, [r7, #0]
 801a9ae:	edd3 7a00 	vldr	s15, [r3]
 801a9b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801a9b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801a9ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a9be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a9c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9ca:	dd09      	ble.n	801a9e0 <nk_widget_text+0x1b4>
 801a9cc:	683b      	ldr	r3, [r7, #0]
 801a9ce:	edd3 7a00 	vldr	s15, [r3]
 801a9d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801a9d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801a9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a9de:	e001      	b.n	801a9e4 <nk_widget_text+0x1b8>
 801a9e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a9e4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);
 801a9e8:	ed97 7a03 	vldr	s14, [r7, #12]
 801a9ec:	683b      	ldr	r3, [r7, #0]
 801a9ee:	edd3 7a00 	vldr	s15, [r3]
 801a9f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a9f6:	edd7 6a05 	vldr	s13, [r7, #20]
 801a9fa:	683b      	ldr	r3, [r7, #0]
 801a9fc:	edd3 7a00 	vldr	s15, [r3]
 801aa00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801aa04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801aa08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801aa0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801aa10:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801aa14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801aa18:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.x = NK_MAX(b.x + t->padding.x, label.x);
 801aa20:	ed97 7a03 	vldr	s14, [r7, #12]
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	edd3 7a00 	vldr	s15, [r3]
 801aa2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aa32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa3a:	d502      	bpl.n	801aa42 <nk_widget_text+0x216>
 801aa3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aa40:	e006      	b.n	801aa50 <nk_widget_text+0x224>
 801aa42:	ed97 7a03 	vldr	s14, [r7, #12]
 801aa46:	683b      	ldr	r3, [r7, #0]
 801aa48:	edd3 7a00 	vldr	s15, [r3]
 801aa4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MIN(b.x + b.w, label.x + label.w);
 801aa54:	ed97 7a03 	vldr	s14, [r7, #12]
 801aa58:	edd7 7a05 	vldr	s15, [r7, #20]
 801aa5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa60:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801aa64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801aa68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801aa6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aa70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa74:	d506      	bpl.n	801aa84 <nk_widget_text+0x258>
 801aa76:	ed97 7a03 	vldr	s14, [r7, #12]
 801aa7a:	edd7 7a05 	vldr	s15, [r7, #20]
 801aa7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa82:	e005      	b.n	801aa90 <nk_widget_text+0x264>
 801aa84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801aa88:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801aa8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if (label.w >= label.x) label.w -= label.x;
 801aa94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801aa98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aa9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaa4:	db5c      	blt.n	801ab60 <nk_widget_text+0x334>
 801aaa6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801aaaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aaae:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aab2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801aab6:	e053      	b.n	801ab60 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_RIGHT) {
 801aab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aaba:	f003 0304 	and.w	r3, r3, #4
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	f000 80d7 	beq.w	801ac72 <nk_widget_text+0x446>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
 801aac4:	ed97 7a03 	vldr	s14, [r7, #12]
 801aac8:	683b      	ldr	r3, [r7, #0]
 801aaca:	edd3 7a00 	vldr	s15, [r3]
 801aace:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aad2:	edd7 6a03 	vldr	s13, [r7, #12]
 801aad6:	edd7 7a05 	vldr	s15, [r7, #20]
 801aada:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801aade:	683b      	ldr	r3, [r7, #0]
 801aae0:	edd3 7a00 	vldr	s15, [r3]
 801aae4:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801aae8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801aaec:	ee76 7a27 	vadd.f32	s15, s12, s15
 801aaf0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801aaf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aafc:	d51c      	bpl.n	801ab38 <nk_widget_text+0x30c>
 801aafe:	ed97 7a03 	vldr	s14, [r7, #12]
 801ab02:	edd7 7a05 	vldr	s15, [r7, #20]
 801ab06:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	edd3 7a00 	vldr	s15, [r3]
 801ab10:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801ab14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801ab18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ab1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ab20:	e011      	b.n	801ab46 <nk_widget_text+0x31a>
 801ab22:	bf00      	nop
 801ab24:	08021aac 	.word	0x08021aac
 801ab28:	08023214 	.word	0x08023214
 801ab2c:	08021ab0 	.word	0x08021ab0
 801ab30:	08021acc 	.word	0x08021acc
 801ab34:	00000000 	.word	0x00000000
 801ab38:	ed97 7a03 	vldr	s14, [r7, #12]
 801ab3c:	683b      	ldr	r3, [r7, #0]
 801ab3e:	edd3 7a00 	vldr	s15, [r3]
 801ab42:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = (float)text_width + 2 * t->padding.x;
 801ab4a:	683b      	ldr	r3, [r7, #0]
 801ab4c:	edd3 7a00 	vldr	s15, [r3]
 801ab50:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801ab54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801ab58:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    } else return;

    /* align in y-axis */
    if (a & NK_TEXT_ALIGN_MIDDLE) {
 801ab60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab62:	f003 0310 	and.w	r3, r3, #16
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d04f      	beq.n	801ac0a <nk_widget_text+0x3de>
        label.y = b.y + b.h/2.0f - (float)f->height/2.0f;
 801ab6a:	ed97 7a04 	vldr	s14, [r7, #16]
 801ab6e:	edd7 6a06 	vldr	s13, [r7, #24]
 801ab72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801ab76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801ab7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab80:	edd3 6a01 	vldr	s13, [r3, #4]
 801ab84:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801ab88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801ab8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ab90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));
 801ab94:	edd7 7a06 	vldr	s15, [r7, #24]
 801ab98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ab9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801aba0:	edd7 6a06 	vldr	s13, [r7, #24]
 801aba4:	edd7 7a06 	vldr	s15, [r7, #24]
 801aba8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801abac:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801abb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801abb2:	edd3 5a01 	vldr	s11, [r3, #4]
 801abb6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801abba:	eec5 7a85 	vdiv.f32	s15, s11, s10
 801abbe:	ee76 7a27 	vadd.f32	s15, s12, s15
 801abc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801abc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801abca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abce:	d513      	bpl.n	801abf8 <nk_widget_text+0x3cc>
 801abd0:	ed97 7a06 	vldr	s14, [r7, #24]
 801abd4:	edd7 7a06 	vldr	s15, [r7, #24]
 801abd8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801abdc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801abe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801abe2:	ed93 6a01 	vldr	s12, [r3, #4]
 801abe6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801abea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801abee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801abf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801abf6:	e005      	b.n	801ac04 <nk_widget_text+0x3d8>
 801abf8:	ed97 7a06 	vldr	s14, [r7, #24]
 801abfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ac00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ac04:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801ac08:	e014      	b.n	801ac34 <nk_widget_text+0x408>
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
 801ac0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac0c:	f003 0320 	and.w	r3, r3, #32
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d00f      	beq.n	801ac34 <nk_widget_text+0x408>
        label.y = b.y + b.h - f->height;
 801ac14:	ed97 7a04 	vldr	s14, [r7, #16]
 801ac18:	edd7 7a06 	vldr	s15, [r7, #24]
 801ac1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ac20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac22:	edd3 7a01 	vldr	s15, [r3, #4]
 801ac26:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ac2a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = f->height;
 801ac2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac30:	685b      	ldr	r3, [r3, #4]
 801ac32:	633b      	str	r3, [r7, #48]	; 0x30
    }
    nk_draw_text(o, label, (const char*)string, len, f, t->background, t->text);
 801ac34:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 801ac38:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 801ac3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801ac40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	68db      	ldr	r3, [r3, #12]
 801ac48:	9301      	str	r3, [sp, #4]
 801ac4a:	683b      	ldr	r3, [r7, #0]
 801ac4c:	689b      	ldr	r3, [r3, #8]
 801ac4e:	9300      	str	r3, [sp, #0]
 801ac50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac52:	687a      	ldr	r2, [r7, #4]
 801ac54:	68b9      	ldr	r1, [r7, #8]
 801ac56:	eeb0 0a46 	vmov.f32	s0, s12
 801ac5a:	eef0 0a66 	vmov.f32	s1, s13
 801ac5e:	eeb0 1a47 	vmov.f32	s2, s14
 801ac62:	eef0 1a67 	vmov.f32	s3, s15
 801ac66:	69f8      	ldr	r0, [r7, #28]
 801ac68:	f7f7 fc2a 	bl	80124c0 <nk_draw_text>
 801ac6c:	e002      	b.n	801ac74 <nk_widget_text+0x448>
    if (!o || !t) return;
 801ac6e:	bf00      	nop
 801ac70:	e000      	b.n	801ac74 <nk_widget_text+0x448>
    } else return;
 801ac72:	bf00      	nop
}
 801ac74:	3738      	adds	r7, #56	; 0x38
 801ac76:	46bd      	mov	sp, r7
 801ac78:	bd80      	pop	{r7, pc}
 801ac7a:	bf00      	nop

0801ac7c <nk_text_colored>:
    }
}
NK_API void
nk_text_colored(struct nk_context *ctx, const char *str, int len,
    nk_flags alignment, struct nk_color color)
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b092      	sub	sp, #72	; 0x48
 801ac80:	af02      	add	r7, sp, #8
 801ac82:	60f8      	str	r0, [r7, #12]
 801ac84:	60b9      	str	r1, [r7, #8]
 801ac86:	607a      	str	r2, [r7, #4]
 801ac88:	603b      	str	r3, [r7, #0]

    struct nk_vec2 item_padding;
    struct nk_rect bounds;
    struct nk_text text;

    NK_ASSERT(ctx);
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d105      	bne.n	801ac9c <nk_text_colored+0x20>
 801ac90:	4b3e      	ldr	r3, [pc, #248]	; (801ad8c <nk_text_colored+0x110>)
 801ac92:	4a3f      	ldr	r2, [pc, #252]	; (801ad90 <nk_text_colored+0x114>)
 801ac94:	2168      	movs	r1, #104	; 0x68
 801ac96:	483f      	ldr	r0, [pc, #252]	; (801ad94 <nk_text_colored+0x118>)
 801ac98:	f002 fc7a 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aca2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d105      	bne.n	801acb6 <nk_text_colored+0x3a>
 801acaa:	4b3b      	ldr	r3, [pc, #236]	; (801ad98 <nk_text_colored+0x11c>)
 801acac:	4a38      	ldr	r2, [pc, #224]	; (801ad90 <nk_text_colored+0x114>)
 801acae:	2169      	movs	r1, #105	; 0x69
 801acb0:	4838      	ldr	r0, [pc, #224]	; (801ad94 <nk_text_colored+0x118>)
 801acb2:	f002 fc6d 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801acbc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801acc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d105      	bne.n	801acd4 <nk_text_colored+0x58>
 801acc8:	4b34      	ldr	r3, [pc, #208]	; (801ad9c <nk_text_colored+0x120>)
 801acca:	4a31      	ldr	r2, [pc, #196]	; (801ad90 <nk_text_colored+0x114>)
 801accc:	216a      	movs	r1, #106	; 0x6a
 801acce:	4831      	ldr	r0, [pc, #196]	; (801ad94 <nk_text_colored+0x118>)
 801acd0:	f002 fc5e 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d053      	beq.n	801ad82 <nk_text_colored+0x106>
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ace0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d04c      	beq.n	801ad82 <nk_text_colored+0x106>
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801acee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801acf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d043      	beq.n	801ad82 <nk_text_colored+0x106>

    win = ctx->current;
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ad00:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
    style = &ctx->style;
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801ad0c:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_panel_alloc_space(&bounds, ctx);
 801ad0e:	f107 0320 	add.w	r3, r7, #32
 801ad12:	68f9      	ldr	r1, [r7, #12]
 801ad14:	4618      	mov	r0, r3
 801ad16:	f7f9 f821 	bl	8013d5c <nk_panel_alloc_space>
    item_padding = style->text.padding;
 801ad1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ad1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad20:	3230      	adds	r2, #48	; 0x30
 801ad22:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ad26:	e883 0003 	stmia.w	r3, {r0, r1}

    text.padding.x = item_padding.x;
 801ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad2c:	613b      	str	r3, [r7, #16]
    text.padding.y = item_padding.y;
 801ad2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad30:	617b      	str	r3, [r7, #20]
    text.background = style->window.background;
 801ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad38:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801ad3c:	61bb      	str	r3, [r7, #24]
    text.text = color;
 801ad3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ad40:	61fb      	str	r3, [r7, #28]
    nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);
 801ad42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad44:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	f107 0210 	add.w	r2, r7, #16
 801ad50:	ed97 6a08 	vldr	s12, [r7, #32]
 801ad54:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801ad58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ad5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801ad60:	9301      	str	r3, [sp, #4]
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	9300      	str	r3, [sp, #0]
 801ad66:	4613      	mov	r3, r2
 801ad68:	687a      	ldr	r2, [r7, #4]
 801ad6a:	68b9      	ldr	r1, [r7, #8]
 801ad6c:	eeb0 0a46 	vmov.f32	s0, s12
 801ad70:	eef0 0a66 	vmov.f32	s1, s13
 801ad74:	eeb0 1a47 	vmov.f32	s2, s14
 801ad78:	eef0 1a67 	vmov.f32	s3, s15
 801ad7c:	f7ff fd56 	bl	801a82c <nk_widget_text>
 801ad80:	e000      	b.n	801ad84 <nk_text_colored+0x108>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801ad82:	bf00      	nop
}
 801ad84:	3740      	adds	r7, #64	; 0x40
 801ad86:	46bd      	mov	sp, r7
 801ad88:	bd80      	pop	{r7, pc}
 801ad8a:	bf00      	nop
 801ad8c:	08021ad0 	.word	0x08021ad0
 801ad90:	08023224 	.word	0x08023224
 801ad94:	08021ab0 	.word	0x08021ab0
 801ad98:	08021ad4 	.word	0x08021ad4
 801ad9c:	08021ae4 	.word	0x08021ae4

0801ada0 <nk_text>:
    nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);
}
#endif
NK_API void
nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b086      	sub	sp, #24
 801ada4:	af02      	add	r7, sp, #8
 801ada6:	60f8      	str	r0, [r7, #12]
 801ada8:	60b9      	str	r1, [r7, #8]
 801adaa:	607a      	str	r2, [r7, #4]
 801adac:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d106      	bne.n	801adc2 <nk_text+0x22>
 801adb4:	4b0c      	ldr	r3, [pc, #48]	; (801ade8 <nk_text+0x48>)
 801adb6:	4a0d      	ldr	r2, [pc, #52]	; (801adec <nk_text+0x4c>)
 801adb8:	f44f 7182 	mov.w	r1, #260	; 0x104
 801adbc:	480c      	ldr	r0, [pc, #48]	; (801adf0 <nk_text+0x50>)
 801adbe:	f002 fbe7 	bl	801d590 <__assert_func>
    if (!ctx) return;
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d00a      	beq.n	801adde <nk_text+0x3e>
    nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801adce:	9300      	str	r3, [sp, #0]
 801add0:	683b      	ldr	r3, [r7, #0]
 801add2:	687a      	ldr	r2, [r7, #4]
 801add4:	68b9      	ldr	r1, [r7, #8]
 801add6:	68f8      	ldr	r0, [r7, #12]
 801add8:	f7ff ff50 	bl	801ac7c <nk_text_colored>
 801addc:	e000      	b.n	801ade0 <nk_text+0x40>
    if (!ctx) return;
 801adde:	bf00      	nop
}
 801ade0:	3710      	adds	r7, #16
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd80      	pop	{r7, pc}
 801ade6:	bf00      	nop
 801ade8:	08021ad0 	.word	0x08021ad0
 801adec:	08023234 	.word	0x08023234
 801adf0:	08021ab0 	.word	0x08021ab0

0801adf4 <nk_label>:
    if (!ctx) return;
    nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);
}
NK_API void
nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)
{
 801adf4:	b580      	push	{r7, lr}
 801adf6:	b084      	sub	sp, #16
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	60f8      	str	r0, [r7, #12]
 801adfc:	60b9      	str	r1, [r7, #8]
 801adfe:	607a      	str	r2, [r7, #4]
    nk_text(ctx, str, nk_strlen(str), alignment);
 801ae00:	68b8      	ldr	r0, [r7, #8]
 801ae02:	f000 feeb 	bl	801bbdc <nk_strlen>
 801ae06:	4602      	mov	r2, r0
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	68b9      	ldr	r1, [r7, #8]
 801ae0c:	68f8      	ldr	r0, [r7, #12]
 801ae0e:	f7ff ffc7 	bl	801ada0 <nk_text>
}
 801ae12:	bf00      	nop
 801ae14:	3710      	adds	r7, #16
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
	...

0801ae1c <nk_tree_state_base>:
 *
 * ===============================================================*/
NK_INTERN int
nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states *state)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b0aa      	sub	sp, #168	; 0xa8
 801ae20:	af04      	add	r7, sp, #16
 801ae22:	60f8      	str	r0, [r7, #12]
 801ae24:	607a      	str	r2, [r7, #4]
 801ae26:	603b      	str	r3, [r7, #0]
 801ae28:	460b      	mov	r3, r1
 801ae2a:	72fb      	strb	r3, [r7, #11]
    const struct nk_style_button *button;
    enum nk_symbol_type symbol;
    float row_height;

    struct nk_vec2 item_spacing;
    struct nk_rect header = {0,0,0,0};
 801ae2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ae30:	2200      	movs	r2, #0
 801ae32:	601a      	str	r2, [r3, #0]
 801ae34:	605a      	str	r2, [r3, #4]
 801ae36:	609a      	str	r2, [r3, #8]
 801ae38:	60da      	str	r2, [r3, #12]
    struct nk_rect sym = {0,0,0,0};
 801ae3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ae3e:	2200      	movs	r2, #0
 801ae40:	601a      	str	r2, [r3, #0]
 801ae42:	605a      	str	r2, [r3, #4]
 801ae44:	609a      	str	r2, [r3, #8]
 801ae46:	60da      	str	r2, [r3, #12]
    struct nk_text text;

    nk_flags ws = 0;
 801ae48:	2300      	movs	r3, #0
 801ae4a:	627b      	str	r3, [r7, #36]	; 0x24
    enum nk_widget_layout_states widget_state;

    NK_ASSERT(ctx);
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d105      	bne.n	801ae5e <nk_tree_state_base+0x42>
 801ae52:	4bcd      	ldr	r3, [pc, #820]	; (801b188 <nk_tree_state_base+0x36c>)
 801ae54:	4acd      	ldr	r2, [pc, #820]	; (801b18c <nk_tree_state_base+0x370>)
 801ae56:	211e      	movs	r1, #30
 801ae58:	48cd      	ldr	r0, [pc, #820]	; (801b190 <nk_tree_state_base+0x374>)
 801ae5a:	f002 fb99 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ae64:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d105      	bne.n	801ae78 <nk_tree_state_base+0x5c>
 801ae6c:	4bc9      	ldr	r3, [pc, #804]	; (801b194 <nk_tree_state_base+0x378>)
 801ae6e:	4ac7      	ldr	r2, [pc, #796]	; (801b18c <nk_tree_state_base+0x370>)
 801ae70:	211f      	movs	r1, #31
 801ae72:	48c7      	ldr	r0, [pc, #796]	; (801b190 <nk_tree_state_base+0x374>)
 801ae74:	f002 fb8c 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ae7e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801ae82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d105      	bne.n	801ae96 <nk_tree_state_base+0x7a>
 801ae8a:	4bc3      	ldr	r3, [pc, #780]	; (801b198 <nk_tree_state_base+0x37c>)
 801ae8c:	4abf      	ldr	r2, [pc, #764]	; (801b18c <nk_tree_state_base+0x370>)
 801ae8e:	2120      	movs	r1, #32
 801ae90:	48bf      	ldr	r0, [pc, #764]	; (801b190 <nk_tree_state_base+0x374>)
 801ae92:	f002 fb7d 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d00f      	beq.n	801aebc <nk_tree_state_base+0xa0>
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aea2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d008      	beq.n	801aebc <nk_tree_state_base+0xa0>
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aeb0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801aeb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d101      	bne.n	801aec0 <nk_tree_state_base+0xa4>
        return 0;
 801aebc:	2300      	movs	r3, #0
 801aebe:	e2ee      	b.n	801b49e <nk_tree_state_base+0x682>

    /* cache some data */
    win = ctx->current;
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aec6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801aeca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    layout = win->layout;
 801aece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801aed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801aed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    out = &win->buffer;
 801aeda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801aede:	3364      	adds	r3, #100	; 0x64
 801aee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    style = &ctx->style;
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801aeea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    item_spacing = style->window.spacing;
 801aeee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801aef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aef6:	461a      	mov	r2, r3
 801aef8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801aefc:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 801af00:	e892 0003 	ldmia.w	r2, {r0, r1}
 801af04:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate header bounds and draw background */
    row_height = style->font->height + 2 * style->tab.padding.y;
 801af08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	ed93 7a01 	vldr	s14, [r3, #4]
 801af12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af1a:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801af1e:	edd3 7a00 	vldr	s15, [r3]
 801af22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801af26:	ee77 7a27 	vadd.f32	s15, s14, s15
 801af2a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    nk_layout_set_min_row_height(ctx, row_height);
 801af2e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801af32:	68f8      	ldr	r0, [r7, #12]
 801af34:	f7f7 ff98 	bl	8012e68 <nk_layout_set_min_row_height>
    nk_layout_row_dynamic(ctx, row_height, 1);
 801af38:	2101      	movs	r1, #1
 801af3a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801af3e:	68f8      	ldr	r0, [r7, #12]
 801af40:	f7f8 fa3c 	bl	80133bc <nk_layout_row_dynamic>
    nk_layout_reset_min_row_height(ctx);
 801af44:	68f8      	ldr	r0, [r7, #12]
 801af46:	f7f7 ffe9 	bl	8012f1c <nk_layout_reset_min_row_height>

    widget_state = nk_widget(&header, ctx);
 801af4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801af4e:	68f9      	ldr	r1, [r7, #12]
 801af50:	4618      	mov	r0, r3
 801af52:	f001 f835 	bl	801bfc0 <nk_widget>
 801af56:	4603      	mov	r3, r0
 801af58:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    if (type == NK_TREE_TAB) {
 801af5c:	7afb      	ldrb	r3, [r7, #11]
 801af5e:	2b01      	cmp	r3, #1
 801af60:	f040 80af 	bne.w	801b0c2 <nk_tree_state_base+0x2a6>
        const struct nk_style_item *background = &style->tab.background;
 801af64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af68:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801af6c:	331c      	adds	r3, #28
 801af6e:	677b      	str	r3, [r7, #116]	; 0x74

        switch(background->type) {
 801af70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af72:	781b      	ldrb	r3, [r3, #0]
 801af74:	2b02      	cmp	r3, #2
 801af76:	d021      	beq.n	801afbc <nk_tree_state_base+0x1a0>
 801af78:	2b02      	cmp	r3, #2
 801af7a:	f300 80a9 	bgt.w	801b0d0 <nk_tree_state_base+0x2b4>
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d036      	beq.n	801aff0 <nk_tree_state_base+0x1d4>
 801af82:	2b01      	cmp	r3, #1
 801af84:	f040 80a4 	bne.w	801b0d0 <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, header, &background->data.image, nk_white);
 801af88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af8a:	3304      	adds	r3, #4
 801af8c:	4a83      	ldr	r2, [pc, #524]	; (801b19c <nk_tree_state_base+0x380>)
 801af8e:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801af92:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801af96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801af9a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801af9e:	6812      	ldr	r2, [r2, #0]
 801afa0:	4619      	mov	r1, r3
 801afa2:	eeb0 0a46 	vmov.f32	s0, s12
 801afa6:	eef0 0a66 	vmov.f32	s1, s13
 801afaa:	eeb0 1a47 	vmov.f32	s2, s14
 801afae:	eef0 1a67 	vmov.f32	s3, s15
 801afb2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801afb6:	f7f6 fd67 	bl	8011a88 <nk_draw_image>
                break;
 801afba:	e089      	b.n	801b0d0 <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, header, &background->data.slice, nk_white);
 801afbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801afbe:	3304      	adds	r3, #4
 801afc0:	4a76      	ldr	r2, [pc, #472]	; (801b19c <nk_tree_state_base+0x380>)
 801afc2:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801afc6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801afca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801afce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801afd2:	6812      	ldr	r2, [r2, #0]
 801afd4:	4619      	mov	r1, r3
 801afd6:	eeb0 0a46 	vmov.f32	s0, s12
 801afda:	eef0 0a66 	vmov.f32	s1, s13
 801afde:	eeb0 1a47 	vmov.f32	s2, s14
 801afe2:	eef0 1a67 	vmov.f32	s3, s15
 801afe6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801afea:	f7f6 fe3f 	bl	8011c6c <nk_draw_nine_slice>
                break;
 801afee:	e06f      	b.n	801b0d0 <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, header, 0, style->tab.border_color);
 801aff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801aff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aff8:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801affc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b000:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b004:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b008:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 801b00c:	ed9f 2a64 	vldr	s4, [pc, #400]	; 801b1a0 <nk_tree_state_base+0x384>
 801b010:	eeb0 0a46 	vmov.f32	s0, s12
 801b014:	eef0 0a66 	vmov.f32	s1, s13
 801b018:	eeb0 1a47 	vmov.f32	s2, s14
 801b01c:	eef0 1a67 	vmov.f32	s3, s15
 801b020:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b024:	f7f6 f9d6 	bl	80113d4 <nk_fill_rect>
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801b028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b02c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b030:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801b034:	edd3 5a00 	vldr	s11, [r3]
 801b038:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801b03c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b040:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b044:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b048:	eeb0 2a65 	vmov.f32	s4, s11
 801b04c:	eeb0 0a46 	vmov.f32	s0, s12
 801b050:	eef0 0a66 	vmov.f32	s1, s13
 801b054:	eeb0 1a47 	vmov.f32	s2, s14
 801b058:	eef0 1a67 	vmov.f32	s3, s15
 801b05c:	f7f8 ff48 	bl	8013ef0 <nk_shrink_rect>
 801b060:	eeb0 6a40 	vmov.f32	s12, s0
 801b064:	eef0 6a60 	vmov.f32	s13, s1
 801b068:	eeb0 7a41 	vmov.f32	s14, s2
 801b06c:	eef0 7a61 	vmov.f32	s15, s3
 801b070:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 801b074:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 801b078:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 801b07c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
                    style->tab.rounding, background->data.color);
 801b080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b088:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801b08c:	edd3 5a00 	vldr	s11, [r3]
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801b090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b092:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 801b096:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801b09a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 801b09e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801b0a2:	6859      	ldr	r1, [r3, #4]
 801b0a4:	eeb0 2a65 	vmov.f32	s4, s11
 801b0a8:	eeb0 0a46 	vmov.f32	s0, s12
 801b0ac:	eef0 0a66 	vmov.f32	s1, s13
 801b0b0:	eeb0 1a47 	vmov.f32	s2, s14
 801b0b4:	eef0 1a67 	vmov.f32	s3, s15
 801b0b8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b0bc:	f7f6 f98a 	bl	80113d4 <nk_fill_rect>
                break;
 801b0c0:	e006      	b.n	801b0d0 <nk_tree_state_base+0x2b4>
        }
    } else text.background = style->window.background;
 801b0c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b0ca:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801b0ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* update node state */
    in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;
 801b0d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b0d4:	685b      	ldr	r3, [r3, #4]
 801b0d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d101      	bne.n	801b0e2 <nk_tree_state_base+0x2c6>
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	e000      	b.n	801b0e4 <nk_tree_state_base+0x2c8>
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	673b      	str	r3, [r7, #112]	; 0x70
    in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;
 801b0e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d005      	beq.n	801b0f8 <nk_tree_state_base+0x2dc>
 801b0ec:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b0f0:	2b01      	cmp	r3, #1
 801b0f2:	d101      	bne.n	801b0f8 <nk_tree_state_base+0x2dc>
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	e000      	b.n	801b0fa <nk_tree_state_base+0x2de>
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	673b      	str	r3, [r7, #112]	; 0x70
    if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))
 801b0fc:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801b100:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b104:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b108:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b110:	2200      	movs	r2, #0
 801b112:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801b114:	eeb0 0a46 	vmov.f32	s0, s12
 801b118:	eef0 0a66 	vmov.f32	s1, s13
 801b11c:	eeb0 1a47 	vmov.f32	s2, s14
 801b120:	eef0 1a67 	vmov.f32	s3, s15
 801b124:	4618      	mov	r0, r3
 801b126:	f7f3 fc2f 	bl	800e988 <nk_button_behavior>
 801b12a:	4603      	mov	r3, r0
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d00b      	beq.n	801b148 <nk_tree_state_base+0x32c>
        *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;
 801b130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b134:	781b      	ldrb	r3, [r3, #0]
 801b136:	2b01      	cmp	r3, #1
 801b138:	bf14      	ite	ne
 801b13a:	2301      	movne	r3, #1
 801b13c:	2300      	moveq	r3, #0
 801b13e:	b2db      	uxtb	r3, r3
 801b140:	461a      	mov	r2, r3
 801b142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b146:	701a      	strb	r2, [r3, #0]

    /* select correct button style */
    if (*state == NK_MAXIMIZED) {
 801b148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b14c:	781b      	ldrb	r3, [r3, #0]
 801b14e:	2b01      	cmp	r3, #1
 801b150:	d128      	bne.n	801b1a4 <nk_tree_state_base+0x388>
        symbol = style->tab.sym_maximize;
 801b152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b15a:	f893 3561 	ldrb.w	r3, [r3, #1377]	; 0x561
 801b15e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801b162:	7afb      	ldrb	r3, [r7, #11]
 801b164:	2b01      	cmp	r3, #1
 801b166:	d106      	bne.n	801b176 <nk_tree_state_base+0x35a>
            button = &style->tab.tab_maximize_button;
 801b168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b16c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 801b170:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b174:	e030      	b.n	801b1d8 <nk_tree_state_base+0x3bc>
        else button = &style->tab.node_maximize_button;
 801b176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b17a:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 801b17e:	3310      	adds	r3, #16
 801b180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b184:	e028      	b.n	801b1d8 <nk_tree_state_base+0x3bc>
 801b186:	bf00      	nop
 801b188:	08021b68 	.word	0x08021b68
 801b18c:	08023240 	.word	0x08023240
 801b190:	08021b6c 	.word	0x08021b6c
 801b194:	08021b88 	.word	0x08021b88
 801b198:	08021b98 	.word	0x08021b98
 801b19c:	0802323c 	.word	0x0802323c
 801b1a0:	00000000 	.word	0x00000000
    } else {
        symbol = style->tab.sym_minimize;
 801b1a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b1a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b1ac:	f893 3560 	ldrb.w	r3, [r3, #1376]	; 0x560
 801b1b0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801b1b4:	7afb      	ldrb	r3, [r7, #11]
 801b1b6:	2b01      	cmp	r3, #1
 801b1b8:	d107      	bne.n	801b1ca <nk_tree_state_base+0x3ae>
            button = &style->tab.tab_minimize_button;
 801b1ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b1be:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801b1c2:	3318      	adds	r3, #24
 801b1c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b1c8:	e006      	b.n	801b1d8 <nk_tree_state_base+0x3bc>
        else button = &style->tab.node_minimize_button;
 801b1ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b1ce:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801b1d2:	3308      	adds	r3, #8
 801b1d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    {/* draw triangle button */
    sym.w = sym.h = style->font->height;
 801b1d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	685b      	ldr	r3, [r3, #4]
 801b1e0:	647b      	str	r3, [r7, #68]	; 0x44
 801b1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1e4:	643b      	str	r3, [r7, #64]	; 0x40
    sym.y = header.y + style->tab.padding.y;
 801b1e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801b1ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b1f2:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801b1f6:	edd3 7a00 	vldr	s15, [r3]
 801b1fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b1fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sym.x = header.x + style->tab.padding.x;
 801b202:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801b206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b20a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b20e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 801b212:	edd3 7a00 	vldr	s15, [r3]
 801b216:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b21a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801b21e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b222:	f103 0164 	add.w	r1, r3, #100	; 0x64
        button, 0, style->font);
 801b226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b22a:	681b      	ldr	r3, [r3, #0]
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801b22c:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 801b230:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801b234:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801b238:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801b23c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801b240:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b244:	9302      	str	r3, [sp, #8]
 801b246:	2300      	movs	r3, #0
 801b248:	9301      	str	r3, [sp, #4]
 801b24a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b24e:	9300      	str	r3, [sp, #0]
 801b250:	2300      	movs	r3, #0
 801b252:	eeb0 0a46 	vmov.f32	s0, s12
 801b256:	eef0 0a66 	vmov.f32	s1, s13
 801b25a:	eeb0 1a47 	vmov.f32	s2, s14
 801b25e:	eef0 1a67 	vmov.f32	s3, s15
 801b262:	f7f3 ff23 	bl	800f0ac <nk_do_button_symbol>

    if (img) {
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d039      	beq.n	801b2e0 <nk_tree_state_base+0x4c4>
        /* draw optional image icon */
        sym.x = sym.x + sym.w + 4 * item_spacing.x;
 801b26c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801b270:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801b274:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b278:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b27c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801b280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b284:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b288:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_draw_image(&win->buffer, sym, img, nk_white);
 801b28c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b290:	3364      	adds	r3, #100	; 0x64
 801b292:	4a85      	ldr	r2, [pc, #532]	; (801b4a8 <nk_tree_state_base+0x68c>)
 801b294:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801b298:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801b29c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801b2a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801b2a4:	6812      	ldr	r2, [r2, #0]
 801b2a6:	6879      	ldr	r1, [r7, #4]
 801b2a8:	eeb0 0a46 	vmov.f32	s0, s12
 801b2ac:	eef0 0a66 	vmov.f32	s1, s13
 801b2b0:	eeb0 1a47 	vmov.f32	s2, s14
 801b2b4:	eef0 1a67 	vmov.f32	s3, s15
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7f6 fbe5 	bl	8011a88 <nk_draw_image>
        sym.w = style->font->height + style->tab.spacing.x;}
 801b2be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	ed93 7a01 	vldr	s14, [r3, #4]
 801b2c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2d0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801b2d4:	edd3 7a00 	vldr	s15, [r3]
 801b2d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b2dc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    }

    {/* draw label */
    struct nk_rect label;
    header.w = NK_MAX(header.w, sym.w + item_spacing.x);
 801b2e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b2e4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801b2e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b2ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b2f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2f8:	d506      	bpl.n	801b308 <nk_tree_state_base+0x4ec>
 801b2fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801b2fe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b302:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b306:	e001      	b.n	801b30c <nk_tree_state_base+0x4f0>
 801b308:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801b30c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.x = sym.x + sym.w + item_spacing.x;
 801b310:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801b314:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801b318:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b31c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b320:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b324:	edc7 7a05 	vstr	s15, [r7, #20]
    label.y = sym.y;
 801b328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b32a:	61bb      	str	r3, [r7, #24]
    label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);
 801b32c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b330:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801b334:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801b338:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801b33c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b344:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b348:	edd3 7a00 	vldr	s15, [r3]
 801b34c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b350:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b354:	edc7 7a07 	vstr	s15, [r7, #28]
    label.h = style->font->height;
 801b358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	685b      	ldr	r3, [r3, #4]
 801b360:	623b      	str	r3, [r7, #32]
    text.text = style->tab.text;
 801b362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b36a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 801b36e:	637b      	str	r3, [r7, #52]	; 0x34
    text.padding = nk_vec2(0,0);
 801b370:	eddf 0a4e 	vldr	s1, [pc, #312]	; 801b4ac <nk_tree_state_base+0x690>
 801b374:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801b4ac <nk_tree_state_base+0x690>
 801b378:	f7f8 fe3a 	bl	8013ff0 <nk_vec2>
 801b37c:	eeb0 7a40 	vmov.f32	s14, s0
 801b380:	eef0 7a60 	vmov.f32	s15, s1
 801b384:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801b388:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801b38c:	6838      	ldr	r0, [r7, #0]
 801b38e:	f000 fc25 	bl	801bbdc <nk_strlen>
 801b392:	4601      	mov	r1, r0
        NK_TEXT_LEFT, style->font);}
 801b394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b398:	681b      	ldr	r3, [r3, #0]
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801b39a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b39e:	ed97 6a05 	vldr	s12, [r7, #20]
 801b3a2:	edd7 6a06 	vldr	s13, [r7, #24]
 801b3a6:	ed97 7a07 	vldr	s14, [r7, #28]
 801b3aa:	edd7 7a08 	vldr	s15, [r7, #32]
 801b3ae:	9301      	str	r3, [sp, #4]
 801b3b0:	2311      	movs	r3, #17
 801b3b2:	9300      	str	r3, [sp, #0]
 801b3b4:	4613      	mov	r3, r2
 801b3b6:	460a      	mov	r2, r1
 801b3b8:	6839      	ldr	r1, [r7, #0]
 801b3ba:	eeb0 0a46 	vmov.f32	s0, s12
 801b3be:	eef0 0a66 	vmov.f32	s1, s13
 801b3c2:	eeb0 1a47 	vmov.f32	s2, s14
 801b3c6:	eef0 1a67 	vmov.f32	s3, s15
 801b3ca:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b3ce:	f7ff fa2d 	bl	801a82c <nk_widget_text>

    /* increase x-axis cursor widget position pointer */
    if (*state == NK_MAXIMIZED) {
 801b3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b3d6:	781b      	ldrb	r3, [r3, #0]
 801b3d8:	2b01      	cmp	r3, #1
 801b3da:	d15f      	bne.n	801b49c <nk_tree_state_base+0x680>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
 801b3dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801b3e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b3e4:	699b      	ldr	r3, [r3, #24]
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	ee07 3a90 	vmov	s15, r3
 801b3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b3f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b3f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b3fc:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b400:	edd3 7a00 	vldr	s15, [r3]
 801b404:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b40c:	edc3 7a08 	vstr	s15, [r3, #32]
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
 801b410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b414:	ed93 7a04 	vldr	s14, [r3, #16]
 801b418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b420:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b424:	edd3 7a00 	vldr	s15, [r3]
 801b428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b430:	d507      	bpl.n	801b442 <nk_tree_state_base+0x626>
 801b432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b43a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	e002      	b.n	801b448 <nk_tree_state_base+0x62c>
 801b442:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b446:	691b      	ldr	r3, [r3, #16]
 801b448:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b44c:	6113      	str	r3, [r2, #16]
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
 801b44e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b452:	ed93 7a04 	vldr	s14, [r3, #16]
 801b456:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b45e:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b462:	edd3 6a00 	vldr	s13, [r3]
 801b466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b46e:	f603 03ec 	addw	r3, r3, #2284	; 0x8ec
 801b472:	edd3 7a00 	vldr	s15, [r3]
 801b476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b47a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b47e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b482:	edc3 7a04 	vstr	s15, [r3, #16]
        layout->row.tree_depth++;
 801b486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b48a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b48e:	1c5a      	adds	r2, r3, #1
 801b490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b494:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        return nk_true;
 801b498:	2301      	movs	r3, #1
 801b49a:	e000      	b.n	801b49e <nk_tree_state_base+0x682>
    } else return nk_false;
 801b49c:	2300      	movs	r3, #0
}
 801b49e:	4618      	mov	r0, r3
 801b4a0:	3798      	adds	r7, #152	; 0x98
 801b4a2:	46bd      	mov	sp, r7
 801b4a4:	bd80      	pop	{r7, pc}
 801b4a6:	bf00      	nop
 801b4a8:	0802323c 	.word	0x0802323c
 801b4ac:	00000000 	.word	0x00000000

0801b4b0 <nk_tree_base>:
NK_INTERN int
nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	b08a      	sub	sp, #40	; 0x28
 801b4b4:	af02      	add	r7, sp, #8
 801b4b6:	60f8      	str	r0, [r7, #12]
 801b4b8:	607a      	str	r2, [r7, #4]
 801b4ba:	603b      	str	r3, [r7, #0]
 801b4bc:	460b      	mov	r3, r1
 801b4be:	72fb      	strb	r3, [r7, #11]
    struct nk_window *win = ctx->current;
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b4c6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b4ca:	617b      	str	r3, [r7, #20]
    int title_len = 0;
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	613b      	str	r3, [r7, #16]
    nk_hash tree_hash = 0;
 801b4d0:	2300      	movs	r3, #0
 801b4d2:	61fb      	str	r3, [r7, #28]
    nk_uint *state = 0;
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	61bb      	str	r3, [r7, #24]

    /* retrieve tree state from internal widget state tables */
    if (!hash) {
 801b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d10b      	bne.n	801b4f6 <nk_tree_base+0x46>
        title_len = (int)nk_strlen(title);
 801b4de:	6838      	ldr	r0, [r7, #0]
 801b4e0:	f000 fb7c 	bl	801bbdc <nk_strlen>
 801b4e4:	6138      	str	r0, [r7, #16]
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
 801b4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4e8:	461a      	mov	r2, r3
 801b4ea:	6939      	ldr	r1, [r7, #16]
 801b4ec:	6838      	ldr	r0, [r7, #0]
 801b4ee:	f000 fbf5 	bl	801bcdc <nk_murmur_hash>
 801b4f2:	61f8      	str	r0, [r7, #28]
 801b4f4:	e006      	b.n	801b504 <nk_tree_base+0x54>
    } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);
 801b4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4f8:	461a      	mov	r2, r3
 801b4fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b4fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b4fe:	f000 fbed 	bl	801bcdc <nk_murmur_hash>
 801b502:	61f8      	str	r0, [r7, #28]
    state = nk_find_value(win, tree_hash);
 801b504:	69f9      	ldr	r1, [r7, #28]
 801b506:	6978      	ldr	r0, [r7, #20]
 801b508:	f7ff f954 	bl	801a7b4 <nk_find_value>
 801b50c:	61b8      	str	r0, [r7, #24]
    if (!state) {
 801b50e:	69bb      	ldr	r3, [r7, #24]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d10a      	bne.n	801b52a <nk_tree_base+0x7a>
        state = nk_add_value(ctx, win, tree_hash, 0);
 801b514:	2300      	movs	r3, #0
 801b516:	69fa      	ldr	r2, [r7, #28]
 801b518:	6979      	ldr	r1, [r7, #20]
 801b51a:	68f8      	ldr	r0, [r7, #12]
 801b51c:	f7ff f8d0 	bl	801a6c0 <nk_add_value>
 801b520:	61b8      	str	r0, [r7, #24]
        *state = initial_state;
 801b522:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b526:	69bb      	ldr	r3, [r7, #24]
 801b528:	601a      	str	r2, [r3, #0]
    }
    return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);
 801b52a:	7af9      	ldrb	r1, [r7, #11]
 801b52c:	69bb      	ldr	r3, [r7, #24]
 801b52e:	9300      	str	r3, [sp, #0]
 801b530:	683b      	ldr	r3, [r7, #0]
 801b532:	687a      	ldr	r2, [r7, #4]
 801b534:	68f8      	ldr	r0, [r7, #12]
 801b536:	f7ff fc71 	bl	801ae1c <nk_tree_state_base>
 801b53a:	4603      	mov	r3, r0
}
 801b53c:	4618      	mov	r0, r3
 801b53e:	3720      	adds	r7, #32
 801b540:	46bd      	mov	sp, r7
 801b542:	bd80      	pop	{r7, pc}

0801b544 <nk_tree_state_pop>:
{
    return nk_tree_state_base(ctx, type, &img, title, state);
}
NK_API void
nk_tree_state_pop(struct nk_context *ctx)
{
 801b544:	b580      	push	{r7, lr}
 801b546:	b084      	sub	sp, #16
 801b548:	af00      	add	r7, sp, #0
 801b54a:	6078      	str	r0, [r7, #4]
    struct nk_window *win = 0;
 801b54c:	2300      	movs	r3, #0
 801b54e:	60fb      	str	r3, [r7, #12]
    struct nk_panel *layout = 0;
 801b550:	2300      	movs	r3, #0
 801b552:	60bb      	str	r3, [r7, #8]

    NK_ASSERT(ctx);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d105      	bne.n	801b566 <nk_tree_state_pop+0x22>
 801b55a:	4b43      	ldr	r3, [pc, #268]	; (801b668 <nk_tree_state_pop+0x124>)
 801b55c:	4a43      	ldr	r2, [pc, #268]	; (801b66c <nk_tree_state_pop+0x128>)
 801b55e:	21a2      	movs	r1, #162	; 0xa2
 801b560:	4843      	ldr	r0, [pc, #268]	; (801b670 <nk_tree_state_pop+0x12c>)
 801b562:	f002 f815 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b56c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b570:	2b00      	cmp	r3, #0
 801b572:	d105      	bne.n	801b580 <nk_tree_state_pop+0x3c>
 801b574:	4b3f      	ldr	r3, [pc, #252]	; (801b674 <nk_tree_state_pop+0x130>)
 801b576:	4a3d      	ldr	r2, [pc, #244]	; (801b66c <nk_tree_state_pop+0x128>)
 801b578:	21a3      	movs	r1, #163	; 0xa3
 801b57a:	483d      	ldr	r0, [pc, #244]	; (801b670 <nk_tree_state_pop+0x12c>)
 801b57c:	f002 f808 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b586:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b58a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d105      	bne.n	801b59e <nk_tree_state_pop+0x5a>
 801b592:	4b39      	ldr	r3, [pc, #228]	; (801b678 <nk_tree_state_pop+0x134>)
 801b594:	4a35      	ldr	r2, [pc, #212]	; (801b66c <nk_tree_state_pop+0x128>)
 801b596:	21a4      	movs	r1, #164	; 0xa4
 801b598:	4835      	ldr	r0, [pc, #212]	; (801b670 <nk_tree_state_pop+0x12c>)
 801b59a:	f001 fff9 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d05c      	beq.n	801b65e <nk_tree_state_pop+0x11a>
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b5aa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d055      	beq.n	801b65e <nk_tree_state_pop+0x11a>
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b5b8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d04c      	beq.n	801b65e <nk_tree_state_pop+0x11a>
        return;

    win = ctx->current;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b5ca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b5ce:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b5d6:	60bb      	str	r3, [r7, #8]
    layout->at_x -= ctx->style.tab.indent + (float)*layout->offset_x;
 801b5d8:	68bb      	ldr	r3, [r7, #8]
 801b5da:	ed93 7a08 	vldr	s14, [r3, #32]
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b5e4:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801b5e8:	edd3 6a00 	vldr	s13, [r3]
 801b5ec:	68bb      	ldr	r3, [r7, #8]
 801b5ee:	699b      	ldr	r3, [r3, #24]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	ee07 3a90 	vmov	s15, r3
 801b5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b5fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	edc3 7a08 	vstr	s15, [r3, #32]
    layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;
 801b608:	68bb      	ldr	r3, [r7, #8]
 801b60a:	ed93 7a04 	vldr	s14, [r3, #16]
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b614:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801b618:	edd3 6a00 	vldr	s13, [r3]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b622:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801b626:	edd3 7a00 	vldr	s15, [r3]
 801b62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b62e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	edc3 7a04 	vstr	s15, [r3, #16]
    NK_ASSERT(layout->row.tree_depth);
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d105      	bne.n	801b64e <nk_tree_state_pop+0x10a>
 801b642:	4b0e      	ldr	r3, [pc, #56]	; (801b67c <nk_tree_state_pop+0x138>)
 801b644:	4a09      	ldr	r2, [pc, #36]	; (801b66c <nk_tree_state_pop+0x128>)
 801b646:	21ac      	movs	r1, #172	; 0xac
 801b648:	4809      	ldr	r0, [pc, #36]	; (801b670 <nk_tree_state_pop+0x12c>)
 801b64a:	f001 ffa1 	bl	801d590 <__assert_func>
    layout->row.tree_depth--;
 801b64e:	68bb      	ldr	r3, [r7, #8]
 801b650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b654:	1e5a      	subs	r2, r3, #1
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 801b65c:	e000      	b.n	801b660 <nk_tree_state_pop+0x11c>
        return;
 801b65e:	bf00      	nop
}
 801b660:	3710      	adds	r7, #16
 801b662:	46bd      	mov	sp, r7
 801b664:	bd80      	pop	{r7, pc}
 801b666:	bf00      	nop
 801b668:	08021b68 	.word	0x08021b68
 801b66c:	08023254 	.word	0x08023254
 801b670:	08021b6c 	.word	0x08021b6c
 801b674:	08021b88 	.word	0x08021b88
 801b678:	08021b98 	.word	0x08021b98
 801b67c:	08021bb0 	.word	0x08021bb0

0801b680 <nk_tree_push_hashed>:
NK_API nk_bool
nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,
    const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801b680:	b580      	push	{r7, lr}
 801b682:	b088      	sub	sp, #32
 801b684:	af04      	add	r7, sp, #16
 801b686:	60f8      	str	r0, [r7, #12]
 801b688:	607a      	str	r2, [r7, #4]
 801b68a:	461a      	mov	r2, r3
 801b68c:	460b      	mov	r3, r1
 801b68e:	72fb      	strb	r3, [r7, #11]
 801b690:	4613      	mov	r3, r2
 801b692:	72bb      	strb	r3, [r7, #10]
    return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);
 801b694:	7af9      	ldrb	r1, [r7, #11]
 801b696:	6a3b      	ldr	r3, [r7, #32]
 801b698:	9303      	str	r3, [sp, #12]
 801b69a:	69fb      	ldr	r3, [r7, #28]
 801b69c:	9302      	str	r3, [sp, #8]
 801b69e:	69bb      	ldr	r3, [r7, #24]
 801b6a0:	9301      	str	r3, [sp, #4]
 801b6a2:	7abb      	ldrb	r3, [r7, #10]
 801b6a4:	9300      	str	r3, [sp, #0]
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	68f8      	ldr	r0, [r7, #12]
 801b6ac:	f7ff ff00 	bl	801b4b0 <nk_tree_base>
 801b6b0:	4603      	mov	r3, r0
}
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	3710      	adds	r7, #16
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}

0801b6ba <nk_tree_pop>:
{
    return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);
}
NK_API void
nk_tree_pop(struct nk_context *ctx)
{
 801b6ba:	b580      	push	{r7, lr}
 801b6bc:	b082      	sub	sp, #8
 801b6be:	af00      	add	r7, sp, #0
 801b6c0:	6078      	str	r0, [r7, #4]
    nk_tree_state_pop(ctx);
 801b6c2:	6878      	ldr	r0, [r7, #4]
 801b6c4:	f7ff ff3e 	bl	801b544 <nk_tree_state_pop>
}
 801b6c8:	bf00      	nop
 801b6ca:	3708      	adds	r7, #8
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	bd80      	pop	{r7, pc}

0801b6d0 <nk_utf_validate>:
NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};
NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};

NK_INTERN int
nk_utf_validate(nk_rune *u, int i)
{
 801b6d0:	b580      	push	{r7, lr}
 801b6d2:	b082      	sub	sp, #8
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	6078      	str	r0, [r7, #4]
 801b6d8:	6039      	str	r1, [r7, #0]
    NK_ASSERT(u);
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d105      	bne.n	801b6ec <nk_utf_validate+0x1c>
 801b6e0:	4b1e      	ldr	r3, [pc, #120]	; (801b75c <nk_utf_validate+0x8c>)
 801b6e2:	4a1f      	ldr	r2, [pc, #124]	; (801b760 <nk_utf_validate+0x90>)
 801b6e4:	2111      	movs	r1, #17
 801b6e6:	481f      	ldr	r0, [pc, #124]	; (801b764 <nk_utf_validate+0x94>)
 801b6e8:	f001 ff52 	bl	801d590 <__assert_func>
    if (!u) return 0;
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d101      	bne.n	801b6f6 <nk_utf_validate+0x26>
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	e02d      	b.n	801b752 <nk_utf_validate+0x82>
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801b6f6:	4a1c      	ldr	r2, [pc, #112]	; (801b768 <nk_utf_validate+0x98>)
 801b6f8:	683b      	ldr	r3, [r7, #0]
 801b6fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	429a      	cmp	r2, r3
 801b704:	d812      	bhi.n	801b72c <nk_utf_validate+0x5c>
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	681a      	ldr	r2, [r3, #0]
 801b70a:	4918      	ldr	r1, [pc, #96]	; (801b76c <nk_utf_validate+0x9c>)
 801b70c:	683b      	ldr	r3, [r7, #0]
 801b70e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b712:	429a      	cmp	r2, r3
 801b714:	d20a      	bcs.n	801b72c <nk_utf_validate+0x5c>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	681b      	ldr	r3, [r3, #0]
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801b71a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801b71e:	d309      	bcc.n	801b734 <nk_utf_validate+0x64>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	f64d 72fe 	movw	r2, #57342	; 0xdffe
 801b728:	4293      	cmp	r3, r2
 801b72a:	d803      	bhi.n	801b734 <nk_utf_validate+0x64>
            *u = NK_UTF_INVALID;
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b732:	601a      	str	r2, [r3, #0]
    for (i = 1; *u > nk_utfmax[i]; ++i);
 801b734:	2301      	movs	r3, #1
 801b736:	603b      	str	r3, [r7, #0]
 801b738:	e002      	b.n	801b740 <nk_utf_validate+0x70>
 801b73a:	683b      	ldr	r3, [r7, #0]
 801b73c:	3301      	adds	r3, #1
 801b73e:	603b      	str	r3, [r7, #0]
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	681a      	ldr	r2, [r3, #0]
 801b744:	4909      	ldr	r1, [pc, #36]	; (801b76c <nk_utf_validate+0x9c>)
 801b746:	683b      	ldr	r3, [r7, #0]
 801b748:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b74c:	429a      	cmp	r2, r3
 801b74e:	d8f4      	bhi.n	801b73a <nk_utf_validate+0x6a>
    return i;
 801b750:	683b      	ldr	r3, [r7, #0]
}
 801b752:	4618      	mov	r0, r3
 801b754:	3708      	adds	r7, #8
 801b756:	46bd      	mov	sp, r7
 801b758:	bd80      	pop	{r7, pc}
 801b75a:	bf00      	nop
 801b75c:	08021bc8 	.word	0x08021bc8
 801b760:	080232a0 	.word	0x080232a0
 801b764:	08021bcc 	.word	0x08021bcc
 801b768:	08023278 	.word	0x08023278
 801b76c:	0802328c 	.word	0x0802328c

0801b770 <nk_utf_decode_byte>:
NK_INTERN nk_rune
nk_utf_decode_byte(char c, int *i)
{
 801b770:	b580      	push	{r7, lr}
 801b772:	b082      	sub	sp, #8
 801b774:	af00      	add	r7, sp, #0
 801b776:	4603      	mov	r3, r0
 801b778:	6039      	str	r1, [r7, #0]
 801b77a:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(i);
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d105      	bne.n	801b78e <nk_utf_decode_byte+0x1e>
 801b782:	4b1b      	ldr	r3, [pc, #108]	; (801b7f0 <nk_utf_decode_byte+0x80>)
 801b784:	4a1b      	ldr	r2, [pc, #108]	; (801b7f4 <nk_utf_decode_byte+0x84>)
 801b786:	211c      	movs	r1, #28
 801b788:	481b      	ldr	r0, [pc, #108]	; (801b7f8 <nk_utf_decode_byte+0x88>)
 801b78a:	f001 ff01 	bl	801d590 <__assert_func>
    if (!i) return 0;
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d101      	bne.n	801b798 <nk_utf_decode_byte+0x28>
 801b794:	2300      	movs	r3, #0
 801b796:	e027      	b.n	801b7e8 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	2200      	movs	r2, #0
 801b79c:	601a      	str	r2, [r3, #0]
 801b79e:	e01e      	b.n	801b7de <nk_utf_decode_byte+0x6e>
        if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])
 801b7a0:	683b      	ldr	r3, [r7, #0]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	4a15      	ldr	r2, [pc, #84]	; (801b7fc <nk_utf_decode_byte+0x8c>)
 801b7a6:	5cd2      	ldrb	r2, [r2, r3]
 801b7a8:	79fb      	ldrb	r3, [r7, #7]
 801b7aa:	4013      	ands	r3, r2
 801b7ac:	b2da      	uxtb	r2, r3
 801b7ae:	683b      	ldr	r3, [r7, #0]
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	4913      	ldr	r1, [pc, #76]	; (801b800 <nk_utf_decode_byte+0x90>)
 801b7b4:	5ccb      	ldrb	r3, [r1, r3]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d10c      	bne.n	801b7d4 <nk_utf_decode_byte+0x64>
            return (nk_byte)(c & ~nk_utfmask[*i]);
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	4a0f      	ldr	r2, [pc, #60]	; (801b7fc <nk_utf_decode_byte+0x8c>)
 801b7c0:	5cd3      	ldrb	r3, [r2, r3]
 801b7c2:	b25b      	sxtb	r3, r3
 801b7c4:	43db      	mvns	r3, r3
 801b7c6:	b25a      	sxtb	r2, r3
 801b7c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b7cc:	4013      	ands	r3, r2
 801b7ce:	b25b      	sxtb	r3, r3
 801b7d0:	b2db      	uxtb	r3, r3
 801b7d2:	e009      	b.n	801b7e8 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801b7d4:	683b      	ldr	r3, [r7, #0]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	1c5a      	adds	r2, r3, #1
 801b7da:	683b      	ldr	r3, [r7, #0]
 801b7dc:	601a      	str	r2, [r3, #0]
 801b7de:	683b      	ldr	r3, [r7, #0]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	2b04      	cmp	r3, #4
 801b7e4:	dddc      	ble.n	801b7a0 <nk_utf_decode_byte+0x30>
    }
    return 0;
 801b7e6:	2300      	movs	r3, #0
}
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	3708      	adds	r7, #8
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}
 801b7f0:	08021be8 	.word	0x08021be8
 801b7f4:	080232b0 	.word	0x080232b0
 801b7f8:	08021bcc 	.word	0x08021bcc
 801b7fc:	08023270 	.word	0x08023270
 801b800:	08023268 	.word	0x08023268

0801b804 <nk_utf_decode>:
NK_API int
nk_utf_decode(const char *c, nk_rune *u, int clen)
{
 801b804:	b590      	push	{r4, r7, lr}
 801b806:	b08b      	sub	sp, #44	; 0x2c
 801b808:	af00      	add	r7, sp, #0
 801b80a:	60f8      	str	r0, [r7, #12]
 801b80c:	60b9      	str	r1, [r7, #8]
 801b80e:	607a      	str	r2, [r7, #4]
    int i, j, len, type=0;
 801b810:	2300      	movs	r3, #0
 801b812:	617b      	str	r3, [r7, #20]
    nk_rune udecoded;

    NK_ASSERT(c);
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d105      	bne.n	801b826 <nk_utf_decode+0x22>
 801b81a:	4b35      	ldr	r3, [pc, #212]	; (801b8f0 <nk_utf_decode+0xec>)
 801b81c:	4a35      	ldr	r2, [pc, #212]	; (801b8f4 <nk_utf_decode+0xf0>)
 801b81e:	212a      	movs	r1, #42	; 0x2a
 801b820:	4835      	ldr	r0, [pc, #212]	; (801b8f8 <nk_utf_decode+0xf4>)
 801b822:	f001 feb5 	bl	801d590 <__assert_func>
    NK_ASSERT(u);
 801b826:	68bb      	ldr	r3, [r7, #8]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d105      	bne.n	801b838 <nk_utf_decode+0x34>
 801b82c:	4b33      	ldr	r3, [pc, #204]	; (801b8fc <nk_utf_decode+0xf8>)
 801b82e:	4a31      	ldr	r2, [pc, #196]	; (801b8f4 <nk_utf_decode+0xf0>)
 801b830:	212b      	movs	r1, #43	; 0x2b
 801b832:	4831      	ldr	r0, [pc, #196]	; (801b8f8 <nk_utf_decode+0xf4>)
 801b834:	f001 feac 	bl	801d590 <__assert_func>

    if (!c || !u) return 0;
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d002      	beq.n	801b844 <nk_utf_decode+0x40>
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d101      	bne.n	801b848 <nk_utf_decode+0x44>
 801b844:	2300      	movs	r3, #0
 801b846:	e04f      	b.n	801b8e8 <nk_utf_decode+0xe4>
    if (!clen) return 0;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d101      	bne.n	801b852 <nk_utf_decode+0x4e>
 801b84e:	2300      	movs	r3, #0
 801b850:	e04a      	b.n	801b8e8 <nk_utf_decode+0xe4>
    *u = NK_UTF_INVALID;
 801b852:	68bb      	ldr	r3, [r7, #8]
 801b854:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b858:	601a      	str	r2, [r3, #0]

    udecoded = nk_utf_decode_byte(c[0], &len);
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	781b      	ldrb	r3, [r3, #0]
 801b85e:	f107 0218 	add.w	r2, r7, #24
 801b862:	4611      	mov	r1, r2
 801b864:	4618      	mov	r0, r3
 801b866:	f7ff ff83 	bl	801b770 <nk_utf_decode_byte>
 801b86a:	61f8      	str	r0, [r7, #28]
    if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))
 801b86c:	69bb      	ldr	r3, [r7, #24]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	dd02      	ble.n	801b878 <nk_utf_decode+0x74>
 801b872:	69bb      	ldr	r3, [r7, #24]
 801b874:	2b03      	cmp	r3, #3
 801b876:	dd01      	ble.n	801b87c <nk_utf_decode+0x78>
        return 1;
 801b878:	2301      	movs	r3, #1
 801b87a:	e035      	b.n	801b8e8 <nk_utf_decode+0xe4>

    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801b87c:	2301      	movs	r3, #1
 801b87e:	627b      	str	r3, [r7, #36]	; 0x24
 801b880:	2301      	movs	r3, #1
 801b882:	623b      	str	r3, [r7, #32]
 801b884:	e019      	b.n	801b8ba <nk_utf_decode+0xb6>
        udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);
 801b886:	69fb      	ldr	r3, [r7, #28]
 801b888:	019c      	lsls	r4, r3, #6
 801b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88c:	68fa      	ldr	r2, [r7, #12]
 801b88e:	4413      	add	r3, r2
 801b890:	781b      	ldrb	r3, [r3, #0]
 801b892:	f107 0214 	add.w	r2, r7, #20
 801b896:	4611      	mov	r1, r2
 801b898:	4618      	mov	r0, r3
 801b89a:	f7ff ff69 	bl	801b770 <nk_utf_decode_byte>
 801b89e:	4603      	mov	r3, r0
 801b8a0:	4323      	orrs	r3, r4
 801b8a2:	61fb      	str	r3, [r7, #28]
        if (type != 0)
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d001      	beq.n	801b8ae <nk_utf_decode+0xaa>
            return j;
 801b8aa:	6a3b      	ldr	r3, [r7, #32]
 801b8ac:	e01c      	b.n	801b8e8 <nk_utf_decode+0xe4>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8b0:	3301      	adds	r3, #1
 801b8b2:	627b      	str	r3, [r7, #36]	; 0x24
 801b8b4:	6a3b      	ldr	r3, [r7, #32]
 801b8b6:	3301      	adds	r3, #1
 801b8b8:	623b      	str	r3, [r7, #32]
 801b8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	da03      	bge.n	801b8ca <nk_utf_decode+0xc6>
 801b8c2:	69bb      	ldr	r3, [r7, #24]
 801b8c4:	6a3a      	ldr	r2, [r7, #32]
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	dbdd      	blt.n	801b886 <nk_utf_decode+0x82>
    }
    if (j < len)
 801b8ca:	69bb      	ldr	r3, [r7, #24]
 801b8cc:	6a3a      	ldr	r2, [r7, #32]
 801b8ce:	429a      	cmp	r2, r3
 801b8d0:	da01      	bge.n	801b8d6 <nk_utf_decode+0xd2>
        return 0;
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	e008      	b.n	801b8e8 <nk_utf_decode+0xe4>
    *u = udecoded;
 801b8d6:	68bb      	ldr	r3, [r7, #8]
 801b8d8:	69fa      	ldr	r2, [r7, #28]
 801b8da:	601a      	str	r2, [r3, #0]
    nk_utf_validate(u, len);
 801b8dc:	69bb      	ldr	r3, [r7, #24]
 801b8de:	4619      	mov	r1, r3
 801b8e0:	68b8      	ldr	r0, [r7, #8]
 801b8e2:	f7ff fef5 	bl	801b6d0 <nk_utf_validate>
    return len;
 801b8e6:	69bb      	ldr	r3, [r7, #24]
}
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	372c      	adds	r7, #44	; 0x2c
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd90      	pop	{r4, r7, pc}
 801b8f0:	08021bec 	.word	0x08021bec
 801b8f4:	080232c4 	.word	0x080232c4
 801b8f8:	08021bcc 	.word	0x08021bcc
 801b8fc:	08021bc8 	.word	0x08021bc8

0801b900 <nk_memcopy>:

//#ifndef NK_MEMCPY
//#define NK_MEMCPY nk_memcopy
NK_LIB void*
nk_memcopy(void *dst0, const void *src0, nk_size length)
{
 801b900:	b480      	push	{r7}
 801b902:	b089      	sub	sp, #36	; 0x24
 801b904:	af00      	add	r7, sp, #0
 801b906:	60f8      	str	r0, [r7, #12]
 801b908:	60b9      	str	r1, [r7, #8]
 801b90a:	607a      	str	r2, [r7, #4]
    nk_ptr t;
    char *dst = (char*)dst0;
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	61bb      	str	r3, [r7, #24]
    const char *src = (const char*)src0;
 801b910:	68bb      	ldr	r3, [r7, #8]
 801b912:	617b      	str	r3, [r7, #20]
    if (length == 0 || dst == src)
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	2b00      	cmp	r3, #0
 801b918:	f000 80c7 	beq.w	801baaa <nk_memcopy+0x1aa>
 801b91c:	69ba      	ldr	r2, [r7, #24]
 801b91e:	697b      	ldr	r3, [r7, #20]
 801b920:	429a      	cmp	r2, r3
 801b922:	f000 80c2 	beq.w	801baaa <nk_memcopy+0x1aa>
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize-1)
    #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
    #define NK_TLOOP1(s) do { s; } while (--t)

    if (dst < src) {
 801b926:	69ba      	ldr	r2, [r7, #24]
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	429a      	cmp	r2, r3
 801b92c:	d259      	bcs.n	801b9e2 <nk_memcopy+0xe2>
        t = (nk_ptr)src; /* only need low bits */
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801b932:	69ba      	ldr	r2, [r7, #24]
 801b934:	69fb      	ldr	r3, [r7, #28]
 801b936:	4313      	orrs	r3, r2
 801b938:	f003 0303 	and.w	r3, r3, #3
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d024      	beq.n	801b98a <nk_memcopy+0x8a>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)
 801b940:	69ba      	ldr	r2, [r7, #24]
 801b942:	69fb      	ldr	r3, [r7, #28]
 801b944:	4053      	eors	r3, r2
 801b946:	f003 0303 	and.w	r3, r3, #3
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d102      	bne.n	801b954 <nk_memcopy+0x54>
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	2b03      	cmp	r3, #3
 801b952:	d802      	bhi.n	801b95a <nk_memcopy+0x5a>
                t = length;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	61fb      	str	r3, [r7, #28]
 801b958:	e005      	b.n	801b966 <nk_memcopy+0x66>
            else
                t = nk_wsize - (t & nk_wmask);
 801b95a:	69fb      	ldr	r3, [r7, #28]
 801b95c:	f003 0303 	and.w	r3, r3, #3
 801b960:	f1c3 0304 	rsb	r3, r3, #4
 801b964:	61fb      	str	r3, [r7, #28]
            length -= t;
 801b966:	687a      	ldr	r2, [r7, #4]
 801b968:	69fb      	ldr	r3, [r7, #28]
 801b96a:	1ad3      	subs	r3, r2, r3
 801b96c:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*dst++ = *src++);
 801b96e:	697a      	ldr	r2, [r7, #20]
 801b970:	1c53      	adds	r3, r2, #1
 801b972:	617b      	str	r3, [r7, #20]
 801b974:	69bb      	ldr	r3, [r7, #24]
 801b976:	1c59      	adds	r1, r3, #1
 801b978:	61b9      	str	r1, [r7, #24]
 801b97a:	7812      	ldrb	r2, [r2, #0]
 801b97c:	701a      	strb	r2, [r3, #0]
 801b97e:	69fb      	ldr	r3, [r7, #28]
 801b980:	3b01      	subs	r3, #1
 801b982:	61fb      	str	r3, [r7, #28]
 801b984:	69fb      	ldr	r3, [r7, #28]
 801b986:	2b00      	cmp	r3, #0
 801b988:	d1f1      	bne.n	801b96e <nk_memcopy+0x6e>
        }
        t = length / nk_wsize;
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	089b      	lsrs	r3, r3, #2
 801b98e:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 801b990:	69fb      	ldr	r3, [r7, #28]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d00f      	beq.n	801b9b6 <nk_memcopy+0xb6>
 801b996:	697b      	ldr	r3, [r7, #20]
 801b998:	681a      	ldr	r2, [r3, #0]
 801b99a:	69bb      	ldr	r3, [r7, #24]
 801b99c:	601a      	str	r2, [r3, #0]
 801b99e:	697b      	ldr	r3, [r7, #20]
 801b9a0:	3304      	adds	r3, #4
 801b9a2:	617b      	str	r3, [r7, #20]
 801b9a4:	69bb      	ldr	r3, [r7, #24]
 801b9a6:	3304      	adds	r3, #4
 801b9a8:	61bb      	str	r3, [r7, #24]
 801b9aa:	69fb      	ldr	r3, [r7, #28]
 801b9ac:	3b01      	subs	r3, #1
 801b9ae:	61fb      	str	r3, [r7, #28]
 801b9b0:	69fb      	ldr	r3, [r7, #28]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d1ef      	bne.n	801b996 <nk_memcopy+0x96>
            src += nk_wsize; dst += nk_wsize);
        t = length & nk_wmask;
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	f003 0303 	and.w	r3, r3, #3
 801b9bc:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*dst++ = *src++);
 801b9be:	69fb      	ldr	r3, [r7, #28]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d075      	beq.n	801bab0 <nk_memcopy+0x1b0>
 801b9c4:	697a      	ldr	r2, [r7, #20]
 801b9c6:	1c53      	adds	r3, r2, #1
 801b9c8:	617b      	str	r3, [r7, #20]
 801b9ca:	69bb      	ldr	r3, [r7, #24]
 801b9cc:	1c59      	adds	r1, r3, #1
 801b9ce:	61b9      	str	r1, [r7, #24]
 801b9d0:	7812      	ldrb	r2, [r2, #0]
 801b9d2:	701a      	strb	r2, [r3, #0]
 801b9d4:	69fb      	ldr	r3, [r7, #28]
 801b9d6:	3b01      	subs	r3, #1
 801b9d8:	61fb      	str	r3, [r7, #28]
 801b9da:	69fb      	ldr	r3, [r7, #28]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d1f1      	bne.n	801b9c4 <nk_memcopy+0xc4>
 801b9e0:	e066      	b.n	801bab0 <nk_memcopy+0x1b0>
    } else {
        src += length;
 801b9e2:	697a      	ldr	r2, [r7, #20]
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	4413      	add	r3, r2
 801b9e8:	617b      	str	r3, [r7, #20]
        dst += length;
 801b9ea:	69ba      	ldr	r2, [r7, #24]
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	4413      	add	r3, r2
 801b9f0:	61bb      	str	r3, [r7, #24]
        t = (nk_ptr)src;
 801b9f2:	697b      	ldr	r3, [r7, #20]
 801b9f4:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801b9f6:	69ba      	ldr	r2, [r7, #24]
 801b9f8:	69fb      	ldr	r3, [r7, #28]
 801b9fa:	4313      	orrs	r3, r2
 801b9fc:	f003 0303 	and.w	r3, r3, #3
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d024      	beq.n	801ba4e <nk_memcopy+0x14e>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)
 801ba04:	69ba      	ldr	r2, [r7, #24]
 801ba06:	69fb      	ldr	r3, [r7, #28]
 801ba08:	4053      	eors	r3, r2
 801ba0a:	f003 0303 	and.w	r3, r3, #3
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d102      	bne.n	801ba18 <nk_memcopy+0x118>
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	2b04      	cmp	r3, #4
 801ba16:	d802      	bhi.n	801ba1e <nk_memcopy+0x11e>
                t = length;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	61fb      	str	r3, [r7, #28]
 801ba1c:	e003      	b.n	801ba26 <nk_memcopy+0x126>
            else
                t &= nk_wmask;
 801ba1e:	69fb      	ldr	r3, [r7, #28]
 801ba20:	f003 0303 	and.w	r3, r3, #3
 801ba24:	61fb      	str	r3, [r7, #28]
            length -= t;
 801ba26:	687a      	ldr	r2, [r7, #4]
 801ba28:	69fb      	ldr	r3, [r7, #28]
 801ba2a:	1ad3      	subs	r3, r2, r3
 801ba2c:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*--dst = *--src);
 801ba2e:	697b      	ldr	r3, [r7, #20]
 801ba30:	3b01      	subs	r3, #1
 801ba32:	617b      	str	r3, [r7, #20]
 801ba34:	69bb      	ldr	r3, [r7, #24]
 801ba36:	3b01      	subs	r3, #1
 801ba38:	61bb      	str	r3, [r7, #24]
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	781a      	ldrb	r2, [r3, #0]
 801ba3e:	69bb      	ldr	r3, [r7, #24]
 801ba40:	701a      	strb	r2, [r3, #0]
 801ba42:	69fb      	ldr	r3, [r7, #28]
 801ba44:	3b01      	subs	r3, #1
 801ba46:	61fb      	str	r3, [r7, #28]
 801ba48:	69fb      	ldr	r3, [r7, #28]
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d1ef      	bne.n	801ba2e <nk_memcopy+0x12e>
        }
        t = length / nk_wsize;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	089b      	lsrs	r3, r3, #2
 801ba52:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 801ba54:	69fb      	ldr	r3, [r7, #28]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d00f      	beq.n	801ba7a <nk_memcopy+0x17a>
 801ba5a:	697b      	ldr	r3, [r7, #20]
 801ba5c:	3b04      	subs	r3, #4
 801ba5e:	617b      	str	r3, [r7, #20]
 801ba60:	69bb      	ldr	r3, [r7, #24]
 801ba62:	3b04      	subs	r3, #4
 801ba64:	61bb      	str	r3, [r7, #24]
 801ba66:	697b      	ldr	r3, [r7, #20]
 801ba68:	681a      	ldr	r2, [r3, #0]
 801ba6a:	69bb      	ldr	r3, [r7, #24]
 801ba6c:	601a      	str	r2, [r3, #0]
 801ba6e:	69fb      	ldr	r3, [r7, #28]
 801ba70:	3b01      	subs	r3, #1
 801ba72:	61fb      	str	r3, [r7, #28]
 801ba74:	69fb      	ldr	r3, [r7, #28]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d1ef      	bne.n	801ba5a <nk_memcopy+0x15a>
            *(nk_word*)(void*)dst = *(const nk_word*)(const void*)src);
        t = length & nk_wmask;
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	f003 0303 	and.w	r3, r3, #3
 801ba80:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*--dst = *--src);
 801ba82:	69fb      	ldr	r3, [r7, #28]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d012      	beq.n	801baae <nk_memcopy+0x1ae>
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	3b01      	subs	r3, #1
 801ba8c:	617b      	str	r3, [r7, #20]
 801ba8e:	69bb      	ldr	r3, [r7, #24]
 801ba90:	3b01      	subs	r3, #1
 801ba92:	61bb      	str	r3, [r7, #24]
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	781a      	ldrb	r2, [r3, #0]
 801ba98:	69bb      	ldr	r3, [r7, #24]
 801ba9a:	701a      	strb	r2, [r3, #0]
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	3b01      	subs	r3, #1
 801baa0:	61fb      	str	r3, [r7, #28]
 801baa2:	69fb      	ldr	r3, [r7, #28]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d1ef      	bne.n	801ba88 <nk_memcopy+0x188>
    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
    #undef NK_TLOOP
    #undef NK_TLOOP1
done:
 801baa8:	e001      	b.n	801baae <nk_memcopy+0x1ae>
        goto done;
 801baaa:	bf00      	nop
 801baac:	e000      	b.n	801bab0 <nk_memcopy+0x1b0>
done:
 801baae:	bf00      	nop
    return (dst0);
 801bab0:	68fb      	ldr	r3, [r7, #12]
}
 801bab2:	4618      	mov	r0, r3
 801bab4:	3724      	adds	r7, #36	; 0x24
 801bab6:	46bd      	mov	sp, r7
 801bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801babc:	4770      	bx	lr

0801babe <nk_memset>:
//#endif
//#ifndef NK_MEMSET
//#define NK_MEMSET nk_memset
NK_LIB void
nk_memset(void *ptr, int c0, nk_size size)
{
 801babe:	b480      	push	{r7}
 801bac0:	b089      	sub	sp, #36	; 0x24
 801bac2:	af00      	add	r7, sp, #0
 801bac4:	60f8      	str	r0, [r7, #12]
 801bac6:	60b9      	str	r1, [r7, #8]
 801bac8:	607a      	str	r2, [r7, #4]
    #define nk_word unsigned
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize - 1)
    nk_byte *dst = (nk_byte*)ptr;
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	61fb      	str	r3, [r7, #28]
    unsigned c = 0;
 801bace:	2300      	movs	r3, #0
 801bad0:	61bb      	str	r3, [r7, #24]
    nk_size t = 0;
 801bad2:	2300      	movs	r3, #0
 801bad4:	617b      	str	r3, [r7, #20]

    if ((c = (nk_byte)c0) != 0) {
 801bad6:	68bb      	ldr	r3, [r7, #8]
 801bad8:	b2db      	uxtb	r3, r3
 801bada:	61bb      	str	r3, [r7, #24]
 801badc:	69bb      	ldr	r3, [r7, #24]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d009      	beq.n	801baf6 <nk_memset+0x38>
        c = (c << 8) | c; /* at least 16-bits  */
 801bae2:	69bb      	ldr	r3, [r7, #24]
 801bae4:	021b      	lsls	r3, r3, #8
 801bae6:	69ba      	ldr	r2, [r7, #24]
 801bae8:	4313      	orrs	r3, r2
 801baea:	61bb      	str	r3, [r7, #24]
        if (sizeof(unsigned int) > 2)
            c = (c << 16) | c; /* at least 32-bits*/
 801baec:	69bb      	ldr	r3, [r7, #24]
 801baee:	041b      	lsls	r3, r3, #16
 801baf0:	69ba      	ldr	r2, [r7, #24]
 801baf2:	4313      	orrs	r3, r2
 801baf4:	61bb      	str	r3, [r7, #24]
    }

    /* too small of a word count */
    dst = (nk_byte*)ptr;
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	61fb      	str	r3, [r7, #28]
    if (size < 3 * nk_wsize) {
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	2b0b      	cmp	r3, #11
 801bafe:	d80c      	bhi.n	801bb1a <nk_memset+0x5c>
        while (size--) *dst++ = (nk_byte)c0;
 801bb00:	e005      	b.n	801bb0e <nk_memset+0x50>
 801bb02:	69fb      	ldr	r3, [r7, #28]
 801bb04:	1c5a      	adds	r2, r3, #1
 801bb06:	61fa      	str	r2, [r7, #28]
 801bb08:	68ba      	ldr	r2, [r7, #8]
 801bb0a:	b2d2      	uxtb	r2, r2
 801bb0c:	701a      	strb	r2, [r3, #0]
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	1e5a      	subs	r2, r3, #1
 801bb12:	607a      	str	r2, [r7, #4]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d1f4      	bne.n	801bb02 <nk_memset+0x44>
        return;
 801bb18:	e03c      	b.n	801bb94 <nk_memset+0xd6>
    }

    /* align destination */
    if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {
 801bb1a:	69fb      	ldr	r3, [r7, #28]
 801bb1c:	f003 0303 	and.w	r3, r3, #3
 801bb20:	617b      	str	r3, [r7, #20]
 801bb22:	697b      	ldr	r3, [r7, #20]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d013      	beq.n	801bb50 <nk_memset+0x92>
        t = nk_wsize -t;
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	f1c3 0304 	rsb	r3, r3, #4
 801bb2e:	617b      	str	r3, [r7, #20]
        size -= t;
 801bb30:	687a      	ldr	r2, [r7, #4]
 801bb32:	697b      	ldr	r3, [r7, #20]
 801bb34:	1ad3      	subs	r3, r2, r3
 801bb36:	607b      	str	r3, [r7, #4]
        do {
            *dst++ = (nk_byte)c0;
 801bb38:	69fb      	ldr	r3, [r7, #28]
 801bb3a:	1c5a      	adds	r2, r3, #1
 801bb3c:	61fa      	str	r2, [r7, #28]
 801bb3e:	68ba      	ldr	r2, [r7, #8]
 801bb40:	b2d2      	uxtb	r2, r2
 801bb42:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	3b01      	subs	r3, #1
 801bb48:	617b      	str	r3, [r7, #20]
 801bb4a:	697b      	ldr	r3, [r7, #20]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d1f3      	bne.n	801bb38 <nk_memset+0x7a>
    }

    /* fill word */
    t = size / nk_wsize;
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	089b      	lsrs	r3, r3, #2
 801bb54:	617b      	str	r3, [r7, #20]
    do {
        *(nk_word*)((void*)dst) = c;
 801bb56:	69fb      	ldr	r3, [r7, #28]
 801bb58:	69ba      	ldr	r2, [r7, #24]
 801bb5a:	601a      	str	r2, [r3, #0]
        dst += nk_wsize;
 801bb5c:	69fb      	ldr	r3, [r7, #28]
 801bb5e:	3304      	adds	r3, #4
 801bb60:	61fb      	str	r3, [r7, #28]
    } while (--t != 0);
 801bb62:	697b      	ldr	r3, [r7, #20]
 801bb64:	3b01      	subs	r3, #1
 801bb66:	617b      	str	r3, [r7, #20]
 801bb68:	697b      	ldr	r3, [r7, #20]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d1f3      	bne.n	801bb56 <nk_memset+0x98>

    /* fill trailing bytes */
    t = (size & nk_wmask);
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	f003 0303 	and.w	r3, r3, #3
 801bb74:	617b      	str	r3, [r7, #20]
    if (t != 0) {
 801bb76:	697b      	ldr	r3, [r7, #20]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d00b      	beq.n	801bb94 <nk_memset+0xd6>
        do {
            *dst++ = (nk_byte)c0;
 801bb7c:	69fb      	ldr	r3, [r7, #28]
 801bb7e:	1c5a      	adds	r2, r3, #1
 801bb80:	61fa      	str	r2, [r7, #28]
 801bb82:	68ba      	ldr	r2, [r7, #8]
 801bb84:	b2d2      	uxtb	r2, r2
 801bb86:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801bb88:	697b      	ldr	r3, [r7, #20]
 801bb8a:	3b01      	subs	r3, #1
 801bb8c:	617b      	str	r3, [r7, #20]
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d1f3      	bne.n	801bb7c <nk_memset+0xbe>
    }

    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
}
 801bb94:	3724      	adds	r7, #36	; 0x24
 801bb96:	46bd      	mov	sp, r7
 801bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9c:	4770      	bx	lr
	...

0801bba0 <nk_zero>:
//#endif
NK_LIB void
nk_zero(void *ptr, nk_size size)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b082      	sub	sp, #8
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	6078      	str	r0, [r7, #4]
 801bba8:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ptr);
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d105      	bne.n	801bbbc <nk_zero+0x1c>
 801bbb0:	4b07      	ldr	r3, [pc, #28]	; (801bbd0 <nk_zero+0x30>)
 801bbb2:	4a08      	ldr	r2, [pc, #32]	; (801bbd4 <nk_zero+0x34>)
 801bbb4:	2184      	movs	r1, #132	; 0x84
 801bbb6:	4808      	ldr	r0, [pc, #32]	; (801bbd8 <nk_zero+0x38>)
 801bbb8:	f001 fcea 	bl	801d590 <__assert_func>
    NK_MEMSET(ptr, 0, size);
 801bbbc:	683a      	ldr	r2, [r7, #0]
 801bbbe:	2100      	movs	r1, #0
 801bbc0:	6878      	ldr	r0, [r7, #4]
 801bbc2:	f7ff ff7c 	bl	801babe <nk_memset>
}
 801bbc6:	bf00      	nop
 801bbc8:	3708      	adds	r7, #8
 801bbca:	46bd      	mov	sp, r7
 801bbcc:	bd80      	pop	{r7, pc}
 801bbce:	bf00      	nop
 801bbd0:	08021c08 	.word	0x08021c08
 801bbd4:	080232d4 	.word	0x080232d4
 801bbd8:	08021c0c 	.word	0x08021c0c

0801bbdc <nk_strlen>:
NK_API int
nk_strlen(const char *str)
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b084      	sub	sp, #16
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6078      	str	r0, [r7, #4]
    int siz = 0;
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(str);
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d108      	bne.n	801bc00 <nk_strlen+0x24>
 801bbee:	4b0b      	ldr	r3, [pc, #44]	; (801bc1c <nk_strlen+0x40>)
 801bbf0:	4a0b      	ldr	r2, [pc, #44]	; (801bc20 <nk_strlen+0x44>)
 801bbf2:	218b      	movs	r1, #139	; 0x8b
 801bbf4:	480b      	ldr	r0, [pc, #44]	; (801bc24 <nk_strlen+0x48>)
 801bbf6:	f001 fccb 	bl	801d590 <__assert_func>
    while (str && *str++ != '\0') siz++;
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	3301      	adds	r3, #1
 801bbfe:	60fb      	str	r3, [r7, #12]
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d005      	beq.n	801bc12 <nk_strlen+0x36>
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	1c5a      	adds	r2, r3, #1
 801bc0a:	607a      	str	r2, [r7, #4]
 801bc0c:	781b      	ldrb	r3, [r3, #0]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d1f3      	bne.n	801bbfa <nk_strlen+0x1e>
    return siz;
 801bc12:	68fb      	ldr	r3, [r7, #12]
}
 801bc14:	4618      	mov	r0, r3
 801bc16:	3710      	adds	r7, #16
 801bc18:	46bd      	mov	sp, r7
 801bc1a:	bd80      	pop	{r7, pc}
 801bc1c:	08021c28 	.word	0x08021c28
 801bc20:	080232dc 	.word	0x080232dc
 801bc24:	08021c0c 	.word	0x08021c0c

0801bc28 <nk_stricmpn>:
    } while (c1);
    return 0;
}
NK_API int
nk_stricmpn(const char *s1, const char *s2, int n)
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b088      	sub	sp, #32
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	60f8      	str	r0, [r7, #12]
 801bc30:	60b9      	str	r1, [r7, #8]
 801bc32:	607a      	str	r2, [r7, #4]
    int c1,c2,d;
    NK_ASSERT(n >= 0);
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	da06      	bge.n	801bc48 <nk_stricmpn+0x20>
 801bc3a:	4b25      	ldr	r3, [pc, #148]	; (801bcd0 <nk_stricmpn+0xa8>)
 801bc3c:	4a25      	ldr	r2, [pc, #148]	; (801bcd4 <nk_stricmpn+0xac>)
 801bc3e:	f240 1103 	movw	r1, #259	; 0x103
 801bc42:	4825      	ldr	r0, [pc, #148]	; (801bcd8 <nk_stricmpn+0xb0>)
 801bc44:	f001 fca4 	bl	801d590 <__assert_func>
    do {
        c1 = *s1++;
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	1c5a      	adds	r2, r3, #1
 801bc4c:	60fa      	str	r2, [r7, #12]
 801bc4e:	781b      	ldrb	r3, [r3, #0]
 801bc50:	61bb      	str	r3, [r7, #24]
        c2 = *s2++;
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	1c5a      	adds	r2, r3, #1
 801bc56:	60ba      	str	r2, [r7, #8]
 801bc58:	781b      	ldrb	r3, [r3, #0]
 801bc5a:	617b      	str	r3, [r7, #20]
        if (!n--) return 0;
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	1e5a      	subs	r2, r3, #1
 801bc60:	607a      	str	r2, [r7, #4]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d101      	bne.n	801bc6a <nk_stricmpn+0x42>
 801bc66:	2300      	movs	r3, #0
 801bc68:	e02e      	b.n	801bcc8 <nk_stricmpn+0xa0>

        d = c1 - c2;
 801bc6a:	69ba      	ldr	r2, [r7, #24]
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	1ad3      	subs	r3, r2, r3
 801bc70:	61fb      	str	r3, [r7, #28]
        while (d) {
 801bc72:	bf00      	nop
 801bc74:	69fb      	ldr	r3, [r7, #28]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d022      	beq.n	801bcc0 <nk_stricmpn+0x98>
            if (c1 <= 'Z' && c1 >= 'A') {
 801bc7a:	69bb      	ldr	r3, [r7, #24]
 801bc7c:	2b5a      	cmp	r3, #90	; 0x5a
 801bc7e:	dc08      	bgt.n	801bc92 <nk_stricmpn+0x6a>
 801bc80:	69bb      	ldr	r3, [r7, #24]
 801bc82:	2b40      	cmp	r3, #64	; 0x40
 801bc84:	dd05      	ble.n	801bc92 <nk_stricmpn+0x6a>
                d += ('a' - 'A');
 801bc86:	69fb      	ldr	r3, [r7, #28]
 801bc88:	3320      	adds	r3, #32
 801bc8a:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801bc8c:	69fb      	ldr	r3, [r7, #28]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d013      	beq.n	801bcba <nk_stricmpn+0x92>
            }
            if (c2 <= 'Z' && c2 >= 'A') {
 801bc92:	697b      	ldr	r3, [r7, #20]
 801bc94:	2b5a      	cmp	r3, #90	; 0x5a
 801bc96:	dc08      	bgt.n	801bcaa <nk_stricmpn+0x82>
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	2b40      	cmp	r3, #64	; 0x40
 801bc9c:	dd05      	ble.n	801bcaa <nk_stricmpn+0x82>
                d -= ('a' - 'A');
 801bc9e:	69fb      	ldr	r3, [r7, #28]
 801bca0:	3b20      	subs	r3, #32
 801bca2:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801bca4:	69fb      	ldr	r3, [r7, #28]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d009      	beq.n	801bcbe <nk_stricmpn+0x96>
            }
            return ((d >= 0) << 1) - 1;
 801bcaa:	69fb      	ldr	r3, [r7, #28]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	db01      	blt.n	801bcb4 <nk_stricmpn+0x8c>
 801bcb0:	2301      	movs	r3, #1
 801bcb2:	e009      	b.n	801bcc8 <nk_stricmpn+0xa0>
 801bcb4:	f04f 33ff 	mov.w	r3, #4294967295
 801bcb8:	e006      	b.n	801bcc8 <nk_stricmpn+0xa0>
                if (!d) break;
 801bcba:	bf00      	nop
 801bcbc:	e000      	b.n	801bcc0 <nk_stricmpn+0x98>
                if (!d) break;
 801bcbe:	bf00      	nop
        }
    } while (c1);
 801bcc0:	69bb      	ldr	r3, [r7, #24]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d1c0      	bne.n	801bc48 <nk_stricmpn+0x20>
    return 0;
 801bcc6:	2300      	movs	r3, #0
}
 801bcc8:	4618      	mov	r0, r3
 801bcca:	3720      	adds	r7, #32
 801bccc:	46bd      	mov	sp, r7
 801bcce:	bd80      	pop	{r7, pc}
 801bcd0:	08021c2c 	.word	0x08021c2c
 801bcd4:	080232e8 	.word	0x080232e8
 801bcd8:	08021c0c 	.word	0x08021c0c

0801bcdc <nk_murmur_hash>:
    return result;
}
#endif
NK_API nk_hash
nk_murmur_hash(const void * key, int len, nk_hash seed)
{
 801bcdc:	b480      	push	{r7}
 801bcde:	b091      	sub	sp, #68	; 0x44
 801bce0:	af00      	add	r7, sp, #0
 801bce2:	60f8      	str	r0, [r7, #12]
 801bce4:	60b9      	str	r1, [r7, #8]
 801bce6:	607a      	str	r2, [r7, #4]
    /* 32-Bit MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3*/
    #define NK_ROTL(x,r) ((x) << (r) | ((x) >> (32 - r)))

    nk_uint h1 = seed;
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_uint k1;
    const nk_byte *data = (const nk_byte*)key;
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	633b      	str	r3, [r7, #48]	; 0x30
    const nk_byte *keyptr = data;
 801bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcf2:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_byte *k1ptr;
    const int bsize = sizeof(k1);
 801bcf4:	2304      	movs	r3, #4
 801bcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int nblocks = len/4;
 801bcf8:	68bb      	ldr	r3, [r7, #8]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	da00      	bge.n	801bd00 <nk_murmur_hash+0x24>
 801bcfe:	3303      	adds	r3, #3
 801bd00:	109b      	asrs	r3, r3, #2
 801bd02:	62bb      	str	r3, [r7, #40]	; 0x28

    const nk_uint c1 = 0xcc9e2d51;
 801bd04:	4b57      	ldr	r3, [pc, #348]	; (801be64 <nk_murmur_hash+0x188>)
 801bd06:	627b      	str	r3, [r7, #36]	; 0x24
    const nk_uint c2 = 0x1b873593;
 801bd08:	4b57      	ldr	r3, [pc, #348]	; (801be68 <nk_murmur_hash+0x18c>)
 801bd0a:	623b      	str	r3, [r7, #32]
    const nk_byte *tail;
    int i;

    /* body */
    if (!key) return 0;
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d101      	bne.n	801bd16 <nk_murmur_hash+0x3a>
 801bd12:	2300      	movs	r3, #0
 801bd14:	e09f      	b.n	801be56 <nk_murmur_hash+0x17a>
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801bd16:	2300      	movs	r3, #0
 801bd18:	637b      	str	r3, [r7, #52]	; 0x34
 801bd1a:	e03c      	b.n	801bd96 <nk_murmur_hash+0xba>
        k1ptr = (nk_byte*)&k1;
 801bd1c:	f107 0314 	add.w	r3, r7, #20
 801bd20:	61bb      	str	r3, [r7, #24]
        k1ptr[0] = keyptr[0];
 801bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd24:	781a      	ldrb	r2, [r3, #0]
 801bd26:	69bb      	ldr	r3, [r7, #24]
 801bd28:	701a      	strb	r2, [r3, #0]
        k1ptr[1] = keyptr[1];
 801bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd2c:	1c5a      	adds	r2, r3, #1
 801bd2e:	69bb      	ldr	r3, [r7, #24]
 801bd30:	3301      	adds	r3, #1
 801bd32:	7812      	ldrb	r2, [r2, #0]
 801bd34:	701a      	strb	r2, [r3, #0]
        k1ptr[2] = keyptr[2];
 801bd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd38:	1c9a      	adds	r2, r3, #2
 801bd3a:	69bb      	ldr	r3, [r7, #24]
 801bd3c:	3302      	adds	r3, #2
 801bd3e:	7812      	ldrb	r2, [r2, #0]
 801bd40:	701a      	strb	r2, [r3, #0]
        k1ptr[3] = keyptr[3];
 801bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd44:	1cda      	adds	r2, r3, #3
 801bd46:	69bb      	ldr	r3, [r7, #24]
 801bd48:	3303      	adds	r3, #3
 801bd4a:	7812      	ldrb	r2, [r2, #0]
 801bd4c:	701a      	strb	r2, [r3, #0]

        k1 *= c1;
 801bd4e:	697b      	ldr	r3, [r7, #20]
 801bd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bd52:	fb02 f303 	mul.w	r3, r2, r3
 801bd56:	617b      	str	r3, [r7, #20]
        k1 = NK_ROTL(k1,15);
 801bd58:	697b      	ldr	r3, [r7, #20]
 801bd5a:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bd5e:	617b      	str	r3, [r7, #20]
        k1 *= c2;
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	6a3a      	ldr	r2, [r7, #32]
 801bd64:	fb02 f303 	mul.w	r3, r2, r3
 801bd68:	617b      	str	r3, [r7, #20]

        h1 ^= k1;
 801bd6a:	697b      	ldr	r3, [r7, #20]
 801bd6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bd6e:	4053      	eors	r3, r2
 801bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = NK_ROTL(h1,13);
 801bd72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd74:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801bd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = h1*5+0xe6546b64;
 801bd7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bd7c:	4613      	mov	r3, r2
 801bd7e:	009b      	lsls	r3, r3, #2
 801bd80:	441a      	add	r2, r3
 801bd82:	4b3a      	ldr	r3, [pc, #232]	; (801be6c <nk_murmur_hash+0x190>)
 801bd84:	4413      	add	r3, r2
 801bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	637b      	str	r3, [r7, #52]	; 0x34
 801bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bd92:	4413      	add	r3, r2
 801bd94:	63bb      	str	r3, [r7, #56]	; 0x38
 801bd96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd9a:	429a      	cmp	r2, r3
 801bd9c:	dbbe      	blt.n	801bd1c <nk_murmur_hash+0x40>
    }

    /* tail */
    tail = (const nk_byte*)(data + nblocks*4);
 801bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bda0:	009b      	lsls	r3, r3, #2
 801bda2:	461a      	mov	r2, r3
 801bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bda6:	4413      	add	r3, r2
 801bda8:	61fb      	str	r3, [r7, #28]
    k1 = 0;
 801bdaa:	2300      	movs	r3, #0
 801bdac:	617b      	str	r3, [r7, #20]
    switch (len & 3) {
 801bdae:	68bb      	ldr	r3, [r7, #8]
 801bdb0:	f003 0303 	and.w	r3, r3, #3
 801bdb4:	2b03      	cmp	r3, #3
 801bdb6:	d006      	beq.n	801bdc6 <nk_murmur_hash+0xea>
 801bdb8:	2b03      	cmp	r3, #3
 801bdba:	dc2d      	bgt.n	801be18 <nk_murmur_hash+0x13c>
 801bdbc:	2b01      	cmp	r3, #1
 801bdbe:	d012      	beq.n	801bde6 <nk_murmur_hash+0x10a>
 801bdc0:	2b02      	cmp	r3, #2
 801bdc2:	d008      	beq.n	801bdd6 <nk_murmur_hash+0xfa>
            k1 *= c1;
            k1 = NK_ROTL(k1,15);
            k1 *= c2;
            h1 ^= k1;
            break;
        default: break;
 801bdc4:	e028      	b.n	801be18 <nk_murmur_hash+0x13c>
        case 3: k1 ^= (nk_uint)(tail[2] << 16); /* fallthrough */
 801bdc6:	69fb      	ldr	r3, [r7, #28]
 801bdc8:	3302      	adds	r3, #2
 801bdca:	781b      	ldrb	r3, [r3, #0]
 801bdcc:	041b      	lsls	r3, r3, #16
 801bdce:	461a      	mov	r2, r3
 801bdd0:	697b      	ldr	r3, [r7, #20]
 801bdd2:	4053      	eors	r3, r2
 801bdd4:	617b      	str	r3, [r7, #20]
        case 2: k1 ^= (nk_uint)(tail[1] << 8u); /* fallthrough */
 801bdd6:	69fb      	ldr	r3, [r7, #28]
 801bdd8:	3301      	adds	r3, #1
 801bdda:	781b      	ldrb	r3, [r3, #0]
 801bddc:	021b      	lsls	r3, r3, #8
 801bdde:	461a      	mov	r2, r3
 801bde0:	697b      	ldr	r3, [r7, #20]
 801bde2:	4053      	eors	r3, r2
 801bde4:	617b      	str	r3, [r7, #20]
        case 1: k1 ^= tail[0];
 801bde6:	69fb      	ldr	r3, [r7, #28]
 801bde8:	781b      	ldrb	r3, [r3, #0]
 801bdea:	461a      	mov	r2, r3
 801bdec:	697b      	ldr	r3, [r7, #20]
 801bdee:	4053      	eors	r3, r2
 801bdf0:	617b      	str	r3, [r7, #20]
            k1 *= c1;
 801bdf2:	697b      	ldr	r3, [r7, #20]
 801bdf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bdf6:	fb02 f303 	mul.w	r3, r2, r3
 801bdfa:	617b      	str	r3, [r7, #20]
            k1 = NK_ROTL(k1,15);
 801bdfc:	697b      	ldr	r3, [r7, #20]
 801bdfe:	ea4f 4373 	mov.w	r3, r3, ror #17
 801be02:	617b      	str	r3, [r7, #20]
            k1 *= c2;
 801be04:	697b      	ldr	r3, [r7, #20]
 801be06:	6a3a      	ldr	r2, [r7, #32]
 801be08:	fb02 f303 	mul.w	r3, r2, r3
 801be0c:	617b      	str	r3, [r7, #20]
            h1 ^= k1;
 801be0e:	697b      	ldr	r3, [r7, #20]
 801be10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be12:	4053      	eors	r3, r2
 801be14:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 801be16:	e000      	b.n	801be1a <nk_murmur_hash+0x13e>
        default: break;
 801be18:	bf00      	nop
    }

    /* finalization */
    h1 ^= (nk_uint)len;
 801be1a:	68bb      	ldr	r3, [r7, #8]
 801be1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be1e:	4053      	eors	r3, r2
 801be20:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* fmix32 */
    h1 ^= h1 >> 16;
 801be22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be24:	0c1b      	lsrs	r3, r3, #16
 801be26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be28:	4053      	eors	r3, r2
 801be2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0x85ebca6b;
 801be2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be2e:	4a10      	ldr	r2, [pc, #64]	; (801be70 <nk_murmur_hash+0x194>)
 801be30:	fb02 f303 	mul.w	r3, r2, r3
 801be34:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 13;
 801be36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be38:	0b5b      	lsrs	r3, r3, #13
 801be3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be3c:	4053      	eors	r3, r2
 801be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0xc2b2ae35;
 801be40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be42:	4a0c      	ldr	r2, [pc, #48]	; (801be74 <nk_murmur_hash+0x198>)
 801be44:	fb02 f303 	mul.w	r3, r2, r3
 801be48:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 16;
 801be4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be4c:	0c1b      	lsrs	r3, r3, #16
 801be4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be50:	4053      	eors	r3, r2
 801be52:	63fb      	str	r3, [r7, #60]	; 0x3c

    #undef NK_ROTL
    return h1;
 801be54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801be56:	4618      	mov	r0, r3
 801be58:	3744      	adds	r7, #68	; 0x44
 801be5a:	46bd      	mov	sp, r7
 801be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be60:	4770      	bx	lr
 801be62:	bf00      	nop
 801be64:	cc9e2d51 	.word	0xcc9e2d51
 801be68:	1b873593 	.word	0x1b873593
 801be6c:	e6546b64 	.word	0xe6546b64
 801be70:	85ebca6b 	.word	0x85ebca6b
 801be74:	c2b2ae35 	.word	0xc2b2ae35

0801be78 <nk_text_clamp>:
#endif
NK_LIB int
nk_text_clamp(const struct nk_user_font *font, const char *text,
    int text_len, float space, int *glyphs, float *text_width,
    nk_rune *sep_list, int sep_count)
{
 801be78:	b580      	push	{r7, lr}
 801be7a:	b092      	sub	sp, #72	; 0x48
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	6178      	str	r0, [r7, #20]
 801be80:	6139      	str	r1, [r7, #16]
 801be82:	60fa      	str	r2, [r7, #12]
 801be84:	ed87 0a02 	vstr	s0, [r7, #8]
 801be88:	607b      	str	r3, [r7, #4]
    int i = 0;
 801be8a:	2300      	movs	r3, #0
 801be8c:	647b      	str	r3, [r7, #68]	; 0x44
    int glyph_len = 0;
 801be8e:	2300      	movs	r3, #0
 801be90:	643b      	str	r3, [r7, #64]	; 0x40
    float last_width = 0;
 801be92:	f04f 0300 	mov.w	r3, #0
 801be96:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 801be98:	2300      	movs	r3, #0
 801be9a:	61fb      	str	r3, [r7, #28]
    float width = 0;
 801be9c:	f04f 0300 	mov.w	r3, #0
 801bea0:	63bb      	str	r3, [r7, #56]	; 0x38
    int len = 0;
 801bea2:	2300      	movs	r3, #0
 801bea4:	637b      	str	r3, [r7, #52]	; 0x34
    int g = 0;
 801bea6:	2300      	movs	r3, #0
 801bea8:	633b      	str	r3, [r7, #48]	; 0x30
    float s;

    int sep_len = 0;
 801beaa:	2300      	movs	r3, #0
 801beac:	62fb      	str	r3, [r7, #44]	; 0x2c
    int sep_g = 0;
 801beae:	2300      	movs	r3, #0
 801beb0:	62bb      	str	r3, [r7, #40]	; 0x28
    float sep_width = 0;
 801beb2:	f04f 0300 	mov.w	r3, #0
 801beb6:	627b      	str	r3, [r7, #36]	; 0x24
    sep_count = NK_MAX(sep_count,0);
 801beb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801beba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bebe:	65bb      	str	r3, [r7, #88]	; 0x58

    glyph_len = nk_utf_decode(text, &unicode, text_len);
 801bec0:	f107 031c 	add.w	r3, r7, #28
 801bec4:	68fa      	ldr	r2, [r7, #12]
 801bec6:	4619      	mov	r1, r3
 801bec8:	6938      	ldr	r0, [r7, #16]
 801beca:	f7ff fc9b 	bl	801b804 <nk_utf_decode>
 801bece:	6438      	str	r0, [r7, #64]	; 0x40
    while (glyph_len && (width < space) && (len < text_len)) {
 801bed0:	e04a      	b.n	801bf68 <nk_text_clamp+0xf0>
        len += glyph_len;
 801bed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bed6:	4413      	add	r3, r2
 801bed8:	637b      	str	r3, [r7, #52]	; 0x34
        s = font->width(font->userdata, font->height, text, len);
 801beda:	697b      	ldr	r3, [r7, #20]
 801bedc:	689b      	ldr	r3, [r3, #8]
 801bede:	697a      	ldr	r2, [r7, #20]
 801bee0:	edd2 7a01 	vldr	s15, [r2, #4]
 801bee4:	6978      	ldr	r0, [r7, #20]
 801bee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bee8:	6939      	ldr	r1, [r7, #16]
 801beea:	eeb0 0a67 	vmov.f32	s0, s15
 801beee:	6800      	ldr	r0, [r0, #0]
 801bef0:	4798      	blx	r3
 801bef2:	ed87 0a08 	vstr	s0, [r7, #32]
        for (i = 0; i < sep_count; ++i) {
 801bef6:	2300      	movs	r3, #0
 801bef8:	647b      	str	r3, [r7, #68]	; 0x44
 801befa:	e015      	b.n	801bf28 <nk_text_clamp+0xb0>
            if (unicode != sep_list[i]) continue;
 801befc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801befe:	009b      	lsls	r3, r3, #2
 801bf00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bf02:	4413      	add	r3, r2
 801bf04:	681a      	ldr	r2, [r3, #0]
 801bf06:	69fb      	ldr	r3, [r7, #28]
 801bf08:	429a      	cmp	r2, r3
 801bf0a:	d109      	bne.n	801bf20 <nk_text_clamp+0xa8>
            sep_width = last_width = width;
 801bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf12:	627b      	str	r3, [r7, #36]	; 0x24
            sep_g = g+1;
 801bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf16:	3301      	adds	r3, #1
 801bf18:	62bb      	str	r3, [r7, #40]	; 0x28
            sep_len = len;
 801bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801bf1e:	e007      	b.n	801bf30 <nk_text_clamp+0xb8>
            if (unicode != sep_list[i]) continue;
 801bf20:	bf00      	nop
        for (i = 0; i < sep_count; ++i) {
 801bf22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bf24:	3301      	adds	r3, #1
 801bf26:	647b      	str	r3, [r7, #68]	; 0x44
 801bf28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bf2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bf2c:	429a      	cmp	r2, r3
 801bf2e:	dbe5      	blt.n	801befc <nk_text_clamp+0x84>
        }
        if (i == sep_count){
 801bf30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bf32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bf34:	429a      	cmp	r2, r3
 801bf36:	d106      	bne.n	801bf46 <nk_text_clamp+0xce>
            last_width = sep_width = width;
 801bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf3a:	627b      	str	r3, [r7, #36]	; 0x24
 801bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
            sep_g = g+1;
 801bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf42:	3301      	adds	r3, #1
 801bf44:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        width = s;
 801bf46:	6a3b      	ldr	r3, [r7, #32]
 801bf48:	63bb      	str	r3, [r7, #56]	; 0x38
        glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);
 801bf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf4c:	693a      	ldr	r2, [r7, #16]
 801bf4e:	18d0      	adds	r0, r2, r3
 801bf50:	68fa      	ldr	r2, [r7, #12]
 801bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf54:	1ad2      	subs	r2, r2, r3
 801bf56:	f107 031c 	add.w	r3, r7, #28
 801bf5a:	4619      	mov	r1, r3
 801bf5c:	f7ff fc52 	bl	801b804 <nk_utf_decode>
 801bf60:	6438      	str	r0, [r7, #64]	; 0x40
        g++;
 801bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf64:	3301      	adds	r3, #1
 801bf66:	633b      	str	r3, [r7, #48]	; 0x30
    while (glyph_len && (width < space) && (len < text_len)) {
 801bf68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d00c      	beq.n	801bf88 <nk_text_clamp+0x110>
 801bf6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801bf72:	edd7 7a02 	vldr	s15, [r7, #8]
 801bf76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf7e:	d503      	bpl.n	801bf88 <nk_text_clamp+0x110>
 801bf80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	429a      	cmp	r2, r3
 801bf86:	dba4      	blt.n	801bed2 <nk_text_clamp+0x5a>
    }
    if (len >= text_len) {
 801bf88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	429a      	cmp	r2, r3
 801bf8e:	db07      	blt.n	801bfa0 <nk_text_clamp+0x128>
        *glyphs = g;
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf94:	601a      	str	r2, [r3, #0]
        *text_width = last_width;
 801bf96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf9a:	601a      	str	r2, [r3, #0]
        return len;
 801bf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf9e:	e00b      	b.n	801bfb8 <nk_text_clamp+0x140>
    } else {
        *glyphs = sep_g;
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bfa4:	601a      	str	r2, [r3, #0]
        *text_width = sep_width;
 801bfa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bfa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bfaa:	601a      	str	r2, [r3, #0]
        return (!sep_len) ? len: sep_len;
 801bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d101      	bne.n	801bfb6 <nk_text_clamp+0x13e>
 801bfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfb4:	e000      	b.n	801bfb8 <nk_text_clamp+0x140>
 801bfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
}
 801bfb8:	4618      	mov	r0, r3
 801bfba:	3748      	adds	r7, #72	; 0x48
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	bd80      	pop	{r7, pc}

0801bfc0 <nk_widget>:
        return 0;
    return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);
}
NK_API enum nk_widget_layout_states
nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)
{
 801bfc0:	b590      	push	{r4, r7, lr}
 801bfc2:	b08f      	sub	sp, #60	; 0x3c
 801bfc4:	af00      	add	r7, sp, #0
 801bfc6:	6078      	str	r0, [r7, #4]
 801bfc8:	6039      	str	r1, [r7, #0]
    struct nk_rect c, v;
    struct nk_window *win;
    struct nk_panel *layout;
    const struct nk_input *in;

    NK_ASSERT(ctx);
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d105      	bne.n	801bfdc <nk_widget+0x1c>
 801bfd0:	4b9d      	ldr	r3, [pc, #628]	; (801c248 <nk_widget+0x288>)
 801bfd2:	4a9e      	ldr	r2, [pc, #632]	; (801c24c <nk_widget+0x28c>)
 801bfd4:	218e      	movs	r1, #142	; 0x8e
 801bfd6:	489e      	ldr	r0, [pc, #632]	; (801c250 <nk_widget+0x290>)
 801bfd8:	f001 fada 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801bfdc:	683b      	ldr	r3, [r7, #0]
 801bfde:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bfe2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d105      	bne.n	801bff6 <nk_widget+0x36>
 801bfea:	4b9a      	ldr	r3, [pc, #616]	; (801c254 <nk_widget+0x294>)
 801bfec:	4a97      	ldr	r2, [pc, #604]	; (801c24c <nk_widget+0x28c>)
 801bfee:	218f      	movs	r1, #143	; 0x8f
 801bff0:	4897      	ldr	r0, [pc, #604]	; (801c250 <nk_widget+0x290>)
 801bff2:	f001 facd 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801bff6:	683b      	ldr	r3, [r7, #0]
 801bff8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bffc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c004:	2b00      	cmp	r3, #0
 801c006:	d105      	bne.n	801c014 <nk_widget+0x54>
 801c008:	4b93      	ldr	r3, [pc, #588]	; (801c258 <nk_widget+0x298>)
 801c00a:	4a90      	ldr	r2, [pc, #576]	; (801c24c <nk_widget+0x28c>)
 801c00c:	2190      	movs	r1, #144	; 0x90
 801c00e:	4890      	ldr	r0, [pc, #576]	; (801c250 <nk_widget+0x290>)
 801c010:	f001 fabe 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801c014:	683b      	ldr	r3, [r7, #0]
 801c016:	2b00      	cmp	r3, #0
 801c018:	d00f      	beq.n	801c03a <nk_widget+0x7a>
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c020:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c024:	2b00      	cmp	r3, #0
 801c026:	d008      	beq.n	801c03a <nk_widget+0x7a>
 801c028:	683b      	ldr	r3, [r7, #0]
 801c02a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c02e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c036:	2b00      	cmp	r3, #0
 801c038:	d101      	bne.n	801c03e <nk_widget+0x7e>
        return NK_WIDGET_INVALID;
 801c03a:	2300      	movs	r3, #0
 801c03c:	e167      	b.n	801c30e <nk_widget+0x34e>

    /* allocate space and check if the widget needs to be updated and drawn */
    nk_panel_alloc_space(bounds, ctx);
 801c03e:	6839      	ldr	r1, [r7, #0]
 801c040:	6878      	ldr	r0, [r7, #4]
 801c042:	f7f7 fe8b 	bl	8013d5c <nk_panel_alloc_space>
    win = ctx->current;
 801c046:	683b      	ldr	r3, [r7, #0]
 801c048:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c04c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c050:	637b      	str	r3, [r7, #52]	; 0x34
    layout = win->layout;
 801c052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c058:	633b      	str	r3, [r7, #48]	; 0x30
    in = &ctx->input;
 801c05a:	683b      	ldr	r3, [r7, #0]
 801c05c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c = layout->clip;
 801c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c060:	f107 041c 	add.w	r4, r7, #28
 801c064:	333c      	adds	r3, #60	; 0x3c
 801c066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 801c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c06e:	685b      	ldr	r3, [r3, #4]
 801c070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c074:	2b00      	cmp	r3, #0
 801c076:	d005      	beq.n	801c084 <nk_widget+0xc4>
 801c078:	4b78      	ldr	r3, [pc, #480]	; (801c25c <nk_widget+0x29c>)
 801c07a:	4a74      	ldr	r2, [pc, #464]	; (801c24c <nk_widget+0x28c>)
 801c07c:	21a0      	movs	r1, #160	; 0xa0
 801c07e:	4874      	ldr	r0, [pc, #464]	; (801c250 <nk_widget+0x290>)
 801c080:	f001 fa86 	bl	801d590 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 801c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c086:	685b      	ldr	r3, [r3, #4]
 801c088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d005      	beq.n	801c09c <nk_widget+0xdc>
 801c090:	4b73      	ldr	r3, [pc, #460]	; (801c260 <nk_widget+0x2a0>)
 801c092:	4a6e      	ldr	r2, [pc, #440]	; (801c24c <nk_widget+0x28c>)
 801c094:	21a1      	movs	r1, #161	; 0xa1
 801c096:	486e      	ldr	r0, [pc, #440]	; (801c250 <nk_widget+0x290>)
 801c098:	f001 fa7a 	bl	801d590 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 801c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c09e:	685b      	ldr	r3, [r3, #4]
 801c0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d005      	beq.n	801c0b4 <nk_widget+0xf4>
 801c0a8:	4b6e      	ldr	r3, [pc, #440]	; (801c264 <nk_widget+0x2a4>)
 801c0aa:	4a68      	ldr	r2, [pc, #416]	; (801c24c <nk_widget+0x28c>)
 801c0ac:	21a2      	movs	r1, #162	; 0xa2
 801c0ae:	4868      	ldr	r0, [pc, #416]	; (801c250 <nk_widget+0x290>)
 801c0b0:	f001 fa6e 	bl	801d590 <__assert_func>

    /* need to convert to int here to remove floating point errors */
    bounds->x = (float)((int)bounds->x);
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	edd3 7a00 	vldr	s15, [r3]
 801c0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c0be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	edc3 7a00 	vstr	s15, [r3]
    bounds->y = (float)((int)bounds->y);
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	edd3 7a01 	vldr	s15, [r3, #4]
 801c0ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->w = (float)((int)bounds->w);
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	edd3 7a02 	vldr	s15, [r3, #8]
 801c0e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c0e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	edc3 7a02 	vstr	s15, [r3, #8]
    bounds->h = (float)((int)bounds->h);
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	edd3 7a03 	vldr	s15, [r3, #12]
 801c0f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c0fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	edc3 7a03 	vstr	s15, [r3, #12]

    c.x = (float)((int)c.x);
 801c104:	edd7 7a07 	vldr	s15, [r7, #28]
 801c108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c10c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c110:	edc7 7a07 	vstr	s15, [r7, #28]
    c.y = (float)((int)c.y);
 801c114:	edd7 7a08 	vldr	s15, [r7, #32]
 801c118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c120:	edc7 7a08 	vstr	s15, [r7, #32]
    c.w = (float)((int)c.w);
 801c124:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c12c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c130:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    c.h = (float)((int)c.h);
 801c134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801c138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c13c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c140:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	edd3 6a00 	vldr	s13, [r3]
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	ed93 6a01 	vldr	s12, [r3, #4]
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	ed93 7a00 	vldr	s14, [r3]
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	edd3 7a02 	vldr	s15, [r3, #8]
 801c15c:	ee77 5a27 	vadd.f32	s11, s14, s15
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	ed93 7a01 	vldr	s14, [r3, #4]
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	edd3 7a03 	vldr	s15, [r3, #12]
 801c16c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c170:	f107 021c 	add.w	r2, r7, #28
 801c174:	f107 030c 	add.w	r3, r7, #12
 801c178:	eef0 1a67 	vmov.f32	s3, s15
 801c17c:	eeb0 1a65 	vmov.f32	s2, s11
 801c180:	eef0 0a46 	vmov.f32	s1, s12
 801c184:	eeb0 0a66 	vmov.f32	s0, s13
 801c188:	4611      	mov	r1, r2
 801c18a:	4618      	mov	r0, r3
 801c18c:	f7f7 ff52 	bl	8014034 <nk_unify>
    if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	ed93 7a00 	vldr	s14, [r3]
 801c196:	edd7 6a07 	vldr	s13, [r7, #28]
 801c19a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1aa:	bf4c      	ite	mi
 801c1ac:	2301      	movmi	r3, #1
 801c1ae:	2300      	movpl	r3, #0
 801c1b0:	b2db      	uxtb	r3, r3
 801c1b2:	f083 0301 	eor.w	r3, r3, #1
 801c1b6:	b2db      	uxtb	r3, r3
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d143      	bne.n	801c244 <nk_widget+0x284>
 801c1bc:	ed97 7a07 	vldr	s14, [r7, #28]
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	edd3 6a00 	vldr	s13, [r3]
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	edd3 7a02 	vldr	s15, [r3, #8]
 801c1cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1d8:	bf4c      	ite	mi
 801c1da:	2301      	movmi	r3, #1
 801c1dc:	2300      	movpl	r3, #0
 801c1de:	b2db      	uxtb	r3, r3
 801c1e0:	f083 0301 	eor.w	r3, r3, #1
 801c1e4:	b2db      	uxtb	r3, r3
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d12c      	bne.n	801c244 <nk_widget+0x284>
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	ed93 7a01 	vldr	s14, [r3, #4]
 801c1f0:	edd7 6a08 	vldr	s13, [r7, #32]
 801c1f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801c1f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c204:	bf4c      	ite	mi
 801c206:	2301      	movmi	r3, #1
 801c208:	2300      	movpl	r3, #0
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	f083 0301 	eor.w	r3, r3, #1
 801c210:	b2db      	uxtb	r3, r3
 801c212:	2b00      	cmp	r3, #0
 801c214:	d116      	bne.n	801c244 <nk_widget+0x284>
 801c216:	ed97 7a08 	vldr	s14, [r7, #32]
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	edd3 6a01 	vldr	s13, [r3, #4]
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	edd3 7a03 	vldr	s15, [r3, #12]
 801c226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c22a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c232:	bf4c      	ite	mi
 801c234:	2301      	movmi	r3, #1
 801c236:	2300      	movpl	r3, #0
 801c238:	b2db      	uxtb	r3, r3
 801c23a:	f083 0301 	eor.w	r3, r3, #1
 801c23e:	b2db      	uxtb	r3, r3
 801c240:	2b00      	cmp	r3, #0
 801c242:	d011      	beq.n	801c268 <nk_widget+0x2a8>
        return NK_WIDGET_INVALID;
 801c244:	2300      	movs	r3, #0
 801c246:	e062      	b.n	801c30e <nk_widget+0x34e>
 801c248:	08021d20 	.word	0x08021d20
 801c24c:	080232f4 	.word	0x080232f4
 801c250:	08021d24 	.word	0x08021d24
 801c254:	08021d40 	.word	0x08021d40
 801c258:	08021d50 	.word	0x08021d50
 801c25c:	08021d68 	.word	0x08021d68
 801c260:	08021d90 	.word	0x08021d90
 801c264:	08021db4 	.word	0x08021db4
    if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))
 801c268:	ed97 7a03 	vldr	s14, [r7, #12]
 801c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c26e:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801c272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c27a:	bf94      	ite	ls
 801c27c:	2301      	movls	r3, #1
 801c27e:	2300      	movhi	r3, #0
 801c280:	b2db      	uxtb	r3, r3
 801c282:	f083 0301 	eor.w	r3, r3, #1
 801c286:	b2db      	uxtb	r3, r3
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d13d      	bne.n	801c308 <nk_widget+0x348>
 801c28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c28e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801c292:	edd7 6a03 	vldr	s13, [r7, #12]
 801c296:	edd7 7a05 	vldr	s15, [r7, #20]
 801c29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c29e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2a6:	bf4c      	ite	mi
 801c2a8:	2301      	movmi	r3, #1
 801c2aa:	2300      	movpl	r3, #0
 801c2ac:	b2db      	uxtb	r3, r3
 801c2ae:	f083 0301 	eor.w	r3, r3, #1
 801c2b2:	b2db      	uxtb	r3, r3
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d127      	bne.n	801c308 <nk_widget+0x348>
 801c2b8:	ed97 7a04 	vldr	s14, [r7, #16]
 801c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2be:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801c2c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ca:	bf94      	ite	ls
 801c2cc:	2301      	movls	r3, #1
 801c2ce:	2300      	movhi	r3, #0
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	f083 0301 	eor.w	r3, r3, #1
 801c2d6:	b2db      	uxtb	r3, r3
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d115      	bne.n	801c308 <nk_widget+0x348>
 801c2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2de:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801c2e2:	edd7 6a04 	vldr	s13, [r7, #16]
 801c2e6:	edd7 7a06 	vldr	s15, [r7, #24]
 801c2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c2ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2f6:	bf4c      	ite	mi
 801c2f8:	2301      	movmi	r3, #1
 801c2fa:	2300      	movpl	r3, #0
 801c2fc:	b2db      	uxtb	r3, r3
 801c2fe:	f083 0301 	eor.w	r3, r3, #1
 801c302:	b2db      	uxtb	r3, r3
 801c304:	2b00      	cmp	r3, #0
 801c306:	d001      	beq.n	801c30c <nk_widget+0x34c>
        return NK_WIDGET_ROM;
 801c308:	2302      	movs	r3, #2
 801c30a:	e000      	b.n	801c30e <nk_widget+0x34e>
    return NK_WIDGET_VALID;
 801c30c:	2301      	movs	r3, #1
}
 801c30e:	4618      	mov	r0, r3
 801c310:	373c      	adds	r7, #60	; 0x3c
 801c312:	46bd      	mov	sp, r7
 801c314:	bd90      	pop	{r4, r7, pc}
 801c316:	bf00      	nop

0801c318 <nk_widget_fitting>:
NK_API enum nk_widget_layout_states
nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,
    struct nk_vec2 item_padding)
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b086      	sub	sp, #24
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	60f8      	str	r0, [r7, #12]
 801c320:	60b9      	str	r1, [r7, #8]
 801c322:	eeb0 7a40 	vmov.f32	s14, s0
 801c326:	eef0 7a60 	vmov.f32	s15, s1
 801c32a:	ed87 7a00 	vstr	s14, [r7]
 801c32e:	edc7 7a01 	vstr	s15, [r7, #4]
    /* update the bounds to stand without padding  */
    enum nk_widget_layout_states state;
    NK_UNUSED(item_padding);

    NK_ASSERT(ctx);
 801c332:	68bb      	ldr	r3, [r7, #8]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d105      	bne.n	801c344 <nk_widget_fitting+0x2c>
 801c338:	4b20      	ldr	r3, [pc, #128]	; (801c3bc <nk_widget_fitting+0xa4>)
 801c33a:	4a21      	ldr	r2, [pc, #132]	; (801c3c0 <nk_widget_fitting+0xa8>)
 801c33c:	21be      	movs	r1, #190	; 0xbe
 801c33e:	4821      	ldr	r0, [pc, #132]	; (801c3c4 <nk_widget_fitting+0xac>)
 801c340:	f001 f926 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801c344:	68bb      	ldr	r3, [r7, #8]
 801c346:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c34a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d105      	bne.n	801c35e <nk_widget_fitting+0x46>
 801c352:	4b1d      	ldr	r3, [pc, #116]	; (801c3c8 <nk_widget_fitting+0xb0>)
 801c354:	4a1a      	ldr	r2, [pc, #104]	; (801c3c0 <nk_widget_fitting+0xa8>)
 801c356:	21bf      	movs	r1, #191	; 0xbf
 801c358:	481a      	ldr	r0, [pc, #104]	; (801c3c4 <nk_widget_fitting+0xac>)
 801c35a:	f001 f919 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801c35e:	68bb      	ldr	r3, [r7, #8]
 801c360:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c364:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d105      	bne.n	801c37c <nk_widget_fitting+0x64>
 801c370:	4b16      	ldr	r3, [pc, #88]	; (801c3cc <nk_widget_fitting+0xb4>)
 801c372:	4a13      	ldr	r2, [pc, #76]	; (801c3c0 <nk_widget_fitting+0xa8>)
 801c374:	21c0      	movs	r1, #192	; 0xc0
 801c376:	4813      	ldr	r0, [pc, #76]	; (801c3c4 <nk_widget_fitting+0xac>)
 801c378:	f001 f90a 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801c37c:	68bb      	ldr	r3, [r7, #8]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d00f      	beq.n	801c3a2 <nk_widget_fitting+0x8a>
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c388:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d008      	beq.n	801c3a2 <nk_widget_fitting+0x8a>
 801c390:	68bb      	ldr	r3, [r7, #8]
 801c392:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c396:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d101      	bne.n	801c3a6 <nk_widget_fitting+0x8e>
        return NK_WIDGET_INVALID;
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	e006      	b.n	801c3b4 <nk_widget_fitting+0x9c>

    state = nk_widget(bounds, ctx);
 801c3a6:	68b9      	ldr	r1, [r7, #8]
 801c3a8:	68f8      	ldr	r0, [r7, #12]
 801c3aa:	f7ff fe09 	bl	801bfc0 <nk_widget>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	75fb      	strb	r3, [r7, #23]
    return state;
 801c3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	3718      	adds	r7, #24
 801c3b8:	46bd      	mov	sp, r7
 801c3ba:	bd80      	pop	{r7, pc}
 801c3bc:	08021d20 	.word	0x08021d20
 801c3c0:	08023300 	.word	0x08023300
 801c3c4:	08021d24 	.word	0x08021d24
 801c3c8:	08021d40 	.word	0x08021d40
 801c3cc:	08021d50 	.word	0x08021d50

0801c3d0 <nk_create_window>:
 *                              WINDOW
 *
 * ===============================================================*/
NK_LIB void*
nk_create_window(struct nk_context *ctx)
{
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	b084      	sub	sp, #16
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801c3d8:	6878      	ldr	r0, [r7, #4]
 801c3da:	f7f8 f89d 	bl	8014518 <nk_create_page_element>
 801c3de:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d101      	bne.n	801c3ea <nk_create_window+0x1a>
 801c3e6:	2300      	movs	r3, #0
 801c3e8:	e007      	b.n	801c3fa <nk_create_window+0x2a>
    elem->data.win.seq = ctx->seq;
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c3f0:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	601a      	str	r2, [r3, #0]
    return &elem->data.win;
 801c3f8:	68fb      	ldr	r3, [r7, #12]
}
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	3710      	adds	r7, #16
 801c3fe:	46bd      	mov	sp, r7
 801c400:	bd80      	pop	{r7, pc}

0801c402 <nk_free_window>:
NK_LIB void
nk_free_window(struct nk_context *ctx, struct nk_window *win)
{
 801c402:	b580      	push	{r7, lr}
 801c404:	b086      	sub	sp, #24
 801c406:	af00      	add	r7, sp, #0
 801c408:	6078      	str	r0, [r7, #4]
 801c40a:	6039      	str	r1, [r7, #0]
    /* unlink windows from list */
    struct nk_table *it = win->tables;
 801c40c:	683b      	ldr	r3, [r7, #0]
 801c40e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801c412:	617b      	str	r3, [r7, #20]
    if (win->popup.win) {
 801c414:	683b      	ldr	r3, [r7, #0]
 801c416:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d00a      	beq.n	801c434 <nk_free_window+0x32>
        nk_free_window(ctx, win->popup.win);
 801c41e:	683b      	ldr	r3, [r7, #0]
 801c420:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c424:	4619      	mov	r1, r3
 801c426:	6878      	ldr	r0, [r7, #4]
 801c428:	f7ff ffeb 	bl	801c402 <nk_free_window>
        win->popup.win = 0;
 801c42c:	683b      	ldr	r3, [r7, #0]
 801c42e:	2200      	movs	r2, #0
 801c430:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    }
    win->next = 0;
 801c434:	683b      	ldr	r3, [r7, #0]
 801c436:	2200      	movs	r2, #0
 801c438:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801c43c:	683b      	ldr	r3, [r7, #0]
 801c43e:	2200      	movs	r2, #0
 801c440:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    while (it) {
 801c444:	e017      	b.n	801c476 <nk_free_window+0x74>
        /*free window state tables */
        struct nk_table *n = it->next;
 801c446:	697b      	ldr	r3, [r7, #20]
 801c448:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801c44c:	60bb      	str	r3, [r7, #8]
        nk_remove_table(win, it);
 801c44e:	6979      	ldr	r1, [r7, #20]
 801c450:	6838      	ldr	r0, [r7, #0]
 801c452:	f7fe f8fc 	bl	801a64e <nk_remove_table>
        nk_free_table(ctx, it);
 801c456:	6979      	ldr	r1, [r7, #20]
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f7fe f8a6 	bl	801a5aa <nk_free_table>
        if (it == win->tables)
 801c45e:	683b      	ldr	r3, [r7, #0]
 801c460:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801c464:	697a      	ldr	r2, [r7, #20]
 801c466:	429a      	cmp	r2, r3
 801c468:	d103      	bne.n	801c472 <nk_free_window+0x70>
            win->tables = n;
 801c46a:	683b      	ldr	r3, [r7, #0]
 801c46c:	68ba      	ldr	r2, [r7, #8]
 801c46e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        it = n;
 801c472:	68bb      	ldr	r3, [r7, #8]
 801c474:	617b      	str	r3, [r7, #20]
    while (it) {
 801c476:	697b      	ldr	r3, [r7, #20]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d1e4      	bne.n	801c446 <nk_free_window+0x44>
    }

    /* link windows into freelist */
    {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);
 801c47c:	683b      	ldr	r3, [r7, #0]
 801c47e:	613b      	str	r3, [r7, #16]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801c480:	693b      	ldr	r3, [r7, #16]
 801c482:	60fb      	str	r3, [r7, #12]
    nk_free_page_element(ctx, pe);}
 801c484:	68f9      	ldr	r1, [r7, #12]
 801c486:	6878      	ldr	r0, [r7, #4]
 801c488:	f7f8 f8dd 	bl	8014646 <nk_free_page_element>
}
 801c48c:	bf00      	nop
 801c48e:	3718      	adds	r7, #24
 801c490:	46bd      	mov	sp, r7
 801c492:	bd80      	pop	{r7, pc}

0801c494 <nk_find_window>:
NK_LIB struct nk_window*
nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b086      	sub	sp, #24
 801c498:	af00      	add	r7, sp, #0
 801c49a:	60f8      	str	r0, [r7, #12]
 801c49c:	60b9      	str	r1, [r7, #8]
 801c49e:	607a      	str	r2, [r7, #4]
    struct nk_window *iter;
    iter = ctx->begin;
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c4a6:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c4aa:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c4ac:	e026      	b.n	801c4fc <nk_find_window+0x68>
        NK_ASSERT(iter != iter->next);
 801c4ae:	697b      	ldr	r3, [r7, #20]
 801c4b0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c4b4:	697a      	ldr	r2, [r7, #20]
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	d105      	bne.n	801c4c6 <nk_find_window+0x32>
 801c4ba:	4b14      	ldr	r3, [pc, #80]	; (801c50c <nk_find_window+0x78>)
 801c4bc:	4a14      	ldr	r2, [pc, #80]	; (801c510 <nk_find_window+0x7c>)
 801c4be:	2133      	movs	r1, #51	; 0x33
 801c4c0:	4814      	ldr	r0, [pc, #80]	; (801c514 <nk_find_window+0x80>)
 801c4c2:	f001 f865 	bl	801d590 <__assert_func>
        if (iter->name == hash) {
 801c4c6:	697b      	ldr	r3, [r7, #20]
 801c4c8:	685b      	ldr	r3, [r3, #4]
 801c4ca:	68ba      	ldr	r2, [r7, #8]
 801c4cc:	429a      	cmp	r2, r3
 801c4ce:	d111      	bne.n	801c4f4 <nk_find_window+0x60>
            int max_len = nk_strlen(iter->name_string);
 801c4d0:	697b      	ldr	r3, [r7, #20]
 801c4d2:	3308      	adds	r3, #8
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f7ff fb81 	bl	801bbdc <nk_strlen>
 801c4da:	6138      	str	r0, [r7, #16]
            if (!nk_stricmpn(iter->name_string, name, max_len))
 801c4dc:	697b      	ldr	r3, [r7, #20]
 801c4de:	3308      	adds	r3, #8
 801c4e0:	693a      	ldr	r2, [r7, #16]
 801c4e2:	6879      	ldr	r1, [r7, #4]
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	f7ff fb9f 	bl	801bc28 <nk_stricmpn>
 801c4ea:	4603      	mov	r3, r0
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d101      	bne.n	801c4f4 <nk_find_window+0x60>
                return iter;
 801c4f0:	697b      	ldr	r3, [r7, #20]
 801c4f2:	e007      	b.n	801c504 <nk_find_window+0x70>
        }
        iter = iter->next;
 801c4f4:	697b      	ldr	r3, [r7, #20]
 801c4f6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c4fa:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c4fc:	697b      	ldr	r3, [r7, #20]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d1d5      	bne.n	801c4ae <nk_find_window+0x1a>
    }
    return 0;
 801c502:	2300      	movs	r3, #0
}
 801c504:	4618      	mov	r0, r3
 801c506:	3718      	adds	r7, #24
 801c508:	46bd      	mov	sp, r7
 801c50a:	bd80      	pop	{r7, pc}
 801c50c:	08021dd8 	.word	0x08021dd8
 801c510:	08023314 	.word	0x08023314
 801c514:	08021dec 	.word	0x08021dec

0801c518 <nk_insert_window>:
NK_LIB void
nk_insert_window(struct nk_context *ctx, struct nk_window *win,
    enum nk_window_insert_location loc)
{
 801c518:	b580      	push	{r7, lr}
 801c51a:	b086      	sub	sp, #24
 801c51c:	af00      	add	r7, sp, #0
 801c51e:	60f8      	str	r0, [r7, #12]
 801c520:	60b9      	str	r1, [r7, #8]
 801c522:	4613      	mov	r3, r2
 801c524:	71fb      	strb	r3, [r7, #7]
    const struct nk_window *iter;
    NK_ASSERT(ctx);
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d105      	bne.n	801c538 <nk_insert_window+0x20>
 801c52c:	4b6f      	ldr	r3, [pc, #444]	; (801c6ec <nk_insert_window+0x1d4>)
 801c52e:	4a70      	ldr	r2, [pc, #448]	; (801c6f0 <nk_insert_window+0x1d8>)
 801c530:	2142      	movs	r1, #66	; 0x42
 801c532:	4870      	ldr	r0, [pc, #448]	; (801c6f4 <nk_insert_window+0x1dc>)
 801c534:	f001 f82c 	bl	801d590 <__assert_func>
    NK_ASSERT(win);
 801c538:	68bb      	ldr	r3, [r7, #8]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d105      	bne.n	801c54a <nk_insert_window+0x32>
 801c53e:	4b6e      	ldr	r3, [pc, #440]	; (801c6f8 <nk_insert_window+0x1e0>)
 801c540:	4a6b      	ldr	r2, [pc, #428]	; (801c6f0 <nk_insert_window+0x1d8>)
 801c542:	2143      	movs	r1, #67	; 0x43
 801c544:	486b      	ldr	r0, [pc, #428]	; (801c6f4 <nk_insert_window+0x1dc>)
 801c546:	f001 f823 	bl	801d590 <__assert_func>
    if (!win || !ctx) return;
 801c54a:	68bb      	ldr	r3, [r7, #8]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	f000 80c6 	beq.w	801c6de <nk_insert_window+0x1c6>
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	2b00      	cmp	r3, #0
 801c556:	f000 80c2 	beq.w	801c6de <nk_insert_window+0x1c6>

    iter = ctx->begin;
 801c55a:	68fb      	ldr	r3, [r7, #12]
 801c55c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c560:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c564:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c566:	e01e      	b.n	801c5a6 <nk_insert_window+0x8e>
        NK_ASSERT(iter != iter->next);
 801c568:	697b      	ldr	r3, [r7, #20]
 801c56a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c56e:	697a      	ldr	r2, [r7, #20]
 801c570:	429a      	cmp	r2, r3
 801c572:	d105      	bne.n	801c580 <nk_insert_window+0x68>
 801c574:	4b61      	ldr	r3, [pc, #388]	; (801c6fc <nk_insert_window+0x1e4>)
 801c576:	4a5e      	ldr	r2, [pc, #376]	; (801c6f0 <nk_insert_window+0x1d8>)
 801c578:	2148      	movs	r1, #72	; 0x48
 801c57a:	485e      	ldr	r0, [pc, #376]	; (801c6f4 <nk_insert_window+0x1dc>)
 801c57c:	f001 f808 	bl	801d590 <__assert_func>
        NK_ASSERT(iter != win);
 801c580:	697a      	ldr	r2, [r7, #20]
 801c582:	68bb      	ldr	r3, [r7, #8]
 801c584:	429a      	cmp	r2, r3
 801c586:	d105      	bne.n	801c594 <nk_insert_window+0x7c>
 801c588:	4b5d      	ldr	r3, [pc, #372]	; (801c700 <nk_insert_window+0x1e8>)
 801c58a:	4a59      	ldr	r2, [pc, #356]	; (801c6f0 <nk_insert_window+0x1d8>)
 801c58c:	2149      	movs	r1, #73	; 0x49
 801c58e:	4859      	ldr	r0, [pc, #356]	; (801c6f4 <nk_insert_window+0x1dc>)
 801c590:	f000 fffe 	bl	801d590 <__assert_func>
        if (iter == win) return;
 801c594:	697a      	ldr	r2, [r7, #20]
 801c596:	68bb      	ldr	r3, [r7, #8]
 801c598:	429a      	cmp	r2, r3
 801c59a:	f000 80a2 	beq.w	801c6e2 <nk_insert_window+0x1ca>
        iter = iter->next;
 801c59e:	697b      	ldr	r3, [r7, #20]
 801c5a0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c5a4:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c5a6:	697b      	ldr	r3, [r7, #20]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d1dd      	bne.n	801c568 <nk_insert_window+0x50>
    }

    if (!ctx->begin) {
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5b2:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d11d      	bne.n	801c5f6 <nk_insert_window+0xde>
        win->next = 0;
 801c5ba:	68bb      	ldr	r3, [r7, #8]
 801c5bc:	2200      	movs	r2, #0
 801c5be:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801c5c2:	68bb      	ldr	r3, [r7, #8]
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5d0:	461a      	mov	r2, r3
 801c5d2:	68bb      	ldr	r3, [r7, #8]
 801c5d4:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->end = win;
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5de:	461a      	mov	r2, r3
 801c5e0:	68bb      	ldr	r3, [r7, #8]
 801c5e2:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->count = 1;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5ec:	461a      	mov	r2, r3
 801c5ee:	2301      	movs	r3, #1
 801c5f0:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
        return;
 801c5f4:	e076      	b.n	801c6e4 <nk_insert_window+0x1cc>
    }
    if (loc == NK_INSERT_BACK) {
 801c5f6:	79fb      	ldrb	r3, [r7, #7]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d13b      	bne.n	801c674 <nk_insert_window+0x15c>
        struct nk_window *end;
        end = ctx->end;
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c602:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c606:	613b      	str	r3, [r7, #16]
        end->flags |= NK_WINDOW_ROM;
 801c608:	693b      	ldr	r3, [r7, #16]
 801c60a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c60c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801c610:	693b      	ldr	r3, [r7, #16]
 801c612:	649a      	str	r2, [r3, #72]	; 0x48
        end->next = win;
 801c614:	693b      	ldr	r3, [r7, #16]
 801c616:	68ba      	ldr	r2, [r7, #8]
 801c618:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = ctx->end;
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c622:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
 801c626:	68bb      	ldr	r3, [r7, #8]
 801c628:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = 0;
 801c62c:	68bb      	ldr	r3, [r7, #8]
 801c62e:	2200      	movs	r2, #0
 801c630:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ctx->end = win;
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c63a:	461a      	mov	r2, r3
 801c63c:	68bb      	ldr	r3, [r7, #8]
 801c63e:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->active = ctx->end;
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c648:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c64c:	68fa      	ldr	r2, [r7, #12]
 801c64e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801c652:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c65c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c668:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c66c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c670:	649a      	str	r2, [r3, #72]	; 0x48
 801c672:	e028      	b.n	801c6c6 <nk_insert_window+0x1ae>
    } else {
        /*ctx->end->flags |= NK_WINDOW_ROM;*/
        ctx->begin->prev = win;
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c67a:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c67e:	68ba      	ldr	r2, [r7, #8]
 801c680:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = ctx->begin;
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c68a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
 801c68e:	68bb      	ldr	r3, [r7, #8]
 801c690:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	2200      	movs	r2, #0
 801c698:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c6a2:	461a      	mov	r2, r3
 801c6a4:	68bb      	ldr	r3, [r7, #8]
 801c6a6:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c6b0:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c6b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c6bc:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c6c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c6c4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    ctx->count++;
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c6cc:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801c6d0:	3301      	adds	r3, #1
 801c6d2:	68fa      	ldr	r2, [r7, #12]
 801c6d4:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801c6d8:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
 801c6dc:	e002      	b.n	801c6e4 <nk_insert_window+0x1cc>
    if (!win || !ctx) return;
 801c6de:	bf00      	nop
 801c6e0:	e000      	b.n	801c6e4 <nk_insert_window+0x1cc>
        if (iter == win) return;
 801c6e2:	bf00      	nop
}
 801c6e4:	3718      	adds	r7, #24
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	bd80      	pop	{r7, pc}
 801c6ea:	bf00      	nop
 801c6ec:	08021e08 	.word	0x08021e08
 801c6f0:	08023324 	.word	0x08023324
 801c6f4:	08021dec 	.word	0x08021dec
 801c6f8:	08021e0c 	.word	0x08021e0c
 801c6fc:	08021dd8 	.word	0x08021dd8
 801c700:	08021e10 	.word	0x08021e10

0801c704 <nk_remove_window>:
NK_LIB void
nk_remove_window(struct nk_context *ctx, struct nk_window *win)
{
 801c704:	b480      	push	{r7}
 801c706:	b083      	sub	sp, #12
 801c708:	af00      	add	r7, sp, #0
 801c70a:	6078      	str	r0, [r7, #4]
 801c70c:	6039      	str	r1, [r7, #0]
    if (win == ctx->begin || win == ctx->end) {
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c714:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c718:	683a      	ldr	r2, [r7, #0]
 801c71a:	429a      	cmp	r2, r3
 801c71c:	d007      	beq.n	801c72e <nk_remove_window+0x2a>
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c724:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c728:	683a      	ldr	r2, [r7, #0]
 801c72a:	429a      	cmp	r2, r3
 801c72c:	d136      	bne.n	801c79c <nk_remove_window+0x98>
        if (win == ctx->begin) {
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c734:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c738:	683a      	ldr	r2, [r7, #0]
 801c73a:	429a      	cmp	r2, r3
 801c73c:	d112      	bne.n	801c764 <nk_remove_window+0x60>
            ctx->begin = win->next;
 801c73e:	683b      	ldr	r3, [r7, #0]
 801c740:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c744:	687a      	ldr	r2, [r7, #4]
 801c746:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801c74a:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (win->next)
 801c74e:	683b      	ldr	r3, [r7, #0]
 801c750:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c754:	2b00      	cmp	r3, #0
 801c756:	d005      	beq.n	801c764 <nk_remove_window+0x60>
                win->next->prev = 0;
 801c758:	683b      	ldr	r3, [r7, #0]
 801c75a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c75e:	2200      	movs	r2, #0
 801c760:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        }
        if (win == ctx->end) {
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c76a:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c76e:	683a      	ldr	r2, [r7, #0]
 801c770:	429a      	cmp	r2, r3
 801c772:	d12e      	bne.n	801c7d2 <nk_remove_window+0xce>
            ctx->end = win->prev;
 801c774:	683b      	ldr	r3, [r7, #0]
 801c776:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801c77a:	687a      	ldr	r2, [r7, #4]
 801c77c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801c780:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (win->prev)
 801c784:	683b      	ldr	r3, [r7, #0]
 801c786:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d021      	beq.n	801c7d2 <nk_remove_window+0xce>
                win->prev->next = 0;
 801c78e:	683b      	ldr	r3, [r7, #0]
 801c790:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801c794:	2200      	movs	r2, #0
 801c796:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        if (win == ctx->end) {
 801c79a:	e01a      	b.n	801c7d2 <nk_remove_window+0xce>
        }
    } else {
        if (win->next)
 801c79c:	683b      	ldr	r3, [r7, #0]
 801c79e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d007      	beq.n	801c7b6 <nk_remove_window+0xb2>
            win->next->prev = win->prev;
 801c7a6:	683b      	ldr	r3, [r7, #0]
 801c7a8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c7ac:	683a      	ldr	r2, [r7, #0]
 801c7ae:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 801c7b2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win->prev)
 801c7b6:	683b      	ldr	r3, [r7, #0]
 801c7b8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d009      	beq.n	801c7d4 <nk_remove_window+0xd0>
            win->prev->next = win->next;
 801c7c0:	683b      	ldr	r3, [r7, #0]
 801c7c2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801c7c6:	683a      	ldr	r2, [r7, #0]
 801c7c8:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 801c7cc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 801c7d0:	e000      	b.n	801c7d4 <nk_remove_window+0xd0>
        if (win == ctx->end) {
 801c7d2:	bf00      	nop
    }
    if (win == ctx->active || !ctx->active) {
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c7da:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801c7de:	683a      	ldr	r2, [r7, #0]
 801c7e0:	429a      	cmp	r2, r3
 801c7e2:	d006      	beq.n	801c7f2 <nk_remove_window+0xee>
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c7ea:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d11e      	bne.n	801c830 <nk_remove_window+0x12c>
        ctx->active = ctx->end;
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c7f8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c7fc:	687a      	ldr	r2, [r7, #4]
 801c7fe:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801c802:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        if (ctx->end)
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c80c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c810:	2b00      	cmp	r3, #0
 801c812:	d00d      	beq.n	801c830 <nk_remove_window+0x12c>
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c81a:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c81e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c826:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c82a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c82e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    win->next = 0;
 801c830:	683b      	ldr	r3, [r7, #0]
 801c832:	2200      	movs	r2, #0
 801c834:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801c838:	683b      	ldr	r3, [r7, #0]
 801c83a:	2200      	movs	r2, #0
 801c83c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    ctx->count--;
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c846:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801c84a:	3b01      	subs	r3, #1
 801c84c:	687a      	ldr	r2, [r7, #4]
 801c84e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801c852:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
}
 801c856:	bf00      	nop
 801c858:	370c      	adds	r7, #12
 801c85a:	46bd      	mov	sp, r7
 801c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c860:	4770      	bx	lr

0801c862 <nk_begin>:
NK_API nk_bool
nk_begin(struct nk_context *ctx, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801c862:	b580      	push	{r7, lr}
 801c864:	b088      	sub	sp, #32
 801c866:	af00      	add	r7, sp, #0
 801c868:	61f8      	str	r0, [r7, #28]
 801c86a:	61b9      	str	r1, [r7, #24]
 801c86c:	eeb0 6a40 	vmov.f32	s12, s0
 801c870:	eef0 6a60 	vmov.f32	s13, s1
 801c874:	eeb0 7a41 	vmov.f32	s14, s2
 801c878:	eef0 7a61 	vmov.f32	s15, s3
 801c87c:	607a      	str	r2, [r7, #4]
 801c87e:	ed87 6a02 	vstr	s12, [r7, #8]
 801c882:	edc7 6a03 	vstr	s13, [r7, #12]
 801c886:	ed87 7a04 	vstr	s14, [r7, #16]
 801c88a:	edc7 7a05 	vstr	s15, [r7, #20]
    return nk_begin_titled(ctx, title, title, bounds, flags);
 801c88e:	ed97 6a02 	vldr	s12, [r7, #8]
 801c892:	edd7 6a03 	vldr	s13, [r7, #12]
 801c896:	ed97 7a04 	vldr	s14, [r7, #16]
 801c89a:	edd7 7a05 	vldr	s15, [r7, #20]
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	eeb0 0a46 	vmov.f32	s0, s12
 801c8a4:	eef0 0a66 	vmov.f32	s1, s13
 801c8a8:	eeb0 1a47 	vmov.f32	s2, s14
 801c8ac:	eef0 1a67 	vmov.f32	s3, s15
 801c8b0:	69ba      	ldr	r2, [r7, #24]
 801c8b2:	69b9      	ldr	r1, [r7, #24]
 801c8b4:	69f8      	ldr	r0, [r7, #28]
 801c8b6:	f000 f805 	bl	801c8c4 <nk_begin_titled>
 801c8ba:	4603      	mov	r3, r0
}
 801c8bc:	4618      	mov	r0, r3
 801c8be:	3720      	adds	r7, #32
 801c8c0:	46bd      	mov	sp, r7
 801c8c2:	bd80      	pop	{r7, pc}

0801c8c4 <nk_begin_titled>:
NK_API nk_bool
nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801c8c4:	b590      	push	{r4, r7, lr}
 801c8c6:	b09f      	sub	sp, #124	; 0x7c
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	61f8      	str	r0, [r7, #28]
 801c8cc:	61b9      	str	r1, [r7, #24]
 801c8ce:	617a      	str	r2, [r7, #20]
 801c8d0:	eeb0 6a40 	vmov.f32	s12, s0
 801c8d4:	eef0 6a60 	vmov.f32	s13, s1
 801c8d8:	eeb0 7a41 	vmov.f32	s14, s2
 801c8dc:	eef0 7a61 	vmov.f32	s15, s3
 801c8e0:	603b      	str	r3, [r7, #0]
 801c8e2:	ed87 6a01 	vstr	s12, [r7, #4]
 801c8e6:	edc7 6a02 	vstr	s13, [r7, #8]
 801c8ea:	ed87 7a03 	vstr	s14, [r7, #12]
 801c8ee:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *win;
    struct nk_style *style;
    nk_hash name_hash;
    int name_len;
    int ret = 0;
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	66fb      	str	r3, [r7, #108]	; 0x6c

    NK_ASSERT(ctx);
 801c8f6:	69fb      	ldr	r3, [r7, #28]
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d105      	bne.n	801c908 <nk_begin_titled+0x44>
 801c8fc:	4b8f      	ldr	r3, [pc, #572]	; (801cb3c <nk_begin_titled+0x278>)
 801c8fe:	4a90      	ldr	r2, [pc, #576]	; (801cb40 <nk_begin_titled+0x27c>)
 801c900:	2197      	movs	r1, #151	; 0x97
 801c902:	4890      	ldr	r0, [pc, #576]	; (801cb44 <nk_begin_titled+0x280>)
 801c904:	f000 fe44 	bl	801d590 <__assert_func>
    NK_ASSERT(name);
 801c908:	69bb      	ldr	r3, [r7, #24]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d105      	bne.n	801c91a <nk_begin_titled+0x56>
 801c90e:	4b8e      	ldr	r3, [pc, #568]	; (801cb48 <nk_begin_titled+0x284>)
 801c910:	4a8b      	ldr	r2, [pc, #556]	; (801cb40 <nk_begin_titled+0x27c>)
 801c912:	2198      	movs	r1, #152	; 0x98
 801c914:	488b      	ldr	r0, [pc, #556]	; (801cb44 <nk_begin_titled+0x280>)
 801c916:	f000 fe3b 	bl	801d590 <__assert_func>
    NK_ASSERT(title);
 801c91a:	697b      	ldr	r3, [r7, #20]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d105      	bne.n	801c92c <nk_begin_titled+0x68>
 801c920:	4b8a      	ldr	r3, [pc, #552]	; (801cb4c <nk_begin_titled+0x288>)
 801c922:	4a87      	ldr	r2, [pc, #540]	; (801cb40 <nk_begin_titled+0x27c>)
 801c924:	2199      	movs	r1, #153	; 0x99
 801c926:	4887      	ldr	r0, [pc, #540]	; (801cb44 <nk_begin_titled+0x280>)
 801c928:	f000 fe32 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 801c92c:	69fb      	ldr	r3, [r7, #28]
 801c92e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801c932:	2b00      	cmp	r3, #0
 801c934:	d005      	beq.n	801c942 <nk_begin_titled+0x7e>
 801c936:	69fb      	ldr	r3, [r7, #28]
 801c938:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801c93c:	689b      	ldr	r3, [r3, #8]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d105      	bne.n	801c94e <nk_begin_titled+0x8a>
 801c942:	4b83      	ldr	r3, [pc, #524]	; (801cb50 <nk_begin_titled+0x28c>)
 801c944:	4a7e      	ldr	r2, [pc, #504]	; (801cb40 <nk_begin_titled+0x27c>)
 801c946:	219a      	movs	r1, #154	; 0x9a
 801c948:	487e      	ldr	r0, [pc, #504]	; (801cb44 <nk_begin_titled+0x280>)
 801c94a:	f000 fe21 	bl	801d590 <__assert_func>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 801c94e:	69fb      	ldr	r3, [r7, #28]
 801c950:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c954:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d005      	beq.n	801c968 <nk_begin_titled+0xa4>
 801c95c:	4b7d      	ldr	r3, [pc, #500]	; (801cb54 <nk_begin_titled+0x290>)
 801c95e:	4a78      	ldr	r2, [pc, #480]	; (801cb40 <nk_begin_titled+0x27c>)
 801c960:	219b      	movs	r1, #155	; 0x9b
 801c962:	4878      	ldr	r0, [pc, #480]	; (801cb44 <nk_begin_titled+0x280>)
 801c964:	f000 fe14 	bl	801d590 <__assert_func>
    if (!ctx || ctx->current || !title || !name)
 801c968:	69fb      	ldr	r3, [r7, #28]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d00c      	beq.n	801c988 <nk_begin_titled+0xc4>
 801c96e:	69fb      	ldr	r3, [r7, #28]
 801c970:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c974:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d105      	bne.n	801c988 <nk_begin_titled+0xc4>
 801c97c:	697b      	ldr	r3, [r7, #20]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d002      	beq.n	801c988 <nk_begin_titled+0xc4>
 801c982:	69bb      	ldr	r3, [r7, #24]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d101      	bne.n	801c98c <nk_begin_titled+0xc8>
        return 0;
 801c988:	2300      	movs	r3, #0
 801c98a:	e3d7      	b.n	801d13c <nk_begin_titled+0x878>

    /* find or create window */
    style = &ctx->style;
 801c98c:	69fb      	ldr	r3, [r7, #28]
 801c98e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801c992:	66bb      	str	r3, [r7, #104]	; 0x68
    name_len = (int)nk_strlen(name);
 801c994:	69b8      	ldr	r0, [r7, #24]
 801c996:	f7ff f921 	bl	801bbdc <nk_strlen>
 801c99a:	6678      	str	r0, [r7, #100]	; 0x64
    name_hash = nk_murmur_hash(name, (int)name_len, NK_WINDOW_TITLE);
 801c99c:	2240      	movs	r2, #64	; 0x40
 801c99e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801c9a0:	69b8      	ldr	r0, [r7, #24]
 801c9a2:	f7ff f99b 	bl	801bcdc <nk_murmur_hash>
 801c9a6:	6638      	str	r0, [r7, #96]	; 0x60
    win = nk_find_window(ctx, name_hash, name);
 801c9a8:	69ba      	ldr	r2, [r7, #24]
 801c9aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c9ac:	69f8      	ldr	r0, [r7, #28]
 801c9ae:	f7ff fd71 	bl	801c494 <nk_find_window>
 801c9b2:	6778      	str	r0, [r7, #116]	; 0x74
    if (!win) {
 801c9b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d160      	bne.n	801ca7c <nk_begin_titled+0x1b8>
        /* create new window */
        nk_size name_length = (nk_size)name_len;
 801c9ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c9bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        win = (struct nk_window*)nk_create_window(ctx);
 801c9be:	69f8      	ldr	r0, [r7, #28]
 801c9c0:	f7ff fd06 	bl	801c3d0 <nk_create_window>
 801c9c4:	6778      	str	r0, [r7, #116]	; 0x74
        NK_ASSERT(win);
 801c9c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d105      	bne.n	801c9d8 <nk_begin_titled+0x114>
 801c9cc:	4b62      	ldr	r3, [pc, #392]	; (801cb58 <nk_begin_titled+0x294>)
 801c9ce:	4a5c      	ldr	r2, [pc, #368]	; (801cb40 <nk_begin_titled+0x27c>)
 801c9d0:	21a8      	movs	r1, #168	; 0xa8
 801c9d2:	485c      	ldr	r0, [pc, #368]	; (801cb44 <nk_begin_titled+0x280>)
 801c9d4:	f000 fddc 	bl	801d590 <__assert_func>
        if (!win) return 0;
 801c9d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d101      	bne.n	801c9e2 <nk_begin_titled+0x11e>
 801c9de:	2300      	movs	r3, #0
 801c9e0:	e3ac      	b.n	801d13c <nk_begin_titled+0x878>

        if (flags & NK_WINDOW_BACKGROUND)
 801c9e2:	683b      	ldr	r3, [r7, #0]
 801c9e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d005      	beq.n	801c9f8 <nk_begin_titled+0x134>
            nk_insert_window(ctx, win, NK_INSERT_FRONT);
 801c9ec:	2201      	movs	r2, #1
 801c9ee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c9f0:	69f8      	ldr	r0, [r7, #28]
 801c9f2:	f7ff fd91 	bl	801c518 <nk_insert_window>
 801c9f6:	e004      	b.n	801ca02 <nk_begin_titled+0x13e>
        else nk_insert_window(ctx, win, NK_INSERT_BACK);
 801c9f8:	2200      	movs	r2, #0
 801c9fa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c9fc:	69f8      	ldr	r0, [r7, #28]
 801c9fe:	f7ff fd8b 	bl	801c518 <nk_insert_window>
        nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);
 801ca02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca04:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801ca08:	69fb      	ldr	r3, [r7, #28]
 801ca0a:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801ca0e:	330c      	adds	r3, #12
 801ca10:	2201      	movs	r2, #1
 801ca12:	4619      	mov	r1, r3
 801ca14:	f7f4 fa8c 	bl	8010f30 <nk_command_buffer_init>

        win->flags = flags;
 801ca18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca1a:	683a      	ldr	r2, [r7, #0]
 801ca1c:	649a      	str	r2, [r3, #72]	; 0x48
        win->bounds = bounds;
 801ca1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca20:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801ca24:	1d3b      	adds	r3, r7, #4
 801ca26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ca28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        win->name = name_hash;
 801ca2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ca30:	605a      	str	r2, [r3, #4]
        name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);
 801ca32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ca34:	2b3f      	cmp	r3, #63	; 0x3f
 801ca36:	bf28      	it	cs
 801ca38:	233f      	movcs	r3, #63	; 0x3f
 801ca3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        NK_MEMCPY(win->name_string, name, name_length);
 801ca3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca3e:	3308      	adds	r3, #8
 801ca40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ca42:	69b9      	ldr	r1, [r7, #24]
 801ca44:	4618      	mov	r0, r3
 801ca46:	f7fe ff5b 	bl	801b900 <nk_memcopy>
        win->name_string[name_length] = 0;
 801ca4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ca4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ca4e:	4413      	add	r3, r2
 801ca50:	3308      	adds	r3, #8
 801ca52:	2200      	movs	r2, #0
 801ca54:	701a      	strb	r2, [r3, #0]
        win->popup.win = 0;
 801ca56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca58:	2200      	movs	r2, #0
 801ca5a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        if (!ctx->active)
 801ca5e:	69fb      	ldr	r3, [r7, #28]
 801ca60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca64:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d153      	bne.n	801cb14 <nk_begin_titled+0x250>
            ctx->active = win;
 801ca6c:	69fb      	ldr	r3, [r7, #28]
 801ca6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca72:	461a      	mov	r2, r3
 801ca74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca76:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
 801ca7a:	e04b      	b.n	801cb14 <nk_begin_titled+0x250>
    } else {
        /* update window */
        win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);
 801ca7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ca84:	f023 0307 	bic.w	r3, r3, #7
 801ca88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ca8a:	6493      	str	r3, [r2, #72]	; 0x48
        win->flags |= flags;
 801ca8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ca90:	683b      	ldr	r3, [r7, #0]
 801ca92:	431a      	orrs	r2, r3
 801ca94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca96:	649a      	str	r2, [r3, #72]	; 0x48
        if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))
 801ca98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca9c:	f003 0306 	and.w	r3, r3, #6
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d106      	bne.n	801cab2 <nk_begin_titled+0x1ee>
            win->bounds = bounds;
 801caa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801caa6:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801caaa:	1d3b      	adds	r3, r7, #4
 801caac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801caae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         * I.) Have more than one window with the same name or
         * II.) You forgot to actually draw the window.
         *      More specific you did not call `nk_clear` (nk_clear will be
         *      automatically called for you if you are using one of the
         *      provided demo backends). */
        NK_ASSERT(win->seq != ctx->seq);
 801cab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cab4:	681a      	ldr	r2, [r3, #0]
 801cab6:	69fb      	ldr	r3, [r7, #28]
 801cab8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cabc:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d105      	bne.n	801cad0 <nk_begin_titled+0x20c>
 801cac4:	4b25      	ldr	r3, [pc, #148]	; (801cb5c <nk_begin_titled+0x298>)
 801cac6:	4a1e      	ldr	r2, [pc, #120]	; (801cb40 <nk_begin_titled+0x27c>)
 801cac8:	21c6      	movs	r1, #198	; 0xc6
 801caca:	481e      	ldr	r0, [pc, #120]	; (801cb44 <nk_begin_titled+0x280>)
 801cacc:	f000 fd60 	bl	801d590 <__assert_func>
        win->seq = ctx->seq;
 801cad0:	69fb      	ldr	r3, [r7, #28]
 801cad2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cad6:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801cada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cadc:	601a      	str	r2, [r3, #0]
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 801cade:	69fb      	ldr	r3, [r7, #28]
 801cae0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cae4:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d113      	bne.n	801cb14 <nk_begin_titled+0x250>
 801caec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801caee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801caf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d10d      	bne.n	801cb14 <nk_begin_titled+0x250>
            ctx->active = win;
 801caf8:	69fb      	ldr	r3, [r7, #28]
 801cafa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cafe:	461a      	mov	r2, r3
 801cb00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb02:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = win;
 801cb06:	69fb      	ldr	r3, [r7, #28]
 801cb08:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cb0c:	461a      	mov	r2, r3
 801cb0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb10:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        }
    }
    if (win->flags & NK_WINDOW_HIDDEN) {
 801cb14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d01f      	beq.n	801cb60 <nk_begin_titled+0x29c>
        ctx->current = win;
 801cb20:	69fb      	ldr	r3, [r7, #28]
 801cb22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cb26:	461a      	mov	r2, r3
 801cb28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb2a:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        win->layout = 0;
 801cb2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb30:	2200      	movs	r2, #0
 801cb32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 801cb36:	2300      	movs	r3, #0
 801cb38:	e300      	b.n	801d13c <nk_begin_titled+0x878>
 801cb3a:	bf00      	nop
 801cb3c:	08021e08 	.word	0x08021e08
 801cb40:	08023338 	.word	0x08023338
 801cb44:	08021dec 	.word	0x08021dec
 801cb48:	08021e1c 	.word	0x08021e1c
 801cb4c:	08021e24 	.word	0x08021e24
 801cb50:	08021e2c 	.word	0x08021e2c
 801cb54:	08021e88 	.word	0x08021e88
 801cb58:	08021e0c 	.word	0x08021e0c
 801cb5c:	08021ec8 	.word	0x08021ec8
    } else nk_start(ctx, win);
 801cb60:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cb62:	69f8      	ldr	r0, [r7, #28]
 801cb64:	f7f3 fcfa 	bl	801055c <nk_start>

    /* window overlapping */
    if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))
 801cb68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	f040 82c2 	bne.w	801d0fa <nk_begin_titled+0x836>
 801cb76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	f040 82bb 	bne.w	801d0fa <nk_begin_titled+0x836>
    {
        int inpanel, ishovered;
        struct nk_window *iter = win;
 801cb84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb86:	673b      	str	r3, [r7, #112]	; 0x70
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801cb88:	69fb      	ldr	r3, [r7, #28]
 801cb8a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801cb8e:	ed93 7a01 	vldr	s14, [r3, #4]
 801cb92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cb98:	f603 0344 	addw	r3, r3, #2116	; 0x844
 801cb9c:	edd3 7a00 	vldr	s15, [r3]
 801cba0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801cba4:	ee37 7a27 	vadd.f32	s14, s14, s15
            (2.0f * style->window.header.label_padding.y);
 801cba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cbaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cbae:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801cbb2:	edd3 7a00 	vldr	s15, [r3]
 801cbb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801cbba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cbbe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
 801cbc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cbc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d107      	bne.n	801cbde <nk_begin_titled+0x31a>
 801cbce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cbd0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801cbd4:	334c      	adds	r3, #76	; 0x4c
 801cbd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cbd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cbdc:	e022      	b.n	801cc24 <nk_begin_titled+0x360>
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);
 801cbde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cbe0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801cbe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cbe6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801cbea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cbec:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801cbf0:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801cbf4:	eeb0 1a66 	vmov.f32	s2, s13
 801cbf8:	eef0 0a47 	vmov.f32	s1, s14
 801cbfc:	eeb0 0a67 	vmov.f32	s0, s15
 801cc00:	f7f7 f944 	bl	8013e8c <nk_rect>
 801cc04:	eeb0 6a40 	vmov.f32	s12, s0
 801cc08:	eef0 6a60 	vmov.f32	s13, s1
 801cc0c:	eeb0 7a41 	vmov.f32	s14, s2
 801cc10:	eef0 7a61 	vmov.f32	s15, s3
 801cc14:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 801cc18:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 801cc1c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 801cc20:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        /* activate window if hovered and no other window is overlapping this window */
        inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);
 801cc24:	69fb      	ldr	r3, [r7, #28]
 801cc26:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801cc2a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801cc2e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801cc32:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801cc36:	2201      	movs	r2, #1
 801cc38:	eeb0 0a46 	vmov.f32	s0, s12
 801cc3c:	eef0 0a66 	vmov.f32	s1, s13
 801cc40:	eeb0 1a47 	vmov.f32	s2, s14
 801cc44:	eef0 1a67 	vmov.f32	s3, s15
 801cc48:	2100      	movs	r1, #0
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	f7f5 ffbc 	bl	8012bc8 <nk_input_has_mouse_click_down_in_rect>
 801cc50:	6578      	str	r0, [r7, #84]	; 0x54
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 801cc52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d006      	beq.n	801cc66 <nk_begin_titled+0x3a2>
 801cc58:	69fb      	ldr	r3, [r7, #28]
 801cc5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d001      	beq.n	801cc66 <nk_begin_titled+0x3a2>
 801cc62:	2301      	movs	r3, #1
 801cc64:	e000      	b.n	801cc68 <nk_begin_titled+0x3a4>
 801cc66:	2300      	movs	r3, #0
 801cc68:	657b      	str	r3, [r7, #84]	; 0x54
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 801cc6a:	69fb      	ldr	r3, [r7, #28]
 801cc6c:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801cc70:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801cc74:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801cc78:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801cc7c:	eeb0 0a46 	vmov.f32	s0, s12
 801cc80:	eef0 0a66 	vmov.f32	s1, s13
 801cc84:	eeb0 1a47 	vmov.f32	s2, s14
 801cc88:	eef0 1a67 	vmov.f32	s3, s15
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	f7f5 ffe2 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 801cc92:	6538      	str	r0, [r7, #80]	; 0x50
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 801cc94:	69fb      	ldr	r3, [r7, #28]
 801cc96:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cc9a:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801cc9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cca0:	429a      	cmp	r2, r3
 801cca2:	f000 80de 	beq.w	801ce62 <nk_begin_titled+0x59e>
 801cca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	f000 80da 	beq.w	801ce62 <nk_begin_titled+0x59e>
 801ccae:	69fb      	ldr	r3, [r7, #28]
 801ccb0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	f040 80d4 	bne.w	801ce62 <nk_begin_titled+0x59e>
            iter = win->next;
 801ccba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ccbc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801ccc0:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801ccc2:	e0c6      	b.n	801ce52 <nk_begin_titled+0x58e>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801ccc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ccc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ccc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d107      	bne.n	801cce0 <nk_begin_titled+0x41c>
 801ccd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ccd2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801ccd6:	334c      	adds	r3, #76	; 0x4c
 801ccd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ccda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ccde:	e022      	b.n	801cd26 <nk_begin_titled+0x462>
                    iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801cce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cce2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801cce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cce8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801ccec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ccee:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801ccf2:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801ccf6:	eeb0 1a66 	vmov.f32	s2, s13
 801ccfa:	eef0 0a47 	vmov.f32	s1, s14
 801ccfe:	eeb0 0a67 	vmov.f32	s0, s15
 801cd02:	f7f7 f8c3 	bl	8013e8c <nk_rect>
 801cd06:	eeb0 6a40 	vmov.f32	s12, s0
 801cd0a:	eef0 6a60 	vmov.f32	s13, s1
 801cd0e:	eeb0 7a41 	vmov.f32	s14, s2
 801cd12:	eef0 7a61 	vmov.f32	s15, s3
 801cd16:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 801cd1a:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 801cd1e:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 801cd22:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801cd26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801cd2a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801cd2e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801cd32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cd36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd3e:	d52c      	bpl.n	801cd9a <nk_begin_titled+0x4d6>
 801cd40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801cd44:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801cd48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801cd4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cd50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd58:	d51f      	bpl.n	801cd9a <nk_begin_titled+0x4d6>
 801cd5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801cd5e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801cd62:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801cd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cd6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd72:	d512      	bpl.n	801cd9a <nk_begin_titled+0x4d6>
 801cd74:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801cd78:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801cd7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801cd80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cd84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd8c:	d505      	bpl.n	801cd9a <nk_begin_titled+0x4d6>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    (!(iter->flags & NK_WINDOW_HIDDEN)))
 801cd8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cd90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d060      	beq.n	801ce5c <nk_begin_titled+0x598>
                    break;

                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801cd9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cd9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	d052      	beq.n	801ce4a <nk_begin_titled+0x586>
 801cda4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cda6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d04d      	beq.n	801ce4a <nk_begin_titled+0x586>
 801cdae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cdb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cdb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d147      	bne.n	801ce4a <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801cdba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cdbc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cdc0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801cdc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cdc6:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801cdca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801cdce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801cdd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdda:	d536      	bpl.n	801ce4a <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801cddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cdde:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801cde2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cde4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cde8:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801cdec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cdee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cdf2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801cdf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cdfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce02:	d522      	bpl.n	801ce4a <nk_begin_titled+0x586>
 801ce04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce06:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801ce0a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801ce0e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801ce12:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801ce16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ce1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce22:	d512      	bpl.n	801ce4a <nk_begin_titled+0x586>
 801ce24:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801ce28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce2a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801ce2e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801ce32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce34:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801ce38:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801ce3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ce44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce48:	d40a      	bmi.n	801ce60 <nk_begin_titled+0x59c>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801ce4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce4c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801ce50:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801ce52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	f47f af35 	bne.w	801ccc4 <nk_begin_titled+0x400>
 801ce5a:	e002      	b.n	801ce62 <nk_begin_titled+0x59e>
                    break;
 801ce5c:	bf00      	nop
 801ce5e:	e000      	b.n	801ce62 <nk_begin_titled+0x59e>
                    break;
 801ce60:	bf00      	nop
            }
        }

        /* activate window if clicked */
        if (iter && inpanel && (win != ctx->end)) {
 801ce62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	f000 80db 	beq.w	801d020 <nk_begin_titled+0x75c>
 801ce6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	f000 80d7 	beq.w	801d020 <nk_begin_titled+0x75c>
 801ce72:	69fb      	ldr	r3, [r7, #28]
 801ce74:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ce78:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801ce7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ce7e:	429a      	cmp	r2, r3
 801ce80:	f000 80ce 	beq.w	801d020 <nk_begin_titled+0x75c>
            iter = win->next;
 801ce84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce86:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801ce8a:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801ce8c:	e0c0      	b.n	801d010 <nk_begin_titled+0x74c>
                /* try to find a panel with higher priority in the same position */
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801ce8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d107      	bne.n	801ceaa <nk_begin_titled+0x5e6>
 801ce9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce9c:	f107 0420 	add.w	r4, r7, #32
 801cea0:	334c      	adds	r3, #76	; 0x4c
 801cea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cea8:	e022      	b.n	801cef0 <nk_begin_titled+0x62c>
                iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801ceaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ceac:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801ceb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ceb2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801ceb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ceb8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801cebc:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801cec0:	eeb0 1a66 	vmov.f32	s2, s13
 801cec4:	eef0 0a47 	vmov.f32	s1, s14
 801cec8:	eeb0 0a67 	vmov.f32	s0, s15
 801cecc:	f7f6 ffde 	bl	8013e8c <nk_rect>
 801ced0:	eeb0 6a40 	vmov.f32	s12, s0
 801ced4:	eef0 6a60 	vmov.f32	s13, s1
 801ced8:	eeb0 7a41 	vmov.f32	s14, s2
 801cedc:	eef0 7a61 	vmov.f32	s15, s3
 801cee0:	ed87 6a08 	vstr	s12, [r7, #32]
 801cee4:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 801cee8:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801ceec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
 801cef0:	ed97 7a08 	vldr	s14, [r7, #32]
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801cefa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf02:	d82b      	bhi.n	801cf5c <nk_begin_titled+0x698>
 801cf04:	69fb      	ldr	r3, [r7, #28]
 801cf06:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801cf0a:	edd7 6a08 	vldr	s13, [r7, #32]
 801cf0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801cf12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cf16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf1e:	d51d      	bpl.n	801cf5c <nk_begin_titled+0x698>
 801cf20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801cf24:	69fb      	ldr	r3, [r7, #28]
 801cf26:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801cf2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cf2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf32:	d813      	bhi.n	801cf5c <nk_begin_titled+0x698>
 801cf34:	69fb      	ldr	r3, [r7, #28]
 801cf36:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801cf3a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801cf3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801cf42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cf46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf4e:	d505      	bpl.n	801cf5c <nk_begin_titled+0x698>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    !(iter->flags & NK_WINDOW_HIDDEN))
 801cf50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d05e      	beq.n	801d01a <nk_begin_titled+0x756>
                    break;
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801cf5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf5e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d050      	beq.n	801d008 <nk_begin_titled+0x744>
 801cf66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf68:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d04b      	beq.n	801d008 <nk_begin_titled+0x744>
 801cf70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d145      	bne.n	801d008 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801cf7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cf82:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801cf86:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801cf8a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801cf8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801cf92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf9a:	d535      	bpl.n	801d008 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801cf9c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801cfa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cfa2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cfa6:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801cfaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cfac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cfb0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801cfb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cfb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cfbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfc0:	d522      	bpl.n	801d008 <nk_begin_titled+0x744>
 801cfc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cfc4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cfc8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801cfcc:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801cfd0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801cfd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cfd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfe0:	d512      	bpl.n	801d008 <nk_begin_titled+0x744>
 801cfe2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801cfe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cfe8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cfec:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801cff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cff2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801cff6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801cffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d006:	d40a      	bmi.n	801d01e <nk_begin_titled+0x75a>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801d008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d00a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d00e:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d012:	2b00      	cmp	r3, #0
 801d014:	f47f af3b 	bne.w	801ce8e <nk_begin_titled+0x5ca>
 801d018:	e002      	b.n	801d020 <nk_begin_titled+0x75c>
                    break;
 801d01a:	bf00      	nop
 801d01c:	e000      	b.n	801d020 <nk_begin_titled+0x75c>
                    break;
 801d01e:	bf00      	nop
            }
        }
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 801d020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d022:	2b00      	cmp	r3, #0
 801d024:	d02e      	beq.n	801d084 <nk_begin_titled+0x7c0>
 801d026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d02a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d128      	bne.n	801d084 <nk_begin_titled+0x7c0>
 801d032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d022      	beq.n	801d084 <nk_begin_titled+0x7c0>
            win->flags |= (nk_flags)NK_WINDOW_ROM;
 801d03e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801d046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d048:	649a      	str	r2, [r3, #72]	; 0x48
            iter->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801d04a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d04c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d04e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d054:	649a      	str	r2, [r3, #72]	; 0x48
            ctx->active = iter;
 801d056:	69fb      	ldr	r3, [r7, #28]
 801d058:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d05c:	461a      	mov	r2, r3
 801d05e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d060:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801d064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d144      	bne.n	801d0fa <nk_begin_titled+0x836>
                /* current window is active in that position so transfer to top
                 * at the highest priority in stack */
                nk_remove_window(ctx, iter);
 801d070:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d072:	69f8      	ldr	r0, [r7, #28]
 801d074:	f7ff fb46 	bl	801c704 <nk_remove_window>
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
 801d078:	2200      	movs	r2, #0
 801d07a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d07c:	69f8      	ldr	r0, [r7, #28]
 801d07e:	f7ff fa4b 	bl	801c518 <nk_insert_window>
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801d082:	e03a      	b.n	801d0fa <nk_begin_titled+0x836>
            }
        } else {
            if (!iter && ctx->end != win) {
 801d084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d086:	2b00      	cmp	r3, #0
 801d088:	d123      	bne.n	801d0d2 <nk_begin_titled+0x80e>
 801d08a:	69fb      	ldr	r3, [r7, #28]
 801d08c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d090:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d094:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d096:	429a      	cmp	r2, r3
 801d098:	d01b      	beq.n	801d0d2 <nk_begin_titled+0x80e>
                if (!(win->flags & NK_WINDOW_BACKGROUND)) {
 801d09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d09c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d108      	bne.n	801d0b8 <nk_begin_titled+0x7f4>
                    /* current window is active in that position so transfer to top
                     * at the highest priority in stack */
                    nk_remove_window(ctx, win);
 801d0a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d0a8:	69f8      	ldr	r0, [r7, #28]
 801d0aa:	f7ff fb2b 	bl	801c704 <nk_remove_window>
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
 801d0ae:	2200      	movs	r2, #0
 801d0b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d0b2:	69f8      	ldr	r0, [r7, #28]
 801d0b4:	f7ff fa30 	bl	801c518 <nk_insert_window>
                }
                win->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801d0b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d0ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d0bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d0c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d0c2:	649a      	str	r2, [r3, #72]	; 0x48
                ctx->active = win;
 801d0c4:	69fb      	ldr	r3, [r7, #28]
 801d0c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d0ca:	461a      	mov	r2, r3
 801d0cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d0ce:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            }
            if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))
 801d0d2:	69fb      	ldr	r3, [r7, #28]
 801d0d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d0d8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d0dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d0de:	429a      	cmp	r2, r3
 801d0e0:	d00b      	beq.n	801d0fa <nk_begin_titled+0x836>
 801d0e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d105      	bne.n	801d0fa <nk_begin_titled+0x836>
                win->flags |= NK_WINDOW_ROM;
 801d0ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d0f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801d0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d0f8:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    win->layout = (struct nk_panel*)nk_create_panel(ctx);
 801d0fa:	69f8      	ldr	r0, [r7, #28]
 801d0fc:	f7f7 fadc 	bl	80146b8 <nk_create_panel>
 801d100:	4602      	mov	r2, r0
 801d102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    ctx->current = win;
 801d108:	69fb      	ldr	r3, [r7, #28]
 801d10a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d10e:	461a      	mov	r2, r3
 801d110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d112:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
 801d116:	2201      	movs	r2, #1
 801d118:	6979      	ldr	r1, [r7, #20]
 801d11a:	69f8      	ldr	r0, [r7, #28]
 801d11c:	f7f7 fd3a 	bl	8014b94 <nk_panel_begin>
 801d120:	66f8      	str	r0, [r7, #108]	; 0x6c
    win->layout->offset_x = &win->scrollbar.x;
 801d122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d128:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d12a:	325c      	adds	r2, #92	; 0x5c
 801d12c:	619a      	str	r2, [r3, #24]
    win->layout->offset_y = &win->scrollbar.y;
 801d12e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d134:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d136:	3260      	adds	r2, #96	; 0x60
 801d138:	61da      	str	r2, [r3, #28]
    return ret;
 801d13a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	377c      	adds	r7, #124	; 0x7c
 801d140:	46bd      	mov	sp, r7
 801d142:	bd90      	pop	{r4, r7, pc}

0801d144 <nk_end>:
NK_API void
nk_end(struct nk_context *ctx)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b084      	sub	sp, #16
 801d148:	af00      	add	r7, sp, #0
 801d14a:	6078      	str	r0, [r7, #4]
    struct nk_panel *layout;
    NK_ASSERT(ctx);
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d106      	bne.n	801d160 <nk_end+0x1c>
 801d152:	4b2d      	ldr	r3, [pc, #180]	; (801d208 <nk_end+0xc4>)
 801d154:	4a2d      	ldr	r2, [pc, #180]	; (801d20c <nk_end+0xc8>)
 801d156:	f240 112b 	movw	r1, #299	; 0x12b
 801d15a:	482d      	ldr	r0, [pc, #180]	; (801d210 <nk_end+0xcc>)
 801d15c:	f000 fa18 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d166:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d106      	bne.n	801d17c <nk_end+0x38>
 801d16e:	4b29      	ldr	r3, [pc, #164]	; (801d214 <nk_end+0xd0>)
 801d170:	4a26      	ldr	r2, [pc, #152]	; (801d20c <nk_end+0xc8>)
 801d172:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801d176:	4826      	ldr	r0, [pc, #152]	; (801d210 <nk_end+0xcc>)
 801d178:	f000 fa0a 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current)
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d03d      	beq.n	801d1fe <nk_end+0xba>
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d188:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d036      	beq.n	801d1fe <nk_end+0xba>
        return;

    layout = ctx->current->layout;
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d196:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d19a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d19e:	60fb      	str	r3, [r7, #12]
    if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d00d      	beq.n	801d1c2 <nk_end+0x7e>
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	781b      	ldrb	r3, [r3, #0]
 801d1aa:	2b01      	cmp	r3, #1
 801d1ac:	d111      	bne.n	801d1d2 <nk_end+0x8e>
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d1b4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d1b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d1ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d007      	beq.n	801d1d2 <nk_end+0x8e>
        ctx->current = 0;
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d1c8:	461a      	mov	r2, r3
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        return;
 801d1d0:	e016      	b.n	801d200 <nk_end+0xbc>
    }
    nk_panel_end(ctx);
 801d1d2:	6878      	ldr	r0, [r7, #4]
 801d1d4:	f7f8 fc20 	bl	8015a18 <nk_panel_end>
    nk_free_panel(ctx, ctx->current->layout);
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d1de:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d1e6:	4619      	mov	r1, r3
 801d1e8:	6878      	ldr	r0, [r7, #4]
 801d1ea:	f7f7 fa7c 	bl	80146e6 <nk_free_panel>
    ctx->current = 0;
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d1f4:	461a      	mov	r2, r3
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
 801d1fc:	e000      	b.n	801d200 <nk_end+0xbc>
        return;
 801d1fe:	bf00      	nop
}
 801d200:	3710      	adds	r7, #16
 801d202:	46bd      	mov	sp, r7
 801d204:	bd80      	pop	{r7, pc}
 801d206:	bf00      	nop
 801d208:	08021e08 	.word	0x08021e08
 801d20c:	08023348 	.word	0x08023348
 801d210:	08021dec 	.word	0x08021dec
 801d214:	08021ee0 	.word	0x08021ee0

0801d218 <nk_window_is_hovered>:
    if (!ctx || !ctx->current) return 0;
    return ctx->current == ctx->active;
}
NK_API nk_bool
nk_window_is_hovered(struct nk_context *ctx)
{
 801d218:	b590      	push	{r4, r7, lr}
 801d21a:	b087      	sub	sp, #28
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	2b00      	cmp	r3, #0
 801d224:	d106      	bne.n	801d234 <nk_window_is_hovered+0x1c>
 801d226:	4b31      	ldr	r3, [pc, #196]	; (801d2ec <nk_window_is_hovered+0xd4>)
 801d228:	4a31      	ldr	r2, [pc, #196]	; (801d2f0 <nk_window_is_hovered+0xd8>)
 801d22a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801d22e:	4831      	ldr	r0, [pc, #196]	; (801d2f4 <nk_window_is_hovered+0xdc>)
 801d230:	f000 f9ae 	bl	801d590 <__assert_func>
    NK_ASSERT(ctx->current);
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d23a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d106      	bne.n	801d250 <nk_window_is_hovered+0x38>
 801d242:	4b2d      	ldr	r3, [pc, #180]	; (801d2f8 <nk_window_is_hovered+0xe0>)
 801d244:	4a2a      	ldr	r2, [pc, #168]	; (801d2f0 <nk_window_is_hovered+0xd8>)
 801d246:	f240 11b1 	movw	r1, #433	; 0x1b1
 801d24a:	482a      	ldr	r0, [pc, #168]	; (801d2f4 <nk_window_is_hovered+0xdc>)
 801d24c:	f000 f9a0 	bl	801d590 <__assert_func>
    if (!ctx || !ctx->current || (ctx->current->flags & NK_WINDOW_HIDDEN))
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d010      	beq.n	801d278 <nk_window_is_hovered+0x60>
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d25c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d260:	2b00      	cmp	r3, #0
 801d262:	d009      	beq.n	801d278 <nk_window_is_hovered+0x60>
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d26a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d26e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d274:	2b00      	cmp	r3, #0
 801d276:	d001      	beq.n	801d27c <nk_window_is_hovered+0x64>
        return 0;
 801d278:	2300      	movs	r3, #0
 801d27a:	e032      	b.n	801d2e2 <nk_window_is_hovered+0xca>
    else {
        struct nk_rect actual_bounds = ctx->current->bounds;
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d282:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d286:	f107 0408 	add.w	r4, r7, #8
 801d28a:	334c      	adds	r3, #76	; 0x4c
 801d28c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d28e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (ctx->begin->flags & NK_WINDOW_MINIMIZED) {
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d298:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d29c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d29e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d008      	beq.n	801d2b8 <nk_window_is_hovered+0xa0>
            actual_bounds.h = ctx->current->layout->header_height;
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d2ac:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d2b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2b6:	617b      	str	r3, [r7, #20]
        }
        return nk_input_is_mouse_hovering_rect(&ctx->input, actual_bounds);
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	ed97 6a02 	vldr	s12, [r7, #8]
 801d2be:	edd7 6a03 	vldr	s13, [r7, #12]
 801d2c2:	ed97 7a04 	vldr	s14, [r7, #16]
 801d2c6:	edd7 7a05 	vldr	s15, [r7, #20]
 801d2ca:	eeb0 0a46 	vmov.f32	s0, s12
 801d2ce:	eef0 0a66 	vmov.f32	s1, s13
 801d2d2:	eeb0 1a47 	vmov.f32	s2, s14
 801d2d6:	eef0 1a67 	vmov.f32	s3, s15
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7f5 fcbb 	bl	8012c56 <nk_input_is_mouse_hovering_rect>
 801d2e0:	4603      	mov	r3, r0
    }
}
 801d2e2:	4618      	mov	r0, r3
 801d2e4:	371c      	adds	r7, #28
 801d2e6:	46bd      	mov	sp, r7
 801d2e8:	bd90      	pop	{r4, r7, pc}
 801d2ea:	bf00      	nop
 801d2ec:	08021e08 	.word	0x08021e08
 801d2f0:	08023350 	.word	0x08023350
 801d2f4:	08021dec 	.word	0x08021dec
 801d2f8:	08021f24 	.word	0x08021f24

0801d2fc <nk_window_is_collapsed>:
    int any_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
    return any_hovered || any_active;
}
NK_API nk_bool
nk_window_is_collapsed(struct nk_context *ctx, const char *name)
{
 801d2fc:	b580      	push	{r7, lr}
 801d2fe:	b086      	sub	sp, #24
 801d300:	af00      	add	r7, sp, #0
 801d302:	6078      	str	r0, [r7, #4]
 801d304:	6039      	str	r1, [r7, #0]
    int title_len;
    nk_hash title_hash;
    struct nk_window *win;
    NK_ASSERT(ctx);
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d106      	bne.n	801d31a <nk_window_is_collapsed+0x1e>
 801d30c:	4b14      	ldr	r3, [pc, #80]	; (801d360 <nk_window_is_collapsed+0x64>)
 801d30e:	4a15      	ldr	r2, [pc, #84]	; (801d364 <nk_window_is_collapsed+0x68>)
 801d310:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 801d314:	4814      	ldr	r0, [pc, #80]	; (801d368 <nk_window_is_collapsed+0x6c>)
 801d316:	f000 f93b 	bl	801d590 <__assert_func>
    if (!ctx) return 0;
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d101      	bne.n	801d324 <nk_window_is_collapsed+0x28>
 801d320:	2300      	movs	r3, #0
 801d322:	e018      	b.n	801d356 <nk_window_is_collapsed+0x5a>

    title_len = (int)nk_strlen(name);
 801d324:	6838      	ldr	r0, [r7, #0]
 801d326:	f7fe fc59 	bl	801bbdc <nk_strlen>
 801d32a:	6178      	str	r0, [r7, #20]
    title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);
 801d32c:	2240      	movs	r2, #64	; 0x40
 801d32e:	6979      	ldr	r1, [r7, #20]
 801d330:	6838      	ldr	r0, [r7, #0]
 801d332:	f7fe fcd3 	bl	801bcdc <nk_murmur_hash>
 801d336:	6138      	str	r0, [r7, #16]
    win = nk_find_window(ctx, title_hash, name);
 801d338:	683a      	ldr	r2, [r7, #0]
 801d33a:	6939      	ldr	r1, [r7, #16]
 801d33c:	6878      	ldr	r0, [r7, #4]
 801d33e:	f7ff f8a9 	bl	801c494 <nk_find_window>
 801d342:	60f8      	str	r0, [r7, #12]
    if (!win) return 0;
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	2b00      	cmp	r3, #0
 801d348:	d101      	bne.n	801d34e <nk_window_is_collapsed+0x52>
 801d34a:	2300      	movs	r3, #0
 801d34c:	e003      	b.n	801d356 <nk_window_is_collapsed+0x5a>
    return win->flags & NK_WINDOW_MINIMIZED;
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
}
 801d356:	4618      	mov	r0, r3
 801d358:	3718      	adds	r7, #24
 801d35a:	46bd      	mov	sp, r7
 801d35c:	bd80      	pop	{r7, pc}
 801d35e:	bf00      	nop
 801d360:	08021e08 	.word	0x08021e08
 801d364:	08023368 	.word	0x08023368
 801d368:	08021dec 	.word	0x08021dec

0801d36c <tsc2046_init>:
#include <stdint.h>
#include "tsc2046.h"


void tsc2046_init(tTsc2046* tsc, SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin, float ax, float bx, float ay, float by, int avg )
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b088      	sub	sp, #32
 801d370:	af00      	add	r7, sp, #0
 801d372:	61f8      	str	r0, [r7, #28]
 801d374:	61b9      	str	r1, [r7, #24]
 801d376:	617a      	str	r2, [r7, #20]
 801d378:	ed87 0a03 	vstr	s0, [r7, #12]
 801d37c:	edc7 0a02 	vstr	s1, [r7, #8]
 801d380:	ed87 1a01 	vstr	s2, [r7, #4]
 801d384:	edc7 1a00 	vstr	s3, [r7]
 801d388:	827b      	strh	r3, [r7, #18]
	tsc->spi = spi;
 801d38a:	69fb      	ldr	r3, [r7, #28]
 801d38c:	69ba      	ldr	r2, [r7, #24]
 801d38e:	601a      	str	r2, [r3, #0]
	tsc->cs_port = cs_port;
 801d390:	69fb      	ldr	r3, [r7, #28]
 801d392:	697a      	ldr	r2, [r7, #20]
 801d394:	605a      	str	r2, [r3, #4]
	tsc->cs_pin = cs_pin;
 801d396:	69fb      	ldr	r3, [r7, #28]
 801d398:	8a7a      	ldrh	r2, [r7, #18]
 801d39a:	811a      	strh	r2, [r3, #8]
	tsc->ax = ax;
 801d39c:	69fb      	ldr	r3, [r7, #28]
 801d39e:	68fa      	ldr	r2, [r7, #12]
 801d3a0:	60da      	str	r2, [r3, #12]
	tsc->bx = bx;
 801d3a2:	69fb      	ldr	r3, [r7, #28]
 801d3a4:	68ba      	ldr	r2, [r7, #8]
 801d3a6:	611a      	str	r2, [r3, #16]
	tsc->ay = ay;
 801d3a8:	69fb      	ldr	r3, [r7, #28]
 801d3aa:	687a      	ldr	r2, [r7, #4]
 801d3ac:	615a      	str	r2, [r3, #20]
	tsc->by = by;
 801d3ae:	69fb      	ldr	r3, [r7, #28]
 801d3b0:	683a      	ldr	r2, [r7, #0]
 801d3b2:	619a      	str	r2, [r3, #24]
	tsc->avg = avg;
 801d3b4:	69fb      	ldr	r3, [r7, #28]
 801d3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d3b8:	61da      	str	r2, [r3, #28]
    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801d3ba:	69fb      	ldr	r3, [r7, #28]
 801d3bc:	6858      	ldr	r0, [r3, #4]
 801d3be:	69fb      	ldr	r3, [r7, #28]
 801d3c0:	891b      	ldrh	r3, [r3, #8]
 801d3c2:	2201      	movs	r2, #1
 801d3c4:	4619      	mov	r1, r3
 801d3c6:	f7ec fd3f 	bl	8009e48 <HAL_GPIO_WritePin>
}
 801d3ca:	bf00      	nop
 801d3cc:	3720      	adds	r7, #32
 801d3ce:	46bd      	mov	sp, r7
 801d3d0:	bd80      	pop	{r7, pc}
	...

0801d3d4 <tsc2046_read_ll>:

void tsc2046_read_ll( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801d3d4:	b580      	push	{r7, lr}
 801d3d6:	b088      	sub	sp, #32
 801d3d8:	af02      	add	r7, sp, #8
 801d3da:	60f8      	str	r0, [r7, #12]
 801d3dc:	60b9      	str	r1, [r7, #8]
 801d3de:	607a      	str	r2, [r7, #4]
	uint8_t buf_tx[3] = {0};
 801d3e0:	4b2d      	ldr	r3, [pc, #180]	; (801d498 <tsc2046_read_ll+0xc4>)
 801d3e2:	881b      	ldrh	r3, [r3, #0]
 801d3e4:	82bb      	strh	r3, [r7, #20]
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	75bb      	strb	r3, [r7, #22]
	uint8_t buf_rx[3] = {0};
 801d3ea:	4b2b      	ldr	r3, [pc, #172]	; (801d498 <tsc2046_read_ll+0xc4>)
 801d3ec:	881b      	ldrh	r3, [r3, #0]
 801d3ee:	823b      	strh	r3, [r7, #16]
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_RESET);
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	6858      	ldr	r0, [r3, #4]
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	891b      	ldrh	r3, [r3, #8]
 801d3fc:	2200      	movs	r2, #0
 801d3fe:	4619      	mov	r1, r3
 801d400:	f7ec fd22 	bl	8009e48 <HAL_GPIO_WritePin>

    buf_tx[0] = TSC2046_CHANNEL_X;
 801d404:	2390      	movs	r3, #144	; 0x90
 801d406:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	6818      	ldr	r0, [r3, #0]
 801d40c:	f107 0210 	add.w	r2, r7, #16
 801d410:	f107 0114 	add.w	r1, r7, #20
 801d414:	f04f 33ff 	mov.w	r3, #4294967295
 801d418:	9300      	str	r3, [sp, #0]
 801d41a:	2303      	movs	r3, #3
 801d41c:	f7ee f9bd 	bl	800b79a <HAL_SPI_TransmitReceive>
    *x = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801d420:	7c7b      	ldrb	r3, [r7, #17]
 801d422:	011b      	lsls	r3, r3, #4
 801d424:	b21a      	sxth	r2, r3
 801d426:	7cbb      	ldrb	r3, [r7, #18]
 801d428:	091b      	lsrs	r3, r3, #4
 801d42a:	b2db      	uxtb	r3, r3
 801d42c:	b21b      	sxth	r3, r3
 801d42e:	4313      	orrs	r3, r2
 801d430:	b21b      	sxth	r3, r3
 801d432:	b29a      	uxth	r2, r3
 801d434:	68bb      	ldr	r3, [r7, #8]
 801d436:	801a      	strh	r2, [r3, #0]

    buf_tx[0] = TSC2046_CHANNEL_Y;
 801d438:	23d0      	movs	r3, #208	; 0xd0
 801d43a:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	6818      	ldr	r0, [r3, #0]
 801d440:	f107 0210 	add.w	r2, r7, #16
 801d444:	f107 0114 	add.w	r1, r7, #20
 801d448:	f04f 33ff 	mov.w	r3, #4294967295
 801d44c:	9300      	str	r3, [sp, #0]
 801d44e:	2303      	movs	r3, #3
 801d450:	f7ee f9a3 	bl	800b79a <HAL_SPI_TransmitReceive>
    *y = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801d454:	7c7b      	ldrb	r3, [r7, #17]
 801d456:	011b      	lsls	r3, r3, #4
 801d458:	b21a      	sxth	r2, r3
 801d45a:	7cbb      	ldrb	r3, [r7, #18]
 801d45c:	091b      	lsrs	r3, r3, #4
 801d45e:	b2db      	uxtb	r3, r3
 801d460:	b21b      	sxth	r3, r3
 801d462:	4313      	orrs	r3, r2
 801d464:	b21b      	sxth	r3, r3
 801d466:	b29a      	uxth	r2, r3
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	6858      	ldr	r0, [r3, #4]
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	891b      	ldrh	r3, [r3, #8]
 801d474:	2201      	movs	r2, #1
 801d476:	4619      	mov	r1, r3
 801d478:	f7ec fce6 	bl	8009e48 <HAL_GPIO_WritePin>

    if (*x == 2047) {
 801d47c:	68bb      	ldr	r3, [r7, #8]
 801d47e:	881b      	ldrh	r3, [r3, #0]
 801d480:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801d484:	4293      	cmp	r3, r2
 801d486:	d102      	bne.n	801d48e <tsc2046_read_ll+0xba>
        *x = 0;
 801d488:	68bb      	ldr	r3, [r7, #8]
 801d48a:	2200      	movs	r2, #0
 801d48c:	801a      	strh	r2, [r3, #0]
    }
}
 801d48e:	bf00      	nop
 801d490:	3718      	adds	r7, #24
 801d492:	46bd      	mov	sp, r7
 801d494:	bd80      	pop	{r7, pc}
 801d496:	bf00      	nop
 801d498:	08021fdc 	.word	0x08021fdc

0801d49c <tsc2046_read>:

void tsc2046_read( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801d49c:	b580      	push	{r7, lr}
 801d49e:	b088      	sub	sp, #32
 801d4a0:	af00      	add	r7, sp, #0
 801d4a2:	60f8      	str	r0, [r7, #12]
 801d4a4:	60b9      	str	r1, [r7, #8]
 801d4a6:	607a      	str	r2, [r7, #4]
    int32_t x_acc = 0;
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	61fb      	str	r3, [r7, #28]
    int32_t y_acc = 0;
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < tsc->avg; i++) {
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	617b      	str	r3, [r7, #20]
 801d4b4:	e026      	b.n	801d504 <tsc2046_read+0x68>
    	tsc2046_read_ll(tsc, x, y);
 801d4b6:	687a      	ldr	r2, [r7, #4]
 801d4b8:	68b9      	ldr	r1, [r7, #8]
 801d4ba:	68f8      	ldr	r0, [r7, #12]
 801d4bc:	f7ff ff8a 	bl	801d3d4 <tsc2046_read_ll>
        if (*x && *y) {
 801d4c0:	68bb      	ldr	r3, [r7, #8]
 801d4c2:	881b      	ldrh	r3, [r3, #0]
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d016      	beq.n	801d4f6 <tsc2046_read+0x5a>
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	881b      	ldrh	r3, [r3, #0]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d012      	beq.n	801d4f6 <tsc2046_read+0x5a>
            x_acc += *x;
 801d4d0:	68bb      	ldr	r3, [r7, #8]
 801d4d2:	881b      	ldrh	r3, [r3, #0]
 801d4d4:	461a      	mov	r2, r3
 801d4d6:	69fb      	ldr	r3, [r7, #28]
 801d4d8:	4413      	add	r3, r2
 801d4da:	61fb      	str	r3, [r7, #28]
            y_acc += *y;
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	881b      	ldrh	r3, [r3, #0]
 801d4e0:	461a      	mov	r2, r3
 801d4e2:	69bb      	ldr	r3, [r7, #24]
 801d4e4:	4413      	add	r3, r2
 801d4e6:	61bb      	str	r3, [r7, #24]
        } else {
            *x = 0;
            *y = 0;
            return;
        }
        HAL_Delay(1);
 801d4e8:	2001      	movs	r0, #1
 801d4ea:	f7e8 ffdb 	bl	80064a4 <HAL_Delay>
    for (int i = 0; i < tsc->avg; i++) {
 801d4ee:	697b      	ldr	r3, [r7, #20]
 801d4f0:	3301      	adds	r3, #1
 801d4f2:	617b      	str	r3, [r7, #20]
 801d4f4:	e006      	b.n	801d504 <tsc2046_read+0x68>
            *x = 0;
 801d4f6:	68bb      	ldr	r3, [r7, #8]
 801d4f8:	2200      	movs	r2, #0
 801d4fa:	801a      	strh	r2, [r3, #0]
            *y = 0;
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	2200      	movs	r2, #0
 801d500:	801a      	strh	r2, [r3, #0]
            return;
 801d502:	e042      	b.n	801d58a <tsc2046_read+0xee>
    for (int i = 0; i < tsc->avg; i++) {
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	69db      	ldr	r3, [r3, #28]
 801d508:	697a      	ldr	r2, [r7, #20]
 801d50a:	429a      	cmp	r2, r3
 801d50c:	dbd3      	blt.n	801d4b6 <tsc2046_read+0x1a>
    }
    *x = x_acc / tsc->avg;
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	69db      	ldr	r3, [r3, #28]
 801d512:	69fa      	ldr	r2, [r7, #28]
 801d514:	fb92 f3f3 	sdiv	r3, r2, r3
 801d518:	b29a      	uxth	r2, r3
 801d51a:	68bb      	ldr	r3, [r7, #8]
 801d51c:	801a      	strh	r2, [r3, #0]
    *y = y_acc / tsc->avg;
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	69db      	ldr	r3, [r3, #28]
 801d522:	69ba      	ldr	r2, [r7, #24]
 801d524:	fb92 f3f3 	sdiv	r3, r2, r3
 801d528:	b29a      	uxth	r2, r3
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	801a      	strh	r2, [r3, #0]
    *x = tsc->ax * *x + tsc->bx;
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	ed93 7a03 	vldr	s14, [r3, #12]
 801d534:	68bb      	ldr	r3, [r7, #8]
 801d536:	881b      	ldrh	r3, [r3, #0]
 801d538:	ee07 3a90 	vmov	s15, r3
 801d53c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d540:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	edd3 7a04 	vldr	s15, [r3, #16]
 801d54a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d54e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d552:	ee17 3a90 	vmov	r3, s15
 801d556:	b29a      	uxth	r2, r3
 801d558:	68bb      	ldr	r3, [r7, #8]
 801d55a:	801a      	strh	r2, [r3, #0]
    *y = tsc->ay * *y + tsc->by;
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	ed93 7a05 	vldr	s14, [r3, #20]
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	881b      	ldrh	r3, [r3, #0]
 801d566:	ee07 3a90 	vmov	s15, r3
 801d56a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d56e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	edd3 7a06 	vldr	s15, [r3, #24]
 801d578:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d57c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d580:	ee17 3a90 	vmov	r3, s15
 801d584:	b29a      	uxth	r2, r3
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	801a      	strh	r2, [r3, #0]
}
 801d58a:	3720      	adds	r7, #32
 801d58c:	46bd      	mov	sp, r7
 801d58e:	bd80      	pop	{r7, pc}

0801d590 <__assert_func>:
 801d590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d592:	4614      	mov	r4, r2
 801d594:	461a      	mov	r2, r3
 801d596:	4b09      	ldr	r3, [pc, #36]	; (801d5bc <__assert_func+0x2c>)
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	4605      	mov	r5, r0
 801d59c:	68d8      	ldr	r0, [r3, #12]
 801d59e:	b14c      	cbz	r4, 801d5b4 <__assert_func+0x24>
 801d5a0:	4b07      	ldr	r3, [pc, #28]	; (801d5c0 <__assert_func+0x30>)
 801d5a2:	9100      	str	r1, [sp, #0]
 801d5a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d5a8:	4906      	ldr	r1, [pc, #24]	; (801d5c4 <__assert_func+0x34>)
 801d5aa:	462b      	mov	r3, r5
 801d5ac:	f000 fd06 	bl	801dfbc <fiprintf>
 801d5b0:	f000 fe24 	bl	801e1fc <abort>
 801d5b4:	4b04      	ldr	r3, [pc, #16]	; (801d5c8 <__assert_func+0x38>)
 801d5b6:	461c      	mov	r4, r3
 801d5b8:	e7f3      	b.n	801d5a2 <__assert_func+0x12>
 801d5ba:	bf00      	nop
 801d5bc:	200001e8 	.word	0x200001e8
 801d5c0:	0802337f 	.word	0x0802337f
 801d5c4:	0802338c 	.word	0x0802338c
 801d5c8:	080233ba 	.word	0x080233ba

0801d5cc <__cvt>:
 801d5cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d5d0:	ec55 4b10 	vmov	r4, r5, d0
 801d5d4:	2d00      	cmp	r5, #0
 801d5d6:	460e      	mov	r6, r1
 801d5d8:	4619      	mov	r1, r3
 801d5da:	462b      	mov	r3, r5
 801d5dc:	bfbb      	ittet	lt
 801d5de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d5e2:	461d      	movlt	r5, r3
 801d5e4:	2300      	movge	r3, #0
 801d5e6:	232d      	movlt	r3, #45	; 0x2d
 801d5e8:	700b      	strb	r3, [r1, #0]
 801d5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d5f0:	4691      	mov	r9, r2
 801d5f2:	f023 0820 	bic.w	r8, r3, #32
 801d5f6:	bfbc      	itt	lt
 801d5f8:	4622      	movlt	r2, r4
 801d5fa:	4614      	movlt	r4, r2
 801d5fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d600:	d005      	beq.n	801d60e <__cvt+0x42>
 801d602:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d606:	d100      	bne.n	801d60a <__cvt+0x3e>
 801d608:	3601      	adds	r6, #1
 801d60a:	2102      	movs	r1, #2
 801d60c:	e000      	b.n	801d610 <__cvt+0x44>
 801d60e:	2103      	movs	r1, #3
 801d610:	ab03      	add	r3, sp, #12
 801d612:	9301      	str	r3, [sp, #4]
 801d614:	ab02      	add	r3, sp, #8
 801d616:	9300      	str	r3, [sp, #0]
 801d618:	ec45 4b10 	vmov	d0, r4, r5
 801d61c:	4653      	mov	r3, sl
 801d61e:	4632      	mov	r2, r6
 801d620:	f000 fe7e 	bl	801e320 <_dtoa_r>
 801d624:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d628:	4607      	mov	r7, r0
 801d62a:	d102      	bne.n	801d632 <__cvt+0x66>
 801d62c:	f019 0f01 	tst.w	r9, #1
 801d630:	d022      	beq.n	801d678 <__cvt+0xac>
 801d632:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d636:	eb07 0906 	add.w	r9, r7, r6
 801d63a:	d110      	bne.n	801d65e <__cvt+0x92>
 801d63c:	783b      	ldrb	r3, [r7, #0]
 801d63e:	2b30      	cmp	r3, #48	; 0x30
 801d640:	d10a      	bne.n	801d658 <__cvt+0x8c>
 801d642:	2200      	movs	r2, #0
 801d644:	2300      	movs	r3, #0
 801d646:	4620      	mov	r0, r4
 801d648:	4629      	mov	r1, r5
 801d64a:	f7e3 fa65 	bl	8000b18 <__aeabi_dcmpeq>
 801d64e:	b918      	cbnz	r0, 801d658 <__cvt+0x8c>
 801d650:	f1c6 0601 	rsb	r6, r6, #1
 801d654:	f8ca 6000 	str.w	r6, [sl]
 801d658:	f8da 3000 	ldr.w	r3, [sl]
 801d65c:	4499      	add	r9, r3
 801d65e:	2200      	movs	r2, #0
 801d660:	2300      	movs	r3, #0
 801d662:	4620      	mov	r0, r4
 801d664:	4629      	mov	r1, r5
 801d666:	f7e3 fa57 	bl	8000b18 <__aeabi_dcmpeq>
 801d66a:	b108      	cbz	r0, 801d670 <__cvt+0xa4>
 801d66c:	f8cd 900c 	str.w	r9, [sp, #12]
 801d670:	2230      	movs	r2, #48	; 0x30
 801d672:	9b03      	ldr	r3, [sp, #12]
 801d674:	454b      	cmp	r3, r9
 801d676:	d307      	bcc.n	801d688 <__cvt+0xbc>
 801d678:	9b03      	ldr	r3, [sp, #12]
 801d67a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d67c:	1bdb      	subs	r3, r3, r7
 801d67e:	4638      	mov	r0, r7
 801d680:	6013      	str	r3, [r2, #0]
 801d682:	b004      	add	sp, #16
 801d684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d688:	1c59      	adds	r1, r3, #1
 801d68a:	9103      	str	r1, [sp, #12]
 801d68c:	701a      	strb	r2, [r3, #0]
 801d68e:	e7f0      	b.n	801d672 <__cvt+0xa6>

0801d690 <__exponent>:
 801d690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d692:	4603      	mov	r3, r0
 801d694:	2900      	cmp	r1, #0
 801d696:	bfb8      	it	lt
 801d698:	4249      	neglt	r1, r1
 801d69a:	f803 2b02 	strb.w	r2, [r3], #2
 801d69e:	bfb4      	ite	lt
 801d6a0:	222d      	movlt	r2, #45	; 0x2d
 801d6a2:	222b      	movge	r2, #43	; 0x2b
 801d6a4:	2909      	cmp	r1, #9
 801d6a6:	7042      	strb	r2, [r0, #1]
 801d6a8:	dd2a      	ble.n	801d700 <__exponent+0x70>
 801d6aa:	f10d 0207 	add.w	r2, sp, #7
 801d6ae:	4617      	mov	r7, r2
 801d6b0:	260a      	movs	r6, #10
 801d6b2:	4694      	mov	ip, r2
 801d6b4:	fb91 f5f6 	sdiv	r5, r1, r6
 801d6b8:	fb06 1415 	mls	r4, r6, r5, r1
 801d6bc:	3430      	adds	r4, #48	; 0x30
 801d6be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801d6c2:	460c      	mov	r4, r1
 801d6c4:	2c63      	cmp	r4, #99	; 0x63
 801d6c6:	f102 32ff 	add.w	r2, r2, #4294967295
 801d6ca:	4629      	mov	r1, r5
 801d6cc:	dcf1      	bgt.n	801d6b2 <__exponent+0x22>
 801d6ce:	3130      	adds	r1, #48	; 0x30
 801d6d0:	f1ac 0402 	sub.w	r4, ip, #2
 801d6d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801d6d8:	1c41      	adds	r1, r0, #1
 801d6da:	4622      	mov	r2, r4
 801d6dc:	42ba      	cmp	r2, r7
 801d6de:	d30a      	bcc.n	801d6f6 <__exponent+0x66>
 801d6e0:	f10d 0209 	add.w	r2, sp, #9
 801d6e4:	eba2 020c 	sub.w	r2, r2, ip
 801d6e8:	42bc      	cmp	r4, r7
 801d6ea:	bf88      	it	hi
 801d6ec:	2200      	movhi	r2, #0
 801d6ee:	4413      	add	r3, r2
 801d6f0:	1a18      	subs	r0, r3, r0
 801d6f2:	b003      	add	sp, #12
 801d6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 801d6fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 801d6fe:	e7ed      	b.n	801d6dc <__exponent+0x4c>
 801d700:	2330      	movs	r3, #48	; 0x30
 801d702:	3130      	adds	r1, #48	; 0x30
 801d704:	7083      	strb	r3, [r0, #2]
 801d706:	70c1      	strb	r1, [r0, #3]
 801d708:	1d03      	adds	r3, r0, #4
 801d70a:	e7f1      	b.n	801d6f0 <__exponent+0x60>

0801d70c <_printf_float>:
 801d70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d710:	ed2d 8b02 	vpush	{d8}
 801d714:	b08d      	sub	sp, #52	; 0x34
 801d716:	460c      	mov	r4, r1
 801d718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d71c:	4616      	mov	r6, r2
 801d71e:	461f      	mov	r7, r3
 801d720:	4605      	mov	r5, r0
 801d722:	f000 fce7 	bl	801e0f4 <_localeconv_r>
 801d726:	f8d0 a000 	ldr.w	sl, [r0]
 801d72a:	4650      	mov	r0, sl
 801d72c:	f7e2 fdc8 	bl	80002c0 <strlen>
 801d730:	2300      	movs	r3, #0
 801d732:	930a      	str	r3, [sp, #40]	; 0x28
 801d734:	6823      	ldr	r3, [r4, #0]
 801d736:	9305      	str	r3, [sp, #20]
 801d738:	f8d8 3000 	ldr.w	r3, [r8]
 801d73c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d740:	3307      	adds	r3, #7
 801d742:	f023 0307 	bic.w	r3, r3, #7
 801d746:	f103 0208 	add.w	r2, r3, #8
 801d74a:	f8c8 2000 	str.w	r2, [r8]
 801d74e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d756:	9307      	str	r3, [sp, #28]
 801d758:	f8cd 8018 	str.w	r8, [sp, #24]
 801d75c:	ee08 0a10 	vmov	s16, r0
 801d760:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801d764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d768:	4b9e      	ldr	r3, [pc, #632]	; (801d9e4 <_printf_float+0x2d8>)
 801d76a:	f04f 32ff 	mov.w	r2, #4294967295
 801d76e:	f7e3 fa05 	bl	8000b7c <__aeabi_dcmpun>
 801d772:	bb88      	cbnz	r0, 801d7d8 <_printf_float+0xcc>
 801d774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d778:	4b9a      	ldr	r3, [pc, #616]	; (801d9e4 <_printf_float+0x2d8>)
 801d77a:	f04f 32ff 	mov.w	r2, #4294967295
 801d77e:	f7e3 f9df 	bl	8000b40 <__aeabi_dcmple>
 801d782:	bb48      	cbnz	r0, 801d7d8 <_printf_float+0xcc>
 801d784:	2200      	movs	r2, #0
 801d786:	2300      	movs	r3, #0
 801d788:	4640      	mov	r0, r8
 801d78a:	4649      	mov	r1, r9
 801d78c:	f7e3 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 801d790:	b110      	cbz	r0, 801d798 <_printf_float+0x8c>
 801d792:	232d      	movs	r3, #45	; 0x2d
 801d794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d798:	4a93      	ldr	r2, [pc, #588]	; (801d9e8 <_printf_float+0x2dc>)
 801d79a:	4b94      	ldr	r3, [pc, #592]	; (801d9ec <_printf_float+0x2e0>)
 801d79c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d7a0:	bf94      	ite	ls
 801d7a2:	4690      	movls	r8, r2
 801d7a4:	4698      	movhi	r8, r3
 801d7a6:	2303      	movs	r3, #3
 801d7a8:	6123      	str	r3, [r4, #16]
 801d7aa:	9b05      	ldr	r3, [sp, #20]
 801d7ac:	f023 0304 	bic.w	r3, r3, #4
 801d7b0:	6023      	str	r3, [r4, #0]
 801d7b2:	f04f 0900 	mov.w	r9, #0
 801d7b6:	9700      	str	r7, [sp, #0]
 801d7b8:	4633      	mov	r3, r6
 801d7ba:	aa0b      	add	r2, sp, #44	; 0x2c
 801d7bc:	4621      	mov	r1, r4
 801d7be:	4628      	mov	r0, r5
 801d7c0:	f000 f9da 	bl	801db78 <_printf_common>
 801d7c4:	3001      	adds	r0, #1
 801d7c6:	f040 8090 	bne.w	801d8ea <_printf_float+0x1de>
 801d7ca:	f04f 30ff 	mov.w	r0, #4294967295
 801d7ce:	b00d      	add	sp, #52	; 0x34
 801d7d0:	ecbd 8b02 	vpop	{d8}
 801d7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7d8:	4642      	mov	r2, r8
 801d7da:	464b      	mov	r3, r9
 801d7dc:	4640      	mov	r0, r8
 801d7de:	4649      	mov	r1, r9
 801d7e0:	f7e3 f9cc 	bl	8000b7c <__aeabi_dcmpun>
 801d7e4:	b140      	cbz	r0, 801d7f8 <_printf_float+0xec>
 801d7e6:	464b      	mov	r3, r9
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	bfbc      	itt	lt
 801d7ec:	232d      	movlt	r3, #45	; 0x2d
 801d7ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d7f2:	4a7f      	ldr	r2, [pc, #508]	; (801d9f0 <_printf_float+0x2e4>)
 801d7f4:	4b7f      	ldr	r3, [pc, #508]	; (801d9f4 <_printf_float+0x2e8>)
 801d7f6:	e7d1      	b.n	801d79c <_printf_float+0x90>
 801d7f8:	6863      	ldr	r3, [r4, #4]
 801d7fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d7fe:	9206      	str	r2, [sp, #24]
 801d800:	1c5a      	adds	r2, r3, #1
 801d802:	d13f      	bne.n	801d884 <_printf_float+0x178>
 801d804:	2306      	movs	r3, #6
 801d806:	6063      	str	r3, [r4, #4]
 801d808:	9b05      	ldr	r3, [sp, #20]
 801d80a:	6861      	ldr	r1, [r4, #4]
 801d80c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d810:	2300      	movs	r3, #0
 801d812:	9303      	str	r3, [sp, #12]
 801d814:	ab0a      	add	r3, sp, #40	; 0x28
 801d816:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d81a:	ab09      	add	r3, sp, #36	; 0x24
 801d81c:	ec49 8b10 	vmov	d0, r8, r9
 801d820:	9300      	str	r3, [sp, #0]
 801d822:	6022      	str	r2, [r4, #0]
 801d824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d828:	4628      	mov	r0, r5
 801d82a:	f7ff fecf 	bl	801d5cc <__cvt>
 801d82e:	9b06      	ldr	r3, [sp, #24]
 801d830:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d832:	2b47      	cmp	r3, #71	; 0x47
 801d834:	4680      	mov	r8, r0
 801d836:	d108      	bne.n	801d84a <_printf_float+0x13e>
 801d838:	1cc8      	adds	r0, r1, #3
 801d83a:	db02      	blt.n	801d842 <_printf_float+0x136>
 801d83c:	6863      	ldr	r3, [r4, #4]
 801d83e:	4299      	cmp	r1, r3
 801d840:	dd41      	ble.n	801d8c6 <_printf_float+0x1ba>
 801d842:	f1ab 0302 	sub.w	r3, fp, #2
 801d846:	fa5f fb83 	uxtb.w	fp, r3
 801d84a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d84e:	d820      	bhi.n	801d892 <_printf_float+0x186>
 801d850:	3901      	subs	r1, #1
 801d852:	465a      	mov	r2, fp
 801d854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d858:	9109      	str	r1, [sp, #36]	; 0x24
 801d85a:	f7ff ff19 	bl	801d690 <__exponent>
 801d85e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d860:	1813      	adds	r3, r2, r0
 801d862:	2a01      	cmp	r2, #1
 801d864:	4681      	mov	r9, r0
 801d866:	6123      	str	r3, [r4, #16]
 801d868:	dc02      	bgt.n	801d870 <_printf_float+0x164>
 801d86a:	6822      	ldr	r2, [r4, #0]
 801d86c:	07d2      	lsls	r2, r2, #31
 801d86e:	d501      	bpl.n	801d874 <_printf_float+0x168>
 801d870:	3301      	adds	r3, #1
 801d872:	6123      	str	r3, [r4, #16]
 801d874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d09c      	beq.n	801d7b6 <_printf_float+0xaa>
 801d87c:	232d      	movs	r3, #45	; 0x2d
 801d87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d882:	e798      	b.n	801d7b6 <_printf_float+0xaa>
 801d884:	9a06      	ldr	r2, [sp, #24]
 801d886:	2a47      	cmp	r2, #71	; 0x47
 801d888:	d1be      	bne.n	801d808 <_printf_float+0xfc>
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d1bc      	bne.n	801d808 <_printf_float+0xfc>
 801d88e:	2301      	movs	r3, #1
 801d890:	e7b9      	b.n	801d806 <_printf_float+0xfa>
 801d892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d896:	d118      	bne.n	801d8ca <_printf_float+0x1be>
 801d898:	2900      	cmp	r1, #0
 801d89a:	6863      	ldr	r3, [r4, #4]
 801d89c:	dd0b      	ble.n	801d8b6 <_printf_float+0x1aa>
 801d89e:	6121      	str	r1, [r4, #16]
 801d8a0:	b913      	cbnz	r3, 801d8a8 <_printf_float+0x19c>
 801d8a2:	6822      	ldr	r2, [r4, #0]
 801d8a4:	07d0      	lsls	r0, r2, #31
 801d8a6:	d502      	bpl.n	801d8ae <_printf_float+0x1a2>
 801d8a8:	3301      	adds	r3, #1
 801d8aa:	440b      	add	r3, r1
 801d8ac:	6123      	str	r3, [r4, #16]
 801d8ae:	65a1      	str	r1, [r4, #88]	; 0x58
 801d8b0:	f04f 0900 	mov.w	r9, #0
 801d8b4:	e7de      	b.n	801d874 <_printf_float+0x168>
 801d8b6:	b913      	cbnz	r3, 801d8be <_printf_float+0x1b2>
 801d8b8:	6822      	ldr	r2, [r4, #0]
 801d8ba:	07d2      	lsls	r2, r2, #31
 801d8bc:	d501      	bpl.n	801d8c2 <_printf_float+0x1b6>
 801d8be:	3302      	adds	r3, #2
 801d8c0:	e7f4      	b.n	801d8ac <_printf_float+0x1a0>
 801d8c2:	2301      	movs	r3, #1
 801d8c4:	e7f2      	b.n	801d8ac <_printf_float+0x1a0>
 801d8c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8cc:	4299      	cmp	r1, r3
 801d8ce:	db05      	blt.n	801d8dc <_printf_float+0x1d0>
 801d8d0:	6823      	ldr	r3, [r4, #0]
 801d8d2:	6121      	str	r1, [r4, #16]
 801d8d4:	07d8      	lsls	r0, r3, #31
 801d8d6:	d5ea      	bpl.n	801d8ae <_printf_float+0x1a2>
 801d8d8:	1c4b      	adds	r3, r1, #1
 801d8da:	e7e7      	b.n	801d8ac <_printf_float+0x1a0>
 801d8dc:	2900      	cmp	r1, #0
 801d8de:	bfd4      	ite	le
 801d8e0:	f1c1 0202 	rsble	r2, r1, #2
 801d8e4:	2201      	movgt	r2, #1
 801d8e6:	4413      	add	r3, r2
 801d8e8:	e7e0      	b.n	801d8ac <_printf_float+0x1a0>
 801d8ea:	6823      	ldr	r3, [r4, #0]
 801d8ec:	055a      	lsls	r2, r3, #21
 801d8ee:	d407      	bmi.n	801d900 <_printf_float+0x1f4>
 801d8f0:	6923      	ldr	r3, [r4, #16]
 801d8f2:	4642      	mov	r2, r8
 801d8f4:	4631      	mov	r1, r6
 801d8f6:	4628      	mov	r0, r5
 801d8f8:	47b8      	blx	r7
 801d8fa:	3001      	adds	r0, #1
 801d8fc:	d12c      	bne.n	801d958 <_printf_float+0x24c>
 801d8fe:	e764      	b.n	801d7ca <_printf_float+0xbe>
 801d900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d904:	f240 80e0 	bls.w	801dac8 <_printf_float+0x3bc>
 801d908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d90c:	2200      	movs	r2, #0
 801d90e:	2300      	movs	r3, #0
 801d910:	f7e3 f902 	bl	8000b18 <__aeabi_dcmpeq>
 801d914:	2800      	cmp	r0, #0
 801d916:	d034      	beq.n	801d982 <_printf_float+0x276>
 801d918:	4a37      	ldr	r2, [pc, #220]	; (801d9f8 <_printf_float+0x2ec>)
 801d91a:	2301      	movs	r3, #1
 801d91c:	4631      	mov	r1, r6
 801d91e:	4628      	mov	r0, r5
 801d920:	47b8      	blx	r7
 801d922:	3001      	adds	r0, #1
 801d924:	f43f af51 	beq.w	801d7ca <_printf_float+0xbe>
 801d928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d92c:	429a      	cmp	r2, r3
 801d92e:	db02      	blt.n	801d936 <_printf_float+0x22a>
 801d930:	6823      	ldr	r3, [r4, #0]
 801d932:	07d8      	lsls	r0, r3, #31
 801d934:	d510      	bpl.n	801d958 <_printf_float+0x24c>
 801d936:	ee18 3a10 	vmov	r3, s16
 801d93a:	4652      	mov	r2, sl
 801d93c:	4631      	mov	r1, r6
 801d93e:	4628      	mov	r0, r5
 801d940:	47b8      	blx	r7
 801d942:	3001      	adds	r0, #1
 801d944:	f43f af41 	beq.w	801d7ca <_printf_float+0xbe>
 801d948:	f04f 0800 	mov.w	r8, #0
 801d94c:	f104 091a 	add.w	r9, r4, #26
 801d950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d952:	3b01      	subs	r3, #1
 801d954:	4543      	cmp	r3, r8
 801d956:	dc09      	bgt.n	801d96c <_printf_float+0x260>
 801d958:	6823      	ldr	r3, [r4, #0]
 801d95a:	079b      	lsls	r3, r3, #30
 801d95c:	f100 8107 	bmi.w	801db6e <_printf_float+0x462>
 801d960:	68e0      	ldr	r0, [r4, #12]
 801d962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d964:	4298      	cmp	r0, r3
 801d966:	bfb8      	it	lt
 801d968:	4618      	movlt	r0, r3
 801d96a:	e730      	b.n	801d7ce <_printf_float+0xc2>
 801d96c:	2301      	movs	r3, #1
 801d96e:	464a      	mov	r2, r9
 801d970:	4631      	mov	r1, r6
 801d972:	4628      	mov	r0, r5
 801d974:	47b8      	blx	r7
 801d976:	3001      	adds	r0, #1
 801d978:	f43f af27 	beq.w	801d7ca <_printf_float+0xbe>
 801d97c:	f108 0801 	add.w	r8, r8, #1
 801d980:	e7e6      	b.n	801d950 <_printf_float+0x244>
 801d982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d984:	2b00      	cmp	r3, #0
 801d986:	dc39      	bgt.n	801d9fc <_printf_float+0x2f0>
 801d988:	4a1b      	ldr	r2, [pc, #108]	; (801d9f8 <_printf_float+0x2ec>)
 801d98a:	2301      	movs	r3, #1
 801d98c:	4631      	mov	r1, r6
 801d98e:	4628      	mov	r0, r5
 801d990:	47b8      	blx	r7
 801d992:	3001      	adds	r0, #1
 801d994:	f43f af19 	beq.w	801d7ca <_printf_float+0xbe>
 801d998:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d99c:	4313      	orrs	r3, r2
 801d99e:	d102      	bne.n	801d9a6 <_printf_float+0x29a>
 801d9a0:	6823      	ldr	r3, [r4, #0]
 801d9a2:	07d9      	lsls	r1, r3, #31
 801d9a4:	d5d8      	bpl.n	801d958 <_printf_float+0x24c>
 801d9a6:	ee18 3a10 	vmov	r3, s16
 801d9aa:	4652      	mov	r2, sl
 801d9ac:	4631      	mov	r1, r6
 801d9ae:	4628      	mov	r0, r5
 801d9b0:	47b8      	blx	r7
 801d9b2:	3001      	adds	r0, #1
 801d9b4:	f43f af09 	beq.w	801d7ca <_printf_float+0xbe>
 801d9b8:	f04f 0900 	mov.w	r9, #0
 801d9bc:	f104 0a1a 	add.w	sl, r4, #26
 801d9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9c2:	425b      	negs	r3, r3
 801d9c4:	454b      	cmp	r3, r9
 801d9c6:	dc01      	bgt.n	801d9cc <_printf_float+0x2c0>
 801d9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9ca:	e792      	b.n	801d8f2 <_printf_float+0x1e6>
 801d9cc:	2301      	movs	r3, #1
 801d9ce:	4652      	mov	r2, sl
 801d9d0:	4631      	mov	r1, r6
 801d9d2:	4628      	mov	r0, r5
 801d9d4:	47b8      	blx	r7
 801d9d6:	3001      	adds	r0, #1
 801d9d8:	f43f aef7 	beq.w	801d7ca <_printf_float+0xbe>
 801d9dc:	f109 0901 	add.w	r9, r9, #1
 801d9e0:	e7ee      	b.n	801d9c0 <_printf_float+0x2b4>
 801d9e2:	bf00      	nop
 801d9e4:	7fefffff 	.word	0x7fefffff
 801d9e8:	080233bb 	.word	0x080233bb
 801d9ec:	080233bf 	.word	0x080233bf
 801d9f0:	080233c3 	.word	0x080233c3
 801d9f4:	080233c7 	.word	0x080233c7
 801d9f8:	080233cb 	.word	0x080233cb
 801d9fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d9fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801da00:	429a      	cmp	r2, r3
 801da02:	bfa8      	it	ge
 801da04:	461a      	movge	r2, r3
 801da06:	2a00      	cmp	r2, #0
 801da08:	4691      	mov	r9, r2
 801da0a:	dc37      	bgt.n	801da7c <_printf_float+0x370>
 801da0c:	f04f 0b00 	mov.w	fp, #0
 801da10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801da14:	f104 021a 	add.w	r2, r4, #26
 801da18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801da1a:	9305      	str	r3, [sp, #20]
 801da1c:	eba3 0309 	sub.w	r3, r3, r9
 801da20:	455b      	cmp	r3, fp
 801da22:	dc33      	bgt.n	801da8c <_printf_float+0x380>
 801da24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801da28:	429a      	cmp	r2, r3
 801da2a:	db3b      	blt.n	801daa4 <_printf_float+0x398>
 801da2c:	6823      	ldr	r3, [r4, #0]
 801da2e:	07da      	lsls	r2, r3, #31
 801da30:	d438      	bmi.n	801daa4 <_printf_float+0x398>
 801da32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801da36:	eba2 0903 	sub.w	r9, r2, r3
 801da3a:	9b05      	ldr	r3, [sp, #20]
 801da3c:	1ad2      	subs	r2, r2, r3
 801da3e:	4591      	cmp	r9, r2
 801da40:	bfa8      	it	ge
 801da42:	4691      	movge	r9, r2
 801da44:	f1b9 0f00 	cmp.w	r9, #0
 801da48:	dc35      	bgt.n	801dab6 <_printf_float+0x3aa>
 801da4a:	f04f 0800 	mov.w	r8, #0
 801da4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801da52:	f104 0a1a 	add.w	sl, r4, #26
 801da56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801da5a:	1a9b      	subs	r3, r3, r2
 801da5c:	eba3 0309 	sub.w	r3, r3, r9
 801da60:	4543      	cmp	r3, r8
 801da62:	f77f af79 	ble.w	801d958 <_printf_float+0x24c>
 801da66:	2301      	movs	r3, #1
 801da68:	4652      	mov	r2, sl
 801da6a:	4631      	mov	r1, r6
 801da6c:	4628      	mov	r0, r5
 801da6e:	47b8      	blx	r7
 801da70:	3001      	adds	r0, #1
 801da72:	f43f aeaa 	beq.w	801d7ca <_printf_float+0xbe>
 801da76:	f108 0801 	add.w	r8, r8, #1
 801da7a:	e7ec      	b.n	801da56 <_printf_float+0x34a>
 801da7c:	4613      	mov	r3, r2
 801da7e:	4631      	mov	r1, r6
 801da80:	4642      	mov	r2, r8
 801da82:	4628      	mov	r0, r5
 801da84:	47b8      	blx	r7
 801da86:	3001      	adds	r0, #1
 801da88:	d1c0      	bne.n	801da0c <_printf_float+0x300>
 801da8a:	e69e      	b.n	801d7ca <_printf_float+0xbe>
 801da8c:	2301      	movs	r3, #1
 801da8e:	4631      	mov	r1, r6
 801da90:	4628      	mov	r0, r5
 801da92:	9205      	str	r2, [sp, #20]
 801da94:	47b8      	blx	r7
 801da96:	3001      	adds	r0, #1
 801da98:	f43f ae97 	beq.w	801d7ca <_printf_float+0xbe>
 801da9c:	9a05      	ldr	r2, [sp, #20]
 801da9e:	f10b 0b01 	add.w	fp, fp, #1
 801daa2:	e7b9      	b.n	801da18 <_printf_float+0x30c>
 801daa4:	ee18 3a10 	vmov	r3, s16
 801daa8:	4652      	mov	r2, sl
 801daaa:	4631      	mov	r1, r6
 801daac:	4628      	mov	r0, r5
 801daae:	47b8      	blx	r7
 801dab0:	3001      	adds	r0, #1
 801dab2:	d1be      	bne.n	801da32 <_printf_float+0x326>
 801dab4:	e689      	b.n	801d7ca <_printf_float+0xbe>
 801dab6:	9a05      	ldr	r2, [sp, #20]
 801dab8:	464b      	mov	r3, r9
 801daba:	4442      	add	r2, r8
 801dabc:	4631      	mov	r1, r6
 801dabe:	4628      	mov	r0, r5
 801dac0:	47b8      	blx	r7
 801dac2:	3001      	adds	r0, #1
 801dac4:	d1c1      	bne.n	801da4a <_printf_float+0x33e>
 801dac6:	e680      	b.n	801d7ca <_printf_float+0xbe>
 801dac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801daca:	2a01      	cmp	r2, #1
 801dacc:	dc01      	bgt.n	801dad2 <_printf_float+0x3c6>
 801dace:	07db      	lsls	r3, r3, #31
 801dad0:	d53a      	bpl.n	801db48 <_printf_float+0x43c>
 801dad2:	2301      	movs	r3, #1
 801dad4:	4642      	mov	r2, r8
 801dad6:	4631      	mov	r1, r6
 801dad8:	4628      	mov	r0, r5
 801dada:	47b8      	blx	r7
 801dadc:	3001      	adds	r0, #1
 801dade:	f43f ae74 	beq.w	801d7ca <_printf_float+0xbe>
 801dae2:	ee18 3a10 	vmov	r3, s16
 801dae6:	4652      	mov	r2, sl
 801dae8:	4631      	mov	r1, r6
 801daea:	4628      	mov	r0, r5
 801daec:	47b8      	blx	r7
 801daee:	3001      	adds	r0, #1
 801daf0:	f43f ae6b 	beq.w	801d7ca <_printf_float+0xbe>
 801daf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801daf8:	2200      	movs	r2, #0
 801dafa:	2300      	movs	r3, #0
 801dafc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801db00:	f7e3 f80a 	bl	8000b18 <__aeabi_dcmpeq>
 801db04:	b9d8      	cbnz	r0, 801db3e <_printf_float+0x432>
 801db06:	f10a 33ff 	add.w	r3, sl, #4294967295
 801db0a:	f108 0201 	add.w	r2, r8, #1
 801db0e:	4631      	mov	r1, r6
 801db10:	4628      	mov	r0, r5
 801db12:	47b8      	blx	r7
 801db14:	3001      	adds	r0, #1
 801db16:	d10e      	bne.n	801db36 <_printf_float+0x42a>
 801db18:	e657      	b.n	801d7ca <_printf_float+0xbe>
 801db1a:	2301      	movs	r3, #1
 801db1c:	4652      	mov	r2, sl
 801db1e:	4631      	mov	r1, r6
 801db20:	4628      	mov	r0, r5
 801db22:	47b8      	blx	r7
 801db24:	3001      	adds	r0, #1
 801db26:	f43f ae50 	beq.w	801d7ca <_printf_float+0xbe>
 801db2a:	f108 0801 	add.w	r8, r8, #1
 801db2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db30:	3b01      	subs	r3, #1
 801db32:	4543      	cmp	r3, r8
 801db34:	dcf1      	bgt.n	801db1a <_printf_float+0x40e>
 801db36:	464b      	mov	r3, r9
 801db38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801db3c:	e6da      	b.n	801d8f4 <_printf_float+0x1e8>
 801db3e:	f04f 0800 	mov.w	r8, #0
 801db42:	f104 0a1a 	add.w	sl, r4, #26
 801db46:	e7f2      	b.n	801db2e <_printf_float+0x422>
 801db48:	2301      	movs	r3, #1
 801db4a:	4642      	mov	r2, r8
 801db4c:	e7df      	b.n	801db0e <_printf_float+0x402>
 801db4e:	2301      	movs	r3, #1
 801db50:	464a      	mov	r2, r9
 801db52:	4631      	mov	r1, r6
 801db54:	4628      	mov	r0, r5
 801db56:	47b8      	blx	r7
 801db58:	3001      	adds	r0, #1
 801db5a:	f43f ae36 	beq.w	801d7ca <_printf_float+0xbe>
 801db5e:	f108 0801 	add.w	r8, r8, #1
 801db62:	68e3      	ldr	r3, [r4, #12]
 801db64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801db66:	1a5b      	subs	r3, r3, r1
 801db68:	4543      	cmp	r3, r8
 801db6a:	dcf0      	bgt.n	801db4e <_printf_float+0x442>
 801db6c:	e6f8      	b.n	801d960 <_printf_float+0x254>
 801db6e:	f04f 0800 	mov.w	r8, #0
 801db72:	f104 0919 	add.w	r9, r4, #25
 801db76:	e7f4      	b.n	801db62 <_printf_float+0x456>

0801db78 <_printf_common>:
 801db78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db7c:	4616      	mov	r6, r2
 801db7e:	4699      	mov	r9, r3
 801db80:	688a      	ldr	r2, [r1, #8]
 801db82:	690b      	ldr	r3, [r1, #16]
 801db84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801db88:	4293      	cmp	r3, r2
 801db8a:	bfb8      	it	lt
 801db8c:	4613      	movlt	r3, r2
 801db8e:	6033      	str	r3, [r6, #0]
 801db90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801db94:	4607      	mov	r7, r0
 801db96:	460c      	mov	r4, r1
 801db98:	b10a      	cbz	r2, 801db9e <_printf_common+0x26>
 801db9a:	3301      	adds	r3, #1
 801db9c:	6033      	str	r3, [r6, #0]
 801db9e:	6823      	ldr	r3, [r4, #0]
 801dba0:	0699      	lsls	r1, r3, #26
 801dba2:	bf42      	ittt	mi
 801dba4:	6833      	ldrmi	r3, [r6, #0]
 801dba6:	3302      	addmi	r3, #2
 801dba8:	6033      	strmi	r3, [r6, #0]
 801dbaa:	6825      	ldr	r5, [r4, #0]
 801dbac:	f015 0506 	ands.w	r5, r5, #6
 801dbb0:	d106      	bne.n	801dbc0 <_printf_common+0x48>
 801dbb2:	f104 0a19 	add.w	sl, r4, #25
 801dbb6:	68e3      	ldr	r3, [r4, #12]
 801dbb8:	6832      	ldr	r2, [r6, #0]
 801dbba:	1a9b      	subs	r3, r3, r2
 801dbbc:	42ab      	cmp	r3, r5
 801dbbe:	dc26      	bgt.n	801dc0e <_printf_common+0x96>
 801dbc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dbc4:	1e13      	subs	r3, r2, #0
 801dbc6:	6822      	ldr	r2, [r4, #0]
 801dbc8:	bf18      	it	ne
 801dbca:	2301      	movne	r3, #1
 801dbcc:	0692      	lsls	r2, r2, #26
 801dbce:	d42b      	bmi.n	801dc28 <_printf_common+0xb0>
 801dbd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dbd4:	4649      	mov	r1, r9
 801dbd6:	4638      	mov	r0, r7
 801dbd8:	47c0      	blx	r8
 801dbda:	3001      	adds	r0, #1
 801dbdc:	d01e      	beq.n	801dc1c <_printf_common+0xa4>
 801dbde:	6823      	ldr	r3, [r4, #0]
 801dbe0:	6922      	ldr	r2, [r4, #16]
 801dbe2:	f003 0306 	and.w	r3, r3, #6
 801dbe6:	2b04      	cmp	r3, #4
 801dbe8:	bf02      	ittt	eq
 801dbea:	68e5      	ldreq	r5, [r4, #12]
 801dbec:	6833      	ldreq	r3, [r6, #0]
 801dbee:	1aed      	subeq	r5, r5, r3
 801dbf0:	68a3      	ldr	r3, [r4, #8]
 801dbf2:	bf0c      	ite	eq
 801dbf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dbf8:	2500      	movne	r5, #0
 801dbfa:	4293      	cmp	r3, r2
 801dbfc:	bfc4      	itt	gt
 801dbfe:	1a9b      	subgt	r3, r3, r2
 801dc00:	18ed      	addgt	r5, r5, r3
 801dc02:	2600      	movs	r6, #0
 801dc04:	341a      	adds	r4, #26
 801dc06:	42b5      	cmp	r5, r6
 801dc08:	d11a      	bne.n	801dc40 <_printf_common+0xc8>
 801dc0a:	2000      	movs	r0, #0
 801dc0c:	e008      	b.n	801dc20 <_printf_common+0xa8>
 801dc0e:	2301      	movs	r3, #1
 801dc10:	4652      	mov	r2, sl
 801dc12:	4649      	mov	r1, r9
 801dc14:	4638      	mov	r0, r7
 801dc16:	47c0      	blx	r8
 801dc18:	3001      	adds	r0, #1
 801dc1a:	d103      	bne.n	801dc24 <_printf_common+0xac>
 801dc1c:	f04f 30ff 	mov.w	r0, #4294967295
 801dc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc24:	3501      	adds	r5, #1
 801dc26:	e7c6      	b.n	801dbb6 <_printf_common+0x3e>
 801dc28:	18e1      	adds	r1, r4, r3
 801dc2a:	1c5a      	adds	r2, r3, #1
 801dc2c:	2030      	movs	r0, #48	; 0x30
 801dc2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dc32:	4422      	add	r2, r4
 801dc34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dc38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dc3c:	3302      	adds	r3, #2
 801dc3e:	e7c7      	b.n	801dbd0 <_printf_common+0x58>
 801dc40:	2301      	movs	r3, #1
 801dc42:	4622      	mov	r2, r4
 801dc44:	4649      	mov	r1, r9
 801dc46:	4638      	mov	r0, r7
 801dc48:	47c0      	blx	r8
 801dc4a:	3001      	adds	r0, #1
 801dc4c:	d0e6      	beq.n	801dc1c <_printf_common+0xa4>
 801dc4e:	3601      	adds	r6, #1
 801dc50:	e7d9      	b.n	801dc06 <_printf_common+0x8e>
	...

0801dc54 <_printf_i>:
 801dc54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc58:	7e0f      	ldrb	r7, [r1, #24]
 801dc5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dc5c:	2f78      	cmp	r7, #120	; 0x78
 801dc5e:	4691      	mov	r9, r2
 801dc60:	4680      	mov	r8, r0
 801dc62:	460c      	mov	r4, r1
 801dc64:	469a      	mov	sl, r3
 801dc66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dc6a:	d807      	bhi.n	801dc7c <_printf_i+0x28>
 801dc6c:	2f62      	cmp	r7, #98	; 0x62
 801dc6e:	d80a      	bhi.n	801dc86 <_printf_i+0x32>
 801dc70:	2f00      	cmp	r7, #0
 801dc72:	f000 80d4 	beq.w	801de1e <_printf_i+0x1ca>
 801dc76:	2f58      	cmp	r7, #88	; 0x58
 801dc78:	f000 80c0 	beq.w	801ddfc <_printf_i+0x1a8>
 801dc7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dc80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dc84:	e03a      	b.n	801dcfc <_printf_i+0xa8>
 801dc86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dc8a:	2b15      	cmp	r3, #21
 801dc8c:	d8f6      	bhi.n	801dc7c <_printf_i+0x28>
 801dc8e:	a101      	add	r1, pc, #4	; (adr r1, 801dc94 <_printf_i+0x40>)
 801dc90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dc94:	0801dced 	.word	0x0801dced
 801dc98:	0801dd01 	.word	0x0801dd01
 801dc9c:	0801dc7d 	.word	0x0801dc7d
 801dca0:	0801dc7d 	.word	0x0801dc7d
 801dca4:	0801dc7d 	.word	0x0801dc7d
 801dca8:	0801dc7d 	.word	0x0801dc7d
 801dcac:	0801dd01 	.word	0x0801dd01
 801dcb0:	0801dc7d 	.word	0x0801dc7d
 801dcb4:	0801dc7d 	.word	0x0801dc7d
 801dcb8:	0801dc7d 	.word	0x0801dc7d
 801dcbc:	0801dc7d 	.word	0x0801dc7d
 801dcc0:	0801de05 	.word	0x0801de05
 801dcc4:	0801dd2d 	.word	0x0801dd2d
 801dcc8:	0801ddbf 	.word	0x0801ddbf
 801dccc:	0801dc7d 	.word	0x0801dc7d
 801dcd0:	0801dc7d 	.word	0x0801dc7d
 801dcd4:	0801de27 	.word	0x0801de27
 801dcd8:	0801dc7d 	.word	0x0801dc7d
 801dcdc:	0801dd2d 	.word	0x0801dd2d
 801dce0:	0801dc7d 	.word	0x0801dc7d
 801dce4:	0801dc7d 	.word	0x0801dc7d
 801dce8:	0801ddc7 	.word	0x0801ddc7
 801dcec:	682b      	ldr	r3, [r5, #0]
 801dcee:	1d1a      	adds	r2, r3, #4
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	602a      	str	r2, [r5, #0]
 801dcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dcf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dcfc:	2301      	movs	r3, #1
 801dcfe:	e09f      	b.n	801de40 <_printf_i+0x1ec>
 801dd00:	6820      	ldr	r0, [r4, #0]
 801dd02:	682b      	ldr	r3, [r5, #0]
 801dd04:	0607      	lsls	r7, r0, #24
 801dd06:	f103 0104 	add.w	r1, r3, #4
 801dd0a:	6029      	str	r1, [r5, #0]
 801dd0c:	d501      	bpl.n	801dd12 <_printf_i+0xbe>
 801dd0e:	681e      	ldr	r6, [r3, #0]
 801dd10:	e003      	b.n	801dd1a <_printf_i+0xc6>
 801dd12:	0646      	lsls	r6, r0, #25
 801dd14:	d5fb      	bpl.n	801dd0e <_printf_i+0xba>
 801dd16:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dd1a:	2e00      	cmp	r6, #0
 801dd1c:	da03      	bge.n	801dd26 <_printf_i+0xd2>
 801dd1e:	232d      	movs	r3, #45	; 0x2d
 801dd20:	4276      	negs	r6, r6
 801dd22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dd26:	485a      	ldr	r0, [pc, #360]	; (801de90 <_printf_i+0x23c>)
 801dd28:	230a      	movs	r3, #10
 801dd2a:	e012      	b.n	801dd52 <_printf_i+0xfe>
 801dd2c:	682b      	ldr	r3, [r5, #0]
 801dd2e:	6820      	ldr	r0, [r4, #0]
 801dd30:	1d19      	adds	r1, r3, #4
 801dd32:	6029      	str	r1, [r5, #0]
 801dd34:	0605      	lsls	r5, r0, #24
 801dd36:	d501      	bpl.n	801dd3c <_printf_i+0xe8>
 801dd38:	681e      	ldr	r6, [r3, #0]
 801dd3a:	e002      	b.n	801dd42 <_printf_i+0xee>
 801dd3c:	0641      	lsls	r1, r0, #25
 801dd3e:	d5fb      	bpl.n	801dd38 <_printf_i+0xe4>
 801dd40:	881e      	ldrh	r6, [r3, #0]
 801dd42:	4853      	ldr	r0, [pc, #332]	; (801de90 <_printf_i+0x23c>)
 801dd44:	2f6f      	cmp	r7, #111	; 0x6f
 801dd46:	bf0c      	ite	eq
 801dd48:	2308      	moveq	r3, #8
 801dd4a:	230a      	movne	r3, #10
 801dd4c:	2100      	movs	r1, #0
 801dd4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dd52:	6865      	ldr	r5, [r4, #4]
 801dd54:	60a5      	str	r5, [r4, #8]
 801dd56:	2d00      	cmp	r5, #0
 801dd58:	bfa2      	ittt	ge
 801dd5a:	6821      	ldrge	r1, [r4, #0]
 801dd5c:	f021 0104 	bicge.w	r1, r1, #4
 801dd60:	6021      	strge	r1, [r4, #0]
 801dd62:	b90e      	cbnz	r6, 801dd68 <_printf_i+0x114>
 801dd64:	2d00      	cmp	r5, #0
 801dd66:	d04b      	beq.n	801de00 <_printf_i+0x1ac>
 801dd68:	4615      	mov	r5, r2
 801dd6a:	fbb6 f1f3 	udiv	r1, r6, r3
 801dd6e:	fb03 6711 	mls	r7, r3, r1, r6
 801dd72:	5dc7      	ldrb	r7, [r0, r7]
 801dd74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801dd78:	4637      	mov	r7, r6
 801dd7a:	42bb      	cmp	r3, r7
 801dd7c:	460e      	mov	r6, r1
 801dd7e:	d9f4      	bls.n	801dd6a <_printf_i+0x116>
 801dd80:	2b08      	cmp	r3, #8
 801dd82:	d10b      	bne.n	801dd9c <_printf_i+0x148>
 801dd84:	6823      	ldr	r3, [r4, #0]
 801dd86:	07de      	lsls	r6, r3, #31
 801dd88:	d508      	bpl.n	801dd9c <_printf_i+0x148>
 801dd8a:	6923      	ldr	r3, [r4, #16]
 801dd8c:	6861      	ldr	r1, [r4, #4]
 801dd8e:	4299      	cmp	r1, r3
 801dd90:	bfde      	ittt	le
 801dd92:	2330      	movle	r3, #48	; 0x30
 801dd94:	f805 3c01 	strble.w	r3, [r5, #-1]
 801dd98:	f105 35ff 	addle.w	r5, r5, #4294967295
 801dd9c:	1b52      	subs	r2, r2, r5
 801dd9e:	6122      	str	r2, [r4, #16]
 801dda0:	f8cd a000 	str.w	sl, [sp]
 801dda4:	464b      	mov	r3, r9
 801dda6:	aa03      	add	r2, sp, #12
 801dda8:	4621      	mov	r1, r4
 801ddaa:	4640      	mov	r0, r8
 801ddac:	f7ff fee4 	bl	801db78 <_printf_common>
 801ddb0:	3001      	adds	r0, #1
 801ddb2:	d14a      	bne.n	801de4a <_printf_i+0x1f6>
 801ddb4:	f04f 30ff 	mov.w	r0, #4294967295
 801ddb8:	b004      	add	sp, #16
 801ddba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddbe:	6823      	ldr	r3, [r4, #0]
 801ddc0:	f043 0320 	orr.w	r3, r3, #32
 801ddc4:	6023      	str	r3, [r4, #0]
 801ddc6:	4833      	ldr	r0, [pc, #204]	; (801de94 <_printf_i+0x240>)
 801ddc8:	2778      	movs	r7, #120	; 0x78
 801ddca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ddce:	6823      	ldr	r3, [r4, #0]
 801ddd0:	6829      	ldr	r1, [r5, #0]
 801ddd2:	061f      	lsls	r7, r3, #24
 801ddd4:	f851 6b04 	ldr.w	r6, [r1], #4
 801ddd8:	d402      	bmi.n	801dde0 <_printf_i+0x18c>
 801ddda:	065f      	lsls	r7, r3, #25
 801dddc:	bf48      	it	mi
 801ddde:	b2b6      	uxthmi	r6, r6
 801dde0:	07df      	lsls	r7, r3, #31
 801dde2:	bf48      	it	mi
 801dde4:	f043 0320 	orrmi.w	r3, r3, #32
 801dde8:	6029      	str	r1, [r5, #0]
 801ddea:	bf48      	it	mi
 801ddec:	6023      	strmi	r3, [r4, #0]
 801ddee:	b91e      	cbnz	r6, 801ddf8 <_printf_i+0x1a4>
 801ddf0:	6823      	ldr	r3, [r4, #0]
 801ddf2:	f023 0320 	bic.w	r3, r3, #32
 801ddf6:	6023      	str	r3, [r4, #0]
 801ddf8:	2310      	movs	r3, #16
 801ddfa:	e7a7      	b.n	801dd4c <_printf_i+0xf8>
 801ddfc:	4824      	ldr	r0, [pc, #144]	; (801de90 <_printf_i+0x23c>)
 801ddfe:	e7e4      	b.n	801ddca <_printf_i+0x176>
 801de00:	4615      	mov	r5, r2
 801de02:	e7bd      	b.n	801dd80 <_printf_i+0x12c>
 801de04:	682b      	ldr	r3, [r5, #0]
 801de06:	6826      	ldr	r6, [r4, #0]
 801de08:	6961      	ldr	r1, [r4, #20]
 801de0a:	1d18      	adds	r0, r3, #4
 801de0c:	6028      	str	r0, [r5, #0]
 801de0e:	0635      	lsls	r5, r6, #24
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	d501      	bpl.n	801de18 <_printf_i+0x1c4>
 801de14:	6019      	str	r1, [r3, #0]
 801de16:	e002      	b.n	801de1e <_printf_i+0x1ca>
 801de18:	0670      	lsls	r0, r6, #25
 801de1a:	d5fb      	bpl.n	801de14 <_printf_i+0x1c0>
 801de1c:	8019      	strh	r1, [r3, #0]
 801de1e:	2300      	movs	r3, #0
 801de20:	6123      	str	r3, [r4, #16]
 801de22:	4615      	mov	r5, r2
 801de24:	e7bc      	b.n	801dda0 <_printf_i+0x14c>
 801de26:	682b      	ldr	r3, [r5, #0]
 801de28:	1d1a      	adds	r2, r3, #4
 801de2a:	602a      	str	r2, [r5, #0]
 801de2c:	681d      	ldr	r5, [r3, #0]
 801de2e:	6862      	ldr	r2, [r4, #4]
 801de30:	2100      	movs	r1, #0
 801de32:	4628      	mov	r0, r5
 801de34:	f7e2 f9f4 	bl	8000220 <memchr>
 801de38:	b108      	cbz	r0, 801de3e <_printf_i+0x1ea>
 801de3a:	1b40      	subs	r0, r0, r5
 801de3c:	6060      	str	r0, [r4, #4]
 801de3e:	6863      	ldr	r3, [r4, #4]
 801de40:	6123      	str	r3, [r4, #16]
 801de42:	2300      	movs	r3, #0
 801de44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801de48:	e7aa      	b.n	801dda0 <_printf_i+0x14c>
 801de4a:	6923      	ldr	r3, [r4, #16]
 801de4c:	462a      	mov	r2, r5
 801de4e:	4649      	mov	r1, r9
 801de50:	4640      	mov	r0, r8
 801de52:	47d0      	blx	sl
 801de54:	3001      	adds	r0, #1
 801de56:	d0ad      	beq.n	801ddb4 <_printf_i+0x160>
 801de58:	6823      	ldr	r3, [r4, #0]
 801de5a:	079b      	lsls	r3, r3, #30
 801de5c:	d413      	bmi.n	801de86 <_printf_i+0x232>
 801de5e:	68e0      	ldr	r0, [r4, #12]
 801de60:	9b03      	ldr	r3, [sp, #12]
 801de62:	4298      	cmp	r0, r3
 801de64:	bfb8      	it	lt
 801de66:	4618      	movlt	r0, r3
 801de68:	e7a6      	b.n	801ddb8 <_printf_i+0x164>
 801de6a:	2301      	movs	r3, #1
 801de6c:	4632      	mov	r2, r6
 801de6e:	4649      	mov	r1, r9
 801de70:	4640      	mov	r0, r8
 801de72:	47d0      	blx	sl
 801de74:	3001      	adds	r0, #1
 801de76:	d09d      	beq.n	801ddb4 <_printf_i+0x160>
 801de78:	3501      	adds	r5, #1
 801de7a:	68e3      	ldr	r3, [r4, #12]
 801de7c:	9903      	ldr	r1, [sp, #12]
 801de7e:	1a5b      	subs	r3, r3, r1
 801de80:	42ab      	cmp	r3, r5
 801de82:	dcf2      	bgt.n	801de6a <_printf_i+0x216>
 801de84:	e7eb      	b.n	801de5e <_printf_i+0x20a>
 801de86:	2500      	movs	r5, #0
 801de88:	f104 0619 	add.w	r6, r4, #25
 801de8c:	e7f5      	b.n	801de7a <_printf_i+0x226>
 801de8e:	bf00      	nop
 801de90:	080233cd 	.word	0x080233cd
 801de94:	080233de 	.word	0x080233de

0801de98 <std>:
 801de98:	2300      	movs	r3, #0
 801de9a:	b510      	push	{r4, lr}
 801de9c:	4604      	mov	r4, r0
 801de9e:	e9c0 3300 	strd	r3, r3, [r0]
 801dea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dea6:	6083      	str	r3, [r0, #8]
 801dea8:	8181      	strh	r1, [r0, #12]
 801deaa:	6643      	str	r3, [r0, #100]	; 0x64
 801deac:	81c2      	strh	r2, [r0, #14]
 801deae:	6183      	str	r3, [r0, #24]
 801deb0:	4619      	mov	r1, r3
 801deb2:	2208      	movs	r2, #8
 801deb4:	305c      	adds	r0, #92	; 0x5c
 801deb6:	f000 f914 	bl	801e0e2 <memset>
 801deba:	4b05      	ldr	r3, [pc, #20]	; (801ded0 <std+0x38>)
 801debc:	6263      	str	r3, [r4, #36]	; 0x24
 801debe:	4b05      	ldr	r3, [pc, #20]	; (801ded4 <std+0x3c>)
 801dec0:	62a3      	str	r3, [r4, #40]	; 0x28
 801dec2:	4b05      	ldr	r3, [pc, #20]	; (801ded8 <std+0x40>)
 801dec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dec6:	4b05      	ldr	r3, [pc, #20]	; (801dedc <std+0x44>)
 801dec8:	6224      	str	r4, [r4, #32]
 801deca:	6323      	str	r3, [r4, #48]	; 0x30
 801decc:	bd10      	pop	{r4, pc}
 801dece:	bf00      	nop
 801ded0:	0801e05d 	.word	0x0801e05d
 801ded4:	0801e07f 	.word	0x0801e07f
 801ded8:	0801e0b7 	.word	0x0801e0b7
 801dedc:	0801e0db 	.word	0x0801e0db

0801dee0 <stdio_exit_handler>:
 801dee0:	4a02      	ldr	r2, [pc, #8]	; (801deec <stdio_exit_handler+0xc>)
 801dee2:	4903      	ldr	r1, [pc, #12]	; (801def0 <stdio_exit_handler+0x10>)
 801dee4:	4803      	ldr	r0, [pc, #12]	; (801def4 <stdio_exit_handler+0x14>)
 801dee6:	f000 b87b 	b.w	801dfe0 <_fwalk_sglue>
 801deea:	bf00      	nop
 801deec:	20000190 	.word	0x20000190
 801def0:	0801fe41 	.word	0x0801fe41
 801def4:	2000019c 	.word	0x2000019c

0801def8 <cleanup_stdio>:
 801def8:	6841      	ldr	r1, [r0, #4]
 801defa:	4b0c      	ldr	r3, [pc, #48]	; (801df2c <cleanup_stdio+0x34>)
 801defc:	4299      	cmp	r1, r3
 801defe:	b510      	push	{r4, lr}
 801df00:	4604      	mov	r4, r0
 801df02:	d001      	beq.n	801df08 <cleanup_stdio+0x10>
 801df04:	f001 ff9c 	bl	801fe40 <_fflush_r>
 801df08:	68a1      	ldr	r1, [r4, #8]
 801df0a:	4b09      	ldr	r3, [pc, #36]	; (801df30 <cleanup_stdio+0x38>)
 801df0c:	4299      	cmp	r1, r3
 801df0e:	d002      	beq.n	801df16 <cleanup_stdio+0x1e>
 801df10:	4620      	mov	r0, r4
 801df12:	f001 ff95 	bl	801fe40 <_fflush_r>
 801df16:	68e1      	ldr	r1, [r4, #12]
 801df18:	4b06      	ldr	r3, [pc, #24]	; (801df34 <cleanup_stdio+0x3c>)
 801df1a:	4299      	cmp	r1, r3
 801df1c:	d004      	beq.n	801df28 <cleanup_stdio+0x30>
 801df1e:	4620      	mov	r0, r4
 801df20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df24:	f001 bf8c 	b.w	801fe40 <_fflush_r>
 801df28:	bd10      	pop	{r4, pc}
 801df2a:	bf00      	nop
 801df2c:	20016934 	.word	0x20016934
 801df30:	2001699c 	.word	0x2001699c
 801df34:	20016a04 	.word	0x20016a04

0801df38 <global_stdio_init.part.0>:
 801df38:	b510      	push	{r4, lr}
 801df3a:	4b0b      	ldr	r3, [pc, #44]	; (801df68 <global_stdio_init.part.0+0x30>)
 801df3c:	4c0b      	ldr	r4, [pc, #44]	; (801df6c <global_stdio_init.part.0+0x34>)
 801df3e:	4a0c      	ldr	r2, [pc, #48]	; (801df70 <global_stdio_init.part.0+0x38>)
 801df40:	601a      	str	r2, [r3, #0]
 801df42:	4620      	mov	r0, r4
 801df44:	2200      	movs	r2, #0
 801df46:	2104      	movs	r1, #4
 801df48:	f7ff ffa6 	bl	801de98 <std>
 801df4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801df50:	2201      	movs	r2, #1
 801df52:	2109      	movs	r1, #9
 801df54:	f7ff ffa0 	bl	801de98 <std>
 801df58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801df5c:	2202      	movs	r2, #2
 801df5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df62:	2112      	movs	r1, #18
 801df64:	f7ff bf98 	b.w	801de98 <std>
 801df68:	20016a6c 	.word	0x20016a6c
 801df6c:	20016934 	.word	0x20016934
 801df70:	0801dee1 	.word	0x0801dee1

0801df74 <__sfp_lock_acquire>:
 801df74:	4801      	ldr	r0, [pc, #4]	; (801df7c <__sfp_lock_acquire+0x8>)
 801df76:	f000 b931 	b.w	801e1dc <__retarget_lock_acquire_recursive>
 801df7a:	bf00      	nop
 801df7c:	20016a75 	.word	0x20016a75

0801df80 <__sfp_lock_release>:
 801df80:	4801      	ldr	r0, [pc, #4]	; (801df88 <__sfp_lock_release+0x8>)
 801df82:	f000 b92c 	b.w	801e1de <__retarget_lock_release_recursive>
 801df86:	bf00      	nop
 801df88:	20016a75 	.word	0x20016a75

0801df8c <__sinit>:
 801df8c:	b510      	push	{r4, lr}
 801df8e:	4604      	mov	r4, r0
 801df90:	f7ff fff0 	bl	801df74 <__sfp_lock_acquire>
 801df94:	6a23      	ldr	r3, [r4, #32]
 801df96:	b11b      	cbz	r3, 801dfa0 <__sinit+0x14>
 801df98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df9c:	f7ff bff0 	b.w	801df80 <__sfp_lock_release>
 801dfa0:	4b04      	ldr	r3, [pc, #16]	; (801dfb4 <__sinit+0x28>)
 801dfa2:	6223      	str	r3, [r4, #32]
 801dfa4:	4b04      	ldr	r3, [pc, #16]	; (801dfb8 <__sinit+0x2c>)
 801dfa6:	681b      	ldr	r3, [r3, #0]
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d1f5      	bne.n	801df98 <__sinit+0xc>
 801dfac:	f7ff ffc4 	bl	801df38 <global_stdio_init.part.0>
 801dfb0:	e7f2      	b.n	801df98 <__sinit+0xc>
 801dfb2:	bf00      	nop
 801dfb4:	0801def9 	.word	0x0801def9
 801dfb8:	20016a6c 	.word	0x20016a6c

0801dfbc <fiprintf>:
 801dfbc:	b40e      	push	{r1, r2, r3}
 801dfbe:	b503      	push	{r0, r1, lr}
 801dfc0:	4601      	mov	r1, r0
 801dfc2:	ab03      	add	r3, sp, #12
 801dfc4:	4805      	ldr	r0, [pc, #20]	; (801dfdc <fiprintf+0x20>)
 801dfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfca:	6800      	ldr	r0, [r0, #0]
 801dfcc:	9301      	str	r3, [sp, #4]
 801dfce:	f001 fd97 	bl	801fb00 <_vfiprintf_r>
 801dfd2:	b002      	add	sp, #8
 801dfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dfd8:	b003      	add	sp, #12
 801dfda:	4770      	bx	lr
 801dfdc:	200001e8 	.word	0x200001e8

0801dfe0 <_fwalk_sglue>:
 801dfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfe4:	4607      	mov	r7, r0
 801dfe6:	4688      	mov	r8, r1
 801dfe8:	4614      	mov	r4, r2
 801dfea:	2600      	movs	r6, #0
 801dfec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dff0:	f1b9 0901 	subs.w	r9, r9, #1
 801dff4:	d505      	bpl.n	801e002 <_fwalk_sglue+0x22>
 801dff6:	6824      	ldr	r4, [r4, #0]
 801dff8:	2c00      	cmp	r4, #0
 801dffa:	d1f7      	bne.n	801dfec <_fwalk_sglue+0xc>
 801dffc:	4630      	mov	r0, r6
 801dffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e002:	89ab      	ldrh	r3, [r5, #12]
 801e004:	2b01      	cmp	r3, #1
 801e006:	d907      	bls.n	801e018 <_fwalk_sglue+0x38>
 801e008:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e00c:	3301      	adds	r3, #1
 801e00e:	d003      	beq.n	801e018 <_fwalk_sglue+0x38>
 801e010:	4629      	mov	r1, r5
 801e012:	4638      	mov	r0, r7
 801e014:	47c0      	blx	r8
 801e016:	4306      	orrs	r6, r0
 801e018:	3568      	adds	r5, #104	; 0x68
 801e01a:	e7e9      	b.n	801dff0 <_fwalk_sglue+0x10>

0801e01c <siprintf>:
 801e01c:	b40e      	push	{r1, r2, r3}
 801e01e:	b500      	push	{lr}
 801e020:	b09c      	sub	sp, #112	; 0x70
 801e022:	ab1d      	add	r3, sp, #116	; 0x74
 801e024:	9002      	str	r0, [sp, #8]
 801e026:	9006      	str	r0, [sp, #24]
 801e028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e02c:	4809      	ldr	r0, [pc, #36]	; (801e054 <siprintf+0x38>)
 801e02e:	9107      	str	r1, [sp, #28]
 801e030:	9104      	str	r1, [sp, #16]
 801e032:	4909      	ldr	r1, [pc, #36]	; (801e058 <siprintf+0x3c>)
 801e034:	f853 2b04 	ldr.w	r2, [r3], #4
 801e038:	9105      	str	r1, [sp, #20]
 801e03a:	6800      	ldr	r0, [r0, #0]
 801e03c:	9301      	str	r3, [sp, #4]
 801e03e:	a902      	add	r1, sp, #8
 801e040:	f001 fc36 	bl	801f8b0 <_svfiprintf_r>
 801e044:	9b02      	ldr	r3, [sp, #8]
 801e046:	2200      	movs	r2, #0
 801e048:	701a      	strb	r2, [r3, #0]
 801e04a:	b01c      	add	sp, #112	; 0x70
 801e04c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e050:	b003      	add	sp, #12
 801e052:	4770      	bx	lr
 801e054:	200001e8 	.word	0x200001e8
 801e058:	ffff0208 	.word	0xffff0208

0801e05c <__sread>:
 801e05c:	b510      	push	{r4, lr}
 801e05e:	460c      	mov	r4, r1
 801e060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e064:	f000 f86c 	bl	801e140 <_read_r>
 801e068:	2800      	cmp	r0, #0
 801e06a:	bfab      	itete	ge
 801e06c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e06e:	89a3      	ldrhlt	r3, [r4, #12]
 801e070:	181b      	addge	r3, r3, r0
 801e072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e076:	bfac      	ite	ge
 801e078:	6563      	strge	r3, [r4, #84]	; 0x54
 801e07a:	81a3      	strhlt	r3, [r4, #12]
 801e07c:	bd10      	pop	{r4, pc}

0801e07e <__swrite>:
 801e07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e082:	461f      	mov	r7, r3
 801e084:	898b      	ldrh	r3, [r1, #12]
 801e086:	05db      	lsls	r3, r3, #23
 801e088:	4605      	mov	r5, r0
 801e08a:	460c      	mov	r4, r1
 801e08c:	4616      	mov	r6, r2
 801e08e:	d505      	bpl.n	801e09c <__swrite+0x1e>
 801e090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e094:	2302      	movs	r3, #2
 801e096:	2200      	movs	r2, #0
 801e098:	f000 f840 	bl	801e11c <_lseek_r>
 801e09c:	89a3      	ldrh	r3, [r4, #12]
 801e09e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e0a6:	81a3      	strh	r3, [r4, #12]
 801e0a8:	4632      	mov	r2, r6
 801e0aa:	463b      	mov	r3, r7
 801e0ac:	4628      	mov	r0, r5
 801e0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0b2:	f000 b857 	b.w	801e164 <_write_r>

0801e0b6 <__sseek>:
 801e0b6:	b510      	push	{r4, lr}
 801e0b8:	460c      	mov	r4, r1
 801e0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0be:	f000 f82d 	bl	801e11c <_lseek_r>
 801e0c2:	1c43      	adds	r3, r0, #1
 801e0c4:	89a3      	ldrh	r3, [r4, #12]
 801e0c6:	bf15      	itete	ne
 801e0c8:	6560      	strne	r0, [r4, #84]	; 0x54
 801e0ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e0ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e0d2:	81a3      	strheq	r3, [r4, #12]
 801e0d4:	bf18      	it	ne
 801e0d6:	81a3      	strhne	r3, [r4, #12]
 801e0d8:	bd10      	pop	{r4, pc}

0801e0da <__sclose>:
 801e0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0de:	f000 b80d 	b.w	801e0fc <_close_r>

0801e0e2 <memset>:
 801e0e2:	4402      	add	r2, r0
 801e0e4:	4603      	mov	r3, r0
 801e0e6:	4293      	cmp	r3, r2
 801e0e8:	d100      	bne.n	801e0ec <memset+0xa>
 801e0ea:	4770      	bx	lr
 801e0ec:	f803 1b01 	strb.w	r1, [r3], #1
 801e0f0:	e7f9      	b.n	801e0e6 <memset+0x4>
	...

0801e0f4 <_localeconv_r>:
 801e0f4:	4800      	ldr	r0, [pc, #0]	; (801e0f8 <_localeconv_r+0x4>)
 801e0f6:	4770      	bx	lr
 801e0f8:	200002dc 	.word	0x200002dc

0801e0fc <_close_r>:
 801e0fc:	b538      	push	{r3, r4, r5, lr}
 801e0fe:	4d06      	ldr	r5, [pc, #24]	; (801e118 <_close_r+0x1c>)
 801e100:	2300      	movs	r3, #0
 801e102:	4604      	mov	r4, r0
 801e104:	4608      	mov	r0, r1
 801e106:	602b      	str	r3, [r5, #0]
 801e108:	f7e7 ff55 	bl	8005fb6 <_close>
 801e10c:	1c43      	adds	r3, r0, #1
 801e10e:	d102      	bne.n	801e116 <_close_r+0x1a>
 801e110:	682b      	ldr	r3, [r5, #0]
 801e112:	b103      	cbz	r3, 801e116 <_close_r+0x1a>
 801e114:	6023      	str	r3, [r4, #0]
 801e116:	bd38      	pop	{r3, r4, r5, pc}
 801e118:	20016a70 	.word	0x20016a70

0801e11c <_lseek_r>:
 801e11c:	b538      	push	{r3, r4, r5, lr}
 801e11e:	4d07      	ldr	r5, [pc, #28]	; (801e13c <_lseek_r+0x20>)
 801e120:	4604      	mov	r4, r0
 801e122:	4608      	mov	r0, r1
 801e124:	4611      	mov	r1, r2
 801e126:	2200      	movs	r2, #0
 801e128:	602a      	str	r2, [r5, #0]
 801e12a:	461a      	mov	r2, r3
 801e12c:	f7e7 ff6a 	bl	8006004 <_lseek>
 801e130:	1c43      	adds	r3, r0, #1
 801e132:	d102      	bne.n	801e13a <_lseek_r+0x1e>
 801e134:	682b      	ldr	r3, [r5, #0]
 801e136:	b103      	cbz	r3, 801e13a <_lseek_r+0x1e>
 801e138:	6023      	str	r3, [r4, #0]
 801e13a:	bd38      	pop	{r3, r4, r5, pc}
 801e13c:	20016a70 	.word	0x20016a70

0801e140 <_read_r>:
 801e140:	b538      	push	{r3, r4, r5, lr}
 801e142:	4d07      	ldr	r5, [pc, #28]	; (801e160 <_read_r+0x20>)
 801e144:	4604      	mov	r4, r0
 801e146:	4608      	mov	r0, r1
 801e148:	4611      	mov	r1, r2
 801e14a:	2200      	movs	r2, #0
 801e14c:	602a      	str	r2, [r5, #0]
 801e14e:	461a      	mov	r2, r3
 801e150:	f7e7 ff14 	bl	8005f7c <_read>
 801e154:	1c43      	adds	r3, r0, #1
 801e156:	d102      	bne.n	801e15e <_read_r+0x1e>
 801e158:	682b      	ldr	r3, [r5, #0]
 801e15a:	b103      	cbz	r3, 801e15e <_read_r+0x1e>
 801e15c:	6023      	str	r3, [r4, #0]
 801e15e:	bd38      	pop	{r3, r4, r5, pc}
 801e160:	20016a70 	.word	0x20016a70

0801e164 <_write_r>:
 801e164:	b538      	push	{r3, r4, r5, lr}
 801e166:	4d07      	ldr	r5, [pc, #28]	; (801e184 <_write_r+0x20>)
 801e168:	4604      	mov	r4, r0
 801e16a:	4608      	mov	r0, r1
 801e16c:	4611      	mov	r1, r2
 801e16e:	2200      	movs	r2, #0
 801e170:	602a      	str	r2, [r5, #0]
 801e172:	461a      	mov	r2, r3
 801e174:	f7e3 fc41 	bl	80019fa <_write>
 801e178:	1c43      	adds	r3, r0, #1
 801e17a:	d102      	bne.n	801e182 <_write_r+0x1e>
 801e17c:	682b      	ldr	r3, [r5, #0]
 801e17e:	b103      	cbz	r3, 801e182 <_write_r+0x1e>
 801e180:	6023      	str	r3, [r4, #0]
 801e182:	bd38      	pop	{r3, r4, r5, pc}
 801e184:	20016a70 	.word	0x20016a70

0801e188 <__errno>:
 801e188:	4b01      	ldr	r3, [pc, #4]	; (801e190 <__errno+0x8>)
 801e18a:	6818      	ldr	r0, [r3, #0]
 801e18c:	4770      	bx	lr
 801e18e:	bf00      	nop
 801e190:	200001e8 	.word	0x200001e8

0801e194 <__libc_init_array>:
 801e194:	b570      	push	{r4, r5, r6, lr}
 801e196:	4d0d      	ldr	r5, [pc, #52]	; (801e1cc <__libc_init_array+0x38>)
 801e198:	4c0d      	ldr	r4, [pc, #52]	; (801e1d0 <__libc_init_array+0x3c>)
 801e19a:	1b64      	subs	r4, r4, r5
 801e19c:	10a4      	asrs	r4, r4, #2
 801e19e:	2600      	movs	r6, #0
 801e1a0:	42a6      	cmp	r6, r4
 801e1a2:	d109      	bne.n	801e1b8 <__libc_init_array+0x24>
 801e1a4:	4d0b      	ldr	r5, [pc, #44]	; (801e1d4 <__libc_init_array+0x40>)
 801e1a6:	4c0c      	ldr	r4, [pc, #48]	; (801e1d8 <__libc_init_array+0x44>)
 801e1a8:	f002 fda0 	bl	8020cec <_init>
 801e1ac:	1b64      	subs	r4, r4, r5
 801e1ae:	10a4      	asrs	r4, r4, #2
 801e1b0:	2600      	movs	r6, #0
 801e1b2:	42a6      	cmp	r6, r4
 801e1b4:	d105      	bne.n	801e1c2 <__libc_init_array+0x2e>
 801e1b6:	bd70      	pop	{r4, r5, r6, pc}
 801e1b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1bc:	4798      	blx	r3
 801e1be:	3601      	adds	r6, #1
 801e1c0:	e7ee      	b.n	801e1a0 <__libc_init_array+0xc>
 801e1c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1c6:	4798      	blx	r3
 801e1c8:	3601      	adds	r6, #1
 801e1ca:	e7f2      	b.n	801e1b2 <__libc_init_array+0x1e>
 801e1cc:	08023ac0 	.word	0x08023ac0
 801e1d0:	08023ac0 	.word	0x08023ac0
 801e1d4:	08023ac0 	.word	0x08023ac0
 801e1d8:	08023ac4 	.word	0x08023ac4

0801e1dc <__retarget_lock_acquire_recursive>:
 801e1dc:	4770      	bx	lr

0801e1de <__retarget_lock_release_recursive>:
 801e1de:	4770      	bx	lr

0801e1e0 <memcpy>:
 801e1e0:	440a      	add	r2, r1
 801e1e2:	4291      	cmp	r1, r2
 801e1e4:	f100 33ff 	add.w	r3, r0, #4294967295
 801e1e8:	d100      	bne.n	801e1ec <memcpy+0xc>
 801e1ea:	4770      	bx	lr
 801e1ec:	b510      	push	{r4, lr}
 801e1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e1f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e1f6:	4291      	cmp	r1, r2
 801e1f8:	d1f9      	bne.n	801e1ee <memcpy+0xe>
 801e1fa:	bd10      	pop	{r4, pc}

0801e1fc <abort>:
 801e1fc:	b508      	push	{r3, lr}
 801e1fe:	2006      	movs	r0, #6
 801e200:	f001 ff1e 	bl	8020040 <raise>
 801e204:	2001      	movs	r0, #1
 801e206:	f7e7 feaf 	bl	8005f68 <_exit>

0801e20a <quorem>:
 801e20a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e20e:	6903      	ldr	r3, [r0, #16]
 801e210:	690c      	ldr	r4, [r1, #16]
 801e212:	42a3      	cmp	r3, r4
 801e214:	4607      	mov	r7, r0
 801e216:	db7e      	blt.n	801e316 <quorem+0x10c>
 801e218:	3c01      	subs	r4, #1
 801e21a:	f101 0814 	add.w	r8, r1, #20
 801e21e:	f100 0514 	add.w	r5, r0, #20
 801e222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e226:	9301      	str	r3, [sp, #4]
 801e228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e22c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e230:	3301      	adds	r3, #1
 801e232:	429a      	cmp	r2, r3
 801e234:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e23c:	fbb2 f6f3 	udiv	r6, r2, r3
 801e240:	d331      	bcc.n	801e2a6 <quorem+0x9c>
 801e242:	f04f 0e00 	mov.w	lr, #0
 801e246:	4640      	mov	r0, r8
 801e248:	46ac      	mov	ip, r5
 801e24a:	46f2      	mov	sl, lr
 801e24c:	f850 2b04 	ldr.w	r2, [r0], #4
 801e250:	b293      	uxth	r3, r2
 801e252:	fb06 e303 	mla	r3, r6, r3, lr
 801e256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e25a:	0c1a      	lsrs	r2, r3, #16
 801e25c:	b29b      	uxth	r3, r3
 801e25e:	ebaa 0303 	sub.w	r3, sl, r3
 801e262:	f8dc a000 	ldr.w	sl, [ip]
 801e266:	fa13 f38a 	uxtah	r3, r3, sl
 801e26a:	fb06 220e 	mla	r2, r6, lr, r2
 801e26e:	9300      	str	r3, [sp, #0]
 801e270:	9b00      	ldr	r3, [sp, #0]
 801e272:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e276:	b292      	uxth	r2, r2
 801e278:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801e27c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e280:	f8bd 3000 	ldrh.w	r3, [sp]
 801e284:	4581      	cmp	r9, r0
 801e286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e28a:	f84c 3b04 	str.w	r3, [ip], #4
 801e28e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e292:	d2db      	bcs.n	801e24c <quorem+0x42>
 801e294:	f855 300b 	ldr.w	r3, [r5, fp]
 801e298:	b92b      	cbnz	r3, 801e2a6 <quorem+0x9c>
 801e29a:	9b01      	ldr	r3, [sp, #4]
 801e29c:	3b04      	subs	r3, #4
 801e29e:	429d      	cmp	r5, r3
 801e2a0:	461a      	mov	r2, r3
 801e2a2:	d32c      	bcc.n	801e2fe <quorem+0xf4>
 801e2a4:	613c      	str	r4, [r7, #16]
 801e2a6:	4638      	mov	r0, r7
 801e2a8:	f001 f9a8 	bl	801f5fc <__mcmp>
 801e2ac:	2800      	cmp	r0, #0
 801e2ae:	db22      	blt.n	801e2f6 <quorem+0xec>
 801e2b0:	3601      	adds	r6, #1
 801e2b2:	4629      	mov	r1, r5
 801e2b4:	2000      	movs	r0, #0
 801e2b6:	f858 2b04 	ldr.w	r2, [r8], #4
 801e2ba:	f8d1 c000 	ldr.w	ip, [r1]
 801e2be:	b293      	uxth	r3, r2
 801e2c0:	1ac3      	subs	r3, r0, r3
 801e2c2:	0c12      	lsrs	r2, r2, #16
 801e2c4:	fa13 f38c 	uxtah	r3, r3, ip
 801e2c8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801e2cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e2d0:	b29b      	uxth	r3, r3
 801e2d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e2d6:	45c1      	cmp	r9, r8
 801e2d8:	f841 3b04 	str.w	r3, [r1], #4
 801e2dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e2e0:	d2e9      	bcs.n	801e2b6 <quorem+0xac>
 801e2e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e2e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e2ea:	b922      	cbnz	r2, 801e2f6 <quorem+0xec>
 801e2ec:	3b04      	subs	r3, #4
 801e2ee:	429d      	cmp	r5, r3
 801e2f0:	461a      	mov	r2, r3
 801e2f2:	d30a      	bcc.n	801e30a <quorem+0x100>
 801e2f4:	613c      	str	r4, [r7, #16]
 801e2f6:	4630      	mov	r0, r6
 801e2f8:	b003      	add	sp, #12
 801e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2fe:	6812      	ldr	r2, [r2, #0]
 801e300:	3b04      	subs	r3, #4
 801e302:	2a00      	cmp	r2, #0
 801e304:	d1ce      	bne.n	801e2a4 <quorem+0x9a>
 801e306:	3c01      	subs	r4, #1
 801e308:	e7c9      	b.n	801e29e <quorem+0x94>
 801e30a:	6812      	ldr	r2, [r2, #0]
 801e30c:	3b04      	subs	r3, #4
 801e30e:	2a00      	cmp	r2, #0
 801e310:	d1f0      	bne.n	801e2f4 <quorem+0xea>
 801e312:	3c01      	subs	r4, #1
 801e314:	e7eb      	b.n	801e2ee <quorem+0xe4>
 801e316:	2000      	movs	r0, #0
 801e318:	e7ee      	b.n	801e2f8 <quorem+0xee>
 801e31a:	0000      	movs	r0, r0
 801e31c:	0000      	movs	r0, r0
	...

0801e320 <_dtoa_r>:
 801e320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e324:	ed2d 8b04 	vpush	{d8-d9}
 801e328:	69c5      	ldr	r5, [r0, #28]
 801e32a:	b093      	sub	sp, #76	; 0x4c
 801e32c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e330:	ec57 6b10 	vmov	r6, r7, d0
 801e334:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801e338:	9107      	str	r1, [sp, #28]
 801e33a:	4604      	mov	r4, r0
 801e33c:	920a      	str	r2, [sp, #40]	; 0x28
 801e33e:	930d      	str	r3, [sp, #52]	; 0x34
 801e340:	b975      	cbnz	r5, 801e360 <_dtoa_r+0x40>
 801e342:	2010      	movs	r0, #16
 801e344:	f000 fe2a 	bl	801ef9c <malloc>
 801e348:	4602      	mov	r2, r0
 801e34a:	61e0      	str	r0, [r4, #28]
 801e34c:	b920      	cbnz	r0, 801e358 <_dtoa_r+0x38>
 801e34e:	4bae      	ldr	r3, [pc, #696]	; (801e608 <_dtoa_r+0x2e8>)
 801e350:	21ef      	movs	r1, #239	; 0xef
 801e352:	48ae      	ldr	r0, [pc, #696]	; (801e60c <_dtoa_r+0x2ec>)
 801e354:	f7ff f91c 	bl	801d590 <__assert_func>
 801e358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e35c:	6005      	str	r5, [r0, #0]
 801e35e:	60c5      	str	r5, [r0, #12]
 801e360:	69e3      	ldr	r3, [r4, #28]
 801e362:	6819      	ldr	r1, [r3, #0]
 801e364:	b151      	cbz	r1, 801e37c <_dtoa_r+0x5c>
 801e366:	685a      	ldr	r2, [r3, #4]
 801e368:	604a      	str	r2, [r1, #4]
 801e36a:	2301      	movs	r3, #1
 801e36c:	4093      	lsls	r3, r2
 801e36e:	608b      	str	r3, [r1, #8]
 801e370:	4620      	mov	r0, r4
 801e372:	f000 ff07 	bl	801f184 <_Bfree>
 801e376:	69e3      	ldr	r3, [r4, #28]
 801e378:	2200      	movs	r2, #0
 801e37a:	601a      	str	r2, [r3, #0]
 801e37c:	1e3b      	subs	r3, r7, #0
 801e37e:	bfbb      	ittet	lt
 801e380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e384:	9303      	strlt	r3, [sp, #12]
 801e386:	2300      	movge	r3, #0
 801e388:	2201      	movlt	r2, #1
 801e38a:	bfac      	ite	ge
 801e38c:	f8c8 3000 	strge.w	r3, [r8]
 801e390:	f8c8 2000 	strlt.w	r2, [r8]
 801e394:	4b9e      	ldr	r3, [pc, #632]	; (801e610 <_dtoa_r+0x2f0>)
 801e396:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801e39a:	ea33 0308 	bics.w	r3, r3, r8
 801e39e:	d11b      	bne.n	801e3d8 <_dtoa_r+0xb8>
 801e3a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e3a2:	f242 730f 	movw	r3, #9999	; 0x270f
 801e3a6:	6013      	str	r3, [r2, #0]
 801e3a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801e3ac:	4333      	orrs	r3, r6
 801e3ae:	f000 8593 	beq.w	801eed8 <_dtoa_r+0xbb8>
 801e3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e3b4:	b963      	cbnz	r3, 801e3d0 <_dtoa_r+0xb0>
 801e3b6:	4b97      	ldr	r3, [pc, #604]	; (801e614 <_dtoa_r+0x2f4>)
 801e3b8:	e027      	b.n	801e40a <_dtoa_r+0xea>
 801e3ba:	4b97      	ldr	r3, [pc, #604]	; (801e618 <_dtoa_r+0x2f8>)
 801e3bc:	9300      	str	r3, [sp, #0]
 801e3be:	3308      	adds	r3, #8
 801e3c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e3c2:	6013      	str	r3, [r2, #0]
 801e3c4:	9800      	ldr	r0, [sp, #0]
 801e3c6:	b013      	add	sp, #76	; 0x4c
 801e3c8:	ecbd 8b04 	vpop	{d8-d9}
 801e3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3d0:	4b90      	ldr	r3, [pc, #576]	; (801e614 <_dtoa_r+0x2f4>)
 801e3d2:	9300      	str	r3, [sp, #0]
 801e3d4:	3303      	adds	r3, #3
 801e3d6:	e7f3      	b.n	801e3c0 <_dtoa_r+0xa0>
 801e3d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e3dc:	2200      	movs	r2, #0
 801e3de:	ec51 0b17 	vmov	r0, r1, d7
 801e3e2:	eeb0 8a47 	vmov.f32	s16, s14
 801e3e6:	eef0 8a67 	vmov.f32	s17, s15
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	f7e2 fb94 	bl	8000b18 <__aeabi_dcmpeq>
 801e3f0:	4681      	mov	r9, r0
 801e3f2:	b160      	cbz	r0, 801e40e <_dtoa_r+0xee>
 801e3f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e3f6:	2301      	movs	r3, #1
 801e3f8:	6013      	str	r3, [r2, #0]
 801e3fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	f000 8568 	beq.w	801eed2 <_dtoa_r+0xbb2>
 801e402:	4b86      	ldr	r3, [pc, #536]	; (801e61c <_dtoa_r+0x2fc>)
 801e404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e406:	6013      	str	r3, [r2, #0]
 801e408:	3b01      	subs	r3, #1
 801e40a:	9300      	str	r3, [sp, #0]
 801e40c:	e7da      	b.n	801e3c4 <_dtoa_r+0xa4>
 801e40e:	aa10      	add	r2, sp, #64	; 0x40
 801e410:	a911      	add	r1, sp, #68	; 0x44
 801e412:	4620      	mov	r0, r4
 801e414:	eeb0 0a48 	vmov.f32	s0, s16
 801e418:	eef0 0a68 	vmov.f32	s1, s17
 801e41c:	f001 f994 	bl	801f748 <__d2b>
 801e420:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801e424:	4682      	mov	sl, r0
 801e426:	2d00      	cmp	r5, #0
 801e428:	d07f      	beq.n	801e52a <_dtoa_r+0x20a>
 801e42a:	ee18 3a90 	vmov	r3, s17
 801e42e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e432:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801e436:	ec51 0b18 	vmov	r0, r1, d8
 801e43a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e43e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e442:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801e446:	4619      	mov	r1, r3
 801e448:	2200      	movs	r2, #0
 801e44a:	4b75      	ldr	r3, [pc, #468]	; (801e620 <_dtoa_r+0x300>)
 801e44c:	f7e1 ff44 	bl	80002d8 <__aeabi_dsub>
 801e450:	a367      	add	r3, pc, #412	; (adr r3, 801e5f0 <_dtoa_r+0x2d0>)
 801e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e456:	f7e2 f8f7 	bl	8000648 <__aeabi_dmul>
 801e45a:	a367      	add	r3, pc, #412	; (adr r3, 801e5f8 <_dtoa_r+0x2d8>)
 801e45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e460:	f7e1 ff3c 	bl	80002dc <__adddf3>
 801e464:	4606      	mov	r6, r0
 801e466:	4628      	mov	r0, r5
 801e468:	460f      	mov	r7, r1
 801e46a:	f7e2 f883 	bl	8000574 <__aeabi_i2d>
 801e46e:	a364      	add	r3, pc, #400	; (adr r3, 801e600 <_dtoa_r+0x2e0>)
 801e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e474:	f7e2 f8e8 	bl	8000648 <__aeabi_dmul>
 801e478:	4602      	mov	r2, r0
 801e47a:	460b      	mov	r3, r1
 801e47c:	4630      	mov	r0, r6
 801e47e:	4639      	mov	r1, r7
 801e480:	f7e1 ff2c 	bl	80002dc <__adddf3>
 801e484:	4606      	mov	r6, r0
 801e486:	460f      	mov	r7, r1
 801e488:	f7e2 fb8e 	bl	8000ba8 <__aeabi_d2iz>
 801e48c:	2200      	movs	r2, #0
 801e48e:	4683      	mov	fp, r0
 801e490:	2300      	movs	r3, #0
 801e492:	4630      	mov	r0, r6
 801e494:	4639      	mov	r1, r7
 801e496:	f7e2 fb49 	bl	8000b2c <__aeabi_dcmplt>
 801e49a:	b148      	cbz	r0, 801e4b0 <_dtoa_r+0x190>
 801e49c:	4658      	mov	r0, fp
 801e49e:	f7e2 f869 	bl	8000574 <__aeabi_i2d>
 801e4a2:	4632      	mov	r2, r6
 801e4a4:	463b      	mov	r3, r7
 801e4a6:	f7e2 fb37 	bl	8000b18 <__aeabi_dcmpeq>
 801e4aa:	b908      	cbnz	r0, 801e4b0 <_dtoa_r+0x190>
 801e4ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e4b0:	f1bb 0f16 	cmp.w	fp, #22
 801e4b4:	d857      	bhi.n	801e566 <_dtoa_r+0x246>
 801e4b6:	4b5b      	ldr	r3, [pc, #364]	; (801e624 <_dtoa_r+0x304>)
 801e4b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4c0:	ec51 0b18 	vmov	r0, r1, d8
 801e4c4:	f7e2 fb32 	bl	8000b2c <__aeabi_dcmplt>
 801e4c8:	2800      	cmp	r0, #0
 801e4ca:	d04e      	beq.n	801e56a <_dtoa_r+0x24a>
 801e4cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	930c      	str	r3, [sp, #48]	; 0x30
 801e4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4d6:	1b5b      	subs	r3, r3, r5
 801e4d8:	1e5a      	subs	r2, r3, #1
 801e4da:	bf45      	ittet	mi
 801e4dc:	f1c3 0301 	rsbmi	r3, r3, #1
 801e4e0:	9305      	strmi	r3, [sp, #20]
 801e4e2:	2300      	movpl	r3, #0
 801e4e4:	2300      	movmi	r3, #0
 801e4e6:	9206      	str	r2, [sp, #24]
 801e4e8:	bf54      	ite	pl
 801e4ea:	9305      	strpl	r3, [sp, #20]
 801e4ec:	9306      	strmi	r3, [sp, #24]
 801e4ee:	f1bb 0f00 	cmp.w	fp, #0
 801e4f2:	db3c      	blt.n	801e56e <_dtoa_r+0x24e>
 801e4f4:	9b06      	ldr	r3, [sp, #24]
 801e4f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801e4fa:	445b      	add	r3, fp
 801e4fc:	9306      	str	r3, [sp, #24]
 801e4fe:	2300      	movs	r3, #0
 801e500:	9308      	str	r3, [sp, #32]
 801e502:	9b07      	ldr	r3, [sp, #28]
 801e504:	2b09      	cmp	r3, #9
 801e506:	d868      	bhi.n	801e5da <_dtoa_r+0x2ba>
 801e508:	2b05      	cmp	r3, #5
 801e50a:	bfc4      	itt	gt
 801e50c:	3b04      	subgt	r3, #4
 801e50e:	9307      	strgt	r3, [sp, #28]
 801e510:	9b07      	ldr	r3, [sp, #28]
 801e512:	f1a3 0302 	sub.w	r3, r3, #2
 801e516:	bfcc      	ite	gt
 801e518:	2500      	movgt	r5, #0
 801e51a:	2501      	movle	r5, #1
 801e51c:	2b03      	cmp	r3, #3
 801e51e:	f200 8085 	bhi.w	801e62c <_dtoa_r+0x30c>
 801e522:	e8df f003 	tbb	[pc, r3]
 801e526:	3b2e      	.short	0x3b2e
 801e528:	5839      	.short	0x5839
 801e52a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801e52e:	441d      	add	r5, r3
 801e530:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e534:	2b20      	cmp	r3, #32
 801e536:	bfc1      	itttt	gt
 801e538:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e53c:	fa08 f803 	lslgt.w	r8, r8, r3
 801e540:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801e544:	fa26 f303 	lsrgt.w	r3, r6, r3
 801e548:	bfd6      	itet	le
 801e54a:	f1c3 0320 	rsble	r3, r3, #32
 801e54e:	ea48 0003 	orrgt.w	r0, r8, r3
 801e552:	fa06 f003 	lslle.w	r0, r6, r3
 801e556:	f7e1 fffd 	bl	8000554 <__aeabi_ui2d>
 801e55a:	2201      	movs	r2, #1
 801e55c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801e560:	3d01      	subs	r5, #1
 801e562:	920e      	str	r2, [sp, #56]	; 0x38
 801e564:	e76f      	b.n	801e446 <_dtoa_r+0x126>
 801e566:	2301      	movs	r3, #1
 801e568:	e7b3      	b.n	801e4d2 <_dtoa_r+0x1b2>
 801e56a:	900c      	str	r0, [sp, #48]	; 0x30
 801e56c:	e7b2      	b.n	801e4d4 <_dtoa_r+0x1b4>
 801e56e:	9b05      	ldr	r3, [sp, #20]
 801e570:	eba3 030b 	sub.w	r3, r3, fp
 801e574:	9305      	str	r3, [sp, #20]
 801e576:	f1cb 0300 	rsb	r3, fp, #0
 801e57a:	9308      	str	r3, [sp, #32]
 801e57c:	2300      	movs	r3, #0
 801e57e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e580:	e7bf      	b.n	801e502 <_dtoa_r+0x1e2>
 801e582:	2300      	movs	r3, #0
 801e584:	9309      	str	r3, [sp, #36]	; 0x24
 801e586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e588:	2b00      	cmp	r3, #0
 801e58a:	dc52      	bgt.n	801e632 <_dtoa_r+0x312>
 801e58c:	2301      	movs	r3, #1
 801e58e:	9301      	str	r3, [sp, #4]
 801e590:	9304      	str	r3, [sp, #16]
 801e592:	461a      	mov	r2, r3
 801e594:	920a      	str	r2, [sp, #40]	; 0x28
 801e596:	e00b      	b.n	801e5b0 <_dtoa_r+0x290>
 801e598:	2301      	movs	r3, #1
 801e59a:	e7f3      	b.n	801e584 <_dtoa_r+0x264>
 801e59c:	2300      	movs	r3, #0
 801e59e:	9309      	str	r3, [sp, #36]	; 0x24
 801e5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5a2:	445b      	add	r3, fp
 801e5a4:	9301      	str	r3, [sp, #4]
 801e5a6:	3301      	adds	r3, #1
 801e5a8:	2b01      	cmp	r3, #1
 801e5aa:	9304      	str	r3, [sp, #16]
 801e5ac:	bfb8      	it	lt
 801e5ae:	2301      	movlt	r3, #1
 801e5b0:	69e0      	ldr	r0, [r4, #28]
 801e5b2:	2100      	movs	r1, #0
 801e5b4:	2204      	movs	r2, #4
 801e5b6:	f102 0614 	add.w	r6, r2, #20
 801e5ba:	429e      	cmp	r6, r3
 801e5bc:	d93d      	bls.n	801e63a <_dtoa_r+0x31a>
 801e5be:	6041      	str	r1, [r0, #4]
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	f000 fd9f 	bl	801f104 <_Balloc>
 801e5c6:	9000      	str	r0, [sp, #0]
 801e5c8:	2800      	cmp	r0, #0
 801e5ca:	d139      	bne.n	801e640 <_dtoa_r+0x320>
 801e5cc:	4b16      	ldr	r3, [pc, #88]	; (801e628 <_dtoa_r+0x308>)
 801e5ce:	4602      	mov	r2, r0
 801e5d0:	f240 11af 	movw	r1, #431	; 0x1af
 801e5d4:	e6bd      	b.n	801e352 <_dtoa_r+0x32>
 801e5d6:	2301      	movs	r3, #1
 801e5d8:	e7e1      	b.n	801e59e <_dtoa_r+0x27e>
 801e5da:	2501      	movs	r5, #1
 801e5dc:	2300      	movs	r3, #0
 801e5de:	9307      	str	r3, [sp, #28]
 801e5e0:	9509      	str	r5, [sp, #36]	; 0x24
 801e5e2:	f04f 33ff 	mov.w	r3, #4294967295
 801e5e6:	9301      	str	r3, [sp, #4]
 801e5e8:	9304      	str	r3, [sp, #16]
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	2312      	movs	r3, #18
 801e5ee:	e7d1      	b.n	801e594 <_dtoa_r+0x274>
 801e5f0:	636f4361 	.word	0x636f4361
 801e5f4:	3fd287a7 	.word	0x3fd287a7
 801e5f8:	8b60c8b3 	.word	0x8b60c8b3
 801e5fc:	3fc68a28 	.word	0x3fc68a28
 801e600:	509f79fb 	.word	0x509f79fb
 801e604:	3fd34413 	.word	0x3fd34413
 801e608:	080233fc 	.word	0x080233fc
 801e60c:	08023413 	.word	0x08023413
 801e610:	7ff00000 	.word	0x7ff00000
 801e614:	080233f8 	.word	0x080233f8
 801e618:	080233ef 	.word	0x080233ef
 801e61c:	080233cc 	.word	0x080233cc
 801e620:	3ff80000 	.word	0x3ff80000
 801e624:	08023500 	.word	0x08023500
 801e628:	0802346b 	.word	0x0802346b
 801e62c:	2301      	movs	r3, #1
 801e62e:	9309      	str	r3, [sp, #36]	; 0x24
 801e630:	e7d7      	b.n	801e5e2 <_dtoa_r+0x2c2>
 801e632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e634:	9301      	str	r3, [sp, #4]
 801e636:	9304      	str	r3, [sp, #16]
 801e638:	e7ba      	b.n	801e5b0 <_dtoa_r+0x290>
 801e63a:	3101      	adds	r1, #1
 801e63c:	0052      	lsls	r2, r2, #1
 801e63e:	e7ba      	b.n	801e5b6 <_dtoa_r+0x296>
 801e640:	69e3      	ldr	r3, [r4, #28]
 801e642:	9a00      	ldr	r2, [sp, #0]
 801e644:	601a      	str	r2, [r3, #0]
 801e646:	9b04      	ldr	r3, [sp, #16]
 801e648:	2b0e      	cmp	r3, #14
 801e64a:	f200 80a8 	bhi.w	801e79e <_dtoa_r+0x47e>
 801e64e:	2d00      	cmp	r5, #0
 801e650:	f000 80a5 	beq.w	801e79e <_dtoa_r+0x47e>
 801e654:	f1bb 0f00 	cmp.w	fp, #0
 801e658:	dd38      	ble.n	801e6cc <_dtoa_r+0x3ac>
 801e65a:	4bc0      	ldr	r3, [pc, #768]	; (801e95c <_dtoa_r+0x63c>)
 801e65c:	f00b 020f 	and.w	r2, fp, #15
 801e660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e664:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801e668:	e9d3 6700 	ldrd	r6, r7, [r3]
 801e66c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801e670:	d019      	beq.n	801e6a6 <_dtoa_r+0x386>
 801e672:	4bbb      	ldr	r3, [pc, #748]	; (801e960 <_dtoa_r+0x640>)
 801e674:	ec51 0b18 	vmov	r0, r1, d8
 801e678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e67c:	f7e2 f90e 	bl	800089c <__aeabi_ddiv>
 801e680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e684:	f008 080f 	and.w	r8, r8, #15
 801e688:	2503      	movs	r5, #3
 801e68a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801e960 <_dtoa_r+0x640>
 801e68e:	f1b8 0f00 	cmp.w	r8, #0
 801e692:	d10a      	bne.n	801e6aa <_dtoa_r+0x38a>
 801e694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e698:	4632      	mov	r2, r6
 801e69a:	463b      	mov	r3, r7
 801e69c:	f7e2 f8fe 	bl	800089c <__aeabi_ddiv>
 801e6a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e6a4:	e02b      	b.n	801e6fe <_dtoa_r+0x3de>
 801e6a6:	2502      	movs	r5, #2
 801e6a8:	e7ef      	b.n	801e68a <_dtoa_r+0x36a>
 801e6aa:	f018 0f01 	tst.w	r8, #1
 801e6ae:	d008      	beq.n	801e6c2 <_dtoa_r+0x3a2>
 801e6b0:	4630      	mov	r0, r6
 801e6b2:	4639      	mov	r1, r7
 801e6b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e6b8:	f7e1 ffc6 	bl	8000648 <__aeabi_dmul>
 801e6bc:	3501      	adds	r5, #1
 801e6be:	4606      	mov	r6, r0
 801e6c0:	460f      	mov	r7, r1
 801e6c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e6c6:	f109 0908 	add.w	r9, r9, #8
 801e6ca:	e7e0      	b.n	801e68e <_dtoa_r+0x36e>
 801e6cc:	f000 809f 	beq.w	801e80e <_dtoa_r+0x4ee>
 801e6d0:	f1cb 0600 	rsb	r6, fp, #0
 801e6d4:	4ba1      	ldr	r3, [pc, #644]	; (801e95c <_dtoa_r+0x63c>)
 801e6d6:	4fa2      	ldr	r7, [pc, #648]	; (801e960 <_dtoa_r+0x640>)
 801e6d8:	f006 020f 	and.w	r2, r6, #15
 801e6dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e4:	ec51 0b18 	vmov	r0, r1, d8
 801e6e8:	f7e1 ffae 	bl	8000648 <__aeabi_dmul>
 801e6ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e6f0:	1136      	asrs	r6, r6, #4
 801e6f2:	2300      	movs	r3, #0
 801e6f4:	2502      	movs	r5, #2
 801e6f6:	2e00      	cmp	r6, #0
 801e6f8:	d17e      	bne.n	801e7f8 <_dtoa_r+0x4d8>
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d1d0      	bne.n	801e6a0 <_dtoa_r+0x380>
 801e6fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e700:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e704:	2b00      	cmp	r3, #0
 801e706:	f000 8084 	beq.w	801e812 <_dtoa_r+0x4f2>
 801e70a:	4b96      	ldr	r3, [pc, #600]	; (801e964 <_dtoa_r+0x644>)
 801e70c:	2200      	movs	r2, #0
 801e70e:	4640      	mov	r0, r8
 801e710:	4649      	mov	r1, r9
 801e712:	f7e2 fa0b 	bl	8000b2c <__aeabi_dcmplt>
 801e716:	2800      	cmp	r0, #0
 801e718:	d07b      	beq.n	801e812 <_dtoa_r+0x4f2>
 801e71a:	9b04      	ldr	r3, [sp, #16]
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	d078      	beq.n	801e812 <_dtoa_r+0x4f2>
 801e720:	9b01      	ldr	r3, [sp, #4]
 801e722:	2b00      	cmp	r3, #0
 801e724:	dd39      	ble.n	801e79a <_dtoa_r+0x47a>
 801e726:	4b90      	ldr	r3, [pc, #576]	; (801e968 <_dtoa_r+0x648>)
 801e728:	2200      	movs	r2, #0
 801e72a:	4640      	mov	r0, r8
 801e72c:	4649      	mov	r1, r9
 801e72e:	f7e1 ff8b 	bl	8000648 <__aeabi_dmul>
 801e732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e736:	9e01      	ldr	r6, [sp, #4]
 801e738:	f10b 37ff 	add.w	r7, fp, #4294967295
 801e73c:	3501      	adds	r5, #1
 801e73e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e742:	4628      	mov	r0, r5
 801e744:	f7e1 ff16 	bl	8000574 <__aeabi_i2d>
 801e748:	4642      	mov	r2, r8
 801e74a:	464b      	mov	r3, r9
 801e74c:	f7e1 ff7c 	bl	8000648 <__aeabi_dmul>
 801e750:	4b86      	ldr	r3, [pc, #536]	; (801e96c <_dtoa_r+0x64c>)
 801e752:	2200      	movs	r2, #0
 801e754:	f7e1 fdc2 	bl	80002dc <__adddf3>
 801e758:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801e75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e760:	9303      	str	r3, [sp, #12]
 801e762:	2e00      	cmp	r6, #0
 801e764:	d158      	bne.n	801e818 <_dtoa_r+0x4f8>
 801e766:	4b82      	ldr	r3, [pc, #520]	; (801e970 <_dtoa_r+0x650>)
 801e768:	2200      	movs	r2, #0
 801e76a:	4640      	mov	r0, r8
 801e76c:	4649      	mov	r1, r9
 801e76e:	f7e1 fdb3 	bl	80002d8 <__aeabi_dsub>
 801e772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e776:	4680      	mov	r8, r0
 801e778:	4689      	mov	r9, r1
 801e77a:	f7e2 f9f5 	bl	8000b68 <__aeabi_dcmpgt>
 801e77e:	2800      	cmp	r0, #0
 801e780:	f040 8296 	bne.w	801ecb0 <_dtoa_r+0x990>
 801e784:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e788:	4640      	mov	r0, r8
 801e78a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e78e:	4649      	mov	r1, r9
 801e790:	f7e2 f9cc 	bl	8000b2c <__aeabi_dcmplt>
 801e794:	2800      	cmp	r0, #0
 801e796:	f040 8289 	bne.w	801ecac <_dtoa_r+0x98c>
 801e79a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e79e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	f2c0 814e 	blt.w	801ea42 <_dtoa_r+0x722>
 801e7a6:	f1bb 0f0e 	cmp.w	fp, #14
 801e7aa:	f300 814a 	bgt.w	801ea42 <_dtoa_r+0x722>
 801e7ae:	4b6b      	ldr	r3, [pc, #428]	; (801e95c <_dtoa_r+0x63c>)
 801e7b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e7b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	f280 80dc 	bge.w	801e978 <_dtoa_r+0x658>
 801e7c0:	9b04      	ldr	r3, [sp, #16]
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	f300 80d8 	bgt.w	801e978 <_dtoa_r+0x658>
 801e7c8:	f040 826f 	bne.w	801ecaa <_dtoa_r+0x98a>
 801e7cc:	4b68      	ldr	r3, [pc, #416]	; (801e970 <_dtoa_r+0x650>)
 801e7ce:	2200      	movs	r2, #0
 801e7d0:	4640      	mov	r0, r8
 801e7d2:	4649      	mov	r1, r9
 801e7d4:	f7e1 ff38 	bl	8000648 <__aeabi_dmul>
 801e7d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e7dc:	f7e2 f9ba 	bl	8000b54 <__aeabi_dcmpge>
 801e7e0:	9e04      	ldr	r6, [sp, #16]
 801e7e2:	4637      	mov	r7, r6
 801e7e4:	2800      	cmp	r0, #0
 801e7e6:	f040 8245 	bne.w	801ec74 <_dtoa_r+0x954>
 801e7ea:	9d00      	ldr	r5, [sp, #0]
 801e7ec:	2331      	movs	r3, #49	; 0x31
 801e7ee:	f805 3b01 	strb.w	r3, [r5], #1
 801e7f2:	f10b 0b01 	add.w	fp, fp, #1
 801e7f6:	e241      	b.n	801ec7c <_dtoa_r+0x95c>
 801e7f8:	07f2      	lsls	r2, r6, #31
 801e7fa:	d505      	bpl.n	801e808 <_dtoa_r+0x4e8>
 801e7fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e800:	f7e1 ff22 	bl	8000648 <__aeabi_dmul>
 801e804:	3501      	adds	r5, #1
 801e806:	2301      	movs	r3, #1
 801e808:	1076      	asrs	r6, r6, #1
 801e80a:	3708      	adds	r7, #8
 801e80c:	e773      	b.n	801e6f6 <_dtoa_r+0x3d6>
 801e80e:	2502      	movs	r5, #2
 801e810:	e775      	b.n	801e6fe <_dtoa_r+0x3de>
 801e812:	9e04      	ldr	r6, [sp, #16]
 801e814:	465f      	mov	r7, fp
 801e816:	e792      	b.n	801e73e <_dtoa_r+0x41e>
 801e818:	9900      	ldr	r1, [sp, #0]
 801e81a:	4b50      	ldr	r3, [pc, #320]	; (801e95c <_dtoa_r+0x63c>)
 801e81c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e820:	4431      	add	r1, r6
 801e822:	9102      	str	r1, [sp, #8]
 801e824:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e826:	eeb0 9a47 	vmov.f32	s18, s14
 801e82a:	eef0 9a67 	vmov.f32	s19, s15
 801e82e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e836:	2900      	cmp	r1, #0
 801e838:	d044      	beq.n	801e8c4 <_dtoa_r+0x5a4>
 801e83a:	494e      	ldr	r1, [pc, #312]	; (801e974 <_dtoa_r+0x654>)
 801e83c:	2000      	movs	r0, #0
 801e83e:	f7e2 f82d 	bl	800089c <__aeabi_ddiv>
 801e842:	ec53 2b19 	vmov	r2, r3, d9
 801e846:	f7e1 fd47 	bl	80002d8 <__aeabi_dsub>
 801e84a:	9d00      	ldr	r5, [sp, #0]
 801e84c:	ec41 0b19 	vmov	d9, r0, r1
 801e850:	4649      	mov	r1, r9
 801e852:	4640      	mov	r0, r8
 801e854:	f7e2 f9a8 	bl	8000ba8 <__aeabi_d2iz>
 801e858:	4606      	mov	r6, r0
 801e85a:	f7e1 fe8b 	bl	8000574 <__aeabi_i2d>
 801e85e:	4602      	mov	r2, r0
 801e860:	460b      	mov	r3, r1
 801e862:	4640      	mov	r0, r8
 801e864:	4649      	mov	r1, r9
 801e866:	f7e1 fd37 	bl	80002d8 <__aeabi_dsub>
 801e86a:	3630      	adds	r6, #48	; 0x30
 801e86c:	f805 6b01 	strb.w	r6, [r5], #1
 801e870:	ec53 2b19 	vmov	r2, r3, d9
 801e874:	4680      	mov	r8, r0
 801e876:	4689      	mov	r9, r1
 801e878:	f7e2 f958 	bl	8000b2c <__aeabi_dcmplt>
 801e87c:	2800      	cmp	r0, #0
 801e87e:	d164      	bne.n	801e94a <_dtoa_r+0x62a>
 801e880:	4642      	mov	r2, r8
 801e882:	464b      	mov	r3, r9
 801e884:	4937      	ldr	r1, [pc, #220]	; (801e964 <_dtoa_r+0x644>)
 801e886:	2000      	movs	r0, #0
 801e888:	f7e1 fd26 	bl	80002d8 <__aeabi_dsub>
 801e88c:	ec53 2b19 	vmov	r2, r3, d9
 801e890:	f7e2 f94c 	bl	8000b2c <__aeabi_dcmplt>
 801e894:	2800      	cmp	r0, #0
 801e896:	f040 80b6 	bne.w	801ea06 <_dtoa_r+0x6e6>
 801e89a:	9b02      	ldr	r3, [sp, #8]
 801e89c:	429d      	cmp	r5, r3
 801e89e:	f43f af7c 	beq.w	801e79a <_dtoa_r+0x47a>
 801e8a2:	4b31      	ldr	r3, [pc, #196]	; (801e968 <_dtoa_r+0x648>)
 801e8a4:	ec51 0b19 	vmov	r0, r1, d9
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	f7e1 fecd 	bl	8000648 <__aeabi_dmul>
 801e8ae:	4b2e      	ldr	r3, [pc, #184]	; (801e968 <_dtoa_r+0x648>)
 801e8b0:	ec41 0b19 	vmov	d9, r0, r1
 801e8b4:	2200      	movs	r2, #0
 801e8b6:	4640      	mov	r0, r8
 801e8b8:	4649      	mov	r1, r9
 801e8ba:	f7e1 fec5 	bl	8000648 <__aeabi_dmul>
 801e8be:	4680      	mov	r8, r0
 801e8c0:	4689      	mov	r9, r1
 801e8c2:	e7c5      	b.n	801e850 <_dtoa_r+0x530>
 801e8c4:	ec51 0b17 	vmov	r0, r1, d7
 801e8c8:	f7e1 febe 	bl	8000648 <__aeabi_dmul>
 801e8cc:	9b02      	ldr	r3, [sp, #8]
 801e8ce:	9d00      	ldr	r5, [sp, #0]
 801e8d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8d2:	ec41 0b19 	vmov	d9, r0, r1
 801e8d6:	4649      	mov	r1, r9
 801e8d8:	4640      	mov	r0, r8
 801e8da:	f7e2 f965 	bl	8000ba8 <__aeabi_d2iz>
 801e8de:	4606      	mov	r6, r0
 801e8e0:	f7e1 fe48 	bl	8000574 <__aeabi_i2d>
 801e8e4:	3630      	adds	r6, #48	; 0x30
 801e8e6:	4602      	mov	r2, r0
 801e8e8:	460b      	mov	r3, r1
 801e8ea:	4640      	mov	r0, r8
 801e8ec:	4649      	mov	r1, r9
 801e8ee:	f7e1 fcf3 	bl	80002d8 <__aeabi_dsub>
 801e8f2:	f805 6b01 	strb.w	r6, [r5], #1
 801e8f6:	9b02      	ldr	r3, [sp, #8]
 801e8f8:	429d      	cmp	r5, r3
 801e8fa:	4680      	mov	r8, r0
 801e8fc:	4689      	mov	r9, r1
 801e8fe:	f04f 0200 	mov.w	r2, #0
 801e902:	d124      	bne.n	801e94e <_dtoa_r+0x62e>
 801e904:	4b1b      	ldr	r3, [pc, #108]	; (801e974 <_dtoa_r+0x654>)
 801e906:	ec51 0b19 	vmov	r0, r1, d9
 801e90a:	f7e1 fce7 	bl	80002dc <__adddf3>
 801e90e:	4602      	mov	r2, r0
 801e910:	460b      	mov	r3, r1
 801e912:	4640      	mov	r0, r8
 801e914:	4649      	mov	r1, r9
 801e916:	f7e2 f927 	bl	8000b68 <__aeabi_dcmpgt>
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d173      	bne.n	801ea06 <_dtoa_r+0x6e6>
 801e91e:	ec53 2b19 	vmov	r2, r3, d9
 801e922:	4914      	ldr	r1, [pc, #80]	; (801e974 <_dtoa_r+0x654>)
 801e924:	2000      	movs	r0, #0
 801e926:	f7e1 fcd7 	bl	80002d8 <__aeabi_dsub>
 801e92a:	4602      	mov	r2, r0
 801e92c:	460b      	mov	r3, r1
 801e92e:	4640      	mov	r0, r8
 801e930:	4649      	mov	r1, r9
 801e932:	f7e2 f8fb 	bl	8000b2c <__aeabi_dcmplt>
 801e936:	2800      	cmp	r0, #0
 801e938:	f43f af2f 	beq.w	801e79a <_dtoa_r+0x47a>
 801e93c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e93e:	1e6b      	subs	r3, r5, #1
 801e940:	930f      	str	r3, [sp, #60]	; 0x3c
 801e942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e946:	2b30      	cmp	r3, #48	; 0x30
 801e948:	d0f8      	beq.n	801e93c <_dtoa_r+0x61c>
 801e94a:	46bb      	mov	fp, r7
 801e94c:	e04a      	b.n	801e9e4 <_dtoa_r+0x6c4>
 801e94e:	4b06      	ldr	r3, [pc, #24]	; (801e968 <_dtoa_r+0x648>)
 801e950:	f7e1 fe7a 	bl	8000648 <__aeabi_dmul>
 801e954:	4680      	mov	r8, r0
 801e956:	4689      	mov	r9, r1
 801e958:	e7bd      	b.n	801e8d6 <_dtoa_r+0x5b6>
 801e95a:	bf00      	nop
 801e95c:	08023500 	.word	0x08023500
 801e960:	080234d8 	.word	0x080234d8
 801e964:	3ff00000 	.word	0x3ff00000
 801e968:	40240000 	.word	0x40240000
 801e96c:	401c0000 	.word	0x401c0000
 801e970:	40140000 	.word	0x40140000
 801e974:	3fe00000 	.word	0x3fe00000
 801e978:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e97c:	9d00      	ldr	r5, [sp, #0]
 801e97e:	4642      	mov	r2, r8
 801e980:	464b      	mov	r3, r9
 801e982:	4630      	mov	r0, r6
 801e984:	4639      	mov	r1, r7
 801e986:	f7e1 ff89 	bl	800089c <__aeabi_ddiv>
 801e98a:	f7e2 f90d 	bl	8000ba8 <__aeabi_d2iz>
 801e98e:	9001      	str	r0, [sp, #4]
 801e990:	f7e1 fdf0 	bl	8000574 <__aeabi_i2d>
 801e994:	4642      	mov	r2, r8
 801e996:	464b      	mov	r3, r9
 801e998:	f7e1 fe56 	bl	8000648 <__aeabi_dmul>
 801e99c:	4602      	mov	r2, r0
 801e99e:	460b      	mov	r3, r1
 801e9a0:	4630      	mov	r0, r6
 801e9a2:	4639      	mov	r1, r7
 801e9a4:	f7e1 fc98 	bl	80002d8 <__aeabi_dsub>
 801e9a8:	9e01      	ldr	r6, [sp, #4]
 801e9aa:	9f04      	ldr	r7, [sp, #16]
 801e9ac:	3630      	adds	r6, #48	; 0x30
 801e9ae:	f805 6b01 	strb.w	r6, [r5], #1
 801e9b2:	9e00      	ldr	r6, [sp, #0]
 801e9b4:	1bae      	subs	r6, r5, r6
 801e9b6:	42b7      	cmp	r7, r6
 801e9b8:	4602      	mov	r2, r0
 801e9ba:	460b      	mov	r3, r1
 801e9bc:	d134      	bne.n	801ea28 <_dtoa_r+0x708>
 801e9be:	f7e1 fc8d 	bl	80002dc <__adddf3>
 801e9c2:	4642      	mov	r2, r8
 801e9c4:	464b      	mov	r3, r9
 801e9c6:	4606      	mov	r6, r0
 801e9c8:	460f      	mov	r7, r1
 801e9ca:	f7e2 f8cd 	bl	8000b68 <__aeabi_dcmpgt>
 801e9ce:	b9c8      	cbnz	r0, 801ea04 <_dtoa_r+0x6e4>
 801e9d0:	4642      	mov	r2, r8
 801e9d2:	464b      	mov	r3, r9
 801e9d4:	4630      	mov	r0, r6
 801e9d6:	4639      	mov	r1, r7
 801e9d8:	f7e2 f89e 	bl	8000b18 <__aeabi_dcmpeq>
 801e9dc:	b110      	cbz	r0, 801e9e4 <_dtoa_r+0x6c4>
 801e9de:	9b01      	ldr	r3, [sp, #4]
 801e9e0:	07db      	lsls	r3, r3, #31
 801e9e2:	d40f      	bmi.n	801ea04 <_dtoa_r+0x6e4>
 801e9e4:	4651      	mov	r1, sl
 801e9e6:	4620      	mov	r0, r4
 801e9e8:	f000 fbcc 	bl	801f184 <_Bfree>
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9f0:	702b      	strb	r3, [r5, #0]
 801e9f2:	f10b 0301 	add.w	r3, fp, #1
 801e9f6:	6013      	str	r3, [r2, #0]
 801e9f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	f43f ace2 	beq.w	801e3c4 <_dtoa_r+0xa4>
 801ea00:	601d      	str	r5, [r3, #0]
 801ea02:	e4df      	b.n	801e3c4 <_dtoa_r+0xa4>
 801ea04:	465f      	mov	r7, fp
 801ea06:	462b      	mov	r3, r5
 801ea08:	461d      	mov	r5, r3
 801ea0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ea0e:	2a39      	cmp	r2, #57	; 0x39
 801ea10:	d106      	bne.n	801ea20 <_dtoa_r+0x700>
 801ea12:	9a00      	ldr	r2, [sp, #0]
 801ea14:	429a      	cmp	r2, r3
 801ea16:	d1f7      	bne.n	801ea08 <_dtoa_r+0x6e8>
 801ea18:	9900      	ldr	r1, [sp, #0]
 801ea1a:	2230      	movs	r2, #48	; 0x30
 801ea1c:	3701      	adds	r7, #1
 801ea1e:	700a      	strb	r2, [r1, #0]
 801ea20:	781a      	ldrb	r2, [r3, #0]
 801ea22:	3201      	adds	r2, #1
 801ea24:	701a      	strb	r2, [r3, #0]
 801ea26:	e790      	b.n	801e94a <_dtoa_r+0x62a>
 801ea28:	4ba3      	ldr	r3, [pc, #652]	; (801ecb8 <_dtoa_r+0x998>)
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	f7e1 fe0c 	bl	8000648 <__aeabi_dmul>
 801ea30:	2200      	movs	r2, #0
 801ea32:	2300      	movs	r3, #0
 801ea34:	4606      	mov	r6, r0
 801ea36:	460f      	mov	r7, r1
 801ea38:	f7e2 f86e 	bl	8000b18 <__aeabi_dcmpeq>
 801ea3c:	2800      	cmp	r0, #0
 801ea3e:	d09e      	beq.n	801e97e <_dtoa_r+0x65e>
 801ea40:	e7d0      	b.n	801e9e4 <_dtoa_r+0x6c4>
 801ea42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea44:	2a00      	cmp	r2, #0
 801ea46:	f000 80ca 	beq.w	801ebde <_dtoa_r+0x8be>
 801ea4a:	9a07      	ldr	r2, [sp, #28]
 801ea4c:	2a01      	cmp	r2, #1
 801ea4e:	f300 80ad 	bgt.w	801ebac <_dtoa_r+0x88c>
 801ea52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea54:	2a00      	cmp	r2, #0
 801ea56:	f000 80a5 	beq.w	801eba4 <_dtoa_r+0x884>
 801ea5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ea5e:	9e08      	ldr	r6, [sp, #32]
 801ea60:	9d05      	ldr	r5, [sp, #20]
 801ea62:	9a05      	ldr	r2, [sp, #20]
 801ea64:	441a      	add	r2, r3
 801ea66:	9205      	str	r2, [sp, #20]
 801ea68:	9a06      	ldr	r2, [sp, #24]
 801ea6a:	2101      	movs	r1, #1
 801ea6c:	441a      	add	r2, r3
 801ea6e:	4620      	mov	r0, r4
 801ea70:	9206      	str	r2, [sp, #24]
 801ea72:	f000 fc3d 	bl	801f2f0 <__i2b>
 801ea76:	4607      	mov	r7, r0
 801ea78:	b165      	cbz	r5, 801ea94 <_dtoa_r+0x774>
 801ea7a:	9b06      	ldr	r3, [sp, #24]
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	dd09      	ble.n	801ea94 <_dtoa_r+0x774>
 801ea80:	42ab      	cmp	r3, r5
 801ea82:	9a05      	ldr	r2, [sp, #20]
 801ea84:	bfa8      	it	ge
 801ea86:	462b      	movge	r3, r5
 801ea88:	1ad2      	subs	r2, r2, r3
 801ea8a:	9205      	str	r2, [sp, #20]
 801ea8c:	9a06      	ldr	r2, [sp, #24]
 801ea8e:	1aed      	subs	r5, r5, r3
 801ea90:	1ad3      	subs	r3, r2, r3
 801ea92:	9306      	str	r3, [sp, #24]
 801ea94:	9b08      	ldr	r3, [sp, #32]
 801ea96:	b1f3      	cbz	r3, 801ead6 <_dtoa_r+0x7b6>
 801ea98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	f000 80a3 	beq.w	801ebe6 <_dtoa_r+0x8c6>
 801eaa0:	2e00      	cmp	r6, #0
 801eaa2:	dd10      	ble.n	801eac6 <_dtoa_r+0x7a6>
 801eaa4:	4639      	mov	r1, r7
 801eaa6:	4632      	mov	r2, r6
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	f000 fce1 	bl	801f470 <__pow5mult>
 801eaae:	4652      	mov	r2, sl
 801eab0:	4601      	mov	r1, r0
 801eab2:	4607      	mov	r7, r0
 801eab4:	4620      	mov	r0, r4
 801eab6:	f000 fc31 	bl	801f31c <__multiply>
 801eaba:	4651      	mov	r1, sl
 801eabc:	4680      	mov	r8, r0
 801eabe:	4620      	mov	r0, r4
 801eac0:	f000 fb60 	bl	801f184 <_Bfree>
 801eac4:	46c2      	mov	sl, r8
 801eac6:	9b08      	ldr	r3, [sp, #32]
 801eac8:	1b9a      	subs	r2, r3, r6
 801eaca:	d004      	beq.n	801ead6 <_dtoa_r+0x7b6>
 801eacc:	4651      	mov	r1, sl
 801eace:	4620      	mov	r0, r4
 801ead0:	f000 fcce 	bl	801f470 <__pow5mult>
 801ead4:	4682      	mov	sl, r0
 801ead6:	2101      	movs	r1, #1
 801ead8:	4620      	mov	r0, r4
 801eada:	f000 fc09 	bl	801f2f0 <__i2b>
 801eade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	4606      	mov	r6, r0
 801eae4:	f340 8081 	ble.w	801ebea <_dtoa_r+0x8ca>
 801eae8:	461a      	mov	r2, r3
 801eaea:	4601      	mov	r1, r0
 801eaec:	4620      	mov	r0, r4
 801eaee:	f000 fcbf 	bl	801f470 <__pow5mult>
 801eaf2:	9b07      	ldr	r3, [sp, #28]
 801eaf4:	2b01      	cmp	r3, #1
 801eaf6:	4606      	mov	r6, r0
 801eaf8:	dd7a      	ble.n	801ebf0 <_dtoa_r+0x8d0>
 801eafa:	f04f 0800 	mov.w	r8, #0
 801eafe:	6933      	ldr	r3, [r6, #16]
 801eb00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801eb04:	6918      	ldr	r0, [r3, #16]
 801eb06:	f000 fba5 	bl	801f254 <__hi0bits>
 801eb0a:	f1c0 0020 	rsb	r0, r0, #32
 801eb0e:	9b06      	ldr	r3, [sp, #24]
 801eb10:	4418      	add	r0, r3
 801eb12:	f010 001f 	ands.w	r0, r0, #31
 801eb16:	f000 8094 	beq.w	801ec42 <_dtoa_r+0x922>
 801eb1a:	f1c0 0320 	rsb	r3, r0, #32
 801eb1e:	2b04      	cmp	r3, #4
 801eb20:	f340 8085 	ble.w	801ec2e <_dtoa_r+0x90e>
 801eb24:	9b05      	ldr	r3, [sp, #20]
 801eb26:	f1c0 001c 	rsb	r0, r0, #28
 801eb2a:	4403      	add	r3, r0
 801eb2c:	9305      	str	r3, [sp, #20]
 801eb2e:	9b06      	ldr	r3, [sp, #24]
 801eb30:	4403      	add	r3, r0
 801eb32:	4405      	add	r5, r0
 801eb34:	9306      	str	r3, [sp, #24]
 801eb36:	9b05      	ldr	r3, [sp, #20]
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	dd05      	ble.n	801eb48 <_dtoa_r+0x828>
 801eb3c:	4651      	mov	r1, sl
 801eb3e:	461a      	mov	r2, r3
 801eb40:	4620      	mov	r0, r4
 801eb42:	f000 fcef 	bl	801f524 <__lshift>
 801eb46:	4682      	mov	sl, r0
 801eb48:	9b06      	ldr	r3, [sp, #24]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	dd05      	ble.n	801eb5a <_dtoa_r+0x83a>
 801eb4e:	4631      	mov	r1, r6
 801eb50:	461a      	mov	r2, r3
 801eb52:	4620      	mov	r0, r4
 801eb54:	f000 fce6 	bl	801f524 <__lshift>
 801eb58:	4606      	mov	r6, r0
 801eb5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d072      	beq.n	801ec46 <_dtoa_r+0x926>
 801eb60:	4631      	mov	r1, r6
 801eb62:	4650      	mov	r0, sl
 801eb64:	f000 fd4a 	bl	801f5fc <__mcmp>
 801eb68:	2800      	cmp	r0, #0
 801eb6a:	da6c      	bge.n	801ec46 <_dtoa_r+0x926>
 801eb6c:	2300      	movs	r3, #0
 801eb6e:	4651      	mov	r1, sl
 801eb70:	220a      	movs	r2, #10
 801eb72:	4620      	mov	r0, r4
 801eb74:	f000 fb28 	bl	801f1c8 <__multadd>
 801eb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb7e:	4682      	mov	sl, r0
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	f000 81b0 	beq.w	801eee6 <_dtoa_r+0xbc6>
 801eb86:	2300      	movs	r3, #0
 801eb88:	4639      	mov	r1, r7
 801eb8a:	220a      	movs	r2, #10
 801eb8c:	4620      	mov	r0, r4
 801eb8e:	f000 fb1b 	bl	801f1c8 <__multadd>
 801eb92:	9b01      	ldr	r3, [sp, #4]
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	4607      	mov	r7, r0
 801eb98:	f300 8096 	bgt.w	801ecc8 <_dtoa_r+0x9a8>
 801eb9c:	9b07      	ldr	r3, [sp, #28]
 801eb9e:	2b02      	cmp	r3, #2
 801eba0:	dc59      	bgt.n	801ec56 <_dtoa_r+0x936>
 801eba2:	e091      	b.n	801ecc8 <_dtoa_r+0x9a8>
 801eba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ebaa:	e758      	b.n	801ea5e <_dtoa_r+0x73e>
 801ebac:	9b04      	ldr	r3, [sp, #16]
 801ebae:	1e5e      	subs	r6, r3, #1
 801ebb0:	9b08      	ldr	r3, [sp, #32]
 801ebb2:	42b3      	cmp	r3, r6
 801ebb4:	bfbf      	itttt	lt
 801ebb6:	9b08      	ldrlt	r3, [sp, #32]
 801ebb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801ebba:	9608      	strlt	r6, [sp, #32]
 801ebbc:	1af3      	sublt	r3, r6, r3
 801ebbe:	bfb4      	ite	lt
 801ebc0:	18d2      	addlt	r2, r2, r3
 801ebc2:	1b9e      	subge	r6, r3, r6
 801ebc4:	9b04      	ldr	r3, [sp, #16]
 801ebc6:	bfbc      	itt	lt
 801ebc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801ebca:	2600      	movlt	r6, #0
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	bfb7      	itett	lt
 801ebd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801ebd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801ebd8:	1a9d      	sublt	r5, r3, r2
 801ebda:	2300      	movlt	r3, #0
 801ebdc:	e741      	b.n	801ea62 <_dtoa_r+0x742>
 801ebde:	9e08      	ldr	r6, [sp, #32]
 801ebe0:	9d05      	ldr	r5, [sp, #20]
 801ebe2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ebe4:	e748      	b.n	801ea78 <_dtoa_r+0x758>
 801ebe6:	9a08      	ldr	r2, [sp, #32]
 801ebe8:	e770      	b.n	801eacc <_dtoa_r+0x7ac>
 801ebea:	9b07      	ldr	r3, [sp, #28]
 801ebec:	2b01      	cmp	r3, #1
 801ebee:	dc19      	bgt.n	801ec24 <_dtoa_r+0x904>
 801ebf0:	9b02      	ldr	r3, [sp, #8]
 801ebf2:	b9bb      	cbnz	r3, 801ec24 <_dtoa_r+0x904>
 801ebf4:	9b03      	ldr	r3, [sp, #12]
 801ebf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ebfa:	b99b      	cbnz	r3, 801ec24 <_dtoa_r+0x904>
 801ebfc:	9b03      	ldr	r3, [sp, #12]
 801ebfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ec02:	0d1b      	lsrs	r3, r3, #20
 801ec04:	051b      	lsls	r3, r3, #20
 801ec06:	b183      	cbz	r3, 801ec2a <_dtoa_r+0x90a>
 801ec08:	9b05      	ldr	r3, [sp, #20]
 801ec0a:	3301      	adds	r3, #1
 801ec0c:	9305      	str	r3, [sp, #20]
 801ec0e:	9b06      	ldr	r3, [sp, #24]
 801ec10:	3301      	adds	r3, #1
 801ec12:	9306      	str	r3, [sp, #24]
 801ec14:	f04f 0801 	mov.w	r8, #1
 801ec18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	f47f af6f 	bne.w	801eafe <_dtoa_r+0x7de>
 801ec20:	2001      	movs	r0, #1
 801ec22:	e774      	b.n	801eb0e <_dtoa_r+0x7ee>
 801ec24:	f04f 0800 	mov.w	r8, #0
 801ec28:	e7f6      	b.n	801ec18 <_dtoa_r+0x8f8>
 801ec2a:	4698      	mov	r8, r3
 801ec2c:	e7f4      	b.n	801ec18 <_dtoa_r+0x8f8>
 801ec2e:	d082      	beq.n	801eb36 <_dtoa_r+0x816>
 801ec30:	9a05      	ldr	r2, [sp, #20]
 801ec32:	331c      	adds	r3, #28
 801ec34:	441a      	add	r2, r3
 801ec36:	9205      	str	r2, [sp, #20]
 801ec38:	9a06      	ldr	r2, [sp, #24]
 801ec3a:	441a      	add	r2, r3
 801ec3c:	441d      	add	r5, r3
 801ec3e:	9206      	str	r2, [sp, #24]
 801ec40:	e779      	b.n	801eb36 <_dtoa_r+0x816>
 801ec42:	4603      	mov	r3, r0
 801ec44:	e7f4      	b.n	801ec30 <_dtoa_r+0x910>
 801ec46:	9b04      	ldr	r3, [sp, #16]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	dc37      	bgt.n	801ecbc <_dtoa_r+0x99c>
 801ec4c:	9b07      	ldr	r3, [sp, #28]
 801ec4e:	2b02      	cmp	r3, #2
 801ec50:	dd34      	ble.n	801ecbc <_dtoa_r+0x99c>
 801ec52:	9b04      	ldr	r3, [sp, #16]
 801ec54:	9301      	str	r3, [sp, #4]
 801ec56:	9b01      	ldr	r3, [sp, #4]
 801ec58:	b963      	cbnz	r3, 801ec74 <_dtoa_r+0x954>
 801ec5a:	4631      	mov	r1, r6
 801ec5c:	2205      	movs	r2, #5
 801ec5e:	4620      	mov	r0, r4
 801ec60:	f000 fab2 	bl	801f1c8 <__multadd>
 801ec64:	4601      	mov	r1, r0
 801ec66:	4606      	mov	r6, r0
 801ec68:	4650      	mov	r0, sl
 801ec6a:	f000 fcc7 	bl	801f5fc <__mcmp>
 801ec6e:	2800      	cmp	r0, #0
 801ec70:	f73f adbb 	bgt.w	801e7ea <_dtoa_r+0x4ca>
 801ec74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec76:	9d00      	ldr	r5, [sp, #0]
 801ec78:	ea6f 0b03 	mvn.w	fp, r3
 801ec7c:	f04f 0800 	mov.w	r8, #0
 801ec80:	4631      	mov	r1, r6
 801ec82:	4620      	mov	r0, r4
 801ec84:	f000 fa7e 	bl	801f184 <_Bfree>
 801ec88:	2f00      	cmp	r7, #0
 801ec8a:	f43f aeab 	beq.w	801e9e4 <_dtoa_r+0x6c4>
 801ec8e:	f1b8 0f00 	cmp.w	r8, #0
 801ec92:	d005      	beq.n	801eca0 <_dtoa_r+0x980>
 801ec94:	45b8      	cmp	r8, r7
 801ec96:	d003      	beq.n	801eca0 <_dtoa_r+0x980>
 801ec98:	4641      	mov	r1, r8
 801ec9a:	4620      	mov	r0, r4
 801ec9c:	f000 fa72 	bl	801f184 <_Bfree>
 801eca0:	4639      	mov	r1, r7
 801eca2:	4620      	mov	r0, r4
 801eca4:	f000 fa6e 	bl	801f184 <_Bfree>
 801eca8:	e69c      	b.n	801e9e4 <_dtoa_r+0x6c4>
 801ecaa:	2600      	movs	r6, #0
 801ecac:	4637      	mov	r7, r6
 801ecae:	e7e1      	b.n	801ec74 <_dtoa_r+0x954>
 801ecb0:	46bb      	mov	fp, r7
 801ecb2:	4637      	mov	r7, r6
 801ecb4:	e599      	b.n	801e7ea <_dtoa_r+0x4ca>
 801ecb6:	bf00      	nop
 801ecb8:	40240000 	.word	0x40240000
 801ecbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	f000 80c8 	beq.w	801ee54 <_dtoa_r+0xb34>
 801ecc4:	9b04      	ldr	r3, [sp, #16]
 801ecc6:	9301      	str	r3, [sp, #4]
 801ecc8:	2d00      	cmp	r5, #0
 801ecca:	dd05      	ble.n	801ecd8 <_dtoa_r+0x9b8>
 801eccc:	4639      	mov	r1, r7
 801ecce:	462a      	mov	r2, r5
 801ecd0:	4620      	mov	r0, r4
 801ecd2:	f000 fc27 	bl	801f524 <__lshift>
 801ecd6:	4607      	mov	r7, r0
 801ecd8:	f1b8 0f00 	cmp.w	r8, #0
 801ecdc:	d05b      	beq.n	801ed96 <_dtoa_r+0xa76>
 801ecde:	6879      	ldr	r1, [r7, #4]
 801ece0:	4620      	mov	r0, r4
 801ece2:	f000 fa0f 	bl	801f104 <_Balloc>
 801ece6:	4605      	mov	r5, r0
 801ece8:	b928      	cbnz	r0, 801ecf6 <_dtoa_r+0x9d6>
 801ecea:	4b83      	ldr	r3, [pc, #524]	; (801eef8 <_dtoa_r+0xbd8>)
 801ecec:	4602      	mov	r2, r0
 801ecee:	f240 21ef 	movw	r1, #751	; 0x2ef
 801ecf2:	f7ff bb2e 	b.w	801e352 <_dtoa_r+0x32>
 801ecf6:	693a      	ldr	r2, [r7, #16]
 801ecf8:	3202      	adds	r2, #2
 801ecfa:	0092      	lsls	r2, r2, #2
 801ecfc:	f107 010c 	add.w	r1, r7, #12
 801ed00:	300c      	adds	r0, #12
 801ed02:	f7ff fa6d 	bl	801e1e0 <memcpy>
 801ed06:	2201      	movs	r2, #1
 801ed08:	4629      	mov	r1, r5
 801ed0a:	4620      	mov	r0, r4
 801ed0c:	f000 fc0a 	bl	801f524 <__lshift>
 801ed10:	9b00      	ldr	r3, [sp, #0]
 801ed12:	3301      	adds	r3, #1
 801ed14:	9304      	str	r3, [sp, #16]
 801ed16:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed1a:	4413      	add	r3, r2
 801ed1c:	9308      	str	r3, [sp, #32]
 801ed1e:	9b02      	ldr	r3, [sp, #8]
 801ed20:	f003 0301 	and.w	r3, r3, #1
 801ed24:	46b8      	mov	r8, r7
 801ed26:	9306      	str	r3, [sp, #24]
 801ed28:	4607      	mov	r7, r0
 801ed2a:	9b04      	ldr	r3, [sp, #16]
 801ed2c:	4631      	mov	r1, r6
 801ed2e:	3b01      	subs	r3, #1
 801ed30:	4650      	mov	r0, sl
 801ed32:	9301      	str	r3, [sp, #4]
 801ed34:	f7ff fa69 	bl	801e20a <quorem>
 801ed38:	4641      	mov	r1, r8
 801ed3a:	9002      	str	r0, [sp, #8]
 801ed3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ed40:	4650      	mov	r0, sl
 801ed42:	f000 fc5b 	bl	801f5fc <__mcmp>
 801ed46:	463a      	mov	r2, r7
 801ed48:	9005      	str	r0, [sp, #20]
 801ed4a:	4631      	mov	r1, r6
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f000 fc71 	bl	801f634 <__mdiff>
 801ed52:	68c2      	ldr	r2, [r0, #12]
 801ed54:	4605      	mov	r5, r0
 801ed56:	bb02      	cbnz	r2, 801ed9a <_dtoa_r+0xa7a>
 801ed58:	4601      	mov	r1, r0
 801ed5a:	4650      	mov	r0, sl
 801ed5c:	f000 fc4e 	bl	801f5fc <__mcmp>
 801ed60:	4602      	mov	r2, r0
 801ed62:	4629      	mov	r1, r5
 801ed64:	4620      	mov	r0, r4
 801ed66:	9209      	str	r2, [sp, #36]	; 0x24
 801ed68:	f000 fa0c 	bl	801f184 <_Bfree>
 801ed6c:	9b07      	ldr	r3, [sp, #28]
 801ed6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ed70:	9d04      	ldr	r5, [sp, #16]
 801ed72:	ea43 0102 	orr.w	r1, r3, r2
 801ed76:	9b06      	ldr	r3, [sp, #24]
 801ed78:	4319      	orrs	r1, r3
 801ed7a:	d110      	bne.n	801ed9e <_dtoa_r+0xa7e>
 801ed7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ed80:	d029      	beq.n	801edd6 <_dtoa_r+0xab6>
 801ed82:	9b05      	ldr	r3, [sp, #20]
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	dd02      	ble.n	801ed8e <_dtoa_r+0xa6e>
 801ed88:	9b02      	ldr	r3, [sp, #8]
 801ed8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801ed8e:	9b01      	ldr	r3, [sp, #4]
 801ed90:	f883 9000 	strb.w	r9, [r3]
 801ed94:	e774      	b.n	801ec80 <_dtoa_r+0x960>
 801ed96:	4638      	mov	r0, r7
 801ed98:	e7ba      	b.n	801ed10 <_dtoa_r+0x9f0>
 801ed9a:	2201      	movs	r2, #1
 801ed9c:	e7e1      	b.n	801ed62 <_dtoa_r+0xa42>
 801ed9e:	9b05      	ldr	r3, [sp, #20]
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	db04      	blt.n	801edae <_dtoa_r+0xa8e>
 801eda4:	9907      	ldr	r1, [sp, #28]
 801eda6:	430b      	orrs	r3, r1
 801eda8:	9906      	ldr	r1, [sp, #24]
 801edaa:	430b      	orrs	r3, r1
 801edac:	d120      	bne.n	801edf0 <_dtoa_r+0xad0>
 801edae:	2a00      	cmp	r2, #0
 801edb0:	dded      	ble.n	801ed8e <_dtoa_r+0xa6e>
 801edb2:	4651      	mov	r1, sl
 801edb4:	2201      	movs	r2, #1
 801edb6:	4620      	mov	r0, r4
 801edb8:	f000 fbb4 	bl	801f524 <__lshift>
 801edbc:	4631      	mov	r1, r6
 801edbe:	4682      	mov	sl, r0
 801edc0:	f000 fc1c 	bl	801f5fc <__mcmp>
 801edc4:	2800      	cmp	r0, #0
 801edc6:	dc03      	bgt.n	801edd0 <_dtoa_r+0xab0>
 801edc8:	d1e1      	bne.n	801ed8e <_dtoa_r+0xa6e>
 801edca:	f019 0f01 	tst.w	r9, #1
 801edce:	d0de      	beq.n	801ed8e <_dtoa_r+0xa6e>
 801edd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801edd4:	d1d8      	bne.n	801ed88 <_dtoa_r+0xa68>
 801edd6:	9a01      	ldr	r2, [sp, #4]
 801edd8:	2339      	movs	r3, #57	; 0x39
 801edda:	7013      	strb	r3, [r2, #0]
 801eddc:	462b      	mov	r3, r5
 801edde:	461d      	mov	r5, r3
 801ede0:	3b01      	subs	r3, #1
 801ede2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ede6:	2a39      	cmp	r2, #57	; 0x39
 801ede8:	d06c      	beq.n	801eec4 <_dtoa_r+0xba4>
 801edea:	3201      	adds	r2, #1
 801edec:	701a      	strb	r2, [r3, #0]
 801edee:	e747      	b.n	801ec80 <_dtoa_r+0x960>
 801edf0:	2a00      	cmp	r2, #0
 801edf2:	dd07      	ble.n	801ee04 <_dtoa_r+0xae4>
 801edf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801edf8:	d0ed      	beq.n	801edd6 <_dtoa_r+0xab6>
 801edfa:	9a01      	ldr	r2, [sp, #4]
 801edfc:	f109 0301 	add.w	r3, r9, #1
 801ee00:	7013      	strb	r3, [r2, #0]
 801ee02:	e73d      	b.n	801ec80 <_dtoa_r+0x960>
 801ee04:	9b04      	ldr	r3, [sp, #16]
 801ee06:	9a08      	ldr	r2, [sp, #32]
 801ee08:	f803 9c01 	strb.w	r9, [r3, #-1]
 801ee0c:	4293      	cmp	r3, r2
 801ee0e:	d043      	beq.n	801ee98 <_dtoa_r+0xb78>
 801ee10:	4651      	mov	r1, sl
 801ee12:	2300      	movs	r3, #0
 801ee14:	220a      	movs	r2, #10
 801ee16:	4620      	mov	r0, r4
 801ee18:	f000 f9d6 	bl	801f1c8 <__multadd>
 801ee1c:	45b8      	cmp	r8, r7
 801ee1e:	4682      	mov	sl, r0
 801ee20:	f04f 0300 	mov.w	r3, #0
 801ee24:	f04f 020a 	mov.w	r2, #10
 801ee28:	4641      	mov	r1, r8
 801ee2a:	4620      	mov	r0, r4
 801ee2c:	d107      	bne.n	801ee3e <_dtoa_r+0xb1e>
 801ee2e:	f000 f9cb 	bl	801f1c8 <__multadd>
 801ee32:	4680      	mov	r8, r0
 801ee34:	4607      	mov	r7, r0
 801ee36:	9b04      	ldr	r3, [sp, #16]
 801ee38:	3301      	adds	r3, #1
 801ee3a:	9304      	str	r3, [sp, #16]
 801ee3c:	e775      	b.n	801ed2a <_dtoa_r+0xa0a>
 801ee3e:	f000 f9c3 	bl	801f1c8 <__multadd>
 801ee42:	4639      	mov	r1, r7
 801ee44:	4680      	mov	r8, r0
 801ee46:	2300      	movs	r3, #0
 801ee48:	220a      	movs	r2, #10
 801ee4a:	4620      	mov	r0, r4
 801ee4c:	f000 f9bc 	bl	801f1c8 <__multadd>
 801ee50:	4607      	mov	r7, r0
 801ee52:	e7f0      	b.n	801ee36 <_dtoa_r+0xb16>
 801ee54:	9b04      	ldr	r3, [sp, #16]
 801ee56:	9301      	str	r3, [sp, #4]
 801ee58:	9d00      	ldr	r5, [sp, #0]
 801ee5a:	4631      	mov	r1, r6
 801ee5c:	4650      	mov	r0, sl
 801ee5e:	f7ff f9d4 	bl	801e20a <quorem>
 801ee62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ee66:	9b00      	ldr	r3, [sp, #0]
 801ee68:	f805 9b01 	strb.w	r9, [r5], #1
 801ee6c:	1aea      	subs	r2, r5, r3
 801ee6e:	9b01      	ldr	r3, [sp, #4]
 801ee70:	4293      	cmp	r3, r2
 801ee72:	dd07      	ble.n	801ee84 <_dtoa_r+0xb64>
 801ee74:	4651      	mov	r1, sl
 801ee76:	2300      	movs	r3, #0
 801ee78:	220a      	movs	r2, #10
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	f000 f9a4 	bl	801f1c8 <__multadd>
 801ee80:	4682      	mov	sl, r0
 801ee82:	e7ea      	b.n	801ee5a <_dtoa_r+0xb3a>
 801ee84:	9b01      	ldr	r3, [sp, #4]
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	bfc8      	it	gt
 801ee8a:	461d      	movgt	r5, r3
 801ee8c:	9b00      	ldr	r3, [sp, #0]
 801ee8e:	bfd8      	it	le
 801ee90:	2501      	movle	r5, #1
 801ee92:	441d      	add	r5, r3
 801ee94:	f04f 0800 	mov.w	r8, #0
 801ee98:	4651      	mov	r1, sl
 801ee9a:	2201      	movs	r2, #1
 801ee9c:	4620      	mov	r0, r4
 801ee9e:	f000 fb41 	bl	801f524 <__lshift>
 801eea2:	4631      	mov	r1, r6
 801eea4:	4682      	mov	sl, r0
 801eea6:	f000 fba9 	bl	801f5fc <__mcmp>
 801eeaa:	2800      	cmp	r0, #0
 801eeac:	dc96      	bgt.n	801eddc <_dtoa_r+0xabc>
 801eeae:	d102      	bne.n	801eeb6 <_dtoa_r+0xb96>
 801eeb0:	f019 0f01 	tst.w	r9, #1
 801eeb4:	d192      	bne.n	801eddc <_dtoa_r+0xabc>
 801eeb6:	462b      	mov	r3, r5
 801eeb8:	461d      	mov	r5, r3
 801eeba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801eebe:	2a30      	cmp	r2, #48	; 0x30
 801eec0:	d0fa      	beq.n	801eeb8 <_dtoa_r+0xb98>
 801eec2:	e6dd      	b.n	801ec80 <_dtoa_r+0x960>
 801eec4:	9a00      	ldr	r2, [sp, #0]
 801eec6:	429a      	cmp	r2, r3
 801eec8:	d189      	bne.n	801edde <_dtoa_r+0xabe>
 801eeca:	f10b 0b01 	add.w	fp, fp, #1
 801eece:	2331      	movs	r3, #49	; 0x31
 801eed0:	e796      	b.n	801ee00 <_dtoa_r+0xae0>
 801eed2:	4b0a      	ldr	r3, [pc, #40]	; (801eefc <_dtoa_r+0xbdc>)
 801eed4:	f7ff ba99 	b.w	801e40a <_dtoa_r+0xea>
 801eed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	f47f aa6d 	bne.w	801e3ba <_dtoa_r+0x9a>
 801eee0:	4b07      	ldr	r3, [pc, #28]	; (801ef00 <_dtoa_r+0xbe0>)
 801eee2:	f7ff ba92 	b.w	801e40a <_dtoa_r+0xea>
 801eee6:	9b01      	ldr	r3, [sp, #4]
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	dcb5      	bgt.n	801ee58 <_dtoa_r+0xb38>
 801eeec:	9b07      	ldr	r3, [sp, #28]
 801eeee:	2b02      	cmp	r3, #2
 801eef0:	f73f aeb1 	bgt.w	801ec56 <_dtoa_r+0x936>
 801eef4:	e7b0      	b.n	801ee58 <_dtoa_r+0xb38>
 801eef6:	bf00      	nop
 801eef8:	0802346b 	.word	0x0802346b
 801eefc:	080233cb 	.word	0x080233cb
 801ef00:	080233ef 	.word	0x080233ef

0801ef04 <_free_r>:
 801ef04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ef06:	2900      	cmp	r1, #0
 801ef08:	d044      	beq.n	801ef94 <_free_r+0x90>
 801ef0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ef0e:	9001      	str	r0, [sp, #4]
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	f1a1 0404 	sub.w	r4, r1, #4
 801ef16:	bfb8      	it	lt
 801ef18:	18e4      	addlt	r4, r4, r3
 801ef1a:	f000 f8e7 	bl	801f0ec <__malloc_lock>
 801ef1e:	4a1e      	ldr	r2, [pc, #120]	; (801ef98 <_free_r+0x94>)
 801ef20:	9801      	ldr	r0, [sp, #4]
 801ef22:	6813      	ldr	r3, [r2, #0]
 801ef24:	b933      	cbnz	r3, 801ef34 <_free_r+0x30>
 801ef26:	6063      	str	r3, [r4, #4]
 801ef28:	6014      	str	r4, [r2, #0]
 801ef2a:	b003      	add	sp, #12
 801ef2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ef30:	f000 b8e2 	b.w	801f0f8 <__malloc_unlock>
 801ef34:	42a3      	cmp	r3, r4
 801ef36:	d908      	bls.n	801ef4a <_free_r+0x46>
 801ef38:	6825      	ldr	r5, [r4, #0]
 801ef3a:	1961      	adds	r1, r4, r5
 801ef3c:	428b      	cmp	r3, r1
 801ef3e:	bf01      	itttt	eq
 801ef40:	6819      	ldreq	r1, [r3, #0]
 801ef42:	685b      	ldreq	r3, [r3, #4]
 801ef44:	1949      	addeq	r1, r1, r5
 801ef46:	6021      	streq	r1, [r4, #0]
 801ef48:	e7ed      	b.n	801ef26 <_free_r+0x22>
 801ef4a:	461a      	mov	r2, r3
 801ef4c:	685b      	ldr	r3, [r3, #4]
 801ef4e:	b10b      	cbz	r3, 801ef54 <_free_r+0x50>
 801ef50:	42a3      	cmp	r3, r4
 801ef52:	d9fa      	bls.n	801ef4a <_free_r+0x46>
 801ef54:	6811      	ldr	r1, [r2, #0]
 801ef56:	1855      	adds	r5, r2, r1
 801ef58:	42a5      	cmp	r5, r4
 801ef5a:	d10b      	bne.n	801ef74 <_free_r+0x70>
 801ef5c:	6824      	ldr	r4, [r4, #0]
 801ef5e:	4421      	add	r1, r4
 801ef60:	1854      	adds	r4, r2, r1
 801ef62:	42a3      	cmp	r3, r4
 801ef64:	6011      	str	r1, [r2, #0]
 801ef66:	d1e0      	bne.n	801ef2a <_free_r+0x26>
 801ef68:	681c      	ldr	r4, [r3, #0]
 801ef6a:	685b      	ldr	r3, [r3, #4]
 801ef6c:	6053      	str	r3, [r2, #4]
 801ef6e:	440c      	add	r4, r1
 801ef70:	6014      	str	r4, [r2, #0]
 801ef72:	e7da      	b.n	801ef2a <_free_r+0x26>
 801ef74:	d902      	bls.n	801ef7c <_free_r+0x78>
 801ef76:	230c      	movs	r3, #12
 801ef78:	6003      	str	r3, [r0, #0]
 801ef7a:	e7d6      	b.n	801ef2a <_free_r+0x26>
 801ef7c:	6825      	ldr	r5, [r4, #0]
 801ef7e:	1961      	adds	r1, r4, r5
 801ef80:	428b      	cmp	r3, r1
 801ef82:	bf04      	itt	eq
 801ef84:	6819      	ldreq	r1, [r3, #0]
 801ef86:	685b      	ldreq	r3, [r3, #4]
 801ef88:	6063      	str	r3, [r4, #4]
 801ef8a:	bf04      	itt	eq
 801ef8c:	1949      	addeq	r1, r1, r5
 801ef8e:	6021      	streq	r1, [r4, #0]
 801ef90:	6054      	str	r4, [r2, #4]
 801ef92:	e7ca      	b.n	801ef2a <_free_r+0x26>
 801ef94:	b003      	add	sp, #12
 801ef96:	bd30      	pop	{r4, r5, pc}
 801ef98:	20016a78 	.word	0x20016a78

0801ef9c <malloc>:
 801ef9c:	4b02      	ldr	r3, [pc, #8]	; (801efa8 <malloc+0xc>)
 801ef9e:	4601      	mov	r1, r0
 801efa0:	6818      	ldr	r0, [r3, #0]
 801efa2:	f000 b823 	b.w	801efec <_malloc_r>
 801efa6:	bf00      	nop
 801efa8:	200001e8 	.word	0x200001e8

0801efac <sbrk_aligned>:
 801efac:	b570      	push	{r4, r5, r6, lr}
 801efae:	4e0e      	ldr	r6, [pc, #56]	; (801efe8 <sbrk_aligned+0x3c>)
 801efb0:	460c      	mov	r4, r1
 801efb2:	6831      	ldr	r1, [r6, #0]
 801efb4:	4605      	mov	r5, r0
 801efb6:	b911      	cbnz	r1, 801efbe <sbrk_aligned+0x12>
 801efb8:	f001 f85e 	bl	8020078 <_sbrk_r>
 801efbc:	6030      	str	r0, [r6, #0]
 801efbe:	4621      	mov	r1, r4
 801efc0:	4628      	mov	r0, r5
 801efc2:	f001 f859 	bl	8020078 <_sbrk_r>
 801efc6:	1c43      	adds	r3, r0, #1
 801efc8:	d00a      	beq.n	801efe0 <sbrk_aligned+0x34>
 801efca:	1cc4      	adds	r4, r0, #3
 801efcc:	f024 0403 	bic.w	r4, r4, #3
 801efd0:	42a0      	cmp	r0, r4
 801efd2:	d007      	beq.n	801efe4 <sbrk_aligned+0x38>
 801efd4:	1a21      	subs	r1, r4, r0
 801efd6:	4628      	mov	r0, r5
 801efd8:	f001 f84e 	bl	8020078 <_sbrk_r>
 801efdc:	3001      	adds	r0, #1
 801efde:	d101      	bne.n	801efe4 <sbrk_aligned+0x38>
 801efe0:	f04f 34ff 	mov.w	r4, #4294967295
 801efe4:	4620      	mov	r0, r4
 801efe6:	bd70      	pop	{r4, r5, r6, pc}
 801efe8:	20016a7c 	.word	0x20016a7c

0801efec <_malloc_r>:
 801efec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eff0:	1ccd      	adds	r5, r1, #3
 801eff2:	f025 0503 	bic.w	r5, r5, #3
 801eff6:	3508      	adds	r5, #8
 801eff8:	2d0c      	cmp	r5, #12
 801effa:	bf38      	it	cc
 801effc:	250c      	movcc	r5, #12
 801effe:	2d00      	cmp	r5, #0
 801f000:	4607      	mov	r7, r0
 801f002:	db01      	blt.n	801f008 <_malloc_r+0x1c>
 801f004:	42a9      	cmp	r1, r5
 801f006:	d905      	bls.n	801f014 <_malloc_r+0x28>
 801f008:	230c      	movs	r3, #12
 801f00a:	603b      	str	r3, [r7, #0]
 801f00c:	2600      	movs	r6, #0
 801f00e:	4630      	mov	r0, r6
 801f010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f014:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f0e8 <_malloc_r+0xfc>
 801f018:	f000 f868 	bl	801f0ec <__malloc_lock>
 801f01c:	f8d8 3000 	ldr.w	r3, [r8]
 801f020:	461c      	mov	r4, r3
 801f022:	bb5c      	cbnz	r4, 801f07c <_malloc_r+0x90>
 801f024:	4629      	mov	r1, r5
 801f026:	4638      	mov	r0, r7
 801f028:	f7ff ffc0 	bl	801efac <sbrk_aligned>
 801f02c:	1c43      	adds	r3, r0, #1
 801f02e:	4604      	mov	r4, r0
 801f030:	d155      	bne.n	801f0de <_malloc_r+0xf2>
 801f032:	f8d8 4000 	ldr.w	r4, [r8]
 801f036:	4626      	mov	r6, r4
 801f038:	2e00      	cmp	r6, #0
 801f03a:	d145      	bne.n	801f0c8 <_malloc_r+0xdc>
 801f03c:	2c00      	cmp	r4, #0
 801f03e:	d048      	beq.n	801f0d2 <_malloc_r+0xe6>
 801f040:	6823      	ldr	r3, [r4, #0]
 801f042:	4631      	mov	r1, r6
 801f044:	4638      	mov	r0, r7
 801f046:	eb04 0903 	add.w	r9, r4, r3
 801f04a:	f001 f815 	bl	8020078 <_sbrk_r>
 801f04e:	4581      	cmp	r9, r0
 801f050:	d13f      	bne.n	801f0d2 <_malloc_r+0xe6>
 801f052:	6821      	ldr	r1, [r4, #0]
 801f054:	1a6d      	subs	r5, r5, r1
 801f056:	4629      	mov	r1, r5
 801f058:	4638      	mov	r0, r7
 801f05a:	f7ff ffa7 	bl	801efac <sbrk_aligned>
 801f05e:	3001      	adds	r0, #1
 801f060:	d037      	beq.n	801f0d2 <_malloc_r+0xe6>
 801f062:	6823      	ldr	r3, [r4, #0]
 801f064:	442b      	add	r3, r5
 801f066:	6023      	str	r3, [r4, #0]
 801f068:	f8d8 3000 	ldr.w	r3, [r8]
 801f06c:	2b00      	cmp	r3, #0
 801f06e:	d038      	beq.n	801f0e2 <_malloc_r+0xf6>
 801f070:	685a      	ldr	r2, [r3, #4]
 801f072:	42a2      	cmp	r2, r4
 801f074:	d12b      	bne.n	801f0ce <_malloc_r+0xe2>
 801f076:	2200      	movs	r2, #0
 801f078:	605a      	str	r2, [r3, #4]
 801f07a:	e00f      	b.n	801f09c <_malloc_r+0xb0>
 801f07c:	6822      	ldr	r2, [r4, #0]
 801f07e:	1b52      	subs	r2, r2, r5
 801f080:	d41f      	bmi.n	801f0c2 <_malloc_r+0xd6>
 801f082:	2a0b      	cmp	r2, #11
 801f084:	d917      	bls.n	801f0b6 <_malloc_r+0xca>
 801f086:	1961      	adds	r1, r4, r5
 801f088:	42a3      	cmp	r3, r4
 801f08a:	6025      	str	r5, [r4, #0]
 801f08c:	bf18      	it	ne
 801f08e:	6059      	strne	r1, [r3, #4]
 801f090:	6863      	ldr	r3, [r4, #4]
 801f092:	bf08      	it	eq
 801f094:	f8c8 1000 	streq.w	r1, [r8]
 801f098:	5162      	str	r2, [r4, r5]
 801f09a:	604b      	str	r3, [r1, #4]
 801f09c:	4638      	mov	r0, r7
 801f09e:	f104 060b 	add.w	r6, r4, #11
 801f0a2:	f000 f829 	bl	801f0f8 <__malloc_unlock>
 801f0a6:	f026 0607 	bic.w	r6, r6, #7
 801f0aa:	1d23      	adds	r3, r4, #4
 801f0ac:	1af2      	subs	r2, r6, r3
 801f0ae:	d0ae      	beq.n	801f00e <_malloc_r+0x22>
 801f0b0:	1b9b      	subs	r3, r3, r6
 801f0b2:	50a3      	str	r3, [r4, r2]
 801f0b4:	e7ab      	b.n	801f00e <_malloc_r+0x22>
 801f0b6:	42a3      	cmp	r3, r4
 801f0b8:	6862      	ldr	r2, [r4, #4]
 801f0ba:	d1dd      	bne.n	801f078 <_malloc_r+0x8c>
 801f0bc:	f8c8 2000 	str.w	r2, [r8]
 801f0c0:	e7ec      	b.n	801f09c <_malloc_r+0xb0>
 801f0c2:	4623      	mov	r3, r4
 801f0c4:	6864      	ldr	r4, [r4, #4]
 801f0c6:	e7ac      	b.n	801f022 <_malloc_r+0x36>
 801f0c8:	4634      	mov	r4, r6
 801f0ca:	6876      	ldr	r6, [r6, #4]
 801f0cc:	e7b4      	b.n	801f038 <_malloc_r+0x4c>
 801f0ce:	4613      	mov	r3, r2
 801f0d0:	e7cc      	b.n	801f06c <_malloc_r+0x80>
 801f0d2:	230c      	movs	r3, #12
 801f0d4:	603b      	str	r3, [r7, #0]
 801f0d6:	4638      	mov	r0, r7
 801f0d8:	f000 f80e 	bl	801f0f8 <__malloc_unlock>
 801f0dc:	e797      	b.n	801f00e <_malloc_r+0x22>
 801f0de:	6025      	str	r5, [r4, #0]
 801f0e0:	e7dc      	b.n	801f09c <_malloc_r+0xb0>
 801f0e2:	605b      	str	r3, [r3, #4]
 801f0e4:	deff      	udf	#255	; 0xff
 801f0e6:	bf00      	nop
 801f0e8:	20016a78 	.word	0x20016a78

0801f0ec <__malloc_lock>:
 801f0ec:	4801      	ldr	r0, [pc, #4]	; (801f0f4 <__malloc_lock+0x8>)
 801f0ee:	f7ff b875 	b.w	801e1dc <__retarget_lock_acquire_recursive>
 801f0f2:	bf00      	nop
 801f0f4:	20016a74 	.word	0x20016a74

0801f0f8 <__malloc_unlock>:
 801f0f8:	4801      	ldr	r0, [pc, #4]	; (801f100 <__malloc_unlock+0x8>)
 801f0fa:	f7ff b870 	b.w	801e1de <__retarget_lock_release_recursive>
 801f0fe:	bf00      	nop
 801f100:	20016a74 	.word	0x20016a74

0801f104 <_Balloc>:
 801f104:	b570      	push	{r4, r5, r6, lr}
 801f106:	69c6      	ldr	r6, [r0, #28]
 801f108:	4604      	mov	r4, r0
 801f10a:	460d      	mov	r5, r1
 801f10c:	b976      	cbnz	r6, 801f12c <_Balloc+0x28>
 801f10e:	2010      	movs	r0, #16
 801f110:	f7ff ff44 	bl	801ef9c <malloc>
 801f114:	4602      	mov	r2, r0
 801f116:	61e0      	str	r0, [r4, #28]
 801f118:	b920      	cbnz	r0, 801f124 <_Balloc+0x20>
 801f11a:	4b18      	ldr	r3, [pc, #96]	; (801f17c <_Balloc+0x78>)
 801f11c:	4818      	ldr	r0, [pc, #96]	; (801f180 <_Balloc+0x7c>)
 801f11e:	216b      	movs	r1, #107	; 0x6b
 801f120:	f7fe fa36 	bl	801d590 <__assert_func>
 801f124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f128:	6006      	str	r6, [r0, #0]
 801f12a:	60c6      	str	r6, [r0, #12]
 801f12c:	69e6      	ldr	r6, [r4, #28]
 801f12e:	68f3      	ldr	r3, [r6, #12]
 801f130:	b183      	cbz	r3, 801f154 <_Balloc+0x50>
 801f132:	69e3      	ldr	r3, [r4, #28]
 801f134:	68db      	ldr	r3, [r3, #12]
 801f136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f13a:	b9b8      	cbnz	r0, 801f16c <_Balloc+0x68>
 801f13c:	2101      	movs	r1, #1
 801f13e:	fa01 f605 	lsl.w	r6, r1, r5
 801f142:	1d72      	adds	r2, r6, #5
 801f144:	0092      	lsls	r2, r2, #2
 801f146:	4620      	mov	r0, r4
 801f148:	f000 ffa6 	bl	8020098 <_calloc_r>
 801f14c:	b160      	cbz	r0, 801f168 <_Balloc+0x64>
 801f14e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f152:	e00e      	b.n	801f172 <_Balloc+0x6e>
 801f154:	2221      	movs	r2, #33	; 0x21
 801f156:	2104      	movs	r1, #4
 801f158:	4620      	mov	r0, r4
 801f15a:	f000 ff9d 	bl	8020098 <_calloc_r>
 801f15e:	69e3      	ldr	r3, [r4, #28]
 801f160:	60f0      	str	r0, [r6, #12]
 801f162:	68db      	ldr	r3, [r3, #12]
 801f164:	2b00      	cmp	r3, #0
 801f166:	d1e4      	bne.n	801f132 <_Balloc+0x2e>
 801f168:	2000      	movs	r0, #0
 801f16a:	bd70      	pop	{r4, r5, r6, pc}
 801f16c:	6802      	ldr	r2, [r0, #0]
 801f16e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f172:	2300      	movs	r3, #0
 801f174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f178:	e7f7      	b.n	801f16a <_Balloc+0x66>
 801f17a:	bf00      	nop
 801f17c:	080233fc 	.word	0x080233fc
 801f180:	0802347c 	.word	0x0802347c

0801f184 <_Bfree>:
 801f184:	b570      	push	{r4, r5, r6, lr}
 801f186:	69c6      	ldr	r6, [r0, #28]
 801f188:	4605      	mov	r5, r0
 801f18a:	460c      	mov	r4, r1
 801f18c:	b976      	cbnz	r6, 801f1ac <_Bfree+0x28>
 801f18e:	2010      	movs	r0, #16
 801f190:	f7ff ff04 	bl	801ef9c <malloc>
 801f194:	4602      	mov	r2, r0
 801f196:	61e8      	str	r0, [r5, #28]
 801f198:	b920      	cbnz	r0, 801f1a4 <_Bfree+0x20>
 801f19a:	4b09      	ldr	r3, [pc, #36]	; (801f1c0 <_Bfree+0x3c>)
 801f19c:	4809      	ldr	r0, [pc, #36]	; (801f1c4 <_Bfree+0x40>)
 801f19e:	218f      	movs	r1, #143	; 0x8f
 801f1a0:	f7fe f9f6 	bl	801d590 <__assert_func>
 801f1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f1a8:	6006      	str	r6, [r0, #0]
 801f1aa:	60c6      	str	r6, [r0, #12]
 801f1ac:	b13c      	cbz	r4, 801f1be <_Bfree+0x3a>
 801f1ae:	69eb      	ldr	r3, [r5, #28]
 801f1b0:	6862      	ldr	r2, [r4, #4]
 801f1b2:	68db      	ldr	r3, [r3, #12]
 801f1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1b8:	6021      	str	r1, [r4, #0]
 801f1ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f1be:	bd70      	pop	{r4, r5, r6, pc}
 801f1c0:	080233fc 	.word	0x080233fc
 801f1c4:	0802347c 	.word	0x0802347c

0801f1c8 <__multadd>:
 801f1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1cc:	690d      	ldr	r5, [r1, #16]
 801f1ce:	4607      	mov	r7, r0
 801f1d0:	460c      	mov	r4, r1
 801f1d2:	461e      	mov	r6, r3
 801f1d4:	f101 0c14 	add.w	ip, r1, #20
 801f1d8:	2000      	movs	r0, #0
 801f1da:	f8dc 3000 	ldr.w	r3, [ip]
 801f1de:	b299      	uxth	r1, r3
 801f1e0:	fb02 6101 	mla	r1, r2, r1, r6
 801f1e4:	0c1e      	lsrs	r6, r3, #16
 801f1e6:	0c0b      	lsrs	r3, r1, #16
 801f1e8:	fb02 3306 	mla	r3, r2, r6, r3
 801f1ec:	b289      	uxth	r1, r1
 801f1ee:	3001      	adds	r0, #1
 801f1f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f1f4:	4285      	cmp	r5, r0
 801f1f6:	f84c 1b04 	str.w	r1, [ip], #4
 801f1fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f1fe:	dcec      	bgt.n	801f1da <__multadd+0x12>
 801f200:	b30e      	cbz	r6, 801f246 <__multadd+0x7e>
 801f202:	68a3      	ldr	r3, [r4, #8]
 801f204:	42ab      	cmp	r3, r5
 801f206:	dc19      	bgt.n	801f23c <__multadd+0x74>
 801f208:	6861      	ldr	r1, [r4, #4]
 801f20a:	4638      	mov	r0, r7
 801f20c:	3101      	adds	r1, #1
 801f20e:	f7ff ff79 	bl	801f104 <_Balloc>
 801f212:	4680      	mov	r8, r0
 801f214:	b928      	cbnz	r0, 801f222 <__multadd+0x5a>
 801f216:	4602      	mov	r2, r0
 801f218:	4b0c      	ldr	r3, [pc, #48]	; (801f24c <__multadd+0x84>)
 801f21a:	480d      	ldr	r0, [pc, #52]	; (801f250 <__multadd+0x88>)
 801f21c:	21ba      	movs	r1, #186	; 0xba
 801f21e:	f7fe f9b7 	bl	801d590 <__assert_func>
 801f222:	6922      	ldr	r2, [r4, #16]
 801f224:	3202      	adds	r2, #2
 801f226:	f104 010c 	add.w	r1, r4, #12
 801f22a:	0092      	lsls	r2, r2, #2
 801f22c:	300c      	adds	r0, #12
 801f22e:	f7fe ffd7 	bl	801e1e0 <memcpy>
 801f232:	4621      	mov	r1, r4
 801f234:	4638      	mov	r0, r7
 801f236:	f7ff ffa5 	bl	801f184 <_Bfree>
 801f23a:	4644      	mov	r4, r8
 801f23c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f240:	3501      	adds	r5, #1
 801f242:	615e      	str	r6, [r3, #20]
 801f244:	6125      	str	r5, [r4, #16]
 801f246:	4620      	mov	r0, r4
 801f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f24c:	0802346b 	.word	0x0802346b
 801f250:	0802347c 	.word	0x0802347c

0801f254 <__hi0bits>:
 801f254:	0c03      	lsrs	r3, r0, #16
 801f256:	041b      	lsls	r3, r3, #16
 801f258:	b9d3      	cbnz	r3, 801f290 <__hi0bits+0x3c>
 801f25a:	0400      	lsls	r0, r0, #16
 801f25c:	2310      	movs	r3, #16
 801f25e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f262:	bf04      	itt	eq
 801f264:	0200      	lsleq	r0, r0, #8
 801f266:	3308      	addeq	r3, #8
 801f268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f26c:	bf04      	itt	eq
 801f26e:	0100      	lsleq	r0, r0, #4
 801f270:	3304      	addeq	r3, #4
 801f272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f276:	bf04      	itt	eq
 801f278:	0080      	lsleq	r0, r0, #2
 801f27a:	3302      	addeq	r3, #2
 801f27c:	2800      	cmp	r0, #0
 801f27e:	db05      	blt.n	801f28c <__hi0bits+0x38>
 801f280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f284:	f103 0301 	add.w	r3, r3, #1
 801f288:	bf08      	it	eq
 801f28a:	2320      	moveq	r3, #32
 801f28c:	4618      	mov	r0, r3
 801f28e:	4770      	bx	lr
 801f290:	2300      	movs	r3, #0
 801f292:	e7e4      	b.n	801f25e <__hi0bits+0xa>

0801f294 <__lo0bits>:
 801f294:	6803      	ldr	r3, [r0, #0]
 801f296:	f013 0207 	ands.w	r2, r3, #7
 801f29a:	d00c      	beq.n	801f2b6 <__lo0bits+0x22>
 801f29c:	07d9      	lsls	r1, r3, #31
 801f29e:	d422      	bmi.n	801f2e6 <__lo0bits+0x52>
 801f2a0:	079a      	lsls	r2, r3, #30
 801f2a2:	bf49      	itett	mi
 801f2a4:	085b      	lsrmi	r3, r3, #1
 801f2a6:	089b      	lsrpl	r3, r3, #2
 801f2a8:	6003      	strmi	r3, [r0, #0]
 801f2aa:	2201      	movmi	r2, #1
 801f2ac:	bf5c      	itt	pl
 801f2ae:	6003      	strpl	r3, [r0, #0]
 801f2b0:	2202      	movpl	r2, #2
 801f2b2:	4610      	mov	r0, r2
 801f2b4:	4770      	bx	lr
 801f2b6:	b299      	uxth	r1, r3
 801f2b8:	b909      	cbnz	r1, 801f2be <__lo0bits+0x2a>
 801f2ba:	0c1b      	lsrs	r3, r3, #16
 801f2bc:	2210      	movs	r2, #16
 801f2be:	b2d9      	uxtb	r1, r3
 801f2c0:	b909      	cbnz	r1, 801f2c6 <__lo0bits+0x32>
 801f2c2:	3208      	adds	r2, #8
 801f2c4:	0a1b      	lsrs	r3, r3, #8
 801f2c6:	0719      	lsls	r1, r3, #28
 801f2c8:	bf04      	itt	eq
 801f2ca:	091b      	lsreq	r3, r3, #4
 801f2cc:	3204      	addeq	r2, #4
 801f2ce:	0799      	lsls	r1, r3, #30
 801f2d0:	bf04      	itt	eq
 801f2d2:	089b      	lsreq	r3, r3, #2
 801f2d4:	3202      	addeq	r2, #2
 801f2d6:	07d9      	lsls	r1, r3, #31
 801f2d8:	d403      	bmi.n	801f2e2 <__lo0bits+0x4e>
 801f2da:	085b      	lsrs	r3, r3, #1
 801f2dc:	f102 0201 	add.w	r2, r2, #1
 801f2e0:	d003      	beq.n	801f2ea <__lo0bits+0x56>
 801f2e2:	6003      	str	r3, [r0, #0]
 801f2e4:	e7e5      	b.n	801f2b2 <__lo0bits+0x1e>
 801f2e6:	2200      	movs	r2, #0
 801f2e8:	e7e3      	b.n	801f2b2 <__lo0bits+0x1e>
 801f2ea:	2220      	movs	r2, #32
 801f2ec:	e7e1      	b.n	801f2b2 <__lo0bits+0x1e>
	...

0801f2f0 <__i2b>:
 801f2f0:	b510      	push	{r4, lr}
 801f2f2:	460c      	mov	r4, r1
 801f2f4:	2101      	movs	r1, #1
 801f2f6:	f7ff ff05 	bl	801f104 <_Balloc>
 801f2fa:	4602      	mov	r2, r0
 801f2fc:	b928      	cbnz	r0, 801f30a <__i2b+0x1a>
 801f2fe:	4b05      	ldr	r3, [pc, #20]	; (801f314 <__i2b+0x24>)
 801f300:	4805      	ldr	r0, [pc, #20]	; (801f318 <__i2b+0x28>)
 801f302:	f240 1145 	movw	r1, #325	; 0x145
 801f306:	f7fe f943 	bl	801d590 <__assert_func>
 801f30a:	2301      	movs	r3, #1
 801f30c:	6144      	str	r4, [r0, #20]
 801f30e:	6103      	str	r3, [r0, #16]
 801f310:	bd10      	pop	{r4, pc}
 801f312:	bf00      	nop
 801f314:	0802346b 	.word	0x0802346b
 801f318:	0802347c 	.word	0x0802347c

0801f31c <__multiply>:
 801f31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f320:	4691      	mov	r9, r2
 801f322:	690a      	ldr	r2, [r1, #16]
 801f324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f328:	429a      	cmp	r2, r3
 801f32a:	bfb8      	it	lt
 801f32c:	460b      	movlt	r3, r1
 801f32e:	460c      	mov	r4, r1
 801f330:	bfbc      	itt	lt
 801f332:	464c      	movlt	r4, r9
 801f334:	4699      	movlt	r9, r3
 801f336:	6927      	ldr	r7, [r4, #16]
 801f338:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f33c:	68a3      	ldr	r3, [r4, #8]
 801f33e:	6861      	ldr	r1, [r4, #4]
 801f340:	eb07 060a 	add.w	r6, r7, sl
 801f344:	42b3      	cmp	r3, r6
 801f346:	b085      	sub	sp, #20
 801f348:	bfb8      	it	lt
 801f34a:	3101      	addlt	r1, #1
 801f34c:	f7ff feda 	bl	801f104 <_Balloc>
 801f350:	b930      	cbnz	r0, 801f360 <__multiply+0x44>
 801f352:	4602      	mov	r2, r0
 801f354:	4b44      	ldr	r3, [pc, #272]	; (801f468 <__multiply+0x14c>)
 801f356:	4845      	ldr	r0, [pc, #276]	; (801f46c <__multiply+0x150>)
 801f358:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801f35c:	f7fe f918 	bl	801d590 <__assert_func>
 801f360:	f100 0514 	add.w	r5, r0, #20
 801f364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f368:	462b      	mov	r3, r5
 801f36a:	2200      	movs	r2, #0
 801f36c:	4543      	cmp	r3, r8
 801f36e:	d321      	bcc.n	801f3b4 <__multiply+0x98>
 801f370:	f104 0314 	add.w	r3, r4, #20
 801f374:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f378:	f109 0314 	add.w	r3, r9, #20
 801f37c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f380:	9202      	str	r2, [sp, #8]
 801f382:	1b3a      	subs	r2, r7, r4
 801f384:	3a15      	subs	r2, #21
 801f386:	f022 0203 	bic.w	r2, r2, #3
 801f38a:	3204      	adds	r2, #4
 801f38c:	f104 0115 	add.w	r1, r4, #21
 801f390:	428f      	cmp	r7, r1
 801f392:	bf38      	it	cc
 801f394:	2204      	movcc	r2, #4
 801f396:	9201      	str	r2, [sp, #4]
 801f398:	9a02      	ldr	r2, [sp, #8]
 801f39a:	9303      	str	r3, [sp, #12]
 801f39c:	429a      	cmp	r2, r3
 801f39e:	d80c      	bhi.n	801f3ba <__multiply+0x9e>
 801f3a0:	2e00      	cmp	r6, #0
 801f3a2:	dd03      	ble.n	801f3ac <__multiply+0x90>
 801f3a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d05b      	beq.n	801f464 <__multiply+0x148>
 801f3ac:	6106      	str	r6, [r0, #16]
 801f3ae:	b005      	add	sp, #20
 801f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3b4:	f843 2b04 	str.w	r2, [r3], #4
 801f3b8:	e7d8      	b.n	801f36c <__multiply+0x50>
 801f3ba:	f8b3 a000 	ldrh.w	sl, [r3]
 801f3be:	f1ba 0f00 	cmp.w	sl, #0
 801f3c2:	d024      	beq.n	801f40e <__multiply+0xf2>
 801f3c4:	f104 0e14 	add.w	lr, r4, #20
 801f3c8:	46a9      	mov	r9, r5
 801f3ca:	f04f 0c00 	mov.w	ip, #0
 801f3ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f3d2:	f8d9 1000 	ldr.w	r1, [r9]
 801f3d6:	fa1f fb82 	uxth.w	fp, r2
 801f3da:	b289      	uxth	r1, r1
 801f3dc:	fb0a 110b 	mla	r1, sl, fp, r1
 801f3e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f3e4:	f8d9 2000 	ldr.w	r2, [r9]
 801f3e8:	4461      	add	r1, ip
 801f3ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f3ee:	fb0a c20b 	mla	r2, sl, fp, ip
 801f3f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f3f6:	b289      	uxth	r1, r1
 801f3f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f3fc:	4577      	cmp	r7, lr
 801f3fe:	f849 1b04 	str.w	r1, [r9], #4
 801f402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f406:	d8e2      	bhi.n	801f3ce <__multiply+0xb2>
 801f408:	9a01      	ldr	r2, [sp, #4]
 801f40a:	f845 c002 	str.w	ip, [r5, r2]
 801f40e:	9a03      	ldr	r2, [sp, #12]
 801f410:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f414:	3304      	adds	r3, #4
 801f416:	f1b9 0f00 	cmp.w	r9, #0
 801f41a:	d021      	beq.n	801f460 <__multiply+0x144>
 801f41c:	6829      	ldr	r1, [r5, #0]
 801f41e:	f104 0c14 	add.w	ip, r4, #20
 801f422:	46ae      	mov	lr, r5
 801f424:	f04f 0a00 	mov.w	sl, #0
 801f428:	f8bc b000 	ldrh.w	fp, [ip]
 801f42c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f430:	fb09 220b 	mla	r2, r9, fp, r2
 801f434:	4452      	add	r2, sl
 801f436:	b289      	uxth	r1, r1
 801f438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f43c:	f84e 1b04 	str.w	r1, [lr], #4
 801f440:	f85c 1b04 	ldr.w	r1, [ip], #4
 801f444:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f448:	f8be 1000 	ldrh.w	r1, [lr]
 801f44c:	fb09 110a 	mla	r1, r9, sl, r1
 801f450:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801f454:	4567      	cmp	r7, ip
 801f456:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f45a:	d8e5      	bhi.n	801f428 <__multiply+0x10c>
 801f45c:	9a01      	ldr	r2, [sp, #4]
 801f45e:	50a9      	str	r1, [r5, r2]
 801f460:	3504      	adds	r5, #4
 801f462:	e799      	b.n	801f398 <__multiply+0x7c>
 801f464:	3e01      	subs	r6, #1
 801f466:	e79b      	b.n	801f3a0 <__multiply+0x84>
 801f468:	0802346b 	.word	0x0802346b
 801f46c:	0802347c 	.word	0x0802347c

0801f470 <__pow5mult>:
 801f470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f474:	4615      	mov	r5, r2
 801f476:	f012 0203 	ands.w	r2, r2, #3
 801f47a:	4606      	mov	r6, r0
 801f47c:	460f      	mov	r7, r1
 801f47e:	d007      	beq.n	801f490 <__pow5mult+0x20>
 801f480:	4c25      	ldr	r4, [pc, #148]	; (801f518 <__pow5mult+0xa8>)
 801f482:	3a01      	subs	r2, #1
 801f484:	2300      	movs	r3, #0
 801f486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f48a:	f7ff fe9d 	bl	801f1c8 <__multadd>
 801f48e:	4607      	mov	r7, r0
 801f490:	10ad      	asrs	r5, r5, #2
 801f492:	d03d      	beq.n	801f510 <__pow5mult+0xa0>
 801f494:	69f4      	ldr	r4, [r6, #28]
 801f496:	b97c      	cbnz	r4, 801f4b8 <__pow5mult+0x48>
 801f498:	2010      	movs	r0, #16
 801f49a:	f7ff fd7f 	bl	801ef9c <malloc>
 801f49e:	4602      	mov	r2, r0
 801f4a0:	61f0      	str	r0, [r6, #28]
 801f4a2:	b928      	cbnz	r0, 801f4b0 <__pow5mult+0x40>
 801f4a4:	4b1d      	ldr	r3, [pc, #116]	; (801f51c <__pow5mult+0xac>)
 801f4a6:	481e      	ldr	r0, [pc, #120]	; (801f520 <__pow5mult+0xb0>)
 801f4a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 801f4ac:	f7fe f870 	bl	801d590 <__assert_func>
 801f4b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f4b4:	6004      	str	r4, [r0, #0]
 801f4b6:	60c4      	str	r4, [r0, #12]
 801f4b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801f4bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f4c0:	b94c      	cbnz	r4, 801f4d6 <__pow5mult+0x66>
 801f4c2:	f240 2171 	movw	r1, #625	; 0x271
 801f4c6:	4630      	mov	r0, r6
 801f4c8:	f7ff ff12 	bl	801f2f0 <__i2b>
 801f4cc:	2300      	movs	r3, #0
 801f4ce:	f8c8 0008 	str.w	r0, [r8, #8]
 801f4d2:	4604      	mov	r4, r0
 801f4d4:	6003      	str	r3, [r0, #0]
 801f4d6:	f04f 0900 	mov.w	r9, #0
 801f4da:	07eb      	lsls	r3, r5, #31
 801f4dc:	d50a      	bpl.n	801f4f4 <__pow5mult+0x84>
 801f4de:	4639      	mov	r1, r7
 801f4e0:	4622      	mov	r2, r4
 801f4e2:	4630      	mov	r0, r6
 801f4e4:	f7ff ff1a 	bl	801f31c <__multiply>
 801f4e8:	4639      	mov	r1, r7
 801f4ea:	4680      	mov	r8, r0
 801f4ec:	4630      	mov	r0, r6
 801f4ee:	f7ff fe49 	bl	801f184 <_Bfree>
 801f4f2:	4647      	mov	r7, r8
 801f4f4:	106d      	asrs	r5, r5, #1
 801f4f6:	d00b      	beq.n	801f510 <__pow5mult+0xa0>
 801f4f8:	6820      	ldr	r0, [r4, #0]
 801f4fa:	b938      	cbnz	r0, 801f50c <__pow5mult+0x9c>
 801f4fc:	4622      	mov	r2, r4
 801f4fe:	4621      	mov	r1, r4
 801f500:	4630      	mov	r0, r6
 801f502:	f7ff ff0b 	bl	801f31c <__multiply>
 801f506:	6020      	str	r0, [r4, #0]
 801f508:	f8c0 9000 	str.w	r9, [r0]
 801f50c:	4604      	mov	r4, r0
 801f50e:	e7e4      	b.n	801f4da <__pow5mult+0x6a>
 801f510:	4638      	mov	r0, r7
 801f512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f516:	bf00      	nop
 801f518:	080235c8 	.word	0x080235c8
 801f51c:	080233fc 	.word	0x080233fc
 801f520:	0802347c 	.word	0x0802347c

0801f524 <__lshift>:
 801f524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f528:	460c      	mov	r4, r1
 801f52a:	6849      	ldr	r1, [r1, #4]
 801f52c:	6923      	ldr	r3, [r4, #16]
 801f52e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f532:	68a3      	ldr	r3, [r4, #8]
 801f534:	4607      	mov	r7, r0
 801f536:	4691      	mov	r9, r2
 801f538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f53c:	f108 0601 	add.w	r6, r8, #1
 801f540:	42b3      	cmp	r3, r6
 801f542:	db0b      	blt.n	801f55c <__lshift+0x38>
 801f544:	4638      	mov	r0, r7
 801f546:	f7ff fddd 	bl	801f104 <_Balloc>
 801f54a:	4605      	mov	r5, r0
 801f54c:	b948      	cbnz	r0, 801f562 <__lshift+0x3e>
 801f54e:	4602      	mov	r2, r0
 801f550:	4b28      	ldr	r3, [pc, #160]	; (801f5f4 <__lshift+0xd0>)
 801f552:	4829      	ldr	r0, [pc, #164]	; (801f5f8 <__lshift+0xd4>)
 801f554:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801f558:	f7fe f81a 	bl	801d590 <__assert_func>
 801f55c:	3101      	adds	r1, #1
 801f55e:	005b      	lsls	r3, r3, #1
 801f560:	e7ee      	b.n	801f540 <__lshift+0x1c>
 801f562:	2300      	movs	r3, #0
 801f564:	f100 0114 	add.w	r1, r0, #20
 801f568:	f100 0210 	add.w	r2, r0, #16
 801f56c:	4618      	mov	r0, r3
 801f56e:	4553      	cmp	r3, sl
 801f570:	db33      	blt.n	801f5da <__lshift+0xb6>
 801f572:	6920      	ldr	r0, [r4, #16]
 801f574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f578:	f104 0314 	add.w	r3, r4, #20
 801f57c:	f019 091f 	ands.w	r9, r9, #31
 801f580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f588:	d02b      	beq.n	801f5e2 <__lshift+0xbe>
 801f58a:	f1c9 0e20 	rsb	lr, r9, #32
 801f58e:	468a      	mov	sl, r1
 801f590:	2200      	movs	r2, #0
 801f592:	6818      	ldr	r0, [r3, #0]
 801f594:	fa00 f009 	lsl.w	r0, r0, r9
 801f598:	4310      	orrs	r0, r2
 801f59a:	f84a 0b04 	str.w	r0, [sl], #4
 801f59e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f5a2:	459c      	cmp	ip, r3
 801f5a4:	fa22 f20e 	lsr.w	r2, r2, lr
 801f5a8:	d8f3      	bhi.n	801f592 <__lshift+0x6e>
 801f5aa:	ebac 0304 	sub.w	r3, ip, r4
 801f5ae:	3b15      	subs	r3, #21
 801f5b0:	f023 0303 	bic.w	r3, r3, #3
 801f5b4:	3304      	adds	r3, #4
 801f5b6:	f104 0015 	add.w	r0, r4, #21
 801f5ba:	4584      	cmp	ip, r0
 801f5bc:	bf38      	it	cc
 801f5be:	2304      	movcc	r3, #4
 801f5c0:	50ca      	str	r2, [r1, r3]
 801f5c2:	b10a      	cbz	r2, 801f5c8 <__lshift+0xa4>
 801f5c4:	f108 0602 	add.w	r6, r8, #2
 801f5c8:	3e01      	subs	r6, #1
 801f5ca:	4638      	mov	r0, r7
 801f5cc:	612e      	str	r6, [r5, #16]
 801f5ce:	4621      	mov	r1, r4
 801f5d0:	f7ff fdd8 	bl	801f184 <_Bfree>
 801f5d4:	4628      	mov	r0, r5
 801f5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5da:	f842 0f04 	str.w	r0, [r2, #4]!
 801f5de:	3301      	adds	r3, #1
 801f5e0:	e7c5      	b.n	801f56e <__lshift+0x4a>
 801f5e2:	3904      	subs	r1, #4
 801f5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 801f5e8:	f841 2f04 	str.w	r2, [r1, #4]!
 801f5ec:	459c      	cmp	ip, r3
 801f5ee:	d8f9      	bhi.n	801f5e4 <__lshift+0xc0>
 801f5f0:	e7ea      	b.n	801f5c8 <__lshift+0xa4>
 801f5f2:	bf00      	nop
 801f5f4:	0802346b 	.word	0x0802346b
 801f5f8:	0802347c 	.word	0x0802347c

0801f5fc <__mcmp>:
 801f5fc:	b530      	push	{r4, r5, lr}
 801f5fe:	6902      	ldr	r2, [r0, #16]
 801f600:	690c      	ldr	r4, [r1, #16]
 801f602:	1b12      	subs	r2, r2, r4
 801f604:	d10e      	bne.n	801f624 <__mcmp+0x28>
 801f606:	f100 0314 	add.w	r3, r0, #20
 801f60a:	3114      	adds	r1, #20
 801f60c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f61c:	42a5      	cmp	r5, r4
 801f61e:	d003      	beq.n	801f628 <__mcmp+0x2c>
 801f620:	d305      	bcc.n	801f62e <__mcmp+0x32>
 801f622:	2201      	movs	r2, #1
 801f624:	4610      	mov	r0, r2
 801f626:	bd30      	pop	{r4, r5, pc}
 801f628:	4283      	cmp	r3, r0
 801f62a:	d3f3      	bcc.n	801f614 <__mcmp+0x18>
 801f62c:	e7fa      	b.n	801f624 <__mcmp+0x28>
 801f62e:	f04f 32ff 	mov.w	r2, #4294967295
 801f632:	e7f7      	b.n	801f624 <__mcmp+0x28>

0801f634 <__mdiff>:
 801f634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f638:	460c      	mov	r4, r1
 801f63a:	4606      	mov	r6, r0
 801f63c:	4611      	mov	r1, r2
 801f63e:	4620      	mov	r0, r4
 801f640:	4690      	mov	r8, r2
 801f642:	f7ff ffdb 	bl	801f5fc <__mcmp>
 801f646:	1e05      	subs	r5, r0, #0
 801f648:	d110      	bne.n	801f66c <__mdiff+0x38>
 801f64a:	4629      	mov	r1, r5
 801f64c:	4630      	mov	r0, r6
 801f64e:	f7ff fd59 	bl	801f104 <_Balloc>
 801f652:	b930      	cbnz	r0, 801f662 <__mdiff+0x2e>
 801f654:	4b3a      	ldr	r3, [pc, #232]	; (801f740 <__mdiff+0x10c>)
 801f656:	4602      	mov	r2, r0
 801f658:	f240 2137 	movw	r1, #567	; 0x237
 801f65c:	4839      	ldr	r0, [pc, #228]	; (801f744 <__mdiff+0x110>)
 801f65e:	f7fd ff97 	bl	801d590 <__assert_func>
 801f662:	2301      	movs	r3, #1
 801f664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f66c:	bfa4      	itt	ge
 801f66e:	4643      	movge	r3, r8
 801f670:	46a0      	movge	r8, r4
 801f672:	4630      	mov	r0, r6
 801f674:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f678:	bfa6      	itte	ge
 801f67a:	461c      	movge	r4, r3
 801f67c:	2500      	movge	r5, #0
 801f67e:	2501      	movlt	r5, #1
 801f680:	f7ff fd40 	bl	801f104 <_Balloc>
 801f684:	b920      	cbnz	r0, 801f690 <__mdiff+0x5c>
 801f686:	4b2e      	ldr	r3, [pc, #184]	; (801f740 <__mdiff+0x10c>)
 801f688:	4602      	mov	r2, r0
 801f68a:	f240 2145 	movw	r1, #581	; 0x245
 801f68e:	e7e5      	b.n	801f65c <__mdiff+0x28>
 801f690:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f694:	6926      	ldr	r6, [r4, #16]
 801f696:	60c5      	str	r5, [r0, #12]
 801f698:	f104 0914 	add.w	r9, r4, #20
 801f69c:	f108 0514 	add.w	r5, r8, #20
 801f6a0:	f100 0e14 	add.w	lr, r0, #20
 801f6a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f6a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f6ac:	f108 0210 	add.w	r2, r8, #16
 801f6b0:	46f2      	mov	sl, lr
 801f6b2:	2100      	movs	r1, #0
 801f6b4:	f859 3b04 	ldr.w	r3, [r9], #4
 801f6b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f6bc:	fa11 f88b 	uxtah	r8, r1, fp
 801f6c0:	b299      	uxth	r1, r3
 801f6c2:	0c1b      	lsrs	r3, r3, #16
 801f6c4:	eba8 0801 	sub.w	r8, r8, r1
 801f6c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f6cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f6d0:	fa1f f888 	uxth.w	r8, r8
 801f6d4:	1419      	asrs	r1, r3, #16
 801f6d6:	454e      	cmp	r6, r9
 801f6d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f6dc:	f84a 3b04 	str.w	r3, [sl], #4
 801f6e0:	d8e8      	bhi.n	801f6b4 <__mdiff+0x80>
 801f6e2:	1b33      	subs	r3, r6, r4
 801f6e4:	3b15      	subs	r3, #21
 801f6e6:	f023 0303 	bic.w	r3, r3, #3
 801f6ea:	3304      	adds	r3, #4
 801f6ec:	3415      	adds	r4, #21
 801f6ee:	42a6      	cmp	r6, r4
 801f6f0:	bf38      	it	cc
 801f6f2:	2304      	movcc	r3, #4
 801f6f4:	441d      	add	r5, r3
 801f6f6:	4473      	add	r3, lr
 801f6f8:	469e      	mov	lr, r3
 801f6fa:	462e      	mov	r6, r5
 801f6fc:	4566      	cmp	r6, ip
 801f6fe:	d30e      	bcc.n	801f71e <__mdiff+0xea>
 801f700:	f10c 0203 	add.w	r2, ip, #3
 801f704:	1b52      	subs	r2, r2, r5
 801f706:	f022 0203 	bic.w	r2, r2, #3
 801f70a:	3d03      	subs	r5, #3
 801f70c:	45ac      	cmp	ip, r5
 801f70e:	bf38      	it	cc
 801f710:	2200      	movcc	r2, #0
 801f712:	4413      	add	r3, r2
 801f714:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f718:	b17a      	cbz	r2, 801f73a <__mdiff+0x106>
 801f71a:	6107      	str	r7, [r0, #16]
 801f71c:	e7a4      	b.n	801f668 <__mdiff+0x34>
 801f71e:	f856 8b04 	ldr.w	r8, [r6], #4
 801f722:	fa11 f288 	uxtah	r2, r1, r8
 801f726:	1414      	asrs	r4, r2, #16
 801f728:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f72c:	b292      	uxth	r2, r2
 801f72e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f732:	f84e 2b04 	str.w	r2, [lr], #4
 801f736:	1421      	asrs	r1, r4, #16
 801f738:	e7e0      	b.n	801f6fc <__mdiff+0xc8>
 801f73a:	3f01      	subs	r7, #1
 801f73c:	e7ea      	b.n	801f714 <__mdiff+0xe0>
 801f73e:	bf00      	nop
 801f740:	0802346b 	.word	0x0802346b
 801f744:	0802347c 	.word	0x0802347c

0801f748 <__d2b>:
 801f748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f74c:	460f      	mov	r7, r1
 801f74e:	2101      	movs	r1, #1
 801f750:	ec59 8b10 	vmov	r8, r9, d0
 801f754:	4616      	mov	r6, r2
 801f756:	f7ff fcd5 	bl	801f104 <_Balloc>
 801f75a:	4604      	mov	r4, r0
 801f75c:	b930      	cbnz	r0, 801f76c <__d2b+0x24>
 801f75e:	4602      	mov	r2, r0
 801f760:	4b24      	ldr	r3, [pc, #144]	; (801f7f4 <__d2b+0xac>)
 801f762:	4825      	ldr	r0, [pc, #148]	; (801f7f8 <__d2b+0xb0>)
 801f764:	f240 310f 	movw	r1, #783	; 0x30f
 801f768:	f7fd ff12 	bl	801d590 <__assert_func>
 801f76c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f774:	bb2d      	cbnz	r5, 801f7c2 <__d2b+0x7a>
 801f776:	9301      	str	r3, [sp, #4]
 801f778:	f1b8 0300 	subs.w	r3, r8, #0
 801f77c:	d026      	beq.n	801f7cc <__d2b+0x84>
 801f77e:	4668      	mov	r0, sp
 801f780:	9300      	str	r3, [sp, #0]
 801f782:	f7ff fd87 	bl	801f294 <__lo0bits>
 801f786:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f78a:	b1e8      	cbz	r0, 801f7c8 <__d2b+0x80>
 801f78c:	f1c0 0320 	rsb	r3, r0, #32
 801f790:	fa02 f303 	lsl.w	r3, r2, r3
 801f794:	430b      	orrs	r3, r1
 801f796:	40c2      	lsrs	r2, r0
 801f798:	6163      	str	r3, [r4, #20]
 801f79a:	9201      	str	r2, [sp, #4]
 801f79c:	9b01      	ldr	r3, [sp, #4]
 801f79e:	61a3      	str	r3, [r4, #24]
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	bf14      	ite	ne
 801f7a4:	2202      	movne	r2, #2
 801f7a6:	2201      	moveq	r2, #1
 801f7a8:	6122      	str	r2, [r4, #16]
 801f7aa:	b1bd      	cbz	r5, 801f7dc <__d2b+0x94>
 801f7ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f7b0:	4405      	add	r5, r0
 801f7b2:	603d      	str	r5, [r7, #0]
 801f7b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f7b8:	6030      	str	r0, [r6, #0]
 801f7ba:	4620      	mov	r0, r4
 801f7bc:	b003      	add	sp, #12
 801f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f7c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f7c6:	e7d6      	b.n	801f776 <__d2b+0x2e>
 801f7c8:	6161      	str	r1, [r4, #20]
 801f7ca:	e7e7      	b.n	801f79c <__d2b+0x54>
 801f7cc:	a801      	add	r0, sp, #4
 801f7ce:	f7ff fd61 	bl	801f294 <__lo0bits>
 801f7d2:	9b01      	ldr	r3, [sp, #4]
 801f7d4:	6163      	str	r3, [r4, #20]
 801f7d6:	3020      	adds	r0, #32
 801f7d8:	2201      	movs	r2, #1
 801f7da:	e7e5      	b.n	801f7a8 <__d2b+0x60>
 801f7dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f7e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f7e4:	6038      	str	r0, [r7, #0]
 801f7e6:	6918      	ldr	r0, [r3, #16]
 801f7e8:	f7ff fd34 	bl	801f254 <__hi0bits>
 801f7ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f7f0:	e7e2      	b.n	801f7b8 <__d2b+0x70>
 801f7f2:	bf00      	nop
 801f7f4:	0802346b 	.word	0x0802346b
 801f7f8:	0802347c 	.word	0x0802347c

0801f7fc <__ssputs_r>:
 801f7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f800:	688e      	ldr	r6, [r1, #8]
 801f802:	461f      	mov	r7, r3
 801f804:	42be      	cmp	r6, r7
 801f806:	680b      	ldr	r3, [r1, #0]
 801f808:	4682      	mov	sl, r0
 801f80a:	460c      	mov	r4, r1
 801f80c:	4690      	mov	r8, r2
 801f80e:	d82c      	bhi.n	801f86a <__ssputs_r+0x6e>
 801f810:	898a      	ldrh	r2, [r1, #12]
 801f812:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f816:	d026      	beq.n	801f866 <__ssputs_r+0x6a>
 801f818:	6965      	ldr	r5, [r4, #20]
 801f81a:	6909      	ldr	r1, [r1, #16]
 801f81c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f820:	eba3 0901 	sub.w	r9, r3, r1
 801f824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f828:	1c7b      	adds	r3, r7, #1
 801f82a:	444b      	add	r3, r9
 801f82c:	106d      	asrs	r5, r5, #1
 801f82e:	429d      	cmp	r5, r3
 801f830:	bf38      	it	cc
 801f832:	461d      	movcc	r5, r3
 801f834:	0553      	lsls	r3, r2, #21
 801f836:	d527      	bpl.n	801f888 <__ssputs_r+0x8c>
 801f838:	4629      	mov	r1, r5
 801f83a:	f7ff fbd7 	bl	801efec <_malloc_r>
 801f83e:	4606      	mov	r6, r0
 801f840:	b360      	cbz	r0, 801f89c <__ssputs_r+0xa0>
 801f842:	6921      	ldr	r1, [r4, #16]
 801f844:	464a      	mov	r2, r9
 801f846:	f7fe fccb 	bl	801e1e0 <memcpy>
 801f84a:	89a3      	ldrh	r3, [r4, #12]
 801f84c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f854:	81a3      	strh	r3, [r4, #12]
 801f856:	6126      	str	r6, [r4, #16]
 801f858:	6165      	str	r5, [r4, #20]
 801f85a:	444e      	add	r6, r9
 801f85c:	eba5 0509 	sub.w	r5, r5, r9
 801f860:	6026      	str	r6, [r4, #0]
 801f862:	60a5      	str	r5, [r4, #8]
 801f864:	463e      	mov	r6, r7
 801f866:	42be      	cmp	r6, r7
 801f868:	d900      	bls.n	801f86c <__ssputs_r+0x70>
 801f86a:	463e      	mov	r6, r7
 801f86c:	6820      	ldr	r0, [r4, #0]
 801f86e:	4632      	mov	r2, r6
 801f870:	4641      	mov	r1, r8
 801f872:	f000 fba3 	bl	801ffbc <memmove>
 801f876:	68a3      	ldr	r3, [r4, #8]
 801f878:	1b9b      	subs	r3, r3, r6
 801f87a:	60a3      	str	r3, [r4, #8]
 801f87c:	6823      	ldr	r3, [r4, #0]
 801f87e:	4433      	add	r3, r6
 801f880:	6023      	str	r3, [r4, #0]
 801f882:	2000      	movs	r0, #0
 801f884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f888:	462a      	mov	r2, r5
 801f88a:	f000 fc2d 	bl	80200e8 <_realloc_r>
 801f88e:	4606      	mov	r6, r0
 801f890:	2800      	cmp	r0, #0
 801f892:	d1e0      	bne.n	801f856 <__ssputs_r+0x5a>
 801f894:	6921      	ldr	r1, [r4, #16]
 801f896:	4650      	mov	r0, sl
 801f898:	f7ff fb34 	bl	801ef04 <_free_r>
 801f89c:	230c      	movs	r3, #12
 801f89e:	f8ca 3000 	str.w	r3, [sl]
 801f8a2:	89a3      	ldrh	r3, [r4, #12]
 801f8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f8a8:	81a3      	strh	r3, [r4, #12]
 801f8aa:	f04f 30ff 	mov.w	r0, #4294967295
 801f8ae:	e7e9      	b.n	801f884 <__ssputs_r+0x88>

0801f8b0 <_svfiprintf_r>:
 801f8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8b4:	4698      	mov	r8, r3
 801f8b6:	898b      	ldrh	r3, [r1, #12]
 801f8b8:	061b      	lsls	r3, r3, #24
 801f8ba:	b09d      	sub	sp, #116	; 0x74
 801f8bc:	4607      	mov	r7, r0
 801f8be:	460d      	mov	r5, r1
 801f8c0:	4614      	mov	r4, r2
 801f8c2:	d50e      	bpl.n	801f8e2 <_svfiprintf_r+0x32>
 801f8c4:	690b      	ldr	r3, [r1, #16]
 801f8c6:	b963      	cbnz	r3, 801f8e2 <_svfiprintf_r+0x32>
 801f8c8:	2140      	movs	r1, #64	; 0x40
 801f8ca:	f7ff fb8f 	bl	801efec <_malloc_r>
 801f8ce:	6028      	str	r0, [r5, #0]
 801f8d0:	6128      	str	r0, [r5, #16]
 801f8d2:	b920      	cbnz	r0, 801f8de <_svfiprintf_r+0x2e>
 801f8d4:	230c      	movs	r3, #12
 801f8d6:	603b      	str	r3, [r7, #0]
 801f8d8:	f04f 30ff 	mov.w	r0, #4294967295
 801f8dc:	e0d0      	b.n	801fa80 <_svfiprintf_r+0x1d0>
 801f8de:	2340      	movs	r3, #64	; 0x40
 801f8e0:	616b      	str	r3, [r5, #20]
 801f8e2:	2300      	movs	r3, #0
 801f8e4:	9309      	str	r3, [sp, #36]	; 0x24
 801f8e6:	2320      	movs	r3, #32
 801f8e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f8ec:	f8cd 800c 	str.w	r8, [sp, #12]
 801f8f0:	2330      	movs	r3, #48	; 0x30
 801f8f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801fa98 <_svfiprintf_r+0x1e8>
 801f8f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f8fa:	f04f 0901 	mov.w	r9, #1
 801f8fe:	4623      	mov	r3, r4
 801f900:	469a      	mov	sl, r3
 801f902:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f906:	b10a      	cbz	r2, 801f90c <_svfiprintf_r+0x5c>
 801f908:	2a25      	cmp	r2, #37	; 0x25
 801f90a:	d1f9      	bne.n	801f900 <_svfiprintf_r+0x50>
 801f90c:	ebba 0b04 	subs.w	fp, sl, r4
 801f910:	d00b      	beq.n	801f92a <_svfiprintf_r+0x7a>
 801f912:	465b      	mov	r3, fp
 801f914:	4622      	mov	r2, r4
 801f916:	4629      	mov	r1, r5
 801f918:	4638      	mov	r0, r7
 801f91a:	f7ff ff6f 	bl	801f7fc <__ssputs_r>
 801f91e:	3001      	adds	r0, #1
 801f920:	f000 80a9 	beq.w	801fa76 <_svfiprintf_r+0x1c6>
 801f924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f926:	445a      	add	r2, fp
 801f928:	9209      	str	r2, [sp, #36]	; 0x24
 801f92a:	f89a 3000 	ldrb.w	r3, [sl]
 801f92e:	2b00      	cmp	r3, #0
 801f930:	f000 80a1 	beq.w	801fa76 <_svfiprintf_r+0x1c6>
 801f934:	2300      	movs	r3, #0
 801f936:	f04f 32ff 	mov.w	r2, #4294967295
 801f93a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f93e:	f10a 0a01 	add.w	sl, sl, #1
 801f942:	9304      	str	r3, [sp, #16]
 801f944:	9307      	str	r3, [sp, #28]
 801f946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f94a:	931a      	str	r3, [sp, #104]	; 0x68
 801f94c:	4654      	mov	r4, sl
 801f94e:	2205      	movs	r2, #5
 801f950:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f954:	4850      	ldr	r0, [pc, #320]	; (801fa98 <_svfiprintf_r+0x1e8>)
 801f956:	f7e0 fc63 	bl	8000220 <memchr>
 801f95a:	9a04      	ldr	r2, [sp, #16]
 801f95c:	b9d8      	cbnz	r0, 801f996 <_svfiprintf_r+0xe6>
 801f95e:	06d0      	lsls	r0, r2, #27
 801f960:	bf44      	itt	mi
 801f962:	2320      	movmi	r3, #32
 801f964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f968:	0711      	lsls	r1, r2, #28
 801f96a:	bf44      	itt	mi
 801f96c:	232b      	movmi	r3, #43	; 0x2b
 801f96e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f972:	f89a 3000 	ldrb.w	r3, [sl]
 801f976:	2b2a      	cmp	r3, #42	; 0x2a
 801f978:	d015      	beq.n	801f9a6 <_svfiprintf_r+0xf6>
 801f97a:	9a07      	ldr	r2, [sp, #28]
 801f97c:	4654      	mov	r4, sl
 801f97e:	2000      	movs	r0, #0
 801f980:	f04f 0c0a 	mov.w	ip, #10
 801f984:	4621      	mov	r1, r4
 801f986:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f98a:	3b30      	subs	r3, #48	; 0x30
 801f98c:	2b09      	cmp	r3, #9
 801f98e:	d94d      	bls.n	801fa2c <_svfiprintf_r+0x17c>
 801f990:	b1b0      	cbz	r0, 801f9c0 <_svfiprintf_r+0x110>
 801f992:	9207      	str	r2, [sp, #28]
 801f994:	e014      	b.n	801f9c0 <_svfiprintf_r+0x110>
 801f996:	eba0 0308 	sub.w	r3, r0, r8
 801f99a:	fa09 f303 	lsl.w	r3, r9, r3
 801f99e:	4313      	orrs	r3, r2
 801f9a0:	9304      	str	r3, [sp, #16]
 801f9a2:	46a2      	mov	sl, r4
 801f9a4:	e7d2      	b.n	801f94c <_svfiprintf_r+0x9c>
 801f9a6:	9b03      	ldr	r3, [sp, #12]
 801f9a8:	1d19      	adds	r1, r3, #4
 801f9aa:	681b      	ldr	r3, [r3, #0]
 801f9ac:	9103      	str	r1, [sp, #12]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	bfbb      	ittet	lt
 801f9b2:	425b      	neglt	r3, r3
 801f9b4:	f042 0202 	orrlt.w	r2, r2, #2
 801f9b8:	9307      	strge	r3, [sp, #28]
 801f9ba:	9307      	strlt	r3, [sp, #28]
 801f9bc:	bfb8      	it	lt
 801f9be:	9204      	strlt	r2, [sp, #16]
 801f9c0:	7823      	ldrb	r3, [r4, #0]
 801f9c2:	2b2e      	cmp	r3, #46	; 0x2e
 801f9c4:	d10c      	bne.n	801f9e0 <_svfiprintf_r+0x130>
 801f9c6:	7863      	ldrb	r3, [r4, #1]
 801f9c8:	2b2a      	cmp	r3, #42	; 0x2a
 801f9ca:	d134      	bne.n	801fa36 <_svfiprintf_r+0x186>
 801f9cc:	9b03      	ldr	r3, [sp, #12]
 801f9ce:	1d1a      	adds	r2, r3, #4
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	9203      	str	r2, [sp, #12]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	bfb8      	it	lt
 801f9d8:	f04f 33ff 	movlt.w	r3, #4294967295
 801f9dc:	3402      	adds	r4, #2
 801f9de:	9305      	str	r3, [sp, #20]
 801f9e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801faa8 <_svfiprintf_r+0x1f8>
 801f9e4:	7821      	ldrb	r1, [r4, #0]
 801f9e6:	2203      	movs	r2, #3
 801f9e8:	4650      	mov	r0, sl
 801f9ea:	f7e0 fc19 	bl	8000220 <memchr>
 801f9ee:	b138      	cbz	r0, 801fa00 <_svfiprintf_r+0x150>
 801f9f0:	9b04      	ldr	r3, [sp, #16]
 801f9f2:	eba0 000a 	sub.w	r0, r0, sl
 801f9f6:	2240      	movs	r2, #64	; 0x40
 801f9f8:	4082      	lsls	r2, r0
 801f9fa:	4313      	orrs	r3, r2
 801f9fc:	3401      	adds	r4, #1
 801f9fe:	9304      	str	r3, [sp, #16]
 801fa00:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa04:	4825      	ldr	r0, [pc, #148]	; (801fa9c <_svfiprintf_r+0x1ec>)
 801fa06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fa0a:	2206      	movs	r2, #6
 801fa0c:	f7e0 fc08 	bl	8000220 <memchr>
 801fa10:	2800      	cmp	r0, #0
 801fa12:	d038      	beq.n	801fa86 <_svfiprintf_r+0x1d6>
 801fa14:	4b22      	ldr	r3, [pc, #136]	; (801faa0 <_svfiprintf_r+0x1f0>)
 801fa16:	bb1b      	cbnz	r3, 801fa60 <_svfiprintf_r+0x1b0>
 801fa18:	9b03      	ldr	r3, [sp, #12]
 801fa1a:	3307      	adds	r3, #7
 801fa1c:	f023 0307 	bic.w	r3, r3, #7
 801fa20:	3308      	adds	r3, #8
 801fa22:	9303      	str	r3, [sp, #12]
 801fa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa26:	4433      	add	r3, r6
 801fa28:	9309      	str	r3, [sp, #36]	; 0x24
 801fa2a:	e768      	b.n	801f8fe <_svfiprintf_r+0x4e>
 801fa2c:	fb0c 3202 	mla	r2, ip, r2, r3
 801fa30:	460c      	mov	r4, r1
 801fa32:	2001      	movs	r0, #1
 801fa34:	e7a6      	b.n	801f984 <_svfiprintf_r+0xd4>
 801fa36:	2300      	movs	r3, #0
 801fa38:	3401      	adds	r4, #1
 801fa3a:	9305      	str	r3, [sp, #20]
 801fa3c:	4619      	mov	r1, r3
 801fa3e:	f04f 0c0a 	mov.w	ip, #10
 801fa42:	4620      	mov	r0, r4
 801fa44:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fa48:	3a30      	subs	r2, #48	; 0x30
 801fa4a:	2a09      	cmp	r2, #9
 801fa4c:	d903      	bls.n	801fa56 <_svfiprintf_r+0x1a6>
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d0c6      	beq.n	801f9e0 <_svfiprintf_r+0x130>
 801fa52:	9105      	str	r1, [sp, #20]
 801fa54:	e7c4      	b.n	801f9e0 <_svfiprintf_r+0x130>
 801fa56:	fb0c 2101 	mla	r1, ip, r1, r2
 801fa5a:	4604      	mov	r4, r0
 801fa5c:	2301      	movs	r3, #1
 801fa5e:	e7f0      	b.n	801fa42 <_svfiprintf_r+0x192>
 801fa60:	ab03      	add	r3, sp, #12
 801fa62:	9300      	str	r3, [sp, #0]
 801fa64:	462a      	mov	r2, r5
 801fa66:	4b0f      	ldr	r3, [pc, #60]	; (801faa4 <_svfiprintf_r+0x1f4>)
 801fa68:	a904      	add	r1, sp, #16
 801fa6a:	4638      	mov	r0, r7
 801fa6c:	f7fd fe4e 	bl	801d70c <_printf_float>
 801fa70:	1c42      	adds	r2, r0, #1
 801fa72:	4606      	mov	r6, r0
 801fa74:	d1d6      	bne.n	801fa24 <_svfiprintf_r+0x174>
 801fa76:	89ab      	ldrh	r3, [r5, #12]
 801fa78:	065b      	lsls	r3, r3, #25
 801fa7a:	f53f af2d 	bmi.w	801f8d8 <_svfiprintf_r+0x28>
 801fa7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa80:	b01d      	add	sp, #116	; 0x74
 801fa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa86:	ab03      	add	r3, sp, #12
 801fa88:	9300      	str	r3, [sp, #0]
 801fa8a:	462a      	mov	r2, r5
 801fa8c:	4b05      	ldr	r3, [pc, #20]	; (801faa4 <_svfiprintf_r+0x1f4>)
 801fa8e:	a904      	add	r1, sp, #16
 801fa90:	4638      	mov	r0, r7
 801fa92:	f7fe f8df 	bl	801dc54 <_printf_i>
 801fa96:	e7eb      	b.n	801fa70 <_svfiprintf_r+0x1c0>
 801fa98:	080235d4 	.word	0x080235d4
 801fa9c:	080235de 	.word	0x080235de
 801faa0:	0801d70d 	.word	0x0801d70d
 801faa4:	0801f7fd 	.word	0x0801f7fd
 801faa8:	080235da 	.word	0x080235da

0801faac <__sfputc_r>:
 801faac:	6893      	ldr	r3, [r2, #8]
 801faae:	3b01      	subs	r3, #1
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	b410      	push	{r4}
 801fab4:	6093      	str	r3, [r2, #8]
 801fab6:	da08      	bge.n	801faca <__sfputc_r+0x1e>
 801fab8:	6994      	ldr	r4, [r2, #24]
 801faba:	42a3      	cmp	r3, r4
 801fabc:	db01      	blt.n	801fac2 <__sfputc_r+0x16>
 801fabe:	290a      	cmp	r1, #10
 801fac0:	d103      	bne.n	801faca <__sfputc_r+0x1e>
 801fac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fac6:	f000 b9e3 	b.w	801fe90 <__swbuf_r>
 801faca:	6813      	ldr	r3, [r2, #0]
 801facc:	1c58      	adds	r0, r3, #1
 801face:	6010      	str	r0, [r2, #0]
 801fad0:	7019      	strb	r1, [r3, #0]
 801fad2:	4608      	mov	r0, r1
 801fad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fad8:	4770      	bx	lr

0801fada <__sfputs_r>:
 801fada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fadc:	4606      	mov	r6, r0
 801fade:	460f      	mov	r7, r1
 801fae0:	4614      	mov	r4, r2
 801fae2:	18d5      	adds	r5, r2, r3
 801fae4:	42ac      	cmp	r4, r5
 801fae6:	d101      	bne.n	801faec <__sfputs_r+0x12>
 801fae8:	2000      	movs	r0, #0
 801faea:	e007      	b.n	801fafc <__sfputs_r+0x22>
 801faec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801faf0:	463a      	mov	r2, r7
 801faf2:	4630      	mov	r0, r6
 801faf4:	f7ff ffda 	bl	801faac <__sfputc_r>
 801faf8:	1c43      	adds	r3, r0, #1
 801fafa:	d1f3      	bne.n	801fae4 <__sfputs_r+0xa>
 801fafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fb00 <_vfiprintf_r>:
 801fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb04:	460d      	mov	r5, r1
 801fb06:	b09d      	sub	sp, #116	; 0x74
 801fb08:	4614      	mov	r4, r2
 801fb0a:	4698      	mov	r8, r3
 801fb0c:	4606      	mov	r6, r0
 801fb0e:	b118      	cbz	r0, 801fb18 <_vfiprintf_r+0x18>
 801fb10:	6a03      	ldr	r3, [r0, #32]
 801fb12:	b90b      	cbnz	r3, 801fb18 <_vfiprintf_r+0x18>
 801fb14:	f7fe fa3a 	bl	801df8c <__sinit>
 801fb18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fb1a:	07d9      	lsls	r1, r3, #31
 801fb1c:	d405      	bmi.n	801fb2a <_vfiprintf_r+0x2a>
 801fb1e:	89ab      	ldrh	r3, [r5, #12]
 801fb20:	059a      	lsls	r2, r3, #22
 801fb22:	d402      	bmi.n	801fb2a <_vfiprintf_r+0x2a>
 801fb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fb26:	f7fe fb59 	bl	801e1dc <__retarget_lock_acquire_recursive>
 801fb2a:	89ab      	ldrh	r3, [r5, #12]
 801fb2c:	071b      	lsls	r3, r3, #28
 801fb2e:	d501      	bpl.n	801fb34 <_vfiprintf_r+0x34>
 801fb30:	692b      	ldr	r3, [r5, #16]
 801fb32:	b99b      	cbnz	r3, 801fb5c <_vfiprintf_r+0x5c>
 801fb34:	4629      	mov	r1, r5
 801fb36:	4630      	mov	r0, r6
 801fb38:	f000 f9e8 	bl	801ff0c <__swsetup_r>
 801fb3c:	b170      	cbz	r0, 801fb5c <_vfiprintf_r+0x5c>
 801fb3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fb40:	07dc      	lsls	r4, r3, #31
 801fb42:	d504      	bpl.n	801fb4e <_vfiprintf_r+0x4e>
 801fb44:	f04f 30ff 	mov.w	r0, #4294967295
 801fb48:	b01d      	add	sp, #116	; 0x74
 801fb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb4e:	89ab      	ldrh	r3, [r5, #12]
 801fb50:	0598      	lsls	r0, r3, #22
 801fb52:	d4f7      	bmi.n	801fb44 <_vfiprintf_r+0x44>
 801fb54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fb56:	f7fe fb42 	bl	801e1de <__retarget_lock_release_recursive>
 801fb5a:	e7f3      	b.n	801fb44 <_vfiprintf_r+0x44>
 801fb5c:	2300      	movs	r3, #0
 801fb5e:	9309      	str	r3, [sp, #36]	; 0x24
 801fb60:	2320      	movs	r3, #32
 801fb62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fb66:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb6a:	2330      	movs	r3, #48	; 0x30
 801fb6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801fd20 <_vfiprintf_r+0x220>
 801fb70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fb74:	f04f 0901 	mov.w	r9, #1
 801fb78:	4623      	mov	r3, r4
 801fb7a:	469a      	mov	sl, r3
 801fb7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fb80:	b10a      	cbz	r2, 801fb86 <_vfiprintf_r+0x86>
 801fb82:	2a25      	cmp	r2, #37	; 0x25
 801fb84:	d1f9      	bne.n	801fb7a <_vfiprintf_r+0x7a>
 801fb86:	ebba 0b04 	subs.w	fp, sl, r4
 801fb8a:	d00b      	beq.n	801fba4 <_vfiprintf_r+0xa4>
 801fb8c:	465b      	mov	r3, fp
 801fb8e:	4622      	mov	r2, r4
 801fb90:	4629      	mov	r1, r5
 801fb92:	4630      	mov	r0, r6
 801fb94:	f7ff ffa1 	bl	801fada <__sfputs_r>
 801fb98:	3001      	adds	r0, #1
 801fb9a:	f000 80a9 	beq.w	801fcf0 <_vfiprintf_r+0x1f0>
 801fb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fba0:	445a      	add	r2, fp
 801fba2:	9209      	str	r2, [sp, #36]	; 0x24
 801fba4:	f89a 3000 	ldrb.w	r3, [sl]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	f000 80a1 	beq.w	801fcf0 <_vfiprintf_r+0x1f0>
 801fbae:	2300      	movs	r3, #0
 801fbb0:	f04f 32ff 	mov.w	r2, #4294967295
 801fbb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbb8:	f10a 0a01 	add.w	sl, sl, #1
 801fbbc:	9304      	str	r3, [sp, #16]
 801fbbe:	9307      	str	r3, [sp, #28]
 801fbc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fbc4:	931a      	str	r3, [sp, #104]	; 0x68
 801fbc6:	4654      	mov	r4, sl
 801fbc8:	2205      	movs	r2, #5
 801fbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbce:	4854      	ldr	r0, [pc, #336]	; (801fd20 <_vfiprintf_r+0x220>)
 801fbd0:	f7e0 fb26 	bl	8000220 <memchr>
 801fbd4:	9a04      	ldr	r2, [sp, #16]
 801fbd6:	b9d8      	cbnz	r0, 801fc10 <_vfiprintf_r+0x110>
 801fbd8:	06d1      	lsls	r1, r2, #27
 801fbda:	bf44      	itt	mi
 801fbdc:	2320      	movmi	r3, #32
 801fbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fbe2:	0713      	lsls	r3, r2, #28
 801fbe4:	bf44      	itt	mi
 801fbe6:	232b      	movmi	r3, #43	; 0x2b
 801fbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fbec:	f89a 3000 	ldrb.w	r3, [sl]
 801fbf0:	2b2a      	cmp	r3, #42	; 0x2a
 801fbf2:	d015      	beq.n	801fc20 <_vfiprintf_r+0x120>
 801fbf4:	9a07      	ldr	r2, [sp, #28]
 801fbf6:	4654      	mov	r4, sl
 801fbf8:	2000      	movs	r0, #0
 801fbfa:	f04f 0c0a 	mov.w	ip, #10
 801fbfe:	4621      	mov	r1, r4
 801fc00:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc04:	3b30      	subs	r3, #48	; 0x30
 801fc06:	2b09      	cmp	r3, #9
 801fc08:	d94d      	bls.n	801fca6 <_vfiprintf_r+0x1a6>
 801fc0a:	b1b0      	cbz	r0, 801fc3a <_vfiprintf_r+0x13a>
 801fc0c:	9207      	str	r2, [sp, #28]
 801fc0e:	e014      	b.n	801fc3a <_vfiprintf_r+0x13a>
 801fc10:	eba0 0308 	sub.w	r3, r0, r8
 801fc14:	fa09 f303 	lsl.w	r3, r9, r3
 801fc18:	4313      	orrs	r3, r2
 801fc1a:	9304      	str	r3, [sp, #16]
 801fc1c:	46a2      	mov	sl, r4
 801fc1e:	e7d2      	b.n	801fbc6 <_vfiprintf_r+0xc6>
 801fc20:	9b03      	ldr	r3, [sp, #12]
 801fc22:	1d19      	adds	r1, r3, #4
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	9103      	str	r1, [sp, #12]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	bfbb      	ittet	lt
 801fc2c:	425b      	neglt	r3, r3
 801fc2e:	f042 0202 	orrlt.w	r2, r2, #2
 801fc32:	9307      	strge	r3, [sp, #28]
 801fc34:	9307      	strlt	r3, [sp, #28]
 801fc36:	bfb8      	it	lt
 801fc38:	9204      	strlt	r2, [sp, #16]
 801fc3a:	7823      	ldrb	r3, [r4, #0]
 801fc3c:	2b2e      	cmp	r3, #46	; 0x2e
 801fc3e:	d10c      	bne.n	801fc5a <_vfiprintf_r+0x15a>
 801fc40:	7863      	ldrb	r3, [r4, #1]
 801fc42:	2b2a      	cmp	r3, #42	; 0x2a
 801fc44:	d134      	bne.n	801fcb0 <_vfiprintf_r+0x1b0>
 801fc46:	9b03      	ldr	r3, [sp, #12]
 801fc48:	1d1a      	adds	r2, r3, #4
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	9203      	str	r2, [sp, #12]
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	bfb8      	it	lt
 801fc52:	f04f 33ff 	movlt.w	r3, #4294967295
 801fc56:	3402      	adds	r4, #2
 801fc58:	9305      	str	r3, [sp, #20]
 801fc5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fd30 <_vfiprintf_r+0x230>
 801fc5e:	7821      	ldrb	r1, [r4, #0]
 801fc60:	2203      	movs	r2, #3
 801fc62:	4650      	mov	r0, sl
 801fc64:	f7e0 fadc 	bl	8000220 <memchr>
 801fc68:	b138      	cbz	r0, 801fc7a <_vfiprintf_r+0x17a>
 801fc6a:	9b04      	ldr	r3, [sp, #16]
 801fc6c:	eba0 000a 	sub.w	r0, r0, sl
 801fc70:	2240      	movs	r2, #64	; 0x40
 801fc72:	4082      	lsls	r2, r0
 801fc74:	4313      	orrs	r3, r2
 801fc76:	3401      	adds	r4, #1
 801fc78:	9304      	str	r3, [sp, #16]
 801fc7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc7e:	4829      	ldr	r0, [pc, #164]	; (801fd24 <_vfiprintf_r+0x224>)
 801fc80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fc84:	2206      	movs	r2, #6
 801fc86:	f7e0 facb 	bl	8000220 <memchr>
 801fc8a:	2800      	cmp	r0, #0
 801fc8c:	d03f      	beq.n	801fd0e <_vfiprintf_r+0x20e>
 801fc8e:	4b26      	ldr	r3, [pc, #152]	; (801fd28 <_vfiprintf_r+0x228>)
 801fc90:	bb1b      	cbnz	r3, 801fcda <_vfiprintf_r+0x1da>
 801fc92:	9b03      	ldr	r3, [sp, #12]
 801fc94:	3307      	adds	r3, #7
 801fc96:	f023 0307 	bic.w	r3, r3, #7
 801fc9a:	3308      	adds	r3, #8
 801fc9c:	9303      	str	r3, [sp, #12]
 801fc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fca0:	443b      	add	r3, r7
 801fca2:	9309      	str	r3, [sp, #36]	; 0x24
 801fca4:	e768      	b.n	801fb78 <_vfiprintf_r+0x78>
 801fca6:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcaa:	460c      	mov	r4, r1
 801fcac:	2001      	movs	r0, #1
 801fcae:	e7a6      	b.n	801fbfe <_vfiprintf_r+0xfe>
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	3401      	adds	r4, #1
 801fcb4:	9305      	str	r3, [sp, #20]
 801fcb6:	4619      	mov	r1, r3
 801fcb8:	f04f 0c0a 	mov.w	ip, #10
 801fcbc:	4620      	mov	r0, r4
 801fcbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fcc2:	3a30      	subs	r2, #48	; 0x30
 801fcc4:	2a09      	cmp	r2, #9
 801fcc6:	d903      	bls.n	801fcd0 <_vfiprintf_r+0x1d0>
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	d0c6      	beq.n	801fc5a <_vfiprintf_r+0x15a>
 801fccc:	9105      	str	r1, [sp, #20]
 801fcce:	e7c4      	b.n	801fc5a <_vfiprintf_r+0x15a>
 801fcd0:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcd4:	4604      	mov	r4, r0
 801fcd6:	2301      	movs	r3, #1
 801fcd8:	e7f0      	b.n	801fcbc <_vfiprintf_r+0x1bc>
 801fcda:	ab03      	add	r3, sp, #12
 801fcdc:	9300      	str	r3, [sp, #0]
 801fcde:	462a      	mov	r2, r5
 801fce0:	4b12      	ldr	r3, [pc, #72]	; (801fd2c <_vfiprintf_r+0x22c>)
 801fce2:	a904      	add	r1, sp, #16
 801fce4:	4630      	mov	r0, r6
 801fce6:	f7fd fd11 	bl	801d70c <_printf_float>
 801fcea:	4607      	mov	r7, r0
 801fcec:	1c78      	adds	r0, r7, #1
 801fcee:	d1d6      	bne.n	801fc9e <_vfiprintf_r+0x19e>
 801fcf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fcf2:	07d9      	lsls	r1, r3, #31
 801fcf4:	d405      	bmi.n	801fd02 <_vfiprintf_r+0x202>
 801fcf6:	89ab      	ldrh	r3, [r5, #12]
 801fcf8:	059a      	lsls	r2, r3, #22
 801fcfa:	d402      	bmi.n	801fd02 <_vfiprintf_r+0x202>
 801fcfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fcfe:	f7fe fa6e 	bl	801e1de <__retarget_lock_release_recursive>
 801fd02:	89ab      	ldrh	r3, [r5, #12]
 801fd04:	065b      	lsls	r3, r3, #25
 801fd06:	f53f af1d 	bmi.w	801fb44 <_vfiprintf_r+0x44>
 801fd0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd0c:	e71c      	b.n	801fb48 <_vfiprintf_r+0x48>
 801fd0e:	ab03      	add	r3, sp, #12
 801fd10:	9300      	str	r3, [sp, #0]
 801fd12:	462a      	mov	r2, r5
 801fd14:	4b05      	ldr	r3, [pc, #20]	; (801fd2c <_vfiprintf_r+0x22c>)
 801fd16:	a904      	add	r1, sp, #16
 801fd18:	4630      	mov	r0, r6
 801fd1a:	f7fd ff9b 	bl	801dc54 <_printf_i>
 801fd1e:	e7e4      	b.n	801fcea <_vfiprintf_r+0x1ea>
 801fd20:	080235d4 	.word	0x080235d4
 801fd24:	080235de 	.word	0x080235de
 801fd28:	0801d70d 	.word	0x0801d70d
 801fd2c:	0801fadb 	.word	0x0801fadb
 801fd30:	080235da 	.word	0x080235da

0801fd34 <__sflush_r>:
 801fd34:	898a      	ldrh	r2, [r1, #12]
 801fd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd3a:	4605      	mov	r5, r0
 801fd3c:	0710      	lsls	r0, r2, #28
 801fd3e:	460c      	mov	r4, r1
 801fd40:	d458      	bmi.n	801fdf4 <__sflush_r+0xc0>
 801fd42:	684b      	ldr	r3, [r1, #4]
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	dc05      	bgt.n	801fd54 <__sflush_r+0x20>
 801fd48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	dc02      	bgt.n	801fd54 <__sflush_r+0x20>
 801fd4e:	2000      	movs	r0, #0
 801fd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fd56:	2e00      	cmp	r6, #0
 801fd58:	d0f9      	beq.n	801fd4e <__sflush_r+0x1a>
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fd60:	682f      	ldr	r7, [r5, #0]
 801fd62:	6a21      	ldr	r1, [r4, #32]
 801fd64:	602b      	str	r3, [r5, #0]
 801fd66:	d032      	beq.n	801fdce <__sflush_r+0x9a>
 801fd68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fd6a:	89a3      	ldrh	r3, [r4, #12]
 801fd6c:	075a      	lsls	r2, r3, #29
 801fd6e:	d505      	bpl.n	801fd7c <__sflush_r+0x48>
 801fd70:	6863      	ldr	r3, [r4, #4]
 801fd72:	1ac0      	subs	r0, r0, r3
 801fd74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fd76:	b10b      	cbz	r3, 801fd7c <__sflush_r+0x48>
 801fd78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fd7a:	1ac0      	subs	r0, r0, r3
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	4602      	mov	r2, r0
 801fd80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fd82:	6a21      	ldr	r1, [r4, #32]
 801fd84:	4628      	mov	r0, r5
 801fd86:	47b0      	blx	r6
 801fd88:	1c43      	adds	r3, r0, #1
 801fd8a:	89a3      	ldrh	r3, [r4, #12]
 801fd8c:	d106      	bne.n	801fd9c <__sflush_r+0x68>
 801fd8e:	6829      	ldr	r1, [r5, #0]
 801fd90:	291d      	cmp	r1, #29
 801fd92:	d82b      	bhi.n	801fdec <__sflush_r+0xb8>
 801fd94:	4a29      	ldr	r2, [pc, #164]	; (801fe3c <__sflush_r+0x108>)
 801fd96:	410a      	asrs	r2, r1
 801fd98:	07d6      	lsls	r6, r2, #31
 801fd9a:	d427      	bmi.n	801fdec <__sflush_r+0xb8>
 801fd9c:	2200      	movs	r2, #0
 801fd9e:	6062      	str	r2, [r4, #4]
 801fda0:	04d9      	lsls	r1, r3, #19
 801fda2:	6922      	ldr	r2, [r4, #16]
 801fda4:	6022      	str	r2, [r4, #0]
 801fda6:	d504      	bpl.n	801fdb2 <__sflush_r+0x7e>
 801fda8:	1c42      	adds	r2, r0, #1
 801fdaa:	d101      	bne.n	801fdb0 <__sflush_r+0x7c>
 801fdac:	682b      	ldr	r3, [r5, #0]
 801fdae:	b903      	cbnz	r3, 801fdb2 <__sflush_r+0x7e>
 801fdb0:	6560      	str	r0, [r4, #84]	; 0x54
 801fdb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fdb4:	602f      	str	r7, [r5, #0]
 801fdb6:	2900      	cmp	r1, #0
 801fdb8:	d0c9      	beq.n	801fd4e <__sflush_r+0x1a>
 801fdba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fdbe:	4299      	cmp	r1, r3
 801fdc0:	d002      	beq.n	801fdc8 <__sflush_r+0x94>
 801fdc2:	4628      	mov	r0, r5
 801fdc4:	f7ff f89e 	bl	801ef04 <_free_r>
 801fdc8:	2000      	movs	r0, #0
 801fdca:	6360      	str	r0, [r4, #52]	; 0x34
 801fdcc:	e7c0      	b.n	801fd50 <__sflush_r+0x1c>
 801fdce:	2301      	movs	r3, #1
 801fdd0:	4628      	mov	r0, r5
 801fdd2:	47b0      	blx	r6
 801fdd4:	1c41      	adds	r1, r0, #1
 801fdd6:	d1c8      	bne.n	801fd6a <__sflush_r+0x36>
 801fdd8:	682b      	ldr	r3, [r5, #0]
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d0c5      	beq.n	801fd6a <__sflush_r+0x36>
 801fdde:	2b1d      	cmp	r3, #29
 801fde0:	d001      	beq.n	801fde6 <__sflush_r+0xb2>
 801fde2:	2b16      	cmp	r3, #22
 801fde4:	d101      	bne.n	801fdea <__sflush_r+0xb6>
 801fde6:	602f      	str	r7, [r5, #0]
 801fde8:	e7b1      	b.n	801fd4e <__sflush_r+0x1a>
 801fdea:	89a3      	ldrh	r3, [r4, #12]
 801fdec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fdf0:	81a3      	strh	r3, [r4, #12]
 801fdf2:	e7ad      	b.n	801fd50 <__sflush_r+0x1c>
 801fdf4:	690f      	ldr	r7, [r1, #16]
 801fdf6:	2f00      	cmp	r7, #0
 801fdf8:	d0a9      	beq.n	801fd4e <__sflush_r+0x1a>
 801fdfa:	0793      	lsls	r3, r2, #30
 801fdfc:	680e      	ldr	r6, [r1, #0]
 801fdfe:	bf08      	it	eq
 801fe00:	694b      	ldreq	r3, [r1, #20]
 801fe02:	600f      	str	r7, [r1, #0]
 801fe04:	bf18      	it	ne
 801fe06:	2300      	movne	r3, #0
 801fe08:	eba6 0807 	sub.w	r8, r6, r7
 801fe0c:	608b      	str	r3, [r1, #8]
 801fe0e:	f1b8 0f00 	cmp.w	r8, #0
 801fe12:	dd9c      	ble.n	801fd4e <__sflush_r+0x1a>
 801fe14:	6a21      	ldr	r1, [r4, #32]
 801fe16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fe18:	4643      	mov	r3, r8
 801fe1a:	463a      	mov	r2, r7
 801fe1c:	4628      	mov	r0, r5
 801fe1e:	47b0      	blx	r6
 801fe20:	2800      	cmp	r0, #0
 801fe22:	dc06      	bgt.n	801fe32 <__sflush_r+0xfe>
 801fe24:	89a3      	ldrh	r3, [r4, #12]
 801fe26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fe2a:	81a3      	strh	r3, [r4, #12]
 801fe2c:	f04f 30ff 	mov.w	r0, #4294967295
 801fe30:	e78e      	b.n	801fd50 <__sflush_r+0x1c>
 801fe32:	4407      	add	r7, r0
 801fe34:	eba8 0800 	sub.w	r8, r8, r0
 801fe38:	e7e9      	b.n	801fe0e <__sflush_r+0xda>
 801fe3a:	bf00      	nop
 801fe3c:	dfbffffe 	.word	0xdfbffffe

0801fe40 <_fflush_r>:
 801fe40:	b538      	push	{r3, r4, r5, lr}
 801fe42:	690b      	ldr	r3, [r1, #16]
 801fe44:	4605      	mov	r5, r0
 801fe46:	460c      	mov	r4, r1
 801fe48:	b913      	cbnz	r3, 801fe50 <_fflush_r+0x10>
 801fe4a:	2500      	movs	r5, #0
 801fe4c:	4628      	mov	r0, r5
 801fe4e:	bd38      	pop	{r3, r4, r5, pc}
 801fe50:	b118      	cbz	r0, 801fe5a <_fflush_r+0x1a>
 801fe52:	6a03      	ldr	r3, [r0, #32]
 801fe54:	b90b      	cbnz	r3, 801fe5a <_fflush_r+0x1a>
 801fe56:	f7fe f899 	bl	801df8c <__sinit>
 801fe5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d0f3      	beq.n	801fe4a <_fflush_r+0xa>
 801fe62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fe64:	07d0      	lsls	r0, r2, #31
 801fe66:	d404      	bmi.n	801fe72 <_fflush_r+0x32>
 801fe68:	0599      	lsls	r1, r3, #22
 801fe6a:	d402      	bmi.n	801fe72 <_fflush_r+0x32>
 801fe6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fe6e:	f7fe f9b5 	bl	801e1dc <__retarget_lock_acquire_recursive>
 801fe72:	4628      	mov	r0, r5
 801fe74:	4621      	mov	r1, r4
 801fe76:	f7ff ff5d 	bl	801fd34 <__sflush_r>
 801fe7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fe7c:	07da      	lsls	r2, r3, #31
 801fe7e:	4605      	mov	r5, r0
 801fe80:	d4e4      	bmi.n	801fe4c <_fflush_r+0xc>
 801fe82:	89a3      	ldrh	r3, [r4, #12]
 801fe84:	059b      	lsls	r3, r3, #22
 801fe86:	d4e1      	bmi.n	801fe4c <_fflush_r+0xc>
 801fe88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fe8a:	f7fe f9a8 	bl	801e1de <__retarget_lock_release_recursive>
 801fe8e:	e7dd      	b.n	801fe4c <_fflush_r+0xc>

0801fe90 <__swbuf_r>:
 801fe90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe92:	460e      	mov	r6, r1
 801fe94:	4614      	mov	r4, r2
 801fe96:	4605      	mov	r5, r0
 801fe98:	b118      	cbz	r0, 801fea2 <__swbuf_r+0x12>
 801fe9a:	6a03      	ldr	r3, [r0, #32]
 801fe9c:	b90b      	cbnz	r3, 801fea2 <__swbuf_r+0x12>
 801fe9e:	f7fe f875 	bl	801df8c <__sinit>
 801fea2:	69a3      	ldr	r3, [r4, #24]
 801fea4:	60a3      	str	r3, [r4, #8]
 801fea6:	89a3      	ldrh	r3, [r4, #12]
 801fea8:	071a      	lsls	r2, r3, #28
 801feaa:	d525      	bpl.n	801fef8 <__swbuf_r+0x68>
 801feac:	6923      	ldr	r3, [r4, #16]
 801feae:	b31b      	cbz	r3, 801fef8 <__swbuf_r+0x68>
 801feb0:	6823      	ldr	r3, [r4, #0]
 801feb2:	6922      	ldr	r2, [r4, #16]
 801feb4:	1a98      	subs	r0, r3, r2
 801feb6:	6963      	ldr	r3, [r4, #20]
 801feb8:	b2f6      	uxtb	r6, r6
 801feba:	4283      	cmp	r3, r0
 801febc:	4637      	mov	r7, r6
 801febe:	dc04      	bgt.n	801feca <__swbuf_r+0x3a>
 801fec0:	4621      	mov	r1, r4
 801fec2:	4628      	mov	r0, r5
 801fec4:	f7ff ffbc 	bl	801fe40 <_fflush_r>
 801fec8:	b9e0      	cbnz	r0, 801ff04 <__swbuf_r+0x74>
 801feca:	68a3      	ldr	r3, [r4, #8]
 801fecc:	3b01      	subs	r3, #1
 801fece:	60a3      	str	r3, [r4, #8]
 801fed0:	6823      	ldr	r3, [r4, #0]
 801fed2:	1c5a      	adds	r2, r3, #1
 801fed4:	6022      	str	r2, [r4, #0]
 801fed6:	701e      	strb	r6, [r3, #0]
 801fed8:	6962      	ldr	r2, [r4, #20]
 801feda:	1c43      	adds	r3, r0, #1
 801fedc:	429a      	cmp	r2, r3
 801fede:	d004      	beq.n	801feea <__swbuf_r+0x5a>
 801fee0:	89a3      	ldrh	r3, [r4, #12]
 801fee2:	07db      	lsls	r3, r3, #31
 801fee4:	d506      	bpl.n	801fef4 <__swbuf_r+0x64>
 801fee6:	2e0a      	cmp	r6, #10
 801fee8:	d104      	bne.n	801fef4 <__swbuf_r+0x64>
 801feea:	4621      	mov	r1, r4
 801feec:	4628      	mov	r0, r5
 801feee:	f7ff ffa7 	bl	801fe40 <_fflush_r>
 801fef2:	b938      	cbnz	r0, 801ff04 <__swbuf_r+0x74>
 801fef4:	4638      	mov	r0, r7
 801fef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fef8:	4621      	mov	r1, r4
 801fefa:	4628      	mov	r0, r5
 801fefc:	f000 f806 	bl	801ff0c <__swsetup_r>
 801ff00:	2800      	cmp	r0, #0
 801ff02:	d0d5      	beq.n	801feb0 <__swbuf_r+0x20>
 801ff04:	f04f 37ff 	mov.w	r7, #4294967295
 801ff08:	e7f4      	b.n	801fef4 <__swbuf_r+0x64>
	...

0801ff0c <__swsetup_r>:
 801ff0c:	b538      	push	{r3, r4, r5, lr}
 801ff0e:	4b2a      	ldr	r3, [pc, #168]	; (801ffb8 <__swsetup_r+0xac>)
 801ff10:	4605      	mov	r5, r0
 801ff12:	6818      	ldr	r0, [r3, #0]
 801ff14:	460c      	mov	r4, r1
 801ff16:	b118      	cbz	r0, 801ff20 <__swsetup_r+0x14>
 801ff18:	6a03      	ldr	r3, [r0, #32]
 801ff1a:	b90b      	cbnz	r3, 801ff20 <__swsetup_r+0x14>
 801ff1c:	f7fe f836 	bl	801df8c <__sinit>
 801ff20:	89a3      	ldrh	r3, [r4, #12]
 801ff22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ff26:	0718      	lsls	r0, r3, #28
 801ff28:	d422      	bmi.n	801ff70 <__swsetup_r+0x64>
 801ff2a:	06d9      	lsls	r1, r3, #27
 801ff2c:	d407      	bmi.n	801ff3e <__swsetup_r+0x32>
 801ff2e:	2309      	movs	r3, #9
 801ff30:	602b      	str	r3, [r5, #0]
 801ff32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ff36:	81a3      	strh	r3, [r4, #12]
 801ff38:	f04f 30ff 	mov.w	r0, #4294967295
 801ff3c:	e034      	b.n	801ffa8 <__swsetup_r+0x9c>
 801ff3e:	0758      	lsls	r0, r3, #29
 801ff40:	d512      	bpl.n	801ff68 <__swsetup_r+0x5c>
 801ff42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ff44:	b141      	cbz	r1, 801ff58 <__swsetup_r+0x4c>
 801ff46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ff4a:	4299      	cmp	r1, r3
 801ff4c:	d002      	beq.n	801ff54 <__swsetup_r+0x48>
 801ff4e:	4628      	mov	r0, r5
 801ff50:	f7fe ffd8 	bl	801ef04 <_free_r>
 801ff54:	2300      	movs	r3, #0
 801ff56:	6363      	str	r3, [r4, #52]	; 0x34
 801ff58:	89a3      	ldrh	r3, [r4, #12]
 801ff5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ff5e:	81a3      	strh	r3, [r4, #12]
 801ff60:	2300      	movs	r3, #0
 801ff62:	6063      	str	r3, [r4, #4]
 801ff64:	6923      	ldr	r3, [r4, #16]
 801ff66:	6023      	str	r3, [r4, #0]
 801ff68:	89a3      	ldrh	r3, [r4, #12]
 801ff6a:	f043 0308 	orr.w	r3, r3, #8
 801ff6e:	81a3      	strh	r3, [r4, #12]
 801ff70:	6923      	ldr	r3, [r4, #16]
 801ff72:	b94b      	cbnz	r3, 801ff88 <__swsetup_r+0x7c>
 801ff74:	89a3      	ldrh	r3, [r4, #12]
 801ff76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ff7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ff7e:	d003      	beq.n	801ff88 <__swsetup_r+0x7c>
 801ff80:	4621      	mov	r1, r4
 801ff82:	4628      	mov	r0, r5
 801ff84:	f000 f912 	bl	80201ac <__smakebuf_r>
 801ff88:	89a0      	ldrh	r0, [r4, #12]
 801ff8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ff8e:	f010 0301 	ands.w	r3, r0, #1
 801ff92:	d00a      	beq.n	801ffaa <__swsetup_r+0x9e>
 801ff94:	2300      	movs	r3, #0
 801ff96:	60a3      	str	r3, [r4, #8]
 801ff98:	6963      	ldr	r3, [r4, #20]
 801ff9a:	425b      	negs	r3, r3
 801ff9c:	61a3      	str	r3, [r4, #24]
 801ff9e:	6923      	ldr	r3, [r4, #16]
 801ffa0:	b943      	cbnz	r3, 801ffb4 <__swsetup_r+0xa8>
 801ffa2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ffa6:	d1c4      	bne.n	801ff32 <__swsetup_r+0x26>
 801ffa8:	bd38      	pop	{r3, r4, r5, pc}
 801ffaa:	0781      	lsls	r1, r0, #30
 801ffac:	bf58      	it	pl
 801ffae:	6963      	ldrpl	r3, [r4, #20]
 801ffb0:	60a3      	str	r3, [r4, #8]
 801ffb2:	e7f4      	b.n	801ff9e <__swsetup_r+0x92>
 801ffb4:	2000      	movs	r0, #0
 801ffb6:	e7f7      	b.n	801ffa8 <__swsetup_r+0x9c>
 801ffb8:	200001e8 	.word	0x200001e8

0801ffbc <memmove>:
 801ffbc:	4288      	cmp	r0, r1
 801ffbe:	b510      	push	{r4, lr}
 801ffc0:	eb01 0402 	add.w	r4, r1, r2
 801ffc4:	d902      	bls.n	801ffcc <memmove+0x10>
 801ffc6:	4284      	cmp	r4, r0
 801ffc8:	4623      	mov	r3, r4
 801ffca:	d807      	bhi.n	801ffdc <memmove+0x20>
 801ffcc:	1e43      	subs	r3, r0, #1
 801ffce:	42a1      	cmp	r1, r4
 801ffd0:	d008      	beq.n	801ffe4 <memmove+0x28>
 801ffd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ffd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ffda:	e7f8      	b.n	801ffce <memmove+0x12>
 801ffdc:	4402      	add	r2, r0
 801ffde:	4601      	mov	r1, r0
 801ffe0:	428a      	cmp	r2, r1
 801ffe2:	d100      	bne.n	801ffe6 <memmove+0x2a>
 801ffe4:	bd10      	pop	{r4, pc}
 801ffe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ffea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ffee:	e7f7      	b.n	801ffe0 <memmove+0x24>

0801fff0 <_raise_r>:
 801fff0:	291f      	cmp	r1, #31
 801fff2:	b538      	push	{r3, r4, r5, lr}
 801fff4:	4604      	mov	r4, r0
 801fff6:	460d      	mov	r5, r1
 801fff8:	d904      	bls.n	8020004 <_raise_r+0x14>
 801fffa:	2316      	movs	r3, #22
 801fffc:	6003      	str	r3, [r0, #0]
 801fffe:	f04f 30ff 	mov.w	r0, #4294967295
 8020002:	bd38      	pop	{r3, r4, r5, pc}
 8020004:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020006:	b112      	cbz	r2, 802000e <_raise_r+0x1e>
 8020008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802000c:	b94b      	cbnz	r3, 8020022 <_raise_r+0x32>
 802000e:	4620      	mov	r0, r4
 8020010:	f000 f830 	bl	8020074 <_getpid_r>
 8020014:	462a      	mov	r2, r5
 8020016:	4601      	mov	r1, r0
 8020018:	4620      	mov	r0, r4
 802001a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802001e:	f000 b817 	b.w	8020050 <_kill_r>
 8020022:	2b01      	cmp	r3, #1
 8020024:	d00a      	beq.n	802003c <_raise_r+0x4c>
 8020026:	1c59      	adds	r1, r3, #1
 8020028:	d103      	bne.n	8020032 <_raise_r+0x42>
 802002a:	2316      	movs	r3, #22
 802002c:	6003      	str	r3, [r0, #0]
 802002e:	2001      	movs	r0, #1
 8020030:	e7e7      	b.n	8020002 <_raise_r+0x12>
 8020032:	2400      	movs	r4, #0
 8020034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020038:	4628      	mov	r0, r5
 802003a:	4798      	blx	r3
 802003c:	2000      	movs	r0, #0
 802003e:	e7e0      	b.n	8020002 <_raise_r+0x12>

08020040 <raise>:
 8020040:	4b02      	ldr	r3, [pc, #8]	; (802004c <raise+0xc>)
 8020042:	4601      	mov	r1, r0
 8020044:	6818      	ldr	r0, [r3, #0]
 8020046:	f7ff bfd3 	b.w	801fff0 <_raise_r>
 802004a:	bf00      	nop
 802004c:	200001e8 	.word	0x200001e8

08020050 <_kill_r>:
 8020050:	b538      	push	{r3, r4, r5, lr}
 8020052:	4d07      	ldr	r5, [pc, #28]	; (8020070 <_kill_r+0x20>)
 8020054:	2300      	movs	r3, #0
 8020056:	4604      	mov	r4, r0
 8020058:	4608      	mov	r0, r1
 802005a:	4611      	mov	r1, r2
 802005c:	602b      	str	r3, [r5, #0]
 802005e:	f7e5 ff73 	bl	8005f48 <_kill>
 8020062:	1c43      	adds	r3, r0, #1
 8020064:	d102      	bne.n	802006c <_kill_r+0x1c>
 8020066:	682b      	ldr	r3, [r5, #0]
 8020068:	b103      	cbz	r3, 802006c <_kill_r+0x1c>
 802006a:	6023      	str	r3, [r4, #0]
 802006c:	bd38      	pop	{r3, r4, r5, pc}
 802006e:	bf00      	nop
 8020070:	20016a70 	.word	0x20016a70

08020074 <_getpid_r>:
 8020074:	f7e5 bf60 	b.w	8005f38 <_getpid>

08020078 <_sbrk_r>:
 8020078:	b538      	push	{r3, r4, r5, lr}
 802007a:	4d06      	ldr	r5, [pc, #24]	; (8020094 <_sbrk_r+0x1c>)
 802007c:	2300      	movs	r3, #0
 802007e:	4604      	mov	r4, r0
 8020080:	4608      	mov	r0, r1
 8020082:	602b      	str	r3, [r5, #0]
 8020084:	f7e5 ffcc 	bl	8006020 <_sbrk>
 8020088:	1c43      	adds	r3, r0, #1
 802008a:	d102      	bne.n	8020092 <_sbrk_r+0x1a>
 802008c:	682b      	ldr	r3, [r5, #0]
 802008e:	b103      	cbz	r3, 8020092 <_sbrk_r+0x1a>
 8020090:	6023      	str	r3, [r4, #0]
 8020092:	bd38      	pop	{r3, r4, r5, pc}
 8020094:	20016a70 	.word	0x20016a70

08020098 <_calloc_r>:
 8020098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802009a:	fba1 2402 	umull	r2, r4, r1, r2
 802009e:	b94c      	cbnz	r4, 80200b4 <_calloc_r+0x1c>
 80200a0:	4611      	mov	r1, r2
 80200a2:	9201      	str	r2, [sp, #4]
 80200a4:	f7fe ffa2 	bl	801efec <_malloc_r>
 80200a8:	9a01      	ldr	r2, [sp, #4]
 80200aa:	4605      	mov	r5, r0
 80200ac:	b930      	cbnz	r0, 80200bc <_calloc_r+0x24>
 80200ae:	4628      	mov	r0, r5
 80200b0:	b003      	add	sp, #12
 80200b2:	bd30      	pop	{r4, r5, pc}
 80200b4:	220c      	movs	r2, #12
 80200b6:	6002      	str	r2, [r0, #0]
 80200b8:	2500      	movs	r5, #0
 80200ba:	e7f8      	b.n	80200ae <_calloc_r+0x16>
 80200bc:	4621      	mov	r1, r4
 80200be:	f7fe f810 	bl	801e0e2 <memset>
 80200c2:	e7f4      	b.n	80200ae <_calloc_r+0x16>

080200c4 <__ascii_mbtowc>:
 80200c4:	b082      	sub	sp, #8
 80200c6:	b901      	cbnz	r1, 80200ca <__ascii_mbtowc+0x6>
 80200c8:	a901      	add	r1, sp, #4
 80200ca:	b142      	cbz	r2, 80200de <__ascii_mbtowc+0x1a>
 80200cc:	b14b      	cbz	r3, 80200e2 <__ascii_mbtowc+0x1e>
 80200ce:	7813      	ldrb	r3, [r2, #0]
 80200d0:	600b      	str	r3, [r1, #0]
 80200d2:	7812      	ldrb	r2, [r2, #0]
 80200d4:	1e10      	subs	r0, r2, #0
 80200d6:	bf18      	it	ne
 80200d8:	2001      	movne	r0, #1
 80200da:	b002      	add	sp, #8
 80200dc:	4770      	bx	lr
 80200de:	4610      	mov	r0, r2
 80200e0:	e7fb      	b.n	80200da <__ascii_mbtowc+0x16>
 80200e2:	f06f 0001 	mvn.w	r0, #1
 80200e6:	e7f8      	b.n	80200da <__ascii_mbtowc+0x16>

080200e8 <_realloc_r>:
 80200e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200ec:	4680      	mov	r8, r0
 80200ee:	4614      	mov	r4, r2
 80200f0:	460e      	mov	r6, r1
 80200f2:	b921      	cbnz	r1, 80200fe <_realloc_r+0x16>
 80200f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80200f8:	4611      	mov	r1, r2
 80200fa:	f7fe bf77 	b.w	801efec <_malloc_r>
 80200fe:	b92a      	cbnz	r2, 802010c <_realloc_r+0x24>
 8020100:	f7fe ff00 	bl	801ef04 <_free_r>
 8020104:	4625      	mov	r5, r4
 8020106:	4628      	mov	r0, r5
 8020108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802010c:	f000 f8ac 	bl	8020268 <_malloc_usable_size_r>
 8020110:	4284      	cmp	r4, r0
 8020112:	4607      	mov	r7, r0
 8020114:	d802      	bhi.n	802011c <_realloc_r+0x34>
 8020116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802011a:	d812      	bhi.n	8020142 <_realloc_r+0x5a>
 802011c:	4621      	mov	r1, r4
 802011e:	4640      	mov	r0, r8
 8020120:	f7fe ff64 	bl	801efec <_malloc_r>
 8020124:	4605      	mov	r5, r0
 8020126:	2800      	cmp	r0, #0
 8020128:	d0ed      	beq.n	8020106 <_realloc_r+0x1e>
 802012a:	42bc      	cmp	r4, r7
 802012c:	4622      	mov	r2, r4
 802012e:	4631      	mov	r1, r6
 8020130:	bf28      	it	cs
 8020132:	463a      	movcs	r2, r7
 8020134:	f7fe f854 	bl	801e1e0 <memcpy>
 8020138:	4631      	mov	r1, r6
 802013a:	4640      	mov	r0, r8
 802013c:	f7fe fee2 	bl	801ef04 <_free_r>
 8020140:	e7e1      	b.n	8020106 <_realloc_r+0x1e>
 8020142:	4635      	mov	r5, r6
 8020144:	e7df      	b.n	8020106 <_realloc_r+0x1e>

08020146 <__ascii_wctomb>:
 8020146:	b149      	cbz	r1, 802015c <__ascii_wctomb+0x16>
 8020148:	2aff      	cmp	r2, #255	; 0xff
 802014a:	bf85      	ittet	hi
 802014c:	238a      	movhi	r3, #138	; 0x8a
 802014e:	6003      	strhi	r3, [r0, #0]
 8020150:	700a      	strbls	r2, [r1, #0]
 8020152:	f04f 30ff 	movhi.w	r0, #4294967295
 8020156:	bf98      	it	ls
 8020158:	2001      	movls	r0, #1
 802015a:	4770      	bx	lr
 802015c:	4608      	mov	r0, r1
 802015e:	4770      	bx	lr

08020160 <__swhatbuf_r>:
 8020160:	b570      	push	{r4, r5, r6, lr}
 8020162:	460c      	mov	r4, r1
 8020164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020168:	2900      	cmp	r1, #0
 802016a:	b096      	sub	sp, #88	; 0x58
 802016c:	4615      	mov	r5, r2
 802016e:	461e      	mov	r6, r3
 8020170:	da0d      	bge.n	802018e <__swhatbuf_r+0x2e>
 8020172:	89a3      	ldrh	r3, [r4, #12]
 8020174:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020178:	f04f 0100 	mov.w	r1, #0
 802017c:	bf0c      	ite	eq
 802017e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020182:	2340      	movne	r3, #64	; 0x40
 8020184:	2000      	movs	r0, #0
 8020186:	6031      	str	r1, [r6, #0]
 8020188:	602b      	str	r3, [r5, #0]
 802018a:	b016      	add	sp, #88	; 0x58
 802018c:	bd70      	pop	{r4, r5, r6, pc}
 802018e:	466a      	mov	r2, sp
 8020190:	f000 f848 	bl	8020224 <_fstat_r>
 8020194:	2800      	cmp	r0, #0
 8020196:	dbec      	blt.n	8020172 <__swhatbuf_r+0x12>
 8020198:	9901      	ldr	r1, [sp, #4]
 802019a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802019e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80201a2:	4259      	negs	r1, r3
 80201a4:	4159      	adcs	r1, r3
 80201a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80201aa:	e7eb      	b.n	8020184 <__swhatbuf_r+0x24>

080201ac <__smakebuf_r>:
 80201ac:	898b      	ldrh	r3, [r1, #12]
 80201ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80201b0:	079d      	lsls	r5, r3, #30
 80201b2:	4606      	mov	r6, r0
 80201b4:	460c      	mov	r4, r1
 80201b6:	d507      	bpl.n	80201c8 <__smakebuf_r+0x1c>
 80201b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80201bc:	6023      	str	r3, [r4, #0]
 80201be:	6123      	str	r3, [r4, #16]
 80201c0:	2301      	movs	r3, #1
 80201c2:	6163      	str	r3, [r4, #20]
 80201c4:	b002      	add	sp, #8
 80201c6:	bd70      	pop	{r4, r5, r6, pc}
 80201c8:	ab01      	add	r3, sp, #4
 80201ca:	466a      	mov	r2, sp
 80201cc:	f7ff ffc8 	bl	8020160 <__swhatbuf_r>
 80201d0:	9900      	ldr	r1, [sp, #0]
 80201d2:	4605      	mov	r5, r0
 80201d4:	4630      	mov	r0, r6
 80201d6:	f7fe ff09 	bl	801efec <_malloc_r>
 80201da:	b948      	cbnz	r0, 80201f0 <__smakebuf_r+0x44>
 80201dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80201e0:	059a      	lsls	r2, r3, #22
 80201e2:	d4ef      	bmi.n	80201c4 <__smakebuf_r+0x18>
 80201e4:	f023 0303 	bic.w	r3, r3, #3
 80201e8:	f043 0302 	orr.w	r3, r3, #2
 80201ec:	81a3      	strh	r3, [r4, #12]
 80201ee:	e7e3      	b.n	80201b8 <__smakebuf_r+0xc>
 80201f0:	89a3      	ldrh	r3, [r4, #12]
 80201f2:	6020      	str	r0, [r4, #0]
 80201f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201f8:	81a3      	strh	r3, [r4, #12]
 80201fa:	9b00      	ldr	r3, [sp, #0]
 80201fc:	6163      	str	r3, [r4, #20]
 80201fe:	9b01      	ldr	r3, [sp, #4]
 8020200:	6120      	str	r0, [r4, #16]
 8020202:	b15b      	cbz	r3, 802021c <__smakebuf_r+0x70>
 8020204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020208:	4630      	mov	r0, r6
 802020a:	f000 f81d 	bl	8020248 <_isatty_r>
 802020e:	b128      	cbz	r0, 802021c <__smakebuf_r+0x70>
 8020210:	89a3      	ldrh	r3, [r4, #12]
 8020212:	f023 0303 	bic.w	r3, r3, #3
 8020216:	f043 0301 	orr.w	r3, r3, #1
 802021a:	81a3      	strh	r3, [r4, #12]
 802021c:	89a3      	ldrh	r3, [r4, #12]
 802021e:	431d      	orrs	r5, r3
 8020220:	81a5      	strh	r5, [r4, #12]
 8020222:	e7cf      	b.n	80201c4 <__smakebuf_r+0x18>

08020224 <_fstat_r>:
 8020224:	b538      	push	{r3, r4, r5, lr}
 8020226:	4d07      	ldr	r5, [pc, #28]	; (8020244 <_fstat_r+0x20>)
 8020228:	2300      	movs	r3, #0
 802022a:	4604      	mov	r4, r0
 802022c:	4608      	mov	r0, r1
 802022e:	4611      	mov	r1, r2
 8020230:	602b      	str	r3, [r5, #0]
 8020232:	f7e5 fecc 	bl	8005fce <_fstat>
 8020236:	1c43      	adds	r3, r0, #1
 8020238:	d102      	bne.n	8020240 <_fstat_r+0x1c>
 802023a:	682b      	ldr	r3, [r5, #0]
 802023c:	b103      	cbz	r3, 8020240 <_fstat_r+0x1c>
 802023e:	6023      	str	r3, [r4, #0]
 8020240:	bd38      	pop	{r3, r4, r5, pc}
 8020242:	bf00      	nop
 8020244:	20016a70 	.word	0x20016a70

08020248 <_isatty_r>:
 8020248:	b538      	push	{r3, r4, r5, lr}
 802024a:	4d06      	ldr	r5, [pc, #24]	; (8020264 <_isatty_r+0x1c>)
 802024c:	2300      	movs	r3, #0
 802024e:	4604      	mov	r4, r0
 8020250:	4608      	mov	r0, r1
 8020252:	602b      	str	r3, [r5, #0]
 8020254:	f7e5 fecb 	bl	8005fee <_isatty>
 8020258:	1c43      	adds	r3, r0, #1
 802025a:	d102      	bne.n	8020262 <_isatty_r+0x1a>
 802025c:	682b      	ldr	r3, [r5, #0]
 802025e:	b103      	cbz	r3, 8020262 <_isatty_r+0x1a>
 8020260:	6023      	str	r3, [r4, #0]
 8020262:	bd38      	pop	{r3, r4, r5, pc}
 8020264:	20016a70 	.word	0x20016a70

08020268 <_malloc_usable_size_r>:
 8020268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802026c:	1f18      	subs	r0, r3, #4
 802026e:	2b00      	cmp	r3, #0
 8020270:	bfbc      	itt	lt
 8020272:	580b      	ldrlt	r3, [r1, r0]
 8020274:	18c0      	addlt	r0, r0, r3
 8020276:	4770      	bx	lr

08020278 <sinf>:
 8020278:	ee10 3a10 	vmov	r3, s0
 802027c:	b507      	push	{r0, r1, r2, lr}
 802027e:	4a1f      	ldr	r2, [pc, #124]	; (80202fc <sinf+0x84>)
 8020280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020284:	4293      	cmp	r3, r2
 8020286:	dc07      	bgt.n	8020298 <sinf+0x20>
 8020288:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8020300 <sinf+0x88>
 802028c:	2000      	movs	r0, #0
 802028e:	b003      	add	sp, #12
 8020290:	f85d eb04 	ldr.w	lr, [sp], #4
 8020294:	f000 b894 	b.w	80203c0 <__kernel_sinf>
 8020298:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802029c:	db04      	blt.n	80202a8 <sinf+0x30>
 802029e:	ee30 0a40 	vsub.f32	s0, s0, s0
 80202a2:	b003      	add	sp, #12
 80202a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80202a8:	4668      	mov	r0, sp
 80202aa:	f000 f8d1 	bl	8020450 <__ieee754_rem_pio2f>
 80202ae:	f000 0003 	and.w	r0, r0, #3
 80202b2:	2801      	cmp	r0, #1
 80202b4:	d00a      	beq.n	80202cc <sinf+0x54>
 80202b6:	2802      	cmp	r0, #2
 80202b8:	d00f      	beq.n	80202da <sinf+0x62>
 80202ba:	b9c0      	cbnz	r0, 80202ee <sinf+0x76>
 80202bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80202c0:	ed9d 0a00 	vldr	s0, [sp]
 80202c4:	2001      	movs	r0, #1
 80202c6:	f000 f87b 	bl	80203c0 <__kernel_sinf>
 80202ca:	e7ea      	b.n	80202a2 <sinf+0x2a>
 80202cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80202d0:	ed9d 0a00 	vldr	s0, [sp]
 80202d4:	f000 f816 	bl	8020304 <__kernel_cosf>
 80202d8:	e7e3      	b.n	80202a2 <sinf+0x2a>
 80202da:	eddd 0a01 	vldr	s1, [sp, #4]
 80202de:	ed9d 0a00 	vldr	s0, [sp]
 80202e2:	2001      	movs	r0, #1
 80202e4:	f000 f86c 	bl	80203c0 <__kernel_sinf>
 80202e8:	eeb1 0a40 	vneg.f32	s0, s0
 80202ec:	e7d9      	b.n	80202a2 <sinf+0x2a>
 80202ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80202f2:	ed9d 0a00 	vldr	s0, [sp]
 80202f6:	f000 f805 	bl	8020304 <__kernel_cosf>
 80202fa:	e7f5      	b.n	80202e8 <sinf+0x70>
 80202fc:	3f490fd8 	.word	0x3f490fd8
 8020300:	00000000 	.word	0x00000000

08020304 <__kernel_cosf>:
 8020304:	ee10 3a10 	vmov	r3, s0
 8020308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802030c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8020310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020314:	da05      	bge.n	8020322 <__kernel_cosf+0x1e>
 8020316:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802031a:	ee17 2a90 	vmov	r2, s15
 802031e:	2a00      	cmp	r2, #0
 8020320:	d03b      	beq.n	802039a <__kernel_cosf+0x96>
 8020322:	ee20 7a00 	vmul.f32	s14, s0, s0
 8020326:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80203a0 <__kernel_cosf+0x9c>
 802032a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80203a4 <__kernel_cosf+0xa0>
 802032e:	4a1e      	ldr	r2, [pc, #120]	; (80203a8 <__kernel_cosf+0xa4>)
 8020330:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020334:	4293      	cmp	r3, r2
 8020336:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80203ac <__kernel_cosf+0xa8>
 802033a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802033e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80203b0 <__kernel_cosf+0xac>
 8020342:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020346:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80203b4 <__kernel_cosf+0xb0>
 802034a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802034e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80203b8 <__kernel_cosf+0xb4>
 8020352:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020356:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802035a:	ee26 6a07 	vmul.f32	s12, s12, s14
 802035e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020362:	eee7 0a06 	vfma.f32	s1, s14, s12
 8020366:	ee67 7a27 	vmul.f32	s15, s14, s15
 802036a:	dc04      	bgt.n	8020376 <__kernel_cosf+0x72>
 802036c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020370:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8020374:	4770      	bx	lr
 8020376:	4a11      	ldr	r2, [pc, #68]	; (80203bc <__kernel_cosf+0xb8>)
 8020378:	4293      	cmp	r3, r2
 802037a:	bfda      	itte	le
 802037c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8020380:	ee07 3a10 	vmovle	s14, r3
 8020384:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8020388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802038c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8020390:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020394:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020398:	4770      	bx	lr
 802039a:	eeb0 0a66 	vmov.f32	s0, s13
 802039e:	4770      	bx	lr
 80203a0:	ad47d74e 	.word	0xad47d74e
 80203a4:	310f74f6 	.word	0x310f74f6
 80203a8:	3e999999 	.word	0x3e999999
 80203ac:	b493f27c 	.word	0xb493f27c
 80203b0:	37d00d01 	.word	0x37d00d01
 80203b4:	bab60b61 	.word	0xbab60b61
 80203b8:	3d2aaaab 	.word	0x3d2aaaab
 80203bc:	3f480000 	.word	0x3f480000

080203c0 <__kernel_sinf>:
 80203c0:	ee10 3a10 	vmov	r3, s0
 80203c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80203c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80203cc:	da04      	bge.n	80203d8 <__kernel_sinf+0x18>
 80203ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80203d2:	ee17 3a90 	vmov	r3, s15
 80203d6:	b35b      	cbz	r3, 8020430 <__kernel_sinf+0x70>
 80203d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80203dc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8020434 <__kernel_sinf+0x74>
 80203e0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8020438 <__kernel_sinf+0x78>
 80203e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80203e8:	eddf 7a14 	vldr	s15, [pc, #80]	; 802043c <__kernel_sinf+0x7c>
 80203ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80203f0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8020440 <__kernel_sinf+0x80>
 80203f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80203f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8020444 <__kernel_sinf+0x84>
 80203fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020400:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020404:	b930      	cbnz	r0, 8020414 <__kernel_sinf+0x54>
 8020406:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8020448 <__kernel_sinf+0x88>
 802040a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802040e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8020412:	4770      	bx	lr
 8020414:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8020418:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802041c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8020420:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8020424:	eddf 7a09 	vldr	s15, [pc, #36]	; 802044c <__kernel_sinf+0x8c>
 8020428:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802042c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8020430:	4770      	bx	lr
 8020432:	bf00      	nop
 8020434:	2f2ec9d3 	.word	0x2f2ec9d3
 8020438:	b2d72f34 	.word	0xb2d72f34
 802043c:	3638ef1b 	.word	0x3638ef1b
 8020440:	b9500d01 	.word	0xb9500d01
 8020444:	3c088889 	.word	0x3c088889
 8020448:	be2aaaab 	.word	0xbe2aaaab
 802044c:	3e2aaaab 	.word	0x3e2aaaab

08020450 <__ieee754_rem_pio2f>:
 8020450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020452:	ee10 6a10 	vmov	r6, s0
 8020456:	4b86      	ldr	r3, [pc, #536]	; (8020670 <__ieee754_rem_pio2f+0x220>)
 8020458:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802045c:	429d      	cmp	r5, r3
 802045e:	b087      	sub	sp, #28
 8020460:	4604      	mov	r4, r0
 8020462:	dc05      	bgt.n	8020470 <__ieee754_rem_pio2f+0x20>
 8020464:	2300      	movs	r3, #0
 8020466:	ed80 0a00 	vstr	s0, [r0]
 802046a:	6043      	str	r3, [r0, #4]
 802046c:	2000      	movs	r0, #0
 802046e:	e020      	b.n	80204b2 <__ieee754_rem_pio2f+0x62>
 8020470:	4b80      	ldr	r3, [pc, #512]	; (8020674 <__ieee754_rem_pio2f+0x224>)
 8020472:	429d      	cmp	r5, r3
 8020474:	dc38      	bgt.n	80204e8 <__ieee754_rem_pio2f+0x98>
 8020476:	2e00      	cmp	r6, #0
 8020478:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8020678 <__ieee754_rem_pio2f+0x228>
 802047c:	4b7f      	ldr	r3, [pc, #508]	; (802067c <__ieee754_rem_pio2f+0x22c>)
 802047e:	f025 050f 	bic.w	r5, r5, #15
 8020482:	dd18      	ble.n	80204b6 <__ieee754_rem_pio2f+0x66>
 8020484:	429d      	cmp	r5, r3
 8020486:	ee70 7a47 	vsub.f32	s15, s0, s14
 802048a:	bf09      	itett	eq
 802048c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8020680 <__ieee754_rem_pio2f+0x230>
 8020490:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8020684 <__ieee754_rem_pio2f+0x234>
 8020494:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8020498:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8020688 <__ieee754_rem_pio2f+0x238>
 802049c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80204a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80204a4:	edc0 6a00 	vstr	s13, [r0]
 80204a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80204ac:	edc0 7a01 	vstr	s15, [r0, #4]
 80204b0:	2001      	movs	r0, #1
 80204b2:	b007      	add	sp, #28
 80204b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204b6:	429d      	cmp	r5, r3
 80204b8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80204bc:	bf09      	itett	eq
 80204be:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8020680 <__ieee754_rem_pio2f+0x230>
 80204c2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8020684 <__ieee754_rem_pio2f+0x234>
 80204c6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80204ca:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8020688 <__ieee754_rem_pio2f+0x238>
 80204ce:	ee77 6a87 	vadd.f32	s13, s15, s14
 80204d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80204d6:	edc0 6a00 	vstr	s13, [r0]
 80204da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80204de:	edc0 7a01 	vstr	s15, [r0, #4]
 80204e2:	f04f 30ff 	mov.w	r0, #4294967295
 80204e6:	e7e4      	b.n	80204b2 <__ieee754_rem_pio2f+0x62>
 80204e8:	4b68      	ldr	r3, [pc, #416]	; (802068c <__ieee754_rem_pio2f+0x23c>)
 80204ea:	429d      	cmp	r5, r3
 80204ec:	dc71      	bgt.n	80205d2 <__ieee754_rem_pio2f+0x182>
 80204ee:	f000 f8db 	bl	80206a8 <fabsf>
 80204f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8020690 <__ieee754_rem_pio2f+0x240>
 80204f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80204fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80204fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020506:	ee17 0a90 	vmov	r0, s15
 802050a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8020678 <__ieee754_rem_pio2f+0x228>
 802050e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8020512:	281f      	cmp	r0, #31
 8020514:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8020684 <__ieee754_rem_pio2f+0x234>
 8020518:	ee67 7a27 	vmul.f32	s15, s14, s15
 802051c:	eeb1 6a47 	vneg.f32	s12, s14
 8020520:	ee70 6a67 	vsub.f32	s13, s0, s15
 8020524:	ee16 2a90 	vmov	r2, s13
 8020528:	dc1c      	bgt.n	8020564 <__ieee754_rem_pio2f+0x114>
 802052a:	495a      	ldr	r1, [pc, #360]	; (8020694 <__ieee754_rem_pio2f+0x244>)
 802052c:	1e47      	subs	r7, r0, #1
 802052e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8020532:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8020536:	428b      	cmp	r3, r1
 8020538:	d014      	beq.n	8020564 <__ieee754_rem_pio2f+0x114>
 802053a:	6022      	str	r2, [r4, #0]
 802053c:	ed94 7a00 	vldr	s14, [r4]
 8020540:	ee30 0a47 	vsub.f32	s0, s0, s14
 8020544:	2e00      	cmp	r6, #0
 8020546:	ee30 0a67 	vsub.f32	s0, s0, s15
 802054a:	ed84 0a01 	vstr	s0, [r4, #4]
 802054e:	dab0      	bge.n	80204b2 <__ieee754_rem_pio2f+0x62>
 8020550:	eeb1 7a47 	vneg.f32	s14, s14
 8020554:	eeb1 0a40 	vneg.f32	s0, s0
 8020558:	ed84 7a00 	vstr	s14, [r4]
 802055c:	ed84 0a01 	vstr	s0, [r4, #4]
 8020560:	4240      	negs	r0, r0
 8020562:	e7a6      	b.n	80204b2 <__ieee754_rem_pio2f+0x62>
 8020564:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8020568:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 802056c:	2908      	cmp	r1, #8
 802056e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8020572:	dde2      	ble.n	802053a <__ieee754_rem_pio2f+0xea>
 8020574:	eddf 5a42 	vldr	s11, [pc, #264]	; 8020680 <__ieee754_rem_pio2f+0x230>
 8020578:	eef0 6a40 	vmov.f32	s13, s0
 802057c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8020580:	ee70 7a66 	vsub.f32	s15, s0, s13
 8020584:	eee6 7a25 	vfma.f32	s15, s12, s11
 8020588:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8020688 <__ieee754_rem_pio2f+0x238>
 802058c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8020590:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8020594:	ee15 2a90 	vmov	r2, s11
 8020598:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802059c:	1a5b      	subs	r3, r3, r1
 802059e:	2b19      	cmp	r3, #25
 80205a0:	dc04      	bgt.n	80205ac <__ieee754_rem_pio2f+0x15c>
 80205a2:	edc4 5a00 	vstr	s11, [r4]
 80205a6:	eeb0 0a66 	vmov.f32	s0, s13
 80205aa:	e7c7      	b.n	802053c <__ieee754_rem_pio2f+0xec>
 80205ac:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8020698 <__ieee754_rem_pio2f+0x248>
 80205b0:	eeb0 0a66 	vmov.f32	s0, s13
 80205b4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80205b8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80205bc:	eddf 6a37 	vldr	s13, [pc, #220]	; 802069c <__ieee754_rem_pio2f+0x24c>
 80205c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80205c4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80205c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80205cc:	ed84 7a00 	vstr	s14, [r4]
 80205d0:	e7b4      	b.n	802053c <__ieee754_rem_pio2f+0xec>
 80205d2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80205d6:	db06      	blt.n	80205e6 <__ieee754_rem_pio2f+0x196>
 80205d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80205dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80205e0:	edc0 7a00 	vstr	s15, [r0]
 80205e4:	e742      	b.n	802046c <__ieee754_rem_pio2f+0x1c>
 80205e6:	15ea      	asrs	r2, r5, #23
 80205e8:	3a86      	subs	r2, #134	; 0x86
 80205ea:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80205ee:	ee07 3a90 	vmov	s15, r3
 80205f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80205f6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80206a0 <__ieee754_rem_pio2f+0x250>
 80205fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80205fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020602:	ed8d 7a03 	vstr	s14, [sp, #12]
 8020606:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802060a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802060e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020616:	ed8d 7a04 	vstr	s14, [sp, #16]
 802061a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802061e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020626:	edcd 7a05 	vstr	s15, [sp, #20]
 802062a:	d11e      	bne.n	802066a <__ieee754_rem_pio2f+0x21a>
 802062c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8020630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020634:	bf14      	ite	ne
 8020636:	2302      	movne	r3, #2
 8020638:	2301      	moveq	r3, #1
 802063a:	491a      	ldr	r1, [pc, #104]	; (80206a4 <__ieee754_rem_pio2f+0x254>)
 802063c:	9101      	str	r1, [sp, #4]
 802063e:	2102      	movs	r1, #2
 8020640:	9100      	str	r1, [sp, #0]
 8020642:	a803      	add	r0, sp, #12
 8020644:	4621      	mov	r1, r4
 8020646:	f000 f837 	bl	80206b8 <__kernel_rem_pio2f>
 802064a:	2e00      	cmp	r6, #0
 802064c:	f6bf af31 	bge.w	80204b2 <__ieee754_rem_pio2f+0x62>
 8020650:	edd4 7a00 	vldr	s15, [r4]
 8020654:	eef1 7a67 	vneg.f32	s15, s15
 8020658:	edc4 7a00 	vstr	s15, [r4]
 802065c:	edd4 7a01 	vldr	s15, [r4, #4]
 8020660:	eef1 7a67 	vneg.f32	s15, s15
 8020664:	edc4 7a01 	vstr	s15, [r4, #4]
 8020668:	e77a      	b.n	8020560 <__ieee754_rem_pio2f+0x110>
 802066a:	2303      	movs	r3, #3
 802066c:	e7e5      	b.n	802063a <__ieee754_rem_pio2f+0x1ea>
 802066e:	bf00      	nop
 8020670:	3f490fd8 	.word	0x3f490fd8
 8020674:	4016cbe3 	.word	0x4016cbe3
 8020678:	3fc90f80 	.word	0x3fc90f80
 802067c:	3fc90fd0 	.word	0x3fc90fd0
 8020680:	37354400 	.word	0x37354400
 8020684:	37354443 	.word	0x37354443
 8020688:	2e85a308 	.word	0x2e85a308
 802068c:	43490f80 	.word	0x43490f80
 8020690:	3f22f984 	.word	0x3f22f984
 8020694:	080236f0 	.word	0x080236f0
 8020698:	2e85a300 	.word	0x2e85a300
 802069c:	248d3132 	.word	0x248d3132
 80206a0:	43800000 	.word	0x43800000
 80206a4:	08023770 	.word	0x08023770

080206a8 <fabsf>:
 80206a8:	ee10 3a10 	vmov	r3, s0
 80206ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80206b0:	ee00 3a10 	vmov	s0, r3
 80206b4:	4770      	bx	lr
	...

080206b8 <__kernel_rem_pio2f>:
 80206b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206bc:	ed2d 8b04 	vpush	{d8-d9}
 80206c0:	b0d9      	sub	sp, #356	; 0x164
 80206c2:	4688      	mov	r8, r1
 80206c4:	9002      	str	r0, [sp, #8]
 80206c6:	49b8      	ldr	r1, [pc, #736]	; (80209a8 <__kernel_rem_pio2f+0x2f0>)
 80206c8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80206ca:	9301      	str	r3, [sp, #4]
 80206cc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80206d0:	9901      	ldr	r1, [sp, #4]
 80206d2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80206d4:	f101 3bff 	add.w	fp, r1, #4294967295
 80206d8:	1d11      	adds	r1, r2, #4
 80206da:	db25      	blt.n	8020728 <__kernel_rem_pio2f+0x70>
 80206dc:	1ed0      	subs	r0, r2, #3
 80206de:	bf48      	it	mi
 80206e0:	1d10      	addmi	r0, r2, #4
 80206e2:	10c0      	asrs	r0, r0, #3
 80206e4:	1c45      	adds	r5, r0, #1
 80206e6:	00e9      	lsls	r1, r5, #3
 80206e8:	eba0 070b 	sub.w	r7, r0, fp
 80206ec:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80209b8 <__kernel_rem_pio2f+0x300>
 80206f0:	9103      	str	r1, [sp, #12]
 80206f2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80206f6:	eb0a 0c0b 	add.w	ip, sl, fp
 80206fa:	ae1c      	add	r6, sp, #112	; 0x70
 80206fc:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8020700:	2400      	movs	r4, #0
 8020702:	4564      	cmp	r4, ip
 8020704:	dd12      	ble.n	802072c <__kernel_rem_pio2f+0x74>
 8020706:	9901      	ldr	r1, [sp, #4]
 8020708:	ac1c      	add	r4, sp, #112	; 0x70
 802070a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802070e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8020712:	f04f 0c00 	mov.w	ip, #0
 8020716:	45d4      	cmp	ip, sl
 8020718:	dc27      	bgt.n	802076a <__kernel_rem_pio2f+0xb2>
 802071a:	f8dd e008 	ldr.w	lr, [sp, #8]
 802071e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80209b8 <__kernel_rem_pio2f+0x300>
 8020722:	4627      	mov	r7, r4
 8020724:	2600      	movs	r6, #0
 8020726:	e016      	b.n	8020756 <__kernel_rem_pio2f+0x9e>
 8020728:	2000      	movs	r0, #0
 802072a:	e7db      	b.n	80206e4 <__kernel_rem_pio2f+0x2c>
 802072c:	42e7      	cmn	r7, r4
 802072e:	bf5d      	ittte	pl
 8020730:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8020734:	ee07 1a90 	vmovpl	s15, r1
 8020738:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802073c:	eef0 7a47 	vmovmi.f32	s15, s14
 8020740:	ece6 7a01 	vstmia	r6!, {s15}
 8020744:	3401      	adds	r4, #1
 8020746:	e7dc      	b.n	8020702 <__kernel_rem_pio2f+0x4a>
 8020748:	ecfe 6a01 	vldmia	lr!, {s13}
 802074c:	ed97 7a00 	vldr	s14, [r7]
 8020750:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020754:	3601      	adds	r6, #1
 8020756:	455e      	cmp	r6, fp
 8020758:	f1a7 0704 	sub.w	r7, r7, #4
 802075c:	ddf4      	ble.n	8020748 <__kernel_rem_pio2f+0x90>
 802075e:	ece9 7a01 	vstmia	r9!, {s15}
 8020762:	f10c 0c01 	add.w	ip, ip, #1
 8020766:	3404      	adds	r4, #4
 8020768:	e7d5      	b.n	8020716 <__kernel_rem_pio2f+0x5e>
 802076a:	a908      	add	r1, sp, #32
 802076c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020770:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8020774:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80209b4 <__kernel_rem_pio2f+0x2fc>
 8020778:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80209b0 <__kernel_rem_pio2f+0x2f8>
 802077c:	9105      	str	r1, [sp, #20]
 802077e:	9304      	str	r3, [sp, #16]
 8020780:	4656      	mov	r6, sl
 8020782:	00b3      	lsls	r3, r6, #2
 8020784:	9306      	str	r3, [sp, #24]
 8020786:	ab58      	add	r3, sp, #352	; 0x160
 8020788:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802078c:	ac08      	add	r4, sp, #32
 802078e:	ab44      	add	r3, sp, #272	; 0x110
 8020790:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8020794:	46a4      	mov	ip, r4
 8020796:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802079a:	4637      	mov	r7, r6
 802079c:	2f00      	cmp	r7, #0
 802079e:	f1a0 0004 	sub.w	r0, r0, #4
 80207a2:	dc4a      	bgt.n	802083a <__kernel_rem_pio2f+0x182>
 80207a4:	4628      	mov	r0, r5
 80207a6:	9207      	str	r2, [sp, #28]
 80207a8:	f000 f9f8 	bl	8020b9c <scalbnf>
 80207ac:	eeb0 8a40 	vmov.f32	s16, s0
 80207b0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80207b4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80207b8:	f000 fa56 	bl	8020c68 <floorf>
 80207bc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80207c0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80207c4:	2d00      	cmp	r5, #0
 80207c6:	9a07      	ldr	r2, [sp, #28]
 80207c8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80207cc:	ee17 9a90 	vmov	r9, s15
 80207d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207d4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80207d8:	dd41      	ble.n	802085e <__kernel_rem_pio2f+0x1a6>
 80207da:	f106 3cff 	add.w	ip, r6, #4294967295
 80207de:	ab08      	add	r3, sp, #32
 80207e0:	f1c5 0e08 	rsb	lr, r5, #8
 80207e4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80207e8:	fa47 f00e 	asr.w	r0, r7, lr
 80207ec:	4481      	add	r9, r0
 80207ee:	fa00 f00e 	lsl.w	r0, r0, lr
 80207f2:	1a3f      	subs	r7, r7, r0
 80207f4:	f1c5 0007 	rsb	r0, r5, #7
 80207f8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80207fc:	4107      	asrs	r7, r0
 80207fe:	2f00      	cmp	r7, #0
 8020800:	dd3c      	ble.n	802087c <__kernel_rem_pio2f+0x1c4>
 8020802:	f04f 0e00 	mov.w	lr, #0
 8020806:	f109 0901 	add.w	r9, r9, #1
 802080a:	4671      	mov	r1, lr
 802080c:	4576      	cmp	r6, lr
 802080e:	dc67      	bgt.n	80208e0 <__kernel_rem_pio2f+0x228>
 8020810:	2d00      	cmp	r5, #0
 8020812:	dd03      	ble.n	802081c <__kernel_rem_pio2f+0x164>
 8020814:	2d01      	cmp	r5, #1
 8020816:	d074      	beq.n	8020902 <__kernel_rem_pio2f+0x24a>
 8020818:	2d02      	cmp	r5, #2
 802081a:	d07b      	beq.n	8020914 <__kernel_rem_pio2f+0x25c>
 802081c:	2f02      	cmp	r7, #2
 802081e:	d12d      	bne.n	802087c <__kernel_rem_pio2f+0x1c4>
 8020820:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8020824:	ee30 8a48 	vsub.f32	s16, s0, s16
 8020828:	b341      	cbz	r1, 802087c <__kernel_rem_pio2f+0x1c4>
 802082a:	4628      	mov	r0, r5
 802082c:	9207      	str	r2, [sp, #28]
 802082e:	f000 f9b5 	bl	8020b9c <scalbnf>
 8020832:	9a07      	ldr	r2, [sp, #28]
 8020834:	ee38 8a40 	vsub.f32	s16, s16, s0
 8020838:	e020      	b.n	802087c <__kernel_rem_pio2f+0x1c4>
 802083a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802083e:	3f01      	subs	r7, #1
 8020840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020848:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802084c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020850:	ecac 0a01 	vstmia	ip!, {s0}
 8020854:	ed90 0a00 	vldr	s0, [r0]
 8020858:	ee37 0a80 	vadd.f32	s0, s15, s0
 802085c:	e79e      	b.n	802079c <__kernel_rem_pio2f+0xe4>
 802085e:	d105      	bne.n	802086c <__kernel_rem_pio2f+0x1b4>
 8020860:	1e70      	subs	r0, r6, #1
 8020862:	ab08      	add	r3, sp, #32
 8020864:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8020868:	11ff      	asrs	r7, r7, #7
 802086a:	e7c8      	b.n	80207fe <__kernel_rem_pio2f+0x146>
 802086c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020870:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8020874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020878:	da30      	bge.n	80208dc <__kernel_rem_pio2f+0x224>
 802087a:	2700      	movs	r7, #0
 802087c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8020880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020884:	f040 809a 	bne.w	80209bc <__kernel_rem_pio2f+0x304>
 8020888:	1e74      	subs	r4, r6, #1
 802088a:	46a4      	mov	ip, r4
 802088c:	2100      	movs	r1, #0
 802088e:	45d4      	cmp	ip, sl
 8020890:	da47      	bge.n	8020922 <__kernel_rem_pio2f+0x26a>
 8020892:	2900      	cmp	r1, #0
 8020894:	d063      	beq.n	802095e <__kernel_rem_pio2f+0x2a6>
 8020896:	ab08      	add	r3, sp, #32
 8020898:	3d08      	subs	r5, #8
 802089a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d07f      	beq.n	80209a2 <__kernel_rem_pio2f+0x2ea>
 80208a2:	4628      	mov	r0, r5
 80208a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80208a8:	f000 f978 	bl	8020b9c <scalbnf>
 80208ac:	1c63      	adds	r3, r4, #1
 80208ae:	aa44      	add	r2, sp, #272	; 0x110
 80208b0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80209b4 <__kernel_rem_pio2f+0x2fc>
 80208b4:	0099      	lsls	r1, r3, #2
 80208b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80208ba:	4623      	mov	r3, r4
 80208bc:	2b00      	cmp	r3, #0
 80208be:	f280 80ad 	bge.w	8020a1c <__kernel_rem_pio2f+0x364>
 80208c2:	4623      	mov	r3, r4
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	f2c0 80cb 	blt.w	8020a60 <__kernel_rem_pio2f+0x3a8>
 80208ca:	aa44      	add	r2, sp, #272	; 0x110
 80208cc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80208d0:	4e36      	ldr	r6, [pc, #216]	; (80209ac <__kernel_rem_pio2f+0x2f4>)
 80208d2:	eddf 7a39 	vldr	s15, [pc, #228]	; 80209b8 <__kernel_rem_pio2f+0x300>
 80208d6:	2000      	movs	r0, #0
 80208d8:	1ae2      	subs	r2, r4, r3
 80208da:	e0b6      	b.n	8020a4a <__kernel_rem_pio2f+0x392>
 80208dc:	2702      	movs	r7, #2
 80208de:	e790      	b.n	8020802 <__kernel_rem_pio2f+0x14a>
 80208e0:	6820      	ldr	r0, [r4, #0]
 80208e2:	b949      	cbnz	r1, 80208f8 <__kernel_rem_pio2f+0x240>
 80208e4:	b118      	cbz	r0, 80208ee <__kernel_rem_pio2f+0x236>
 80208e6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80208ea:	6020      	str	r0, [r4, #0]
 80208ec:	2001      	movs	r0, #1
 80208ee:	f10e 0e01 	add.w	lr, lr, #1
 80208f2:	3404      	adds	r4, #4
 80208f4:	4601      	mov	r1, r0
 80208f6:	e789      	b.n	802080c <__kernel_rem_pio2f+0x154>
 80208f8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80208fc:	6020      	str	r0, [r4, #0]
 80208fe:	4608      	mov	r0, r1
 8020900:	e7f5      	b.n	80208ee <__kernel_rem_pio2f+0x236>
 8020902:	1e74      	subs	r4, r6, #1
 8020904:	ab08      	add	r3, sp, #32
 8020906:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802090a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802090e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8020912:	e783      	b.n	802081c <__kernel_rem_pio2f+0x164>
 8020914:	1e74      	subs	r4, r6, #1
 8020916:	ab08      	add	r3, sp, #32
 8020918:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802091c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8020920:	e7f5      	b.n	802090e <__kernel_rem_pio2f+0x256>
 8020922:	ab08      	add	r3, sp, #32
 8020924:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8020928:	f10c 3cff 	add.w	ip, ip, #4294967295
 802092c:	4301      	orrs	r1, r0
 802092e:	e7ae      	b.n	802088e <__kernel_rem_pio2f+0x1d6>
 8020930:	3001      	adds	r0, #1
 8020932:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8020936:	2f00      	cmp	r7, #0
 8020938:	d0fa      	beq.n	8020930 <__kernel_rem_pio2f+0x278>
 802093a:	9b06      	ldr	r3, [sp, #24]
 802093c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8020940:	eb0d 0403 	add.w	r4, sp, r3
 8020944:	9b01      	ldr	r3, [sp, #4]
 8020946:	18f7      	adds	r7, r6, r3
 8020948:	ab1c      	add	r3, sp, #112	; 0x70
 802094a:	f106 0c01 	add.w	ip, r6, #1
 802094e:	3c4c      	subs	r4, #76	; 0x4c
 8020950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020954:	4430      	add	r0, r6
 8020956:	4560      	cmp	r0, ip
 8020958:	da04      	bge.n	8020964 <__kernel_rem_pio2f+0x2ac>
 802095a:	4606      	mov	r6, r0
 802095c:	e711      	b.n	8020782 <__kernel_rem_pio2f+0xca>
 802095e:	9c05      	ldr	r4, [sp, #20]
 8020960:	2001      	movs	r0, #1
 8020962:	e7e6      	b.n	8020932 <__kernel_rem_pio2f+0x27a>
 8020964:	9b04      	ldr	r3, [sp, #16]
 8020966:	f8dd e008 	ldr.w	lr, [sp, #8]
 802096a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802096e:	9306      	str	r3, [sp, #24]
 8020970:	ee07 3a90 	vmov	s15, r3
 8020974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020978:	2600      	movs	r6, #0
 802097a:	ece7 7a01 	vstmia	r7!, {s15}
 802097e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80209b8 <__kernel_rem_pio2f+0x300>
 8020982:	46b9      	mov	r9, r7
 8020984:	455e      	cmp	r6, fp
 8020986:	dd04      	ble.n	8020992 <__kernel_rem_pio2f+0x2da>
 8020988:	ece4 7a01 	vstmia	r4!, {s15}
 802098c:	f10c 0c01 	add.w	ip, ip, #1
 8020990:	e7e1      	b.n	8020956 <__kernel_rem_pio2f+0x29e>
 8020992:	ecfe 6a01 	vldmia	lr!, {s13}
 8020996:	ed39 7a01 	vldmdb	r9!, {s14}
 802099a:	3601      	adds	r6, #1
 802099c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80209a0:	e7f0      	b.n	8020984 <__kernel_rem_pio2f+0x2cc>
 80209a2:	3c01      	subs	r4, #1
 80209a4:	e777      	b.n	8020896 <__kernel_rem_pio2f+0x1de>
 80209a6:	bf00      	nop
 80209a8:	08023ab4 	.word	0x08023ab4
 80209ac:	08023a88 	.word	0x08023a88
 80209b0:	43800000 	.word	0x43800000
 80209b4:	3b800000 	.word	0x3b800000
 80209b8:	00000000 	.word	0x00000000
 80209bc:	9b03      	ldr	r3, [sp, #12]
 80209be:	eeb0 0a48 	vmov.f32	s0, s16
 80209c2:	1a98      	subs	r0, r3, r2
 80209c4:	f000 f8ea 	bl	8020b9c <scalbnf>
 80209c8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80209b0 <__kernel_rem_pio2f+0x2f8>
 80209cc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80209d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209d4:	db19      	blt.n	8020a0a <__kernel_rem_pio2f+0x352>
 80209d6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80209b4 <__kernel_rem_pio2f+0x2fc>
 80209da:	ee60 7a27 	vmul.f32	s15, s0, s15
 80209de:	aa08      	add	r2, sp, #32
 80209e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80209e4:	1c74      	adds	r4, r6, #1
 80209e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209ea:	3508      	adds	r5, #8
 80209ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80209f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80209f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80209f8:	ee10 3a10 	vmov	r3, s0
 80209fc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8020a00:	ee17 3a90 	vmov	r3, s15
 8020a04:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8020a08:	e74b      	b.n	80208a2 <__kernel_rem_pio2f+0x1ea>
 8020a0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020a0e:	aa08      	add	r2, sp, #32
 8020a10:	ee10 3a10 	vmov	r3, s0
 8020a14:	4634      	mov	r4, r6
 8020a16:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8020a1a:	e742      	b.n	80208a2 <__kernel_rem_pio2f+0x1ea>
 8020a1c:	a808      	add	r0, sp, #32
 8020a1e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8020a22:	9001      	str	r0, [sp, #4]
 8020a24:	ee07 0a90 	vmov	s15, r0
 8020a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020a2c:	3b01      	subs	r3, #1
 8020a2e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020a32:	ee20 0a07 	vmul.f32	s0, s0, s14
 8020a36:	ed62 7a01 	vstmdb	r2!, {s15}
 8020a3a:	e73f      	b.n	80208bc <__kernel_rem_pio2f+0x204>
 8020a3c:	ecf6 6a01 	vldmia	r6!, {s13}
 8020a40:	ecb5 7a01 	vldmia	r5!, {s14}
 8020a44:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020a48:	3001      	adds	r0, #1
 8020a4a:	4550      	cmp	r0, sl
 8020a4c:	dc01      	bgt.n	8020a52 <__kernel_rem_pio2f+0x39a>
 8020a4e:	4290      	cmp	r0, r2
 8020a50:	ddf4      	ble.n	8020a3c <__kernel_rem_pio2f+0x384>
 8020a52:	a858      	add	r0, sp, #352	; 0x160
 8020a54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8020a58:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8020a5c:	3b01      	subs	r3, #1
 8020a5e:	e731      	b.n	80208c4 <__kernel_rem_pio2f+0x20c>
 8020a60:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8020a62:	2b02      	cmp	r3, #2
 8020a64:	dc09      	bgt.n	8020a7a <__kernel_rem_pio2f+0x3c2>
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	dc2b      	bgt.n	8020ac2 <__kernel_rem_pio2f+0x40a>
 8020a6a:	d044      	beq.n	8020af6 <__kernel_rem_pio2f+0x43e>
 8020a6c:	f009 0007 	and.w	r0, r9, #7
 8020a70:	b059      	add	sp, #356	; 0x164
 8020a72:	ecbd 8b04 	vpop	{d8-d9}
 8020a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a7a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8020a7c:	2b03      	cmp	r3, #3
 8020a7e:	d1f5      	bne.n	8020a6c <__kernel_rem_pio2f+0x3b4>
 8020a80:	aa30      	add	r2, sp, #192	; 0xc0
 8020a82:	1f0b      	subs	r3, r1, #4
 8020a84:	4413      	add	r3, r2
 8020a86:	461a      	mov	r2, r3
 8020a88:	4620      	mov	r0, r4
 8020a8a:	2800      	cmp	r0, #0
 8020a8c:	f1a2 0204 	sub.w	r2, r2, #4
 8020a90:	dc52      	bgt.n	8020b38 <__kernel_rem_pio2f+0x480>
 8020a92:	4622      	mov	r2, r4
 8020a94:	2a01      	cmp	r2, #1
 8020a96:	f1a3 0304 	sub.w	r3, r3, #4
 8020a9a:	dc5d      	bgt.n	8020b58 <__kernel_rem_pio2f+0x4a0>
 8020a9c:	ab30      	add	r3, sp, #192	; 0xc0
 8020a9e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80209b8 <__kernel_rem_pio2f+0x300>
 8020aa2:	440b      	add	r3, r1
 8020aa4:	2c01      	cmp	r4, #1
 8020aa6:	dc67      	bgt.n	8020b78 <__kernel_rem_pio2f+0x4c0>
 8020aa8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8020aac:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8020ab0:	2f00      	cmp	r7, #0
 8020ab2:	d167      	bne.n	8020b84 <__kernel_rem_pio2f+0x4cc>
 8020ab4:	edc8 6a00 	vstr	s13, [r8]
 8020ab8:	ed88 7a01 	vstr	s14, [r8, #4]
 8020abc:	edc8 7a02 	vstr	s15, [r8, #8]
 8020ac0:	e7d4      	b.n	8020a6c <__kernel_rem_pio2f+0x3b4>
 8020ac2:	ab30      	add	r3, sp, #192	; 0xc0
 8020ac4:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80209b8 <__kernel_rem_pio2f+0x300>
 8020ac8:	440b      	add	r3, r1
 8020aca:	4622      	mov	r2, r4
 8020acc:	2a00      	cmp	r2, #0
 8020ace:	da24      	bge.n	8020b1a <__kernel_rem_pio2f+0x462>
 8020ad0:	b34f      	cbz	r7, 8020b26 <__kernel_rem_pio2f+0x46e>
 8020ad2:	eef1 7a47 	vneg.f32	s15, s14
 8020ad6:	edc8 7a00 	vstr	s15, [r8]
 8020ada:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8020ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020ae2:	aa31      	add	r2, sp, #196	; 0xc4
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	429c      	cmp	r4, r3
 8020ae8:	da20      	bge.n	8020b2c <__kernel_rem_pio2f+0x474>
 8020aea:	b10f      	cbz	r7, 8020af0 <__kernel_rem_pio2f+0x438>
 8020aec:	eef1 7a67 	vneg.f32	s15, s15
 8020af0:	edc8 7a01 	vstr	s15, [r8, #4]
 8020af4:	e7ba      	b.n	8020a6c <__kernel_rem_pio2f+0x3b4>
 8020af6:	ab30      	add	r3, sp, #192	; 0xc0
 8020af8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80209b8 <__kernel_rem_pio2f+0x300>
 8020afc:	440b      	add	r3, r1
 8020afe:	2c00      	cmp	r4, #0
 8020b00:	da05      	bge.n	8020b0e <__kernel_rem_pio2f+0x456>
 8020b02:	b10f      	cbz	r7, 8020b08 <__kernel_rem_pio2f+0x450>
 8020b04:	eef1 7a67 	vneg.f32	s15, s15
 8020b08:	edc8 7a00 	vstr	s15, [r8]
 8020b0c:	e7ae      	b.n	8020a6c <__kernel_rem_pio2f+0x3b4>
 8020b0e:	ed33 7a01 	vldmdb	r3!, {s14}
 8020b12:	3c01      	subs	r4, #1
 8020b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020b18:	e7f1      	b.n	8020afe <__kernel_rem_pio2f+0x446>
 8020b1a:	ed73 7a01 	vldmdb	r3!, {s15}
 8020b1e:	3a01      	subs	r2, #1
 8020b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020b24:	e7d2      	b.n	8020acc <__kernel_rem_pio2f+0x414>
 8020b26:	eef0 7a47 	vmov.f32	s15, s14
 8020b2a:	e7d4      	b.n	8020ad6 <__kernel_rem_pio2f+0x41e>
 8020b2c:	ecb2 7a01 	vldmia	r2!, {s14}
 8020b30:	3301      	adds	r3, #1
 8020b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020b36:	e7d6      	b.n	8020ae6 <__kernel_rem_pio2f+0x42e>
 8020b38:	edd2 7a00 	vldr	s15, [r2]
 8020b3c:	edd2 6a01 	vldr	s13, [r2, #4]
 8020b40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020b44:	3801      	subs	r0, #1
 8020b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020b4a:	ed82 7a00 	vstr	s14, [r2]
 8020b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020b52:	edc2 7a01 	vstr	s15, [r2, #4]
 8020b56:	e798      	b.n	8020a8a <__kernel_rem_pio2f+0x3d2>
 8020b58:	edd3 7a00 	vldr	s15, [r3]
 8020b5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8020b60:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020b64:	3a01      	subs	r2, #1
 8020b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020b6a:	ed83 7a00 	vstr	s14, [r3]
 8020b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020b72:	edc3 7a01 	vstr	s15, [r3, #4]
 8020b76:	e78d      	b.n	8020a94 <__kernel_rem_pio2f+0x3dc>
 8020b78:	ed33 7a01 	vldmdb	r3!, {s14}
 8020b7c:	3c01      	subs	r4, #1
 8020b7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020b82:	e78f      	b.n	8020aa4 <__kernel_rem_pio2f+0x3ec>
 8020b84:	eef1 6a66 	vneg.f32	s13, s13
 8020b88:	eeb1 7a47 	vneg.f32	s14, s14
 8020b8c:	edc8 6a00 	vstr	s13, [r8]
 8020b90:	ed88 7a01 	vstr	s14, [r8, #4]
 8020b94:	eef1 7a67 	vneg.f32	s15, s15
 8020b98:	e790      	b.n	8020abc <__kernel_rem_pio2f+0x404>
 8020b9a:	bf00      	nop

08020b9c <scalbnf>:
 8020b9c:	ee10 3a10 	vmov	r3, s0
 8020ba0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8020ba4:	d02b      	beq.n	8020bfe <scalbnf+0x62>
 8020ba6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8020baa:	d302      	bcc.n	8020bb2 <scalbnf+0x16>
 8020bac:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020bb0:	4770      	bx	lr
 8020bb2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8020bb6:	d123      	bne.n	8020c00 <scalbnf+0x64>
 8020bb8:	4b24      	ldr	r3, [pc, #144]	; (8020c4c <scalbnf+0xb0>)
 8020bba:	eddf 7a25 	vldr	s15, [pc, #148]	; 8020c50 <scalbnf+0xb4>
 8020bbe:	4298      	cmp	r0, r3
 8020bc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020bc4:	db17      	blt.n	8020bf6 <scalbnf+0x5a>
 8020bc6:	ee10 3a10 	vmov	r3, s0
 8020bca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020bce:	3a19      	subs	r2, #25
 8020bd0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8020bd4:	4288      	cmp	r0, r1
 8020bd6:	dd15      	ble.n	8020c04 <scalbnf+0x68>
 8020bd8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8020c54 <scalbnf+0xb8>
 8020bdc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8020c58 <scalbnf+0xbc>
 8020be0:	ee10 3a10 	vmov	r3, s0
 8020be4:	eeb0 7a67 	vmov.f32	s14, s15
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	bfb8      	it	lt
 8020bec:	eef0 7a66 	vmovlt.f32	s15, s13
 8020bf0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8020bf4:	4770      	bx	lr
 8020bf6:	eddf 7a19 	vldr	s15, [pc, #100]	; 8020c5c <scalbnf+0xc0>
 8020bfa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020bfe:	4770      	bx	lr
 8020c00:	0dd2      	lsrs	r2, r2, #23
 8020c02:	e7e5      	b.n	8020bd0 <scalbnf+0x34>
 8020c04:	4410      	add	r0, r2
 8020c06:	28fe      	cmp	r0, #254	; 0xfe
 8020c08:	dce6      	bgt.n	8020bd8 <scalbnf+0x3c>
 8020c0a:	2800      	cmp	r0, #0
 8020c0c:	dd06      	ble.n	8020c1c <scalbnf+0x80>
 8020c0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020c12:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8020c16:	ee00 3a10 	vmov	s0, r3
 8020c1a:	4770      	bx	lr
 8020c1c:	f110 0f16 	cmn.w	r0, #22
 8020c20:	da09      	bge.n	8020c36 <scalbnf+0x9a>
 8020c22:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8020c5c <scalbnf+0xc0>
 8020c26:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8020c60 <scalbnf+0xc4>
 8020c2a:	ee10 3a10 	vmov	r3, s0
 8020c2e:	eeb0 7a67 	vmov.f32	s14, s15
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	e7d9      	b.n	8020bea <scalbnf+0x4e>
 8020c36:	3019      	adds	r0, #25
 8020c38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020c3c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8020c40:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8020c64 <scalbnf+0xc8>
 8020c44:	ee07 3a90 	vmov	s15, r3
 8020c48:	e7d7      	b.n	8020bfa <scalbnf+0x5e>
 8020c4a:	bf00      	nop
 8020c4c:	ffff3cb0 	.word	0xffff3cb0
 8020c50:	4c000000 	.word	0x4c000000
 8020c54:	7149f2ca 	.word	0x7149f2ca
 8020c58:	f149f2ca 	.word	0xf149f2ca
 8020c5c:	0da24260 	.word	0x0da24260
 8020c60:	8da24260 	.word	0x8da24260
 8020c64:	33000000 	.word	0x33000000

08020c68 <floorf>:
 8020c68:	ee10 3a10 	vmov	r3, s0
 8020c6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020c70:	3a7f      	subs	r2, #127	; 0x7f
 8020c72:	2a16      	cmp	r2, #22
 8020c74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020c78:	dc2a      	bgt.n	8020cd0 <floorf+0x68>
 8020c7a:	2a00      	cmp	r2, #0
 8020c7c:	da11      	bge.n	8020ca2 <floorf+0x3a>
 8020c7e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8020ce0 <floorf+0x78>
 8020c82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020c86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c8e:	dd05      	ble.n	8020c9c <floorf+0x34>
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	da23      	bge.n	8020cdc <floorf+0x74>
 8020c94:	4a13      	ldr	r2, [pc, #76]	; (8020ce4 <floorf+0x7c>)
 8020c96:	2900      	cmp	r1, #0
 8020c98:	bf18      	it	ne
 8020c9a:	4613      	movne	r3, r2
 8020c9c:	ee00 3a10 	vmov	s0, r3
 8020ca0:	4770      	bx	lr
 8020ca2:	4911      	ldr	r1, [pc, #68]	; (8020ce8 <floorf+0x80>)
 8020ca4:	4111      	asrs	r1, r2
 8020ca6:	420b      	tst	r3, r1
 8020ca8:	d0fa      	beq.n	8020ca0 <floorf+0x38>
 8020caa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8020ce0 <floorf+0x78>
 8020cae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020cb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cba:	ddef      	ble.n	8020c9c <floorf+0x34>
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	bfbe      	ittt	lt
 8020cc0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8020cc4:	fa40 f202 	asrlt.w	r2, r0, r2
 8020cc8:	189b      	addlt	r3, r3, r2
 8020cca:	ea23 0301 	bic.w	r3, r3, r1
 8020cce:	e7e5      	b.n	8020c9c <floorf+0x34>
 8020cd0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8020cd4:	d3e4      	bcc.n	8020ca0 <floorf+0x38>
 8020cd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020cda:	4770      	bx	lr
 8020cdc:	2300      	movs	r3, #0
 8020cde:	e7dd      	b.n	8020c9c <floorf+0x34>
 8020ce0:	7149f2ca 	.word	0x7149f2ca
 8020ce4:	bf800000 	.word	0xbf800000
 8020ce8:	007fffff 	.word	0x007fffff

08020cec <_init>:
 8020cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cee:	bf00      	nop
 8020cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020cf2:	bc08      	pop	{r3}
 8020cf4:	469e      	mov	lr, r3
 8020cf6:	4770      	bx	lr

08020cf8 <_fini>:
 8020cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cfa:	bf00      	nop
 8020cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020cfe:	bc08      	pop	{r3}
 8020d00:	469e      	mov	lr, r3
 8020d02:	4770      	bx	lr
