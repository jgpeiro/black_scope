
test_g473_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019adc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002810  08019cc0  08019cc0  00029cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c4d0  0801c4d0  00030368  2**0
                  CONTENTS
  4 .ARM          00000000  0801c4d0  0801c4d0  00030368  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c4d0  0801c4d0  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c4d0  0801c4d0  0002c4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c4d4  0801c4d4  0002c4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0801c4d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016738  20000368  0801c840  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016aa0  0801c840  00036aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0008b2a1  00000000  00000000  000303db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c1b3  00000000  00000000  000bb67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000312a1  00000000  00000000  000c782f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d78  00000000  00000000  000f8ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c4e  00000000  00000000  000fb848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028df5  00000000  00000000  000fe496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a3c2  00000000  00000000  0012728b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001006a8  00000000  00000000  0017164d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a1ec  00000000  00000000  00271cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0027bee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000368 	.word	0x20000368
 80001fc:	00000000 	.word	0x00000000
 8000200:	08019ca4 	.word	0x08019ca4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000036c 	.word	0x2000036c
 800021c:	08019ca4 	.word	0x08019ca4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cdc:	2400      	movs	r4, #0
 8000cde:	940f      	str	r4, [sp, #60]	; 0x3c
 8000ce0:	9410      	str	r4, [sp, #64]	; 0x40
 8000ce2:	9411      	str	r4, [sp, #68]	; 0x44
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000ce4:	9408      	str	r4, [sp, #32]
 8000ce6:	9409      	str	r4, [sp, #36]	; 0x24
 8000ce8:	940a      	str	r4, [sp, #40]	; 0x28
 8000cea:	940b      	str	r4, [sp, #44]	; 0x2c
 8000cec:	940c      	str	r4, [sp, #48]	; 0x30
 8000cee:	940d      	str	r4, [sp, #52]	; 0x34
 8000cf0:	940e      	str	r4, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	4668      	mov	r0, sp
 8000cf8:	f016 f9d1 	bl	801709e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cfc:	4838      	ldr	r0, [pc, #224]	; (8000de0 <MX_ADC1_Init+0x108>)
 8000cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d02:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d04:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d08:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d0a:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0c:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8000d0e:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d10:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d12:	2304      	movs	r3, #4
 8000d14:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d16:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d18:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d22:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d26:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2c:	6302      	str	r2, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d2e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d32:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d34:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d38:	f003 fce6 	bl	8004708 <HAL_ADC_Init>
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d13f      	bne.n	8000dc0 <MX_ADC1_Init+0xe8>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d44:	a90f      	add	r1, sp, #60	; 0x3c
 8000d46:	4826      	ldr	r0, [pc, #152]	; (8000de0 <MX_ADC1_Init+0x108>)
 8000d48:	f004 fe3c 	bl	80059c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d13a      	bne.n	8000dc6 <MX_ADC1_Init+0xee>
    Error_Handler();
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_ADC1_Init+0x10c>)
 8000d52:	9308      	str	r3, [sp, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000d54:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000d58:	9309      	str	r3, [sp, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_ADC1_Init+0x110>)
 8000d5c:	930a      	str	r3, [sp, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 4095;
 8000d64:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d68:	930c      	str	r3, [sp, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 2048+768;
 8000d6a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000d6e:	930d      	str	r3, [sp, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000d74:	a908      	add	r1, sp, #32
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <MX_ADC1_Init+0x108>)
 8000d78:	f004 fa48 	bl	800520c <HAL_ADC_AnalogWDGConfig>
 8000d7c:	bb30      	cbnz	r0, 8000dcc <MX_ADC1_Init+0xf4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_ADC1_Init+0x110>)
 8000d80:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d82:	2306      	movs	r3, #6
 8000d84:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d86:	2300      	movs	r3, #0
 8000d88:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8a:	227f      	movs	r2, #127	; 0x7f
 8000d8c:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2204      	movs	r2, #4
 8000d90:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8000d92:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d94:	4669      	mov	r1, sp
 8000d96:	4812      	ldr	r0, [pc, #72]	; (8000de0 <MX_ADC1_Init+0x108>)
 8000d98:	f003 ffb8 	bl	8004d0c <HAL_ADC_ConfigChannel>
 8000d9c:	b9c8      	cbnz	r0, 8000dd2 <MX_ADC1_Init+0xfa>
    Error_Handler();
  }

  /** Configure the channel to be monitored by WatchDog 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_ADC1_Init+0x114>)
 8000da0:	9308      	str	r3, [sp, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REGINJEC;
 8000da2:	f04f 73e0 	mov.w	r3, #29360128	; 0x1c00000
 8000da6:	9309      	str	r3, [sp, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2816;
 8000da8:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000dac:	930c      	str	r3, [sp, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000db2:	a908      	add	r1, sp, #32
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <MX_ADC1_Init+0x108>)
 8000db6:	f004 fa29 	bl	800520c <HAL_ADC_AnalogWDGConfig>
 8000dba:	b968      	cbnz	r0, 8000dd8 <MX_ADC1_Init+0x100>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dbc:	b012      	add	sp, #72	; 0x48
 8000dbe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000dc0:	f002 fafc 	bl	80033bc <Error_Handler>
 8000dc4:	e7bc      	b.n	8000d40 <MX_ADC1_Init+0x68>
    Error_Handler();
 8000dc6:	f002 faf9 	bl	80033bc <Error_Handler>
 8000dca:	e7c1      	b.n	8000d50 <MX_ADC1_Init+0x78>
    Error_Handler();
 8000dcc:	f002 faf6 	bl	80033bc <Error_Handler>
 8000dd0:	e7d5      	b.n	8000d7e <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000dd2:	f002 faf3 	bl	80033bc <Error_Handler>
 8000dd6:	e7e2      	b.n	8000d9e <MX_ADC1_Init+0xc6>
    Error_Handler();
 8000dd8:	f002 faf0 	bl	80033bc <Error_Handler>
}
 8000ddc:	e7ee      	b.n	8000dbc <MX_ADC1_Init+0xe4>
 8000dde:	bf00      	nop
 8000de0:	20000388 	.word	0x20000388
 8000de4:	7dc00000 	.word	0x7dc00000
 8000de8:	b6902000 	.word	0xb6902000
 8000dec:	0017ffff 	.word	0x0017ffff

08000df0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000df0:	b510      	push	{r4, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000df4:	2400      	movs	r4, #0
 8000df6:	9409      	str	r4, [sp, #36]	; 0x24
 8000df8:	940a      	str	r4, [sp, #40]	; 0x28
 8000dfa:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	4621      	mov	r1, r4
 8000e00:	a801      	add	r0, sp, #4
 8000e02:	f016 f94c 	bl	801709e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e06:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_ADC3_Init+0x9c>)
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_ADC3_Init+0xa0>)
 8000e0a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e0c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000e10:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 8000e16:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e18:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e1e:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e20:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e2a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e2e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	6302      	str	r2, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000e36:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e3a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000e3c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e40:	f003 fc62 	bl	8004708 <HAL_ADC_Init>
 8000e44:	b9c8      	cbnz	r0, 8000e7a <MX_ADC3_Init+0x8a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e4a:	a909      	add	r1, sp, #36	; 0x24
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <MX_ADC3_Init+0x9c>)
 8000e4e:	f004 fdb9 	bl	80059c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000e52:	b9a8      	cbnz	r0, 8000e80 <MX_ADC3_Init+0x90>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_ADC3_Init+0xa4>)
 8000e56:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e60:	237f      	movs	r3, #127	; 0x7f
 8000e62:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e64:	2304      	movs	r3, #4
 8000e66:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e6c:	a901      	add	r1, sp, #4
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_ADC3_Init+0x9c>)
 8000e70:	f003 ff4c 	bl	8004d0c <HAL_ADC_ConfigChannel>
 8000e74:	b938      	cbnz	r0, 8000e86 <MX_ADC3_Init+0x96>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e76:	b00c      	add	sp, #48	; 0x30
 8000e78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e7a:	f002 fa9f 	bl	80033bc <Error_Handler>
 8000e7e:	e7e2      	b.n	8000e46 <MX_ADC3_Init+0x56>
    Error_Handler();
 8000e80:	f002 fa9c 	bl	80033bc <Error_Handler>
 8000e84:	e7e6      	b.n	8000e54 <MX_ADC3_Init+0x64>
    Error_Handler();
 8000e86:	f002 fa99 	bl	80033bc <Error_Handler>
}
 8000e8a:	e7f4      	b.n	8000e76 <MX_ADC3_Init+0x86>
 8000e8c:	200003f4 	.word	0x200003f4
 8000e90:	50000400 	.word	0x50000400
 8000e94:	b6982000 	.word	0xb6982000

08000e98 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000e98:	b500      	push	{lr}
 8000e9a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4668      	mov	r0, sp
 8000ea2:	f016 f8fc 	bl	801709e <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <MX_ADC4_Init+0x84>)
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_ADC4_Init+0x88>)
 8000eaa:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000eb0:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb6:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8000eb8:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eba:	6143      	str	r3, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	6182      	str	r2, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000ec0:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000ec2:	7743      	strb	r3, [r0, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	6202      	str	r2, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000ec8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ecc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000ed0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	6301      	str	r1, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000ed8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000edc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000ede:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000ee2:	f003 fc11 	bl	8004708 <HAL_ADC_Init>
 8000ee6:	b998      	cbnz	r0, 8000f10 <MX_ADC4_Init+0x78>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_ADC4_Init+0x8c>)
 8000eea:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eec:	2306      	movs	r3, #6
 8000eee:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef4:	237f      	movs	r3, #127	; 0x7f
 8000ef6:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000f00:	4669      	mov	r1, sp
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_ADC4_Init+0x84>)
 8000f04:	f003 ff02 	bl	8004d0c <HAL_ADC_ConfigChannel>
 8000f08:	b928      	cbnz	r0, 8000f16 <MX_ADC4_Init+0x7e>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000f0a:	b009      	add	sp, #36	; 0x24
 8000f0c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f10:	f002 fa54 	bl	80033bc <Error_Handler>
 8000f14:	e7e8      	b.n	8000ee8 <MX_ADC4_Init+0x50>
    Error_Handler();
 8000f16:	f002 fa51 	bl	80033bc <Error_Handler>
}
 8000f1a:	e7f6      	b.n	8000f0a <MX_ADC4_Init+0x72>
 8000f1c:	20000460 	.word	0x20000460
 8000f20:	50000500 	.word	0x50000500
 8000f24:	c75a0000 	.word	0xc75a0000

08000f28 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000f28:	b500      	push	{lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4668      	mov	r0, sp
 8000f32:	f016 f8b4 	bl	801709e <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000f36:	481d      	ldr	r0, [pc, #116]	; (8000fac <MX_ADC5_Init+0x84>)
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_ADC5_Init+0x88>)
 8000f3a:	6003      	str	r3, [r0, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000f40:	6043      	str	r3, [r0, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000f42:	2300      	movs	r3, #0
 8000f44:	6083      	str	r3, [r0, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	60c3      	str	r3, [r0, #12]
  hadc5.Init.GainCompensation = 0;
 8000f48:	6103      	str	r3, [r0, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f4a:	6143      	str	r3, [r0, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	6182      	str	r2, [r0, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000f50:	7703      	strb	r3, [r0, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000f52:	7743      	strb	r3, [r0, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000f54:	2201      	movs	r2, #1
 8000f56:	6202      	str	r2, [r0, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f5c:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000f60:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f66:	6301      	str	r1, [r0, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000f68:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000f6e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000f72:	f003 fbc9 	bl	8004708 <HAL_ADC_Init>
 8000f76:	b998      	cbnz	r0, 8000fa0 <MX_ADC5_Init+0x78>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_ADC5_Init+0x8c>)
 8000f7a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000f80:	2303      	movs	r3, #3
 8000f82:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f84:	237f      	movs	r3, #127	; 0x7f
 8000f86:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000f90:	4669      	mov	r1, sp
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC5_Init+0x84>)
 8000f94:	f003 feba 	bl	8004d0c <HAL_ADC_ConfigChannel>
 8000f98:	b928      	cbnz	r0, 8000fa6 <MX_ADC5_Init+0x7e>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000f9a:	b009      	add	sp, #36	; 0x24
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000fa0:	f002 fa0c 	bl	80033bc <Error_Handler>
 8000fa4:	e7e8      	b.n	8000f78 <MX_ADC5_Init+0x50>
    Error_Handler();
 8000fa6:	f002 fa09 	bl	80033bc <Error_Handler>
}
 8000faa:	e7f6      	b.n	8000f9a <MX_ADC5_Init+0x72>
 8000fac:	200004cc 	.word	0x200004cc
 8000fb0:	50000600 	.word	0x50000600
 8000fb4:	8c900008 	.word	0x8c900008

08000fb8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	b09a      	sub	sp, #104	; 0x68
 8000fbc:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbe:	2254      	movs	r2, #84	; 0x54
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	a805      	add	r0, sp, #20
 8000fc4:	f016 f86b 	bl	801709e <memset>
  if(adcHandle->Instance==ADC1)
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fce:	d00b      	beq.n	8000fe8 <HAL_ADC_MspInit+0x30>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000fd0:	4a7c      	ldr	r2, [pc, #496]	; (80011c4 <HAL_ADC_MspInit+0x20c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d044      	beq.n	8001060 <HAL_ADC_MspInit+0xa8>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 8000fd6:	4a7c      	ldr	r2, [pc, #496]	; (80011c8 <HAL_ADC_MspInit+0x210>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d07c      	beq.n	80010d6 <HAL_ADC_MspInit+0x11e>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 8000fdc:	4a7b      	ldr	r2, [pc, #492]	; (80011cc <HAL_ADC_MspInit+0x214>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f000 80b4 	beq.w	800114c <HAL_ADC_MspInit+0x194>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000fe4:	b01a      	add	sp, #104	; 0x68
 8000fe6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fec:	9305      	str	r3, [sp, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ff2:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	a805      	add	r0, sp, #20
 8000ff6:	f006 f99d 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	bb58      	cbnz	r0, 8001054 <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ffc:	4b74      	ldr	r3, [pc, #464]	; (80011d0 <HAL_ADC_MspInit+0x218>)
 8000ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001004:	64da      	str	r2, [r3, #76]	; 0x4c
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	9b01      	ldr	r3, [sp, #4]
    hdma_adc1.Instance = DMA1_Channel1;
 8001010:	4870      	ldr	r0, [pc, #448]	; (80011d4 <HAL_ADC_MspInit+0x21c>)
 8001012:	4b71      	ldr	r3, [pc, #452]	; (80011d8 <HAL_ADC_MspInit+0x220>)
 8001014:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001016:	2305      	movs	r3, #5
 8001018:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	2300      	movs	r3, #0
 800101c:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800101e:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001028:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102e:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001030:	2220      	movs	r2, #32
 8001032:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001034:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001036:	f005 f833 	bl	80060a0 <HAL_DMA_Init>
 800103a:	b970      	cbnz	r0, 800105a <HAL_ADC_MspInit+0xa2>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800103c:	4b65      	ldr	r3, [pc, #404]	; (80011d4 <HAL_ADC_MspInit+0x21c>)
 800103e:	6563      	str	r3, [r4, #84]	; 0x54
 8001040:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	4611      	mov	r1, r2
 8001046:	2012      	movs	r0, #18
 8001048:	f004 fd80 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800104c:	2012      	movs	r0, #18
 800104e:	f004 fdb3 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
 8001052:	e7c7      	b.n	8000fe4 <HAL_ADC_MspInit+0x2c>
      Error_Handler();
 8001054:	f002 f9b2 	bl	80033bc <Error_Handler>
 8001058:	e7d0      	b.n	8000ffc <HAL_ADC_MspInit+0x44>
      Error_Handler();
 800105a:	f002 f9af 	bl	80033bc <Error_Handler>
 800105e:	e7ed      	b.n	800103c <HAL_ADC_MspInit+0x84>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001064:	9305      	str	r3, [sp, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001066:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800106a:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106c:	a805      	add	r0, sp, #20
 800106e:	f006 f961 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8001072:	b9f8      	cbnz	r0, 80010b4 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001074:	4a59      	ldr	r2, [pc, #356]	; (80011dc <HAL_ADC_MspInit+0x224>)
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800107c:	2b01      	cmp	r3, #1
 800107e:	d01c      	beq.n	80010ba <HAL_ADC_MspInit+0x102>
    hdma_adc3.Instance = DMA1_Channel2;
 8001080:	4857      	ldr	r0, [pc, #348]	; (80011e0 <HAL_ADC_MspInit+0x228>)
 8001082:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <HAL_ADC_MspInit+0x22c>)
 8001084:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001086:	2325      	movs	r3, #37	; 0x25
 8001088:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108a:	2300      	movs	r3, #0
 800108c:	6083      	str	r3, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800108e:	60c3      	str	r3, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	6102      	str	r2, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001098:	6142      	str	r2, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	6182      	str	r2, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010a0:	2220      	movs	r2, #32
 80010a2:	61c2      	str	r2, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010a4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010a6:	f004 fffb 	bl	80060a0 <HAL_DMA_Init>
 80010aa:	b988      	cbnz	r0, 80010d0 <HAL_ADC_MspInit+0x118>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80010ac:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <HAL_ADC_MspInit+0x228>)
 80010ae:	6563      	str	r3, [r4, #84]	; 0x54
 80010b0:	629c      	str	r4, [r3, #40]	; 0x28
 80010b2:	e797      	b.n	8000fe4 <HAL_ADC_MspInit+0x2c>
      Error_Handler();
 80010b4:	f002 f982 	bl	80033bc <Error_Handler>
 80010b8:	e7dc      	b.n	8001074 <HAL_ADC_MspInit+0xbc>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <HAL_ADC_MspInit+0x218>)
 80010bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	9b02      	ldr	r3, [sp, #8]
 80010ce:	e7d7      	b.n	8001080 <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 80010d0:	f002 f974 	bl	80033bc <Error_Handler>
 80010d4:	e7ea      	b.n	80010ac <HAL_ADC_MspInit+0xf4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80010d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010da:	9305      	str	r3, [sp, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80010dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010e0:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e2:	a805      	add	r0, sp, #20
 80010e4:	f006 f926 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	b9f8      	cbnz	r0, 800112a <HAL_ADC_MspInit+0x172>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80010ea:	4a3c      	ldr	r2, [pc, #240]	; (80011dc <HAL_ADC_MspInit+0x224>)
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d01c      	beq.n	8001130 <HAL_ADC_MspInit+0x178>
    hdma_adc4.Instance = DMA1_Channel3;
 80010f6:	483c      	ldr	r0, [pc, #240]	; (80011e8 <HAL_ADC_MspInit+0x230>)
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <HAL_ADC_MspInit+0x234>)
 80010fa:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80010fc:	2326      	movs	r3, #38	; 0x26
 80010fe:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001100:	2300      	movs	r3, #0
 8001102:	6083      	str	r3, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	60c3      	str	r3, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	6102      	str	r2, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800110a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110e:	6142      	str	r2, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001114:	6182      	str	r2, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001116:	2220      	movs	r2, #32
 8001118:	61c2      	str	r2, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800111a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800111c:	f004 ffc0 	bl	80060a0 <HAL_DMA_Init>
 8001120:	b988      	cbnz	r0, 8001146 <HAL_ADC_MspInit+0x18e>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001122:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <HAL_ADC_MspInit+0x230>)
 8001124:	6563      	str	r3, [r4, #84]	; 0x54
 8001126:	629c      	str	r4, [r3, #40]	; 0x28
 8001128:	e75c      	b.n	8000fe4 <HAL_ADC_MspInit+0x2c>
      Error_Handler();
 800112a:	f002 f947 	bl	80033bc <Error_Handler>
 800112e:	e7dc      	b.n	80010ea <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_ADC_MspInit+0x218>)
 8001132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001138:	64da      	str	r2, [r3, #76]	; 0x4c
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	9303      	str	r3, [sp, #12]
 8001142:	9b03      	ldr	r3, [sp, #12]
 8001144:	e7d7      	b.n	80010f6 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8001146:	f002 f939 	bl	80033bc <Error_Handler>
 800114a:	e7ea      	b.n	8001122 <HAL_ADC_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	9305      	str	r3, [sp, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001152:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001156:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001158:	a805      	add	r0, sp, #20
 800115a:	f006 f8eb 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 800115e:	b9f8      	cbnz	r0, 80011a0 <HAL_ADC_MspInit+0x1e8>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001160:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_ADC_MspInit+0x224>)
 8001162:	6813      	ldr	r3, [r2, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001168:	2b01      	cmp	r3, #1
 800116a:	d01c      	beq.n	80011a6 <HAL_ADC_MspInit+0x1ee>
    hdma_adc5.Instance = DMA1_Channel4;
 800116c:	4820      	ldr	r0, [pc, #128]	; (80011f0 <HAL_ADC_MspInit+0x238>)
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <HAL_ADC_MspInit+0x23c>)
 8001170:	6003      	str	r3, [r0, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001172:	2327      	movs	r3, #39	; 0x27
 8001174:	6043      	str	r3, [r0, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001176:	2300      	movs	r3, #0
 8001178:	6083      	str	r3, [r0, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	60c3      	str	r3, [r0, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	6102      	str	r2, [r0, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	6142      	str	r2, [r0, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118a:	6182      	str	r2, [r0, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800118c:	2220      	movs	r2, #32
 800118e:	61c2      	str	r2, [r0, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001190:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001192:	f004 ff85 	bl	80060a0 <HAL_DMA_Init>
 8001196:	b988      	cbnz	r0, 80011bc <HAL_ADC_MspInit+0x204>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_ADC_MspInit+0x238>)
 800119a:	6563      	str	r3, [r4, #84]	; 0x54
 800119c:	629c      	str	r4, [r3, #40]	; 0x28
}
 800119e:	e721      	b.n	8000fe4 <HAL_ADC_MspInit+0x2c>
      Error_Handler();
 80011a0:	f002 f90c 	bl	80033bc <Error_Handler>
 80011a4:	e7dc      	b.n	8001160 <HAL_ADC_MspInit+0x1a8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_ADC_MspInit+0x218>)
 80011a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	9304      	str	r3, [sp, #16]
 80011b8:	9b04      	ldr	r3, [sp, #16]
 80011ba:	e7d7      	b.n	800116c <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 80011bc:	f002 f8fe 	bl	80033bc <Error_Handler>
 80011c0:	e7ea      	b.n	8001198 <HAL_ADC_MspInit+0x1e0>
 80011c2:	bf00      	nop
 80011c4:	50000400 	.word	0x50000400
 80011c8:	50000500 	.word	0x50000500
 80011cc:	50000600 	.word	0x50000600
 80011d0:	40021000 	.word	0x40021000
 80011d4:	20000538 	.word	0x20000538
 80011d8:	40020008 	.word	0x40020008
 80011dc:	20000384 	.word	0x20000384
 80011e0:	20000598 	.word	0x20000598
 80011e4:	4002001c 	.word	0x4002001c
 80011e8:	200005f8 	.word	0x200005f8
 80011ec:	40020030 	.word	0x40020030
 80011f0:	20000658 	.word	0x20000658
 80011f4:	40020044 	.word	0x40020044

080011f8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80011f8:	b500      	push	{lr}
 80011fa:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011fc:	2230      	movs	r2, #48	; 0x30
 80011fe:	2100      	movs	r1, #0
 8001200:	4668      	mov	r0, sp
 8001202:	f015 ff4c 	bl	801709e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <MX_DAC1_Init+0x68>)
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_DAC1_Init+0x6c>)
 800120a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800120c:	f004 fcf6 	bl	8005bfc <HAL_DAC_Init>
 8001210:	b9e0      	cbnz	r0, 800124c <MX_DAC1_Init+0x54>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001212:	2302      	movs	r3, #2
 8001214:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001216:	2200      	movs	r2, #0
 8001218:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800121c:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001220:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001222:	2322      	movs	r3, #34	; 0x22
 8001224:	9303      	str	r3, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001226:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001228:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800122a:	2301      	movs	r3, #1
 800122c:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800122e:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001230:	4669      	mov	r1, sp
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <MX_DAC1_Init+0x68>)
 8001234:	f004 fddc 	bl	8005df0 <HAL_DAC_ConfigChannel>
 8001238:	b958      	cbnz	r0, 8001252 <MX_DAC1_Init+0x5a>
    Error_Handler();
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800123a:	2210      	movs	r2, #16
 800123c:	4669      	mov	r1, sp
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <MX_DAC1_Init+0x68>)
 8001240:	f004 fdd6 	bl	8005df0 <HAL_DAC_ConfigChannel>
 8001244:	b940      	cbnz	r0, 8001258 <MX_DAC1_Init+0x60>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001246:	b00d      	add	sp, #52	; 0x34
 8001248:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800124c:	f002 f8b6 	bl	80033bc <Error_Handler>
 8001250:	e7df      	b.n	8001212 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001252:	f002 f8b3 	bl	80033bc <Error_Handler>
 8001256:	e7f0      	b.n	800123a <MX_DAC1_Init+0x42>
    Error_Handler();
 8001258:	f002 f8b0 	bl	80033bc <Error_Handler>
}
 800125c:	e7f3      	b.n	8001246 <MX_DAC1_Init+0x4e>
 800125e:	bf00      	nop
 8001260:	200006b8 	.word	0x200006b8
 8001264:	50000800 	.word	0x50000800

08001268 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001268:	b500      	push	{lr}
 800126a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800126c:	2230      	movs	r2, #48	; 0x30
 800126e:	2100      	movs	r1, #0
 8001270:	4668      	mov	r0, sp
 8001272:	f015 ff14 	bl	801709e <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <MX_DAC2_Init+0x54>)
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_DAC2_Init+0x58>)
 800127a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800127c:	f004 fcbe 	bl	8005bfc <HAL_DAC_Init>
 8001280:	b9a8      	cbnz	r0, 80012ae <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001282:	2302      	movs	r3, #2
 8001284:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001286:	2200      	movs	r2, #0
 8001288:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800128c:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001290:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001292:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001294:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001296:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001298:	2301      	movs	r3, #1
 800129a:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800129c:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800129e:	4669      	mov	r1, sp
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_DAC2_Init+0x54>)
 80012a2:	f004 fda5 	bl	8005df0 <HAL_DAC_ConfigChannel>
 80012a6:	b928      	cbnz	r0, 80012b4 <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80012a8:	b00d      	add	sp, #52	; 0x34
 80012aa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012ae:	f002 f885 	bl	80033bc <Error_Handler>
 80012b2:	e7e6      	b.n	8001282 <MX_DAC2_Init+0x1a>
    Error_Handler();
 80012b4:	f002 f882 	bl	80033bc <Error_Handler>
}
 80012b8:	e7f6      	b.n	80012a8 <MX_DAC2_Init+0x40>
 80012ba:	bf00      	nop
 80012bc:	200006cc 	.word	0x200006cc
 80012c0:	50000c00 	.word	0x50000c00

080012c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012c4:	b510      	push	{r4, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	2300      	movs	r3, #0
 80012ca:	9305      	str	r3, [sp, #20]
 80012cc:	9306      	str	r3, [sp, #24]
 80012ce:	9307      	str	r3, [sp, #28]
 80012d0:	9308      	str	r3, [sp, #32]
 80012d2:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 80012d4:	6803      	ldr	r3, [r0, #0]
 80012d6:	4a3e      	ldr	r2, [pc, #248]	; (80013d0 <HAL_DAC_MspInit+0x10c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d004      	beq.n	80012e6 <HAL_DAC_MspInit+0x22>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 80012dc:	4a3d      	ldr	r2, [pc, #244]	; (80013d4 <HAL_DAC_MspInit+0x110>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d059      	beq.n	8001396 <HAL_DAC_MspInit+0xd2>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80012e2:	b00a      	add	sp, #40	; 0x28
 80012e4:	bd10      	pop	{r4, pc}
 80012e6:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012e8:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_DAC_MspInit+0x114>)
 80012ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012f4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	64da      	str	r2, [r3, #76]	; 0x4c
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800130e:	2330      	movs	r3, #48	; 0x30
 8001310:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	a905      	add	r1, sp, #20
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f005 f858 	bl	80063d0 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA2_Channel1;
 8001320:	482e      	ldr	r0, [pc, #184]	; (80013dc <HAL_DAC_MspInit+0x118>)
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_DAC_MspInit+0x11c>)
 8001324:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001326:	2306      	movs	r3, #6
 8001328:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132a:	2310      	movs	r3, #16
 800132c:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133a:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001342:	2220      	movs	r2, #32
 8001344:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001346:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001348:	f004 feaa 	bl	80060a0 <HAL_DMA_Init>
 800134c:	b9e8      	cbnz	r0, 800138a <HAL_DAC_MspInit+0xc6>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_DAC_MspInit+0x118>)
 8001350:	60a3      	str	r3, [r4, #8]
 8001352:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_dac1_ch2.Instance = DMA2_Channel2;
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <HAL_DAC_MspInit+0x120>)
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_DAC_MspInit+0x124>)
 8001358:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 800135a:	2307      	movs	r3, #7
 800135c:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800135e:	2310      	movs	r3, #16
 8001360:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001370:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001374:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001376:	2220      	movs	r2, #32
 8001378:	61c2      	str	r2, [r0, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800137c:	f004 fe90 	bl	80060a0 <HAL_DMA_Init>
 8001380:	b930      	cbnz	r0, 8001390 <HAL_DAC_MspInit+0xcc>
    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_DAC_MspInit+0x120>)
 8001384:	60e3      	str	r3, [r4, #12]
 8001386:	629c      	str	r4, [r3, #40]	; 0x28
 8001388:	e7ab      	b.n	80012e2 <HAL_DAC_MspInit+0x1e>
      Error_Handler();
 800138a:	f002 f817 	bl	80033bc <Error_Handler>
 800138e:	e7de      	b.n	800134e <HAL_DAC_MspInit+0x8a>
      Error_Handler();
 8001390:	f002 f814 	bl	80033bc <Error_Handler>
 8001394:	e7f5      	b.n	8001382 <HAL_DAC_MspInit+0xbe>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_DAC_MspInit+0x114>)
 8001398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800139e:	64da      	str	r2, [r3, #76]	; 0x4c
 80013a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80013a6:	9203      	str	r2, [sp, #12]
 80013a8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	9304      	str	r3, [sp, #16]
 80013ba:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013bc:	2340      	movs	r3, #64	; 0x40
 80013be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	a905      	add	r1, sp, #20
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f005 f801 	bl	80063d0 <HAL_GPIO_Init>
}
 80013ce:	e788      	b.n	80012e2 <HAL_DAC_MspInit+0x1e>
 80013d0:	50000800 	.word	0x50000800
 80013d4:	50000c00 	.word	0x50000c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	200006e0 	.word	0x200006e0
 80013e0:	40020408 	.word	0x40020408
 80013e4:	20000740 	.word	0x20000740
 80013e8:	4002041c 	.word	0x4002041c

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013ec:	b500      	push	{lr}
 80013ee:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_DMA_Init+0xb4>)
 80013f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013f4:	f042 0204 	orr.w	r2, r2, #4
 80013f8:	649a      	str	r2, [r3, #72]	; 0x48
 80013fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013fc:	f002 0204 	and.w	r2, r2, #4
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001406:	f042 0202 	orr.w	r2, r2, #2
 800140a:	649a      	str	r2, [r3, #72]	; 0x48
 800140c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800140e:	f002 0202 	and.w	r2, r2, #2
 8001412:	9202      	str	r2, [sp, #8]
 8001414:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	649a      	str	r2, [r3, #72]	; 0x48
 800141e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	4611      	mov	r1, r2
 800142c:	200b      	movs	r0, #11
 800142e:	f004 fb8d 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001432:	200b      	movs	r0, #11
 8001434:	f004 fbc0 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	4611      	mov	r1, r2
 800143c:	200c      	movs	r0, #12
 800143e:	f004 fb85 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001442:	200c      	movs	r0, #12
 8001444:	f004 fbb8 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	4611      	mov	r1, r2
 800144c:	200d      	movs	r0, #13
 800144e:	f004 fb7d 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001452:	200d      	movs	r0, #13
 8001454:	f004 fbb0 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	4611      	mov	r1, r2
 800145c:	200e      	movs	r0, #14
 800145e:	f004 fb75 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001462:	200e      	movs	r0, #14
 8001464:	f004 fba8 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	4611      	mov	r1, r2
 800146c:	2038      	movs	r0, #56	; 0x38
 800146e:	f004 fb6d 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001472:	2038      	movs	r0, #56	; 0x38
 8001474:	f004 fba0 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	4611      	mov	r1, r2
 800147c:	2039      	movs	r0, #57	; 0x39
 800147e:	f004 fb65 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001482:	2039      	movs	r0, #57	; 0x39
 8001484:	f004 fb98 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	4611      	mov	r1, r2
 800148c:	203a      	movs	r0, #58	; 0x3a
 800148e:	f004 fb5d 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001492:	203a      	movs	r0, #58	; 0x3a
 8001494:	f004 fb90 	bl	8005bb8 <HAL_NVIC_EnableIRQ>

}
 8001498:	b005      	add	sp, #20
 800149a:	f85d fb04 	ldr.w	pc, [sp], #4
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000

080014a4 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014a4:	b500      	push	{lr}
 80014a6:	b089      	sub	sp, #36	; 0x24
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80014a8:	2200      	movs	r2, #0
 80014aa:	9203      	str	r2, [sp, #12]
 80014ac:	9207      	str	r2, [sp, #28]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80014ae:	4818      	ldr	r0, [pc, #96]	; (8001510 <MX_FMC_Init+0x6c>)
 80014b0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80014b4:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80014b6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80014ba:	6043      	str	r3, [r0, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80014bc:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80014be:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80014c0:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014c2:	2110      	movs	r1, #16
 80014c4:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80014c6:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80014c8:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80014ca:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80014d2:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80014d4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014d6:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80014d8:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80014da:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 80014dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014e0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80014e2:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80014e4:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80014e6:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80014ea:	230f      	movs	r3, #15
 80014ec:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 80014ee:	9301      	str	r3, [sp, #4]
  Timing.DataSetupTime = 15;
 80014f0:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 0;
  Timing.BusTurnAroundDuration = 15;
 80014f2:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 80014f4:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 80014f6:	2311      	movs	r3, #17
 80014f8:	9306      	str	r3, [sp, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80014fa:	4669      	mov	r1, sp
 80014fc:	f006 fbd1 	bl	8007ca2 <HAL_SRAM_Init>
 8001500:	b910      	cbnz	r0, 8001508 <MX_FMC_Init+0x64>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001502:	b009      	add	sp, #36	; 0x24
 8001504:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8001508:	f001 ff58 	bl	80033bc <Error_Handler>
}
 800150c:	e7f9      	b.n	8001502 <MX_FMC_Init+0x5e>
 800150e:	bf00      	nop
 8001510:	200007a4 	.word	0x200007a4

08001514 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	2300      	movs	r3, #0
 800151a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_SRAM_MspInit+0x78>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b10b      	cbz	r3, 8001526 <HAL_SRAM_MspInit+0x12>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001522:	b007      	add	sp, #28
 8001524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_SRAM_MspInit+0x78>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_SRAM_MspInit+0x7c>)
 800152e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	651a      	str	r2, [r3, #80]	; 0x50
 8001536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2602      	movs	r6, #2
 8001548:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2503      	movs	r5, #3
 800154c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154e:	240c      	movs	r4, #12
 8001550:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001552:	a901      	add	r1, sp, #4
 8001554:	480f      	ldr	r0, [pc, #60]	; (8001594 <HAL_SRAM_MspInit+0x80>)
 8001556:	f004 ff3b 	bl	80063d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800155a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800155e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2700      	movs	r7, #0
 8001564:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001568:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156a:	a901      	add	r1, sp, #4
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <HAL_SRAM_MspInit+0x84>)
 800156e:	f004 ff2f 	bl	80063d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001572:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001576:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800157e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	a901      	add	r1, sp, #4
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <HAL_SRAM_MspInit+0x88>)
 8001584:	f004 ff24 	bl	80063d0 <HAL_GPIO_Init>
}
 8001588:	e7cb      	b.n	8001522 <HAL_SRAM_MspInit+0xe>
 800158a:	bf00      	nop
 800158c:	200007a0 	.word	0x200007a0
 8001590:	40021000 	.word	0x40021000
 8001594:	48001400 	.word	0x48001400
 8001598:	48001000 	.word	0x48001000
 800159c:	48000c00 	.word	0x48000c00

080015a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015a0:	b510      	push	{r4, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	2400      	movs	r4, #0
 80015a6:	9407      	str	r4, [sp, #28]
 80015a8:	9408      	str	r4, [sp, #32]
 80015aa:	9409      	str	r4, [sp, #36]	; 0x24
 80015ac:	940a      	str	r4, [sp, #40]	; 0x28
 80015ae:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_GPIO_Init+0xa8>)
 80015b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80015ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015bc:	f002 0220 	and.w	r2, r2, #32
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c6:	f042 0204 	orr.w	r2, r2, #4
 80015ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80015cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ce:	f002 0204 	and.w	r2, r2, #4
 80015d2:	9202      	str	r2, [sp, #8]
 80015d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80015de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e0:	f002 0201 	and.w	r2, r2, #1
 80015e4:	9203      	str	r2, [sp, #12]
 80015e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ea:	f042 0202 	orr.w	r2, r2, #2
 80015ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f2:	f002 0202 	and.w	r2, r2, #2
 80015f6:	9204      	str	r2, [sp, #16]
 80015f8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015fc:	f042 0210 	orr.w	r2, r2, #16
 8001600:	64da      	str	r2, [r3, #76]	; 0x4c
 8001602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001604:	f002 0210 	and.w	r2, r2, #16
 8001608:	9205      	str	r2, [sp, #20]
 800160a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800160e:	f042 0208 	orr.w	r2, r2, #8
 8001612:	64da      	str	r2, [r3, #76]	; 0x4c
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	9306      	str	r3, [sp, #24]
 800161c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 800161e:	4622      	mov	r2, r4
 8001620:	f248 3104 	movw	r1, #33540	; 0x8304
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f004 ffb6 	bl	8006598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 800162c:	f248 3304 	movw	r3, #33540	; 0x8304
 8001630:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	a907      	add	r1, sp, #28
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f004 fec6 	bl	80063d0 <HAL_GPIO_Init>

}
 8001644:	b00c      	add	sp, #48	; 0x30
 8001646:	bd10      	pop	{r4, pc}
 8001648:	40021000 	.word	0x40021000

0800164c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	1e10      	subs	r0, r2, #0
 800164e:	dd2d      	ble.n	80016ac <_write+0x60>
 8001650:	eb01 0c00 	add.w	ip, r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001658:	e003      	b.n	8001662 <_write+0x16>
	{
		ITM_SendChar(*ptr++);
	}
    return len;
}
 800165a:	f85d fb04 	ldr.w	pc, [sp], #4
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	458c      	cmp	ip, r1
 8001660:	d023      	beq.n	80016aa <_write+0x5e>
		ITM_SendChar(*ptr++);
 8001662:	3101      	adds	r1, #1
 8001664:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8001668:	f012 0f01 	tst.w	r2, #1
 800166c:	d0f7      	beq.n	800165e <_write+0x12>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800166e:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001672:	f012 0f01 	tst.w	r2, #1
 8001676:	d0f2      	beq.n	800165e <_write+0x12>
{
 8001678:	b500      	push	{lr}
		ITM_SendChar(*ptr++);
 800167a:	f811 ec01 	ldrb.w	lr, [r1, #-1]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	b91a      	cbnz	r2, 800168a <_write+0x3e>
    {
      __NOP();
 8001682:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2a00      	cmp	r2, #0
 8001688:	d0fb      	beq.n	8001682 <_write+0x36>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800168a:	f883 e000 	strb.w	lr, [r3]
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	458c      	cmp	ip, r1
 8001690:	d0e3      	beq.n	800165a <_write+0xe>
		ITM_SendChar(*ptr++);
 8001692:	3101      	adds	r1, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001694:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8001698:	f012 0f01 	tst.w	r2, #1
 800169c:	d0f7      	beq.n	800168e <_write+0x42>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800169e:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016a2:	f012 0f01 	tst.w	r2, #1
 80016a6:	d0f2      	beq.n	800168e <_write+0x42>
 80016a8:	e7e7      	b.n	800167a <_write+0x2e>
 80016aa:	4770      	bx	lr
}
 80016ac:	4770      	bx	lr

080016ae <diff_systick>:
}

int32_t diff_systick( int32_t b, int32_t a )
{
	int d = 0;
	if( b < a )
 80016ae:	4288      	cmp	r0, r1
	{
	  d = a-b;
	}
	else
	{
	  d = a+(SysTick->LOAD-b);
 80016b0:	bfa2      	ittt	ge
 80016b2:	f04f 23e0 	movge.w	r3, #3758153728	; 0xe000e000
 80016b6:	695b      	ldrge	r3, [r3, #20]
 80016b8:	18c9      	addge	r1, r1, r3
 80016ba:	1a08      	subs	r0, r1, r0
	}
	return d;
}
 80016bc:	4770      	bx	lr
	...

080016c0 <nk_colot_to_rgb666>:

	lcd_rect( 0, 0, 480, 320, 0x0000 );
}

uint32_t nk_colot_to_rgb666( struct nk_color color )
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80016c8:	f3c0 4507 	ubfx	r5, r0, #16, #8
	uint32_t rgb666 = 0;

	color.r = (color.r*color.a)/256.0;
 80016cc:	0e07      	lsrs	r7, r0, #24
 80016ce:	b2c0      	uxtb	r0, r0
 80016d0:	fb07 f000 	mul.w	r0, r7, r0
 80016d4:	f7fe ff4e 	bl	8000574 <__aeabi_i2d>
 80016d8:	2200      	movs	r2, #0
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <nk_colot_to_rgb666+0x68>)
 80016dc:	f7fe ffb4 	bl	8000648 <__aeabi_dmul>
 80016e0:	f7ff fa8a 	bl	8000bf8 <__aeabi_d2uiz>
	color.b = (color.b*color.a)/256.0;

	color.r >>= 2;
	color.g >>= 2;
	color.b >>= 2;
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 80016e4:	f3c0 0485 	ubfx	r4, r0, #2, #6
 80016e8:	0324      	lsls	r4, r4, #12
	color.g = (color.g*color.a)/256.0;
 80016ea:	b2f0      	uxtb	r0, r6
 80016ec:	fb07 f000 	mul.w	r0, r7, r0
 80016f0:	f7fe ff40 	bl	8000574 <__aeabi_i2d>
 80016f4:	2200      	movs	r2, #0
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <nk_colot_to_rgb666+0x68>)
 80016f8:	f7fe ffa6 	bl	8000648 <__aeabi_dmul>
 80016fc:	f7ff fa7c 	bl	8000bf8 <__aeabi_d2uiz>
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 8001700:	f3c0 0085 	ubfx	r0, r0, #2, #6
 8001704:	ea44 1480 	orr.w	r4, r4, r0, lsl #6
	color.b = (color.b*color.a)/256.0;
 8001708:	b2e8      	uxtb	r0, r5
 800170a:	fb07 f000 	mul.w	r0, r7, r0
 800170e:	f7fe ff31 	bl	8000574 <__aeabi_i2d>
 8001712:	2200      	movs	r2, #0
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <nk_colot_to_rgb666+0x68>)
 8001716:	f7fe ff97 	bl	8000648 <__aeabi_dmul>
 800171a:	f7ff fa6d 	bl	8000bf8 <__aeabi_d2uiz>
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 800171e:	f3c0 0085 	ubfx	r0, r0, #2, #6
	return rgb666;
}
 8001722:	4320      	orrs	r0, r4
 8001724:	b003      	add	sp, #12
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	3f700000 	.word	0x3f700000

0800172c <lcd_rect>:

void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color )
{
 800172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001730:	9c06      	ldr	r4, [sp, #24]
	int16_t x0 = x;
	int16_t y0 = y;
	int16_t x1 = x + w - 1;
	int16_t y1 = y + h - 1;

	if( x0 < 0 )
 8001732:	f240 16df 	movw	r6, #479	; 0x1df
 8001736:	4605      	mov	r5, r0
 8001738:	42b0      	cmp	r0, r6
 800173a:	bfa8      	it	ge
 800173c:	4635      	movge	r5, r6
 800173e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
	int16_t x1 = x + w - 1;
 8001742:	3a01      	subs	r2, #1
 8001744:	4410      	add	r0, r2
 8001746:	b200      	sxth	r0, r0
 8001748:	42b0      	cmp	r0, r6
 800174a:	bfa8      	it	ge
 800174c:	4630      	movge	r0, r6
 800174e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	else if( x1 > 480 - 1 )
	{
		x1 = 480 - 1;
	}

	if( y0 < 0 )
 8001752:	f240 1c3f 	movw	ip, #319	; 0x13f
 8001756:	460e      	mov	r6, r1
 8001758:	4561      	cmp	r1, ip
 800175a:	bfa8      	it	ge
 800175c:	4666      	movge	r6, ip
 800175e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
	int16_t y1 = y + h - 1;
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	440a      	add	r2, r1
 8001766:	b212      	sxth	r2, r2
 8001768:	4562      	cmp	r2, ip
 800176a:	bfa8      	it	ge
 800176c:	4662      	movge	r2, ip
 800176e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	else if( y1 > 320 - 1 )
	{
		y1 = 320 - 1;
	}

	if( x0 > x1 )
 8001772:	42a8      	cmp	r0, r5
 8001774:	da02      	bge.n	800177c <lcd_rect+0x50>
 8001776:	462b      	mov	r3, r5
	{
		int tmp = x0;
		x0 = x1;
 8001778:	4605      	mov	r5, r0
		x1 = tmp;
 800177a:	4618      	mov	r0, r3
	}

	if( y0 > y1 )
 800177c:	4296      	cmp	r6, r2
 800177e:	dd02      	ble.n	8001786 <lcd_rect+0x5a>
 8001780:	4633      	mov	r3, r6
	{
		int tmp = y0;
		y0 = y1;
 8001782:	4616      	mov	r6, r2
		y1 = tmp;
 8001784:	461a      	mov	r2, r3
	}

	w = x1 - x0 + 1;
 8001786:	b280      	uxth	r0, r0
 8001788:	fa1f fe85 	uxth.w	lr, r5
	h = y1 - y0 + 1;
 800178c:	b292      	uxth	r2, r2
 800178e:	b2b1      	uxth	r1, r6
	w = x1 - x0 + 1;
 8001790:	1c45      	adds	r5, r0, #1
 8001792:	eba5 050e 	sub.w	r5, r5, lr
	h = y1 - y0 + 1;
 8001796:	1c53      	adds	r3, r2, #1
 8001798:	1a5b      	subs	r3, r3, r1

	uint32_t i = 0;
	uint32_t n = w*h;
 800179a:	fb13 f305 	smulbb	r3, r3, r5

	uint16_t color_l = (color>>0)&0x1FF;
 800179e:	f3c4 0c08 	ubfx	ip, r4, #0, #9
	uint16_t color_h = (color>>9)&0x1FF;
 80017a2:	f3c4 2448 	ubfx	r4, r4, #9, #9

	*addr_cmd = 0x2A;
 80017a6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001820 <lcd_rect+0xf4>
 80017aa:	252a      	movs	r5, #42	; 0x2a
 80017ac:	f8d8 7000 	ldr.w	r7, [r8]
 80017b0:	803d      	strh	r5, [r7, #0]
	*addr_data = (x0>>8)&0xFF;
 80017b2:	4d1a      	ldr	r5, [pc, #104]	; (800181c <lcd_rect+0xf0>)
 80017b4:	ea4f 271e 	mov.w	r7, lr, lsr #8
 80017b8:	682e      	ldr	r6, [r5, #0]
 80017ba:	8037      	strh	r7, [r6, #0]
	*addr_data = (x0>>0)&0xFF;
 80017bc:	fa5f fe8e 	uxtb.w	lr, lr
 80017c0:	682e      	ldr	r6, [r5, #0]
 80017c2:	f8a6 e000 	strh.w	lr, [r6]
	*addr_data = (x1>>8)&0xFF;
 80017c6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 80017ca:	682e      	ldr	r6, [r5, #0]
 80017cc:	f8a6 e000 	strh.w	lr, [r6]
	*addr_data = (x1>>0)&0xFF;
 80017d0:	b2c0      	uxtb	r0, r0
 80017d2:	682e      	ldr	r6, [r5, #0]
 80017d4:	8030      	strh	r0, [r6, #0]

	*addr_cmd = 0x2B;
 80017d6:	f8d8 0000 	ldr.w	r0, [r8]
 80017da:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 80017de:	f8a0 e000 	strh.w	lr, [r0]
	*addr_data = (y0>>8)&0xFF;
 80017e2:	6828      	ldr	r0, [r5, #0]
 80017e4:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80017e8:	f8a0 e000 	strh.w	lr, [r0]
	*addr_data = (y0>>0)&0xFF;
 80017ec:	6828      	ldr	r0, [r5, #0]
 80017ee:	b2c9      	uxtb	r1, r1
 80017f0:	8001      	strh	r1, [r0, #0]
	*addr_data = (y1>>8)&0xFF;
 80017f2:	6829      	ldr	r1, [r5, #0]
 80017f4:	0a10      	lsrs	r0, r2, #8
 80017f6:	8008      	strh	r0, [r1, #0]
	*addr_data = (y1>>0)&0xFF;
 80017f8:	6829      	ldr	r1, [r5, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	800a      	strh	r2, [r1, #0]

	*addr_cmd = 0x2C;
 80017fe:	f8d8 2000 	ldr.w	r2, [r8]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	8011      	strh	r1, [r2, #0]
	for( i=n ; i ; i-- )
 8001806:	b13b      	cbz	r3, 8001818 <lcd_rect+0xec>
	{
		*addr_data = color_l;
 8001808:	462a      	mov	r2, r5
 800180a:	6811      	ldr	r1, [r2, #0]
 800180c:	f8a1 c000 	strh.w	ip, [r1]
		*addr_data = color_h;
 8001810:	6811      	ldr	r1, [r2, #0]
 8001812:	800c      	strh	r4, [r1, #0]
	for( i=n ; i ; i-- )
 8001814:	3b01      	subs	r3, #1
 8001816:	d1f8      	bne.n	800180a <lcd_rect+0xde>
	}
}
 8001818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800181c:	20000004 	.word	0x20000004
 8001820:	20000000 	.word	0x20000000

08001824 <lcd_config>:
{
 8001824:	b510      	push	{r4, lr}
 8001826:	b082      	sub	sp, #8
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET );
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f004 feb1 	bl	8006598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f004 feaa 	bl	8006598 <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 8001844:	200a      	movs	r0, #10
 8001846:	f002 ff39 	bl	80046bc <HAL_Delay>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_SET );
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f004 fea0 	bl	8006598 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	f002 ff2f 	bl	80046bc <HAL_Delay>
	*addr_cmd = 0x01;
 800185e:	4c15      	ldr	r4, [pc, #84]	; (80018b4 <lcd_config+0x90>)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 100 );
 8001866:	2064      	movs	r0, #100	; 0x64
 8001868:	f002 ff28 	bl	80046bc <HAL_Delay>
	*addr_cmd = 0x11;
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	2211      	movs	r2, #17
 8001870:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001872:	200a      	movs	r0, #10
 8001874:	f002 ff22 	bl	80046bc <HAL_Delay>
	*addr_cmd = 0x3A;
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	223a      	movs	r2, #58	; 0x3a
 800187c:	801a      	strh	r2, [r3, #0]
	*addr_data = 0x06;//0x05;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <lcd_config+0x94>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2106      	movs	r1, #6
 8001884:	8011      	strh	r1, [r2, #0]
	*addr_cmd = 0x36;
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	2136      	movs	r1, #54	; 0x36
 800188a:	8011      	strh	r1, [r2, #0]
	*addr_data = (0x01<<5)|(0x01<<6)|(0x01<<7);
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	22e0      	movs	r2, #224	; 0xe0
 8001890:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x29;
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	2229      	movs	r2, #41	; 0x29
 8001896:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001898:	200a      	movs	r0, #10
 800189a:	f002 ff0f 	bl	80046bc <HAL_Delay>
	lcd_rect( 0, 0, 480, 320, 0x0000 );
 800189e:	2000      	movs	r0, #0
 80018a0:	9000      	str	r0, [sp, #0]
 80018a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018aa:	4601      	mov	r1, r0
 80018ac:	f7ff ff3e 	bl	800172c <lcd_rect>
}
 80018b0:	b002      	add	sp, #8
 80018b2:	bd10      	pop	{r4, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <lcd_set_pixel>:

void lcd_set_pixel( int16_t x, int16_t y, uint32_t color )
{
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int16_t x0 = x;
	int16_t y0 = y;
	int16_t x1 = x + 1;
 80018be:	b280      	uxth	r0, r0
 80018c0:	f100 0e01 	add.w	lr, r0, #1
	int16_t y1 = y + 1;
 80018c4:	b289      	uxth	r1, r1
 80018c6:	f101 0c01 	add.w	ip, r1, #1
	uint16_t color_l = (color>>0)&0x1FF;
 80018ca:	f3c2 0508 	ubfx	r5, r2, #0, #9
	uint16_t color_h = (color>>9)&0x1FF;
 80018ce:	f3c2 2248 	ubfx	r2, r2, #9, #9

	*addr_cmd = 0x2A;
 80018d2:	4c19      	ldr	r4, [pc, #100]	; (8001938 <lcd_set_pixel+0x7c>)
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	262a      	movs	r6, #42	; 0x2a
 80018d8:	801e      	strh	r6, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <lcd_set_pixel+0x80>)
 80018dc:	0a06      	lsrs	r6, r0, #8
 80018de:	681f      	ldr	r7, [r3, #0]
 80018e0:	803e      	strh	r6, [r7, #0]
	*addr_data = (x0>>0)&0xFF;
 80018e2:	b2c0      	uxtb	r0, r0
 80018e4:	681e      	ldr	r6, [r3, #0]
 80018e6:	8030      	strh	r0, [r6, #0]
	*addr_data = (x1>>8)&0xFF;
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	f3ce 2607 	ubfx	r6, lr, #8, #8
 80018ee:	8006      	strh	r6, [r0, #0]
	*addr_data = (x1>>0)&0xFF;
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	fa5f fe8e 	uxtb.w	lr, lr
 80018f6:	f8a0 e000 	strh.w	lr, [r0]

	*addr_cmd = 0x2B;
 80018fa:	6820      	ldr	r0, [r4, #0]
 80018fc:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 8001900:	f8a0 e000 	strh.w	lr, [r0]
	*addr_data = (y0>>8)&0xFF;
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 800190a:	f8a0 e000 	strh.w	lr, [r0]
	*addr_data = (y0>>0)&0xFF;
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	b2c9      	uxtb	r1, r1
 8001912:	8001      	strh	r1, [r0, #0]
	*addr_data = (y1>>8)&0xFF;
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	f3cc 2007 	ubfx	r0, ip, #8, #8
 800191a:	8008      	strh	r0, [r1, #0]
	*addr_data = (y1>>0)&0xFF;
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	fa5f fc8c 	uxtb.w	ip, ip
 8001922:	f8a1 c000 	strh.w	ip, [r1]

	*addr_cmd = 0x2C;
 8001926:	6821      	ldr	r1, [r4, #0]
 8001928:	202c      	movs	r0, #44	; 0x2c
 800192a:	8008      	strh	r0, [r1, #0]
	*addr_data = color_l;
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	800d      	strh	r5, [r1, #0]
	*addr_data = color_h;
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	801a      	strh	r2, [r3, #0]
}
 8001934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <lcd_set_pixel_bench>:


int32_t lcd_set_pixel_bench( int16_t x, int16_t y, uint32_t color )
{
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t a, b, d;
	int16_t x0 = x;
	int16_t y0 = y;
	int16_t x1 = x + 4;
 8001942:	b280      	uxth	r0, r0
 8001944:	1d04      	adds	r4, r0, #4
	int16_t y1 = y + 4;
 8001946:	b289      	uxth	r1, r1
 8001948:	f101 0e04 	add.w	lr, r1, #4
	uint16_t color_l = (color>>0)&0x1FF;
 800194c:	f3c2 0c08 	ubfx	ip, r2, #0, #9
	uint16_t color_h = (color>>9)&0x1FF;
 8001950:	f3c2 2248 	ubfx	r2, r2, #9, #9

	*addr_cmd = 0x2A;
 8001954:	4d3e      	ldr	r5, [pc, #248]	; (8001a50 <lcd_set_pixel_bench+0x110>)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	262a      	movs	r6, #42	; 0x2a
 800195a:	801e      	strh	r6, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 800195c:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <lcd_set_pixel_bench+0x114>)
 800195e:	0a06      	lsrs	r6, r0, #8
 8001960:	681f      	ldr	r7, [r3, #0]
 8001962:	803e      	strh	r6, [r7, #0]
	*addr_data = (x0>>0)&0xFF;
 8001964:	b2c0      	uxtb	r0, r0
 8001966:	681e      	ldr	r6, [r3, #0]
 8001968:	8030      	strh	r0, [r6, #0]
	*addr_data = (x1>>8)&0xFF;
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8001970:	8006      	strh	r6, [r0, #0]
	*addr_data = (x1>>0)&0xFF;
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	b2e4      	uxtb	r4, r4
 8001976:	8004      	strh	r4, [r0, #0]

	*addr_cmd = 0x2B;
 8001978:	6828      	ldr	r0, [r5, #0]
 800197a:	242b      	movs	r4, #43	; 0x2b
 800197c:	8004      	strh	r4, [r0, #0]
	*addr_data = (y0>>8)&0xFF;
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	0a0c      	lsrs	r4, r1, #8
 8001982:	8004      	strh	r4, [r0, #0]
	*addr_data = (y0>>0)&0xFF;
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	b2c9      	uxtb	r1, r1
 8001988:	8001      	strh	r1, [r0, #0]
	*addr_data = (y1>>8)&0xFF;
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8001990:	8008      	strh	r0, [r1, #0]
	*addr_data = (y1>>0)&0xFF;
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	fa5f fe8e 	uxtb.w	lr, lr
 8001998:	f8a1 e000 	strh.w	lr, [r1]
	return SysTick->VAL;
 800199c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 80019a0:	6981      	ldr	r1, [r0, #24]

	a = get_systick();
	*addr_cmd = 0x2C;
 80019a2:	682c      	ldr	r4, [r5, #0]
 80019a4:	252c      	movs	r5, #44	; 0x2c
 80019a6:	8025      	strh	r5, [r4, #0]
	*addr_data = color_l;
 80019a8:	681c      	ldr	r4, [r3, #0]
 80019aa:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019ae:	681c      	ldr	r4, [r3, #0]
 80019b0:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 80019b2:	681c      	ldr	r4, [r3, #0]
 80019b4:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019b8:	681c      	ldr	r4, [r3, #0]
 80019ba:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 80019c6:	681c      	ldr	r4, [r3, #0]
 80019c8:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019cc:	681c      	ldr	r4, [r3, #0]
 80019ce:	8022      	strh	r2, [r4, #0]

	*addr_data = color_l;
 80019d0:	681c      	ldr	r4, [r3, #0]
 80019d2:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019d6:	681c      	ldr	r4, [r3, #0]
 80019d8:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019e0:	681c      	ldr	r4, [r3, #0]
 80019e2:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 80019e4:	681c      	ldr	r4, [r3, #0]
 80019e6:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019ea:	681c      	ldr	r4, [r3, #0]
 80019ec:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 80019ee:	681c      	ldr	r4, [r3, #0]
 80019f0:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019f4:	681c      	ldr	r4, [r3, #0]
 80019f6:	8022      	strh	r2, [r4, #0]

	*addr_data = color_l;
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 80019fe:	681c      	ldr	r4, [r3, #0]
 8001a00:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 8001a02:	681c      	ldr	r4, [r3, #0]
 8001a04:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 8001a12:	681c      	ldr	r4, [r3, #0]
 8001a14:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 8001a16:	681c      	ldr	r4, [r3, #0]
 8001a18:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 8001a1c:	681c      	ldr	r4, [r3, #0]
 8001a1e:	8022      	strh	r2, [r4, #0]

	*addr_data = color_l;
 8001a20:	681c      	ldr	r4, [r3, #0]
 8001a22:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 8001a26:	681c      	ldr	r4, [r3, #0]
 8001a28:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 8001a2a:	681c      	ldr	r4, [r3, #0]
 8001a2c:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 8001a30:	681c      	ldr	r4, [r3, #0]
 8001a32:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 8001a34:	681c      	ldr	r4, [r3, #0]
 8001a36:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 8001a3a:	681c      	ldr	r4, [r3, #0]
 8001a3c:	8022      	strh	r2, [r4, #0]
	*addr_data = color_l;
 8001a3e:	681c      	ldr	r4, [r3, #0]
 8001a40:	f8a4 c000 	strh.w	ip, [r4]
	*addr_data = color_h;
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	801a      	strh	r2, [r3, #0]
	return SysTick->VAL;
 8001a48:	6980      	ldr	r0, [r0, #24]
	b = get_systick();
	d = diff_systick(b,a);
 8001a4a:	f7ff fe30 	bl	80016ae <diff_systick>
	return d;
}
 8001a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <draw_char>:
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
	        x0 += get_char_rect( &fontUbuntuBookRNormal16, chr ).width;
	}
}
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color )
{
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5c:	b089      	sub	sp, #36	; 0x24
 8001a5e:	9003      	str	r0, [sp, #12]
 8001a60:	9205      	str	r2, [sp, #20]
    int16_t x, y, w, bitmap, b;
    int16_t px, py;
    const tGlyph *pGlyph;

    pGlyph = pFont->pGlyphs[c-32];
 8001a62:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001a66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001a6a:	3a20      	subs	r2, #32
 8001a6c:	68c8      	ldr	r0, [r1, #12]
 8001a6e:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]

    y0 += pFont->bbxh;
    y0 -= pFont->descent;
    y0 -= pGlyph->bbxh;
 8001a72:	f996 000a 	ldrsb.w	r0, [r6, #10]
    y0 += pFont->bbxh;
 8001a76:	f991 2009 	ldrsb.w	r2, [r1, #9]
 8001a7a:	4413      	add	r3, r2
    y0 -= pFont->descent;
 8001a7c:	79ca      	ldrb	r2, [r1, #7]
 8001a7e:	1a9b      	subs	r3, r3, r2
    y0 -= pGlyph->bbxh;
 8001a80:	1a1b      	subs	r3, r3, r0
    y0 -= pGlyph->bbxy;
 8001a82:	f996 200c 	ldrsb.w	r2, [r6, #12]
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	9307      	str	r3, [sp, #28]

    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	dd50      	ble.n	8001b32 <draw_char+0xda>
 8001a90:	2300      	movs	r3, #0
 8001a92:	9306      	str	r3, [sp, #24]
                    break;
                }

                px = x0+x+b;

                if( bitmap & (0x80>>b) )
 8001a94:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8001a98:	e033      	b.n	8001b02 <draw_char+0xaa>
            for( b = 0 ; b < 8 ; b++ )
 8001a9a:	3401      	adds	r4, #1
 8001a9c:	2c08      	cmp	r4, #8
 8001a9e:	d013      	beq.n	8001ac8 <draw_char+0x70>
                if( x+b >= pGlyph->bbxw )
 8001aa0:	f996 2009 	ldrsb.w	r2, [r6, #9]
 8001aa4:	192b      	adds	r3, r5, r4
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dd0e      	ble.n	8001ac8 <draw_char+0x70>
                if( bitmap & (0x80>>b) )
 8001aaa:	fa4b f304 	asr.w	r3, fp, r4
 8001aae:	423b      	tst	r3, r7
 8001ab0:	d0f3      	beq.n	8001a9a <draw_char+0x42>
                {
                    //set_pixel( px, py, color );
                    //lcd_rect( px, py, 1, 1, color);
                	setpixel_checked(fb, px, py, color, 1);
 8001ab2:	eb08 0104 	add.w	r1, r8, r4
 8001ab6:	f8cd a000 	str.w	sl, [sp]
 8001aba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001abc:	464a      	mov	r2, r9
 8001abe:	b209      	sxth	r1, r1
 8001ac0:	9803      	ldr	r0, [sp, #12]
 8001ac2:	f007 f8a6 	bl	8008c12 <setpixel_checked>
 8001ac6:	e7e8      	b.n	8001a9a <draw_char+0x42>
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 8001ac8:	3508      	adds	r5, #8
 8001aca:	b22d      	sxth	r5, r5
 8001acc:	f996 3009 	ldrsb.w	r3, [r6, #9]
 8001ad0:	42ab      	cmp	r3, r5
 8001ad2:	dd0e      	ble.n	8001af2 <draw_char+0x9a>
            bitmap = pGlyph->pBitmap[yw+x/8];
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	2d00      	cmp	r5, #0
 8001ad8:	bfb8      	it	lt
 8001ada:	1deb      	addlt	r3, r5, #7
 8001adc:	f343 03cf 	sbfx	r3, r3, #3, #16
 8001ae0:	6932      	ldr	r2, [r6, #16]
 8001ae2:	9904      	ldr	r1, [sp, #16]
 8001ae4:	440a      	add	r2, r1
 8001ae6:	5cd7      	ldrb	r7, [r2, r3]
 8001ae8:	2400      	movs	r4, #0
                px = x0+x+b;
 8001aea:	9b05      	ldr	r3, [sp, #20]
 8001aec:	eb03 0805 	add.w	r8, r3, r5
 8001af0:	e7d6      	b.n	8001aa0 <draw_char+0x48>
    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 8001af2:	9b06      	ldr	r3, [sp, #24]
 8001af4:	3301      	adds	r3, #1
 8001af6:	9306      	str	r3, [sp, #24]
 8001af8:	f996 200a 	ldrsb.w	r2, [r6, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dd17      	ble.n	8001b32 <draw_char+0xda>
        py = y0+y;
 8001b02:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8001b06:	9b07      	ldr	r3, [sp, #28]
 8001b08:	eb03 0901 	add.w	r9, r3, r1
 8001b0c:	fa0f f989 	sxth.w	r9, r9
        w = (pGlyph->bbxw-1)/8+1;
 8001b10:	f996 2009 	ldrsb.w	r2, [r6, #9]
 8001b14:	1e53      	subs	r3, r2, #1
 8001b16:	bf48      	it	mi
 8001b18:	3307      	addmi	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	3301      	adds	r3, #1
        int16_t yw = y*w;
 8001b1e:	fb13 f301 	smulbb	r3, r3, r1
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	9304      	str	r3, [sp, #16]
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	dde3      	ble.n	8001af2 <draw_char+0x9a>
 8001b2a:	2500      	movs	r5, #0
                	setpixel_checked(fb, px, py, color, 1);
 8001b2c:	f04f 0a01 	mov.w	sl, #1
 8001b30:	e7d0      	b.n	8001ad4 <draw_char+0x7c>
                }
            }
        }
    }
}
 8001b32:	b009      	add	sp, #36	; 0x24
 8001b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b38 <get_char_rect>:


tRectangle get_char_rect( const tFont *pFont, uint8_t c )
{
 8001b38:	b410      	push	{r4}
    tRectangle rect = {0};

    rect.width = pFont->pGlyphs[c-32]->dwidthx;
 8001b3a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001b3e:	3a20      	subs	r2, #32
 8001b40:	68cc      	ldr	r4, [r1, #12]
 8001b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001b46:	f892 c007 	ldrb.w	ip, [r2, #7]
    rect.height = pFont->bbxh;
 8001b4a:	f991 1009 	ldrsb.w	r1, [r1, #9]
    return rect;
 8001b4e:	2200      	movs	r2, #0
 8001b50:	8002      	strh	r2, [r0, #0]
 8001b52:	8042      	strh	r2, [r0, #2]
 8001b54:	f8a0 c004 	strh.w	ip, [r0, #4]
 8001b58:	80c1      	strh	r1, [r0, #6]
}
 8001b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <lcd_text>:
{
 8001b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	for(; *str; ++str) {
 8001b6a:	781c      	ldrb	r4, [r3, #0]
 8001b6c:	b314      	cbz	r4, 8001bb4 <lcd_text+0x54>
 8001b6e:	4680      	mov	r8, r0
 8001b70:	468a      	mov	sl, r1
 8001b72:	461d      	mov	r5, r3
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
 8001b74:	b217      	sxth	r7, r2
 8001b76:	4e11      	ldr	r6, [pc, #68]	; (8001bbc <lcd_text+0x5c>)
	        if (chr < 32 || chr > 127) {
 8001b78:	f1a4 0320 	sub.w	r3, r4, #32
 8001b7c:	2b60      	cmp	r3, #96	; 0x60
 8001b7e:	bf28      	it	cs
 8001b80:	247f      	movcs	r4, #127	; 0x7f
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
 8001b82:	b2e4      	uxtb	r4, r4
 8001b84:	f8cd 9004 	str.w	r9, [sp, #4]
 8001b88:	9400      	str	r4, [sp, #0]
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	fa0f f28a 	sxth.w	r2, sl
 8001b90:	4631      	mov	r1, r6
 8001b92:	4640      	mov	r0, r8
 8001b94:	f7ff ff60 	bl	8001a58 <draw_char>
	        x0 += get_char_rect( &fontUbuntuBookRNormal16, chr ).width;
 8001b98:	4622      	mov	r2, r4
 8001b9a:	4631      	mov	r1, r6
 8001b9c:	a802      	add	r0, sp, #8
 8001b9e:	f7ff ffcb 	bl	8001b38 <get_char_rect>
 8001ba2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001ba6:	4451      	add	r1, sl
 8001ba8:	fa1f fa81 	uxth.w	sl, r1
	for(; *str; ++str) {
 8001bac:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001bb0:	2c00      	cmp	r4, #0
 8001bb2:	d1e1      	bne.n	8001b78 <lcd_text+0x18>
}
 8001bb4:	b004      	add	sp, #16
 8001bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bba:	bf00      	nop
 8001bbc:	08019fb0 	.word	0x08019fb0

08001bc0 <get_text_rect>:

tRectangle get_text_rect( const tFont *pFont, char *pString )
{
 8001bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	4607      	mov	r7, r0
 8001bc8:	4616      	mov	r6, r2
	uint8_t i;
	tRectangle rect = {0};

	rect.height = pFont->bbxh;
 8001bca:	f991 8009 	ldrsb.w	r8, [r1, #9]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 8001bce:	7812      	ldrb	r2, [r2, #0]
 8001bd0:	b1da      	cbz	r2, 8001c0a <get_text_rect+0x4a>
 8001bd2:	460d      	mov	r5, r1
 8001bd4:	2400      	movs	r4, #0
	tRectangle rect = {0};
 8001bd6:	46a1      	mov	r9, r4
	{
		rect.width += get_char_rect( pFont, pString[i] ).width;
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4668      	mov	r0, sp
 8001bdc:	f7ff ffac 	bl	8001b38 <get_char_rect>
 8001be0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001be4:	444b      	add	r3, r9
 8001be6:	fa0f f983 	sxth.w	r9, r3
	for( i = 0 ; pString[i] != '\0' ; i++ )
 8001bea:	3401      	adds	r4, #1
 8001bec:	b2e4      	uxtb	r4, r4
 8001bee:	5d32      	ldrb	r2, [r6, r4]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d1f1      	bne.n	8001bd8 <get_text_rect+0x18>
    }

    return rect;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	803b      	strh	r3, [r7, #0]
 8001bf8:	807b      	strh	r3, [r7, #2]
 8001bfa:	f8a7 9004 	strh.w	r9, [r7, #4]
 8001bfe:	f8a7 8006 	strh.w	r8, [r7, #6]
}
 8001c02:	4638      	mov	r0, r7
 8001c04:	b003      	add	sp, #12
 8001c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tRectangle rect = {0};
 8001c0a:	f04f 0900 	mov.w	r9, #0
 8001c0e:	e7f1      	b.n	8001bf4 <get_text_rect+0x34>

08001c10 <text_width_f>:
{
 8001c10:	b500      	push	{lr}
 8001c12:	b083      	sub	sp, #12
 8001c14:	460a      	mov	r2, r1
	return get_text_rect( &fontUbuntuBookRNormal16, t ).width;
 8001c16:	4906      	ldr	r1, [pc, #24]	; (8001c30 <text_width_f+0x20>)
 8001c18:	4668      	mov	r0, sp
 8001c1a:	f7ff ffd1 	bl	8001bc0 <get_text_rect>
 8001c1e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001c22:	ee00 3a10 	vmov	s0, r3
}
 8001c26:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001c2a:	b003      	add	sp, #12
 8001c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c30:	08019fb0 	.word	0x08019fb0

08001c34 <lcd_bmp>:
	        }
	    }
}

void lcd_bmp( int16_t x, int16_t y, int16_t w, int16_t h, uint8_t *buf )
{
 8001c34:	b570      	push	{r4, r5, r6, lr}
	int16_t x0 = x;
	int16_t y0 = y;
	int16_t x1 = x + w - 1;
	int16_t y1 = y + h - 1;

	if( x0 < 0 )
 8001c36:	4684      	mov	ip, r0
 8001c38:	28ef      	cmp	r0, #239	; 0xef
 8001c3a:	bfa8      	it	ge
 8001c3c:	f04f 0cef 	movge.w	ip, #239	; 0xef
 8001c40:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
	int16_t x1 = x + w - 1;
 8001c44:	3a01      	subs	r2, #1
 8001c46:	4402      	add	r2, r0
 8001c48:	b212      	sxth	r2, r2
 8001c4a:	2aef      	cmp	r2, #239	; 0xef
 8001c4c:	bfa8      	it	ge
 8001c4e:	22ef      	movge	r2, #239	; 0xef
 8001c50:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	else if( x1 > 240 - 1 )
	{
		x1 = 240 - 1;
	}

	if( y0 < 0 )
 8001c54:	f240 143f 	movw	r4, #319	; 0x13f
 8001c58:	468e      	mov	lr, r1
 8001c5a:	42a1      	cmp	r1, r4
 8001c5c:	bfa8      	it	ge
 8001c5e:	46a6      	movge	lr, r4
 8001c60:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
	int16_t y1 = y + h - 1;
 8001c64:	3b01      	subs	r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	42a3      	cmp	r3, r4
 8001c6c:	bfa8      	it	ge
 8001c6e:	4623      	movge	r3, r4
 8001c70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	else if( y1 > 320 - 1 )
	{
		y1 = 320 - 1;
	}

	if( x0 > x1 )
 8001c74:	4562      	cmp	r2, ip
 8001c76:	da02      	bge.n	8001c7e <lcd_bmp+0x4a>
 8001c78:	4661      	mov	r1, ip
	{
		int tmp = x0;
		x0 = x1;
 8001c7a:	4694      	mov	ip, r2
		x1 = tmp;
 8001c7c:	460a      	mov	r2, r1
	}

	if( y0 > y1 )
 8001c7e:	459e      	cmp	lr, r3
 8001c80:	dd02      	ble.n	8001c88 <lcd_bmp+0x54>
 8001c82:	4671      	mov	r1, lr
	{
		int tmp = y0;
		y0 = y1;
 8001c84:	469e      	mov	lr, r3
		y1 = tmp;
 8001c86:	460b      	mov	r3, r1
	}

	w = x1 - x0 + 1;
 8001c88:	b290      	uxth	r0, r2
 8001c8a:	fa1f fc8c 	uxth.w	ip, ip
	h = y1 - y0 + 1;
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	fa1f fe8e 	uxth.w	lr, lr
	w = x1 - x0 + 1;
 8001c94:	1c41      	adds	r1, r0, #1
 8001c96:	eba1 010c 	sub.w	r1, r1, ip
	h = y1 - y0 + 1;
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	eba2 020e 	sub.w	r2, r2, lr

	uint32_t i = 0;
	uint32_t n = w*h;
 8001ca0:	fb12 f201 	smulbb	r2, r2, r1

	//uint16_t color_l = (color>>0)&0x1FF;
	//uint16_t color_h = (color>>9)&0x1FF;

	*addr_cmd = 0x2A;
 8001ca4:	4c1a      	ldr	r4, [pc, #104]	; (8001d10 <lcd_bmp+0xdc>)
 8001ca6:	6821      	ldr	r1, [r4, #0]
 8001ca8:	252a      	movs	r5, #42	; 0x2a
 8001caa:	800d      	strh	r5, [r1, #0]
	*addr_data = (x0>>8)&0xFF;
 8001cac:	4919      	ldr	r1, [pc, #100]	; (8001d14 <lcd_bmp+0xe0>)
 8001cae:	2500      	movs	r5, #0
 8001cb0:	680e      	ldr	r6, [r1, #0]
 8001cb2:	8035      	strh	r5, [r6, #0]
	*addr_data = (x0>>0)&0xFF;
 8001cb4:	680e      	ldr	r6, [r1, #0]
 8001cb6:	f8a6 c000 	strh.w	ip, [r6]
	*addr_data = (x1>>8)&0xFF;
 8001cba:	680e      	ldr	r6, [r1, #0]
 8001cbc:	8035      	strh	r5, [r6, #0]
	*addr_data = (x1>>0)&0xFF;
 8001cbe:	680d      	ldr	r5, [r1, #0]
 8001cc0:	8028      	strh	r0, [r5, #0]

	*addr_cmd = 0x2B;
 8001cc2:	6820      	ldr	r0, [r4, #0]
 8001cc4:	252b      	movs	r5, #43	; 0x2b
 8001cc6:	8005      	strh	r5, [r0, #0]
	*addr_data = (y0>>8)&0xFF;
 8001cc8:	6808      	ldr	r0, [r1, #0]
 8001cca:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8001cce:	8005      	strh	r5, [r0, #0]
	*addr_data = (y0>>0)&0xFF;
 8001cd0:	680d      	ldr	r5, [r1, #0]
 8001cd2:	fa5f f08e 	uxtb.w	r0, lr
 8001cd6:	8028      	strh	r0, [r5, #0]
	*addr_data = (y1>>8)&0xFF;
 8001cd8:	6808      	ldr	r0, [r1, #0]
 8001cda:	0a1d      	lsrs	r5, r3, #8
 8001cdc:	8005      	strh	r5, [r0, #0]
	*addr_data = (y1>>0)&0xFF;
 8001cde:	6809      	ldr	r1, [r1, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	800b      	strh	r3, [r1, #0]

	*addr_cmd = 0x2C;
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	8019      	strh	r1, [r3, #0]
	for( i = n ; i ; i-- )
 8001cea:	b17a      	cbz	r2, 8001d0c <lcd_bmp+0xd8>
 8001cec:	9b04      	ldr	r3, [sp, #16]
 8001cee:	3302      	adds	r3, #2
	{
		*addr_data = *buf;
 8001cf0:	4908      	ldr	r1, [pc, #32]	; (8001d14 <lcd_bmp+0xe0>)
 8001cf2:	6808      	ldr	r0, [r1, #0]
 8001cf4:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 8001cf8:	f8a0 c000 	strh.w	ip, [r0]
		buf++;
		*addr_data = *buf;
 8001cfc:	6808      	ldr	r0, [r1, #0]
 8001cfe:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8001d02:	f8a0 c000 	strh.w	ip, [r0]
	for( i = n ; i ; i-- )
 8001d06:	3302      	adds	r3, #2
 8001d08:	3a01      	subs	r2, #1
 8001d0a:	d1f2      	bne.n	8001cf2 <lcd_bmp+0xbe>
		buf++;
	}
}
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004

08001d18 <oscilloscope_process>:
    int draw_signals;
};
int visible = 0;
struct nk_rect keypad_size = {35, 35, 142, 208};
void oscilloscope_process(struct Oscilloscope *osc, struct nk_context *ctx)
{
 8001d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d1c:	ed2d 8b02 	vpush	{d8}
 8001d20:	b0f8      	sub	sp, #480	; 0x1e0
 8001d22:	4605      	mov	r5, r0
 8001d24:	460c      	mov	r4, r1
	visible = 0;
 8001d26:	4ba8      	ldr	r3, [pc, #672]	; (8001fc8 <oscilloscope_process+0x2b0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
	if( nk_begin(ctx, "STM32G4 Scope", nk_rect(0, 0, 240, 320), NK_WINDOW_MINIMIZABLE ) )
 8001d2c:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8001fcc <oscilloscope_process+0x2b4>
 8001d30:	eddf 1aa7 	vldr	s3, [pc, #668]	; 8001fd0 <oscilloscope_process+0x2b8>
 8001d34:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 8001fd4 <oscilloscope_process+0x2bc>
 8001d38:	eef0 0a40 	vmov.f32	s1, s0
 8001d3c:	f00b fd66 	bl	800d80c <nk_rect>
 8001d40:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8001d44:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8001d48:	ed8d 1a0f 	vstr	s2, [sp, #60]	; 0x3c
 8001d4c:	edcd 1a10 	vstr	s3, [sp, #64]	; 0x40
 8001d50:	2210      	movs	r2, #16
 8001d52:	49a1      	ldr	r1, [pc, #644]	; (8001fd8 <oscilloscope_process+0x2c0>)
 8001d54:	4620      	mov	r0, r4
 8001d56:	f014 fa91 	bl	801627c <nk_begin>
 8001d5a:	b938      	cbnz	r0, 8001d6c <oscilloscope_process+0x54>
                nk_tree_pop(ctx);
            }
        }
        //nk_end(ctx);
    }
	nk_end(ctx);
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f014 fa97 	bl	8016290 <nk_end>
}
 8001d62:	b078      	add	sp, #480	; 0x1e0
 8001d64:	ecbd 8b02 	vpop	{d8}
 8001d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		visible = 1;
 8001d6c:	2601      	movs	r6, #1
 8001d6e:	4b96      	ldr	r3, [pc, #600]	; (8001fc8 <oscilloscope_process+0x2b0>)
 8001d70:	601e      	str	r6, [r3, #0]
        osc->draw_bg = nk_true;
 8001d72:	f8c5 60d8 	str.w	r6, [r5, #216]	; 0xd8
        if( nk_tree_push( ctx, NK_TREE_TAB, "Acquire", NK_MAXIMIZED) ){
 8001d76:	4f99      	ldr	r7, [pc, #612]	; (8001fdc <oscilloscope_process+0x2c4>)
 8001d78:	4638      	mov	r0, r7
 8001d7a:	f013 f819 	bl	8014db0 <nk_strlen>
 8001d7e:	f44f 731a 	mov.w	r3, #616	; 0x268
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	9001      	str	r0, [sp, #4]
 8001d86:	9700      	str	r7, [sp, #0]
 8001d88:	4633      	mov	r3, r6
 8001d8a:	4a95      	ldr	r2, [pc, #596]	; (8001fe0 <oscilloscope_process+0x2c8>)
 8001d8c:	4631      	mov	r1, r6
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f012 fe12 	bl	80149b8 <nk_tree_push_hashed>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	f040 80e5 	bne.w	8001f64 <oscilloscope_process+0x24c>
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Horizontal", NK_MINIMIZED) ){
 8001d9a:	4e92      	ldr	r6, [pc, #584]	; (8001fe4 <oscilloscope_process+0x2cc>)
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	f013 f807 	bl	8014db0 <nk_strlen>
 8001da2:	f240 2385 	movw	r3, #645	; 0x285
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	9001      	str	r0, [sp, #4]
 8001daa:	9600      	str	r6, [sp, #0]
 8001dac:	2300      	movs	r3, #0
 8001dae:	4a8e      	ldr	r2, [pc, #568]	; (8001fe8 <oscilloscope_process+0x2d0>)
 8001db0:	2101      	movs	r1, #1
 8001db2:	4620      	mov	r0, r4
 8001db4:	f012 fe00 	bl	80149b8 <nk_tree_push_hashed>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	f040 814d 	bne.w	8002058 <oscilloscope_process+0x340>
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Vertical", NK_MINIMIZED) ){
 8001dbe:	4e8b      	ldr	r6, [pc, #556]	; (8001fec <oscilloscope_process+0x2d4>)
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f012 fff5 	bl	8014db0 <nk_strlen>
 8001dc6:	f240 23cb 	movw	r3, #715	; 0x2cb
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	9001      	str	r0, [sp, #4]
 8001dce:	9600      	str	r6, [sp, #0]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4a87      	ldr	r2, [pc, #540]	; (8001ff0 <oscilloscope_process+0x2d8>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f012 fdee 	bl	80149b8 <nk_tree_push_hashed>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	f040 8251 	bne.w	8002284 <oscilloscope_process+0x56c>
            if( nk_tree_push( ctx, NK_TREE_TAB, "Trigger", NK_MINIMIZED) ){
 8001de2:	4e84      	ldr	r6, [pc, #528]	; (8001ff4 <oscilloscope_process+0x2dc>)
 8001de4:	4630      	mov	r0, r6
 8001de6:	f012 ffe3 	bl	8014db0 <nk_strlen>
 8001dea:	f240 23f7 	movw	r3, #759	; 0x2f7
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	9001      	str	r0, [sp, #4]
 8001df2:	9600      	str	r6, [sp, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	4a80      	ldr	r2, [pc, #512]	; (8001ff8 <oscilloscope_process+0x2e0>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f012 fddc 	bl	80149b8 <nk_tree_push_hashed>
 8001e00:	2800      	cmp	r0, #0
 8001e02:	f040 836d 	bne.w	80024e0 <oscilloscope_process+0x7c8>
            if( nk_tree_push( ctx, NK_TREE_TAB, "Waveform", NK_MINIMIZED) ){
 8001e06:	4e7d      	ldr	r6, [pc, #500]	; (8001ffc <oscilloscope_process+0x2e4>)
 8001e08:	4630      	mov	r0, r6
 8001e0a:	f012 ffd1 	bl	8014db0 <nk_strlen>
 8001e0e:	f240 3315 	movw	r3, #789	; 0x315
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	9001      	str	r0, [sp, #4]
 8001e16:	9600      	str	r6, [sp, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	4a79      	ldr	r2, [pc, #484]	; (8002000 <oscilloscope_process+0x2e8>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f012 fdca 	bl	80149b8 <nk_tree_push_hashed>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	f040 841f 	bne.w	8002668 <oscilloscope_process+0x950>
			if( nk_tree_push( ctx, NK_TREE_TAB, "Cursor", NK_MINIMIZED) ){
 8001e2a:	4e76      	ldr	r6, [pc, #472]	; (8002004 <oscilloscope_process+0x2ec>)
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f012 ffbf 	bl	8014db0 <nk_strlen>
 8001e32:	f240 334f 	movw	r3, #847	; 0x34f
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	9001      	str	r0, [sp, #4]
 8001e3a:	9600      	str	r6, [sp, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4a72      	ldr	r2, [pc, #456]	; (8002008 <oscilloscope_process+0x2f0>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	4620      	mov	r0, r4
 8001e44:	f012 fdb8 	bl	80149b8 <nk_tree_push_hashed>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	f040 8589 	bne.w	8002960 <oscilloscope_process+0xc48>
			if( nk_tree_push( ctx, NK_TREE_TAB, "Measurements", NK_MINIMIZED) ){
 8001e4e:	4d6f      	ldr	r5, [pc, #444]	; (800200c <oscilloscope_process+0x2f4>)
 8001e50:	4628      	mov	r0, r5
 8001e52:	f012 ffad 	bl	8014db0 <nk_strlen>
 8001e56:	f240 337d 	movw	r3, #893	; 0x37d
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	9001      	str	r0, [sp, #4]
 8001e5e:	9500      	str	r5, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	4a6b      	ldr	r2, [pc, #428]	; (8002010 <oscilloscope_process+0x2f8>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	4620      	mov	r0, r4
 8001e68:	f012 fda6 	bl	80149b8 <nk_tree_push_hashed>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	f040 8698 	bne.w	8002ba2 <oscilloscope_process+0xe8a>
			if( nk_tree_push( ctx, NK_TREE_TAB, "Info", NK_MINIMIZED) ){
 8001e72:	4d68      	ldr	r5, [pc, #416]	; (8002014 <oscilloscope_process+0x2fc>)
 8001e74:	4628      	mov	r0, r5
 8001e76:	f012 ff9b 	bl	8014db0 <nk_strlen>
 8001e7a:	f240 3382 	movw	r3, #898	; 0x382
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	9001      	str	r0, [sp, #4]
 8001e82:	9500      	str	r5, [sp, #0]
 8001e84:	2300      	movs	r3, #0
 8001e86:	4a64      	ldr	r2, [pc, #400]	; (8002018 <oscilloscope_process+0x300>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f012 fd94 	bl	80149b8 <nk_tree_push_hashed>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	f43f af63 	beq.w	8001d5c <oscilloscope_process+0x44>
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 120});
 8001e96:	4b61      	ldr	r3, [pc, #388]	; (800201c <oscilloscope_process+0x304>)
 8001e98:	9376      	str	r3, [sp, #472]	; 0x1d8
 8001e9a:	4b61      	ldr	r3, [pc, #388]	; (8002020 <oscilloscope_process+0x308>)
 8001e9c:	9377      	str	r3, [sp, #476]	; 0x1dc
 8001e9e:	ab76      	add	r3, sp, #472	; 0x1d8
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f00b f945 	bl	800d138 <nk_layout_row>
                nk_label(ctx, "FPS", NK_TEXT_LEFT);
 8001eae:	2211      	movs	r2, #17
 8001eb0:	495c      	ldr	r1, [pc, #368]	; (8002024 <oscilloscope_process+0x30c>)
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f011 f816 	bl	8012ee4 <nk_label>
                b = a;
 8001eb8:	4d5b      	ldr	r5, [pc, #364]	; (8002028 <oscilloscope_process+0x310>)
 8001eba:	4e5c      	ldr	r6, [pc, #368]	; (800202c <oscilloscope_process+0x314>)
 8001ebc:	6833      	ldr	r3, [r6, #0]
 8001ebe:	602b      	str	r3, [r5, #0]
                a = HAL_GetTick();
 8001ec0:	f002 fbf6 	bl	80046b0 <HAL_GetTick>
 8001ec4:	6030      	str	r0, [r6, #0]
                int d = a-b;
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	1ac0      	subs	r0, r0, r3
                sprintf(buffer, "%f", 1000.0f/d);
 8001eca:	ee07 0a90 	vmov	s15, r0
 8001ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002030 <oscilloscope_process+0x318>
 8001ed6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001eda:	ee17 0a90 	vmov	r0, s15
 8001ede:	f7fe fb5b 	bl	8000598 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4953      	ldr	r1, [pc, #332]	; (8002034 <oscilloscope_process+0x31c>)
 8001ee8:	a805      	add	r0, sp, #20
 8001eea:	f015 f875 	bl	8016fd8 <siprintf>
                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual fps
 8001eee:	2211      	movs	r2, #17
 8001ef0:	a905      	add	r1, sp, #20
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f010 fff6 	bl	8012ee4 <nk_label>
                nk_label(ctx, "Memory1", NK_TEXT_LEFT);
 8001ef8:	2211      	movs	r2, #17
 8001efa:	494f      	ldr	r1, [pc, #316]	; (8002038 <oscilloscope_process+0x320>)
 8001efc:	4620      	mov	r0, r4
 8001efe:	f010 fff1 	bl	8012ee4 <nk_label>
                sprintf(buffer, "%d%%", (100*ctx->memory.allocated)/ctx->memory.size );
 8001f02:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001f06:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8001f0a:	2664      	movs	r6, #100	; 0x64
 8001f0c:	fb06 f202 	mul.w	r2, r6, r2
 8001f10:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8001f14:	4d49      	ldr	r5, [pc, #292]	; (800203c <oscilloscope_process+0x324>)
 8001f16:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	a805      	add	r0, sp, #20
 8001f1e:	f015 f85b 	bl	8016fd8 <siprintf>
                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual memory ratio
 8001f22:	2211      	movs	r2, #17
 8001f24:	a905      	add	r1, sp, #20
 8001f26:	4620      	mov	r0, r4
 8001f28:	f010 ffdc 	bl	8012ee4 <nk_label>
                nk_label(ctx, "Memory2", NK_TEXT_LEFT);
 8001f2c:	2211      	movs	r2, #17
 8001f2e:	4944      	ldr	r1, [pc, #272]	; (8002040 <oscilloscope_process+0x328>)
 8001f30:	4620      	mov	r0, r4
 8001f32:	f010 ffd7 	bl	8012ee4 <nk_label>
                sprintf(buffer, "%d%%", (100*ctx->pool.cap)/ctx->pool.size);
 8001f36:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001f3a:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
 8001f3e:	fb06 f202 	mul.w	r2, r6, r2
 8001f42:	f8d3 3644 	ldr.w	r3, [r3, #1604]	; 0x644
 8001f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	a805      	add	r0, sp, #20
 8001f4e:	f015 f843 	bl	8016fd8 <siprintf>
                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual memory ratio
 8001f52:	2211      	movs	r2, #17
 8001f54:	a905      	add	r1, sp, #20
 8001f56:	4620      	mov	r0, r4
 8001f58:	f010 ffc4 	bl	8012ee4 <nk_label>
                nk_tree_pop(ctx);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f012 fd3a 	bl	80149d6 <nk_tree_pop>
 8001f62:	e6fb      	b.n	8001d5c <oscilloscope_process+0x44>
            osc->draw_bg = nk_false;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
            nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 60, 60, 60});
 8001f6a:	ae29      	add	r6, sp, #164	; 0xa4
 8001f6c:	4b35      	ldr	r3, [pc, #212]	; (8002044 <oscilloscope_process+0x32c>)
 8001f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f70:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001f74:	4633      	mov	r3, r6
 8001f76:	2204      	movs	r2, #4
 8001f78:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f00b f8da 	bl	800d138 <nk_layout_row>
            osc->acquire_run = nk_check_label( ctx, osc->acquire_run?"Stop":"Run", osc->acquire_run );
 8001f84:	682a      	ldr	r2, [r5, #0]
 8001f86:	4930      	ldr	r1, [pc, #192]	; (8002048 <oscilloscope_process+0x330>)
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <oscilloscope_process+0x334>)
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	bf08      	it	eq
 8001f8e:	4619      	moveq	r1, r3
 8001f90:	4620      	mov	r0, r4
 8001f92:	f012 fa89 	bl	80144a8 <nk_check_label>
 8001f96:	6028      	str	r0, [r5, #0]
            if (nk_button_label(ctx, "Single")) {
 8001f98:	492d      	ldr	r1, [pc, #180]	; (8002050 <oscilloscope_process+0x338>)
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f007 febc 	bl	8009d18 <nk_button_label>
 8001fa0:	b108      	cbz	r0, 8001fa6 <oscilloscope_process+0x28e>
                osc->acquire_single = nk_true;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	606b      	str	r3, [r5, #4]
            if (nk_button_label(ctx, "Draw")) {
 8001fa6:	492b      	ldr	r1, [pc, #172]	; (8002054 <oscilloscope_process+0x33c>)
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f007 feb5 	bl	8009d18 <nk_button_label>
 8001fae:	b138      	cbz	r0, 8001fc0 <oscilloscope_process+0x2a8>
                if (osc->draw_signals + 1 < 3) {
 8001fb0:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
 8001fb4:	2b01      	cmp	r3, #1
                    osc->draw_signals += 1;
 8001fb6:	bfd4      	ite	le
 8001fb8:	3301      	addle	r3, #1
                    osc->draw_signals = 0;
 8001fba:	2300      	movgt	r3, #0
 8001fbc:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
            nk_tree_pop(ctx);
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f012 fd08 	bl	80149d6 <nk_tree_pop>
 8001fc6:	e6e8      	b.n	8001d9a <oscilloscope_process+0x82>
 8001fc8:	200115e0 	.word	0x200115e0
 8001fcc:	00000000 	.word	0x00000000
 8001fd0:	43a00000 	.word	0x43a00000
 8001fd4:	43700000 	.word	0x43700000
 8001fd8:	08019d40 	.word	0x08019d40
 8001fdc:	08019d50 	.word	0x08019d50
 8001fe0:	08019d68 	.word	0x08019d68
 8001fe4:	08019d80 	.word	0x08019d80
 8001fe8:	08019d98 	.word	0x08019d98
 8001fec:	08019e00 	.word	0x08019e00
 8001ff0:	08019e18 	.word	0x08019e18
 8001ff4:	08019e2c 	.word	0x08019e2c
 8001ff8:	08019e44 	.word	0x08019e44
 8001ffc:	08019e5c 	.word	0x08019e5c
 8002000:	08019e74 	.word	0x08019e74
 8002004:	08019e90 	.word	0x08019e90
 8002008:	08019ea8 	.word	0x08019ea8
 800200c:	08019ec8 	.word	0x08019ec8
 8002010:	08019ee0 	.word	0x08019ee0
 8002014:	08019ef8 	.word	0x08019ef8
 8002018:	08019f10 	.word	0x08019f10
 800201c:	42700000 	.word	0x42700000
 8002020:	42f00000 	.word	0x42f00000
 8002024:	08019f18 	.word	0x08019f18
 8002028:	20000804 	.word	0x20000804
 800202c:	200007fc 	.word	0x200007fc
 8002030:	447a0000 	.word	0x447a0000
 8002034:	08019f1c 	.word	0x08019f1c
 8002038:	08019f20 	.word	0x08019f20
 800203c:	08019f28 	.word	0x08019f28
 8002040:	08019f30 	.word	0x08019f30
 8002044:	08019cc0 	.word	0x08019cc0
 8002048:	08019d34 	.word	0x08019d34
 800204c:	08019d3c 	.word	0x08019d3c
 8002050:	08019d70 	.word	0x08019d70
 8002054:	08019d78 	.word	0x08019d78
        		nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002058:	ae2d      	add	r6, sp, #180	; 0xb4
 800205a:	4b6e      	ldr	r3, [pc, #440]	; (8002214 <oscilloscope_process+0x4fc>)
 800205c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002062:	4633      	mov	r3, r6
 8002064:	2204      	movs	r2, #4
 8002066:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800206a:	2101      	movs	r1, #1
 800206c:	4620      	mov	r0, r4
 800206e:	f00b f863 	bl	800d138 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8002072:	2211      	movs	r2, #17
 8002074:	4968      	ldr	r1, [pc, #416]	; (8002218 <oscilloscope_process+0x500>)
 8002076:	4620      	mov	r0, r4
 8002078:	f010 ff34 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800207c:	2101      	movs	r1, #1
 800207e:	4620      	mov	r0, r4
 8002080:	f007 fdae 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002084:	2109      	movs	r1, #9
 8002086:	4620      	mov	r0, r4
 8002088:	f007 feb2 	bl	8009df0 <nk_button_symbol>
 800208c:	b138      	cbz	r0, 800209e <oscilloscope_process+0x386>
        			osc->horizontal_offset -= 1;
 800208e:	edd5 7a02 	vldr	s15, [r5, #8]
 8002092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800209a:	edc5 7a02 	vstr	s15, [r5, #8]
        		sprintf(combo_buffer, "%.2f", osc->horizontal_offset);
 800209e:	68a8      	ldr	r0, [r5, #8]
 80020a0:	f7fe fa7a 	bl	8000598 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	495c      	ldr	r1, [pc, #368]	; (800221c <oscilloscope_process+0x504>)
 80020aa:	a805      	add	r0, sp, #20
 80020ac:	f014 ff94 	bl	8016fd8 <siprintf>
        		show_app_about |= nk_button_label( ctx, combo_buffer );
 80020b0:	a905      	add	r1, sp, #20
 80020b2:	4620      	mov	r0, r4
 80020b4:	f007 fe30 	bl	8009d18 <nk_button_label>
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <oscilloscope_process+0x508>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4310      	orrs	r0, r2
 80020be:	6018      	str	r0, [r3, #0]
                if (show_app_about)
 80020c0:	bb98      	cbnz	r0, 800212a <oscilloscope_process+0x412>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80020c2:	2101      	movs	r1, #1
 80020c4:	4620      	mov	r0, r4
 80020c6:	f007 fd8b 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80020ca:	210a      	movs	r1, #10
 80020cc:	4620      	mov	r0, r4
 80020ce:	f007 fe8f 	bl	8009df0 <nk_button_symbol>
 80020d2:	b138      	cbz	r0, 80020e4 <oscilloscope_process+0x3cc>
        			osc->horizontal_offset += 1;
 80020d4:	edd5 7a02 	vldr	s15, [r5, #8]
 80020d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020e0:	edc5 7a02 	vstr	s15, [r5, #8]
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60,30+60+30});
 80020e4:	4b4f      	ldr	r3, [pc, #316]	; (8002224 <oscilloscope_process+0x50c>)
 80020e6:	9331      	str	r3, [sp, #196]	; 0xc4
 80020e8:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <oscilloscope_process+0x510>)
 80020ea:	9332      	str	r3, [sp, #200]	; 0xc8
 80020ec:	ab31      	add	r3, sp, #196	; 0xc4
 80020ee:	2202      	movs	r2, #2
 80020f0:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80020f4:	2101      	movs	r1, #1
 80020f6:	4620      	mov	r0, r4
 80020f8:	f00b f81e 	bl	800d138 <nk_layout_row>
        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 80020fc:	2211      	movs	r2, #17
 80020fe:	494b      	ldr	r1, [pc, #300]	; (800222c <oscilloscope_process+0x514>)
 8002100:	4620      	mov	r0, r4
 8002102:	f010 feef 	bl	8012ee4 <nk_label>
        		nk_property_int(ctx, "", -100, &osc->horizontal_scale, 100, 1, 1);
 8002106:	2301      	movs	r3, #1
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2364      	movs	r3, #100	; 0x64
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002112:	f105 030c 	add.w	r3, r5, #12
 8002116:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800211a:	4945      	ldr	r1, [pc, #276]	; (8002230 <oscilloscope_process+0x518>)
 800211c:	4620      	mov	r0, r4
 800211e:	f00e f807 	bl	8010130 <nk_property_int>
                nk_tree_pop(ctx);
 8002122:	4620      	mov	r0, r4
 8002124:	f012 fc57 	bl	80149d6 <nk_tree_pop>
 8002128:	e649      	b.n	8001dbe <oscilloscope_process+0xa6>
                    if (nk_popup_begin(ctx, NK_POPUP_STATIC, "Keypad", NK_WINDOW_CLOSABLE | NK_WINDOW_NO_SCROLLBAR, keypad_size ) )
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <oscilloscope_process+0x51c>)
 800212c:	ed93 0a00 	vldr	s0, [r3]
 8002130:	edd3 0a01 	vldr	s1, [r3, #4]
 8002134:	ed93 1a02 	vldr	s2, [r3, #8]
 8002138:	edd3 1a03 	vldr	s3, [r3, #12]
 800213c:	2328      	movs	r3, #40	; 0x28
 800213e:	4a3e      	ldr	r2, [pc, #248]	; (8002238 <oscilloscope_process+0x520>)
 8002140:	2100      	movs	r1, #0
 8002142:	4620      	mov	r0, r4
 8002144:	f00c feba 	bl	800eebc <nk_popup_begin>
 8002148:	b918      	cbnz	r0, 8002152 <oscilloscope_process+0x43a>
                    } else show_app_about = nk_false;
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <oscilloscope_process+0x508>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e7b7      	b.n	80020c2 <oscilloscope_process+0x3aa>
                    	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){30+30+30+30});
 8002152:	4b35      	ldr	r3, [pc, #212]	; (8002228 <oscilloscope_process+0x510>)
 8002154:	9333      	str	r3, [sp, #204]	; 0xcc
 8002156:	ab33      	add	r3, sp, #204	; 0xcc
 8002158:	2201      	movs	r2, #1
 800215a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800215e:	4611      	mov	r1, r2
 8002160:	4620      	mov	r0, r4
 8002162:	f00a ffe9 	bl	800d138 <nk_layout_row>
                        nk_label(ctx, "0.00", NK_TEXT_RIGHT );
 8002166:	2214      	movs	r2, #20
 8002168:	4934      	ldr	r1, [pc, #208]	; (800223c <oscilloscope_process+0x524>)
 800216a:	4620      	mov	r0, r4
 800216c:	f010 feba 	bl	8012ee4 <nk_label>
                        nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){30, 30, 30, 30});
 8002170:	ae34      	add	r6, sp, #208	; 0xd0
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <oscilloscope_process+0x528>)
 8002174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002176:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800217a:	4633      	mov	r3, r6
 800217c:	2204      	movs	r2, #4
 800217e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002182:	2101      	movs	r1, #1
 8002184:	4620      	mov	r0, r4
 8002186:	f00a ffd7 	bl	800d138 <nk_layout_row>
                        nk_button_label( ctx, "7" );
 800218a:	492e      	ldr	r1, [pc, #184]	; (8002244 <oscilloscope_process+0x52c>)
 800218c:	4620      	mov	r0, r4
 800218e:	f007 fdc3 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "8" );
 8002192:	492d      	ldr	r1, [pc, #180]	; (8002248 <oscilloscope_process+0x530>)
 8002194:	4620      	mov	r0, r4
 8002196:	f007 fdbf 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "9" );
 800219a:	492c      	ldr	r1, [pc, #176]	; (800224c <oscilloscope_process+0x534>)
 800219c:	4620      	mov	r0, r4
 800219e:	f007 fdbb 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "k" );
 80021a2:	492b      	ldr	r1, [pc, #172]	; (8002250 <oscilloscope_process+0x538>)
 80021a4:	4620      	mov	r0, r4
 80021a6:	f007 fdb7 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "4" );
 80021aa:	492a      	ldr	r1, [pc, #168]	; (8002254 <oscilloscope_process+0x53c>)
 80021ac:	4620      	mov	r0, r4
 80021ae:	f007 fdb3 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "5" );
 80021b2:	4929      	ldr	r1, [pc, #164]	; (8002258 <oscilloscope_process+0x540>)
 80021b4:	4620      	mov	r0, r4
 80021b6:	f007 fdaf 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "6" );
 80021ba:	4928      	ldr	r1, [pc, #160]	; (800225c <oscilloscope_process+0x544>)
 80021bc:	4620      	mov	r0, r4
 80021be:	f007 fdab 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "m" );
 80021c2:	4927      	ldr	r1, [pc, #156]	; (8002260 <oscilloscope_process+0x548>)
 80021c4:	4620      	mov	r0, r4
 80021c6:	f007 fda7 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "1" );
 80021ca:	4926      	ldr	r1, [pc, #152]	; (8002264 <oscilloscope_process+0x54c>)
 80021cc:	4620      	mov	r0, r4
 80021ce:	f007 fda3 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "2" );
 80021d2:	4925      	ldr	r1, [pc, #148]	; (8002268 <oscilloscope_process+0x550>)
 80021d4:	4620      	mov	r0, r4
 80021d6:	f007 fd9f 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "3" );
 80021da:	4924      	ldr	r1, [pc, #144]	; (800226c <oscilloscope_process+0x554>)
 80021dc:	4620      	mov	r0, r4
 80021de:	f007 fd9b 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "u" );
 80021e2:	4923      	ldr	r1, [pc, #140]	; (8002270 <oscilloscope_process+0x558>)
 80021e4:	4620      	mov	r0, r4
 80021e6:	f007 fd97 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "C" );
 80021ea:	4922      	ldr	r1, [pc, #136]	; (8002274 <oscilloscope_process+0x55c>)
 80021ec:	4620      	mov	r0, r4
 80021ee:	f007 fd93 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "0" );
 80021f2:	4921      	ldr	r1, [pc, #132]	; (8002278 <oscilloscope_process+0x560>)
 80021f4:	4620      	mov	r0, r4
 80021f6:	f007 fd8f 	bl	8009d18 <nk_button_label>
                        nk_button_label( ctx, "." );
 80021fa:	4920      	ldr	r1, [pc, #128]	; (800227c <oscilloscope_process+0x564>)
 80021fc:	4620      	mov	r0, r4
 80021fe:	f007 fd8b 	bl	8009d18 <nk_button_label>
                        nk_button_symbol( ctx, NK_SYMBOL_X );
 8002202:	2101      	movs	r1, #1
 8002204:	4620      	mov	r0, r4
 8002206:	f007 fdf3 	bl	8009df0 <nk_button_symbol>
                        nk_popup_end(ctx);
 800220a:	4620      	mov	r0, r4
 800220c:	f00d f8ca 	bl	800f3a4 <nk_popup_end>
 8002210:	e757      	b.n	80020c2 <oscilloscope_process+0x3aa>
 8002212:	bf00      	nop
 8002214:	08019cd0 	.word	0x08019cd0
 8002218:	08019da4 	.word	0x08019da4
 800221c:	08019dac 	.word	0x08019dac
 8002220:	200115dc 	.word	0x200115dc
 8002224:	42700000 	.word	0x42700000
 8002228:	42f00000 	.word	0x42f00000
 800222c:	08019df8 	.word	0x08019df8
 8002230:	0801b11c 	.word	0x0801b11c
 8002234:	20000008 	.word	0x20000008
 8002238:	08019db4 	.word	0x08019db4
 800223c:	08019dbc 	.word	0x08019dbc
 8002240:	08019ce0 	.word	0x08019ce0
 8002244:	08019dc4 	.word	0x08019dc4
 8002248:	08019dc8 	.word	0x08019dc8
 800224c:	08019dcc 	.word	0x08019dcc
 8002250:	08019ebc 	.word	0x08019ebc
 8002254:	08019dd0 	.word	0x08019dd0
 8002258:	08019dd4 	.word	0x08019dd4
 800225c:	08019dd8 	.word	0x08019dd8
 8002260:	08019ddc 	.word	0x08019ddc
 8002264:	0801b464 	.word	0x0801b464
 8002268:	08019de0 	.word	0x08019de0
 800226c:	08019de4 	.word	0x08019de4
 8002270:	08019de8 	.word	0x08019de8
 8002274:	08019dec 	.word	0x08019dec
 8002278:	08019df0 	.word	0x08019df0
 800227c:	08019df4 	.word	0x08019df4
 8002280:	42bc0000 	.word	0x42bc0000
        		nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 8002284:	ed1f 8a02 	vldr	s16, [pc, #-8]	; 8002280 <oscilloscope_process+0x568>
 8002288:	ed8d 8a38 	vstr	s16, [sp, #224]	; 0xe0
 800228c:	ab38      	add	r3, sp, #224	; 0xe0
 800228e:	2201      	movs	r2, #1
 8002290:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002294:	4611      	mov	r1, r2
 8002296:	4620      	mov	r0, r4
 8002298:	f00a ff4e 	bl	800d138 <nk_layout_row>
        		osc->channel_selected = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->channel_selected, 30, nk_vec2(94, 160));
 800229c:	4e87      	ldr	r6, [pc, #540]	; (80024bc <oscilloscope_process+0x7a4>)
 800229e:	af39      	add	r7, sp, #228	; 0xe4
 80022a0:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80022a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80022aa:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80022ae:	eddf 0a84 	vldr	s1, [pc, #528]	; 80024c0 <oscilloscope_process+0x7a8>
 80022b2:	eeb0 0a48 	vmov.f32	s0, s16
 80022b6:	f00b fac7 	bl	800d848 <nk_vec2>
 80022ba:	ed8d 0a11 	vstr	s0, [sp, #68]	; 0x44
 80022be:	edcd 0a12 	vstr	s1, [sp, #72]	; 0x48
 80022c2:	f04f 091e 	mov.w	r9, #30
 80022c6:	f8cd 9000 	str.w	r9, [sp]
 80022ca:	4643      	mov	r3, r8
 80022cc:	2204      	movs	r2, #4
 80022ce:	4639      	mov	r1, r7
 80022d0:	4620      	mov	r0, r4
 80022d2:	f008 f89d 	bl	800a410 <nk_combo>
 80022d6:	6268      	str	r0, [r5, #36]	; 0x24
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 80022d8:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 80022dc:	ed8d 8a3e 	vstr	s16, [sp, #248]	; 0xf8
 80022e0:	ab3d      	add	r3, sp, #244	; 0xf4
 80022e2:	2202      	movs	r2, #2
 80022e4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80022e8:	2101      	movs	r1, #1
 80022ea:	4620      	mov	r0, r4
 80022ec:	f00a ff24 	bl	800d138 <nk_layout_row>
                osc->channels[osc->channel_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->channels[osc->channel_selected].enabled, 30, nk_vec2(94, 120));
 80022f0:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <oscilloscope_process+0x7ac>)
 80022f2:	933f      	str	r3, [sp, #252]	; 0xfc
 80022f4:	4b74      	ldr	r3, [pc, #464]	; (80024c8 <oscilloscope_process+0x7b0>)
 80022f6:	9340      	str	r3, [sp, #256]	; 0x100
 80022f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80022fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002302:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 8002306:	eddf 8a71 	vldr	s17, [pc, #452]	; 80024cc <oscilloscope_process+0x7b4>
 800230a:	eef0 0a68 	vmov.f32	s1, s17
 800230e:	eeb0 0a48 	vmov.f32	s0, s16
 8002312:	f00b fa99 	bl	800d848 <nk_vec2>
 8002316:	ed8d 0a13 	vstr	s0, [sp, #76]	; 0x4c
 800231a:	edcd 0a14 	vstr	s1, [sp, #80]	; 0x50
 800231e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8002320:	f8cd 9000 	str.w	r9, [sp]
 8002324:	4643      	mov	r3, r8
 8002326:	2202      	movs	r2, #2
 8002328:	a93f      	add	r1, sp, #252	; 0xfc
 800232a:	4620      	mov	r0, r4
 800232c:	f008 f870 	bl	800a410 <nk_combo>
 8002330:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002334:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8002338:	62b8      	str	r0, [r7, #40]	; 0x28
                osc->channels[osc->channel_selected].coupling = nk_combo(ctx, (const char*[]){"DC", "AC", "Gnd"}, 3, osc->channels[osc->channel_selected].coupling, 30, nk_vec2(94, 120));
 800233a:	f50d 7882 	add.w	r8, sp, #260	; 0x104
 800233e:	f106 0340 	add.w	r3, r6, #64	; 0x40
 8002342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002346:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800234a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800234c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002350:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002354:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
 8002358:	eef0 0a68 	vmov.f32	s1, s17
 800235c:	eeb0 0a48 	vmov.f32	s0, s16
 8002360:	f00b fa72 	bl	800d848 <nk_vec2>
 8002364:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
 8002368:	edcd 0a16 	vstr	s1, [sp, #88]	; 0x58
 800236c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800236e:	f8cd 9000 	str.w	r9, [sp]
 8002372:	4653      	mov	r3, sl
 8002374:	2203      	movs	r2, #3
 8002376:	4641      	mov	r1, r8
 8002378:	4620      	mov	r0, r4
 800237a:	f008 f849 	bl	800a410 <nk_combo>
 800237e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002382:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8002386:	62f8      	str	r0, [r7, #44]	; 0x2c
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002388:	af44      	add	r7, sp, #272	; 0x110
 800238a:	f106 0310 	add.w	r3, r6, #16
 800238e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002390:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8002394:	463b      	mov	r3, r7
 8002396:	2204      	movs	r2, #4
 8002398:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800239c:	2101      	movs	r1, #1
 800239e:	4620      	mov	r0, r4
 80023a0:	f00a feca 	bl	800d138 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80023a4:	2211      	movs	r2, #17
 80023a6:	494a      	ldr	r1, [pc, #296]	; (80024d0 <oscilloscope_process+0x7b8>)
 80023a8:	4620      	mov	r0, r4
 80023aa:	f010 fd9b 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80023ae:	2101      	movs	r1, #1
 80023b0:	4620      	mov	r0, r4
 80023b2:	f007 fc15 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80023b6:	2109      	movs	r1, #9
 80023b8:	4620      	mov	r0, r4
 80023ba:	f007 fd19 	bl	8009df0 <nk_button_symbol>
 80023be:	b160      	cbz	r0, 80023da <oscilloscope_process+0x6c2>
        			osc->channels[osc->channel_selected].offset -= 1;
 80023c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80023c6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80023ca:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80023ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023d6:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
        		sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].offset);
 80023da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80023e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_f2d>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4939      	ldr	r1, [pc, #228]	; (80024d4 <oscilloscope_process+0x7bc>)
 80023f0:	a805      	add	r0, sp, #20
 80023f2:	f014 fdf1 	bl	8016fd8 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 80023f6:	2212      	movs	r2, #18
 80023f8:	a905      	add	r1, sp, #20
 80023fa:	4620      	mov	r0, r4
 80023fc:	f010 fd72 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002400:	2101      	movs	r1, #1
 8002402:	4620      	mov	r0, r4
 8002404:	f007 fbec 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002408:	210a      	movs	r1, #10
 800240a:	4620      	mov	r0, r4
 800240c:	f007 fcf0 	bl	8009df0 <nk_button_symbol>
 8002410:	b160      	cbz	r0, 800242c <oscilloscope_process+0x714>
        			osc->channels[osc->channel_selected].offset += 1;
 8002412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002414:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002418:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800241c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8002420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002428:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 800242c:	2211      	movs	r2, #17
 800242e:	492a      	ldr	r1, [pc, #168]	; (80024d8 <oscilloscope_process+0x7c0>)
 8002430:	4620      	mov	r0, r4
 8002432:	f010 fd57 	bl	8012ee4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002436:	2101      	movs	r1, #1
 8002438:	4620      	mov	r0, r4
 800243a:	f007 fbd1 	bl	8009be0 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 800243e:	2109      	movs	r1, #9
 8002440:	4620      	mov	r0, r4
 8002442:	f007 fcd5 	bl	8009df0 <nk_button_symbol>
 8002446:	b160      	cbz	r0, 8002462 <oscilloscope_process+0x74a>
					osc->channels[osc->channel_selected].scale -= 1;
 8002448:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800244a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800244e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002452:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8002456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800245a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800245e:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
				sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].scale);
 8002462:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002468:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800246c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800246e:	f7fe f893 	bl	8000598 <__aeabi_f2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4917      	ldr	r1, [pc, #92]	; (80024d4 <oscilloscope_process+0x7bc>)
 8002478:	a805      	add	r0, sp, #20
 800247a:	f014 fdad 	bl	8016fd8 <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 800247e:	2212      	movs	r2, #18
 8002480:	a905      	add	r1, sp, #20
 8002482:	4620      	mov	r0, r4
 8002484:	f010 fd2e 	bl	8012ee4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002488:	2101      	movs	r1, #1
 800248a:	4620      	mov	r0, r4
 800248c:	f007 fba8 	bl	8009be0 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002490:	210a      	movs	r1, #10
 8002492:	4620      	mov	r0, r4
 8002494:	f007 fcac 	bl	8009df0 <nk_button_symbol>
 8002498:	b160      	cbz	r0, 80024b4 <oscilloscope_process+0x79c>
					osc->channels[osc->channel_selected].scale += 1;
 800249a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800249c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80024a0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80024a4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80024a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b0:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
                nk_tree_pop(ctx);
 80024b4:	4620      	mov	r0, r4
 80024b6:	f012 fa8e 	bl	80149d6 <nk_tree_pop>
 80024ba:	e492      	b.n	8001de2 <oscilloscope_process+0xca>
 80024bc:	08019cc0 	.word	0x08019cc0
 80024c0:	43200000 	.word	0x43200000
 80024c4:	08019e24 	.word	0x08019e24
 80024c8:	08019e28 	.word	0x08019e28
 80024cc:	42f00000 	.word	0x42f00000
 80024d0:	08019da4 	.word	0x08019da4
 80024d4:	08019dac 	.word	0x08019dac
 80024d8:	08019df8 	.word	0x08019df8
 80024dc:	42bc0000 	.word	0x42bc0000
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 80024e0:	ed1f 8a02 	vldr	s16, [pc, #-8]	; 80024dc <oscilloscope_process+0x7c4>
 80024e4:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 80024e8:	ab48      	add	r3, sp, #288	; 0x120
 80024ea:	2201      	movs	r2, #1
 80024ec:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80024f0:	4611      	mov	r1, r2
 80024f2:	4620      	mov	r0, r4
 80024f4:	f00a fe20 	bl	800d138 <nk_layout_row>
                osc->trigger_source = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->trigger_source, 30, nk_vec2(94, 160));
 80024f8:	4e53      	ldr	r6, [pc, #332]	; (8002648 <oscilloscope_process+0x930>)
 80024fa:	af49      	add	r7, sp, #292	; 0x124
 80024fc:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8002500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002502:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8002506:	f8d5 901c 	ldr.w	r9, [r5, #28]
 800250a:	eddf 0a50 	vldr	s1, [pc, #320]	; 800264c <oscilloscope_process+0x934>
 800250e:	eeb0 0a48 	vmov.f32	s0, s16
 8002512:	f00b f999 	bl	800d848 <nk_vec2>
 8002516:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
 800251a:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
 800251e:	f04f 081e 	mov.w	r8, #30
 8002522:	f8cd 8000 	str.w	r8, [sp]
 8002526:	464b      	mov	r3, r9
 8002528:	2204      	movs	r2, #4
 800252a:	4639      	mov	r1, r7
 800252c:	4620      	mov	r0, r4
 800252e:	f007 ff6f 	bl	800a410 <nk_combo>
 8002532:	61e8      	str	r0, [r5, #28]
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 8002534:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 8002538:	ed8d 8a4e 	vstr	s16, [sp, #312]	; 0x138
 800253c:	ab4d      	add	r3, sp, #308	; 0x134
 800253e:	2202      	movs	r2, #2
 8002540:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002544:	2101      	movs	r1, #1
 8002546:	4620      	mov	r0, r4
 8002548:	f00a fdf6 	bl	800d138 <nk_layout_row>
                osc->trigger_mode = nk_combo(ctx, (const char*[]){"Normal", "Auto"}, 2, osc->trigger_mode, 30, nk_vec2(94, 120));
 800254c:	4b40      	ldr	r3, [pc, #256]	; (8002650 <oscilloscope_process+0x938>)
 800254e:	934f      	str	r3, [sp, #316]	; 0x13c
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <oscilloscope_process+0x93c>)
 8002552:	9350      	str	r3, [sp, #320]	; 0x140
 8002554:	696f      	ldr	r7, [r5, #20]
 8002556:	eddf 8a40 	vldr	s17, [pc, #256]	; 8002658 <oscilloscope_process+0x940>
 800255a:	eef0 0a68 	vmov.f32	s1, s17
 800255e:	eeb0 0a48 	vmov.f32	s0, s16
 8002562:	f00b f971 	bl	800d848 <nk_vec2>
 8002566:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
 800256a:	edcd 0a1a 	vstr	s1, [sp, #104]	; 0x68
 800256e:	f8cd 8000 	str.w	r8, [sp]
 8002572:	463b      	mov	r3, r7
 8002574:	2202      	movs	r2, #2
 8002576:	a94f      	add	r1, sp, #316	; 0x13c
 8002578:	4620      	mov	r0, r4
 800257a:	f007 ff49 	bl	800a410 <nk_combo>
 800257e:	6168      	str	r0, [r5, #20]
                osc->trigger_slope = nk_combo(ctx, (const char*[]){"Rising", "Falling", "Both"}, 3, osc->trigger_slope, 30, nk_vec2(94, 120));
 8002580:	af51      	add	r7, sp, #324	; 0x144
 8002582:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8002586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800258a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800258e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8002592:	eef0 0a68 	vmov.f32	s1, s17
 8002596:	eeb0 0a48 	vmov.f32	s0, s16
 800259a:	f00b f955 	bl	800d848 <nk_vec2>
 800259e:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
 80025a2:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 80025a6:	f8cd 8000 	str.w	r8, [sp]
 80025aa:	464b      	mov	r3, r9
 80025ac:	2203      	movs	r2, #3
 80025ae:	4639      	mov	r1, r7
 80025b0:	4620      	mov	r0, r4
 80025b2:	f007 ff2d 	bl	800a410 <nk_combo>
 80025b6:	61a8      	str	r0, [r5, #24]
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80025b8:	af54      	add	r7, sp, #336	; 0x150
 80025ba:	f106 0310 	add.w	r3, r6, #16
 80025be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80025c4:	463b      	mov	r3, r7
 80025c6:	2204      	movs	r2, #4
 80025c8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80025cc:	2101      	movs	r1, #1
 80025ce:	4620      	mov	r0, r4
 80025d0:	f00a fdb2 	bl	800d138 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80025d4:	2211      	movs	r2, #17
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <oscilloscope_process+0x944>)
 80025d8:	4620      	mov	r0, r4
 80025da:	f010 fc83 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80025de:	2101      	movs	r1, #1
 80025e0:	4620      	mov	r0, r4
 80025e2:	f007 fafd 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80025e6:	2109      	movs	r1, #9
 80025e8:	4620      	mov	r0, r4
 80025ea:	f007 fc01 	bl	8009df0 <nk_button_symbol>
 80025ee:	b138      	cbz	r0, 8002600 <oscilloscope_process+0x8e8>
        			osc->trigger_offset -= 1;
 80025f0:	edd5 7a04 	vldr	s15, [r5, #16]
 80025f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025fc:	edc5 7a04 	vstr	s15, [r5, #16]
        		sprintf(combo_buffer, "%.2f", osc->trigger_offset);
 8002600:	6928      	ldr	r0, [r5, #16]
 8002602:	f7fd ffc9 	bl	8000598 <__aeabi_f2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4915      	ldr	r1, [pc, #84]	; (8002660 <oscilloscope_process+0x948>)
 800260c:	a805      	add	r0, sp, #20
 800260e:	f014 fce3 	bl	8016fd8 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002612:	2212      	movs	r2, #18
 8002614:	a905      	add	r1, sp, #20
 8002616:	4620      	mov	r0, r4
 8002618:	f010 fc64 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800261c:	2101      	movs	r1, #1
 800261e:	4620      	mov	r0, r4
 8002620:	f007 fade 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002624:	210a      	movs	r1, #10
 8002626:	4620      	mov	r0, r4
 8002628:	f007 fbe2 	bl	8009df0 <nk_button_symbol>
 800262c:	b138      	cbz	r0, 800263e <oscilloscope_process+0x926>
        			osc->trigger_offset += 1;
 800262e:	edd5 7a04 	vldr	s15, [r5, #16]
 8002632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002636:	ee77 7a87 	vadd.f32	s15, s15, s14
 800263a:	edc5 7a04 	vstr	s15, [r5, #16]
                nk_tree_pop(ctx);
 800263e:	4620      	mov	r0, r4
 8002640:	f012 f9c9 	bl	80149d6 <nk_tree_pop>
 8002644:	f7ff bbdf 	b.w	8001e06 <oscilloscope_process+0xee>
 8002648:	08019cc0 	.word	0x08019cc0
 800264c:	43200000 	.word	0x43200000
 8002650:	08019e4c 	.word	0x08019e4c
 8002654:	08019e54 	.word	0x08019e54
 8002658:	42f00000 	.word	0x42f00000
 800265c:	08019da4 	.word	0x08019da4
 8002660:	08019dac 	.word	0x08019dac
 8002664:	42bc0000 	.word	0x42bc0000
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 8002668:	ed1f 8a02 	vldr	s16, [pc, #-8]	; 8002664 <oscilloscope_process+0x94c>
 800266c:	ed8d 8a58 	vstr	s16, [sp, #352]	; 0x160
 8002670:	ab58      	add	r3, sp, #352	; 0x160
 8002672:	2201      	movs	r2, #1
 8002674:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002678:	4611      	mov	r1, r2
 800267a:	4620      	mov	r0, r4
 800267c:	f00a fd5c 	bl	800d138 <nk_layout_row>
                osc->waveform_selected = nk_combo(ctx, (const char*[]){"Wf1", "Wf2"}, WAVEFORM_COUNT, osc->waveform_selected, 30, nk_vec2(94, 80));
 8002680:	4baa      	ldr	r3, [pc, #680]	; (800292c <oscilloscope_process+0xc14>)
 8002682:	9359      	str	r3, [sp, #356]	; 0x164
 8002684:	4baa      	ldr	r3, [pc, #680]	; (8002930 <oscilloscope_process+0xc18>)
 8002686:	935a      	str	r3, [sp, #360]	; 0x168
 8002688:	6fae      	ldr	r6, [r5, #120]	; 0x78
 800268a:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8002934 <oscilloscope_process+0xc1c>
 800268e:	eeb0 0a48 	vmov.f32	s0, s16
 8002692:	f00b f8d9 	bl	800d848 <nk_vec2>
 8002696:	ed8d 0a1d 	vstr	s0, [sp, #116]	; 0x74
 800269a:	edcd 0a1e 	vstr	s1, [sp, #120]	; 0x78
 800269e:	f04f 091e 	mov.w	r9, #30
 80026a2:	f8cd 9000 	str.w	r9, [sp]
 80026a6:	4633      	mov	r3, r6
 80026a8:	2202      	movs	r2, #2
 80026aa:	a959      	add	r1, sp, #356	; 0x164
 80026ac:	4620      	mov	r0, r4
 80026ae:	f007 feaf 	bl	800a410 <nk_combo>
 80026b2:	67a8      	str	r0, [r5, #120]	; 0x78
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 80026b4:	ed8d 8a5b 	vstr	s16, [sp, #364]	; 0x16c
 80026b8:	ed8d 8a5c 	vstr	s16, [sp, #368]	; 0x170
 80026bc:	ab5b      	add	r3, sp, #364	; 0x16c
 80026be:	2202      	movs	r2, #2
 80026c0:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80026c4:	2101      	movs	r1, #1
 80026c6:	4620      	mov	r0, r4
 80026c8:	f00a fd36 	bl	800d138 <nk_layout_row>
                osc->waveforms[osc->waveform_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->waveforms[osc->waveform_selected].enabled, 30, nk_vec2(94, 200));
 80026cc:	4b9a      	ldr	r3, [pc, #616]	; (8002938 <oscilloscope_process+0xc20>)
 80026ce:	935d      	str	r3, [sp, #372]	; 0x174
 80026d0:	4b9a      	ldr	r3, [pc, #616]	; (800293c <oscilloscope_process+0xc24>)
 80026d2:	935e      	str	r3, [sp, #376]	; 0x178
 80026d4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80026d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026da:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80026de:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
 80026e0:	eddf 0a97 	vldr	s1, [pc, #604]	; 8002940 <oscilloscope_process+0xc28>
 80026e4:	eeb0 0a48 	vmov.f32	s0, s16
 80026e8:	f00b f8ae 	bl	800d848 <nk_vec2>
 80026ec:	ed8d 0a1f 	vstr	s0, [sp, #124]	; 0x7c
 80026f0:	edcd 0a20 	vstr	s1, [sp, #128]	; 0x80
 80026f4:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80026f6:	f8cd 9000 	str.w	r9, [sp]
 80026fa:	463b      	mov	r3, r7
 80026fc:	2202      	movs	r2, #2
 80026fe:	a95d      	add	r1, sp, #372	; 0x174
 8002700:	4620      	mov	r0, r4
 8002702:	f007 fe85 	bl	800a410 <nk_combo>
 8002706:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800270a:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800270e:	67f0      	str	r0, [r6, #124]	; 0x7c
                osc->waveforms[osc->waveform_selected].type = nk_combo(ctx, (const char*[]){"DC", "PWM", "Sine", "Tria", "Saw", "Noise"}, 6, osc->waveforms[osc->waveform_selected].type, 30, nk_vec2(94, 240));
 8002710:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8002958 <oscilloscope_process+0xc40>
 8002714:	ae5f      	add	r6, sp, #380	; 0x17c
 8002716:	f108 0758 	add.w	r7, r8, #88	; 0x58
 800271a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800271c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800271e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002722:	e886 0003 	stmia.w	r6, {r0, r1}
 8002726:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800272c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002730:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8002734:	eddf 0a83 	vldr	s1, [pc, #524]	; 8002944 <oscilloscope_process+0xc2c>
 8002738:	eeb0 0a48 	vmov.f32	s0, s16
 800273c:	f00b f884 	bl	800d848 <nk_vec2>
 8002740:	ed8d 0a21 	vstr	s0, [sp, #132]	; 0x84
 8002744:	edcd 0a22 	vstr	s1, [sp, #136]	; 0x88
 8002748:	6fae      	ldr	r6, [r5, #120]	; 0x78
 800274a:	f8cd 9000 	str.w	r9, [sp]
 800274e:	463b      	mov	r3, r7
 8002750:	2206      	movs	r2, #6
 8002752:	a95f      	add	r1, sp, #380	; 0x17c
 8002754:	4620      	mov	r0, r4
 8002756:	f007 fe5b 	bl	800a410 <nk_combo>
 800275a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800275e:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8002762:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002766:	ae65      	add	r6, sp, #404	; 0x194
 8002768:	f108 0310 	add.w	r3, r8, #16
 800276c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800276e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002772:	4633      	mov	r3, r6
 8002774:	2204      	movs	r2, #4
 8002776:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800277a:	2101      	movs	r1, #1
 800277c:	4620      	mov	r0, r4
 800277e:	f00a fcdb 	bl	800d138 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8002782:	2211      	movs	r2, #17
 8002784:	4970      	ldr	r1, [pc, #448]	; (8002948 <oscilloscope_process+0xc30>)
 8002786:	4620      	mov	r0, r4
 8002788:	f010 fbac 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800278c:	2101      	movs	r1, #1
 800278e:	4620      	mov	r0, r4
 8002790:	f007 fa26 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002794:	2109      	movs	r1, #9
 8002796:	4620      	mov	r0, r4
 8002798:	f007 fb2a 	bl	8009df0 <nk_button_symbol>
 800279c:	b160      	cbz	r0, 80027b8 <oscilloscope_process+0xaa0>
        			osc->waveforms[osc->waveform_selected].offset -= 1;
 800279e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80027a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80027a4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80027a8:	edd2 7a21 	vldr	s15, [r2, #132]	; 0x84
 80027ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b4:	edc2 7a21 	vstr	s15, [r2, #132]	; 0x84
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].offset);
 80027b8:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80027ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027be:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80027c2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80027c6:	f7fd fee7 	bl	8000598 <__aeabi_f2d>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	495f      	ldr	r1, [pc, #380]	; (800294c <oscilloscope_process+0xc34>)
 80027d0:	a805      	add	r0, sp, #20
 80027d2:	f014 fc01 	bl	8016fd8 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 80027d6:	2212      	movs	r2, #18
 80027d8:	a905      	add	r1, sp, #20
 80027da:	4620      	mov	r0, r4
 80027dc:	f010 fb82 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80027e0:	2101      	movs	r1, #1
 80027e2:	4620      	mov	r0, r4
 80027e4:	f007 f9fc 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80027e8:	210a      	movs	r1, #10
 80027ea:	4620      	mov	r0, r4
 80027ec:	f007 fb00 	bl	8009df0 <nk_button_symbol>
 80027f0:	b160      	cbz	r0, 800280c <oscilloscope_process+0xaf4>
        			osc->waveforms[osc->waveform_selected].offset += 1;
 80027f2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80027f4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80027f8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80027fc:	edd2 7a21 	vldr	s15, [r2, #132]	; 0x84
 8002800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002808:	edc2 7a21 	vstr	s15, [r2, #132]	; 0x84
        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 800280c:	2211      	movs	r2, #17
 800280e:	4950      	ldr	r1, [pc, #320]	; (8002950 <oscilloscope_process+0xc38>)
 8002810:	4620      	mov	r0, r4
 8002812:	f010 fb67 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002816:	2101      	movs	r1, #1
 8002818:	4620      	mov	r0, r4
 800281a:	f007 f9e1 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 800281e:	2109      	movs	r1, #9
 8002820:	4620      	mov	r0, r4
 8002822:	f007 fae5 	bl	8009df0 <nk_button_symbol>
 8002826:	b160      	cbz	r0, 8002842 <oscilloscope_process+0xb2a>
        			osc->waveforms[osc->waveform_selected].scale -= 1;
 8002828:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800282a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800282e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002832:	edd2 7a22 	vldr	s15, [r2, #136]	; 0x88
 8002836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800283a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800283e:	edc2 7a22 	vstr	s15, [r2, #136]	; 0x88
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].scale);
 8002842:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002848:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800284c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002850:	f7fd fea2 	bl	8000598 <__aeabi_f2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	493c      	ldr	r1, [pc, #240]	; (800294c <oscilloscope_process+0xc34>)
 800285a:	a805      	add	r0, sp, #20
 800285c:	f014 fbbc 	bl	8016fd8 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002860:	2212      	movs	r2, #18
 8002862:	a905      	add	r1, sp, #20
 8002864:	4620      	mov	r0, r4
 8002866:	f010 fb3d 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800286a:	2101      	movs	r1, #1
 800286c:	4620      	mov	r0, r4
 800286e:	f007 f9b7 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002872:	210a      	movs	r1, #10
 8002874:	4620      	mov	r0, r4
 8002876:	f007 fabb 	bl	8009df0 <nk_button_symbol>
 800287a:	b160      	cbz	r0, 8002896 <oscilloscope_process+0xb7e>
        			osc->waveforms[osc->waveform_selected].scale += 1;
 800287c:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800287e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002882:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002886:	edd2 7a22 	vldr	s15, [r2, #136]	; 0x88
 800288a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800288e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002892:	edc2 7a22 	vstr	s15, [r2, #136]	; 0x88
        		nk_label( ctx, "Duty", NK_TEXT_LEFT );
 8002896:	2211      	movs	r2, #17
 8002898:	492e      	ldr	r1, [pc, #184]	; (8002954 <oscilloscope_process+0xc3c>)
 800289a:	4620      	mov	r0, r4
 800289c:	f010 fb22 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80028a0:	2101      	movs	r1, #1
 80028a2:	4620      	mov	r0, r4
 80028a4:	f007 f99c 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80028a8:	2109      	movs	r1, #9
 80028aa:	4620      	mov	r0, r4
 80028ac:	f007 faa0 	bl	8009df0 <nk_button_symbol>
 80028b0:	b160      	cbz	r0, 80028cc <oscilloscope_process+0xbb4>
        			osc->waveforms[osc->waveform_selected].duty_cycle -= 1;
 80028b2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80028b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80028b8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80028bc:	edd2 7a23 	vldr	s15, [r2, #140]	; 0x8c
 80028c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c8:	edc2 7a23 	vstr	s15, [r2, #140]	; 0x8c
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].duty_cycle);
 80028cc:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80028ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80028d2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80028d6:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 80028da:	f7fd fe5d 	bl	8000598 <__aeabi_f2d>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	491a      	ldr	r1, [pc, #104]	; (800294c <oscilloscope_process+0xc34>)
 80028e4:	a805      	add	r0, sp, #20
 80028e6:	f014 fb77 	bl	8016fd8 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 80028ea:	2212      	movs	r2, #18
 80028ec:	a905      	add	r1, sp, #20
 80028ee:	4620      	mov	r0, r4
 80028f0:	f010 faf8 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80028f4:	2101      	movs	r1, #1
 80028f6:	4620      	mov	r0, r4
 80028f8:	f007 f972 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80028fc:	210a      	movs	r1, #10
 80028fe:	4620      	mov	r0, r4
 8002900:	f007 fa76 	bl	8009df0 <nk_button_symbol>
 8002904:	b160      	cbz	r0, 8002920 <oscilloscope_process+0xc08>
        			osc->waveforms[osc->waveform_selected].duty_cycle += 1;
 8002906:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002908:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800290c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002910:	edd2 7a23 	vldr	s15, [r2, #140]	; 0x8c
 8002914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800291c:	edc2 7a23 	vstr	s15, [r2, #140]	; 0x8c
                nk_tree_pop(ctx);
 8002920:	4620      	mov	r0, r4
 8002922:	f012 f858 	bl	80149d6 <nk_tree_pop>
 8002926:	f7ff ba80 	b.w	8001e2a <oscilloscope_process+0x112>
 800292a:	bf00      	nop
 800292c:	08019e80 	.word	0x08019e80
 8002930:	08019e84 	.word	0x08019e84
 8002934:	42a00000 	.word	0x42a00000
 8002938:	08019e24 	.word	0x08019e24
 800293c:	08019e28 	.word	0x08019e28
 8002940:	43480000 	.word	0x43480000
 8002944:	43700000 	.word	0x43700000
 8002948:	08019da4 	.word	0x08019da4
 800294c:	08019dac 	.word	0x08019dac
 8002950:	08019df8 	.word	0x08019df8
 8002954:	08019e88 	.word	0x08019e88
 8002958:	08019cc0 	.word	0x08019cc0
 800295c:	42bc0000 	.word	0x42bc0000
				nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 8002960:	ed1f 8a02 	vldr	s16, [pc, #-8]	; 800295c <oscilloscope_process+0xc44>
 8002964:	ed8d 8a69 	vstr	s16, [sp, #420]	; 0x1a4
 8002968:	ab69      	add	r3, sp, #420	; 0x1a4
 800296a:	2201      	movs	r2, #1
 800296c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002970:	4611      	mov	r1, r2
 8002972:	4620      	mov	r0, r4
 8002974:	f00a fbe0 	bl	800d138 <nk_layout_row>
                osc->cursor_selected = nk_combo(ctx, (const char*[]){"C1", "C2"}, CURSOR_COUNT, osc->cursor_selected, 20, nk_vec2(94, 100));
 8002978:	4b8f      	ldr	r3, [pc, #572]	; (8002bb8 <oscilloscope_process+0xea0>)
 800297a:	936a      	str	r3, [sp, #424]	; 0x1a8
 800297c:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <oscilloscope_process+0xea4>)
 800297e:	936b      	str	r3, [sp, #428]	; 0x1ac
 8002980:	f8d5 60ac 	ldr.w	r6, [r5, #172]	; 0xac
 8002984:	eddf 8a8e 	vldr	s17, [pc, #568]	; 8002bc0 <oscilloscope_process+0xea8>
 8002988:	eef0 0a68 	vmov.f32	s1, s17
 800298c:	eeb0 0a48 	vmov.f32	s0, s16
 8002990:	f00a ff5a 	bl	800d848 <nk_vec2>
 8002994:	ed8d 0a23 	vstr	s0, [sp, #140]	; 0x8c
 8002998:	edcd 0a24 	vstr	s1, [sp, #144]	; 0x90
 800299c:	2314      	movs	r3, #20
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4633      	mov	r3, r6
 80029a2:	2202      	movs	r2, #2
 80029a4:	a96a      	add	r1, sp, #424	; 0x1a8
 80029a6:	4620      	mov	r0, r4
 80029a8:	f007 fd32 	bl	800a410 <nk_combo>
 80029ac:	f8c5 00ac 	str.w	r0, [r5, #172]	; 0xac
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 80029b0:	ed8d 8a6c 	vstr	s16, [sp, #432]	; 0x1b0
 80029b4:	ed8d 8a6d 	vstr	s16, [sp, #436]	; 0x1b4
 80029b8:	ab6c      	add	r3, sp, #432	; 0x1b0
 80029ba:	2202      	movs	r2, #2
 80029bc:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80029c0:	2101      	movs	r1, #1
 80029c2:	4620      	mov	r0, r4
 80029c4:	f00a fbb8 	bl	800d138 <nk_layout_row>
                osc->cursors[osc->cursor_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->cursors[osc->cursor_selected].enabled, 30, nk_vec2(94, 100));
 80029c8:	4b7e      	ldr	r3, [pc, #504]	; (8002bc4 <oscilloscope_process+0xeac>)
 80029ca:	936e      	str	r3, [sp, #440]	; 0x1b8
 80029cc:	4b7e      	ldr	r3, [pc, #504]	; (8002bc8 <oscilloscope_process+0xeb0>)
 80029ce:	936f      	str	r3, [sp, #444]	; 0x1bc
 80029d0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80029d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80029dc:	f8d3 80b0 	ldr.w	r8, [r3, #176]	; 0xb0
 80029e0:	eef0 0a68 	vmov.f32	s1, s17
 80029e4:	eeb0 0a48 	vmov.f32	s0, s16
 80029e8:	f00a ff2e 	bl	800d848 <nk_vec2>
 80029ec:	ed8d 0a25 	vstr	s0, [sp, #148]	; 0x94
 80029f0:	edcd 0a26 	vstr	s1, [sp, #152]	; 0x98
 80029f4:	f8d5 60ac 	ldr.w	r6, [r5, #172]	; 0xac
 80029f8:	271e      	movs	r7, #30
 80029fa:	9700      	str	r7, [sp, #0]
 80029fc:	4643      	mov	r3, r8
 80029fe:	2202      	movs	r2, #2
 8002a00:	a96e      	add	r1, sp, #440	; 0x1b8
 8002a02:	4620      	mov	r0, r4
 8002a04:	f007 fd04 	bl	800a410 <nk_combo>
 8002a08:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002a0c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8002a10:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
                osc->cursors[osc->cursor_selected].horizontal = nk_combo(ctx, (const char*[]){"Track", "Free"}, 2, osc->cursors[osc->cursor_selected].horizontal, 30, nk_vec2(94, 100));
 8002a14:	4b6d      	ldr	r3, [pc, #436]	; (8002bcc <oscilloscope_process+0xeb4>)
 8002a16:	9370      	str	r3, [sp, #448]	; 0x1c0
 8002a18:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <oscilloscope_process+0xeb8>)
 8002a1a:	9371      	str	r3, [sp, #452]	; 0x1c4
 8002a1c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002a28:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
 8002a2c:	eef0 0a68 	vmov.f32	s1, s17
 8002a30:	eeb0 0a48 	vmov.f32	s0, s16
 8002a34:	f00a ff08 	bl	800d848 <nk_vec2>
 8002a38:	ed8d 0a27 	vstr	s0, [sp, #156]	; 0x9c
 8002a3c:	edcd 0a28 	vstr	s1, [sp, #160]	; 0xa0
 8002a40:	f8d5 60ac 	ldr.w	r6, [r5, #172]	; 0xac
 8002a44:	9700      	str	r7, [sp, #0]
 8002a46:	4643      	mov	r3, r8
 8002a48:	2202      	movs	r2, #2
 8002a4a:	a970      	add	r1, sp, #448	; 0x1c0
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f007 fcdf 	bl	800a410 <nk_combo>
 8002a52:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002a56:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8002a5a:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002a5e:	ae72      	add	r6, sp, #456	; 0x1c8
 8002a60:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <oscilloscope_process+0xebc>)
 8002a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a64:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002a68:	4633      	mov	r3, r6
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002a70:	2101      	movs	r1, #1
 8002a72:	4620      	mov	r0, r4
 8002a74:	f00a fb60 	bl	800d138 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8002a78:	2211      	movs	r2, #17
 8002a7a:	4957      	ldr	r1, [pc, #348]	; (8002bd8 <oscilloscope_process+0xec0>)
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f010 fa31 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002a82:	2101      	movs	r1, #1
 8002a84:	4620      	mov	r0, r4
 8002a86:	f007 f8ab 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002a8a:	2109      	movs	r1, #9
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f007 f9af 	bl	8009df0 <nk_button_symbol>
 8002a92:	b168      	cbz	r0, 8002ab0 <oscilloscope_process+0xd98>
        			osc->cursors[osc->cursor_selected].offset -= 1;
 8002a94:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002a98:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002a9c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002aa0:	edd2 7a2e 	vldr	s15, [r2, #184]	; 0xb8
 8002aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aac:	edc2 7a2e 	vstr	s15, [r2, #184]	; 0xb8
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].offset);
 8002ab0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002ab4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ab8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002abc:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002ac0:	f7fd fd6a 	bl	8000598 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4944      	ldr	r1, [pc, #272]	; (8002bdc <oscilloscope_process+0xec4>)
 8002aca:	a805      	add	r0, sp, #20
 8002acc:	f014 fa84 	bl	8016fd8 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002ad0:	2212      	movs	r2, #18
 8002ad2:	a905      	add	r1, sp, #20
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f010 fa05 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002ada:	2101      	movs	r1, #1
 8002adc:	4620      	mov	r0, r4
 8002ade:	f007 f87f 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002ae2:	210a      	movs	r1, #10
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f007 f983 	bl	8009df0 <nk_button_symbol>
 8002aea:	b168      	cbz	r0, 8002b08 <oscilloscope_process+0xdf0>
        			osc->cursors[osc->cursor_selected].offset += 1;
 8002aec:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002af0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002af4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002af8:	edd2 7a2e 	vldr	s15, [r2, #184]	; 0xb8
 8002afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b04:	edc2 7a2e 	vstr	s15, [r2, #184]	; 0xb8
        		nk_label( ctx, "Track", NK_TEXT_LEFT );
 8002b08:	2211      	movs	r2, #17
 8002b0a:	4930      	ldr	r1, [pc, #192]	; (8002bcc <oscilloscope_process+0xeb4>)
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f010 f9e9 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002b12:	2101      	movs	r1, #1
 8002b14:	4620      	mov	r0, r4
 8002b16:	f007 f863 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002b1a:	2109      	movs	r1, #9
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f007 f967 	bl	8009df0 <nk_button_symbol>
 8002b22:	b168      	cbz	r0, 8002b40 <oscilloscope_process+0xe28>
        			osc->cursors[osc->cursor_selected].track -= 1;
 8002b24:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002b28:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002b2c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002b30:	edd2 7a2f 	vldr	s15, [r2, #188]	; 0xbc
 8002b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b3c:	edc2 7a2f 	vstr	s15, [r2, #188]	; 0xbc
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].track);
 8002b40:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002b4c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002b50:	f7fd fd22 	bl	8000598 <__aeabi_f2d>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4920      	ldr	r1, [pc, #128]	; (8002bdc <oscilloscope_process+0xec4>)
 8002b5a:	a805      	add	r0, sp, #20
 8002b5c:	f014 fa3c 	bl	8016fd8 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002b60:	2212      	movs	r2, #18
 8002b62:	a905      	add	r1, sp, #20
 8002b64:	4620      	mov	r0, r4
 8002b66:	f010 f9bd 	bl	8012ee4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f007 f837 	bl	8009be0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002b72:	210a      	movs	r1, #10
 8002b74:	4620      	mov	r0, r4
 8002b76:	f007 f93b 	bl	8009df0 <nk_button_symbol>
 8002b7a:	b168      	cbz	r0, 8002b98 <oscilloscope_process+0xe80>
        			osc->cursors[osc->cursor_selected].track += 1;
 8002b7c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002b80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002b84:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002b88:	edd2 7a2f 	vldr	s15, [r2, #188]	; 0xbc
 8002b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b94:	edc2 7a2f 	vstr	s15, [r2, #188]	; 0xbc
                nk_tree_pop(ctx);
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f011 ff1c 	bl	80149d6 <nk_tree_pop>
 8002b9e:	f7ff b956 	b.w	8001e4e <oscilloscope_process+0x136>
                nk_label(ctx, "Todo", NK_TEXT_LEFT);
 8002ba2:	2211      	movs	r2, #17
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <oscilloscope_process+0xec8>)
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f010 f99c 	bl	8012ee4 <nk_label>
                nk_tree_pop(ctx);
 8002bac:	4620      	mov	r0, r4
 8002bae:	f011 ff12 	bl	80149d6 <nk_tree_pop>
 8002bb2:	f7ff b95e 	b.w	8001e72 <oscilloscope_process+0x15a>
 8002bb6:	bf00      	nop
 8002bb8:	08019eb0 	.word	0x08019eb0
 8002bbc:	08019eb4 	.word	0x08019eb4
 8002bc0:	42c80000 	.word	0x42c80000
 8002bc4:	08019e24 	.word	0x08019e24
 8002bc8:	08019e28 	.word	0x08019e28
 8002bcc:	08019eb8 	.word	0x08019eb8
 8002bd0:	08019ec0 	.word	0x08019ec0
 8002bd4:	08019cd0 	.word	0x08019cd0
 8002bd8:	08019da4 	.word	0x08019da4
 8002bdc:	08019dac 	.word	0x08019dac
 8002be0:	08019ef0 	.word	0x08019ef0

08002be4 <nk_draw_fb>:


int tmp = 0;
int quadrant = 0x01;
void nk_draw_fb( struct nk_context *ctx, tFramebuf *pfb )
{
 8002be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be8:	b087      	sub	sp, #28
 8002bea:	4607      	mov	r7, r0
 8002bec:	460e      	mov	r6, r1
	  for( int y0 = 0 ; y0 < 320 ; y0 += pfb->height )
 8002bee:	2500      	movs	r5, #0
	  {
	   framebuf_fill( pfb, 0x00000000 );
 8002bf0:	46a9      	mov	r9, r5
 8002bf2:	e237      	b.n	8003064 <nk_draw_fb+0x480>
			  case NK_COMMAND_SCISSOR: {
				  const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;
			  } break;
			  case NK_COMMAND_LINE: {
				  const struct nk_command_line *l = (const struct nk_command_line*)cmd;
				  if( l->begin.y == l->end.y )
 8002bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf8:	f9b4 8010 	ldrsh.w	r8, [r4, #16]
 8002bfc:	4543      	cmp	r3, r8
 8002bfe:	d017      	beq.n	8002c30 <nk_draw_fb+0x4c>
				  {
					  framebuf_hline( pfb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
				  }
				  else if( l->begin.x == l->end.x )
 8002c00:	f9b4 a00a 	ldrsh.w	sl, [r4, #10]
 8002c04:	f9b4 b00e 	ldrsh.w	fp, [r4, #14]
 8002c08:	45da      	cmp	sl, fp
 8002c0a:	d025      	beq.n	8002c58 <nk_draw_fb+0x74>
				  {
					  framebuf_vline( pfb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
				  }
				  else
				  {
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
 8002c0c:	1b5b      	subs	r3, r3, r5
 8002c0e:	9303      	str	r3, [sp, #12]
 8002c10:	eba8 0805 	sub.w	r8, r8, r5
 8002c14:	f8d4 0012 	ldr.w	r0, [r4, #18]
 8002c18:	f7fe fd52 	bl	80016c0 <nk_colot_to_rgb666>
 8002c1c:	9001      	str	r0, [sp, #4]
 8002c1e:	f8cd 8000 	str.w	r8, [sp]
 8002c22:	465b      	mov	r3, fp
 8002c24:	9a03      	ldr	r2, [sp, #12]
 8002c26:	4651      	mov	r1, sl
 8002c28:	4630      	mov	r0, r6
 8002c2a:	f006 f919 	bl	8008e60 <framebuf_line>
 8002c2e:	e0b6      	b.n	8002d9e <nk_draw_fb+0x1ba>
					  framebuf_hline( pfb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
 8002c30:	f9b4 a00a 	ldrsh.w	sl, [r4, #10]
 8002c34:	eba3 0b05 	sub.w	fp, r3, r5
 8002c38:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 8002c3c:	eba8 080a 	sub.w	r8, r8, sl
 8002c40:	f8d4 0012 	ldr.w	r0, [r4, #18]
 8002c44:	f7fe fd3c 	bl	80016c0 <nk_colot_to_rgb666>
 8002c48:	9000      	str	r0, [sp, #0]
 8002c4a:	4643      	mov	r3, r8
 8002c4c:	465a      	mov	r2, fp
 8002c4e:	4651      	mov	r1, sl
 8002c50:	4630      	mov	r0, r6
 8002c52:	f006 f85e 	bl	8008d12 <framebuf_hline>
 8002c56:	e0a2      	b.n	8002d9e <nk_draw_fb+0x1ba>
					  framebuf_vline( pfb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
 8002c58:	eba3 0b05 	sub.w	fp, r3, r5
 8002c5c:	eba8 0803 	sub.w	r8, r8, r3
 8002c60:	f8d4 0012 	ldr.w	r0, [r4, #18]
 8002c64:	f7fe fd2c 	bl	80016c0 <nk_colot_to_rgb666>
 8002c68:	9000      	str	r0, [sp, #0]
 8002c6a:	4643      	mov	r3, r8
 8002c6c:	465a      	mov	r2, fp
 8002c6e:	4651      	mov	r1, sl
 8002c70:	4630      	mov	r0, r6
 8002c72:	f006 f858 	bl	8008d26 <framebuf_vline>
 8002c76:	e092      	b.n	8002d9e <nk_draw_fb+0x1ba>
			  case NK_COMMAND_RECT: {
				  const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;
				  //printf( "NK_COMMAND_RECT x: %d, y: %d, width: %d, height: %d, rounding: %d, thickness: %d\n", r->x, r->y, r->w, r->h, r->rounding, r->line_thickness );
				  //framebuf_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
				  int rad = 4;//r->rounding;
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_0 );
 8002c78:	6960      	ldr	r0, [r4, #20]
 8002c7a:	f7fe fd21 	bl	80016c0 <nk_colot_to_rgb666>
 8002c7e:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002c82:	1b52      	subs	r2, r2, r5
 8002c84:	8a63      	ldrh	r3, [r4, #18]
 8002c86:	441a      	add	r2, r3
 8002c88:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002c8c:	8a23      	ldrh	r3, [r4, #16]
 8002c8e:	4419      	add	r1, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	9000      	str	r0, [sp, #0]
 8002c96:	2304      	movs	r3, #4
 8002c98:	3a04      	subs	r2, #4
 8002c9a:	3904      	subs	r1, #4
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f006 f952 	bl	8008f46 <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_90 );
 8002ca2:	6960      	ldr	r0, [r4, #20]
 8002ca4:	f7fe fd0c 	bl	80016c0 <nk_colot_to_rgb666>
 8002ca8:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002cac:	1b52      	subs	r2, r2, r5
 8002cae:	8a63      	ldrh	r3, [r4, #18]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	3a04      	subs	r2, #4
 8002cc0:	4419      	add	r1, r3
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f006 f93f 	bl	8008f46 <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_180 );
 8002cc8:	6960      	ldr	r0, [r4, #20]
 8002cca:	f7fe fcf9 	bl	80016c0 <nk_colot_to_rgb666>
 8002cce:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002cd2:	1b52      	subs	r2, r2, r5
 8002cd4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002cd8:	f04f 0804 	mov.w	r8, #4
 8002cdc:	f8cd 8004 	str.w	r8, [sp, #4]
 8002ce0:	9000      	str	r0, [sp, #0]
 8002ce2:	4643      	mov	r3, r8
 8002ce4:	4442      	add	r2, r8
 8002ce6:	4441      	add	r1, r8
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f006 f92c 	bl	8008f46 <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_270 );
 8002cee:	6960      	ldr	r0, [r4, #20]
 8002cf0:	f7fe fce6 	bl	80016c0 <nk_colot_to_rgb666>
 8002cf4:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002cf8:	1b52      	subs	r2, r2, r5
 8002cfa:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002cfe:	8a23      	ldrh	r3, [r4, #16]
 8002d00:	4419      	add	r1, r3
 8002d02:	2308      	movs	r3, #8
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	9000      	str	r0, [sp, #0]
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4442      	add	r2, r8
 8002d0c:	3904      	subs	r1, #4
 8002d0e:	4630      	mov	r0, r6
 8002d10:	f006 f919 	bl	8008f46 <framebuf_circle_quadrant>

                    framebuf_hline( pfb, r->x+rad, r->y-y0, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8002d14:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 8002d18:	eba8 0805 	sub.w	r8, r8, r5
 8002d1c:	6960      	ldr	r0, [r4, #20]
 8002d1e:	f7fe fccf 	bl	80016c0 <nk_colot_to_rgb666>
 8002d22:	8a23      	ldrh	r3, [r4, #16]
 8002d24:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002d28:	9000      	str	r0, [sp, #0]
 8002d2a:	3b08      	subs	r3, #8
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	3104      	adds	r1, #4
 8002d30:	4630      	mov	r0, r6
 8002d32:	f005 ffee 	bl	8008d12 <framebuf_hline>
                    framebuf_hline( pfb, r->x+rad, r->y-y0+r->h, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8002d36:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 8002d3a:	eba8 0805 	sub.w	r8, r8, r5
 8002d3e:	8a63      	ldrh	r3, [r4, #18]
 8002d40:	4498      	add	r8, r3
 8002d42:	6960      	ldr	r0, [r4, #20]
 8002d44:	f7fe fcbc 	bl	80016c0 <nk_colot_to_rgb666>
 8002d48:	8a23      	ldrh	r3, [r4, #16]
 8002d4a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002d4e:	9000      	str	r0, [sp, #0]
 8002d50:	3b08      	subs	r3, #8
 8002d52:	4642      	mov	r2, r8
 8002d54:	3104      	adds	r1, #4
 8002d56:	4630      	mov	r0, r6
 8002d58:	f005 ffdb 	bl	8008d12 <framebuf_hline>
                    framebuf_vline( pfb, r->x, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 8002d5c:	6960      	ldr	r0, [r4, #20]
 8002d5e:	f7fe fcaf 	bl	80016c0 <nk_colot_to_rgb666>
 8002d62:	8a63      	ldrh	r3, [r4, #18]
 8002d64:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002d68:	1b52      	subs	r2, r2, r5
 8002d6a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002d6e:	9000      	str	r0, [sp, #0]
 8002d70:	3b08      	subs	r3, #8
 8002d72:	3204      	adds	r2, #4
 8002d74:	4630      	mov	r0, r6
 8002d76:	f005 ffd6 	bl	8008d26 <framebuf_vline>
                    framebuf_vline( pfb, r->x+r->w, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 8002d7a:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 8002d7e:	8a23      	ldrh	r3, [r4, #16]
 8002d80:	4498      	add	r8, r3
 8002d82:	6960      	ldr	r0, [r4, #20]
 8002d84:	f7fe fc9c 	bl	80016c0 <nk_colot_to_rgb666>
 8002d88:	8a63      	ldrh	r3, [r4, #18]
 8002d8a:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002d8e:	1b52      	subs	r2, r2, r5
 8002d90:	9000      	str	r0, [sp, #0]
 8002d92:	3b08      	subs	r3, #8
 8002d94:	3204      	adds	r2, #4
 8002d96:	4641      	mov	r1, r8
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f005 ffc4 	bl	8008d26 <framebuf_vline>
		  nk_foreach(cmd, ctx)
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4638      	mov	r0, r7
 8002da2:	f007 fe99 	bl	800aad8 <nk__next>
 8002da6:	4604      	mov	r4, r0
 8002da8:	2800      	cmp	r0, #0
 8002daa:	f000 814c 	beq.w	8003046 <nk_draw_fb+0x462>
			  switch (cmd->type) {
 8002dae:	7823      	ldrb	r3, [r4, #0]
 8002db0:	3b02      	subs	r3, #2
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	d8f3      	bhi.n	8002d9e <nk_draw_fb+0x1ba>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <nk_draw_fb+0x1d8>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002bf5 	.word	0x08002bf5
 8002dc0:	08002d9f 	.word	0x08002d9f
 8002dc4:	08002c79 	.word	0x08002c79
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002d9f 	.word	0x08002d9f
 8002dd0:	08002f41 	.word	0x08002f41
 8002dd4:	08002f77 	.word	0x08002f77
 8002dd8:	08002d9f 	.word	0x08002d9f
 8002ddc:	08002d9f 	.word	0x08002d9f
 8002de0:	08002d9f 	.word	0x08002d9f
 8002de4:	08002fe1 	.word	0x08002fe1
 8002de8:	08002d9f 	.word	0x08002d9f
 8002dec:	08002d9f 	.word	0x08002d9f
 8002df0:	08002d9f 	.word	0x08002d9f
 8002df4:	08002fab 	.word	0x08002fab
 8002df8:	08002fc5 	.word	0x08002fc5
			  } break;
			  case NK_COMMAND_RECT_FILLED: {
				  const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;
				  //framebuf_fill_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
                  int rad = 4;//r->rounding;
                  struct nk_color r_color = r->color;
 8002dfc:	f8d4 0012 	ldr.w	r0, [r4, #18]
 8002e00:	9005      	str	r0, [sp, #20]
 8002e02:	7ca3      	ldrb	r3, [r4, #18]
                  if( r_color.r == 50 )
 8002e04:	2b32      	cmp	r3, #50	; 0x32
 8002e06:	f000 8090 	beq.w	8002f2a <nk_draw_fb+0x346>
                	  r_color.r = 40;
                	  r_color.g = 40;
                	  r_color.b = 40;
                	  r_color.a = 255;
                  }
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8002e0a:	f9b4 a00a 	ldrsh.w	sl, [r4, #10]
 8002e0e:	89e2      	ldrh	r2, [r4, #14]
 8002e10:	4492      	add	sl, r2
 8002e12:	f1aa 0a04 	sub.w	sl, sl, #4
 8002e16:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 8002e1a:	eba8 0805 	sub.w	r8, r8, r5
 8002e1e:	8a22      	ldrh	r2, [r4, #16]
 8002e20:	4490      	add	r8, r2
 8002e22:	f1a8 0804 	sub.w	r8, r8, #4
 8002e26:	f88d 3014 	strb.w	r3, [sp, #20]
 8002e2a:	9805      	ldr	r0, [sp, #20]
 8002e2c:	f7fe fc48 	bl	80016c0 <nk_colot_to_rgb666>
 8002e30:	f04f 0b02 	mov.w	fp, #2
 8002e34:	f8cd b004 	str.w	fp, [sp, #4]
 8002e38:	9000      	str	r0, [sp, #0]
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	4651      	mov	r1, sl
 8002e40:	4630      	mov	r0, r6
 8002e42:	f006 f957 	bl	80090f4 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8002e46:	9805      	ldr	r0, [sp, #20]
 8002e48:	f7fe fc3a 	bl	80016c0 <nk_colot_to_rgb666>
 8002e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e50:	1b52      	subs	r2, r2, r5
 8002e52:	8a23      	ldrh	r3, [r4, #16]
 8002e54:	441a      	add	r2, r3
 8002e56:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8002e5a:	f8cd b004 	str.w	fp, [sp, #4]
 8002e5e:	9000      	str	r0, [sp, #0]
 8002e60:	2304      	movs	r3, #4
 8002e62:	3a04      	subs	r2, #4
 8002e64:	4419      	add	r1, r3
 8002e66:	4630      	mov	r0, r6
 8002e68:	f006 f944 	bl	80090f4 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8002e6c:	9805      	ldr	r0, [sp, #20]
 8002e6e:	f7fe fc27 	bl	80016c0 <nk_colot_to_rgb666>
 8002e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e76:	1b52      	subs	r2, r2, r5
 8002e78:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8002e7c:	f8cd b004 	str.w	fp, [sp, #4]
 8002e80:	9000      	str	r0, [sp, #0]
 8002e82:	2304      	movs	r3, #4
 8002e84:	441a      	add	r2, r3
 8002e86:	4419      	add	r1, r3
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f006 f933 	bl	80090f4 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8002e8e:	9805      	ldr	r0, [sp, #20]
 8002e90:	f7fe fc16 	bl	80016c0 <nk_colot_to_rgb666>
 8002e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e98:	1b52      	subs	r2, r2, r5
 8002e9a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8002e9e:	89e3      	ldrh	r3, [r4, #14]
 8002ea0:	4419      	add	r1, r3
 8002ea2:	f8cd b004 	str.w	fp, [sp, #4]
 8002ea6:	9000      	str	r0, [sp, #0]
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	441a      	add	r2, r3
 8002eac:	3904      	subs	r1, #4
 8002eae:	4630      	mov	r0, r6
 8002eb0:	f006 f920 	bl	80090f4 <framebuf_fill_circle_quadrant>
                    // up and down
                    //framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, r->h, nk_colot_to_rgb666( r_color ) );
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 8002eb4:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 8002eb8:	eba8 0805 	sub.w	r8, r8, r5
 8002ebc:	9805      	ldr	r0, [sp, #20]
 8002ebe:	f7fe fbff 	bl	80016c0 <nk_colot_to_rgb666>
 8002ec2:	89e3      	ldrh	r3, [r4, #14]
 8002ec4:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8002ec8:	9001      	str	r0, [sp, #4]
 8002eca:	f04f 0a04 	mov.w	sl, #4
 8002ece:	f8cd a000 	str.w	sl, [sp]
 8002ed2:	3b08      	subs	r3, #8
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	4451      	add	r1, sl
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f005 feff 	bl	8008cdc <framebuf_fill_rect>
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0+r->h-rad, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 8002ede:	9805      	ldr	r0, [sp, #20]
 8002ee0:	f7fe fbee 	bl	80016c0 <nk_colot_to_rgb666>
 8002ee4:	89e3      	ldrh	r3, [r4, #14]
 8002ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eea:	1b52      	subs	r2, r2, r5
 8002eec:	8a21      	ldrh	r1, [r4, #16]
 8002eee:	440a      	add	r2, r1
 8002ef0:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8002ef4:	9001      	str	r0, [sp, #4]
 8002ef6:	f8cd a000 	str.w	sl, [sp]
 8002efa:	3b08      	subs	r3, #8
 8002efc:	3a04      	subs	r2, #4
 8002efe:	4451      	add	r1, sl
 8002f00:	4630      	mov	r0, r6
 8002f02:	f005 feeb 	bl	8008cdc <framebuf_fill_rect>
                    // middle
                    framebuf_fill_rect(  pfb, r->x, r->y-y0+rad, r->w, r->h-rad-rad, nk_colot_to_rgb666( r_color ) );
 8002f06:	9805      	ldr	r0, [sp, #20]
 8002f08:	f7fe fbda 	bl	80016c0 <nk_colot_to_rgb666>
 8002f0c:	89e3      	ldrh	r3, [r4, #14]
 8002f0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f12:	1b52      	subs	r2, r2, r5
 8002f14:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8002f18:	9001      	str	r0, [sp, #4]
 8002f1a:	8a20      	ldrh	r0, [r4, #16]
 8002f1c:	3808      	subs	r0, #8
 8002f1e:	9000      	str	r0, [sp, #0]
 8002f20:	4452      	add	r2, sl
 8002f22:	4630      	mov	r0, r6
 8002f24:	f005 feda 	bl	8008cdc <framebuf_fill_rect>
			 } break;
 8002f28:	e739      	b.n	8002d9e <nk_draw_fb+0x1ba>
                	  r_color.g = 40;
 8002f2a:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002f2e:	f88d 3015 	strb.w	r3, [sp, #21]
                	  r_color.b = 40;
 8002f32:	f88d 3016 	strb.w	r3, [sp, #22]
                	  r_color.a = 255;
 8002f36:	23ff      	movs	r3, #255	; 0xff
 8002f38:	f88d 3017 	strb.w	r3, [sp, #23]
                	  r_color.r = 40;
 8002f3c:	2328      	movs	r3, #40	; 0x28
 8002f3e:	e764      	b.n	8002e0a <nk_draw_fb+0x226>
			  case NK_COMMAND_CIRCLE: {
				  const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;
				  framebuf_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8002f40:	89e3      	ldrh	r3, [r4, #14]
 8002f42:	8a22      	ldrh	r2, [r4, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	ea4f 0ba3 	mov.w	fp, r3, asr #2
 8002f4a:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
 8002f4e:	eb0a 0aa3 	add.w	sl, sl, r3, asr #2
 8002f52:	f9b4 800a 	ldrsh.w	r8, [r4, #10]
 8002f56:	eba8 0805 	sub.w	r8, r8, r5
 8002f5a:	eb08 08a3 	add.w	r8, r8, r3, asr #2
 8002f5e:	f8d4 0012 	ldr.w	r0, [r4, #18]
 8002f62:	f7fe fbad 	bl	80016c0 <nk_colot_to_rgb666>
 8002f66:	9000      	str	r0, [sp, #0]
 8002f68:	465b      	mov	r3, fp
 8002f6a:	4642      	mov	r2, r8
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f005 ff80 	bl	8008e74 <framebuf_circle>
			  } break;
 8002f74:	e713      	b.n	8002d9e <nk_draw_fb+0x1ba>
			  case NK_COMMAND_CIRCLE_FILLED: {
				  const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;
				  framebuf_fill_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	89e2      	ldrh	r2, [r4, #14]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	ea4f 0ba3 	mov.w	fp, r3, asr #2
 8002f80:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
 8002f84:	eb0a 0aa3 	add.w	sl, sl, r3, asr #2
 8002f88:	f9b4 800a 	ldrsh.w	r8, [r4, #10]
 8002f8c:	eba8 0805 	sub.w	r8, r8, r5
 8002f90:	eb08 08a3 	add.w	r8, r8, r3, asr #2
 8002f94:	6920      	ldr	r0, [r4, #16]
 8002f96:	f7fe fb93 	bl	80016c0 <nk_colot_to_rgb666>
 8002f9a:	9000      	str	r0, [sp, #0]
 8002f9c:	465b      	mov	r3, fp
 8002f9e:	4642      	mov	r2, r8
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f006 f84c 	bl	8009040 <framebuf_fill_circle>
			  } break;
 8002fa8:	e6f9      	b.n	8002d9e <nk_draw_fb+0x1ba>
			  case NK_COMMAND_TEXT: {
				  const struct nk_command_text *t = (const struct nk_command_text*)cmd;
				  //framebuf_text( pfb, t->x, t->y-y0, (char *)t->string, nk_colot_to_rgb666( t->foreground ) );
				  lcd_text( pfb,  t->x, t->y-y0, (char *)t->string, 0xFFFF );
 8002faa:	8ae2      	ldrh	r2, [r4, #22]
 8002fac:	1b52      	subs	r2, r2, r5
 8002fae:	8aa1      	ldrh	r1, [r4, #20]
 8002fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f7fe fdcf 	bl	8001b60 <lcd_text>
			  } break;
 8002fc2:	e6ec      	b.n	8002d9e <nk_draw_fb+0x1ba>
			  case NK_COMMAND_IMAGE: {
				  const struct nk_command_image *i = (const struct nk_command_image*)cmd;
				  framebuf_fill_rect( pfb, i->x, i->y-y0, i->w, i->h, 0x0003FFFF );
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8002fca:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8002fce:	482d      	ldr	r0, [pc, #180]	; (8003084 <nk_draw_fb+0x4a0>)
 8002fd0:	9001      	str	r0, [sp, #4]
 8002fd2:	89e0      	ldrh	r0, [r4, #14]
 8002fd4:	9000      	str	r0, [sp, #0]
 8002fd6:	1b52      	subs	r2, r2, r5
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f005 fe7f 	bl	8008cdc <framebuf_fill_rect>
			  } break;
 8002fde:	e6de      	b.n	8002d9e <nk_draw_fb+0x1ba>
				  t_color.g = 175;
				  t_color.b = 175;
				  t_color.a = 255;
				}

				  framebuf_line( pfb, t->a.x, t->a.y-y0, t->b.x, t->b.y-y0, 0xFFFF );
 8002fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8002fe8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8002fec:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8002ff0:	f8cd 8004 	str.w	r8, [sp, #4]
 8002ff4:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8002ff8:	1b40      	subs	r0, r0, r5
 8002ffa:	9000      	str	r0, [sp, #0]
 8002ffc:	1b52      	subs	r2, r2, r5
 8002ffe:	4630      	mov	r0, r6
 8003000:	f005 ff2e 	bl	8008e60 <framebuf_line>
				  framebuf_line( pfb, t->b.x, t->b.y-y0, t->c.x, t->c.y-y0, 0xFFFF );
 8003004:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8003008:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800300c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8003010:	f8cd 8004 	str.w	r8, [sp, #4]
 8003014:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8003018:	1b40      	subs	r0, r0, r5
 800301a:	9000      	str	r0, [sp, #0]
 800301c:	1b52      	subs	r2, r2, r5
 800301e:	4630      	mov	r0, r6
 8003020:	f005 ff1e 	bl	8008e60 <framebuf_line>
				  framebuf_line( pfb, t->c.x, t->c.y-y0, t->a.x, t->a.y-y0, 0xFFFF );
 8003024:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8003028:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800302c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8003030:	f8cd 8004 	str.w	r8, [sp, #4]
 8003034:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8003038:	1b40      	subs	r0, r0, r5
 800303a:	9000      	str	r0, [sp, #0]
 800303c:	1b52      	subs	r2, r2, r5
 800303e:	4630      	mov	r0, r6
 8003040:	f005 ff0e 	bl	8008e60 <framebuf_line>
			  } break;
 8003044:	e6ab      	b.n	8002d9e <nk_draw_fb+0x1ba>
			  default: break;
			  }
		  }
	  }

		lcd_bmp( 0, y0, pfb->width, pfb->height, pfb->buf );
 8003046:	6833      	ldr	r3, [r6, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800304e:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8003052:	b229      	sxth	r1, r5
 8003054:	4648      	mov	r0, r9
 8003056:	f7fe fded 	bl	8001c34 <lcd_bmp>
	  for( int y0 = 0 ; y0 < 320 ; y0 += pfb->height )
 800305a:	88f3      	ldrh	r3, [r6, #6]
 800305c:	441d      	add	r5, r3
 800305e:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8003062:	da0b      	bge.n	800307c <nk_draw_fb+0x498>
	   framebuf_fill( pfb, 0x00000000 );
 8003064:	4649      	mov	r1, r9
 8003066:	4630      	mov	r0, r6
 8003068:	f005 fe2b 	bl	8008cc2 <framebuf_fill>
		  nk_foreach(cmd, ctx)
 800306c:	4638      	mov	r0, r7
 800306e:	f007 fcef 	bl	800aa50 <nk__begin>
 8003072:	4604      	mov	r4, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	f47f ae9a 	bne.w	8002dae <nk_draw_fb+0x1ca>
 800307a:	e7e4      	b.n	8003046 <nk_draw_fb+0x462>
	  }
}
 800307c:	b007      	add	sp, #28
 800307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003082:	bf00      	nop
 8003084:	0003ffff 	.word	0x0003ffff

08003088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003088:	b500      	push	{lr}
 800308a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800308c:	2238      	movs	r2, #56	; 0x38
 800308e:	2100      	movs	r1, #0
 8003090:	a806      	add	r0, sp, #24
 8003092:	f014 f804 	bl	801709e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003096:	2000      	movs	r0, #0
 8003098:	9001      	str	r0, [sp, #4]
 800309a:	9002      	str	r0, [sp, #8]
 800309c:	9003      	str	r0, [sp, #12]
 800309e:	9004      	str	r0, [sp, #16]
 80030a0:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80030a2:	f003 fb0b 	bl	80066bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030a6:	2301      	movs	r3, #1
 80030a8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ae:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b0:	2302      	movs	r3, #2
 80030b2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030b4:	2203      	movs	r2, #3
 80030b6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80030b8:	2206      	movs	r2, #6
 80030ba:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80030bc:	2255      	movs	r2, #85	; 0x55
 80030be:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030c0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80030c2:	2208      	movs	r2, #8
 80030c4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030c6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030c8:	a806      	add	r0, sp, #24
 80030ca:	f003 fd57 	bl	8006b7c <HAL_RCC_OscConfig>
 80030ce:	b980      	cbnz	r0, 80030f2 <SystemClock_Config+0x6a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030d0:	230f      	movs	r3, #15
 80030d2:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030d4:	2303      	movs	r3, #3
 80030d6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030d8:	2300      	movs	r3, #0
 80030da:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030dc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030de:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030e0:	2104      	movs	r1, #4
 80030e2:	eb0d 0001 	add.w	r0, sp, r1
 80030e6:	f003 fffb 	bl	80070e0 <HAL_RCC_ClockConfig>
 80030ea:	b920      	cbnz	r0, 80030f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
  }
}
 80030ec:	b015      	add	sp, #84	; 0x54
 80030ee:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <SystemClock_Config+0x6c>
 80030f6:	b672      	cpsid	i
 80030f8:	e7fe      	b.n	80030f8 <SystemClock_Config+0x70>
	...

080030fc <main>:
{
 80030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003100:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8003102:	f001 fab9 	bl	8004678 <HAL_Init>
  SystemClock_Config();
 8003106:	f7ff ffbf 	bl	8003088 <SystemClock_Config>
  MX_GPIO_Init();
 800310a:	f7fe fa49 	bl	80015a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800310e:	f7fe f96d 	bl	80013ec <MX_DMA_Init>
  MX_QUADSPI1_Init();
 8003112:	f000 fa5b 	bl	80035cc <MX_QUADSPI1_Init>
  MX_ADC1_Init();
 8003116:	f7fd fddf 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC2_Init();
 800311a:	f7fe f8a5 	bl	8001268 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 800311e:	f000 f94f 	bl	80033c0 <MX_OPAMP1_Init>
  MX_DAC1_Init();
 8003122:	f7fe f869 	bl	80011f8 <MX_DAC1_Init>
  MX_ADC3_Init();
 8003126:	f7fd fe63 	bl	8000df0 <MX_ADC3_Init>
  MX_ADC4_Init();
 800312a:	f7fd feb5 	bl	8000e98 <MX_ADC4_Init>
  MX_ADC5_Init();
 800312e:	f7fd fefb 	bl	8000f28 <MX_ADC5_Init>
  MX_OPAMP3_Init();
 8003132:	f000 f963 	bl	80033fc <MX_OPAMP3_Init>
  MX_OPAMP5_Init();
 8003136:	f000 f97d 	bl	8003434 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 800313a:	f000 f997 	bl	800346c <MX_OPAMP6_Init>
  MX_FMC_Init();
 800313e:	f7fe f9b1 	bl	80014a4 <MX_FMC_Init>
  MX_SPI3_Init();
 8003142:	f001 f803 	bl	800414c <MX_SPI3_Init>
  MX_TIM1_Init();
 8003146:	f001 f93f 	bl	80043c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800314a:	f001 f977 	bl	800443c <MX_TIM2_Init>
  MX_TIM3_Init();
 800314e:	f001 f9c9 	bl	80044e4 <MX_TIM3_Init>
  uint16_t x = 0, y = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8003158:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  tsc2046_init( &tsc, &hspi3, GPIOA, GPIO_PIN_15, ax, bx, ay, by, 8 );
 800315c:	2308      	movs	r3, #8
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	eddf 1a83 	vldr	s3, [pc, #524]	; 8003370 <main+0x274>
 8003164:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8003374 <main+0x278>
 8003168:	eddf 0a83 	vldr	s1, [pc, #524]	; 8003378 <main+0x27c>
 800316c:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800337c <main+0x280>
 8003170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003174:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003178:	4981      	ldr	r1, [pc, #516]	; (8003380 <main+0x284>)
 800317a:	a805      	add	r0, sp, #20
 800317c:	f013 f92e 	bl	80163dc <tsc2046_init>
  lcd_config();
 8003180:	f7fe fb50 	bl	8001824 <lcd_config>
  lcd_rect( 50, 50, 2, 2, 0xFFFF );
 8003184:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003188:	9400      	str	r4, [sp, #0]
 800318a:	2302      	movs	r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	2132      	movs	r1, #50	; 0x32
 8003190:	4608      	mov	r0, r1
 8003192:	f7fe facb 	bl	800172c <lcd_rect>
  lcd_rect( 240-50, 50, 2, 2, 0xFFFF );
 8003196:	9400      	str	r4, [sp, #0]
 8003198:	2302      	movs	r3, #2
 800319a:	461a      	mov	r2, r3
 800319c:	2132      	movs	r1, #50	; 0x32
 800319e:	20be      	movs	r0, #190	; 0xbe
 80031a0:	f7fe fac4 	bl	800172c <lcd_rect>
  lcd_rect( 50, 320-50, 2, 2, 0xFFFF );
 80031a4:	9400      	str	r4, [sp, #0]
 80031a6:	2302      	movs	r3, #2
 80031a8:	461a      	mov	r2, r3
 80031aa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80031ae:	2032      	movs	r0, #50	; 0x32
 80031b0:	f7fe fabc 	bl	800172c <lcd_rect>
  lcd_rect( 240-50, 320-50, 2, 2, 0xFFFF );
 80031b4:	9400      	str	r4, [sp, #0]
 80031b6:	2302      	movs	r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80031be:	20be      	movs	r0, #190	; 0xbe
 80031c0:	f7fe fab4 	bl	800172c <lcd_rect>
  d = lcd_set_pixel_bench( 100, 100, 0xFFFF );
 80031c4:	4622      	mov	r2, r4
 80031c6:	2164      	movs	r1, #100	; 0x64
 80031c8:	4608      	mov	r0, r1
 80031ca:	f7fe fbb9 	bl	8001940 <lcd_set_pixel_bench>
  nk_buffer_init_fixed( &cmds, buf_cmds, 1024*8 );
 80031ce:	4c6d      	ldr	r4, [pc, #436]	; (8003384 <main+0x288>)
 80031d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031d4:	496c      	ldr	r1, [pc, #432]	; (8003388 <main+0x28c>)
 80031d6:	4620      	mov	r0, r4
 80031d8:	f006 f82c 	bl	8009234 <nk_buffer_init_fixed>
  nk_buffer_init_fixed( &pool, buf_pool, 1024*8 );
 80031dc:	4d6b      	ldr	r5, [pc, #428]	; (800338c <main+0x290>)
 80031de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e2:	496b      	ldr	r1, [pc, #428]	; (8003390 <main+0x294>)
 80031e4:	4628      	mov	r0, r5
 80031e6:	f006 f825 	bl	8009234 <nk_buffer_init_fixed>
  font.height = fontUbuntuBookRNormal16.bbxh;
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <main+0x298>)
 80031ec:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <main+0x29c>)
 80031ee:	f992 2009 	ldrsb.w	r2, [r2, #9]
 80031f2:	ee07 2a90 	vmov	s15, r2
 80031f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fa:	edc3 7a01 	vstr	s15, [r3, #4]
  font.width = text_width_f;
 80031fe:	4a67      	ldr	r2, [pc, #412]	; (800339c <main+0x2a0>)
 8003200:	609a      	str	r2, [r3, #8]
  nk_init_custom( &ctx, &cmds, &pool, &font );
 8003202:	462a      	mov	r2, r5
 8003204:	4621      	mov	r1, r4
 8003206:	4866      	ldr	r0, [pc, #408]	; (80033a0 <main+0x2a4>)
 8003208:	f007 f9ac 	bl	800a564 <nk_init_custom>
	framebuf_init( &fb, 240, 80, fb_buf );
 800320c:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <main+0x2a8>)
 800320e:	2250      	movs	r2, #80	; 0x50
 8003210:	21f0      	movs	r1, #240	; 0xf0
 8003212:	a802      	add	r0, sp, #8
 8003214:	f005 fd50 	bl	8008cb8 <framebuf_init>
	  int pressed = 1;
 8003218:	2501      	movs	r5, #1
		  a = get_systick();
 800321a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80033b4 <main+0x2b8>
		  nk_input_begin( &ctx );
 800321e:	4c60      	ldr	r4, [pc, #384]	; (80033a0 <main+0x2a4>)
		  oscilloscope_process(&osc, &ctx);
 8003220:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80033b8 <main+0x2bc>
 8003224:	e07b      	b.n	800331e <main+0x222>
			  lcd_rect( x-4, y, 4, 2, 0xFFFF );
 8003226:	3804      	subs	r0, #4
 8003228:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800322c:	9500      	str	r5, [sp, #0]
 800322e:	2302      	movs	r3, #2
 8003230:	2204      	movs	r2, #4
 8003232:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8003236:	b200      	sxth	r0, r0
 8003238:	f7fe fa78 	bl	800172c <lcd_rect>
			  lcd_rect( x+2, y, 4, 2, 0xFFFF );
 800323c:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8003240:	3002      	adds	r0, #2
 8003242:	9500      	str	r5, [sp, #0]
 8003244:	2302      	movs	r3, #2
 8003246:	2204      	movs	r2, #4
 8003248:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 800324c:	b200      	sxth	r0, r0
 800324e:	f7fe fa6d 	bl	800172c <lcd_rect>
			  lcd_rect( x, y-4, 2, 4, 0xFFFF );
 8003252:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8003256:	3904      	subs	r1, #4
 8003258:	9500      	str	r5, [sp, #0]
 800325a:	2304      	movs	r3, #4
 800325c:	2202      	movs	r2, #2
 800325e:	b209      	sxth	r1, r1
 8003260:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8003264:	f7fe fa62 	bl	800172c <lcd_rect>
			  lcd_rect( x, y+2, 2, 4, 0xFFFF );
 8003268:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800326c:	3102      	adds	r1, #2
 800326e:	9500      	str	r5, [sp, #0]
 8003270:	2304      	movs	r3, #4
 8003272:	2202      	movs	r2, #2
 8003274:	b209      	sxth	r1, r1
 8003276:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 800327a:	f7fe fa57 	bl	800172c <lcd_rect>
 800327e:	e03b      	b.n	80032f8 <main+0x1fc>
			  lcd_rect( 0, 0, 480, 320, 0x0000 );
 8003280:	2000      	movs	r0, #0
 8003282:	9000      	str	r0, [sp, #0]
 8003284:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800328c:	4601      	mov	r1, r0
 800328e:	f7fe fa4d 	bl	800172c <lcd_rect>
 8003292:	e043      	b.n	800331c <main+0x220>
	return SysTick->VAL;
 8003294:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003298:	699b      	ldr	r3, [r3, #24]
		  a = get_systick();
 800329a:	f8c8 3000 	str.w	r3, [r8]
		  nk_input_begin( &ctx );
 800329e:	4620      	mov	r0, r4
 80032a0:	f009 fbfa 	bl	800ca98 <nk_input_begin>
			  nk_input_motion( &ctx, x, y );
 80032a4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80032a8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80032ac:	4620      	mov	r0, r4
 80032ae:	f009 fc55 	bl	800cb5c <nk_input_motion>
			  nk_input_button( &ctx, 0, x, y, 1 );
 80032b2:	2301      	movs	r3, #1
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80032ba:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80032be:	2100      	movs	r1, #0
 80032c0:	4620      	mov	r0, r4
 80032c2:	f009 fc73 	bl	800cbac <nk_input_button>
		  nk_input_end( &ctx );
 80032c6:	4620      	mov	r0, r4
 80032c8:	f009 fc28 	bl	800cb1c <nk_input_end>
		  oscilloscope_process(&osc, &ctx);
 80032cc:	4621      	mov	r1, r4
 80032ce:	4648      	mov	r0, r9
 80032d0:	f7fe fd22 	bl	8001d18 <oscilloscope_process>
		  nk_draw_fb( &ctx, &fb );
 80032d4:	a902      	add	r1, sp, #8
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff fc84 	bl	8002be4 <nk_draw_fb>
		  nk_clear(&ctx);
 80032dc:	4620      	mov	r0, r4
 80032de:	f007 f98b 	bl	800a5f8 <nk_clear>
	return SysTick->VAL;
 80032e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80032e6:	6998      	ldr	r0, [r3, #24]
		  d = diff_systick( b, a );
 80032e8:	f8d8 1000 	ldr.w	r1, [r8]
 80032ec:	f7fe f9df 	bl	80016ae <diff_systick>
		  if( x )
 80032f0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d196      	bne.n	8003226 <main+0x12a>
		  collapsed_bck = collapsed;
 80032f8:	4e2b      	ldr	r6, [pc, #172]	; (80033a8 <main+0x2ac>)
 80032fa:	4d2c      	ldr	r5, [pc, #176]	; (80033ac <main+0x2b0>)
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	6033      	str	r3, [r6, #0]
		  collapsed = nk_window_is_collapsed( &ctx, "STM32G4 Scope" );
 8003300:	492b      	ldr	r1, [pc, #172]	; (80033b0 <main+0x2b4>)
 8003302:	4620      	mov	r0, r4
 8003304:	f013 f844 	bl	8016390 <nk_window_is_collapsed>
 8003308:	6028      	str	r0, [r5, #0]
		  test_scope( !collapsed );
 800330a:	fab0 f080 	clz	r0, r0
 800330e:	0940      	lsrs	r0, r0, #5
 8003310:	f000 fba2 	bl	8003a58 <test_scope>
		  if( collapsed != collapsed_bck )
 8003314:	682a      	ldr	r2, [r5, #0]
 8003316:	6833      	ldr	r3, [r6, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d1b1      	bne.n	8003280 <main+0x184>
{
 800331c:	463d      	mov	r5, r7
	  x_bck = x;
 800331e:	f8bd 6036 	ldrh.w	r6, [sp, #54]	; 0x36
	  y_bck = y;
 8003322:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
	  tsc2046_read( &tsc, &x, &y );
 8003326:	aa0d      	add	r2, sp, #52	; 0x34
 8003328:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800332c:	a805      	add	r0, sp, #20
 800332e:	f013 f8b9 	bl	80164a4 <tsc2046_read>
	  pressed = (x!=0);
 8003332:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2701      	movne	r7, #1
 800333c:	2700      	moveq	r7, #0
	  if(  (pressed || pressed_bck) )// && (pressed != pressed_bck) )
 800333e:	d1a9      	bne.n	8003294 <main+0x198>
 8003340:	2d00      	cmp	r5, #0
 8003342:	d0d9      	beq.n	80032f8 <main+0x1fc>
	return SysTick->VAL;
 8003344:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003348:	699b      	ldr	r3, [r3, #24]
		  a = get_systick();
 800334a:	f8c8 3000 	str.w	r3, [r8]
		  nk_input_begin( &ctx );
 800334e:	4620      	mov	r0, r4
 8003350:	f009 fba2 	bl	800ca98 <nk_input_begin>
			  nk_input_motion( &ctx, x_bck, y_bck );
 8003354:	4652      	mov	r2, sl
 8003356:	4631      	mov	r1, r6
 8003358:	4620      	mov	r0, r4
 800335a:	f009 fbff 	bl	800cb5c <nk_input_motion>
			  nk_input_button( &ctx, 0, x_bck, y_bck, 0 );
 800335e:	2100      	movs	r1, #0
 8003360:	9100      	str	r1, [sp, #0]
 8003362:	4653      	mov	r3, sl
 8003364:	4632      	mov	r2, r6
 8003366:	4620      	mov	r0, r4
 8003368:	f009 fc20 	bl	800cbac <nk_input_button>
 800336c:	e7ab      	b.n	80032c6 <main+0x1ca>
 800336e:	bf00      	nop
 8003370:	c1954a53 	.word	0xc1954a53
 8003374:	3e35ad6b 	.word	0x3e35ad6b
 8003378:	c14e9f5d 	.word	0xc14e9f5d
 800337c:	3e80d902 	.word	0x3e80d902
 8003380:	20016804 	.word	0x20016804
 8003384:	20004808 	.word	0x20004808
 8003388:	20000808 	.word	0x20000808
 800338c:	200115a0 	.word	0x200115a0
 8003390:	20002808 	.word	0x20002808
 8003394:	200114b4 	.word	0x200114b4
 8003398:	08019fb0 	.word	0x08019fb0
 800339c:	08001c11 	.word	0x08001c11
 80033a0:	2000484c 	.word	0x2000484c
 80033a4:	20007eb4 	.word	0x20007eb4
 80033a8:	20004848 	.word	0x20004848
 80033ac:	20004844 	.word	0x20004844
 80033b0:	08019d40 	.word	0x08019d40
 80033b4:	20000800 	.word	0x20000800
 80033b8:	200114c0 	.word	0x200114c0

080033bc <Error_Handler>:
 80033bc:	b672      	cpsid	i
  while (1)
 80033be:	e7fe      	b.n	80033be <Error_Handler+0x2>

080033c0 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp5;
OPAMP_HandleTypeDef hopamp6;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80033c0:	b508      	push	{r3, lr}
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80033c2:	480c      	ldr	r0, [pc, #48]	; (80033f4 <MX_OPAMP1_Init+0x34>)
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <MX_OPAMP1_Init+0x38>)
 80033c6:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80033c8:	2300      	movs	r3, #0
 80033ca:	6043      	str	r3, [r0, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	6082      	str	r2, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80033d0:	2208      	movs	r2, #8
 80033d2:	6102      	str	r2, [r0, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80033d4:	2201      	movs	r2, #1
 80033d6:	7502      	strb	r2, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80033d8:	6183      	str	r3, [r0, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80033da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033de:	6242      	str	r2, [r0, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80033e0:	6283      	str	r3, [r0, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80033e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80033e4:	f003 f8de 	bl	80065a4 <HAL_OPAMP_Init>
 80033e8:	b900      	cbnz	r0, 80033ec <MX_OPAMP1_Init+0x2c>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80033ea:	bd08      	pop	{r3, pc}
    Error_Handler();
 80033ec:	f7ff ffe6 	bl	80033bc <Error_Handler>
}
 80033f0:	e7fb      	b.n	80033ea <MX_OPAMP1_Init+0x2a>
 80033f2:	bf00      	nop
 80033f4:	200115e4 	.word	0x200115e4
 80033f8:	40010300 	.word	0x40010300

080033fc <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80033fc:	b508      	push	{r3, lr}
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80033fe:	480b      	ldr	r0, [pc, #44]	; (800342c <MX_OPAMP3_Init+0x30>)
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <MX_OPAMP3_Init+0x34>)
 8003402:	6003      	str	r3, [r0, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003404:	2300      	movs	r3, #0
 8003406:	6043      	str	r3, [r0, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8003408:	2240      	movs	r2, #64	; 0x40
 800340a:	6082      	str	r2, [r0, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800340c:	6103      	str	r3, [r0, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 800340e:	2201      	movs	r2, #1
 8003410:	7502      	strb	r2, [r0, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003412:	6183      	str	r3, [r0, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003414:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003418:	6242      	str	r2, [r0, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800341a:	6283      	str	r3, [r0, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800341c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800341e:	f003 f8c1 	bl	80065a4 <HAL_OPAMP_Init>
 8003422:	b900      	cbnz	r0, 8003426 <MX_OPAMP3_Init+0x2a>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8003424:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003426:	f7ff ffc9 	bl	80033bc <Error_Handler>
}
 800342a:	e7fb      	b.n	8003424 <MX_OPAMP3_Init+0x28>
 800342c:	20011620 	.word	0x20011620
 8003430:	40010308 	.word	0x40010308

08003434 <MX_OPAMP5_Init>:
/* OPAMP5 init function */
void MX_OPAMP5_Init(void)
{
 8003434:	b508      	push	{r3, lr}
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8003436:	480b      	ldr	r0, [pc, #44]	; (8003464 <MX_OPAMP5_Init+0x30>)
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <MX_OPAMP5_Init+0x34>)
 800343a:	6003      	str	r3, [r0, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800343c:	2300      	movs	r3, #0
 800343e:	6043      	str	r3, [r0, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	6082      	str	r2, [r0, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003444:	6103      	str	r3, [r0, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8003446:	2201      	movs	r2, #1
 8003448:	7502      	strb	r2, [r0, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800344a:	6183      	str	r3, [r0, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800344c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003450:	6242      	str	r2, [r0, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8003452:	6283      	str	r3, [r0, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003454:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8003456:	f003 f8a5 	bl	80065a4 <HAL_OPAMP_Init>
 800345a:	b900      	cbnz	r0, 800345e <MX_OPAMP5_Init+0x2a>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 800345c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800345e:	f7ff ffad 	bl	80033bc <Error_Handler>
}
 8003462:	e7fb      	b.n	800345c <MX_OPAMP5_Init+0x28>
 8003464:	2001165c 	.word	0x2001165c
 8003468:	40010310 	.word	0x40010310

0800346c <MX_OPAMP6_Init>:
/* OPAMP6 init function */
void MX_OPAMP6_Init(void)
{
 800346c:	b508      	push	{r3, lr}
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 800346e:	480c      	ldr	r0, [pc, #48]	; (80034a0 <MX_OPAMP6_Init+0x34>)
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_OPAMP6_Init+0x38>)
 8003472:	6003      	str	r3, [r0, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003474:	2300      	movs	r3, #0
 8003476:	6043      	str	r3, [r0, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	6082      	str	r2, [r0, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800347c:	2208      	movs	r2, #8
 800347e:	6102      	str	r2, [r0, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8003480:	2201      	movs	r2, #1
 8003482:	7502      	strb	r2, [r0, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003484:	6183      	str	r3, [r0, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800348a:	6242      	str	r2, [r0, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800348c:	6283      	str	r3, [r0, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800348e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8003490:	f003 f888 	bl	80065a4 <HAL_OPAMP_Init>
 8003494:	b900      	cbnz	r0, 8003498 <MX_OPAMP6_Init+0x2c>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8003496:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003498:	f7ff ff90 	bl	80033bc <Error_Handler>
}
 800349c:	e7fb      	b.n	8003496 <MX_OPAMP6_Init+0x2a>
 800349e:	bf00      	nop
 80034a0:	20011698 	.word	0x20011698
 80034a4:	40010314 	.word	0x40010314

080034a8 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80034a8:	b510      	push	{r4, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	2300      	movs	r3, #0
 80034ae:	9305      	str	r3, [sp, #20]
 80034b0:	9306      	str	r3, [sp, #24]
 80034b2:	9307      	str	r3, [sp, #28]
 80034b4:	9308      	str	r3, [sp, #32]
 80034b6:	9309      	str	r3, [sp, #36]	; 0x24
  if(opampHandle->Instance==OPAMP1)
 80034b8:	6803      	ldr	r3, [r0, #0]
 80034ba:	4a38      	ldr	r2, [pc, #224]	; (800359c <HAL_OPAMP_MspInit+0xf4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00a      	beq.n	80034d6 <HAL_OPAMP_MspInit+0x2e>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(opampHandle->Instance==OPAMP3)
 80034c0:	4a37      	ldr	r2, [pc, #220]	; (80035a0 <HAL_OPAMP_MspInit+0xf8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01b      	beq.n	80034fe <HAL_OPAMP_MspInit+0x56>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
  else if(opampHandle->Instance==OPAMP5)
 80034c6:	4a37      	ldr	r2, [pc, #220]	; (80035a4 <HAL_OPAMP_MspInit+0xfc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d02b      	beq.n	8003524 <HAL_OPAMP_MspInit+0x7c>

  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }
  else if(opampHandle->Instance==OPAMP6)
 80034cc:	4a36      	ldr	r2, [pc, #216]	; (80035a8 <HAL_OPAMP_MspInit+0x100>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d03c      	beq.n	800354c <HAL_OPAMP_MspInit+0xa4>

  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }
}
 80034d2:	b00a      	add	sp, #40	; 0x28
 80034d4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_OPAMP_MspInit+0x104>)
 80034d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	64da      	str	r2, [r3, #76]	; 0x4c
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80034ea:	2388      	movs	r3, #136	; 0x88
 80034ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ee:	2303      	movs	r3, #3
 80034f0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	a905      	add	r1, sp, #20
 80034f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f8:	f002 ff6a 	bl	80063d0 <HAL_GPIO_Init>
 80034fc:	e7e9      	b.n	80034d2 <HAL_OPAMP_MspInit+0x2a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_OPAMP_MspInit+0x104>)
 8003500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003502:	f042 0202 	orr.w	r2, r2, #2
 8003506:	64da      	str	r2, [r3, #76]	; 0x4c
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8003512:	2305      	movs	r3, #5
 8003514:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003516:	2303      	movs	r3, #3
 8003518:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351a:	a905      	add	r1, sp, #20
 800351c:	4824      	ldr	r0, [pc, #144]	; (80035b0 <HAL_OPAMP_MspInit+0x108>)
 800351e:	f002 ff57 	bl	80063d0 <HAL_GPIO_Init>
 8003522:	e7d6      	b.n	80034d2 <HAL_OPAMP_MspInit+0x2a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_OPAMP_MspInit+0x104>)
 8003526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003528:	f042 0202 	orr.w	r2, r2, #2
 800352c:	64da      	str	r2, [r3, #76]	; 0x4c
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	9302      	str	r3, [sp, #8]
 8003536:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003538:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800353c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800353e:	2303      	movs	r3, #3
 8003540:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	a905      	add	r1, sp, #20
 8003544:	481a      	ldr	r0, [pc, #104]	; (80035b0 <HAL_OPAMP_MspInit+0x108>)
 8003546:	f002 ff43 	bl	80063d0 <HAL_GPIO_Init>
 800354a:	e7c2      	b.n	80034d2 <HAL_OPAMP_MspInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_OPAMP_MspInit+0x104>)
 800354e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	64da      	str	r2, [r3, #76]	; 0x4c
 8003556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003558:	f002 0201 	and.w	r2, r2, #1
 800355c:	9203      	str	r2, [sp, #12]
 800355e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003562:	f042 0202 	orr.w	r2, r2, #2
 8003566:	64da      	str	r2, [r3, #76]	; 0x4c
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003572:	2302      	movs	r3, #2
 8003574:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003576:	2403      	movs	r4, #3
 8003578:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	a905      	add	r1, sp, #20
 800357c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003580:	f002 ff26 	bl	80063d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003588:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003590:	a905      	add	r1, sp, #20
 8003592:	4807      	ldr	r0, [pc, #28]	; (80035b0 <HAL_OPAMP_MspInit+0x108>)
 8003594:	f002 ff1c 	bl	80063d0 <HAL_GPIO_Init>
}
 8003598:	e79b      	b.n	80034d2 <HAL_OPAMP_MspInit+0x2a>
 800359a:	bf00      	nop
 800359c:	40010300 	.word	0x40010300
 80035a0:	40010308 	.word	0x40010308
 80035a4:	40010310 	.word	0x40010310
 80035a8:	40010314 	.word	0x40010314
 80035ac:	40021000 	.word	0x40021000
 80035b0:	48000400 	.word	0x48000400

080035b4 <HAL_QSPI_TxCpltCallback>:
	enum ePsram_Direction direction
);

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
    TxCpltCallback = 1;
 80035b4:	4b01      	ldr	r3, [pc, #4]	; (80035bc <HAL_QSPI_TxCpltCallback+0x8>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
}
 80035ba:	4770      	bx	lr
 80035bc:	200116d5 	.word	0x200116d5

080035c0 <HAL_QSPI_RxCpltCallback>:
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
    RxCpltCallback = 1;
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <HAL_QSPI_RxCpltCallback+0x8>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
}
 80035c6:	4770      	bx	lr
 80035c8:	200116d4 	.word	0x200116d4

080035cc <MX_QUADSPI1_Init>:
QSPI_HandleTypeDef hqspi1;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 80035cc:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 80035ce:	480b      	ldr	r0, [pc, #44]	; (80035fc <MX_QUADSPI1_Init+0x30>)
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <MX_QUADSPI1_Init+0x34>)
 80035d2:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 6;
 80035d4:	2306      	movs	r3, #6
 80035d6:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 80035d8:	2301      	movs	r3, #1
 80035da:	6083      	str	r3, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80035dc:	2300      	movs	r3, #0
 80035de:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 23;
 80035e0:	2217      	movs	r2, #23
 80035e2:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80035e4:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80035e6:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_2;
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	61c2      	str	r2, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80035ec:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80035ee:	f003 f91b 	bl	8006828 <HAL_QSPI_Init>
 80035f2:	b900      	cbnz	r0, 80035f6 <MX_QUADSPI1_Init+0x2a>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80035f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80035f6:	f7ff fee1 	bl	80033bc <Error_Handler>
}
 80035fa:	e7fb      	b.n	80035f4 <MX_QUADSPI1_Init+0x28>
 80035fc:	20011738 	.word	0x20011738
 8003600:	a0001000 	.word	0xa0001000

08003604 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b09f      	sub	sp, #124	; 0x7c
 8003608:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360a:	2100      	movs	r1, #0
 800360c:	9119      	str	r1, [sp, #100]	; 0x64
 800360e:	911a      	str	r1, [sp, #104]	; 0x68
 8003610:	911b      	str	r1, [sp, #108]	; 0x6c
 8003612:	911c      	str	r1, [sp, #112]	; 0x70
 8003614:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003616:	2254      	movs	r2, #84	; 0x54
 8003618:	a804      	add	r0, sp, #16
 800361a:	f013 fd40 	bl	801709e <memset>
  if(qspiHandle->Instance==QUADSPI)
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_QSPI_MspInit+0x10c>)
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_QSPI_MspInit+0x26>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8003626:	b01f      	add	sp, #124	; 0x7c
 8003628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800362a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800362e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003630:	a804      	add	r0, sp, #16
 8003632:	f003 fe7f 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8003636:	2800      	cmp	r0, #0
 8003638:	d163      	bne.n	8003702 <HAL_QSPI_MspInit+0xfe>
    __HAL_RCC_QSPI_CLK_ENABLE();
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_QSPI_MspInit+0x110>)
 800363c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800363e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003642:	651a      	str	r2, [r3, #80]	; 0x50
 8003644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003646:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800364a:	9200      	str	r2, [sp, #0]
 800364c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003650:	f042 0204 	orr.w	r2, r2, #4
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c
 8003656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003658:	f002 0204 	and.w	r2, r2, #4
 800365c:	9201      	str	r2, [sp, #4]
 800365e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003662:	f042 0202 	orr.w	r2, r2, #2
 8003666:	64da      	str	r2, [r3, #76]	; 0x4c
 8003668:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800366a:	f002 0202 	and.w	r2, r2, #2
 800366e:	9202      	str	r2, [sp, #8]
 8003670:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003674:	f042 0208 	orr.w	r2, r2, #8
 8003678:	64da      	str	r2, [r3, #76]	; 0x4c
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003684:	231e      	movs	r3, #30
 8003686:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2702      	movs	r7, #2
 800368a:	971a      	str	r7, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2500      	movs	r5, #0
 800368e:	951b      	str	r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	951c      	str	r5, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003692:	260a      	movs	r6, #10
 8003694:	961d      	str	r6, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003696:	a919      	add	r1, sp, #100	; 0x64
 8003698:	481f      	ldr	r0, [pc, #124]	; (8003718 <HAL_QSPI_MspInit+0x114>)
 800369a:	f002 fe99 	bl	80063d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800369e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a2:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	971a      	str	r7, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	951b      	str	r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a8:	951c      	str	r5, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80036aa:	961d      	str	r6, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	a919      	add	r1, sp, #100	; 0x64
 80036ae:	481b      	ldr	r0, [pc, #108]	; (800371c <HAL_QSPI_MspInit+0x118>)
 80036b0:	f002 fe8e 	bl	80063d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036b4:	2308      	movs	r3, #8
 80036b6:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	971a      	str	r7, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	951b      	str	r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036bc:	951c      	str	r5, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80036be:	961d      	str	r6, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c0:	a919      	add	r1, sp, #100	; 0x64
 80036c2:	4817      	ldr	r0, [pc, #92]	; (8003720 <HAL_QSPI_MspInit+0x11c>)
 80036c4:	f002 fe84 	bl	80063d0 <HAL_GPIO_Init>
    hdma_quadspi.Instance = DMA2_Channel3;
 80036c8:	4816      	ldr	r0, [pc, #88]	; (8003724 <HAL_QSPI_MspInit+0x120>)
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_QSPI_MspInit+0x124>)
 80036cc:	6003      	str	r3, [r0, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_QUADSPI;
 80036ce:	2328      	movs	r3, #40	; 0x28
 80036d0:	6043      	str	r3, [r0, #4]
    hdma_quadspi.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d2:	2310      	movs	r3, #16
 80036d4:	6083      	str	r3, [r0, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d6:	60c5      	str	r5, [r0, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	6103      	str	r3, [r0, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036dc:	6145      	str	r5, [r0, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036de:	6185      	str	r5, [r0, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 80036e0:	61c5      	str	r5, [r0, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 80036e2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 80036e4:	f002 fcdc 	bl	80060a0 <HAL_DMA_Init>
 80036e8:	b970      	cbnz	r0, 8003708 <HAL_QSPI_MspInit+0x104>
    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 80036ea:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_QSPI_MspInit+0x120>)
 80036ec:	63e3      	str	r3, [r4, #60]	; 0x3c
 80036ee:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	4611      	mov	r1, r2
 80036f4:	205f      	movs	r0, #95	; 0x5f
 80036f6:	f002 fa29 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80036fa:	205f      	movs	r0, #95	; 0x5f
 80036fc:	f002 fa5c 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
}
 8003700:	e791      	b.n	8003626 <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 8003702:	f7ff fe5b 	bl	80033bc <Error_Handler>
 8003706:	e798      	b.n	800363a <HAL_QSPI_MspInit+0x36>
      Error_Handler();
 8003708:	f7ff fe58 	bl	80033bc <Error_Handler>
 800370c:	e7ed      	b.n	80036ea <HAL_QSPI_MspInit+0xe6>
 800370e:	bf00      	nop
 8003710:	a0001000 	.word	0xa0001000
 8003714:	40021000 	.word	0x40021000
 8003718:	48000800 	.word	0x48000800
 800371c:	48000400 	.word	0x48000400
 8003720:	48000c00 	.word	0x48000c00
 8003724:	200116d8 	.word	0x200116d8
 8003728:	40020430 	.word	0x40020430

0800372c <scope_init>:

static tScope *_scope;

void scope_init( tScope *scope, uint16_t trigger_level, uint16_t sample_rate, uint16_t *buffer1, uint16_t *buffer2, uint16_t *buffer3, uint16_t *buffer4, uint16_t len )
{
	scope->trigger_level = trigger_level;
 800372c:	82c1      	strh	r1, [r0, #22]
	scope->sample_rate = sample_rate;
 800372e:	8042      	strh	r2, [r0, #2]
	scope->buffer1 = buffer1;
 8003730:	6043      	str	r3, [r0, #4]
	scope->buffer2 = buffer2;
 8003732:	9b00      	ldr	r3, [sp, #0]
 8003734:	6083      	str	r3, [r0, #8]
	scope->buffer3 = buffer3;
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	60c3      	str	r3, [r0, #12]
	scope->buffer4 = buffer4;
 800373a:	9b02      	ldr	r3, [sp, #8]
 800373c:	6103      	str	r3, [r0, #16]
	scope->len = len;
 800373e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003742:	8283      	strh	r3, [r0, #20]
	scope->trigger_location = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	8303      	strh	r3, [r0, #24]
	scope->state = SCOPE_STATE_RESET;
 8003748:	7003      	strb	r3, [r0, #0]

	_scope = scope;
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <scope_init+0x4c>)
 800374c:	6018      	str	r0, [r3, #0]
	extern DMA_HandleTypeDef hdma_adc5;
	extern DMA_HandleTypeDef hdma_adc4;
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim2;

	scope->hadc1 = &hadc1;
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <scope_init+0x50>)
 8003750:	61c3      	str	r3, [r0, #28]
	scope->hadc2 = &hadc3;
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <scope_init+0x54>)
 8003754:	6203      	str	r3, [r0, #32]
	scope->hadc3 = &hadc5;
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <scope_init+0x58>)
 8003758:	6243      	str	r3, [r0, #36]	; 0x24
	scope->hadc4 = &hadc4;
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <scope_init+0x5c>)
 800375c:	6283      	str	r3, [r0, #40]	; 0x28
	scope->hdma_adc1 = &hdma_adc1;
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <scope_init+0x60>)
 8003760:	62c3      	str	r3, [r0, #44]	; 0x2c
	scope->hdma_adc2 = &hdma_adc3;
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <scope_init+0x64>)
 8003764:	6303      	str	r3, [r0, #48]	; 0x30
	scope->hdma_adc3 = &hdma_adc5;
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <scope_init+0x68>)
 8003768:	6343      	str	r3, [r0, #52]	; 0x34
	scope->hdma_adc4 = &hdma_adc4;
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <scope_init+0x6c>)
 800376c:	6383      	str	r3, [r0, #56]	; 0x38
	scope->htim1 = &htim1;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <scope_init+0x70>)
 8003770:	63c3      	str	r3, [r0, #60]	; 0x3c
	scope->htim2 = &htim2;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <scope_init+0x74>)
 8003774:	6403      	str	r3, [r0, #64]	; 0x40
	//MX_DMA_Init();
	//MX_ADC1_Init();
	//MX_OPAMP1_Init();
	//MX_TIM1_Init();
	//MX_TIM2_Init();
}
 8003776:	4770      	bx	lr
 8003778:	20011784 	.word	0x20011784
 800377c:	20000388 	.word	0x20000388
 8003780:	200003f4 	.word	0x200003f4
 8003784:	200004cc 	.word	0x200004cc
 8003788:	20000460 	.word	0x20000460
 800378c:	20000538 	.word	0x20000538
 8003790:	20000598 	.word	0x20000598
 8003794:	20000658 	.word	0x20000658
 8003798:	200005f8 	.word	0x200005f8
 800379c:	2001686c 	.word	0x2001686c
 80037a0:	200168b8 	.word	0x200168b8

080037a4 <scope_start>:
	scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = 0;
	scope->state = SCOPE_STATE_RESET;
}

void scope_start( tScope *scope )
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4604      	mov	r4, r0
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
	{
		scope->CNDTRs[i] = 0;
 80037a8:	2500      	movs	r5, #0
 80037aa:	6445      	str	r5, [r0, #68]	; 0x44
 80037ac:	6485      	str	r5, [r0, #72]	; 0x48
 80037ae:	64c5      	str	r5, [r0, #76]	; 0x4c
 80037b0:	6505      	str	r5, [r0, #80]	; 0x50
 80037b2:	6545      	str	r5, [r0, #84]	; 0x54
 80037b4:	6585      	str	r5, [r0, #88]	; 0x58
	}

	__HAL_DBGMCU_FREEZE_TIM1();
 80037b6:	4b33      	ldr	r3, [pc, #204]	; (8003884 <scope_start+0xe0>)
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037be:	611a      	str	r2, [r3, #16]
	__HAL_DBGMCU_FREEZE_TIM2();
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	609a      	str	r2, [r3, #8]

	extern DAC_HandleTypeDef hdac2;
	int vcc = 3.3;
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (vcc/2.0)/vcc*4095);
 80037c8:	4e2f      	ldr	r6, [pc, #188]	; (8003888 <scope_start+0xe4>)
 80037ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80037ce:	462a      	mov	r2, r5
 80037d0:	4629      	mov	r1, r5
 80037d2:	4630      	mov	r0, r6
 80037d4:	f002 fad8 	bl	8005d88 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80037d8:	4629      	mov	r1, r5
 80037da:	4630      	mov	r0, r6
 80037dc:	f002 fa20 	bl	8005c20 <HAL_DAC_Start>

	extern OPAMP_HandleTypeDef hopamp1;
	extern OPAMP_HandleTypeDef hopamp3;
	extern OPAMP_HandleTypeDef hopamp5;
	extern OPAMP_HandleTypeDef hopamp6;
	HAL_OPAMP_Start(&hopamp1);
 80037e0:	482a      	ldr	r0, [pc, #168]	; (800388c <scope_start+0xe8>)
 80037e2:	f002 ff4f 	bl	8006684 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 80037e6:	482a      	ldr	r0, [pc, #168]	; (8003890 <scope_start+0xec>)
 80037e8:	f002 ff4c 	bl	8006684 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 80037ec:	4829      	ldr	r0, [pc, #164]	; (8003894 <scope_start+0xf0>)
 80037ee:	f002 ff49 	bl	8006684 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp6);
 80037f2:	4829      	ldr	r0, [pc, #164]	; (8003898 <scope_start+0xf4>)
 80037f4:	f002 ff46 	bl	8006684 <HAL_OPAMP_Start>

	HAL_ADCEx_Calibration_Start( scope->hadc1, ADC_SINGLE_ENDED );
 80037f8:	217f      	movs	r1, #127	; 0x7f
 80037fa:	69e0      	ldr	r0, [r4, #28]
 80037fc:	f002 f890 	bl	8005920 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc2, ADC_SINGLE_ENDED );
 8003800:	217f      	movs	r1, #127	; 0x7f
 8003802:	6a20      	ldr	r0, [r4, #32]
 8003804:	f002 f88c 	bl	8005920 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc3, ADC_SINGLE_ENDED );
 8003808:	217f      	movs	r1, #127	; 0x7f
 800380a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800380c:	f002 f888 	bl	8005920 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc4, ADC_SINGLE_ENDED );
 8003810:	217f      	movs	r1, #127	; 0x7f
 8003812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003814:	f002 f884 	bl	8005920 <HAL_ADCEx_Calibration_Start>

	LL_ADC_DisableIT_AWD1( scope->hadc1->Instance );
 8003818:	69e3      	ldr	r3, [r4, #28]
 800381a:	681a      	ldr	r2, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800381c:	6853      	ldr	r3, [r2, #4]
 800381e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003822:	6053      	str	r3, [r2, #4]
	LL_ADC_DisableIT_AWD2( scope->hadc1->Instance );
 8003824:	69e3      	ldr	r3, [r4, #28]
 8003826:	681a      	ldr	r2, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003828:	6853      	ldr	r3, [r2, #4]
 800382a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800382e:	6053      	str	r3, [r2, #4]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD1 );
 8003830:	69e3      	ldr	r3, [r4, #28]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	601a      	str	r2, [r3, #0]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD2 );
 8003838:	69e3      	ldr	r3, [r4, #28]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003840:	601a      	str	r2, [r3, #0]

	scope->htim1->Instance->CNT = 0;
 8003842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	625d      	str	r5, [r3, #36]	; 0x24
	scope->htim2->Instance->CNT = 0;
 8003848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	625d      	str	r5, [r3, #36]	; 0x24

	HAL_ADC_Start_DMA( scope->hadc1, (uint32_t*)scope->buffer1, scope->len );
 800384e:	8aa2      	ldrh	r2, [r4, #20]
 8003850:	6861      	ldr	r1, [r4, #4]
 8003852:	69e0      	ldr	r0, [r4, #28]
 8003854:	f001 ff3e 	bl	80056d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc2, (uint32_t*)scope->buffer2, scope->len );
 8003858:	8aa2      	ldrh	r2, [r4, #20]
 800385a:	68a1      	ldr	r1, [r4, #8]
 800385c:	6a20      	ldr	r0, [r4, #32]
 800385e:	f001 ff39 	bl	80056d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc3, (uint32_t*)scope->buffer3, scope->len );
 8003862:	8aa2      	ldrh	r2, [r4, #20]
 8003864:	68e1      	ldr	r1, [r4, #12]
 8003866:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003868:	f001 ff34 	bl	80056d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc4, (uint32_t*)scope->buffer4, scope->len );
 800386c:	8aa2      	ldrh	r2, [r4, #20]
 800386e:	6921      	ldr	r1, [r4, #16]
 8003870:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003872:	f001 ff2f 	bl	80056d4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start( scope->htim1 );
 8003876:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003878:	f004 fbca 	bl	8008010 <HAL_TIM_Base_Start>
	scope->state = SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE;
 800387c:	2301      	movs	r3, #1
 800387e:	7023      	strb	r3, [r4, #0]
}
 8003880:	bd70      	pop	{r4, r5, r6, pc}
 8003882:	bf00      	nop
 8003884:	e0042000 	.word	0xe0042000
 8003888:	200006cc 	.word	0x200006cc
 800388c:	200115e4 	.word	0x200115e4
 8003890:	20011620 	.word	0x20011620
 8003894:	2001165c 	.word	0x2001165c
 8003898:	20011698 	.word	0x20011698

0800389c <scope_stop>:

void scope_stop( tScope *scope )
{
 800389c:	b510      	push	{r4, lr}
 800389e:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop( scope->htim1 );
 80038a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80038a2:	f004 fbfb 	bl	800809c <HAL_TIM_Base_Stop>
	HAL_TIM_OnePulse_Stop_IT( scope->htim2, TIM_CHANNEL_1);
 80038a6:	2100      	movs	r1, #0
 80038a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80038aa:	f005 f831 	bl	8008910 <HAL_TIM_OnePulse_Stop_IT>
	HAL_TIM_Base_Stop( scope->htim2 );
 80038ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80038b0:	f004 fbf4 	bl	800809c <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA( scope->hadc1 );
 80038b4:	69e0      	ldr	r0, [r4, #28]
 80038b6:	f001 ffee 	bl	8005896 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc2 );
 80038ba:	6a20      	ldr	r0, [r4, #32]
 80038bc:	f001 ffeb 	bl	8005896 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc3 );
 80038c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038c2:	f001 ffe8 	bl	8005896 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc4 );
 80038c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038c8:	f001 ffe5 	bl	8005896 <HAL_ADC_Stop_DMA>
	scope->state = SCOPE_STATE_DONE;
 80038cc:	2305      	movs	r3, #5
 80038ce:	7023      	strb	r3, [r4, #0]
}
 80038d0:	bd10      	pop	{r4, pc}

080038d2 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback( ADC_HandleTypeDef* hadc )
{
	if( hadc == _scope->hadc1 )
	{
	}
}
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
	if( hadc == _scope->hadc1 )
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_ADC_ConvCpltCallback+0x38>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	4282      	cmp	r2, r0
 80038dc:	d000      	beq.n	80038e0 <HAL_ADC_ConvCpltCallback+0xc>
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 80038de:	4770      	bx	lr
		if( 1 && _scope->state == SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE )
 80038e0:	7819      	ldrb	r1, [r3, #0]
 80038e2:	b2c9      	uxtb	r1, r1
 80038e4:	2901      	cmp	r1, #1
 80038e6:	d1fa      	bne.n	80038de <HAL_ADC_ConvCpltCallback+0xa>
			_scope->state = SCOPE_STATE_WAIT_FOR_ARM;
 80038e8:	2102      	movs	r1, #2
 80038ea:	7019      	strb	r1, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_ARM] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 80038ec:	4908      	ldr	r1, [pc, #32]	; (8003910 <HAL_ADC_ConvCpltCallback+0x3c>)
 80038ee:	6808      	ldr	r0, [r1, #0]
 80038f0:	64d8      	str	r0, [r3, #76]	; 0x4c
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	2080      	movs	r0, #128	; 0x80
 80038f6:	6010      	str	r0, [r2, #0]
			LL_ADC_EnableIT_AWD1( _scope->hadc1->Instance );
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	681a      	ldr	r2, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80038fc:	6853      	ldr	r3, [r2, #4]
 80038fe:	4303      	orrs	r3, r0
 8003900:	6053      	str	r3, [r2, #4]
			cndtr1 = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	600b      	str	r3, [r1, #0]
			cndtr2 = 0;
 8003906:	4a03      	ldr	r2, [pc, #12]	; (8003914 <HAL_ADC_ConvCpltCallback+0x40>)
 8003908:	6013      	str	r3, [r2, #0]
}
 800390a:	e7e8      	b.n	80038de <HAL_ADC_ConvCpltCallback+0xa>
 800390c:	20011784 	.word	0x20011784
 8003910:	2001578c 	.word	0x2001578c
 8003914:	20015790 	.word	0x20015790

08003918 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback( ADC_HandleTypeDef* hadc )
{
	if( hadc == _scope->hadc1 )
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_ADC_LevelOutOfWindowCallback+0x40>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	4282      	cmp	r2, r0
 8003920:	d000      	beq.n	8003924 <HAL_ADC_LevelOutOfWindowCallback+0xc>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
		}
	}
}
 8003922:	4770      	bx	lr
		if( _scope->state == SCOPE_STATE_WAIT_FOR_ARM )
 8003924:	7819      	ldrb	r1, [r3, #0]
 8003926:	b2c9      	uxtb	r1, r1
 8003928:	2902      	cmp	r1, #2
 800392a:	d1fa      	bne.n	8003922 <HAL_ADC_LevelOutOfWindowCallback+0xa>
			_scope->state = SCOPE_STATE_WAIT_FOR_TRIGGER;
 800392c:	2103      	movs	r1, #3
 800392e:	7019      	strb	r1, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_TRIGGER] = _scope->hdma_adc1->Instance->CNDTR;
 8003930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003932:	6809      	ldr	r1, [r1, #0]
 8003934:	6849      	ldr	r1, [r1, #4]
 8003936:	6519      	str	r1, [r3, #80]	; 0x50
			LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
 8003938:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800393a:	684a      	ldr	r2, [r1, #4]
 800393c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003940:	604a      	str	r2, [r1, #4]
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800394a:	6011      	str	r1, [r2, #0]
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	681a      	ldr	r2, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003950:	6853      	ldr	r3, [r2, #4]
 8003952:	430b      	orrs	r3, r1
 8003954:	6053      	str	r3, [r2, #4]
}
 8003956:	e7e4      	b.n	8003922 <HAL_ADC_LevelOutOfWindowCallback+0xa>
 8003958:	20011784 	.word	0x20011784

0800395c <HAL_ADCEx_LevelOutOfWindow2Callback>:
uint32_t start_cpu;
uint32_t stop_cpu;

void HAL_ADCEx_LevelOutOfWindow2Callback( ADC_HandleTypeDef* hadc )
{
	if( hadc == _scope->hadc1 )
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_ADCEx_LevelOutOfWindow2Callback+0x7c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	4282      	cmp	r2, r0
 8003964:	d000      	beq.n	8003968 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc>
 8003966:	4770      	bx	lr
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_TRIGGER )
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	2a03      	cmp	r2, #3
 800396e:	d1fa      	bne.n	8003966 <HAL_ADCEx_LevelOutOfWindow2Callback+0xa>
{
 8003970:	b510      	push	{r4, lr}
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_STOP;
 8003972:	2204      	movs	r2, #4
 8003974:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_ADCEx_LevelOutOfWindow2Callback+0x80>)
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

			//_scope->htim2->Instance->CCR1 = 127;
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC1 );
 800397c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	f06f 0002 	mvn.w	r0, #2
 8003984:	6110      	str	r0, [r2, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC2 );
 8003986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	f06f 0104 	mvn.w	r1, #4
 800398e:	6111      	str	r1, [r2, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_UPDATE );
 8003990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003992:	6814      	ldr	r4, [r2, #0]
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	6122      	str	r2, [r4, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC1 );
 800399a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800399c:	6824      	ldr	r4, [r4, #0]
 800399e:	6120      	str	r0, [r4, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC2 );
 80039a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80039a2:	6800      	ldr	r0, [r0, #0]
 80039a4:	6101      	str	r1, [r0, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_UPDATE );
 80039a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80039a8:	6809      	ldr	r1, [r1, #0]
 80039aa:	610a      	str	r2, [r1, #16]
			start_cpu = SysTick->VAL;
 80039ac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80039b0:	6991      	ldr	r1, [r2, #24]
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <HAL_ADCEx_LevelOutOfWindow2Callback+0x84>)
 80039b4:	6011      	str	r1, [r2, #0]
			HAL_TIM_Base_Start( _scope->htim2 );
 80039b6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80039b8:	f004 fb2a 	bl	8008010 <HAL_TIM_Base_Start>
			HAL_TIM_OnePulse_Start_IT( _scope->htim2, TIM_CHANNEL_1);
 80039bc:	4c06      	ldr	r4, [pc, #24]	; (80039d8 <HAL_ADCEx_LevelOutOfWindow2Callback+0x7c>)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	2100      	movs	r1, #0
 80039c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80039c4:	f004 ff48 	bl	8008858 <HAL_TIM_OnePulse_Start_IT>
			//LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80039ce:	6853      	ldr	r3, [r2, #4]
 80039d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d4:	6053      	str	r3, [r2, #4]
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 80039d6:	bd10      	pop	{r4, pc}
 80039d8:	20011784 	.word	0x20011784
 80039dc:	2001578c 	.word	0x2001578c
 80039e0:	200167f8 	.word	0x200167f8

080039e4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim )
{
	if( htim == _scope->htim2 ) // htim2
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ea:	4282      	cmp	r2, r0
 80039ec:	d000      	beq.n	80039f0 <HAL_TIM_OC_DelayElapsedCallback+0xc>
 80039ee:	4770      	bx	lr
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_STOP )
 80039f0:	781a      	ldrb	r2, [r3, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	2a04      	cmp	r2, #4
 80039f6:	d1fa      	bne.n	80039ee <HAL_TIM_OC_DelayElapsedCallback+0xa>
{
 80039f8:	b510      	push	{r4, lr}
		{
			stop_cpu = SysTick->VAL;
 80039fa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80039fe:	6991      	ldr	r1, [r2, #24]
 8003a00:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8003a02:	6011      	str	r1, [r2, #0]
			_scope->state = SCOPE_STATE_DONE;
 8003a04:	2205      	movs	r2, #5
 8003a06:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_DONE] = cndtr2;//_scope->hdma_adc1->Instance->CNDTR;
 8003a08:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_TIM_Base_Stop( _scope->htim1 );
 8003a0e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003a10:	f004 fb44 	bl	800809c <HAL_TIM_Base_Stop>
			HAL_ADC_Stop_DMA( _scope->hadc1 );
 8003a14:	4c0d      	ldr	r4, [pc, #52]	; (8003a4c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	69d8      	ldr	r0, [r3, #28]
 8003a1a:	f001 ff3c 	bl	8005896 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc2 );
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	6a18      	ldr	r0, [r3, #32]
 8003a22:	f001 ff38 	bl	8005896 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc3 );
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a2a:	f001 ff34 	bl	8005896 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc4 );
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a32:	f001 ff30 	bl	8005896 <HAL_ADC_Stop_DMA>
			HAL_TIM_OnePulse_Stop_IT( _scope->htim2, TIM_CHANNEL_1);
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003a3c:	f004 ff68 	bl	8008910 <HAL_TIM_OnePulse_Stop_IT>
			HAL_TIM_Base_Stop( _scope->htim2 );
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003a44:	f004 fb2a 	bl	800809c <HAL_TIM_Base_Stop>
		}
	}
}
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20011784 	.word	0x20011784
 8003a50:	200167fc 	.word	0x200167fc
 8003a54:	20015790 	.word	0x20015790

08003a58 <test_scope>:
uint16_t buffer6[BUFFER_LEN];
uint16_t buffer7[BUFFER_LEN];
uint16_t buffer8[BUFFER_LEN];
tScope scope = {0};
void test_scope( int collapsed )
{
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	ed2d 8b02 	vpush	{d8}
 8003a60:	b087      	sub	sp, #28
 8003a62:	9005      	str	r0, [sp, #20]

	uint16_t start = 0;
	  static int trigger_bck = 0;
	  static int i = 0;

	if( _scope_init == 0 )
 8003a64:	4bbc      	ldr	r3, [pc, #752]	; (8003d58 <test_scope+0x300>)
 8003a66:	681d      	ldr	r5, [r3, #0]
 8003a68:	2d00      	cmp	r5, #0
 8003a6a:	d158      	bne.n	8003b1e <test_scope+0xc6>
 8003a6c:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8003da4 <test_scope+0x34c>
 8003a70:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8003da8 <test_scope+0x350>
 8003a74:	f641 74f8 	movw	r4, #8184	; 0x1ff8
	{

		float freq = 3;
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
		{
			dac1_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*1023 + 2048;
 8003a78:	a7b5      	add	r7, pc, #724	; (adr r7, 8003d50 <test_scope+0x2f8>)
 8003a7a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003a7e:	f04f 0a00 	mov.w	sl, #0
 8003a82:	f8df b328 	ldr.w	fp, [pc, #808]	; 8003dac <test_scope+0x354>
 8003a86:	eddf 8ab5 	vldr	s17, [pc, #724]	; 8003d5c <test_scope+0x304>
 8003a8a:	ed9f 8ab5 	vldr	s16, [pc, #724]	; 8003d60 <test_scope+0x308>
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f7fc fd70 	bl	8000574 <__aeabi_i2d>
 8003a94:	4632      	mov	r2, r6
 8003a96:	463b      	mov	r3, r7
 8003a98:	f7fc fdd6 	bl	8000648 <__aeabi_dmul>
 8003a9c:	4652      	mov	r2, sl
 8003a9e:	465b      	mov	r3, fp
 8003aa0:	f7fc fdd2 	bl	8000648 <__aeabi_dmul>
 8003aa4:	f7fd f8c8 	bl	8000c38 <__aeabi_d2f>
 8003aa8:	ee00 0a10 	vmov	s0, r0
 8003aac:	f015 fbc0 	bl	8019230 <sinf>
 8003ab0:	ee20 0a28 	vmul.f32	s0, s0, s17
 8003ab4:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003ab8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8003abc:	ee10 3a10 	vmov	r3, s0
 8003ac0:	f829 3f02 	strh.w	r3, [r9, #2]!
			//dac2_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*2000 + 2048;
			dac2_buffer[i] = 1024+(((BUFFER_LEN-i-1)*8)%2048);
 8003ac4:	4262      	negs	r2, r4
 8003ac6:	f3c4 030a 	ubfx	r3, r4, #0, #11
 8003aca:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003ace:	bf58      	it	pl
 8003ad0:	4253      	negpl	r3, r2
 8003ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad6:	f828 3f02 	strh.w	r3, [r8, #2]!
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8003ada:	3501      	adds	r5, #1
 8003adc:	3c08      	subs	r4, #8
 8003ade:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003ae2:	d1d4      	bne.n	8003a8e <test_scope+0x36>
		}
		extern DAC_HandleTypeDef hdac1;
		extern TIM_HandleTypeDef htim2;
		extern TIM_HandleTypeDef htim3;
		__HAL_DBGMCU_FREEZE_TIM3();
 8003ae4:	4a9f      	ldr	r2, [pc, #636]	; (8003d64 <test_scope+0x30c>)
 8003ae6:	6893      	ldr	r3, [r2, #8]
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6093      	str	r3, [r2, #8]
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 8003aee:	4d9e      	ldr	r5, [pc, #632]	; (8003d68 <test_scope+0x310>)
 8003af0:	2400      	movs	r4, #0
 8003af2:	9400      	str	r4, [sp, #0]
 8003af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af8:	4a9c      	ldr	r2, [pc, #624]	; (8003d6c <test_scope+0x314>)
 8003afa:	4621      	mov	r1, r4
 8003afc:	4628      	mov	r0, r5
 8003afe:	f002 f8c3 	bl	8005c88 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_2, (uint32_t*)dac2_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 8003b02:	9400      	str	r4, [sp, #0]
 8003b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b08:	4a99      	ldr	r2, [pc, #612]	; (8003d70 <test_scope+0x318>)
 8003b0a:	2110      	movs	r1, #16
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f002 f8bb 	bl	8005c88 <HAL_DAC_Start_DMA>
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start( &htim3 );
 8003b12:	4898      	ldr	r0, [pc, #608]	; (8003d74 <test_scope+0x31c>)
 8003b14:	f004 fa7c 	bl	8008010 <HAL_TIM_Base_Start>
		//htim1.Instance->ARR = 0x54;
		//htim1.Instance->CNT = 0x2A;
		//HAL_TIM_Base_Start( &htim1 );


		_scope_init = 1;
 8003b18:	4b8f      	ldr	r3, [pc, #572]	; (8003d58 <test_scope+0x300>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]


	{

		static int dd = 0;
		if( dd<10 )
 8003b1e:	4b96      	ldr	r3, [pc, #600]	; (8003d78 <test_scope+0x320>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b09      	cmp	r3, #9
 8003b24:	dc40      	bgt.n	8003ba8 <test_scope+0x150>
		{
			dd++;
 8003b26:	3301      	adds	r3, #1
 8003b28:	4a93      	ldr	r2, [pc, #588]	; (8003d78 <test_scope+0x320>)
 8003b2a:	6013      	str	r3, [r2, #0]

		}


		scope_init( &scope, 2048, 1000000,
				(i&0x01)?buffer1:buffer5,
 8003b2c:	4b93      	ldr	r3, [pc, #588]	; (8003d7c <test_scope+0x324>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
		scope_init( &scope, 2048, 1000000,
 8003b30:	f012 0201 	ands.w	r2, r2, #1
 8003b34:	4992      	ldr	r1, [pc, #584]	; (8003d80 <test_scope+0x328>)
 8003b36:	4b93      	ldr	r3, [pc, #588]	; (8003d84 <test_scope+0x32c>)
 8003b38:	bf18      	it	ne
 8003b3a:	4619      	movne	r1, r3
 8003b3c:	4b92      	ldr	r3, [pc, #584]	; (8003d88 <test_scope+0x330>)
 8003b3e:	4893      	ldr	r0, [pc, #588]	; (8003d8c <test_scope+0x334>)
 8003b40:	2a00      	cmp	r2, #0
 8003b42:	bf18      	it	ne
 8003b44:	4603      	movne	r3, r0
 8003b46:	4892      	ldr	r0, [pc, #584]	; (8003d90 <test_scope+0x338>)
 8003b48:	4c92      	ldr	r4, [pc, #584]	; (8003d94 <test_scope+0x33c>)
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	bf18      	it	ne
 8003b4e:	4620      	movne	r0, r4
 8003b50:	4c91      	ldr	r4, [pc, #580]	; (8003d98 <test_scope+0x340>)
 8003b52:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003b56:	9503      	str	r5, [sp, #12]
 8003b58:	9002      	str	r0, [sp, #8]
 8003b5a:	9101      	str	r1, [sp, #4]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	498f      	ldr	r1, [pc, #572]	; (8003d9c <test_scope+0x344>)
 8003b60:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <test_scope+0x348>)
 8003b62:	2a00      	cmp	r2, #0
 8003b64:	bf08      	it	eq
 8003b66:	460b      	moveq	r3, r1
 8003b68:	f244 2240 	movw	r2, #16960	; 0x4240
 8003b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff fddb 	bl	800372c <scope_init>
				(i&0x01)?buffer2:buffer6,
				(i&0x01)?buffer3:buffer7,
				(i&0x01)?buffer4:buffer8,
				BUFFER_LEN );
		scope_start( &scope );
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7ff fe14 	bl	80037a4 <scope_start>
	if( scope->state != SCOPE_STATE_DONE )
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	7813      	ldrb	r3, [r2, #0]
 8003b80:	b2db      	uxtb	r3, r3
		while( scope_is_busy( &scope ) );
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d1fb      	bne.n	8003b7e <test_scope+0x126>
		scope_stop( &scope );
 8003b86:	4c84      	ldr	r4, [pc, #528]	; (8003d98 <test_scope+0x340>)
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7ff fe87 	bl	800389c <scope_stop>
	return scope->len - scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP];
 8003b8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b90:	f8b4 9014 	ldrh.w	r9, [r4, #20]
 8003b94:	eba9 0903 	sub.w	r9, r9, r3

		int32_t trigger = scope_get_trigger( &scope ) - BUFFER_LEN/2;
 8003b98:	f5a9 7900 	sub.w	r9, r9, #512	; 0x200

		//printf( "data%d = np.array( [", i );
		for( int jj = 0; jj < 480; jj++ )
 8003b9c:	2700      	movs	r7, #0
			else if( n >= BUFFER_LEN )
			{
				n -= BUFFER_LEN;
			}

			int n2 = trigger_bck + j;
 8003b9e:	f8df a210 	ldr.w	sl, [pc, #528]	; 8003db0 <test_scope+0x358>
			}
			else
			{
				int x0, y0, y1;
				x0 = jj;//(j*480)/BUFFER_LEN;
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8003ba2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8003d7c <test_scope+0x324>
 8003ba6:	e127      	b.n	8003df8 <test_scope+0x3a0>
			dd = 0;
 8003ba8:	4b73      	ldr	r3, [pc, #460]	; (8003d78 <test_scope+0x320>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
			if( collapsed )
 8003bae:	9b05      	ldr	r3, [sp, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d045      	beq.n	8003c40 <test_scope+0x1e8>
				for( int d = 0 ; d < 480 ; d += 40 )
 8003bb4:	4614      	mov	r4, r2
					lcd_rect( d/2+240, 0, 1, 320, 0x55555555 );
 8003bb6:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
 8003bba:	f44f 76a0 	mov.w	r6, #320	; 0x140
 8003bbe:	2501      	movs	r5, #1
 8003bc0:	eb04 70d4 	add.w	r0, r4, r4, lsr #31
 8003bc4:	1040      	asrs	r0, r0, #1
 8003bc6:	9700      	str	r7, [sp, #0]
 8003bc8:	4633      	mov	r3, r6
 8003bca:	462a      	mov	r2, r5
 8003bcc:	2100      	movs	r1, #0
 8003bce:	30f0      	adds	r0, #240	; 0xf0
 8003bd0:	f7fd fdac 	bl	800172c <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 8003bd4:	3428      	adds	r4, #40	; 0x28
 8003bd6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8003bda:	d1f1      	bne.n	8003bc0 <test_scope+0x168>
				lcd_rect( 480/2+240, 0, 1, 320, 0x55555555 );
 8003bdc:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003be6:	2201      	movs	r2, #1
 8003be8:	2100      	movs	r1, #0
 8003bea:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003bee:	f7fd fd9d 	bl	800172c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8003bf2:	2400      	movs	r4, #0
					lcd_rect( 0/2+240, d, 480, 1, 0x55555555 );
 8003bf4:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
 8003bf8:	2601      	movs	r6, #1
 8003bfa:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
 8003bfe:	9700      	str	r7, [sp, #0]
 8003c00:	4633      	mov	r3, r6
 8003c02:	462a      	mov	r2, r5
 8003c04:	4621      	mov	r1, r4
 8003c06:	20f0      	movs	r0, #240	; 0xf0
 8003c08:	f7fd fd90 	bl	800172c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8003c0c:	3428      	adds	r4, #40	; 0x28
 8003c0e:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8003c12:	d1f4      	bne.n	8003bfe <test_scope+0x1a6>
				lcd_rect( 0/2+240, 320, 480, 1, 0x55555555 );
 8003c14:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c20:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c24:	20f0      	movs	r0, #240	; 0xf0
 8003c26:	f7fd fd81 	bl	800172c <lcd_rect>
				lcd_rect( 0/2+240, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8003c2a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2301      	movs	r3, #1
 8003c32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c36:	2164      	movs	r1, #100	; 0x64
 8003c38:	20f0      	movs	r0, #240	; 0xf0
 8003c3a:	f7fd fd77 	bl	800172c <lcd_rect>
 8003c3e:	e775      	b.n	8003b2c <test_scope+0xd4>
				for( int d = 0 ; d < 480 ; d += 40 )
 8003c40:	9c05      	ldr	r4, [sp, #20]
					lcd_rect( d, 0, 1, 320, 0x55555555 );
 8003c42:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
 8003c46:	f44f 76a0 	mov.w	r6, #320	; 0x140
 8003c4a:	2501      	movs	r5, #1
 8003c4c:	9700      	str	r7, [sp, #0]
 8003c4e:	4633      	mov	r3, r6
 8003c50:	462a      	mov	r2, r5
 8003c52:	2100      	movs	r1, #0
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7fd fd69 	bl	800172c <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 8003c5a:	3428      	adds	r4, #40	; 0x28
 8003c5c:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8003c60:	d1f4      	bne.n	8003c4c <test_scope+0x1f4>
				lcd_rect( 480, 0, 1, 320, 0x55555555 );
 8003c62:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003c74:	f7fd fd5a 	bl	800172c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8003c78:	9c05      	ldr	r4, [sp, #20]
					lcd_rect( 0, d, 480, 1, 0x55555555 );
 8003c7a:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
 8003c7e:	2601      	movs	r6, #1
 8003c80:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
 8003c84:	9700      	str	r7, [sp, #0]
 8003c86:	4633      	mov	r3, r6
 8003c88:	462a      	mov	r2, r5
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f7fd fd4d 	bl	800172c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8003c92:	3428      	adds	r4, #40	; 0x28
 8003c94:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8003c98:	d1f4      	bne.n	8003c84 <test_scope+0x22c>
				lcd_rect( 0, 320, 480, 1, 0x55555555 );
 8003c9a:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ca6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003caa:	2000      	movs	r0, #0
 8003cac:	f7fd fd3e 	bl	800172c <lcd_rect>
				lcd_rect( 0, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8003cb0:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003cbc:	2164      	movs	r1, #100	; 0x64
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7fd fd34 	bl	800172c <lcd_rect>
 8003cc4:	e732      	b.n	8003b2c <test_scope+0xd4>
				n += BUFFER_LEN;
 8003cc6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003cca:	e0a6      	b.n	8003e1a <test_scope+0x3c2>
				n2 += BUFFER_LEN;
 8003ccc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003cd0:	e0ad      	b.n	8003e2e <test_scope+0x3d6>
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <test_scope+0x348>)
 8003cd4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003cd8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003cdc:	0189      	lsls	r1, r1, #6
 8003cde:	1309      	asrs	r1, r1, #12
 8003ce0:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <test_scope+0x344>)
 8003ce6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003cea:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003cee:	ea4f 1b8b 	mov.w	fp, fp, lsl #6
 8003cf2:	ea4f 3b2b 	mov.w	fp, fp, asr #12
 8003cf6:	f5cb 7ba0 	rsb	fp, fp, #320	; 0x140
 8003cfa:	e0b6      	b.n	8003e6a <test_scope+0x412>
				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8003cfc:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <test_scope+0x334>)
 8003cfe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003d02:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003d06:	0189      	lsls	r1, r1, #6
 8003d08:	1309      	asrs	r1, r1, #12
 8003d0a:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <test_scope+0x330>)
 8003d10:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003d14:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003d18:	ea4f 1b8b 	mov.w	fp, fp, lsl #6
 8003d1c:	ea4f 3b2b 	mov.w	fp, fp, asr #12
 8003d20:	f5cb 7ba0 	rsb	fp, fp, #320	; 0x140
 8003d24:	e0cb      	b.n	8003ebe <test_scope+0x466>
				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <test_scope+0x32c>)
 8003d28:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003d2c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003d30:	0189      	lsls	r1, r1, #6
 8003d32:	1309      	asrs	r1, r1, #12
 8003d34:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <test_scope+0x328>)
 8003d3a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003d3e:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003d42:	ea4f 1b8b 	mov.w	fp, fp, lsl #6
 8003d46:	ea4f 3b2b 	mov.w	fp, fp, asr #12
 8003d4a:	f5cb 7ba0 	rsb	fp, fp, #320	; 0x140
 8003d4e:	e0dc      	b.n	8003f0a <test_scope+0x4b2>
 8003d50:	7f3321d2 	.word	0x7f3321d2
 8003d54:	4032d97c 	.word	0x4032d97c
 8003d58:	20011788 	.word	0x20011788
 8003d5c:	447fc000 	.word	0x447fc000
 8003d60:	45000000 	.word	0x45000000
 8003d64:	e0042000 	.word	0xe0042000
 8003d68:	200006b8 	.word	0x200006b8
 8003d6c:	20015794 	.word	0x20015794
 8003d70:	20015f94 	.word	0x20015f94
 8003d74:	20016904 	.word	0x20016904
 8003d78:	20016794 	.word	0x20016794
 8003d7c:	20016798 	.word	0x20016798
 8003d80:	2001478c 	.word	0x2001478c
 8003d84:	2001278c 	.word	0x2001278c
 8003d88:	20013f8c 	.word	0x20013f8c
 8003d8c:	20011f8c 	.word	0x20011f8c
 8003d90:	20014f8c 	.word	0x20014f8c
 8003d94:	20012f8c 	.word	0x20012f8c
 8003d98:	2001679c 	.word	0x2001679c
 8003d9c:	2001378c 	.word	0x2001378c
 8003da0:	2001178c 	.word	0x2001178c
 8003da4:	20015792 	.word	0x20015792
 8003da8:	20015f92 	.word	0x20015f92
 8003dac:	3f500000 	.word	0x3f500000
 8003db0:	20016800 	.word	0x20016800
				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8003db4:	4bd9      	ldr	r3, [pc, #868]	; (800411c <test_scope+0x6c4>)
 8003db6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003dba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003dbe:	0189      	lsls	r1, r1, #6
 8003dc0:	1309      	asrs	r1, r1, #12
 8003dc2:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8003dc6:	4bd6      	ldr	r3, [pc, #856]	; (8004120 <test_scope+0x6c8>)
 8003dc8:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003dcc:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8003dd0:	01a4      	lsls	r4, r4, #6
 8003dd2:	1324      	asrs	r4, r4, #12
 8003dd4:	f5c4 74a0 	rsb	r4, r4, #320	; 0x140
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8003dd8:	2200      	movs	r2, #0
 8003dda:	b209      	sxth	r1, r1
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f7fd fd6d 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0xFFFFFFFF );
 8003de2:	f04f 32ff 	mov.w	r2, #4294967295
 8003de6:	b221      	sxth	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f7fd fd67 	bl	80018bc <lcd_set_pixel>
		for( int jj = 0; jj < 480; jj++ )
 8003dee:	3701      	adds	r7, #1
 8003df0:	f5b7 7ff0 	cmp.w	r7, #480	; 0x1e0
 8003df4:	f000 8185 	beq.w	8004102 <test_scope+0x6aa>
			int j = (jj*BUFFER_LEN)/480;
 8003df8:	02bc      	lsls	r4, r7, #10
 8003dfa:	4bca      	ldr	r3, [pc, #808]	; (8004124 <test_scope+0x6cc>)
 8003dfc:	fb83 2304 	smull	r2, r3, r3, r4
 8003e00:	4423      	add	r3, r4
 8003e02:	17e4      	asrs	r4, r4, #31
 8003e04:	ebc4 2423 	rsb	r4, r4, r3, asr #8
			if( n < 0 )
 8003e08:	eb19 0604 	adds.w	r6, r9, r4
 8003e0c:	f53f af5b 	bmi.w	8003cc6 <test_scope+0x26e>
			else if( n >= BUFFER_LEN )
 8003e10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
				n -= BUFFER_LEN;
 8003e14:	bfa8      	it	ge
 8003e16:	f5a6 6680 	subge.w	r6, r6, #1024	; 0x400
			int n2 = trigger_bck + j;
 8003e1a:	f8da 3000 	ldr.w	r3, [sl]
			if( n2 < 0 )
 8003e1e:	18e4      	adds	r4, r4, r3
 8003e20:	f53f af54 	bmi.w	8003ccc <test_scope+0x274>
			else if( n2 >= BUFFER_LEN )
 8003e24:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
				n2 -= BUFFER_LEN;
 8003e28:	bfa8      	it	ge
 8003e2a:	f5a4 6480 	subge.w	r4, r4, #1024	; 0x400
			if( collapsed )
 8003e2e:	9b05      	ldr	r3, [sp, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 808f 	beq.w	8003f54 <test_scope+0x4fc>
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8003e36:	f8d8 3000 	ldr.w	r3, [r8]
 8003e3a:	f013 0f01 	tst.w	r3, #1
 8003e3e:	f43f af48 	beq.w	8003cd2 <test_scope+0x27a>
 8003e42:	4bb9      	ldr	r3, [pc, #740]	; (8004128 <test_scope+0x6d0>)
 8003e44:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e48:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003e4c:	0189      	lsls	r1, r1, #6
 8003e4e:	1309      	asrs	r1, r1, #12
 8003e50:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8003e54:	4bb5      	ldr	r3, [pc, #724]	; (800412c <test_scope+0x6d4>)
 8003e56:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003e5a:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003e5e:	ea4f 1b8b 	mov.w	fp, fp, lsl #6
 8003e62:	ea4f 3b2b 	mov.w	fp, fp, asr #12
 8003e66:	f5cb 7ba0 	rsb	fp, fp, #320	; 0x140
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8003e6a:	eb07 75d7 	add.w	r5, r7, r7, lsr #31
 8003e6e:	106d      	asrs	r5, r5, #1
 8003e70:	35f0      	adds	r5, #240	; 0xf0
 8003e72:	b22d      	sxth	r5, r5
 8003e74:	2200      	movs	r2, #0
 8003e76:	b209      	sxth	r1, r1
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f7fd fd1f 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x0001C007 );
 8003e7e:	4aac      	ldr	r2, [pc, #688]	; (8004130 <test_scope+0x6d8>)
 8003e80:	fa0f f18b 	sxth.w	r1, fp
 8003e84:	4628      	mov	r0, r5
 8003e86:	f7fd fd19 	bl	80018bc <lcd_set_pixel>
				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8003e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e8e:	f013 0f01 	tst.w	r3, #1
 8003e92:	f43f af33 	beq.w	8003cfc <test_scope+0x2a4>
 8003e96:	4ba7      	ldr	r3, [pc, #668]	; (8004134 <test_scope+0x6dc>)
 8003e98:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e9c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003ea0:	0189      	lsls	r1, r1, #6
 8003ea2:	1309      	asrs	r1, r1, #12
 8003ea4:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8003ea8:	4ba3      	ldr	r3, [pc, #652]	; (8004138 <test_scope+0x6e0>)
 8003eaa:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003eae:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003eb2:	ea4f 1b8b 	mov.w	fp, fp, lsl #6
 8003eb6:	ea4f 3b2b 	mov.w	fp, fp, asr #12
 8003eba:	f5cb 7ba0 	rsb	fp, fp, #320	; 0x140
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	b209      	sxth	r1, r1
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f7fd fcfa 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x00003F00 );
 8003ec8:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8003ecc:	fa0f f18b 	sxth.w	r1, fp
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f7fd fcf3 	bl	80018bc <lcd_set_pixel>
				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8003ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eda:	f013 0f01 	tst.w	r3, #1
 8003ede:	f43f af22 	beq.w	8003d26 <test_scope+0x2ce>
 8003ee2:	4b96      	ldr	r3, [pc, #600]	; (800413c <test_scope+0x6e4>)
 8003ee4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003ee8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003eec:	0189      	lsls	r1, r1, #6
 8003eee:	1309      	asrs	r1, r1, #12
 8003ef0:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8003ef4:	4b92      	ldr	r3, [pc, #584]	; (8004140 <test_scope+0x6e8>)
 8003ef6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003efa:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003efe:	ea4f 1b8b 	mov.w	fp, fp, lsl #6
 8003f02:	ea4f 3b2b 	mov.w	fp, fp, asr #12
 8003f06:	f5cb 7ba0 	rsb	fp, fp, #320	; 0x140
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	b209      	sxth	r1, r1
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7fd fcd4 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x000001F8 );
 8003f14:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8003f18:	fa0f f18b 	sxth.w	r1, fp
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f7fd fccd 	bl	80018bc <lcd_set_pixel>
				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8003f22:	f8d8 3000 	ldr.w	r3, [r8]
 8003f26:	f013 0f01 	tst.w	r3, #1
 8003f2a:	f43f af43 	beq.w	8003db4 <test_scope+0x35c>
 8003f2e:	4b7c      	ldr	r3, [pc, #496]	; (8004120 <test_scope+0x6c8>)
 8003f30:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003f34:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003f38:	0189      	lsls	r1, r1, #6
 8003f3a:	1309      	asrs	r1, r1, #12
 8003f3c:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8003f40:	4b76      	ldr	r3, [pc, #472]	; (800411c <test_scope+0x6c4>)
 8003f42:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003f46:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8003f4a:	01a4      	lsls	r4, r4, #6
 8003f4c:	1324      	asrs	r4, r4, #12
 8003f4e:	f5c4 74a0 	rsb	r4, r4, #320	; 0x140
 8003f52:	e741      	b.n	8003dd8 <test_scope+0x380>
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8003f54:	f8d8 3000 	ldr.w	r3, [r8]
 8003f58:	f013 0f01 	tst.w	r3, #1
 8003f5c:	f000 8085 	beq.w	800406a <test_scope+0x612>
 8003f60:	4b71      	ldr	r3, [pc, #452]	; (8004128 <test_scope+0x6d0>)
 8003f62:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003f66:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003f6a:	0189      	lsls	r1, r1, #6
 8003f6c:	1309      	asrs	r1, r1, #12
 8003f6e:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <test_scope+0x6d4>)
 8003f74:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003f78:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8003f7c:	01ad      	lsls	r5, r5, #6
 8003f7e:	132d      	asrs	r5, r5, #12
 8003f80:	f5c5 75a0 	rsb	r5, r5, #320	; 0x140
				extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
				lcd_set_pixel( x0, y0, 0x00000000 );
 8003f84:	fa0f fb87 	sxth.w	fp, r7
 8003f88:	2200      	movs	r2, #0
 8003f8a:	b209      	sxth	r1, r1
 8003f8c:	4658      	mov	r0, fp
 8003f8e:	f7fd fc95 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x0001C007 );
 8003f92:	4a67      	ldr	r2, [pc, #412]	; (8004130 <test_scope+0x6d8>)
 8003f94:	b229      	sxth	r1, r5
 8003f96:	4658      	mov	r0, fp
 8003f98:	f7fd fc90 	bl	80018bc <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8003f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003fa0:	f013 0f01 	tst.w	r3, #1
 8003fa4:	d074      	beq.n	8004090 <test_scope+0x638>
 8003fa6:	4b63      	ldr	r3, [pc, #396]	; (8004134 <test_scope+0x6dc>)
 8003fa8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003fac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003fb0:	0189      	lsls	r1, r1, #6
 8003fb2:	1309      	asrs	r1, r1, #12
 8003fb4:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8003fb8:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <test_scope+0x6e0>)
 8003fba:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003fbe:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8003fc2:	01ad      	lsls	r5, r5, #6
 8003fc4:	132d      	asrs	r5, r5, #12
 8003fc6:	f5c5 75a0 	rsb	r5, r5, #320	; 0x140
				lcd_set_pixel( x0, y0, 0x00000000 );
 8003fca:	2200      	movs	r2, #0
 8003fcc:	b209      	sxth	r1, r1
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f7fd fc74 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x00003F00 );
 8003fd4:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8003fd8:	b229      	sxth	r1, r5
 8003fda:	4658      	mov	r0, fp
 8003fdc:	f7fd fc6e 	bl	80018bc <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8003fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe4:	f013 0f01 	tst.w	r3, #1
 8003fe8:	d065      	beq.n	80040b6 <test_scope+0x65e>
 8003fea:	4b54      	ldr	r3, [pc, #336]	; (800413c <test_scope+0x6e4>)
 8003fec:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003ff0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003ff4:	0189      	lsls	r1, r1, #6
 8003ff6:	1309      	asrs	r1, r1, #12
 8003ff8:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <test_scope+0x6e8>)
 8003ffe:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8004002:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8004006:	01ad      	lsls	r5, r5, #6
 8004008:	132d      	asrs	r5, r5, #12
 800400a:	f5c5 75a0 	rsb	r5, r5, #320	; 0x140
				lcd_set_pixel( x0, y0, 0x00000000 );
 800400e:	2200      	movs	r2, #0
 8004010:	b209      	sxth	r1, r1
 8004012:	4658      	mov	r0, fp
 8004014:	f7fd fc52 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x000001F8 );
 8004018:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800401c:	b229      	sxth	r1, r5
 800401e:	4658      	mov	r0, fp
 8004020:	f7fd fc4c 	bl	80018bc <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8004024:	f8d8 3000 	ldr.w	r3, [r8]
 8004028:	f013 0f01 	tst.w	r3, #1
 800402c:	d056      	beq.n	80040dc <test_scope+0x684>
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <test_scope+0x6c8>)
 8004030:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004034:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004038:	0189      	lsls	r1, r1, #6
 800403a:	1309      	asrs	r1, r1, #12
 800403c:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <test_scope+0x6c4>)
 8004042:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8004046:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800404a:	01a4      	lsls	r4, r4, #6
 800404c:	1324      	asrs	r4, r4, #12
 800404e:	f5c4 74a0 	rsb	r4, r4, #320	; 0x140
				lcd_set_pixel( x0, y0, 0x00000000 );
 8004052:	2200      	movs	r2, #0
 8004054:	b209      	sxth	r1, r1
 8004056:	4658      	mov	r0, fp
 8004058:	f7fd fc30 	bl	80018bc <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0xFFFFFFFF );
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	b221      	sxth	r1, r4
 8004062:	4658      	mov	r0, fp
 8004064:	f7fd fc2a 	bl	80018bc <lcd_set_pixel>
 8004068:	e6c1      	b.n	8003dee <test_scope+0x396>
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 800406a:	4b30      	ldr	r3, [pc, #192]	; (800412c <test_scope+0x6d4>)
 800406c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004070:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004074:	0189      	lsls	r1, r1, #6
 8004076:	1309      	asrs	r1, r1, #12
 8004078:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <test_scope+0x6d0>)
 800407e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8004082:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8004086:	01ad      	lsls	r5, r5, #6
 8004088:	132d      	asrs	r5, r5, #12
 800408a:	f5c5 75a0 	rsb	r5, r5, #320	; 0x140
 800408e:	e779      	b.n	8003f84 <test_scope+0x52c>
				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8004090:	4b29      	ldr	r3, [pc, #164]	; (8004138 <test_scope+0x6e0>)
 8004092:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004096:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800409a:	0189      	lsls	r1, r1, #6
 800409c:	1309      	asrs	r1, r1, #12
 800409e:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 80040a2:	4b24      	ldr	r3, [pc, #144]	; (8004134 <test_scope+0x6dc>)
 80040a4:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80040a8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80040ac:	01ad      	lsls	r5, r5, #6
 80040ae:	132d      	asrs	r5, r5, #12
 80040b0:	f5c5 75a0 	rsb	r5, r5, #320	; 0x140
 80040b4:	e789      	b.n	8003fca <test_scope+0x572>
				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 80040b6:	4b22      	ldr	r3, [pc, #136]	; (8004140 <test_scope+0x6e8>)
 80040b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80040bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80040c0:	0189      	lsls	r1, r1, #6
 80040c2:	1309      	asrs	r1, r1, #12
 80040c4:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 80040c8:	4b1c      	ldr	r3, [pc, #112]	; (800413c <test_scope+0x6e4>)
 80040ca:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80040ce:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80040d2:	01ad      	lsls	r5, r5, #6
 80040d4:	132d      	asrs	r5, r5, #12
 80040d6:	f5c5 75a0 	rsb	r5, r5, #320	; 0x140
 80040da:	e798      	b.n	800400e <test_scope+0x5b6>
				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <test_scope+0x6c4>)
 80040de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80040e2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80040e6:	0189      	lsls	r1, r1, #6
 80040e8:	1309      	asrs	r1, r1, #12
 80040ea:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <test_scope+0x6c8>)
 80040f0:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80040f4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80040f8:	01a4      	lsls	r4, r4, #6
 80040fa:	1324      	asrs	r4, r4, #12
 80040fc:	f5c4 74a0 	rsb	r4, r4, #320	; 0x140
 8004100:	e7a7      	b.n	8004052 <test_scope+0x5fa>

		}

		//lcd_rect( 240, 0, 1, 320, 0xFFFFFF00 );
		//printf( "], dtype=np.float32 )\n" );
		i += 1;
 8004102:	4a10      	ldr	r2, [pc, #64]	; (8004144 <test_scope+0x6ec>)
 8004104:	6813      	ldr	r3, [r2, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	6013      	str	r3, [r2, #0]
		trigger_bck = trigger;
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <test_scope+0x6f0>)
 800410c:	f8c3 9000 	str.w	r9, [r3]
		//HAL_Delay( 10 );
	}
}
 8004110:	b007      	add	sp, #28
 8004112:	ecbd 8b02 	vpop	{d8}
 8004116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800411a:	bf00      	nop
 800411c:	20012f8c 	.word	0x20012f8c
 8004120:	20014f8c 	.word	0x20014f8c
 8004124:	88888889 	.word	0x88888889
 8004128:	2001378c 	.word	0x2001378c
 800412c:	2001178c 	.word	0x2001178c
 8004130:	0001c007 	.word	0x0001c007
 8004134:	20013f8c 	.word	0x20013f8c
 8004138:	20011f8c 	.word	0x20011f8c
 800413c:	2001478c 	.word	0x2001478c
 8004140:	2001278c 	.word	0x2001278c
 8004144:	20016798 	.word	0x20016798
 8004148:	20016800 	.word	0x20016800

0800414c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800414c:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800414e:	4810      	ldr	r0, [pc, #64]	; (8004190 <MX_SPI3_Init+0x44>)
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <MX_SPI3_Init+0x48>)
 8004152:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004154:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004158:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800415a:	2300      	movs	r3, #0
 800415c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800415e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004162:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004164:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004166:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800416e:	2230      	movs	r2, #48	; 0x30
 8004170:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004172:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004174:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004176:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004178:	2207      	movs	r2, #7
 800417a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800417c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800417e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004180:	f003 fbb3 	bl	80078ea <HAL_SPI_Init>
 8004184:	b900      	cbnz	r0, 8004188 <MX_SPI3_Init+0x3c>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004186:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004188:	f7ff f918 	bl	80033bc <Error_Handler>
}
 800418c:	e7fb      	b.n	8004186 <MX_SPI3_Init+0x3a>
 800418e:	bf00      	nop
 8004190:	20016804 	.word	0x20016804
 8004194:	40003c00 	.word	0x40003c00

08004198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004198:	b500      	push	{lr}
 800419a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	2300      	movs	r3, #0
 800419e:	9303      	str	r3, [sp, #12]
 80041a0:	9304      	str	r3, [sp, #16]
 80041a2:	9305      	str	r3, [sp, #20]
 80041a4:	9306      	str	r3, [sp, #24]
 80041a6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 80041a8:	6802      	ldr	r2, [r0, #0]
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <HAL_SPI_MspInit+0x60>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d002      	beq.n	80041b6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80041b0:	b009      	add	sp, #36	; 0x24
 80041b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041b6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c0:	659a      	str	r2, [r3, #88]	; 0x58
 80041c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041c4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80041c8:	9201      	str	r2, [sp, #4]
 80041ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041ce:	f042 0204 	orr.w	r2, r2, #4
 80041d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80041de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80041e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80041e8:	2306      	movs	r3, #6
 80041ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ec:	a903      	add	r1, sp, #12
 80041ee:	4803      	ldr	r0, [pc, #12]	; (80041fc <HAL_SPI_MspInit+0x64>)
 80041f0:	f002 f8ee 	bl	80063d0 <HAL_GPIO_Init>
}
 80041f4:	e7dc      	b.n	80041b0 <HAL_SPI_MspInit+0x18>
 80041f6:	bf00      	nop
 80041f8:	40003c00 	.word	0x40003c00
 80041fc:	48000800 	.word	0x48000800

08004200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004200:	b500      	push	{lr}
 8004202:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <HAL_MspInit+0x3c>)
 8004206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	661a      	str	r2, [r3, #96]	; 0x60
 800420e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004210:	f002 0201 	and.w	r2, r2, #1
 8004214:	9200      	str	r2, [sp, #0]
 8004216:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800421a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800421e:	659a      	str	r2, [r3, #88]	; 0x58
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800422a:	f000 fa65 	bl	80046f8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800422e:	2002      	movs	r0, #2
 8004230:	f000 fa58 	bl	80046e4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004234:	b003      	add	sp, #12
 8004236:	f85d fb04 	ldr.w	pc, [sp], #4
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000

08004240 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004240:	e7fe      	b.n	8004240 <NMI_Handler>

08004242 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004242:	e7fe      	b.n	8004242 <HardFault_Handler>

08004244 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <MemManage_Handler>

08004246 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004246:	e7fe      	b.n	8004246 <BusFault_Handler>

08004248 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004248:	e7fe      	b.n	8004248 <UsageFault_Handler>

0800424a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800424a:	4770      	bx	lr

0800424c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800424c:	4770      	bx	lr

0800424e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800424e:	4770      	bx	lr

08004250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004252:	f000 fa21 	bl	8004698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004256:	bd08      	pop	{r3, pc}

08004258 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004258:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800425a:	4802      	ldr	r0, [pc, #8]	; (8004264 <DMA1_Channel1_IRQHandler+0xc>)
 800425c:	f002 f855 	bl	800630a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004260:	bd08      	pop	{r3, pc}
 8004262:	bf00      	nop
 8004264:	20000538 	.word	0x20000538

08004268 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004268:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800426a:	4802      	ldr	r0, [pc, #8]	; (8004274 <DMA1_Channel2_IRQHandler+0xc>)
 800426c:	f002 f84d 	bl	800630a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004270:	bd08      	pop	{r3, pc}
 8004272:	bf00      	nop
 8004274:	20000598 	.word	0x20000598

08004278 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004278:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800427a:	4802      	ldr	r0, [pc, #8]	; (8004284 <DMA1_Channel3_IRQHandler+0xc>)
 800427c:	f002 f845 	bl	800630a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004280:	bd08      	pop	{r3, pc}
 8004282:	bf00      	nop
 8004284:	200005f8 	.word	0x200005f8

08004288 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004288:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800428a:	4802      	ldr	r0, [pc, #8]	; (8004294 <DMA1_Channel4_IRQHandler+0xc>)
 800428c:	f002 f83d 	bl	800630a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004290:	bd08      	pop	{r3, pc}
 8004292:	bf00      	nop
 8004294:	20000658 	.word	0x20000658

08004298 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004298:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	extern int cndtr1;
	cndtr1 = hdma_adc1.Instance->CNDTR;
 800429a:	4b04      	ldr	r3, [pc, #16]	; (80042ac <ADC1_2_IRQHandler+0x14>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <ADC1_2_IRQHandler+0x18>)
 80042a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <ADC1_2_IRQHandler+0x1c>)
 80042a6:	f000 fb75 	bl	8004994 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80042aa:	bd08      	pop	{r3, pc}
 80042ac:	20000538 	.word	0x20000538
 80042b0:	2001578c 	.word	0x2001578c
 80042b4:	20000388 	.word	0x20000388

080042b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern int cndtr2;
	cndtr2 = hdma_adc1.Instance->CNDTR;
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <TIM2_IRQHandler+0x14>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <TIM2_IRQHandler+0x18>)
 80042c2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042c4:	4803      	ldr	r0, [pc, #12]	; (80042d4 <TIM2_IRQHandler+0x1c>)
 80042c6:	f003 ff02 	bl	80080ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042ca:	bd08      	pop	{r3, pc}
 80042cc:	20000538 	.word	0x20000538
 80042d0:	20015790 	.word	0x20015790
 80042d4:	200168b8 	.word	0x200168b8

080042d8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80042d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80042da:	4802      	ldr	r0, [pc, #8]	; (80042e4 <DMA2_Channel1_IRQHandler+0xc>)
 80042dc:	f002 f815 	bl	800630a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80042e0:	bd08      	pop	{r3, pc}
 80042e2:	bf00      	nop
 80042e4:	200006e0 	.word	0x200006e0

080042e8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80042e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80042ea:	4802      	ldr	r0, [pc, #8]	; (80042f4 <DMA2_Channel2_IRQHandler+0xc>)
 80042ec:	f002 f80d 	bl	800630a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80042f0:	bd08      	pop	{r3, pc}
 80042f2:	bf00      	nop
 80042f4:	20000740 	.word	0x20000740

080042f8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80042f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 80042fa:	4802      	ldr	r0, [pc, #8]	; (8004304 <DMA2_Channel3_IRQHandler+0xc>)
 80042fc:	f002 f805 	bl	800630a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004300:	bd08      	pop	{r3, pc}
 8004302:	bf00      	nop
 8004304:	200116d8 	.word	0x200116d8

08004308 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8004308:	b508      	push	{r3, lr}
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi1);
 800430a:	4802      	ldr	r0, [pc, #8]	; (8004314 <QUADSPI_IRQHandler+0xc>)
 800430c:	f002 fb06 	bl	800691c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8004310:	bd08      	pop	{r3, pc}
 8004312:	bf00      	nop
 8004314:	20011738 	.word	0x20011738

08004318 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004318:	2001      	movs	r0, #1
 800431a:	4770      	bx	lr

0800431c <_kill>:

int _kill(int pid, int sig)
{
 800431c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800431e:	f012 ff11 	bl	8017144 <__errno>
 8004322:	2316      	movs	r3, #22
 8004324:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004326:	f04f 30ff 	mov.w	r0, #4294967295
 800432a:	bd08      	pop	{r3, pc}

0800432c <_exit>:

void _exit (int status)
{
 800432c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800432e:	f012 ff09 	bl	8017144 <__errno>
 8004332:	2316      	movs	r3, #22
 8004334:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004336:	e7fe      	b.n	8004336 <_exit+0xa>

08004338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004338:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433a:	1e16      	subs	r6, r2, #0
 800433c:	dd07      	ble.n	800434e <_read+0x16>
 800433e:	460c      	mov	r4, r1
 8004340:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8004342:	f3af 8000 	nop.w
 8004346:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434a:	42a5      	cmp	r5, r4
 800434c:	d1f9      	bne.n	8004342 <_read+0xa>
  }

  return len;
}
 800434e:	4630      	mov	r0, r6
 8004350:	bd70      	pop	{r4, r5, r6, pc}

08004352 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004352:	f04f 30ff 	mov.w	r0, #4294967295
 8004356:	4770      	bx	lr

08004358 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800435c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800435e:	2000      	movs	r0, #0
 8004360:	4770      	bx	lr

08004362 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004362:	2001      	movs	r0, #1
 8004364:	4770      	bx	lr

08004366 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004366:	2000      	movs	r0, #0
 8004368:	4770      	bx	lr
	...

0800436c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800436c:	b508      	push	{r3, lr}
 800436e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004370:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <_sbrk+0x38>)
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	b152      	cbz	r2, 800438c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004376:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <_sbrk+0x38>)
 8004378:	6810      	ldr	r0, [r2, #0]
 800437a:	4403      	add	r3, r0
 800437c:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <_sbrk+0x3c>)
 800437e:	490b      	ldr	r1, [pc, #44]	; (80043ac <_sbrk+0x40>)
 8004380:	1a52      	subs	r2, r2, r1
 8004382:	4293      	cmp	r3, r2
 8004384:	d806      	bhi.n	8004394 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <_sbrk+0x38>)
 8004388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800438a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 800438c:	4a05      	ldr	r2, [pc, #20]	; (80043a4 <_sbrk+0x38>)
 800438e:	4908      	ldr	r1, [pc, #32]	; (80043b0 <_sbrk+0x44>)
 8004390:	6011      	str	r1, [r2, #0]
 8004392:	e7f0      	b.n	8004376 <_sbrk+0xa>
    errno = ENOMEM;
 8004394:	f012 fed6 	bl	8017144 <__errno>
 8004398:	230c      	movs	r3, #12
 800439a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	e7f3      	b.n	800438a <_sbrk+0x1e>
 80043a2:	bf00      	nop
 80043a4:	20016868 	.word	0x20016868
 80043a8:	20020000 	.word	0x20020000
 80043ac:	00000400 	.word	0x00000400
 80043b0:	20016aa0 	.word	0x20016aa0

080043b4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043b4:	4a03      	ldr	r2, [pc, #12]	; (80043c4 <SystemInit+0x10>)
 80043b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043c2:	4770      	bx	lr
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80043c8:	b500      	push	{lr}
 80043ca:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043cc:	2300      	movs	r3, #0
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	9305      	str	r3, [sp, #20]
 80043d2:	9306      	str	r3, [sp, #24]
 80043d4:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	9302      	str	r3, [sp, #8]
 80043da:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043dc:	4815      	ldr	r0, [pc, #84]	; (8004434 <MX_TIM1_Init+0x6c>)
 80043de:	4a16      	ldr	r2, [pc, #88]	; (8004438 <MX_TIM1_Init+0x70>)
 80043e0:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 85-1;
 80043e2:	2254      	movs	r2, #84	; 0x54
 80043e4:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e6:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1;
 80043e8:	2201      	movs	r2, #1
 80043ea:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ec:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80043ee:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043f2:	f004 f83f 	bl	8008474 <HAL_TIM_Base_Init>
 80043f6:	b9a0      	cbnz	r0, 8004422 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043fe:	a904      	add	r1, sp, #16
 8004400:	480c      	ldr	r0, [pc, #48]	; (8004434 <MX_TIM1_Init+0x6c>)
 8004402:	f004 f93b 	bl	800867c <HAL_TIM_ConfigClockSource>
 8004406:	b978      	cbnz	r0, 8004428 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004408:	2320      	movs	r3, #32
 800440a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004410:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004412:	a901      	add	r1, sp, #4
 8004414:	4807      	ldr	r0, [pc, #28]	; (8004434 <MX_TIM1_Init+0x6c>)
 8004416:	f004 fad3 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 800441a:	b940      	cbnz	r0, 800442e <MX_TIM1_Init+0x66>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800441c:	b009      	add	sp, #36	; 0x24
 800441e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004422:	f7fe ffcb 	bl	80033bc <Error_Handler>
 8004426:	e7e7      	b.n	80043f8 <MX_TIM1_Init+0x30>
    Error_Handler();
 8004428:	f7fe ffc8 	bl	80033bc <Error_Handler>
 800442c:	e7ec      	b.n	8004408 <MX_TIM1_Init+0x40>
    Error_Handler();
 800442e:	f7fe ffc5 	bl	80033bc <Error_Handler>
}
 8004432:	e7f3      	b.n	800441c <MX_TIM1_Init+0x54>
 8004434:	2001686c 	.word	0x2001686c
 8004438:	40012c00 	.word	0x40012c00

0800443c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800443c:	b500      	push	{lr}
 800443e:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004440:	2300      	movs	r3, #0
 8004442:	930a      	str	r3, [sp, #40]	; 0x28
 8004444:	930b      	str	r3, [sp, #44]	; 0x2c
 8004446:	930c      	str	r3, [sp, #48]	; 0x30
 8004448:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800444a:	9307      	str	r3, [sp, #28]
 800444c:	9308      	str	r3, [sp, #32]
 800444e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	9302      	str	r3, [sp, #8]
 8004456:	9303      	str	r3, [sp, #12]
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	9305      	str	r3, [sp, #20]
 800445c:	9306      	str	r3, [sp, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800445e:	4820      	ldr	r0, [pc, #128]	; (80044e0 <MX_TIM2_Init+0xa4>)
 8004460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004464:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 85-1;
 8004466:	2254      	movs	r2, #84	; 0x54
 8004468:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1023;
 800446c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004470:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004472:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004474:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004476:	f003 fffd 	bl	8008474 <HAL_TIM_Base_Init>
 800447a:	bb10      	cbnz	r0, 80044c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800447c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004480:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004482:	a90a      	add	r1, sp, #40	; 0x28
 8004484:	4816      	ldr	r0, [pc, #88]	; (80044e0 <MX_TIM2_Init+0xa4>)
 8004486:	f004 f8f9 	bl	800867c <HAL_TIM_ConfigClockSource>
 800448a:	b9e8      	cbnz	r0, 80044c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800448c:	4814      	ldr	r0, [pc, #80]	; (80044e0 <MX_TIM2_Init+0xa4>)
 800448e:	f004 f821 	bl	80084d4 <HAL_TIM_OC_Init>
 8004492:	b9e0      	cbnz	r0, 80044ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004494:	2300      	movs	r3, #0
 8004496:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800449a:	a907      	add	r1, sp, #28
 800449c:	4810      	ldr	r0, [pc, #64]	; (80044e0 <MX_TIM2_Init+0xa4>)
 800449e:	f004 fa8f 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 80044a2:	b9b8      	cbnz	r0, 80044d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80044a4:	2200      	movs	r2, #0
 80044a6:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 1023;
 80044a8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80044ac:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044ae:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044b0:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044b2:	4669      	mov	r1, sp
 80044b4:	480a      	ldr	r0, [pc, #40]	; (80044e0 <MX_TIM2_Init+0xa4>)
 80044b6:	f004 f897 	bl	80085e8 <HAL_TIM_OC_ConfigChannel>
 80044ba:	b970      	cbnz	r0, 80044da <MX_TIM2_Init+0x9e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044bc:	b00f      	add	sp, #60	; 0x3c
 80044be:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80044c2:	f7fe ff7b 	bl	80033bc <Error_Handler>
 80044c6:	e7d9      	b.n	800447c <MX_TIM2_Init+0x40>
    Error_Handler();
 80044c8:	f7fe ff78 	bl	80033bc <Error_Handler>
 80044cc:	e7de      	b.n	800448c <MX_TIM2_Init+0x50>
    Error_Handler();
 80044ce:	f7fe ff75 	bl	80033bc <Error_Handler>
 80044d2:	e7df      	b.n	8004494 <MX_TIM2_Init+0x58>
    Error_Handler();
 80044d4:	f7fe ff72 	bl	80033bc <Error_Handler>
 80044d8:	e7e4      	b.n	80044a4 <MX_TIM2_Init+0x68>
    Error_Handler();
 80044da:	f7fe ff6f 	bl	80033bc <Error_Handler>
}
 80044de:	e7ed      	b.n	80044bc <MX_TIM2_Init+0x80>
 80044e0:	200168b8 	.word	0x200168b8

080044e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044e4:	b500      	push	{lr}
 80044e6:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044e8:	2300      	movs	r3, #0
 80044ea:	9304      	str	r3, [sp, #16]
 80044ec:	9305      	str	r3, [sp, #20]
 80044ee:	9306      	str	r3, [sp, #24]
 80044f0:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044f8:	4814      	ldr	r0, [pc, #80]	; (800454c <MX_TIM3_Init+0x68>)
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <MX_TIM3_Init+0x6c>)
 80044fc:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 85-1;
 80044fe:	2254      	movs	r2, #84	; 0x54
 8004500:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004502:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1;
 8004504:	2201      	movs	r2, #1
 8004506:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004508:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800450a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800450c:	f003 ffb2 	bl	8008474 <HAL_TIM_Base_Init>
 8004510:	b998      	cbnz	r0, 800453a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004516:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004518:	a904      	add	r1, sp, #16
 800451a:	480c      	ldr	r0, [pc, #48]	; (800454c <MX_TIM3_Init+0x68>)
 800451c:	f004 f8ae 	bl	800867c <HAL_TIM_ConfigClockSource>
 8004520:	b970      	cbnz	r0, 8004540 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004522:	2320      	movs	r3, #32
 8004524:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800452a:	a901      	add	r1, sp, #4
 800452c:	4807      	ldr	r0, [pc, #28]	; (800454c <MX_TIM3_Init+0x68>)
 800452e:	f004 fa47 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004532:	b940      	cbnz	r0, 8004546 <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004534:	b009      	add	sp, #36	; 0x24
 8004536:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800453a:	f7fe ff3f 	bl	80033bc <Error_Handler>
 800453e:	e7e8      	b.n	8004512 <MX_TIM3_Init+0x2e>
    Error_Handler();
 8004540:	f7fe ff3c 	bl	80033bc <Error_Handler>
 8004544:	e7ed      	b.n	8004522 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8004546:	f7fe ff39 	bl	80033bc <Error_Handler>
}
 800454a:	e7f3      	b.n	8004534 <MX_TIM3_Init+0x50>
 800454c:	20016904 	.word	0x20016904
 8004550:	40000400 	.word	0x40000400

08004554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004554:	b500      	push	{lr}
 8004556:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM1)
 8004558:	6803      	ldr	r3, [r0, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <HAL_TIM_Base_MspInit+0x74>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d008      	beq.n	8004572 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d010      	beq.n	8004588 <HAL_TIM_Base_MspInit+0x34>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8004566:	4a19      	ldr	r2, [pc, #100]	; (80045cc <HAL_TIM_Base_MspInit+0x78>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d021      	beq.n	80045b0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800456c:	b005      	add	sp, #20
 800456e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <HAL_TIM_Base_MspInit+0x7c>)
 8004574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457a:	661a      	str	r2, [r3, #96]	; 0x60
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	9b01      	ldr	r3, [sp, #4]
 8004586:	e7f1      	b.n	800456c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004588:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800458c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	659a      	str	r2, [r3, #88]	; 0x58
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	9302      	str	r3, [sp, #8]
 800459c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800459e:	2200      	movs	r2, #0
 80045a0:	4611      	mov	r1, r2
 80045a2:	201c      	movs	r0, #28
 80045a4:	f001 fad2 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045a8:	201c      	movs	r0, #28
 80045aa:	f001 fb05 	bl	8005bb8 <HAL_NVIC_EnableIRQ>
 80045ae:	e7dd      	b.n	800456c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <HAL_TIM_Base_MspInit+0x7c>)
 80045b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045b4:	f042 0202 	orr.w	r2, r2, #2
 80045b8:	659a      	str	r2, [r3, #88]	; 0x58
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	9303      	str	r3, [sp, #12]
 80045c2:	9b03      	ldr	r3, [sp, #12]
}
 80045c4:	e7d2      	b.n	800456c <HAL_TIM_Base_MspInit+0x18>
 80045c6:	bf00      	nop
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40021000 	.word	0x40021000

080045d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045d4:	480d      	ldr	r0, [pc, #52]	; (800460c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045d8:	480d      	ldr	r0, [pc, #52]	; (8004610 <LoopForever+0x6>)
  ldr r1, =_edata
 80045da:	490e      	ldr	r1, [pc, #56]	; (8004614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045dc:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <LoopForever+0xe>)
  movs r3, #0
 80045de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80045e0:	e002      	b.n	80045e8 <LoopCopyDataInit>

080045e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045e6:	3304      	adds	r3, #4

080045e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045ec:	d3f9      	bcc.n	80045e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <LoopForever+0x12>)
  ldr r4, =_ebss
 80045f0:	4c0b      	ldr	r4, [pc, #44]	; (8004620 <LoopForever+0x16>)
  movs r3, #0
 80045f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045f4:	e001      	b.n	80045fa <LoopFillZerobss>

080045f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045f8:	3204      	adds	r2, #4

080045fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045fc:	d3fb      	bcc.n	80045f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045fe:	f7ff fed9 	bl	80043b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004602:	f012 fda5 	bl	8017150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004606:	f7fe fd79 	bl	80030fc <main>

0800460a <LoopForever>:

LoopForever:
    b LoopForever
 800460a:	e7fe      	b.n	800460a <LoopForever>
  ldr   r0, =_estack
 800460c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004614:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8004618:	0801c4d8 	.word	0x0801c4d8
  ldr r2, =_sbss
 800461c:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8004620:	20016aa0 	.word	0x20016aa0

08004624 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004624:	e7fe      	b.n	8004624 <ADC3_IRQHandler>
	...

08004628 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_InitTick+0x44>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	b90b      	cbnz	r3, 8004632 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800462e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004630:	4770      	bx	lr
{
 8004632:	b510      	push	{r4, lr}
 8004634:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800463a:	fbb0 f3f3 	udiv	r3, r0, r3
 800463e:	4a0c      	ldr	r2, [pc, #48]	; (8004670 <HAL_InitTick+0x48>)
 8004640:	6810      	ldr	r0, [r2, #0]
 8004642:	fbb0 f0f3 	udiv	r0, r0, r3
 8004646:	f001 fac5 	bl	8005bd4 <HAL_SYSTICK_Config>
 800464a:	b968      	cbnz	r0, 8004668 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800464c:	2c0f      	cmp	r4, #15
 800464e:	d901      	bls.n	8004654 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8004650:	2001      	movs	r0, #1
 8004652:	e00a      	b.n	800466a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004654:	2200      	movs	r2, #0
 8004656:	4621      	mov	r1, r4
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	f001 fa76 	bl	8005b4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <HAL_InitTick+0x4c>)
 8004662:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8004664:	2000      	movs	r0, #0
 8004666:	e000      	b.n	800466a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8004668:	2001      	movs	r0, #1
}
 800466a:	bd10      	pop	{r4, pc}
 800466c:	2000001c 	.word	0x2000001c
 8004670:	20000018 	.word	0x20000018
 8004674:	20000020 	.word	0x20000020

08004678 <HAL_Init>:
{
 8004678:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800467a:	2003      	movs	r0, #3
 800467c:	f001 fa54 	bl	8005b28 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004680:	2000      	movs	r0, #0
 8004682:	f7ff ffd1 	bl	8004628 <HAL_InitTick>
 8004686:	b110      	cbz	r0, 800468e <HAL_Init+0x16>
    status = HAL_ERROR;
 8004688:	2401      	movs	r4, #1
}
 800468a:	4620      	mov	r0, r4
 800468c:	bd10      	pop	{r4, pc}
 800468e:	4604      	mov	r4, r0
    HAL_MspInit();
 8004690:	f7ff fdb6 	bl	8004200 <HAL_MspInit>
 8004694:	e7f9      	b.n	800468a <HAL_Init+0x12>
	...

08004698 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004698:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <HAL_IncTick+0x10>)
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	4903      	ldr	r1, [pc, #12]	; (80046ac <HAL_IncTick+0x14>)
 800469e:	6809      	ldr	r1, [r1, #0]
 80046a0:	440b      	add	r3, r1
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20016950 	.word	0x20016950
 80046ac:	2000001c 	.word	0x2000001c

080046b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80046b0:	4b01      	ldr	r3, [pc, #4]	; (80046b8 <HAL_GetTick+0x8>)
 80046b2:	6818      	ldr	r0, [r3, #0]
}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20016950 	.word	0x20016950

080046bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80046c0:	f7ff fff6 	bl	80046b0 <HAL_GetTick>
 80046c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80046ca:	d002      	beq.n	80046d2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80046cc:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <HAL_Delay+0x24>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046d2:	f7ff ffed 	bl	80046b0 <HAL_GetTick>
 80046d6:	1b40      	subs	r0, r0, r5
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d3fa      	bcc.n	80046d2 <HAL_Delay+0x16>
  {
  }
}
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
 80046de:	bf00      	nop
 80046e0:	2000001c 	.word	0x2000001c

080046e4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80046e4:	4a03      	ldr	r2, [pc, #12]	; (80046f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80046e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80046e8:	f023 0302 	bic.w	r3, r3, #2
 80046ec:	4303      	orrs	r3, r0
 80046ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40010000 	.word	0x40010000

080046f8 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80046f8:	4a02      	ldr	r2, [pc, #8]	; (8004704 <HAL_SYSCFG_DisableVREFBUF+0xc>)
 80046fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004702:	4770      	bx	lr
 8004704:	40010000 	.word	0x40010000

08004708 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004708:	b530      	push	{r4, r5, lr}
 800470a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800470c:	2300      	movs	r3, #0
 800470e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004710:	2800      	cmp	r0, #0
 8004712:	f000 810f 	beq.w	8004934 <HAL_ADC_Init+0x22c>
 8004716:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004718:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80cb 	beq.w	80048b6 <HAL_ADC_Init+0x1ae>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004720:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8004728:	d005      	beq.n	8004736 <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8004730:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004734:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004736:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004738:	6893      	ldr	r3, [r2, #8]
 800473a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800473e:	d119      	bne.n	8004774 <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCx->CR,
 8004740:	6893      	ldr	r3, [r2, #8]
 8004742:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004746:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004750:	4b86      	ldr	r3, [pc, #536]	; (800496c <HAL_ADC_Init+0x264>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	099b      	lsrs	r3, r3, #6
 8004756:	4a86      	ldr	r2, [pc, #536]	; (8004970 <HAL_ADC_Init+0x268>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	099b      	lsrs	r3, r3, #6
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004764:	9b01      	ldr	r3, [sp, #4]
 8004766:	b12b      	cbz	r3, 8004774 <HAL_ADC_Init+0x6c>
    {
      wait_loop_index--;
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f9      	bne.n	8004768 <HAL_ADC_Init+0x60>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004774:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004776:	688b      	ldr	r3, [r1, #8]
 8004778:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800477c:	f040 80a2 	bne.w	80048c4 <HAL_ADC_Init+0x1bc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004780:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004782:	f043 0310 	orr.w	r3, r3, #16
 8004786:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004788:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004790:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004792:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004794:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	f002 0204 	and.w	r2, r2, #4
 800479e:	4313      	orrs	r3, r2
 80047a0:	f040 80c1 	bne.w	8004926 <HAL_ADC_Init+0x21e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80047aa:	f043 0302 	orr.w	r3, r3, #2
 80047ae:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047b0:	688b      	ldr	r3, [r1, #8]
 80047b2:	f013 0f01 	tst.w	r3, #1
 80047b6:	d11b      	bne.n	80047f0 <HAL_ADC_Init+0xe8>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80047bc:	f000 80c9 	beq.w	8004952 <HAL_ADC_Init+0x24a>
 80047c0:	4b6c      	ldr	r3, [pc, #432]	; (8004974 <HAL_ADC_Init+0x26c>)
 80047c2:	4299      	cmp	r1, r3
 80047c4:	f000 80b8 	beq.w	8004938 <HAL_ADC_Init+0x230>
 80047c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80047cc:	6899      	ldr	r1, [r3, #8]
 80047ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a68      	ldr	r2, [pc, #416]	; (8004978 <HAL_ADC_Init+0x270>)
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	430b      	orrs	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	f013 0f01 	tst.w	r3, #1
 80047e0:	d106      	bne.n	80047f0 <HAL_ADC_Init+0xe8>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047e2:	4a66      	ldr	r2, [pc, #408]	; (800497c <HAL_ADC_Init+0x274>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047e4:	6893      	ldr	r3, [r2, #8]
 80047e6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80047ea:	6861      	ldr	r1, [r4, #4]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6093      	str	r3, [r2, #8]
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047f0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80047f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047f6:	68e1      	ldr	r1, [r4, #12]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	68a1      	ldr	r1, [r4, #8]
 80047fc:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047fe:	7f61      	ldrb	r1, [r4, #29]
                hadc->Init.DataAlign                                                   |
 8004800:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004808:	2a01      	cmp	r2, #1
 800480a:	d05d      	beq.n	80048c8 <HAL_ADC_Init+0x1c0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800480c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800480e:	b122      	cbz	r2, 800481a <HAL_ADC_Init+0x112>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004810:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004814:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004816:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004818:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800481a:	6821      	ldr	r1, [r4, #0]
 800481c:	68cd      	ldr	r5, [r1, #12]
 800481e:	4a58      	ldr	r2, [pc, #352]	; (8004980 <HAL_ADC_Init+0x278>)
 8004820:	402a      	ands	r2, r5
 8004822:	431a      	orrs	r2, r3
 8004824:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	6913      	ldr	r3, [r2, #16]
 800482a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800482e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004830:	430b      	orrs	r3, r1
 8004832:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004834:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004836:	688a      	ldr	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004838:	688b      	ldr	r3, [r1, #8]
 800483a:	f003 0308 	and.w	r3, r3, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800483e:	f002 0204 	and.w	r2, r2, #4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004842:	4313      	orrs	r3, r2
 8004844:	d128      	bne.n	8004898 <HAL_ADC_Init+0x190>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004846:	68ca      	ldr	r2, [r1, #12]
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004848:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800484a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800484e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004850:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004854:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004858:	f022 0202 	bic.w	r2, r2, #2
 800485c:	4313      	orrs	r3, r2
 800485e:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d035      	beq.n	80048d2 <HAL_ADC_Init+0x1ca>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	6913      	ldr	r3, [r2, #16]
 800486a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004870:	6822      	ldr	r2, [r4, #0]
 8004872:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004876:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800487a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800487e:	6921      	ldr	r1, [r4, #16]
 8004880:	430b      	orrs	r3, r1
 8004882:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004886:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800488a:	2b01      	cmp	r3, #1
 800488c:	d030      	beq.n	80048f0 <HAL_ADC_Init+0x1e8>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800488e:	6822      	ldr	r2, [r4, #0]
 8004890:	6913      	ldr	r3, [r2, #16]
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004898:	6963      	ldr	r3, [r4, #20]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d03a      	beq.n	8004914 <HAL_ADC_Init+0x20c>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80048a2:	f023 030f 	bic.w	r3, r3, #15
 80048a6:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80048b4:	e03c      	b.n	8004930 <HAL_ADC_Init+0x228>
    HAL_ADC_MspInit(hadc);
 80048b6:	f7fc fb7f 	bl	8000fb8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80048ba:	2300      	movs	r3, #0
 80048bc:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80048be:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80048c2:	e72d      	b.n	8004720 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c4:	2000      	movs	r0, #0
 80048c6:	e764      	b.n	8004792 <HAL_ADC_Init+0x8a>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80048c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048ca:	3a01      	subs	r2, #1
 80048cc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80048d0:	e79c      	b.n	800480c <HAL_ADC_Init+0x104>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	6913      	ldr	r3, [r2, #16]
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048da:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80048e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80048ee:	e7ca      	b.n	8004886 <HAL_ADC_Init+0x17e>
        MODIFY_REG(hadc->Instance->CFGR2,
 80048f0:	6821      	ldr	r1, [r4, #0]
 80048f2:	690a      	ldr	r2, [r1, #16]
 80048f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80048f6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80048f8:	432b      	orrs	r3, r5
 80048fa:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80048fe:	f022 0204 	bic.w	r2, r2, #4
 8004902:	4313      	orrs	r3, r2
 8004904:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004906:	4313      	orrs	r3, r2
 8004908:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800490a:	4313      	orrs	r3, r2
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	610b      	str	r3, [r1, #16]
 8004912:	e7c1      	b.n	8004898 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004914:	6821      	ldr	r1, [r4, #0]
 8004916:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004918:	6a23      	ldr	r3, [r4, #32]
 800491a:	3b01      	subs	r3, #1
 800491c:	f022 020f 	bic.w	r2, r2, #15
 8004920:	4313      	orrs	r3, r2
 8004922:	630b      	str	r3, [r1, #48]	; 0x30
 8004924:	e7c0      	b.n	80048a8 <HAL_ADC_Init+0x1a0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004926:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004928:	f043 0310 	orr.w	r3, r3, #16
 800492c:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800492e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004930:	b003      	add	sp, #12
 8004932:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004934:	2001      	movs	r0, #1
 8004936:	e7fb      	b.n	8004930 <HAL_ADC_Init+0x228>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004942:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004944:	4313      	orrs	r3, r2
 8004946:	f013 0f01 	tst.w	r3, #1
 800494a:	f47f af51 	bne.w	80047f0 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800494e:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_ADC_Init+0x27c>)
 8004950:	e748      	b.n	80047e4 <HAL_ADC_Init+0xdc>
 8004952:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800495c:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800495e:	4313      	orrs	r3, r2
 8004960:	f013 0f01 	tst.w	r3, #1
 8004964:	f47f af44 	bne.w	80047f0 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004968:	4a06      	ldr	r2, [pc, #24]	; (8004984 <HAL_ADC_Init+0x27c>)
 800496a:	e73b      	b.n	80047e4 <HAL_ADC_Init+0xdc>
 800496c:	20000018 	.word	0x20000018
 8004970:	053e2d63 	.word	0x053e2d63
 8004974:	50000100 	.word	0x50000100
 8004978:	50000600 	.word	0x50000600
 800497c:	50000700 	.word	0x50000700
 8004980:	fff04007 	.word	0xfff04007
 8004984:	50000300 	.word	0x50000300

08004988 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004988:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800498a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800498c:	f7fe ffa1 	bl	80038d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004990:	bd08      	pop	{r3, pc}

08004992 <HAL_ADC_ErrorCallback>:
}
 8004992:	4770      	bx	lr

08004994 <HAL_ADC_IRQHandler>:
{
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004998:	6803      	ldr	r3, [r0, #0]
 800499a:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800499c:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800499e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049a2:	d05b      	beq.n	8004a5c <HAL_ADC_IRQHandler+0xc8>
 80049a4:	489f      	ldr	r0, [pc, #636]	; (8004c24 <HAL_ADC_IRQHandler+0x290>)
 80049a6:	4aa0      	ldr	r2, [pc, #640]	; (8004c28 <HAL_ADC_IRQHandler+0x294>)
 80049a8:	49a0      	ldr	r1, [pc, #640]	; (8004c2c <HAL_ADC_IRQHandler+0x298>)
 80049aa:	4283      	cmp	r3, r0
 80049ac:	bf18      	it	ne
 80049ae:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049b0:	6897      	ldr	r7, [r2, #8]
 80049b2:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80049b6:	f015 0f02 	tst.w	r5, #2
 80049ba:	d010      	beq.n	80049de <HAL_ADC_IRQHandler+0x4a>
 80049bc:	f016 0f02 	tst.w	r6, #2
 80049c0:	d00d      	beq.n	80049de <HAL_ADC_IRQHandler+0x4a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049c4:	f013 0f10 	tst.w	r3, #16
 80049c8:	d103      	bne.n	80049d2 <HAL_ADC_IRQHandler+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80049ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 fff5 	bl	80059c2 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	2202      	movs	r2, #2
 80049dc:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80049de:	f015 0f04 	tst.w	r5, #4
 80049e2:	d002      	beq.n	80049ea <HAL_ADC_IRQHandler+0x56>
 80049e4:	f016 0f04 	tst.w	r6, #4
 80049e8:	d105      	bne.n	80049f6 <HAL_ADC_IRQHandler+0x62>
 80049ea:	f015 0f08 	tst.w	r5, #8
 80049ee:	d045      	beq.n	8004a7c <HAL_ADC_IRQHandler+0xe8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80049f0:	f016 0f08 	tst.w	r6, #8
 80049f4:	d042      	beq.n	8004a7c <HAL_ADC_IRQHandler+0xe8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049f8:	f013 0f10 	tst.w	r3, #16
 80049fc:	d103      	bne.n	8004a06 <HAL_ADC_IRQHandler+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a04:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a06:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004a0e:	d12f      	bne.n	8004a70 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a10:	4a84      	ldr	r2, [pc, #528]	; (8004c24 <HAL_ADC_IRQHandler+0x290>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	f000 8119 	beq.w	8004c4a <HAL_ADC_IRQHandler+0x2b6>
 8004a18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f000 811f 	beq.w	8004c60 <HAL_ADC_IRQHandler+0x2cc>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a22:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004a24:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8004a28:	d122      	bne.n	8004a70 <HAL_ADC_IRQHandler+0xdc>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f012 0f08 	tst.w	r2, #8
 8004a30:	d01e      	beq.n	8004a70 <HAL_ADC_IRQHandler+0xdc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	f012 0f04 	tst.w	r2, #4
 8004a38:	d112      	bne.n	8004a60 <HAL_ADC_IRQHandler+0xcc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	f022 020c 	bic.w	r2, r2, #12
 8004a40:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a4c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004a50:	d10e      	bne.n	8004a70 <HAL_ADC_IRQHandler+0xdc>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004a5a:	e009      	b.n	8004a70 <HAL_ADC_IRQHandler+0xdc>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a5c:	4a72      	ldr	r2, [pc, #456]	; (8004c28 <HAL_ADC_IRQHandler+0x294>)
 8004a5e:	e7a7      	b.n	80049b0 <HAL_ADC_IRQHandler+0x1c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a60:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a62:	f043 0310 	orr.w	r3, r3, #16
 8004a66:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a68:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7fe ff2f 	bl	80038d4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	220c      	movs	r2, #12
 8004a7a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a7c:	f015 0f20 	tst.w	r5, #32
 8004a80:	d002      	beq.n	8004a88 <HAL_ADC_IRQHandler+0xf4>
 8004a82:	f016 0f20 	tst.w	r6, #32
 8004a86:	d105      	bne.n	8004a94 <HAL_ADC_IRQHandler+0x100>
 8004a88:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a8c:	d04f      	beq.n	8004b2e <HAL_ADC_IRQHandler+0x19a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a8e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8004a92:	d04c      	beq.n	8004b2e <HAL_ADC_IRQHandler+0x19a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a96:	f013 0f10 	tst.w	r3, #16
 8004a9a:	d103      	bne.n	8004aa4 <HAL_ADC_IRQHandler+0x110>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004aa2:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004aa4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aa8:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004aac:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aae:	495d      	ldr	r1, [pc, #372]	; (8004c24 <HAL_ADC_IRQHandler+0x290>)
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	f000 80bf 	beq.w	8004c34 <HAL_ADC_IRQHandler+0x2a0>
 8004ab6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004aba:	428b      	cmp	r3, r1
 8004abc:	d026      	beq.n	8004b0c <HAL_ADC_IRQHandler+0x178>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004abe:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004ac0:	bb7a      	cbnz	r2, 8004b22 <HAL_ADC_IRQHandler+0x18e>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004ac2:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8004ac6:	d005      	beq.n	8004ad4 <HAL_ADC_IRQHandler+0x140>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004ac8:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 8004acc:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004ad0:	4302      	orrs	r2, r0
 8004ad2:	d126      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x18e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ada:	d022      	beq.n	8004b22 <HAL_ADC_IRQHandler+0x18e>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004adc:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8004ae0:	d11f      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x18e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	f012 0f08 	tst.w	r2, #8
 8004ae8:	d113      	bne.n	8004b12 <HAL_ADC_IRQHandler+0x17e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004af0:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004af2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af8:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004afa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004afc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b00:	d10f      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x18e>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004b0a:	e00a      	b.n	8004b22 <HAL_ADC_IRQHandler+0x18e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b0c:	f8df c120 	ldr.w	ip, [pc, #288]	; 8004c30 <HAL_ADC_IRQHandler+0x29c>
 8004b10:	e092      	b.n	8004c38 <HAL_ADC_IRQHandler+0x2a4>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b14:	f043 0310 	orr.w	r3, r3, #16
 8004b18:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b1a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b22:	4620      	mov	r0, r4
 8004b24:	f000 ff4a 	bl	80059bc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	2260      	movs	r2, #96	; 0x60
 8004b2c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b2e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004b32:	d002      	beq.n	8004b3a <HAL_ADC_IRQHandler+0x1a6>
 8004b34:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004b38:	d138      	bne.n	8004bac <HAL_ADC_IRQHandler+0x218>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004b3e:	d002      	beq.n	8004b46 <HAL_ADC_IRQHandler+0x1b2>
 8004b40:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004b44:	d13d      	bne.n	8004bc2 <HAL_ADC_IRQHandler+0x22e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b46:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004b4a:	d002      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x1be>
 8004b4c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8004b50:	d143      	bne.n	8004bda <HAL_ADC_IRQHandler+0x246>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b52:	f015 0f10 	tst.w	r5, #16
 8004b56:	d022      	beq.n	8004b9e <HAL_ADC_IRQHandler+0x20a>
 8004b58:	f016 0f10 	tst.w	r6, #16
 8004b5c:	d01f      	beq.n	8004b9e <HAL_ADC_IRQHandler+0x20a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b60:	b17b      	cbz	r3, 8004b82 <HAL_ADC_IRQHandler+0x1ee>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b62:	2f00      	cmp	r7, #0
 8004b64:	d047      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x262>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004b6c:	d041      	beq.n	8004bf2 <HAL_ADC_IRQHandler+0x25e>
 8004b6e:	482d      	ldr	r0, [pc, #180]	; (8004c24 <HAL_ADC_IRQHandler+0x290>)
 8004b70:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <HAL_ADC_IRQHandler+0x294>)
 8004b72:	492e      	ldr	r1, [pc, #184]	; (8004c2c <HAL_ADC_IRQHandler+0x298>)
 8004b74:	4282      	cmp	r2, r0
 8004b76:	bf18      	it	ne
 8004b78:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8004b80:	d00a      	beq.n	8004b98 <HAL_ADC_IRQHandler+0x204>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004b82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b88:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b8c:	f043 0302 	orr.w	r3, r3, #2
 8004b90:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff fefd 	bl	8004992 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004b9e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004ba2:	d002      	beq.n	8004baa <HAL_ADC_IRQHandler+0x216>
 8004ba4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8004ba8:	d12b      	bne.n	8004c02 <HAL_ADC_IRQHandler+0x26e>
}
 8004baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004bac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7fe feaf 	bl	8003918 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e7bb      	b.n	8004b3a <HAL_ADC_IRQHandler+0x1a6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004bc2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc8:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7fe fec6 	bl	800395c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e7b5      	b.n	8004b46 <HAL_ADC_IRQHandler+0x1b2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004bda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be0:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 feec 	bl	80059c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e7af      	b.n	8004b52 <HAL_ADC_IRQHandler+0x1be>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_ADC_IRQHandler+0x294>)
 8004bf4:	e7c1      	b.n	8004b7a <HAL_ADC_IRQHandler+0x1e6>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f013 0f01 	tst.w	r3, #1
 8004bfe:	d0cb      	beq.n	8004b98 <HAL_ADC_IRQHandler+0x204>
 8004c00:	e7bf      	b.n	8004b82 <HAL_ADC_IRQHandler+0x1ee>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c08:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c0c:	f043 0308 	orr.w	r3, r3, #8
 8004c10:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c18:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f000 fecf 	bl	80059be <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8004c20:	e7c3      	b.n	8004baa <HAL_ADC_IRQHandler+0x216>
 8004c22:	bf00      	nop
 8004c24:	50000100 	.word	0x50000100
 8004c28:	50000300 	.word	0x50000300
 8004c2c:	50000700 	.word	0x50000700
 8004c30:	50000400 	.word	0x50000400
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c34:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c38:	21c1      	movs	r1, #193	; 0xc1
 8004c3a:	40f9      	lsrs	r1, r7
 8004c3c:	f011 0f01 	tst.w	r1, #1
 8004c40:	f47f af3d 	bne.w	8004abe <HAL_ADC_IRQHandler+0x12a>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c44:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8004c48:	e73a      	b.n	8004ac0 <HAL_ADC_IRQHandler+0x12c>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c4a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004c4e:	f240 2221 	movw	r2, #545	; 0x221
 8004c52:	40fa      	lsrs	r2, r7
 8004c54:	f012 0f01 	tst.w	r2, #1
 8004c58:	f47f aee3 	bne.w	8004a22 <HAL_ADC_IRQHandler+0x8e>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c5c:	68ca      	ldr	r2, [r1, #12]
 8004c5e:	e6e1      	b.n	8004a24 <HAL_ADC_IRQHandler+0x90>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c60:	4900      	ldr	r1, [pc, #0]	; (8004c64 <HAL_ADC_IRQHandler+0x2d0>)
 8004c62:	e7f4      	b.n	8004c4e <HAL_ADC_IRQHandler+0x2ba>
 8004c64:	50000400 	.word	0x50000400

08004c68 <ADC_DMAConvCplt>:
{
 8004c68:	b508      	push	{r3, lr}
 8004c6a:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c6e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004c70:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004c74:	d130      	bne.n	8004cd8 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c76:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c7c:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c7e:	6803      	ldr	r3, [r0, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f012 0f08 	tst.w	r2, #8
 8004c86:	d014      	beq.n	8004cb2 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004c8e:	d120      	bne.n	8004cd2 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004c96:	d11c      	bne.n	8004cd2 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c9e:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ca0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004ca2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004ca6:	d114      	bne.n	8004cd2 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ca8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	65c3      	str	r3, [r0, #92]	; 0x5c
 8004cb0:	e00f      	b.n	8004cd2 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f013 0f02 	tst.w	r3, #2
 8004cb8:	d10b      	bne.n	8004cd2 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc0:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cc2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004cc4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004cc8:	d103      	bne.n	8004cd2 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8004cd2:	f7fe fdff 	bl	80038d4 <HAL_ADC_ConvCpltCallback>
}
 8004cd6:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cd8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004cda:	f012 0f10 	tst.w	r2, #16
 8004cde:	d104      	bne.n	8004cea <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ce0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004ce2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	4790      	blx	r2
}
 8004ce8:	e7f5      	b.n	8004cd6 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8004cea:	f7ff fe52 	bl	8004992 <HAL_ADC_ErrorCallback>
 8004cee:	e7f2      	b.n	8004cd6 <ADC_DMAConvCplt+0x6e>

08004cf0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cf2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cf4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cfc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d04:	f7ff fe45 	bl	8004992 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d08:	bd08      	pop	{r3, pc}
	...

08004d0c <HAL_ADC_ConfigChannel>:
{
 8004d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d0e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8004d10:	2200      	movs	r2, #0
 8004d12:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004d14:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8004d18:	2a01      	cmp	r2, #1
 8004d1a:	f000 825a 	beq.w	80051d2 <HAL_ADC_ConfigChannel+0x4c6>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2201      	movs	r2, #1
 8004d22:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d26:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d28:	6890      	ldr	r0, [r2, #8]
 8004d2a:	f010 0f04 	tst.w	r0, #4
 8004d2e:	d009      	beq.n	8004d44 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d32:	f042 0220 	orr.w	r2, r2, #32
 8004d36:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004d40:	b003      	add	sp, #12
 8004d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d44:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004d46:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8004d4a:	f00e 0e0c 	and.w	lr, lr, #12
 8004d4e:	3230      	adds	r2, #48	; 0x30
  MODIFY_REG(*preg,
 8004d50:	f852 400e 	ldr.w	r4, [r2, lr]
 8004d54:	f000 0c1f 	and.w	ip, r0, #31
 8004d58:	6808      	ldr	r0, [r1, #0]
 8004d5a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8004d62:	251f      	movs	r5, #31
 8004d64:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004d68:	ea24 0c0c 	bic.w	ip, r4, ip
 8004d6c:	ea40 000c 	orr.w	r0, r0, ip
 8004d70:	f842 000e 	str.w	r0, [r2, lr]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d74:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d76:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d78:	68a2      	ldr	r2, [r4, #8]
 8004d7a:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d7e:	f000 0004 	and.w	r0, r0, #4
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d82:	4302      	orrs	r2, r0
 8004d84:	d14f      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x11a>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d86:	688a      	ldr	r2, [r1, #8]
 8004d88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004d8c:	f000 8099 	beq.w	8004ec2 <HAL_ADC_ConfigChannel+0x1b6>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d90:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d92:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 8004d96:	f00c 0c04 	and.w	ip, ip, #4
 8004d9a:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8004d9c:	f854 000c 	ldr.w	r0, [r4, ip]
 8004da0:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8004da4:	2607      	movs	r6, #7
 8004da6:	40ae      	lsls	r6, r5
 8004da8:	ea20 0006 	bic.w	r0, r0, r6
 8004dac:	40aa      	lsls	r2, r5
 8004dae:	4302      	orrs	r2, r0
 8004db0:	f844 200c 	str.w	r2, [r4, ip]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004db4:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004db6:	6942      	ldr	r2, [r0, #20]
 8004db8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dbc:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004dbe:	694a      	ldr	r2, [r1, #20]
 8004dc0:	681c      	ldr	r4, [r3, #0]
 8004dc2:	68e0      	ldr	r0, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dc4:	690d      	ldr	r5, [r1, #16]
 8004dc6:	2d04      	cmp	r5, #4
 8004dc8:	f000 808f 	beq.w	8004eea <HAL_ADC_ConfigChannel+0x1de>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dcc:	3460      	adds	r4, #96	; 0x60
  MODIFY_REG(*preg,
 8004dce:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004dd2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004dd6:	0040      	lsls	r0, r0, #1
 8004dd8:	4082      	lsls	r2, r0
 8004dda:	6808      	ldr	r0, [r1, #0]
 8004ddc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004de0:	4eb1      	ldr	r6, [pc, #708]	; (80050a8 <HAL_ADC_ConfigChannel+0x39c>)
 8004de2:	403e      	ands	r6, r7
 8004de4:	4330      	orrs	r0, r6
 8004de6:	4302      	orrs	r2, r0
 8004de8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004dec:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004df0:	690c      	ldr	r4, [r1, #16]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8004df6:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8004dfa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004dfe:	698d      	ldr	r5, [r1, #24]
 8004e00:	432a      	orrs	r2, r5
 8004e02:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e06:	690d      	ldr	r5, [r1, #16]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8004e0c:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004e10:	7f0c      	ldrb	r4, [r1, #28]
 8004e12:	2c01      	cmp	r4, #1
 8004e14:	bf14      	ite	ne
 8004e16:	2400      	movne	r4, #0
 8004e18:	2401      	moveq	r4, #1
 8004e1a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004e1e:	ea42 6244 	orr.w	r2, r2, r4, lsl #25
 8004e22:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e26:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e28:	6890      	ldr	r0, [r2, #8]
 8004e2a:	f010 0f01 	tst.w	r0, #1
 8004e2e:	d112      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x14a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e30:	6808      	ldr	r0, [r1, #0]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004e32:	68cd      	ldr	r5, [r1, #12]
 8004e34:	4c9d      	ldr	r4, [pc, #628]	; (80050ac <HAL_ADC_ConfigChannel+0x3a0>)
 8004e36:	42a5      	cmp	r5, r4
    SET_BIT(ADCx->DIFSEL,
 8004e38:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8004e3c:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8004e40:	bf0c      	ite	eq
 8004e42:	4320      	orreq	r0, r4
    CLEAR_BIT(ADCx->DIFSEL,
 8004e44:	ea24 0000 	bicne.w	r0, r4, r0
 8004e48:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e4c:	68c8      	ldr	r0, [r1, #12]
 8004e4e:	4a97      	ldr	r2, [pc, #604]	; (80050ac <HAL_ADC_ConfigChannel+0x3a0>)
 8004e50:	4290      	cmp	r0, r2
 8004e52:	f000 80e1 	beq.w	8005018 <HAL_ADC_ConfigChannel+0x30c>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e56:	680a      	ldr	r2, [r1, #0]
 8004e58:	4995      	ldr	r1, [pc, #596]	; (80050b0 <HAL_ADC_ConfigChannel+0x3a4>)
 8004e5a:	420a      	tst	r2, r1
 8004e5c:	f000 81ad 	beq.w	80051ba <HAL_ADC_ConfigChannel+0x4ae>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8004e66:	f000 816b 	beq.w	8005140 <HAL_ADC_ConfigChannel+0x434>
 8004e6a:	4d92      	ldr	r5, [pc, #584]	; (80050b4 <HAL_ADC_ConfigChannel+0x3a8>)
 8004e6c:	4892      	ldr	r0, [pc, #584]	; (80050b8 <HAL_ADC_ConfigChannel+0x3ac>)
 8004e6e:	4c93      	ldr	r4, [pc, #588]	; (80050bc <HAL_ADC_ConfigChannel+0x3b0>)
 8004e70:	42a9      	cmp	r1, r5
 8004e72:	bf18      	it	ne
 8004e74:	4620      	movne	r0, r4
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004e76:	6880      	ldr	r0, [r0, #8]
 8004e78:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e7c:	4c90      	ldr	r4, [pc, #576]	; (80050c0 <HAL_ADC_ConfigChannel+0x3b4>)
 8004e7e:	42a2      	cmp	r2, r4
 8004e80:	f000 81a9 	beq.w	80051d6 <HAL_ADC_ConfigChannel+0x4ca>
 8004e84:	4c8f      	ldr	r4, [pc, #572]	; (80050c4 <HAL_ADC_ConfigChannel+0x3b8>)
 8004e86:	42a2      	cmp	r2, r4
 8004e88:	f000 81a5 	beq.w	80051d6 <HAL_ADC_ConfigChannel+0x4ca>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e8c:	4c8e      	ldr	r4, [pc, #568]	; (80050c8 <HAL_ADC_ConfigChannel+0x3bc>)
 8004e8e:	42a2      	cmp	r2, r4
 8004e90:	f040 817a 	bne.w	8005188 <HAL_ADC_ConfigChannel+0x47c>
 8004e94:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8004e98:	f040 8193 	bne.w	80051c2 <HAL_ADC_ConfigChannel+0x4b6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e9c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8004ea0:	f000 8170 	beq.w	8005184 <HAL_ADC_ConfigChannel+0x478>
 8004ea4:	4c83      	ldr	r4, [pc, #524]	; (80050b4 <HAL_ADC_ConfigChannel+0x3a8>)
 8004ea6:	4884      	ldr	r0, [pc, #528]	; (80050b8 <HAL_ADC_ConfigChannel+0x3ac>)
 8004ea8:	4a84      	ldr	r2, [pc, #528]	; (80050bc <HAL_ADC_ConfigChannel+0x3b0>)
 8004eaa:	42a1      	cmp	r1, r4
 8004eac:	bf18      	it	ne
 8004eae:	4610      	movne	r0, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004eb0:	6882      	ldr	r2, [r0, #8]
 8004eb2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004eb6:	432a      	orrs	r2, r5
 8004eb8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004ebc:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ebe:	2000      	movs	r0, #0
}
 8004ec0:	e73b      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ec2:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ec4:	0dc2      	lsrs	r2, r0, #23
 8004ec6:	f002 0204 	and.w	r2, r2, #4
 8004eca:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8004ecc:	58a5      	ldr	r5, [r4, r2]
 8004ece:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004ed2:	2607      	movs	r6, #7
 8004ed4:	fa06 f000 	lsl.w	r0, r6, r0
 8004ed8:	ea25 0000 	bic.w	r0, r5, r0
 8004edc:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ede:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ee0:	6942      	ldr	r2, [r0, #20]
 8004ee2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ee6:	6142      	str	r2, [r0, #20]
}
 8004ee8:	e769      	b.n	8004dbe <HAL_ADC_ConfigChannel+0xb2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004eea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004eec:	6e20      	ldr	r0, [r4, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004eee:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ef2:	680a      	ldr	r2, [r1, #0]
 8004ef4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004ef8:	bb5d      	cbnz	r5, 8004f52 <HAL_ADC_ConfigChannel+0x246>
 8004efa:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004efe:	42a8      	cmp	r0, r5
 8004f00:	d057      	beq.n	8004fb2 <HAL_ADC_ConfigChannel+0x2a6>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f02:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f06:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004f08:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f0a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f0e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f12:	4282      	cmp	r2, r0
 8004f14:	d05e      	beq.n	8004fd4 <HAL_ADC_ConfigChannel+0x2c8>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f1c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004f1e:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f20:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f24:	680a      	ldr	r2, [r1, #0]
 8004f26:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f2a:	4282      	cmp	r2, r0
 8004f2c:	d063      	beq.n	8004ff6 <HAL_ADC_ConfigChannel+0x2ea>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f34:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004f36:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f38:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f3c:	680a      	ldr	r2, [r1, #0]
 8004f3e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f42:	4282      	cmp	r2, r0
 8004f44:	f47f af6f 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(*preg,
 8004f48:	6822      	ldr	r2, [r4, #0]
 8004f4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f4e:	6022      	str	r2, [r4, #0]
}
 8004f50:	e769      	b.n	8004e26 <HAL_ADC_ConfigChannel+0x11a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f56:	b11d      	cbz	r5, 8004f60 <HAL_ADC_ConfigChannel+0x254>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004f58:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f5c:	42a8      	cmp	r0, r5
 8004f5e:	d028      	beq.n	8004fb2 <HAL_ADC_ConfigChannel+0x2a6>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f60:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f64:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004f66:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f68:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004f70:	b11a      	cbz	r2, 8004f7a <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8004f72:	fab2 f282 	clz	r2, r2
 8004f76:	4282      	cmp	r2, r0
 8004f78:	d02c      	beq.n	8004fd4 <HAL_ADC_ConfigChannel+0x2c8>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f80:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004f82:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f84:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f88:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004f8e:	b11a      	cbz	r2, 8004f98 <HAL_ADC_ConfigChannel+0x28c>
  return __builtin_clz(value);
 8004f90:	fab2 f282 	clz	r2, r2
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f94:	4282      	cmp	r2, r0
 8004f96:	d02e      	beq.n	8004ff6 <HAL_ADC_ConfigChannel+0x2ea>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f9e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004fa0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fa2:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fa6:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8004fac:	fab2 f282 	clz	r2, r2
 8004fb0:	e7c7      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x236>
  MODIFY_REG(*preg,
 8004fb2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004fb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fb8:	6622      	str	r2, [r4, #96]	; 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f102 0564 	add.w	r5, r2, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fc0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004fc2:	6e50      	ldr	r0, [r2, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fc4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fc8:	680a      	ldr	r2, [r1, #0]
 8004fca:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8004fce:	2c00      	cmp	r4, #0
 8004fd0:	d09d      	beq.n	8004f0e <HAL_ADC_ConfigChannel+0x202>
 8004fd2:	e7cb      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x260>
  MODIFY_REG(*preg,
 8004fd4:	682a      	ldr	r2, [r5, #0]
 8004fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fda:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fe2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004fe4:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fe6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fea:	680a      	ldr	r2, [r1, #0]
 8004fec:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004ff0:	2d00      	cmp	r5, #0
 8004ff2:	d098      	beq.n	8004f26 <HAL_ADC_ConfigChannel+0x21a>
 8004ff4:	e7c9      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ffc:	6022      	str	r2, [r4, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005004:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005006:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005008:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800500c:	680a      	ldr	r2, [r1, #0]
 800500e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005012:	2d00      	cmp	r5, #0
 8005014:	d093      	beq.n	8004f3e <HAL_ADC_ConfigChannel+0x232>
 8005016:	e7c7      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x29c>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005018:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800501a:	680a      	ldr	r2, [r1, #0]
 800501c:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8005020:	b9bc      	cbnz	r4, 8005052 <HAL_ADC_ConfigChannel+0x346>
 8005022:	0e94      	lsrs	r4, r2, #26
 8005024:	3401      	adds	r4, #1
 8005026:	f004 051f 	and.w	r5, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800502a:	2d09      	cmp	r5, #9
 800502c:	d94e      	bls.n	80050cc <HAL_ADC_ConfigChannel+0x3c0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800502e:	0e94      	lsrs	r4, r2, #26
 8005030:	3401      	adds	r4, #1
 8005032:	f004 021f 	and.w	r2, r4, #31
 8005036:	06a4      	lsls	r4, r4, #26
 8005038:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800503c:	2501      	movs	r5, #1
 800503e:	4095      	lsls	r5, r2
 8005040:	432c      	orrs	r4, r5
 8005042:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005046:	3a1e      	subs	r2, #30
 8005048:	0512      	lsls	r2, r2, #20
 800504a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800504e:	4322      	orrs	r2, r4
 8005050:	e046      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x3d4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8005056:	2c00      	cmp	r4, #0
 8005058:	d055      	beq.n	8005106 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800505a:	fab4 f484 	clz	r4, r4
 800505e:	3401      	adds	r4, #1
 8005060:	f004 041f 	and.w	r4, r4, #31
 8005064:	2c09      	cmp	r4, #9
 8005066:	d94e      	bls.n	8005106 <HAL_ADC_ConfigChannel+0x3fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 800506c:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005070:	3501      	adds	r5, #1
 8005072:	06ad      	lsls	r5, r5, #26
 8005074:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005078:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 800507c:	fab6 f686 	clz	r6, r6
 8005080:	3601      	adds	r6, #1
 8005082:	f006 061f 	and.w	r6, r6, #31
 8005086:	2401      	movs	r4, #1
 8005088:	40b4      	lsls	r4, r6
 800508a:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005090:	fab2 f282 	clz	r2, r2
 8005094:	3201      	adds	r2, #1
 8005096:	f002 021f 	and.w	r2, r2, #31
 800509a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800509e:	3a1e      	subs	r2, #30
 80050a0:	0512      	lsls	r2, r2, #20
 80050a2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80050a6:	e7d2      	b.n	800504e <HAL_ADC_ConfigChannel+0x342>
 80050a8:	03fff000 	.word	0x03fff000
 80050ac:	407f0000 	.word	0x407f0000
 80050b0:	80080000 	.word	0x80080000
 80050b4:	50000100 	.word	0x50000100
 80050b8:	50000300 	.word	0x50000300
 80050bc:	50000700 	.word	0x50000700
 80050c0:	c3210000 	.word	0xc3210000
 80050c4:	90c00010 	.word	0x90c00010
 80050c8:	c7520000 	.word	0xc7520000
 80050cc:	06a4      	lsls	r4, r4, #26
 80050ce:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80050d2:	2201      	movs	r2, #1
 80050d4:	40aa      	lsls	r2, r5
 80050d6:	4314      	orrs	r4, r2
 80050d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050dc:	052a      	lsls	r2, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050de:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80050e0:	0dd5      	lsrs	r5, r2, #23
 80050e2:	f005 0504 	and.w	r5, r5, #4
 80050e6:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 80050e8:	5944      	ldr	r4, [r0, r5]
 80050ea:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80050ee:	f04f 0c07 	mov.w	ip, #7
 80050f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80050f6:	ea24 040c 	bic.w	r4, r4, ip
 80050fa:	688e      	ldr	r6, [r1, #8]
 80050fc:	fa06 f202 	lsl.w	r2, r6, r2
 8005100:	4322      	orrs	r2, r4
 8005102:	5142      	str	r2, [r0, r5]
}
 8005104:	e6a7      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x14a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 800510a:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800510e:	3501      	adds	r5, #1
 8005110:	06ad      	lsls	r5, r5, #26
 8005112:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 800511a:	fab6 f686 	clz	r6, r6
 800511e:	3601      	adds	r6, #1
 8005120:	f006 061f 	and.w	r6, r6, #31
 8005124:	2401      	movs	r4, #1
 8005126:	40b4      	lsls	r4, r6
 8005128:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800512e:	fab2 f282 	clz	r2, r2
 8005132:	3201      	adds	r2, #1
 8005134:	f002 021f 	and.w	r2, r2, #31
 8005138:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800513c:	0512      	lsls	r2, r2, #20
 800513e:	e7ce      	b.n	80050de <HAL_ADC_ConfigChannel+0x3d2>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005140:	482b      	ldr	r0, [pc, #172]	; (80051f0 <HAL_ADC_ConfigChannel+0x4e4>)
 8005142:	e698      	b.n	8004e76 <HAL_ADC_ConfigChannel+0x16a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005144:	492b      	ldr	r1, [pc, #172]	; (80051f4 <HAL_ADC_ConfigChannel+0x4e8>)
 8005146:	e000      	b.n	800514a <HAL_ADC_ConfigChannel+0x43e>
 8005148:	4929      	ldr	r1, [pc, #164]	; (80051f0 <HAL_ADC_ConfigChannel+0x4e4>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800514a:	688a      	ldr	r2, [r1, #8]
 800514c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005150:	432a      	orrs	r2, r5
 8005152:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005156:	608a      	str	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005158:	4a27      	ldr	r2, [pc, #156]	; (80051f8 <HAL_ADC_ConfigChannel+0x4ec>)
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	0992      	lsrs	r2, r2, #6
 800515e:	4927      	ldr	r1, [pc, #156]	; (80051fc <HAL_ADC_ConfigChannel+0x4f0>)
 8005160:	fba1 1202 	umull	r1, r2, r1, r2
 8005164:	0992      	lsrs	r2, r2, #6
 8005166:	3201      	adds	r2, #1
 8005168:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800516c:	0092      	lsls	r2, r2, #2
 800516e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005170:	9a01      	ldr	r2, [sp, #4]
 8005172:	b322      	cbz	r2, 80051be <HAL_ADC_ConfigChannel+0x4b2>
            wait_loop_index--;
 8005174:	9a01      	ldr	r2, [sp, #4]
 8005176:	3a01      	subs	r2, #1
 8005178:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800517a:	9a01      	ldr	r2, [sp, #4]
 800517c:	2a00      	cmp	r2, #0
 800517e:	d1f9      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x468>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005180:	2000      	movs	r0, #0
 8005182:	e5da      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005184:	481a      	ldr	r0, [pc, #104]	; (80051f0 <HAL_ADC_ConfigChannel+0x4e4>)
 8005186:	e693      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x1a4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005188:	4c1d      	ldr	r4, [pc, #116]	; (8005200 <HAL_ADC_ConfigChannel+0x4f4>)
 800518a:	42a2      	cmp	r2, r4
 800518c:	d11b      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x4ba>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800518e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8005192:	d11a      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x4be>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005194:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <HAL_ADC_ConfigChannel+0x4f8>)
 8005196:	4291      	cmp	r1, r2
 8005198:	d019      	beq.n	80051ce <HAL_ADC_ConfigChannel+0x4c2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800519a:	4815      	ldr	r0, [pc, #84]	; (80051f0 <HAL_ADC_ConfigChannel+0x4e4>)
 800519c:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80051a0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80051a4:	bf18      	it	ne
 80051a6:	4610      	movne	r0, r2
 80051a8:	6882      	ldr	r2, [r0, #8]
 80051aa:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80051ae:	432a      	orrs	r2, r5
 80051b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80051b4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051b6:	2000      	movs	r0, #0
}
 80051b8:	e5bf      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e5bd      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051be:	2000      	movs	r0, #0
 80051c0:	e5bb      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051c2:	2000      	movs	r0, #0
 80051c4:	e5b9      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e5b7      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051ca:	2000      	movs	r0, #0
 80051cc:	e5b5      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051ce:	2000      	movs	r0, #0
 80051d0:	e5b3      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80051d2:	2002      	movs	r0, #2
 80051d4:	e5b4      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x34>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051d6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80051da:	d107      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x4e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051dc:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80051e0:	d0b2      	beq.n	8005148 <HAL_ADC_ConfigChannel+0x43c>
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <HAL_ADC_ConfigChannel+0x4fc>)
 80051e4:	4291      	cmp	r1, r2
 80051e6:	d0ad      	beq.n	8005144 <HAL_ADC_ConfigChannel+0x438>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e8:	2000      	movs	r0, #0
 80051ea:	e5a6      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051ec:	2000      	movs	r0, #0
 80051ee:	e5a4      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x2e>
 80051f0:	50000300 	.word	0x50000300
 80051f4:	50000700 	.word	0x50000700
 80051f8:	20000018 	.word	0x20000018
 80051fc:	053e2d63 	.word	0x053e2d63
 8005200:	cb840000 	.word	0xcb840000
 8005204:	50000100 	.word	0x50000100
 8005208:	50000600 	.word	0x50000600

0800520c <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 800520c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005210:	2a01      	cmp	r2, #1
 8005212:	f000 8176 	beq.w	8005502 <HAL_ADC_AnalogWDGConfig+0x2f6>
{
 8005216:	b530      	push	{r4, r5, lr}
 8005218:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800521a:	2201      	movs	r2, #1
 800521c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005220:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005222:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005224:	68a2      	ldr	r2, [r4, #8]
 8005226:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800522a:	f000 0004 	and.w	r0, r0, #4
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800522e:	4302      	orrs	r2, r0
 8005230:	f040 8106 	bne.w	8005440 <HAL_ADC_AnalogWDGConfig+0x234>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005234:	680a      	ldr	r2, [r1, #0]
 8005236:	48b4      	ldr	r0, [pc, #720]	; (8005508 <HAL_ADC_AnalogWDGConfig+0x2fc>)
 8005238:	4282      	cmp	r2, r0
 800523a:	d026      	beq.n	800528a <HAL_ADC_AnalogWDGConfig+0x7e>
      switch (AnalogWDGConfig->WatchdogMode)
 800523c:	6848      	ldr	r0, [r1, #4]
 800523e:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8005242:	f000 809e 	beq.w	8005382 <HAL_ADC_AnalogWDGConfig+0x176>
 8005246:	f200 8095 	bhi.w	8005374 <HAL_ADC_AnalogWDGConfig+0x168>
 800524a:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 800524e:	f000 8098 	beq.w	8005382 <HAL_ADC_AnalogWDGConfig+0x176>
 8005252:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005256:	f000 80c5 	beq.w	80053e4 <HAL_ADC_AnalogWDGConfig+0x1d8>
 800525a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800525e:	f000 80c1 	beq.w	80053e4 <HAL_ADC_AnalogWDGConfig+0x1d8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8005262:	f3c2 5001 	ubfx	r0, r2, #20, #2
 8005266:	f002 0c01 	and.w	ip, r2, #1
 800526a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800526e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8005272:	340c      	adds	r4, #12
  MODIFY_REG(*preg,
 8005274:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8005278:	f022 4202 	bic.w	r2, r2, #2181038080	; 0x82000000
 800527c:	f422 1260 	bic.w	r2, r2, #3670016	; 0x380000
 8005280:	ea25 0202 	bic.w	r2, r5, r2
 8005284:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
}
 8005288:	e0c4      	b.n	8005414 <HAL_ADC_AnalogWDGConfig+0x208>
      switch (AnalogWDGConfig->WatchdogMode)
 800528a:	684a      	ldr	r2, [r1, #4]
 800528c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
 8005290:	d053      	beq.n	800533a <HAL_ADC_AnalogWDGConfig+0x12e>
 8005292:	d81a      	bhi.n	80052ca <HAL_ADC_AnalogWDGConfig+0xbe>
 8005294:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8005298:	d02a      	beq.n	80052f0 <HAL_ADC_AnalogWDGConfig+0xe4>
 800529a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800529e:	d108      	bne.n	80052b2 <HAL_ADC_AnalogWDGConfig+0xa6>
  MODIFY_REG(*preg,
 80052a0:	68e2      	ldr	r2, [r4, #12]
 80052a2:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
 80052a6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80052aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80052ae:	60e2      	str	r2, [r4, #12]
}
 80052b0:	e02a      	b.n	8005308 <HAL_ADC_AnalogWDGConfig+0xfc>
 80052b2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80052b6:	d156      	bne.n	8005366 <HAL_ADC_AnalogWDGConfig+0x15a>
  MODIFY_REG(*preg,
 80052b8:	68e2      	ldr	r2, [r4, #12]
 80052ba:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
 80052be:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80052c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80052c6:	60e2      	str	r2, [r4, #12]
}
 80052c8:	e01e      	b.n	8005308 <HAL_ADC_AnalogWDGConfig+0xfc>
 80052ca:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80052ce:	d041      	beq.n	8005354 <HAL_ADC_AnalogWDGConfig+0x148>
 80052d0:	f1b2 7fe0 	cmp.w	r2, #29360128	; 0x1c00000
 80052d4:	d147      	bne.n	8005366 <HAL_ADC_AnalogWDGConfig+0x15a>
  MODIFY_REG(*preg,
 80052d6:	68e0      	ldr	r0, [r4, #12]
 80052d8:	688a      	ldr	r2, [r1, #8]
 80052da:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80052de:	f020 40fb 	bic.w	r0, r0, #2105540608	; 0x7d800000
 80052e2:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
 80052e6:	4302      	orrs	r2, r0
 80052e8:	f042 72e0 	orr.w	r2, r2, #29360128	; 0x1c00000
 80052ec:	60e2      	str	r2, [r4, #12]
}
 80052ee:	e00b      	b.n	8005308 <HAL_ADC_AnalogWDGConfig+0xfc>
  MODIFY_REG(*preg,
 80052f0:	68e0      	ldr	r0, [r4, #12]
 80052f2:	688a      	ldr	r2, [r1, #8]
 80052f4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80052f8:	f020 40fb 	bic.w	r0, r0, #2105540608	; 0x7d800000
 80052fc:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
 8005300:	4302      	orrs	r2, r0
 8005302:	f442 0240 	orr.w	r2, r2, #12582912	; 0xc00000
 8005306:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(hadc->Instance->TR1,
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	6a02      	ldr	r2, [r0, #32]
 800530c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005310:	698c      	ldr	r4, [r1, #24]
 8005312:	4322      	orrs	r2, r4
 8005314:	6202      	str	r2, [r0, #32]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005316:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005318:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800531c:	65da      	str	r2, [r3, #92]	; 0x5c
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800531e:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8005320:	2080      	movs	r0, #128	; 0x80
 8005322:	6010      	str	r0, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8005324:	7b0a      	ldrb	r2, [r1, #12]
 8005326:	2a01      	cmp	r2, #1
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8005328:	6818      	ldr	r0, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800532a:	6842      	ldr	r2, [r0, #4]
 800532c:	bf0c      	ite	eq
 800532e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005332:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8005336:	6042      	str	r2, [r0, #4]
}
 8005338:	e082      	b.n	8005440 <HAL_ADC_AnalogWDGConfig+0x234>
  MODIFY_REG(*preg,
 800533a:	68e0      	ldr	r0, [r4, #12]
 800533c:	688a      	ldr	r2, [r1, #8]
 800533e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8005342:	f020 40fb 	bic.w	r0, r0, #2105540608	; 0x7d800000
 8005346:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
 800534a:	4302      	orrs	r2, r0
 800534c:	f042 72a0 	orr.w	r2, r2, #20971520	; 0x1400000
 8005350:	60e2      	str	r2, [r4, #12]
}
 8005352:	e7d9      	b.n	8005308 <HAL_ADC_AnalogWDGConfig+0xfc>
  MODIFY_REG(*preg,
 8005354:	68e2      	ldr	r2, [r4, #12]
 8005356:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
 800535a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800535e:	f042 72c0 	orr.w	r2, r2, #25165824	; 0x1800000
 8005362:	60e2      	str	r2, [r4, #12]
}
 8005364:	e7d0      	b.n	8005308 <HAL_ADC_AnalogWDGConfig+0xfc>
  MODIFY_REG(*preg,
 8005366:	68e2      	ldr	r2, [r4, #12]
 8005368:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
 800536c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8005370:	60e2      	str	r2, [r4, #12]
}
 8005372:	e7c9      	b.n	8005308 <HAL_ADC_AnalogWDGConfig+0xfc>
      switch (AnalogWDGConfig->WatchdogMode)
 8005374:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8005378:	d034      	beq.n	80053e4 <HAL_ADC_AnalogWDGConfig+0x1d8>
 800537a:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 800537e:	f47f af70 	bne.w	8005262 <HAL_ADC_AnalogWDGConfig+0x56>
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8005382:	4862      	ldr	r0, [pc, #392]	; (800550c <HAL_ADC_AnalogWDGConfig+0x300>)
 8005384:	4282      	cmp	r2, r0
 8005386:	d00d      	beq.n	80053a4 <HAL_ADC_AnalogWDGConfig+0x198>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8005388:	688a      	ldr	r2, [r1, #8]
 800538a:	f3c2 0012 	ubfx	r0, r2, #0, #19
 800538e:	bb00      	cbnz	r0, 80053d2 <HAL_ADC_AnalogWDGConfig+0x1c6>
 8005390:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8005394:	2001      	movs	r0, #1
 8005396:	4090      	lsls	r0, r2
 8005398:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800539c:	4302      	orrs	r2, r0
 800539e:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80053a2:	e037      	b.n	8005414 <HAL_ADC_AnalogWDGConfig+0x208>
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80053a4:	688a      	ldr	r2, [r1, #8]
 80053a6:	f3c2 0012 	ubfx	r0, r2, #0, #19
 80053aa:	b948      	cbnz	r0, 80053c0 <HAL_ADC_AnalogWDGConfig+0x1b4>
 80053ac:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80053b0:	2001      	movs	r0, #1
 80053b2:	4090      	lsls	r0, r2
 80053b4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80053b8:	4302      	orrs	r2, r0
 80053ba:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 80053be:	e029      	b.n	8005414 <HAL_ADC_AnalogWDGConfig+0x208>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c0:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80053c4:	fab2 f282 	clz	r2, r2
 80053c8:	f002 021f 	and.w	r2, r2, #31
 80053cc:	2001      	movs	r0, #1
 80053ce:	4090      	lsls	r0, r2
 80053d0:	e7f0      	b.n	80053b4 <HAL_ADC_AnalogWDGConfig+0x1a8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80053d6:	fab2 f282 	clz	r2, r2
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80053da:	f002 021f 	and.w	r2, r2, #31
 80053de:	2001      	movs	r0, #1
 80053e0:	4090      	lsls	r0, r2
 80053e2:	e7d9      	b.n	8005398 <HAL_ADC_AnalogWDGConfig+0x18c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80053e4:	f3c2 5c01 	ubfx	ip, r2, #20, #2
 80053e8:	f002 0001 	and.w	r0, r2, #1
 80053ec:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80053f0:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 80053f4:	340c      	adds	r4, #12
  MODIFY_REG(*preg,
 80053f6:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 80053fa:	f022 4502 	bic.w	r5, r2, #2181038080	; 0x82000000
 80053fe:	f425 1560 	bic.w	r5, r5, #3670016	; 0x380000
 8005402:	ea20 0005 	bic.w	r0, r0, r5
 8005406:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
 800540a:	f422 02f0 	bic.w	r2, r2, #7864320	; 0x780000
 800540e:	4302      	orrs	r2, r0
 8005410:	f844 202c 	str.w	r2, [r4, ip, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8005414:	6808      	ldr	r0, [r1, #0]
 8005416:	4a3d      	ldr	r2, [pc, #244]	; (800550c <HAL_ADC_AnalogWDGConfig+0x300>)
 8005418:	4290      	cmp	r0, r2
 800541a:	d047      	beq.n	80054ac <HAL_ADC_AnalogWDGConfig+0x2a0>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800541c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800541e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005422:	65da      	str	r2, [r3, #92]	; 0x5c
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8005424:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8005426:	f44f 7000 	mov.w	r0, #512	; 0x200
 800542a:	6010      	str	r0, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 800542c:	7b0a      	ldrb	r2, [r1, #12]
 800542e:	2a01      	cmp	r2, #1
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8005430:	6818      	ldr	r0, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005432:	6842      	ldr	r2, [r0, #4]
 8005434:	bf0c      	ite	eq
 8005436:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800543a:	f422 7200 	bicne.w	r2, r2, #512	; 0x200
 800543e:	6042      	str	r2, [r0, #4]
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005440:	680a      	ldr	r2, [r1, #0]
 8005442:	4831      	ldr	r0, [pc, #196]	; (8005508 <HAL_ADC_AnalogWDGConfig+0x2fc>)
 8005444:	4282      	cmp	r2, r0
 8005446:	d044      	beq.n	80054d2 <HAL_ADC_AnalogWDGConfig+0x2c6>
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005448:	681c      	ldr	r4, [r3, #0]
 800544a:	68e0      	ldr	r0, [r4, #12]
 800544c:	f000 0018 	and.w	r0, r0, #24
 8005450:	2818      	cmp	r0, #24
 8005452:	d04e      	beq.n	80054f2 <HAL_ADC_AnalogWDGConfig+0x2e6>
 8005454:	68e0      	ldr	r0, [r4, #12]
 8005456:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800545a:	f1c0 0002 	rsb	r0, r0, #2
 800545e:	0040      	lsls	r0, r0, #1
 8005460:	f000 001e 	and.w	r0, r0, #30
 8005464:	690d      	ldr	r5, [r1, #16]
 8005466:	fa25 fc00 	lsr.w	ip, r5, r0
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800546a:	68e0      	ldr	r0, [r4, #12]
 800546c:	f000 0018 	and.w	r0, r0, #24
 8005470:	2818      	cmp	r0, #24
 8005472:	d042      	beq.n	80054fa <HAL_ADC_AnalogWDGConfig+0x2ee>
 8005474:	68e0      	ldr	r0, [r4, #12]
 8005476:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800547a:	f1c0 0002 	rsb	r0, r0, #2
 800547e:	0040      	lsls	r0, r0, #1
 8005480:	f000 001e 	and.w	r0, r0, #30
 8005484:	6949      	ldr	r1, [r1, #20]
 8005486:	fa21 fe00 	lsr.w	lr, r1, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 800548a:	0c92      	lsrs	r2, r2, #18
 800548c:	f002 020c 	and.w	r2, r2, #12
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	3020      	adds	r0, #32
  MODIFY_REG(*preg,
 8005494:	5881      	ldr	r1, [r0, r2]
 8005496:	f001 21f0 	and.w	r1, r1, #4026593280	; 0xf000f000
 800549a:	ea41 010e 	orr.w	r1, r1, lr
 800549e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80054a2:	5081      	str	r1, [r0, r2]
  __HAL_UNLOCK(hadc);
 80054a4:	2000      	movs	r0, #0
 80054a6:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
}
 80054aa:	bd30      	pop	{r4, r5, pc}
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80054ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80054b2:	65da      	str	r2, [r3, #92]	; 0x5c
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80054b4:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80054b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80054ba:	6010      	str	r0, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 80054bc:	7b0a      	ldrb	r2, [r1, #12]
 80054be:	2a01      	cmp	r2, #1
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80054c0:	6818      	ldr	r0, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80054c2:	6842      	ldr	r2, [r0, #4]
 80054c4:	bf0c      	ite	eq
 80054c6:	f442 7280 	orreq.w	r2, r2, #256	; 0x100
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80054ca:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 80054ce:	6042      	str	r2, [r0, #4]
}
 80054d0:	e7b6      	b.n	8005440 <HAL_ADC_AnalogWDGConfig+0x234>
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80054d2:	681c      	ldr	r4, [r3, #0]
 80054d4:	68e0      	ldr	r0, [r4, #12]
 80054d6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80054da:	0040      	lsls	r0, r0, #1
 80054dc:	690d      	ldr	r5, [r1, #16]
 80054de:	fa05 fc00 	lsl.w	ip, r5, r0
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80054e2:	68e0      	ldr	r0, [r4, #12]
 80054e4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80054e8:	0040      	lsls	r0, r0, #1
 80054ea:	6949      	ldr	r1, [r1, #20]
 80054ec:	fa01 fe00 	lsl.w	lr, r1, r0
 80054f0:	e7cb      	b.n	800548a <HAL_ADC_AnalogWDGConfig+0x27e>
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80054f2:	6908      	ldr	r0, [r1, #16]
 80054f4:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 80054f8:	e7b7      	b.n	800546a <HAL_ADC_AnalogWDGConfig+0x25e>
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80054fa:	6949      	ldr	r1, [r1, #20]
 80054fc:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8005500:	e7c3      	b.n	800548a <HAL_ADC_AnalogWDGConfig+0x27e>
  __HAL_LOCK(hadc);
 8005502:	2002      	movs	r0, #2
}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	7dc00000 	.word	0x7dc00000
 800550c:	0017ffff 	.word	0x0017ffff

08005510 <ADC_ConversionStop>:
{
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005514:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005516:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800551e:	f000 0004 	and.w	r0, r0, #4
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005522:	4302      	orrs	r2, r0
 8005524:	d079      	beq.n	800561a <ADC_ConversionStop+0x10a>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800552c:	d004      	beq.n	8005538 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800552e:	8ba0      	ldrh	r0, [r4, #28]
 8005530:	f240 1201 	movw	r2, #257	; 0x101
 8005534:	4290      	cmp	r0, r2
 8005536:	d028      	beq.n	800558a <ADC_ConversionStop+0x7a>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005538:	2902      	cmp	r1, #2
 800553a:	d070      	beq.n	800561e <ADC_ConversionStop+0x10e>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	f012 0f04 	tst.w	r2, #4
 8005544:	d00b      	beq.n	800555e <ADC_ConversionStop+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	f012 0f02 	tst.w	r2, #2
 800554c:	d107      	bne.n	800555e <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005554:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005558:	f042 0210 	orr.w	r2, r2, #16
 800555c:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800555e:	2901      	cmp	r1, #1
 8005560:	d02f      	beq.n	80055c2 <ADC_ConversionStop+0xb2>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005562:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	f012 0f08 	tst.w	r2, #8
 800556a:	d12e      	bne.n	80055ca <ADC_ConversionStop+0xba>
    switch (conversion_group_reassigned)
 800556c:	2902      	cmp	r1, #2
 800556e:	d039      	beq.n	80055e4 <ADC_ConversionStop+0xd4>
 8005570:	2903      	cmp	r1, #3
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005572:	bf08      	it	eq
 8005574:	250c      	moveq	r5, #12
    switch (conversion_group_reassigned)
 8005576:	d124      	bne.n	80055c2 <ADC_ConversionStop+0xb2>
    tickstart = HAL_GetTick();
 8005578:	f7ff f89a 	bl	80046b0 <HAL_GetTick>
 800557c:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	421d      	tst	r5, r3
 8005584:	d134      	bne.n	80055f0 <ADC_ConversionStop+0xe0>
  return HAL_OK;
 8005586:	2000      	movs	r0, #0
 8005588:	e048      	b.n	800561c <ADC_ConversionStop+0x10c>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005590:	d110      	bne.n	80055b4 <ADC_ConversionStop+0xa4>
 8005592:	4a26      	ldr	r2, [pc, #152]	; (800562c <ADC_ConversionStop+0x11c>)
 8005594:	6819      	ldr	r1, [r3, #0]
 8005596:	f011 0f40 	tst.w	r1, #64	; 0x40
 800559a:	d10b      	bne.n	80055b4 <ADC_ConversionStop+0xa4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800559c:	3a01      	subs	r2, #1
 800559e:	d1f9      	bne.n	8005594 <ADC_ConversionStop+0x84>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055a2:	f043 0310 	orr.w	r3, r3, #16
 80055a6:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 80055b0:	2001      	movs	r0, #1
 80055b2:	e033      	b.n	800561c <ADC_ConversionStop+0x10c>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80055b4:	2240      	movs	r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80055b8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	f012 0f04 	tst.w	r2, #4
 80055c0:	d101      	bne.n	80055c6 <ADC_ConversionStop+0xb6>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80055c2:	2504      	movs	r5, #4
        break;
 80055c4:	e7d8      	b.n	8005578 <ADC_ConversionStop+0x68>
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80055c6:	2101      	movs	r1, #1
 80055c8:	e7bd      	b.n	8005546 <ADC_ConversionStop+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	f012 0f02 	tst.w	r2, #2
 80055d0:	d1cc      	bne.n	800556c <ADC_ConversionStop+0x5c>
  MODIFY_REG(ADCx->CR,
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80055dc:	f042 0220 	orr.w	r2, r2, #32
 80055e0:	609a      	str	r2, [r3, #8]
}
 80055e2:	e7c3      	b.n	800556c <ADC_ConversionStop+0x5c>
    switch (conversion_group_reassigned)
 80055e4:	2508      	movs	r5, #8
 80055e6:	e7c7      	b.n	8005578 <ADC_ConversionStop+0x68>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	422b      	tst	r3, r5
 80055ee:	d012      	beq.n	8005616 <ADC_ConversionStop+0x106>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80055f0:	f7ff f85e 	bl	80046b0 <HAL_GetTick>
 80055f4:	1b80      	subs	r0, r0, r6
 80055f6:	2805      	cmp	r0, #5
 80055f8:	d9f6      	bls.n	80055e8 <ADC_ConversionStop+0xd8>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	422b      	tst	r3, r5
 8005600:	d0f2      	beq.n	80055e8 <ADC_ConversionStop+0xd8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005602:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005604:	f043 0310 	orr.w	r3, r3, #16
 8005608:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800560a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005612:	2001      	movs	r0, #1
 8005614:	e002      	b.n	800561c <ADC_ConversionStop+0x10c>
  return HAL_OK;
 8005616:	2000      	movs	r0, #0
 8005618:	e000      	b.n	800561c <ADC_ConversionStop+0x10c>
 800561a:	2000      	movs	r0, #0
}
 800561c:	bd70      	pop	{r4, r5, r6, pc}
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800561e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	f012 0f08 	tst.w	r2, #8
 8005626:	d1d0      	bne.n	80055ca <ADC_ConversionStop+0xba>
 8005628:	2508      	movs	r5, #8
 800562a:	e7a5      	b.n	8005578 <ADC_ConversionStop+0x68>
 800562c:	a3400000 	.word	0xa3400000

08005630 <ADC_Enable>:
{
 8005630:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005632:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	f012 0f01 	tst.w	r2, #1
 800563a:	d147      	bne.n	80056cc <ADC_Enable+0x9c>
 800563c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800563e:	6899      	ldr	r1, [r3, #8]
 8005640:	4a23      	ldr	r2, [pc, #140]	; (80056d0 <ADC_Enable+0xa0>)
 8005642:	4211      	tst	r1, r2
 8005644:	d009      	beq.n	800565a <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005646:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005648:	f043 0310 	orr.w	r3, r3, #16
 800564c:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800564e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8005656:	2001      	movs	r0, #1
 8005658:	e039      	b.n	80056ce <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005660:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800566a:	f7ff f821 	bl	80046b0 <HAL_GetTick>
 800566e:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	f012 0f01 	tst.w	r2, #1
 8005678:	d006      	beq.n	8005688 <ADC_Enable+0x58>
  return HAL_OK;
 800567a:	2000      	movs	r0, #0
 800567c:	e027      	b.n	80056ce <ADC_Enable+0x9e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	f012 0f01 	tst.w	r2, #1
 8005686:	d11f      	bne.n	80056c8 <ADC_Enable+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	f012 0f01 	tst.w	r2, #1
 800568e:	d107      	bne.n	80056a0 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005696:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056a0:	f7ff f806 	bl	80046b0 <HAL_GetTick>
 80056a4:	1b43      	subs	r3, r0, r5
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d9e9      	bls.n	800567e <ADC_Enable+0x4e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f013 0f01 	tst.w	r3, #1
 80056b2:	d1e4      	bne.n	800567e <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056b6:	f043 0310 	orr.w	r3, r3, #16
 80056ba:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 80056c4:	2001      	movs	r0, #1
 80056c6:	e002      	b.n	80056ce <ADC_Enable+0x9e>
  return HAL_OK;
 80056c8:	2000      	movs	r0, #0
 80056ca:	e000      	b.n	80056ce <ADC_Enable+0x9e>
 80056cc:	2000      	movs	r0, #0
}
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	8000003f 	.word	0x8000003f

080056d4 <HAL_ADC_Start_DMA>:
{
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	4604      	mov	r4, r0
 80056d8:	460e      	mov	r6, r1
 80056da:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80056e2:	d021      	beq.n	8005728 <HAL_ADC_Start_DMA+0x54>
 80056e4:	4a3d      	ldr	r2, [pc, #244]	; (80057dc <HAL_ADC_Start_DMA+0x108>)
 80056e6:	4d3e      	ldr	r5, [pc, #248]	; (80057e0 <HAL_ADC_Start_DMA+0x10c>)
 80056e8:	4b3e      	ldr	r3, [pc, #248]	; (80057e4 <HAL_ADC_Start_DMA+0x110>)
 80056ea:	4290      	cmp	r0, r2
 80056ec:	bf18      	it	ne
 80056ee:	461d      	movne	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056f0:	68ad      	ldr	r5, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056f2:	6881      	ldr	r1, [r0, #8]
 80056f4:	f011 0f04 	tst.w	r1, #4
 80056f8:	d168      	bne.n	80057cc <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 80056fa:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80056fe:	2a01      	cmp	r2, #1
 8005700:	d066      	beq.n	80057d0 <HAL_ADC_Start_DMA+0xfc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005702:	f005 051f 	and.w	r5, r5, #31
 8005706:	2301      	movs	r3, #1
 8005708:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <HAL_ADC_Start_DMA+0x114>)
 800570e:	4298      	cmp	r0, r3
 8005710:	d00c      	beq.n	800572c <HAL_ADC_Start_DMA+0x58>
 8005712:	f240 2321 	movw	r3, #545	; 0x221
 8005716:	40eb      	lsrs	r3, r5
 8005718:	f013 0f01 	tst.w	r3, #1
 800571c:	d106      	bne.n	800572c <HAL_ADC_Start_DMA+0x58>
      __HAL_UNLOCK(hadc);
 800571e:	2300      	movs	r3, #0
 8005720:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8005724:	2001      	movs	r0, #1
 8005726:	e052      	b.n	80057ce <HAL_ADC_Start_DMA+0xfa>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005728:	4d2d      	ldr	r5, [pc, #180]	; (80057e0 <HAL_ADC_Start_DMA+0x10c>)
 800572a:	e7e1      	b.n	80056f0 <HAL_ADC_Start_DMA+0x1c>
      tmp_hal_status = ADC_Enable(hadc);
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff ff7f 	bl	8005630 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005732:	2800      	cmp	r0, #0
 8005734:	d146      	bne.n	80057c4 <HAL_ADC_Start_DMA+0xf0>
        ADC_STATE_CLR_SET(hadc->State,
 8005736:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005744:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	4a24      	ldr	r2, [pc, #144]	; (80057dc <HAL_ADC_Start_DMA+0x108>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d042      	beq.n	80057d4 <HAL_ADC_Start_DMA+0x100>
 800574e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005752:	4293      	cmp	r3, r2
 8005754:	d03e      	beq.n	80057d4 <HAL_ADC_Start_DMA+0x100>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005756:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005758:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800575c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800575e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005760:	f413 5f80 	tst.w	r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005764:	bf1a      	itte	ne
 8005766:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8005768:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800576c:	2300      	moveq	r3, #0
 800576e:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005770:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005772:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <HAL_ADC_Start_DMA+0x118>)
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005778:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <HAL_ADC_Start_DMA+0x11c>)
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800577c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <HAL_ADC_Start_DMA+0x120>)
 8005780:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	221c      	movs	r2, #28
 8005786:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8005788:	2300      	movs	r3, #0
 800578a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	6853      	ldr	r3, [r2, #4]
 8005792:	f043 0310 	orr.w	r3, r3, #16
 8005796:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	68d3      	ldr	r3, [r2, #12]
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057a2:	6821      	ldr	r1, [r4, #0]
 80057a4:	463b      	mov	r3, r7
 80057a6:	4632      	mov	r2, r6
 80057a8:	3140      	adds	r1, #64	; 0x40
 80057aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057ac:	f000 fcee 	bl	800618c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80057b0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80057b2:	6893      	ldr	r3, [r2, #8]
 80057b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057bc:	f043 0304 	orr.w	r3, r3, #4
 80057c0:	6093      	str	r3, [r2, #8]
}
 80057c2:	e004      	b.n	80057ce <HAL_ADC_Start_DMA+0xfa>
        __HAL_UNLOCK(hadc);
 80057c4:	2300      	movs	r3, #0
 80057c6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80057ca:	e000      	b.n	80057ce <HAL_ADC_Start_DMA+0xfa>
    tmp_hal_status = HAL_BUSY;
 80057cc:	2002      	movs	r0, #2
}
 80057ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80057d0:	2002      	movs	r0, #2
 80057d2:	e7fc      	b.n	80057ce <HAL_ADC_Start_DMA+0xfa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	d0be      	beq.n	8005756 <HAL_ADC_Start_DMA+0x82>
 80057d8:	e7c1      	b.n	800575e <HAL_ADC_Start_DMA+0x8a>
 80057da:	bf00      	nop
 80057dc:	50000100 	.word	0x50000100
 80057e0:	50000300 	.word	0x50000300
 80057e4:	50000700 	.word	0x50000700
 80057e8:	50000600 	.word	0x50000600
 80057ec:	08004c69 	.word	0x08004c69
 80057f0:	08004989 	.word	0x08004989
 80057f4:	08004cf1 	.word	0x08004cf1

080057f8 <ADC_Disable>:
{
 80057f8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80057fa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80057fc:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	f012 0f01 	tst.w	r2, #1
 8005804:	d043      	beq.n	800588e <ADC_Disable+0x96>
 8005806:	4604      	mov	r4, r0
      && (tmp_adc_is_disable_on_going == 0UL)
 8005808:	f011 0f02 	tst.w	r1, #2
 800580c:	d141      	bne.n	8005892 <ADC_Disable+0x9a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	f002 020d 	and.w	r2, r2, #13
 8005814:	2a01      	cmp	r2, #1
 8005816:	d009      	beq.n	800582c <ADC_Disable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005818:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800581a:	f043 0310 	orr.w	r3, r3, #16
 800581e:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005820:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8005828:	2001      	movs	r0, #1
 800582a:	e031      	b.n	8005890 <ADC_Disable+0x98>
  MODIFY_REG(ADCx->CR,
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005832:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005836:	f042 0202 	orr.w	r2, r2, #2
 800583a:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800583c:	6803      	ldr	r3, [r0, #0]
 800583e:	2203      	movs	r2, #3
 8005840:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005842:	f7fe ff35 	bl	80046b0 <HAL_GetTick>
 8005846:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f013 0f01 	tst.w	r3, #1
  return HAL_OK;
 8005850:	bf08      	it	eq
 8005852:	2000      	moveq	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005854:	d105      	bne.n	8005862 <ADC_Disable+0x6a>
 8005856:	e01b      	b.n	8005890 <ADC_Disable+0x98>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f013 0f01 	tst.w	r3, #1
 8005860:	d013      	beq.n	800588a <ADC_Disable+0x92>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005862:	f7fe ff25 	bl	80046b0 <HAL_GetTick>
 8005866:	1b40      	subs	r0, r0, r5
 8005868:	2802      	cmp	r0, #2
 800586a:	d9f5      	bls.n	8005858 <ADC_Disable+0x60>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f013 0f01 	tst.w	r3, #1
 8005874:	d0f0      	beq.n	8005858 <ADC_Disable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005876:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005878:	f043 0310 	orr.w	r3, r3, #16
 800587c:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800587e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005886:	2001      	movs	r0, #1
 8005888:	e002      	b.n	8005890 <ADC_Disable+0x98>
  return HAL_OK;
 800588a:	2000      	movs	r0, #0
 800588c:	e000      	b.n	8005890 <ADC_Disable+0x98>
 800588e:	2000      	movs	r0, #0
}
 8005890:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8005892:	2000      	movs	r0, #0
 8005894:	e7fc      	b.n	8005890 <ADC_Disable+0x98>

08005896 <HAL_ADC_Stop_DMA>:
{
 8005896:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8005898:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800589c:	2b01      	cmp	r3, #1
 800589e:	d03c      	beq.n	800591a <HAL_ADC_Stop_DMA+0x84>
 80058a0:	4604      	mov	r4, r0
 80058a2:	2301      	movs	r3, #1
 80058a4:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80058a8:	2103      	movs	r1, #3
 80058aa:	f7ff fe31 	bl	8005510 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80058ae:	4605      	mov	r5, r0
 80058b0:	bb70      	cbnz	r0, 8005910 <HAL_ADC_Stop_DMA+0x7a>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	68d3      	ldr	r3, [r2, #12]
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80058bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058be:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d012      	beq.n	80058ee <HAL_ADC_Stop_DMA+0x58>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	6853      	ldr	r3, [r2, #4]
 80058cc:	f023 0310 	bic.w	r3, r3, #16
 80058d0:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff ff90 	bl	80057f8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80058d8:	4605      	mov	r5, r0
 80058da:	b9c8      	cbnz	r0, 8005910 <HAL_ADC_Stop_DMA+0x7a>
      ADC_STATE_CLR_SET(hadc->State,
 80058dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80058ec:	e010      	b.n	8005910 <HAL_ADC_Stop_DMA+0x7a>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80058ee:	f000 fc97 	bl	8006220 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80058f2:	4605      	mov	r5, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d0e7      	beq.n	80058c8 <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058fe:	65e3      	str	r3, [r4, #92]	; 0x5c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	6853      	ldr	r3, [r2, #4]
 8005904:	f023 0310 	bic.w	r3, r3, #16
 8005908:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff ff74 	bl	80057f8 <ADC_Disable>
  __HAL_UNLOCK(hadc);
 8005910:	2300      	movs	r3, #0
 8005912:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8005916:	4628      	mov	r0, r5
 8005918:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 800591a:	2502      	movs	r5, #2
 800591c:	e7fb      	b.n	8005916 <HAL_ADC_Stop_DMA+0x80>
	...

08005920 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005920:	b530      	push	{r4, r5, lr}
 8005922:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005924:	2300      	movs	r3, #0
 8005926:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005928:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800592c:	2b01      	cmp	r3, #1
 800592e:	d041      	beq.n	80059b4 <HAL_ADCEx_Calibration_Start+0x94>
 8005930:	4604      	mov	r4, r0
 8005932:	460d      	mov	r5, r1
 8005934:	2301      	movs	r3, #1
 8005936:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800593a:	f7ff ff5d 	bl	80057f8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800593e:	bb80      	cbnz	r0, 80059a2 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005940:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005942:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005946:	f023 0302 	bic.w	r3, r3, #2
 800594a:	f043 0302 	orr.w	r3, r3, #2
 800594e:	65e3      	str	r3, [r4, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005950:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005952:	6893      	ldr	r3, [r2, #8]
 8005954:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800595c:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8005960:	432b      	orrs	r3, r5
 8005962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005966:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005968:	6822      	ldr	r2, [r4, #0]
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800596a:	4913      	ldr	r1, [pc, #76]	; (80059b8 <HAL_ADCEx_Calibration_Start+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800596c:	6893      	ldr	r3, [r2, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	db06      	blt.n	8005980 <HAL_ADCEx_Calibration_Start+0x60>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005972:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005974:	f023 0303 	bic.w	r3, r3, #3
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800597e:	e014      	b.n	80059aa <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	3301      	adds	r3, #1
 8005984:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005986:	9b01      	ldr	r3, [sp, #4]
 8005988:	428b      	cmp	r3, r1
 800598a:	d9ef      	bls.n	800596c <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 800598c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800598e:	f023 0312 	bic.w	r3, r3, #18
 8005992:	f043 0310 	orr.w	r3, r3, #16
 8005996:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 8005998:	2300      	movs	r3, #0
 800599a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800599e:	2001      	movs	r0, #1
 80059a0:	e006      	b.n	80059b0 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059a4:	f043 0310 	orr.w	r3, r3, #16
 80059a8:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059aa:	2300      	movs	r3, #0
 80059ac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80059b0:	b003      	add	sp, #12
 80059b2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 80059b4:	2002      	movs	r0, #2
 80059b6:	e7fb      	b.n	80059b0 <HAL_ADCEx_Calibration_Start+0x90>
 80059b8:	0004de01 	.word	0x0004de01

080059bc <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80059bc:	4770      	bx	lr

080059be <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80059be:	4770      	bx	lr

080059c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80059c0:	4770      	bx	lr

080059c2 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80059c2:	4770      	bx	lr

080059c4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059c4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80059c8:	2a01      	cmp	r2, #1
 80059ca:	d055      	beq.n	8005a78 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
{
 80059cc:	b430      	push	{r4, r5}
 80059ce:	b09c      	sub	sp, #112	; 0x70
 80059d0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80059d2:	2201      	movs	r2, #1
 80059d4:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80059d8:	2200      	movs	r2, #0
 80059da:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80059dc:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80059de:	6802      	ldr	r2, [r0, #0]
 80059e0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80059e4:	d04a      	beq.n	8005a7c <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 80059e6:	484a      	ldr	r0, [pc, #296]	; (8005b10 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80059e8:	4282      	cmp	r2, r0
 80059ea:	d05b      	beq.n	8005aa4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059ee:	f042 0220 	orr.w	r2, r2, #32
 80059f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80059fa:	2001      	movs	r0, #1
 80059fc:	e04d      	b.n	8005a9a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005a02:	6894      	ldr	r4, [r2, #8]
 8005a04:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005a08:	6892      	ldr	r2, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a0a:	4322      	orrs	r2, r4
 8005a0c:	f012 0f01 	tst.w	r2, #1
 8005a10:	d071      	beq.n	8005af6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a12:	2000      	movs	r0, #0
 8005a14:	e03e      	b.n	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a16:	6882      	ldr	r2, [r0, #8]
 8005a18:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a1c:	6082      	str	r2, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005a24:	d010      	beq.n	8005a48 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8005a26:	493b      	ldr	r1, [pc, #236]	; (8005b14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005a28:	428a      	cmp	r2, r1
 8005a2a:	d00d      	beq.n	8005a48 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8005a2c:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005a2e:	6894      	ldr	r4, [r2, #8]
 8005a30:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005a34:	6892      	ldr	r2, [r2, #8]
 8005a36:	4938      	ldr	r1, [pc, #224]	; (8005b18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005a38:	6889      	ldr	r1, [r1, #8]
 8005a3a:	4322      	orrs	r2, r4
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	f082 0201 	eor.w	r2, r2, #1
 8005a42:	f002 0201 	and.w	r2, r2, #1
 8005a46:	e00a      	b.n	8005a5e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005a48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005a4c:	6891      	ldr	r1, [r2, #8]
 8005a4e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005a52:	6892      	ldr	r2, [r2, #8]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	f082 0201 	eor.w	r2, r2, #1
 8005a5a:	f002 0201 	and.w	r2, r2, #1
 8005a5e:	b90a      	cbnz	r2, 8005a64 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a60:	2000      	movs	r0, #0
 8005a62:	e017      	b.n	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a64:	6882      	ldr	r2, [r0, #8]
 8005a66:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005a6a:	f022 020f 	bic.w	r2, r2, #15
 8005a6e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a70:	2000      	movs	r0, #0
 8005a72:	e00f      	b.n	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005a74:	2000      	movs	r0, #0
 8005a76:	e00d      	b.n	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8005a78:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005a7a:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a7c:	4825      	ldr	r0, [pc, #148]	; (8005b14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005a7e:	6880      	ldr	r0, [r0, #8]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	4302      	orrs	r2, r0
 8005a84:	f012 0f04 	tst.w	r2, #4
 8005a88:	d00a      	beq.n	8005aa0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a8c:	f042 0220 	orr.w	r2, r2, #32
 8005a90:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005a92:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005a9a:	b01c      	add	sp, #112	; 0x70
 8005a9c:	bc30      	pop	{r4, r5}
 8005a9e:	4770      	bx	lr
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005aa0:	481e      	ldr	r0, [pc, #120]	; (8005b1c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005aa2:	e007      	b.n	8005ab4 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 8005aa4:	481e      	ldr	r0, [pc, #120]	; (8005b20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005aa6:	6880      	ldr	r0, [r0, #8]
 8005aa8:	6892      	ldr	r2, [r2, #8]
 8005aaa:	4302      	orrs	r2, r0
 8005aac:	f012 0f04 	tst.w	r2, #4
 8005ab0:	d1eb      	bne.n	8005a8a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 8005ab2:	481c      	ldr	r0, [pc, #112]	; (8005b24 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ab4:	680a      	ldr	r2, [r1, #0]
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	d0ad      	beq.n	8005a16 <HAL_ADCEx_MultiModeConfigChannel+0x52>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005aba:	6884      	ldr	r4, [r0, #8]
 8005abc:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8005ac0:	684a      	ldr	r2, [r1, #4]
 8005ac2:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8005ac6:	f424 4c60 	bic.w	ip, r4, #57344	; 0xe000
 8005aca:	ea42 020c 	orr.w	r2, r2, ip
 8005ace:	6082      	str	r2, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005ad6:	d092      	beq.n	80059fe <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005ad8:	4c0e      	ldr	r4, [pc, #56]	; (8005b14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ada:	42a2      	cmp	r2, r4
 8005adc:	d08f      	beq.n	80059fe <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ade:	4a0c      	ldr	r2, [pc, #48]	; (8005b10 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005ae0:	6895      	ldr	r5, [r2, #8]
 8005ae2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005ae6:	6892      	ldr	r2, [r2, #8]
 8005ae8:	4c0b      	ldr	r4, [pc, #44]	; (8005b18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005aea:	68a4      	ldr	r4, [r4, #8]
 8005aec:	432a      	orrs	r2, r5
 8005aee:	4322      	orrs	r2, r4
 8005af0:	f012 0f01 	tst.w	r2, #1
 8005af4:	d1be      	bne.n	8005a74 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
        MODIFY_REG(tmpADC_Common->CCR,
 8005af6:	6884      	ldr	r4, [r0, #8]
 8005af8:	680a      	ldr	r2, [r1, #0]
 8005afa:	6889      	ldr	r1, [r1, #8]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8005b02:	f021 010f 	bic.w	r1, r1, #15
 8005b06:	430a      	orrs	r2, r1
 8005b08:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e7c2      	b.n	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005b0e:	bf00      	nop
 8005b10:	50000400 	.word	0x50000400
 8005b14:	50000100 	.word	0x50000100
 8005b18:	50000600 	.word	0x50000600
 8005b1c:	50000300 	.word	0x50000300
 8005b20:	50000500 	.word	0x50000500
 8005b24:	50000700 	.word	0x50000700

08005b28 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b28:	4907      	ldr	r1, [pc, #28]	; (8005b48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005b2a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b2c:	0203      	lsls	r3, r0, #8
 8005b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b36:	0412      	lsls	r2, r2, #16
 8005b38:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005b44:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005b46:	4770      	bx	lr
 8005b48:	e000ed00 	.word	0xe000ed00

08005b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b4c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b4e:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <HAL_NVIC_SetPriority+0x64>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b56:	f1c3 0c07 	rsb	ip, r3, #7
 8005b5a:	f1bc 0f04 	cmp.w	ip, #4
 8005b5e:	bf28      	it	cs
 8005b60:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b64:	f103 0e04 	add.w	lr, r3, #4
 8005b68:	f1be 0f06 	cmp.w	lr, #6
 8005b6c:	bf8c      	ite	hi
 8005b6e:	3b03      	subhi	r3, #3
 8005b70:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b72:	f04f 3eff 	mov.w	lr, #4294967295
 8005b76:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005b7a:	ea21 010c 	bic.w	r1, r1, ip
 8005b7e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b80:	fa0e fe03 	lsl.w	lr, lr, r3
 8005b84:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b88:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	db09      	blt.n	8005ba2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b8e:	0109      	lsls	r1, r1, #4
 8005b90:	b2c9      	uxtb	r1, r1
 8005b92:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005b96:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005b9a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba2:	f000 000f 	and.w	r0, r0, #15
 8005ba6:	0109      	lsls	r1, r1, #4
 8005ba8:	b2c9      	uxtb	r1, r1
 8005baa:	4b02      	ldr	r3, [pc, #8]	; (8005bb4 <HAL_NVIC_SetPriority+0x68>)
 8005bac:	5419      	strb	r1, [r3, r0]
 8005bae:	e7f6      	b.n	8005b9e <HAL_NVIC_SetPriority+0x52>
 8005bb0:	e000ed00 	.word	0xe000ed00
 8005bb4:	e000ed14 	.word	0xe000ed14

08005bb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	db07      	blt.n	8005bcc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bbc:	0941      	lsrs	r1, r0, #5
 8005bbe:	f000 001f 	and.w	r0, r0, #31
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4083      	lsls	r3, r0
 8005bc6:	4a02      	ldr	r2, [pc, #8]	; (8005bd0 <HAL_NVIC_EnableIRQ+0x18>)
 8005bc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000e100 	.word	0xe000e100

08005bd4 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bd4:	3801      	subs	r0, #1
 8005bd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005bda:	d20b      	bcs.n	8005bf4 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005be0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be2:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <HAL_SYSTICK_Config+0x24>)
 8005be4:	21f0      	movs	r1, #240	; 0xf0
 8005be6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bea:	2000      	movs	r0, #0
 8005bec:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bee:	2207      	movs	r2, #7
 8005bf0:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8005bf2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005bf4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005bf6:	4770      	bx	lr
 8005bf8:	e000ed00 	.word	0xe000ed00

08005bfc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005bfc:	b170      	cbz	r0, 8005c1c <HAL_DAC_Init+0x20>
{
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005c02:	7903      	ldrb	r3, [r0, #4]
 8005c04:	b133      	cbz	r3, 8005c14 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c06:	2302      	movs	r3, #2
 8005c08:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8005c12:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005c14:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005c16:	f7fb fb55 	bl	80012c4 <HAL_DAC_MspInit>
 8005c1a:	e7f4      	b.n	8005c06 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8005c1c:	2001      	movs	r0, #1
}
 8005c1e:	4770      	bx	lr

08005c20 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c20:	7943      	ldrb	r3, [r0, #5]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d02e      	beq.n	8005c84 <HAL_DAC_Start+0x64>
{
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	4604      	mov	r4, r0
 8005c2a:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c30:	2302      	movs	r3, #2
 8005c32:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	6811      	ldr	r1, [r2, #0]
 8005c38:	f005 0610 	and.w	r6, r5, #16
 8005c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8005c44:	f7fe fd3a 	bl	80046bc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005c48:	b97d      	cbnz	r5, 8005c6a <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d004      	beq.n	8005c60 <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c56:	2301      	movs	r3, #1
 8005c58:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005c60:	6853      	ldr	r3, [r2, #4]
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	6053      	str	r3, [r2, #4]
 8005c68:	e7f5      	b.n	8005c56 <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005c6a:	6821      	ldr	r1, [r4, #0]
 8005c6c:	680a      	ldr	r2, [r1, #0]
 8005c6e:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8005c72:	2302      	movs	r3, #2
 8005c74:	40b3      	lsls	r3, r6
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d1ed      	bne.n	8005c56 <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005c7a:	684b      	ldr	r3, [r1, #4]
 8005c7c:	f043 0302 	orr.w	r3, r3, #2
 8005c80:	604b      	str	r3, [r1, #4]
 8005c82:	e7e8      	b.n	8005c56 <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 8005c84:	2002      	movs	r0, #2
}
 8005c86:	4770      	bx	lr

08005c88 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	9804      	ldr	r0, [sp, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c8e:	7966      	ldrb	r6, [r4, #5]
 8005c90:	2e01      	cmp	r6, #1
 8005c92:	d06a      	beq.n	8005d6a <HAL_DAC_Start_DMA+0xe2>
 8005c94:	460d      	mov	r5, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	2201      	movs	r2, #1
 8005c9a:	7162      	strb	r2, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	7122      	strb	r2, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	d12f      	bne.n	8005d04 <HAL_DAC_Start_DMA+0x7c>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005ca4:	68a2      	ldr	r2, [r4, #8]
 8005ca6:	4e32      	ldr	r6, [pc, #200]	; (8005d70 <HAL_DAC_Start_DMA+0xe8>)
 8005ca8:	62d6      	str	r6, [r2, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005caa:	68a2      	ldr	r2, [r4, #8]
 8005cac:	4e31      	ldr	r6, [pc, #196]	; (8005d74 <HAL_DAC_Start_DMA+0xec>)
 8005cae:	6316      	str	r6, [r2, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005cb0:	68a2      	ldr	r2, [r4, #8]
 8005cb2:	4e31      	ldr	r6, [pc, #196]	; (8005d78 <HAL_DAC_Start_DMA+0xf0>)
 8005cb4:	6356      	str	r6, [r2, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005cb6:	6826      	ldr	r6, [r4, #0]
 8005cb8:	6832      	ldr	r2, [r6, #0]
 8005cba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cbe:	6032      	str	r2, [r6, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005cc0:	2804      	cmp	r0, #4
 8005cc2:	d019      	beq.n	8005cf8 <HAL_DAC_Start_DMA+0x70>
 8005cc4:	2808      	cmp	r0, #8
 8005cc6:	d01a      	beq.n	8005cfe <HAL_DAC_Start_DMA+0x76>
 8005cc8:	b198      	cbz	r0, 8005cf2 <HAL_DAC_Start_DMA+0x6a>
 8005cca:	462a      	mov	r2, r5

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005ccc:	6826      	ldr	r6, [r4, #0]
 8005cce:	6830      	ldr	r0, [r6, #0]
 8005cd0:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8005cd4:	6030      	str	r0, [r6, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005cd6:	68a0      	ldr	r0, [r4, #8]
 8005cd8:	f000 fa58 	bl	800618c <HAL_DMA_Start_IT>
 8005cdc:	4606      	mov	r6, r0
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d035      	beq.n	8005d52 <HAL_DAC_Start_DMA+0xca>
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	f043 0304 	orr.w	r3, r3, #4
 8005cec:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8005cee:	4630      	mov	r0, r6
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	3208      	adds	r2, #8
        break;
 8005cf6:	e7e9      	b.n	8005ccc <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	320c      	adds	r2, #12
        break;
 8005cfc:	e7e6      	b.n	8005ccc <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	3210      	adds	r2, #16
        break;
 8005d02:	e7e3      	b.n	8005ccc <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005d04:	68e2      	ldr	r2, [r4, #12]
 8005d06:	4e1d      	ldr	r6, [pc, #116]	; (8005d7c <HAL_DAC_Start_DMA+0xf4>)
 8005d08:	62d6      	str	r6, [r2, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005d0a:	68e2      	ldr	r2, [r4, #12]
 8005d0c:	4e1c      	ldr	r6, [pc, #112]	; (8005d80 <HAL_DAC_Start_DMA+0xf8>)
 8005d0e:	6316      	str	r6, [r2, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005d10:	68e2      	ldr	r2, [r4, #12]
 8005d12:	4e1c      	ldr	r6, [pc, #112]	; (8005d84 <HAL_DAC_Start_DMA+0xfc>)
 8005d14:	6356      	str	r6, [r2, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005d16:	6826      	ldr	r6, [r4, #0]
 8005d18:	6832      	ldr	r2, [r6, #0]
 8005d1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d1e:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8005d20:	2804      	cmp	r0, #4
 8005d22:	d010      	beq.n	8005d46 <HAL_DAC_Start_DMA+0xbe>
 8005d24:	2808      	cmp	r0, #8
 8005d26:	d011      	beq.n	8005d4c <HAL_DAC_Start_DMA+0xc4>
 8005d28:	b150      	cbz	r0, 8005d40 <HAL_DAC_Start_DMA+0xb8>
 8005d2a:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d2c:	6826      	ldr	r6, [r4, #0]
 8005d2e:	6830      	ldr	r0, [r6, #0]
 8005d30:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8005d34:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005d36:	68e0      	ldr	r0, [r4, #12]
 8005d38:	f000 fa28 	bl	800618c <HAL_DMA_Start_IT>
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	e7ce      	b.n	8005cde <HAL_DAC_Start_DMA+0x56>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	3214      	adds	r2, #20
        break;
 8005d44:	e7f2      	b.n	8005d2c <HAL_DAC_Start_DMA+0xa4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	3218      	adds	r2, #24
        break;
 8005d4a:	e7ef      	b.n	8005d2c <HAL_DAC_Start_DMA+0xa4>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	321c      	adds	r2, #28
        break;
 8005d50:	e7ec      	b.n	8005d2c <HAL_DAC_Start_DMA+0xa4>
    __HAL_DAC_ENABLE(hdac, Channel);
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	f005 0510 	and.w	r5, r5, #16
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	fa00 f505 	lsl.w	r5, r0, r5
 8005d60:	4315      	orrs	r5, r2
 8005d62:	601d      	str	r5, [r3, #0]
    HAL_Delay(1);
 8005d64:	f7fe fcaa 	bl	80046bc <HAL_Delay>
 8005d68:	e7c1      	b.n	8005cee <HAL_DAC_Start_DMA+0x66>
  __HAL_LOCK(hdac);
 8005d6a:	2602      	movs	r6, #2
 8005d6c:	e7bf      	b.n	8005cee <HAL_DAC_Start_DMA+0x66>
 8005d6e:	bf00      	nop
 8005d70:	08005dbb 	.word	0x08005dbb
 8005d74:	08005dcd 	.word	0x08005dcd
 8005d78:	08005dd9 	.word	0x08005dd9
 8005d7c:	08005fd7 	.word	0x08005fd7
 8005d80:	08005fe9 	.word	0x08005fe9
 8005d84:	08005ff5 	.word	0x08005ff5

08005d88 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d88:	b410      	push	{r4}
 8005d8a:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8005d8c:	2400      	movs	r4, #0
 8005d8e:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005d90:	6800      	ldr	r0, [r0, #0]
 8005d92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005d94:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005d96:	b951      	cbnz	r1, 8005dae <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005d98:	9901      	ldr	r1, [sp, #4]
 8005d9a:	3108      	adds	r1, #8
 8005d9c:	440a      	add	r2, r1
 8005d9e:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005da0:	9a01      	ldr	r2, [sp, #4]
 8005da2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8005da4:	2000      	movs	r0, #0
 8005da6:	b003      	add	sp, #12
 8005da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dac:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005dae:	9901      	ldr	r1, [sp, #4]
 8005db0:	3114      	adds	r1, #20
 8005db2:	440a      	add	r2, r1
 8005db4:	9201      	str	r2, [sp, #4]
 8005db6:	e7f3      	b.n	8005da0 <HAL_DAC_SetValue+0x18>

08005db8 <HAL_DAC_ConvCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005db8:	4770      	bx	lr

08005dba <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005dba:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dbc:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f7ff fffa 	bl	8005db8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	7123      	strb	r3, [r4, #4]
}
 8005dc8:	bd10      	pop	{r4, pc}

08005dca <HAL_DAC_ConvHalfCpltCallbackCh1>:
}
 8005dca:	4770      	bx	lr

08005dcc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005dcc:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005dce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005dd0:	f7ff fffb 	bl	8005dca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005dd4:	bd08      	pop	{r3, pc}

08005dd6 <HAL_DAC_ErrorCallbackCh1>:
}
 8005dd6:	4770      	bx	lr

08005dd8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dda:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	f043 0304 	orr.w	r3, r3, #4
 8005de2:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005de4:	4620      	mov	r0, r4
 8005de6:	f7ff fff6 	bl	8005dd6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005dea:	2301      	movs	r3, #1
 8005dec:	7123      	strb	r3, [r4, #4]
}
 8005dee:	bd10      	pop	{r4, pc}

08005df0 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8005df0:	7943      	ldrb	r3, [r0, #5]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	f000 80e8 	beq.w	8005fc8 <HAL_DAC_ConfigChannel+0x1d8>
{
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460e      	mov	r6, r1
 8005e00:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8005e02:	2301      	movs	r3, #1
 8005e04:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e06:	2302      	movs	r3, #2
 8005e08:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005e0a:	688b      	ldr	r3, [r1, #8]
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d071      	beq.n	8005ef4 <HAL_DAC_ConfigChannel+0x104>
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005e10:	69f3      	ldr	r3, [r6, #28]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	f000 80b8 	beq.w	8005f88 <HAL_DAC_ConfigChannel+0x198>
  tmpreg1 = hdac->Instance->MCR;
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005e1c:	f005 0510 	and.w	r5, r5, #16
 8005e20:	2207      	movs	r2, #7
 8005e22:	40aa      	lsls	r2, r5
 8005e24:	43d2      	mvns	r2, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e26:	69b1      	ldr	r1, [r6, #24]
 8005e28:	2901      	cmp	r1, #1
 8005e2a:	f000 80ba 	beq.w	8005fa2 <HAL_DAC_ConfigChannel+0x1b2>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e2e:	2902      	cmp	r1, #2
 8005e30:	f000 80b9 	beq.w	8005fa6 <HAL_DAC_ConfigChannel+0x1b6>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e34:	6971      	ldr	r1, [r6, #20]
 8005e36:	fab1 f181 	clz	r1, r1
 8005e3a:	0949      	lsrs	r1, r1, #5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005e40:	40a8      	lsls	r0, r5
 8005e42:	ea23 0300 	bic.w	r3, r3, r0
 8005e46:	4013      	ands	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e4c:	40aa      	lsls	r2, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e4e:	ea23 0302 	bic.w	r3, r3, r2
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005e52:	7932      	ldrb	r2, [r6, #4]
 8005e54:	2a01      	cmp	r2, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2200      	movne	r2, #0
 8005e5a:	2201      	moveq	r2, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e5c:	68b7      	ldr	r7, [r6, #8]
 8005e5e:	6970      	ldr	r0, [r6, #20]
 8005e60:	4307      	orrs	r7, r0
 8005e62:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8005e66:	7972      	ldrb	r2, [r6, #5]
 8005e68:	2a01      	cmp	r2, #1
 8005e6a:	bf14      	ite	ne
 8005e6c:	2200      	movne	r2, #0
 8005e6e:	2201      	moveq	r2, #1
 8005e70:	ea47 2742 	orr.w	r7, r7, r2, lsl #9
 8005e74:	430f      	orrs	r7, r1
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005e76:	f423 4840 	bic.w	r8, r3, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005e7a:	6833      	ldr	r3, [r6, #0]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	f000 8094 	beq.w	8005faa <HAL_DAC_ConfigChannel+0x1ba>
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005e82:	ea48 0803 	orr.w	r8, r8, r3
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e86:	40af      	lsls	r7, r5
 8005e88:	ea47 0708 	orr.w	r7, r7, r8
  hdac->Instance->MCR = tmpreg1;
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	63df      	str	r7, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005e90:	6821      	ldr	r1, [r4, #0]
 8005e92:	680b      	ldr	r3, [r1, #0]
 8005e94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e98:	40aa      	lsls	r2, r5
 8005e9a:	ea23 0302 	bic.w	r3, r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 8005ea0:	6821      	ldr	r1, [r4, #0]
 8005ea2:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ea4:	f640 73fe 	movw	r3, #4094	; 0xffe
 8005ea8:	40ab      	lsls	r3, r5
 8005eaa:	ea22 0203 	bic.w	r2, r2, r3
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005eae:	68f3      	ldr	r3, [r6, #12]
 8005eb0:	40ab      	lsls	r3, r5
 8005eb2:	4313      	orrs	r3, r2
  hdac->Instance->CR = tmpreg1;
 8005eb4:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005eb6:	6821      	ldr	r1, [r4, #0]
 8005eb8:	680b      	ldr	r3, [r1, #0]
 8005eba:	22c0      	movs	r2, #192	; 0xc0
 8005ebc:	40aa      	lsls	r2, r5
 8005ebe:	ea23 0302 	bic.w	r3, r3, r2
 8005ec2:	600b      	str	r3, [r1, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005ec4:	68f3      	ldr	r3, [r6, #12]
 8005ec6:	f3c3 0183 	ubfx	r1, r3, #2, #4
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	6e02      	ldr	r2, [r0, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005ece:	6933      	ldr	r3, [r6, #16]
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ed6:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005ed8:	40ab      	lsls	r3, r5
 8005eda:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005ede:	40a9      	lsls	r1, r5
 8005ee0:	ea22 0201 	bic.w	r2, r2, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	6603      	str	r3, [r0, #96]	; 0x60
  hdac->State = HAL_DAC_STATE_READY;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8005eec:	2000      	movs	r0, #0
 8005eee:	7160      	strb	r0, [r4, #5]
}
 8005ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8005ef4:	f7fe fbdc 	bl	80046b0 <HAL_GetTick>
 8005ef8:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005efa:	b17d      	cbz	r5, 8005f1c <HAL_DAC_ConfigChannel+0x12c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	da3a      	bge.n	8005f7a <HAL_DAC_ConfigChannel+0x18a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f04:	f7fe fbd4 	bl	80046b0 <HAL_GetTick>
 8005f08:	1bc0      	subs	r0, r0, r7
 8005f0a:	2801      	cmp	r0, #1
 8005f0c:	d9f6      	bls.n	8005efc <HAL_DAC_ConfigChannel+0x10c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	f043 0308 	orr.w	r3, r3, #8
 8005f14:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f16:	2003      	movs	r0, #3
 8005f18:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8005f1a:	e7e9      	b.n	8005ef0 <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005f24:	d00b      	beq.n	8005f3e <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f26:	f7fe fbc3 	bl	80046b0 <HAL_GetTick>
 8005f2a:	1bc0      	subs	r0, r0, r7
 8005f2c:	2801      	cmp	r0, #1
 8005f2e:	d9f5      	bls.n	8005f1c <HAL_DAC_ConfigChannel+0x12c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	f043 0308 	orr.w	r3, r3, #8
 8005f36:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f38:	2003      	movs	r0, #3
 8005f3a:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8005f3c:	e7d8      	b.n	8005ef0 <HAL_DAC_ConfigChannel+0x100>
      HAL_Delay(1);
 8005f3e:	2001      	movs	r0, #1
 8005f40:	f7fe fbbc 	bl	80046bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005f4e:	f005 0210 	and.w	r2, r5, #16
 8005f52:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005f56:	4091      	lsls	r1, r2
 8005f58:	ea23 0301 	bic.w	r3, r3, r1
 8005f5c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005f5e:	4091      	lsls	r1, r2
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005f68:	21ff      	movs	r1, #255	; 0xff
 8005f6a:	4091      	lsls	r1, r2
 8005f6c:	ea23 0301 	bic.w	r3, r3, r1
 8005f70:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005f72:	4091      	lsls	r1, r2
 8005f74:	430b      	orrs	r3, r1
 8005f76:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005f78:	e74a      	b.n	8005e10 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fe fb9e 	bl	80046bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44
 8005f86:	e7e0      	b.n	8005f4a <HAL_DAC_ConfigChannel+0x15a>
    tmpreg1 = hdac->Instance->CCR;
 8005f88:	6821      	ldr	r1, [r4, #0]
 8005f8a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005f8c:	f005 0010 	and.w	r0, r5, #16
 8005f90:	231f      	movs	r3, #31
 8005f92:	4083      	lsls	r3, r0
 8005f94:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f98:	6a33      	ldr	r3, [r6, #32]
 8005f9a:	4083      	lsls	r3, r0
 8005f9c:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8005f9e:	638b      	str	r3, [r1, #56]	; 0x38
 8005fa0:	e73a      	b.n	8005e18 <HAL_DAC_ConfigChannel+0x28>
    connectOnChip = 0x00000000UL;
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	e74a      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x4c>
    connectOnChip = DAC_MCR_MODE1_0;
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	e748      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x4c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005faa:	f001 f9bd 	bl	8007328 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <HAL_DAC_ConfigChannel+0x1dc>)
 8005fb0:	4298      	cmp	r0, r3
 8005fb2:	d902      	bls.n	8005fba <HAL_DAC_ConfigChannel+0x1ca>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005fb4:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8005fb8:	e765      	b.n	8005e86 <HAL_DAC_ConfigChannel+0x96>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_DAC_ConfigChannel+0x1e0>)
 8005fbc:	4298      	cmp	r0, r3
 8005fbe:	f67f af62 	bls.w	8005e86 <HAL_DAC_ConfigChannel+0x96>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005fc2:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 8005fc6:	e75e      	b.n	8005e86 <HAL_DAC_ConfigChannel+0x96>
  __HAL_LOCK(hdac);
 8005fc8:	2002      	movs	r0, #2
}
 8005fca:	4770      	bx	lr
 8005fcc:	09896800 	.word	0x09896800
 8005fd0:	04c4b400 	.word	0x04c4b400

08005fd4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fd4:	4770      	bx	lr

08005fd6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005fd6:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd8:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff fffa 	bl	8005fd4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	7123      	strb	r3, [r4, #4]
}
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
}
 8005fe6:	4770      	bx	lr

08005fe8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005fea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005fec:	f7ff fffb 	bl	8005fe6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005ff0:	bd08      	pop	{r3, pc}

08005ff2 <HAL_DACEx_ErrorCallbackCh2>:
}
 8005ff2:	4770      	bx	lr

08005ff4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff6:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006000:	4620      	mov	r0, r4
 8006002:	f7ff fff6 	bl	8005ff2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006006:	2301      	movs	r3, #1
 8006008:	7123      	strb	r3, [r4, #4]
}
 800600a:	bd10      	pop	{r4, pc}

0800600c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800600c:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800600e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8006010:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8006012:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006014:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8006016:	b114      	cbz	r4, 800601e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006018:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800601a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800601c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800601e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006020:	f004 0c1f 	and.w	ip, r4, #31
 8006024:	2401      	movs	r4, #1
 8006026:	fa04 f40c 	lsl.w	r4, r4, ip
 800602a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800602c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800602e:	6804      	ldr	r4, [r0, #0]
 8006030:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006032:	6883      	ldr	r3, [r0, #8]
 8006034:	2b10      	cmp	r3, #16
 8006036:	d005      	beq.n	8006044 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006038:	6803      	ldr	r3, [r0, #0]
 800603a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800603c:	6803      	ldr	r3, [r0, #0]
 800603e:	60da      	str	r2, [r3, #12]
  }
}
 8006040:	bc30      	pop	{r4, r5}
 8006042:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8006044:	6803      	ldr	r3, [r0, #0]
 8006046:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006048:	6803      	ldr	r3, [r0, #0]
 800604a:	60d9      	str	r1, [r3, #12]
 800604c:	e7f8      	b.n	8006040 <DMA_SetConfig+0x34>
	...

08006050 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006050:	b410      	push	{r4}
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006052:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006054:	4c0d      	ldr	r4, [pc, #52]	; (800608c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8006058:	490e      	ldr	r1, [pc, #56]	; (8006094 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800605a:	42a3      	cmp	r3, r4
 800605c:	bf88      	it	hi
 800605e:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006060:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006062:	f021 0103 	bic.w	r1, r1, #3
 8006066:	440a      	add	r2, r1
 8006068:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800606a:	4a0b      	ldr	r2, [pc, #44]	; (8006098 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 800606c:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800606e:	b2db      	uxtb	r3, r3
 8006070:	3b08      	subs	r3, #8
 8006072:	4a0a      	ldr	r2, [pc, #40]	; (800609c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006078:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800607c:	2201      	movs	r2, #1
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	6503      	str	r3, [r0, #80]	; 0x50
}
 8006084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40020407 	.word	0x40020407
 8006090:	40020800 	.word	0x40020800
 8006094:	40020820 	.word	0x40020820
 8006098:	40020880 	.word	0x40020880
 800609c:	cccccccd 	.word	0xcccccccd

080060a0 <HAL_DMA_Init>:
  if (hdma == NULL)
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d060      	beq.n	8006166 <HAL_DMA_Init+0xc6>
{
 80060a4:	b510      	push	{r4, lr}
 80060a6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060a8:	6802      	ldr	r2, [r0, #0]
 80060aa:	4b30      	ldr	r3, [pc, #192]	; (800616c <HAL_DMA_Init+0xcc>)
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d83f      	bhi.n	8006130 <HAL_DMA_Init+0x90>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060b0:	4b2f      	ldr	r3, [pc, #188]	; (8006170 <HAL_DMA_Init+0xd0>)
 80060b2:	4413      	add	r3, r2
 80060b4:	492f      	ldr	r1, [pc, #188]	; (8006174 <HAL_DMA_Init+0xd4>)
 80060b6:	fba1 1303 	umull	r1, r3, r1, r3
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80060be:	492e      	ldr	r1, [pc, #184]	; (8006178 <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060c0:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80060c2:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80060c4:	2302      	movs	r3, #2
 80060c6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80060ca:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80060cc:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80060d0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80060d4:	68a3      	ldr	r3, [r4, #8]
 80060d6:	68e0      	ldr	r0, [r4, #12]
 80060d8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060da:	6920      	ldr	r0, [r4, #16]
 80060dc:	4303      	orrs	r3, r0
 80060de:	6960      	ldr	r0, [r4, #20]
 80060e0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060e2:	69a0      	ldr	r0, [r4, #24]
 80060e4:	4303      	orrs	r3, r0
 80060e6:	69e0      	ldr	r0, [r4, #28]
 80060e8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80060ea:	6a20      	ldr	r0, [r4, #32]
 80060ec:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80060ee:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 80060f0:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80060f2:	4620      	mov	r0, r4
 80060f4:	f7ff ffac 	bl	8006050 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060f8:	68a3      	ldr	r3, [r4, #8]
 80060fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060fe:	bf04      	itt	eq
 8006100:	2300      	moveq	r3, #0
 8006102:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006106:	7922      	ldrb	r2, [r4, #4]
 8006108:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800610a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800610c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800610e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	1e5a      	subs	r2, r3, #1
 8006114:	2a03      	cmp	r2, #3
 8006116:	d914      	bls.n	8006142 <HAL_DMA_Init+0xa2>
    hdma->DMAmuxRequestGen = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800611c:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800611e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006120:	2000      	movs	r0, #0
 8006122:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8006124:	2301      	movs	r3, #1
 8006126:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 800612a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800612e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <HAL_DMA_Init+0xdc>)
 8006132:	4413      	add	r3, r2
 8006134:	490f      	ldr	r1, [pc, #60]	; (8006174 <HAL_DMA_Init+0xd4>)
 8006136:	fba1 1303 	umull	r1, r3, r1, r3
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4910      	ldr	r1, [pc, #64]	; (8006180 <HAL_DMA_Init+0xe0>)
 8006140:	e7be      	b.n	80060c0 <HAL_DMA_Init+0x20>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006142:	b2db      	uxtb	r3, r3

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <HAL_DMA_Init+0xe4>)
 8006146:	441a      	add	r2, r3
 8006148:	0092      	lsls	r2, r2, #2
 800614a:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800614c:	490e      	ldr	r1, [pc, #56]	; (8006188 <HAL_DMA_Init+0xe8>)
 800614e:	65a1      	str	r1, [r4, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006150:	3b01      	subs	r3, #1
 8006152:	2101      	movs	r1, #1
 8006154:	fa01 f303 	lsl.w	r3, r1, r3
 8006158:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800615e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006160:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006162:	605a      	str	r2, [r3, #4]
 8006164:	e7dc      	b.n	8006120 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 8006166:	2001      	movs	r0, #1
}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40020407 	.word	0x40020407
 8006170:	bffdfff8 	.word	0xbffdfff8
 8006174:	cccccccd 	.word	0xcccccccd
 8006178:	40020000 	.word	0x40020000
 800617c:	bffdfbf8 	.word	0xbffdfbf8
 8006180:	40020400 	.word	0x40020400
 8006184:	1000823f 	.word	0x1000823f
 8006188:	40020940 	.word	0x40020940

0800618c <HAL_DMA_Start_IT>:
{
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006190:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8006194:	2801      	cmp	r0, #1
 8006196:	d041      	beq.n	800621c <HAL_DMA_Start_IT+0x90>
 8006198:	2001      	movs	r0, #1
 800619a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800619e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80061a2:	b2c0      	uxtb	r0, r0
 80061a4:	2801      	cmp	r0, #1
 80061a6:	d004      	beq.n	80061b2 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 80061a8:	2300      	movs	r3, #0
 80061aa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 80061ae:	2002      	movs	r0, #2
}
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80061b2:	2002      	movs	r0, #2
 80061b4:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061b8:	2000      	movs	r0, #0
 80061ba:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80061bc:	6825      	ldr	r5, [r4, #0]
 80061be:	6828      	ldr	r0, [r5, #0]
 80061c0:	f020 0001 	bic.w	r0, r0, #1
 80061c4:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061c6:	4620      	mov	r0, r4
 80061c8:	f7ff ff20 	bl	800600c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80061cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80061ce:	b1d3      	cbz	r3, 8006206 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	f043 030e 	orr.w	r3, r3, #14
 80061d8:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80061e2:	d003      	beq.n	80061ec <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ea:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80061ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061ee:	b11b      	cbz	r3, 80061f8 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80061f8:	6822      	ldr	r2, [r4, #0]
 80061fa:	6813      	ldr	r3, [r2, #0]
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2000      	movs	r0, #0
 8006204:	e7d4      	b.n	80061b0 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	6813      	ldr	r3, [r2, #0]
 800620a:	f023 0304 	bic.w	r3, r3, #4
 800620e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	f043 030a 	orr.w	r3, r3, #10
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e7de      	b.n	80061da <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800621c:	2002      	movs	r0, #2
 800621e:	e7c7      	b.n	80061b0 <HAL_DMA_Start_IT+0x24>

08006220 <HAL_DMA_Abort>:
{
 8006220:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006222:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	2a02      	cmp	r2, #2
 800622a:	d009      	beq.n	8006240 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800622c:	2204      	movs	r2, #4
 800622e:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8006230:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800623e:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006240:	6801      	ldr	r1, [r0, #0]
 8006242:	680a      	ldr	r2, [r1, #0]
 8006244:	f022 020e 	bic.w	r2, r2, #14
 8006248:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800624a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800624c:	680a      	ldr	r2, [r1, #0]
 800624e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006252:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8006254:	6801      	ldr	r1, [r0, #0]
 8006256:	680a      	ldr	r2, [r1, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800625e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8006260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006262:	f002 011f 	and.w	r1, r2, #31
 8006266:	2201      	movs	r2, #1
 8006268:	408a      	lsls	r2, r1
 800626a:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800626c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800626e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006270:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8006272:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006274:	b142      	cbz	r2, 8006288 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006276:	6811      	ldr	r1, [r2, #0]
 8006278:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800627c:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800627e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006280:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006282:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006284:	2000      	movs	r0, #0
 8006286:	e7d4      	b.n	8006232 <HAL_DMA_Abort+0x12>
 8006288:	2000      	movs	r0, #0
 800628a:	e7d2      	b.n	8006232 <HAL_DMA_Abort+0x12>

0800628c <HAL_DMA_Abort_IT>:
{
 800628c:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800628e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d009      	beq.n	80062ac <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006298:	2304      	movs	r3, #4
 800629a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800629c:	2301      	movs	r3, #1
 800629e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80062a2:	2200      	movs	r2, #0
 80062a4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 80062a8:	4618      	mov	r0, r3
}
 80062aa:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062ac:	6802      	ldr	r2, [r0, #0]
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	f023 030e 	bic.w	r3, r3, #14
 80062b4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80062b6:	6802      	ldr	r2, [r0, #0]
 80062b8:	6813      	ldr	r3, [r2, #0]
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062c0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80062cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80062ce:	f003 021f 	and.w	r2, r3, #31
 80062d2:	2301      	movs	r3, #1
 80062d4:	4093      	lsls	r3, r2
 80062d6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80062da:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80062dc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80062de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80062e0:	b133      	cbz	r3, 80062f0 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ea:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80062ec:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80062ee:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80062f6:	2300      	movs	r3, #0
 80062f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80062fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80062fe:	b113      	cbz	r3, 8006306 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8006300:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006302:	2000      	movs	r0, #0
 8006304:	e7d1      	b.n	80062aa <HAL_DMA_Abort_IT+0x1e>
 8006306:	2000      	movs	r0, #0
 8006308:	e7cf      	b.n	80062aa <HAL_DMA_Abort_IT+0x1e>

0800630a <HAL_DMA_IRQHandler>:
{
 800630a:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800630c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800630e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006310:	6804      	ldr	r4, [r0, #0]
 8006312:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006314:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2204      	movs	r2, #4
 800631c:	409a      	lsls	r2, r3
 800631e:	420a      	tst	r2, r1
 8006320:	d015      	beq.n	800634e <HAL_DMA_IRQHandler+0x44>
 8006322:	f015 0f04 	tst.w	r5, #4
 8006326:	d012      	beq.n	800634e <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	f013 0f20 	tst.w	r3, #32
 800632e:	d103      	bne.n	8006338 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	f023 0304 	bic.w	r3, r3, #4
 8006336:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006338:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800633a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800633c:	f003 021f 	and.w	r2, r3, #31
 8006340:	2304      	movs	r3, #4
 8006342:	4093      	lsls	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006346:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006348:	b103      	cbz	r3, 800634c <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800634a:	4798      	blx	r3
}
 800634c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800634e:	2202      	movs	r2, #2
 8006350:	409a      	lsls	r2, r3
 8006352:	420a      	tst	r2, r1
 8006354:	d01c      	beq.n	8006390 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8006356:	f015 0f02 	tst.w	r5, #2
 800635a:	d019      	beq.n	8006390 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	f013 0f20 	tst.w	r3, #32
 8006362:	d106      	bne.n	8006372 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	f023 030a 	bic.w	r3, r3, #10
 800636a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800636c:	2301      	movs	r3, #1
 800636e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006372:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006374:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006376:	f003 021f 	and.w	r2, r3, #31
 800637a:	2302      	movs	r3, #2
 800637c:	4093      	lsls	r3, r2
 800637e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006380:	2300      	movs	r3, #0
 8006382:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006386:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0df      	beq.n	800634c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800638c:	4798      	blx	r3
 800638e:	e7dd      	b.n	800634c <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006390:	2208      	movs	r2, #8
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	420b      	tst	r3, r1
 8006398:	d0d8      	beq.n	800634c <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800639a:	f015 0f08 	tst.w	r5, #8
 800639e:	d0d5      	beq.n	800634c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	f023 030e 	bic.w	r3, r3, #14
 80063a6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80063aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2201      	movs	r2, #1
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063b8:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80063ba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80063be:	2300      	movs	r3, #0
 80063c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80063c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0c0      	beq.n	800634c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80063ca:	4798      	blx	r3
  return;
 80063cc:	e7be      	b.n	800634c <HAL_DMA_IRQHandler+0x42>
	...

080063d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063d0:	680b      	ldr	r3, [r1, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80d6 	beq.w	8006584 <HAL_GPIO_Init+0x1b4>
{
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063de:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 80063e2:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80063e4:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063e6:	f04f 0e03 	mov.w	lr, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063ea:	4c67      	ldr	r4, [pc, #412]	; (8006588 <HAL_GPIO_Init+0x1b8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063ec:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006594 <HAL_GPIO_Init+0x1c4>
 80063f0:	e047      	b.n	8006482 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80063f2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063f4:	fa0e fa0c 	lsl.w	sl, lr, ip
 80063f8:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063fc:	68cb      	ldr	r3, [r1, #12]
 80063fe:	fa03 f30c 	lsl.w	r3, r3, ip
 8006402:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8006406:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8006408:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800640a:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800640e:	684b      	ldr	r3, [r1, #4]
 8006410:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006414:	4093      	lsls	r3, r2
 8006416:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8006418:	6043      	str	r3, [r0, #4]
 800641a:	e03d      	b.n	8006498 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800641c:	2700      	movs	r7, #0
 800641e:	fa07 f70b 	lsl.w	r7, r7, fp
 8006422:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006426:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8006428:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 800642a:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800642e:	684e      	ldr	r6, [r1, #4]
 8006430:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8006434:	bf0c      	ite	eq
 8006436:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8006438:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 800643c:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 800643e:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006440:	684e      	ldr	r6, [r1, #4]
 8006442:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8006446:	bf0c      	ite	eq
 8006448:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800644a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 800644e:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR1;
 8006450:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006452:	684e      	ldr	r6, [r1, #4]
 8006454:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8006458:	bf0c      	ite	eq
 800645a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800645c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8006460:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006462:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006464:	684e      	ldr	r6, [r1, #4]
 8006466:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 800646a:	bf0c      	ite	eq
 800646c:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 800646e:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 8006472:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8006474:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006476:	680b      	ldr	r3, [r1, #0]
 8006478:	f10c 0c02 	add.w	ip, ip, #2
 800647c:	fa33 f702 	lsrs.w	r7, r3, r2
 8006480:	d07d      	beq.n	800657e <HAL_GPIO_Init+0x1ae>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006482:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8006486:	ea17 0903 	ands.w	r9, r7, r3
 800648a:	d0f3      	beq.n	8006474 <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800648c:	684b      	ldr	r3, [r1, #4]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	3b01      	subs	r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d9ac      	bls.n	80063f2 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006498:	684b      	ldr	r3, [r1, #4]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d022      	beq.n	80064e8 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 80064a2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064a4:	fa0e f30c 	lsl.w	r3, lr, ip
 80064a8:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ac:	688b      	ldr	r3, [r1, #8]
 80064ae:	fa03 f30c 	lsl.w	r3, r3, ip
 80064b2:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80064b4:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064b6:	684b      	ldr	r3, [r1, #4]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d113      	bne.n	80064e8 <HAL_GPIO_Init+0x118>
        temp = GPIOx->AFR[position >> 3U];
 80064c0:	08d7      	lsrs	r7, r2, #3
 80064c2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80064c6:	f8d7 a020 	ldr.w	sl, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064ca:	f002 0b07 	and.w	fp, r2, #7
 80064ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80064d2:	230f      	movs	r3, #15
 80064d4:	fa03 f30b 	lsl.w	r3, r3, fp
 80064d8:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80064dc:	690b      	ldr	r3, [r1, #16]
 80064de:	fa03 f30b 	lsl.w	r3, r3, fp
 80064e2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80064e6:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80064e8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064ea:	fa0e f30c 	lsl.w	r3, lr, ip
 80064ee:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064f2:	684b      	ldr	r3, [r1, #4]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	fa03 f30c 	lsl.w	r3, r3, ip
 80064fc:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80064fe:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006500:	684b      	ldr	r3, [r1, #4]
 8006502:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006506:	d0b5      	beq.n	8006474 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006508:	4e20      	ldr	r6, [pc, #128]	; (800658c <HAL_GPIO_Init+0x1bc>)
 800650a:	6e33      	ldr	r3, [r6, #96]	; 0x60
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	6633      	str	r3, [r6, #96]	; 0x60
 8006512:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800651c:	f022 0303 	bic.w	r3, r2, #3
 8006520:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006524:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006528:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800652c:	f002 0b03 	and.w	fp, r2, #3
 8006530:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8006534:	270f      	movs	r7, #15
 8006536:	fa07 f70b 	lsl.w	r7, r7, fp
 800653a:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800653e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006542:	f43f af6b 	beq.w	800641c <HAL_GPIO_Init+0x4c>
 8006546:	4540      	cmp	r0, r8
 8006548:	d011      	beq.n	800656e <HAL_GPIO_Init+0x19e>
 800654a:	4e11      	ldr	r6, [pc, #68]	; (8006590 <HAL_GPIO_Init+0x1c0>)
 800654c:	42b0      	cmp	r0, r6
 800654e:	d010      	beq.n	8006572 <HAL_GPIO_Init+0x1a2>
 8006550:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006554:	42b0      	cmp	r0, r6
 8006556:	d00e      	beq.n	8006576 <HAL_GPIO_Init+0x1a6>
 8006558:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800655c:	42b0      	cmp	r0, r6
 800655e:	d00c      	beq.n	800657a <HAL_GPIO_Init+0x1aa>
 8006560:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006564:	42b0      	cmp	r0, r6
 8006566:	bf0c      	ite	eq
 8006568:	2705      	moveq	r7, #5
 800656a:	2706      	movne	r7, #6
 800656c:	e757      	b.n	800641e <HAL_GPIO_Init+0x4e>
 800656e:	462f      	mov	r7, r5
 8006570:	e755      	b.n	800641e <HAL_GPIO_Init+0x4e>
 8006572:	2702      	movs	r7, #2
 8006574:	e753      	b.n	800641e <HAL_GPIO_Init+0x4e>
 8006576:	4677      	mov	r7, lr
 8006578:	e751      	b.n	800641e <HAL_GPIO_Init+0x4e>
 800657a:	2704      	movs	r7, #4
 800657c:	e74f      	b.n	800641e <HAL_GPIO_Init+0x4e>
  }
}
 800657e:	b003      	add	sp, #12
 8006580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010400 	.word	0x40010400
 800658c:	40021000 	.word	0x40021000
 8006590:	48000800 	.word	0x48000800
 8006594:	48000400 	.word	0x48000400

08006598 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006598:	b10a      	cbz	r2, 800659e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800659a:	6181      	str	r1, [r0, #24]
 800659c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800659e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80065a0:	4770      	bx	lr
	...

080065a4 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d060      	beq.n	800666a <HAL_OPAMP_Init+0xc6>
{
 80065a8:	b510      	push	{r4, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80065ae:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d05a      	beq.n	800666e <HAL_OPAMP_Init+0xca>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80065b8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d057      	beq.n	8006672 <HAL_OPAMP_Init+0xce>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c2:	4b2e      	ldr	r3, [pc, #184]	; (800667c <HAL_OPAMP_Init+0xd8>)
 80065c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	661a      	str	r2, [r3, #96]	; 0x60
 80065cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80065d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80065da:	b90b      	cbnz	r3, 80065e0 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80065dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7fc ff61 	bl	80034a8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	f023 0320 	bic.w	r3, r3, #32
 80065ec:	2b40      	cmp	r3, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	f023 0310 	bic.w	r3, r3, #16
 80065f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80065f8:	ea43 0301 	orr.w	r3, r3, r1
 80065fc:	6013      	str	r3, [r2, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80065fe:	6821      	ldr	r1, [r4, #0]
 8006600:	6808      	ldr	r0, [r1, #0]
 8006602:	6863      	ldr	r3, [r4, #4]
 8006604:	68a2      	ldr	r2, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006606:	bf1c      	itt	ne
 8006608:	4313      	orrne	r3, r2
 800660a:	68e2      	ldrne	r2, [r4, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	6922      	ldr	r2, [r4, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006614:	4313      	orrs	r3, r2
 8006616:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006618:	4313      	orrs	r3, r2
 800661a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800661c:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8006620:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006622:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006626:	4a16      	ldr	r2, [pc, #88]	; (8006680 <HAL_OPAMP_Init+0xdc>)
 8006628:	4002      	ands	r2, r0
 800662a:	4313      	orrs	r3, r2
 800662c:	7d22      	ldrb	r2, [r4, #20]
 800662e:	2a01      	cmp	r2, #1
 8006630:	bf14      	ite	ne
 8006632:	2200      	movne	r2, #0
 8006634:	2201      	moveq	r2, #1
 8006636:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800663a:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800663c:	6822      	ldr	r2, [r4, #0]
 800663e:	6993      	ldr	r3, [r2, #24]
 8006640:	2b00      	cmp	r3, #0
 8006642:	db09      	blt.n	8006658 <HAL_OPAMP_Init+0xb4>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006644:	6991      	ldr	r1, [r2, #24]
 8006646:	69a3      	ldr	r3, [r4, #24]
 8006648:	69e0      	ldr	r0, [r4, #28]
 800664a:	4303      	orrs	r3, r0
 800664c:	6a20      	ldr	r0, [r4, #32]
 800664e:	4303      	orrs	r3, r0
 8006650:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006654:	430b      	orrs	r3, r1
 8006656:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006658:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800665c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006660:	b953      	cbnz	r3, 8006678 <HAL_OPAMP_Init+0xd4>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006662:	2301      	movs	r3, #1
 8006664:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8006668:	e004      	b.n	8006674 <HAL_OPAMP_Init+0xd0>
    return HAL_ERROR;
 800666a:	2001      	movs	r0, #1
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 800666c:	4770      	bx	lr
    return HAL_ERROR;
 800666e:	2001      	movs	r0, #1
 8006670:	e000      	b.n	8006674 <HAL_OPAMP_Init+0xd0>
    return HAL_ERROR;
 8006672:	2001      	movs	r0, #1
}
 8006674:	b002      	add	sp, #8
 8006676:	bd10      	pop	{r4, pc}
    return status;
 8006678:	2000      	movs	r0, #0
 800667a:	e7fb      	b.n	8006674 <HAL_OPAMP_Init+0xd0>
 800667c:	40021000 	.word	0x40021000
 8006680:	e0003e11 	.word	0xe0003e11

08006684 <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006684:	b1a8      	cbz	r0, 80066b2 <HAL_OPAMP_Start+0x2e>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006686:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b05      	cmp	r3, #5
 800668e:	d012      	beq.n	80066b6 <HAL_OPAMP_Start+0x32>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006690:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b01      	cmp	r3, #1
 8006698:	d001      	beq.n	800669e <HAL_OPAMP_Start+0x1a>
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
    }
    else
    {
      status = HAL_ERROR;
 800669a:	2001      	movs	r0, #1
    }


  }
  return status;
}
 800669c:	4770      	bx	lr
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800669e:	6801      	ldr	r1, [r0, #0]
 80066a0:	680b      	ldr	r3, [r1, #0]
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	600b      	str	r3, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80066a8:	2304      	movs	r3, #4
 80066aa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_StatusTypeDef status = HAL_OK;
 80066ae:	2000      	movs	r0, #0
 80066b0:	4770      	bx	lr
    status = HAL_ERROR;
 80066b2:	2001      	movs	r0, #1
 80066b4:	4770      	bx	lr
    status = HAL_ERROR;
 80066b6:	2001      	movs	r0, #1
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066bc:	2800      	cmp	r0, #0
 80066be:	d13a      	bne.n	8006736 <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066c0:	4b40      	ldr	r3, [pc, #256]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066cc:	d008      	beq.n	80066e0 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066ce:	4a3d      	ldr	r2, [pc, #244]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80066d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80066d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066dc:	2000      	movs	r0, #0
 80066de:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066e0:	4a38      	ldr	r2, [pc, #224]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80066e2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80066e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066f8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066fa:	4b33      	ldr	r3, [pc, #204]	; (80067c8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2132      	movs	r1, #50	; 0x32
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4931      	ldr	r1, [pc, #196]	; (80067cc <HAL_PWREx_ControlVoltageScaling+0x110>)
 8006706:	fba1 1303 	umull	r1, r3, r1, r3
 800670a:	0c9b      	lsrs	r3, r3, #18
 800670c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800670e:	6952      	ldr	r2, [r2, #20]
 8006710:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006714:	d007      	beq.n	8006726 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8006716:	492b      	ldr	r1, [pc, #172]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8006718:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800671a:	694a      	ldr	r2, [r1, #20]
 800671c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006720:	d001      	beq.n	8006726 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f8      	bne.n	8006718 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006726:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8006728:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 800672a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800672e:	bf0c      	ite	eq
 8006730:	2000      	moveq	r0, #0
 8006732:	2003      	movne	r0, #3
 8006734:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006736:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800673a:	d008      	beq.n	800674e <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800673c:	4a21      	ldr	r2, [pc, #132]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800673e:	6813      	ldr	r3, [r2, #0]
 8006740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006748:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800674a:	2000      	movs	r0, #0
}
 800674c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675a:	d008      	beq.n	800676e <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800675c:	4a19      	ldr	r2, [pc, #100]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800675e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006766:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 800676a:	2000      	movs	r0, #0
 800676c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800676e:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8006770:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006786:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006788:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2132      	movs	r1, #50	; 0x32
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	490e      	ldr	r1, [pc, #56]	; (80067cc <HAL_PWREx_ControlVoltageScaling+0x110>)
 8006794:	fba1 1303 	umull	r1, r3, r1, r3
 8006798:	0c9b      	lsrs	r3, r3, #18
 800679a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800679c:	6952      	ldr	r2, [r2, #20]
 800679e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80067a2:	d007      	beq.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0xf8>
 80067a4:	4907      	ldr	r1, [pc, #28]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 80067a6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067a8:	694a      	ldr	r2, [r1, #20]
 80067aa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80067ae:	d001      	beq.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0xf8>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f8      	bne.n	80067a6 <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067b4:	4b03      	ldr	r3, [pc, #12]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80067b6:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80067b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80067bc:	bf0c      	ite	eq
 80067be:	2000      	moveq	r0, #0
 80067c0:	2003      	movne	r0, #3
 80067c2:	4770      	bx	lr
 80067c4:	40007000 	.word	0x40007000
 80067c8:	20000018 	.word	0x20000018
 80067cc:	431bde83 	.word	0x431bde83

080067d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80067d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d4:	4680      	mov	r8, r0
 80067d6:	460e      	mov	r6, r1
 80067d8:	4615      	mov	r5, r2
 80067da:	4699      	mov	r9, r3
 80067dc:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80067de:	f8d8 2000 	ldr.w	r2, [r8]
 80067e2:	6894      	ldr	r4, [r2, #8]
 80067e4:	4234      	tst	r4, r6
 80067e6:	bf14      	ite	ne
 80067e8:	f04f 0c01 	movne.w	ip, #1
 80067ec:	f04f 0c00 	moveq.w	ip, #0
 80067f0:	45ac      	cmp	ip, r5
 80067f2:	d015      	beq.n	8006820 <QSPI_WaitFlagStateUntilTimeout+0x50>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80067f8:	d0f3      	beq.n	80067e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fd ff59 	bl	80046b0 <HAL_GetTick>
 80067fe:	eba0 0009 	sub.w	r0, r0, r9
 8006802:	42b8      	cmp	r0, r7
 8006804:	d801      	bhi.n	800680a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8006806:	2f00      	cmp	r7, #0
 8006808:	d1e9      	bne.n	80067de <QSPI_WaitFlagStateUntilTimeout+0xe>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800680a:	2304      	movs	r3, #4
 800680c:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006810:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44

        return HAL_ERROR;
 800681c:	2001      	movs	r0, #1
 800681e:	e000      	b.n	8006822 <QSPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }
  return HAL_OK;
 8006820:	2000      	movs	r0, #0
}
 8006822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08006828 <HAL_QSPI_Init>:
{
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800682e:	f7fd ff3f 	bl	80046b0 <HAL_GetTick>
  if(hqspi == NULL)
 8006832:	2c00      	cmp	r4, #0
 8006834:	d04a      	beq.n	80068cc <HAL_QSPI_Init+0xa4>
 8006836:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006838:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800683c:	2b00      	cmp	r3, #0
 800683e:	d03c      	beq.n	80068ba <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006840:	6825      	ldr	r5, [r4, #0]
 8006842:	682a      	ldr	r2, [r5, #0]
 8006844:	68a1      	ldr	r1, [r4, #8]
 8006846:	3901      	subs	r1, #1
 8006848:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800684c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006850:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006852:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	4633      	mov	r3, r6
 8006858:	2200      	movs	r2, #0
 800685a:	2120      	movs	r1, #32
 800685c:	4620      	mov	r0, r4
 800685e:	f7ff ffb7 	bl	80067d0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8006862:	bb28      	cbnz	r0, 80068b0 <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006864:	6821      	ldr	r1, [r4, #0]
 8006866:	680a      	ldr	r2, [r1, #0]
 8006868:	68e3      	ldr	r3, [r4, #12]
 800686a:	69e5      	ldr	r5, [r4, #28]
 800686c:	432b      	orrs	r3, r5
 800686e:	6a25      	ldr	r5, [r4, #32]
 8006870:	432b      	orrs	r3, r5
 8006872:	6865      	ldr	r5, [r4, #4]
 8006874:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8006878:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800687c:	f022 02d0 	bic.w	r2, r2, #208	; 0xd0
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006884:	6821      	ldr	r1, [r4, #0]
 8006886:	684d      	ldr	r5, [r1, #4]
 8006888:	6963      	ldr	r3, [r4, #20]
 800688a:	69a2      	ldr	r2, [r4, #24]
 800688c:	4313      	orrs	r3, r2
 800688e:	6922      	ldr	r2, [r4, #16]
 8006890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006894:	4a0e      	ldr	r2, [pc, #56]	; (80068d0 <HAL_QSPI_Init+0xa8>)
 8006896:	402a      	ands	r2, r5
 8006898:	4313      	orrs	r3, r2
 800689a:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80068b0:	2300      	movs	r3, #0
 80068b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80068b6:	b002      	add	sp, #8
 80068b8:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 80068ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80068be:	4620      	mov	r0, r4
 80068c0:	f7fc fea0 	bl	8003604 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80068c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80068c8:	64a3      	str	r3, [r4, #72]	; 0x48
}
 80068ca:	e7b9      	b.n	8006840 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 80068cc:	2001      	movs	r0, #1
 80068ce:	e7f2      	b.n	80068b6 <HAL_QSPI_Init+0x8e>
 80068d0:	ffe0f8fe 	.word	0xffe0f8fe

080068d4 <HAL_QSPI_ErrorCallback>:
}
 80068d4:	4770      	bx	lr

080068d6 <QSPI_DMAAbortCplt>:
{
 80068d6:	b508      	push	{r3, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80068d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hqspi->RxXferCount = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	6383      	str	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80068de:	62c3      	str	r3, [r0, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80068e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d10d      	bne.n	8006906 <QSPI_DMAAbortCplt+0x30>
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80068ea:	6803      	ldr	r3, [r0, #0]
 80068ec:	2202      	movs	r2, #2
 80068ee:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80068f0:	6802      	ldr	r2, [r0, #0]
 80068f2:	6813      	ldr	r3, [r2, #0]
 80068f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f8:	6013      	str	r3, [r2, #0]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80068fa:	6802      	ldr	r2, [r0, #0]
 80068fc:	6813      	ldr	r3, [r2, #0]
 80068fe:	f043 0302 	orr.w	r3, r3, #2
 8006902:	6013      	str	r3, [r2, #0]
}
 8006904:	bd08      	pop	{r3, pc}
    hqspi->State = HAL_QSPI_STATE_READY;
 8006906:	2301      	movs	r3, #1
 8006908:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800690c:	f7ff ffe2 	bl	80068d4 <HAL_QSPI_ErrorCallback>
}
 8006910:	e7f8      	b.n	8006904 <QSPI_DMAAbortCplt+0x2e>

08006912 <HAL_QSPI_AbortCpltCallback>:
}
 8006912:	4770      	bx	lr

08006914 <HAL_QSPI_CmdCpltCallback>:
}
 8006914:	4770      	bx	lr

08006916 <HAL_QSPI_FifoThresholdCallback>:
}
 8006916:	4770      	bx	lr

08006918 <HAL_QSPI_StatusMatchCallback>:
}
 8006918:	4770      	bx	lr

0800691a <HAL_QSPI_TimeOutCallback>:
}
 800691a:	4770      	bx	lr

0800691c <HAL_QSPI_IRQHandler>:
{
 800691c:	b510      	push	{r4, lr}
 800691e:	4604      	mov	r4, r0
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8006920:	6803      	ldr	r3, [r0, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8006924:	6819      	ldr	r1, [r3, #0]
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8006926:	f012 0f04 	tst.w	r2, #4
 800692a:	d04c      	beq.n	80069c6 <HAL_QSPI_IRQHandler+0xaa>
 800692c:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 8006930:	d049      	beq.n	80069c6 <HAL_QSPI_IRQHandler+0xaa>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006932:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	2a12      	cmp	r2, #18
 800693a:	d00d      	beq.n	8006958 <HAL_QSPI_IRQHandler+0x3c>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800693c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	2a22      	cmp	r2, #34	; 0x22
 8006944:	d026      	beq.n	8006994 <HAL_QSPI_IRQHandler+0x78>
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff ffe5 	bl	8006916 <HAL_QSPI_FifoThresholdCallback>
}
 800694c:	bd10      	pop	{r4, pc}
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006954:	6013      	str	r3, [r2, #0]
          break;
 8006956:	e7f6      	b.n	8006946 <HAL_QSPI_IRQHandler+0x2a>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	f012 0f04 	tst.w	r2, #4
 800695e:	bf18      	it	ne
 8006960:	461a      	movne	r2, r3
 8006962:	d0f0      	beq.n	8006946 <HAL_QSPI_IRQHandler+0x2a>
        if (hqspi->TxXferCount > 0U)
 8006964:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006966:	2900      	cmp	r1, #0
 8006968:	d0f1      	beq.n	800694e <HAL_QSPI_IRQHandler+0x32>
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800696a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	f883 2020 	strb.w	r2, [r3, #32]
          hqspi->pTxBuffPtr++;
 8006972:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006974:	3201      	adds	r2, #1
 8006976:	6262      	str	r2, [r4, #36]	; 0x24
          hqspi->TxXferCount--;
 8006978:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800697a:	3a01      	subs	r2, #1
 800697c:	62e2      	str	r2, [r4, #44]	; 0x2c
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	6891      	ldr	r1, [r2, #8]
 8006982:	f011 0f04 	tst.w	r1, #4
 8006986:	d1ed      	bne.n	8006964 <HAL_QSPI_IRQHandler+0x48>
 8006988:	e7dd      	b.n	8006946 <HAL_QSPI_IRQHandler+0x2a>
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006990:	6013      	str	r3, [r2, #0]
          break;
 8006992:	e7d8      	b.n	8006946 <HAL_QSPI_IRQHandler+0x2a>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	f012 0f04 	tst.w	r2, #4
 800699a:	bf18      	it	ne
 800699c:	461a      	movne	r2, r3
 800699e:	d0d2      	beq.n	8006946 <HAL_QSPI_IRQHandler+0x2a>
        if (hqspi->RxXferCount > 0U)
 80069a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069a2:	2900      	cmp	r1, #0
 80069a4:	d0f1      	beq.n	800698a <HAL_QSPI_IRQHandler+0x6e>
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80069a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80069a8:	f893 1020 	ldrb.w	r1, [r3, #32]
 80069ac:	7011      	strb	r1, [r2, #0]
          hqspi->pRxBuffPtr++;
 80069ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80069b0:	3201      	adds	r2, #1
 80069b2:	6322      	str	r2, [r4, #48]	; 0x30
          hqspi->RxXferCount--;
 80069b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069b6:	3a01      	subs	r2, #1
 80069b8:	63a2      	str	r2, [r4, #56]	; 0x38
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	6891      	ldr	r1, [r2, #8]
 80069be:	f011 0f04 	tst.w	r1, #4
 80069c2:	d1ed      	bne.n	80069a0 <HAL_QSPI_IRQHandler+0x84>
 80069c4:	e7bf      	b.n	8006946 <HAL_QSPI_IRQHandler+0x2a>
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80069c6:	f012 0f02 	tst.w	r2, #2
 80069ca:	d079      	beq.n	8006ac0 <HAL_QSPI_IRQHandler+0x1a4>
 80069cc:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80069d0:	d076      	beq.n	8006ac0 <HAL_QSPI_IRQHandler+0x1a4>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80069d2:	2202      	movs	r2, #2
 80069d4:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	6813      	ldr	r3, [r2, #0]
 80069da:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80069de:	6013      	str	r3, [r2, #0]
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80069e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b12      	cmp	r3, #18
 80069e8:	d01d      	beq.n	8006a26 <HAL_QSPI_IRQHandler+0x10a>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80069ea:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b22      	cmp	r3, #34	; 0x22
 80069f2:	d02e      	beq.n	8006a52 <HAL_QSPI_IRQHandler+0x136>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80069f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d055      	beq.n	8006aaa <HAL_QSPI_IRQHandler+0x18e>
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80069fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d1a1      	bne.n	800694c <HAL_QSPI_IRQHandler+0x30>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	6953      	ldr	r3, [r2, #20]
 8006a0c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006a10:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8006a18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d14c      	bne.n	8006ab8 <HAL_QSPI_IRQHandler+0x19c>
        HAL_QSPI_AbortCpltCallback(hqspi);
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff ff77 	bl	8006912 <HAL_QSPI_AbortCpltCallback>
 8006a24:	e792      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	f012 0f04 	tst.w	r2, #4
 8006a2e:	d009      	beq.n	8006a44 <HAL_QSPI_IRQHandler+0x128>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	f022 0204 	bic.w	r2, r2, #4
 8006a36:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 8006a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	6813      	ldr	r3, [r2, #0]
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	6013      	str	r3, [r2, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_TxCpltCallback(hqspi);
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7fc fdb2 	bl	80035b4 <HAL_QSPI_TxCpltCallback>
 8006a50:	e77c      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006a52:	6821      	ldr	r1, [r4, #0]
 8006a54:	680b      	ldr	r3, [r1, #0]
 8006a56:	f013 0f04 	tst.w	r3, #4
 8006a5a:	d115      	bne.n	8006a88 <HAL_QSPI_IRQHandler+0x16c>
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006a5c:	688b      	ldr	r3, [r1, #8]
 8006a5e:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006a62:	d01b      	beq.n	8006a9c <HAL_QSPI_IRQHandler+0x180>
          if (hqspi->RxXferCount > 0U)
 8006a64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a66:	b1cb      	cbz	r3, 8006a9c <HAL_QSPI_IRQHandler+0x180>
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006a68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a6a:	f891 2020 	ldrb.w	r2, [r1, #32]
 8006a6e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8006a70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a72:	3301      	adds	r3, #1
 8006a74:	6323      	str	r3, [r4, #48]	; 0x30
            hqspi->RxXferCount--;
 8006a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	63a3      	str	r3, [r4, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006a84:	d1ee      	bne.n	8006a64 <HAL_QSPI_IRQHandler+0x148>
 8006a86:	e009      	b.n	8006a9c <HAL_QSPI_IRQHandler+0x180>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006a88:	680b      	ldr	r3, [r1, #0]
 8006a8a:	f023 0304 	bic.w	r3, r3, #4
 8006a8e:	600b      	str	r3, [r1, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
 8006a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	6813      	ldr	r3, [r2, #0]
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	6013      	str	r3, [r2, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_RxCpltCallback(hqspi);
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7fc fd8c 	bl	80035c0 <HAL_QSPI_RxCpltCallback>
 8006aa8:	e750      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
      hqspi->State = HAL_QSPI_STATE_READY;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_CmdCpltCallback(hqspi);
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7ff ff2f 	bl	8006914 <HAL_QSPI_CmdCpltCallback>
 8006ab6:	e749      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
        HAL_QSPI_ErrorCallback(hqspi);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7ff ff0b 	bl	80068d4 <HAL_QSPI_ErrorCallback>
 8006abe:	e745      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8006ac0:	f012 0f08 	tst.w	r2, #8
 8006ac4:	d014      	beq.n	8006af0 <HAL_QSPI_IRQHandler+0x1d4>
 8006ac6:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8006aca:	d011      	beq.n	8006af0 <HAL_QSPI_IRQHandler+0x1d4>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8006acc:	2208      	movs	r2, #8
 8006ace:	60da      	str	r2, [r3, #12]
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8006ad8:	d006      	beq.n	8006ae8 <HAL_QSPI_IRQHandler+0x1cc>
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006ae0:	601a      	str	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_QSPI_StatusMatchCallback(hqspi);
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7ff ff15 	bl	8006918 <HAL_QSPI_StatusMatchCallback>
 8006aee:	e72d      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8006af0:	f012 0f01 	tst.w	r2, #1
 8006af4:	d031      	beq.n	8006b5a <HAL_QSPI_IRQHandler+0x23e>
 8006af6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8006afa:	d02e      	beq.n	8006b5a <HAL_QSPI_IRQHandler+0x23e>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8006afc:	2201      	movs	r2, #1
 8006afe:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006b08:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8006b0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b0c:	f043 0302 	orr.w	r3, r3, #2
 8006b10:	6463      	str	r3, [r4, #68]	; 0x44
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	f012 0f04 	tst.w	r2, #4
 8006b1a:	d017      	beq.n	8006b4c <HAL_QSPI_IRQHandler+0x230>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	f022 0204 	bic.w	r2, r2, #4
 8006b22:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8006b24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <HAL_QSPI_IRQHandler+0x25c>)
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006b2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006b2c:	f7ff fbae 	bl	800628c <HAL_DMA_Abort_IT>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f43f af0b 	beq.w	800694c <HAL_QSPI_IRQHandler+0x30>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006b36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b38:	f043 0304 	orr.w	r3, r3, #4
 8006b3c:	6463      	str	r3, [r4, #68]	; 0x44
        hqspi->State = HAL_QSPI_STATE_READY;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_QSPI_ErrorCallback(hqspi);
 8006b44:	4620      	mov	r0, r4
 8006b46:	f7ff fec5 	bl	80068d4 <HAL_QSPI_ErrorCallback>
 8006b4a:	e6ff      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
      hqspi->State = HAL_QSPI_STATE_READY;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_ErrorCallback(hqspi);
 8006b52:	4620      	mov	r0, r4
 8006b54:	f7ff febe 	bl	80068d4 <HAL_QSPI_ErrorCallback>
 8006b58:	e6f8      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8006b5a:	f012 0f10 	tst.w	r2, #16
 8006b5e:	f43f aef5 	beq.w	800694c <HAL_QSPI_IRQHandler+0x30>
 8006b62:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006b66:	f43f aef1 	beq.w	800694c <HAL_QSPI_IRQHandler+0x30>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	60da      	str	r2, [r3, #12]
    HAL_QSPI_TimeOutCallback(hqspi);
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f7ff fed3 	bl	800691a <HAL_QSPI_TimeOutCallback>
}
 8006b74:	e6ea      	b.n	800694c <HAL_QSPI_IRQHandler+0x30>
 8006b76:	bf00      	nop
 8006b78:	080068d7 	.word	0x080068d7

08006b7c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f000 8257 	beq.w	8007030 <HAL_RCC_OscConfig+0x4b4>
{
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b8a:	6803      	ldr	r3, [r0, #0]
 8006b8c:	f013 0f01 	tst.w	r3, #1
 8006b90:	d037      	beq.n	8006c02 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b92:	4aa5      	ldr	r2, [pc, #660]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006b94:	6893      	ldr	r3, [r2, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b9a:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006b9c:	2b0c      	cmp	r3, #12
 8006b9e:	d023      	beq.n	8006be8 <HAL_RCC_OscConfig+0x6c>
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d025      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba4:	6863      	ldr	r3, [r4, #4]
 8006ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006baa:	d04e      	beq.n	8006c4a <HAL_RCC_OscConfig+0xce>
 8006bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bb0:	d051      	beq.n	8006c56 <HAL_RCC_OscConfig+0xda>
 8006bb2:	4b9d      	ldr	r3, [pc, #628]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d052      	beq.n	8006c70 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7fd fd71 	bl	80046b0 <HAL_GetTick>
 8006bce:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bd0:	4e95      	ldr	r6, [pc, #596]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006bd2:	6833      	ldr	r3, [r6, #0]
 8006bd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006bd8:	d113      	bne.n	8006c02 <HAL_RCC_OscConfig+0x86>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bda:	f7fd fd69 	bl	80046b0 <HAL_GetTick>
 8006bde:	1b40      	subs	r0, r0, r5
 8006be0:	2864      	cmp	r0, #100	; 0x64
 8006be2:	d9f6      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 8006be4:	2003      	movs	r0, #3
 8006be6:	e22c      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006be8:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006bec:	2a03      	cmp	r2, #3
 8006bee:	d1d9      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf0:	4b8d      	ldr	r3, [pc, #564]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006bf8:	d003      	beq.n	8006c02 <HAL_RCC_OscConfig+0x86>
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8219 	beq.w	8007034 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	f013 0f02 	tst.w	r3, #2
 8006c08:	d05d      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c0a:	4a87      	ldr	r2, [pc, #540]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	6893      	ldr	r3, [r2, #8]
 8006c0e:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c12:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c14:	2b0c      	cmp	r3, #12
 8006c16:	d03a      	beq.n	8006c8e <HAL_RCC_OscConfig+0x112>
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d03c      	beq.n	8006c96 <HAL_RCC_OscConfig+0x11a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c1c:	68e3      	ldr	r3, [r4, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d077      	beq.n	8006d12 <HAL_RCC_OscConfig+0x196>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c22:	4a81      	ldr	r2, [pc, #516]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	6813      	ldr	r3, [r2, #0]
 8006c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fd fd40 	bl	80046b0 <HAL_GetTick>
 8006c30:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c32:	4e7d      	ldr	r6, [pc, #500]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c3a:	d161      	bne.n	8006d00 <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c3c:	f7fd fd38 	bl	80046b0 <HAL_GetTick>
 8006c40:	1b40      	subs	r0, r0, r5
 8006c42:	2802      	cmp	r0, #2
 8006c44:	d9f6      	bls.n	8006c34 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 8006c46:	2003      	movs	r0, #3
 8006c48:	e1fb      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c4a:	4a77      	ldr	r2, [pc, #476]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	e7b6      	b.n	8006bc4 <HAL_RCC_OscConfig+0x48>
 8006c56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c5a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	e7a9      	b.n	8006bc4 <HAL_RCC_OscConfig+0x48>
        tickstart = HAL_GetTick();
 8006c70:	f7fd fd1e 	bl	80046b0 <HAL_GetTick>
 8006c74:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c76:	4e6c      	ldr	r6, [pc, #432]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006c7e:	d0c0      	beq.n	8006c02 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c80:	f7fd fd16 	bl	80046b0 <HAL_GetTick>
 8006c84:	1b40      	subs	r0, r0, r5
 8006c86:	2864      	cmp	r0, #100	; 0x64
 8006c88:	d9f6      	bls.n	8006c78 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8006c8a:	2003      	movs	r0, #3
 8006c8c:	e1d9      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c8e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c92:	2a02      	cmp	r2, #2
 8006c94:	d1c2      	bne.n	8006c1c <HAL_RCC_OscConfig+0xa0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c96:	4b64      	ldr	r3, [pc, #400]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c9e:	d003      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x12c>
 8006ca0:	68e3      	ldr	r3, [r4, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 81c8 	beq.w	8007038 <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca8:	4a5f      	ldr	r2, [pc, #380]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006caa:	6853      	ldr	r3, [r2, #4]
 8006cac:	6921      	ldr	r1, [r4, #16]
 8006cae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cb2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cb6:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006cb8:	4b5c      	ldr	r3, [pc, #368]	; (8006e2c <HAL_RCC_OscConfig+0x2b0>)
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	f7fd fcb4 	bl	8004628 <HAL_InitTick>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f040 81bb 	bne.w	800703c <HAL_RCC_OscConfig+0x4c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f013 0f08 	tst.w	r3, #8
 8006ccc:	d04c      	beq.n	8006d68 <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	b39b      	cbz	r3, 8006d3a <HAL_RCC_OscConfig+0x1be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cd2:	4a55      	ldr	r2, [pc, #340]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006cd4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce0:	f7fd fce6 	bl	80046b0 <HAL_GetTick>
 8006ce4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ce6:	4e50      	ldr	r6, [pc, #320]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8006cec:	f013 0f02 	tst.w	r3, #2
 8006cf0:	d13a      	bne.n	8006d68 <HAL_RCC_OscConfig+0x1ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf2:	f7fd fcdd 	bl	80046b0 <HAL_GetTick>
 8006cf6:	1b40      	subs	r0, r0, r5
 8006cf8:	2802      	cmp	r0, #2
 8006cfa:	d9f5      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8006cfc:	2003      	movs	r0, #3
 8006cfe:	e1a0      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d00:	4a49      	ldr	r2, [pc, #292]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d02:	6853      	ldr	r3, [r2, #4]
 8006d04:	6921      	ldr	r1, [r4, #16]
 8006d06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d0e:	6053      	str	r3, [r2, #4]
 8006d10:	e7d9      	b.n	8006cc6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8006d12:	4a45      	ldr	r2, [pc, #276]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006d1c:	f7fd fcc8 	bl	80046b0 <HAL_GetTick>
 8006d20:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d22:	4e41      	ldr	r6, [pc, #260]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006d2a:	d0cc      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d2c:	f7fd fcc0 	bl	80046b0 <HAL_GetTick>
 8006d30:	1b40      	subs	r0, r0, r5
 8006d32:	2802      	cmp	r0, #2
 8006d34:	d9f6      	bls.n	8006d24 <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 8006d36:	2003      	movs	r0, #3
 8006d38:	e183      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d3a:	4a3b      	ldr	r2, [pc, #236]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d48:	f7fd fcb2 	bl	80046b0 <HAL_GetTick>
 8006d4c:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d4e:	4e36      	ldr	r6, [pc, #216]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d50:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8006d54:	f013 0f02 	tst.w	r3, #2
 8006d58:	d006      	beq.n	8006d68 <HAL_RCC_OscConfig+0x1ec>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d5a:	f7fd fca9 	bl	80046b0 <HAL_GetTick>
 8006d5e:	1b40      	subs	r0, r0, r5
 8006d60:	2802      	cmp	r0, #2
 8006d62:	d9f5      	bls.n	8006d50 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 8006d64:	2003      	movs	r0, #3
 8006d66:	e16c      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	f013 0f04 	tst.w	r3, #4
 8006d6e:	f000 8082 	beq.w	8006e76 <HAL_RCC_OscConfig+0x2fa>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d72:	4b2d      	ldr	r3, [pc, #180]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006d7a:	d136      	bne.n	8006dea <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d7c:	4b2a      	ldr	r3, [pc, #168]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006d7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d84:	659a      	str	r2, [r3, #88]	; 0x58
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006d90:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <HAL_RCC_OscConfig+0x2b4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d9a:	d028      	beq.n	8006dee <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d9c:	68a3      	ldr	r3, [r4, #8]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d039      	beq.n	8006e16 <HAL_RCC_OscConfig+0x29a>
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d046      	beq.n	8006e34 <HAL_RCC_OscConfig+0x2b8>
 8006da6:	4b20      	ldr	r3, [pc, #128]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006da8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006dac:	f022 0201 	bic.w	r2, r2, #1
 8006db0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006db4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006db8:	f022 0204 	bic.w	r2, r2, #4
 8006dbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dc0:	68a3      	ldr	r3, [r4, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d044      	beq.n	8006e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc6:	f7fd fc73 	bl	80046b0 <HAL_GetTick>
 8006dca:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dcc:	4f16      	ldr	r7, [pc, #88]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dce:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dd6:	f013 0f02 	tst.w	r3, #2
 8006dda:	d14b      	bne.n	8006e74 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ddc:	f7fd fc68 	bl	80046b0 <HAL_GetTick>
 8006de0:	1b80      	subs	r0, r0, r6
 8006de2:	4540      	cmp	r0, r8
 8006de4:	d9f5      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 8006de6:	2003      	movs	r0, #3
 8006de8:	e12b      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
    FlagStatus       pwrclkchanged = RESET;
 8006dea:	2500      	movs	r5, #0
 8006dec:	e7d1      	b.n	8006d92 <HAL_RCC_OscConfig+0x216>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dee:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <HAL_RCC_OscConfig+0x2b4>)
 8006df0:	6813      	ldr	r3, [r2, #0]
 8006df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006df8:	f7fd fc5a 	bl	80046b0 <HAL_GetTick>
 8006dfc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfe:	4f0c      	ldr	r7, [pc, #48]	; (8006e30 <HAL_RCC_OscConfig+0x2b4>)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006e06:	d1c9      	bne.n	8006d9c <HAL_RCC_OscConfig+0x220>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e08:	f7fd fc52 	bl	80046b0 <HAL_GetTick>
 8006e0c:	1b80      	subs	r0, r0, r6
 8006e0e:	2802      	cmp	r0, #2
 8006e10:	d9f6      	bls.n	8006e00 <HAL_RCC_OscConfig+0x284>
          return HAL_TIMEOUT;
 8006e12:	2003      	movs	r0, #3
 8006e14:	e115      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e16:	4a04      	ldr	r2, [pc, #16]	; (8006e28 <HAL_RCC_OscConfig+0x2ac>)
 8006e18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e24:	e7cc      	b.n	8006dc0 <HAL_RCC_OscConfig+0x244>
 8006e26:	bf00      	nop
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	20000020 	.word	0x20000020
 8006e30:	40007000 	.word	0x40007000
 8006e34:	4b8a      	ldr	r3, [pc, #552]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006e36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e3a:	f042 0204 	orr.w	r2, r2, #4
 8006e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006e42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006e4e:	e7b7      	b.n	8006dc0 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e50:	f7fd fc2e 	bl	80046b0 <HAL_GetTick>
 8006e54:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e56:	4f82      	ldr	r7, [pc, #520]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e58:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e60:	f013 0f02 	tst.w	r3, #2
 8006e64:	d006      	beq.n	8006e74 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e66:	f7fd fc23 	bl	80046b0 <HAL_GetTick>
 8006e6a:	1b80      	subs	r0, r0, r6
 8006e6c:	4540      	cmp	r0, r8
 8006e6e:	d9f5      	bls.n	8006e5c <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8006e70:	2003      	movs	r0, #3
 8006e72:	e0e6      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e74:	b9e5      	cbnz	r5, 8006eb0 <HAL_RCC_OscConfig+0x334>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	f013 0f20 	tst.w	r3, #32
 8006e7c:	d035      	beq.n	8006eea <HAL_RCC_OscConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e7e:	69a3      	ldr	r3, [r4, #24]
 8006e80:	b1e3      	cbz	r3, 8006ebc <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e82:	4a77      	ldr	r2, [pc, #476]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006e84:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fd fc0e 	bl	80046b0 <HAL_GetTick>
 8006e94:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e96:	4e72      	ldr	r6, [pc, #456]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006e98:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8006e9c:	f013 0f02 	tst.w	r3, #2
 8006ea0:	d123      	bne.n	8006eea <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ea2:	f7fd fc05 	bl	80046b0 <HAL_GetTick>
 8006ea6:	1b40      	subs	r0, r0, r5
 8006ea8:	2802      	cmp	r0, #2
 8006eaa:	d9f5      	bls.n	8006e98 <HAL_RCC_OscConfig+0x31c>
        {
          return HAL_TIMEOUT;
 8006eac:	2003      	movs	r0, #3
 8006eae:	e0c8      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb0:	4a6b      	ldr	r2, [pc, #428]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006eb2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8006eba:	e7dc      	b.n	8006e76 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ebc:	4a68      	ldr	r2, [pc, #416]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006ebe:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006ec2:	f023 0301 	bic.w	r3, r3, #1
 8006ec6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eca:	f7fd fbf1 	bl	80046b0 <HAL_GetTick>
 8006ece:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ed0:	4e63      	ldr	r6, [pc, #396]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006ed2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8006ed6:	f013 0f02 	tst.w	r3, #2
 8006eda:	d006      	beq.n	8006eea <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006edc:	f7fd fbe8 	bl	80046b0 <HAL_GetTick>
 8006ee0:	1b40      	subs	r0, r0, r5
 8006ee2:	2802      	cmp	r0, #2
 8006ee4:	d9f5      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8006ee6:	2003      	movs	r0, #3
 8006ee8:	e0ab      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006eea:	69e3      	ldr	r3, [r4, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80a7 	beq.w	8007040 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ef2:	4a5b      	ldr	r2, [pc, #364]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006ef4:	6892      	ldr	r2, [r2, #8]
 8006ef6:	f002 020c 	and.w	r2, r2, #12
 8006efa:	2a0c      	cmp	r2, #12
 8006efc:	d069      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x456>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d01d      	beq.n	8006f3e <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f02:	4b57      	ldr	r3, [pc, #348]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006f0a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	f022 0203 	bic.w	r2, r2, #3
 8006f12:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8006f1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f1e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fd fbc6 	bl	80046b0 <HAL_GetTick>
 8006f24:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f26:	4d4e      	ldr	r5, [pc, #312]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006f2e:	d04e      	beq.n	8006fce <HAL_RCC_OscConfig+0x452>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fd fbbe 	bl	80046b0 <HAL_GetTick>
 8006f34:	1b00      	subs	r0, r0, r4
 8006f36:	2802      	cmp	r0, #2
 8006f38:	d9f6      	bls.n	8006f28 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8006f3a:	2003      	movs	r0, #3
 8006f3c:	e081      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 8006f3e:	4a48      	ldr	r2, [pc, #288]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006f40:	6813      	ldr	r3, [r2, #0]
 8006f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f46:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006f48:	f7fd fbb2 	bl	80046b0 <HAL_GetTick>
 8006f4c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f4e:	4e44      	ldr	r6, [pc, #272]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006f56:	d006      	beq.n	8006f66 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f58:	f7fd fbaa 	bl	80046b0 <HAL_GetTick>
 8006f5c:	1b40      	subs	r0, r0, r5
 8006f5e:	2802      	cmp	r0, #2
 8006f60:	d9f6      	bls.n	8006f50 <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 8006f62:	2003      	movs	r0, #3
 8006f64:	e06d      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f66:	4a3e      	ldr	r2, [pc, #248]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006f68:	68d1      	ldr	r1, [r2, #12]
 8006f6a:	4b3e      	ldr	r3, [pc, #248]	; (8007064 <HAL_RCC_OscConfig+0x4e8>)
 8006f6c:	400b      	ands	r3, r1
 8006f6e:	6a21      	ldr	r1, [r4, #32]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006f74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006f7a:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8006f7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f80:	3901      	subs	r1, #1
 8006f82:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006f86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f88:	0849      	lsrs	r1, r1, #1
 8006f8a:	3901      	subs	r1, #1
 8006f8c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f92:	0849      	lsrs	r1, r1, #1
 8006f94:	3901      	subs	r1, #1
 8006f96:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8006f9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8006f9c:	6813      	ldr	r3, [r2, #0]
 8006f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fa2:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fa4:	68d3      	ldr	r3, [r2, #12]
 8006fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006faa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006fac:	f7fd fb80 	bl	80046b0 <HAL_GetTick>
 8006fb0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fb2:	4d2b      	ldr	r5, [pc, #172]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006fba:	d106      	bne.n	8006fca <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fbc:	f7fd fb78 	bl	80046b0 <HAL_GetTick>
 8006fc0:	1b00      	subs	r0, r0, r4
 8006fc2:	2802      	cmp	r0, #2
 8006fc4:	d9f6      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x438>
            return HAL_TIMEOUT;
 8006fc6:	2003      	movs	r0, #3
 8006fc8:	e03b      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
      }
    }
  }
  }

  return HAL_OK;
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e039      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e037      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d038      	beq.n	8007048 <HAL_RCC_OscConfig+0x4cc>
      temp_pllckcfg = RCC->PLLCFGR;
 8006fd6:	4b22      	ldr	r3, [pc, #136]	; (8007060 <HAL_RCC_OscConfig+0x4e4>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fda:	f003 0103 	and.w	r1, r3, #3
 8006fde:	6a22      	ldr	r2, [r4, #32]
 8006fe0:	4291      	cmp	r1, r2
 8006fe2:	d133      	bne.n	800704c <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006fea:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fec:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006ff0:	d12e      	bne.n	8007050 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ff6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ff8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006ffc:	d12a      	bne.n	8007054 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ffe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007002:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007004:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007008:	d126      	bne.n	8007058 <HAL_RCC_OscConfig+0x4dc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800700a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800700e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007010:	0852      	lsrs	r2, r2, #1
 8007012:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007014:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007018:	d120      	bne.n	800705c <HAL_RCC_OscConfig+0x4e0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800701a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800701c:	0852      	lsrs	r2, r2, #1
 800701e:	3a01      	subs	r2, #1
 8007020:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007024:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007028:	bf14      	ite	ne
 800702a:	2001      	movne	r0, #1
 800702c:	2000      	moveq	r0, #0
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
 8007030:	2001      	movs	r0, #1
}
 8007032:	4770      	bx	lr
        return HAL_ERROR;
 8007034:	2001      	movs	r0, #1
 8007036:	e004      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8007038:	2001      	movs	r0, #1
 800703a:	e002      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
          return HAL_ERROR;
 800703c:	2001      	movs	r0, #1
 800703e:	e000      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8007040:	2000      	movs	r0, #0
}
 8007042:	b002      	add	sp, #8
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8007048:	2001      	movs	r0, #1
 800704a:	e7fa      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 800704c:	2001      	movs	r0, #1
 800704e:	e7f8      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
 8007050:	2001      	movs	r0, #1
 8007052:	e7f6      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
 8007054:	2001      	movs	r0, #1
 8007056:	e7f4      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
 8007058:	2001      	movs	r0, #1
 800705a:	e7f2      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
 800705c:	2001      	movs	r0, #1
 800705e:	e7f0      	b.n	8007042 <HAL_RCC_OscConfig+0x4c6>
 8007060:	40021000 	.word	0x40021000
 8007064:	019f800c 	.word	0x019f800c

08007068 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007068:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x6c>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 030c 	and.w	r3, r3, #12
 8007070:	2b04      	cmp	r3, #4
 8007072:	d02a      	beq.n	80070ca <HAL_RCC_GetSysClockFreq+0x62>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007074:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b08      	cmp	r3, #8
 800707e:	d026      	beq.n	80070ce <HAL_RCC_GetSysClockFreq+0x66>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007080:	4b14      	ldr	r3, [pc, #80]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 030c 	and.w	r3, r3, #12
 8007088:	2b0c      	cmp	r3, #12
 800708a:	d001      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x28>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800708c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800708e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007090:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007092:	68da      	ldr	r2, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800709a:	3301      	adds	r3, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800709c:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80070a0:	2a03      	cmp	r2, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070a2:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80070a4:	68d0      	ldr	r0, [r2, #12]
 80070a6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80070aa:	bf0c      	ite	eq
 80070ac:	4a0a      	ldreq	r2, [pc, #40]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x70>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070ae:	4a0b      	ldrne	r2, [pc, #44]	; (80070dc <HAL_RCC_GetSysClockFreq+0x74>)
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80070c0:	3301      	adds	r3, #1
 80070c2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80070c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80070c8:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80070ca:	4804      	ldr	r0, [pc, #16]	; (80070dc <HAL_RCC_GetSysClockFreq+0x74>)
 80070cc:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80070ce:	4802      	ldr	r0, [pc, #8]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x70>)
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40021000 	.word	0x40021000
 80070d8:	016e3600 	.word	0x016e3600
 80070dc:	00f42400 	.word	0x00f42400

080070e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80070e0:	2800      	cmp	r0, #0
 80070e2:	f000 80be 	beq.w	8007262 <HAL_RCC_ClockConfig+0x182>
{
 80070e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ea:	460c      	mov	r4, r1
 80070ec:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070ee:	4b86      	ldr	r3, [pc, #536]	; (8007308 <HAL_RCC_ClockConfig+0x228>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	428b      	cmp	r3, r1
 80070f8:	d20b      	bcs.n	8007112 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fa:	4a83      	ldr	r2, [pc, #524]	; (8007308 <HAL_RCC_ClockConfig+0x228>)
 80070fc:	6813      	ldr	r3, [r2, #0]
 80070fe:	f023 030f 	bic.w	r3, r3, #15
 8007102:	430b      	orrs	r3, r1
 8007104:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007106:	6813      	ldr	r3, [r2, #0]
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	428b      	cmp	r3, r1
 800710e:	f040 80aa 	bne.w	8007266 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	f013 0f01 	tst.w	r3, #1
 8007118:	f000 80a9 	beq.w	800726e <HAL_RCC_ClockConfig+0x18e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800711c:	686a      	ldr	r2, [r5, #4]
 800711e:	2a03      	cmp	r2, #3
 8007120:	d030      	beq.n	8007184 <HAL_RCC_ClockConfig+0xa4>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007122:	2a02      	cmp	r2, #2
 8007124:	d068      	beq.n	80071f8 <HAL_RCC_ClockConfig+0x118>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007126:	4b79      	ldr	r3, [pc, #484]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800712e:	f000 809c 	beq.w	800726a <HAL_RCC_ClockConfig+0x18a>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007132:	f7ff ff99 	bl	8007068 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007136:	4b76      	ldr	r3, [pc, #472]	; (8007310 <HAL_RCC_ClockConfig+0x230>)
 8007138:	4298      	cmp	r0, r3
 800713a:	d96a      	bls.n	8007212 <HAL_RCC_ClockConfig+0x132>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800713c:	4a73      	ldr	r2, [pc, #460]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 800713e:	6893      	ldr	r3, [r2, #8]
 8007140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007148:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800714a:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800714e:	4a6f      	ldr	r2, [pc, #444]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 8007150:	6893      	ldr	r3, [r2, #8]
 8007152:	f023 0303 	bic.w	r3, r3, #3
 8007156:	6869      	ldr	r1, [r5, #4]
 8007158:	430b      	orrs	r3, r1
 800715a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800715c:	f7fd faa8 	bl	80046b0 <HAL_GetTick>
 8007160:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007162:	4f6a      	ldr	r7, [pc, #424]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007164:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 030c 	and.w	r3, r3, #12
 800716e:	686a      	ldr	r2, [r5, #4]
 8007170:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007174:	d050      	beq.n	8007218 <HAL_RCC_ClockConfig+0x138>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007176:	f7fd fa9b 	bl	80046b0 <HAL_GetTick>
 800717a:	1b80      	subs	r0, r0, r6
 800717c:	4540      	cmp	r0, r8
 800717e:	d9f3      	bls.n	8007168 <HAL_RCC_ClockConfig+0x88>
        return HAL_TIMEOUT;
 8007180:	2003      	movs	r0, #3
 8007182:	e0bf      	b.n	8007304 <HAL_RCC_ClockConfig+0x224>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007184:	4a61      	ldr	r2, [pc, #388]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800718c:	d101      	bne.n	8007192 <HAL_RCC_ClockConfig+0xb2>
        return HAL_ERROR;
 800718e:	2001      	movs	r0, #1
 8007190:	e0b8      	b.n	8007304 <HAL_RCC_ClockConfig+0x224>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007192:	495e      	ldr	r1, [pc, #376]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 8007194:	68ca      	ldr	r2, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007196:	68c9      	ldr	r1, [r1, #12]
 8007198:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800719c:	3101      	adds	r1, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800719e:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 80071a2:	2a03      	cmp	r2, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071a4:	4a59      	ldr	r2, [pc, #356]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80071a6:	68d2      	ldr	r2, [r2, #12]
 80071a8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80071ac:	bf0c      	ite	eq
 80071ae:	4859      	ldreq	r0, [pc, #356]	; (8007314 <HAL_RCC_ClockConfig+0x234>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071b0:	4859      	ldrne	r0, [pc, #356]	; (8007318 <HAL_RCC_ClockConfig+0x238>)
 80071b2:	fbb0 f1f1 	udiv	r1, r0, r1
 80071b6:	fb01 f202 	mul.w	r2, r1, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071ba:	4954      	ldr	r1, [pc, #336]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80071bc:	68c9      	ldr	r1, [r1, #12]
 80071be:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80071c2:	3101      	adds	r1, #1
 80071c4:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80071c6:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80071ca:	4951      	ldr	r1, [pc, #324]	; (8007310 <HAL_RCC_ClockConfig+0x230>)
 80071cc:	428a      	cmp	r2, r1
 80071ce:	d91a      	bls.n	8007206 <HAL_RCC_ClockConfig+0x126>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071d0:	4a4e      	ldr	r2, [pc, #312]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80071d2:	6892      	ldr	r2, [r2, #8]
 80071d4:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80071d8:	d004      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x104>
 80071da:	f013 0902 	ands.w	r9, r3, #2
 80071de:	d0b6      	beq.n	800714e <HAL_RCC_ClockConfig+0x6e>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071e0:	68ab      	ldr	r3, [r5, #8]
 80071e2:	b99b      	cbnz	r3, 800720c <HAL_RCC_ClockConfig+0x12c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071e4:	4a49      	ldr	r2, [pc, #292]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80071e6:	6893      	ldr	r3, [r2, #8]
 80071e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80071f2:	f04f 0980 	mov.w	r9, #128	; 0x80
 80071f6:	e7aa      	b.n	800714e <HAL_RCC_ClockConfig+0x6e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071f8:	4b44      	ldr	r3, [pc, #272]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007200:	d197      	bne.n	8007132 <HAL_RCC_ClockConfig+0x52>
          return HAL_ERROR;
 8007202:	2001      	movs	r0, #1
 8007204:	e07e      	b.n	8007304 <HAL_RCC_ClockConfig+0x224>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007206:	f04f 0900 	mov.w	r9, #0
 800720a:	e7a0      	b.n	800714e <HAL_RCC_ClockConfig+0x6e>
 800720c:	f04f 0900 	mov.w	r9, #0
 8007210:	e79d      	b.n	800714e <HAL_RCC_ClockConfig+0x6e>
 8007212:	f04f 0900 	mov.w	r9, #0
 8007216:	e79a      	b.n	800714e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	f013 0f02 	tst.w	r3, #2
 800721e:	d129      	bne.n	8007274 <HAL_RCC_ClockConfig+0x194>
    if(hpre == RCC_SYSCLK_DIV2)
 8007220:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8007224:	d140      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007226:	4a39      	ldr	r2, [pc, #228]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 8007228:	6893      	ldr	r3, [r2, #8]
 800722a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800722e:	6093      	str	r3, [r2, #8]
 8007230:	e03a      	b.n	80072a8 <HAL_RCC_ClockConfig+0x1c8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007232:	4a35      	ldr	r2, [pc, #212]	; (8007308 <HAL_RCC_ClockConfig+0x228>)
 8007234:	6813      	ldr	r3, [r2, #0]
 8007236:	f023 030f 	bic.w	r3, r3, #15
 800723a:	4323      	orrs	r3, r4
 800723c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800723e:	f7fd fa37 	bl	80046b0 <HAL_GetTick>
 8007242:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007244:	4f30      	ldr	r7, [pc, #192]	; (8007308 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007246:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	42a3      	cmp	r3, r4
 8007252:	d02f      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x1d4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007254:	f7fd fa2c 	bl	80046b0 <HAL_GetTick>
 8007258:	1b80      	subs	r0, r0, r6
 800725a:	4540      	cmp	r0, r8
 800725c:	d9f5      	bls.n	800724a <HAL_RCC_ClockConfig+0x16a>
        return HAL_TIMEOUT;
 800725e:	2003      	movs	r0, #3
 8007260:	e050      	b.n	8007304 <HAL_RCC_ClockConfig+0x224>
    return HAL_ERROR;
 8007262:	2001      	movs	r0, #1
}
 8007264:	4770      	bx	lr
      return HAL_ERROR;
 8007266:	2001      	movs	r0, #1
 8007268:	e04c      	b.n	8007304 <HAL_RCC_ClockConfig+0x224>
          return HAL_ERROR;
 800726a:	2001      	movs	r0, #1
 800726c:	e04a      	b.n	8007304 <HAL_RCC_ClockConfig+0x224>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800726e:	f013 0f02 	tst.w	r3, #2
 8007272:	d019      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x1c8>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007274:	f013 0f04 	tst.w	r3, #4
 8007278:	d004      	beq.n	8007284 <HAL_RCC_ClockConfig+0x1a4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800727a:	4a24      	ldr	r2, [pc, #144]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 800727c:	6893      	ldr	r3, [r2, #8]
 800727e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007282:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	f013 0f08 	tst.w	r3, #8
 800728a:	d006      	beq.n	800729a <HAL_RCC_ClockConfig+0x1ba>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800728c:	4a1f      	ldr	r2, [pc, #124]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 800728e:	6893      	ldr	r3, [r2, #8]
 8007290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007294:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007298:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800729a:	4a1c      	ldr	r2, [pc, #112]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 800729c:	6893      	ldr	r3, [r2, #8]
 800729e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a2:	68a9      	ldr	r1, [r5, #8]
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072a8:	4b17      	ldr	r3, [pc, #92]	; (8007308 <HAL_RCC_ClockConfig+0x228>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d8be      	bhi.n	8007232 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	f013 0f04 	tst.w	r3, #4
 80072ba:	d006      	beq.n	80072ca <HAL_RCC_ClockConfig+0x1ea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072bc:	4a13      	ldr	r2, [pc, #76]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80072be:	6893      	ldr	r3, [r2, #8]
 80072c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072c4:	68e9      	ldr	r1, [r5, #12]
 80072c6:	430b      	orrs	r3, r1
 80072c8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ca:	682b      	ldr	r3, [r5, #0]
 80072cc:	f013 0f08 	tst.w	r3, #8
 80072d0:	d007      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x202>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072d2:	4a0e      	ldr	r2, [pc, #56]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80072d4:	6893      	ldr	r3, [r2, #8]
 80072d6:	6929      	ldr	r1, [r5, #16]
 80072d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80072dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80072e0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072e2:	f7ff fec1 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <HAL_RCC_ClockConfig+0x22c>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80072ee:	4a0b      	ldr	r2, [pc, #44]	; (800731c <HAL_RCC_ClockConfig+0x23c>)
 80072f0:	5cd3      	ldrb	r3, [r2, r3]
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	40d8      	lsrs	r0, r3
 80072f8:	4b09      	ldr	r3, [pc, #36]	; (8007320 <HAL_RCC_ClockConfig+0x240>)
 80072fa:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <HAL_RCC_ClockConfig+0x244>)
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	f7fd f992 	bl	8004628 <HAL_InitTick>
}
 8007304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007308:	40022000 	.word	0x40022000
 800730c:	40021000 	.word	0x40021000
 8007310:	04c4b400 	.word	0x04c4b400
 8007314:	016e3600 	.word	0x016e3600
 8007318:	00f42400 	.word	0x00f42400
 800731c:	08019f8c 	.word	0x08019f8c
 8007320:	20000018 	.word	0x20000018
 8007324:	20000020 	.word	0x20000020

08007328 <HAL_RCC_GetHCLKFreq>:
}
 8007328:	4b01      	ldr	r3, [pc, #4]	; (8007330 <HAL_RCC_GetHCLKFreq+0x8>)
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000018 	.word	0x20000018

08007334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800733c:	6803      	ldr	r3, [r0, #0]
 800733e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007342:	d05f      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007344:	4b2d      	ldr	r3, [pc, #180]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0xc8>)
 8007346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007348:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800734c:	d126      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800734e:	4b2b      	ldr	r3, [pc, #172]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0xc8>)
 8007350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007352:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007356:	659a      	str	r2, [r3, #88]	; 0x58
 8007358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007362:	2701      	movs	r7, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007364:	4a26      	ldr	r2, [pc, #152]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0xcc>)
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800736c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800736e:	f7fd f99f 	bl	80046b0 <HAL_GetTick>
 8007372:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007374:	4e22      	ldr	r6, [pc, #136]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0xcc>)
 8007376:	6833      	ldr	r3, [r6, #0]
 8007378:	f413 7f80 	tst.w	r3, #256	; 0x100
 800737c:	f040 8185 	bne.w	800768a <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007380:	f7fd f996 	bl	80046b0 <HAL_GetTick>
 8007384:	1b40      	subs	r0, r0, r5
 8007386:	2802      	cmp	r0, #2
 8007388:	d9f5      	bls.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        ret = HAL_TIMEOUT;
 800738a:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800738c:	2f00      	cmp	r7, #0
 800738e:	d03a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007390:	4a1a      	ldr	r2, [pc, #104]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0xc8>)
 8007392:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007398:	6593      	str	r3, [r2, #88]	; 0x58
 800739a:	e034      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    FlagStatus       pwrclkchanged = RESET;
 800739c:	2700      	movs	r7, #0
 800739e:	e7e1      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x30>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d012      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x98>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073a6:	4a15      	ldr	r2, [pc, #84]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0xc8>)
 80073a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80073ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80073b0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80073b4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80073b8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073bc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80073c0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80073c4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80073c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073cc:	f013 0f01 	tst.w	r3, #1
 80073d0:	f000 8162 	beq.w	8007698 <HAL_RCCEx_PeriphCLKConfig+0x364>
        tickstart = HAL_GetTick();
 80073d4:	f7fd f96c 	bl	80046b0 <HAL_GetTick>
 80073d8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073da:	4e08      	ldr	r6, [pc, #32]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0xc8>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073dc:	f241 3888 	movw	r8, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073e0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80073e4:	f013 0f02 	tst.w	r3, #2
 80073e8:	f040 8156 	bne.w	8007698 <HAL_RCCEx_PeriphCLKConfig+0x364>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ec:	f7fd f960 	bl	80046b0 <HAL_GetTick>
 80073f0:	1b40      	subs	r0, r0, r5
 80073f2:	4540      	cmp	r0, r8
 80073f4:	d9f4      	bls.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
            ret = HAL_TIMEOUT;
 80073f6:	2003      	movs	r0, #3
 80073f8:	e7c8      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80073fa:	bf00      	nop
 80073fc:	40021000 	.word	0x40021000
 8007400:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007404:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f013 0f01 	tst.w	r3, #1
 800740c:	d008      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800740e:	4aa8      	ldr	r2, [pc, #672]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007410:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	430b      	orrs	r3, r1
 800741c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	f013 0f02 	tst.w	r3, #2
 8007426:	d008      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007428:	4aa1      	ldr	r2, [pc, #644]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800742a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800742e:	f023 030c 	bic.w	r3, r3, #12
 8007432:	68a1      	ldr	r1, [r4, #8]
 8007434:	430b      	orrs	r3, r1
 8007436:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f013 0f04 	tst.w	r3, #4
 8007440:	d008      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007442:	4a9b      	ldr	r2, [pc, #620]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007444:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007448:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800744c:	68e1      	ldr	r1, [r4, #12]
 800744e:	430b      	orrs	r3, r1
 8007450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	f013 0f08 	tst.w	r3, #8
 800745a:	d008      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800745c:	4a94      	ldr	r2, [pc, #592]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800745e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007462:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007466:	6921      	ldr	r1, [r4, #16]
 8007468:	430b      	orrs	r3, r1
 800746a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f013 0f10 	tst.w	r3, #16
 8007474:	d008      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007476:	4a8e      	ldr	r2, [pc, #568]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007478:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800747c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007480:	6961      	ldr	r1, [r4, #20]
 8007482:	430b      	orrs	r3, r1
 8007484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	f013 0f20 	tst.w	r3, #32
 800748e:	d008      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007490:	4a87      	ldr	r2, [pc, #540]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007492:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007496:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800749a:	69a1      	ldr	r1, [r4, #24]
 800749c:	430b      	orrs	r3, r1
 800749e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074a8:	d008      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074aa:	4a81      	ldr	r2, [pc, #516]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80074ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80074b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80074b4:	69e1      	ldr	r1, [r4, #28]
 80074b6:	430b      	orrs	r3, r1
 80074b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074c2:	d008      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074c4:	4a7a      	ldr	r2, [pc, #488]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80074c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80074ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80074ce:	6a21      	ldr	r1, [r4, #32]
 80074d0:	430b      	orrs	r3, r1
 80074d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80074dc:	d008      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074de:	4a74      	ldr	r2, [pc, #464]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80074e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80074e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80074e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074ea:	430b      	orrs	r3, r1
 80074ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80074f6:	d008      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074f8:	4a6d      	ldr	r2, [pc, #436]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80074fa:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007504:	430b      	orrs	r3, r1
 8007506:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007510:	d008      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007512:	4a67      	ldr	r2, [pc, #412]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007514:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007518:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800751c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800751e:	430b      	orrs	r3, r1
 8007520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800752a:	d00c      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800752c:	4a60      	ldr	r2, [pc, #384]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800752e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007532:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007536:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007538:	430b      	orrs	r3, r1
 800753a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800753e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007544:	d079      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800754c:	d00c      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800754e:	4a58      	ldr	r2, [pc, #352]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007550:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007554:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	430b      	orrs	r3, r1
 800755c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007566:	d06d      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x310>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800756e:	d00c      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007570:	4a4f      	ldr	r2, [pc, #316]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007572:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007576:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800757a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800757c:	430b      	orrs	r3, r1
 800757e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007588:	d061      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x31a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007590:	d00c      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007592:	4a47      	ldr	r2, [pc, #284]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007594:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007598:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800759c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800759e:	430b      	orrs	r3, r1
 80075a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075aa:	d055      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x324>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80075b2:	d00c      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075b4:	4a3e      	ldr	r2, [pc, #248]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80075b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80075ba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80075be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80075c0:	430b      	orrs	r3, r1
 80075c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075cc:	d049      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80075d4:	d00c      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075d6:	4a36      	ldr	r2, [pc, #216]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80075d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80075dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80075e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80075e2:	430b      	orrs	r3, r1
 80075e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80075e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80075ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ee:	d03d      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x338>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80075f6:	d00c      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80075f8:	4a2d      	ldr	r2, [pc, #180]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80075fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80075fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007602:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007604:	430b      	orrs	r3, r1
 8007606:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800760a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800760c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007610:	d031      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x342>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007618:	d00c      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800761a:	4a25      	ldr	r2, [pc, #148]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800761c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007620:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007624:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007626:	430b      	orrs	r3, r1
 8007628:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800762c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800762e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007632:	d025      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  }

#endif /* QUADSPI */

  return status;
}
 8007634:	b002      	add	sp, #8
 8007636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800763a:	68d3      	ldr	r3, [r2, #12]
 800763c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007640:	60d3      	str	r3, [r2, #12]
 8007642:	e780      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007644:	68d3      	ldr	r3, [r2, #12]
 8007646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764a:	60d3      	str	r3, [r2, #12]
 800764c:	e78c      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800764e:	68d3      	ldr	r3, [r2, #12]
 8007650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007654:	60d3      	str	r3, [r2, #12]
 8007656:	e798      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007658:	68d3      	ldr	r3, [r2, #12]
 800765a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800765e:	60d3      	str	r3, [r2, #12]
 8007660:	e7a4      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007662:	68d3      	ldr	r3, [r2, #12]
 8007664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007668:	60d3      	str	r3, [r2, #12]
 800766a:	e7b0      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x29a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800766c:	68d3      	ldr	r3, [r2, #12]
 800766e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007672:	60d3      	str	r3, [r2, #12]
 8007674:	e7bc      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007676:	68d3      	ldr	r3, [r2, #12]
 8007678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767c:	60d3      	str	r3, [r2, #12]
 800767e:	e7c8      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007680:	68d3      	ldr	r3, [r2, #12]
 8007682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007686:	60d3      	str	r3, [r2, #12]
  return status;
 8007688:	e7d4      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x300>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800768a:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007690:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007694:	f47f ae84 	bne.w	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007698:	4a05      	ldr	r2, [pc, #20]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800769a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800769e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80076a4:	430b      	orrs	r3, r1
 80076a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076aa:	2000      	movs	r0, #0
 80076ac:	e66e      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80076ae:	bf00      	nop
 80076b0:	40021000 	.word	0x40021000

080076b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	4681      	mov	r9, r0
 80076bc:	460f      	mov	r7, r1
 80076be:	4616      	mov	r6, r2
 80076c0:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076c2:	f7fc fff5 	bl	80046b0 <HAL_GetTick>
 80076c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c8:	442b      	add	r3, r5
 80076ca:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 80076ce:	f7fc ffef 	bl	80046b0 <HAL_GetTick>
 80076d2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076d4:	4b2c      	ldr	r3, [pc, #176]	; (8007788 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80076dc:	fb08 f303 	mul.w	r3, r8, r3
 80076e0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076e2:	f8d9 2000 	ldr.w	r2, [r9]
 80076e6:	6894      	ldr	r4, [r2, #8]
 80076e8:	ea37 0404 	bics.w	r4, r7, r4
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	42b3      	cmp	r3, r6
 80076f4:	d044      	beq.n	8007780 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80076fa:	d0f4      	beq.n	80076e6 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076fc:	f7fc ffd8 	bl	80046b0 <HAL_GetTick>
 8007700:	eba0 000a 	sub.w	r0, r0, sl
 8007704:	4540      	cmp	r0, r8
 8007706:	d207      	bcs.n	8007718 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007708:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf08      	it	eq
 800770e:	4698      	moveq	r8, r3
      }
      count--;
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	3b01      	subs	r3, #1
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	e7e4      	b.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007718:	f8d9 2000 	ldr.w	r2, [r9]
 800771c:	6853      	ldr	r3, [r2, #4]
 800771e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007722:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007724:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800772c:	d00c      	beq.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800772e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8007732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007736:	d016      	beq.n	8007766 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8007738:	2301      	movs	r3, #1
 800773a:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800773e:	2300      	movs	r3, #0
 8007740:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007744:	2003      	movs	r0, #3
 8007746:	e01c      	b.n	8007782 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007748:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800774c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007750:	d002      	beq.n	8007758 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007756:	d1ea      	bne.n	800772e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8007758:	f8d9 2000 	ldr.w	r2, [r9]
 800775c:	6813      	ldr	r3, [r2, #0]
 800775e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e7e3      	b.n	800772e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8007766:	f8d9 2000 	ldr.w	r2, [r9]
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	f8d9 2000 	ldr.w	r2, [r9]
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	e7db      	b.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8007780:	2000      	movs	r0, #0
}
 8007782:	b002      	add	sp, #8
 8007784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007788:	20000018 	.word	0x20000018

0800778c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800778c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	4680      	mov	r8, r0
 8007794:	460c      	mov	r4, r1
 8007796:	4615      	mov	r5, r2
 8007798:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80077a0:	f7fc ff86 	bl	80046b0 <HAL_GetTick>
 80077a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80077a6:	4437      	add	r7, r6
 80077a8:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80077aa:	f7fc ff81 	bl	80046b0 <HAL_GetTick>
 80077ae:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80077b0:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077b4:	4b33      	ldr	r3, [pc, #204]	; (8007884 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80077bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80077c0:	0d1b      	lsrs	r3, r3, #20
 80077c2:	fb07 f303 	mul.w	r3, r7, r3
 80077c6:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80077c8:	f8d8 2000 	ldr.w	r2, [r8]
 80077cc:	e002      	b.n	80077d4 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80077ce:	f1b6 3fff 	cmp.w	r6, #4294967295
 80077d2:	d111      	bne.n	80077f8 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80077d4:	6893      	ldr	r3, [r2, #8]
 80077d6:	ea03 0c04 	and.w	ip, r3, r4
 80077da:	45ac      	cmp	ip, r5
 80077dc:	d04e      	beq.n	800787c <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077de:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80077e2:	d1f4      	bne.n	80077ce <SPI_WaitFifoStateUntilTimeout+0x42>
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	d1f2      	bne.n	80077ce <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 80077e8:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80077f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077f6:	e7ea      	b.n	80077ce <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077f8:	f7fc ff5a 	bl	80046b0 <HAL_GetTick>
 80077fc:	eba0 0009 	sub.w	r0, r0, r9
 8007800:	42b8      	cmp	r0, r7
 8007802:	d207      	bcs.n	8007814 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007804:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8007806:	2b00      	cmp	r3, #0
 8007808:	bf08      	it	eq
 800780a:	461f      	moveq	r7, r3
      }
      count--;
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	3b01      	subs	r3, #1
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	e7d9      	b.n	80077c8 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007814:	f8d8 2000 	ldr.w	r2, [r8]
 8007818:	6853      	ldr	r3, [r2, #4]
 800781a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800781e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007820:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007828:	d00c      	beq.n	8007844 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800782a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800782e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007832:	d016      	beq.n	8007862 <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8007834:	2301      	movs	r3, #1
 8007836:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800783a:	2300      	movs	r3, #0
 800783c:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007840:	2003      	movs	r0, #3
 8007842:	e01c      	b.n	800787e <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007844:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784c:	d002      	beq.n	8007854 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800784e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007852:	d1ea      	bne.n	800782a <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8007854:	f8d8 2000 	ldr.w	r2, [r8]
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	e7e3      	b.n	800782a <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8007862:	f8d8 2000 	ldr.w	r2, [r8]
 8007866:	6813      	ldr	r3, [r2, #0]
 8007868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	f8d8 2000 	ldr.w	r2, [r8]
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	e7db      	b.n	8007834 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 800787c:	2000      	movs	r0, #0
}
 800787e:	b002      	add	sp, #8
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	20000018 	.word	0x20000018

08007888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	4604      	mov	r4, r0
 800788e:	460d      	mov	r5, r1
 8007890:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007892:	9200      	str	r2, [sp, #0]
 8007894:	460b      	mov	r3, r1
 8007896:	2200      	movs	r2, #0
 8007898:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800789c:	f7ff ff76 	bl	800778c <SPI_WaitFifoStateUntilTimeout>
 80078a0:	b9b0      	cbnz	r0, 80078d0 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078a2:	9600      	str	r6, [sp, #0]
 80078a4:	462b      	mov	r3, r5
 80078a6:	2200      	movs	r2, #0
 80078a8:	2180      	movs	r1, #128	; 0x80
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff ff02 	bl	80076b4 <SPI_WaitFlagStateUntilTimeout>
 80078b0:	b9a8      	cbnz	r0, 80078de <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078b2:	9600      	str	r6, [sp, #0]
 80078b4:	462b      	mov	r3, r5
 80078b6:	2200      	movs	r2, #0
 80078b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80078bc:	4620      	mov	r0, r4
 80078be:	f7ff ff65 	bl	800778c <SPI_WaitFifoStateUntilTimeout>
 80078c2:	b150      	cbz	r0, 80078da <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80078c6:	f043 0320 	orr.w	r3, r3, #32
 80078ca:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80078cc:	2003      	movs	r0, #3
 80078ce:	e004      	b.n	80078da <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80078d2:	f043 0320 	orr.w	r3, r3, #32
 80078d6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80078d8:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80078da:	b002      	add	sp, #8
 80078dc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80078e0:	f043 0320 	orr.w	r3, r3, #32
 80078e4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80078e6:	2003      	movs	r0, #3
 80078e8:	e7f7      	b.n	80078da <SPI_EndRxTxTransaction+0x52>

080078ea <HAL_SPI_Init>:
  if (hspi == NULL)
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d06d      	beq.n	80079ca <HAL_SPI_Init+0xe0>
{
 80078ee:	b510      	push	{r4, lr}
 80078f0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078f4:	b933      	cbnz	r3, 8007904 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078f6:	6843      	ldr	r3, [r0, #4]
 80078f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078fc:	d005      	beq.n	800790a <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078fe:	2300      	movs	r3, #0
 8007900:	61c3      	str	r3, [r0, #28]
 8007902:	e002      	b.n	800790a <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007904:	2300      	movs	r3, #0
 8007906:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007908:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800790a:	2300      	movs	r3, #0
 800790c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800790e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007912:	2b00      	cmp	r3, #0
 8007914:	d053      	beq.n	80079be <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007916:	2302      	movs	r3, #2
 8007918:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007924:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007926:	68e3      	ldr	r3, [r4, #12]
 8007928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800792c:	bf8c      	ite	hi
 800792e:	2100      	movhi	r1, #0
 8007930:	2101      	movls	r1, #1
 8007932:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800793c:	bf1c      	itt	ne
 800793e:	2300      	movne	r3, #0
 8007940:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007942:	6822      	ldr	r2, [r4, #0]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800794a:	68a0      	ldr	r0, [r4, #8]
 800794c:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8007950:	4303      	orrs	r3, r0
 8007952:	6920      	ldr	r0, [r4, #16]
 8007954:	f000 0002 	and.w	r0, r0, #2
 8007958:	4303      	orrs	r3, r0
 800795a:	6960      	ldr	r0, [r4, #20]
 800795c:	f000 0001 	and.w	r0, r0, #1
 8007960:	4303      	orrs	r3, r0
 8007962:	69a0      	ldr	r0, [r4, #24]
 8007964:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8007968:	4303      	orrs	r3, r0
 800796a:	69e0      	ldr	r0, [r4, #28]
 800796c:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8007970:	4303      	orrs	r3, r0
 8007972:	6a20      	ldr	r0, [r4, #32]
 8007974:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8007978:	4303      	orrs	r3, r0
 800797a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800797c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8007980:	4303      	orrs	r3, r0
 8007982:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800798e:	f000 0008 	and.w	r0, r0, #8
 8007992:	4303      	orrs	r3, r0
 8007994:	68e0      	ldr	r0, [r4, #12]
 8007996:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 800799a:	4303      	orrs	r3, r0
 800799c:	8b60      	ldrh	r0, [r4, #26]
 800799e:	f000 0004 	and.w	r0, r0, #4
 80079a2:	4303      	orrs	r3, r0
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	69d3      	ldr	r3, [r2, #28]
 80079ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079b0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079b2:	2000      	movs	r0, #0
 80079b4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80079bc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80079be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7fc fbe8 	bl	8004198 <HAL_SPI_MspInit>
 80079c8:	e7a5      	b.n	8007916 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80079ca:	2001      	movs	r0, #1
}
 80079cc:	4770      	bx	lr

080079ce <HAL_SPI_TransmitReceive>:
{
 80079ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d2:	461f      	mov	r7, r3
 80079d4:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80079d6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80079da:	2b01      	cmp	r3, #1
 80079dc:	f000 815f 	beq.w	8007c9e <HAL_SPI_TransmitReceive+0x2d0>
 80079e0:	4604      	mov	r4, r0
 80079e2:	4688      	mov	r8, r1
 80079e4:	4691      	mov	r9, r2
 80079e6:	2301      	movs	r3, #1
 80079e8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80079ec:	f7fc fe60 	bl	80046b0 <HAL_GetTick>
 80079f0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80079f2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80079f6:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80079f8:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079fa:	2801      	cmp	r0, #1
 80079fc:	d00a      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x46>
 80079fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a02:	f040 8135 	bne.w	8007c70 <HAL_SPI_TransmitReceive+0x2a2>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 813a 	bne.w	8007c82 <HAL_SPI_TransmitReceive+0x2b4>
 8007a0e:	2804      	cmp	r0, #4
 8007a10:	f040 8139 	bne.w	8007c86 <HAL_SPI_TransmitReceive+0x2b8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a14:	f1b8 0f00 	cmp.w	r8, #0
 8007a18:	f000 8137 	beq.w	8007c8a <HAL_SPI_TransmitReceive+0x2bc>
 8007a1c:	f1b9 0f00 	cmp.w	r9, #0
 8007a20:	f000 8135 	beq.w	8007c8e <HAL_SPI_TransmitReceive+0x2c0>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	f000 8134 	beq.w	8007c92 <HAL_SPI_TransmitReceive+0x2c4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a2a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a32:	bf1c      	itt	ne
 8007a34:	2305      	movne	r3, #5
 8007a36:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a3e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007a42:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007a46:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a4a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007a4e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007a50:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8007a52:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007a54:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a56:	68e3      	ldr	r3, [r4, #12]
 8007a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a5c:	d801      	bhi.n	8007a62 <HAL_SPI_TransmitReceive+0x94>
 8007a5e:	2f01      	cmp	r7, #1
 8007a60:	d924      	bls.n	8007aac <HAL_SPI_TransmitReceive+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	6853      	ldr	r3, [r2, #4]
 8007a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a6a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a74:	d103      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a7c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a84:	d957      	bls.n	8007b36 <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a86:	6863      	ldr	r3, [r4, #4]
 8007a88:	b10b      	cbz	r3, 8007a8e <HAL_SPI_TransmitReceive+0xc0>
 8007a8a:	2f01      	cmp	r7, #1
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a92:	8812      	ldrh	r2, [r2, #0]
 8007a94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a98:	3302      	adds	r3, #2
 8007a9a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007a9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007aa4:	2701      	movs	r7, #1
        txallowed = 0U;
 8007aa6:	f04f 0800 	mov.w	r8, #0
 8007aaa:	e02f      	b.n	8007b0c <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	6853      	ldr	r3, [r2, #4]
 8007ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ab4:	6053      	str	r3, [r2, #4]
 8007ab6:	e7d9      	b.n	8007a6c <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ab8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007aba:	8812      	ldrh	r2, [r2, #0]
 8007abc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007abe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ac0:	3302      	adds	r3, #2
 8007ac2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007ac4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007acc:	4647      	mov	r7, r8
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	6893      	ldr	r3, [r2, #8]
 8007ad2:	f013 0301 	ands.w	r3, r3, #1
 8007ad6:	d010      	beq.n	8007afa <HAL_SPI_TransmitReceive+0x12c>
 8007ad8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007adc:	b289      	uxth	r1, r1
 8007ade:	b161      	cbz	r1, 8007afa <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ae0:	68d1      	ldr	r1, [r2, #12]
 8007ae2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ae4:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ae8:	3202      	adds	r2, #2
 8007aea:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007aec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007af0:	3a01      	subs	r2, #1
 8007af2:	b292      	uxth	r2, r2
 8007af4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 8007af8:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007afa:	f7fc fdd9 	bl	80046b0 <HAL_GetTick>
 8007afe:	1b83      	subs	r3, r0, r6
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	d303      	bcc.n	8007b0c <HAL_SPI_TransmitReceive+0x13e>
 8007b04:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007b08:	f040 80c5 	bne.w	8007c96 <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b92b      	cbnz	r3, 8007b1e <HAL_SPI_TransmitReceive+0x150>
 8007b12:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 809f 	beq.w	8007c5c <HAL_SPI_TransmitReceive+0x28e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	f012 0f02 	tst.w	r2, #2
 8007b26:	d0d2      	beq.n	8007ace <HAL_SPI_TransmitReceive+0x100>
 8007b28:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	d0ce      	beq.n	8007ace <HAL_SPI_TransmitReceive+0x100>
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	d0cc      	beq.n	8007ace <HAL_SPI_TransmitReceive+0x100>
 8007b34:	e7c0      	b.n	8007ab8 <HAL_SPI_TransmitReceive+0xea>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	b10b      	cbz	r3, 8007b3e <HAL_SPI_TransmitReceive+0x170>
 8007b3a:	2f01      	cmp	r7, #1
 8007b3c:	d10e      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x18e>
      if (hspi->TxXferCount > 1U)
 8007b3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d90e      	bls.n	8007b64 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b4a:	8812      	ldrh	r2, [r2, #0]
 8007b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b50:	3302      	adds	r3, #2
 8007b52:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b56:	3b02      	subs	r3, #2
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007b5c:	2701      	movs	r7, #1
        txallowed = 0U;
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	e043      	b.n	8007bec <HAL_SPI_TransmitReceive+0x21e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b6e:	3301      	adds	r3, #1
 8007b70:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007b72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007b7a:	e7ef      	b.n	8007b5c <HAL_SPI_TransmitReceive+0x18e>
        if (hspi->TxXferCount > 1U)
 8007b7c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	2a01      	cmp	r2, #1
 8007b82:	d90b      	bls.n	8007b9c <HAL_SPI_TransmitReceive+0x1ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b86:	8812      	ldrh	r2, [r2, #0]
 8007b88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b92:	3b02      	subs	r3, #2
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007b98:	4647      	mov	r7, r8
 8007b9a:	e039      	b.n	8007c10 <HAL_SPI_TransmitReceive+0x242>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8007ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8007ba8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007bb0:	4647      	mov	r7, r8
 8007bb2:	e02d      	b.n	8007c10 <HAL_SPI_TransmitReceive+0x242>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bb4:	6821      	ldr	r1, [r4, #0]
 8007bb6:	684a      	ldr	r2, [r1, #4]
 8007bb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bbc:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8007bbe:	461f      	mov	r7, r3
 8007bc0:	e00c      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x20e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bc4:	7b12      	ldrb	r2, [r2, #12]
 8007bc6:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8007bc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bca:	3201      	adds	r2, #1
 8007bcc:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007bce:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007bd2:	3a01      	subs	r2, #1
 8007bd4:	b292      	uxth	r2, r2
 8007bd6:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 8007bda:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bdc:	f7fc fd68 	bl	80046b0 <HAL_GetTick>
 8007be0:	1b80      	subs	r0, r0, r6
 8007be2:	42a8      	cmp	r0, r5
 8007be4:	d336      	bcc.n	8007c54 <HAL_SPI_TransmitReceive+0x286>
 8007be6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007bea:	d156      	bne.n	8007c9a <HAL_SPI_TransmitReceive+0x2cc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	b923      	cbnz	r3, 8007bfc <HAL_SPI_TransmitReceive+0x22e>
 8007bf2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02f      	beq.n	8007c5c <HAL_SPI_TransmitReceive+0x28e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	f012 0f02 	tst.w	r2, #2
 8007c04:	d004      	beq.n	8007c10 <HAL_SPI_TransmitReceive+0x242>
 8007c06:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	b10a      	cbz	r2, 8007c10 <HAL_SPI_TransmitReceive+0x242>
 8007c0c:	2f01      	cmp	r7, #1
 8007c0e:	d0b5      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x1ae>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c10:	6822      	ldr	r2, [r4, #0]
 8007c12:	6893      	ldr	r3, [r2, #8]
 8007c14:	f013 0301 	ands.w	r3, r3, #1
 8007c18:	d0e0      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x20e>
 8007c1a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007c1e:	b289      	uxth	r1, r1
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d0db      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x20e>
        if (hspi->RxXferCount > 1U)
 8007c24:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007c28:	b289      	uxth	r1, r1
 8007c2a:	2901      	cmp	r1, #1
 8007c2c:	d9c9      	bls.n	8007bc2 <HAL_SPI_TransmitReceive+0x1f4>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c2e:	68d1      	ldr	r1, [r2, #12]
 8007c30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c32:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c36:	3202      	adds	r2, #2
 8007c38:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007c3a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007c3e:	3a02      	subs	r2, #2
 8007c40:	b292      	uxth	r2, r2
 8007c42:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007c46:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	2a01      	cmp	r2, #1
 8007c4e:	d9b1      	bls.n	8007bb4 <HAL_SPI_TransmitReceive+0x1e6>
        txallowed = 1U;
 8007c50:	461f      	mov	r7, r3
 8007c52:	e7c3      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x20e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c54:	2d00      	cmp	r5, #0
 8007c56:	d1c9      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x21e>
        errorcode = HAL_TIMEOUT;
 8007c58:	2003      	movs	r0, #3
 8007c5a:	e00a      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4620      	mov	r0, r4
 8007c62:	f7ff fe11 	bl	8007888 <SPI_EndRxTxTransaction>
 8007c66:	b120      	cbz	r0, 8007c72 <HAL_SPI_TransmitReceive+0x2a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c68:	2320      	movs	r3, #32
 8007c6a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	e000      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
    errorcode = HAL_BUSY;
 8007c70:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8007c82:	2002      	movs	r0, #2
 8007c84:	e7f5      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
 8007c86:	2002      	movs	r0, #2
 8007c88:	e7f3      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
    errorcode = HAL_ERROR;
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	e7f1      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
 8007c8e:	2001      	movs	r0, #1
 8007c90:	e7ef      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7ed      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
        errorcode = HAL_TIMEOUT;
 8007c96:	2003      	movs	r0, #3
 8007c98:	e7eb      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
        errorcode = HAL_TIMEOUT;
 8007c9a:	2003      	movs	r0, #3
 8007c9c:	e7e9      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x2a4>
  __HAL_LOCK(hspi);
 8007c9e:	2002      	movs	r0, #2
 8007ca0:	e7ed      	b.n	8007c7e <HAL_SPI_TransmitReceive+0x2b0>

08007ca2 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007ca2:	b340      	cbz	r0, 8007cf6 <HAL_SRAM_Init+0x54>
{
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	460e      	mov	r6, r1
 8007ca8:	4615      	mov	r5, r2
 8007caa:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007cac:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8007cb0:	b1e3      	cbz	r3, 8007cec <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	f851 0b08 	ldr.w	r0, [r1], #8
 8007cb8:	f000 fee0 	bl	8008a7c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007cbc:	68a2      	ldr	r2, [r4, #8]
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	f000 ff49 	bl	8008b58 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cc8:	68a2      	ldr	r2, [r4, #8]
 8007cca:	4629      	mov	r1, r5
 8007ccc:	6860      	ldr	r0, [r4, #4]
 8007cce:	f000 ff75 	bl	8008bbc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	68a1      	ldr	r1, [r4, #8]
 8007cd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8007ce8:	2000      	movs	r0, #0
}
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8007cec:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 8007cf0:	f7f9 fc10 	bl	8001514 <HAL_SRAM_MspInit>
 8007cf4:	e7dd      	b.n	8007cb2 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 8007cf6:	2001      	movs	r0, #1
}
 8007cf8:	4770      	bx	lr
	...

08007cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfe:	6a03      	ldr	r3, [r0, #32]
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d08:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d0a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d10:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d14:	680c      	ldr	r4, [r1, #0]
 8007d16:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d18:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d1c:	688c      	ldr	r4, [r1, #8]
 8007d1e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d20:	4c26      	ldr	r4, [pc, #152]	; (8007dbc <TIM_OC1_SetConfig+0xc0>)
 8007d22:	42a0      	cmp	r0, r4
 8007d24:	d019      	beq.n	8007d5a <TIM_OC1_SetConfig+0x5e>
 8007d26:	4d26      	ldr	r5, [pc, #152]	; (8007dc0 <TIM_OC1_SetConfig+0xc4>)
 8007d28:	42a8      	cmp	r0, r5
 8007d2a:	d039      	beq.n	8007da0 <TIM_OC1_SetConfig+0xa4>
 8007d2c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d02e      	beq.n	8007d92 <TIM_OC1_SetConfig+0x96>
 8007d34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d023      	beq.n	8007d84 <TIM_OC1_SetConfig+0x88>
 8007d3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d034      	beq.n	8007dae <TIM_OC1_SetConfig+0xb2>
 8007d44:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d114      	bne.n	8007d76 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d4c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d50:	68cc      	ldr	r4, [r1, #12]
 8007d52:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d54:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d58:	e005      	b.n	8007d66 <TIM_OC1_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d5a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007d5e:	68cc      	ldr	r4, [r1, #12]
 8007d60:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d62:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d66:	f426 7440 	bic.w	r4, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d6a:	694d      	ldr	r5, [r1, #20]
 8007d6c:	698e      	ldr	r6, [r1, #24]
 8007d6e:	ea45 0c06 	orr.w	ip, r5, r6
 8007d72:	ea4c 0604 	orr.w	r6, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d76:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d78:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d7a:	684a      	ldr	r2, [r1, #4]
 8007d7c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d7e:	6203      	str	r3, [r0, #32]
}
 8007d80:	bc70      	pop	{r4, r5, r6}
 8007d82:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d84:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007d88:	68cc      	ldr	r4, [r1, #12]
 8007d8a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d8c:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d90:	e7e9      	b.n	8007d66 <TIM_OC1_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d92:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007d96:	68cc      	ldr	r4, [r1, #12]
 8007d98:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d9a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9e:	e7e2      	b.n	8007d66 <TIM_OC1_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC1NP;
 8007da0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007da4:	68cc      	ldr	r4, [r1, #12]
 8007da6:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007da8:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dac:	e7db      	b.n	8007d66 <TIM_OC1_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dae:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007db2:	68cc      	ldr	r4, [r1, #12]
 8007db4:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007db6:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dba:	e7d4      	b.n	8007d66 <TIM_OC1_SetConfig+0x6a>
 8007dbc:	40012c00 	.word	0x40012c00
 8007dc0:	40013400 	.word	0x40013400

08007dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dc6:	6a03      	ldr	r3, [r0, #32]
 8007dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dcc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dd2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dd8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	680c      	ldr	r4, [r1, #0]
 8007dde:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007de4:	688c      	ldr	r4, [r1, #8]
 8007de6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dea:	4c20      	ldr	r4, [pc, #128]	; (8007e6c <TIM_OC3_SetConfig+0xa8>)
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d01e      	beq.n	8007e2e <TIM_OC3_SetConfig+0x6a>
 8007df0:	4d1f      	ldr	r5, [pc, #124]	; (8007e70 <TIM_OC3_SetConfig+0xac>)
 8007df2:	42a8      	cmp	r0, r5
 8007df4:	d031      	beq.n	8007e5a <TIM_OC3_SetConfig+0x96>
 8007df6:	f504 5410 	add.w	r4, r4, #9216	; 0x2400
 8007dfa:	42a0      	cmp	r0, r4
 8007dfc:	d00f      	beq.n	8007e1e <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfe:	4c1d      	ldr	r4, [pc, #116]	; (8007e74 <TIM_OC3_SetConfig+0xb0>)
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d01b      	beq.n	8007e3c <TIM_OC3_SetConfig+0x78>
 8007e04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	d017      	beq.n	8007e3c <TIM_OC3_SetConfig+0x78>
 8007e0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007e10:	42a0      	cmp	r0, r4
 8007e12:	d013      	beq.n	8007e3c <TIM_OC3_SetConfig+0x78>
 8007e14:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007e18:	42a0      	cmp	r0, r4
 8007e1a:	d117      	bne.n	8007e4c <TIM_OC3_SetConfig+0x88>
 8007e1c:	e00e      	b.n	8007e3c <TIM_OC3_SetConfig+0x78>
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e22:	68cc      	ldr	r4, [r1, #12]
 8007e24:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2c:	e7e7      	b.n	8007dfe <TIM_OC3_SetConfig+0x3a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e32:	68cc      	ldr	r4, [r1, #12]
 8007e34:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e3c:	f426 5440 	bic.w	r4, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e40:	694d      	ldr	r5, [r1, #20]
 8007e42:	698e      	ldr	r6, [r1, #24]
 8007e44:	ea45 0c06 	orr.w	ip, r5, r6
 8007e48:	ea44 160c 	orr.w	r6, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4c:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e4e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e50:	684a      	ldr	r2, [r1, #4]
 8007e52:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e54:	6203      	str	r3, [r0, #32]
}
 8007e56:	bc70      	pop	{r4, r5, r6}
 8007e58:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e5e:	68cc      	ldr	r4, [r1, #12]
 8007e60:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e68:	e7e8      	b.n	8007e3c <TIM_OC3_SetConfig+0x78>
 8007e6a:	bf00      	nop
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40013400 	.word	0x40013400
 8007e74:	40014000 	.word	0x40014000

08007e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e78:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e7a:	6a03      	ldr	r3, [r0, #32]
 8007e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e84:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e86:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007e8c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	680c      	ldr	r4, [r1, #0]
 8007e92:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e9a:	688c      	ldr	r4, [r1, #8]
 8007e9c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007ea0:	4c1f      	ldr	r4, [pc, #124]	; (8007f20 <TIM_OC4_SetConfig+0xa8>)
 8007ea2:	42a0      	cmp	r0, r4
 8007ea4:	d01e      	beq.n	8007ee4 <TIM_OC4_SetConfig+0x6c>
 8007ea6:	4d1f      	ldr	r5, [pc, #124]	; (8007f24 <TIM_OC4_SetConfig+0xac>)
 8007ea8:	42a8      	cmp	r0, r5
 8007eaa:	d031      	beq.n	8007f10 <TIM_OC4_SetConfig+0x98>
 8007eac:	f504 5410 	add.w	r4, r4, #9216	; 0x2400
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d00f      	beq.n	8007ed4 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb4:	4c1c      	ldr	r4, [pc, #112]	; (8007f28 <TIM_OC4_SetConfig+0xb0>)
 8007eb6:	42a0      	cmp	r0, r4
 8007eb8:	d01b      	beq.n	8007ef2 <TIM_OC4_SetConfig+0x7a>
 8007eba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ebe:	42a0      	cmp	r0, r4
 8007ec0:	d017      	beq.n	8007ef2 <TIM_OC4_SetConfig+0x7a>
 8007ec2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ec6:	42a0      	cmp	r0, r4
 8007ec8:	d013      	beq.n	8007ef2 <TIM_OC4_SetConfig+0x7a>
 8007eca:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007ece:	42a0      	cmp	r0, r4
 8007ed0:	d117      	bne.n	8007f02 <TIM_OC4_SetConfig+0x8a>
 8007ed2:	e00e      	b.n	8007ef2 <TIM_OC4_SetConfig+0x7a>
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ed4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ed8:	68cc      	ldr	r4, [r1, #12]
 8007eda:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee2:	e7e7      	b.n	8007eb4 <TIM_OC4_SetConfig+0x3c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ee8:	68cc      	ldr	r4, [r1, #12]
 8007eea:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ef2:	f426 4440 	bic.w	r4, r6, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ef6:	694d      	ldr	r5, [r1, #20]
 8007ef8:	698e      	ldr	r6, [r1, #24]
 8007efa:	ea45 0c06 	orr.w	ip, r5, r6
 8007efe:	ea44 168c 	orr.w	r6, r4, ip, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f02:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f04:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f06:	684a      	ldr	r2, [r1, #4]
 8007f08:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0a:	6203      	str	r3, [r0, #32]
}
 8007f0c:	bc70      	pop	{r4, r5, r6}
 8007f0e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC4NP;
 8007f10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007f14:	68cc      	ldr	r4, [r1, #12]
 8007f16:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1e:	e7e8      	b.n	8007ef2 <TIM_OC4_SetConfig+0x7a>
 8007f20:	40012c00 	.word	0x40012c00
 8007f24:	40013400 	.word	0x40013400
 8007f28:	40014000 	.word	0x40014000

08007f2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f2c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f2e:	6a03      	ldr	r3, [r0, #32]
 8007f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f38:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f3a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f44:	680d      	ldr	r5, [r1, #0]
 8007f46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f4c:	688d      	ldr	r5, [r1, #8]
 8007f4e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f52:	4d11      	ldr	r5, [pc, #68]	; (8007f98 <TIM_OC5_SetConfig+0x6c>)
 8007f54:	42a8      	cmp	r0, r5
 8007f56:	d013      	beq.n	8007f80 <TIM_OC5_SetConfig+0x54>
 8007f58:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007f5c:	42a8      	cmp	r0, r5
 8007f5e:	d00f      	beq.n	8007f80 <TIM_OC5_SetConfig+0x54>
 8007f60:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007f64:	42a8      	cmp	r0, r5
 8007f66:	d00b      	beq.n	8007f80 <TIM_OC5_SetConfig+0x54>
 8007f68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f6c:	42a8      	cmp	r0, r5
 8007f6e:	d007      	beq.n	8007f80 <TIM_OC5_SetConfig+0x54>
 8007f70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f74:	42a8      	cmp	r0, r5
 8007f76:	d003      	beq.n	8007f80 <TIM_OC5_SetConfig+0x54>
 8007f78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007f7c:	42a8      	cmp	r0, r5
 8007f7e:	d104      	bne.n	8007f8a <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f80:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f84:	694d      	ldr	r5, [r1, #20]
 8007f86:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f8c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f8e:	684a      	ldr	r2, [r1, #4]
 8007f90:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f92:	6203      	str	r3, [r0, #32]
}
 8007f94:	bc30      	pop	{r4, r5}
 8007f96:	4770      	bx	lr
 8007f98:	40012c00 	.word	0x40012c00

08007f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f9e:	6a03      	ldr	r3, [r0, #32]
 8007fa0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007fa4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007faa:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007fb0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb4:	680d      	ldr	r5, [r1, #0]
 8007fb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fbe:	688d      	ldr	r5, [r1, #8]
 8007fc0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc4:	4d11      	ldr	r5, [pc, #68]	; (800800c <TIM_OC6_SetConfig+0x70>)
 8007fc6:	42a8      	cmp	r0, r5
 8007fc8:	d013      	beq.n	8007ff2 <TIM_OC6_SetConfig+0x56>
 8007fca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007fce:	42a8      	cmp	r0, r5
 8007fd0:	d00f      	beq.n	8007ff2 <TIM_OC6_SetConfig+0x56>
 8007fd2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007fd6:	42a8      	cmp	r0, r5
 8007fd8:	d00b      	beq.n	8007ff2 <TIM_OC6_SetConfig+0x56>
 8007fda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007fde:	42a8      	cmp	r0, r5
 8007fe0:	d007      	beq.n	8007ff2 <TIM_OC6_SetConfig+0x56>
 8007fe2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007fe6:	42a8      	cmp	r0, r5
 8007fe8:	d003      	beq.n	8007ff2 <TIM_OC6_SetConfig+0x56>
 8007fea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007fee:	42a8      	cmp	r0, r5
 8007ff0:	d104      	bne.n	8007ffc <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ff2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ff6:	694d      	ldr	r5, [r1, #20]
 8007ff8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ffe:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008000:	684a      	ldr	r2, [r1, #4]
 8008002:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008004:	6203      	str	r3, [r0, #32]
}
 8008006:	bc30      	pop	{r4, r5}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40012c00 	.word	0x40012c00

08008010 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008010:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b01      	cmp	r3, #1
 8008018:	d135      	bne.n	8008086 <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 800801a:	2302      	movs	r3, #2
 800801c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008020:	6803      	ldr	r3, [r0, #0]
 8008022:	4a1c      	ldr	r2, [pc, #112]	; (8008094 <HAL_TIM_Base_Start+0x84>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d020      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
 8008028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802c:	d01d      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
 800802e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008032:	4293      	cmp	r3, r2
 8008034:	d019      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
 8008036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800803a:	4293      	cmp	r3, r2
 800803c:	d015      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
 800803e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008042:	4293      	cmp	r3, r2
 8008044:	d011      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
 8008046:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800804a:	4293      	cmp	r3, r2
 800804c:	d00d      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
 800804e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008052:	4293      	cmp	r3, r2
 8008054:	d009      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
 8008056:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800805a:	4293      	cmp	r3, r2
 800805c:	d005      	beq.n	800806a <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	f042 0201 	orr.w	r2, r2, #1
 8008064:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008066:	2000      	movs	r0, #0
 8008068:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	4a0a      	ldr	r2, [pc, #40]	; (8008098 <HAL_TIM_Base_Start+0x88>)
 800806e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008070:	2a06      	cmp	r2, #6
 8008072:	d00a      	beq.n	800808a <HAL_TIM_Base_Start+0x7a>
 8008074:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008078:	d009      	beq.n	800808e <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008082:	2000      	movs	r0, #0
 8008084:	4770      	bx	lr
    return HAL_ERROR;
 8008086:	2001      	movs	r0, #1
 8008088:	4770      	bx	lr
  return HAL_OK;
 800808a:	2000      	movs	r0, #0
 800808c:	4770      	bx	lr
 800808e:	2000      	movs	r0, #0
}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40012c00 	.word	0x40012c00
 8008098:	00010007 	.word	0x00010007

0800809c <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 800809c:	6803      	ldr	r3, [r0, #0]
 800809e:	6a19      	ldr	r1, [r3, #32]
 80080a0:	f241 1211 	movw	r2, #4369	; 0x1111
 80080a4:	4211      	tst	r1, r2
 80080a6:	d108      	bne.n	80080ba <HAL_TIM_Base_Stop+0x1e>
 80080a8:	6a19      	ldr	r1, [r3, #32]
 80080aa:	f244 4244 	movw	r2, #17476	; 0x4444
 80080ae:	4211      	tst	r1, r2
 80080b0:	d103      	bne.n	80080ba <HAL_TIM_Base_Stop+0x1e>
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIM_OC_MspInit>:
}
 80080c4:	4770      	bx	lr

080080c6 <HAL_TIM_PeriodElapsedCallback>:
}
 80080c6:	4770      	bx	lr

080080c8 <HAL_TIM_IC_CaptureCallback>:
}
 80080c8:	4770      	bx	lr

080080ca <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80080ca:	4770      	bx	lr

080080cc <HAL_TIM_TriggerCallback>:
}
 80080cc:	4770      	bx	lr

080080ce <HAL_TIM_IRQHandler>:
{
 80080ce:	b510      	push	{r4, lr}
 80080d0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080d2:	6803      	ldr	r3, [r0, #0]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	f012 0f02 	tst.w	r2, #2
 80080da:	d012      	beq.n	8008102 <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	f012 0f02 	tst.w	r2, #2
 80080e2:	d00e      	beq.n	8008102 <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080e4:	f06f 0202 	mvn.w	r2, #2
 80080e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ea:	2301      	movs	r3, #1
 80080ec:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080ee:	6803      	ldr	r3, [r0, #0]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	f013 0f03 	tst.w	r3, #3
 80080f6:	f000 809f 	beq.w	8008238 <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	f7ff ffe5 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	2300      	movs	r3, #0
 8008100:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	691a      	ldr	r2, [r3, #16]
 8008106:	f012 0f04 	tst.w	r2, #4
 800810a:	d013      	beq.n	8008134 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	f012 0f04 	tst.w	r2, #4
 8008112:	d00f      	beq.n	8008134 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008114:	f06f 0204 	mvn.w	r2, #4
 8008118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800811a:	2302      	movs	r3, #2
 800811c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008126:	f000 808d 	beq.w	8008244 <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 800812a:	4620      	mov	r0, r4
 800812c:	f7ff ffcc 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008130:	2300      	movs	r3, #0
 8008132:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	f012 0f08 	tst.w	r2, #8
 800813c:	d012      	beq.n	8008164 <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	f012 0f08 	tst.w	r2, #8
 8008144:	d00e      	beq.n	8008164 <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008146:	f06f 0208 	mvn.w	r2, #8
 800814a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800814c:	2304      	movs	r3, #4
 800814e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f013 0f03 	tst.w	r3, #3
 8008158:	d07b      	beq.n	8008252 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 800815a:	4620      	mov	r0, r4
 800815c:	f7ff ffb4 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008160:	2300      	movs	r3, #0
 8008162:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	f012 0f10 	tst.w	r2, #16
 800816c:	d012      	beq.n	8008194 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	f012 0f10 	tst.w	r2, #16
 8008174:	d00e      	beq.n	8008194 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008176:	f06f 0210 	mvn.w	r2, #16
 800817a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800817c:	2308      	movs	r3, #8
 800817e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008188:	d06a      	beq.n	8008260 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff ff9c 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008190:	2300      	movs	r3, #0
 8008192:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	f012 0f01 	tst.w	r2, #1
 800819c:	d003      	beq.n	80081a6 <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	f012 0f01 	tst.w	r2, #1
 80081a4:	d163      	bne.n	800826e <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80081ae:	d003      	beq.n	80081b8 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80081b6:	d161      	bne.n	800827c <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80081c8:	d15f      	bne.n	800828a <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80081d2:	d003      	beq.n	80081dc <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80081da:	d15d      	bne.n	8008298 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	f012 0f20 	tst.w	r2, #32
 80081e4:	d003      	beq.n	80081ee <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	f012 0f20 	tst.w	r2, #32
 80081ec:	d15b      	bne.n	80082a6 <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	691a      	ldr	r2, [r3, #16]
 80081f2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80081f6:	d003      	beq.n	8008200 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80081fe:	d159      	bne.n	80082b4 <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008210:	d157      	bne.n	80082c2 <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800821a:	d003      	beq.n	8008224 <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008222:	d155      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 800822c:	d003      	beq.n	8008236 <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008234:	d153      	bne.n	80082de <HAL_TIM_IRQHandler+0x210>
}
 8008236:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008238:	f7fb fbd4 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800823c:	4620      	mov	r0, r4
 800823e:	f7ff ff44 	bl	80080ca <HAL_TIM_PWM_PulseFinishedCallback>
 8008242:	e75c      	b.n	80080fe <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008244:	4620      	mov	r0, r4
 8008246:	f7fb fbcd 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824a:	4620      	mov	r0, r4
 800824c:	f7ff ff3d 	bl	80080ca <HAL_TIM_PWM_PulseFinishedCallback>
 8008250:	e76e      	b.n	8008130 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008252:	4620      	mov	r0, r4
 8008254:	f7fb fbc6 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008258:	4620      	mov	r0, r4
 800825a:	f7ff ff36 	bl	80080ca <HAL_TIM_PWM_PulseFinishedCallback>
 800825e:	e77f      	b.n	8008160 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008260:	4620      	mov	r0, r4
 8008262:	f7fb fbbf 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008266:	4620      	mov	r0, r4
 8008268:	f7ff ff2f 	bl	80080ca <HAL_TIM_PWM_PulseFinishedCallback>
 800826c:	e790      	b.n	8008190 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800826e:	f06f 0201 	mvn.w	r2, #1
 8008272:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008274:	4620      	mov	r0, r4
 8008276:	f7ff ff26 	bl	80080c6 <HAL_TIM_PeriodElapsedCallback>
 800827a:	e794      	b.n	80081a6 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800827c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008280:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fbf3 	bl	8008a6e <HAL_TIMEx_BreakCallback>
 8008288:	e796      	b.n	80081b8 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800828a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800828e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fbed 	bl	8008a70 <HAL_TIMEx_Break2Callback>
 8008296:	e798      	b.n	80081ca <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008298:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800829c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800829e:	4620      	mov	r0, r4
 80082a0:	f7ff ff14 	bl	80080cc <HAL_TIM_TriggerCallback>
 80082a4:	e79a      	b.n	80081dc <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082a6:	f06f 0220 	mvn.w	r2, #32
 80082aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 fbdd 	bl	8008a6c <HAL_TIMEx_CommutCallback>
 80082b2:	e79c      	b.n	80081ee <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80082b4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80082b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fbd9 	bl	8008a72 <HAL_TIMEx_EncoderIndexCallback>
 80082c0:	e79e      	b.n	8008200 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80082c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80082c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fbd3 	bl	8008a74 <HAL_TIMEx_DirectionChangeCallback>
 80082ce:	e7a0      	b.n	8008212 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80082d0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80082d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fbcd 	bl	8008a76 <HAL_TIMEx_IndexErrorCallback>
 80082dc:	e7a2      	b.n	8008224 <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80082de:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80082e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fbc7 	bl	8008a78 <HAL_TIMEx_TransitionErrorCallback>
}
 80082ea:	e7a4      	b.n	8008236 <HAL_TIM_IRQHandler+0x168>

080082ec <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80082ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082ee:	4a5f      	ldr	r2, [pc, #380]	; (800846c <TIM_Base_SetConfig+0x180>)
 80082f0:	4290      	cmp	r0, r2
 80082f2:	f000 8083 	beq.w	80083fc <TIM_Base_SetConfig+0x110>
 80082f6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80082fa:	d068      	beq.n	80083ce <TIM_Base_SetConfig+0xe2>
 80082fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008300:	4290      	cmp	r0, r2
 8008302:	f000 8096 	beq.w	8008432 <TIM_Base_SetConfig+0x146>
 8008306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800830a:	4290      	cmp	r0, r2
 800830c:	f000 808c 	beq.w	8008428 <TIM_Base_SetConfig+0x13c>
 8008310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008314:	4290      	cmp	r0, r2
 8008316:	d06c      	beq.n	80083f2 <TIM_Base_SetConfig+0x106>
 8008318:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800831c:	4290      	cmp	r0, r2
 800831e:	f000 808d 	beq.w	800843c <TIM_Base_SetConfig+0x150>
 8008322:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8008326:	4290      	cmp	r0, r2
 8008328:	f000 809a 	beq.w	8008460 <TIM_Base_SetConfig+0x174>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800832c:	4a50      	ldr	r2, [pc, #320]	; (8008470 <TIM_Base_SetConfig+0x184>)
 800832e:	4290      	cmp	r0, r2
 8008330:	d03f      	beq.n	80083b2 <TIM_Base_SetConfig+0xc6>
 8008332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008336:	4290      	cmp	r0, r2
 8008338:	d011      	beq.n	800835e <TIM_Base_SetConfig+0x72>
 800833a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800833e:	4290      	cmp	r0, r2
 8008340:	d029      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 8008342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008346:	4290      	cmp	r0, r2
 8008348:	d017      	beq.n	800837a <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800834a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800834e:	694a      	ldr	r2, [r1, #20]
 8008350:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008352:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008354:	688b      	ldr	r3, [r1, #8]
 8008356:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008358:	680b      	ldr	r3, [r1, #0]
 800835a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800835c:	e061      	b.n	8008422 <TIM_Base_SetConfig+0x136>
    tmpcr1 &= ~TIM_CR1_CKD;
 800835e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008362:	68ca      	ldr	r2, [r1, #12]
 8008364:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836a:	694a      	ldr	r2, [r1, #20]
 800836c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800836e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008370:	688b      	ldr	r3, [r1, #8]
 8008372:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008374:	680b      	ldr	r3, [r1, #0]
 8008376:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008378:	e051      	b.n	800841e <TIM_Base_SetConfig+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
 800837a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800837e:	68ca      	ldr	r2, [r1, #12]
 8008380:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008386:	694a      	ldr	r2, [r1, #20]
 8008388:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800838a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800838c:	688b      	ldr	r3, [r1, #8]
 800838e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008390:	680b      	ldr	r3, [r1, #0]
 8008392:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008394:	e043      	b.n	800841e <TIM_Base_SetConfig+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800839a:	68ca      	ldr	r2, [r1, #12]
 800839c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800839e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a2:	694a      	ldr	r2, [r1, #20]
 80083a4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80083a6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083a8:	688b      	ldr	r3, [r1, #8]
 80083aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80083ac:	680b      	ldr	r3, [r1, #0]
 80083ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083b0:	e035      	b.n	800841e <TIM_Base_SetConfig+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
 80083b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083b6:	68ca      	ldr	r2, [r1, #12]
 80083b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083be:	694a      	ldr	r2, [r1, #20]
 80083c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80083c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083c4:	688b      	ldr	r3, [r1, #8]
 80083c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80083c8:	680b      	ldr	r3, [r1, #0]
 80083ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083cc:	e027      	b.n	800841e <TIM_Base_SetConfig+0x132>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80083d2:	684a      	ldr	r2, [r1, #4]
 80083d4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80083d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083da:	68ca      	ldr	r2, [r1, #12]
 80083dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083e2:	694a      	ldr	r2, [r1, #20]
 80083e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80083e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e8:	688b      	ldr	r3, [r1, #8]
 80083ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80083ec:	680b      	ldr	r3, [r1, #0]
 80083ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f0:	e017      	b.n	8008422 <TIM_Base_SetConfig+0x136>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80083f6:	684a      	ldr	r2, [r1, #4]
 80083f8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083fa:	e7ec      	b.n	80083d6 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008400:	684a      	ldr	r2, [r1, #4]
 8008402:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008408:	68ca      	ldr	r2, [r1, #12]
 800840a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800840c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008410:	694a      	ldr	r2, [r1, #20]
 8008412:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008414:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008416:	688b      	ldr	r3, [r1, #8]
 8008418:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800841a:	680b      	ldr	r3, [r1, #0]
 800841c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800841e:	690b      	ldr	r3, [r1, #16]
 8008420:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008422:	2301      	movs	r3, #1
 8008424:	6143      	str	r3, [r0, #20]
}
 8008426:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800842c:	684a      	ldr	r2, [r1, #4]
 800842e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008430:	e7d1      	b.n	80083d6 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008436:	684a      	ldr	r2, [r1, #4]
 8008438:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800843a:	e7cc      	b.n	80083d6 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800843c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008440:	684a      	ldr	r2, [r1, #4]
 8008442:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008448:	68ca      	ldr	r2, [r1, #12]
 800844a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800844c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008450:	694a      	ldr	r2, [r1, #20]
 8008452:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008454:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008456:	688b      	ldr	r3, [r1, #8]
 8008458:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800845a:	680b      	ldr	r3, [r1, #0]
 800845c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800845e:	e7de      	b.n	800841e <TIM_Base_SetConfig+0x132>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008464:	684a      	ldr	r2, [r1, #4]
 8008466:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008468:	e760      	b.n	800832c <TIM_Base_SetConfig+0x40>
 800846a:	bf00      	nop
 800846c:	40012c00 	.word	0x40012c00
 8008470:	40014000 	.word	0x40014000

08008474 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008474:	b360      	cbz	r0, 80084d0 <HAL_TIM_Base_Init+0x5c>
{
 8008476:	b510      	push	{r4, lr}
 8008478:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800847a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800847e:	b313      	cbz	r3, 80084c6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008480:	2302      	movs	r3, #2
 8008482:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008486:	4621      	mov	r1, r4
 8008488:	f851 0b04 	ldr.w	r0, [r1], #4
 800848c:	f7ff ff2e 	bl	80082ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008490:	2301      	movs	r3, #1
 8008492:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008496:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800849a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800849e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80084a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80084a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80084b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80084ba:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80084be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80084c2:	2000      	movs	r0, #0
}
 80084c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80084c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80084ca:	f7fc f843 	bl	8004554 <HAL_TIM_Base_MspInit>
 80084ce:	e7d7      	b.n	8008480 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80084d0:	2001      	movs	r0, #1
}
 80084d2:	4770      	bx	lr

080084d4 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80084d4:	b360      	cbz	r0, 8008530 <HAL_TIM_OC_Init+0x5c>
{
 80084d6:	b510      	push	{r4, lr}
 80084d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80084da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80084de:	b313      	cbz	r3, 8008526 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	2302      	movs	r3, #2
 80084e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80084e6:	4621      	mov	r1, r4
 80084e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80084ec:	f7ff fefe 	bl	80082ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80084fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80084fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008502:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800850a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800850e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008516:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800851a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800851e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008522:	2000      	movs	r0, #0
}
 8008524:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008526:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800852a:	f7ff fdcb 	bl	80080c4 <HAL_TIM_OC_MspInit>
 800852e:	e7d7      	b.n	80084e0 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8008530:	2001      	movs	r0, #1
}
 8008532:	4770      	bx	lr

08008534 <TIM_OC2_SetConfig>:
{
 8008534:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008536:	6a03      	ldr	r3, [r0, #32]
 8008538:	f023 0310 	bic.w	r3, r3, #16
 800853c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800853e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008540:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008542:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008544:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008548:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800854c:	680c      	ldr	r4, [r1, #0]
 800854e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8008552:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008556:	688c      	ldr	r4, [r1, #8]
 8008558:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800855c:	4c1f      	ldr	r4, [pc, #124]	; (80085dc <TIM_OC2_SetConfig+0xa8>)
 800855e:	42a0      	cmp	r0, r4
 8008560:	d01e      	beq.n	80085a0 <TIM_OC2_SetConfig+0x6c>
 8008562:	4d1f      	ldr	r5, [pc, #124]	; (80085e0 <TIM_OC2_SetConfig+0xac>)
 8008564:	42a8      	cmp	r0, r5
 8008566:	d031      	beq.n	80085cc <TIM_OC2_SetConfig+0x98>
 8008568:	f504 5410 	add.w	r4, r4, #9216	; 0x2400
 800856c:	42a0      	cmp	r0, r4
 800856e:	d00f      	beq.n	8008590 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008570:	4c1c      	ldr	r4, [pc, #112]	; (80085e4 <TIM_OC2_SetConfig+0xb0>)
 8008572:	42a0      	cmp	r0, r4
 8008574:	d01b      	beq.n	80085ae <TIM_OC2_SetConfig+0x7a>
 8008576:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800857a:	42a0      	cmp	r0, r4
 800857c:	d017      	beq.n	80085ae <TIM_OC2_SetConfig+0x7a>
 800857e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008582:	42a0      	cmp	r0, r4
 8008584:	d013      	beq.n	80085ae <TIM_OC2_SetConfig+0x7a>
 8008586:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800858a:	42a0      	cmp	r0, r4
 800858c:	d117      	bne.n	80085be <TIM_OC2_SetConfig+0x8a>
 800858e:	e00e      	b.n	80085ae <TIM_OC2_SetConfig+0x7a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8008590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008594:	68cc      	ldr	r4, [r1, #12]
 8008596:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800859a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800859e:	e7e7      	b.n	8008570 <TIM_OC2_SetConfig+0x3c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a4:	68cc      	ldr	r4, [r1, #12]
 80085a6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80085aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085ae:	f426 6440 	bic.w	r4, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085b2:	694d      	ldr	r5, [r1, #20]
 80085b4:	698e      	ldr	r6, [r1, #24]
 80085b6:	ea45 0c06 	orr.w	ip, r5, r6
 80085ba:	ea44 068c 	orr.w	r6, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 80085be:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80085c0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80085c2:	684a      	ldr	r2, [r1, #4]
 80085c4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80085c6:	6203      	str	r3, [r0, #32]
}
 80085c8:	bc70      	pop	{r4, r5, r6}
 80085ca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80085cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085d0:	68cc      	ldr	r4, [r1, #12]
 80085d2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80085d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085da:	e7e8      	b.n	80085ae <TIM_OC2_SetConfig+0x7a>
 80085dc:	40012c00 	.word	0x40012c00
 80085e0:	40013400 	.word	0x40013400
 80085e4:	40014000 	.word	0x40014000

080085e8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80085e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d036      	beq.n	800865e <HAL_TIM_OC_ConfigChannel+0x76>
{
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80085f4:	2301      	movs	r3, #1
 80085f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80085fa:	2a14      	cmp	r2, #20
 80085fc:	d82a      	bhi.n	8008654 <HAL_TIM_OC_ConfigChannel+0x6c>
 80085fe:	e8df f002 	tbb	[pc, r2]
 8008602:	290b      	.short	0x290b
 8008604:	29102929 	.word	0x29102929
 8008608:	29152929 	.word	0x29152929
 800860c:	291a2929 	.word	0x291a2929
 8008610:	291f2929 	.word	0x291f2929
 8008614:	2929      	.short	0x2929
 8008616:	24          	.byte	0x24
 8008617:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008618:	6800      	ldr	r0, [r0, #0]
 800861a:	f7ff fb6f 	bl	8007cfc <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800861e:	2000      	movs	r0, #0
      break;
 8008620:	e019      	b.n	8008656 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008622:	6800      	ldr	r0, [r0, #0]
 8008624:	f7ff ff86 	bl	8008534 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008628:	2000      	movs	r0, #0
      break;
 800862a:	e014      	b.n	8008656 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800862c:	6800      	ldr	r0, [r0, #0]
 800862e:	f7ff fbc9 	bl	8007dc4 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008632:	2000      	movs	r0, #0
      break;
 8008634:	e00f      	b.n	8008656 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008636:	6800      	ldr	r0, [r0, #0]
 8008638:	f7ff fc1e 	bl	8007e78 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800863c:	2000      	movs	r0, #0
      break;
 800863e:	e00a      	b.n	8008656 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008640:	6800      	ldr	r0, [r0, #0]
 8008642:	f7ff fc73 	bl	8007f2c <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008646:	2000      	movs	r0, #0
      break;
 8008648:	e005      	b.n	8008656 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	f7ff fca6 	bl	8007f9c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008650:	2000      	movs	r0, #0
      break;
 8008652:	e000      	b.n	8008656 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 8008654:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008656:	2300      	movs	r3, #0
 8008658:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800865c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800865e:	2002      	movs	r0, #2
}
 8008660:	4770      	bx	lr

08008662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008662:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008664:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008666:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800866a:	430a      	orrs	r2, r1
 800866c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008670:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008674:	6082      	str	r2, [r0, #8]
}
 8008676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_TIM_ConfigClockSource>:
{
 800867c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800867e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008682:	2b01      	cmp	r3, #1
 8008684:	f000 80cf 	beq.w	8008826 <HAL_TIM_ConfigClockSource+0x1aa>
 8008688:	4604      	mov	r4, r0
 800868a:	2301      	movs	r3, #1
 800868c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	2302      	movs	r3, #2
 8008692:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008696:	6802      	ldr	r2, [r0, #0]
 8008698:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800869a:	4b64      	ldr	r3, [pc, #400]	; (800882c <HAL_TIM_ConfigClockSource+0x1b0>)
 800869c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800869e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80086a0:	6808      	ldr	r0, [r1, #0]
 80086a2:	2870      	cmp	r0, #112	; 0x70
 80086a4:	f000 8086 	beq.w	80087b4 <HAL_TIM_ConfigClockSource+0x138>
 80086a8:	d851      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0xd2>
 80086aa:	2850      	cmp	r0, #80	; 0x50
 80086ac:	f000 809c 	beq.w	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 80086b0:	d91f      	bls.n	80086f2 <HAL_TIM_ConfigClockSource+0x76>
 80086b2:	2860      	cmp	r0, #96	; 0x60
 80086b4:	d149      	bne.n	800874a <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	6848      	ldr	r0, [r1, #4]
 80086ba:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086bc:	6a1a      	ldr	r2, [r3, #32]
 80086be:	f022 0210 	bic.w	r2, r2, #16
 80086c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80086c6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086c8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086cc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d4:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80086d8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80086da:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086dc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80086de:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80086e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80086e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086e8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80086ec:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2000      	movs	r0, #0
}
 80086f0:	e043      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
  switch (sClockSourceConfig->ClockSource)
 80086f2:	2840      	cmp	r0, #64	; 0x40
 80086f4:	d11c      	bne.n	8008730 <HAL_TIM_ConfigClockSource+0xb4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	6848      	ldr	r0, [r1, #4]
 80086fa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80086fc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086fe:	6a1a      	ldr	r2, [r3, #32]
 8008700:	f022 0201 	bic.w	r2, r2, #1
 8008704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008706:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008708:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800870c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008710:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008714:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008718:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800871a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800871c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800871e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008726:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800872a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800872c:	2000      	movs	r0, #0
}
 800872e:	e024      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
  switch (sClockSourceConfig->ClockSource)
 8008730:	d877      	bhi.n	8008822 <HAL_TIM_ConfigClockSource+0x1a6>
 8008732:	2820      	cmp	r0, #32
 8008734:	d02b      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x112>
 8008736:	d903      	bls.n	8008740 <HAL_TIM_ConfigClockSource+0xc4>
 8008738:	2830      	cmp	r0, #48	; 0x30
 800873a:	d028      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x112>
 800873c:	2001      	movs	r0, #1
 800873e:	e01c      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
 8008740:	f030 0310 	bics.w	r3, r0, #16
 8008744:	d023      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x112>
 8008746:	2001      	movs	r0, #1
 8008748:	e017      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
 800874a:	2001      	movs	r0, #1
 800874c:	e015      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
 800874e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008752:	d03c      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0x152>
 8008754:	d90d      	bls.n	8008772 <HAL_TIM_ConfigClockSource+0xf6>
 8008756:	4a36      	ldr	r2, [pc, #216]	; (8008830 <HAL_TIM_ConfigClockSource+0x1b4>)
 8008758:	4290      	cmp	r0, r2
 800875a:	d018      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x112>
 800875c:	d914      	bls.n	8008788 <HAL_TIM_ConfigClockSource+0x10c>
 800875e:	4a35      	ldr	r2, [pc, #212]	; (8008834 <HAL_TIM_ConfigClockSource+0x1b8>)
 8008760:	4290      	cmp	r0, r2
 8008762:	d014      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x112>
 8008764:	f020 0110 	bic.w	r1, r0, #16
 8008768:	3a30      	subs	r2, #48	; 0x30
 800876a:	4291      	cmp	r1, r2
 800876c:	d00f      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x112>
 800876e:	2001      	movs	r0, #1
 8008770:	e003      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
  HAL_StatusTypeDef status = HAL_OK;
 8008772:	f5b0 5080 	subs.w	r0, r0, #4096	; 0x1000
 8008776:	bf18      	it	ne
 8008778:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800877a:	2301      	movs	r3, #1
 800877c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008780:	2300      	movs	r3, #0
 8008782:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008786:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8008788:	3a10      	subs	r2, #16
 800878a:	4290      	cmp	r0, r2
 800878c:	d10b      	bne.n	80087a6 <HAL_TIM_ConfigClockSource+0x12a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800878e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008790:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008792:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800879a:	4302      	orrs	r2, r0
 800879c:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 80087a0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80087a2:	2000      	movs	r0, #0
}
 80087a4:	e7e9      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
  switch (sClockSourceConfig->ClockSource)
 80087a6:	f020 0210 	bic.w	r2, r0, #16
 80087aa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80087ae:	d0ee      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x112>
 80087b0:	2001      	movs	r0, #1
 80087b2:	e7e2      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 80087b4:	68cb      	ldr	r3, [r1, #12]
 80087b6:	684a      	ldr	r2, [r1, #4]
 80087b8:	6889      	ldr	r1, [r1, #8]
 80087ba:	6820      	ldr	r0, [r4, #0]
 80087bc:	f7ff ff51 	bl	8008662 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80087c8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80087ca:	2000      	movs	r0, #0
      break;
 80087cc:	e7d5      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 80087ce:	68cb      	ldr	r3, [r1, #12]
 80087d0:	684a      	ldr	r2, [r1, #4]
 80087d2:	6889      	ldr	r1, [r1, #8]
 80087d4:	6820      	ldr	r0, [r4, #0]
 80087d6:	f7ff ff44 	bl	8008662 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	6893      	ldr	r3, [r2, #8]
 80087de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087e2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80087e4:	2000      	movs	r0, #0
      break;
 80087e6:	e7c8      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	6848      	ldr	r0, [r1, #4]
 80087ec:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80087ee:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087f0:	6a1a      	ldr	r2, [r3, #32]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008802:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008806:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800880a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800880c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800880e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008810:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008818:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800881c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800881e:	2000      	movs	r0, #0
}
 8008820:	e7ab      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
  switch (sClockSourceConfig->ClockSource)
 8008822:	2001      	movs	r0, #1
 8008824:	e7a9      	b.n	800877a <HAL_TIM_ConfigClockSource+0xfe>
  __HAL_LOCK(htim);
 8008826:	2002      	movs	r0, #2
 8008828:	e7ad      	b.n	8008786 <HAL_TIM_ConfigClockSource+0x10a>
 800882a:	bf00      	nop
 800882c:	ffce0088 	.word	0xffce0088
 8008830:	00100030 	.word	0x00100030
 8008834:	00100070 	.word	0x00100070

08008838 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008838:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800883c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800883e:	f04f 0c01 	mov.w	ip, #1
 8008842:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8008846:	ea23 030c 	bic.w	r3, r3, ip
 800884a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800884c:	6a03      	ldr	r3, [r0, #32]
 800884e:	408a      	lsls	r2, r1
 8008850:	431a      	orrs	r2, r3
 8008852:	6202      	str	r2, [r0, #32]
}
 8008854:	4770      	bx	lr
	...

08008858 <HAL_TIM_OnePulse_Start_IT>:
{
 8008858:	b510      	push	{r4, lr}
 800885a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800885c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8008860:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008862:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008866:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800886a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800886e:	2801      	cmp	r0, #1
 8008870:	d147      	bne.n	8008902 <HAL_TIM_OnePulse_Start_IT+0xaa>
 8008872:	b2db      	uxtb	r3, r3
 8008874:	b2d2      	uxtb	r2, r2
 8008876:	b2c9      	uxtb	r1, r1
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008878:	2b01      	cmp	r3, #1
 800887a:	d143      	bne.n	8008904 <HAL_TIM_OnePulse_Start_IT+0xac>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800887c:	2a01      	cmp	r2, #1
 800887e:	d142      	bne.n	8008906 <HAL_TIM_OnePulse_Start_IT+0xae>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008880:	2901      	cmp	r1, #1
 8008882:	d001      	beq.n	8008888 <HAL_TIM_OnePulse_Start_IT+0x30>
    return HAL_ERROR;
 8008884:	4610      	mov	r0, r2
 8008886:	e03d      	b.n	8008904 <HAL_TIM_OnePulse_Start_IT+0xac>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008888:	2302      	movs	r3, #2
 800888a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800888e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008892:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	68d3      	ldr	r3, [r2, #12]
 800889e:	f043 0302 	orr.w	r3, r3, #2
 80088a2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80088a4:	6822      	ldr	r2, [r4, #0]
 80088a6:	68d3      	ldr	r3, [r2, #12]
 80088a8:	f043 0304 	orr.w	r3, r3, #4
 80088ac:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088ae:	2201      	movs	r2, #1
 80088b0:	2100      	movs	r1, #0
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	f7ff ffc0 	bl	8008838 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088b8:	2201      	movs	r2, #1
 80088ba:	2104      	movs	r1, #4
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	f7ff ffbb 	bl	8008838 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	4a11      	ldr	r2, [pc, #68]	; (800890c <HAL_TIM_OnePulse_Start_IT+0xb4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d015      	beq.n	80088f6 <HAL_TIM_OnePulse_Start_IT+0x9e>
 80088ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d011      	beq.n	80088f6 <HAL_TIM_OnePulse_Start_IT+0x9e>
 80088d2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00d      	beq.n	80088f6 <HAL_TIM_OnePulse_Start_IT+0x9e>
 80088da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088de:	4293      	cmp	r3, r2
 80088e0:	d009      	beq.n	80088f6 <HAL_TIM_OnePulse_Start_IT+0x9e>
 80088e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d005      	beq.n	80088f6 <HAL_TIM_OnePulse_Start_IT+0x9e>
 80088ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d001      	beq.n	80088f6 <HAL_TIM_OnePulse_Start_IT+0x9e>
  return HAL_OK;
 80088f2:	2000      	movs	r0, #0
 80088f4:	e006      	b.n	8008904 <HAL_TIM_OnePulse_Start_IT+0xac>
    __HAL_TIM_MOE_ENABLE(htim);
 80088f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088fc:	645a      	str	r2, [r3, #68]	; 0x44
  return HAL_OK;
 80088fe:	2000      	movs	r0, #0
 8008900:	e000      	b.n	8008904 <HAL_TIM_OnePulse_Start_IT+0xac>
    return HAL_ERROR;
 8008902:	2001      	movs	r0, #1
}
 8008904:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008906:	4618      	mov	r0, r3
 8008908:	e7fc      	b.n	8008904 <HAL_TIM_OnePulse_Start_IT+0xac>
 800890a:	bf00      	nop
 800890c:	40012c00 	.word	0x40012c00

08008910 <HAL_TIM_OnePulse_Stop_IT>:
{
 8008910:	b510      	push	{r4, lr}
 8008912:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008914:	6802      	ldr	r2, [r0, #0]
 8008916:	68d3      	ldr	r3, [r2, #12]
 8008918:	f023 0302 	bic.w	r3, r3, #2
 800891c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800891e:	6802      	ldr	r2, [r0, #0]
 8008920:	68d3      	ldr	r3, [r2, #12]
 8008922:	f023 0304 	bic.w	r3, r3, #4
 8008926:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008928:	2200      	movs	r2, #0
 800892a:	4611      	mov	r1, r2
 800892c:	6800      	ldr	r0, [r0, #0]
 800892e:	f7ff ff83 	bl	8008838 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008932:	2200      	movs	r2, #0
 8008934:	2104      	movs	r1, #4
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	f7ff ff7e 	bl	8008838 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	4a1f      	ldr	r2, [pc, #124]	; (80089bc <HAL_TIM_OnePulse_Stop_IT+0xac>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <HAL_TIM_OnePulse_Stop_IT+0x5c>
 8008944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008948:	4293      	cmp	r3, r2
 800894a:	d00f      	beq.n	800896c <HAL_TIM_OnePulse_Stop_IT+0x5c>
 800894c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008950:	4293      	cmp	r3, r2
 8008952:	d00b      	beq.n	800896c <HAL_TIM_OnePulse_Stop_IT+0x5c>
 8008954:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008958:	4293      	cmp	r3, r2
 800895a:	d007      	beq.n	800896c <HAL_TIM_OnePulse_Stop_IT+0x5c>
 800895c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008960:	4293      	cmp	r3, r2
 8008962:	d003      	beq.n	800896c <HAL_TIM_OnePulse_Stop_IT+0x5c>
 8008964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008968:	4293      	cmp	r3, r2
 800896a:	d10d      	bne.n	8008988 <HAL_TIM_OnePulse_Stop_IT+0x78>
    __HAL_TIM_MOE_DISABLE(htim);
 800896c:	6a19      	ldr	r1, [r3, #32]
 800896e:	f241 1211 	movw	r2, #4369	; 0x1111
 8008972:	4211      	tst	r1, r2
 8008974:	d108      	bne.n	8008988 <HAL_TIM_OnePulse_Stop_IT+0x78>
 8008976:	6a19      	ldr	r1, [r3, #32]
 8008978:	f244 4244 	movw	r2, #17476	; 0x4444
 800897c:	4211      	tst	r1, r2
 800897e:	d103      	bne.n	8008988 <HAL_TIM_OnePulse_Stop_IT+0x78>
 8008980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008986:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	6a19      	ldr	r1, [r3, #32]
 800898c:	f241 1211 	movw	r2, #4369	; 0x1111
 8008990:	4211      	tst	r1, r2
 8008992:	d108      	bne.n	80089a6 <HAL_TIM_OnePulse_Stop_IT+0x96>
 8008994:	6a19      	ldr	r1, [r3, #32]
 8008996:	f244 4244 	movw	r2, #17476	; 0x4444
 800899a:	4211      	tst	r1, r2
 800899c:	d103      	bne.n	80089a6 <HAL_TIM_OnePulse_Stop_IT+0x96>
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	f022 0201 	bic.w	r2, r2, #1
 80089a4:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089a6:	2301      	movs	r3, #1
 80089a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80089b8:	2000      	movs	r0, #0
 80089ba:	bd10      	pop	{r4, pc}
 80089bc:	40012c00 	.word	0x40012c00

080089c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d04c      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 80089c8:	b430      	push	{r4, r5}
 80089ca:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80089cc:	2301      	movs	r3, #1
 80089ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d2:	2302      	movs	r3, #2
 80089d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089d8:	6800      	ldr	r0, [r0, #0]
 80089da:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089dc:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089de:	4d22      	ldr	r5, [pc, #136]	; (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80089e0:	42a8      	cmp	r0, r5
 80089e2:	d007      	beq.n	80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80089e4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80089e8:	42a8      	cmp	r0, r5
 80089ea:	d003      	beq.n	80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80089ec:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80089f0:	42a8      	cmp	r0, r5
 80089f2:	d103      	bne.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089f8:	684d      	ldr	r5, [r1, #4]
 80089fa:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a04:	680d      	ldr	r5, [r1, #0]
 8008a06:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a08:	6043      	str	r3, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	4816      	ldr	r0, [pc, #88]	; (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008a0e:	4283      	cmp	r3, r0
 8008a10:	d01a      	beq.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d017      	beq.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a18:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8008a1c:	4283      	cmp	r3, r0
 8008a1e:	d013      	beq.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a20:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008a24:	4283      	cmp	r3, r0
 8008a26:	d00f      	beq.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a28:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008a2c:	4283      	cmp	r3, r0
 8008a2e:	d00b      	beq.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a30:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 8008a34:	4283      	cmp	r3, r0
 8008a36:	d007      	beq.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a38:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8008a3c:	4283      	cmp	r3, r0
 8008a3e:	d003      	beq.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8008a40:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8008a44:	4283      	cmp	r3, r0
 8008a46:	d104      	bne.n	8008a52 <HAL_TIMEx_MasterConfigSynchronization+0x92>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a4c:	6889      	ldr	r1, [r1, #8]
 8008a4e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a50:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a52:	2301      	movs	r3, #1
 8008a54:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8008a5e:	bc30      	pop	{r4, r5}
 8008a60:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008a62:	2002      	movs	r0, #2
}
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40012c00 	.word	0x40012c00

08008a6c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a6c:	4770      	bx	lr

08008a6e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a6e:	4770      	bx	lr

08008a70 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a70:	4770      	bx	lr

08008a72 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a72:	4770      	bx	lr

08008a74 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008a74:	4770      	bx	lr

08008a76 <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008a76:	4770      	bx	lr

08008a78 <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008a78:	4770      	bx	lr
	...

08008a7c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008a7c:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008a7e:	680a      	ldr	r2, [r1, #0]
 8008a80:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008a8c:	688c      	ldr	r4, [r1, #8]
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008a8e:	680a      	ldr	r2, [r1, #0]
 8008a90:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8008a94:	684b      	ldr	r3, [r1, #4]
 8008a96:	4323      	orrs	r3, r4
 8008a98:	68ce      	ldr	r6, [r1, #12]
 8008a9a:	4333      	orrs	r3, r6
 8008a9c:	690e      	ldr	r6, [r1, #16]
 8008a9e:	4333      	orrs	r3, r6
 8008aa0:	694e      	ldr	r6, [r1, #20]
 8008aa2:	4333      	orrs	r3, r6
 8008aa4:	698e      	ldr	r6, [r1, #24]
 8008aa6:	4333      	orrs	r3, r6
 8008aa8:	69ce      	ldr	r6, [r1, #28]
 8008aaa:	4333      	orrs	r3, r6
 8008aac:	6a0e      	ldr	r6, [r1, #32]
 8008aae:	4333      	orrs	r3, r6
 8008ab0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8008ab2:	4333      	orrs	r3, r6
 8008ab4:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8008ab6:	4333      	orrs	r3, r6
 8008ab8:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8008aba:	4333      	orrs	r3, r6
 8008abc:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8008abe:	4333      	orrs	r3, r6
 8008ac0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8008ac2:	4333      	orrs	r3, r6
 8008ac4:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8008ac6:	4333      	orrs	r3, r6
 8008ac8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8008aca:	4333      	orrs	r3, r6
 8008acc:	4e21      	ldr	r6, [pc, #132]	; (8008b54 <FMC_NORSRAM_Init+0xd8>)
 8008ace:	402e      	ands	r6, r5
 8008ad0:	4333      	orrs	r3, r6
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008ad2:	2c08      	cmp	r4, #8
 8008ad4:	bf14      	ite	ne
 8008ad6:	2400      	movne	r4, #0
 8008ad8:	2401      	moveq	r4, #1
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008ada:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8008ade:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008ae2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ae8:	d00c      	beq.n	8008b04 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008aea:	680b      	ldr	r3, [r1, #0]
 8008aec:	b11b      	cbz	r3, 8008af6 <FMC_NORSRAM_Init+0x7a>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008aee:	6803      	ldr	r3, [r0, #0]
 8008af0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008af2:	4313      	orrs	r3, r2
 8008af4:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8008af6:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d00a      	beq.n	8008b14 <FMC_NORSRAM_Init+0x98>
        break;
    }
  }

  return HAL_OK;
}
 8008afe:	2000      	movs	r0, #0
 8008b00:	bc70      	pop	{r4, r5, r6}
 8008b02:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008b04:	680b      	ldr	r3, [r1, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f5      	beq.n	8008af6 <FMC_NORSRAM_Init+0x7a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008b0a:	6803      	ldr	r3, [r0, #0]
 8008b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b10:	6003      	str	r3, [r0, #0]
 8008b12:	e7ea      	b.n	8008aea <FMC_NORSRAM_Init+0x6e>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8008b14:	6a03      	ldr	r3, [r0, #32]
 8008b16:	0c1b      	lsrs	r3, r3, #16
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 8008b20:	680b      	ldr	r3, [r1, #0]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d00c      	beq.n	8008b40 <FMC_NORSRAM_Init+0xc4>
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d00f      	beq.n	8008b4a <FMC_NORSRAM_Init+0xce>
 8008b2a:	b123      	cbz	r3, 8008b36 <FMC_NORSRAM_Init+0xba>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8008b2c:	6a03      	ldr	r3, [r0, #32]
 8008b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b32:	6203      	str	r3, [r0, #32]
        break;
 8008b34:	e7e3      	b.n	8008afe <FMC_NORSRAM_Init+0x82>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8008b36:	6a03      	ldr	r3, [r0, #32]
 8008b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b3c:	6203      	str	r3, [r0, #32]
        break;
 8008b3e:	e7de      	b.n	8008afe <FMC_NORSRAM_Init+0x82>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8008b40:	6a03      	ldr	r3, [r0, #32]
 8008b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b46:	6203      	str	r3, [r0, #32]
        break;
 8008b48:	e7d9      	b.n	8008afe <FMC_NORSRAM_Init+0x82>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8008b4a:	6a03      	ldr	r3, [r0, #32]
 8008b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b50:	6203      	str	r3, [r0, #32]
        break;
 8008b52:	e7d4      	b.n	8008afe <FMC_NORSRAM_Init+0x82>
 8008b54:	ff000480 	.word	0xff000480

08008b58 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b58:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008b5a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008b5e:	6853      	ldr	r3, [r2, #4]
 8008b60:	680b      	ldr	r3, [r1, #0]
 8008b62:	69cc      	ldr	r4, [r1, #28]
 8008b64:	4323      	orrs	r3, r4
 8008b66:	684c      	ldr	r4, [r1, #4]
 8008b68:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008b6c:	688c      	ldr	r4, [r1, #8]
 8008b6e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008b72:	68cc      	ldr	r4, [r1, #12]
 8008b74:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 8008b78:	690c      	ldr	r4, [r1, #16]
 8008b7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008b7e:	694c      	ldr	r4, [r1, #20]
 8008b80:	f104 3cff 	add.w	ip, r4, #4294967295
 8008b84:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8008b88:	698c      	ldr	r4, [r1, #24]
 8008b8a:	f1a4 0c02 	sub.w	ip, r4, #2
 8008b8e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8008b92:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008b94:	6803      	ldr	r3, [r0, #0]
 8008b96:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008b9a:	d00b      	beq.n	8008bb4 <FMC_NORSRAM_Timing_Init+0x5c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8008b9c:	6843      	ldr	r3, [r0, #4]
 8008b9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008ba2:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008ba4:	6949      	ldr	r1, [r1, #20]
 8008ba6:	3901      	subs	r1, #1
 8008ba8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008bac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bc0:	d005      	beq.n	8008bce <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008bc2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008bc6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8008bca:	2000      	movs	r0, #0
 8008bcc:	4770      	bx	lr
{
 8008bce:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008bd0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8008bd4:	680b      	ldr	r3, [r1, #0]
 8008bd6:	69cd      	ldr	r5, [r1, #28]
 8008bd8:	432b      	orrs	r3, r5
 8008bda:	684d      	ldr	r5, [r1, #4]
 8008bdc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8008be0:	688d      	ldr	r5, [r1, #8]
 8008be2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8008be6:	68cd      	ldr	r5, [r1, #12]
 8008be8:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
 8008bec:	6909      	ldr	r1, [r1, #16]
 8008bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf2:	f004 617f 	and.w	r1, r4, #267386880	; 0xff00000
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	bc30      	pop	{r4, r5}
 8008c00:	4770      	bx	lr

08008c02 <setpixel>:

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

void setpixel(const tFramebuf *fb, unsigned int x, unsigned int y, uint32_t col) {
	((uint16_t *)fb->buf)[x + y * fb->stride] = col;
 8008c02:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8008c06:	fb02 110c 	mla	r1, r2, ip, r1
 8008c0a:	6802      	ldr	r2, [r0, #0]
 8008c0c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 8008c10:	4770      	bx	lr

08008c12 <setpixel_checked>:

void setpixel_checked(const tFramebuf *fb, int x, int y, int col, int mask) {
 8008c12:	b510      	push	{r4, lr}
    if (mask && 0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 8008c14:	9c02      	ldr	r4, [sp, #8]
 8008c16:	b15c      	cbz	r4, 8008c30 <setpixel_checked+0x1e>
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	db09      	blt.n	8008c30 <setpixel_checked+0x1e>
 8008c1c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8008c20:	458c      	cmp	ip, r1
 8008c22:	dd05      	ble.n	8008c30 <setpixel_checked+0x1e>
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	db03      	blt.n	8008c30 <setpixel_checked+0x1e>
 8008c28:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8008c2c:	4594      	cmp	ip, r2
 8008c2e:	dc00      	bgt.n	8008c32 <setpixel_checked+0x20>
        setpixel(fb, x, y, col);
    }
}
 8008c30:	bd10      	pop	{r4, pc}
        setpixel(fb, x, y, col);
 8008c32:	f7ff ffe6 	bl	8008c02 <setpixel>
}
 8008c36:	e7fb      	b.n	8008c30 <setpixel_checked+0x1e>

08008c38 <fill_rect>:

uint32_t getpixel(const tFramebuf *fb, unsigned int x, unsigned int y) {
	return ((uint16_t *)fb->buf)[x + y * fb->stride];
}

void fill_rect(const tFramebuf *fb, int x, int y, int w, int h, uint32_t col) {
 8008c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3a:	9d05      	ldr	r5, [sp, #20]
 8008c3c:	9c06      	ldr	r4, [sp, #24]
    if (h < 1 || w < 1 || x + w <= 0 || y + h <= 0 || y >= fb->height || x >= fb->width) {
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	dd39      	ble.n	8008cb6 <fill_rect+0x7e>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dd37      	ble.n	8008cb6 <fill_rect+0x7e>
 8008c46:	440b      	add	r3, r1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dd34      	ble.n	8008cb6 <fill_rect+0x7e>
 8008c4c:	4415      	add	r5, r2
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	dd31      	ble.n	8008cb6 <fill_rect+0x7e>
 8008c52:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8008c56:	4594      	cmp	ip, r2
 8008c58:	dd2d      	ble.n	8008cb6 <fill_rect+0x7e>
 8008c5a:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 8008c5e:	458e      	cmp	lr, r1
 8008c60:	dd29      	ble.n	8008cb6 <fill_rect+0x7e>
    }

    // clip to the framebuffer
    int xend = MIN(fb->width, x + w);
    int yend = MIN(fb->height, y + h);
    x = MAX(x, 0);
 8008c62:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    y = MAX(y, 0);
 8008c66:	ea22 72e2 	bic.w	r2, r2, r2, asr #31

    w = xend - x;
 8008c6a:	4573      	cmp	r3, lr
 8008c6c:	bfd4      	ite	le
 8008c6e:	ebc1 0603 	rsble	r6, r1, r3
 8008c72:	ebc1 060e 	rsbgt	r6, r1, lr
    h = yend - y;
 8008c76:	4565      	cmp	r5, ip
 8008c78:	bfd4      	ite	le
 8008c7a:	ebc2 0705 	rsble	r7, r2, r5
 8008c7e:	ebc2 070c 	rsbgt	r7, r2, ip
    uint16_t *b = &((uint16_t *)fb->buf)[x + y * fb->stride];
 8008c82:	8903      	ldrh	r3, [r0, #8]
 8008c84:	fb02 1303 	mla	r3, r2, r3, r1
 8008c88:	6801      	ldr	r1, [r0, #0]
 8008c8a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    while (h--){
 8008c8e:	1e7d      	subs	r5, r7, #1
 8008c90:	b18f      	cbz	r7, 8008cb6 <fill_rect+0x7e>
 8008c92:	ea4f 0c46 	mov.w	ip, r6, lsl #1
    	for (unsigned int ww = w; ww; --ww) {
 8008c96:	b136      	cbz	r6, 8008ca6 <fill_rect+0x6e>
 8008c98:	4633      	mov	r3, r6
 8008c9a:	460a      	mov	r2, r1
            *b++ = col;
 8008c9c:	f822 4b02 	strh.w	r4, [r2], #2
    	for (unsigned int ww = w; ww; --ww) {
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	d1fb      	bne.n	8008c9c <fill_rect+0x64>
            *b++ = col;
 8008ca4:	4461      	add	r1, ip
        }
        b += fb->stride - w;
 8008ca6:	8903      	ldrh	r3, [r0, #8]
 8008ca8:	1b9b      	subs	r3, r3, r6
 8008caa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    while (h--){
 8008cae:	3d01      	subs	r5, #1
 8008cb0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008cb4:	d1ef      	bne.n	8008c96 <fill_rect+0x5e>
    }
}
 8008cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cb8 <framebuf_init>:

void framebuf_init(tFramebuf *fb, uint16_t width, uint16_t height, char *buf ) {
    fb->width = width;
 8008cb8:	8081      	strh	r1, [r0, #4]
    fb->height = height;
 8008cba:	80c2      	strh	r2, [r0, #6]
	fb->buf = buf;
 8008cbc:	6003      	str	r3, [r0, #0]
	fb->stride = fb->width;
 8008cbe:	8101      	strh	r1, [r0, #8]
}
 8008cc0:	4770      	bx	lr

08008cc2 <framebuf_fill>:

void framebuf_fill( const tFramebuf *fb, uint32_t col ) {
 8008cc2:	b500      	push	{lr}
 8008cc4:	b083      	sub	sp, #12
    fill_rect( fb, 0, 0, fb->width, fb->height, col);
 8008cc6:	9101      	str	r1, [sp, #4]
 8008cc8:	88c2      	ldrh	r2, [r0, #6]
 8008cca:	9200      	str	r2, [sp, #0]
 8008ccc:	8883      	ldrh	r3, [r0, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	f7ff ffb1 	bl	8008c38 <fill_rect>
}
 8008cd6:	b003      	add	sp, #12
 8008cd8:	f85d fb04 	ldr.w	pc, [sp], #4

08008cdc <framebuf_fill_rect>:

void framebuf_fill_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	b082      	sub	sp, #8
    fill_rect( fb, x, y, w, h, col );
 8008ce0:	9c05      	ldr	r4, [sp, #20]
 8008ce2:	9401      	str	r4, [sp, #4]
 8008ce4:	9c04      	ldr	r4, [sp, #16]
 8008ce6:	9400      	str	r4, [sp, #0]
 8008ce8:	f7ff ffa6 	bl	8008c38 <fill_rect>
}
 8008cec:	b002      	add	sp, #8
 8008cee:	bd10      	pop	{r4, pc}

08008cf0 <framebuf_pixel>:

void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
    if (0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	db09      	blt.n	8008d08 <framebuf_pixel+0x18>
 8008cf4:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8008cf8:	458c      	cmp	ip, r1
 8008cfa:	dd05      	ble.n	8008d08 <framebuf_pixel+0x18>
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	db03      	blt.n	8008d08 <framebuf_pixel+0x18>
 8008d00:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8008d04:	4594      	cmp	ip, r2
 8008d06:	dc00      	bgt.n	8008d0a <framebuf_pixel+0x1a>
 8008d08:	4770      	bx	lr
void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
 8008d0a:	b508      	push	{r3, lr}
		setpixel( fb, x, y,  col );
 8008d0c:	f7ff ff79 	bl	8008c02 <setpixel>
    }
}
 8008d10:	bd08      	pop	{r3, pc}

08008d12 <framebuf_hline>:

void framebuf_hline( const tFramebuf *fb, int x, int y, int w, uint32_t col ) {
 8008d12:	b510      	push	{r4, lr}
 8008d14:	b082      	sub	sp, #8
	fill_rect( fb, x, y, w, 1, col );
 8008d16:	9c04      	ldr	r4, [sp, #16]
 8008d18:	9401      	str	r4, [sp, #4]
 8008d1a:	2401      	movs	r4, #1
 8008d1c:	9400      	str	r4, [sp, #0]
 8008d1e:	f7ff ff8b 	bl	8008c38 <fill_rect>
}
 8008d22:	b002      	add	sp, #8
 8008d24:	bd10      	pop	{r4, pc}

08008d26 <framebuf_vline>:

void framebuf_vline( const tFramebuf *fb, int x, int y, int h, uint32_t col ) {
 8008d26:	b510      	push	{r4, lr}
 8008d28:	b082      	sub	sp, #8
	fill_rect( fb, x, y, 1, h, col );
 8008d2a:	9c04      	ldr	r4, [sp, #16]
 8008d2c:	9401      	str	r4, [sp, #4]
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	2301      	movs	r3, #1
 8008d32:	f7ff ff81 	bl	8008c38 <fill_rect>
}
 8008d36:	b002      	add	sp, #8
 8008d38:	bd10      	pop	{r4, pc}

08008d3a <line>:
	fill_rect( fb, x, y + h - 1, w, 1, col );
	fill_rect( fb, x, y, 1, h, col );
	fill_rect( fb, x + w - 1, y, 1, h, col );
}

void line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 8008d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	9002      	str	r0, [sp, #8]
 8008d42:	4688      	mov	r8, r1
 8008d44:	4615      	mov	r5, r2
 8008d46:	9303      	str	r3, [sp, #12]
	int dx = x2 - x1;
 8008d48:	eba3 0a01 	sub.w	sl, r3, r1
	int sx;
    if (dx > 0) {
 8008d4c:	f1ba 0f00 	cmp.w	sl, #0
        sx = 1;
    } else {
        dx = -dx;
 8008d50:	bfda      	itte	le
 8008d52:	eba1 0a03 	suble.w	sl, r1, r3
        sx = -1;
 8008d56:	f04f 33ff 	movle.w	r3, #4294967295
        sx = 1;
 8008d5a:	2301      	movgt	r3, #1
 8008d5c:	9300      	str	r3, [sp, #0]
    }

    int dy = y2 - y1;
 8008d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d60:	1a9b      	subs	r3, r3, r2
    int sy;
    if (dy > 0) {
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	dd0e      	ble.n	8008d84 <line+0x4a>
        dy = -dy;
        sy = -1;
    }

    int steep;
    if (dy > dx) {
 8008d66:	459a      	cmp	sl, r3
 8008d68:	da6b      	bge.n	8008e42 <line+0x108>
        steep = 1;
    } else {
        steep = 0;
    }

    int e = 2 * dy - dx;
 8008d6a:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8008d6e:	ebc3 044a 	rsb	r4, r3, sl, lsl #1
        sy = temp;
 8008d72:	9f00      	ldr	r7, [sp, #0]
    int dy = y2 - y1;
 8008d74:	469a      	mov	sl, r3
    int e = 2 * dy - dx;
 8008d76:	4643      	mov	r3, r8
        x1 = y1;
 8008d78:	46a8      	mov	r8, r5
        y1 = temp;
 8008d7a:	461d      	mov	r5, r3
        steep = 1;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	9300      	str	r3, [sp, #0]
        sy = 1;
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	e068      	b.n	8008e56 <line+0x11c>
        dy = -dy;
 8008d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d86:	1ad3      	subs	r3, r2, r3
    if (dy > dx) {
 8008d88:	459a      	cmp	sl, r3
 8008d8a:	db02      	blt.n	8008d92 <line+0x58>
        sy = -1;
 8008d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d90:	e058      	b.n	8008e44 <line+0x10a>
        sy = temp;
 8008d92:	9f00      	ldr	r7, [sp, #0]
 8008d94:	4652      	mov	r2, sl
        dy = -dy;
 8008d96:	469a      	mov	sl, r3
        dy = temp;
 8008d98:	4613      	mov	r3, r2
        x1 = y1;
 8008d9a:	46a8      	mov	r8, r5
        y1 = temp;
 8008d9c:	460d      	mov	r5, r1
        steep = 1;
 8008d9e:	2201      	movs	r2, #1
 8008da0:	9201      	str	r2, [sp, #4]
        sy = -1;
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295
 8008da6:	9200      	str	r2, [sp, #0]
 8008da8:	e04e      	b.n	8008e48 <line+0x10e>
        if (steep) {
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
                setpixel(fb, y1, x1, col);
            }
        } else {
            if (0 <= x1 && x1 < fb->width && 0 <= y1 && y1 < fb->height) {
 8008daa:	f1b8 0f00 	cmp.w	r8, #0
 8008dae:	db08      	blt.n	8008dc2 <line+0x88>
 8008db0:	9a02      	ldr	r2, [sp, #8]
 8008db2:	8893      	ldrh	r3, [r2, #4]
 8008db4:	4543      	cmp	r3, r8
 8008db6:	dd04      	ble.n	8008dc2 <line+0x88>
 8008db8:	2d00      	cmp	r5, #0
 8008dba:	db02      	blt.n	8008dc2 <line+0x88>
 8008dbc:	88d3      	ldrh	r3, [r2, #6]
 8008dbe:	42ab      	cmp	r3, r5
 8008dc0:	dc21      	bgt.n	8008e06 <line+0xcc>
                setpixel(fb, x1, y1, col);
            }
        }
        while (e >= 0) {
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	db02      	blt.n	8008dcc <line+0x92>
            y1 += sy;
 8008dc6:	443d      	add	r5, r7
        while (e >= 0) {
 8008dc8:	1ba4      	subs	r4, r4, r6
 8008dca:	d5fc      	bpl.n	8008dc6 <line+0x8c>
            e -= 2 * dx;
        }
        x1 += sx;
 8008dcc:	9b00      	ldr	r3, [sp, #0]
 8008dce:	4498      	add	r8, r3
        e += 2 * dy;
 8008dd0:	445c      	add	r4, fp
    for (int i = 0; i < dx; ++i) {
 8008dd2:	f109 0901 	add.w	r9, r9, #1
 8008dd6:	45d1      	cmp	r9, sl
 8008dd8:	d01c      	beq.n	8008e14 <line+0xda>
        if (steep) {
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0e4      	beq.n	8008daa <line+0x70>
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	dbee      	blt.n	8008dc2 <line+0x88>
 8008de4:	9a02      	ldr	r2, [sp, #8]
 8008de6:	8893      	ldrh	r3, [r2, #4]
 8008de8:	42ab      	cmp	r3, r5
 8008dea:	ddea      	ble.n	8008dc2 <line+0x88>
 8008dec:	f1b8 0f00 	cmp.w	r8, #0
 8008df0:	dbe7      	blt.n	8008dc2 <line+0x88>
 8008df2:	88d3      	ldrh	r3, [r2, #6]
 8008df4:	4543      	cmp	r3, r8
 8008df6:	dde4      	ble.n	8008dc2 <line+0x88>
                setpixel(fb, y1, x1, col);
 8008df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	9802      	ldr	r0, [sp, #8]
 8008e00:	f7ff feff 	bl	8008c02 <setpixel>
 8008e04:	e7dd      	b.n	8008dc2 <line+0x88>
                setpixel(fb, x1, y1, col);
 8008e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	9802      	ldr	r0, [sp, #8]
 8008e0e:	f7ff fef8 	bl	8008c02 <setpixel>
 8008e12:	e7d6      	b.n	8008dc2 <line+0x88>
    }

    if (0 <= x2 && x2 < fb->width && 0 <= y2 && y2 < fb->height) {
 8008e14:	9a03      	ldr	r2, [sp, #12]
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	db0a      	blt.n	8008e30 <line+0xf6>
 8008e1a:	9902      	ldr	r1, [sp, #8]
 8008e1c:	888b      	ldrh	r3, [r1, #4]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	dd06      	ble.n	8008e30 <line+0xf6>
 8008e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	db03      	blt.n	8008e30 <line+0xf6>
 8008e28:	88cb      	ldrh	r3, [r1, #6]
 8008e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	dc02      	bgt.n	8008e36 <line+0xfc>
        setpixel(fb, x2, y2, col);
    }
}
 8008e30:	b005      	add	sp, #20
 8008e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setpixel(fb, x2, y2, col);
 8008e36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e38:	9903      	ldr	r1, [sp, #12]
 8008e3a:	9802      	ldr	r0, [sp, #8]
 8008e3c:	f7ff fee1 	bl	8008c02 <setpixel>
}
 8008e40:	e7f6      	b.n	8008e30 <line+0xf6>
        sy = 1;
 8008e42:	2701      	movs	r7, #1
        steep = 0;
 8008e44:	2200      	movs	r2, #0
 8008e46:	9201      	str	r2, [sp, #4]
    int e = 2 * dy - dx;
 8008e48:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8008e4c:	ebca 0443 	rsb	r4, sl, r3, lsl #1
    for (int i = 0; i < dx; ++i) {
 8008e50:	f1ba 0f00 	cmp.w	sl, #0
 8008e54:	ddde      	ble.n	8008e14 <line+0xda>
            e -= 2 * dx;
 8008e56:	ea4f 064a 	mov.w	r6, sl, lsl #1
    for (int i = 0; i < dx; ++i) {
 8008e5a:	f04f 0900 	mov.w	r9, #0
 8008e5e:	e7bc      	b.n	8008dda <line+0xa0>

08008e60 <framebuf_line>:

void framebuf_line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 8008e60:	b510      	push	{r4, lr}
 8008e62:	b082      	sub	sp, #8
    line( fb, x1, y1, x2, y2, col );
 8008e64:	9c05      	ldr	r4, [sp, #20]
 8008e66:	9401      	str	r4, [sp, #4]
 8008e68:	9c04      	ldr	r4, [sp, #16]
 8008e6a:	9400      	str	r4, [sp, #0]
 8008e6c:	f7ff ff65 	bl	8008d3a <line>
}
 8008e70:	b002      	add	sp, #8
 8008e72:	bd10      	pop	{r4, pc}

08008e74 <framebuf_circle>:
        }
    }
}
*/

void framebuf_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 8008e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	9100      	str	r1, [sp, #0]
 8008e7c:	461f      	mov	r7, r3
 8008e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	f1c3 0303 	rsb	r3, r3, #3
 8008e86:	9301      	str	r3, [sp, #4]

    while (x <= y) {
 8008e88:	2f00      	cmp	r7, #0
 8008e8a:	db59      	blt.n	8008f40 <framebuf_circle+0xcc>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	4693      	mov	fp, r2
    int x = 0;
 8008e90:	2600      	movs	r6, #0
 8008e92:	e009      	b.n	8008ea8 <framebuf_circle+0x34>
        framebuf_pixel(fb, xc - y, yc - x, col);

        if (d < 0) {
            d = d + 4 * x + 6;
        } else {
            d = d + 4 * (x - y) + 10;
 8008e94:	1bf3      	subs	r3, r6, r7
 8008e96:	9a01      	ldr	r2, [sp, #4]
 8008e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e9c:	330a      	adds	r3, #10
 8008e9e:	9301      	str	r3, [sp, #4]
            y--;
 8008ea0:	3f01      	subs	r7, #1
        }
        x++;
 8008ea2:	3601      	adds	r6, #1
    while (x <= y) {
 8008ea4:	42b7      	cmp	r7, r6
 8008ea6:	db4b      	blt.n	8008f40 <framebuf_circle+0xcc>
        framebuf_pixel(fb, xc + x, yc + y, col);
 8008ea8:	9b00      	ldr	r3, [sp, #0]
 8008eaa:	eb06 0a03 	add.w	sl, r6, r3
 8008eae:	eb0b 0907 	add.w	r9, fp, r7
 8008eb2:	462b      	mov	r3, r5
 8008eb4:	464a      	mov	r2, r9
 8008eb6:	4651      	mov	r1, sl
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7ff ff19 	bl	8008cf0 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc + y, col);
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	eba3 0806 	sub.w	r8, r3, r6
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	464a      	mov	r2, r9
 8008ec8:	4641      	mov	r1, r8
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f7ff ff10 	bl	8008cf0 <framebuf_pixel>
        framebuf_pixel(fb, xc + x, yc - y, col);
 8008ed0:	ebab 0907 	sub.w	r9, fp, r7
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	464a      	mov	r2, r9
 8008ed8:	4651      	mov	r1, sl
 8008eda:	4620      	mov	r0, r4
 8008edc:	f7ff ff08 	bl	8008cf0 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc - y, col);
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	464a      	mov	r2, r9
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff ff02 	bl	8008cf0 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc + x, col);
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	eb03 0a07 	add.w	sl, r3, r7
 8008ef2:	eb06 090b 	add.w	r9, r6, fp
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	464a      	mov	r2, r9
 8008efa:	4651      	mov	r1, sl
 8008efc:	4620      	mov	r0, r4
 8008efe:	f7ff fef7 	bl	8008cf0 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc + x, col);
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	eba3 0807 	sub.w	r8, r3, r7
 8008f08:	462b      	mov	r3, r5
 8008f0a:	464a      	mov	r2, r9
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7ff feee 	bl	8008cf0 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc - x, col);
 8008f14:	ebab 0906 	sub.w	r9, fp, r6
 8008f18:	462b      	mov	r3, r5
 8008f1a:	464a      	mov	r2, r9
 8008f1c:	4651      	mov	r1, sl
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7ff fee6 	bl	8008cf0 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc - x, col);
 8008f24:	462b      	mov	r3, r5
 8008f26:	464a      	mov	r2, r9
 8008f28:	4641      	mov	r1, r8
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7ff fee0 	bl	8008cf0 <framebuf_pixel>
        if (d < 0) {
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	daae      	bge.n	8008e94 <framebuf_circle+0x20>
            d = d + 4 * x + 6;
 8008f36:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008f3a:	3306      	adds	r3, #6
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	e7b0      	b.n	8008ea2 <framebuf_circle+0x2e>
    }
}
 8008f40:	b003      	add	sp, #12
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f46 <framebuf_circle_quadrant>:
#define QUADRANT_0   0x01
#define QUADRANT_90  0x02
#define QUADRANT_180 0x04
#define QUADRANT_270 0x08
void framebuf_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 8008f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8008f50:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;

    while (x <= y) {
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	db70      	blt.n	800903a <framebuf_circle_quadrant+0xf4>
 8008f58:	4607      	mov	r7, r0
 8008f5a:	4688      	mov	r8, r1
 8008f5c:	4691      	mov	r9, r2
 8008f5e:	461e      	mov	r6, r3
 8008f60:	005d      	lsls	r5, r3, #1
 8008f62:	f1c5 0503 	rsb	r5, r5, #3
    int x = 0;
 8008f66:	2400      	movs	r4, #0
        if (quadrant & QUADRANT_0) {
 8008f68:	f00b 0301 	and.w	r3, fp, #1
 8008f6c:	9301      	str	r3, [sp, #4]
            framebuf_pixel(fb, xc + x, yc + y, col);
            framebuf_pixel(fb, xc + y, yc + x, col);
        }
        if (quadrant & QUADRANT_90) {
 8008f6e:	f00b 0302 	and.w	r3, fp, #2
 8008f72:	9302      	str	r3, [sp, #8]
            framebuf_pixel(fb, xc - x, yc + y, col);
            framebuf_pixel(fb, xc - y, yc + x, col);
        }
        if (quadrant & QUADRANT_180) {
 8008f74:	f00b 0304 	and.w	r3, fp, #4
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	e04c      	b.n	8009016 <framebuf_circle_quadrant+0xd0>
            framebuf_pixel(fb, xc + x, yc + y, col);
 8008f7c:	4653      	mov	r3, sl
 8008f7e:	eb09 0206 	add.w	r2, r9, r6
 8008f82:	eb08 0104 	add.w	r1, r8, r4
 8008f86:	4638      	mov	r0, r7
 8008f88:	f7ff feb2 	bl	8008cf0 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc + x, col);
 8008f8c:	4653      	mov	r3, sl
 8008f8e:	eb09 0204 	add.w	r2, r9, r4
 8008f92:	eb08 0106 	add.w	r1, r8, r6
 8008f96:	4638      	mov	r0, r7
 8008f98:	f7ff feaa 	bl	8008cf0 <framebuf_pixel>
 8008f9c:	e03e      	b.n	800901c <framebuf_circle_quadrant+0xd6>
            framebuf_pixel(fb, xc - x, yc + y, col);
 8008f9e:	4653      	mov	r3, sl
 8008fa0:	eb09 0206 	add.w	r2, r9, r6
 8008fa4:	eba8 0104 	sub.w	r1, r8, r4
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f7ff fea1 	bl	8008cf0 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc + x, col);
 8008fae:	4653      	mov	r3, sl
 8008fb0:	eb09 0204 	add.w	r2, r9, r4
 8008fb4:	eba8 0106 	sub.w	r1, r8, r6
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff fe99 	bl	8008cf0 <framebuf_pixel>
 8008fbe:	e030      	b.n	8009022 <framebuf_circle_quadrant+0xdc>
            framebuf_pixel(fb, xc - x, yc - y, col);
 8008fc0:	4653      	mov	r3, sl
 8008fc2:	eba9 0206 	sub.w	r2, r9, r6
 8008fc6:	eba8 0104 	sub.w	r1, r8, r4
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f7ff fe90 	bl	8008cf0 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc - x, col);
 8008fd0:	4653      	mov	r3, sl
 8008fd2:	eba9 0204 	sub.w	r2, r9, r4
 8008fd6:	eba8 0106 	sub.w	r1, r8, r6
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f7ff fe88 	bl	8008cf0 <framebuf_pixel>
 8008fe0:	e022      	b.n	8009028 <framebuf_circle_quadrant+0xe2>
        }
        if (quadrant & QUADRANT_270) {
            framebuf_pixel(fb, xc + x, yc - y, col);
 8008fe2:	4653      	mov	r3, sl
 8008fe4:	eba9 0206 	sub.w	r2, r9, r6
 8008fe8:	eb08 0104 	add.w	r1, r8, r4
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff fe7f 	bl	8008cf0 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc - x, col);
 8008ff2:	4653      	mov	r3, sl
 8008ff4:	eba9 0204 	sub.w	r2, r9, r4
 8008ff8:	eb08 0106 	add.w	r1, r8, r6
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f7ff fe77 	bl	8008cf0 <framebuf_pixel>
 8009002:	e014      	b.n	800902e <framebuf_circle_quadrant+0xe8>
        }

        if (d < 0) {
            d = d + 4 * x + 6;
        } else {
            d = d + 4 * (x - y) + 10;
 8009004:	1ba3      	subs	r3, r4, r6
 8009006:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800900a:	f103 050a 	add.w	r5, r3, #10
            y--;
 800900e:	3e01      	subs	r6, #1
        }
        x++;
 8009010:	3401      	adds	r4, #1
    while (x <= y) {
 8009012:	42a6      	cmp	r6, r4
 8009014:	db11      	blt.n	800903a <framebuf_circle_quadrant+0xf4>
        if (quadrant & QUADRANT_0) {
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1af      	bne.n	8008f7c <framebuf_circle_quadrant+0x36>
        if (quadrant & QUADRANT_90) {
 800901c:	9b02      	ldr	r3, [sp, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1bd      	bne.n	8008f9e <framebuf_circle_quadrant+0x58>
        if (quadrant & QUADRANT_180) {
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1cb      	bne.n	8008fc0 <framebuf_circle_quadrant+0x7a>
        if (quadrant & QUADRANT_270) {
 8009028:	f01b 0f08 	tst.w	fp, #8
 800902c:	d1d9      	bne.n	8008fe2 <framebuf_circle_quadrant+0x9c>
        if (d < 0) {
 800902e:	2d00      	cmp	r5, #0
 8009030:	dae8      	bge.n	8009004 <framebuf_circle_quadrant+0xbe>
            d = d + 4 * x + 6;
 8009032:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8009036:	3506      	adds	r5, #6
 8009038:	e7ea      	b.n	8009010 <framebuf_circle_quadrant+0xca>
    }
}
 800903a:	b005      	add	sp, #20
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009040 <framebuf_fill_circle>:

void framebuf_fill_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	b085      	sub	sp, #20
 8009046:	4681      	mov	r9, r0
 8009048:	9103      	str	r1, [sp, #12]
 800904a:	4692      	mov	sl, r2
 800904c:	461e      	mov	r6, r3
 800904e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 8009052:	005d      	lsls	r5, r3, #1
 8009054:	f8cd b000 	str.w	fp, [sp]
 8009058:	462b      	mov	r3, r5
 800905a:	1b89      	subs	r1, r1, r6
 800905c:	f7ff fe59 	bl	8008d12 <framebuf_hline>

    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;

    while (x <= y) {
 8009060:	2e00      	cmp	r6, #0
 8009062:	db44      	blt.n	80090ee <framebuf_fill_circle+0xae>
 8009064:	f1c5 0503 	rsb	r5, r5, #3
    int x = 0;
 8009068:	2400      	movs	r4, #0
 800906a:	e021      	b.n	80090b0 <framebuf_fill_circle+0x70>
        if (y > 0) {
            framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	1b1f      	subs	r7, r3, r4
 8009070:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8009074:	f8cd b000 	str.w	fp, [sp]
 8009078:	4643      	mov	r3, r8
 800907a:	ebaa 0206 	sub.w	r2, sl, r6
 800907e:	4639      	mov	r1, r7
 8009080:	4648      	mov	r0, r9
 8009082:	f7ff fe46 	bl	8008d12 <framebuf_hline>
            framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 8009086:	f8cd b000 	str.w	fp, [sp]
 800908a:	4643      	mov	r3, r8
 800908c:	eb0a 0206 	add.w	r2, sl, r6
 8009090:	4639      	mov	r1, r7
 8009092:	4648      	mov	r0, r9
 8009094:	f7ff fe3d 	bl	8008d12 <framebuf_hline>
 8009098:	e00c      	b.n	80090b4 <framebuf_fill_circle+0x74>
        if (x > 0) {
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
        }

        if (d < 0) {
 800909a:	2d00      	cmp	r5, #0
 800909c:	db23      	blt.n	80090e6 <framebuf_fill_circle+0xa6>
            d = d + 4 * x + 6;
        } else {
            d = d + 4 * (x - y) + 10;
 800909e:	1ba3      	subs	r3, r4, r6
 80090a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80090a4:	f103 050a 	add.w	r5, r3, #10
            y--;
 80090a8:	3e01      	subs	r6, #1
        }
        x++;
 80090aa:	3401      	adds	r4, #1
    while (x <= y) {
 80090ac:	42a6      	cmp	r6, r4
 80090ae:	db1e      	blt.n	80090ee <framebuf_fill_circle+0xae>
        if (y > 0) {
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	dcdb      	bgt.n	800906c <framebuf_fill_circle+0x2c>
        if (x > 0) {
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	ddf0      	ble.n	800909a <framebuf_fill_circle+0x5a>
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	1b9f      	subs	r7, r3, r6
 80090bc:	ea4f 0846 	mov.w	r8, r6, lsl #1
 80090c0:	f8cd b000 	str.w	fp, [sp]
 80090c4:	4643      	mov	r3, r8
 80090c6:	ebaa 0204 	sub.w	r2, sl, r4
 80090ca:	4639      	mov	r1, r7
 80090cc:	4648      	mov	r0, r9
 80090ce:	f7ff fe20 	bl	8008d12 <framebuf_hline>
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 80090d2:	f8cd b000 	str.w	fp, [sp]
 80090d6:	4643      	mov	r3, r8
 80090d8:	eb04 020a 	add.w	r2, r4, sl
 80090dc:	4639      	mov	r1, r7
 80090de:	4648      	mov	r0, r9
 80090e0:	f7ff fe17 	bl	8008d12 <framebuf_hline>
 80090e4:	e7d9      	b.n	800909a <framebuf_fill_circle+0x5a>
            d = d + 4 * x + 6;
 80090e6:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80090ea:	3506      	adds	r5, #6
 80090ec:	e7dd      	b.n	80090aa <framebuf_fill_circle+0x6a>
    }
}
 80090ee:	b005      	add	sp, #20
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090f4 <framebuf_fill_circle_quadrant>:

void framebuf_fill_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	b089      	sub	sp, #36	; 0x24
 80090fa:	4680      	mov	r8, r0
 80090fc:	9107      	str	r1, [sp, #28]
 80090fe:	4617      	mov	r7, r2
 8009100:	461e      	mov	r6, r3
 8009102:	f89d 904c 	ldrb.w	r9, [sp, #76]	; 0x4c
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 8009106:	005d      	lsls	r5, r3, #1
 8009108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	462b      	mov	r3, r5
 800910e:	1b89      	subs	r1, r1, r6
 8009110:	f7ff fdff 	bl	8008d12 <framebuf_hline>

    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;

    while (x <= y) {
 8009114:	2e00      	cmp	r6, #0
 8009116:	f2c0 808a 	blt.w	800922e <framebuf_fill_circle_quadrant+0x13a>
 800911a:	f1c5 0503 	rsb	r5, r5, #3
    int x = 0;
 800911e:	2400      	movs	r4, #0
        if (quadrant & QUADRANT_0) {
 8009120:	f009 0301 	and.w	r3, r9, #1
 8009124:	9303      	str	r3, [sp, #12]
            if (y > 0) {
                framebuf_hline(fb, xc + x, yc - y, 2 * x, col);
                framebuf_hline(fb, xc + x, yc + y, 2 * x, col);
            }
        }
        if (quadrant & QUADRANT_90) {
 8009126:	f009 0302 	and.w	r3, r9, #2
 800912a:	9304      	str	r3, [sp, #16]
            if (x > 0) {
                framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
                framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
            }
        }
        if (quadrant & QUADRANT_180) {
 800912c:	f009 0304 	and.w	r3, r9, #4
 8009130:	9305      	str	r3, [sp, #20]
 8009132:	f8cd 9018 	str.w	r9, [sp, #24]
 8009136:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800913a:	e04c      	b.n	80091d6 <framebuf_fill_circle_quadrant+0xe2>
                framebuf_hline(fb, xc + x, yc - y, 2 * x, col);
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	eb03 0a04 	add.w	sl, r3, r4
 8009142:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8009146:	f8cd 9000 	str.w	r9, [sp]
 800914a:	465b      	mov	r3, fp
 800914c:	1bba      	subs	r2, r7, r6
 800914e:	4651      	mov	r1, sl
 8009150:	4640      	mov	r0, r8
 8009152:	f7ff fdde 	bl	8008d12 <framebuf_hline>
                framebuf_hline(fb, xc + x, yc + y, 2 * x, col);
 8009156:	f8cd 9000 	str.w	r9, [sp]
 800915a:	465b      	mov	r3, fp
 800915c:	19ba      	adds	r2, r7, r6
 800915e:	4651      	mov	r1, sl
 8009160:	4640      	mov	r0, r8
 8009162:	f7ff fdd6 	bl	8008d12 <framebuf_hline>
 8009166:	e03a      	b.n	80091de <framebuf_fill_circle_quadrant+0xea>
                framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 8009168:	9b07      	ldr	r3, [sp, #28]
 800916a:	eba3 0a06 	sub.w	sl, r3, r6
 800916e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8009172:	f8cd 9000 	str.w	r9, [sp]
 8009176:	465b      	mov	r3, fp
 8009178:	1b3a      	subs	r2, r7, r4
 800917a:	4651      	mov	r1, sl
 800917c:	4640      	mov	r0, r8
 800917e:	f7ff fdc8 	bl	8008d12 <framebuf_hline>
                framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 8009182:	f8cd 9000 	str.w	r9, [sp]
 8009186:	465b      	mov	r3, fp
 8009188:	193a      	adds	r2, r7, r4
 800918a:	4651      	mov	r1, sl
 800918c:	4640      	mov	r0, r8
 800918e:	f7ff fdc0 	bl	8008d12 <framebuf_hline>
 8009192:	e028      	b.n	80091e6 <framebuf_fill_circle_quadrant+0xf2>
            if (y > 0) {
                framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	eba3 0a04 	sub.w	sl, r3, r4
 800919a:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 800919e:	f8cd 9000 	str.w	r9, [sp]
 80091a2:	465b      	mov	r3, fp
 80091a4:	1bba      	subs	r2, r7, r6
 80091a6:	4651      	mov	r1, sl
 80091a8:	4640      	mov	r0, r8
 80091aa:	f7ff fdb2 	bl	8008d12 <framebuf_hline>
                framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 80091ae:	f8cd 9000 	str.w	r9, [sp]
 80091b2:	465b      	mov	r3, fp
 80091b4:	19ba      	adds	r2, r7, r6
 80091b6:	4651      	mov	r1, sl
 80091b8:	4640      	mov	r0, r8
 80091ba:	f7ff fdaa 	bl	8008d12 <framebuf_hline>
 80091be:	e016      	b.n	80091ee <framebuf_fill_circle_quadrant+0xfa>
                framebuf_hline(fb, xc + y, yc - x, 2 * y, col);
                framebuf_hline(fb, xc + y, yc + x, 2 * y, col);
            }
        }

        if (d < 0) {
 80091c0:	2d00      	cmp	r5, #0
 80091c2:	db30      	blt.n	8009226 <framebuf_fill_circle_quadrant+0x132>
            d = d + 4 * x + 6;
        } else {
            d = d + 4 * (x - y) + 10;
 80091c4:	1ba3      	subs	r3, r4, r6
 80091c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80091ca:	f103 050a 	add.w	r5, r3, #10
            y--;
 80091ce:	3e01      	subs	r6, #1
        }
        x++;
 80091d0:	3401      	adds	r4, #1
    while (x <= y) {
 80091d2:	42a6      	cmp	r6, r4
 80091d4:	db2b      	blt.n	800922e <framebuf_fill_circle_quadrant+0x13a>
        if (quadrant & QUADRANT_0) {
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	b10b      	cbz	r3, 80091de <framebuf_fill_circle_quadrant+0xea>
            if (y > 0) {
 80091da:	2e00      	cmp	r6, #0
 80091dc:	dcae      	bgt.n	800913c <framebuf_fill_circle_quadrant+0x48>
        if (quadrant & QUADRANT_90) {
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	b10b      	cbz	r3, 80091e6 <framebuf_fill_circle_quadrant+0xf2>
            if (x > 0) {
 80091e2:	2c00      	cmp	r4, #0
 80091e4:	dcc0      	bgt.n	8009168 <framebuf_fill_circle_quadrant+0x74>
        if (quadrant & QUADRANT_180) {
 80091e6:	9b05      	ldr	r3, [sp, #20]
 80091e8:	b10b      	cbz	r3, 80091ee <framebuf_fill_circle_quadrant+0xfa>
            if (y > 0) {
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	dcd2      	bgt.n	8009194 <framebuf_fill_circle_quadrant+0xa0>
        if (quadrant & QUADRANT_270) {
 80091ee:	9b06      	ldr	r3, [sp, #24]
 80091f0:	f013 0f08 	tst.w	r3, #8
 80091f4:	d0e4      	beq.n	80091c0 <framebuf_fill_circle_quadrant+0xcc>
            if (x > 0) {
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	dde2      	ble.n	80091c0 <framebuf_fill_circle_quadrant+0xcc>
                framebuf_hline(fb, xc + y, yc - x, 2 * y, col);
 80091fa:	9b07      	ldr	r3, [sp, #28]
 80091fc:	eb03 0a06 	add.w	sl, r3, r6
 8009200:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8009204:	f8cd 9000 	str.w	r9, [sp]
 8009208:	465b      	mov	r3, fp
 800920a:	1b3a      	subs	r2, r7, r4
 800920c:	4651      	mov	r1, sl
 800920e:	4640      	mov	r0, r8
 8009210:	f7ff fd7f 	bl	8008d12 <framebuf_hline>
                framebuf_hline(fb, xc + y, yc + x, 2 * y, col);
 8009214:	f8cd 9000 	str.w	r9, [sp]
 8009218:	465b      	mov	r3, fp
 800921a:	19e2      	adds	r2, r4, r7
 800921c:	4651      	mov	r1, sl
 800921e:	4640      	mov	r0, r8
 8009220:	f7ff fd77 	bl	8008d12 <framebuf_hline>
 8009224:	e7cc      	b.n	80091c0 <framebuf_fill_circle_quadrant+0xcc>
            d = d + 4 * x + 6;
 8009226:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800922a:	3506      	adds	r5, #6
 800922c:	e7d0      	b.n	80091d0 <framebuf_fill_circle_quadrant+0xdc>
    }
}
 800922e:	b009      	add	sp, #36	; 0x24
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009234 <nk_buffer_init_fixed>:
    b->grow_factor = 2.0f;
    b->pool = *a;
}
NK_API void
nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)
{
 8009234:	b570      	push	{r4, r5, r6, lr}
    NK_ASSERT(b);
 8009236:	b168      	cbz	r0, 8009254 <nk_buffer_init_fixed+0x20>
 8009238:	460e      	mov	r6, r1
 800923a:	4614      	mov	r4, r2
 800923c:	4605      	mov	r5, r0
    NK_ASSERT(m);
 800923e:	b179      	cbz	r1, 8009260 <nk_buffer_init_fixed+0x2c>
    NK_ASSERT(size);
 8009240:	b1a2      	cbz	r2, 800926c <nk_buffer_init_fixed+0x38>
    if (!b || !m || !size) return;

    nk_zero(b, sizeof(*b));
 8009242:	213c      	movs	r1, #60	; 0x3c
 8009244:	f00b fda0 	bl	8014d88 <nk_zero>
    b->type = NK_BUFFER_FIXED;
 8009248:	2300      	movs	r3, #0
 800924a:	772b      	strb	r3, [r5, #28]
    b->memory.ptr = m;
 800924c:	622e      	str	r6, [r5, #32]
    b->memory.size = size;
 800924e:	626c      	str	r4, [r5, #36]	; 0x24
    b->size = size;
 8009250:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8009252:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(b);
 8009254:	4b08      	ldr	r3, [pc, #32]	; (8009278 <nk_buffer_init_fixed+0x44>)
 8009256:	4a09      	ldr	r2, [pc, #36]	; (800927c <nk_buffer_init_fixed+0x48>)
 8009258:	2136      	movs	r1, #54	; 0x36
 800925a:	4809      	ldr	r0, [pc, #36]	; (8009280 <nk_buffer_init_fixed+0x4c>)
 800925c:	f00d f976 	bl	801654c <__assert_func>
    NK_ASSERT(m);
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <nk_buffer_init_fixed+0x50>)
 8009262:	4a06      	ldr	r2, [pc, #24]	; (800927c <nk_buffer_init_fixed+0x48>)
 8009264:	2137      	movs	r1, #55	; 0x37
 8009266:	4806      	ldr	r0, [pc, #24]	; (8009280 <nk_buffer_init_fixed+0x4c>)
 8009268:	f00d f970 	bl	801654c <__assert_func>
    NK_ASSERT(size);
 800926c:	4b06      	ldr	r3, [pc, #24]	; (8009288 <nk_buffer_init_fixed+0x54>)
 800926e:	4a03      	ldr	r2, [pc, #12]	; (800927c <nk_buffer_init_fixed+0x48>)
 8009270:	2138      	movs	r1, #56	; 0x38
 8009272:	4803      	ldr	r0, [pc, #12]	; (8009280 <nk_buffer_init_fixed+0x4c>)
 8009274:	f00d f96a 	bl	801654c <__assert_func>
 8009278:	0801ac48 	.word	0x0801ac48
 800927c:	0801acac 	.word	0x0801acac
 8009280:	0801ac4c 	.word	0x0801ac4c
 8009284:	08019ddc 	.word	0x08019ddc
 8009288:	0801ac74 	.word	0x0801ac74

0800928c <nk_buffer_align>:
nk_buffer_align(void *unaligned,
    nk_size align, nk_size *alignment,
    enum nk_buffer_allocation_type type)
{
    void *memory = 0;
    switch (type) {
 800928c:	2b01      	cmp	r3, #1
 800928e:	d008      	beq.n	80092a2 <nk_buffer_align+0x16>
    default:
    case NK_BUFFER_MAX:
    case NK_BUFFER_FRONT:
        if (align) {
 8009290:	b129      	cbz	r1, 800929e <nk_buffer_align+0x12>
            memory = NK_ALIGN_PTR(unaligned, align);
 8009292:	1e4b      	subs	r3, r1, #1
 8009294:	4403      	add	r3, r0
 8009296:	4249      	negs	r1, r1
 8009298:	400b      	ands	r3, r1
            *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800929a:	1a19      	subs	r1, r3, r0
            memory = NK_ALIGN_PTR(unaligned, align);
 800929c:	4618      	mov	r0, r3
        } else {
            memory = unaligned;
            *alignment = 0;
 800929e:	6011      	str	r1, [r2, #0]
            *alignment = 0;
        }
        break;
    }
    return memory;
}
 80092a0:	4770      	bx	lr
        if (align) {
 80092a2:	2900      	cmp	r1, #0
 80092a4:	d0fb      	beq.n	800929e <nk_buffer_align+0x12>
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 80092a6:	424b      	negs	r3, r1
            *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);
 80092a8:	ea20 0103 	bic.w	r1, r0, r3
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 80092ac:	4018      	ands	r0, r3
 80092ae:	e7f6      	b.n	800929e <nk_buffer_align+0x12>

080092b0 <nk_buffer_realloc>:
NK_LIB void*
nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)
{
 80092b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void *temp;
    nk_size buffer_size;

    NK_ASSERT(b);
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d02d      	beq.n	8009314 <nk_buffer_realloc+0x64>
 80092b8:	460d      	mov	r5, r1
 80092ba:	4616      	mov	r6, r2
 80092bc:	4604      	mov	r4, r0
    NK_ASSERT(size);
 80092be:	2a00      	cmp	r2, #0
 80092c0:	d02e      	beq.n	8009320 <nk_buffer_realloc+0x70>
    if (!b || !size || !b->pool.alloc || !b->pool.free)
 80092c2:	6943      	ldr	r3, [r0, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d039      	beq.n	800933c <nk_buffer_realloc+0x8c>
 80092c8:	6982      	ldr	r2, [r0, #24]
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	d038      	beq.n	8009340 <nk_buffer_realloc+0x90>
        return 0;

    buffer_size = b->memory.size;
 80092ce:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
    temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);
 80092d2:	460a      	mov	r2, r1
 80092d4:	6a01      	ldr	r1, [r0, #32]
 80092d6:	6900      	ldr	r0, [r0, #16]
 80092d8:	4798      	blx	r3
    NK_ASSERT(temp);
 80092da:	4607      	mov	r7, r0
 80092dc:	b330      	cbz	r0, 800932c <nk_buffer_realloc+0x7c>
    if (!temp) return 0;

    *size = capacity;
 80092de:	6035      	str	r5, [r6, #0]
    if (temp != b->memory.ptr) {
 80092e0:	6a21      	ldr	r1, [r4, #32]
 80092e2:	4281      	cmp	r1, r0
 80092e4:	d006      	beq.n	80092f4 <nk_buffer_realloc+0x44>
        NK_MEMCPY(temp, b->memory.ptr, buffer_size);
 80092e6:	4642      	mov	r2, r8
 80092e8:	f00b fc92 	bl	8014c10 <nk_memcopy>
        b->pool.free(b->pool.userdata, b->memory.ptr);
 80092ec:	69a3      	ldr	r3, [r4, #24]
 80092ee:	6a21      	ldr	r1, [r4, #32]
 80092f0:	6920      	ldr	r0, [r4, #16]
 80092f2:	4798      	blx	r3
    }

    if (b->size == buffer_size) {
 80092f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092f6:	4541      	cmp	r1, r8
 80092f8:	d01e      	beq.n	8009338 <nk_buffer_realloc+0x88>
    } else {
        /* copy back buffer to the end of the new buffer */
        void *dst, *src;
        nk_size back_size;
        back_size = buffer_size - b->size;
        dst = nk_ptr_add(void, temp, capacity - back_size);
 80092fa:	440d      	add	r5, r1
 80092fc:	eba5 0508 	sub.w	r5, r5, r8
        src = nk_ptr_add(void, temp, b->size);
        NK_MEMCPY(dst, src, back_size);
 8009300:	eba8 0201 	sub.w	r2, r8, r1
 8009304:	4439      	add	r1, r7
 8009306:	1978      	adds	r0, r7, r5
 8009308:	f00b fc82 	bl	8014c10 <nk_memcopy>
        b->size = capacity - back_size;
 800930c:	63a5      	str	r5, [r4, #56]	; 0x38
    }
    return temp;
}
 800930e:	4638      	mov	r0, r7
 8009310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(b);
 8009314:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <nk_buffer_realloc+0x94>)
 8009316:	4a0c      	ldr	r2, [pc, #48]	; (8009348 <nk_buffer_realloc+0x98>)
 8009318:	2165      	movs	r1, #101	; 0x65
 800931a:	480c      	ldr	r0, [pc, #48]	; (800934c <nk_buffer_realloc+0x9c>)
 800931c:	f00d f916 	bl	801654c <__assert_func>
    NK_ASSERT(size);
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <nk_buffer_realloc+0xa0>)
 8009322:	4a09      	ldr	r2, [pc, #36]	; (8009348 <nk_buffer_realloc+0x98>)
 8009324:	2166      	movs	r1, #102	; 0x66
 8009326:	4809      	ldr	r0, [pc, #36]	; (800934c <nk_buffer_realloc+0x9c>)
 8009328:	f00d f910 	bl	801654c <__assert_func>
    NK_ASSERT(temp);
 800932c:	4b09      	ldr	r3, [pc, #36]	; (8009354 <nk_buffer_realloc+0xa4>)
 800932e:	4a06      	ldr	r2, [pc, #24]	; (8009348 <nk_buffer_realloc+0x98>)
 8009330:	216c      	movs	r1, #108	; 0x6c
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <nk_buffer_realloc+0x9c>)
 8009334:	f00d f90a 	bl	801654c <__assert_func>
        b->size = capacity;
 8009338:	63a5      	str	r5, [r4, #56]	; 0x38
        return temp;
 800933a:	e7e8      	b.n	800930e <nk_buffer_realloc+0x5e>
        return 0;
 800933c:	2700      	movs	r7, #0
 800933e:	e7e6      	b.n	800930e <nk_buffer_realloc+0x5e>
 8009340:	2700      	movs	r7, #0
 8009342:	e7e4      	b.n	800930e <nk_buffer_realloc+0x5e>
 8009344:	0801ac48 	.word	0x0801ac48
 8009348:	0801acf4 	.word	0x0801acf4
 800934c:	0801ac4c 	.word	0x0801ac4c
 8009350:	0801ac74 	.word	0x0801ac74
 8009354:	0801ac7c 	.word	0x0801ac7c

08009358 <nk_buffer_alloc>:
NK_LIB void*
nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,
    nk_size size, nk_size align)
{
 8009358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935c:	b082      	sub	sp, #8
    int full;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800935e:	b330      	cbz	r0, 80093ae <nk_buffer_alloc+0x56>
 8009360:	460e      	mov	r6, r1
 8009362:	4615      	mov	r5, r2
 8009364:	461f      	mov	r7, r3
 8009366:	4604      	mov	r4, r0
    NK_ASSERT(size);
 8009368:	b33a      	cbz	r2, 80093ba <nk_buffer_alloc+0x62>
    if (!b || !size) return 0;
    b->needed += size;
 800936a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800936c:	4413      	add	r3, r2
 800936e:	6303      	str	r3, [r0, #48]	; 0x30

    /* calculate total size with needed alignment + size */
    if (type == NK_BUFFER_FRONT)
 8009370:	bb49      	cbnz	r1, 80093c6 <nk_buffer_alloc+0x6e>
        unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 8009372:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8009376:	6a00      	ldr	r0, [r0, #32]
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 8009378:	2300      	movs	r3, #0
 800937a:	aa01      	add	r2, sp, #4
 800937c:	4639      	mov	r1, r7
 800937e:	4440      	add	r0, r8
 8009380:	f7ff ff84 	bl	800928c <nk_buffer_align>

    /* check if buffer has enough memory*/
    if (type == NK_BUFFER_FRONT)
        full = ((b->allocated + size + alignment) > b->size);
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	442b      	add	r3, r5
 8009388:	4443      	add	r3, r8
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);

    if (full) {
 800938a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800938c:	4293      	cmp	r3, r2
 800938e:	d830      	bhi.n	80093f2 <nk_buffer_alloc+0x9a>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
        memory = nk_buffer_align(unaligned, align, &alignment, type);
    }
    if (type == NK_BUFFER_FRONT)
        b->allocated += size + alignment;
 8009390:	9b01      	ldr	r3, [sp, #4]
 8009392:	18ea      	adds	r2, r5, r3
 8009394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009396:	4413      	add	r3, r2
 8009398:	62e3      	str	r3, [r4, #44]	; 0x2c
    else b->size -= (size + alignment);
    b->needed += alignment;
 800939a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800939c:	9a01      	ldr	r2, [sp, #4]
 800939e:	4413      	add	r3, r2
 80093a0:	6323      	str	r3, [r4, #48]	; 0x30
    b->calls++;
 80093a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093a4:	3301      	adds	r3, #1
 80093a6:	6363      	str	r3, [r4, #52]	; 0x34
    return memory;
}
 80093a8:	b002      	add	sp, #8
 80093aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(b);
 80093ae:	4b33      	ldr	r3, [pc, #204]	; (800947c <nk_buffer_alloc+0x124>)
 80093b0:	4a33      	ldr	r2, [pc, #204]	; (8009480 <nk_buffer_alloc+0x128>)
 80093b2:	218e      	movs	r1, #142	; 0x8e
 80093b4:	4833      	ldr	r0, [pc, #204]	; (8009484 <nk_buffer_alloc+0x12c>)
 80093b6:	f00d f8c9 	bl	801654c <__assert_func>
    NK_ASSERT(size);
 80093ba:	4b33      	ldr	r3, [pc, #204]	; (8009488 <nk_buffer_alloc+0x130>)
 80093bc:	4a30      	ldr	r2, [pc, #192]	; (8009480 <nk_buffer_alloc+0x128>)
 80093be:	218f      	movs	r1, #143	; 0x8f
 80093c0:	4830      	ldr	r0, [pc, #192]	; (8009484 <nk_buffer_alloc+0x12c>)
 80093c2:	f00d f8c3 	bl	801654c <__assert_func>
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 80093c6:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 80093ca:	eba8 0c02 	sub.w	ip, r8, r2
 80093ce:	6a00      	ldr	r0, [r0, #32]
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 80093d0:	460b      	mov	r3, r1
 80093d2:	aa01      	add	r2, sp, #4
 80093d4:	4639      	mov	r1, r7
 80093d6:	4460      	add	r0, ip
 80093d8:	f7ff ff58 	bl	800928c <nk_buffer_align>
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	442b      	add	r3, r5
 80093e0:	4543      	cmp	r3, r8
 80093e2:	bf94      	ite	ls
 80093e4:	eba8 0803 	subls.w	r8, r8, r3
 80093e8:	eba8 0808 	subhi.w	r8, r8, r8
    if (full) {
 80093ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093ee:	4598      	cmp	r8, r3
 80093f0:	d82b      	bhi.n	800944a <nk_buffer_alloc+0xf2>
        if (b->type != NK_BUFFER_DYNAMIC)
 80093f2:	7f23      	ldrb	r3, [r4, #28]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d13e      	bne.n	8009476 <nk_buffer_alloc+0x11e>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 80093f8:	6963      	ldr	r3, [r4, #20]
 80093fa:	b363      	cbz	r3, 8009456 <nk_buffer_alloc+0xfe>
 80093fc:	69a3      	ldr	r3, [r4, #24]
 80093fe:	b353      	cbz	r3, 8009456 <nk_buffer_alloc+0xfe>
        capacity = (nk_size)((float)b->memory.size * b->grow_factor);
 8009400:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8009404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009408:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800940c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009414:	ee17 8a90 	vmov	r8, s15
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 8009418:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800941a:	4428      	add	r0, r5
 800941c:	f004 f960 	bl	800d6e0 <nk_round_up_pow2>
 8009420:	4540      	cmp	r0, r8
 8009422:	d81e      	bhi.n	8009462 <nk_buffer_alloc+0x10a>
        b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);
 8009424:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8009428:	4641      	mov	r1, r8
 800942a:	4620      	mov	r0, r4
 800942c:	f7ff ff40 	bl	80092b0 <nk_buffer_realloc>
 8009430:	6220      	str	r0, [r4, #32]
        if (!b->memory.ptr) return 0;
 8009432:	2800      	cmp	r0, #0
 8009434:	d0b8      	beq.n	80093a8 <nk_buffer_alloc+0x50>
        if (type == NK_BUFFER_FRONT)
 8009436:	b9d6      	cbnz	r6, 800946e <nk_buffer_alloc+0x116>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 8009438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800943a:	4418      	add	r0, r3
        memory = nk_buffer_align(unaligned, align, &alignment, type);
 800943c:	4633      	mov	r3, r6
 800943e:	aa01      	add	r2, sp, #4
 8009440:	4639      	mov	r1, r7
 8009442:	f7ff ff23 	bl	800928c <nk_buffer_align>
    if (type == NK_BUFFER_FRONT)
 8009446:	2e00      	cmp	r6, #0
 8009448:	d0a2      	beq.n	8009390 <nk_buffer_alloc+0x38>
    else b->size -= (size + alignment);
 800944a:	9b01      	ldr	r3, [sp, #4]
 800944c:	441d      	add	r5, r3
 800944e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009450:	1b5b      	subs	r3, r3, r5
 8009452:	63a3      	str	r3, [r4, #56]	; 0x38
 8009454:	e7a1      	b.n	800939a <nk_buffer_alloc+0x42>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <nk_buffer_alloc+0x134>)
 8009458:	4a09      	ldr	r2, [pc, #36]	; (8009480 <nk_buffer_alloc+0x128>)
 800945a:	21a2      	movs	r1, #162	; 0xa2
 800945c:	4809      	ldr	r0, [pc, #36]	; (8009484 <nk_buffer_alloc+0x12c>)
 800945e:	f00d f875 	bl	801654c <__assert_func>
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 8009462:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009464:	4428      	add	r0, r5
 8009466:	f004 f93b 	bl	800d6e0 <nk_round_up_pow2>
 800946a:	4680      	mov	r8, r0
 800946c:	e7da      	b.n	8009424 <nk_buffer_alloc+0xcc>
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800946e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009470:	1b5b      	subs	r3, r3, r5
 8009472:	4418      	add	r0, r3
 8009474:	e7e2      	b.n	800943c <nk_buffer_alloc+0xe4>
            return 0;
 8009476:	2000      	movs	r0, #0
 8009478:	e796      	b.n	80093a8 <nk_buffer_alloc+0x50>
 800947a:	bf00      	nop
 800947c:	0801ac48 	.word	0x0801ac48
 8009480:	0801ace4 	.word	0x0801ace4
 8009484:	0801ac4c 	.word	0x0801ac4c
 8009488:	0801ac74 	.word	0x0801ac74
 800948c:	0801ac84 	.word	0x0801ac84

08009490 <nk_buffer_reset>:
        buffer->marker[type].offset = buffer->size;
    else buffer->marker[type].offset = buffer->allocated;
}
NK_API void
nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)
{
 8009490:	b510      	push	{r4, lr}
    NK_ASSERT(buffer);
 8009492:	b1a0      	cbz	r0, 80094be <nk_buffer_reset+0x2e>
 8009494:	4603      	mov	r3, r0
    if (!buffer) return;
    if (type == NK_BUFFER_BACK) {
 8009496:	2901      	cmp	r1, #1
 8009498:	d017      	beq.n	80094ca <nk_buffer_reset+0x3a>
            buffer->size = buffer->marker[type].offset;
        else buffer->size = buffer->memory.size;
        buffer->marker[type].active = nk_false;
    } else {
        /* reset front buffer either back to back marker or empty */
        buffer->needed -= (buffer->allocated - buffer->marker[type].offset);
 800949a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800949e:	6850      	ldr	r0, [r2, #4]
 80094a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094a2:	4402      	add	r2, r0
 80094a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80094a6:	1b12      	subs	r2, r2, r4
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 80094aa:	f853 2031 	ldr.w	r2, [r3, r1, lsl #3]
            buffer->allocated = buffer->marker[type].offset;
        else buffer->allocated = 0;
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	bf08      	it	eq
 80094b2:	2000      	moveq	r0, #0
 80094b4:	62d8      	str	r0, [r3, #44]	; 0x2c
        buffer->marker[type].active = nk_false;
 80094b6:	2200      	movs	r2, #0
 80094b8:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
    }
}
 80094bc:	bd10      	pop	{r4, pc}
    NK_ASSERT(buffer);
 80094be:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <nk_buffer_reset+0x58>)
 80094c0:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <nk_buffer_reset+0x5c>)
 80094c2:	21ce      	movs	r1, #206	; 0xce
 80094c4:	480a      	ldr	r0, [pc, #40]	; (80094f0 <nk_buffer_reset+0x60>)
 80094c6:	f00d f841 	bl	801654c <__assert_func>
        buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);
 80094ca:	68c1      	ldr	r1, [r0, #12]
 80094cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80094ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d0:	440a      	add	r2, r1
 80094d2:	1a12      	subs	r2, r2, r0
 80094d4:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 80094d6:	689a      	ldr	r2, [r3, #8]
        else buffer->size = buffer->memory.size;
 80094d8:	2a00      	cmp	r2, #0
 80094da:	bf08      	it	eq
 80094dc:	4601      	moveq	r1, r0
 80094de:	6399      	str	r1, [r3, #56]	; 0x38
        buffer->marker[type].active = nk_false;
 80094e0:	2200      	movs	r2, #0
 80094e2:	609a      	str	r2, [r3, #8]
 80094e4:	e7ea      	b.n	80094bc <nk_buffer_reset+0x2c>
 80094e6:	bf00      	nop
 80094e8:	0801aca4 	.word	0x0801aca4
 80094ec:	0801acd4 	.word	0x0801acd4
 80094f0:	0801ac4c 	.word	0x0801ac4c

080094f4 <nk_buffer_clear>:
NK_API void
nk_buffer_clear(struct nk_buffer *b)
{
 80094f4:	b508      	push	{r3, lr}
    NK_ASSERT(b);
 80094f6:	b130      	cbz	r0, 8009506 <nk_buffer_clear+0x12>
    if (!b) return;
    b->allocated = 0;
 80094f8:	2200      	movs	r2, #0
 80094fa:	62c2      	str	r2, [r0, #44]	; 0x2c
    b->size = b->memory.size;
 80094fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80094fe:	6381      	str	r1, [r0, #56]	; 0x38
    b->calls = 0;
 8009500:	6342      	str	r2, [r0, #52]	; 0x34
    b->needed = 0;
 8009502:	6302      	str	r2, [r0, #48]	; 0x30
}
 8009504:	bd08      	pop	{r3, pc}
    NK_ASSERT(b);
 8009506:	4b03      	ldr	r3, [pc, #12]	; (8009514 <nk_buffer_clear+0x20>)
 8009508:	4a03      	ldr	r2, [pc, #12]	; (8009518 <nk_buffer_clear+0x24>)
 800950a:	21e3      	movs	r1, #227	; 0xe3
 800950c:	4803      	ldr	r0, [pc, #12]	; (800951c <nk_buffer_clear+0x28>)
 800950e:	f00d f81d 	bl	801654c <__assert_func>
 8009512:	bf00      	nop
 8009514:	0801ac48 	.word	0x0801ac48
 8009518:	0801acc4 	.word	0x0801acc4
 800951c:	0801ac4c 	.word	0x0801ac4c

08009520 <nk_draw_symbol>:
 * ===============================================================*/
NK_LIB void
nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,
    struct nk_rect content, struct nk_color background, struct nk_color foreground,
    float border_width, const struct nk_user_font *font)
{
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	ed2d 8b02 	vpush	{d8}
 8009526:	b096      	sub	sp, #88	; 0x58
 8009528:	4605      	mov	r5, r0
 800952a:	460c      	mov	r4, r1
 800952c:	9203      	str	r2, [sp, #12]
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	ed8d 0a04 	vstr	s0, [sp, #16]
 8009534:	edcd 0a05 	vstr	s1, [sp, #20]
 8009538:	ed8d 1a06 	vstr	s2, [sp, #24]
 800953c:	edcd 1a07 	vstr	s3, [sp, #28]
    switch (type) {
 8009540:	1e4b      	subs	r3, r1, #1
 8009542:	2b0b      	cmp	r3, #11
 8009544:	d830      	bhi.n	80095a8 <nk_draw_symbol+0x88>
 8009546:	e8df f003 	tbb	[pc, r3]
 800954a:	0606      	.short	0x0606
 800954c:	37373737 	.word	0x37373737
 8009550:	7d7d7d7d 	.word	0x7d7d7d7d
 8009554:	0606      	.short	0x0606
    case NK_SYMBOL_X:
    case NK_SYMBOL_UNDERSCORE:
    case NK_SYMBOL_PLUS:
    case NK_SYMBOL_MINUS: {
        /* single character text symbol */
        const char *X = (type == NK_SYMBOL_X) ? "x":
 8009556:	2901      	cmp	r1, #1
 8009558:	d02a      	beq.n	80095b0 <nk_draw_symbol+0x90>
 800955a:	2902      	cmp	r1, #2
 800955c:	d02a      	beq.n	80095b4 <nk_draw_symbol+0x94>
 800955e:	4e4f      	ldr	r6, [pc, #316]	; (800969c <nk_draw_symbol+0x17c>)
 8009560:	4b4f      	ldr	r3, [pc, #316]	; (80096a0 <nk_draw_symbol+0x180>)
 8009562:	290b      	cmp	r1, #11
 8009564:	bf18      	it	ne
 8009566:	461e      	movne	r6, r3
            (type == NK_SYMBOL_UNDERSCORE) ? "_":
            (type == NK_SYMBOL_PLUS) ? "+": "-";
        struct nk_text text;
        text.padding = nk_vec2(0,0);
 8009568:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80096a4 <nk_draw_symbol+0x184>
 800956c:	eef0 0a40 	vmov.f32	s1, s0
 8009570:	f004 f96a 	bl	800d848 <nk_vec2>
 8009574:	ed8d 0a08 	vstr	s0, [sp, #32]
 8009578:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
        text.background = background;
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	930a      	str	r3, [sp, #40]	; 0x28
        text.text = foreground;
 8009580:	9b02      	ldr	r3, [sp, #8]
 8009582:	930b      	str	r3, [sp, #44]	; 0x2c
        nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);
 8009584:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	2312      	movs	r3, #18
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	ab08      	add	r3, sp, #32
 800958e:	2201      	movs	r2, #1
 8009590:	4631      	mov	r1, r6
 8009592:	ed9d 0a04 	vldr	s0, [sp, #16]
 8009596:	eddd 0a05 	vldr	s1, [sp, #20]
 800959a:	ed9d 1a06 	vldr	s2, [sp, #24]
 800959e:	eddd 1a07 	vldr	s3, [sp, #28]
 80095a2:	4628      	mov	r0, r5
 80095a4:	f009 fb46 	bl	8012c34 <nk_widget_text>
    } break;
    default:
    case NK_SYMBOL_NONE:
    case NK_SYMBOL_MAX: break;
    }
}
 80095a8:	b016      	add	sp, #88	; 0x58
 80095aa:	ecbd 8b02 	vpop	{d8}
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
        const char *X = (type == NK_SYMBOL_X) ? "x":
 80095b0:	4e3d      	ldr	r6, [pc, #244]	; (80096a8 <nk_draw_symbol+0x188>)
 80095b2:	e7d9      	b.n	8009568 <nk_draw_symbol+0x48>
 80095b4:	4e3d      	ldr	r6, [pc, #244]	; (80096ac <nk_draw_symbol+0x18c>)
 80095b6:	e7d7      	b.n	8009568 <nk_draw_symbol+0x48>
 80095b8:	eeb0 8a42 	vmov.f32	s16, s4
        if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {
 80095bc:	1f4b      	subs	r3, r1, #5
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d91d      	bls.n	8009600 <nk_draw_symbol+0xe0>
            nk_fill_circle(out, content, foreground);
 80095c4:	9902      	ldr	r1, [sp, #8]
 80095c6:	ed9d 0a04 	vldr	s0, [sp, #16]
 80095ca:	eddd 0a05 	vldr	s1, [sp, #20]
 80095ce:	ed9d 1a06 	vldr	s2, [sp, #24]
 80095d2:	eddd 1a07 	vldr	s3, [sp, #28]
 80095d6:	f001 fdc7 	bl	800b168 <nk_fill_circle>
            if (type == NK_SYMBOL_CIRCLE_OUTLINE)
 80095da:	2c04      	cmp	r4, #4
 80095dc:	d1e4      	bne.n	80095a8 <nk_draw_symbol+0x88>
                nk_fill_circle(out, nk_shrink_rect(content, 1), background);
 80095de:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80095e2:	ed9d 0a04 	vldr	s0, [sp, #16]
 80095e6:	eddd 0a05 	vldr	s1, [sp, #20]
 80095ea:	ed9d 1a06 	vldr	s2, [sp, #24]
 80095ee:	eddd 1a07 	vldr	s3, [sp, #28]
 80095f2:	f004 f90e 	bl	800d812 <nk_shrink_rect>
 80095f6:	9903      	ldr	r1, [sp, #12]
 80095f8:	4628      	mov	r0, r5
 80095fa:	f001 fdb5 	bl	800b168 <nk_fill_circle>
 80095fe:	e7d3      	b.n	80095a8 <nk_draw_symbol+0x88>
            nk_fill_rect(out, content,  0, foreground);
 8009600:	9902      	ldr	r1, [sp, #8]
 8009602:	ed9f 2a28 	vldr	s4, [pc, #160]	; 80096a4 <nk_draw_symbol+0x184>
 8009606:	ed9d 0a04 	vldr	s0, [sp, #16]
 800960a:	eddd 0a05 	vldr	s1, [sp, #20]
 800960e:	ed9d 1a06 	vldr	s2, [sp, #24]
 8009612:	eddd 1a07 	vldr	s3, [sp, #28]
 8009616:	f001 fd1f 	bl	800b058 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800961a:	2c06      	cmp	r4, #6
 800961c:	d1c4      	bne.n	80095a8 <nk_draw_symbol+0x88>
                nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);
 800961e:	eeb0 2a48 	vmov.f32	s4, s16
 8009622:	ed9d 0a04 	vldr	s0, [sp, #16]
 8009626:	eddd 0a05 	vldr	s1, [sp, #20]
 800962a:	ed9d 1a06 	vldr	s2, [sp, #24]
 800962e:	eddd 1a07 	vldr	s3, [sp, #28]
 8009632:	f004 f8ee 	bl	800d812 <nk_shrink_rect>
 8009636:	9903      	ldr	r1, [sp, #12]
 8009638:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 80096a4 <nk_draw_symbol+0x184>
 800963c:	4628      	mov	r0, r5
 800963e:	f001 fd0b 	bl	800b058 <nk_fill_rect>
 8009642:	e7b1      	b.n	80095a8 <nk_draw_symbol+0x88>
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 8009644:	290a      	cmp	r1, #10
 8009646:	d025      	beq.n	8009694 <nk_draw_symbol+0x174>
 8009648:	2909      	cmp	r1, #9
 800964a:	d025      	beq.n	8009698 <nk_draw_symbol+0x178>
 800964c:	3907      	subs	r1, #7
 800964e:	bf18      	it	ne
 8009650:	2101      	movne	r1, #1
 8009652:	0049      	lsls	r1, r1, #1
        nk_triangle_from_direction(points, content, 0, 0, heading);
 8009654:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80096a4 <nk_draw_symbol+0x184>
 8009658:	eef0 2a42 	vmov.f32	s5, s4
 800965c:	ed9d 0a04 	vldr	s0, [sp, #16]
 8009660:	eddd 0a05 	vldr	s1, [sp, #20]
 8009664:	ed9d 1a06 	vldr	s2, [sp, #24]
 8009668:	eddd 1a07 	vldr	s3, [sp, #28]
 800966c:	a808      	add	r0, sp, #32
 800966e:	f004 f955 	bl	800d91c <nk_triangle_from_direction>
        nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
 8009672:	9902      	ldr	r1, [sp, #8]
 8009674:	eddd 2a0d 	vldr	s5, [sp, #52]	; 0x34
 8009678:	ed9d 2a0c 	vldr	s4, [sp, #48]	; 0x30
 800967c:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8009680:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8009684:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8009688:	ed9d 0a08 	vldr	s0, [sp, #32]
 800968c:	4628      	mov	r0, r5
 800968e:	f001 fdeb 	bl	800b268 <nk_fill_triangle>
}
 8009692:	e789      	b.n	80095a8 <nk_draw_symbol+0x88>
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 8009694:	2101      	movs	r1, #1
 8009696:	e7dd      	b.n	8009654 <nk_draw_symbol+0x134>
 8009698:	2103      	movs	r1, #3
 800969a:	e7db      	b.n	8009654 <nk_draw_symbol+0x134>
 800969c:	0801ad14 	.word	0x0801ad14
 80096a0:	0801ad10 	.word	0x0801ad10
 80096a4:	00000000 	.word	0x00000000
 80096a8:	0801ad0c 	.word	0x0801ad0c
 80096ac:	0801ad08 	.word	0x0801ad08

080096b0 <nk_button_behavior>:
NK_LIB nk_bool
nk_button_behavior(nk_flags *state, struct nk_rect r,
    const struct nk_input *i, enum nk_button_behavior behavior)
{
 80096b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b2:	b085      	sub	sp, #20
 80096b4:	ed8d 0a00 	vstr	s0, [sp]
 80096b8:	edcd 0a01 	vstr	s1, [sp, #4]
 80096bc:	ed8d 1a02 	vstr	s2, [sp, #8]
 80096c0:	edcd 1a03 	vstr	s3, [sp, #12]
    int ret = 0;
    nk_widget_state_reset(state);
 80096c4:	6803      	ldr	r3, [r0, #0]
 80096c6:	f013 0f02 	tst.w	r3, #2
 80096ca:	bf14      	ite	ne
 80096cc:	2306      	movne	r3, #6
 80096ce:	2304      	moveq	r3, #4
 80096d0:	6003      	str	r3, [r0, #0]
    if (!i) return 0;
 80096d2:	2900      	cmp	r1, #0
 80096d4:	d052      	beq.n	800977c <nk_button_behavior+0xcc>
 80096d6:	4604      	mov	r4, r0
 80096d8:	4616      	mov	r6, r2
 80096da:	460d      	mov	r5, r1
    if (nk_input_is_mouse_hovering_rect(i, r)) {
 80096dc:	4608      	mov	r0, r1
 80096de:	f003 fb33 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 80096e2:	4607      	mov	r7, r0
 80096e4:	b9a0      	cbnz	r0, 8009710 <nk_button_behavior+0x60>
#else
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
#endif
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	f013 0f10 	tst.w	r3, #16
 80096ec:	d035      	beq.n	800975a <nk_button_behavior+0xaa>
 80096ee:	ed9d 0a00 	vldr	s0, [sp]
 80096f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80096f6:	ed9d 1a02 	vldr	s2, [sp, #8]
 80096fa:	eddd 1a03 	vldr	s3, [sp, #12]
 80096fe:	4628      	mov	r0, r5
 8009700:	f003 fb54 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 8009704:	bb48      	cbnz	r0, 800975a <nk_button_behavior+0xaa>
        *state |= NK_WIDGET_STATE_ENTERED;
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	f043 0308 	orr.w	r3, r3, #8
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	e036      	b.n	800977e <nk_button_behavior+0xce>
        *state = NK_WIDGET_STATE_HOVERED;
 8009710:	2312      	movs	r3, #18
 8009712:	6023      	str	r3, [r4, #0]
        if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))
 8009714:	2100      	movs	r1, #0
 8009716:	4628      	mov	r0, r5
 8009718:	f003 fb7a 	bl	800ce10 <nk_input_is_mouse_down>
 800971c:	b108      	cbz	r0, 8009722 <nk_button_behavior+0x72>
            *state = NK_WIDGET_STATE_ACTIVE;
 800971e:	2322      	movs	r3, #34	; 0x22
 8009720:	6023      	str	r3, [r4, #0]
        if (nk_input_has_mouse_click_in_button_rect(i, NK_BUTTON_LEFT, r)) {
 8009722:	ed9d 0a00 	vldr	s0, [sp]
 8009726:	eddd 0a01 	vldr	s1, [sp, #4]
 800972a:	ed9d 1a02 	vldr	s2, [sp, #8]
 800972e:	eddd 1a03 	vldr	s3, [sp, #12]
 8009732:	2100      	movs	r1, #0
 8009734:	4628      	mov	r0, r5
 8009736:	f003 fa9b 	bl	800cc70 <nk_input_has_mouse_click_in_button_rect>
 800973a:	4607      	mov	r7, r0
 800973c:	2800      	cmp	r0, #0
 800973e:	d0d2      	beq.n	80096e6 <nk_button_behavior+0x36>
                nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
 8009740:	b12e      	cbz	r6, 800974e <nk_button_behavior+0x9e>
 8009742:	2100      	movs	r1, #0
 8009744:	4628      	mov	r0, r5
 8009746:	f003 fb63 	bl	800ce10 <nk_input_is_mouse_down>
 800974a:	4607      	mov	r7, r0
 800974c:	e7cb      	b.n	80096e6 <nk_button_behavior+0x36>
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
 800974e:	2100      	movs	r1, #0
 8009750:	4628      	mov	r0, r5
 8009752:	f003 fb65 	bl	800ce20 <nk_input_is_mouse_pressed>
 8009756:	4607      	mov	r7, r0
 8009758:	e7c5      	b.n	80096e6 <nk_button_behavior+0x36>
    else if (nk_input_is_mouse_prev_hovering_rect(i, r))
 800975a:	ed9d 0a00 	vldr	s0, [sp]
 800975e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009762:	ed9d 1a02 	vldr	s2, [sp, #8]
 8009766:	eddd 1a03 	vldr	s3, [sp, #12]
 800976a:	4628      	mov	r0, r5
 800976c:	f003 fb1e 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 8009770:	b128      	cbz	r0, 800977e <nk_button_behavior+0xce>
        *state |= NK_WIDGET_STATE_LEFT;
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	e000      	b.n	800977e <nk_button_behavior+0xce>
    if (!i) return 0;
 800977c:	2700      	movs	r7, #0
    return ret;
}
 800977e:	4638      	mov	r0, r7
 8009780:	b005      	add	sp, #20
 8009782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009784 <nk_draw_button>:
NK_LIB const struct nk_style_item*
nk_draw_button(struct nk_command_buffer *out,
    const struct nk_rect *bounds, nk_flags state,
    const struct nk_style_button *style)
{
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	4606      	mov	r6, r0
 8009788:	460c      	mov	r4, r1
 800978a:	461d      	mov	r5, r3
    const struct nk_style_item *background;
    if (state & NK_WIDGET_STATE_HOVER)
 800978c:	f012 0f10 	tst.w	r2, #16
 8009790:	d009      	beq.n	80097a6 <nk_draw_button+0x22>
        background = &style->hover;
 8009792:	f103 071c 	add.w	r7, r3, #28
    else if (state & NK_WIDGET_STATE_ACTIVED)
        background = &style->active;
    else background = &style->normal;

    switch(background->type) {
 8009796:	783b      	ldrb	r3, [r7, #0]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d00b      	beq.n	80097b4 <nk_draw_button+0x30>
 800979c:	2b02      	cmp	r3, #2
 800979e:	d018      	beq.n	80097d2 <nk_draw_button+0x4e>
 80097a0:	b333      	cbz	r3, 80097f0 <nk_draw_button+0x6c>
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
            break;
    }
    return background;
}
 80097a2:	4638      	mov	r0, r7
 80097a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (state & NK_WIDGET_STATE_ACTIVED)
 80097a6:	f012 0f20 	tst.w	r2, #32
        background = &style->active;
 80097aa:	bf14      	ite	ne
 80097ac:	f103 0738 	addne.w	r7, r3, #56	; 0x38
    else background = &style->normal;
 80097b0:	461f      	moveq	r7, r3
 80097b2:	e7f0      	b.n	8009796 <nk_draw_button+0x12>
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 80097b4:	4b1e      	ldr	r3, [pc, #120]	; (8009830 <nk_draw_button+0xac>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	1d39      	adds	r1, r7, #4
 80097ba:	ed94 0a00 	vldr	s0, [r4]
 80097be:	edd4 0a01 	vldr	s1, [r4, #4]
 80097c2:	ed94 1a02 	vldr	s2, [r4, #8]
 80097c6:	edd4 1a03 	vldr	s3, [r4, #12]
 80097ca:	4630      	mov	r0, r6
 80097cc:	f001 fdfe 	bl	800b3cc <nk_draw_image>
            break;
 80097d0:	e7e7      	b.n	80097a2 <nk_draw_button+0x1e>
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 80097d2:	4b17      	ldr	r3, [pc, #92]	; (8009830 <nk_draw_button+0xac>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	1d39      	adds	r1, r7, #4
 80097d8:	ed94 0a00 	vldr	s0, [r4]
 80097dc:	edd4 0a01 	vldr	s1, [r4, #4]
 80097e0:	ed94 1a02 	vldr	s2, [r4, #8]
 80097e4:	edd4 1a03 	vldr	s3, [r4, #12]
 80097e8:	4630      	mov	r0, r6
 80097ea:	f001 fe73 	bl	800b4d4 <nk_draw_nine_slice>
            break;
 80097ee:	e7d8      	b.n	80097a2 <nk_draw_button+0x1e>
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	ed95 2a1c 	vldr	s4, [r5, #112]	; 0x70
 80097f6:	ed94 0a00 	vldr	s0, [r4]
 80097fa:	edd4 0a01 	vldr	s1, [r4, #4]
 80097fe:	ed94 1a02 	vldr	s2, [r4, #8]
 8009802:	edd4 1a03 	vldr	s3, [r4, #12]
 8009806:	4630      	mov	r0, r6
 8009808:	f001 fc26 	bl	800b058 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 800980c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800980e:	edd5 2a1b 	vldr	s5, [r5, #108]	; 0x6c
 8009812:	ed95 2a1c 	vldr	s4, [r5, #112]	; 0x70
 8009816:	ed94 0a00 	vldr	s0, [r4]
 800981a:	edd4 0a01 	vldr	s1, [r4, #4]
 800981e:	ed94 1a02 	vldr	s2, [r4, #8]
 8009822:	edd4 1a03 	vldr	s3, [r4, #12]
 8009826:	4630      	mov	r0, r6
 8009828:	f001 fb84 	bl	800af34 <nk_stroke_rect>
    return background;
 800982c:	e7b9      	b.n	80097a2 <nk_draw_button+0x1e>
 800982e:	bf00      	nop
 8009830:	0801ae28 	.word	0x0801ae28

08009834 <nk_do_button>:
NK_LIB nk_bool
nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,
    const struct nk_style_button *style, const struct nk_input *in,
    enum nk_button_behavior behavior, struct nk_rect *content)
{
 8009834:	b530      	push	{r4, r5, lr}
 8009836:	b089      	sub	sp, #36	; 0x24
 8009838:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    struct nk_rect bounds;
    NK_ASSERT(style);
 800983a:	2a00      	cmp	r2, #0
 800983c:	d05b      	beq.n	80098f6 <nk_do_button+0xc2>
 800983e:	460d      	mov	r5, r1
 8009840:	4619      	mov	r1, r3
    NK_ASSERT(state);
 8009842:	2800      	cmp	r0, #0
 8009844:	d05d      	beq.n	8009902 <nk_do_button+0xce>
    NK_ASSERT(out);
 8009846:	2d00      	cmp	r5, #0
 8009848:	d061      	beq.n	800990e <nk_do_button+0xda>
    if (!out || !style)
        return nk_false;

    /* calculate button content space */
    content->x = r.x + style->padding.x + style->border + style->rounding;
 800984a:	edd2 7a1d 	vldr	s15, [r2, #116]	; 0x74
 800984e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009852:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8009856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800985a:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
 800985e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009862:	edc4 7a00 	vstr	s15, [r4]
    content->y = r.y + style->padding.y + style->border + style->rounding;
 8009866:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 800986a:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800986e:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8009872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009876:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
 800987a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800987e:	edc4 7a01 	vstr	s15, [r4, #4]
    content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);
 8009882:	edd2 7a1d 	vldr	s15, [r2, #116]	; 0x74
 8009886:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800988a:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 800988e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009892:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
 8009896:	ee37 7a07 	vadd.f32	s14, s14, s14
 800989a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800989e:	ee71 7a67 	vsub.f32	s15, s2, s15
 80098a2:	edc4 7a02 	vstr	s15, [r4, #8]
    content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);
 80098a6:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 80098aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098ae:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 80098b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098b6:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
 80098ba:	ee37 7a07 	vadd.f32	s14, s14, s14
 80098be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098c2:	ee71 7ae7 	vsub.f32	s15, s3, s15
 80098c6:	edc4 7a03 	vstr	s15, [r4, #12]

    /* execute button behavior */
    bounds.x = r.x - style->touch_padding.x;
 80098ca:	ed92 7a21 	vldr	s14, [r2, #132]	; 0x84
    bounds.y = r.y - style->touch_padding.y;
 80098ce:	edd2 7a22 	vldr	s15, [r2, #136]	; 0x88
    bounds.w = r.w + 2 * style->touch_padding.x;
 80098d2:	ee37 6a07 	vadd.f32	s12, s14, s14
    bounds.h = r.h + 2 * style->touch_padding.y;
 80098d6:	ee77 6aa7 	vadd.f32	s13, s15, s15
    return nk_button_behavior(state, bounds, in, behavior);
 80098da:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80098de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80098e2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80098e6:	ee36 1a01 	vadd.f32	s2, s12, s2
 80098ea:	ee76 1aa1 	vadd.f32	s3, s13, s3
 80098ee:	f7ff fedf 	bl	80096b0 <nk_button_behavior>
}
 80098f2:	b009      	add	sp, #36	; 0x24
 80098f4:	bd30      	pop	{r4, r5, pc}
    NK_ASSERT(style);
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <nk_do_button+0xe8>)
 80098f8:	4a09      	ldr	r2, [pc, #36]	; (8009920 <nk_do_button+0xec>)
 80098fa:	2179      	movs	r1, #121	; 0x79
 80098fc:	4809      	ldr	r0, [pc, #36]	; (8009924 <nk_do_button+0xf0>)
 80098fe:	f00c fe25 	bl	801654c <__assert_func>
    NK_ASSERT(state);
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <nk_do_button+0xf4>)
 8009904:	4a06      	ldr	r2, [pc, #24]	; (8009920 <nk_do_button+0xec>)
 8009906:	217a      	movs	r1, #122	; 0x7a
 8009908:	4806      	ldr	r0, [pc, #24]	; (8009924 <nk_do_button+0xf0>)
 800990a:	f00c fe1f 	bl	801654c <__assert_func>
    NK_ASSERT(out);
 800990e:	4b07      	ldr	r3, [pc, #28]	; (800992c <nk_do_button+0xf8>)
 8009910:	4a03      	ldr	r2, [pc, #12]	; (8009920 <nk_do_button+0xec>)
 8009912:	217b      	movs	r1, #123	; 0x7b
 8009914:	4803      	ldr	r0, [pc, #12]	; (8009924 <nk_do_button+0xf0>)
 8009916:	f00c fe19 	bl	801654c <__assert_func>
 800991a:	bf00      	nop
 800991c:	0801ad18 	.word	0x0801ad18
 8009920:	0801adc4 	.word	0x0801adc4
 8009924:	0801ad20 	.word	0x0801ad20
 8009928:	0801ad3c 	.word	0x0801ad3c
 800992c:	0801ad44 	.word	0x0801ad44

08009930 <nk_draw_button_text>:
NK_LIB void
nk_draw_button_text(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content, nk_flags state,
    const struct nk_style_button *style, const char *txt, int len,
    nk_flags text_alignment, const struct nk_user_font *font)
{
 8009930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009932:	b087      	sub	sp, #28
 8009934:	4606      	mov	r6, r0
 8009936:	4614      	mov	r4, r2
 8009938:	461d      	mov	r5, r3
 800993a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    struct nk_text text;
    const struct nk_style_item *background;
    background = nk_draw_button(out, bounds, state, style);
 800993c:	463b      	mov	r3, r7
 800993e:	462a      	mov	r2, r5
 8009940:	f7ff ff20 	bl	8009784 <nk_draw_button>

    /* select correct colors/images */
    if (background->type == NK_STYLE_ITEM_COLOR)
 8009944:	7803      	ldrb	r3, [r0, #0]
 8009946:	bb23      	cbnz	r3, 8009992 <nk_draw_button_text+0x62>
        text.background = background->data.color;
 8009948:	6843      	ldr	r3, [r0, #4]
 800994a:	9304      	str	r3, [sp, #16]
    else text.background = style->text_background;
    if (state & NK_WIDGET_STATE_HOVER)
 800994c:	f015 0f10 	tst.w	r5, #16
 8009950:	d022      	beq.n	8009998 <nk_draw_button_text+0x68>
        text.text = style->text_hover;
 8009952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009954:	9305      	str	r3, [sp, #20]
    else if (state & NK_WIDGET_STATE_ACTIVED)
        text.text = style->text_active;
    else text.text = style->text_normal;

    text.padding = nk_vec2(0,0);
 8009956:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80099a8 <nk_draw_button_text+0x78>
 800995a:	eef0 0a40 	vmov.f32	s1, s0
 800995e:	f003 ff73 	bl	800d848 <nk_vec2>
 8009962:	ed8d 0a02 	vstr	s0, [sp, #8]
 8009966:	edcd 0a03 	vstr	s1, [sp, #12]
    nk_widget_text(out, *content, txt, len, &text, text_alignment, font);
 800996a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	ab02      	add	r3, sp, #8
 8009974:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009976:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009978:	ed94 0a00 	vldr	s0, [r4]
 800997c:	edd4 0a01 	vldr	s1, [r4, #4]
 8009980:	ed94 1a02 	vldr	s2, [r4, #8]
 8009984:	edd4 1a03 	vldr	s3, [r4, #12]
 8009988:	4630      	mov	r0, r6
 800998a:	f009 f953 	bl	8012c34 <nk_widget_text>
}
 800998e:	b007      	add	sp, #28
 8009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else text.background = style->text_background;
 8009992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	e7d9      	b.n	800994c <nk_draw_button_text+0x1c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 8009998:	f015 0f20 	tst.w	r5, #32
        text.text = style->text_active;
 800999c:	bf14      	ite	ne
 800999e:	6e7b      	ldrne	r3, [r7, #100]	; 0x64
    else text.text = style->text_normal;
 80099a0:	6dfb      	ldreq	r3, [r7, #92]	; 0x5c
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	e7d7      	b.n	8009956 <nk_draw_button_text+0x26>
 80099a6:	bf00      	nop
 80099a8:	00000000 	.word	0x00000000

080099ac <nk_do_button_text>:
nk_do_button_text(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    const char *string, int len, nk_flags align, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	b08e      	sub	sp, #56	; 0x38
 80099b2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80099b4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80099b8:	ed8d 0a06 	vstr	s0, [sp, #24]
 80099bc:	edcd 0a07 	vstr	s1, [sp, #28]
 80099c0:	ed8d 1a08 	vstr	s2, [sp, #32]
 80099c4:	edcd 1a09 	vstr	s3, [sp, #36]	; 0x24
    struct nk_rect content;
    int ret = nk_false;

    NK_ASSERT(state);
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d03e      	beq.n	8009a4a <nk_do_button_text+0x9e>
 80099cc:	460c      	mov	r4, r1
 80099ce:	4616      	mov	r6, r2
 80099d0:	461f      	mov	r7, r3
 80099d2:	4681      	mov	r9, r0
    NK_ASSERT(style);
 80099d4:	2d00      	cmp	r5, #0
 80099d6:	d03e      	beq.n	8009a56 <nk_do_button_text+0xaa>
    NK_ASSERT(out);
 80099d8:	2900      	cmp	r1, #0
 80099da:	d042      	beq.n	8009a62 <nk_do_button_text+0xb6>
    NK_ASSERT(string);
 80099dc:	2a00      	cmp	r2, #0
 80099de:	d046      	beq.n	8009a6e <nk_do_button_text+0xc2>
    NK_ASSERT(font);
 80099e0:	f1ba 0f00 	cmp.w	sl, #0
 80099e4:	d049      	beq.n	8009a7a <nk_do_button_text+0xce>
    if (!out || !style || !font || !string)
        return nk_false;

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 80099e6:	ab0a      	add	r3, sp, #40	; 0x28
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099f2:	462a      	mov	r2, r5
 80099f4:	ed9d 0a06 	vldr	s0, [sp, #24]
 80099f8:	eddd 0a07 	vldr	s1, [sp, #28]
 80099fc:	ed9d 1a08 	vldr	s2, [sp, #32]
 8009a00:	eddd 1a09 	vldr	s3, [sp, #36]	; 0x24
 8009a04:	f7ff ff16 	bl	8009834 <nk_do_button>
 8009a08:	4680      	mov	r8, r0
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8009a0a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8009a0e:	b11b      	cbz	r3, 8009a18 <nk_do_button_text+0x6c>
 8009a10:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8009a14:	4620      	mov	r0, r4
 8009a16:	4798      	blx	r3
    nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);
 8009a18:	f8cd a010 	str.w	sl, [sp, #16]
 8009a1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	9702      	str	r7, [sp, #8]
 8009a22:	9601      	str	r6, [sp, #4]
 8009a24:	9500      	str	r5, [sp, #0]
 8009a26:	f8d9 3000 	ldr.w	r3, [r9]
 8009a2a:	aa0a      	add	r2, sp, #40	; 0x28
 8009a2c:	a906      	add	r1, sp, #24
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f7ff ff7e 	bl	8009930 <nk_draw_button_text>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8009a34:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009a38:	b11b      	cbz	r3, 8009a42 <nk_do_button_text+0x96>
 8009a3a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4798      	blx	r3
    return ret;
}
 8009a42:	4640      	mov	r0, r8
 8009a44:	b00e      	add	sp, #56	; 0x38
 8009a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NK_ASSERT(state);
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <nk_do_button_text+0xdc>)
 8009a4c:	4a0f      	ldr	r2, [pc, #60]	; (8009a8c <nk_do_button_text+0xe0>)
 8009a4e:	21ad      	movs	r1, #173	; 0xad
 8009a50:	480f      	ldr	r0, [pc, #60]	; (8009a90 <nk_do_button_text+0xe4>)
 8009a52:	f00c fd7b 	bl	801654c <__assert_func>
    NK_ASSERT(style);
 8009a56:	4b0f      	ldr	r3, [pc, #60]	; (8009a94 <nk_do_button_text+0xe8>)
 8009a58:	4a0c      	ldr	r2, [pc, #48]	; (8009a8c <nk_do_button_text+0xe0>)
 8009a5a:	21ae      	movs	r1, #174	; 0xae
 8009a5c:	480c      	ldr	r0, [pc, #48]	; (8009a90 <nk_do_button_text+0xe4>)
 8009a5e:	f00c fd75 	bl	801654c <__assert_func>
    NK_ASSERT(out);
 8009a62:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <nk_do_button_text+0xec>)
 8009a64:	4a09      	ldr	r2, [pc, #36]	; (8009a8c <nk_do_button_text+0xe0>)
 8009a66:	21af      	movs	r1, #175	; 0xaf
 8009a68:	4809      	ldr	r0, [pc, #36]	; (8009a90 <nk_do_button_text+0xe4>)
 8009a6a:	f00c fd6f 	bl	801654c <__assert_func>
    NK_ASSERT(string);
 8009a6e:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <nk_do_button_text+0xf0>)
 8009a70:	4a06      	ldr	r2, [pc, #24]	; (8009a8c <nk_do_button_text+0xe0>)
 8009a72:	21b0      	movs	r1, #176	; 0xb0
 8009a74:	4806      	ldr	r0, [pc, #24]	; (8009a90 <nk_do_button_text+0xe4>)
 8009a76:	f00c fd69 	bl	801654c <__assert_func>
    NK_ASSERT(font);
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <nk_do_button_text+0xf4>)
 8009a7c:	4a03      	ldr	r2, [pc, #12]	; (8009a8c <nk_do_button_text+0xe0>)
 8009a7e:	21b1      	movs	r1, #177	; 0xb1
 8009a80:	4803      	ldr	r0, [pc, #12]	; (8009a90 <nk_do_button_text+0xe4>)
 8009a82:	f00c fd63 	bl	801654c <__assert_func>
 8009a86:	bf00      	nop
 8009a88:	0801ad3c 	.word	0x0801ad3c
 8009a8c:	0801adb0 	.word	0x0801adb0
 8009a90:	0801ad20 	.word	0x0801ad20
 8009a94:	0801ad18 	.word	0x0801ad18
 8009a98:	0801ad44 	.word	0x0801ad44
 8009a9c:	0801ad48 	.word	0x0801ad48
 8009aa0:	0801ad50 	.word	0x0801ad50

08009aa4 <nk_draw_button_symbol>:
NK_LIB void
nk_draw_button_symbol(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content,
    nk_flags state, const struct nk_style_button *style,
    enum nk_symbol_type type, const struct nk_user_font *font)
{
 8009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	4614      	mov	r4, r2
 8009aac:	461d      	mov	r5, r3
 8009aae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    struct nk_color sym, bg;
    const struct nk_style_item *background;

    /* select correct colors/images */
    background = nk_draw_button(out, bounds, state, style);
 8009ab0:	463b      	mov	r3, r7
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	f7ff fe66 	bl	8009784 <nk_draw_button>
    if (background->type == NK_STYLE_ITEM_COLOR)
 8009ab8:	7803      	ldrb	r3, [r0, #0]
 8009aba:	b9db      	cbnz	r3, 8009af4 <nk_draw_button_symbol+0x50>
        bg = background->data.color;
 8009abc:	6843      	ldr	r3, [r0, #4]
 8009abe:	9302      	str	r3, [sp, #8]
    else bg = style->text_background;

    if (state & NK_WIDGET_STATE_HOVER)
 8009ac0:	f015 0f10 	tst.w	r5, #16
 8009ac4:	d019      	beq.n	8009afa <nk_draw_button_symbol+0x56>
        sym = style->text_hover;
 8009ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ac8:	9303      	str	r3, [sp, #12]
    else if (state & NK_WIDGET_STATE_ACTIVED)
        sym = style->text_active;
    else sym = style->text_normal;
    nk_draw_symbol(out, type, *content, bg, sym, 1, font);
 8009aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	9a02      	ldr	r2, [sp, #8]
 8009ad6:	ed94 0a00 	vldr	s0, [r4]
 8009ada:	edd4 0a01 	vldr	s1, [r4, #4]
 8009ade:	ed94 1a02 	vldr	s2, [r4, #8]
 8009ae2:	edd4 1a03 	vldr	s3, [r4, #12]
 8009ae6:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff fd18 	bl	8009520 <nk_draw_symbol>
}
 8009af0:	b005      	add	sp, #20
 8009af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else bg = style->text_background;
 8009af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009af6:	9302      	str	r3, [sp, #8]
 8009af8:	e7e2      	b.n	8009ac0 <nk_draw_button_symbol+0x1c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 8009afa:	f015 0f20 	tst.w	r5, #32
        sym = style->text_active;
 8009afe:	bf14      	ite	ne
 8009b00:	6e7b      	ldrne	r3, [r7, #100]	; 0x64
    else sym = style->text_normal;
 8009b02:	6dfb      	ldreq	r3, [r7, #92]	; 0x5c
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	e7e0      	b.n	8009aca <nk_draw_button_symbol+0x26>

08009b08 <nk_do_button_symbol>:
nk_do_button_symbol(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    enum nk_symbol_type symbol, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 8009b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b0c:	b08d      	sub	sp, #52	; 0x34
 8009b0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009b10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009b14:	ed8d 0a04 	vstr	s0, [sp, #16]
 8009b18:	edcd 0a05 	vstr	s1, [sp, #20]
 8009b1c:	ed8d 1a06 	vstr	s2, [sp, #24]
 8009b20:	edcd 1a07 	vstr	s3, [sp, #28]
    int ret;
    struct nk_rect content;

    NK_ASSERT(state);
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d036      	beq.n	8009b96 <nk_do_button_symbol+0x8e>
 8009b28:	460c      	mov	r4, r1
 8009b2a:	4616      	mov	r6, r2
 8009b2c:	4681      	mov	r9, r0
    NK_ASSERT(style);
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	d037      	beq.n	8009ba2 <nk_do_button_symbol+0x9a>
    NK_ASSERT(font);
 8009b32:	f1b8 0f00 	cmp.w	r8, #0
 8009b36:	d03a      	beq.n	8009bae <nk_do_button_symbol+0xa6>
    NK_ASSERT(out);
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	d03e      	beq.n	8009bba <nk_do_button_symbol+0xb2>
    if (!out || !style || !font || !state)
        return nk_false;

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 8009b3c:	aa08      	add	r2, sp, #32
 8009b3e:	9201      	str	r2, [sp, #4]
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b44:	462a      	mov	r2, r5
 8009b46:	ed9d 0a04 	vldr	s0, [sp, #16]
 8009b4a:	eddd 0a05 	vldr	s1, [sp, #20]
 8009b4e:	ed9d 1a06 	vldr	s2, [sp, #24]
 8009b52:	eddd 1a07 	vldr	s3, [sp, #28]
 8009b56:	f7ff fe6d 	bl	8009834 <nk_do_button>
 8009b5a:	4607      	mov	r7, r0
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8009b5c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8009b60:	b11b      	cbz	r3, 8009b6a <nk_do_button_symbol+0x62>
 8009b62:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8009b66:	4620      	mov	r0, r4
 8009b68:	4798      	blx	r3
    nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);
 8009b6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009b6e:	9601      	str	r6, [sp, #4]
 8009b70:	9500      	str	r5, [sp, #0]
 8009b72:	f8d9 3000 	ldr.w	r3, [r9]
 8009b76:	aa08      	add	r2, sp, #32
 8009b78:	a904      	add	r1, sp, #16
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7ff ff92 	bl	8009aa4 <nk_draw_button_symbol>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8009b80:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009b84:	b11b      	cbz	r3, 8009b8e <nk_do_button_symbol+0x86>
 8009b86:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4798      	blx	r3
    return ret;
}
 8009b8e:	4638      	mov	r0, r7
 8009b90:	b00d      	add	sp, #52	; 0x34
 8009b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NK_ASSERT(state);
 8009b96:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <nk_do_button_symbol+0xc0>)
 8009b98:	4a0c      	ldr	r2, [pc, #48]	; (8009bcc <nk_do_button_symbol+0xc4>)
 8009b9a:	21db      	movs	r1, #219	; 0xdb
 8009b9c:	480c      	ldr	r0, [pc, #48]	; (8009bd0 <nk_do_button_symbol+0xc8>)
 8009b9e:	f00c fcd5 	bl	801654c <__assert_func>
    NK_ASSERT(style);
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <nk_do_button_symbol+0xcc>)
 8009ba4:	4a09      	ldr	r2, [pc, #36]	; (8009bcc <nk_do_button_symbol+0xc4>)
 8009ba6:	21dc      	movs	r1, #220	; 0xdc
 8009ba8:	4809      	ldr	r0, [pc, #36]	; (8009bd0 <nk_do_button_symbol+0xc8>)
 8009baa:	f00c fccf 	bl	801654c <__assert_func>
    NK_ASSERT(font);
 8009bae:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <nk_do_button_symbol+0xd0>)
 8009bb0:	4a06      	ldr	r2, [pc, #24]	; (8009bcc <nk_do_button_symbol+0xc4>)
 8009bb2:	21dd      	movs	r1, #221	; 0xdd
 8009bb4:	4806      	ldr	r0, [pc, #24]	; (8009bd0 <nk_do_button_symbol+0xc8>)
 8009bb6:	f00c fcc9 	bl	801654c <__assert_func>
    NK_ASSERT(out);
 8009bba:	4b08      	ldr	r3, [pc, #32]	; (8009bdc <nk_do_button_symbol+0xd4>)
 8009bbc:	4a03      	ldr	r2, [pc, #12]	; (8009bcc <nk_do_button_symbol+0xc4>)
 8009bbe:	21de      	movs	r1, #222	; 0xde
 8009bc0:	4803      	ldr	r0, [pc, #12]	; (8009bd0 <nk_do_button_symbol+0xc8>)
 8009bc2:	f00c fcc3 	bl	801654c <__assert_func>
 8009bc6:	bf00      	nop
 8009bc8:	0801ad3c 	.word	0x0801ad3c
 8009bcc:	0801ad9c 	.word	0x0801ad9c
 8009bd0:	0801ad20 	.word	0x0801ad20
 8009bd4:	0801ad18 	.word	0x0801ad18
 8009bd8:	0801ad50 	.word	0x0801ad50
 8009bdc:	0801ad44 	.word	0x0801ad44

08009be0 <nk_button_set_behavior>:
    if (style->draw_end) style->draw_end(out, style->userdata);
    return ret;
}
NK_API void
nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)
{
 8009be0:	b508      	push	{r3, lr}
    NK_ASSERT(ctx);
 8009be2:	b120      	cbz	r0, 8009bee <nk_button_set_behavior+0xe>
    if (!ctx) return;
    ctx->button_behavior = behavior;
 8009be4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8009be8:	f883 1ad8 	strb.w	r1, [r3, #2776]	; 0xad8
}
 8009bec:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 8009bee:	4b03      	ldr	r3, [pc, #12]	; (8009bfc <nk_button_set_behavior+0x1c>)
 8009bf0:	4a03      	ldr	r2, [pc, #12]	; (8009c00 <nk_button_set_behavior+0x20>)
 8009bf2:	f240 118b 	movw	r1, #395	; 0x18b
 8009bf6:	4803      	ldr	r0, [pc, #12]	; (8009c04 <nk_button_set_behavior+0x24>)
 8009bf8:	f00c fca8 	bl	801654c <__assert_func>
 8009bfc:	0801ad58 	.word	0x0801ad58
 8009c00:	0801ad84 	.word	0x0801ad84
 8009c04:	0801ad20 	.word	0x0801ad20

08009c08 <nk_button_text_styled>:
    return 1;
}
NK_API nk_bool
nk_button_text_styled(struct nk_context *ctx,
    const struct nk_style_button *style, const char *title, int len)
{
 8009c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c0c:	b08b      	sub	sp, #44	; 0x2c
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d03f      	beq.n	8009c92 <nk_button_text_styled+0x8a>
 8009c12:	460d      	mov	r5, r1
 8009c14:	4616      	mov	r6, r2
 8009c16:	4699      	mov	r9, r3
 8009c18:	4604      	mov	r4, r0
    NK_ASSERT(style);
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	d040      	beq.n	8009ca0 <nk_button_text_styled+0x98>
    NK_ASSERT(ctx->current);
 8009c1e:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8009c22:	f8d3 7658 	ldr.w	r7, [r3, #1624]	; 0x658
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	d041      	beq.n	8009cae <nk_button_text_styled+0xa6>
    NK_ASSERT(ctx->current->layout);
 8009c2a:	f8d7 808c 	ldr.w	r8, [r7, #140]	; 0x8c
 8009c2e:	f1b8 0f00 	cmp.w	r8, #0
 8009c32:	d043      	beq.n	8009cbc <nk_button_text_styled+0xb4>
    if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;

    win = ctx->current;
    layout = win->layout;
    state = nk_widget(&bounds, ctx);
 8009c34:	4601      	mov	r1, r0
 8009c36:	a806      	add	r0, sp, #24
 8009c38:	f00b fdb4 	bl	80157a4 <nk_widget>

    if (!state) return 0;
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d046      	beq.n	8009cce <nk_button_text_styled+0xc6>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8009c40:	2802      	cmp	r0, #2
 8009c42:	d042      	beq.n	8009cca <nk_button_text_styled+0xc2>
 8009c44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c48:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009c4c:	bf0c      	ite	eq
 8009c4e:	4623      	moveq	r3, r4
 8009c50:	2300      	movne	r3, #0
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8009c52:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 8009c56:	9204      	str	r2, [sp, #16]
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	9502      	str	r5, [sp, #8]
 8009c5c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8009c60:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	; 0xad8
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	ed9d 0a06 	vldr	s0, [sp, #24]
 8009c72:	eddd 0a07 	vldr	s1, [sp, #28]
 8009c76:	ed9d 1a08 	vldr	s2, [sp, #32]
 8009c7a:	eddd 1a09 	vldr	s3, [sp, #36]	; 0x24
 8009c7e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8009c82:	f504 50d6 	add.w	r0, r4, #6848	; 0x1ac0
 8009c86:	3014      	adds	r0, #20
 8009c88:	f7ff fe90 	bl	80099ac <nk_do_button_text>
                    title, len, style->text_alignment, ctx->button_behavior,
                    style, in, ctx->style.font);
}
 8009c8c:	b00b      	add	sp, #44	; 0x2c
 8009c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NK_ASSERT(ctx);
 8009c92:	4b10      	ldr	r3, [pc, #64]	; (8009cd4 <nk_button_text_styled+0xcc>)
 8009c94:	4a10      	ldr	r2, [pc, #64]	; (8009cd8 <nk_button_text_styled+0xd0>)
 8009c96:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009c9a:	4810      	ldr	r0, [pc, #64]	; (8009cdc <nk_button_text_styled+0xd4>)
 8009c9c:	f00c fc56 	bl	801654c <__assert_func>
    NK_ASSERT(style);
 8009ca0:	4b0f      	ldr	r3, [pc, #60]	; (8009ce0 <nk_button_text_styled+0xd8>)
 8009ca2:	4a0d      	ldr	r2, [pc, #52]	; (8009cd8 <nk_button_text_styled+0xd0>)
 8009ca4:	f240 11c1 	movw	r1, #449	; 0x1c1
 8009ca8:	480c      	ldr	r0, [pc, #48]	; (8009cdc <nk_button_text_styled+0xd4>)
 8009caa:	f00c fc4f 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 8009cae:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <nk_button_text_styled+0xdc>)
 8009cb0:	4a09      	ldr	r2, [pc, #36]	; (8009cd8 <nk_button_text_styled+0xd0>)
 8009cb2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8009cb6:	4809      	ldr	r0, [pc, #36]	; (8009cdc <nk_button_text_styled+0xd4>)
 8009cb8:	f00c fc48 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <nk_button_text_styled+0xe0>)
 8009cbe:	4a06      	ldr	r2, [pc, #24]	; (8009cd8 <nk_button_text_styled+0xd0>)
 8009cc0:	f240 11c3 	movw	r1, #451	; 0x1c3
 8009cc4:	4805      	ldr	r0, [pc, #20]	; (8009cdc <nk_button_text_styled+0xd4>)
 8009cc6:	f00c fc41 	bl	801654c <__assert_func>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e7c1      	b.n	8009c52 <nk_button_text_styled+0x4a>
    if (!state) return 0;
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e7dc      	b.n	8009c8c <nk_button_text_styled+0x84>
 8009cd2:	bf00      	nop
 8009cd4:	0801ad58 	.word	0x0801ad58
 8009cd8:	0801ae10 	.word	0x0801ae10
 8009cdc:	0801ad20 	.word	0x0801ad20
 8009ce0:	0801ad18 	.word	0x0801ad18
 8009ce4:	0801ad5c 	.word	0x0801ad5c
 8009ce8:	0801ad6c 	.word	0x0801ad6c

08009cec <nk_button_text>:
NK_API nk_bool
nk_button_text(struct nk_context *ctx, const char *title, int len)
{
 8009cec:	b508      	push	{r3, lr}
    NK_ASSERT(ctx);
 8009cee:	b130      	cbz	r0, 8009cfe <nk_button_text+0x12>
 8009cf0:	4613      	mov	r3, r2
    if (!ctx) return 0;
    return nk_button_text_styled(ctx, &ctx->style.button, title, len);
 8009cf2:	460a      	mov	r2, r1
 8009cf4:	f500 71d0 	add.w	r1, r0, #416	; 0x1a0
 8009cf8:	f7ff ff86 	bl	8009c08 <nk_button_text_styled>
}
 8009cfc:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 8009cfe:	4b03      	ldr	r3, [pc, #12]	; (8009d0c <nk_button_text+0x20>)
 8009d00:	4a03      	ldr	r2, [pc, #12]	; (8009d10 <nk_button_text+0x24>)
 8009d02:	f240 11d3 	movw	r1, #467	; 0x1d3
 8009d06:	4803      	ldr	r0, [pc, #12]	; (8009d14 <nk_button_text+0x28>)
 8009d08:	f00c fc20 	bl	801654c <__assert_func>
 8009d0c:	0801ad58 	.word	0x0801ad58
 8009d10:	0801ae00 	.word	0x0801ae00
 8009d14:	0801ad20 	.word	0x0801ad20

08009d18 <nk_button_label>:
    const struct nk_style_button *style, const char *title)
{
    return nk_button_text_styled(ctx, style, title, nk_strlen(title));
}
NK_API nk_bool nk_button_label(struct nk_context *ctx, const char *title)
{
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	460c      	mov	r4, r1
    return nk_button_text(ctx, title, nk_strlen(title));
 8009d1e:	4608      	mov	r0, r1
 8009d20:	f00b f846 	bl	8014db0 <nk_strlen>
 8009d24:	4602      	mov	r2, r0
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f7ff ffdf 	bl	8009cec <nk_button_text>
}
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}

08009d30 <nk_button_symbol_styled>:
    return ret;
}
NK_API nk_bool
nk_button_symbol_styled(struct nk_context *ctx,
    const struct nk_style_button *style, enum nk_symbol_type symbol)
{
 8009d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d34:	b088      	sub	sp, #32
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d037      	beq.n	8009daa <nk_button_symbol_styled+0x7a>
 8009d3a:	4688      	mov	r8, r1
 8009d3c:	4617      	mov	r7, r2
 8009d3e:	4604      	mov	r4, r0
    NK_ASSERT(ctx->current);
 8009d40:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8009d44:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 8009d48:	2d00      	cmp	r5, #0
 8009d4a:	d035      	beq.n	8009db8 <nk_button_symbol_styled+0x88>
    NK_ASSERT(ctx->current->layout);
 8009d4c:	f8d5 608c 	ldr.w	r6, [r5, #140]	; 0x8c
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	d038      	beq.n	8009dc6 <nk_button_symbol_styled+0x96>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return 0;

    win = ctx->current;
    layout = win->layout;
    state = nk_widget(&bounds, ctx);
 8009d54:	4601      	mov	r1, r0
 8009d56:	a804      	add	r0, sp, #16
 8009d58:	f00b fd24 	bl	80157a4 <nk_widget>
    if (!state) return 0;
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d03b      	beq.n	8009dd8 <nk_button_symbol_styled+0xa8>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8009d60:	2802      	cmp	r0, #2
 8009d62:	d037      	beq.n	8009dd4 <nk_button_symbol_styled+0xa4>
 8009d64:	6873      	ldr	r3, [r6, #4]
 8009d66:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009d6a:	bf0c      	ite	eq
 8009d6c:	4622      	moveq	r2, r4
 8009d6e:	2200      	movne	r2, #0
    return nk_do_button_symbol(&ctx->last_widget_state, &win->buffer, bounds,
 8009d70:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8009d74:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
 8009d78:	9102      	str	r1, [sp, #8]
 8009d7a:	9201      	str	r2, [sp, #4]
 8009d7c:	f8cd 8000 	str.w	r8, [sp]
 8009d80:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	; 0xad8
 8009d84:	463a      	mov	r2, r7
 8009d86:	ed9d 0a04 	vldr	s0, [sp, #16]
 8009d8a:	eddd 0a05 	vldr	s1, [sp, #20]
 8009d8e:	ed9d 1a06 	vldr	s2, [sp, #24]
 8009d92:	eddd 1a07 	vldr	s3, [sp, #28]
 8009d96:	f105 0164 	add.w	r1, r5, #100	; 0x64
 8009d9a:	f504 50d6 	add.w	r0, r4, #6848	; 0x1ac0
 8009d9e:	3014      	adds	r0, #20
 8009da0:	f7ff feb2 	bl	8009b08 <nk_do_button_symbol>
            symbol, ctx->button_behavior, style, in, ctx->style.font);
}
 8009da4:	b008      	add	sp, #32
 8009da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(ctx);
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <nk_button_symbol_styled+0xac>)
 8009dac:	4a0c      	ldr	r2, [pc, #48]	; (8009de0 <nk_button_symbol_styled+0xb0>)
 8009dae:	f240 210e 	movw	r1, #526	; 0x20e
 8009db2:	480c      	ldr	r0, [pc, #48]	; (8009de4 <nk_button_symbol_styled+0xb4>)
 8009db4:	f00c fbca 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 8009db8:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <nk_button_symbol_styled+0xb8>)
 8009dba:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <nk_button_symbol_styled+0xb0>)
 8009dbc:	f240 210f 	movw	r1, #527	; 0x20f
 8009dc0:	4808      	ldr	r0, [pc, #32]	; (8009de4 <nk_button_symbol_styled+0xb4>)
 8009dc2:	f00c fbc3 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8009dc6:	4b09      	ldr	r3, [pc, #36]	; (8009dec <nk_button_symbol_styled+0xbc>)
 8009dc8:	4a05      	ldr	r2, [pc, #20]	; (8009de0 <nk_button_symbol_styled+0xb0>)
 8009dca:	f44f 7104 	mov.w	r1, #528	; 0x210
 8009dce:	4805      	ldr	r0, [pc, #20]	; (8009de4 <nk_button_symbol_styled+0xb4>)
 8009dd0:	f00c fbbc 	bl	801654c <__assert_func>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	e7cb      	b.n	8009d70 <nk_button_symbol_styled+0x40>
    if (!state) return 0;
 8009dd8:	2000      	movs	r0, #0
 8009dda:	e7e3      	b.n	8009da4 <nk_button_symbol_styled+0x74>
 8009ddc:	0801ad58 	.word	0x0801ad58
 8009de0:	0801ade8 	.word	0x0801ade8
 8009de4:	0801ad20 	.word	0x0801ad20
 8009de8:	0801ad5c 	.word	0x0801ad5c
 8009dec:	0801ad6c 	.word	0x0801ad6c

08009df0 <nk_button_symbol>:
NK_API nk_bool
nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)
{
 8009df0:	b508      	push	{r3, lr}
    NK_ASSERT(ctx);
 8009df2:	b128      	cbz	r0, 8009e00 <nk_button_symbol+0x10>
 8009df4:	460a      	mov	r2, r1
    if (!ctx) return 0;
    return nk_button_symbol_styled(ctx, &ctx->style.button, symbol);
 8009df6:	f500 71d0 	add.w	r1, r0, #416	; 0x1a0
 8009dfa:	f7ff ff99 	bl	8009d30 <nk_button_symbol_styled>
}
 8009dfe:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 8009e00:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <nk_button_symbol+0x20>)
 8009e02:	4a04      	ldr	r2, [pc, #16]	; (8009e14 <nk_button_symbol+0x24>)
 8009e04:	f240 211f 	movw	r1, #543	; 0x21f
 8009e08:	4803      	ldr	r0, [pc, #12]	; (8009e18 <nk_button_symbol+0x28>)
 8009e0a:	f00c fb9f 	bl	801654c <__assert_func>
 8009e0e:	bf00      	nop
 8009e10:	0801ad58 	.word	0x0801ad58
 8009e14:	0801add4 	.word	0x0801add4
 8009e18:	0801ad20 	.word	0x0801ad20

08009e1c <nk_rgba>:
    }
    return i;
}
NK_API struct nk_color
nk_rgba(int r, int g, int b, int a)
{
 8009e1c:	b082      	sub	sp, #8
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	db04      	blt.n	8009e2c <nk_rgba+0x10>
 8009e22:	28fe      	cmp	r0, #254	; 0xfe
 8009e24:	dc0a      	bgt.n	8009e3c <nk_rgba+0x20>
 8009e26:	fa5f fc80 	uxtb.w	ip, r0
 8009e2a:	e001      	b.n	8009e30 <nk_rgba+0x14>
 8009e2c:	f04f 0c00 	mov.w	ip, #0
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 8009e30:	2900      	cmp	r1, #0
 8009e32:	db06      	blt.n	8009e42 <nk_rgba+0x26>
 8009e34:	29fe      	cmp	r1, #254	; 0xfe
 8009e36:	dc0b      	bgt.n	8009e50 <nk_rgba+0x34>
 8009e38:	b2c9      	uxtb	r1, r1
 8009e3a:	e003      	b.n	8009e44 <nk_rgba+0x28>
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 8009e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009e40:	e7f6      	b.n	8009e30 <nk_rgba+0x14>
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 8009e42:	2100      	movs	r1, #0
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	db05      	blt.n	8009e54 <nk_rgba+0x38>
 8009e48:	2afe      	cmp	r2, #254	; 0xfe
 8009e4a:	dc0a      	bgt.n	8009e62 <nk_rgba+0x46>
 8009e4c:	b2d2      	uxtb	r2, r2
 8009e4e:	e002      	b.n	8009e56 <nk_rgba+0x3a>
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 8009e50:	21ff      	movs	r1, #255	; 0xff
 8009e52:	e7f7      	b.n	8009e44 <nk_rgba+0x28>
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 8009e54:	2200      	movs	r2, #0
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	db05      	blt.n	8009e66 <nk_rgba+0x4a>
 8009e5a:	2bfe      	cmp	r3, #254	; 0xfe
 8009e5c:	dc0f      	bgt.n	8009e7e <nk_rgba+0x62>
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	e002      	b.n	8009e68 <nk_rgba+0x4c>
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 8009e62:	22ff      	movs	r2, #255	; 0xff
 8009e64:	e7f7      	b.n	8009e56 <nk_rgba+0x3a>
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 8009e66:	2300      	movs	r3, #0
    return ret;
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f36c 0007 	bfi	r0, ip, #0, #8
 8009e6e:	f361 200f 	bfi	r0, r1, #8, #8
 8009e72:	f362 4017 	bfi	r0, r2, #16, #8
 8009e76:	f363 601f 	bfi	r0, r3, #24, #8
}
 8009e7a:	b002      	add	sp, #8
 8009e7c:	4770      	bx	lr
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 8009e7e:	23ff      	movs	r3, #255	; 0xff
 8009e80:	e7f2      	b.n	8009e68 <nk_rgba+0x4c>

08009e82 <nk_rgb>:
{
    return nk_rgba(c[0], c[1], c[2], c[3]);
}
NK_API struct nk_color
nk_rgb(int r, int g, int b)
{
 8009e82:	b082      	sub	sp, #8
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 8009e84:	2800      	cmp	r0, #0
 8009e86:	db03      	blt.n	8009e90 <nk_rgb+0xe>
 8009e88:	28fe      	cmp	r0, #254	; 0xfe
 8009e8a:	dc08      	bgt.n	8009e9e <nk_rgb+0x1c>
 8009e8c:	b2c3      	uxtb	r3, r0
 8009e8e:	e000      	b.n	8009e92 <nk_rgb+0x10>
 8009e90:	2300      	movs	r3, #0
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 8009e92:	2900      	cmp	r1, #0
 8009e94:	db05      	blt.n	8009ea2 <nk_rgb+0x20>
 8009e96:	29fe      	cmp	r1, #254	; 0xfe
 8009e98:	dc0a      	bgt.n	8009eb0 <nk_rgb+0x2e>
 8009e9a:	b2c9      	uxtb	r1, r1
 8009e9c:	e002      	b.n	8009ea4 <nk_rgb+0x22>
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 8009e9e:	23ff      	movs	r3, #255	; 0xff
 8009ea0:	e7f7      	b.n	8009e92 <nk_rgb+0x10>
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 8009ea2:	2100      	movs	r1, #0
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	db05      	blt.n	8009eb4 <nk_rgb+0x32>
 8009ea8:	2afe      	cmp	r2, #254	; 0xfe
 8009eaa:	dc0f      	bgt.n	8009ecc <nk_rgb+0x4a>
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	e002      	b.n	8009eb6 <nk_rgb+0x34>
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 8009eb0:	21ff      	movs	r1, #255	; 0xff
 8009eb2:	e7f7      	b.n	8009ea4 <nk_rgb+0x22>
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 8009eb4:	2200      	movs	r2, #0
    ret.a = (nk_byte)255;
    return ret;
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	f363 0007 	bfi	r0, r3, #0, #8
 8009ebc:	f361 200f 	bfi	r0, r1, #8, #8
 8009ec0:	f362 4017 	bfi	r0, r2, #16, #8
}
 8009ec4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8009ec8:	b002      	add	sp, #8
 8009eca:	4770      	bx	lr
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 8009ecc:	22ff      	movs	r2, #255	; 0xff
 8009ece:	e7f2      	b.n	8009eb6 <nk_rgb+0x34>

08009ed0 <nk_combo_begin>:
 *
 * ===============================================================*/
NK_INTERN nk_bool
nk_combo_begin(struct nk_context *ctx, struct nk_window *win,
    struct nk_vec2 size, nk_bool is_clicked, struct nk_rect header)
{
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	b08e      	sub	sp, #56	; 0x38
 8009ed4:	ed8d 0a04 	vstr	s0, [sp, #16]
 8009ed8:	edcd 0a05 	vstr	s1, [sp, #20]
 8009edc:	ed8d 1a00 	vstr	s2, [sp]
 8009ee0:	edcd 1a01 	vstr	s3, [sp, #4]
 8009ee4:	ed8d 2a02 	vstr	s4, [sp, #8]
 8009ee8:	edcd 2a03 	vstr	s5, [sp, #12]
    int is_open = 0;
    int is_active = 0;
    struct nk_rect body;
    nk_hash hash;

    NK_ASSERT(ctx);
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d040      	beq.n	8009f72 <nk_combo_begin+0xa2>
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	4605      	mov	r5, r0
    NK_ASSERT(ctx->current);
 8009ef4:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8009ef8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d03e      	beq.n	8009f7e <nk_combo_begin+0xae>
    NK_ASSERT(ctx->current->layout);
 8009f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d040      	beq.n	8009f8a <nk_combo_begin+0xba>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return 0;

    popup = win->popup.win;
 8009f08:	f8d1 10fc 	ldr.w	r1, [r1, #252]	; 0xfc
    body.x = header.x;
 8009f0c:	ed8d 1a06 	vstr	s2, [sp, #24]
    body.w = size.x;
 8009f10:	9b04      	ldr	r3, [sp, #16]
 8009f12:	9308      	str	r3, [sp, #32]
    body.y = header.y + header.h-ctx->style.window.combo_border;
 8009f14:	ee71 1aa2 	vadd.f32	s3, s3, s5
 8009f18:	f500 53d0 	add.w	r3, r0, #6656	; 0x1a00
 8009f1c:	edd3 7a07 	vldr	s15, [r3, #28]
 8009f20:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8009f24:	edcd 1a07 	vstr	s3, [sp, #28]
    body.h = size.y;
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	9309      	str	r3, [sp, #36]	; 0x24

    hash = win->popup.combo_count++;
 8009f2c:	f8d4 6120 	ldr.w	r6, [r4, #288]	; 0x120
 8009f30:	1c73      	adds	r3, r6, #1
 8009f32:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    is_open = (popup) ? nk_true:nk_false;
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d05c      	beq.n	8009ff4 <nk_combo_begin+0x124>
 8009f3a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009f3e:	429e      	cmp	r6, r3
 8009f40:	d029      	beq.n	8009f96 <nk_combo_begin+0xc6>
 8009f42:	2000      	movs	r0, #0
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 8009f44:	b382      	cbz	r2, 8009fa8 <nk_combo_begin+0xd8>
 8009f46:	b389      	cbz	r1, 8009fac <nk_combo_begin+0xdc>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d051      	beq.n	8009ff0 <nk_combo_begin+0x120>
        (!is_open && !is_active && !is_clicked)) return 0;
    if (!nk_nonblock_begin(ctx, 0, body,
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 8009f4c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a000 <nk_combo_begin+0x130>
 8009f50:	eef0 1a40 	vmov.f32	s3, s0
 8009f54:	eeb0 1a40 	vmov.f32	s2, s0
 8009f58:	eef0 0a40 	vmov.f32	s1, s0
 8009f5c:	f003 fc56 	bl	800d80c <nk_rect>
 8009f60:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 8009f64:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c
 8009f68:	ed8d 1a0c 	vstr	s2, [sp, #48]	; 0x30
 8009f6c:	edcd 1a0d 	vstr	s3, [sp, #52]	; 0x34
    if (!nk_nonblock_begin(ctx, 0, body,
 8009f70:	e022      	b.n	8009fb8 <nk_combo_begin+0xe8>
    NK_ASSERT(ctx);
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <nk_combo_begin+0x134>)
 8009f74:	4a24      	ldr	r2, [pc, #144]	; (800a008 <nk_combo_begin+0x138>)
 8009f76:	2113      	movs	r1, #19
 8009f78:	4824      	ldr	r0, [pc, #144]	; (800a00c <nk_combo_begin+0x13c>)
 8009f7a:	f00c fae7 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 8009f7e:	4b24      	ldr	r3, [pc, #144]	; (800a010 <nk_combo_begin+0x140>)
 8009f80:	4a21      	ldr	r2, [pc, #132]	; (800a008 <nk_combo_begin+0x138>)
 8009f82:	2114      	movs	r1, #20
 8009f84:	4821      	ldr	r0, [pc, #132]	; (800a00c <nk_combo_begin+0x13c>)
 8009f86:	f00c fae1 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8009f8a:	4b22      	ldr	r3, [pc, #136]	; (800a014 <nk_combo_begin+0x144>)
 8009f8c:	4a1e      	ldr	r2, [pc, #120]	; (800a008 <nk_combo_begin+0x138>)
 8009f8e:	2115      	movs	r1, #21
 8009f90:	481e      	ldr	r0, [pc, #120]	; (800a00c <nk_combo_begin+0x13c>)
 8009f92:	f00c fadb 	bl	801654c <__assert_func>
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 8009f96:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
 8009f9a:	2820      	cmp	r0, #32
 8009f9c:	bf14      	ite	ne
 8009f9e:	2000      	movne	r0, #0
 8009fa0:	2001      	moveq	r0, #1
 8009fa2:	e7cf      	b.n	8009f44 <nk_combo_begin+0x74>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	e7ce      	b.n	8009f46 <nk_combo_begin+0x76>
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 8009fa8:	b339      	cbz	r1, 8009ffa <nk_combo_begin+0x12a>
 8009faa:	b308      	cbz	r0, 8009ff0 <nk_combo_begin+0x120>
    if (!nk_nonblock_begin(ctx, 0, body,
 8009fac:	466b      	mov	r3, sp
 8009fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009fb0:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8009fb4:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 8009fb8:	2220      	movs	r2, #32
 8009fba:	ed9d 2a0a 	vldr	s4, [sp, #40]	; 0x28
 8009fbe:	eddd 2a0b 	vldr	s5, [sp, #44]	; 0x2c
 8009fc2:	ed9d 3a0c 	vldr	s6, [sp, #48]	; 0x30
 8009fc6:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 8009fca:	ed9d 0a06 	vldr	s0, [sp, #24]
 8009fce:	eddd 0a07 	vldr	s1, [sp, #28]
 8009fd2:	ed9d 1a08 	vldr	s2, [sp, #32]
 8009fd6:	eddd 1a09 	vldr	s3, [sp, #36]	; 0x24
 8009fda:	2100      	movs	r1, #0
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f005 f893 	bl	800f108 <nk_nonblock_begin>
 8009fe2:	b128      	cbz	r0, 8009ff0 <nk_combo_begin+0x120>

    win->popup.type = NK_PANEL_COMBO;
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    win->popup.name = hash;
 8009fea:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
    return 1;
 8009fee:	2001      	movs	r0, #1
}
 8009ff0:	b00e      	add	sp, #56	; 0x38
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 8009ff4:	2a00      	cmp	r2, #0
 8009ff6:	d1d5      	bne.n	8009fa4 <nk_combo_begin+0xd4>
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 8009ff8:	4610      	mov	r0, r2
        (!is_open && !is_active && !is_clicked)) return 0;
 8009ffa:	4310      	orrs	r0, r2
 8009ffc:	d0f8      	beq.n	8009ff0 <nk_combo_begin+0x120>
 8009ffe:	e7d5      	b.n	8009fac <nk_combo_begin+0xdc>
 800a000:	00000000 	.word	0x00000000
 800a004:	0801ad58 	.word	0x0801ad58
 800a008:	0801ae68 	.word	0x0801ae68
 800a00c:	0801ae2c 	.word	0x0801ae2c
 800a010:	0801ad5c 	.word	0x0801ad5c
 800a014:	0801ad6c 	.word	0x0801ad6c

0800a018 <nk_combo_begin_text>:
NK_API nk_bool
nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,
    struct nk_vec2 size)
{
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	b09d      	sub	sp, #116	; 0x74
 800a01e:	ed8d 0a06 	vstr	s0, [sp, #24]
 800a022:	edcd 0a07 	vstr	s1, [sp, #28]
    int is_clicked = nk_false;
    struct nk_rect header;
    const struct nk_style_item *background;
    struct nk_text text;

    NK_ASSERT(ctx);
 800a026:	2800      	cmp	r0, #0
 800a028:	f000 810b 	beq.w	800a242 <nk_combo_begin_text+0x22a>
 800a02c:	460e      	mov	r6, r1
 800a02e:	4617      	mov	r7, r2
 800a030:	4604      	mov	r4, r0
    NK_ASSERT(selected);
 800a032:	2900      	cmp	r1, #0
 800a034:	f000 810b 	beq.w	800a24e <nk_combo_begin_text+0x236>
    NK_ASSERT(ctx->current);
 800a038:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800a03c:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 800a040:	2d00      	cmp	r5, #0
 800a042:	f000 810a 	beq.w	800a25a <nk_combo_begin_text+0x242>
    NK_ASSERT(ctx->current->layout);
 800a046:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 810b 	beq.w	800a266 <nk_combo_begin_text+0x24e>
    if (!ctx || !ctx->current || !ctx->current->layout || !selected)
        return 0;

    win = ctx->current;
    style = &ctx->style;
    s = nk_widget(&header, ctx);
 800a050:	4601      	mov	r1, r0
 800a052:	a818      	add	r0, sp, #96	; 0x60
 800a054:	f00b fba6 	bl	80157a4 <nk_widget>
    if (s == NK_WIDGET_INVALID)
 800a058:	2800      	cmp	r0, #0
 800a05a:	f000 81b1 	beq.w	800a3c0 <nk_combo_begin_text+0x3a8>
        return 0;

    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 800a05e:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800a062:	6852      	ldr	r2, [r2, #4]
 800a064:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800a068:	f040 8103 	bne.w	800a272 <nk_combo_begin_text+0x25a>
 800a06c:	2802      	cmp	r0, #2
 800a06e:	bf14      	ite	ne
 800a070:	4621      	movne	r1, r4
 800a072:	2100      	moveq	r1, #0
    if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))
 800a074:	2200      	movs	r2, #0
 800a076:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 800a07a:	eddd 0a19 	vldr	s1, [sp, #100]	; 0x64
 800a07e:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
 800a082:	eddd 1a1b 	vldr	s3, [sp, #108]	; 0x6c
 800a086:	f504 50d6 	add.w	r0, r4, #6848	; 0x1ac0
 800a08a:	3014      	adds	r0, #20
 800a08c:	f7ff fb10 	bl	80096b0 <nk_button_behavior>
 800a090:	4681      	mov	r9, r0
 800a092:	f1b0 0800 	subs.w	r8, r0, #0
 800a096:	bf18      	it	ne
 800a098:	f04f 0801 	movne.w	r8, #1
        is_clicked = nk_true;

    /* draw combo box header background and border */
    if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {
 800a09c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a0a0:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800a0a4:	f013 0f20 	tst.w	r3, #32
 800a0a8:	f000 80e5 	beq.w	800a276 <nk_combo_begin_text+0x25e>
        background = &style->combo.active;
 800a0ac:	f504 5ab9 	add.w	sl, r4, #5920	; 0x1720
        text.text = style->combo.label_active;
 800a0b0:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a0b4:	f8d3 2748 	ldr.w	r2, [r3, #1864]	; 0x748
 800a0b8:	9217      	str	r2, [sp, #92]	; 0x5c
    } else {
        background = &style->combo.normal;
        text.text = style->combo.label_normal;
    }

    switch(background->type) {
 800a0ba:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	f000 8132 	beq.w	800a328 <nk_combo_begin_text+0x310>
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	f000 8147 	beq.w	800a358 <nk_combo_begin_text+0x340>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80e8 	beq.w	800a2a0 <nk_combo_begin_text+0x288>
        struct nk_rect button;
        struct nk_rect content;
        int draw_button_symbol;

        enum nk_symbol_type sym;
        if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)
 800a0d0:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a0d4:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800a0d8:	f013 0f10 	tst.w	r3, #16
 800a0dc:	f000 811c 	beq.w	800a318 <nk_combo_begin_text+0x300>
            sym = style->combo.sym_hover;
 800a0e0:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a0e4:	f893 a7f1 	ldrb.w	sl, [r3, #2033]	; 0x7f1

        /* represents whether or not the combo's button symbol should be drawn */
        draw_button_symbol = sym != NK_SYMBOL_NONE;

        /* calculate button */
        button.w = header.h - 2 * style->combo.button_padding.y;
 800a0e8:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 800a0ec:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
 800a0f0:	f609 0308 	addw	r3, r9, #2056	; 0x808
 800a0f4:	edd3 6a00 	vldr	s13, [r3]
 800a0f8:	ee36 7aa6 	vadd.f32	s14, s13, s13
 800a0fc:	ee36 7a47 	vsub.f32	s14, s12, s14
 800a100:	ed8d 7a0e 	vstr	s14, [sp, #56]	; 0x38
        button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;
 800a104:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 800a108:	eddd 5a1a 	vldr	s11, [sp, #104]	; 0x68
 800a10c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a110:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a114:	f609 0304 	addw	r3, r9, #2052	; 0x804
 800a118:	ed93 6a00 	vldr	s12, [r3]
 800a11c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a120:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
        button.y = header.y + style->combo.button_padding.y;
 800a124:	ed9d 6a19 	vldr	s12, [sp, #100]	; 0x64
 800a128:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a12c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
        button.h = button.w;
 800a130:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c

        content.x = button.x + style->combo.button.padding.x;
 800a134:	f209 73cc 	addw	r3, r9, #1996	; 0x7cc
 800a138:	ed93 6a00 	vldr	s12, [r3]
 800a13c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a140:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
        content.y = button.y + style->combo.button.padding.y;
 800a144:	f509 63fa 	add.w	r3, r9, #2000	; 0x7d0
 800a148:	edd3 7a00 	vldr	s15, [r3]
 800a14c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a150:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
        content.w = button.w - 2 * style->combo.button.padding.x;
 800a154:	ee36 6a06 	vadd.f32	s12, s12, s12
 800a158:	ee37 6a46 	vsub.f32	s12, s14, s12
 800a15c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
        content.h = button.h - 2 * style->combo.button.padding.y;
 800a160:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a164:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a168:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c

        /* draw selected label */
        text.padding = nk_vec2(0,0);
 800a16c:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a3c4 <nk_combo_begin_text+0x3ac>
 800a170:	eef0 0a40 	vmov.f32	s1, s0
 800a174:	f003 fb68 	bl	800d848 <nk_vec2>
 800a178:	ed8d 0a14 	vstr	s0, [sp, #80]	; 0x50
 800a17c:	edcd 0a15 	vstr	s1, [sp, #84]	; 0x54
        label.x = header.x + style->combo.content_padding.x;
 800a180:	f209 79fc 	addw	r9, r9, #2044	; 0x7fc
 800a184:	ed99 7a00 	vldr	s14, [r9]
 800a188:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 800a18c:	ee37 0a00 	vadd.f32	s0, s14, s0
        label.y = header.y + style->combo.content_padding.y;
 800a190:	f504 53c0 	add.w	r3, r4, #6144	; 0x1800
 800a194:	edd3 7a00 	vldr	s15, [r3]
 800a198:	eddd 6a19 	vldr	s13, [sp, #100]	; 0x64
 800a19c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a1a0:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
        label.h = header.h - 2 * style->combo.content_padding.y;
 800a1a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1a8:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 800a1ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1b0:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
        if (draw_button_symbol)
 800a1b4:	f1ba 0f00 	cmp.w	sl, #0
 800a1b8:	f000 80eb 	beq.w	800a392 <nk_combo_begin_text+0x37a>
            label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;
 800a1bc:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
 800a1c0:	f609 030c 	addw	r3, r9, #2060	; 0x80c
 800a1c4:	edd3 7a00 	vldr	s15, [r3]
 800a1c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1cc:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 800a1d0:	ee31 1a47 	vsub.f32	s2, s2, s14
        else
            label.w = header.w - 2 * style->combo.content_padding.x;
        nk_widget_text(&win->buffer, label, selected, len, &text,
 800a1d4:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800a1d8:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	2311      	movs	r3, #17
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	ab14      	add	r3, sp, #80	; 0x50
 800a1e4:	463a      	mov	r2, r7
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800a1ec:	ee31 1a40 	vsub.f32	s2, s2, s0
 800a1f0:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	f008 fd1d 	bl	8012c34 <nk_widget_text>
            NK_TEXT_LEFT, ctx->style.font);

        /* draw open/close button */
        if (draw_button_symbol)
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800a1fa:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 800a1fe:	9302      	str	r3, [sp, #8]
 800a200:	f8cd a004 	str.w	sl, [sp, #4]
                &ctx->style.combo.button, sym, style->font);
 800a204:	f504 53ba 	add.w	r3, r4, #5952	; 0x1740
 800a208:	3318      	adds	r3, #24
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	f8d9 3ad4 	ldr.w	r3, [r9, #2772]	; 0xad4
 800a210:	aa10      	add	r2, sp, #64	; 0x40
 800a212:	a90c      	add	r1, sp, #48	; 0x30
 800a214:	4630      	mov	r0, r6
 800a216:	f7ff fc45 	bl	8009aa4 <nk_draw_button_symbol>
    }
    return nk_combo_begin(ctx, win, size, is_clicked, header);
 800a21a:	ed9d 1a18 	vldr	s2, [sp, #96]	; 0x60
 800a21e:	eddd 1a19 	vldr	s3, [sp, #100]	; 0x64
 800a222:	ed9d 2a1a 	vldr	s4, [sp, #104]	; 0x68
 800a226:	eddd 2a1b 	vldr	s5, [sp, #108]	; 0x6c
 800a22a:	4642      	mov	r2, r8
 800a22c:	ed9d 0a06 	vldr	s0, [sp, #24]
 800a230:	eddd 0a07 	vldr	s1, [sp, #28]
 800a234:	4629      	mov	r1, r5
 800a236:	4620      	mov	r0, r4
 800a238:	f7ff fe4a 	bl	8009ed0 <nk_combo_begin>
}
 800a23c:	b01d      	add	sp, #116	; 0x74
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NK_ASSERT(ctx);
 800a242:	4b61      	ldr	r3, [pc, #388]	; (800a3c8 <nk_combo_begin_text+0x3b0>)
 800a244:	4a61      	ldr	r2, [pc, #388]	; (800a3cc <nk_combo_begin_text+0x3b4>)
 800a246:	2139      	movs	r1, #57	; 0x39
 800a248:	4861      	ldr	r0, [pc, #388]	; (800a3d0 <nk_combo_begin_text+0x3b8>)
 800a24a:	f00c f97f 	bl	801654c <__assert_func>
    NK_ASSERT(selected);
 800a24e:	4b61      	ldr	r3, [pc, #388]	; (800a3d4 <nk_combo_begin_text+0x3bc>)
 800a250:	4a5e      	ldr	r2, [pc, #376]	; (800a3cc <nk_combo_begin_text+0x3b4>)
 800a252:	213a      	movs	r1, #58	; 0x3a
 800a254:	485e      	ldr	r0, [pc, #376]	; (800a3d0 <nk_combo_begin_text+0x3b8>)
 800a256:	f00c f979 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800a25a:	4b5f      	ldr	r3, [pc, #380]	; (800a3d8 <nk_combo_begin_text+0x3c0>)
 800a25c:	4a5b      	ldr	r2, [pc, #364]	; (800a3cc <nk_combo_begin_text+0x3b4>)
 800a25e:	213b      	movs	r1, #59	; 0x3b
 800a260:	485b      	ldr	r0, [pc, #364]	; (800a3d0 <nk_combo_begin_text+0x3b8>)
 800a262:	f00c f973 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800a266:	4b5d      	ldr	r3, [pc, #372]	; (800a3dc <nk_combo_begin_text+0x3c4>)
 800a268:	4a58      	ldr	r2, [pc, #352]	; (800a3cc <nk_combo_begin_text+0x3b4>)
 800a26a:	213c      	movs	r1, #60	; 0x3c
 800a26c:	4858      	ldr	r0, [pc, #352]	; (800a3d0 <nk_combo_begin_text+0x3b8>)
 800a26e:	f00c f96d 	bl	801654c <__assert_func>
    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 800a272:	2100      	movs	r1, #0
 800a274:	e6fe      	b.n	800a074 <nk_combo_begin_text+0x5c>
    } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {
 800a276:	f013 0f10 	tst.w	r3, #16
 800a27a:	d03c      	beq.n	800a2f6 <nk_combo_begin_text+0x2de>
        background = &style->combo.hover;
 800a27c:	f504 5ab8 	add.w	sl, r4, #5888	; 0x1700
 800a280:	f10a 0a04 	add.w	sl, sl, #4
        text.text = style->combo.label_hover;
 800a284:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a288:	f8d3 2744 	ldr.w	r2, [r3, #1860]	; 0x744
 800a28c:	9217      	str	r2, [sp, #92]	; 0x5c
    switch(background->type) {
 800a28e:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 800a292:	2b01      	cmp	r3, #1
 800a294:	d048      	beq.n	800a328 <nk_combo_begin_text+0x310>
 800a296:	2b02      	cmp	r3, #2
 800a298:	d05e      	beq.n	800a358 <nk_combo_begin_text+0x340>
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f47f af20 	bne.w	800a0e0 <nk_combo_begin_text+0xc8>
            text.background = background->data.color;
 800a2a0:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a2a4:	9116      	str	r1, [sp, #88]	; 0x58
            nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);
 800a2a6:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a2aa:	f504 5a80 	add.w	sl, r4, #4096	; 0x1000
 800a2ae:	f50a 6bff 	add.w	fp, sl, #2040	; 0x7f8
 800a2b2:	ed9b 2a00 	vldr	s4, [fp]
 800a2b6:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 800a2ba:	eddd 0a19 	vldr	s1, [sp, #100]	; 0x64
 800a2be:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
 800a2c2:	eddd 1a1b 	vldr	s3, [sp, #108]	; 0x6c
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fec5 	bl	800b058 <nk_fill_rect>
            nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);
 800a2ce:	f20a 73f4 	addw	r3, sl, #2036	; 0x7f4
 800a2d2:	f8da 173c 	ldr.w	r1, [sl, #1852]	; 0x73c
 800a2d6:	edd3 2a00 	vldr	s5, [r3]
 800a2da:	ed9b 2a00 	vldr	s4, [fp]
 800a2de:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 800a2e2:	eddd 0a19 	vldr	s1, [sp, #100]	; 0x64
 800a2e6:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
 800a2ea:	eddd 1a1b 	vldr	s3, [sp, #108]	; 0x6c
 800a2ee:	9805      	ldr	r0, [sp, #20]
 800a2f0:	f000 fe20 	bl	800af34 <nk_stroke_rect>
            break;
 800a2f4:	e6ec      	b.n	800a0d0 <nk_combo_begin_text+0xb8>
        background = &style->combo.normal;
 800a2f6:	f504 5ab7 	add.w	sl, r4, #5856	; 0x16e0
 800a2fa:	f10a 0a08 	add.w	sl, sl, #8
        text.text = style->combo.label_normal;
 800a2fe:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a302:	f8d3 2740 	ldr.w	r2, [r3, #1856]	; 0x740
 800a306:	9217      	str	r2, [sp, #92]	; 0x5c
    switch(background->type) {
 800a308:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d00b      	beq.n	800a328 <nk_combo_begin_text+0x310>
 800a310:	2b02      	cmp	r3, #2
 800a312:	d021      	beq.n	800a358 <nk_combo_begin_text+0x340>
 800a314:	2b00      	cmp	r3, #0
 800a316:	d0c3      	beq.n	800a2a0 <nk_combo_begin_text+0x288>
        else if (is_clicked)
 800a318:	f1b9 0f00 	cmp.w	r9, #0
 800a31c:	d034      	beq.n	800a388 <nk_combo_begin_text+0x370>
            sym = style->combo.sym_active;
 800a31e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a322:	f893 a7f2 	ldrb.w	sl, [r3, #2034]	; 0x7f2
 800a326:	e6df      	b.n	800a0e8 <nk_combo_begin_text+0xd0>
            text.background = nk_rgba(0, 0, 0, 0);
 800a328:	2300      	movs	r3, #0
 800a32a:	461a      	mov	r2, r3
 800a32c:	4619      	mov	r1, r3
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fd74 	bl	8009e1c <nk_rgba>
 800a334:	9016      	str	r0, [sp, #88]	; 0x58
            nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 800a336:	4b2a      	ldr	r3, [pc, #168]	; (800a3e0 <nk_combo_begin_text+0x3c8>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	f10a 0104 	add.w	r1, sl, #4
 800a33e:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 800a342:	eddd 0a19 	vldr	s1, [sp, #100]	; 0x64
 800a346:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
 800a34a:	eddd 1a1b 	vldr	s3, [sp, #108]	; 0x6c
 800a34e:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800a352:	f001 f83b 	bl	800b3cc <nk_draw_image>
            break;
 800a356:	e6bb      	b.n	800a0d0 <nk_combo_begin_text+0xb8>
            text.background = nk_rgba(0, 0, 0, 0);
 800a358:	2300      	movs	r3, #0
 800a35a:	461a      	mov	r2, r3
 800a35c:	4619      	mov	r1, r3
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff fd5c 	bl	8009e1c <nk_rgba>
 800a364:	9016      	str	r0, [sp, #88]	; 0x58
            nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 800a366:	4b1e      	ldr	r3, [pc, #120]	; (800a3e0 <nk_combo_begin_text+0x3c8>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	f10a 0104 	add.w	r1, sl, #4
 800a36e:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 800a372:	eddd 0a19 	vldr	s1, [sp, #100]	; 0x64
 800a376:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
 800a37a:	eddd 1a1b 	vldr	s3, [sp, #108]	; 0x6c
 800a37e:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800a382:	f001 f8a7 	bl	800b4d4 <nk_draw_nine_slice>
            break;
 800a386:	e6a3      	b.n	800a0d0 <nk_combo_begin_text+0xb8>
            sym = style->combo.sym_normal;
 800a388:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a38c:	f893 a7f0 	ldrb.w	sl, [r3, #2032]	; 0x7f0
 800a390:	e6aa      	b.n	800a0e8 <nk_combo_begin_text+0xd0>
            label.w = header.w - 2 * style->combo.content_padding.x;
 800a392:	ee37 7a07 	vadd.f32	s14, s14, s14
        nk_widget_text(&win->buffer, label, selected, len, &text,
 800a396:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	2311      	movs	r3, #17
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	ab14      	add	r3, sp, #80	; 0x50
 800a3a2:	463a      	mov	r2, r7
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800a3aa:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
 800a3ae:	ee31 1a47 	vsub.f32	s2, s2, s14
 800a3b2:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 800a3b6:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800a3ba:	f008 fc3b 	bl	8012c34 <nk_widget_text>
        if (draw_button_symbol)
 800a3be:	e72c      	b.n	800a21a <nk_combo_begin_text+0x202>
        return 0;
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e73b      	b.n	800a23c <nk_combo_begin_text+0x224>
 800a3c4:	00000000 	.word	0x00000000
 800a3c8:	0801ad58 	.word	0x0801ad58
 800a3cc:	0801ae78 	.word	0x0801ae78
 800a3d0:	0801ae2c 	.word	0x0801ae2c
 800a3d4:	0801ae48 	.word	0x0801ae48
 800a3d8:	0801ad5c 	.word	0x0801ad5c
 800a3dc:	0801ad6c 	.word	0x0801ad6c
 800a3e0:	0801ae8c 	.word	0x0801ae8c

0800a3e4 <nk_combo_begin_label>:
NK_API nk_bool
nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)
{
 800a3e4:	b530      	push	{r4, r5, lr}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	ed8d 0a00 	vstr	s0, [sp]
 800a3f0:	edcd 0a01 	vstr	s1, [sp, #4]
    return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	f00a fcdb 	bl	8014db0 <nk_strlen>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	ed9d 0a00 	vldr	s0, [sp]
 800a400:	eddd 0a01 	vldr	s1, [sp, #4]
 800a404:	4621      	mov	r1, r4
 800a406:	4628      	mov	r0, r5
 800a408:	f7ff fe06 	bl	800a018 <nk_combo_begin_text>
}
 800a40c:	b003      	add	sp, #12
 800a40e:	bd30      	pop	{r4, r5, pc}

0800a410 <nk_combo>:
    nk_contextual_close(ctx);
}
NK_API int
nk_combo(struct nk_context *ctx, const char **items, int count,
    int selected, int item_height, struct nk_vec2 size)
{
 800a410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a414:	ed2d 8b04 	vpush	{d8-d9}
 800a418:	b085      	sub	sp, #20
 800a41a:	ed8d 0a00 	vstr	s0, [sp]
 800a41e:	edcd 0a01 	vstr	s1, [sp, #4]
    int i = 0;
    int max_height;
    struct nk_vec2 item_spacing;
    struct nk_vec2 window_padding;

    NK_ASSERT(ctx);
 800a422:	b190      	cbz	r0, 800a44a <nk_combo+0x3a>
 800a424:	460c      	mov	r4, r1
 800a426:	4616      	mov	r6, r2
 800a428:	461d      	mov	r5, r3
 800a42a:	eeb0 8a60 	vmov.f32	s16, s1
 800a42e:	4680      	mov	r8, r0
    NK_ASSERT(items);
 800a430:	b191      	cbz	r1, 800a458 <nk_combo+0x48>
    NK_ASSERT(ctx->current);
 800a432:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800a436:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800a43a:	b1a3      	cbz	r3, 800a466 <nk_combo+0x56>
    if (!ctx || !items ||!count)
 800a43c:	b9d2      	cbnz	r2, 800a474 <nk_combo+0x64>
                selected = i;
        }
        nk_combo_end(ctx);
    }
    return selected;
}
 800a43e:	4628      	mov	r0, r5
 800a440:	b005      	add	sp, #20
 800a442:	ecbd 8b04 	vpop	{d8-d9}
 800a446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NK_ASSERT(ctx);
 800a44a:	4b31      	ldr	r3, [pc, #196]	; (800a510 <nk_combo+0x100>)
 800a44c:	4a31      	ldr	r2, [pc, #196]	; (800a514 <nk_combo+0x104>)
 800a44e:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800a452:	4831      	ldr	r0, [pc, #196]	; (800a518 <nk_combo+0x108>)
 800a454:	f00c f87a 	bl	801654c <__assert_func>
    NK_ASSERT(items);
 800a458:	4b30      	ldr	r3, [pc, #192]	; (800a51c <nk_combo+0x10c>)
 800a45a:	4a2e      	ldr	r2, [pc, #184]	; (800a514 <nk_combo+0x104>)
 800a45c:	f240 21c1 	movw	r1, #705	; 0x2c1
 800a460:	482d      	ldr	r0, [pc, #180]	; (800a518 <nk_combo+0x108>)
 800a462:	f00c f873 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800a466:	4b2e      	ldr	r3, [pc, #184]	; (800a520 <nk_combo+0x110>)
 800a468:	4a2a      	ldr	r2, [pc, #168]	; (800a514 <nk_combo+0x104>)
 800a46a:	f240 21c2 	movw	r1, #706	; 0x2c2
 800a46e:	482a      	ldr	r0, [pc, #168]	; (800a518 <nk_combo+0x108>)
 800a470:	f00c f86c 	bl	801654c <__assert_func>
    item_spacing = ctx->style.window.spacing;
 800a474:	f500 52d2 	add.w	r2, r0, #6720	; 0x1a40
 800a478:	edd2 8a00 	vldr	s17, [r2]
    window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);
 800a47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a480:	7819      	ldrb	r1, [r3, #0]
 800a482:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800a486:	f003 fb3e 	bl	800db06 <nk_panel_get_padding>
    max_height = count * item_height + count * (int)item_spacing.y;
 800a48a:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800a48e:	ee17 2a90 	vmov	r2, s15
 800a492:	fb06 f302 	mul.w	r3, r6, r2
 800a496:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a498:	fb01 3306 	mla	r3, r1, r6, r3
    max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;
 800a49c:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800a4a0:	ee10 1a90 	vmov	r1, s1
 800a4a4:	4411      	add	r1, r2
 800a4a6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a4aa:	ee00 3a90 	vmov	s1, r3
    size.y = NK_MIN(size.y, (float)max_height);
 800a4ae:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800a4b2:	eef4 0ac8 	vcmpe.f32	s1, s16
 800a4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (nk_combo_begin_label(ctx, items[selected], size)) {
 800a4ba:	ed9d 0a00 	vldr	s0, [sp]
 800a4be:	bfc8      	it	gt
 800a4c0:	eef0 0a48 	vmovgt.f32	s1, s16
 800a4c4:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	f7ff ff8b 	bl	800a3e4 <nk_combo_begin_label>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d0b5      	beq.n	800a43e <nk_combo+0x2e>
        nk_layout_row_dynamic(ctx, (float)item_height, 1);
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800a4d8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a4dc:	4640      	mov	r0, r8
 800a4de:	f002 fe23 	bl	800d128 <nk_layout_row_dynamic>
        for (i = 0; i < count; ++i) {
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	dd0f      	ble.n	800a506 <nk_combo+0xf6>
 800a4e6:	3c04      	subs	r4, #4
 800a4e8:	2700      	movs	r7, #0
    return nk_contextual_item_label(ctx, label, align);
 800a4ea:	f04f 0911 	mov.w	r9, #17
 800a4ee:	464a      	mov	r2, r9
 800a4f0:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	f000 fbaf 	bl	800ac58 <nk_contextual_item_label>
            if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	bf18      	it	ne
 800a4fe:	463d      	movne	r5, r7
        for (i = 0; i < count; ++i) {
 800a500:	3701      	adds	r7, #1
 800a502:	42be      	cmp	r6, r7
 800a504:	d1f3      	bne.n	800a4ee <nk_combo+0xde>
    nk_contextual_end(ctx);
 800a506:	4640      	mov	r0, r8
 800a508:	f000 fbb4 	bl	800ac74 <nk_contextual_end>
}
 800a50c:	e797      	b.n	800a43e <nk_combo+0x2e>
 800a50e:	bf00      	nop
 800a510:	0801ad58 	.word	0x0801ad58
 800a514:	0801ae5c 	.word	0x0801ae5c
 800a518:	0801ae2c 	.word	0x0801ae2c
 800a51c:	0801ae54 	.word	0x0801ae54
 800a520:	0801ad5c 	.word	0x0801ad5c

0800a524 <nk_setup>:
 *                          CONTEXT
 *
 * ===============================================================*/
NK_INTERN void
nk_setup(struct nk_context *ctx, const struct nk_user_font *font)
{
 800a524:	b538      	push	{r3, r4, r5, lr}
    NK_ASSERT(ctx);
 800a526:	b188      	cbz	r0, 800a54c <nk_setup+0x28>
 800a528:	460c      	mov	r4, r1
 800a52a:	4605      	mov	r5, r0
    if (!ctx) return;
    nk_zero_struct(*ctx);
 800a52c:	f243 6168 	movw	r1, #13928	; 0x3668
 800a530:	f00a fc2a 	bl	8014d88 <nk_zero>
    nk_style_default(ctx);
 800a534:	4628      	mov	r0, r5
 800a536:	f008 fac5 	bl	8012ac4 <nk_style_default>
    ctx->seq = 1;
 800a53a:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 800a53e:	2201      	movs	r2, #1
 800a540:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
    if (font) ctx->style.font = font;
 800a544:	b10c      	cbz	r4, 800a54a <nk_setup+0x26>
 800a546:	f8c5 4168 	str.w	r4, [r5, #360]	; 0x168
#ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
    nk_draw_list_init(&ctx->draw_list);
#endif
}
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
    NK_ASSERT(ctx);
 800a54c:	4b02      	ldr	r3, [pc, #8]	; (800a558 <nk_setup+0x34>)
 800a54e:	4a03      	ldr	r2, [pc, #12]	; (800a55c <nk_setup+0x38>)
 800a550:	210c      	movs	r1, #12
 800a552:	4803      	ldr	r0, [pc, #12]	; (800a560 <nk_setup+0x3c>)
 800a554:	f00b fffa 	bl	801654c <__assert_func>
 800a558:	0801ad58 	.word	0x0801ad58
 800a55c:	0801aee8 	.word	0x0801aee8
 800a560:	0801ae90 	.word	0x0801ae90

0800a564 <nk_init_custom>:
    return 1;
}
NK_API nk_bool
nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,
    struct nk_buffer *pool, const struct nk_user_font *font)
{
 800a564:	b570      	push	{r4, r5, r6, lr}
    NK_ASSERT(cmds);
 800a566:	b351      	cbz	r1, 800a5be <nk_init_custom+0x5a>
 800a568:	4605      	mov	r5, r0
 800a56a:	4616      	mov	r6, r2
 800a56c:	460c      	mov	r4, r1
    NK_ASSERT(pool);
 800a56e:	b362      	cbz	r2, 800a5ca <nk_init_custom+0x66>
    if (!cmds || !pool) return 0;

    nk_setup(ctx, font);
 800a570:	4619      	mov	r1, r3
 800a572:	f7ff ffd7 	bl	800a524 <nk_setup>
    ctx->memory = *cmds;
 800a576:	f505 5ed4 	add.w	lr, r5, #6784	; 0x1a80
 800a57a:	f10e 0e0c 	add.w	lr, lr, #12
 800a57e:	46a4      	mov	ip, r4
 800a580:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a588:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a58c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a590:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a594:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a598:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a59c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    if (pool->type == NK_BUFFER_FIXED) {
 800a5a0:	7f33      	ldrb	r3, [r6, #28]
 800a5a2:	b9c3      	cbnz	r3, 800a5d6 <nk_init_custom+0x72>
        /* take memory from buffer and alloc fixed pool */
        nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);
 800a5a4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a5a6:	6a31      	ldr	r1, [r6, #32]
 800a5a8:	f505 5058 	add.w	r0, r5, #13824	; 0x3600
 800a5ac:	3024      	adds	r0, #36	; 0x24
 800a5ae:	f004 fc23 	bl	800edf8 <nk_pool_init_fixed>
    } else {
        /* create dynamic pool from buffer allocator */
        struct nk_allocator *alloc = &pool->pool;
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
    }
    ctx->use_pool = nk_true;
 800a5b2:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 800a5b6:	2001      	movs	r0, #1
 800a5b8:	f8c5 0620 	str.w	r0, [r5, #1568]	; 0x620
    return 1;
}
 800a5bc:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(cmds);
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <nk_init_custom+0x84>)
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <nk_init_custom+0x88>)
 800a5c2:	2130      	movs	r1, #48	; 0x30
 800a5c4:	480a      	ldr	r0, [pc, #40]	; (800a5f0 <nk_init_custom+0x8c>)
 800a5c6:	f00b ffc1 	bl	801654c <__assert_func>
    NK_ASSERT(pool);
 800a5ca:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <nk_init_custom+0x90>)
 800a5cc:	4a07      	ldr	r2, [pc, #28]	; (800a5ec <nk_init_custom+0x88>)
 800a5ce:	2131      	movs	r1, #49	; 0x31
 800a5d0:	4807      	ldr	r0, [pc, #28]	; (800a5f0 <nk_init_custom+0x8c>)
 800a5d2:	f00b ffbb 	bl	801654c <__assert_func>
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
 800a5d6:	2210      	movs	r2, #16
 800a5d8:	18b1      	adds	r1, r6, r2
 800a5da:	f505 5058 	add.w	r0, r5, #13824	; 0x3600
 800a5de:	3024      	adds	r0, #36	; 0x24
 800a5e0:	f004 fbec 	bl	800edbc <nk_pool_init>
 800a5e4:	e7e5      	b.n	800a5b2 <nk_init_custom+0x4e>
 800a5e6:	bf00      	nop
 800a5e8:	0801aeb0 	.word	0x0801aeb0
 800a5ec:	0801aed8 	.word	0x0801aed8
 800a5f0:	0801ae90 	.word	0x0801ae90
 800a5f4:	0801aeb8 	.word	0x0801aeb8

0800a5f8 <nk_clear>:
    ctx->freelist = 0;
    ctx->count = 0;
}
NK_API void
nk_clear(struct nk_context *ctx)
{
 800a5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct nk_window *iter;
    struct nk_window *next;
    NK_ASSERT(ctx);
 800a5fc:	b348      	cbz	r0, 800a652 <nk_clear+0x5a>
 800a5fe:	4680      	mov	r8, r0

    if (!ctx) return;
    if (ctx->use_pool)
 800a600:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800a604:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800a608:	b34b      	cbz	r3, 800a65e <nk_clear+0x66>
        nk_buffer_clear(&ctx->memory);
 800a60a:	f500 50d4 	add.w	r0, r0, #6784	; 0x1a80
 800a60e:	300c      	adds	r0, #12
 800a610:	f7fe ff70 	bl	80094f4 <nk_buffer_clear>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);

    ctx->build = 0;
 800a614:	f508 5440 	add.w	r4, r8, #12288	; 0x3000
 800a618:	2100      	movs	r1, #0
 800a61a:	f8c4 161c 	str.w	r1, [r4, #1564]	; 0x61c
    ctx->memory.calls = 0;
 800a61e:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 800a622:	f8c3 1ac0 	str.w	r1, [r3, #2752]	; 0xac0
    ctx->last_widget_state = 0;
 800a626:	f8c3 1ad4 	str.w	r1, [r3, #2772]	; 0xad4
    ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 800a62a:	f8d8 316c 	ldr.w	r3, [r8, #364]	; 0x16c
 800a62e:	f8c8 3188 	str.w	r3, [r8, #392]	; 0x188
    NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));
 800a632:	2228      	movs	r2, #40	; 0x28
 800a634:	f508 5057 	add.w	r0, r8, #13760	; 0x35c0
 800a638:	3034      	adds	r0, #52	; 0x34
 800a63a:	f00a fb73 	bl	8014d24 <nk_memset>

    /* garbage collector */
    iter = ctx->begin;
 800a63e:	f8d4 664c 	ldr.w	r6, [r4, #1612]	; 0x64c
    while (iter) {
 800a642:	2e00      	cmp	r6, #0
 800a644:	d07d      	beq.n	800a742 <nk_clear+0x14a>
        }
        /* remove unused window state tables */
        {struct nk_table *n, *it = iter->tables;
        while (it) {
            n = it->next;
            if (it->seq != ctx->seq) {
 800a646:	4627      	mov	r7, r4
                nk_remove_table(iter, it);
                nk_zero(it, sizeof(union nk_page_data));
 800a648:	f44f 79d4 	mov.w	r9, #424	; 0x1a8
            iter->popup.win = 0;
 800a64c:	f04f 0a00 	mov.w	sl, #0
 800a650:	e055      	b.n	800a6fe <nk_clear+0x106>
    NK_ASSERT(ctx);
 800a652:	4b40      	ldr	r3, [pc, #256]	; (800a754 <nk_clear+0x15c>)
 800a654:	4a40      	ldr	r2, [pc, #256]	; (800a758 <nk_clear+0x160>)
 800a656:	2172      	movs	r1, #114	; 0x72
 800a658:	4840      	ldr	r0, [pc, #256]	; (800a75c <nk_clear+0x164>)
 800a65a:	f00b ff77 	bl	801654c <__assert_func>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);
 800a65e:	2100      	movs	r1, #0
 800a660:	f500 50d4 	add.w	r0, r0, #6784	; 0x1a80
 800a664:	300c      	adds	r0, #12
 800a666:	f7fe ff13 	bl	8009490 <nk_buffer_reset>
 800a66a:	e7d3      	b.n	800a614 <nk_clear+0x1c>
            iter = iter->next;
 800a66c:	f8d6 6178 	ldr.w	r6, [r6, #376]	; 0x178
            continue;
 800a670:	e044      	b.n	800a6fc <nk_clear+0x104>
            ctx->active = iter->prev;
 800a672:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
 800a676:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
            ctx->end = iter->prev;
 800a67a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
            if (!ctx->end)
 800a67e:	b123      	cbz	r3, 800a68a <nk_clear+0x92>
                ctx->active->flags &= ~(unsigned)NK_WINDOW_ROM;
 800a680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a686:	649a      	str	r2, [r3, #72]	; 0x48
 800a688:	e04b      	b.n	800a722 <nk_clear+0x12a>
                ctx->begin = 0;
 800a68a:	f8c7 a64c 	str.w	sl, [r7, #1612]	; 0x64c
            if (ctx->active)
 800a68e:	e048      	b.n	800a722 <nk_clear+0x12a>
            nk_free_window(ctx, iter->popup.win);
 800a690:	4640      	mov	r0, r8
 800a692:	f00b f9d0 	bl	8015a36 <nk_free_window>
            iter->popup.win = 0;
 800a696:	f8c6 a0fc 	str.w	sl, [r6, #252]	; 0xfc
 800a69a:	e04a      	b.n	800a732 <nk_clear+0x13a>
        while (it) {
 800a69c:	b1d4      	cbz	r4, 800a6d4 <nk_clear+0xdc>
            n = it->next;
 800a69e:	4625      	mov	r5, r4
 800a6a0:	f8d4 41a0 	ldr.w	r4, [r4, #416]	; 0x1a0
            if (it->seq != ctx->seq) {
 800a6a4:	682a      	ldr	r2, [r5, #0]
 800a6a6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d0f6      	beq.n	800a69c <nk_clear+0xa4>
                nk_remove_table(iter, it);
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f008 fa39 	bl	8012b28 <nk_remove_table>
                nk_zero(it, sizeof(union nk_page_data));
 800a6b6:	4649      	mov	r1, r9
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	f00a fb65 	bl	8014d88 <nk_zero>
                nk_free_table(ctx, it);
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	f008 fa0f 	bl	8012ae4 <nk_free_table>
                if (it == iter->tables)
 800a6c6:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
 800a6ca:	42ab      	cmp	r3, r5
                    iter->tables = n;
 800a6cc:	bf08      	it	eq
 800a6ce:	f8c6 4170 	streq.w	r4, [r6, #368]	; 0x170
 800a6d2:	e7e3      	b.n	800a69c <nk_clear+0xa4>
            } it = n;
        }}
        /* window itself is not used anymore so free */
        if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {
 800a6d4:	6832      	ldr	r2, [r6, #0]
 800a6d6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d103      	bne.n	800a6e6 <nk_clear+0xee>
 800a6de:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800a6e0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a6e4:	d02a      	beq.n	800a73c <nk_clear+0x144>
            next = iter->next;
 800a6e6:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
            nk_remove_window(ctx, iter);
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	f00b fa73 	bl	8015bd8 <nk_remove_window>
            nk_free_window(ctx, iter);
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	f00b f99e 	bl	8015a36 <nk_free_window>
            iter = next;
 800a6fa:	4626      	mov	r6, r4
    while (iter) {
 800a6fc:	b30e      	cbz	r6, 800a742 <nk_clear+0x14a>
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 800a6fe:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800a700:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800a704:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a708:	d104      	bne.n	800a714 <nk_clear+0x11c>
            !(iter->flags & NK_WINDOW_CLOSED) &&
 800a70a:	6831      	ldr	r1, [r6, #0]
 800a70c:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 800a710:	4291      	cmp	r1, r2
 800a712:	d0ab      	beq.n	800a66c <nk_clear+0x74>
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 800a714:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
 800a718:	d003      	beq.n	800a722 <nk_clear+0x12a>
            (iter->flags & NK_WINDOW_CLOSED)) &&
 800a71a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a71e:	42b3      	cmp	r3, r6
 800a720:	d0a7      	beq.n	800a672 <nk_clear+0x7a>
        if (iter->popup.win && iter->popup.win->seq != ctx->seq) {
 800a722:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 800a726:	b121      	cbz	r1, 800a732 <nk_clear+0x13a>
 800a728:	680a      	ldr	r2, [r1, #0]
 800a72a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a72e:	429a      	cmp	r2, r3
 800a730:	d1ae      	bne.n	800a690 <nk_clear+0x98>
        {struct nk_table *n, *it = iter->tables;
 800a732:	f8d6 4170 	ldr.w	r4, [r6, #368]	; 0x170
        while (it) {
 800a736:	2c00      	cmp	r4, #0
 800a738:	d1b1      	bne.n	800a69e <nk_clear+0xa6>
 800a73a:	e7cb      	b.n	800a6d4 <nk_clear+0xdc>
        } else iter = iter->next;
 800a73c:	f8d6 6178 	ldr.w	r6, [r6, #376]	; 0x178
 800a740:	e7dc      	b.n	800a6fc <nk_clear+0x104>
    }
    ctx->seq++;
 800a742:	f508 5840 	add.w	r8, r8, #12288	; 0x3000
 800a746:	f8d8 3664 	ldr.w	r3, [r8, #1636]	; 0x664
 800a74a:	3301      	adds	r3, #1
 800a74c:	f8c8 3664 	str.w	r3, [r8, #1636]	; 0x664
}
 800a750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a754:	0801ad58 	.word	0x0801ad58
 800a758:	0801af50 	.word	0x0801af50
 800a75c:	0801ae90 	.word	0x0801ae90

0800a760 <nk_start_buffer>:
NK_LIB void
nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 800a760:	b508      	push	{r3, lr}
    NK_ASSERT(ctx);
 800a762:	b170      	cbz	r0, 800a782 <nk_start_buffer+0x22>
    NK_ASSERT(buffer);
 800a764:	b199      	cbz	r1, 800a78e <nk_start_buffer+0x2e>
    if (!ctx || !buffer) return;
    buffer->begin = ctx->memory.allocated;
 800a766:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800a76a:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 800a76e:	61cb      	str	r3, [r1, #28]
    buffer->end = buffer->begin;
 800a770:	620b      	str	r3, [r1, #32]
    buffer->last = buffer->begin;
 800a772:	624b      	str	r3, [r1, #36]	; 0x24
    buffer->clip = nk_null_rect;
 800a774:	4b09      	ldr	r3, [pc, #36]	; (800a79c <nk_start_buffer+0x3c>)
 800a776:	f101 0c04 	add.w	ip, r1, #4
 800a77a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a77c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800a780:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800a782:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <nk_start_buffer+0x40>)
 800a784:	4a07      	ldr	r2, [pc, #28]	; (800a7a4 <nk_start_buffer+0x44>)
 800a786:	21b2      	movs	r1, #178	; 0xb2
 800a788:	4807      	ldr	r0, [pc, #28]	; (800a7a8 <nk_start_buffer+0x48>)
 800a78a:	f00b fedf 	bl	801654c <__assert_func>
    NK_ASSERT(buffer);
 800a78e:	4b07      	ldr	r3, [pc, #28]	; (800a7ac <nk_start_buffer+0x4c>)
 800a790:	4a04      	ldr	r2, [pc, #16]	; (800a7a4 <nk_start_buffer+0x44>)
 800a792:	21b3      	movs	r1, #179	; 0xb3
 800a794:	4804      	ldr	r0, [pc, #16]	; (800a7a8 <nk_start_buffer+0x48>)
 800a796:	f00b fed9 	bl	801654c <__assert_func>
 800a79a:	bf00      	nop
 800a79c:	0801af5c 	.word	0x0801af5c
 800a7a0:	0801ad58 	.word	0x0801ad58
 800a7a4:	0801af40 	.word	0x0801af40
 800a7a8:	0801ae90 	.word	0x0801ae90
 800a7ac:	0801aca4 	.word	0x0801aca4

0800a7b0 <nk_start>:
NK_LIB void
nk_start(struct nk_context *ctx, struct nk_window *win)
{
 800a7b0:	b508      	push	{r3, lr}
    NK_ASSERT(ctx);
 800a7b2:	b120      	cbz	r0, 800a7be <nk_start+0xe>
    NK_ASSERT(win);
 800a7b4:	b149      	cbz	r1, 800a7ca <nk_start+0x1a>
    nk_start_buffer(ctx, &win->buffer);
 800a7b6:	3164      	adds	r1, #100	; 0x64
 800a7b8:	f7ff ffd2 	bl	800a760 <nk_start_buffer>
}
 800a7bc:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800a7be:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <nk_start+0x28>)
 800a7c0:	4a06      	ldr	r2, [pc, #24]	; (800a7dc <nk_start+0x2c>)
 800a7c2:	21bd      	movs	r1, #189	; 0xbd
 800a7c4:	4806      	ldr	r0, [pc, #24]	; (800a7e0 <nk_start+0x30>)
 800a7c6:	f00b fec1 	bl	801654c <__assert_func>
    NK_ASSERT(win);
 800a7ca:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <nk_start+0x34>)
 800a7cc:	4a03      	ldr	r2, [pc, #12]	; (800a7dc <nk_start+0x2c>)
 800a7ce:	21be      	movs	r1, #190	; 0xbe
 800a7d0:	4803      	ldr	r0, [pc, #12]	; (800a7e0 <nk_start+0x30>)
 800a7d2:	f00b febb 	bl	801654c <__assert_func>
 800a7d6:	bf00      	nop
 800a7d8:	0801ad58 	.word	0x0801ad58
 800a7dc:	0801af34 	.word	0x0801af34
 800a7e0:	0801ae90 	.word	0x0801ae90
 800a7e4:	0801bc24 	.word	0x0801bc24

0800a7e8 <nk_start_popup>:
NK_LIB void
nk_start_popup(struct nk_context *ctx, struct nk_window *win)
{
 800a7e8:	b508      	push	{r3, lr}
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 800a7ea:	b180      	cbz	r0, 800a80e <nk_start_popup+0x26>
    NK_ASSERT(win);
 800a7ec:	b1a9      	cbz	r1, 800a81a <nk_start_popup+0x32>
    if (!ctx || !win) return;

    /* save buffer fill state for popup */
    buf = &win->popup.buf;
    buf->begin = win->buffer.end;
 800a7ee:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800a7f2:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
    buf->end = win->buffer.end;
 800a7f6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
    buf->parent = win->buffer.last;
 800a7fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7fe:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    buf->last = buf->begin;
 800a802:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
    buf->active = nk_true;
 800a806:	2301      	movs	r3, #1
 800a808:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
}
 800a80c:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800a80e:	4b06      	ldr	r3, [pc, #24]	; (800a828 <nk_start_popup+0x40>)
 800a810:	4a06      	ldr	r2, [pc, #24]	; (800a82c <nk_start_popup+0x44>)
 800a812:	21c5      	movs	r1, #197	; 0xc5
 800a814:	4806      	ldr	r0, [pc, #24]	; (800a830 <nk_start_popup+0x48>)
 800a816:	f00b fe99 	bl	801654c <__assert_func>
    NK_ASSERT(win);
 800a81a:	4b06      	ldr	r3, [pc, #24]	; (800a834 <nk_start_popup+0x4c>)
 800a81c:	4a03      	ldr	r2, [pc, #12]	; (800a82c <nk_start_popup+0x44>)
 800a81e:	21c6      	movs	r1, #198	; 0xc6
 800a820:	4803      	ldr	r0, [pc, #12]	; (800a830 <nk_start_popup+0x48>)
 800a822:	f00b fe93 	bl	801654c <__assert_func>
 800a826:	bf00      	nop
 800a828:	0801ad58 	.word	0x0801ad58
 800a82c:	0801af24 	.word	0x0801af24
 800a830:	0801ae90 	.word	0x0801ae90
 800a834:	0801bc24 	.word	0x0801bc24

0800a838 <nk_finish_popup>:
NK_LIB void
nk_finish_popup(struct nk_context *ctx, struct nk_window *win)
{
 800a838:	b508      	push	{r3, lr}
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 800a83a:	b148      	cbz	r0, 800a850 <nk_finish_popup+0x18>
    NK_ASSERT(win);
 800a83c:	b171      	cbz	r1, 800a85c <nk_finish_popup+0x24>
    if (!ctx || !win) return;

    buf = &win->popup.buf;
    buf->last = win->buffer.last;
 800a83e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a842:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
    buf->end = win->buffer.end;
 800a846:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800a84a:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
}
 800a84e:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <nk_finish_popup+0x30>)
 800a852:	4a06      	ldr	r2, [pc, #24]	; (800a86c <nk_finish_popup+0x34>)
 800a854:	21d5      	movs	r1, #213	; 0xd5
 800a856:	4806      	ldr	r0, [pc, #24]	; (800a870 <nk_finish_popup+0x38>)
 800a858:	f00b fe78 	bl	801654c <__assert_func>
    NK_ASSERT(win);
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <nk_finish_popup+0x3c>)
 800a85e:	4a03      	ldr	r2, [pc, #12]	; (800a86c <nk_finish_popup+0x34>)
 800a860:	21d6      	movs	r1, #214	; 0xd6
 800a862:	4803      	ldr	r0, [pc, #12]	; (800a870 <nk_finish_popup+0x38>)
 800a864:	f00b fe72 	bl	801654c <__assert_func>
 800a868:	0801ad58 	.word	0x0801ad58
 800a86c:	0801af14 	.word	0x0801af14
 800a870:	0801ae90 	.word	0x0801ae90
 800a874:	0801bc24 	.word	0x0801bc24

0800a878 <nk_finish_buffer>:
NK_LIB void
nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 800a878:	b508      	push	{r3, lr}
    NK_ASSERT(ctx);
 800a87a:	b130      	cbz	r0, 800a88a <nk_finish_buffer+0x12>
    NK_ASSERT(buffer);
 800a87c:	b159      	cbz	r1, 800a896 <nk_finish_buffer+0x1e>
    if (!ctx || !buffer) return;
    buffer->end = ctx->memory.allocated;
 800a87e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800a882:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 800a886:	620b      	str	r3, [r1, #32]
}
 800a888:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800a88a:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <nk_finish_buffer+0x2c>)
 800a88c:	4a06      	ldr	r2, [pc, #24]	; (800a8a8 <nk_finish_buffer+0x30>)
 800a88e:	21e0      	movs	r1, #224	; 0xe0
 800a890:	4806      	ldr	r0, [pc, #24]	; (800a8ac <nk_finish_buffer+0x34>)
 800a892:	f00b fe5b 	bl	801654c <__assert_func>
    NK_ASSERT(buffer);
 800a896:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <nk_finish_buffer+0x38>)
 800a898:	4a03      	ldr	r2, [pc, #12]	; (800a8a8 <nk_finish_buffer+0x30>)
 800a89a:	21e1      	movs	r1, #225	; 0xe1
 800a89c:	4803      	ldr	r0, [pc, #12]	; (800a8ac <nk_finish_buffer+0x34>)
 800a89e:	f00b fe55 	bl	801654c <__assert_func>
 800a8a2:	bf00      	nop
 800a8a4:	0801ad58 	.word	0x0801ad58
 800a8a8:	0801af00 	.word	0x0801af00
 800a8ac:	0801ae90 	.word	0x0801ae90
 800a8b0:	0801aca4 	.word	0x0801aca4

0800a8b4 <nk_finish>:
NK_LIB void
nk_finish(struct nk_context *ctx, struct nk_window *win)
{
 800a8b4:	b538      	push	{r3, r4, r5, lr}
    struct nk_popup_buffer *buf;
    struct nk_command *parent_last;
    void *memory;

    NK_ASSERT(ctx);
 800a8b6:	b198      	cbz	r0, 800a8e0 <nk_finish+0x2c>
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	4605      	mov	r5, r0
    NK_ASSERT(win);
 800a8bc:	b1b1      	cbz	r1, 800a8ec <nk_finish+0x38>
    if (!ctx || !win) return;
    nk_finish_buffer(ctx, &win->buffer);
 800a8be:	3164      	adds	r1, #100	; 0x64
 800a8c0:	f7ff ffda 	bl	800a878 <nk_finish_buffer>
    if (!win->popup.buf.active) return;
 800a8c4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800a8c8:	b14b      	cbz	r3, 800a8de <nk_finish+0x2a>

    buf = &win->popup.buf;
    memory = ctx->memory.memory.ptr;
    parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);
    parent_last->next = buf->end;
 800a8ca:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 800a8ce:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800a8d2:	f8d5 3aac 	ldr.w	r3, [r5, #2732]	; 0xaac
 800a8d6:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
 800a8da:	440b      	add	r3, r1
 800a8dc:	605a      	str	r2, [r3, #4]
}
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
    NK_ASSERT(ctx);
 800a8e0:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <nk_finish+0x44>)
 800a8e2:	4a06      	ldr	r2, [pc, #24]	; (800a8fc <nk_finish+0x48>)
 800a8e4:	21ec      	movs	r1, #236	; 0xec
 800a8e6:	4806      	ldr	r0, [pc, #24]	; (800a900 <nk_finish+0x4c>)
 800a8e8:	f00b fe30 	bl	801654c <__assert_func>
    NK_ASSERT(win);
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <nk_finish+0x50>)
 800a8ee:	4a03      	ldr	r2, [pc, #12]	; (800a8fc <nk_finish+0x48>)
 800a8f0:	21ed      	movs	r1, #237	; 0xed
 800a8f2:	4803      	ldr	r0, [pc, #12]	; (800a900 <nk_finish+0x4c>)
 800a8f4:	f00b fe2a 	bl	801654c <__assert_func>
 800a8f8:	0801ad58 	.word	0x0801ad58
 800a8fc:	0801aef4 	.word	0x0801aef4
 800a900:	0801ae90 	.word	0x0801ae90
 800a904:	0801bc24 	.word	0x0801bc24

0800a908 <nk_build>:
NK_LIB void
nk_build(struct nk_context *ctx)
{
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	4605      	mov	r5, r0
    struct nk_window *it = 0;
    struct nk_command *cmd = 0;
    nk_byte *buffer = 0;

    /* draw cursor overlay */
    if (!ctx->style.cursor_active)
 800a90e:	f8d0 4188 	ldr.w	r4, [r0, #392]	; 0x188
 800a912:	b3b4      	cbz	r4, 800a982 <nk_build+0x7a>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 800a914:	f895 3165 	ldrb.w	r3, [r5, #357]	; 0x165
 800a918:	bbcb      	cbnz	r3, 800a98e <nk_build+0x86>
 800a91a:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
 800a91e:	b3b3      	cbz	r3, 800a98e <nk_build+0x86>
        struct nk_rect mouse_bounds;
        const struct nk_cursor *cursor = ctx->style.cursor_active;
        nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);
 800a920:	f505 5657 	add.w	r6, r5, #13760	; 0x35c0
 800a924:	3634      	adds	r6, #52	; 0x34
 800a926:	2200      	movs	r2, #0
 800a928:	f505 51d4 	add.w	r1, r5, #6784	; 0x1a80
 800a92c:	310c      	adds	r1, #12
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 fa44 	bl	800adbc <nk_command_buffer_init>
        nk_start_buffer(ctx, &ctx->overlay);
 800a934:	4631      	mov	r1, r6
 800a936:	4628      	mov	r0, r5
 800a938:	f7ff ff12 	bl	800a760 <nk_start_buffer>

        mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;
 800a93c:	ed95 0a51 	vldr	s0, [r5, #324]	; 0x144
 800a940:	edd4 7a06 	vldr	s15, [r4, #24]
 800a944:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a948:	ed8d 0a00 	vstr	s0, [sp]
        mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;
 800a94c:	edd5 0a52 	vldr	s1, [r5, #328]	; 0x148
 800a950:	edd4 7a07 	vldr	s15, [r4, #28]
 800a954:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a958:	edcd 0a01 	vstr	s1, [sp, #4]
        mouse_bounds.w = cursor->size.x;
 800a95c:	ed94 1a04 	vldr	s2, [r4, #16]
 800a960:	ed8d 1a02 	vstr	s2, [sp, #8]
        mouse_bounds.h = cursor->size.y;
 800a964:	edd4 1a05 	vldr	s3, [r4, #20]
 800a968:	edcd 1a03 	vstr	s3, [sp, #12]

        nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);
 800a96c:	4b37      	ldr	r3, [pc, #220]	; (800aa4c <nk_build+0x144>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	4621      	mov	r1, r4
 800a972:	4630      	mov	r0, r6
 800a974:	f000 fd2a 	bl	800b3cc <nk_draw_image>
        nk_finish_buffer(ctx, &ctx->overlay);
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	f7ff ff7c 	bl	800a878 <nk_finish_buffer>
 800a980:	e005      	b.n	800a98e <nk_build+0x86>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 800a982:	f8d0 416c 	ldr.w	r4, [r0, #364]	; 0x16c
 800a986:	f8c0 4188 	str.w	r4, [r0, #392]	; 0x188
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 800a98a:	2c00      	cmp	r4, #0
 800a98c:	d1c2      	bne.n	800a914 <nk_build+0xc>
    }
    /* build one big draw command list out of all window buffers */
    it = ctx->begin;
 800a98e:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 800a992:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 800a996:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 800a99a:	f8d3 6aac 	ldr.w	r6, [r3, #2732]	; 0xaac
    while (it != 0) {
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	d052      	beq.n	800aa48 <nk_build+0x140>
    struct nk_command *cmd = 0;
 800a9a2:	2400      	movs	r4, #0
        struct nk_window *next = it->next;
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
            it->seq != ctx->seq)
 800a9a4:	f505 5c40 	add.w	ip, r5, #12288	; 0x3000
 800a9a8:	e013      	b.n	800a9d2 <nk_build+0xca>
            goto cont;

        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
        while (next && ((next->buffer.last == next->buffer.begin) ||
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
            next = next->next; /* skip empty command buffers */
 800a9aa:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
        while (next && ((next->buffer.last == next->buffer.begin) ||
 800a9ae:	b323      	cbz	r3, 800a9fa <nk_build+0xf2>
 800a9b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a9b4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800a9b8:	4291      	cmp	r1, r2
 800a9ba:	d0f6      	beq.n	800a9aa <nk_build+0xa2>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 800a9bc:	6c99      	ldr	r1, [r3, #72]	; 0x48
        while (next && ((next->buffer.last == next->buffer.begin) ||
 800a9be:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800a9c2:	d1f2      	bne.n	800a9aa <nk_build+0xa2>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 800a9c4:	6819      	ldr	r1, [r3, #0]
 800a9c6:	4288      	cmp	r0, r1
 800a9c8:	d1ef      	bne.n	800a9aa <nk_build+0xa2>

        if (next) cmd->next = next->buffer.begin;
 800a9ca:	6062      	str	r2, [r4, #4]
    while (it != 0) {
 800a9cc:	e000      	b.n	800a9d0 <nk_build+0xc8>
 800a9ce:	b1a3      	cbz	r3, 800a9fa <nk_build+0xf2>
{
 800a9d0:	461a      	mov	r2, r3
        struct nk_window *next = it->next;
 800a9d2:	f8d2 3178 	ldr.w	r3, [r2, #376]	; 0x178
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 800a9d6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800a9da:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 800a9de:	4281      	cmp	r1, r0
 800a9e0:	d0f5      	beq.n	800a9ce <nk_build+0xc6>
 800a9e2:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800a9e4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800a9e8:	d1f1      	bne.n	800a9ce <nk_build+0xc6>
            it->seq != ctx->seq)
 800a9ea:	f8dc 0664 	ldr.w	r0, [ip, #1636]	; 0x664
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 800a9ee:	6812      	ldr	r2, [r2, #0]
 800a9f0:	4282      	cmp	r2, r0
 800a9f2:	d1ec      	bne.n	800a9ce <nk_build+0xc6>
        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
 800a9f4:	1874      	adds	r4, r6, r1
        while (next && ((next->buffer.last == next->buffer.begin) ||
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1da      	bne.n	800a9b0 <nk_build+0xa8>
        cont: it = next;
    }
    /* append all popup draw commands into lists */
    it = ctx->begin;
 800a9fa:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 800a9fe:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
    while (it != 0) {
 800aa02:	b193      	cbz	r3, 800aa2a <nk_build+0x122>
            goto skip;

        buf = &it->popup.buf;
        cmd->next = buf->begin;
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
        buf->active = nk_false;
 800aa04:	2000      	movs	r0, #0
 800aa06:	e000      	b.n	800aa0a <nk_build+0x102>
    while (it != 0) {
 800aa08:	b17b      	cbz	r3, 800aa2a <nk_build+0x122>
        struct nk_window *next = it->next;
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
        if (!it->popup.buf.active)
 800aa10:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
 800aa14:	2900      	cmp	r1, #0
 800aa16:	d0f7      	beq.n	800aa08 <nk_build+0x100>
        cmd->next = buf->begin;
 800aa18:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 800aa1c:	6061      	str	r1, [r4, #4]
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
 800aa1e:	f8d2 410c 	ldr.w	r4, [r2, #268]	; 0x10c
 800aa22:	4434      	add	r4, r6
        buf->active = nk_false;
 800aa24:	f8c2 0114 	str.w	r0, [r2, #276]	; 0x114
 800aa28:	e7ee      	b.n	800aa08 <nk_build+0x100>
        skip: it = next;
    }
    if (cmd) {
 800aa2a:	b16c      	cbz	r4, 800aa48 <nk_build+0x140>
        /* append overlay commands */
        if (ctx->overlay.end != ctx->overlay.begin)
 800aa2c:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 800aa30:	f8d3 2610 	ldr.w	r2, [r3, #1552]	; 0x610
 800aa34:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 800aa38:	4293      	cmp	r3, r2
            cmd->next = ctx->overlay.begin;
 800aa3a:	bf11      	iteee	ne
 800aa3c:	6062      	strne	r2, [r4, #4]
        else cmd->next = ctx->memory.allocated;
 800aa3e:	f505 5580 	addeq.w	r5, r5, #4096	; 0x1000
 800aa42:	f8d5 3ab8 	ldreq.w	r3, [r5, #2744]	; 0xab8
 800aa46:	6063      	streq	r3, [r4, #4]
    }
}
 800aa48:	b004      	add	sp, #16
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	0801af6c 	.word	0x0801af6c

0800aa50 <nk__begin>:
NK_API const struct nk_command*
nk__begin(struct nk_context *ctx)
{
 800aa50:	b538      	push	{r3, r4, r5, lr}
    struct nk_window *iter;
    nk_byte *buffer;
    NK_ASSERT(ctx);
 800aa52:	b1a8      	cbz	r0, 800aa80 <nk__begin+0x30>
 800aa54:	4604      	mov	r4, r0
    if (!ctx) return 0;
    if (!ctx->count) return 0;
 800aa56:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800aa5a:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 800aa5e:	b393      	cbz	r3, 800aac6 <nk__begin+0x76>

    buffer = (nk_byte*)ctx->memory.memory.ptr;
 800aa60:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800aa64:	f8d3 5aac 	ldr.w	r5, [r3, #2732]	; 0xaac
    if (!ctx->build) {
 800aa68:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800aa6c:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 800aa70:	b16b      	cbz	r3, 800aa8e <nk__begin+0x3e>
        nk_build(ctx);
        ctx->build = nk_true;
    }
    iter = ctx->begin;
 800aa72:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800aa76:	f8d3 064c 	ldr.w	r0, [r3, #1612]	; 0x64c
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 800aa7a:	b318      	cbz	r0, 800aac4 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 800aa7c:	461c      	mov	r4, r3
 800aa7e:	e011      	b.n	800aaa4 <nk__begin+0x54>
    NK_ASSERT(ctx);
 800aa80:	4b12      	ldr	r3, [pc, #72]	; (800aacc <nk__begin+0x7c>)
 800aa82:	4a13      	ldr	r2, [pc, #76]	; (800aad0 <nk__begin+0x80>)
 800aa84:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800aa88:	4812      	ldr	r0, [pc, #72]	; (800aad4 <nk__begin+0x84>)
 800aa8a:	f00b fd5f 	bl	801654c <__assert_func>
        nk_build(ctx);
 800aa8e:	f7ff ff3b 	bl	800a908 <nk_build>
        ctx->build = nk_true;
 800aa92:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800aa96:	2201      	movs	r2, #1
 800aa98:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 800aa9c:	e7e9      	b.n	800aa72 <nk__begin+0x22>
        iter = iter->next;
 800aa9e:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 800aaa2:	b178      	cbz	r0, 800aac4 <nk__begin+0x74>
 800aaa4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800aaa8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d0f6      	beq.n	800aa9e <nk__begin+0x4e>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 800aab0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 800aab2:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800aab6:	d1f2      	bne.n	800aa9e <nk__begin+0x4e>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 800aab8:	6801      	ldr	r1, [r0, #0]
 800aaba:	f8d4 2664 	ldr.w	r2, [r4, #1636]	; 0x664
 800aabe:	4291      	cmp	r1, r2
 800aac0:	d1ed      	bne.n	800aa9e <nk__begin+0x4e>
    if (!iter) return 0;
    return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);
 800aac2:	18e8      	adds	r0, r5, r3
}
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
    if (!ctx->count) return 0;
 800aac6:	2000      	movs	r0, #0
 800aac8:	e7fc      	b.n	800aac4 <nk__begin+0x74>
 800aaca:	bf00      	nop
 800aacc:	0801ad58 	.word	0x0801ad58
 800aad0:	0801aecc 	.word	0x0801aecc
 800aad4:	0801ae90 	.word	0x0801ae90

0800aad8 <nk__next>:

NK_API const struct nk_command*
nk__next(struct nk_context *ctx, const struct nk_command *cmd)
{
 800aad8:	b508      	push	{r3, lr}
    nk_byte *buffer;
    const struct nk_command *next;
    NK_ASSERT(ctx);
 800aada:	b198      	cbz	r0, 800ab04 <nk__next+0x2c>
 800aadc:	4603      	mov	r3, r0
    if (!ctx || !cmd || !ctx->count) return 0;
 800aade:	b1c1      	cbz	r1, 800ab12 <nk__next+0x3a>
 800aae0:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 800aae4:	f8d2 2660 	ldr.w	r2, [r2, #1632]	; 0x660
 800aae8:	b1aa      	cbz	r2, 800ab16 <nk__next+0x3e>
    if (cmd->next >= ctx->memory.allocated) return 0;
 800aaea:	6848      	ldr	r0, [r1, #4]
 800aaec:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 800aaf0:	f8d1 1ab8 	ldr.w	r1, [r1, #2744]	; 0xab8
 800aaf4:	4288      	cmp	r0, r1
 800aaf6:	d210      	bcs.n	800ab1a <nk__next+0x42>
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 800aaf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);
 800aafc:	f8d3 1aac 	ldr.w	r1, [r3, #2732]	; 0xaac
 800ab00:	4408      	add	r0, r1
    return next;
}
 800ab02:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800ab04:	4b06      	ldr	r3, [pc, #24]	; (800ab20 <nk__next+0x48>)
 800ab06:	4a07      	ldr	r2, [pc, #28]	; (800ab24 <nk__next+0x4c>)
 800ab08:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800ab0c:	4806      	ldr	r0, [pc, #24]	; (800ab28 <nk__next+0x50>)
 800ab0e:	f00b fd1d 	bl	801654c <__assert_func>
    if (!ctx || !cmd || !ctx->count) return 0;
 800ab12:	4608      	mov	r0, r1
 800ab14:	e7f5      	b.n	800ab02 <nk__next+0x2a>
 800ab16:	2000      	movs	r0, #0
 800ab18:	e7f3      	b.n	800ab02 <nk__next+0x2a>
    if (cmd->next >= ctx->memory.allocated) return 0;
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e7f1      	b.n	800ab02 <nk__next+0x2a>
 800ab1e:	bf00      	nop
 800ab20:	0801ad58 	.word	0x0801ad58
 800ab24:	0801aec0 	.word	0x0801aec0
 800ab28:	0801ae90 	.word	0x0801ae90

0800ab2c <nk_contextual_close>:
{
    return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);
}
NK_API void
nk_contextual_close(struct nk_context *ctx)
{
 800ab2c:	b508      	push	{r3, lr}
    NK_ASSERT(ctx);
 800ab2e:	b150      	cbz	r0, 800ab46 <nk_contextual_close+0x1a>
    NK_ASSERT(ctx->current);
 800ab30:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 800ab34:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
 800ab38:	b15a      	cbz	r2, 800ab52 <nk_contextual_close+0x26>
    NK_ASSERT(ctx->current->layout);
 800ab3a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ab3e:	b172      	cbz	r2, 800ab5e <nk_contextual_close+0x32>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
    nk_popup_close(ctx);
 800ab40:	f004 fbfe 	bl	800f340 <nk_popup_close>
}
 800ab44:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800ab46:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <nk_contextual_close+0x40>)
 800ab48:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <nk_contextual_close+0x44>)
 800ab4a:	21b2      	movs	r1, #178	; 0xb2
 800ab4c:	4809      	ldr	r0, [pc, #36]	; (800ab74 <nk_contextual_close+0x48>)
 800ab4e:	f00b fcfd 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800ab52:	4b09      	ldr	r3, [pc, #36]	; (800ab78 <nk_contextual_close+0x4c>)
 800ab54:	4a06      	ldr	r2, [pc, #24]	; (800ab70 <nk_contextual_close+0x44>)
 800ab56:	21b3      	movs	r1, #179	; 0xb3
 800ab58:	4806      	ldr	r0, [pc, #24]	; (800ab74 <nk_contextual_close+0x48>)
 800ab5a:	f00b fcf7 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <nk_contextual_close+0x50>)
 800ab60:	4a03      	ldr	r2, [pc, #12]	; (800ab70 <nk_contextual_close+0x44>)
 800ab62:	21b4      	movs	r1, #180	; 0xb4
 800ab64:	4803      	ldr	r0, [pc, #12]	; (800ab74 <nk_contextual_close+0x48>)
 800ab66:	f00b fcf1 	bl	801654c <__assert_func>
 800ab6a:	bf00      	nop
 800ab6c:	0801ad58 	.word	0x0801ad58
 800ab70:	0801afd8 	.word	0x0801afd8
 800ab74:	0801af70 	.word	0x0801af70
 800ab78:	0801ad5c 	.word	0x0801ad5c
 800ab7c:	0801ad6c 	.word	0x0801ad6c

0800ab80 <nk_contextual_item_text>:
{
 800ab80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab84:	b08a      	sub	sp, #40	; 0x28
    NK_ASSERT(ctx);
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d040      	beq.n	800ac0c <nk_contextual_item_text+0x8c>
 800ab8a:	460e      	mov	r6, r1
 800ab8c:	4690      	mov	r8, r2
 800ab8e:	461f      	mov	r7, r3
 800ab90:	4604      	mov	r4, r0
    NK_ASSERT(ctx->current);
 800ab92:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800ab96:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 800ab9a:	2d00      	cmp	r5, #0
 800ab9c:	d03c      	beq.n	800ac18 <nk_contextual_item_text+0x98>
    NK_ASSERT(ctx->current->layout);
 800ab9e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d03e      	beq.n	800ac24 <nk_contextual_item_text+0xa4>
    state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);
 800aba6:	ed90 0aab 	vldr	s0, [r0, #684]	; 0x2ac
 800abaa:	edd0 0aac 	vldr	s1, [r0, #688]	; 0x2b0
 800abae:	4601      	mov	r1, r0
 800abb0:	a806      	add	r0, sp, #24
 800abb2:	f00a ff05 	bl	80159c0 <nk_widget_fitting>
    if (!state) return nk_false;
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d041      	beq.n	800ac3e <nk_contextual_item_text+0xbe>
    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800abba:	2802      	cmp	r0, #2
 800abbc:	d038      	beq.n	800ac30 <nk_contextual_item_text+0xb0>
 800abbe:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800abc8:	bf0c      	ite	eq
 800abca:	4623      	moveq	r3, r4
 800abcc:	2300      	movne	r3, #0
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800abce:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 800abd2:	9204      	str	r2, [sp, #16]
 800abd4:	9303      	str	r3, [sp, #12]
 800abd6:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800abda:	9302      	str	r3, [sp, #8]
 800abdc:	2300      	movs	r3, #0
 800abde:	9301      	str	r3, [sp, #4]
 800abe0:	9700      	str	r7, [sp, #0]
 800abe2:	4643      	mov	r3, r8
 800abe4:	4632      	mov	r2, r6
 800abe6:	ed9d 0a06 	vldr	s0, [sp, #24]
 800abea:	eddd 0a07 	vldr	s1, [sp, #28]
 800abee:	ed9d 1a08 	vldr	s2, [sp, #32]
 800abf2:	eddd 1a09 	vldr	s3, [sp, #36]	; 0x24
 800abf6:	f105 0164 	add.w	r1, r5, #100	; 0x64
 800abfa:	f504 50d6 	add.w	r0, r4, #6848	; 0x1ac0
 800abfe:	3014      	adds	r0, #20
 800ac00:	f7fe fed4 	bl	80099ac <nk_do_button_text>
 800ac04:	b9b0      	cbnz	r0, 800ac34 <nk_contextual_item_text+0xb4>
}
 800ac06:	b00a      	add	sp, #40	; 0x28
 800ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(ctx);
 800ac0c:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <nk_contextual_item_text+0xc4>)
 800ac0e:	4a0e      	ldr	r2, [pc, #56]	; (800ac48 <nk_contextual_item_text+0xc8>)
 800ac10:	214f      	movs	r1, #79	; 0x4f
 800ac12:	480e      	ldr	r0, [pc, #56]	; (800ac4c <nk_contextual_item_text+0xcc>)
 800ac14:	f00b fc9a 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800ac18:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <nk_contextual_item_text+0xd0>)
 800ac1a:	4a0b      	ldr	r2, [pc, #44]	; (800ac48 <nk_contextual_item_text+0xc8>)
 800ac1c:	2150      	movs	r1, #80	; 0x50
 800ac1e:	480b      	ldr	r0, [pc, #44]	; (800ac4c <nk_contextual_item_text+0xcc>)
 800ac20:	f00b fc94 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800ac24:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <nk_contextual_item_text+0xd4>)
 800ac26:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <nk_contextual_item_text+0xc8>)
 800ac28:	2151      	movs	r1, #81	; 0x51
 800ac2a:	4808      	ldr	r0, [pc, #32]	; (800ac4c <nk_contextual_item_text+0xcc>)
 800ac2c:	f00b fc8e 	bl	801654c <__assert_func>
    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800ac30:	2300      	movs	r3, #0
 800ac32:	e7cc      	b.n	800abce <nk_contextual_item_text+0x4e>
        nk_contextual_close(ctx);
 800ac34:	4620      	mov	r0, r4
 800ac36:	f7ff ff79 	bl	800ab2c <nk_contextual_close>
        return nk_true;
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e7e3      	b.n	800ac06 <nk_contextual_item_text+0x86>
    if (!state) return nk_false;
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e7e1      	b.n	800ac06 <nk_contextual_item_text+0x86>
 800ac42:	bf00      	nop
 800ac44:	0801ad58 	.word	0x0801ad58
 800ac48:	0801afec 	.word	0x0801afec
 800ac4c:	0801af70 	.word	0x0801af70
 800ac50:	0801ad5c 	.word	0x0801ad5c
 800ac54:	0801ad6c 	.word	0x0801ad6c

0800ac58 <nk_contextual_item_label>:
{
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	4616      	mov	r6, r2
    return nk_contextual_item_text(ctx, label, nk_strlen(label), align);
 800ac60:	4608      	mov	r0, r1
 800ac62:	f00a f8a5 	bl	8014db0 <nk_strlen>
 800ac66:	4602      	mov	r2, r0
 800ac68:	4633      	mov	r3, r6
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f7ff ff87 	bl	800ab80 <nk_contextual_item_text>
}
 800ac72:	bd70      	pop	{r4, r5, r6, pc}

0800ac74 <nk_contextual_end>:
NK_API void
nk_contextual_end(struct nk_context *ctx)
{
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	ed2d 8b02 	vpush	{d8}
 800ac7a:	b086      	sub	sp, #24
    struct nk_window *popup;
    struct nk_panel *panel;
    NK_ASSERT(ctx);
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d04d      	beq.n	800ad1c <nk_contextual_end+0xa8>
 800ac80:	4606      	mov	r6, r0
    NK_ASSERT(ctx->current);
 800ac82:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800ac86:	f8d3 4658 	ldr.w	r4, [r3, #1624]	; 0x658
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d04c      	beq.n	800ad28 <nk_contextual_end+0xb4>
    if (!ctx || !ctx->current) return;

    popup = ctx->current;
    panel = popup->layout;
 800ac8e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
    NK_ASSERT(popup->parent);
 800ac92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d04c      	beq.n	800ad34 <nk_contextual_end+0xc0>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 800ac9a:	7829      	ldrb	r1, [r5, #0]
 800ac9c:	f011 0ff4 	tst.w	r1, #244	; 0xf4
 800aca0:	d04e      	beq.n	800ad40 <nk_contextual_end+0xcc>
    if (panel->flags & NK_WINDOW_DYNAMIC) {
 800aca2:	686b      	ldr	r3, [r5, #4]
 800aca4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800aca8:	d02b      	beq.n	800ad02 <nk_contextual_end+0x8e>
        /* Close behavior
        This is a bit of a hack solution since we do not know before we end our popup
        how big it will be. We therefore do not directly know when a
        click outside the non-blocking popup must close it at that direct frame.
        Instead it will be closed in the next frame.*/
        struct nk_rect body = {0,0,0,0};
 800acaa:	2300      	movs	r3, #0
 800acac:	9302      	str	r3, [sp, #8]
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	9305      	str	r3, [sp, #20]
        if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {
 800acb4:	edd5 7a03 	vldr	s15, [r5, #12]
 800acb8:	ed95 7a05 	vldr	s14, [r5, #20]
 800acbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acc0:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
 800acc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800accc:	d43e      	bmi.n	800ad4c <nk_contextual_end+0xd8>
        struct nk_rect body = {0,0,0,0};
 800acce:	ed9f 8a34 	vldr	s16, [pc, #208]	; 800ada0 <nk_contextual_end+0x12c>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
            body = panel->bounds;
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
        }
        {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 800acd2:	2100      	movs	r1, #0
 800acd4:	4630      	mov	r0, r6
 800acd6:	f002 f8a3 	bl	800ce20 <nk_input_is_mouse_pressed>
 800acda:	4605      	mov	r5, r0
        int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 800acdc:	ed8d 8a03 	vstr	s16, [sp, #12]
 800ace0:	ed9d 0a02 	vldr	s0, [sp, #8]
 800ace4:	eef0 0a48 	vmov.f32	s1, s16
 800ace8:	ed9d 1a04 	vldr	s2, [sp, #16]
 800acec:	eddd 1a05 	vldr	s3, [sp, #20]
 800acf0:	4630      	mov	r0, r6
 800acf2:	f002 f829 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
        if (pressed && in_body)
 800acf6:	b125      	cbz	r5, 800ad02 <nk_contextual_end+0x8e>
 800acf8:	b118      	cbz	r0, 800ad02 <nk_contextual_end+0x8e>
            popup->flags |= NK_WINDOW_HIDDEN;
 800acfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800acfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ad00:	64a3      	str	r3, [r4, #72]	; 0x48
        }
    }
    if (popup->flags & NK_WINDOW_HIDDEN)
 800ad02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ad04:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        popup->seq = 0;
 800ad08:	bf1c      	itt	ne
 800ad0a:	2300      	movne	r3, #0
 800ad0c:	6023      	strne	r3, [r4, #0]
    nk_popup_end(ctx);
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f004 fb48 	bl	800f3a4 <nk_popup_end>
    return;
}
 800ad14:	b006      	add	sp, #24
 800ad16:	ecbd 8b02 	vpop	{d8}
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(ctx);
 800ad1c:	4b21      	ldr	r3, [pc, #132]	; (800ada4 <nk_contextual_end+0x130>)
 800ad1e:	4a22      	ldr	r2, [pc, #136]	; (800ada8 <nk_contextual_end+0x134>)
 800ad20:	21bd      	movs	r1, #189	; 0xbd
 800ad22:	4822      	ldr	r0, [pc, #136]	; (800adac <nk_contextual_end+0x138>)
 800ad24:	f00b fc12 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800ad28:	4b21      	ldr	r3, [pc, #132]	; (800adb0 <nk_contextual_end+0x13c>)
 800ad2a:	4a1f      	ldr	r2, [pc, #124]	; (800ada8 <nk_contextual_end+0x134>)
 800ad2c:	21be      	movs	r1, #190	; 0xbe
 800ad2e:	481f      	ldr	r0, [pc, #124]	; (800adac <nk_contextual_end+0x138>)
 800ad30:	f00b fc0c 	bl	801654c <__assert_func>
    NK_ASSERT(popup->parent);
 800ad34:	4b1f      	ldr	r3, [pc, #124]	; (800adb4 <nk_contextual_end+0x140>)
 800ad36:	4a1c      	ldr	r2, [pc, #112]	; (800ada8 <nk_contextual_end+0x134>)
 800ad38:	21c3      	movs	r1, #195	; 0xc3
 800ad3a:	481c      	ldr	r0, [pc, #112]	; (800adac <nk_contextual_end+0x138>)
 800ad3c:	f00b fc06 	bl	801654c <__assert_func>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 800ad40:	4b1d      	ldr	r3, [pc, #116]	; (800adb8 <nk_contextual_end+0x144>)
 800ad42:	4a19      	ldr	r2, [pc, #100]	; (800ada8 <nk_contextual_end+0x134>)
 800ad44:	21c4      	movs	r1, #196	; 0xc4
 800ad46:	4819      	ldr	r0, [pc, #100]	; (800adac <nk_contextual_end+0x138>)
 800ad48:	f00b fc00 	bl	801654c <__assert_func>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
 800ad4c:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800ad50:	f002 fed9 	bl	800db06 <nk_panel_get_padding>
 800ad54:	ed8d 0a00 	vstr	s0, [sp]
 800ad58:	edcd 0a01 	vstr	s1, [sp, #4]
            body = panel->bounds;
 800ad5c:	f105 0308 	add.w	r3, r5, #8
 800ad60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad62:	f10d 0c18 	add.w	ip, sp, #24
 800ad66:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
 800ad6a:	ed95 8a09 	vldr	s16, [r5, #36]	; 0x24
 800ad6e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800ad72:	ee38 8a27 	vadd.f32	s16, s16, s15
 800ad76:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800ad7a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800ad7e:	ee38 8a20 	vadd.f32	s16, s16, s1
 800ad82:	edd5 7a1b 	vldr	s15, [r5, #108]	; 0x6c
 800ad86:	ee38 8a27 	vadd.f32	s16, s16, s15
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
 800ad8a:	edd5 7a05 	vldr	s15, [r5, #20]
 800ad8e:	ed95 7a03 	vldr	s14, [r5, #12]
 800ad92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad96:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ad9a:	edcd 7a05 	vstr	s15, [sp, #20]
 800ad9e:	e798      	b.n	800acd2 <nk_contextual_end+0x5e>
 800ada0:	00000000 	.word	0x00000000
 800ada4:	0801ad58 	.word	0x0801ad58
 800ada8:	0801afc4 	.word	0x0801afc4
 800adac:	0801af70 	.word	0x0801af70
 800adb0:	0801ad5c 	.word	0x0801ad5c
 800adb4:	0801af90 	.word	0x0801af90
 800adb8:	0801afa0 	.word	0x0801afa0

0800adbc <nk_command_buffer_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_command_buffer_init(struct nk_command_buffer *cb,
    struct nk_buffer *b, enum nk_command_clipping clip)
{
 800adbc:	b508      	push	{r3, lr}
    NK_ASSERT(cb);
 800adbe:	b140      	cbz	r0, 800add2 <nk_command_buffer_init+0x16>
    NK_ASSERT(b);
 800adc0:	b169      	cbz	r1, 800adde <nk_command_buffer_init+0x22>
    if (!cb || !b) return;
    cb->base = b;
 800adc2:	6001      	str	r1, [r0, #0]
    cb->use_clipping = (int)clip;
 800adc4:	6142      	str	r2, [r0, #20]
    cb->begin = b->allocated;
 800adc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800adc8:	61c2      	str	r2, [r0, #28]
    cb->end = b->allocated;
 800adca:	6202      	str	r2, [r0, #32]
    cb->last = b->allocated;
 800adcc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800adce:	6242      	str	r2, [r0, #36]	; 0x24
}
 800add0:	bd08      	pop	{r3, pc}
    NK_ASSERT(cb);
 800add2:	4b06      	ldr	r3, [pc, #24]	; (800adec <nk_command_buffer_init+0x30>)
 800add4:	4a06      	ldr	r2, [pc, #24]	; (800adf0 <nk_command_buffer_init+0x34>)
 800add6:	210d      	movs	r1, #13
 800add8:	4806      	ldr	r0, [pc, #24]	; (800adf4 <nk_command_buffer_init+0x38>)
 800adda:	f00b fbb7 	bl	801654c <__assert_func>
    NK_ASSERT(b);
 800adde:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <nk_command_buffer_init+0x3c>)
 800ade0:	4a03      	ldr	r2, [pc, #12]	; (800adf0 <nk_command_buffer_init+0x34>)
 800ade2:	210e      	movs	r1, #14
 800ade4:	4803      	ldr	r0, [pc, #12]	; (800adf4 <nk_command_buffer_init+0x38>)
 800ade6:	f00b fbb1 	bl	801654c <__assert_func>
 800adea:	bf00      	nop
 800adec:	0801b004 	.word	0x0801b004
 800adf0:	0801b09c 	.word	0x0801b09c
 800adf4:	0801b008 	.word	0x0801b008
 800adf8:	0801ac48 	.word	0x0801ac48

0800adfc <nk_command_buffer_reset>:
NK_LIB void
nk_command_buffer_reset(struct nk_command_buffer *b)
{
 800adfc:	b508      	push	{r3, lr}
    NK_ASSERT(b);
 800adfe:	b150      	cbz	r0, 800ae16 <nk_command_buffer_reset+0x1a>
    if (!b) return;
    b->begin = 0;
 800ae00:	2200      	movs	r2, #0
 800ae02:	61c2      	str	r2, [r0, #28]
    b->end = 0;
 800ae04:	6202      	str	r2, [r0, #32]
    b->last = 0;
 800ae06:	6242      	str	r2, [r0, #36]	; 0x24
    b->clip = nk_null_rect;
 800ae08:	4a06      	ldr	r2, [pc, #24]	; (800ae24 <nk_command_buffer_reset+0x28>)
 800ae0a:	f100 0c04 	add.w	ip, r0, #4
 800ae0e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ae10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
#ifdef NK_INCLUDE_COMMAND_USERDATA
    b->userdata.ptr = 0;
#endif
}
 800ae14:	bd08      	pop	{r3, pc}
    NK_ASSERT(b);
 800ae16:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <nk_command_buffer_reset+0x2c>)
 800ae18:	4a04      	ldr	r2, [pc, #16]	; (800ae2c <nk_command_buffer_reset+0x30>)
 800ae1a:	2119      	movs	r1, #25
 800ae1c:	4804      	ldr	r0, [pc, #16]	; (800ae30 <nk_command_buffer_reset+0x34>)
 800ae1e:	f00b fb95 	bl	801654c <__assert_func>
 800ae22:	bf00      	nop
 800ae24:	0801b0e8 	.word	0x0801b0e8
 800ae28:	0801ac48 	.word	0x0801ac48
 800ae2c:	0801b084 	.word	0x0801b084
 800ae30:	0801b008 	.word	0x0801b008

0800ae34 <nk_command_buffer_push>:
NK_LIB void*
nk_command_buffer_push(struct nk_command_buffer* b,
    enum nk_command_type t, nk_size size)
{
 800ae34:	b570      	push	{r4, r5, r6, lr}
    struct nk_command *cmd;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800ae36:	b1d8      	cbz	r0, 800ae70 <nk_command_buffer_push+0x3c>
 800ae38:	460e      	mov	r6, r1
 800ae3a:	4614      	mov	r4, r2
 800ae3c:	4605      	mov	r5, r0
    NK_ASSERT(b->base);
 800ae3e:	6800      	ldr	r0, [r0, #0]
 800ae40:	b1e0      	cbz	r0, 800ae7c <nk_command_buffer_push+0x48>
    if (!b) return 0;
    cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);
 800ae42:	2304      	movs	r3, #4
 800ae44:	2100      	movs	r1, #0
 800ae46:	f7fe fa87 	bl	8009358 <nk_buffer_alloc>
    if (!cmd) return 0;
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	b170      	cbz	r0, 800ae6c <nk_command_buffer_push+0x38>

    /* make sure the offset to the next command is aligned */
    b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);
 800ae4e:	682a      	ldr	r2, [r5, #0]
 800ae50:	6a12      	ldr	r2, [r2, #32]
 800ae52:	1a82      	subs	r2, r0, r2
 800ae54:	626a      	str	r2, [r5, #36]	; 0x24
    unaligned = (nk_byte*)cmd + size;
 800ae56:	4404      	add	r4, r0
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
#ifdef NK_ZERO_COMMAND_MEMORY
    NK_MEMSET(cmd, 0, size + alignment);
#endif

    cmd->type = t;
 800ae58:	7006      	strb	r6, [r0, #0]
    memory = NK_ALIGN_PTR(unaligned, align);
 800ae5a:	1ce2      	adds	r2, r4, #3
 800ae5c:	f022 0203 	bic.w	r2, r2, #3
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800ae60:	1b12      	subs	r2, r2, r4
    cmd->next = b->base->allocated + alignment;
 800ae62:	6829      	ldr	r1, [r5, #0]
 800ae64:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ae66:	440a      	add	r2, r1
 800ae68:	6042      	str	r2, [r0, #4]
#ifdef NK_INCLUDE_COMMAND_USERDATA
    cmd->userdata = b->userdata;
#endif
    b->end = cmd->next;
 800ae6a:	622a      	str	r2, [r5, #32]
    return cmd;
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(b);
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <nk_command_buffer_push+0x54>)
 800ae72:	4a06      	ldr	r2, [pc, #24]	; (800ae8c <nk_command_buffer_push+0x58>)
 800ae74:	212d      	movs	r1, #45	; 0x2d
 800ae76:	4806      	ldr	r0, [pc, #24]	; (800ae90 <nk_command_buffer_push+0x5c>)
 800ae78:	f00b fb68 	bl	801654c <__assert_func>
    NK_ASSERT(b->base);
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <nk_command_buffer_push+0x60>)
 800ae7e:	4a03      	ldr	r2, [pc, #12]	; (800ae8c <nk_command_buffer_push+0x58>)
 800ae80:	212e      	movs	r1, #46	; 0x2e
 800ae82:	4803      	ldr	r0, [pc, #12]	; (800ae90 <nk_command_buffer_push+0x5c>)
 800ae84:	f00b fb62 	bl	801654c <__assert_func>
 800ae88:	0801ac48 	.word	0x0801ac48
 800ae8c:	0801b06c 	.word	0x0801b06c
 800ae90:	0801b008 	.word	0x0801b008
 800ae94:	0801b024 	.word	0x0801b024

0800ae98 <nk_push_scissor>:
NK_API void
nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)
{
 800ae98:	b500      	push	{lr}
 800ae9a:	ed2d 8b04 	vpush	{d8-d9}
 800ae9e:	b085      	sub	sp, #20
    struct nk_command_scissor *cmd;
    NK_ASSERT(b);
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d03b      	beq.n	800af1c <nk_push_scissor+0x84>
 800aea4:	eef0 9a40 	vmov.f32	s19, s0
 800aea8:	eeb0 9a60 	vmov.f32	s18, s1
 800aeac:	eef0 8a41 	vmov.f32	s17, s2
 800aeb0:	eeb0 8a61 	vmov.f32	s16, s3
    if (!b) return;

    b->clip.x = r.x;
 800aeb4:	ed80 0a01 	vstr	s0, [r0, #4]
    b->clip.y = r.y;
 800aeb8:	edc0 0a02 	vstr	s1, [r0, #8]
    b->clip.w = r.w;
 800aebc:	ed80 1a03 	vstr	s2, [r0, #12]
    b->clip.h = r.h;
 800aec0:	edc0 1a04 	vstr	s3, [r0, #16]
    cmd = (struct nk_command_scissor*)
        nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));
 800aec4:	2210      	movs	r2, #16
 800aec6:	2101      	movs	r1, #1
 800aec8:	f7ff ffb4 	bl	800ae34 <nk_command_buffer_push>

    if (!cmd) return;
 800aecc:	b308      	cbz	r0, 800af12 <nk_push_scissor+0x7a>
    cmd->x = (short)r.x;
 800aece:	eefd 9ae9 	vcvt.s32.f32	s19, s19
 800aed2:	ee19 3a90 	vmov	r3, s19
 800aed6:	8103      	strh	r3, [r0, #8]
    cmd->y = (short)r.y;
 800aed8:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 800aedc:	ee19 3a10 	vmov	r3, s18
 800aee0:	8143      	strh	r3, [r0, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 800aee2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800aee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeea:	bfc3      	ittte	gt
 800aeec:	eefc 8ae8 	vcvtgt.u32.f32	s17, s17
 800aef0:	ee18 3a90 	vmovgt	r3, s17
 800aef4:	b29b      	uxthgt	r3, r3
 800aef6:	2300      	movle	r3, #0
 800aef8:	8183      	strh	r3, [r0, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 800aefa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af02:	bfc3      	ittte	gt
 800af04:	eebc 8ac8 	vcvtgt.u32.f32	s16, s16
 800af08:	ee18 3a10 	vmovgt	r3, s16
 800af0c:	b29b      	uxthgt	r3, r3
 800af0e:	2300      	movle	r3, #0
 800af10:	81c3      	strh	r3, [r0, #14]
}
 800af12:	b005      	add	sp, #20
 800af14:	ecbd 8b04 	vpop	{d8-d9}
 800af18:	f85d fb04 	ldr.w	pc, [sp], #4
    NK_ASSERT(b);
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <nk_push_scissor+0x90>)
 800af1e:	4a03      	ldr	r2, [pc, #12]	; (800af2c <nk_push_scissor+0x94>)
 800af20:	2148      	movs	r1, #72	; 0x48
 800af22:	4803      	ldr	r0, [pc, #12]	; (800af30 <nk_push_scissor+0x98>)
 800af24:	f00b fb12 	bl	801654c <__assert_func>
 800af28:	0801ac48 	.word	0x0801ac48
 800af2c:	0801b05c 	.word	0x0801b05c
 800af30:	0801b008 	.word	0x0801b008

0800af34 <nk_stroke_rect>:
    cmd->color = col;
}
NK_API void
nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, float line_thickness, struct nk_color c)
{
 800af34:	b500      	push	{lr}
 800af36:	ed2d 8b06 	vpush	{d8-d10}
 800af3a:	b087      	sub	sp, #28
 800af3c:	9101      	str	r1, [sp, #4]
    struct nk_command_rect *cmd;
    NK_ASSERT(b);
 800af3e:	2800      	cmp	r0, #0
 800af40:	d07e      	beq.n	800b040 <nk_stroke_rect+0x10c>
 800af42:	eeb0 aa40 	vmov.f32	s20, s0
 800af46:	eef0 aa60 	vmov.f32	s21, s1
 800af4a:	eef0 9a41 	vmov.f32	s19, s2
 800af4e:	eeb0 9a61 	vmov.f32	s18, s3
 800af52:	eef0 8a42 	vmov.f32	s17, s4
 800af56:	eeb0 8a62 	vmov.f32	s16, s5
 800af5a:	4684      	mov	ip, r0
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 800af5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d068      	beq.n	800b036 <nk_stroke_rect+0x102>
 800af64:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6c:	d063      	beq.n	800b036 <nk_stroke_rect+0x102>
 800af6e:	eef5 1a40 	vcmp.f32	s3, #0.0
 800af72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af76:	d05e      	beq.n	800b036 <nk_stroke_rect+0x102>
 800af78:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 800af7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af80:	d959      	bls.n	800b036 <nk_stroke_rect+0x102>
    if (b->use_clipping) {
 800af82:	6943      	ldr	r3, [r0, #20]
 800af84:	b31b      	cbz	r3, 800afce <nk_stroke_rect+0x9a>
        const struct nk_rect *clip = &b->clip;
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 800af86:	edd0 7a01 	vldr	s15, [r0, #4]
 800af8a:	ee30 7a01 	vadd.f32	s14, s0, s2
 800af8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af96:	d54e      	bpl.n	800b036 <nk_stroke_rect+0x102>
 800af98:	ed90 7a03 	vldr	s14, [r0, #12]
 800af9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afa0:	eef4 7ac0 	vcmpe.f32	s15, s0
 800afa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa8:	dd45      	ble.n	800b036 <nk_stroke_rect+0x102>
 800afaa:	edd0 7a02 	vldr	s15, [r0, #8]
 800afae:	ee30 7aa1 	vadd.f32	s14, s1, s3
 800afb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afba:	d53c      	bpl.n	800b036 <nk_stroke_rect+0x102>
 800afbc:	ed90 7a04 	vldr	s14, [r0, #16]
 800afc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afc4:	eef4 7ae0 	vcmpe.f32	s15, s1
 800afc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afcc:	dd33      	ble.n	800b036 <nk_stroke_rect+0x102>
            clip->x, clip->y, clip->w, clip->h)) return;
    }
    cmd = (struct nk_command_rect*)
        nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));
 800afce:	2218      	movs	r2, #24
 800afd0:	2104      	movs	r1, #4
 800afd2:	4660      	mov	r0, ip
 800afd4:	f7ff ff2e 	bl	800ae34 <nk_command_buffer_push>
    if (!cmd) return;
 800afd8:	b368      	cbz	r0, 800b036 <nk_stroke_rect+0x102>
    cmd->rounding = (unsigned short)rounding;
 800afda:	eebc 2ae8 	vcvt.u32.f32	s4, s17
 800afde:	ee12 3a10 	vmov	r3, s4
 800afe2:	8103      	strh	r3, [r0, #8]
    cmd->line_thickness = (unsigned short)line_thickness;
 800afe4:	eefc 2ac8 	vcvt.u32.f32	s5, s16
 800afe8:	ee12 3a90 	vmov	r3, s5
 800afec:	8143      	strh	r3, [r0, #10]
    cmd->x = (short)rect.x;
 800afee:	eebd 0aca 	vcvt.s32.f32	s0, s20
 800aff2:	ee10 3a10 	vmov	r3, s0
 800aff6:	8183      	strh	r3, [r0, #12]
    cmd->y = (short)rect.y;
 800aff8:	eefd 0aea 	vcvt.s32.f32	s1, s21
 800affc:	ee10 3a90 	vmov	r3, s1
 800b000:	81c3      	strh	r3, [r0, #14]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 800b002:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800b006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00a:	bfc3      	ittte	gt
 800b00c:	eebc 1ae9 	vcvtgt.u32.f32	s2, s19
 800b010:	ee11 3a10 	vmovgt	r3, s2
 800b014:	b29b      	uxthgt	r3, r3
 800b016:	2300      	movle	r3, #0
 800b018:	8203      	strh	r3, [r0, #16]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 800b01a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800b01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b022:	bfc3      	ittte	gt
 800b024:	eefc 1ac9 	vcvtgt.u32.f32	s3, s18
 800b028:	ee11 3a90 	vmovgt	r3, s3
 800b02c:	b29b      	uxthgt	r3, r3
 800b02e:	2300      	movle	r3, #0
 800b030:	8243      	strh	r3, [r0, #18]
    cmd->color = c;
 800b032:	9b01      	ldr	r3, [sp, #4]
 800b034:	6143      	str	r3, [r0, #20]
}
 800b036:	b007      	add	sp, #28
 800b038:	ecbd 8b06 	vpop	{d8-d10}
 800b03c:	f85d fb04 	ldr.w	pc, [sp], #4
    NK_ASSERT(b);
 800b040:	4b02      	ldr	r3, [pc, #8]	; (800b04c <nk_stroke_rect+0x118>)
 800b042:	4a03      	ldr	r2, [pc, #12]	; (800b050 <nk_stroke_rect+0x11c>)
 800b044:	2185      	movs	r1, #133	; 0x85
 800b046:	4803      	ldr	r0, [pc, #12]	; (800b054 <nk_stroke_rect+0x120>)
 800b048:	f00b fa80 	bl	801654c <__assert_func>
 800b04c:	0801ac48 	.word	0x0801ac48
 800b050:	0801b04c 	.word	0x0801b04c
 800b054:	0801b008 	.word	0x0801b008

0800b058 <nk_fill_rect>:
NK_API void
nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, struct nk_color c)
{
 800b058:	b500      	push	{lr}
 800b05a:	ed2d 8b06 	vpush	{d8-d10}
 800b05e:	b087      	sub	sp, #28
 800b060:	9101      	str	r1, [sp, #4]
    struct nk_command_rect_filled *cmd;
    NK_ASSERT(b);
 800b062:	2800      	cmp	r0, #0
 800b064:	d074      	beq.n	800b150 <nk_fill_rect+0xf8>
 800b066:	eeb0 aa40 	vmov.f32	s20, s0
 800b06a:	eef0 9a60 	vmov.f32	s19, s1
 800b06e:	eeb0 8a41 	vmov.f32	s16, s2
 800b072:	eeb0 9a61 	vmov.f32	s18, s3
 800b076:	eef0 8a42 	vmov.f32	s17, s4
 800b07a:	4684      	mov	ip, r0
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 800b07c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d060      	beq.n	800b146 <nk_fill_rect+0xee>
 800b084:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800b088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08c:	d05b      	beq.n	800b146 <nk_fill_rect+0xee>
 800b08e:	eef5 1a40 	vcmp.f32	s3, #0.0
 800b092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b096:	d056      	beq.n	800b146 <nk_fill_rect+0xee>
    if (b->use_clipping) {
 800b098:	6943      	ldr	r3, [r0, #20]
 800b09a:	b31b      	cbz	r3, 800b0e4 <nk_fill_rect+0x8c>
        const struct nk_rect *clip = &b->clip;
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 800b09c:	edd0 7a01 	vldr	s15, [r0, #4]
 800b0a0:	ee30 7a01 	vadd.f32	s14, s0, s2
 800b0a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ac:	d54b      	bpl.n	800b146 <nk_fill_rect+0xee>
 800b0ae:	ed90 7a03 	vldr	s14, [r0, #12]
 800b0b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0b6:	eef4 7ac0 	vcmpe.f32	s15, s0
 800b0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0be:	dd42      	ble.n	800b146 <nk_fill_rect+0xee>
 800b0c0:	edd0 7a02 	vldr	s15, [r0, #8]
 800b0c4:	ee30 7aa1 	vadd.f32	s14, s1, s3
 800b0c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d0:	d539      	bpl.n	800b146 <nk_fill_rect+0xee>
 800b0d2:	ed90 7a04 	vldr	s14, [r0, #16]
 800b0d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0da:	eef4 7ae0 	vcmpe.f32	s15, s1
 800b0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e2:	dd30      	ble.n	800b146 <nk_fill_rect+0xee>
            clip->x, clip->y, clip->w, clip->h)) return;
    }

    cmd = (struct nk_command_rect_filled*)
        nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));
 800b0e4:	2218      	movs	r2, #24
 800b0e6:	2105      	movs	r1, #5
 800b0e8:	4660      	mov	r0, ip
 800b0ea:	f7ff fea3 	bl	800ae34 <nk_command_buffer_push>
    if (!cmd) return;
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	b348      	cbz	r0, 800b146 <nk_fill_rect+0xee>
    cmd->rounding = (unsigned short)rounding;
 800b0f2:	eebc 2ae8 	vcvt.u32.f32	s4, s17
 800b0f6:	ee12 3a10 	vmov	r3, s4
 800b0fa:	8103      	strh	r3, [r0, #8]
    cmd->x = (short)rect.x;
 800b0fc:	eebd 0aca 	vcvt.s32.f32	s0, s20
 800b100:	ee10 3a10 	vmov	r3, s0
 800b104:	8143      	strh	r3, [r0, #10]
    cmd->y = (short)rect.y;
 800b106:	eefd 0ae9 	vcvt.s32.f32	s1, s19
 800b10a:	ee10 3a90 	vmov	r3, s1
 800b10e:	8183      	strh	r3, [r0, #12]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 800b110:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b118:	bfc3      	ittte	gt
 800b11a:	eebc 8ac8 	vcvtgt.u32.f32	s16, s16
 800b11e:	ee18 3a10 	vmovgt	r3, s16
 800b122:	b29b      	uxthgt	r3, r3
 800b124:	2300      	movle	r3, #0
 800b126:	81c3      	strh	r3, [r0, #14]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 800b128:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800b12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b130:	bfc3      	ittte	gt
 800b132:	eefc 1ac9 	vcvtgt.u32.f32	s3, s18
 800b136:	ee11 3a90 	vmovgt	r3, s3
 800b13a:	b29b      	uxthgt	r3, r3
 800b13c:	2300      	movle	r3, #0
 800b13e:	8203      	strh	r3, [r0, #16]
    cmd->color = c;
 800b140:	9801      	ldr	r0, [sp, #4]
 800b142:	f8c2 0012 	str.w	r0, [r2, #18]
}
 800b146:	b007      	add	sp, #28
 800b148:	ecbd 8b06 	vpop	{d8-d10}
 800b14c:	f85d fb04 	ldr.w	pc, [sp], #4
    NK_ASSERT(b);
 800b150:	4b02      	ldr	r3, [pc, #8]	; (800b15c <nk_fill_rect+0x104>)
 800b152:	4a03      	ldr	r2, [pc, #12]	; (800b160 <nk_fill_rect+0x108>)
 800b154:	219c      	movs	r1, #156	; 0x9c
 800b156:	4803      	ldr	r0, [pc, #12]	; (800b164 <nk_fill_rect+0x10c>)
 800b158:	f00b f9f8 	bl	801654c <__assert_func>
 800b15c:	0801ac48 	.word	0x0801ac48
 800b160:	0801b03c 	.word	0x0801b03c
 800b164:	0801b008 	.word	0x0801b008

0800b168 <nk_fill_circle>:
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
    cmd->color = c;
}
NK_API void
nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)
{
 800b168:	b500      	push	{lr}
 800b16a:	ed2d 8b04 	vpush	{d8-d9}
 800b16e:	b087      	sub	sp, #28
 800b170:	9101      	str	r1, [sp, #4]
    struct nk_command_circle_filled *cmd;
    NK_ASSERT(b);
 800b172:	2800      	cmp	r0, #0
 800b174:	d06b      	beq.n	800b24e <nk_fill_circle+0xe6>
 800b176:	eeb0 9a40 	vmov.f32	s18, s0
 800b17a:	eef0 9a60 	vmov.f32	s19, s1
 800b17e:	eeb0 8a41 	vmov.f32	s16, s2
 800b182:	eef0 8a61 	vmov.f32	s17, s3
 800b186:	4684      	mov	ip, r0
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 800b188:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d059      	beq.n	800b244 <nk_fill_circle+0xdc>
 800b190:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800b194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b198:	d054      	beq.n	800b244 <nk_fill_circle+0xdc>
 800b19a:	eef5 1a40 	vcmp.f32	s3, #0.0
 800b19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a2:	d04f      	beq.n	800b244 <nk_fill_circle+0xdc>
    if (b->use_clipping) {
 800b1a4:	6943      	ldr	r3, [r0, #20]
 800b1a6:	b31b      	cbz	r3, 800b1f0 <nk_fill_circle+0x88>
        const struct nk_rect *clip = &b->clip;
        if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))
 800b1a8:	edd0 7a01 	vldr	s15, [r0, #4]
 800b1ac:	ee30 7a01 	vadd.f32	s14, s0, s2
 800b1b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b8:	d544      	bpl.n	800b244 <nk_fill_circle+0xdc>
 800b1ba:	ed90 7a03 	vldr	s14, [r0, #12]
 800b1be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1c2:	eef4 7ac0 	vcmpe.f32	s15, s0
 800b1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ca:	dd3b      	ble.n	800b244 <nk_fill_circle+0xdc>
 800b1cc:	edd0 7a02 	vldr	s15, [r0, #8]
 800b1d0:	ee30 7aa1 	vadd.f32	s14, s1, s3
 800b1d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1dc:	d532      	bpl.n	800b244 <nk_fill_circle+0xdc>
 800b1de:	ed90 7a04 	vldr	s14, [r0, #16]
 800b1e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1e6:	eef4 7ae0 	vcmpe.f32	s15, s1
 800b1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ee:	dd29      	ble.n	800b244 <nk_fill_circle+0xdc>
            return;
    }

    cmd = (struct nk_command_circle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));
 800b1f0:	2214      	movs	r2, #20
 800b1f2:	2108      	movs	r1, #8
 800b1f4:	4660      	mov	r0, ip
 800b1f6:	f7ff fe1d 	bl	800ae34 <nk_command_buffer_push>
    if (!cmd) return;
 800b1fa:	b318      	cbz	r0, 800b244 <nk_fill_circle+0xdc>
    cmd->x = (short)r.x;
 800b1fc:	eebd 0ac9 	vcvt.s32.f32	s0, s18
 800b200:	ee10 3a10 	vmov	r3, s0
 800b204:	8103      	strh	r3, [r0, #8]
    cmd->y = (short)r.y;
 800b206:	eefd 0ae9 	vcvt.s32.f32	s1, s19
 800b20a:	ee10 3a90 	vmov	r3, s1
 800b20e:	8143      	strh	r3, [r0, #10]
    cmd->w = (unsigned short)NK_MAX(r.w, 0);
 800b210:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b218:	bf5d      	ittte	pl
 800b21a:	eebc 8ac8 	vcvtpl.u32.f32	s16, s16
 800b21e:	ee18 3a10 	vmovpl	r3, s16
 800b222:	b29b      	uxthpl	r3, r3
 800b224:	2300      	movmi	r3, #0
 800b226:	8183      	strh	r3, [r0, #12]
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
 800b228:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b230:	bf5d      	ittte	pl
 800b232:	eefc 1ae8 	vcvtpl.u32.f32	s3, s17
 800b236:	ee11 3a90 	vmovpl	r3, s3
 800b23a:	b29b      	uxthpl	r3, r3
 800b23c:	2300      	movmi	r3, #0
 800b23e:	81c3      	strh	r3, [r0, #14]
    cmd->color = c;
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	6103      	str	r3, [r0, #16]
}
 800b244:	b007      	add	sp, #28
 800b246:	ecbd 8b04 	vpop	{d8-d9}
 800b24a:	f85d fb04 	ldr.w	pc, [sp], #4
    NK_ASSERT(b);
 800b24e:	4b03      	ldr	r3, [pc, #12]	; (800b25c <nk_fill_circle+0xf4>)
 800b250:	4a03      	ldr	r2, [pc, #12]	; (800b260 <nk_fill_circle+0xf8>)
 800b252:	21e2      	movs	r1, #226	; 0xe2
 800b254:	4803      	ldr	r0, [pc, #12]	; (800b264 <nk_fill_circle+0xfc>)
 800b256:	f00b f979 	bl	801654c <__assert_func>
 800b25a:	bf00      	nop
 800b25c:	0801ac48 	.word	0x0801ac48
 800b260:	0801b0d8 	.word	0x0801b0d8
 800b264:	0801b008 	.word	0x0801b008

0800b268 <nk_fill_triangle>:
    cmd->color = c;
}
NK_API void
nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,
    float y1, float x2, float y2, struct nk_color c)
{
 800b268:	b500      	push	{lr}
 800b26a:	ed2d 8b06 	vpush	{d8-d10}
 800b26e:	b083      	sub	sp, #12
 800b270:	9101      	str	r1, [sp, #4]
    struct nk_command_triangle_filled *cmd;
    NK_ASSERT(b);
 800b272:	2800      	cmp	r0, #0
 800b274:	f000 809c 	beq.w	800b3b0 <nk_fill_triangle+0x148>
 800b278:	eef0 aa40 	vmov.f32	s21, s0
 800b27c:	eeb0 aa60 	vmov.f32	s20, s1
 800b280:	eef0 9a41 	vmov.f32	s19, s2
 800b284:	eeb0 9a61 	vmov.f32	s18, s3
 800b288:	eef0 8a42 	vmov.f32	s17, s4
 800b28c:	eeb0 8a62 	vmov.f32	s16, s5
 800b290:	4603      	mov	r3, r0
    if (!b || c.a == 0) return;
 800b292:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b296:	2a00      	cmp	r2, #0
 800b298:	f000 8085 	beq.w	800b3a6 <nk_fill_triangle+0x13e>
    if (!b) return;
    if (b->use_clipping) {
 800b29c:	6942      	ldr	r2, [r0, #20]
 800b29e:	2a00      	cmp	r2, #0
 800b2a0:	d05b      	beq.n	800b35a <nk_fill_triangle+0xf2>
        const struct nk_rect *clip = &b->clip;
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 800b2a2:	edd0 7a01 	vldr	s15, [r0, #4]
 800b2a6:	eef4 7ac0 	vcmpe.f32	s15, s0
 800b2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ae:	d818      	bhi.n	800b2e2 <nk_fill_triangle+0x7a>
 800b2b0:	ed90 7a03 	vldr	s14, [r0, #12]
 800b2b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b8:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800b2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c0:	dd0f      	ble.n	800b2e2 <nk_fill_triangle+0x7a>
 800b2c2:	ed90 7a02 	vldr	s14, [r0, #8]
 800b2c6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ce:	d808      	bhi.n	800b2e2 <nk_fill_triangle+0x7a>
 800b2d0:	edd0 6a04 	vldr	s13, [r0, #16]
 800b2d4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b2d8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e0:	dc3b      	bgt.n	800b35a <nk_fill_triangle+0xf2>
 800b2e2:	eef4 7ae9 	vcmpe.f32	s15, s19
 800b2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ea:	d818      	bhi.n	800b31e <nk_fill_triangle+0xb6>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 800b2ec:	ed93 7a03 	vldr	s14, [r3, #12]
 800b2f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f4:	eeb4 7ae9 	vcmpe.f32	s14, s19
 800b2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fc:	dd0f      	ble.n	800b31e <nk_fill_triangle+0xb6>
 800b2fe:	ed93 7a02 	vldr	s14, [r3, #8]
 800b302:	eeb4 7ac9 	vcmpe.f32	s14, s18
 800b306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b30a:	d808      	bhi.n	800b31e <nk_fill_triangle+0xb6>
 800b30c:	edd3 6a04 	vldr	s13, [r3, #16]
 800b310:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b314:	eeb4 7ac9 	vcmpe.f32	s14, s18
 800b318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31c:	dc1d      	bgt.n	800b35a <nk_fill_triangle+0xf2>
 800b31e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b326:	d83e      	bhi.n	800b3a6 <nk_fill_triangle+0x13e>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 800b328:	ed93 7a03 	vldr	s14, [r3, #12]
 800b32c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b330:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b338:	dd35      	ble.n	800b3a6 <nk_fill_triangle+0x13e>
 800b33a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b33e:	eef4 7ac8 	vcmpe.f32	s15, s16
 800b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b346:	d82e      	bhi.n	800b3a6 <nk_fill_triangle+0x13e>
 800b348:	ed93 7a04 	vldr	s14, [r3, #16]
 800b34c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b350:	eef4 7ac8 	vcmpe.f32	s15, s16
 800b354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b358:	dd25      	ble.n	800b3a6 <nk_fill_triangle+0x13e>
            return;
    }

    cmd = (struct nk_command_triangle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));
 800b35a:	2218      	movs	r2, #24
 800b35c:	210c      	movs	r1, #12
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff fd68 	bl	800ae34 <nk_command_buffer_push>
    if (!cmd) return;
 800b364:	b1f8      	cbz	r0, 800b3a6 <nk_fill_triangle+0x13e>
    cmd->a.x = (short)x0;
 800b366:	eebd 0aea 	vcvt.s32.f32	s0, s21
 800b36a:	ee10 2a10 	vmov	r2, s0
 800b36e:	8102      	strh	r2, [r0, #8]
    cmd->a.y = (short)y0;
 800b370:	eefd 0aca 	vcvt.s32.f32	s1, s20
 800b374:	ee10 2a90 	vmov	r2, s1
 800b378:	8142      	strh	r2, [r0, #10]
    cmd->b.x = (short)x1;
 800b37a:	eebd 1ae9 	vcvt.s32.f32	s2, s19
 800b37e:	ee11 2a10 	vmov	r2, s2
 800b382:	8182      	strh	r2, [r0, #12]
    cmd->b.y = (short)y1;
 800b384:	eefd 1ac9 	vcvt.s32.f32	s3, s18
 800b388:	ee11 2a90 	vmov	r2, s3
 800b38c:	81c2      	strh	r2, [r0, #14]
    cmd->c.x = (short)x2;
 800b38e:	eebd 2ae8 	vcvt.s32.f32	s4, s17
 800b392:	ee12 2a10 	vmov	r2, s4
 800b396:	8202      	strh	r2, [r0, #16]
    cmd->c.y = (short)y2;
 800b398:	eefd 2ac8 	vcvt.s32.f32	s5, s16
 800b39c:	ee12 2a90 	vmov	r2, s5
 800b3a0:	8242      	strh	r2, [r0, #18]
    cmd->color = c;
 800b3a2:	9a01      	ldr	r2, [sp, #4]
 800b3a4:	6142      	str	r2, [r0, #20]
}
 800b3a6:	b003      	add	sp, #12
 800b3a8:	ecbd 8b06 	vpop	{d8-d10}
 800b3ac:	f85d fb04 	ldr.w	pc, [sp], #4
    NK_ASSERT(b);
 800b3b0:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <nk_fill_triangle+0x158>)
 800b3b2:	4a04      	ldr	r2, [pc, #16]	; (800b3c4 <nk_fill_triangle+0x15c>)
 800b3b4:	f240 1135 	movw	r1, #309	; 0x135
 800b3b8:	4803      	ldr	r0, [pc, #12]	; (800b3c8 <nk_fill_triangle+0x160>)
 800b3ba:	f00b f8c7 	bl	801654c <__assert_func>
 800b3be:	bf00      	nop
 800b3c0:	0801ac48 	.word	0x0801ac48
 800b3c4:	0801b0c4 	.word	0x0801b0c4
 800b3c8:	0801b008 	.word	0x0801b008

0800b3cc <nk_draw_image>:
    }
}
NK_API void
nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_image *img, struct nk_color col)
{
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	ed2d 8b04 	vpush	{d8-d9}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	9201      	str	r2, [sp, #4]
    struct nk_command_image *cmd;
    NK_ASSERT(b);
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d06f      	beq.n	800b4ba <nk_draw_image+0xee>
 800b3da:	eeb0 9a40 	vmov.f32	s18, s0
 800b3de:	eef0 9a60 	vmov.f32	s19, s1
 800b3e2:	eeb0 8a41 	vmov.f32	s16, s2
 800b3e6:	eef0 8a61 	vmov.f32	s17, s3
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	4603      	mov	r3, r0
    if (!b) return;
    if (b->use_clipping) {
 800b3ee:	6942      	ldr	r2, [r0, #20]
 800b3f0:	b36a      	cbz	r2, 800b44e <nk_draw_image+0x82>
        const struct nk_rect *c = &b->clip;
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 800b3f2:	edd0 7a03 	vldr	s15, [r0, #12]
 800b3f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fe:	d058      	beq.n	800b4b2 <nk_draw_image+0xe6>
 800b400:	ed90 7a04 	vldr	s14, [r0, #16]
 800b404:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40c:	d051      	beq.n	800b4b2 <nk_draw_image+0xe6>
 800b40e:	edd0 6a01 	vldr	s13, [r0, #4]
 800b412:	ee30 6a01 	vadd.f32	s12, s0, s2
 800b416:	eef4 6ac6 	vcmpe.f32	s13, s12
 800b41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41e:	d548      	bpl.n	800b4b2 <nk_draw_image+0xe6>
 800b420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b424:	eef4 7ac0 	vcmpe.f32	s15, s0
 800b428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42c:	dd41      	ble.n	800b4b2 <nk_draw_image+0xe6>
 800b42e:	edd0 7a02 	vldr	s15, [r0, #8]
 800b432:	ee70 6aa1 	vadd.f32	s13, s1, s3
 800b436:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b43e:	d538      	bpl.n	800b4b2 <nk_draw_image+0xe6>
 800b440:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b444:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44c:	dd31      	ble.n	800b4b2 <nk_draw_image+0xe6>
            return;
    }

    cmd = (struct nk_command_image*)
        nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));
 800b44e:	2224      	movs	r2, #36	; 0x24
 800b450:	2111      	movs	r1, #17
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff fcee 	bl	800ae34 <nk_command_buffer_push>
    if (!cmd) return;
 800b458:	4684      	mov	ip, r0
 800b45a:	b350      	cbz	r0, 800b4b2 <nk_draw_image+0xe6>
    cmd->x = (short)r.x;
 800b45c:	eebd 0ac9 	vcvt.s32.f32	s0, s18
 800b460:	ee10 3a10 	vmov	r3, s0
 800b464:	8103      	strh	r3, [r0, #8]
    cmd->y = (short)r.y;
 800b466:	eefd 0ae9 	vcvt.s32.f32	s1, s19
 800b46a:	ee10 3a90 	vmov	r3, s1
 800b46e:	8143      	strh	r3, [r0, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 800b470:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b478:	bfc3      	ittte	gt
 800b47a:	eebc 1ac8 	vcvtgt.u32.f32	s2, s16
 800b47e:	ee11 3a10 	vmovgt	r3, s2
 800b482:	b29b      	uxthgt	r3, r3
 800b484:	2300      	movle	r3, #0
 800b486:	8183      	strh	r3, [r0, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 800b488:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b490:	bfc3      	ittte	gt
 800b492:	eefc 1ae8 	vcvtgt.u32.f32	s3, s17
 800b496:	ee11 3a90 	vmovgt	r3, s3
 800b49a:	b29b      	uxthgt	r3, r3
 800b49c:	2300      	movle	r3, #0
 800b49e:	81c3      	strh	r3, [r0, #14]
    cmd->img = *img;
 800b4a0:	f100 0e10 	add.w	lr, r0, #16
 800b4a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b4a8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    cmd->col = col;
 800b4ac:	9b01      	ldr	r3, [sp, #4]
 800b4ae:	f8cc 3020 	str.w	r3, [ip, #32]
}
 800b4b2:	b006      	add	sp, #24
 800b4b4:	ecbd 8b04 	vpop	{d8-d9}
 800b4b8:	bd10      	pop	{r4, pc}
    NK_ASSERT(b);
 800b4ba:	4b03      	ldr	r3, [pc, #12]	; (800b4c8 <nk_draw_image+0xfc>)
 800b4bc:	4a03      	ldr	r2, [pc, #12]	; (800b4cc <nk_draw_image+0x100>)
 800b4be:	f240 118f 	movw	r1, #399	; 0x18f
 800b4c2:	4803      	ldr	r0, [pc, #12]	; (800b4d0 <nk_draw_image+0x104>)
 800b4c4:	f00b f842 	bl	801654c <__assert_func>
 800b4c8:	0801ac48 	.word	0x0801ac48
 800b4cc:	0801b0b4 	.word	0x0801b0b4
 800b4d0:	0801b008 	.word	0x0801b008

0800b4d4 <nk_draw_nine_slice>:
NK_API void
nk_draw_nine_slice(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_nine_slice *slc, struct nk_color col)
{
 800b4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	ed2d 8b06 	vpush	{d8-d10}
 800b4dc:	b0ae      	sub	sp, #184	; 0xb8
 800b4de:	4607      	mov	r7, r0
 800b4e0:	eef0 8a40 	vmov.f32	s17, s0
 800b4e4:	eeb0 8a60 	vmov.f32	s16, s1
 800b4e8:	eeb0 9a41 	vmov.f32	s18, s2
 800b4ec:	eef0 9a61 	vmov.f32	s19, s3
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	9201      	str	r2, [sp, #4]
    struct nk_image img;
    const struct nk_image *slcimg = (const struct nk_image*)slc;
    nk_ushort rgnX, rgnY, rgnW, rgnH;
    rgnX = slcimg->region[0];
 800b4f4:	890d      	ldrh	r5, [r1, #8]
    rgnY = slcimg->region[1];
 800b4f6:	894e      	ldrh	r6, [r1, #10]
    rgnW = slcimg->region[2];
 800b4f8:	f8b1 900c 	ldrh.w	r9, [r1, #12]
    rgnH = slcimg->region[3];
 800b4fc:	f8b1 a00e 	ldrh.w	sl, [r1, #14]

    /* top-left */
    img.handle = slcimg->handle;
 800b500:	680b      	ldr	r3, [r1, #0]
 800b502:	9306      	str	r3, [sp, #24]
    img.w = slcimg->w;
 800b504:	888b      	ldrh	r3, [r1, #4]
 800b506:	f8ad 301c 	strh.w	r3, [sp, #28]
    img.h = slcimg->h;
 800b50a:	88cb      	ldrh	r3, [r1, #6]
 800b50c:	f8ad 301e 	strh.w	r3, [sp, #30]
    img.region[0] = rgnX;
 800b510:	f8ad 5020 	strh.w	r5, [sp, #32]
    img.region[1] = rgnY;
 800b514:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
    img.region[2] = slc->l;
 800b518:	8a0b      	ldrh	r3, [r1, #16]
 800b51a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    img.region[3] = slc->t;
 800b51e:	8a4a      	ldrh	r2, [r1, #18]
 800b520:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26

    nk_draw_image(b,
 800b524:	ee07 2a90 	vmov	s15, r2
 800b528:	eef8 1a67 	vcvt.f32.u32	s3, s15
 800b52c:	ee07 3a90 	vmov	s15, r3
 800b530:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800b534:	f002 f96a 	bl	800d80c <nk_rect>
 800b538:	9a01      	ldr	r2, [sp, #4]
 800b53a:	a906      	add	r1, sp, #24
 800b53c:	4638      	mov	r0, r7
 800b53e:	f7ff ff45 	bl	800b3cc <nk_draw_image>
        &img, col);

#define IMG_RGN(x, y, w, h) img.region[0] = (nk_ushort)(x); img.region[1] = (nk_ushort)(y); img.region[2] = (nk_ushort)(w); img.region[3] = (nk_ushort)(h);

    /* top-center */
    IMG_RGN(rgnX + slc->l, rgnY, rgnW - slc->l - slc->r, slc->t);
 800b542:	8a23      	ldrh	r3, [r4, #16]
 800b544:	195a      	adds	r2, r3, r5
 800b546:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b54a:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800b54e:	8aa2      	ldrh	r2, [r4, #20]
 800b550:	1899      	adds	r1, r3, r2
 800b552:	eba9 0101 	sub.w	r1, r9, r1
 800b556:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800b55a:	8a61      	ldrh	r1, [r4, #18]
 800b55c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 800b560:	ee07 3a90 	vmov	s15, r3
 800b564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b568:	ee79 7a67 	vsub.f32	s15, s18, s15
    nk_draw_image(b,
 800b56c:	ee07 2a10 	vmov	s14, r2
 800b570:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 800b574:	ee07 3a10 	vmov	s14, r3
 800b578:	eeb8 0a47 	vcvt.f32.u32	s0, s14
    nk_draw_image(b,
 800b57c:	ee07 1a10 	vmov	s14, r1
 800b580:	eef8 1a47 	vcvt.f32.u32	s3, s14
 800b584:	ee37 1ac1 	vsub.f32	s2, s15, s2
 800b588:	eef0 0a48 	vmov.f32	s1, s16
 800b58c:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b590:	f002 f93c 	bl	800d80c <nk_rect>
 800b594:	9a01      	ldr	r2, [sp, #4]
 800b596:	a906      	add	r1, sp, #24
 800b598:	4638      	mov	r0, r7
 800b59a:	f7ff ff17 	bl	800b3cc <nk_draw_image>
        &img, col);

    /* top-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY, slc->r, slc->t);
 800b59e:	eb05 0809 	add.w	r8, r5, r9
 800b5a2:	fa1f f888 	uxth.w	r8, r8
 800b5a6:	8aa3      	ldrh	r3, [r4, #20]
 800b5a8:	eba8 0203 	sub.w	r2, r8, r3
 800b5ac:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b5b0:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800b5b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800b5b8:	8a62      	ldrh	r2, [r4, #18]
 800b5ba:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 800b5be:	ee38 aa89 	vadd.f32	s20, s17, s18
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eeb8 1a67 	vcvt.f32.u32	s2, s15
    nk_draw_image(b,
 800b5ca:	ee07 2a90 	vmov	s15, r2
 800b5ce:	eef8 1a67 	vcvt.f32.u32	s3, s15
 800b5d2:	eef0 0a48 	vmov.f32	s1, s16
 800b5d6:	ee3a 0a41 	vsub.f32	s0, s20, s2
 800b5da:	f002 f917 	bl	800d80c <nk_rect>
 800b5de:	9a01      	ldr	r2, [sp, #4]
 800b5e0:	a906      	add	r1, sp, #24
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f7ff fef2 	bl	800b3cc <nk_draw_image>
        &img, col);

    /* center-left */
    IMG_RGN(rgnX, rgnY + slc->t, slc->l, rgnH - slc->t - slc->b);
 800b5e8:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b5ec:	8a63      	ldrh	r3, [r4, #18]
 800b5ee:	199a      	adds	r2, r3, r6
 800b5f0:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 800b5f4:	8a20      	ldrh	r0, [r4, #16]
 800b5f6:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800b5fa:	8ae2      	ldrh	r2, [r4, #22]
 800b5fc:	1899      	adds	r1, r3, r2
 800b5fe:	ebaa 0101 	sub.w	r1, sl, r1
 800b602:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 800b606:	ee07 3a90 	vmov	s15, r3
 800b60a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b60e:	ee79 7ae7 	vsub.f32	s15, s19, s15
    nk_draw_image(b,
 800b612:	ee07 2a10 	vmov	s14, r2
 800b616:	eef8 1ac7 	vcvt.f32.s32	s3, s14
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 800b61a:	ee07 3a10 	vmov	s14, r3
 800b61e:	eef8 0a47 	vcvt.f32.u32	s1, s14
    nk_draw_image(b,
 800b622:	ee77 1ae1 	vsub.f32	s3, s15, s3
 800b626:	ee07 0a90 	vmov	s15, r0
 800b62a:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800b62e:	ee70 0a88 	vadd.f32	s1, s1, s16
 800b632:	eeb0 0a68 	vmov.f32	s0, s17
 800b636:	f002 f8e9 	bl	800d80c <nk_rect>
 800b63a:	9a01      	ldr	r2, [sp, #4]
 800b63c:	a906      	add	r1, sp, #24
 800b63e:	4638      	mov	r0, r7
 800b640:	f7ff fec4 	bl	800b3cc <nk_draw_image>
        &img, col);

    /* center */
    IMG_RGN(rgnX + slc->l, rgnY + slc->t, rgnW - slc->l - slc->r, rgnH - slc->t - slc->b);
 800b644:	8a23      	ldrh	r3, [r4, #16]
 800b646:	195a      	adds	r2, r3, r5
 800b648:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b64c:	8a62      	ldrh	r2, [r4, #18]
 800b64e:	1991      	adds	r1, r2, r6
 800b650:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800b654:	8aa1      	ldrh	r1, [r4, #20]
 800b656:	1858      	adds	r0, r3, r1
 800b658:	eba9 0000 	sub.w	r0, r9, r0
 800b65c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800b660:	8ae0      	ldrh	r0, [r4, #22]
 800b662:	eb02 0c00 	add.w	ip, r2, r0
 800b666:	ebaa 0c0c 	sub.w	ip, sl, ip
 800b66a:	f8ad c026 	strh.w	ip, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 800b66e:	ee07 2a90 	vmov	s15, r2
 800b672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b676:	ee39 7ac7 	vsub.f32	s14, s19, s14
    nk_draw_image(b,
 800b67a:	ee07 0a90 	vmov	s15, r0
 800b67e:	eef8 1ae7 	vcvt.f32.s32	s3, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b68a:	ee79 7a67 	vsub.f32	s15, s18, s15
    nk_draw_image(b,
 800b68e:	ee06 1a90 	vmov	s13, r1
 800b692:	eeb8 1ae6 	vcvt.f32.s32	s2, s13
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 800b696:	ee06 2a90 	vmov	s13, r2
 800b69a:	eef8 0a66 	vcvt.f32.u32	s1, s13
 800b69e:	ee06 3a90 	vmov	s13, r3
 800b6a2:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    nk_draw_image(b,
 800b6a6:	ee77 1a61 	vsub.f32	s3, s14, s3
 800b6aa:	ee37 1ac1 	vsub.f32	s2, s15, s2
 800b6ae:	ee70 0a88 	vadd.f32	s1, s1, s16
 800b6b2:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b6b6:	f002 f8a9 	bl	800d80c <nk_rect>
 800b6ba:	9a01      	ldr	r2, [sp, #4]
 800b6bc:	a906      	add	r1, sp, #24
 800b6be:	4638      	mov	r0, r7
 800b6c0:	f7ff fe84 	bl	800b3cc <nk_draw_image>
        &img, col);

    /* center-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + slc->t, slc->r, rgnH - slc->t - slc->b);
 800b6c4:	8aa3      	ldrh	r3, [r4, #20]
 800b6c6:	eba8 0203 	sub.w	r2, r8, r3
 800b6ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b6ce:	8a62      	ldrh	r2, [r4, #18]
 800b6d0:	1991      	adds	r1, r2, r6
 800b6d2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800b6d6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800b6da:	8ae1      	ldrh	r1, [r4, #22]
 800b6dc:	1850      	adds	r0, r2, r1
 800b6de:	ebaa 0000 	sub.w	r0, sl, r0
 800b6e2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 800b6e6:	ee07 3a90 	vmov	s15, r3
 800b6ea:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800b6ee:	ee07 2a90 	vmov	s15, r2
 800b6f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6f6:	ee79 7ae7 	vsub.f32	s15, s19, s15
    nk_draw_image(b,
 800b6fa:	ee07 1a10 	vmov	s14, r1
 800b6fe:	eef8 1ac7 	vcvt.f32.s32	s3, s14
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 800b702:	ee07 2a10 	vmov	s14, r2
 800b706:	eef8 0a47 	vcvt.f32.u32	s1, s14
    nk_draw_image(b,
 800b70a:	ee77 1ae1 	vsub.f32	s3, s15, s3
 800b70e:	ee70 0a88 	vadd.f32	s1, s1, s16
 800b712:	ee3a 0a41 	vsub.f32	s0, s20, s2
 800b716:	f002 f879 	bl	800d80c <nk_rect>
 800b71a:	9a01      	ldr	r2, [sp, #4]
 800b71c:	a906      	add	r1, sp, #24
 800b71e:	4638      	mov	r0, r7
 800b720:	f7ff fe54 	bl	800b3cc <nk_draw_image>
        &img, col);

    /* bottom-left */
    IMG_RGN(rgnX, rgnY + rgnH - slc->b, slc->l, slc->b);
 800b724:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b728:	4456      	add	r6, sl
 800b72a:	b2b6      	uxth	r6, r6
 800b72c:	8ae3      	ldrh	r3, [r4, #22]
 800b72e:	1af2      	subs	r2, r6, r3
 800b730:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 800b734:	8a22      	ldrh	r2, [r4, #16]
 800b736:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800b73a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 800b73e:	ee38 8a29 	vadd.f32	s16, s16, s19
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 1a67 	vcvt.f32.u32	s3, s15
    nk_draw_image(b,
 800b74a:	ee07 2a90 	vmov	s15, r2
 800b74e:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800b752:	ee78 0a61 	vsub.f32	s1, s16, s3
 800b756:	eeb0 0a68 	vmov.f32	s0, s17
 800b75a:	f002 f857 	bl	800d80c <nk_rect>
 800b75e:	9a01      	ldr	r2, [sp, #4]
 800b760:	a906      	add	r1, sp, #24
 800b762:	4638      	mov	r0, r7
 800b764:	f7ff fe32 	bl	800b3cc <nk_draw_image>
        &img, col);

    /* bottom-center */
    IMG_RGN(rgnX + slc->l, rgnY + rgnH - slc->b, rgnW - slc->l - slc->r, slc->b);
 800b768:	8a23      	ldrh	r3, [r4, #16]
 800b76a:	441d      	add	r5, r3
 800b76c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b770:	8ae2      	ldrh	r2, [r4, #22]
 800b772:	1ab1      	subs	r1, r6, r2
 800b774:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800b778:	8aa1      	ldrh	r1, [r4, #20]
 800b77a:	1858      	adds	r0, r3, r1
 800b77c:	eba9 0900 	sub.w	r9, r9, r0
 800b780:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 800b784:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 800b788:	ee07 2a90 	vmov	s15, r2
 800b78c:	eef8 1a67 	vcvt.f32.u32	s3, s15
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b798:	ee39 9a67 	vsub.f32	s18, s18, s15
    nk_draw_image(b,
 800b79c:	ee07 1a90 	vmov	s15, r1
 800b7a0:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    nk_draw_image(b,
 800b7ac:	ee39 1a41 	vsub.f32	s2, s18, s2
 800b7b0:	ee78 0a61 	vsub.f32	s1, s16, s3
 800b7b4:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b7b8:	f002 f828 	bl	800d80c <nk_rect>
 800b7bc:	9a01      	ldr	r2, [sp, #4]
 800b7be:	a906      	add	r1, sp, #24
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff fe03 	bl	800b3cc <nk_draw_image>
        &img, col);

    /* bottom-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + rgnH - slc->b, slc->r, slc->b);
 800b7c6:	8aa3      	ldrh	r3, [r4, #20]
 800b7c8:	eba8 0803 	sub.w	r8, r8, r3
 800b7cc:	f8ad 8020 	strh.w	r8, [sp, #32]
 800b7d0:	8ae2      	ldrh	r2, [r4, #22]
 800b7d2:	1ab6      	subs	r6, r6, r2
 800b7d4:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800b7d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800b7dc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 800b7e0:	ee07 3a90 	vmov	s15, r3
 800b7e4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800b7e8:	ee07 2a90 	vmov	s15, r2
 800b7ec:	eef8 1a67 	vcvt.f32.u32	s3, s15
    nk_draw_image(b,
 800b7f0:	ee78 0a61 	vsub.f32	s1, s16, s3
 800b7f4:	ee3a 0a41 	vsub.f32	s0, s20, s2
 800b7f8:	f002 f808 	bl	800d80c <nk_rect>
 800b7fc:	9a01      	ldr	r2, [sp, #4]
 800b7fe:	a906      	add	r1, sp, #24
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff fde3 	bl	800b3cc <nk_draw_image>
        &img, col);

#undef IMG_RGN
}
 800b806:	b02e      	add	sp, #184	; 0xb8
 800b808:	ecbd 8b06 	vpop	{d8-d10}
 800b80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b810 <nk_draw_text>:
}
NK_API void
nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,
    const char *string, int length, const struct nk_user_font *font,
    struct nk_color bg, struct nk_color fg)
{
 800b810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b812:	ed2d 8b04 	vpush	{d8-d9}
 800b816:	b08b      	sub	sp, #44	; 0x2c
    float text_width = 0;
    struct nk_command_text *cmd;

    NK_ASSERT(b);
 800b818:	2800      	cmp	r0, #0
 800b81a:	f000 8087 	beq.w	800b92c <nk_draw_text+0x11c>
 800b81e:	eeb0 9a40 	vmov.f32	s18, s0
 800b822:	eef0 9a60 	vmov.f32	s19, s1
 800b826:	eef0 8a41 	vmov.f32	s17, s2
 800b82a:	eeb0 8a61 	vmov.f32	s16, s3
 800b82e:	460e      	mov	r6, r1
 800b830:	4615      	mov	r5, r2
 800b832:	461c      	mov	r4, r3
 800b834:	4607      	mov	r7, r0
    NK_ASSERT(font);
 800b836:	2b00      	cmp	r3, #0
 800b838:	d07f      	beq.n	800b93a <nk_draw_text+0x12a>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 800b83a:	2900      	cmp	r1, #0
 800b83c:	f000 8097 	beq.w	800b96e <nk_draw_text+0x15e>
 800b840:	2a00      	cmp	r2, #0
 800b842:	f000 8094 	beq.w	800b96e <nk_draw_text+0x15e>
 800b846:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800b84a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800b84e:	4313      	orrs	r3, r2
 800b850:	f000 808d 	beq.w	800b96e <nk_draw_text+0x15e>
    if (b->use_clipping) {
 800b854:	6943      	ldr	r3, [r0, #20]
 800b856:	b373      	cbz	r3, 800b8b6 <nk_draw_text+0xa6>
        const struct nk_rect *c = &b->clip;
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 800b858:	edd0 7a03 	vldr	s15, [r0, #12]
 800b85c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	f000 8083 	beq.w	800b96e <nk_draw_text+0x15e>
 800b868:	ed90 7a04 	vldr	s14, [r0, #16]
 800b86c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b874:	d07b      	beq.n	800b96e <nk_draw_text+0x15e>
 800b876:	edd0 6a01 	vldr	s13, [r0, #4]
 800b87a:	ee30 6a01 	vadd.f32	s12, s0, s2
 800b87e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800b882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b886:	d572      	bpl.n	800b96e <nk_draw_text+0x15e>
 800b888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b88c:	eef4 7ac0 	vcmpe.f32	s15, s0
 800b890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b894:	dd6b      	ble.n	800b96e <nk_draw_text+0x15e>
 800b896:	edd0 7a02 	vldr	s15, [r0, #8]
 800b89a:	ee70 6aa1 	vadd.f32	s13, s1, s3
 800b89e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a6:	d562      	bpl.n	800b96e <nk_draw_text+0x15e>
 800b8a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8ac:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b4:	dd5b      	ble.n	800b96e <nk_draw_text+0x15e>
            return;
    }

    /* make sure text fits inside bounds */
    text_width = font->width(font->userdata, font->height, string, length);
 800b8b6:	68a3      	ldr	r3, [r4, #8]
 800b8b8:	462a      	mov	r2, r5
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	ed94 0a01 	vldr	s0, [r4, #4]
 800b8c0:	6820      	ldr	r0, [r4, #0]
 800b8c2:	4798      	blx	r3
    if (text_width > r.w){
 800b8c4:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800b8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8cc:	dc3c      	bgt.n	800b948 <nk_draw_text+0x138>
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
    }

    if (!length) return;
    cmd = (struct nk_command_text*)
        nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));
 800b8ce:	f105 0229 	add.w	r2, r5, #41	; 0x29
 800b8d2:	2110      	movs	r1, #16
 800b8d4:	4638      	mov	r0, r7
 800b8d6:	f7ff faad 	bl	800ae34 <nk_command_buffer_push>
    if (!cmd) return;
 800b8da:	4607      	mov	r7, r0
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d046      	beq.n	800b96e <nk_draw_text+0x15e>
    cmd->x = (short)r.x;
 800b8e0:	eebd 0ac9 	vcvt.s32.f32	s0, s18
 800b8e4:	ee10 3a10 	vmov	r3, s0
 800b8e8:	8283      	strh	r3, [r0, #20]
    cmd->y = (short)r.y;
 800b8ea:	eefd 0ae9 	vcvt.s32.f32	s1, s19
 800b8ee:	ee10 3a90 	vmov	r3, s1
 800b8f2:	82c3      	strh	r3, [r0, #22]
    cmd->w = (unsigned short)r.w;
 800b8f4:	eebc 1ae8 	vcvt.u32.f32	s2, s17
 800b8f8:	ee11 3a10 	vmov	r3, s2
 800b8fc:	8303      	strh	r3, [r0, #24]
    cmd->h = (unsigned short)r.h;
 800b8fe:	eefc 1ac8 	vcvt.u32.f32	s3, s16
 800b902:	ee11 3a90 	vmov	r3, s3
 800b906:	8343      	strh	r3, [r0, #26]
    cmd->background = bg;
 800b908:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b90a:	60c3      	str	r3, [r0, #12]
    cmd->foreground = fg;
 800b90c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b90e:	6103      	str	r3, [r0, #16]
    cmd->font = font;
 800b910:	6084      	str	r4, [r0, #8]
    cmd->length = length;
 800b912:	6205      	str	r5, [r0, #32]
    cmd->height = font->height;
 800b914:	6863      	ldr	r3, [r4, #4]
 800b916:	61c3      	str	r3, [r0, #28]
    NK_MEMCPY(cmd->string, string, (nk_size)length);
 800b918:	462a      	mov	r2, r5
 800b91a:	4631      	mov	r1, r6
 800b91c:	3024      	adds	r0, #36	; 0x24
 800b91e:	f009 f977 	bl	8014c10 <nk_memcopy>
    cmd->string[length] = '\0';
 800b922:	442f      	add	r7, r5
 800b924:	2300      	movs	r3, #0
 800b926:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800b92a:	e020      	b.n	800b96e <nk_draw_text+0x15e>
    NK_ASSERT(b);
 800b92c:	4b12      	ldr	r3, [pc, #72]	; (800b978 <nk_draw_text+0x168>)
 800b92e:	4a13      	ldr	r2, [pc, #76]	; (800b97c <nk_draw_text+0x16c>)
 800b930:	f240 210d 	movw	r1, #525	; 0x20d
 800b934:	4812      	ldr	r0, [pc, #72]	; (800b980 <nk_draw_text+0x170>)
 800b936:	f00a fe09 	bl	801654c <__assert_func>
    NK_ASSERT(font);
 800b93a:	4b12      	ldr	r3, [pc, #72]	; (800b984 <nk_draw_text+0x174>)
 800b93c:	4a0f      	ldr	r2, [pc, #60]	; (800b97c <nk_draw_text+0x16c>)
 800b93e:	f240 210e 	movw	r1, #526	; 0x20e
 800b942:	480f      	ldr	r0, [pc, #60]	; (800b980 <nk_draw_text+0x170>)
 800b944:	f00a fe02 	bl	801654c <__assert_func>
        int glyphs = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	9308      	str	r3, [sp, #32]
        float txt_width = (float)text_width;
 800b94c:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
 800b950:	9302      	str	r3, [sp, #8]
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	ab09      	add	r3, sp, #36	; 0x24
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	ab08      	add	r3, sp, #32
 800b95a:	eeb0 0a68 	vmov.f32	s0, s17
 800b95e:	462a      	mov	r2, r5
 800b960:	4631      	mov	r1, r6
 800b962:	4620      	mov	r0, r4
 800b964:	f009 fdc0 	bl	80154e8 <nk_text_clamp>
    if (!length) return;
 800b968:	4605      	mov	r5, r0
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d1af      	bne.n	800b8ce <nk_draw_text+0xbe>
}
 800b96e:	b00b      	add	sp, #44	; 0x2c
 800b970:	ecbd 8b04 	vpop	{d8-d9}
 800b974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b976:	bf00      	nop
 800b978:	0801ac48 	.word	0x0801ac48
 800b97c:	0801b02c 	.word	0x0801b02c
 800b980:	0801b008 	.word	0x0801b008
 800b984:	0801ad50 	.word	0x0801ad50

0800b988 <nk_filter_float>:
}
NK_API nk_bool
nk_filter_float(const struct nk_text_edit *box, nk_rune unicode)
{
    NK_UNUSED(box);
    if ((unicode < '0' || unicode > '9') && unicode != '.' && unicode != '-')
 800b988:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b98c:	2b09      	cmp	r3, #9
 800b98e:	d905      	bls.n	800b99c <nk_filter_float+0x14>
 800b990:	392d      	subs	r1, #45	; 0x2d
 800b992:	2901      	cmp	r1, #1
 800b994:	bf8c      	ite	hi
 800b996:	2000      	movhi	r0, #0
 800b998:	2001      	movls	r0, #1
 800b99a:	4770      	bx	lr
        return nk_false;
    else return nk_true;
 800b99c:	2001      	movs	r0, #1
}
 800b99e:	4770      	bx	lr

0800b9a0 <nk_filter_decimal>:
NK_API nk_bool
nk_filter_decimal(const struct nk_text_edit *box, nk_rune unicode)
{
    NK_UNUSED(box);
    if ((unicode < '0' || unicode > '9') && unicode != '-')
 800b9a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b9a4:	2b09      	cmp	r3, #9
 800b9a6:	d904      	bls.n	800b9b2 <nk_filter_decimal+0x12>
 800b9a8:	292d      	cmp	r1, #45	; 0x2d
 800b9aa:	bf14      	ite	ne
 800b9ac:	2000      	movne	r0, #0
 800b9ae:	2001      	moveq	r0, #1
 800b9b0:	4770      	bx	lr
        return nk_false;
    else return nk_true;
 800b9b2:	2001      	movs	r0, #1
}
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <nk_edit_draw_text>:
nk_edit_draw_text(struct nk_command_buffer *out,
    const struct nk_style_edit *style, float pos_x, float pos_y,
    float x_offset, const char *text, int byte_len, float row_height,
    const struct nk_user_font *font, struct nk_color background,
    struct nk_color foreground, nk_bool is_selected)
{
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	ed2d 8b08 	vpush	{d8-d11}
 800b9c0:	b08d      	sub	sp, #52	; 0x34
 800b9c2:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
    NK_ASSERT(out);
 800b9c6:	b1a8      	cbz	r0, 800b9f4 <nk_edit_draw_text+0x3c>
 800b9c8:	eeb0 9a40 	vmov.f32	s18, s0
 800b9cc:	eef0 9a60 	vmov.f32	s19, s1
 800b9d0:	eeb0 aa41 	vmov.f32	s20, s2
 800b9d4:	4616      	mov	r6, r2
 800b9d6:	461f      	mov	r7, r3
 800b9d8:	eef0 8a61 	vmov.f32	s17, s3
 800b9dc:	4682      	mov	sl, r0
    NK_ASSERT(font);
 800b9de:	f1b8 0f00 	cmp.w	r8, #0
 800b9e2:	d00d      	beq.n	800ba00 <nk_edit_draw_text+0x48>
    NK_ASSERT(style);
 800b9e4:	b191      	cbz	r1, 800ba0c <nk_edit_draw_text+0x54>
    if (!text || !byte_len || !out || !style) return;
 800b9e6:	b102      	cbz	r2, 800b9ea <nk_edit_draw_text+0x32>
 800b9e8:	b9b3      	cbnz	r3, 800ba18 <nk_edit_draw_text+0x60>
        if (is_selected)
            nk_fill_rect(out, label, 0, background);
        nk_widget_text(out, label, line, (int)((text + text_len) - line),
            &txt, NK_TEXT_LEFT, font);
    }}
}
 800b9ea:	b00d      	add	sp, #52	; 0x34
 800b9ec:	ecbd 8b08 	vpop	{d8-d11}
 800b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NK_ASSERT(out);
 800b9f4:	4b6f      	ldr	r3, [pc, #444]	; (800bbb4 <nk_edit_draw_text+0x1fc>)
 800b9f6:	4a70      	ldr	r2, [pc, #448]	; (800bbb8 <nk_edit_draw_text+0x200>)
 800b9f8:	214e      	movs	r1, #78	; 0x4e
 800b9fa:	4870      	ldr	r0, [pc, #448]	; (800bbbc <nk_edit_draw_text+0x204>)
 800b9fc:	f00a fda6 	bl	801654c <__assert_func>
    NK_ASSERT(font);
 800ba00:	4b6f      	ldr	r3, [pc, #444]	; (800bbc0 <nk_edit_draw_text+0x208>)
 800ba02:	4a6d      	ldr	r2, [pc, #436]	; (800bbb8 <nk_edit_draw_text+0x200>)
 800ba04:	214f      	movs	r1, #79	; 0x4f
 800ba06:	486d      	ldr	r0, [pc, #436]	; (800bbbc <nk_edit_draw_text+0x204>)
 800ba08:	f00a fda0 	bl	801654c <__assert_func>
    NK_ASSERT(style);
 800ba0c:	4b6d      	ldr	r3, [pc, #436]	; (800bbc4 <nk_edit_draw_text+0x20c>)
 800ba0e:	4a6a      	ldr	r2, [pc, #424]	; (800bbb8 <nk_edit_draw_text+0x200>)
 800ba10:	2150      	movs	r1, #80	; 0x50
 800ba12:	486a      	ldr	r0, [pc, #424]	; (800bbbc <nk_edit_draw_text+0x204>)
 800ba14:	f00a fd9a 	bl	801654c <__assert_func>
    nk_rune unicode = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	9303      	str	r3, [sp, #12]
    txt.padding = nk_vec2(0,0);
 800ba1c:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800bbc8 <nk_edit_draw_text+0x210>
 800ba20:	eef0 0a40 	vmov.f32	s1, s0
 800ba24:	f001 ff10 	bl	800d848 <nk_vec2>
 800ba28:	ed8d 0a04 	vstr	s0, [sp, #16]
 800ba2c:	edcd 0a05 	vstr	s1, [sp, #20]
    txt.background = background;
 800ba30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba32:	9306      	str	r3, [sp, #24]
    txt.text = foreground;
 800ba34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ba36:	9307      	str	r3, [sp, #28]
    glyph_len = nk_utf_decode(text+text_len, &unicode, byte_len-text_len);
 800ba38:	463a      	mov	r2, r7
 800ba3a:	a903      	add	r1, sp, #12
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f009 f82f 	bl	8014aa0 <nk_utf_decode>
    if (!glyph_len) return;
 800ba42:	4605      	mov	r5, r0
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d0d0      	beq.n	800b9ea <nk_edit_draw_text+0x32>
    while ((text_len < byte_len) && glyph_len)
 800ba48:	2f00      	cmp	r7, #0
 800ba4a:	ddce      	ble.n	800b9ea <nk_edit_draw_text+0x32>
    const char *line = text;
 800ba4c:	46b1      	mov	r9, r6
    int line_count = 0;
 800ba4e:	f04f 0b00 	mov.w	fp, #0
    float line_offset = 0;
 800ba52:	eddf aa5d 	vldr	s21, [pc, #372]	; 800bbc8 <nk_edit_draw_text+0x210>
    float line_width = 0;
 800ba56:	eeb0 8a6a 	vmov.f32	s16, s21
    int text_len = 0;
 800ba5a:	465c      	mov	r4, fp
                nk_fill_rect(out, label, 0, background);
 800ba5c:	eeb0 ba6a 	vmov.f32	s22, s21
 800ba60:	e037      	b.n	800bad2 <nk_edit_draw_text+0x11a>
            label.y = pos_y + line_offset;
 800ba62:	ee79 7aaa 	vadd.f32	s15, s19, s21
 800ba66:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
            label.h = row_height;
 800ba6a:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
            label.w = line_width;
 800ba6e:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
            if (!line_count)
 800ba72:	f1bb 0f00 	cmp.w	fp, #0
 800ba76:	d144      	bne.n	800bb02 <nk_edit_draw_text+0x14a>
                label.x += x_offset;
 800ba78:	ee39 8a0a 	vadd.f32	s16, s18, s20
            if (is_selected) /* selection needs to draw different background color */
 800ba7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d142      	bne.n	800bb08 <nk_edit_draw_text+0x150>
            nk_widget_text(out, label, line, (int)((text + text_len) - line),
 800ba82:	ed8d 8a08 	vstr	s16, [sp, #32]
 800ba86:	1932      	adds	r2, r6, r4
 800ba88:	f8cd 8004 	str.w	r8, [sp, #4]
 800ba8c:	2312      	movs	r3, #18
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	ab04      	add	r3, sp, #16
 800ba92:	eba2 0209 	sub.w	r2, r2, r9
 800ba96:	4649      	mov	r1, r9
 800ba98:	eeb0 0a48 	vmov.f32	s0, s16
 800ba9c:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800baa0:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 800baa4:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 800baa8:	4650      	mov	r0, sl
 800baaa:	f007 f8c3 	bl	8012c34 <nk_widget_text>
            text_len++;
 800baae:	3401      	adds	r4, #1
            line_count++;
 800bab0:	f10b 0b01 	add.w	fp, fp, #1
            line = text + text_len;
 800bab4:	eb06 0904 	add.w	r9, r6, r4
            line_offset += row_height;
 800bab8:	ee7a aaa8 	vadd.f32	s21, s21, s17
            glyph_len = nk_utf_decode(text + text_len, &unicode, (int)(byte_len-text_len));
 800babc:	1b3a      	subs	r2, r7, r4
 800babe:	a903      	add	r1, sp, #12
 800bac0:	4648      	mov	r0, r9
 800bac2:	f008 ffed 	bl	8014aa0 <nk_utf_decode>
 800bac6:	4605      	mov	r5, r0
            line_width = 0;
 800bac8:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 800bbc8 <nk_edit_draw_text+0x210>
    while ((text_len < byte_len) && glyph_len)
 800bacc:	42bc      	cmp	r4, r7
 800bace:	da34      	bge.n	800bb3a <nk_edit_draw_text+0x182>
 800bad0:	b39d      	cbz	r5, 800bb3a <nk_edit_draw_text+0x182>
        if (unicode == '\n') {
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	2b0a      	cmp	r3, #10
 800bad6:	d0c4      	beq.n	800ba62 <nk_edit_draw_text+0xaa>
        if (unicode == '\r') {
 800bad8:	2b0d      	cmp	r3, #13
 800bada:	d026      	beq.n	800bb2a <nk_edit_draw_text+0x172>
        glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);
 800badc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bae0:	462a      	mov	r2, r5
 800bae2:	1931      	adds	r1, r6, r4
 800bae4:	ed98 0a01 	vldr	s0, [r8, #4]
 800bae8:	f8d8 0000 	ldr.w	r0, [r8]
 800baec:	4798      	blx	r3
        line_width += (float)glyph_width;
 800baee:	ee38 8a00 	vadd.f32	s16, s16, s0
        text_len += glyph_len;
 800baf2:	442c      	add	r4, r5
        glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);
 800baf4:	1b3a      	subs	r2, r7, r4
 800baf6:	a903      	add	r1, sp, #12
 800baf8:	1930      	adds	r0, r6, r4
 800bafa:	f008 ffd1 	bl	8014aa0 <nk_utf_decode>
 800bafe:	4605      	mov	r5, r0
        continue;
 800bb00:	e7e4      	b.n	800bacc <nk_edit_draw_text+0x114>
            label.x = pos_x;
 800bb02:	eeb0 8a49 	vmov.f32	s16, s18
 800bb06:	e7b9      	b.n	800ba7c <nk_edit_draw_text+0xc4>
                nk_fill_rect(out, label, 0, background);
 800bb08:	ed8d 8a08 	vstr	s16, [sp, #32]
 800bb0c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800bb0e:	eeb0 2a4b 	vmov.f32	s4, s22
 800bb12:	eeb0 0a48 	vmov.f32	s0, s16
 800bb16:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800bb1a:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 800bb1e:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 800bb22:	4650      	mov	r0, sl
 800bb24:	f7ff fa98 	bl	800b058 <nk_fill_rect>
 800bb28:	e7ab      	b.n	800ba82 <nk_edit_draw_text+0xca>
            text_len++;
 800bb2a:	3401      	adds	r4, #1
            glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);
 800bb2c:	1b3a      	subs	r2, r7, r4
 800bb2e:	a903      	add	r1, sp, #12
 800bb30:	1930      	adds	r0, r6, r4
 800bb32:	f008 ffb5 	bl	8014aa0 <nk_utf_decode>
 800bb36:	4605      	mov	r5, r0
            continue;
 800bb38:	e7c8      	b.n	800bacc <nk_edit_draw_text+0x114>
    if (line_width > 0) {
 800bb3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb42:	f77f af52 	ble.w	800b9ea <nk_edit_draw_text+0x32>
        label.y = pos_y + line_offset;
 800bb46:	ee7a aaa9 	vadd.f32	s21, s21, s19
 800bb4a:	edcd aa09 	vstr	s21, [sp, #36]	; 0x24
        label.h = row_height;
 800bb4e:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
        label.w = line_width;
 800bb52:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
        if (!line_count)
 800bb56:	f1bb 0f00 	cmp.w	fp, #0
 800bb5a:	d101      	bne.n	800bb60 <nk_edit_draw_text+0x1a8>
            label.x += x_offset;
 800bb5c:	ee39 9a0a 	vadd.f32	s18, s18, s20
        if (is_selected)
 800bb60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb62:	b9b3      	cbnz	r3, 800bb92 <nk_edit_draw_text+0x1da>
        nk_widget_text(out, label, line, (int)((text + text_len) - line),
 800bb64:	ed8d 9a08 	vstr	s18, [sp, #32]
 800bb68:	1932      	adds	r2, r6, r4
 800bb6a:	f8cd 8004 	str.w	r8, [sp, #4]
 800bb6e:	2311      	movs	r3, #17
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	ab04      	add	r3, sp, #16
 800bb74:	eba2 0209 	sub.w	r2, r2, r9
 800bb78:	4649      	mov	r1, r9
 800bb7a:	eeb0 0a49 	vmov.f32	s0, s18
 800bb7e:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800bb82:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 800bb86:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 800bb8a:	4650      	mov	r0, sl
 800bb8c:	f007 f852 	bl	8012c34 <nk_widget_text>
 800bb90:	e72b      	b.n	800b9ea <nk_edit_draw_text+0x32>
            nk_fill_rect(out, label, 0, background);
 800bb92:	ed8d 9a08 	vstr	s18, [sp, #32]
 800bb96:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800bb98:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 800bbc8 <nk_edit_draw_text+0x210>
 800bb9c:	eeb0 0a49 	vmov.f32	s0, s18
 800bba0:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800bba4:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 800bba8:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 800bbac:	4650      	mov	r0, sl
 800bbae:	f7ff fa53 	bl	800b058 <nk_fill_rect>
 800bbb2:	e7d7      	b.n	800bb64 <nk_edit_draw_text+0x1ac>
 800bbb4:	0801ad44 	.word	0x0801ad44
 800bbb8:	0801b15c 	.word	0x0801b15c
 800bbbc:	0801b0f8 	.word	0x0801b0f8
 800bbc0:	0801ad50 	.word	0x0801ad50
 800bbc4:	0801ad18 	.word	0x0801ad18
 800bbc8:	00000000 	.word	0x00000000

0800bbcc <nk_do_edit>:
NK_LIB nk_flags
nk_do_edit(nk_flags *state, struct nk_command_buffer *out,
    struct nk_rect bounds, nk_flags flags, nk_plugin_filter filter,
    struct nk_text_edit *edit, const struct nk_style_edit *style,
    struct nk_input *in, const struct nk_user_font *font)
{
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	ed2d 8b10 	vpush	{d8-d15}
 800bbd4:	b0bb      	sub	sp, #236	; 0xec
 800bbd6:	9206      	str	r2, [sp, #24]
 800bbd8:	9308      	str	r3, [sp, #32]
 800bbda:	9d54      	ldr	r5, [sp, #336]	; 0x150
 800bbdc:	9e55      	ldr	r6, [sp, #340]	; 0x154
 800bbde:	9f56      	ldr	r7, [sp, #344]	; 0x158
 800bbe0:	f8dd a15c 	ldr.w	sl, [sp, #348]	; 0x15c
 800bbe4:	ed8d 0a14 	vstr	s0, [sp, #80]	; 0x50
 800bbe8:	edcd 0a15 	vstr	s1, [sp, #84]	; 0x54
 800bbec:	ed8d 1a16 	vstr	s2, [sp, #88]	; 0x58
 800bbf0:	edcd 1a17 	vstr	s3, [sp, #92]	; 0x5c
    char select_all = 0;
    char cursor_follow = 0;
    struct nk_rect old_clip;
    struct nk_rect clip;

    NK_ASSERT(state);
 800bbf4:	9007      	str	r0, [sp, #28]
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d03e      	beq.n	800bc78 <nk_do_edit+0xac>
 800bbfa:	468b      	mov	fp, r1
 800bbfc:	eeb0 aa40 	vmov.f32	s20, s0
 800bc00:	eef0 ba60 	vmov.f32	s23, s1
 800bc04:	eeb0 ba41 	vmov.f32	s22, s2
 800bc08:	eeb0 ca61 	vmov.f32	s24, s3
    NK_ASSERT(out);
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d039      	beq.n	800bc84 <nk_do_edit+0xb8>
    NK_ASSERT(style);
 800bc10:	2e00      	cmp	r6, #0
 800bc12:	d03d      	beq.n	800bc90 <nk_do_edit+0xc4>
    if (!state || !out || !style)
        return ret;

    /* visible text area calculation */
    area.x = bounds.x + style->padding.x + style->border;
 800bc14:	ed96 8aa9 	vldr	s16, [r6, #676]	; 0x2a4
 800bc18:	edd6 7aa4 	vldr	s15, [r6, #656]	; 0x290
 800bc1c:	ee78 9a00 	vadd.f32	s19, s16, s0
 800bc20:	ee79 9aa7 	vadd.f32	s19, s19, s15
    area.y = bounds.y + style->padding.y + style->border;
 800bc24:	edd6 8aaa 	vldr	s17, [r6, #680]	; 0x2a8
 800bc28:	ee38 9aa0 	vadd.f32	s18, s17, s1
 800bc2c:	ee39 9a27 	vadd.f32	s18, s18, s15
    area.w = bounds.w - (2.0f * style->padding.x + 2 * style->border);
 800bc30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc34:	ee38 8a08 	vadd.f32	s16, s16, s16
 800bc38:	ee38 8a27 	vadd.f32	s16, s16, s15
 800bc3c:	ee31 8a48 	vsub.f32	s16, s2, s16
    area.h = bounds.h - (2.0f * style->padding.y + 2 * style->border);
 800bc40:	ee78 8aa8 	vadd.f32	s17, s17, s17
 800bc44:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800bc48:	ee71 8ae8 	vsub.f32	s17, s3, s17
    if (flags & NK_EDIT_MULTILINE)
 800bc4c:	9b06      	ldr	r3, [sp, #24]
 800bc4e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800bc52:	930c      	str	r3, [sp, #48]	; 0x30
 800bc54:	d022      	beq.n	800bc9c <nk_do_edit+0xd0>
        area.w = NK_MAX(0, area.w - style->scrollbar_size.x);
 800bc56:	edd6 7aa7 	vldr	s15, [r6, #668]	; 0x29c
 800bc5a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bc5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc66:	f340 8711 	ble.w	800ca8c <nk_do_edit+0xec0>
    row_height = (flags & NK_EDIT_MULTILINE)? font->height + style->row_padding: area.h;
 800bc6a:	edda aa01 	vldr	s21, [sl, #4]
 800bc6e:	edd6 7aab 	vldr	s15, [r6, #684]	; 0x2ac
 800bc72:	ee7a aaa7 	vadd.f32	s21, s21, s15
 800bc76:	e013      	b.n	800bca0 <nk_do_edit+0xd4>
    NK_ASSERT(state);
 800bc78:	4b79      	ldr	r3, [pc, #484]	; (800be60 <nk_do_edit+0x294>)
 800bc7a:	4a7a      	ldr	r2, [pc, #488]	; (800be64 <nk_do_edit+0x298>)
 800bc7c:	21a7      	movs	r1, #167	; 0xa7
 800bc7e:	487a      	ldr	r0, [pc, #488]	; (800be68 <nk_do_edit+0x29c>)
 800bc80:	f00a fc64 	bl	801654c <__assert_func>
    NK_ASSERT(out);
 800bc84:	4b79      	ldr	r3, [pc, #484]	; (800be6c <nk_do_edit+0x2a0>)
 800bc86:	4a77      	ldr	r2, [pc, #476]	; (800be64 <nk_do_edit+0x298>)
 800bc88:	21a8      	movs	r1, #168	; 0xa8
 800bc8a:	4877      	ldr	r0, [pc, #476]	; (800be68 <nk_do_edit+0x29c>)
 800bc8c:	f00a fc5e 	bl	801654c <__assert_func>
    NK_ASSERT(style);
 800bc90:	4b77      	ldr	r3, [pc, #476]	; (800be70 <nk_do_edit+0x2a4>)
 800bc92:	4a74      	ldr	r2, [pc, #464]	; (800be64 <nk_do_edit+0x298>)
 800bc94:	21a9      	movs	r1, #169	; 0xa9
 800bc96:	4874      	ldr	r0, [pc, #464]	; (800be68 <nk_do_edit+0x29c>)
 800bc98:	f00a fc58 	bl	801654c <__assert_func>
    row_height = (flags & NK_EDIT_MULTILINE)? font->height + style->row_padding: area.h;
 800bc9c:	eef0 aa68 	vmov.f32	s21, s17

    /* calculate clipping rectangle */
    old_clip = out->clip;
 800bca0:	ac32      	add	r4, sp, #200	; 0xc8
 800bca2:	f10b 0304 	add.w	r3, fp, #4
 800bca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &old_clip, area.x, area.y, area.x + area.w, area.y + area.h);
 800bcac:	ee79 1a28 	vadd.f32	s3, s18, s17
 800bcb0:	ee39 1a88 	vadd.f32	s2, s19, s16
 800bcb4:	eef0 0a49 	vmov.f32	s1, s18
 800bcb8:	eeb0 0a69 	vmov.f32	s0, s19
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	a82e      	add	r0, sp, #184	; 0xb8
 800bcc0:	f001 fdc6 	bl	800d850 <nk_unify>

    /* update edit state */
    prev_state = (char)edit->active;
 800bcc4:	f895 8069 	ldrb.w	r8, [r5, #105]	; 0x69
    is_hovered = (char)nk_input_is_mouse_hovering_rect(in, bounds);
 800bcc8:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 800bccc:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 800bcd0:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 800bcd4:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f001 f835 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 800bcde:	fa5f f980 	uxtb.w	r9, r0
    if (in && in->mouse.buttons[NK_BUTTON_LEFT].clicked && in->mouse.buttons[NK_BUTTON_LEFT].down) {
 800bce2:	b33f      	cbz	r7, 800bd34 <nk_do_edit+0x168>
 800bce4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bce8:	b323      	cbz	r3, 800bd34 <nk_do_edit+0x168>
 800bcea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcee:	b30b      	cbz	r3, 800bd34 <nk_do_edit+0x168>
        edit->active = NK_INBOX(in->mouse.pos.x, in->mouse.pos.y,
 800bcf0:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 800bcf4:	eef4 7aca 	vcmpe.f32	s15, s20
 800bcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfc:	db17      	blt.n	800bd2e <nk_do_edit+0x162>
 800bcfe:	ee3a 7a0b 	vadd.f32	s14, s20, s22
 800bd02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0a:	d532      	bpl.n	800bd72 <nk_do_edit+0x1a6>
 800bd0c:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800bd10:	eef4 7aeb 	vcmpe.f32	s15, s23
 800bd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd18:	db2d      	blt.n	800bd76 <nk_do_edit+0x1aa>
 800bd1a:	ee3b ca8c 	vadd.f32	s24, s23, s24
 800bd1e:	eef4 7acc 	vcmpe.f32	s15, s24
 800bd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd26:	bf4c      	ite	mi
 800bd28:	2301      	movmi	r3, #1
 800bd2a:	2300      	movpl	r3, #0
 800bd2c:	e000      	b.n	800bd30 <nk_do_edit+0x164>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
                                bounds.x, bounds.y, bounds.w, bounds.h);
    }

    /* (de)activate text editor */
    if (!prev_state && edit->active) {
 800bd34:	f1b8 0f00 	cmp.w	r8, #0
 800bd38:	d136      	bne.n	800bda8 <nk_do_edit+0x1dc>
 800bd3a:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800bd3e:	b9e3      	cbnz	r3, 800bd7a <nk_do_edit+0x1ae>
            select_all = nk_true;
        if (flags & NK_EDIT_GOTO_END_ON_ACTIVATE) {
            edit->cursor = edit->string.len;
            in = 0;
        }
    } else if (!edit->active) edit->mode = NK_TEXT_EDIT_MODE_VIEW;
 800bd40:	2400      	movs	r4, #0
 800bd42:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    if (flags & NK_EDIT_READ_ONLY)
 800bd46:	9b06      	ldr	r3, [sp, #24]
 800bd48:	f013 0301 	ands.w	r3, r3, #1
 800bd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4e:	d031      	beq.n	800bdb4 <nk_do_edit+0x1e8>
        edit->mode = NK_TEXT_EDIT_MODE_VIEW;
 800bd50:	2300      	movs	r3, #0
 800bd52:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    else if (flags & NK_EDIT_ALWAYS_INSERT_MODE)
        edit->mode = NK_TEXT_EDIT_MODE_INSERT;

    ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;
 800bd56:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800bd5a:	9305      	str	r3, [sp, #20]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f040 8627 	bne.w	800c9b0 <nk_do_edit+0xde4>
    if (prev_state != edit->active)
 800bd62:	f1b8 0f00 	cmp.w	r8, #0
 800bd66:	f000 8684 	beq.w	800ca72 <nk_do_edit+0xea6>
    ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;
 800bd6a:	2302      	movs	r3, #2
        ret |= (edit->active) ? NK_EDIT_ACTIVATED: NK_EDIT_DEACTIVATED;
 800bd6c:	2208      	movs	r2, #8
 800bd6e:	f000 be24 	b.w	800c9ba <nk_do_edit+0xdee>
        edit->active = NK_INBOX(in->mouse.pos.x, in->mouse.pos.y,
 800bd72:	2300      	movs	r3, #0
 800bd74:	e7dc      	b.n	800bd30 <nk_do_edit+0x164>
 800bd76:	2300      	movs	r3, #0
 800bd78:	e7da      	b.n	800bd30 <nk_do_edit+0x164>
        struct nk_vec2 oldscrollbar = edit->scrollbar;
 800bd7a:	edd5 ba14 	vldr	s23, [r5, #80]	; 0x50
 800bd7e:	6d6c      	ldr	r4, [r5, #84]	; 0x54
        nk_textedit_clear_state(edit, type, filter);
 800bd80:	9a08      	ldr	r2, [sp, #32]
 800bd82:	9b06      	ldr	r3, [sp, #24]
 800bd84:	f3c3 2180 	ubfx	r1, r3, #10, #1
 800bd88:	4628      	mov	r0, r5
 800bd8a:	f007 fde9 	bl	8013960 <nk_textedit_clear_state>
        edit->scrollbar = oldscrollbar;
 800bd8e:	edc5 ba14 	vstr	s23, [r5, #80]	; 0x50
 800bd92:	656c      	str	r4, [r5, #84]	; 0x54
    char select_all = 0;
 800bd94:	9b06      	ldr	r3, [sp, #24]
 800bd96:	f3c3 0440 	ubfx	r4, r3, #1, #1
        if (flags & NK_EDIT_GOTO_END_ON_ACTIVATE) {
 800bd9a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800bd9e:	d0d2      	beq.n	800bd46 <nk_do_edit+0x17a>
            edit->cursor = edit->string.len;
 800bda0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800bda2:	65ab      	str	r3, [r5, #88]	; 0x58
            in = 0;
 800bda4:	2700      	movs	r7, #0
 800bda6:	e7ce      	b.n	800bd46 <nk_do_edit+0x17a>
    } else if (!edit->active) edit->mode = NK_TEXT_EDIT_MODE_VIEW;
 800bda8:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0c7      	beq.n	800bd40 <nk_do_edit+0x174>
    char select_all = 0;
 800bdb0:	2400      	movs	r4, #0
 800bdb2:	e7c8      	b.n	800bd46 <nk_do_edit+0x17a>
    else if (flags & NK_EDIT_ALWAYS_INSERT_MODE)
 800bdb4:	9b06      	ldr	r3, [sp, #24]
 800bdb6:	f413 7f00 	tst.w	r3, #512	; 0x200
        edit->mode = NK_TEXT_EDIT_MODE_INSERT;
 800bdba:	bf1c      	itt	ne
 800bdbc:	2301      	movne	r3, #1
 800bdbe:	f885 3064 	strbne.w	r3, [r5, #100]	; 0x64
 800bdc2:	e7c8      	b.n	800bd56 <nk_do_edit+0x18a>
        const float mouse_y = (in->mouse.pos.y - area.y) + edit->scrollbar.y;

        /* mouse click handler */
        is_hovered = (char)nk_input_is_mouse_hovering_rect(in, area);
        if (select_all) {
            nk_textedit_select_all(edit);
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	f007 fdfd 	bl	80139c4 <nk_textedit_select_all>
    char cursor_follow = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	e024      	b.n	800be1a <nk_do_edit+0x24e>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
            in->mouse.buttons[NK_BUTTON_LEFT].clicked) {
            nk_textedit_click(edit, mouse_x, mouse_y, font, row_height);
 800bdd0:	eeb0 1a6a 	vmov.f32	s2, s21
 800bdd4:	4651      	mov	r1, sl
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f007 fb35 	bl	8013446 <nk_textedit_click>
    char cursor_follow = 0;
 800bddc:	9405      	str	r4, [sp, #20]
            nk_textedit_click(edit, mouse_x, mouse_y, font, row_height);
 800bdde:	e01c      	b.n	800be1a <nk_do_edit+0x24e>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
            (in->mouse.delta.x != 0.0f || in->mouse.delta.y != 0.0f)) {
            nk_textedit_drag(edit, mouse_x, mouse_y, font, row_height);
            cursor_follow = nk_true;
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_RIGHT].clicked &&
 800bde0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bde4:	b303      	cbz	r3, 800be28 <nk_do_edit+0x25c>
 800bde6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bdea:	b90b      	cbnz	r3, 800bdf0 <nk_do_edit+0x224>
    char cursor_follow = 0;
 800bdec:	9405      	str	r4, [sp, #20]
 800bdee:	e014      	b.n	800be1a <nk_do_edit+0x24e>
            in->mouse.buttons[NK_BUTTON_RIGHT].down) {
            nk_textedit_key(edit, NK_KEY_TEXT_WORD_LEFT, nk_false, font, row_height);
 800bdf0:	eeb0 0a6a 	vmov.f32	s0, s21
 800bdf4:	4653      	mov	r3, sl
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2118      	movs	r1, #24
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f007 fdf6 	bl	80139ec <nk_textedit_key>
            nk_textedit_key(edit, NK_KEY_TEXT_WORD_RIGHT, nk_true, font, row_height);
 800be00:	eeb0 0a6a 	vmov.f32	s0, s21
 800be04:	4653      	mov	r3, sl
 800be06:	2201      	movs	r2, #1
 800be08:	2119      	movs	r1, #25
 800be0a:	4628      	mov	r0, r5
 800be0c:	f007 fdee 	bl	80139ec <nk_textedit_key>
            cursor_follow = nk_true;
 800be10:	2301      	movs	r3, #1
 800be12:	9305      	str	r3, [sp, #20]
 800be14:	e001      	b.n	800be1a <nk_do_edit+0x24e>
    char cursor_follow = 0;
 800be16:	f8cd 9014 	str.w	r9, [sp, #20]
        }

        {int i; /* keyboard input */
        int old_mode = edit->mode;
 800be1a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 800be1e:	930d      	str	r3, [sp, #52]	; 0x34
        for (i = 0; i < NK_KEY_MAX; ++i) {
 800be20:	2400      	movs	r4, #0
            if (i == NK_KEY_ENTER || i == NK_KEY_TAB) continue; /* special case */
            if (nk_input_is_key_pressed(in, (enum nk_keys)i)) {
                nk_textedit_key(edit, (enum nk_keys)i, shift_mod, font, row_height);
                cursor_follow = nk_true;
 800be22:	9655      	str	r6, [sp, #340]	; 0x154
 800be24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800be26:	e004      	b.n	800be32 <nk_do_edit+0x266>
    char cursor_follow = 0;
 800be28:	9405      	str	r4, [sp, #20]
 800be2a:	e7f6      	b.n	800be1a <nk_do_edit+0x24e>
        for (i = 0; i < NK_KEY_MAX; ++i) {
 800be2c:	3401      	adds	r4, #1
 800be2e:	2c1e      	cmp	r4, #30
 800be30:	d022      	beq.n	800be78 <nk_do_edit+0x2ac>
            if (i == NK_KEY_ENTER || i == NK_KEY_TAB) continue; /* special case */
 800be32:	1f23      	subs	r3, r4, #4
 800be34:	2b01      	cmp	r3, #1
 800be36:	d9f9      	bls.n	800be2c <nk_do_edit+0x260>
            if (nk_input_is_key_pressed(in, (enum nk_keys)i)) {
 800be38:	fa5f f884 	uxtb.w	r8, r4
 800be3c:	4641      	mov	r1, r8
 800be3e:	4638      	mov	r0, r7
 800be40:	f000 fffc 	bl	800ce3c <nk_input_is_key_pressed>
 800be44:	2800      	cmp	r0, #0
 800be46:	d0f1      	beq.n	800be2c <nk_do_edit+0x260>
                nk_textedit_key(edit, (enum nk_keys)i, shift_mod, font, row_height);
 800be48:	eeb0 0a6a 	vmov.f32	s0, s21
 800be4c:	4653      	mov	r3, sl
 800be4e:	4632      	mov	r2, r6
 800be50:	4641      	mov	r1, r8
 800be52:	4628      	mov	r0, r5
 800be54:	f007 fdca 	bl	80139ec <nk_textedit_key>
                cursor_follow = nk_true;
 800be58:	2301      	movs	r3, #1
 800be5a:	9305      	str	r3, [sp, #20]
 800be5c:	e7e6      	b.n	800be2c <nk_do_edit+0x260>
 800be5e:	bf00      	nop
 800be60:	0801ad3c 	.word	0x0801ad3c
 800be64:	0801b150 	.word	0x0801b150
 800be68:	0801b0f8 	.word	0x0801b0f8
 800be6c:	0801ad44 	.word	0x0801ad44
 800be70:	0801ad18 	.word	0x0801ad18
 800be74:	00000000 	.word	0x00000000
            }
        }
        if (old_mode != edit->mode) {
 800be78:	9e55      	ldr	r6, [sp, #340]	; 0x154
 800be7a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 800be7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be80:	4293      	cmp	r3, r2
            in->keyboard.text_len = 0;
 800be82:	bf1c      	itt	ne
 800be84:	2300      	movne	r3, #0
 800be86:	f8c7 3100 	strne.w	r3, [r7, #256]	; 0x100
        }}

        /* text input */
        edit->filter = filter;
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	64eb      	str	r3, [r5, #76]	; 0x4c
        if (in->keyboard.text_len) {
 800be8e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800be92:	2a00      	cmp	r2, #0
 800be94:	f040 8101 	bne.w	800c09a <nk_do_edit+0x4ce>
            cursor_follow = nk_true;
            in->keyboard.text_len = 0;
        }

        /* enter key handler */
        if (nk_input_is_key_pressed(in, NK_KEY_ENTER)) {
 800be98:	2104      	movs	r1, #4
 800be9a:	4638      	mov	r0, r7
 800be9c:	f000 ffce 	bl	800ce3c <nk_input_is_key_pressed>
 800bea0:	b190      	cbz	r0, 800bec8 <nk_do_edit+0x2fc>
            cursor_follow = nk_true;
            if (flags & NK_EDIT_CTRL_ENTER_NEWLINE && shift_mod)
 800bea2:	9b06      	ldr	r3, [sp, #24]
 800bea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bea8:	d003      	beq.n	800beb2 <nk_do_edit+0x2e6>
 800beaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beac:	2b00      	cmp	r3, #0
 800beae:	f040 80ff 	bne.w	800c0b0 <nk_do_edit+0x4e4>
                nk_textedit_text(edit, "\n", 1);
            else if (flags & NK_EDIT_SIG_ENTER)
 800beb2:	9b06      	ldr	r3, [sp, #24]
 800beb4:	f013 0f04 	tst.w	r3, #4
 800beb8:	f000 8102 	beq.w	800c0c0 <nk_do_edit+0x4f4>
                ret |= NK_EDIT_COMMITED;
 800bebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bebe:	f043 0310 	orr.w	r3, r3, #16
 800bec2:	930b      	str	r3, [sp, #44]	; 0x2c
            cursor_follow = nk_true;
 800bec4:	2301      	movs	r3, #1
 800bec6:	9305      	str	r3, [sp, #20]
            else nk_textedit_text(edit, "\n", 1);
        }

        /* cut & copy handler */
        {int copy= nk_input_is_key_pressed(in, NK_KEY_COPY);
 800bec8:	2107      	movs	r1, #7
 800beca:	4638      	mov	r0, r7
 800becc:	f000 ffb6 	bl	800ce3c <nk_input_is_key_pressed>
 800bed0:	4604      	mov	r4, r0
        int cut = nk_input_is_key_pressed(in, NK_KEY_CUT);
 800bed2:	2108      	movs	r1, #8
 800bed4:	4638      	mov	r0, r7
 800bed6:	f000 ffb1 	bl	800ce3c <nk_input_is_key_pressed>
 800beda:	4680      	mov	r8, r0
        if ((copy || cut) && (flags & NK_EDIT_CLIPBOARD))
 800bedc:	4304      	orrs	r4, r0
 800bede:	f000 8126 	beq.w	800c12e <nk_do_edit+0x562>
 800bee2:	9b06      	ldr	r3, [sp, #24]
 800bee4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bee8:	f040 80f2 	bne.w	800c0d0 <nk_do_edit+0x504>
                cursor_follow = nk_true;
            }
        }}

        /* paste handler */
        {int paste = nk_input_is_key_pressed(in, NK_KEY_PASTE);
 800beec:	2109      	movs	r1, #9
 800beee:	4638      	mov	r0, r7
 800bef0:	f000 ffa4 	bl	800ce3c <nk_input_is_key_pressed>
            edit->clip.paste(edit->clip.userdata, edit);
            cursor_follow = nk_true;
        }}

        /* tab handler */
        {int tab = nk_input_is_key_pressed(in, NK_KEY_TAB);
 800bef4:	2105      	movs	r1, #5
 800bef6:	4638      	mov	r0, r7
 800bef8:	f000 ffa0 	bl	800ce3c <nk_input_is_key_pressed>
        if (tab && (flags & NK_EDIT_ALLOW_TAB)) {
 800befc:	b120      	cbz	r0, 800bf08 <nk_do_edit+0x33c>
 800befe:	9b06      	ldr	r3, [sp, #24]
 800bf00:	f013 0f08 	tst.w	r3, #8
 800bf04:	f040 8129 	bne.w	800c15a <nk_do_edit+0x58e>
            cursor_follow = nk_true;
        }}
    }

    /* set widget state */
    if (edit->active)
 800bf08:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 85b4 	beq.w	800ca7a <nk_do_edit+0xeae>
        *state = NK_WIDGET_STATE_ACTIVE;
 800bf12:	2322      	movs	r3, #34	; 0x22
 800bf14:	9a07      	ldr	r2, [sp, #28]
 800bf16:	6013      	str	r3, [r2, #0]
    else nk_widget_state_reset(state);

    if (is_hovered)
 800bf18:	f1b9 0f00 	cmp.w	r9, #0
 800bf1c:	d002      	beq.n	800bf24 <nk_do_edit+0x358>
        *state |= NK_WIDGET_STATE_HOVERED;
 800bf1e:	f043 0312 	orr.w	r3, r3, #18
 800bf22:	6013      	str	r3, [r2, #0]

    /* DRAW EDIT */
    {const char *text = nk_str_get_const(&edit->string);
 800bf24:	f105 090c 	add.w	r9, r5, #12
 800bf28:	4648      	mov	r0, r9
 800bf2a:	f005 f90f 	bl	801114c <nk_str_get_const>
 800bf2e:	9008      	str	r0, [sp, #32]
    int len = nk_str_len_char(&edit->string);
 800bf30:	4648      	mov	r0, r9
 800bf32:	f005 f9e9 	bl	8011308 <nk_str_len_char>
 800bf36:	4604      	mov	r4, r0

    {/* select background colors/images  */
    const struct nk_style_item *background;
    if (*state & NK_WIDGET_STATE_ACTIVED)
 800bf38:	9b07      	ldr	r3, [sp, #28]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f013 0f20 	tst.w	r3, #32
 800bf40:	f000 8116 	beq.w	800c170 <nk_do_edit+0x5a4>
        background = &style->active;
 800bf44:	f106 0138 	add.w	r1, r6, #56	; 0x38
    else if (*state & NK_WIDGET_STATE_HOVER)
        background = &style->hover;
    else background = &style->normal;

    /* draw background frame */
    switch(background->type) {
 800bf48:	780b      	ldrb	r3, [r1, #0]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	f000 8117 	beq.w	800c17e <nk_do_edit+0x5b2>
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	f000 8123 	beq.w	800c19c <nk_do_edit+0x5d0>
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f000 812f 	beq.w	800c1ba <nk_do_edit+0x5ee>
            nk_stroke_rect(out, bounds, style->rounding, style->border, style->border_color);
            break;
    }}


    area.w = NK_MAX(0, area.w - style->cursor_size);
 800bf5c:	edd6 7aa6 	vldr	s15, [r6, #664]	; 0x298
 800bf60:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bf64:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6c:	bfd8      	it	le
 800bf6e:	ed1f 8a3f 	vldrle	s16, [pc, #-252]	; 800be74 <nk_do_edit+0x2a8>
    if (edit->active)
 800bf72:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 84ac 	beq.w	800c8d4 <nk_do_edit+0xd08>
    {
        int total_lines = 1;
        struct nk_vec2 text_size = nk_vec2(0,0);
 800bf7c:	ed5f ea43 	vldr	s29, [pc, #-268]	; 800be74 <nk_do_edit+0x2a8>
 800bf80:	eef0 0a6e 	vmov.f32	s1, s29
 800bf84:	eeb0 0a6e 	vmov.f32	s0, s29
 800bf88:	f001 fc5e 	bl	800d848 <nk_vec2>
 800bf8c:	eef0 ba40 	vmov.f32	s23, s0
 800bf90:	eef0 da60 	vmov.f32	s27, s1
 800bf94:	ed8d 0a1e 	vstr	s0, [sp, #120]	; 0x78
 800bf98:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
        const char *cursor_ptr = 0;
        const char *select_begin_ptr = 0;
        const char *select_end_ptr = 0;

        /* 2D pixel positions */
        struct nk_vec2 cursor_pos = nk_vec2(0,0);
 800bf9c:	eef0 0a6e 	vmov.f32	s1, s29
 800bfa0:	eeb0 0a6e 	vmov.f32	s0, s29
 800bfa4:	f001 fc50 	bl	800d848 <nk_vec2>
 800bfa8:	eef0 ca40 	vmov.f32	s25, s0
 800bfac:	eeb0 da60 	vmov.f32	s26, s1
 800bfb0:	ed8d 0a20 	vstr	s0, [sp, #128]	; 0x80
 800bfb4:	edcd 0a21 	vstr	s1, [sp, #132]	; 0x84
        struct nk_vec2 selection_offset_start = nk_vec2(0,0);
 800bfb8:	eef0 0a6e 	vmov.f32	s1, s29
 800bfbc:	eeb0 0a6e 	vmov.f32	s0, s29
 800bfc0:	f001 fc42 	bl	800d848 <nk_vec2>
 800bfc4:	eeb0 ea40 	vmov.f32	s28, s0
 800bfc8:	eeb0 ca60 	vmov.f32	s24, s1
 800bfcc:	ed8d 0a22 	vstr	s0, [sp, #136]	; 0x88
 800bfd0:	edcd 0a23 	vstr	s1, [sp, #140]	; 0x8c
        struct nk_vec2 selection_offset_end = nk_vec2(0,0);
 800bfd4:	eef0 0a6e 	vmov.f32	s1, s29
 800bfd8:	eeb0 0a6e 	vmov.f32	s0, s29
 800bfdc:	f001 fc34 	bl	800d848 <nk_vec2>
 800bfe0:	eef0 fa40 	vmov.f32	s31, s0
 800bfe4:	eeb0 fa60 	vmov.f32	s30, s1
 800bfe8:	ed8d 0a24 	vstr	s0, [sp, #144]	; 0x90
 800bfec:	edcd 0a25 	vstr	s1, [sp, #148]	; 0x94

        int selection_begin = NK_MIN(edit->select_start, edit->select_end);
 800bff0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800bff2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800bff4:	4611      	mov	r1, r2
 800bff6:	429a      	cmp	r2, r3
 800bff8:	bfa8      	it	ge
 800bffa:	4619      	movge	r1, r3
 800bffc:	910f      	str	r1, [sp, #60]	; 0x3c
        int selection_end = NK_MAX(edit->select_start, edit->select_end);
 800bffe:	429a      	cmp	r2, r3
 800c000:	bfb8      	it	lt
 800c002:	461a      	movlt	r2, r3
 800c004:	9210      	str	r2, [sp, #64]	; 0x40

        /* calculate total line count + total space + cursor/selection position */
        float line_width = 0.0f;
        if (text && len)
 800c006:	9b08      	ldr	r3, [sp, #32]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 8235 	beq.w	800c478 <nk_do_edit+0x8ac>
 800c00e:	2c00      	cmp	r4, #0
 800c010:	f040 80f2 	bne.w	800c1f8 <nk_do_edit+0x62c>
        const char *select_end_ptr = 0;
 800c014:	2300      	movs	r3, #0
 800c016:	9309      	str	r3, [sp, #36]	; 0x24
        const char *select_begin_ptr = 0;
 800c018:	930a      	str	r3, [sp, #40]	; 0x28
        const char *cursor_ptr = 0;
 800c01a:	9308      	str	r3, [sp, #32]
                cursor_pos.y = text_size.y - row_height;
            }
        }
        {
            /* scrollbar */
            if (cursor_follow)
 800c01c:	9b05      	ldr	r3, [sp, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 8282 	beq.w	800c528 <nk_do_edit+0x95c>
            {
                /* update scrollbar to follow cursor */
                if (!(flags & NK_EDIT_NO_HORIZONTAL_SCROLL)) {
 800c024:	9b06      	ldr	r3, [sp, #24]
 800c026:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c02a:	f040 8229 	bne.w	800c480 <nk_do_edit+0x8b4>
                    /* horizontal scroll */
                    const float scroll_increment = area.w * 0.25f;
 800c02e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c032:	ee28 7a27 	vmul.f32	s14, s16, s15
                    if (cursor_pos.x < edit->scrollbar.x)
 800c036:	edd5 7a14 	vldr	s15, [r5, #80]	; 0x50
 800c03a:	eef4 7aec 	vcmpe.f32	s15, s25
 800c03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c042:	dd0e      	ble.n	800c062 <nk_do_edit+0x496>
                        edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x - scroll_increment);
 800c044:	ee7c 7ac7 	vsub.f32	s15, s25, s14
 800c048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c050:	bfc6      	itte	gt
 800c052:	eefd 7ae7 	vcvtgt.s32.f32	s15, s15
 800c056:	eef8 7ae7 	vcvtgt.f32.s32	s15, s15
 800c05a:	ed5f 7a7a 	vldrle	s15, [pc, #-488]	; 800be74 <nk_do_edit+0x2a8>
 800c05e:	edc5 7a14 	vstr	s15, [r5, #80]	; 0x50
                    if (cursor_pos.x >= edit->scrollbar.x + area.w)
 800c062:	edd5 7a14 	vldr	s15, [r5, #80]	; 0x50
 800c066:	ee78 7a27 	vadd.f32	s15, s16, s15
 800c06a:	eef4 7aec 	vcmpe.f32	s15, s25
 800c06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c072:	f200 8207 	bhi.w	800c484 <nk_do_edit+0x8b8>
                        edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x - area.w + scroll_increment);
 800c076:	ee7c 7ac8 	vsub.f32	s15, s25, s16
 800c07a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c07e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c086:	bfc6      	itte	gt
 800c088:	eefd 7ae7 	vcvtgt.s32.f32	s15, s15
 800c08c:	eef8 7ae7 	vcvtgt.f32.s32	s15, s15
 800c090:	ed5f 7a88 	vldrle	s15, [pc, #-544]	; 800be74 <nk_do_edit+0x2a8>
 800c094:	edc5 7a14 	vstr	s15, [r5, #80]	; 0x50
 800c098:	e1f4      	b.n	800c484 <nk_do_edit+0x8b8>
            nk_textedit_text(edit, in->keyboard.text, in->keyboard.text_len);
 800c09a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f007 fa42 	bl	8013528 <nk_textedit_text>
            in->keyboard.text_len = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            cursor_follow = nk_true;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	e6f3      	b.n	800be98 <nk_do_edit+0x2cc>
                nk_textedit_text(edit, "\n", 1);
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	49af      	ldr	r1, [pc, #700]	; (800c370 <nk_do_edit+0x7a4>)
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f007 fa37 	bl	8013528 <nk_textedit_text>
            cursor_follow = nk_true;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	9305      	str	r3, [sp, #20]
                nk_textedit_text(edit, "\n", 1);
 800c0be:	e703      	b.n	800bec8 <nk_do_edit+0x2fc>
            else nk_textedit_text(edit, "\n", 1);
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	49ab      	ldr	r1, [pc, #684]	; (800c370 <nk_do_edit+0x7a4>)
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f007 fa2f 	bl	8013528 <nk_textedit_text>
            cursor_follow = nk_true;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	e6fb      	b.n	800bec8 <nk_do_edit+0x2fc>
            int b = edit->select_start;
 800c0d0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
            int e = edit->select_end;
 800c0d2:	6e2c      	ldr	r4, [r5, #96]	; 0x60
            int begin = NK_MIN(b, e);
 800c0d4:	9308      	str	r3, [sp, #32]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	bfa8      	it	ge
 800c0dc:	4622      	movge	r2, r4
 800c0de:	4611      	mov	r1, r2
            text = nk_str_at_const(&edit->string, begin, &unicode, &glyph_len);
 800c0e0:	ab26      	add	r3, sp, #152	; 0x98
 800c0e2:	aa2a      	add	r2, sp, #168	; 0xa8
 800c0e4:	910a      	str	r1, [sp, #40]	; 0x28
 800c0e6:	f105 000c 	add.w	r0, r5, #12
 800c0ea:	f004 ffcb 	bl	8011084 <nk_str_at_const>
 800c0ee:	4601      	mov	r1, r0
            if (edit->clip.copy)
 800c0f0:	68ab      	ldr	r3, [r5, #8]
 800c0f2:	b14b      	cbz	r3, 800c108 <nk_do_edit+0x53c>
                edit->clip.copy(edit->clip.userdata, text, end - begin);
 800c0f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0f6:	9808      	ldr	r0, [sp, #32]
 800c0f8:	42a0      	cmp	r0, r4
 800c0fa:	bfac      	ite	ge
 800c0fc:	ebc2 0200 	rsbge	r2, r2, r0
 800c100:	ebc2 0204 	rsblt	r2, r2, r4
 800c104:	6828      	ldr	r0, [r5, #0]
 800c106:	4798      	blx	r3
            if (cut && !(flags & NK_EDIT_READ_ONLY)){
 800c108:	f1b8 0f00 	cmp.w	r8, #0
 800c10c:	d001      	beq.n	800c112 <nk_do_edit+0x546>
 800c10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c110:	b13b      	cbz	r3, 800c122 <nk_do_edit+0x556>
        {int paste = nk_input_is_key_pressed(in, NK_KEY_PASTE);
 800c112:	2109      	movs	r1, #9
 800c114:	4638      	mov	r0, r7
 800c116:	f000 fe91 	bl	800ce3c <nk_input_is_key_pressed>
        if (paste && (flags & NK_EDIT_CLIPBOARD) && edit->clip.paste) {
 800c11a:	2800      	cmp	r0, #0
 800c11c:	f43f aeea 	beq.w	800bef4 <nk_do_edit+0x328>
 800c120:	e011      	b.n	800c146 <nk_do_edit+0x57a>
                nk_textedit_cut(edit);
 800c122:	4628      	mov	r0, r5
 800c124:	f007 f9eb 	bl	80134fe <nk_textedit_cut>
                cursor_follow = nk_true;
 800c128:	2301      	movs	r3, #1
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	e7f1      	b.n	800c112 <nk_do_edit+0x546>
        {int paste = nk_input_is_key_pressed(in, NK_KEY_PASTE);
 800c12e:	2109      	movs	r1, #9
 800c130:	4638      	mov	r0, r7
 800c132:	f000 fe83 	bl	800ce3c <nk_input_is_key_pressed>
        if (paste && (flags & NK_EDIT_CLIPBOARD) && edit->clip.paste) {
 800c136:	2800      	cmp	r0, #0
 800c138:	f43f aedc 	beq.w	800bef4 <nk_do_edit+0x328>
 800c13c:	9b06      	ldr	r3, [sp, #24]
 800c13e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c142:	f43f aed7 	beq.w	800bef4 <nk_do_edit+0x328>
 800c146:	686b      	ldr	r3, [r5, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f43f aed3 	beq.w	800bef4 <nk_do_edit+0x328>
            edit->clip.paste(edit->clip.userdata, edit);
 800c14e:	4629      	mov	r1, r5
 800c150:	6828      	ldr	r0, [r5, #0]
 800c152:	4798      	blx	r3
            cursor_follow = nk_true;
 800c154:	2301      	movs	r3, #1
 800c156:	9305      	str	r3, [sp, #20]
 800c158:	e6cc      	b.n	800bef4 <nk_do_edit+0x328>
            nk_textedit_text(edit, "    ", 4);
 800c15a:	2204      	movs	r2, #4
 800c15c:	4985      	ldr	r1, [pc, #532]	; (800c374 <nk_do_edit+0x7a8>)
 800c15e:	4628      	mov	r0, r5
 800c160:	f007 f9e2 	bl	8013528 <nk_textedit_text>
            cursor_follow = nk_true;
 800c164:	2301      	movs	r3, #1
 800c166:	9305      	str	r3, [sp, #20]
 800c168:	e6ce      	b.n	800bf08 <nk_do_edit+0x33c>
    char cursor_follow = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	e6d0      	b.n	800bf12 <nk_do_edit+0x346>
    else if (*state & NK_WIDGET_STATE_HOVER)
 800c170:	f013 0f10 	tst.w	r3, #16
        background = &style->hover;
 800c174:	bf14      	ite	ne
 800c176:	f106 011c 	addne.w	r1, r6, #28
    else background = &style->normal;
 800c17a:	4631      	moveq	r1, r6
 800c17c:	e6e4      	b.n	800bf48 <nk_do_edit+0x37c>
            nk_draw_image(out, bounds, &background->data.image, nk_white);
 800c17e:	4b7e      	ldr	r3, [pc, #504]	; (800c378 <nk_do_edit+0x7ac>)
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	3104      	adds	r1, #4
 800c184:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 800c188:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 800c18c:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 800c190:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 800c194:	4658      	mov	r0, fp
 800c196:	f7ff f919 	bl	800b3cc <nk_draw_image>
            break;
 800c19a:	e6df      	b.n	800bf5c <nk_do_edit+0x390>
            nk_draw_nine_slice(out, bounds, &background->data.slice, nk_white);
 800c19c:	4b76      	ldr	r3, [pc, #472]	; (800c378 <nk_do_edit+0x7ac>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	3104      	adds	r1, #4
 800c1a2:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 800c1a6:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 800c1aa:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 800c1ae:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 800c1b2:	4658      	mov	r0, fp
 800c1b4:	f7ff f98e 	bl	800b4d4 <nk_draw_nine_slice>
            break;
 800c1b8:	e6d0      	b.n	800bf5c <nk_do_edit+0x390>
            nk_fill_rect(out, bounds, style->rounding, background->data.color);
 800c1ba:	6849      	ldr	r1, [r1, #4]
 800c1bc:	ed96 2aa5 	vldr	s4, [r6, #660]	; 0x294
 800c1c0:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 800c1c4:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 800c1c8:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 800c1cc:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f7fe ff41 	bl	800b058 <nk_fill_rect>
            nk_stroke_rect(out, bounds, style->rounding, style->border, style->border_color);
 800c1d6:	6d71      	ldr	r1, [r6, #84]	; 0x54
 800c1d8:	edd6 2aa4 	vldr	s5, [r6, #656]	; 0x290
 800c1dc:	ed96 2aa5 	vldr	s4, [r6, #660]	; 0x294
 800c1e0:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 800c1e4:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 800c1e8:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 800c1ec:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 800c1f0:	4658      	mov	r0, fp
 800c1f2:	f7fe fe9f 	bl	800af34 <nk_stroke_rect>
            break;
 800c1f6:	e6b1      	b.n	800bf5c <nk_do_edit+0x390>
            nk_rune unicode = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	931b      	str	r3, [sp, #108]	; 0x6c
            glyph_len = nk_utf_decode(text, &unicode, len);
 800c1fc:	46a0      	mov	r8, r4
 800c1fe:	4622      	mov	r2, r4
 800c200:	a91b      	add	r1, sp, #108	; 0x6c
 800c202:	9c08      	ldr	r4, [sp, #32]
 800c204:	4620      	mov	r0, r4
 800c206:	f008 fc4b 	bl	8014aa0 <nk_utf_decode>
            glyph_width = font->width(font->userdata, font->height, text, glyph_len);
 800c20a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c20e:	9009      	str	r0, [sp, #36]	; 0x24
 800c210:	4602      	mov	r2, r0
 800c212:	9408      	str	r4, [sp, #32]
 800c214:	4621      	mov	r1, r4
 800c216:	ed9a 0a01 	vldr	s0, [sl, #4]
 800c21a:	f8da 0000 	ldr.w	r0, [sl]
 800c21e:	4798      	blx	r3
 800c220:	eef0 da40 	vmov.f32	s27, s0
            while ((text_len < len) && glyph_len)
 800c224:	4643      	mov	r3, r8
 800c226:	2b00      	cmp	r3, #0
 800c228:	f340 810c 	ble.w	800c444 <nk_do_edit+0x878>
 800c22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c22e:	2a00      	cmp	r2, #0
 800c230:	f000 8119 	beq.w	800c466 <nk_do_edit+0x89a>
 800c234:	f04f 0800 	mov.w	r8, #0
            int row_begin = 0;
 800c238:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
            int text_len = 0;
 800c23c:	4644      	mov	r4, r8
        const char *select_end_ptr = 0;
 800c23e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        const char *select_begin_ptr = 0;
 800c242:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
        const char *cursor_ptr = 0;
 800c246:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
        int total_lines = 1;
 800c24a:	2001      	movs	r0, #1
 800c24c:	900e      	str	r0, [sp, #56]	; 0x38
                    selection_offset_start.y = (float)(NK_MAX(total_lines-1,0)) * row_height;
 800c24e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800c252:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800c256:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c25a:	9655      	str	r6, [sp, #340]	; 0x154
 800c25c:	4616      	mov	r6, r2
 800c25e:	9756      	str	r7, [sp, #344]	; 0x158
 800c260:	461f      	mov	r7, r3
 800c262:	e0ac      	b.n	800c3be <nk_do_edit+0x7f2>
                if (!cursor_ptr && glyphs == edit->cursor)
 800c264:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c266:	4543      	cmp	r3, r8
 800c268:	f040 80ad 	bne.w	800c3c6 <nk_do_edit+0x7fa>
                    cursor_pos.y = (float)(total_lines-1) * row_height;
 800c26c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c26e:	3b01      	subs	r3, #1
 800c270:	ee0d 3a10 	vmov	s26, r3
 800c274:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 800c278:	ee2d da2a 	vmul.f32	s26, s26, s21
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 800c27c:	2301      	movs	r3, #1
 800c27e:	9302      	str	r3, [sp, #8]
 800c280:	ab1c      	add	r3, sp, #112	; 0x70
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	ab26      	add	r3, sp, #152	; 0x98
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	ab1d      	add	r3, sp, #116	; 0x74
 800c28a:	eeb0 0a6a 	vmov.f32	s0, s21
 800c28e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c290:	1a62      	subs	r2, r4, r1
 800c292:	4459      	add	r1, fp
 800c294:	4650      	mov	r0, sl
 800c296:	f009 f9af 	bl	80155f8 <nk_text_calculate_text_bounds>
 800c29a:	ed8d 0a2a 	vstr	s0, [sp, #168]	; 0xa8
 800c29e:	edcd 0a2b 	vstr	s1, [sp, #172]	; 0xac
                    cursor_pos.x = row_size.x;
 800c2a2:	eef0 ca40 	vmov.f32	s25, s0
                    cursor_ptr = text + text_len;
 800c2a6:	eb0b 0304 	add.w	r3, fp, r4
 800c2aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c2ac:	e08b      	b.n	800c3c6 <nk_do_edit+0x7fa>
                if (!select_begin_ptr && edit->select_start != edit->select_end &&
 800c2ae:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c2b0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	f000 808b 	beq.w	800c3ce <nk_do_edit+0x802>
 800c2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2ba:	4598      	cmp	r8, r3
 800c2bc:	d006      	beq.n	800c2cc <nk_do_edit+0x700>
                if (!select_end_ptr && edit->select_start != edit->select_end &&
 800c2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f040 8087 	bne.w	800c3d4 <nk_do_edit+0x808>
 800c2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c8:	930a      	str	r3, [sp, #40]	; 0x28
 800c2ca:	e029      	b.n	800c320 <nk_do_edit+0x754>
                    selection_offset_start.y = (float)(NK_MAX(total_lines-1,0)) * row_height;
 800c2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfc3      	ittte	gt
 800c2d2:	f103 33ff 	addgt.w	r3, r3, #4294967295
 800c2d6:	ee0c 3a10 	vmovgt	s24, r3
 800c2da:	eeb8 cacc 	vcvtgt.f32.s32	s24, s24
 800c2de:	ed9f ca27 	vldrle	s24, [pc, #156]	; 800c37c <nk_do_edit+0x7b0>
 800c2e2:	ee2a ca8c 	vmul.f32	s24, s21, s24
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	9302      	str	r3, [sp, #8]
 800c2ea:	ab1c      	add	r3, sp, #112	; 0x70
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	ab26      	add	r3, sp, #152	; 0x98
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c2f4:	eeb0 0a6a 	vmov.f32	s0, s21
 800c2f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c2fa:	1a62      	subs	r2, r4, r1
 800c2fc:	4459      	add	r1, fp
 800c2fe:	4650      	mov	r0, sl
 800c300:	f009 f97a 	bl	80155f8 <nk_text_calculate_text_bounds>
 800c304:	ed8d 0a2a 	vstr	s0, [sp, #168]	; 0xa8
 800c308:	edcd 0a2b 	vstr	s1, [sp, #172]	; 0xac
                    selection_offset_start.x = row_size.x;
 800c30c:	eeb0 ea40 	vmov.f32	s28, s0
                    select_begin_ptr = text + text_len;
 800c310:	eb0b 0304 	add.w	r3, fp, r4
 800c314:	930a      	str	r3, [sp, #40]	; 0x28
 800c316:	e05a      	b.n	800c3ce <nk_do_edit+0x802>
                if (!select_end_ptr && edit->select_start != edit->select_end &&
 800c318:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c31a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d059      	beq.n	800c3d4 <nk_do_edit+0x808>
 800c320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c322:	4598      	cmp	r8, r3
 800c324:	d002      	beq.n	800c32c <nk_do_edit+0x760>
 800c326:	2300      	movs	r3, #0
 800c328:	9309      	str	r3, [sp, #36]	; 0x24
 800c32a:	e053      	b.n	800c3d4 <nk_do_edit+0x808>
                    selection_offset_end.y = (float)(total_lines-1) * row_height;
 800c32c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c32e:	3b01      	subs	r3, #1
 800c330:	ee0f 3a10 	vmov	s30, r3
 800c334:	eeb8 facf 	vcvt.f32.s32	s30, s30
 800c338:	ee2f fa2a 	vmul.f32	s30, s30, s21
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 800c33c:	2301      	movs	r3, #1
 800c33e:	9302      	str	r3, [sp, #8]
 800c340:	ab1c      	add	r3, sp, #112	; 0x70
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	ab26      	add	r3, sp, #152	; 0x98
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	ab1d      	add	r3, sp, #116	; 0x74
 800c34a:	eeb0 0a6a 	vmov.f32	s0, s21
 800c34e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c350:	1a62      	subs	r2, r4, r1
 800c352:	4459      	add	r1, fp
 800c354:	4650      	mov	r0, sl
 800c356:	f009 f94f 	bl	80155f8 <nk_text_calculate_text_bounds>
 800c35a:	ed8d 0a2a 	vstr	s0, [sp, #168]	; 0xa8
 800c35e:	edcd 0a2b 	vstr	s1, [sp, #172]	; 0xac
                    selection_offset_end.x = row_size.x;
 800c362:	eef0 fa40 	vmov.f32	s31, s0
                    select_end_ptr = text + text_len;
 800c366:	eb0b 0304 	add.w	r3, fp, r4
 800c36a:	9309      	str	r3, [sp, #36]	; 0x24
 800c36c:	e032      	b.n	800c3d4 <nk_do_edit+0x808>
 800c36e:	bf00      	nop
 800c370:	0801b114 	.word	0x0801b114
 800c374:	0801b118 	.word	0x0801b118
 800c378:	0801b170 	.word	0x0801b170
 800c37c:	00000000 	.word	0x00000000
 800c380:	3c23d70a 	.word	0x3c23d70a
 800c384:	3dcccccd 	.word	0x3dcccccd
                text_len += glyph_len;
 800c388:	4434      	add	r4, r6
                line_width += (float)glyph_width;
 800c38a:	ee7e eaad 	vadd.f32	s29, s29, s27
                glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);
 800c38e:	eb0b 0904 	add.w	r9, fp, r4
 800c392:	1b3a      	subs	r2, r7, r4
 800c394:	a91b      	add	r1, sp, #108	; 0x6c
 800c396:	4648      	mov	r0, r9
 800c398:	f008 fb82 	bl	8014aa0 <nk_utf_decode>
 800c39c:	4606      	mov	r6, r0
                glyph_width = font->width(font->userdata, font->height,
 800c39e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	ed9a 0a01 	vldr	s0, [sl, #4]
 800c3aa:	f8da 0000 	ldr.w	r0, [sl]
 800c3ae:	4798      	blx	r3
 800c3b0:	eef0 da40 	vmov.f32	s27, s0
            while ((text_len < len) && glyph_len)
 800c3b4:	42bc      	cmp	r4, r7
 800c3b6:	da34      	bge.n	800c422 <nk_do_edit+0x856>
 800c3b8:	f108 0801 	add.w	r8, r8, #1
 800c3bc:	b38e      	cbz	r6, 800c422 <nk_do_edit+0x856>
                if (!cursor_ptr && glyphs == edit->cursor)
 800c3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f43f af4f 	beq.w	800c264 <nk_do_edit+0x698>
                if (!select_begin_ptr && edit->select_start != edit->select_end &&
 800c3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f43f af70 	beq.w	800c2ae <nk_do_edit+0x6e2>
                if (!select_end_ptr && edit->select_start != edit->select_end &&
 800c3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0a1      	beq.n	800c318 <nk_do_edit+0x74c>
                if (unicode == '\n') {
 800c3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3d6:	2b0a      	cmp	r3, #10
 800c3d8:	d1d6      	bne.n	800c388 <nk_do_edit+0x7bc>
                    text_size.x = NK_MAX(text_size.x, line_width);
 800c3da:	eef4 eaeb 	vcmpe.f32	s29, s23
 800c3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e2:	bfd8      	it	le
 800c3e4:	eef0 ea6b 	vmovle.f32	s29, s23
                    total_lines++;
 800c3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	930e      	str	r3, [sp, #56]	; 0x38
                    text_len++;
 800c3ee:	3401      	adds	r4, #1
                    glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);
 800c3f0:	eb0b 0904 	add.w	r9, fp, r4
 800c3f4:	1b3a      	subs	r2, r7, r4
 800c3f6:	a91b      	add	r1, sp, #108	; 0x6c
 800c3f8:	4648      	mov	r0, r9
 800c3fa:	f008 fb51 	bl	8014aa0 <nk_utf_decode>
 800c3fe:	4606      	mov	r6, r0
                    glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);
 800c400:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c404:	4602      	mov	r2, r0
 800c406:	4649      	mov	r1, r9
 800c408:	ed9a 0a01 	vldr	s0, [sl, #4]
 800c40c:	f8da 0000 	ldr.w	r0, [sl]
 800c410:	4798      	blx	r3
 800c412:	eef0 da40 	vmov.f32	s27, s0
                    text_size.x = NK_MAX(text_size.x, line_width);
 800c416:	eef0 ba6e 	vmov.f32	s23, s29
                    row_begin = text_len;
 800c41a:	9411      	str	r4, [sp, #68]	; 0x44
                    line_width = 0;
 800c41c:	ed5f ea29 	vldr	s29, [pc, #-164]	; 800c37c <nk_do_edit+0x7b0>
                    continue;
 800c420:	e7c8      	b.n	800c3b4 <nk_do_edit+0x7e8>
            text_size.y = (float)total_lines * row_height;
 800c422:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800c426:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800c42a:	9e55      	ldr	r6, [sp, #340]	; 0x154
 800c42c:	9f56      	ldr	r7, [sp, #344]	; 0x158
 800c42e:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800c432:	eef8 dae7 	vcvt.f32.s32	s27, s15
 800c436:	ee6d daaa 	vmul.f32	s27, s27, s21
            if (!cursor_ptr && edit->cursor == edit->string.len) {
 800c43a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c43c:	b153      	cbz	r3, 800c454 <nk_do_edit+0x888>
 800c43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c440:	9308      	str	r3, [sp, #32]
 800c442:	e5eb      	b.n	800c01c <nk_do_edit+0x450>
            text_size.y = (float)total_lines * row_height;
 800c444:	eef0 da6a 	vmov.f32	s27, s21
            while ((text_len < len) && glyph_len)
 800c448:	ed5f ea34 	vldr	s29, [pc, #-208]	; 800c37c <nk_do_edit+0x7b0>
 800c44c:	2300      	movs	r3, #0
 800c44e:	9309      	str	r3, [sp, #36]	; 0x24
 800c450:	930a      	str	r3, [sp, #40]	; 0x28
 800c452:	930d      	str	r3, [sp, #52]	; 0x34
            if (!cursor_ptr && edit->cursor == edit->string.len) {
 800c454:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800c456:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800c458:	429a      	cmp	r2, r3
                cursor_pos.y = text_size.y - row_height;
 800c45a:	bf04      	itt	eq
 800c45c:	ee3d daea 	vsubeq.f32	s26, s27, s21
 800c460:	eef0 ca6e 	vmoveq.f32	s25, s29
 800c464:	e7eb      	b.n	800c43e <nk_do_edit+0x872>
            text_size.y = (float)total_lines * row_height;
 800c466:	eef0 da6a 	vmov.f32	s27, s21
            while ((text_len < len) && glyph_len)
 800c46a:	ed5f ea3c 	vldr	s29, [pc, #-240]	; 800c37c <nk_do_edit+0x7b0>
 800c46e:	2300      	movs	r3, #0
 800c470:	9309      	str	r3, [sp, #36]	; 0x24
 800c472:	930a      	str	r3, [sp, #40]	; 0x28
 800c474:	930d      	str	r3, [sp, #52]	; 0x34
 800c476:	e7ed      	b.n	800c454 <nk_do_edit+0x888>
        const char *select_end_ptr = 0;
 800c478:	9b08      	ldr	r3, [sp, #32]
 800c47a:	9309      	str	r3, [sp, #36]	; 0x24
        const char *select_begin_ptr = 0;
 800c47c:	930a      	str	r3, [sp, #40]	; 0x28
 800c47e:	e5cd      	b.n	800c01c <nk_do_edit+0x450>
                } else edit->scrollbar.x = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	652b      	str	r3, [r5, #80]	; 0x50

                if (flags & NK_EDIT_MULTILINE) {
 800c484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c486:	2b00      	cmp	r3, #0
 800c488:	d04b      	beq.n	800c522 <nk_do_edit+0x956>
                    /* vertical scroll */
                    if (cursor_pos.y < edit->scrollbar.y)
 800c48a:	edd5 7a15 	vldr	s15, [r5, #84]	; 0x54
 800c48e:	eef4 7acd 	vcmpe.f32	s15, s26
 800c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c496:	dd0a      	ble.n	800c4ae <nk_do_edit+0x8e2>
                        edit->scrollbar.y = NK_MAX(0.0f, cursor_pos.y - row_height);
 800c498:	ee7d 7a6a 	vsub.f32	s15, s26, s21
 800c49c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4a4:	bfd8      	it	le
 800c4a6:	ed5f 7a4b 	vldrle	s15, [pc, #-300]	; 800c37c <nk_do_edit+0x7b0>
 800c4aa:	edc5 7a15 	vstr	s15, [r5, #84]	; 0x54
                    if (cursor_pos.y >= edit->scrollbar.y + row_height)
 800c4ae:	edd5 7a15 	vldr	s15, [r5, #84]	; 0x54
 800c4b2:	ee7a 7aa7 	vadd.f32	s15, s21, s15
 800c4b6:	eef4 7acd 	vcmpe.f32	s15, s26
 800c4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4be:	d801      	bhi.n	800c4c4 <nk_do_edit+0x8f8>
                        edit->scrollbar.y = edit->scrollbar.y + row_height;
 800c4c0:	edc5 7a15 	vstr	s15, [r5, #84]	; 0x54
                float scroll_target;
                float scroll_offset;
                float scroll_step;
                float scroll_inc;

                scroll = area;
 800c4c4:	ed8d 9a2b 	vstr	s18, [sp, #172]	; 0xac
 800c4c8:	edcd 8a2d 	vstr	s17, [sp, #180]	; 0xb4
                scroll.x = (bounds.x + bounds.w - style->border) - style->scrollbar_size.x;
 800c4cc:	ed96 1aa7 	vldr	s2, [r6, #668]	; 0x29c
 800c4d0:	ee3a 0a0b 	vadd.f32	s0, s20, s22
 800c4d4:	edd6 7aa4 	vldr	s15, [r6, #656]	; 0x290
 800c4d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c4dc:	ee30 0a41 	vsub.f32	s0, s0, s2
 800c4e0:	ed8d 0a2a 	vstr	s0, [sp, #168]	; 0xa8
                scroll.w = style->scrollbar_size.x;
 800c4e4:	ed8d 1a2c 	vstr	s2, [sp, #176]	; 0xb0

                scroll_offset = edit->scrollbar.y;
                scroll_step = scroll.h * 0.10f;
                scroll_inc = scroll.h * 0.01f;
                scroll_target = text_size.y;
                edit->scrollbar.y = nk_do_scrollbarv(&ws, out, scroll, 0,
 800c4e8:	f8cd a004 	str.w	sl, [sp, #4]
 800c4ec:	9700      	str	r7, [sp, #0]
 800c4ee:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800c4f2:	ed5f 3a5d 	vldr	s7, [pc, #-372]	; 800c380 <nk_do_edit+0x7b4>
 800c4f6:	ee68 3aa3 	vmul.f32	s7, s17, s7
 800c4fa:	ed1f 3a5e 	vldr	s6, [pc, #-376]	; 800c384 <nk_do_edit+0x7b8>
 800c4fe:	ee28 3a83 	vmul.f32	s6, s17, s6
 800c502:	eef0 2a6d 	vmov.f32	s5, s27
 800c506:	ed95 2a15 	vldr	s4, [r5, #84]	; 0x54
 800c50a:	2200      	movs	r2, #0
 800c50c:	eef0 0a49 	vmov.f32	s1, s18
 800c510:	eef0 1a68 	vmov.f32	s3, s17
 800c514:	4659      	mov	r1, fp
 800c516:	a826      	add	r0, sp, #152	; 0x98
 800c518:	f004 f920 	bl	801075c <nk_do_scrollbarv>
 800c51c:	ed85 0a15 	vstr	s0, [r5, #84]	; 0x54
 800c520:	e005      	b.n	800c52e <nk_do_edit+0x962>
                } else edit->scrollbar.y = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	656b      	str	r3, [r5, #84]	; 0x54
            if (flags & NK_EDIT_MULTILINE)
 800c526:	e002      	b.n	800c52e <nk_do_edit+0x962>
 800c528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1ca      	bne.n	800c4c4 <nk_do_edit+0x8f8>
        struct nk_color sel_background_color;
        struct nk_color sel_text_color;
        struct nk_color cursor_color;
        struct nk_color cursor_text_color;
        const struct nk_style_item *background;
        nk_push_scissor(out, clip);
 800c52e:	ed9d 0a2e 	vldr	s0, [sp, #184]	; 0xb8
 800c532:	eddd 0a2f 	vldr	s1, [sp, #188]	; 0xbc
 800c536:	ed9d 1a30 	vldr	s2, [sp, #192]	; 0xc0
 800c53a:	eddd 1a31 	vldr	s3, [sp, #196]	; 0xc4
 800c53e:	4658      	mov	r0, fp
 800c540:	f7fe fcaa 	bl	800ae98 <nk_push_scissor>

        /* select correct colors to draw */
        if (*state & NK_WIDGET_STATE_ACTIVED) {
 800c544:	9b07      	ldr	r3, [sp, #28]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f013 0f20 	tst.w	r3, #32
 800c54c:	d07e      	beq.n	800c64c <nk_do_edit+0xa80>
            background = &style->active;
 800c54e:	f106 0338 	add.w	r3, r6, #56	; 0x38
            text_color = style->text_active;
 800c552:	f8d6 227c 	ldr.w	r2, [r6, #636]	; 0x27c
 800c556:	9219      	str	r2, [sp, #100]	; 0x64
            sel_text_color = style->selected_text_hover;
 800c558:	f8d6 228c 	ldr.w	r2, [r6, #652]	; 0x28c
 800c55c:	921b      	str	r2, [sp, #108]	; 0x6c
            sel_background_color = style->selected_hover;
 800c55e:	f8d6 2284 	ldr.w	r2, [r6, #644]	; 0x284
 800c562:	921a      	str	r2, [sp, #104]	; 0x68
            cursor_color = style->cursor_hover;
 800c564:	f8d6 2268 	ldr.w	r2, [r6, #616]	; 0x268
 800c568:	921c      	str	r2, [sp, #112]	; 0x70
            cursor_text_color = style->cursor_text_hover;
 800c56a:	f896 4270 	ldrb.w	r4, [r6, #624]	; 0x270
 800c56e:	f896 2271 	ldrb.w	r2, [r6, #625]	; 0x271
 800c572:	9205      	str	r2, [sp, #20]
 800c574:	f896 8272 	ldrb.w	r8, [r6, #626]	; 0x272
 800c578:	f896 7273 	ldrb.w	r7, [r6, #627]	; 0x273
            sel_text_color = style->selected_text_normal;
            sel_background_color = style->selected_normal;
            cursor_color = style->cursor_normal;
            cursor_text_color = style->cursor_text_normal;
        }
        if (background->type == NK_STYLE_ITEM_IMAGE)
 800c57c:	781a      	ldrb	r2, [r3, #0]
 800c57e:	2a01      	cmp	r2, #1
 800c580:	f000 8096 	beq.w	800c6b0 <nk_do_edit+0xae4>
            background_color = nk_rgba(0,0,0,0);
        else
            background_color = background->data.color;
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	9318      	str	r3, [sp, #96]	; 0x60


        if (edit->select_start == edit->select_end) {
 800c588:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c58a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800c58c:	429a      	cmp	r2, r3
 800c58e:	f000 8097 	beq.w	800c6c0 <nk_do_edit+0xaf4>
            nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
                area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
                background_color, text_color, nk_false);
        } else {
            /* edit has selection so draw 1-3 text chunks */
            if (edit->select_start != edit->select_end && selection_begin > 0){
 800c592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c594:	2b00      	cmp	r3, #0
 800c596:	f300 80ba 	bgt.w	800c70e <nk_do_edit+0xb42>
                    area.y - edit->scrollbar.y, 0, begin, (int)(select_begin_ptr - begin),
                    row_height, font, background_color, text_color, nk_false);
            }
            if (edit->select_start != edit->select_end) {
                /* draw selected text */
                NK_ASSERT(select_begin_ptr);
 800c59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 8150 	beq.w	800c842 <nk_do_edit+0xc76>
                if (!select_end_ptr) {
 800c5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 8153 	beq.w	800c850 <nk_do_edit+0xc84>
                    const char *begin = nk_str_get_const(&edit->string);
                    select_end_ptr = begin + nk_str_len_char(&edit->string);
                }
                nk_edit_draw_text(out, style,
                    area.x - edit->scrollbar.x,
                    area.y + selection_offset_start.y - edit->scrollbar.y,
 800c5aa:	ee79 0a0c 	vadd.f32	s1, s18, s24
                nk_edit_draw_text(out, style,
 800c5ae:	edd5 7a15 	vldr	s15, [r5, #84]	; 0x54
 800c5b2:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5bc:	9302      	str	r3, [sp, #8]
 800c5be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	f8cd a000 	str.w	sl, [sp]
 800c5c6:	eef0 1a6a 	vmov.f32	s3, s21
 800c5ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5ce:	1a8b      	subs	r3, r1, r2
 800c5d0:	eeb0 1a4e 	vmov.f32	s2, s28
 800c5d4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c5d8:	ee39 0ac0 	vsub.f32	s0, s19, s0
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4658      	mov	r0, fp
 800c5e0:	f7ff f9ea 	bl	800b9b8 <nk_edit_draw_text>
                    selection_offset_start.x,
                    select_begin_ptr, (int)(select_end_ptr - select_begin_ptr),
                    row_height, font, sel_background_color, sel_text_color, nk_true);
            }
            if ((edit->select_start != edit->select_end &&
 800c5e4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c5e6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	f000 80b7 	beq.w	800c75c <nk_do_edit+0xb90>
 800c5ee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800c5f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	f340 81aa 	ble.w	800c94c <nk_do_edit+0xd80>
                selection_end < edit->string.len))
            {
                /* draw unselected text after selected text */
                const char *begin = select_end_ptr;
                const char *end = nk_str_get_const(&edit->string) +
 800c5f8:	4648      	mov	r0, r9
 800c5fa:	f004 fda7 	bl	801114c <nk_str_get_const>
 800c5fe:	9006      	str	r0, [sp, #24]
                                    nk_str_len_char(&edit->string);
 800c600:	4648      	mov	r0, r9
 800c602:	f004 fe81 	bl	8011308 <nk_str_len_char>
                const char *end = nk_str_get_const(&edit->string) +
 800c606:	9b06      	ldr	r3, [sp, #24]
 800c608:	4403      	add	r3, r0
                NK_ASSERT(select_end_ptr);
 800c60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	f000 812a 	beq.w	800c866 <nk_do_edit+0xc9a>
                nk_edit_draw_text(out, style,
                    area.x - edit->scrollbar.x,
                    area.y + selection_offset_end.y - edit->scrollbar.y,
 800c612:	ee79 0a0f 	vadd.f32	s1, s18, s30
                nk_edit_draw_text(out, style,
 800c616:	edd5 7a15 	vldr	s15, [r5, #84]	; 0x54
 800c61a:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 800c61e:	2201      	movs	r2, #1
 800c620:	9203      	str	r2, [sp, #12]
 800c622:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c624:	9202      	str	r2, [sp, #8]
 800c626:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c628:	9201      	str	r2, [sp, #4]
 800c62a:	f8cd a000 	str.w	sl, [sp]
 800c62e:	eef0 1a6a 	vmov.f32	s3, s21
 800c632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c634:	1a9b      	subs	r3, r3, r2
 800c636:	eeb0 1a6f 	vmov.f32	s2, s31
 800c63a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c63e:	ee39 0ac0 	vsub.f32	s0, s19, s0
 800c642:	4631      	mov	r1, r6
 800c644:	4658      	mov	r0, fp
 800c646:	f7ff f9b7 	bl	800b9b8 <nk_edit_draw_text>
 800c64a:	e05a      	b.n	800c702 <nk_do_edit+0xb36>
        } else if (*state & NK_WIDGET_STATE_HOVER) {
 800c64c:	f013 0f10 	tst.w	r3, #16
 800c650:	d017      	beq.n	800c682 <nk_do_edit+0xab6>
            background = &style->hover;
 800c652:	f106 031c 	add.w	r3, r6, #28
            text_color = style->text_hover;
 800c656:	f8d6 2278 	ldr.w	r2, [r6, #632]	; 0x278
 800c65a:	9219      	str	r2, [sp, #100]	; 0x64
            sel_text_color = style->selected_text_hover;
 800c65c:	f8d6 228c 	ldr.w	r2, [r6, #652]	; 0x28c
 800c660:	921b      	str	r2, [sp, #108]	; 0x6c
            sel_background_color = style->selected_hover;
 800c662:	f8d6 2284 	ldr.w	r2, [r6, #644]	; 0x284
 800c666:	921a      	str	r2, [sp, #104]	; 0x68
            cursor_text_color = style->cursor_text_hover;
 800c668:	f896 4270 	ldrb.w	r4, [r6, #624]	; 0x270
 800c66c:	f896 2271 	ldrb.w	r2, [r6, #625]	; 0x271
 800c670:	9205      	str	r2, [sp, #20]
 800c672:	f896 8272 	ldrb.w	r8, [r6, #626]	; 0x272
 800c676:	f896 7273 	ldrb.w	r7, [r6, #627]	; 0x273
            cursor_color = style->cursor_hover;
 800c67a:	f8d6 2268 	ldr.w	r2, [r6, #616]	; 0x268
 800c67e:	921c      	str	r2, [sp, #112]	; 0x70
 800c680:	e77c      	b.n	800c57c <nk_do_edit+0x9b0>
            background = &style->normal;
 800c682:	4633      	mov	r3, r6
            text_color = style->text_normal;
 800c684:	f8d6 2274 	ldr.w	r2, [r6, #628]	; 0x274
 800c688:	9219      	str	r2, [sp, #100]	; 0x64
            sel_text_color = style->selected_text_normal;
 800c68a:	f8d6 2288 	ldr.w	r2, [r6, #648]	; 0x288
 800c68e:	921b      	str	r2, [sp, #108]	; 0x6c
            sel_background_color = style->selected_normal;
 800c690:	f8d6 2280 	ldr.w	r2, [r6, #640]	; 0x280
 800c694:	921a      	str	r2, [sp, #104]	; 0x68
            cursor_color = style->cursor_normal;
 800c696:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 800c69a:	921c      	str	r2, [sp, #112]	; 0x70
            cursor_text_color = style->cursor_text_normal;
 800c69c:	f896 426c 	ldrb.w	r4, [r6, #620]	; 0x26c
 800c6a0:	f896 226d 	ldrb.w	r2, [r6, #621]	; 0x26d
 800c6a4:	9205      	str	r2, [sp, #20]
 800c6a6:	f896 826e 	ldrb.w	r8, [r6, #622]	; 0x26e
 800c6aa:	f896 726f 	ldrb.w	r7, [r6, #623]	; 0x26f
 800c6ae:	e765      	b.n	800c57c <nk_do_edit+0x9b0>
            background_color = nk_rgba(0,0,0,0);
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fd fbb0 	bl	8009e1c <nk_rgba>
 800c6bc:	9018      	str	r0, [sp, #96]	; 0x60
 800c6be:	e763      	b.n	800c588 <nk_do_edit+0x9bc>
            const char *begin = nk_str_get_const(&edit->string);
 800c6c0:	4648      	mov	r0, r9
 800c6c2:	f004 fd43 	bl	801114c <nk_str_get_const>
 800c6c6:	9006      	str	r0, [sp, #24]
            int l = nk_str_len_char(&edit->string);
 800c6c8:	4648      	mov	r0, r9
 800c6ca:	f004 fe1d 	bl	8011308 <nk_str_len_char>
 800c6ce:	4603      	mov	r3, r0
            nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 800c6d0:	edd5 0a15 	vldr	s1, [r5, #84]	; 0x54
 800c6d4:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 800c6d8:	2200      	movs	r2, #0
 800c6da:	9203      	str	r2, [sp, #12]
 800c6dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c6de:	9202      	str	r2, [sp, #8]
 800c6e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6e2:	9201      	str	r2, [sp, #4]
 800c6e4:	f8cd a000 	str.w	sl, [sp]
 800c6e8:	eef0 1a6a 	vmov.f32	s3, s21
 800c6ec:	9a06      	ldr	r2, [sp, #24]
 800c6ee:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 800c9ac <nk_do_edit+0xde0>
 800c6f2:	ee79 0a60 	vsub.f32	s1, s18, s1
 800c6f6:	ee39 0ac0 	vsub.f32	s0, s19, s0
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4658      	mov	r0, fp
 800c6fe:	f7ff f95b 	bl	800b9b8 <nk_edit_draw_text>
                    background_color, text_color, nk_true);
            }
        }

        /* cursor */
        if (edit->select_start == edit->select_end)
 800c702:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c704:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800c706:	429a      	cmp	r2, r3
 800c708:	f040 8120 	bne.w	800c94c <nk_do_edit+0xd80>
 800c70c:	e026      	b.n	800c75c <nk_do_edit+0xb90>
                const char *begin = nk_str_get_const(&edit->string);
 800c70e:	4648      	mov	r0, r9
 800c710:	f004 fd1c 	bl	801114c <nk_str_get_const>
 800c714:	4602      	mov	r2, r0
                NK_ASSERT(select_begin_ptr);
 800c716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f000 808b 	beq.w	800c834 <nk_do_edit+0xc68>
                nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 800c71e:	edd5 0a15 	vldr	s1, [r5, #84]	; 0x54
 800c722:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 800c726:	2300      	movs	r3, #0
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c72c:	9302      	str	r3, [sp, #8]
 800c72e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	f8cd a000 	str.w	sl, [sp]
 800c736:	eef0 1a6a 	vmov.f32	s3, s21
 800c73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c73c:	1a1b      	subs	r3, r3, r0
 800c73e:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800c9ac <nk_do_edit+0xde0>
 800c742:	ee79 0a60 	vsub.f32	s1, s18, s1
 800c746:	ee39 0ac0 	vsub.f32	s0, s19, s0
 800c74a:	4631      	mov	r1, r6
 800c74c:	4658      	mov	r0, fp
 800c74e:	f7ff f933 	bl	800b9b8 <nk_edit_draw_text>
            if (edit->select_start != edit->select_end) {
 800c752:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800c754:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800c756:	429a      	cmp	r2, r3
 800c758:	f47f af23 	bne.w	800c5a2 <nk_do_edit+0x9d6>
        {
            if (edit->cursor >= nk_str_len(&edit->string) ||
 800c75c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c75e:	9306      	str	r3, [sp, #24]
 800c760:	4648      	mov	r0, r9
 800c762:	f004 fdb9 	bl	80112d8 <nk_str_len>
 800c766:	9b06      	ldr	r3, [sp, #24]
 800c768:	4283      	cmp	r3, r0
 800c76a:	f280 8083 	bge.w	800c874 <nk_do_edit+0xca8>
 800c76e:	9b08      	ldr	r3, [sp, #32]
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 80a8 	beq.w	800c8c6 <nk_do_edit+0xcfa>
                (cursor_ptr && *cursor_ptr == '\n')) {
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	2b0a      	cmp	r3, #10
 800c77a:	d07b      	beq.n	800c874 <nk_do_edit+0xca8>
                struct nk_rect label;
                struct nk_text txt;

                nk_rune unicode;
                NK_ASSERT(cursor_ptr);
                glyph_len = nk_utf_decode(cursor_ptr, &unicode, 4);
 800c77c:	2204      	movs	r2, #4
 800c77e:	a91d      	add	r1, sp, #116	; 0x74
 800c780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c784:	4648      	mov	r0, r9
 800c786:	f008 f98b 	bl	8014aa0 <nk_utf_decode>
 800c78a:	4606      	mov	r6, r0

                label.x = area.x + cursor_pos.x - edit->scrollbar.x;
 800c78c:	ee79 7aac 	vadd.f32	s15, s19, s25
 800c790:	ed95 7a14 	vldr	s14, [r5, #80]	; 0x50
 800c794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c798:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
                label.y = area.y + cursor_pos.y - edit->scrollbar.y;
 800c79c:	ee79 7a0d 	vadd.f32	s15, s18, s26
 800c7a0:	ed95 7a15 	vldr	s14, [r5, #84]	; 0x54
 800c7a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7a8:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
                label.w = font->width(font->userdata, font->height, cursor_ptr, glyph_len);
 800c7ac:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	ed9a 0a01 	vldr	s0, [sl, #4]
 800c7b8:	f8da 0000 	ldr.w	r0, [sl]
 800c7bc:	4798      	blx	r3
 800c7be:	ed8d 0a28 	vstr	s0, [sp, #160]	; 0xa0
                label.h = row_height;
 800c7c2:	edcd aa29 	vstr	s21, [sp, #164]	; 0xa4

                txt.padding = nk_vec2(0,0);
 800c7c6:	ed9f 8a79 	vldr	s16, [pc, #484]	; 800c9ac <nk_do_edit+0xde0>
 800c7ca:	eef0 0a48 	vmov.f32	s1, s16
 800c7ce:	eeb0 0a48 	vmov.f32	s0, s16
 800c7d2:	f001 f839 	bl	800d848 <nk_vec2>
 800c7d6:	ed8d 0a2a 	vstr	s0, [sp, #168]	; 0xa8
 800c7da:	edcd 0a2b 	vstr	s1, [sp, #172]	; 0xac
                txt.background = cursor_color;;
 800c7de:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7e0:	912c      	str	r1, [sp, #176]	; 0xb0
                txt.text = cursor_text_color;
 800c7e2:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
 800c7e6:	9b05      	ldr	r3, [sp, #20]
 800c7e8:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
 800c7ec:	f88d 80b6 	strb.w	r8, [sp, #182]	; 0xb6
 800c7f0:	f88d 70b7 	strb.w	r7, [sp, #183]	; 0xb7
                nk_fill_rect(out, label, 0, cursor_color);
 800c7f4:	eeb0 2a48 	vmov.f32	s4, s16
 800c7f8:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
 800c7fc:	eddd 0a27 	vldr	s1, [sp, #156]	; 0x9c
 800c800:	ed9d 1a28 	vldr	s2, [sp, #160]	; 0xa0
 800c804:	eddd 1a29 	vldr	s3, [sp, #164]	; 0xa4
 800c808:	4658      	mov	r0, fp
 800c80a:	f7fe fc25 	bl	800b058 <nk_fill_rect>
                nk_widget_text(out, label, cursor_ptr, glyph_len, &txt, NK_TEXT_LEFT, font);
 800c80e:	f8cd a004 	str.w	sl, [sp, #4]
 800c812:	2311      	movs	r3, #17
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	ab2a      	add	r3, sp, #168	; 0xa8
 800c818:	4632      	mov	r2, r6
 800c81a:	4649      	mov	r1, r9
 800c81c:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
 800c820:	eddd 0a27 	vldr	s1, [sp, #156]	; 0x9c
 800c824:	ed9d 1a28 	vldr	s2, [sp, #160]	; 0xa0
 800c828:	eddd 1a29 	vldr	s3, [sp, #164]	; 0xa4
 800c82c:	4658      	mov	r0, fp
 800c82e:	f006 fa01 	bl	8012c34 <nk_widget_text>
 800c832:	e08b      	b.n	800c94c <nk_do_edit+0xd80>
                NK_ASSERT(select_begin_ptr);
 800c834:	4b58      	ldr	r3, [pc, #352]	; (800c998 <nk_do_edit+0xdcc>)
 800c836:	4a59      	ldr	r2, [pc, #356]	; (800c99c <nk_do_edit+0xdd0>)
 800c838:	f240 2133 	movw	r1, #563	; 0x233
 800c83c:	4858      	ldr	r0, [pc, #352]	; (800c9a0 <nk_do_edit+0xdd4>)
 800c83e:	f009 fe85 	bl	801654c <__assert_func>
                NK_ASSERT(select_begin_ptr);
 800c842:	4b55      	ldr	r3, [pc, #340]	; (800c998 <nk_do_edit+0xdcc>)
 800c844:	4a55      	ldr	r2, [pc, #340]	; (800c99c <nk_do_edit+0xdd0>)
 800c846:	f240 213a 	movw	r1, #570	; 0x23a
 800c84a:	4855      	ldr	r0, [pc, #340]	; (800c9a0 <nk_do_edit+0xdd4>)
 800c84c:	f009 fe7e 	bl	801654c <__assert_func>
                    const char *begin = nk_str_get_const(&edit->string);
 800c850:	4648      	mov	r0, r9
 800c852:	f004 fc7b 	bl	801114c <nk_str_get_const>
 800c856:	9006      	str	r0, [sp, #24]
                    select_end_ptr = begin + nk_str_len_char(&edit->string);
 800c858:	4648      	mov	r0, r9
 800c85a:	f004 fd55 	bl	8011308 <nk_str_len_char>
 800c85e:	9b06      	ldr	r3, [sp, #24]
 800c860:	4403      	add	r3, r0
 800c862:	9309      	str	r3, [sp, #36]	; 0x24
 800c864:	e6a1      	b.n	800c5aa <nk_do_edit+0x9de>
                NK_ASSERT(select_end_ptr);
 800c866:	4b4f      	ldr	r3, [pc, #316]	; (800c9a4 <nk_do_edit+0xdd8>)
 800c868:	4a4c      	ldr	r2, [pc, #304]	; (800c99c <nk_do_edit+0xdd0>)
 800c86a:	f240 214d 	movw	r1, #589	; 0x24d
 800c86e:	484c      	ldr	r0, [pc, #304]	; (800c9a0 <nk_do_edit+0xdd4>)
 800c870:	f009 fe6c 	bl	801654c <__assert_func>
                cursor.w = style->cursor_size;
 800c874:	ed96 1aa6 	vldr	s2, [r6, #664]	; 0x298
 800c878:	ed8d 1a2c 	vstr	s2, [sp, #176]	; 0xb0
                cursor.h = font->height;
 800c87c:	edda 1a01 	vldr	s3, [sl, #4]
                cursor.x = area.x + cursor_pos.x - edit->scrollbar.x;
 800c880:	ee39 0aac 	vadd.f32	s0, s19, s25
 800c884:	edd5 7a14 	vldr	s15, [r5, #80]	; 0x50
 800c888:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c88c:	ed8d 0a2a 	vstr	s0, [sp, #168]	; 0xa8
                cursor.y = area.y + cursor_pos.y + row_height/2.0f - cursor.h/2.0f;
 800c890:	ee79 0a0d 	vadd.f32	s1, s18, s26
 800c894:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c898:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800c89c:	ee70 0aaa 	vadd.f32	s1, s1, s21
 800c8a0:	ee61 7aa7 	vmul.f32	s15, s3, s15
 800c8a4:	ee70 0ae7 	vsub.f32	s1, s1, s15
                cursor.y -= edit->scrollbar.y;
 800c8a8:	edd5 7a15 	vldr	s15, [r5, #84]	; 0x54
 800c8ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
                nk_fill_rect(out, cursor, 0, cursor_color);
 800c8b0:	edcd 0a2b 	vstr	s1, [sp, #172]	; 0xac
 800c8b4:	edcd 1a2d 	vstr	s3, [sp, #180]	; 0xb4
 800c8b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c8ba:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 800c9ac <nk_do_edit+0xde0>
 800c8be:	4658      	mov	r0, fp
 800c8c0:	f7fe fbca 	bl	800b058 <nk_fill_rect>
                (cursor_ptr && *cursor_ptr == '\n')) {
 800c8c4:	e042      	b.n	800c94c <nk_do_edit+0xd80>
                NK_ASSERT(cursor_ptr);
 800c8c6:	4b38      	ldr	r3, [pc, #224]	; (800c9a8 <nk_do_edit+0xddc>)
 800c8c8:	4a34      	ldr	r2, [pc, #208]	; (800c99c <nk_do_edit+0xdd0>)
 800c8ca:	f240 216b 	movw	r1, #619	; 0x26b
 800c8ce:	4834      	ldr	r0, [pc, #208]	; (800c9a0 <nk_do_edit+0xdd4>)
 800c8d0:	f009 fe3c 	bl	801654c <__assert_func>
            }
        }}
    } else {
        /* not active so just draw text */
        int l = nk_str_len_char(&edit->string);
 800c8d4:	4648      	mov	r0, r9
 800c8d6:	f004 fd17 	bl	8011308 <nk_str_len_char>
 800c8da:	4604      	mov	r4, r0
        const char *begin = nk_str_get_const(&edit->string);
 800c8dc:	4648      	mov	r0, r9
 800c8de:	f004 fc35 	bl	801114c <nk_str_get_const>
 800c8e2:	4607      	mov	r7, r0

        const struct nk_style_item *background;
        struct nk_color background_color;
        struct nk_color text_color;
        nk_push_scissor(out, clip);
 800c8e4:	ed9d 0a2e 	vldr	s0, [sp, #184]	; 0xb8
 800c8e8:	eddd 0a2f 	vldr	s1, [sp, #188]	; 0xbc
 800c8ec:	ed9d 1a30 	vldr	s2, [sp, #192]	; 0xc0
 800c8f0:	eddd 1a31 	vldr	s3, [sp, #196]	; 0xc4
 800c8f4:	4658      	mov	r0, fp
 800c8f6:	f7fe facf 	bl	800ae98 <nk_push_scissor>
        if (*state & NK_WIDGET_STATE_ACTIVED) {
 800c8fa:	9b07      	ldr	r3, [sp, #28]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f013 0f20 	tst.w	r3, #32
 800c902:	d034      	beq.n	800c96e <nk_do_edit+0xda2>
            background = &style->active;
 800c904:	f106 0338 	add.w	r3, r6, #56	; 0x38
            text_color = style->text_active;
 800c908:	f8d6 227c 	ldr.w	r2, [r6, #636]	; 0x27c
 800c90c:	922a      	str	r2, [sp, #168]	; 0xa8
            text_color = style->text_hover;
        } else {
            background = &style->normal;
            text_color = style->text_normal;
        }
        if (background->type == NK_STYLE_ITEM_IMAGE)
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	2a01      	cmp	r2, #1
 800c912:	d038      	beq.n	800c986 <nk_do_edit+0xdba>
            background_color = nk_rgba(0,0,0,0);
        else
            background_color = background->data.color;
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	9326      	str	r3, [sp, #152]	; 0x98
        nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 800c918:	edd5 0a15 	vldr	s1, [r5, #84]	; 0x54
 800c91c:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 800c920:	2300      	movs	r3, #0
 800c922:	9303      	str	r3, [sp, #12]
 800c924:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c926:	9302      	str	r3, [sp, #8]
 800c928:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c92a:	9301      	str	r3, [sp, #4]
 800c92c:	f8cd a000 	str.w	sl, [sp]
 800c930:	eef0 1a6a 	vmov.f32	s3, s21
 800c934:	4623      	mov	r3, r4
 800c936:	463a      	mov	r2, r7
 800c938:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800c9ac <nk_do_edit+0xde0>
 800c93c:	ee79 0a60 	vsub.f32	s1, s18, s1
 800c940:	ee39 0ac0 	vsub.f32	s0, s19, s0
 800c944:	4631      	mov	r1, r6
 800c946:	4658      	mov	r0, fp
 800c948:	f7ff f836 	bl	800b9b8 <nk_edit_draw_text>
            area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
            background_color, text_color, nk_false);
    }
    nk_push_scissor(out, old_clip);}
 800c94c:	ed9d 0a32 	vldr	s0, [sp, #200]	; 0xc8
 800c950:	eddd 0a33 	vldr	s1, [sp, #204]	; 0xcc
 800c954:	ed9d 1a34 	vldr	s2, [sp, #208]	; 0xd0
 800c958:	eddd 1a35 	vldr	s3, [sp, #212]	; 0xd4
 800c95c:	4658      	mov	r0, fp
 800c95e:	f7fe fa9b 	bl	800ae98 <nk_push_scissor>
    return ret;
}
 800c962:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c964:	b03b      	add	sp, #236	; 0xec
 800c966:	ecbd 8b10 	vpop	{d8-d15}
 800c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (*state & NK_WIDGET_STATE_HOVER) {
 800c96e:	f013 0f10 	tst.w	r3, #16
            background = &style->hover;
 800c972:	bf19      	ittee	ne
 800c974:	f106 031c 	addne.w	r3, r6, #28
            text_color = style->text_hover;
 800c978:	f8d6 2278 	ldrne.w	r2, [r6, #632]	; 0x278
            background = &style->normal;
 800c97c:	4633      	moveq	r3, r6
            text_color = style->text_normal;
 800c97e:	f8d6 2274 	ldreq.w	r2, [r6, #628]	; 0x274
 800c982:	922a      	str	r2, [sp, #168]	; 0xa8
 800c984:	e7c3      	b.n	800c90e <nk_do_edit+0xd42>
            background_color = nk_rgba(0,0,0,0);
 800c986:	2300      	movs	r3, #0
 800c988:	461a      	mov	r2, r3
 800c98a:	4619      	mov	r1, r3
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fd fa45 	bl	8009e1c <nk_rgba>
 800c992:	9026      	str	r0, [sp, #152]	; 0x98
 800c994:	e7c0      	b.n	800c918 <nk_do_edit+0xd4c>
 800c996:	bf00      	nop
 800c998:	0801b120 	.word	0x0801b120
 800c99c:	0801b150 	.word	0x0801b150
 800c9a0:	0801b0f8 	.word	0x0801b0f8
 800c9a4:	0801b134 	.word	0x0801b134
 800c9a8:	0801b144 	.word	0x0801b144
 800c9ac:	00000000 	.word	0x00000000
    if (prev_state != edit->active)
 800c9b0:	9b05      	ldr	r3, [sp, #20]
 800c9b2:	4543      	cmp	r3, r8
 800c9b4:	d05a      	beq.n	800ca6c <nk_do_edit+0xea0>
    ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;
 800c9b6:	2301      	movs	r3, #1
        ret |= (edit->active) ? NK_EDIT_ACTIVATED: NK_EDIT_DEACTIVATED;
 800c9b8:	2204      	movs	r2, #4
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	930b      	str	r3, [sp, #44]	; 0x2c
    if (edit->active && in)
 800c9be:	9b05      	ldr	r3, [sp, #20]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d05a      	beq.n	800ca7a <nk_do_edit+0xeae>
 800c9c4:	2f00      	cmp	r7, #0
 800c9c6:	f43f abd0 	beq.w	800c16a <nk_do_edit+0x59e>
        int shift_mod = in->keyboard.keys[NK_KEY_SHIFT].down;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	930a      	str	r3, [sp, #40]	; 0x28
        const float mouse_x = (in->mouse.pos.x - area.x) + edit->scrollbar.x;
 800c9ce:	edd7 ba51 	vldr	s23, [r7, #324]	; 0x144
 800c9d2:	ed95 da14 	vldr	s26, [r5, #80]	; 0x50
        const float mouse_y = (in->mouse.pos.y - area.y) + edit->scrollbar.y;
 800c9d6:	ed97 ca52 	vldr	s24, [r7, #328]	; 0x148
 800c9da:	edd5 ca15 	vldr	s25, [r5, #84]	; 0x54
        is_hovered = (char)nk_input_is_mouse_hovering_rect(in, area);
 800c9de:	edcd 9a36 	vstr	s19, [sp, #216]	; 0xd8
 800c9e2:	ed8d 9a37 	vstr	s18, [sp, #220]	; 0xdc
 800c9e6:	ed8d 8a38 	vstr	s16, [sp, #224]	; 0xe0
 800c9ea:	edcd 8a39 	vstr	s17, [sp, #228]	; 0xe4
 800c9ee:	eeb0 0a69 	vmov.f32	s0, s19
 800c9f2:	eef0 0a49 	vmov.f32	s1, s18
 800c9f6:	eeb0 1a48 	vmov.f32	s2, s16
 800c9fa:	eef0 1a68 	vmov.f32	s3, s17
 800c9fe:	4638      	mov	r0, r7
 800ca00:	f000 f9a2 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 800ca04:	fa5f f980 	uxtb.w	r9, r0
        if (select_all) {
 800ca08:	2c00      	cmp	r4, #0
 800ca0a:	f47f a9db 	bne.w	800bdc4 <nk_do_edit+0x1f8>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 800ca0e:	f1b9 0f00 	cmp.w	r9, #0
 800ca12:	f43f aa00 	beq.w	800be16 <nk_do_edit+0x24a>
        const float mouse_x = (in->mouse.pos.x - area.x) + edit->scrollbar.x;
 800ca16:	ee7b bae9 	vsub.f32	s23, s23, s19
 800ca1a:	ee3b 0a8d 	vadd.f32	s0, s23, s26
        const float mouse_y = (in->mouse.pos.y - area.y) + edit->scrollbar.y;
 800ca1e:	ee3c ca49 	vsub.f32	s24, s24, s18
 800ca22:	ee7c 0a2c 	vadd.f32	s1, s24, s25
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 800ca26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f43f a9d8 	beq.w	800bde0 <nk_do_edit+0x214>
 800ca30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f47f a9cb 	bne.w	800bdd0 <nk_do_edit+0x204>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 800ca3a:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 800ca3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca46:	d107      	bne.n	800ca58 <nk_do_edit+0xe8c>
            (in->mouse.delta.x != 0.0f || in->mouse.delta.y != 0.0f)) {
 800ca48:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 800ca4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca54:	f43f a9c4 	beq.w	800bde0 <nk_do_edit+0x214>
            nk_textedit_drag(edit, mouse_x, mouse_y, font, row_height);
 800ca58:	eeb0 1a6a 	vmov.f32	s2, s21
 800ca5c:	4651      	mov	r1, sl
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f006 fcfc 	bl	801345c <nk_textedit_drag>
            cursor_follow = nk_true;
 800ca64:	2301      	movs	r3, #1
 800ca66:	9305      	str	r3, [sp, #20]
 800ca68:	f7ff b9d7 	b.w	800be1a <nk_do_edit+0x24e>
    ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca70:	e7a8      	b.n	800c9c4 <nk_do_edit+0xdf8>
    char cursor_follow = 0;
 800ca72:	f8cd 8014 	str.w	r8, [sp, #20]
    ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;
 800ca76:	2302      	movs	r3, #2
 800ca78:	930b      	str	r3, [sp, #44]	; 0x2c
    else nk_widget_state_reset(state);
 800ca7a:	9b07      	ldr	r3, [sp, #28]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f013 0f02 	tst.w	r3, #2
 800ca82:	bf0c      	ite	eq
 800ca84:	2304      	moveq	r3, #4
 800ca86:	2306      	movne	r3, #6
 800ca88:	f7ff ba44 	b.w	800bf14 <nk_do_edit+0x348>
        area.w = NK_MAX(0, area.w - style->scrollbar_size.x);
 800ca8c:	ed1f 8a39 	vldr	s16, [pc, #-228]	; 800c9ac <nk_do_edit+0xde0>
 800ca90:	f7ff b8eb 	b.w	800bc6a <nk_do_edit+0x9e>

0800ca94 <nk_handle_ptr>:
nk_handle_ptr(void *ptr)
{
    nk_handle handle = {0};
    handle.ptr = ptr;
    return handle;
}
 800ca94:	4770      	bx	lr
	...

0800ca98 <nk_input_begin>:
 *                          INPUT
 *
 * ===============================================================*/
NK_API void
nk_input_begin(struct nk_context *ctx)
{
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	ed2d 8b02 	vpush	{d8}
    int i;
    struct nk_input *in;
    NK_ASSERT(ctx);
 800ca9e:	b370      	cbz	r0, 800cafe <nk_input_begin+0x66>
 800caa0:	4604      	mov	r4, r0
    if (!ctx) return;
    in = &ctx->input;
    for (i = 0; i < NK_BUTTON_MAX; ++i)
        in->mouse.buttons[i].clicked = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800caa8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800caac:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800cab0:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138

    in->keyboard.text_len = 0;
 800cab4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
    in->mouse.scroll_delta = nk_vec2(0,0);
 800cab8:	ed9f 8a14 	vldr	s16, [pc, #80]	; 800cb0c <nk_input_begin+0x74>
 800cabc:	eef0 0a48 	vmov.f32	s1, s16
 800cac0:	eeb0 0a48 	vmov.f32	s0, s16
 800cac4:	f000 fec0 	bl	800d848 <nk_vec2>
 800cac8:	ed84 0a57 	vstr	s0, [r4, #348]	; 0x15c
 800cacc:	edc4 0a58 	vstr	s1, [r4, #352]	; 0x160
    in->mouse.prev.x = in->mouse.pos.x;
 800cad0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800cad4:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    in->mouse.prev.y = in->mouse.pos.y;
 800cad8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800cadc:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    in->mouse.delta.x = 0;
 800cae0:	ed84 8a55 	vstr	s16, [r4, #340]	; 0x154
    in->mouse.delta.y = 0;
 800cae4:	ed84 8a56 	vstr	s16, [r4, #344]	; 0x158
    for (i = 0; i < NK_KEY_MAX; i++)
 800cae8:	4623      	mov	r3, r4
 800caea:	f104 02f0 	add.w	r2, r4, #240	; 0xf0
        in->keyboard.keys[i].clicked = 0;
 800caee:	2100      	movs	r1, #0
 800caf0:	6059      	str	r1, [r3, #4]
    for (i = 0; i < NK_KEY_MAX; i++)
 800caf2:	3308      	adds	r3, #8
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d1fb      	bne.n	800caf0 <nk_input_begin+0x58>
}
 800caf8:	ecbd 8b02 	vpop	{d8}
 800cafc:	bd10      	pop	{r4, pc}
    NK_ASSERT(ctx);
 800cafe:	4b04      	ldr	r3, [pc, #16]	; (800cb10 <nk_input_begin+0x78>)
 800cb00:	4a04      	ldr	r2, [pc, #16]	; (800cb14 <nk_input_begin+0x7c>)
 800cb02:	210e      	movs	r1, #14
 800cb04:	4804      	ldr	r0, [pc, #16]	; (800cb18 <nk_input_begin+0x80>)
 800cb06:	f009 fd21 	bl	801654c <__assert_func>
 800cb0a:	bf00      	nop
 800cb0c:	00000000 	.word	0x00000000
 800cb10:	0801ad58 	.word	0x0801ad58
 800cb14:	0801b1c0 	.word	0x0801b1c0
 800cb18:	0801b174 	.word	0x0801b174

0800cb1c <nk_input_end>:
NK_API void
nk_input_end(struct nk_context *ctx)
{
 800cb1c:	b508      	push	{r3, lr}
    struct nk_input *in;
    NK_ASSERT(ctx);
 800cb1e:	b188      	cbz	r0, 800cb44 <nk_input_end+0x28>
 800cb20:	4603      	mov	r3, r0
    if (!ctx) return;
    in = &ctx->input;
    if (in->mouse.grab)
 800cb22:	f890 2164 	ldrb.w	r2, [r0, #356]	; 0x164
 800cb26:	b112      	cbz	r2, 800cb2e <nk_input_end+0x12>
        in->mouse.grab = 0;
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
    if (in->mouse.ungrab) {
 800cb2e:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
 800cb32:	b132      	cbz	r2, 800cb42 <nk_input_end+0x26>
        in->mouse.grabbed = 0;
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        in->mouse.ungrab = 0;
 800cb3a:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        in->mouse.grab = 0;
 800cb3e:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    }
}
 800cb42:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800cb44:	4b02      	ldr	r3, [pc, #8]	; (800cb50 <nk_input_end+0x34>)
 800cb46:	4a03      	ldr	r2, [pc, #12]	; (800cb54 <nk_input_end+0x38>)
 800cb48:	2121      	movs	r1, #33	; 0x21
 800cb4a:	4803      	ldr	r0, [pc, #12]	; (800cb58 <nk_input_end+0x3c>)
 800cb4c:	f009 fcfe 	bl	801654c <__assert_func>
 800cb50:	0801ad58 	.word	0x0801ad58
 800cb54:	0801b1b0 	.word	0x0801b1b0
 800cb58:	0801b174 	.word	0x0801b174

0800cb5c <nk_input_motion>:
NK_API void
nk_input_motion(struct nk_context *ctx, int x, int y)
{
 800cb5c:	b508      	push	{r3, lr}
    struct nk_input *in;
    NK_ASSERT(ctx);
 800cb5e:	b1c0      	cbz	r0, 800cb92 <nk_input_motion+0x36>
 800cb60:	ee07 1a10 	vmov	s14, r1
 800cb64:	ee07 2a90 	vmov	s15, r2
    if (!ctx) return;
    in = &ctx->input;
    in->mouse.pos.x = (float)x;
 800cb68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb6c:	ed80 7a51 	vstr	s14, [r0, #324]	; 0x144
    in->mouse.pos.y = (float)y;
 800cb70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb74:	edc0 7a52 	vstr	s15, [r0, #328]	; 0x148
    in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;
 800cb78:	edd0 6a53 	vldr	s13, [r0, #332]	; 0x14c
 800cb7c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cb80:	ed80 7a55 	vstr	s14, [r0, #340]	; 0x154
    in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;
 800cb84:	ed90 7a54 	vldr	s14, [r0, #336]	; 0x150
 800cb88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb8c:	edc0 7a56 	vstr	s15, [r0, #344]	; 0x158
}
 800cb90:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800cb92:	4b03      	ldr	r3, [pc, #12]	; (800cba0 <nk_input_motion+0x44>)
 800cb94:	4a03      	ldr	r2, [pc, #12]	; (800cba4 <nk_input_motion+0x48>)
 800cb96:	2130      	movs	r1, #48	; 0x30
 800cb98:	4803      	ldr	r0, [pc, #12]	; (800cba8 <nk_input_motion+0x4c>)
 800cb9a:	f009 fcd7 	bl	801654c <__assert_func>
 800cb9e:	bf00      	nop
 800cba0:	0801ad58 	.word	0x0801ad58
 800cba4:	0801b1a0 	.word	0x0801b1a0
 800cba8:	0801b174 	.word	0x0801b174

0800cbac <nk_input_button>:
#endif
    in->keyboard.keys[key].down = down;
}
NK_API void
nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, nk_bool down)
{
 800cbac:	b510      	push	{r4, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	9200      	str	r2, [sp, #0]
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	9c04      	ldr	r4, [sp, #16]
    struct nk_mouse_button *btn;
    struct nk_input *in;
    NK_ASSERT(ctx);
 800cbb6:	b1d0      	cbz	r0, 800cbee <nk_input_button+0x42>
    if (!ctx) return;
    in = &ctx->input;
    if (in->mouse.buttons[id].down == down) return;
 800cbb8:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800cbbc:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
 800cbc0:	42a0      	cmp	r0, r4
 800cbc2:	d012      	beq.n	800cbea <nk_input_button+0x3e>

    btn = &in->mouse.buttons[id];
    btn->clicked_pos.x = (float)x;
 800cbc4:	eddd 7a00 	vldr	s15, [sp]
 800cbc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbcc:	edc2 7a43 	vstr	s15, [r2, #268]	; 0x10c
    btn->clicked_pos.y = (float)y;
 800cbd0:	eddd 7a01 	vldr	s15, [sp, #4]
 800cbd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbd8:	edc2 7a44 	vstr	s15, [r2, #272]	; 0x110
    btn->down = down;
 800cbdc:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    btn->clicked++;
 800cbe0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    {
        in->mouse.down_pos.x = btn->clicked_pos.x;
        in->mouse.down_pos.y = btn->clicked_pos.y;
    }
#endif
}
 800cbea:	b002      	add	sp, #8
 800cbec:	bd10      	pop	{r4, pc}
    NK_ASSERT(ctx);
 800cbee:	4b03      	ldr	r3, [pc, #12]	; (800cbfc <nk_input_button+0x50>)
 800cbf0:	4a03      	ldr	r2, [pc, #12]	; (800cc00 <nk_input_button+0x54>)
 800cbf2:	214c      	movs	r1, #76	; 0x4c
 800cbf4:	4803      	ldr	r0, [pc, #12]	; (800cc04 <nk_input_button+0x58>)
 800cbf6:	f009 fca9 	bl	801654c <__assert_func>
 800cbfa:	bf00      	nop
 800cbfc:	0801ad58 	.word	0x0801ad58
 800cc00:	0801b190 	.word	0x0801b190
 800cc04:	0801b174 	.word	0x0801b174

0800cc08 <nk_input_has_mouse_click_in_rect>:
    return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 800cc08:	b084      	sub	sp, #16
 800cc0a:	ed8d 0a00 	vstr	s0, [sp]
 800cc0e:	edcd 0a01 	vstr	s1, [sp, #4]
 800cc12:	ed8d 1a02 	vstr	s2, [sp, #8]
 800cc16:	edcd 1a03 	vstr	s3, [sp, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 800cc1a:	b300      	cbz	r0, 800cc5e <nk_input_has_mouse_click_in_rect+0x56>
    btn = &i->mouse.buttons[id];
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 800cc1c:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800cc20:	ed92 7a43 	vldr	s14, [r2, #268]	; 0x10c
 800cc24:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800cc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2c:	db19      	blt.n	800cc62 <nk_input_has_mouse_click_in_rect+0x5a>
 800cc2e:	ee70 7a01 	vadd.f32	s15, s0, s2
 800cc32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3a:	d515      	bpl.n	800cc68 <nk_input_has_mouse_click_in_rect+0x60>
 800cc3c:	ed92 7a44 	vldr	s14, [r2, #272]	; 0x110
 800cc40:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc48:	db10      	blt.n	800cc6c <nk_input_has_mouse_click_in_rect+0x64>
 800cc4a:	ee70 7aa1 	vadd.f32	s15, s1, s3
 800cc4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc56:	bf4c      	ite	mi
 800cc58:	2001      	movmi	r0, #1
 800cc5a:	2000      	movpl	r0, #0
 800cc5c:	e002      	b.n	800cc64 <nk_input_has_mouse_click_in_rect+0x5c>
    if (!i) return nk_false;
 800cc5e:	2000      	movs	r0, #0
 800cc60:	e000      	b.n	800cc64 <nk_input_has_mouse_click_in_rect+0x5c>
        return nk_false;
 800cc62:	2000      	movs	r0, #0
    return nk_true;
}
 800cc64:	b004      	add	sp, #16
 800cc66:	4770      	bx	lr
        return nk_false;
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e7fb      	b.n	800cc64 <nk_input_has_mouse_click_in_rect+0x5c>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e7f9      	b.n	800cc64 <nk_input_has_mouse_click_in_rect+0x5c>

0800cc70 <nk_input_has_mouse_click_in_button_rect>:
NK_API nk_bool
nk_input_has_mouse_click_in_button_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 800cc70:	b084      	sub	sp, #16
 800cc72:	ed8d 0a00 	vstr	s0, [sp]
 800cc76:	edcd 0a01 	vstr	s1, [sp, #4]
 800cc7a:	ed8d 1a02 	vstr	s2, [sp, #8]
 800cc7e:	edcd 1a03 	vstr	s3, [sp, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 800cc82:	b300      	cbz	r0, 800ccc6 <nk_input_has_mouse_click_in_button_rect+0x56>
    btn = &i->mouse.buttons[id];
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h)
        || !NK_INBOX(i->mouse.down_pos.x,i->mouse.down_pos.y,b.x,b.y,b.w,b.h))
#else
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 800cc84:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800cc88:	ed92 7a43 	vldr	s14, [r2, #268]	; 0x10c
 800cc8c:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	db19      	blt.n	800ccca <nk_input_has_mouse_click_in_button_rect+0x5a>
 800cc96:	ee70 7a01 	vadd.f32	s15, s0, s2
 800cc9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca2:	d515      	bpl.n	800ccd0 <nk_input_has_mouse_click_in_button_rect+0x60>
 800cca4:	ed92 7a44 	vldr	s14, [r2, #272]	; 0x110
 800cca8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb0:	db10      	blt.n	800ccd4 <nk_input_has_mouse_click_in_button_rect+0x64>
 800ccb2:	ee70 7aa1 	vadd.f32	s15, s1, s3
 800ccb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbe:	bf4c      	ite	mi
 800ccc0:	2001      	movmi	r0, #1
 800ccc2:	2000      	movpl	r0, #0
 800ccc4:	e002      	b.n	800cccc <nk_input_has_mouse_click_in_button_rect+0x5c>
    if (!i) return nk_false;
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	e000      	b.n	800cccc <nk_input_has_mouse_click_in_button_rect+0x5c>
#endif
        return nk_false;
 800ccca:	2000      	movs	r0, #0
    return nk_true;
}
 800cccc:	b004      	add	sp, #16
 800ccce:	4770      	bx	lr
        return nk_false;
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	e7fb      	b.n	800cccc <nk_input_has_mouse_click_in_button_rect+0x5c>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e7f9      	b.n	800cccc <nk_input_has_mouse_click_in_button_rect+0x5c>

0800ccd8 <nk_input_has_mouse_click_down_in_rect>:
NK_API nk_bool
nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	ed8d 0a00 	vstr	s0, [sp]
 800cce0:	edcd 0a01 	vstr	s1, [sp, #4]
 800cce4:	ed8d 1a02 	vstr	s2, [sp, #8]
 800cce8:	edcd 1a03 	vstr	s3, [sp, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 800ccec:	b178      	cbz	r0, 800cd0e <nk_input_has_mouse_click_down_in_rect+0x36>
 800ccee:	460c      	mov	r4, r1
 800ccf0:	4615      	mov	r5, r2
 800ccf2:	4606      	mov	r6, r0
    btn = &i->mouse.buttons[id];
    return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);
 800ccf4:	f7ff ff88 	bl	800cc08 <nk_input_has_mouse_click_in_rect>
 800ccf8:	b138      	cbz	r0, 800cd0a <nk_input_has_mouse_click_down_in_rect+0x32>
 800ccfa:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800ccfe:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
 800cd02:	42a8      	cmp	r0, r5
 800cd04:	bf14      	ite	ne
 800cd06:	2000      	movne	r0, #0
 800cd08:	2001      	moveq	r0, #1
}
 800cd0a:	b004      	add	sp, #16
 800cd0c:	bd70      	pop	{r4, r5, r6, pc}
    if (!i) return nk_false;
 800cd0e:	2000      	movs	r0, #0
 800cd10:	e7fb      	b.n	800cd0a <nk_input_has_mouse_click_down_in_rect+0x32>

0800cd12 <nk_input_is_mouse_click_down_in_rect>:
            btn->clicked) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_is_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 800cd12:	b530      	push	{r4, r5, lr}
 800cd14:	b085      	sub	sp, #20
 800cd16:	ed8d 0a00 	vstr	s0, [sp]
 800cd1a:	edcd 0a01 	vstr	s1, [sp, #4]
 800cd1e:	ed8d 1a02 	vstr	s2, [sp, #8]
 800cd22:	edcd 1a03 	vstr	s3, [sp, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 800cd26:	b168      	cbz	r0, 800cd44 <nk_input_is_mouse_click_down_in_rect+0x32>
 800cd28:	460c      	mov	r4, r1
 800cd2a:	4605      	mov	r5, r0
    btn = &i->mouse.buttons[id];
    return (nk_input_has_mouse_click_down_in_rect(i, id, b, down) &&
 800cd2c:	f7ff ffd4 	bl	800ccd8 <nk_input_has_mouse_click_down_in_rect>
            btn->clicked) ? nk_true : nk_false;
 800cd30:	b130      	cbz	r0, 800cd40 <nk_input_is_mouse_click_down_in_rect+0x2e>
 800cd32:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 800cd36:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 800cd3a:	3800      	subs	r0, #0
 800cd3c:	bf18      	it	ne
 800cd3e:	2001      	movne	r0, #1
}
 800cd40:	b005      	add	sp, #20
 800cd42:	bd30      	pop	{r4, r5, pc}
    if (!i) return nk_false;
 800cd44:	2000      	movs	r0, #0
 800cd46:	e7fb      	b.n	800cd40 <nk_input_is_mouse_click_down_in_rect+0x2e>

0800cd48 <nk_input_is_mouse_hovering_rect>:
        down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);
    return down;
}
NK_API nk_bool
nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 800cd48:	b084      	sub	sp, #16
 800cd4a:	ed8d 0a00 	vstr	s0, [sp]
 800cd4e:	edcd 0a01 	vstr	s1, [sp, #4]
 800cd52:	ed8d 1a02 	vstr	s2, [sp, #8]
 800cd56:	edcd 1a03 	vstr	s3, [sp, #12]
    if (!i) return nk_false;
 800cd5a:	b1f0      	cbz	r0, 800cd9a <nk_input_is_mouse_hovering_rect+0x52>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 800cd5c:	ed90 7a51 	vldr	s14, [r0, #324]	; 0x144
 800cd60:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800cd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd68:	db19      	blt.n	800cd9e <nk_input_is_mouse_hovering_rect+0x56>
 800cd6a:	ee70 7a01 	vadd.f32	s15, s0, s2
 800cd6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd76:	d515      	bpl.n	800cda4 <nk_input_is_mouse_hovering_rect+0x5c>
 800cd78:	ed90 7a52 	vldr	s14, [r0, #328]	; 0x148
 800cd7c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd84:	db10      	blt.n	800cda8 <nk_input_is_mouse_hovering_rect+0x60>
 800cd86:	ee70 7aa1 	vadd.f32	s15, s1, s3
 800cd8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd92:	bf4c      	ite	mi
 800cd94:	2001      	movmi	r0, #1
 800cd96:	2000      	movpl	r0, #0
 800cd98:	e002      	b.n	800cda0 <nk_input_is_mouse_hovering_rect+0x58>
    if (!i) return nk_false;
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	e000      	b.n	800cda0 <nk_input_is_mouse_hovering_rect+0x58>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 800cd9e:	2000      	movs	r0, #0
}
 800cda0:	b004      	add	sp, #16
 800cda2:	4770      	bx	lr
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 800cda4:	2000      	movs	r0, #0
 800cda6:	e7fb      	b.n	800cda0 <nk_input_is_mouse_hovering_rect+0x58>
 800cda8:	2000      	movs	r0, #0
 800cdaa:	e7f9      	b.n	800cda0 <nk_input_is_mouse_hovering_rect+0x58>

0800cdac <nk_input_is_mouse_prev_hovering_rect>:
NK_API nk_bool
nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 800cdac:	b084      	sub	sp, #16
 800cdae:	ed8d 0a00 	vstr	s0, [sp]
 800cdb2:	edcd 0a01 	vstr	s1, [sp, #4]
 800cdb6:	ed8d 1a02 	vstr	s2, [sp, #8]
 800cdba:	edcd 1a03 	vstr	s3, [sp, #12]
    if (!i) return nk_false;
 800cdbe:	b1f0      	cbz	r0, 800cdfe <nk_input_is_mouse_prev_hovering_rect+0x52>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 800cdc0:	ed90 7a53 	vldr	s14, [r0, #332]	; 0x14c
 800cdc4:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800cdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdcc:	db19      	blt.n	800ce02 <nk_input_is_mouse_prev_hovering_rect+0x56>
 800cdce:	ee70 7a01 	vadd.f32	s15, s0, s2
 800cdd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdda:	d515      	bpl.n	800ce08 <nk_input_is_mouse_prev_hovering_rect+0x5c>
 800cddc:	ed90 7a54 	vldr	s14, [r0, #336]	; 0x150
 800cde0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde8:	db10      	blt.n	800ce0c <nk_input_is_mouse_prev_hovering_rect+0x60>
 800cdea:	ee70 7aa1 	vadd.f32	s15, s1, s3
 800cdee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf6:	bf4c      	ite	mi
 800cdf8:	2001      	movmi	r0, #1
 800cdfa:	2000      	movpl	r0, #0
 800cdfc:	e002      	b.n	800ce04 <nk_input_is_mouse_prev_hovering_rect+0x58>
    if (!i) return nk_false;
 800cdfe:	2000      	movs	r0, #0
 800ce00:	e000      	b.n	800ce04 <nk_input_is_mouse_prev_hovering_rect+0x58>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 800ce02:	2000      	movs	r0, #0
}
 800ce04:	b004      	add	sp, #16
 800ce06:	4770      	bx	lr
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e7fb      	b.n	800ce04 <nk_input_is_mouse_prev_hovering_rect+0x58>
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	e7f9      	b.n	800ce04 <nk_input_is_mouse_prev_hovering_rect+0x58>

0800ce10 <nk_input_is_mouse_down>:
    return nk_input_is_mouse_click_in_rect(i, id, rect);
}
NK_API nk_bool
nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)
{
    if (!i) return nk_false;
 800ce10:	b120      	cbz	r0, 800ce1c <nk_input_is_mouse_down+0xc>
    return i->mouse.buttons[id].down;
 800ce12:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800ce16:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800ce1a:	4770      	bx	lr
    if (!i) return nk_false;
 800ce1c:	2000      	movs	r0, #0
}
 800ce1e:	4770      	bx	lr

0800ce20 <nk_input_is_mouse_pressed>:
NK_API nk_bool
nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)
{
    const struct nk_mouse_button *b;
    if (!i) return nk_false;
 800ce20:	b150      	cbz	r0, 800ce38 <nk_input_is_mouse_pressed+0x18>
    b = &i->mouse.buttons[id];
    if (b->down && b->clicked)
 800ce22:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ce26:	f8d1 0104 	ldr.w	r0, [r1, #260]	; 0x104
 800ce2a:	b130      	cbz	r0, 800ce3a <nk_input_is_mouse_pressed+0x1a>
 800ce2c:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 800ce30:	3800      	subs	r0, #0
 800ce32:	bf18      	it	ne
 800ce34:	2001      	movne	r0, #1
 800ce36:	4770      	bx	lr
    if (!i) return nk_false;
 800ce38:	2000      	movs	r0, #0
        return nk_true;
    return nk_false;
}
 800ce3a:	4770      	bx	lr

0800ce3c <nk_input_is_key_pressed>:
}
NK_API nk_bool
nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)
{
    const struct nk_key *k;
    if (!i) return nk_false;
 800ce3c:	b178      	cbz	r0, 800ce5e <nk_input_is_key_pressed+0x22>
    k = &i->keyboard.keys[key];
    if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))
 800ce3e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800ce42:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
 800ce46:	b123      	cbz	r3, 800ce52 <nk_input_is_key_pressed+0x16>
 800ce48:	6850      	ldr	r0, [r2, #4]
 800ce4a:	3800      	subs	r0, #0
 800ce4c:	bf18      	it	ne
 800ce4e:	2001      	movne	r0, #1
 800ce50:	4770      	bx	lr
 800ce52:	6850      	ldr	r0, [r2, #4]
 800ce54:	2801      	cmp	r0, #1
 800ce56:	bf94      	ite	ls
 800ce58:	2000      	movls	r0, #0
 800ce5a:	2001      	movhi	r0, #1
 800ce5c:	4770      	bx	lr
    if (!i) return nk_false;
 800ce5e:	2000      	movs	r0, #0
        return nk_true;
    return nk_false;
}
 800ce60:	4770      	bx	lr
	...

0800ce64 <nk_layout_set_min_row_height>:
 *                          LAYOUT
 *
 * ===============================================================*/
NK_API void
nk_layout_set_min_row_height(struct nk_context *ctx, float height)
{
 800ce64:	b508      	push	{r3, lr}
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 800ce66:	b150      	cbz	r0, 800ce7e <nk_layout_set_min_row_height+0x1a>
    NK_ASSERT(ctx->current);
 800ce68:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800ce6c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ce70:	b15b      	cbz	r3, 800ce8a <nk_layout_set_min_row_height+0x26>
    NK_ASSERT(ctx->current->layout);
 800ce72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce76:	b173      	cbz	r3, 800ce96 <nk_layout_set_min_row_height+0x32>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    win = ctx->current;
    layout = win->layout;
    layout->row.min_height = height;
 800ce78:	ed83 0a1c 	vstr	s0, [r3, #112]	; 0x70
}
 800ce7c:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800ce7e:	4b09      	ldr	r3, [pc, #36]	; (800cea4 <nk_layout_set_min_row_height+0x40>)
 800ce80:	4a09      	ldr	r2, [pc, #36]	; (800cea8 <nk_layout_set_min_row_height+0x44>)
 800ce82:	210f      	movs	r1, #15
 800ce84:	4809      	ldr	r0, [pc, #36]	; (800ceac <nk_layout_set_min_row_height+0x48>)
 800ce86:	f009 fb61 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800ce8a:	4b09      	ldr	r3, [pc, #36]	; (800ceb0 <nk_layout_set_min_row_height+0x4c>)
 800ce8c:	4a06      	ldr	r2, [pc, #24]	; (800cea8 <nk_layout_set_min_row_height+0x44>)
 800ce8e:	2110      	movs	r1, #16
 800ce90:	4806      	ldr	r0, [pc, #24]	; (800ceac <nk_layout_set_min_row_height+0x48>)
 800ce92:	f009 fb5b 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800ce96:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <nk_layout_set_min_row_height+0x50>)
 800ce98:	4a03      	ldr	r2, [pc, #12]	; (800cea8 <nk_layout_set_min_row_height+0x44>)
 800ce9a:	2111      	movs	r1, #17
 800ce9c:	4803      	ldr	r0, [pc, #12]	; (800ceac <nk_layout_set_min_row_height+0x48>)
 800ce9e:	f009 fb55 	bl	801654c <__assert_func>
 800cea2:	bf00      	nop
 800cea4:	0801ad58 	.word	0x0801ad58
 800cea8:	0801b338 	.word	0x0801b338
 800ceac:	0801b1d0 	.word	0x0801b1d0
 800ceb0:	0801ad5c 	.word	0x0801ad5c
 800ceb4:	0801ad6c 	.word	0x0801ad6c

0800ceb8 <nk_layout_reset_min_row_height>:
NK_API void
nk_layout_reset_min_row_height(struct nk_context *ctx)
{
 800ceb8:	b508      	push	{r3, lr}
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 800ceba:	b300      	cbz	r0, 800cefe <nk_layout_reset_min_row_height+0x46>
    NK_ASSERT(ctx->current);
 800cebc:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 800cec0:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
 800cec4:	b30a      	cbz	r2, 800cf0a <nk_layout_reset_min_row_height+0x52>
    NK_ASSERT(ctx->current->layout);
 800cec6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ceca:	b322      	cbz	r2, 800cf16 <nk_layout_reset_min_row_height+0x5e>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    win = ctx->current;
    layout = win->layout;
    layout->row.min_height = ctx->style.font->height;
 800cecc:	f8d0 1168 	ldr.w	r1, [r0, #360]	; 0x168
 800ced0:	ed91 7a01 	vldr	s14, [r1, #4]
 800ced4:	ed82 7a1c 	vstr	s14, [r2, #112]	; 0x70
    layout->row.min_height += ctx->style.text.padding.y*2;
 800ced8:	edd0 7a67 	vldr	s15, [r0, #412]	; 0x19c
 800cedc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cee4:	edc2 7a1c 	vstr	s15, [r2, #112]	; 0x70
    layout->row.min_height += ctx->style.window.min_row_height_padding*2;
 800cee8:	f500 53d1 	add.w	r3, r0, #6688	; 0x1a20
 800ceec:	ed93 7a05 	vldr	s14, [r3, #20]
 800cef0:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cef8:	ed82 7a1c 	vstr	s14, [r2, #112]	; 0x70
}
 800cefc:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <nk_layout_reset_min_row_height+0x6c>)
 800cf00:	4a09      	ldr	r2, [pc, #36]	; (800cf28 <nk_layout_reset_min_row_height+0x70>)
 800cf02:	211f      	movs	r1, #31
 800cf04:	4809      	ldr	r0, [pc, #36]	; (800cf2c <nk_layout_reset_min_row_height+0x74>)
 800cf06:	f009 fb21 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800cf0a:	4b09      	ldr	r3, [pc, #36]	; (800cf30 <nk_layout_reset_min_row_height+0x78>)
 800cf0c:	4a06      	ldr	r2, [pc, #24]	; (800cf28 <nk_layout_reset_min_row_height+0x70>)
 800cf0e:	2120      	movs	r1, #32
 800cf10:	4806      	ldr	r0, [pc, #24]	; (800cf2c <nk_layout_reset_min_row_height+0x74>)
 800cf12:	f009 fb1b 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800cf16:	4b07      	ldr	r3, [pc, #28]	; (800cf34 <nk_layout_reset_min_row_height+0x7c>)
 800cf18:	4a03      	ldr	r2, [pc, #12]	; (800cf28 <nk_layout_reset_min_row_height+0x70>)
 800cf1a:	2121      	movs	r1, #33	; 0x21
 800cf1c:	4803      	ldr	r0, [pc, #12]	; (800cf2c <nk_layout_reset_min_row_height+0x74>)
 800cf1e:	f009 fb15 	bl	801654c <__assert_func>
 800cf22:	bf00      	nop
 800cf24:	0801ad58 	.word	0x0801ad58
 800cf28:	0801b318 	.word	0x0801b318
 800cf2c:	0801b1d0 	.word	0x0801b1d0
 800cf30:	0801ad5c 	.word	0x0801ad5c
 800cf34:	0801ad6c 	.word	0x0801ad6c

0800cf38 <nk_layout_row_calculate_usable_space>:

    struct nk_vec2 spacing;

    NK_UNUSED(type);

    spacing = style->window.spacing;
 800cf38:	f500 50c6 	add.w	r0, r0, #6336	; 0x18c0
 800cf3c:	ed90 7a05 	vldr	s14, [r0, #20]

    /* calculate the usable panel space */
    panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;
 800cf40:	2a00      	cmp	r2, #0
 800cf42:	bfc3      	ittte	gt
 800cf44:	f102 32ff 	addgt.w	r2, r2, #4294967295
 800cf48:	ee07 2a90 	vmovgt	s15, r2
 800cf4c:	eef8 7ae7 	vcvtgt.f32.s32	s15, s15
 800cf50:	eddf 7a03 	vldrle	s15, [pc, #12]	; 800cf60 <nk_layout_row_calculate_usable_space+0x28>
 800cf54:	ee67 7a87 	vmul.f32	s15, s15, s14
    panel_space  = total_space - panel_spacing;
    return panel_space;
}
 800cf58:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	00000000 	.word	0x00000000

0800cf64 <nk_panel_layout>:
NK_LIB void
nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,
    float height, int cols)
{
 800cf64:	b510      	push	{r4, lr}
 800cf66:	b086      	sub	sp, #24
    struct nk_command_buffer *out;

    struct nk_vec2 item_spacing;
    struct nk_color color;

    NK_ASSERT(ctx);
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d044      	beq.n	800cff6 <nk_panel_layout+0x92>
 800cf6c:	468e      	mov	lr, r1
    NK_ASSERT(ctx->current);
 800cf6e:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800cf72:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d043      	beq.n	800d002 <nk_panel_layout+0x9e>
    NK_ASSERT(ctx->current->layout);
 800cf7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d045      	beq.n	800d00e <nk_panel_layout+0xaa>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    /* prefetch some configuration data */
    layout = win->layout;
 800cf82:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    style = &ctx->style;
    out = &win->buffer;
    color = style->window.background;
 800cf86:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
 800cf8a:	f8d1 19dc 	ldr.w	r1, [r1, #2524]	; 0x9dc
 800cf8e:	9105      	str	r1, [sp, #20]
    item_spacing = style->window.spacing;
 800cf90:	f500 5cd2 	add.w	ip, r0, #6720	; 0x1a40
 800cf94:	eddc 7a00 	vldr	s15, [ip]
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 800cf98:	685c      	ldr	r4, [r3, #4]
 800cf9a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800cf9e:	d13c      	bne.n	800d01a <nk_panel_layout+0xb6>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 800cfa0:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800cfa4:	d13f      	bne.n	800d026 <nk_panel_layout+0xc2>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 800cfa6:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800cfaa:	d142      	bne.n	800d032 <nk_panel_layout+0xce>

    /* update the current row and set the current row layout */
    layout->row.index = 0;
 800cfac:	2100      	movs	r1, #0
 800cfae:	6699      	str	r1, [r3, #104]	; 0x68
    layout->at_y += layout->row.height;
 800cfb0:	edd3 0a09 	vldr	s1, [r3, #36]	; 0x24
 800cfb4:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800cfb8:	ee70 0a87 	vadd.f32	s1, s1, s14
 800cfbc:	edc3 0a09 	vstr	s1, [r3, #36]	; 0x24
    layout->row.columns = cols;
 800cfc0:	675a      	str	r2, [r3, #116]	; 0x74
    if (height == 0.0f)
 800cfc2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfca:	d138      	bne.n	800d03e <nk_panel_layout+0xda>
        layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;
 800cfcc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800cfd0:	eeb4 7a40 	vcmp.f32	s14, s0
 800cfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd8:	bfc8      	it	gt
 800cfda:	eeb0 0a47 	vmovgt.f32	s0, s14
 800cfde:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cfe2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    else layout->row.height = height + item_spacing.y;

    layout->row.item_offset = 0;
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (layout->flags & NK_WINDOW_DYNAMIC) {
 800cfec:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800cff0:	d128      	bne.n	800d044 <nk_panel_layout+0xe0>
        background.w = win->bounds.w;
        background.y = layout->at_y - 1.0f;
        background.h = layout->row.height + 1.0f;
        nk_fill_rect(out, background, 0, color);
    }
}
 800cff2:	b006      	add	sp, #24
 800cff4:	bd10      	pop	{r4, pc}
    NK_ASSERT(ctx);
 800cff6:	4b1c      	ldr	r3, [pc, #112]	; (800d068 <nk_panel_layout+0x104>)
 800cff8:	4a1c      	ldr	r2, [pc, #112]	; (800d06c <nk_panel_layout+0x108>)
 800cffa:	2148      	movs	r1, #72	; 0x48
 800cffc:	481c      	ldr	r0, [pc, #112]	; (800d070 <nk_panel_layout+0x10c>)
 800cffe:	f009 faa5 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800d002:	4b1c      	ldr	r3, [pc, #112]	; (800d074 <nk_panel_layout+0x110>)
 800d004:	4a19      	ldr	r2, [pc, #100]	; (800d06c <nk_panel_layout+0x108>)
 800d006:	2149      	movs	r1, #73	; 0x49
 800d008:	4819      	ldr	r0, [pc, #100]	; (800d070 <nk_panel_layout+0x10c>)
 800d00a:	f009 fa9f 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800d00e:	4b1a      	ldr	r3, [pc, #104]	; (800d078 <nk_panel_layout+0x114>)
 800d010:	4a16      	ldr	r2, [pc, #88]	; (800d06c <nk_panel_layout+0x108>)
 800d012:	214a      	movs	r1, #74	; 0x4a
 800d014:	4816      	ldr	r0, [pc, #88]	; (800d070 <nk_panel_layout+0x10c>)
 800d016:	f009 fa99 	bl	801654c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <nk_panel_layout+0x118>)
 800d01c:	4a13      	ldr	r2, [pc, #76]	; (800d06c <nk_panel_layout+0x108>)
 800d01e:	215a      	movs	r1, #90	; 0x5a
 800d020:	4813      	ldr	r0, [pc, #76]	; (800d070 <nk_panel_layout+0x10c>)
 800d022:	f009 fa93 	bl	801654c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 800d026:	4b16      	ldr	r3, [pc, #88]	; (800d080 <nk_panel_layout+0x11c>)
 800d028:	4a10      	ldr	r2, [pc, #64]	; (800d06c <nk_panel_layout+0x108>)
 800d02a:	215b      	movs	r1, #91	; 0x5b
 800d02c:	4810      	ldr	r0, [pc, #64]	; (800d070 <nk_panel_layout+0x10c>)
 800d02e:	f009 fa8d 	bl	801654c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 800d032:	4b14      	ldr	r3, [pc, #80]	; (800d084 <nk_panel_layout+0x120>)
 800d034:	4a0d      	ldr	r2, [pc, #52]	; (800d06c <nk_panel_layout+0x108>)
 800d036:	215c      	movs	r1, #92	; 0x5c
 800d038:	480d      	ldr	r0, [pc, #52]	; (800d070 <nk_panel_layout+0x10c>)
 800d03a:	f009 fa87 	bl	801654c <__assert_func>
    else layout->row.height = height + item_spacing.y;
 800d03e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d042:	e7ce      	b.n	800cfe2 <nk_panel_layout+0x7e>
        background.y = layout->at_y - 1.0f;
 800d044:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
        nk_fill_rect(out, background, 0, color);
 800d048:	9905      	ldr	r1, [sp, #20]
 800d04a:	ee02 2a10 	vmov	s4, r2
 800d04e:	ed9e 0a13 	vldr	s0, [lr, #76]	; 0x4c
 800d052:	ee70 0ae1 	vsub.f32	s1, s1, s3
 800d056:	ed9e 1a15 	vldr	s2, [lr, #84]	; 0x54
 800d05a:	ee77 1aa1 	vadd.f32	s3, s15, s3
 800d05e:	f10e 0064 	add.w	r0, lr, #100	; 0x64
 800d062:	f7fd fff9 	bl	800b058 <nk_fill_rect>
 800d066:	e7c4      	b.n	800cff2 <nk_panel_layout+0x8e>
 800d068:	0801ad58 	.word	0x0801ad58
 800d06c:	0801b308 	.word	0x0801b308
 800d070:	0801b1d0 	.word	0x0801b1d0
 800d074:	0801ad5c 	.word	0x0801ad5c
 800d078:	0801ad6c 	.word	0x0801ad6c
 800d07c:	0801b1ec 	.word	0x0801b1ec
 800d080:	0801b214 	.word	0x0801b214
 800d084:	0801b238 	.word	0x0801b238

0800d088 <nk_row_layout>:
NK_LIB void
nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, int width)
{
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	ed2d 8b02 	vpush	{d8}
    /* update the current row and set the current row layout */
    struct nk_window *win;
    NK_ASSERT(ctx);
 800d08e:	b348      	cbz	r0, 800d0e4 <nk_row_layout+0x5c>
 800d090:	460d      	mov	r5, r1
 800d092:	ee08 3a10 	vmov	s16, r3
    NK_ASSERT(ctx->current);
 800d096:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
 800d09a:	f8d1 4658 	ldr.w	r4, [r1, #1624]	; 0x658
 800d09e:	b33c      	cbz	r4, 800d0f0 <nk_row_layout+0x68>
    NK_ASSERT(ctx->current->layout);
 800d0a0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800d0a4:	b351      	cbz	r1, 800d0fc <nk_row_layout+0x74>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    win = ctx->current;
    nk_panel_layout(ctx, win, height, cols);
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	f7ff ff5c 	bl	800cf64 <nk_panel_layout>
    if (fmt == NK_DYNAMIC)
 800d0ac:	bb65      	cbnz	r5, 800d108 <nk_row_layout+0x80>
        win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;
 800d0ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;

    win->layout->row.ratio = 0;
 800d0b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d0bc:	2200      	movs	r2, #0
 800d0be:	679a      	str	r2, [r3, #120]	; 0x78
    win->layout->row.filled = 0;
 800d0c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    win->layout->row.item_offset = 0;
 800d0ca:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d0ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    win->layout->row.item_width = (float)width;
 800d0d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d0d6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800d0da:	ed83 8a1f 	vstr	s16, [r3, #124]	; 0x7c
}
 800d0de:	ecbd 8b02 	vpop	{d8}
 800d0e2:	bd38      	pop	{r3, r4, r5, pc}
    NK_ASSERT(ctx);
 800d0e4:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <nk_row_layout+0x8c>)
 800d0e6:	4a0c      	ldr	r2, [pc, #48]	; (800d118 <nk_row_layout+0x90>)
 800d0e8:	2177      	movs	r1, #119	; 0x77
 800d0ea:	480c      	ldr	r0, [pc, #48]	; (800d11c <nk_row_layout+0x94>)
 800d0ec:	f009 fa2e 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800d0f0:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <nk_row_layout+0x98>)
 800d0f2:	4a09      	ldr	r2, [pc, #36]	; (800d118 <nk_row_layout+0x90>)
 800d0f4:	2178      	movs	r1, #120	; 0x78
 800d0f6:	4809      	ldr	r0, [pc, #36]	; (800d11c <nk_row_layout+0x94>)
 800d0f8:	f009 fa28 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800d0fc:	4b09      	ldr	r3, [pc, #36]	; (800d124 <nk_row_layout+0x9c>)
 800d0fe:	4a06      	ldr	r2, [pc, #24]	; (800d118 <nk_row_layout+0x90>)
 800d100:	2179      	movs	r1, #121	; 0x79
 800d102:	4806      	ldr	r0, [pc, #24]	; (800d11c <nk_row_layout+0x94>)
 800d104:	f009 fa22 	bl	801654c <__assert_func>
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;
 800d108:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d10c:	2204      	movs	r2, #4
 800d10e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800d112:	e7d1      	b.n	800d0b8 <nk_row_layout+0x30>
 800d114:	0801ad58 	.word	0x0801ad58
 800d118:	0801b2f8 	.word	0x0801b2f8
 800d11c:	0801b1d0 	.word	0x0801b1d0
 800d120:	0801ad5c 	.word	0x0801ad5c
 800d124:	0801ad6c 	.word	0x0801ad6c

0800d128 <nk_layout_row_dynamic>:
    win = ctx->current;
    return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);
}
NK_API void
nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)
{
 800d128:	b508      	push	{r3, lr}
 800d12a:	460a      	mov	r2, r1
    nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);
 800d12c:	2300      	movs	r3, #0
 800d12e:	4619      	mov	r1, r3
 800d130:	f7ff ffaa 	bl	800d088 <nk_row_layout>
}
 800d134:	bd08      	pop	{r3, pc}
	...

0800d138 <nk_layout_row>:
    layout->row.item_offset = 0;
}
NK_API void
nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, const float *ratio)
{
 800d138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i;
    int n_undef = 0;
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d03f      	beq.n	800d1be <nk_layout_row+0x86>
 800d13e:	460f      	mov	r7, r1
 800d140:	4614      	mov	r4, r2
 800d142:	461e      	mov	r6, r3
    NK_ASSERT(ctx->current);
 800d144:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 800d148:	f8d2 1658 	ldr.w	r1, [r2, #1624]	; 0x658
 800d14c:	2900      	cmp	r1, #0
 800d14e:	d03c      	beq.n	800d1ca <nk_layout_row+0x92>
    NK_ASSERT(ctx->current->layout);
 800d150:	f8d1 508c 	ldr.w	r5, [r1, #140]	; 0x8c
 800d154:	2d00      	cmp	r5, #0
 800d156:	d03e      	beq.n	800d1d6 <nk_layout_row+0x9e>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    win = ctx->current;
    layout = win->layout;
    nk_panel_layout(ctx, win, height, cols);
 800d158:	4622      	mov	r2, r4
 800d15a:	f7ff ff03 	bl	800cf64 <nk_panel_layout>
    if (fmt == NK_DYNAMIC) {
 800d15e:	2f00      	cmp	r7, #0
 800d160:	d153      	bne.n	800d20a <nk_layout_row+0xd2>
        /* calculate width of undefined widget ratios */
        float r = 0;
        layout->row.ratio = ratio;
 800d162:	67ae      	str	r6, [r5, #120]	; 0x78
        for (i = 0; i < cols; ++i) {
 800d164:	2c00      	cmp	r4, #0
 800d166:	dd5e      	ble.n	800d226 <nk_layout_row+0xee>
 800d168:	4631      	mov	r1, r6
 800d16a:	eb06 0284 	add.w	r2, r6, r4, lsl #2
        float r = 0;
 800d16e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d230 <nk_layout_row+0xf8>
    int n_undef = 0;
 800d172:	2300      	movs	r3, #0
            if (ratio[i] < 0.0f)
 800d174:	ecf1 7a01 	vldmia	r1!, {s15}
 800d178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                n_undef++;
 800d180:	bf4c      	ite	mi
 800d182:	3301      	addmi	r3, #1
            else r += ratio[i];
 800d184:	ee37 7a27 	vaddpl.f32	s14, s14, s15
        for (i = 0; i < cols; ++i) {
 800d188:	4291      	cmp	r1, r2
 800d18a:	d1f3      	bne.n	800d174 <nk_layout_row+0x3c>
        }
        r = NK_SATURATE(1.0f - r);
 800d18c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d190:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19c:	dd21      	ble.n	800d1e2 <nk_layout_row+0xaa>
        layout->row.type = NK_LAYOUT_DYNAMIC;
 800d19e:	2203      	movs	r2, #3
 800d1a0:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
 800d1a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	bfc3      	ittte	gt
 800d1ac:	ee07 3a90 	vmovgt	s15, r3
 800d1b0:	eef8 7ae7 	vcvtgt.f32.s32	s15, s15
 800d1b4:	eec7 6a27 	vdivgt.f32	s13, s14, s15
 800d1b8:	eddf 6a1d 	vldrle	s13, [pc, #116]	; 800d230 <nk_layout_row+0xf8>
 800d1bc:	e02b      	b.n	800d216 <nk_layout_row+0xde>
    NK_ASSERT(ctx);
 800d1be:	4b1d      	ldr	r3, [pc, #116]	; (800d234 <nk_layout_row+0xfc>)
 800d1c0:	4a1d      	ldr	r2, [pc, #116]	; (800d238 <nk_layout_row+0x100>)
 800d1c2:	21ed      	movs	r1, #237	; 0xed
 800d1c4:	481d      	ldr	r0, [pc, #116]	; (800d23c <nk_layout_row+0x104>)
 800d1c6:	f009 f9c1 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800d1ca:	4b1d      	ldr	r3, [pc, #116]	; (800d240 <nk_layout_row+0x108>)
 800d1cc:	4a1a      	ldr	r2, [pc, #104]	; (800d238 <nk_layout_row+0x100>)
 800d1ce:	21ee      	movs	r1, #238	; 0xee
 800d1d0:	481a      	ldr	r0, [pc, #104]	; (800d23c <nk_layout_row+0x104>)
 800d1d2:	f009 f9bb 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800d1d6:	4b1b      	ldr	r3, [pc, #108]	; (800d244 <nk_layout_row+0x10c>)
 800d1d8:	4a17      	ldr	r2, [pc, #92]	; (800d238 <nk_layout_row+0x100>)
 800d1da:	21ef      	movs	r1, #239	; 0xef
 800d1dc:	4817      	ldr	r0, [pc, #92]	; (800d23c <nk_layout_row+0x104>)
 800d1de:	f009 f9b5 	bl	801654c <__assert_func>
        r = NK_SATURATE(1.0f - r);
 800d1e2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ea:	dc05      	bgt.n	800d1f8 <nk_layout_row+0xc0>
        layout->row.type = NK_LAYOUT_DYNAMIC;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 800d1f2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800d230 <nk_layout_row+0xf8>
 800d1f6:	e00e      	b.n	800d216 <nk_layout_row+0xde>
        r = NK_SATURATE(1.0f - r);
 800d1f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d200:	dccd      	bgt.n	800d19e <nk_layout_row+0x66>
        layout->row.type = NK_LAYOUT_DYNAMIC;
 800d202:	2203      	movs	r2, #3
 800d204:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 800d208:	e7ce      	b.n	800d1a8 <nk_layout_row+0x70>
    } else {
        layout->row.ratio = ratio;
 800d20a:	67ae      	str	r6, [r5, #120]	; 0x78
        layout->row.type = NK_LAYOUT_STATIC;
 800d20c:	2307      	movs	r3, #7
 800d20e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
 800d212:	eddf 6a07 	vldr	s13, [pc, #28]	; 800d230 <nk_layout_row+0xf8>
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 800d216:	edc5 6a1f 	vstr	s13, [r5, #124]	; 0x7c
        layout->row.item_width = 0;
        layout->row.item_offset = 0;
    }
    layout->row.item_offset = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    layout->row.filled = 0;
 800d220:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800d224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int n_undef = 0;
 800d226:	2300      	movs	r3, #0
        r = NK_SATURATE(1.0f - r);
 800d228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d22c:	e7e9      	b.n	800d202 <nk_layout_row+0xca>
 800d22e:	bf00      	nop
 800d230:	00000000 	.word	0x00000000
 800d234:	0801ad58 	.word	0x0801ad58
 800d238:	0801b2d0 	.word	0x0801b2d0
 800d23c:	0801b1d0 	.word	0x0801b1d0
 800d240:	0801ad5c 	.word	0x0801ad5c
 800d244:	0801ad6c 	.word	0x0801ad6c

0800d248 <nk_panel_alloc_row>:
    ret.y += -layout->at_y + (float)*layout->offset_y;
    return ret;
}
NK_LIB void
nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)
{
 800d248:	b508      	push	{r3, lr}
    struct nk_panel *layout = win->layout;
 800d24a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    struct nk_vec2 spacing = ctx->style.window.spacing;
 800d24e:	f500 53d2 	add.w	r3, r0, #6720	; 0x1a40
    const float row_height = layout->row.height - spacing.y;
 800d252:	ed92 0a1b 	vldr	s0, [r2, #108]	; 0x6c
 800d256:	edd3 7a00 	vldr	s15, [r3]
    nk_panel_layout(ctx, win, row_height, layout->row.columns);
 800d25a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d25c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d260:	f7ff fe80 	bl	800cf64 <nk_panel_layout>
}
 800d264:	bd08      	pop	{r3, pc}
	...

0800d268 <nk_layout_widget_space>:
NK_LIB void
nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,
    struct nk_window *win, int modify)
{
 800d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26a:	ed2d 8b04 	vpush	{d8-d9}
    float item_offset = 0;
    float item_width = 0;
    float item_spacing = 0;
    float panel_space = 0;

    NK_ASSERT(ctx);
 800d26e:	b379      	cbz	r1, 800d2d0 <nk_layout_widget_space+0x68>
 800d270:	4605      	mov	r5, r0
 800d272:	461e      	mov	r6, r3
 800d274:	4608      	mov	r0, r1
    NK_ASSERT(ctx->current);
 800d276:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
 800d27a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800d27e:	b373      	cbz	r3, 800d2de <nk_layout_widget_space+0x76>
    NK_ASSERT(ctx->current->layout);
 800d280:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800d284:	b394      	cbz	r4, 800d2ec <nk_layout_widget_space+0x84>
        return;

    win = ctx->current;
    layout = win->layout;
    style = &ctx->style;
    NK_ASSERT(bounds);
 800d286:	2d00      	cmp	r5, #0
 800d288:	d037      	beq.n	800d2fa <nk_layout_widget_space+0x92>

    spacing = style->window.spacing;
 800d28a:	f501 53d1 	add.w	r3, r1, #6688	; 0x1a20
 800d28e:	ed93 9a07 	vldr	s18, [r3, #28]
 800d292:	f501 53d2 	add.w	r3, r1, #6720	; 0x1a40
 800d296:	edd3 8a00 	vldr	s17, [r3]
    panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
 800d29a:	ed94 8a04 	vldr	s16, [r4, #16]
 800d29e:	6f67      	ldr	r7, [r4, #116]	; 0x74
 800d2a0:	463a      	mov	r2, r7
 800d2a2:	eeb0 0a48 	vmov.f32	s0, s16
 800d2a6:	7821      	ldrb	r1, [r4, #0]
 800d2a8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800d2ac:	f7ff fe44 	bl	800cf38 <nk_layout_row_calculate_usable_space>
                                            layout->bounds.w, layout->row.columns);

    #define NK_FRAC(x) (x - (float)(int)x) /* will be used to remove fookin gaps */
    /* calculate the width of one item inside the current layout space */
    switch (layout->row.type) {
 800d2b0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800d2b4:	2b08      	cmp	r3, #8
 800d2b6:	f200 81b5 	bhi.w	800d624 <nk_layout_widget_space+0x3bc>
 800d2ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d2be:	0025      	.short	0x0025
 800d2c0:	009b0079 	.word	0x009b0079
 800d2c4:	011900e4 	.word	0x011900e4
 800d2c8:	01360124 	.word	0x01360124
 800d2cc:	0184016e 	.word	0x0184016e
    NK_ASSERT(ctx);
 800d2d0:	4bd9      	ldr	r3, [pc, #868]	; (800d638 <nk_layout_widget_space+0x3d0>)
 800d2d2:	4ada      	ldr	r2, [pc, #872]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d2d4:	f240 214d 	movw	r1, #589	; 0x24d
 800d2d8:	48d9      	ldr	r0, [pc, #868]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d2da:	f009 f937 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800d2de:	4bd9      	ldr	r3, [pc, #868]	; (800d644 <nk_layout_widget_space+0x3dc>)
 800d2e0:	4ad6      	ldr	r2, [pc, #856]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d2e2:	f240 214e 	movw	r1, #590	; 0x24e
 800d2e6:	48d6      	ldr	r0, [pc, #856]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d2e8:	f009 f930 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800d2ec:	4bd6      	ldr	r3, [pc, #856]	; (800d648 <nk_layout_widget_space+0x3e0>)
 800d2ee:	4ad3      	ldr	r2, [pc, #844]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d2f0:	f240 214f 	movw	r1, #591	; 0x24f
 800d2f4:	48d2      	ldr	r0, [pc, #840]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d2f6:	f009 f929 	bl	801654c <__assert_func>
    NK_ASSERT(bounds);
 800d2fa:	4bd4      	ldr	r3, [pc, #848]	; (800d64c <nk_layout_widget_space+0x3e4>)
 800d2fc:	4acf      	ldr	r2, [pc, #828]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d2fe:	f240 2156 	movw	r1, #598	; 0x256
 800d302:	48cf      	ldr	r0, [pc, #828]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d304:	f009 f922 	bl	801654c <__assert_func>
    case NK_LAYOUT_DYNAMIC_FIXED: {
        /* scaling fixed size widgets item width */
        float w = NK_MAX(1.0f,panel_space) / (float)layout->row.columns;
 800d308:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d30c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d314:	bfd8      	it	le
 800d316:	eeb0 0a67 	vmovle.f32	s0, s15
 800d31a:	ee07 7a90 	vmov	s15, r7
 800d31e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d322:	ee80 6a27 	vdiv.f32	s12, s0, s15
        item_offset = (float)layout->row.index * w;
 800d326:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 800d32a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d32e:	ee66 7a86 	vmul.f32	s15, s13, s12
        item_width = w + NK_FRAC(item_offset);
 800d332:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d336:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d33a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d33e:	ee37 7a06 	vadd.f32	s14, s14, s12
        item_spacing = (float)layout->row.index * spacing.x;
 800d342:	ee66 6a89 	vmul.f32	s13, s13, s18
    #undef NK_FRAC
    default: NK_ASSERT(0); break;
    };

    /* set the bounds of the newly allocated widget */
    bounds->w = item_width;
 800d346:	ed85 7a02 	vstr	s14, [r5, #8]
    bounds->h = layout->row.height - spacing.y;
 800d34a:	ed94 6a1b 	vldr	s12, [r4, #108]	; 0x6c
 800d34e:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d352:	ed85 6a03 	vstr	s12, [r5, #12]
    bounds->y = layout->at_y - (float)*layout->offset_y;
 800d356:	69e3      	ldr	r3, [r4, #28]
 800d358:	edd3 5a00 	vldr	s11, [r3]
 800d35c:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800d360:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800d364:	ee36 6a65 	vsub.f32	s12, s12, s11
 800d368:	ed85 6a01 	vstr	s12, [r5, #4]
    bounds->x = layout->at_x + item_offset + item_spacing;
 800d36c:	ed94 6a08 	vldr	s12, [r4, #32]
 800d370:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d378:	edc5 7a00 	vstr	s15, [r5]
    if (((bounds->x + bounds->w) > layout->max_x) && modify)
 800d37c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d380:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d384:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38c:	dd02      	ble.n	800d394 <nk_layout_widget_space+0x12c>
 800d38e:	b10e      	cbz	r6, 800d394 <nk_layout_widget_space+0x12c>
        layout->max_x = bounds->x + bounds->w;
 800d390:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    bounds->x -= (float)*layout->offset_x;
 800d394:	69a3      	ldr	r3, [r4, #24]
 800d396:	ed93 7a00 	vldr	s14, [r3]
 800d39a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d39e:	edd5 7a00 	vldr	s15, [r5]
 800d3a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3a6:	edc5 7a00 	vstr	s15, [r5]
}
 800d3aa:	ecbd 8b04 	vpop	{d8-d9}
 800d3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        float w = layout->row.item_width * panel_space;
 800d3b0:	edd4 6a1f 	vldr	s13, [r4, #124]	; 0x7c
 800d3b4:	ee26 0a80 	vmul.f32	s0, s13, s0
        item_offset = layout->row.item_offset;
 800d3b8:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
        item_width = w + NK_FRAC(item_offset);
 800d3bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d3c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d3c8:	ee37 7a00 	vadd.f32	s14, s14, s0
        if (modify) {
 800d3cc:	2e00      	cmp	r6, #0
 800d3ce:	f000 8130 	beq.w	800d632 <nk_layout_widget_space+0x3ca>
            layout->row.item_offset += w + spacing.x;
 800d3d2:	ee39 0a00 	vadd.f32	s0, s18, s0
 800d3d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d3da:	ed84 0a21 	vstr	s0, [r4, #132]	; 0x84
            layout->row.filled += layout->row.item_width;
 800d3de:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
 800d3e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d3e6:	edc4 6a22 	vstr	s13, [r4, #136]	; 0x88
            layout->row.index = 0;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	66a3      	str	r3, [r4, #104]	; 0x68
        item_spacing = 0;
 800d3ee:	eddf 6a98 	vldr	s13, [pc, #608]	; 800d650 <nk_layout_widget_space+0x3e8>
 800d3f2:	e7a8      	b.n	800d346 <nk_layout_widget_space+0xde>
        bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);
 800d3f4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800d3f8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d3fc:	edd4 7a08 	vldr	s15, [r4, #32]
 800d400:	ee38 8a27 	vadd.f32	s16, s16, s15
 800d404:	ed85 8a00 	vstr	s16, [r5]
        bounds->x -= (float)*layout->offset_x;
 800d408:	69a3      	ldr	r3, [r4, #24]
 800d40a:	edd3 7a00 	vldr	s15, [r3]
 800d40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d412:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d416:	ed85 8a00 	vstr	s16, [r5]
        bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);
 800d41a:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
 800d41e:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 800d422:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d426:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800d42a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d42e:	edc5 7a01 	vstr	s15, [r5, #4]
        bounds->y -= (float)*layout->offset_y;
 800d432:	69e3      	ldr	r3, [r4, #28]
 800d434:	ed93 7a00 	vldr	s14, [r3]
 800d438:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d43c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d440:	edc5 7a01 	vstr	s15, [r5, #4]
        bounds->w = layout->bounds.w  * layout->row.item.w + NK_FRAC(bounds->x);
 800d444:	ed94 7a04 	vldr	s14, [r4, #16]
 800d448:	edd4 6a25 	vldr	s13, [r4, #148]	; 0x94
 800d44c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d450:	eefd 6ac8 	vcvt.s32.f32	s13, s16
 800d454:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d458:	ee38 8a66 	vsub.f32	s16, s16, s13
 800d45c:	ee37 7a08 	vadd.f32	s14, s14, s16
 800d460:	ed85 7a02 	vstr	s14, [r5, #8]
        bounds->h = layout->row.height * layout->row.item.h + NK_FRAC(bounds->y);
 800d464:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 800d468:	edd4 6a26 	vldr	s13, [r4, #152]	; 0x98
 800d46c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d470:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800d474:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d478:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d47c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d480:	edc5 7a03 	vstr	s15, [r5, #12]
        return;
 800d484:	e791      	b.n	800d3aa <nk_layout_widget_space+0x142>
        NK_ASSERT(layout->row.ratio);
 800d486:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800d488:	b35a      	cbz	r2, 800d4e2 <nk_layout_widget_space+0x27a>
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 800d48a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d48c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d490:	ed92 6a00 	vldr	s12, [r2]
            layout->row.item_width : layout->row.ratio[layout->row.index];
 800d494:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800d498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d49c:	bf48      	it	mi
 800d49e:	ed94 6a1f 	vldrmi	s12, [r4, #124]	; 0x7c
        w = (ratio * panel_space);
 800d4a2:	ee26 0a00 	vmul.f32	s0, s12, s0
        item_spacing = (float)layout->row.index * spacing.x;
 800d4a6:	ee07 3a90 	vmov	s15, r3
 800d4aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4ae:	ee67 6a89 	vmul.f32	s13, s15, s18
        item_offset = layout->row.item_offset;
 800d4b2:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
        item_width = w + NK_FRAC(item_offset);
 800d4b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d4ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d4be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d4c2:	ee37 7a00 	vadd.f32	s14, s14, s0
        if (modify) {
 800d4c6:	2e00      	cmp	r6, #0
 800d4c8:	f43f af3d 	beq.w	800d346 <nk_layout_widget_space+0xde>
            layout->row.item_offset += w;
 800d4cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d4d0:	ed84 0a21 	vstr	s0, [r4, #132]	; 0x84
            layout->row.filled += ratio;
 800d4d4:	edd4 5a22 	vldr	s11, [r4, #136]	; 0x88
 800d4d8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d4dc:	ed84 6a22 	vstr	s12, [r4, #136]	; 0x88
 800d4e0:	e731      	b.n	800d346 <nk_layout_widget_space+0xde>
        NK_ASSERT(layout->row.ratio);
 800d4e2:	4b5c      	ldr	r3, [pc, #368]	; (800d654 <nk_layout_widget_space+0x3ec>)
 800d4e4:	4a55      	ldr	r2, [pc, #340]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d4e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d4ea:	4855      	ldr	r0, [pc, #340]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d4ec:	f009 f82e 	bl	801654c <__assert_func>
        item_width = layout->row.item_width;
 800d4f0:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        item_offset = (float)layout->row.index * item_width;
 800d4f4:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 800d4f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d4fc:	ee66 7a87 	vmul.f32	s15, s13, s14
        item_spacing = (float)layout->row.index * spacing.x;
 800d500:	ee66 6a89 	vmul.f32	s13, s13, s18
    } break;
 800d504:	e71f      	b.n	800d346 <nk_layout_widget_space+0xde>
        item_width = layout->row.item_width;
 800d506:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        item_offset = layout->row.item_offset;
 800d50a:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
        item_spacing = (float)layout->row.index * spacing.x;
 800d50e:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
 800d512:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d516:	ee66 6a89 	vmul.f32	s13, s13, s18
        if (modify) layout->row.item_offset += item_width;
 800d51a:	2e00      	cmp	r6, #0
 800d51c:	f43f af13 	beq.w	800d346 <nk_layout_widget_space+0xde>
 800d520:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d524:	ed84 6a21 	vstr	s12, [r4, #132]	; 0x84
 800d528:	e70d      	b.n	800d346 <nk_layout_widget_space+0xde>
        bounds->x = layout->at_x + layout->row.item.x;
 800d52a:	edd4 7a08 	vldr	s15, [r4, #32]
 800d52e:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 800d532:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d536:	edc5 7a00 	vstr	s15, [r5]
        bounds->w = layout->row.item.w;
 800d53a:	ed94 7a25 	vldr	s14, [r4, #148]	; 0x94
 800d53e:	ed85 7a02 	vstr	s14, [r5, #8]
        if (((bounds->x + bounds->w) > layout->max_x) && modify)
 800d542:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d546:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d54a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d552:	dd02      	ble.n	800d55a <nk_layout_widget_space+0x2f2>
 800d554:	b10e      	cbz	r6, 800d55a <nk_layout_widget_space+0x2f2>
            layout->max_x = (bounds->x + bounds->w);
 800d556:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
        bounds->x -= (float)*layout->offset_x;
 800d55a:	69a3      	ldr	r3, [r4, #24]
 800d55c:	ed93 7a00 	vldr	s14, [r3]
 800d560:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d564:	edd5 7a00 	vldr	s15, [r5]
 800d568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d56c:	edc5 7a00 	vstr	s15, [r5]
        bounds->y = layout->at_y + layout->row.item.y;
 800d570:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800d574:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 800d578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d57c:	edc5 7a01 	vstr	s15, [r5, #4]
        bounds->y -= (float)*layout->offset_y;
 800d580:	69e3      	ldr	r3, [r4, #28]
 800d582:	ed93 7a00 	vldr	s14, [r3]
 800d586:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d58a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d58e:	edc5 7a01 	vstr	s15, [r5, #4]
        bounds->h = layout->row.item.h;
 800d592:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d596:	60eb      	str	r3, [r5, #12]
        return;
 800d598:	e707      	b.n	800d3aa <nk_layout_widget_space+0x142>
        item_spacing = (float)layout->row.index * spacing.x;
 800d59a:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 800d59e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5a2:	ee67 6a89 	vmul.f32	s13, s15, s18
        item_width = layout->row.ratio[layout->row.index];
 800d5a6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d5a8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800d5aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d5ae:	ed93 7a00 	vldr	s14, [r3]
        item_offset = layout->row.item_offset;
 800d5b2:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
        if (modify) layout->row.item_offset += item_width;
 800d5b6:	2e00      	cmp	r6, #0
 800d5b8:	f43f aec5 	beq.w	800d346 <nk_layout_widget_space+0xde>
 800d5bc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d5c0:	ed84 6a21 	vstr	s12, [r4, #132]	; 0x84
 800d5c4:	e6bf      	b.n	800d346 <nk_layout_widget_space+0xde>
        NK_ASSERT(layout->row.index < layout->row.columns);
 800d5c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d5c8:	429f      	cmp	r7, r3
 800d5ca:	dd1d      	ble.n	800d608 <nk_layout_widget_space+0x3a0>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 800d5cc:	2b0f      	cmp	r3, #15
 800d5ce:	dc22      	bgt.n	800d616 <nk_layout_widget_space+0x3ae>
        w = layout->row.templates[layout->row.index];
 800d5d0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d5d4:	ed92 6a28 	vldr	s12, [r2, #160]	; 0xa0
        item_offset = layout->row.item_offset;
 800d5d8:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
        item_width = w + NK_FRAC(item_offset);
 800d5dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d5e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d5e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d5e8:	ee37 7a06 	vadd.f32	s14, s14, s12
        item_spacing = (float)layout->row.index * spacing.x;
 800d5ec:	ee06 3a90 	vmov	s13, r3
 800d5f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d5f4:	ee66 6a89 	vmul.f32	s13, s13, s18
        if (modify) layout->row.item_offset += w;
 800d5f8:	2e00      	cmp	r6, #0
 800d5fa:	f43f aea4 	beq.w	800d346 <nk_layout_widget_space+0xde>
 800d5fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d602:	ed84 6a21 	vstr	s12, [r4, #132]	; 0x84
 800d606:	e69e      	b.n	800d346 <nk_layout_widget_space+0xde>
        NK_ASSERT(layout->row.index < layout->row.columns);
 800d608:	4b13      	ldr	r3, [pc, #76]	; (800d658 <nk_layout_widget_space+0x3f0>)
 800d60a:	4a0c      	ldr	r2, [pc, #48]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d60c:	f240 21b1 	movw	r1, #689	; 0x2b1
 800d610:	480b      	ldr	r0, [pc, #44]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d612:	f008 ff9b 	bl	801654c <__assert_func>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 800d616:	4b11      	ldr	r3, [pc, #68]	; (800d65c <nk_layout_widget_space+0x3f4>)
 800d618:	4a08      	ldr	r2, [pc, #32]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d61a:	f240 21b2 	movw	r1, #690	; 0x2b2
 800d61e:	4808      	ldr	r0, [pc, #32]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d620:	f008 ff94 	bl	801654c <__assert_func>
    default: NK_ASSERT(0); break;
 800d624:	4b0e      	ldr	r3, [pc, #56]	; (800d660 <nk_layout_widget_space+0x3f8>)
 800d626:	4a05      	ldr	r2, [pc, #20]	; (800d63c <nk_layout_widget_space+0x3d4>)
 800d628:	f240 21ba 	movw	r1, #698	; 0x2ba
 800d62c:	4804      	ldr	r0, [pc, #16]	; (800d640 <nk_layout_widget_space+0x3d8>)
 800d62e:	f008 ff8d 	bl	801654c <__assert_func>
        item_spacing = 0;
 800d632:	eddf 6a07 	vldr	s13, [pc, #28]	; 800d650 <nk_layout_widget_space+0x3e8>
 800d636:	e686      	b.n	800d346 <nk_layout_widget_space+0xde>
 800d638:	0801ad58 	.word	0x0801ad58
 800d63c:	0801b2e0 	.word	0x0801b2e0
 800d640:	0801b1d0 	.word	0x0801b1d0
 800d644:	0801ad5c 	.word	0x0801ad5c
 800d648:	0801ad6c 	.word	0x0801ad6c
 800d64c:	0801b25c 	.word	0x0801b25c
 800d650:	00000000 	.word	0x00000000
 800d654:	0801b264 	.word	0x0801b264
 800d658:	0801b278 	.word	0x0801b278
 800d65c:	0801b2a0 	.word	0x0801b2a0
 800d660:	08019df0 	.word	0x08019df0

0800d664 <nk_panel_alloc_space>:
NK_LIB void
nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)
{
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 800d666:	b1b9      	cbz	r1, 800d698 <nk_panel_alloc_space+0x34>
 800d668:	4606      	mov	r6, r0
 800d66a:	460f      	mov	r7, r1
    NK_ASSERT(ctx->current);
 800d66c:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
 800d670:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 800d674:	b1bd      	cbz	r5, 800d6a6 <nk_panel_alloc_space+0x42>
    NK_ASSERT(ctx->current->layout);
 800d676:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
 800d67a:	b1dc      	cbz	r4, 800d6b4 <nk_panel_alloc_space+0x50>
        return;

    /* check if the end of the row has been hit and begin new row if so */
    win = ctx->current;
    layout = win->layout;
    if (layout->row.index >= layout->row.columns)
 800d67c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800d67e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d680:	429a      	cmp	r2, r3
 800d682:	da1e      	bge.n	800d6c2 <nk_panel_alloc_space+0x5e>
        nk_panel_alloc_row(ctx, win);

    /* calculate widget position and size */
    nk_layout_widget_space(bounds, ctx, win, nk_true);
 800d684:	2301      	movs	r3, #1
 800d686:	462a      	mov	r2, r5
 800d688:	4639      	mov	r1, r7
 800d68a:	4630      	mov	r0, r6
 800d68c:	f7ff fdec 	bl	800d268 <nk_layout_widget_space>
    layout->row.index++;
 800d690:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d692:	3301      	adds	r3, #1
 800d694:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800d696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NK_ASSERT(ctx);
 800d698:	4b0c      	ldr	r3, [pc, #48]	; (800d6cc <nk_panel_alloc_space+0x68>)
 800d69a:	4a0d      	ldr	r2, [pc, #52]	; (800d6d0 <nk_panel_alloc_space+0x6c>)
 800d69c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800d6a0:	480c      	ldr	r0, [pc, #48]	; (800d6d4 <nk_panel_alloc_space+0x70>)
 800d6a2:	f008 ff53 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <nk_panel_alloc_space+0x74>)
 800d6a8:	4a09      	ldr	r2, [pc, #36]	; (800d6d0 <nk_panel_alloc_space+0x6c>)
 800d6aa:	f240 21cd 	movw	r1, #717	; 0x2cd
 800d6ae:	4809      	ldr	r0, [pc, #36]	; (800d6d4 <nk_panel_alloc_space+0x70>)
 800d6b0:	f008 ff4c 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800d6b4:	4b09      	ldr	r3, [pc, #36]	; (800d6dc <nk_panel_alloc_space+0x78>)
 800d6b6:	4a06      	ldr	r2, [pc, #24]	; (800d6d0 <nk_panel_alloc_space+0x6c>)
 800d6b8:	f240 21ce 	movw	r1, #718	; 0x2ce
 800d6bc:	4805      	ldr	r0, [pc, #20]	; (800d6d4 <nk_panel_alloc_space+0x70>)
 800d6be:	f008 ff45 	bl	801654c <__assert_func>
        nk_panel_alloc_row(ctx, win);
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	f7ff fdbf 	bl	800d248 <nk_panel_alloc_row>
 800d6ca:	e7db      	b.n	800d684 <nk_panel_alloc_space+0x20>
 800d6cc:	0801ad58 	.word	0x0801ad58
 800d6d0:	0801b2b8 	.word	0x0801b2b8
 800d6d4:	0801b1d0 	.word	0x0801b1d0
 800d6d8:	0801ad5c 	.word	0x0801ad5c
 800d6dc:	0801ad6c 	.word	0x0801ad6c

0800d6e0 <nk_round_up_pow2>:
}
#endif
NK_LIB nk_uint
nk_round_up_pow2(nk_uint v)
{
    v--;
 800d6e0:	3801      	subs	r0, #1
    v |= v >> 1;
 800d6e2:	ea40 0050 	orr.w	r0, r0, r0, lsr #1
    v |= v >> 2;
 800d6e6:	ea40 0090 	orr.w	r0, r0, r0, lsr #2
    v |= v >> 4;
 800d6ea:	ea40 1010 	orr.w	r0, r0, r0, lsr #4
    v |= v >> 8;
 800d6ee:	ea40 2010 	orr.w	r0, r0, r0, lsr #8
    v |= v >> 16;
 800d6f2:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
    v++;
    return v;
}
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	4770      	bx	lr
	...

0800d6fc <nk_pow>:
NK_LIB double
nk_pow(double x, int n)
{
 800d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d700:	4682      	mov	sl, r0
    /*  check the sign of n */
    double r = 1;
    int plus = n >= 0;
    n = (plus) ? n : -n;
 800d702:	ea80 76e0 	eor.w	r6, r0, r0, asr #31
 800d706:	eba6 76e0 	sub.w	r6, r6, r0, asr #31
    while (n > 0) {
 800d70a:	2e00      	cmp	r6, #0
 800d70c:	dd20      	ble.n	800d750 <nk_pow+0x54>
 800d70e:	ec55 4b10 	vmov	r4, r5, d0
 800d712:	f04f 0800 	mov.w	r8, #0
 800d716:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800d778 <nk_pow+0x7c>
 800d71a:	e00d      	b.n	800d738 <nk_pow+0x3c>
        if ((n & 1) == 1)
            r *= x;
        n /= 2;
 800d71c:	eb06 77d6 	add.w	r7, r6, r6, lsr #31
 800d720:	107f      	asrs	r7, r7, #1
        x *= x;
 800d722:	4622      	mov	r2, r4
 800d724:	462b      	mov	r3, r5
 800d726:	4620      	mov	r0, r4
 800d728:	4629      	mov	r1, r5
 800d72a:	f7f2 ff8d 	bl	8000648 <__aeabi_dmul>
 800d72e:	4604      	mov	r4, r0
 800d730:	460d      	mov	r5, r1
    while (n > 0) {
 800d732:	2e01      	cmp	r6, #1
 800d734:	dd10      	ble.n	800d758 <nk_pow+0x5c>
        n /= 2;
 800d736:	463e      	mov	r6, r7
        if ((n & 1) == 1)
 800d738:	f016 0f01 	tst.w	r6, #1
 800d73c:	d0ee      	beq.n	800d71c <nk_pow+0x20>
            r *= x;
 800d73e:	4622      	mov	r2, r4
 800d740:	462b      	mov	r3, r5
 800d742:	4640      	mov	r0, r8
 800d744:	4649      	mov	r1, r9
 800d746:	f7f2 ff7f 	bl	8000648 <__aeabi_dmul>
 800d74a:	4680      	mov	r8, r0
 800d74c:	4689      	mov	r9, r1
 800d74e:	e7e5      	b.n	800d71c <nk_pow+0x20>
    while (n > 0) {
 800d750:	f04f 0800 	mov.w	r8, #0
 800d754:	f8df 9020 	ldr.w	r9, [pc, #32]	; 800d778 <nk_pow+0x7c>
    }
    return plus ? r : 1.0 / r;
 800d758:	f1ba 0f00 	cmp.w	sl, #0
 800d75c:	db03      	blt.n	800d766 <nk_pow+0x6a>
}
 800d75e:	ec49 8b10 	vmov	d0, r8, r9
 800d762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return plus ? r : 1.0 / r;
 800d766:	4642      	mov	r2, r8
 800d768:	464b      	mov	r3, r9
 800d76a:	2000      	movs	r0, #0
 800d76c:	4902      	ldr	r1, [pc, #8]	; (800d778 <nk_pow+0x7c>)
 800d76e:	f7f3 f895 	bl	800089c <__aeabi_ddiv>
 800d772:	4680      	mov	r8, r0
 800d774:	4689      	mov	r9, r1
 800d776:	e7f2      	b.n	800d75e <nk_pow+0x62>
 800d778:	3ff00000 	.word	0x3ff00000

0800d77c <nk_ifloord>:
NK_LIB int
nk_ifloord(double x)
{
 800d77c:	b570      	push	{r4, r5, r6, lr}
 800d77e:	ec55 4b10 	vmov	r4, r5, d0
    x = (double)((int)x - ((x < 0.0) ? 1 : 0));
 800d782:	ee10 0a10 	vmov	r0, s0
 800d786:	4629      	mov	r1, r5
 800d788:	f7f3 fa0e 	bl	8000ba8 <__aeabi_d2iz>
 800d78c:	4606      	mov	r6, r0
 800d78e:	2200      	movs	r2, #0
 800d790:	2300      	movs	r3, #0
 800d792:	4620      	mov	r0, r4
 800d794:	4629      	mov	r1, r5
 800d796:	f7f3 f9c9 	bl	8000b2c <__aeabi_dcmplt>
    return (int)x;
}
 800d79a:	2800      	cmp	r0, #0
 800d79c:	bf0c      	ite	eq
 800d79e:	4630      	moveq	r0, r6
 800d7a0:	1e70      	subne	r0, r6, #1
 800d7a2:	bd70      	pop	{r4, r5, r6, pc}

0800d7a4 <nk_log10>:
        return (r > 0.0f) ? t+1: t;
    }
}
NK_LIB int
nk_log10(double n)
{
 800d7a4:	b570      	push	{r4, r5, r6, lr}
 800d7a6:	ec55 4b10 	vmov	r4, r5, d0
    int neg;
    int ret;
    int exp = 0;

    neg = (n < 0) ? 1 : 0;
    ret = (neg) ? (int)-n : (int)n;
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	ee10 0a10 	vmov	r0, s0
 800d7b2:	4629      	mov	r1, r5
 800d7b4:	f7f3 f9ba 	bl	8000b2c <__aeabi_dcmplt>
 800d7b8:	b9c8      	cbnz	r0, 800d7ee <nk_log10+0x4a>
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7f3 f9f3 	bl	8000ba8 <__aeabi_d2iz>
    while ((ret / 10) > 0) {
 800d7c2:	2809      	cmp	r0, #9
 800d7c4:	dd1e      	ble.n	800d804 <nk_log10+0x60>
{
 800d7c6:	2600      	movs	r6, #0
        ret /= 10;
 800d7c8:	490f      	ldr	r1, [pc, #60]	; (800d808 <nk_log10+0x64>)
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	fb81 c200 	smull	ip, r2, r1, r0
 800d7d0:	17c0      	asrs	r0, r0, #31
 800d7d2:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
        exp++;
 800d7d6:	3601      	adds	r6, #1
    while ((ret / 10) > 0) {
 800d7d8:	2b63      	cmp	r3, #99	; 0x63
 800d7da:	dcf6      	bgt.n	800d7ca <nk_log10+0x26>
    }
    if (neg) exp = -exp;
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2300      	movs	r3, #0
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	f7f3 f9a2 	bl	8000b2c <__aeabi_dcmplt>
 800d7e8:	b950      	cbnz	r0, 800d800 <nk_log10+0x5c>
    return exp;
}
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}
    ret = (neg) ? (int)-n : (int)n;
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800d7f4:	f7f3 f9d8 	bl	8000ba8 <__aeabi_d2iz>
    while ((ret / 10) > 0) {
 800d7f8:	2809      	cmp	r0, #9
 800d7fa:	bfd8      	it	le
 800d7fc:	2600      	movle	r6, #0
 800d7fe:	dce2      	bgt.n	800d7c6 <nk_log10+0x22>
    if (neg) exp = -exp;
 800d800:	4276      	negs	r6, r6
    return exp;
 800d802:	e7f2      	b.n	800d7ea <nk_log10+0x46>
    while ((ret / 10) > 0) {
 800d804:	2600      	movs	r6, #0
 800d806:	e7e9      	b.n	800d7dc <nk_log10+0x38>
 800d808:	66666667 	.word	0x66666667

0800d80c <nk_rect>:
{
    return nk_null_rect;
}
NK_API struct nk_rect
nk_rect(float x, float y, float w, float h)
{
 800d80c:	b088      	sub	sp, #32
    struct nk_rect r;
    r.x = x; r.y = y;
    r.w = w; r.h = h;
    return r;
}
 800d80e:	b008      	add	sp, #32
 800d810:	4770      	bx	lr

0800d812 <nk_shrink_rect>:
    ret.x = r.w; ret.y = r.h;
    return ret;
}
NK_LIB struct nk_rect
nk_shrink_rect(struct nk_rect r, float amount)
{
 800d812:	b08c      	sub	sp, #48	; 0x30
    struct nk_rect res;
    r.w = NK_MAX(r.w, 2 * amount);
 800d814:	ee72 7a02 	vadd.f32	s15, s4, s4
 800d818:	eef4 7a41 	vcmp.f32	s15, s2
 800d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d820:	bfc8      	it	gt
 800d822:	eeb0 1a67 	vmovgt.f32	s2, s15
    r.h = NK_MAX(r.h, 2 * amount);
 800d826:	eef4 7a61 	vcmp.f32	s15, s3
 800d82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d82e:	bfc8      	it	gt
 800d830:	eef0 1a67 	vmovgt.f32	s3, s15
    res.x = r.x + amount;
    res.y = r.y + amount;
    res.w = r.w - 2 * amount;
    res.h = r.h - 2 * amount;
    return res;
}
 800d834:	ee30 0a02 	vadd.f32	s0, s0, s4
 800d838:	ee72 0a20 	vadd.f32	s1, s4, s1
 800d83c:	ee31 1a67 	vsub.f32	s2, s2, s15
 800d840:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800d844:	b00c      	add	sp, #48	; 0x30
 800d846:	4770      	bx	lr

0800d848 <nk_vec2>:
    r.h -= 2 * pad.y;
    return r;
}
NK_API struct nk_vec2
nk_vec2(float x, float y)
{
 800d848:	b084      	sub	sp, #16
    struct nk_vec2 ret;
    ret.x = x; ret.y = y;
    return ret;
}
 800d84a:	b004      	add	sp, #16
 800d84c:	4770      	bx	lr
	...

0800d850 <nk_unify>:
    return nk_vec2i(v[0], v[1]);
}
NK_LIB void
nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,
    float x1, float y1)
{
 800d850:	b508      	push	{r3, lr}
    NK_ASSERT(a);
 800d852:	2900      	cmp	r1, #0
 800d854:	d04a      	beq.n	800d8ec <nk_unify+0x9c>
    NK_ASSERT(clip);
 800d856:	2800      	cmp	r0, #0
 800d858:	d04f      	beq.n	800d8fa <nk_unify+0xaa>
    clip->x = NK_MAX(a->x, x0);
 800d85a:	edd1 7a00 	vldr	s15, [r1]
 800d85e:	eef4 7ac0 	vcmpe.f32	s15, s0
 800d862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d866:	bf58      	it	pl
 800d868:	eeb0 0a67 	vmovpl.f32	s0, s15
 800d86c:	ed80 0a00 	vstr	s0, [r0]
    clip->y = NK_MAX(a->y, y0);
 800d870:	edd1 7a01 	vldr	s15, [r1, #4]
 800d874:	eef4 7ae0 	vcmpe.f32	s15, s1
 800d878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87c:	bf58      	it	pl
 800d87e:	eef0 0a67 	vmovpl.f32	s1, s15
 800d882:	edc0 0a01 	vstr	s1, [r0, #4]
    clip->w = NK_MIN(a->x + a->w, x1) - clip->x;
 800d886:	edd1 7a00 	vldr	s15, [r1]
 800d88a:	ed91 7a02 	vldr	s14, [r1, #8]
 800d88e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d892:	eef4 7a41 	vcmp.f32	s15, s2
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	bf48      	it	mi
 800d89c:	eeb0 1a67 	vmovmi.f32	s2, s15
 800d8a0:	ee31 1a40 	vsub.f32	s2, s2, s0
 800d8a4:	ed80 1a02 	vstr	s2, [r0, #8]
    clip->h = NK_MIN(a->y + a->h, y1) - clip->y;
 800d8a8:	edd1 7a01 	vldr	s15, [r1, #4]
 800d8ac:	ed91 7a03 	vldr	s14, [r1, #12]
 800d8b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8b4:	eef4 7a61 	vcmp.f32	s15, s3
 800d8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8bc:	bf48      	it	mi
 800d8be:	eef0 1a67 	vmovmi.f32	s3, s15
 800d8c2:	ee71 1ae0 	vsub.f32	s3, s3, s1
    clip->w = NK_MAX(0, clip->w);
 800d8c6:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800d8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ce:	bfd8      	it	le
 800d8d0:	ed9f 1a0d 	vldrle	s2, [pc, #52]	; 800d908 <nk_unify+0xb8>
 800d8d4:	ed80 1a02 	vstr	s2, [r0, #8]
    clip->h = NK_MAX(0, clip->h);
 800d8d8:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 800d8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e0:	bfd8      	it	le
 800d8e2:	eddf 1a09 	vldrle	s3, [pc, #36]	; 800d908 <nk_unify+0xb8>
 800d8e6:	edc0 1a03 	vstr	s3, [r0, #12]
}
 800d8ea:	bd08      	pop	{r3, pc}
    NK_ASSERT(a);
 800d8ec:	4b07      	ldr	r3, [pc, #28]	; (800d90c <nk_unify+0xbc>)
 800d8ee:	4a08      	ldr	r2, [pc, #32]	; (800d910 <nk_unify+0xc0>)
 800d8f0:	f240 1101 	movw	r1, #257	; 0x101
 800d8f4:	4807      	ldr	r0, [pc, #28]	; (800d914 <nk_unify+0xc4>)
 800d8f6:	f008 fe29 	bl	801654c <__assert_func>
    NK_ASSERT(clip);
 800d8fa:	4b07      	ldr	r3, [pc, #28]	; (800d918 <nk_unify+0xc8>)
 800d8fc:	4a04      	ldr	r2, [pc, #16]	; (800d910 <nk_unify+0xc0>)
 800d8fe:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d902:	4804      	ldr	r0, [pc, #16]	; (800d914 <nk_unify+0xc4>)
 800d904:	f008 fe22 	bl	801654c <__assert_func>
 800d908:	00000000 	.word	0x00000000
 800d90c:	0801ac68 	.word	0x0801ac68
 800d910:	0801b3a0 	.word	0x0801b3a0
 800d914:	0801b358 	.word	0x0801b358
 800d918:	0801b374 	.word	0x0801b374

0800d91c <nk_triangle_from_direction>:
NK_API void
nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,
    float pad_x, float pad_y, enum nk_heading direction)
{
    float w_half, h_half;
    NK_ASSERT(result);
 800d91c:	b3c0      	cbz	r0, 800d990 <nk_triangle_from_direction+0x74>
 800d91e:	eef0 7a41 	vmov.f32	s15, s2
 800d922:	eeb0 7a61 	vmov.f32	s14, s3
 800d926:	4603      	mov	r3, r0

    r.w = NK_MAX(2 * pad_x, r.w);
 800d928:	ee32 6a02 	vadd.f32	s12, s4, s4
 800d92c:	eeb4 6ac1 	vcmpe.f32	s12, s2
 800d930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d934:	bf58      	it	pl
 800d936:	eef0 7a46 	vmovpl.f32	s15, s12
    r.h = NK_MAX(2 * pad_y, r.h);
 800d93a:	ee72 6aa2 	vadd.f32	s13, s5, s5
 800d93e:	eef4 6ae1 	vcmpe.f32	s13, s3
 800d942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d946:	bf58      	it	pl
 800d948:	eeb0 7a66 	vmovpl.f32	s14, s13
    r.w = r.w - 2 * pad_x;
 800d94c:	ee77 7ac6 	vsub.f32	s15, s15, s12
    r.h = r.h - 2 * pad_y;
 800d950:	ee37 7a66 	vsub.f32	s14, s14, s13

    r.x = r.x + pad_x;
 800d954:	ee32 2a00 	vadd.f32	s4, s4, s0
    r.y = r.y + pad_y;
 800d958:	ee72 2aa0 	vadd.f32	s5, s5, s1

    w_half = r.w / 2.0f;
 800d95c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d960:	ee67 6aa6 	vmul.f32	s13, s15, s13
    h_half = r.h / 2.0f;

    if (direction == NK_UP) {
 800d964:	b9e9      	cbnz	r1, 800d9a2 <nk_triangle_from_direction+0x86>
        result[0] = nk_vec2(r.x + w_half, r.y);
 800d966:	ee72 5a26 	vadd.f32	s11, s4, s13
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 800d96a:	ee77 7a82 	vadd.f32	s15, s15, s4
 800d96e:	ee37 7a22 	vadd.f32	s14, s14, s5
        result[2] = nk_vec2(r.x, r.y + r.h);
 800d972:	eeb0 6a47 	vmov.f32	s12, s14
        result[0] = nk_vec2(r.x + w_half, r.y);
 800d976:	edc3 5a00 	vstr	s11, [r3]
 800d97a:	edc3 2a01 	vstr	s5, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 800d97e:	edc3 7a02 	vstr	s15, [r3, #8]
 800d982:	ed83 6a03 	vstr	s12, [r3, #12]
        result[2] = nk_vec2(r.x, r.y + r.h);
 800d986:	ed83 2a04 	vstr	s4, [r3, #16]
 800d98a:	ed83 7a05 	vstr	s14, [r3, #20]
 800d98e:	4770      	bx	lr
{
 800d990:	b500      	push	{lr}
 800d992:	b085      	sub	sp, #20
    NK_ASSERT(result);
 800d994:	4b13      	ldr	r3, [pc, #76]	; (800d9e4 <nk_triangle_from_direction+0xc8>)
 800d996:	4a14      	ldr	r2, [pc, #80]	; (800d9e8 <nk_triangle_from_direction+0xcc>)
 800d998:	f44f 7188 	mov.w	r1, #272	; 0x110
 800d99c:	4813      	ldr	r0, [pc, #76]	; (800d9ec <nk_triangle_from_direction+0xd0>)
 800d99e:	f008 fdd5 	bl	801654c <__assert_func>
    h_half = r.h / 2.0f;
 800d9a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d9a6:	ee27 5a06 	vmul.f32	s10, s14, s12
    } else if (direction == NK_RIGHT) {
 800d9aa:	2901      	cmp	r1, #1
 800d9ac:	d010      	beq.n	800d9d0 <nk_triangle_from_direction+0xb4>
        result[0] = nk_vec2(r.x, r.y);
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
        result[2] = nk_vec2(r.x, r.y + r.h);
    } else if (direction == NK_DOWN) {
 800d9ae:	2902      	cmp	r1, #2
        result[0] = nk_vec2(r.x, r.y);
        result[1] = nk_vec2(r.x + r.w, r.y);
 800d9b0:	ee77 7a82 	vadd.f32	s15, s15, s4
        result[2] = nk_vec2(r.x + w_half, r.y + r.h);
 800d9b4:	ee37 7a22 	vadd.f32	s14, s14, s5
 800d9b8:	eef0 5a42 	vmov.f32	s11, s4
 800d9bc:	eeb0 6a62 	vmov.f32	s12, s5
 800d9c0:	bf0e      	itee	eq
 800d9c2:	ee32 2a26 	vaddeq.f32	s4, s4, s13
    } else {
        result[0] = nk_vec2(r.x, r.y + h_half);
        result[1] = nk_vec2(r.x + r.w, r.y);
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
 800d9c6:	ee72 2a85 	vaddne.f32	s5, s5, s10
 800d9ca:	eeb0 2a67 	vmovne.f32	s4, s15
 800d9ce:	e7d2      	b.n	800d976 <nk_triangle_from_direction+0x5a>
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
 800d9d0:	ee77 7a82 	vadd.f32	s15, s15, s4
 800d9d4:	ee32 6a85 	vadd.f32	s12, s5, s10
        result[2] = nk_vec2(r.x, r.y + r.h);
 800d9d8:	ee37 7a22 	vadd.f32	s14, s14, s5
 800d9dc:	eef0 5a42 	vmov.f32	s11, s4
 800d9e0:	e7c9      	b.n	800d976 <nk_triangle_from_direction+0x5a>
 800d9e2:	bf00      	nop
 800d9e4:	0801b37c 	.word	0x0801b37c
 800d9e8:	0801b384 	.word	0x0801b384
 800d9ec:	0801b358 	.word	0x0801b358

0800d9f0 <nk_create_page_element>:
 *                          PAGE ELEMENT
 *
 * ===============================================================*/
NK_LIB struct nk_page_element*
nk_create_page_element(struct nk_context *ctx)
{
 800d9f0:	b510      	push	{r4, lr}
    struct nk_page_element *elem;
    if (ctx->freelist) {
 800d9f2:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800d9f6:	f8d3 465c 	ldr.w	r4, [r3, #1628]	; 0x65c
 800d9fa:	b18c      	cbz	r4, 800da20 <nk_create_page_element+0x30>
        /* unlink page element from free list */
        elem = ctx->freelist;
        ctx->freelist = elem->next;
 800d9fc:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 800da00:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800da04:	f8c0 365c 	str.w	r3, [r0, #1628]	; 0x65c
        NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
        NK_ASSERT(elem);
        if (!elem) return 0;
    }
    nk_zero_struct(*elem);
 800da08:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800da0c:	4620      	mov	r0, r4
 800da0e:	f007 f9bb 	bl	8014d88 <nk_zero>
    elem->next = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    elem->prev = 0;
 800da18:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    return elem;
}
 800da1c:	4620      	mov	r0, r4
 800da1e:	bd10      	pop	{r4, pc}
    } else if (ctx->use_pool) {
 800da20:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800da24:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800da28:	b16b      	cbz	r3, 800da46 <nk_create_page_element+0x56>
        elem = nk_pool_alloc(&ctx->pool);
 800da2a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
 800da2e:	3024      	adds	r0, #36	; 0x24
 800da30:	f001 fa08 	bl	800ee44 <nk_pool_alloc>
        NK_ASSERT(elem);
 800da34:	4604      	mov	r4, r0
 800da36:	2800      	cmp	r0, #0
 800da38:	d1e6      	bne.n	800da08 <nk_create_page_element+0x18>
 800da3a:	4b0c      	ldr	r3, [pc, #48]	; (800da6c <nk_create_page_element+0x7c>)
 800da3c:	4a0c      	ldr	r2, [pc, #48]	; (800da70 <nk_create_page_element+0x80>)
 800da3e:	2114      	movs	r1, #20
 800da40:	480c      	ldr	r0, [pc, #48]	; (800da74 <nk_create_page_element+0x84>)
 800da42:	f008 fd83 	bl	801654c <__assert_func>
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
 800da46:	2304      	movs	r3, #4
 800da48:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800da4c:	2101      	movs	r1, #1
 800da4e:	f500 50d4 	add.w	r0, r0, #6784	; 0x1a80
 800da52:	300c      	adds	r0, #12
 800da54:	f7fb fc80 	bl	8009358 <nk_buffer_alloc>
        NK_ASSERT(elem);
 800da58:	4604      	mov	r4, r0
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d1d4      	bne.n	800da08 <nk_create_page_element+0x18>
 800da5e:	4b03      	ldr	r3, [pc, #12]	; (800da6c <nk_create_page_element+0x7c>)
 800da60:	4a03      	ldr	r2, [pc, #12]	; (800da70 <nk_create_page_element+0x80>)
 800da62:	211b      	movs	r1, #27
 800da64:	4803      	ldr	r0, [pc, #12]	; (800da74 <nk_create_page_element+0x84>)
 800da66:	f008 fd71 	bl	801654c <__assert_func>
 800da6a:	bf00      	nop
 800da6c:	0801b3ac 	.word	0x0801b3ac
 800da70:	0801b3d8 	.word	0x0801b3d8
 800da74:	0801b3b4 	.word	0x0801b3b4

0800da78 <nk_link_page_element_into_freelist>:
NK_LIB void
nk_link_page_element_into_freelist(struct nk_context *ctx,
    struct nk_page_element *elem)
{
    /* link table into freelist */
    if (!ctx->freelist) {
 800da78:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800da7c:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 800da80:	b10b      	cbz	r3, 800da86 <nk_link_page_element_into_freelist+0xe>
        ctx->freelist = elem;
    } else {
        elem->next = ctx->freelist;
 800da82:	f8c1 31a8 	str.w	r3, [r1, #424]	; 0x1a8
        ctx->freelist = elem;
 800da86:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800da8a:	f8c0 165c 	str.w	r1, [r0, #1628]	; 0x65c
        ctx->freelist = elem;
    }
}
 800da8e:	4770      	bx	lr

0800da90 <nk_free_page_element>:
NK_LIB void
nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)
{
 800da90:	b510      	push	{r4, lr}
    /* we have a pool so just add to free list */
    if (ctx->use_pool) {
 800da92:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800da96:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800da9a:	b96b      	cbnz	r3, 800dab8 <nk_free_page_element+0x28>
        nk_link_page_element_into_freelist(ctx, elem);
        return;
    }
    /* if possible remove last element from back of fixed memory buffer */
    {void *elem_end = (void*)(elem + 1);
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 800da9c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800daa0:	f8d3 4ac4 	ldr.w	r4, [r3, #2756]	; 0xac4
    {void *elem_end = (void*)(elem + 1);
 800daa4:	f501 72d8 	add.w	r2, r1, #432	; 0x1b0
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 800daa8:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800daac:	4423      	add	r3, r4
    if (elem_end == buffer_end)
 800daae:	429a      	cmp	r2, r3
 800dab0:	d005      	beq.n	800dabe <nk_free_page_element+0x2e>
        ctx->memory.size -= sizeof(struct nk_page_element);
    else nk_link_page_element_into_freelist(ctx, elem);}
 800dab2:	f7ff ffe1 	bl	800da78 <nk_link_page_element_into_freelist>
}
 800dab6:	bd10      	pop	{r4, pc}
        nk_link_page_element_into_freelist(ctx, elem);
 800dab8:	f7ff ffde 	bl	800da78 <nk_link_page_element_into_freelist>
        return;
 800dabc:	e7fb      	b.n	800dab6 <nk_free_page_element+0x26>
        ctx->memory.size -= sizeof(struct nk_page_element);
 800dabe:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dac2:	f5a4 74d8 	sub.w	r4, r4, #432	; 0x1b0
 800dac6:	f8c0 4ac4 	str.w	r4, [r0, #2756]	; 0xac4
 800daca:	e7f4      	b.n	800dab6 <nk_free_page_element+0x26>

0800dacc <nk_create_panel>:
 *                              PANEL
 *
 * ===============================================================*/
NK_LIB void*
nk_create_panel(struct nk_context *ctx)
{
 800dacc:	b510      	push	{r4, lr}
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 800dace:	f7ff ff8f 	bl	800d9f0 <nk_create_page_element>
    if (!elem) return 0;
 800dad2:	4604      	mov	r4, r0
 800dad4:	b118      	cbz	r0, 800dade <nk_create_panel+0x12>
    nk_zero_struct(*elem);
 800dad6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800dada:	f007 f955 	bl	8014d88 <nk_zero>
    return &elem->data.pan;
}
 800dade:	4620      	mov	r0, r4
 800dae0:	bd10      	pop	{r4, pc}

0800dae2 <nk_free_panel>:
NK_LIB void
nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)
{
 800dae2:	b508      	push	{r3, lr}
    union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
    nk_free_page_element(ctx, pe);
 800dae4:	f7ff ffd4 	bl	800da90 <nk_free_page_element>
}
 800dae8:	bd08      	pop	{r3, pc}

0800daea <nk_panel_has_header>:
NK_LIB nk_bool
nk_panel_has_header(nk_flags flags, const char *title)
{
    nk_bool active = 0;
    active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));
    active = active || (flags & NK_WINDOW_TITLE);
 800daea:	f010 0f58 	tst.w	r0, #88	; 0x58
 800daee:	d006      	beq.n	800dafe <nk_panel_has_header+0x14>
    active = active && !(flags & NK_WINDOW_HIDDEN) && title;
 800daf0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800daf4:	d105      	bne.n	800db02 <nk_panel_has_header+0x18>
 800daf6:	1e08      	subs	r0, r1, #0
 800daf8:	bf18      	it	ne
 800dafa:	2001      	movne	r0, #1
 800dafc:	4770      	bx	lr
 800dafe:	2000      	movs	r0, #0
 800db00:	4770      	bx	lr
 800db02:	2000      	movs	r0, #0
    return active;
}
 800db04:	4770      	bx	lr

0800db06 <nk_panel_get_padding>:
NK_LIB struct nk_vec2
nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)
{
 800db06:	b084      	sub	sp, #16
    switch (type) {
 800db08:	2920      	cmp	r1, #32
 800db0a:	d816      	bhi.n	800db3a <nk_panel_get_padding+0x34>
 800db0c:	2901      	cmp	r1, #1
 800db0e:	d920      	bls.n	800db52 <nk_panel_get_padding+0x4c>
 800db10:	3902      	subs	r1, #2
 800db12:	291e      	cmp	r1, #30
 800db14:	d81d      	bhi.n	800db52 <nk_panel_get_padding+0x4c>
 800db16:	e8df f001 	tbb	[pc, r1]
 800db1a:	1c29      	.short	0x1c29
 800db1c:	1c1c1c31 	.word	0x1c1c1c31
 800db20:	1c1c1c1c 	.word	0x1c1c1c1c
 800db24:	1c1c1c1c 	.word	0x1c1c1c1c
 800db28:	1c1c1c39 	.word	0x1c1c1c39
 800db2c:	1c1c1c1c 	.word	0x1c1c1c1c
 800db30:	1c1c1c1c 	.word	0x1c1c1c1c
 800db34:	1c1c1c1c 	.word	0x1c1c1c1c
 800db38:	41          	.byte	0x41
 800db39:	00          	.byte	0x00
 800db3a:	2940      	cmp	r1, #64	; 0x40
 800db3c:	d036      	beq.n	800dbac <nk_panel_get_padding+0xa6>
 800db3e:	2980      	cmp	r1, #128	; 0x80
 800db40:	d107      	bne.n	800db52 <nk_panel_get_padding+0x4c>
    case NK_PANEL_GROUP: return style->window.group_padding;
    case NK_PANEL_POPUP: return style->window.popup_padding;
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
    case NK_PANEL_COMBO: return style->window.combo_padding;
    case NK_PANEL_MENU: return style->window.menu_padding;
    case NK_PANEL_TOOLTIP: return style->window.menu_padding;}
 800db42:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
 800db46:	3014      	adds	r0, #20
 800db48:	c803      	ldmia	r0, {r0, r1}
 800db4a:	ab04      	add	r3, sp, #16
 800db4c:	e903 0003 	stmdb	r3, {r0, r1}
 800db50:	e006      	b.n	800db60 <nk_panel_get_padding+0x5a>
    case NK_PANEL_WINDOW: return style->window.padding;
 800db52:	f500 50c7 	add.w	r0, r0, #6368	; 0x18e0
 800db56:	300c      	adds	r0, #12
 800db58:	c803      	ldmia	r0, {r0, r1}
 800db5a:	ab04      	add	r3, sp, #16
 800db5c:	e903 0003 	stmdb	r3, {r0, r1}
}
 800db60:	ed9d 0a02 	vldr	s0, [sp, #8]
 800db64:	eddd 0a03 	vldr	s1, [sp, #12]
 800db68:	b004      	add	sp, #16
 800db6a:	4770      	bx	lr
    case NK_PANEL_GROUP: return style->window.group_padding;
 800db6c:	f500 50c7 	add.w	r0, r0, #6368	; 0x18e0
 800db70:	3014      	adds	r0, #20
 800db72:	c803      	ldmia	r0, {r0, r1}
 800db74:	ab04      	add	r3, sp, #16
 800db76:	e903 0003 	stmdb	r3, {r0, r1}
 800db7a:	e7f1      	b.n	800db60 <nk_panel_get_padding+0x5a>
    case NK_PANEL_POPUP: return style->window.popup_padding;
 800db7c:	f500 50c7 	add.w	r0, r0, #6368	; 0x18e0
 800db80:	301c      	adds	r0, #28
 800db82:	c803      	ldmia	r0, {r0, r1}
 800db84:	ab04      	add	r3, sp, #16
 800db86:	e903 0003 	stmdb	r3, {r0, r1}
 800db8a:	e7e9      	b.n	800db60 <nk_panel_get_padding+0x5a>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
 800db8c:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
 800db90:	300c      	adds	r0, #12
 800db92:	c803      	ldmia	r0, {r0, r1}
 800db94:	ab04      	add	r3, sp, #16
 800db96:	e903 0003 	stmdb	r3, {r0, r1}
 800db9a:	e7e1      	b.n	800db60 <nk_panel_get_padding+0x5a>
    case NK_PANEL_COMBO: return style->window.combo_padding;
 800db9c:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
 800dba0:	3004      	adds	r0, #4
 800dba2:	c803      	ldmia	r0, {r0, r1}
 800dba4:	ab04      	add	r3, sp, #16
 800dba6:	e903 0003 	stmdb	r3, {r0, r1}
 800dbaa:	e7d9      	b.n	800db60 <nk_panel_get_padding+0x5a>
    case NK_PANEL_MENU: return style->window.menu_padding;
 800dbac:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
 800dbb0:	3014      	adds	r0, #20
 800dbb2:	c803      	ldmia	r0, {r0, r1}
 800dbb4:	ab04      	add	r3, sp, #16
 800dbb6:	e903 0003 	stmdb	r3, {r0, r1}
 800dbba:	e7d1      	b.n	800db60 <nk_panel_get_padding+0x5a>

0800dbbc <nk_panel_get_border>:
NK_LIB float
nk_panel_get_border(const struct nk_style *style, nk_flags flags,
    enum nk_panel_type type)
{
    if (flags & NK_WINDOW_BORDER) {
 800dbbc:	f011 0f01 	tst.w	r1, #1
 800dbc0:	d03f      	beq.n	800dc42 <nk_panel_get_border+0x86>
        switch (type) {
 800dbc2:	2a20      	cmp	r2, #32
 800dbc4:	d816      	bhi.n	800dbf4 <nk_panel_get_border+0x38>
 800dbc6:	2a01      	cmp	r2, #1
 800dbc8:	d91d      	bls.n	800dc06 <nk_panel_get_border+0x4a>
 800dbca:	3a02      	subs	r2, #2
 800dbcc:	2a1e      	cmp	r2, #30
 800dbce:	d81a      	bhi.n	800dc06 <nk_panel_get_border+0x4a>
 800dbd0:	e8df f002 	tbb	[pc, r2]
 800dbd4:	1923191e 	.word	0x1923191e
 800dbd8:	19191919 	.word	0x19191919
 800dbdc:	19191919 	.word	0x19191919
 800dbe0:	19281919 	.word	0x19281919
 800dbe4:	19191919 	.word	0x19191919
 800dbe8:	19191919 	.word	0x19191919
 800dbec:	19191919 	.word	0x19191919
 800dbf0:	1919      	.short	0x1919
 800dbf2:	2d          	.byte	0x2d
 800dbf3:	00          	.byte	0x00
 800dbf4:	2a40      	cmp	r2, #64	; 0x40
 800dbf6:	d01f      	beq.n	800dc38 <nk_panel_get_border+0x7c>
 800dbf8:	2a80      	cmp	r2, #128	; 0x80
 800dbfa:	d104      	bne.n	800dc06 <nk_panel_get_border+0x4a>
        case NK_PANEL_GROUP: return style->window.group_border;
        case NK_PANEL_POPUP: return style->window.popup_border;
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
        case NK_PANEL_COMBO: return style->window.combo_border;
        case NK_PANEL_MENU: return style->window.menu_border;
        case NK_PANEL_TOOLTIP: return style->window.menu_border;
 800dbfc:	f500 50c5 	add.w	r0, r0, #6304	; 0x18a0
 800dc00:	ed90 0a07 	vldr	s0, [r0, #28]
 800dc04:	4770      	bx	lr
        case NK_PANEL_WINDOW: return style->window.border;
 800dc06:	f500 50c5 	add.w	r0, r0, #6304	; 0x18a0
 800dc0a:	ed90 0a04 	vldr	s0, [r0, #16]
 800dc0e:	4770      	bx	lr
        case NK_PANEL_GROUP: return style->window.group_border;
 800dc10:	f500 50c6 	add.w	r0, r0, #6336	; 0x18c0
 800dc14:	ed90 0a00 	vldr	s0, [r0]
 800dc18:	4770      	bx	lr
        case NK_PANEL_POPUP: return style->window.popup_border;
 800dc1a:	f500 50c6 	add.w	r0, r0, #6336	; 0x18c0
 800dc1e:	ed90 0a02 	vldr	s0, [r0, #8]
 800dc22:	4770      	bx	lr
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
 800dc24:	f500 50c5 	add.w	r0, r0, #6304	; 0x18a0
 800dc28:	ed90 0a06 	vldr	s0, [r0, #24]
 800dc2c:	4770      	bx	lr
        case NK_PANEL_COMBO: return style->window.combo_border;
 800dc2e:	f500 50c5 	add.w	r0, r0, #6304	; 0x18a0
 800dc32:	ed90 0a05 	vldr	s0, [r0, #20]
 800dc36:	4770      	bx	lr
        case NK_PANEL_MENU: return style->window.menu_border;
 800dc38:	f500 50c5 	add.w	r0, r0, #6304	; 0x18a0
 800dc3c:	ed90 0a07 	vldr	s0, [r0, #28]
 800dc40:	4770      	bx	lr
    }} else return 0;
 800dc42:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc48 <nk_panel_get_border+0x8c>
}
 800dc46:	4770      	bx	lr
 800dc48:	00000000 	.word	0x00000000

0800dc4c <nk_panel_get_border_color>:
NK_LIB struct nk_color
nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)
{
 800dc4c:	b082      	sub	sp, #8
    switch (type) {
 800dc4e:	2920      	cmp	r1, #32
 800dc50:	d816      	bhi.n	800dc80 <nk_panel_get_border_color+0x34>
 800dc52:	2901      	cmp	r1, #1
 800dc54:	d91e      	bls.n	800dc94 <nk_panel_get_border_color+0x48>
 800dc56:	3902      	subs	r1, #2
 800dc58:	291e      	cmp	r1, #30
 800dc5a:	d81b      	bhi.n	800dc94 <nk_panel_get_border_color+0x48>
 800dc5c:	e8df f001 	tbb	[pc, r1]
 800dc60:	1a381a32 	.word	0x1a381a32
 800dc64:	1a1a1a1a 	.word	0x1a1a1a1a
 800dc68:	1a1a1a1a 	.word	0x1a1a1a1a
 800dc6c:	1a3e1a1a 	.word	0x1a3e1a1a
 800dc70:	1a1a1a1a 	.word	0x1a1a1a1a
 800dc74:	1a1a1a1a 	.word	0x1a1a1a1a
 800dc78:	1a1a1a1a 	.word	0x1a1a1a1a
 800dc7c:	1a1a      	.short	0x1a1a
 800dc7e:	44          	.byte	0x44
 800dc7f:	00          	.byte	0x00
 800dc80:	2940      	cmp	r1, #64	; 0x40
 800dc82:	d037      	beq.n	800dcf4 <nk_panel_get_border_color+0xa8>
 800dc84:	2980      	cmp	r1, #128	; 0x80
 800dc86:	d105      	bne.n	800dc94 <nk_panel_get_border_color+0x48>
    case NK_PANEL_GROUP: return style->window.group_border_color;
    case NK_PANEL_POPUP: return style->window.popup_border_color;
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
    case NK_PANEL_COMBO: return style->window.combo_border_color;
    case NK_PANEL_MENU: return style->window.menu_border_color;
    case NK_PANEL_TOOLTIP: return style->window.menu_border_color;}
 800dc88:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dc8c:	f8d0 3888 	ldr.w	r3, [r0, #2184]	; 0x888
 800dc90:	9301      	str	r3, [sp, #4]
 800dc92:	e004      	b.n	800dc9e <nk_panel_get_border_color+0x52>
    case NK_PANEL_WINDOW: return style->window.border_color;
 800dc94:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dc98:	f8d0 3878 	ldr.w	r3, [r0, #2168]	; 0x878
 800dc9c:	9301      	str	r3, [sp, #4]
}
 800dc9e:	2000      	movs	r0, #0
 800dca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dca4:	f363 0007 	bfi	r0, r3, #0, #8
 800dca8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcac:	f363 200f 	bfi	r0, r3, #8, #8
 800dcb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcb4:	f363 4017 	bfi	r0, r3, #16, #8
 800dcb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcbc:	f363 601f 	bfi	r0, r3, #24, #8
 800dcc0:	b002      	add	sp, #8
 800dcc2:	4770      	bx	lr
    case NK_PANEL_GROUP: return style->window.group_border_color;
 800dcc4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dcc8:	f8d0 388c 	ldr.w	r3, [r0, #2188]	; 0x88c
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	e7e6      	b.n	800dc9e <nk_panel_get_border_color+0x52>
    case NK_PANEL_POPUP: return style->window.popup_border_color;
 800dcd0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dcd4:	f8d0 387c 	ldr.w	r3, [r0, #2172]	; 0x87c
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	e7e0      	b.n	800dc9e <nk_panel_get_border_color+0x52>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
 800dcdc:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dce0:	f8d0 3884 	ldr.w	r3, [r0, #2180]	; 0x884
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	e7da      	b.n	800dc9e <nk_panel_get_border_color+0x52>
    case NK_PANEL_COMBO: return style->window.combo_border_color;
 800dce8:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dcec:	f8d0 3880 	ldr.w	r3, [r0, #2176]	; 0x880
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	e7d4      	b.n	800dc9e <nk_panel_get_border_color+0x52>
    case NK_PANEL_MENU: return style->window.menu_border_color;
 800dcf4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800dcf8:	f8d0 3888 	ldr.w	r3, [r0, #2184]	; 0x888
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	e7ce      	b.n	800dc9e <nk_panel_get_border_color+0x52>

0800dd00 <nk_panel_begin>:
{
    return (type & NK_PANEL_SET_NONBLOCK)?1:0;
}
NK_LIB nk_bool
nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)
{
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	ed2d 8b04 	vpush	{d8-d9}
 800dd08:	b099      	sub	sp, #100	; 0x64
 800dd0a:	9105      	str	r1, [sp, #20]
    const struct nk_user_font *font;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f000 80fc 	beq.w	800df0a <nk_panel_begin+0x20a>
 800dd12:	4617      	mov	r7, r2
 800dd14:	4606      	mov	r6, r0
    NK_ASSERT(ctx->current);
 800dd16:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800dd1a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 80f9 	beq.w	800df16 <nk_panel_begin+0x216>
    NK_ASSERT(ctx->current->layout);
 800dd24:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	f000 80fa 	beq.w	800df22 <nk_panel_begin+0x222>
    if (!ctx || !ctx->current || !ctx->current->layout) return 0;
    nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));
 800dd2e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800dd32:	f007 f829 	bl	8014d88 <nk_zero>
    if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {
 800dd36:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 800dd3a:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 800dd3e:	f8d5 8048 	ldr.w	r8, [r5, #72]	; 0x48
 800dd42:	f418 4fc0 	tst.w	r8, #24576	; 0x6000
 800dd46:	f040 80f2 	bne.w	800df2e <nk_panel_begin+0x22e>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
        ctx->current->layout->type = panel_type;
        return 0;
    }
    /* pull state into local stack */
    style = &ctx->style;
 800dd4a:	f506 70b4 	add.w	r0, r6, #360	; 0x168
 800dd4e:	9006      	str	r0, [sp, #24]
    font = style->font;
 800dd50:	f8d6 9168 	ldr.w	r9, [r6, #360]	; 0x168
    win = ctx->current;
    layout = win->layout;
 800dd54:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
    out = &win->buffer;
 800dd58:	f105 0a64 	add.w	sl, r5, #100	; 0x64
    in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;
 800dd5c:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800dd60:	bf0c      	ite	eq
 800dd62:	46b3      	moveq	fp, r6
 800dd64:	f04f 0b00 	movne.w	fp, #0
#ifdef NK_INCLUDE_COMMAND_USERDATA
    win->buffer.userdata = ctx->userdata;
#endif
    /* pull style configuration into local stack */
    scrollbar_size = style->window.scrollbar_size;
 800dd68:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800dd6c:	f603 2244 	addw	r2, r3, #2628	; 0xa44
 800dd70:	ed92 9a00 	vldr	s18, [r2]
 800dd74:	f603 2348 	addw	r3, r3, #2632	; 0xa48
 800dd78:	edd3 8a00 	vldr	s17, [r3]
    panel_padding = nk_panel_get_padding(style, panel_type);
 800dd7c:	4639      	mov	r1, r7
 800dd7e:	f7ff fec2 	bl	800db06 <nk_panel_get_padding>
 800dd82:	eeb0 8a40 	vmov.f32	s16, s0
 800dd86:	eef0 9a60 	vmov.f32	s19, s1
 800dd8a:	ed8d 0a16 	vstr	s0, [sp, #88]	; 0x58
 800dd8e:	edcd 0a17 	vstr	s1, [sp, #92]	; 0x5c

    /* window movement */
    if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {
 800dd92:	f241 0302 	movw	r3, #4098	; 0x1002
 800dd96:	ea08 0303 	and.w	r3, r8, r3
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	f000 80d6 	beq.w	800df4c <nk_panel_begin+0x24c>
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
        }
    }

    /* setup panel */
    layout->type = panel_type;
 800dda0:	7027      	strb	r7, [r4, #0]
    layout->flags = win->flags;
 800dda2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800dda4:	6063      	str	r3, [r4, #4]
    layout->bounds = win->bounds;
 800dda6:	f104 0c08 	add.w	ip, r4, #8
 800ddaa:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 800ddae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    layout->bounds.x += panel_padding.x;
 800ddb4:	edd4 7a02 	vldr	s15, [r4, #8]
 800ddb8:	ee77 7a88 	vadd.f32	s15, s15, s16
 800ddbc:	edc4 7a02 	vstr	s15, [r4, #8]
    layout->bounds.w -= 2*panel_padding.x;
 800ddc0:	ee38 8a08 	vadd.f32	s16, s16, s16
 800ddc4:	edd4 7a04 	vldr	s15, [r4, #16]
 800ddc8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ddcc:	edc4 7a04 	vstr	s15, [r4, #16]
    if (win->flags & NK_WINDOW_BORDER) {
 800ddd0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800ddd2:	f011 0f01 	tst.w	r1, #1
 800ddd6:	f040 811e 	bne.w	800e016 <nk_panel_begin+0x316>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
    } else layout->border = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	6363      	str	r3, [r4, #52]	; 0x34
    layout->at_y = layout->bounds.y;
 800ddde:	68e3      	ldr	r3, [r4, #12]
 800dde0:	6263      	str	r3, [r4, #36]	; 0x24
    layout->at_x = layout->bounds.x;
 800dde2:	68a3      	ldr	r3, [r4, #8]
 800dde4:	6223      	str	r3, [r4, #32]
    layout->max_x = 0;
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
    layout->header_height = 0;
 800ddee:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    layout->footer_height = 0;
 800ddf2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    nk_layout_reset_min_row_height(ctx);
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	f7ff f85e 	bl	800ceb8 <nk_layout_reset_min_row_height>
    layout->row.index = 0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	66a3      	str	r3, [r4, #104]	; 0x68
    layout->row.columns = 0;
 800de00:	6763      	str	r3, [r4, #116]	; 0x74
    layout->row.ratio = 0;
 800de02:	67a3      	str	r3, [r4, #120]	; 0x78
    layout->row.item_width = 0;
 800de04:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
    layout->row.tree_depth = 0;
 800de08:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    layout->row.height = panel_padding.y;
 800de0c:	edc4 9a1b 	vstr	s19, [r4, #108]	; 0x6c
    layout->has_scrolling = nk_true;
 800de10:	2301      	movs	r3, #1
 800de12:	63a3      	str	r3, [r4, #56]	; 0x38
    if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))
 800de14:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800de16:	f013 0f20 	tst.w	r3, #32
 800de1a:	d105      	bne.n	800de28 <nk_panel_begin+0x128>
        layout->bounds.w -= scrollbar_size.x;
 800de1c:	edd4 7a04 	vldr	s15, [r4, #16]
 800de20:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800de24:	edc4 7a04 	vstr	s15, [r4, #16]
    if (!nk_panel_is_nonblock(panel_type)) {
 800de28:	f017 0ff0 	tst.w	r7, #240	; 0xf0
 800de2c:	d112      	bne.n	800de54 <nk_panel_begin+0x154>
        layout->footer_height = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)
 800de32:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800de34:	f003 0324 	and.w	r3, r3, #36	; 0x24
            layout->footer_height = scrollbar_size.y;
 800de38:	2b20      	cmp	r3, #32
 800de3a:	eddf 7a89 	vldr	s15, [pc, #548]	; 800e060 <nk_panel_begin+0x360>
 800de3e:	bf08      	it	eq
 800de40:	eef0 8a67 	vmoveq.f32	s17, s15
 800de44:	edc4 8a0b 	vstr	s17, [r4, #44]	; 0x2c
        layout->bounds.h -= layout->footer_height;
 800de48:	edd4 7a05 	vldr	s15, [r4, #20]
 800de4c:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800de50:	edc4 7a05 	vstr	s15, [r4, #20]
    }

    /* panel header */
    if (nk_panel_has_header(win->flags, title))
 800de54:	9905      	ldr	r1, [sp, #20]
 800de56:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800de58:	f7ff fe47 	bl	800daea <nk_panel_has_header>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	f000 821f 	beq.w	800e2a0 <nk_panel_begin+0x5a0>
        struct nk_text text;
        struct nk_rect header;
        const struct nk_style_item *background = 0;

        /* calculate header bounds */
        header.x = win->bounds.x;
 800de62:	ed95 9a13 	vldr	s18, [r5, #76]	; 0x4c
        header.y = win->bounds.y;
 800de66:	edd5 9a14 	vldr	s19, [r5, #80]	; 0x50
        header.w = win->bounds.w;
 800de6a:	edd5 8a15 	vldr	s17, [r5, #84]	; 0x54
        header.h = font->height + 2.0f * style->window.header.padding.y;
 800de6e:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800de72:	f603 12ac 	addw	r2, r3, #2476	; 0x9ac
 800de76:	ed92 8a00 	vldr	s16, [r2]
 800de7a:	ee38 8a08 	vadd.f32	s16, s16, s16
 800de7e:	edd9 7a01 	vldr	s15, [r9, #4]
 800de82:	ee38 8a27 	vadd.f32	s16, s16, s15
        header.h += (2.0f * style->window.header.label_padding.y);
 800de86:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 800de8a:	edd3 7a00 	vldr	s15, [r3]
 800de8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800de92:	ee38 8a27 	vadd.f32	s16, s16, s15

        /* shrink panel by header */
        layout->header_height = header.h;
 800de96:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
        layout->bounds.y += header.h;
 800de9a:	edd4 7a03 	vldr	s15, [r4, #12]
 800de9e:	ee77 7a88 	vadd.f32	s15, s15, s16
 800dea2:	edc4 7a03 	vstr	s15, [r4, #12]
        layout->bounds.h -= header.h;
 800dea6:	edd4 7a05 	vldr	s15, [r4, #20]
 800deaa:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800deae:	edc4 7a05 	vstr	s15, [r4, #20]
        layout->at_y += header.h;
 800deb2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800deb6:	ee77 7a88 	vadd.f32	s15, s15, s16
 800deba:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

        /* select correct header background and text color */
        if (ctx->active == win) {
 800debe:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 800dec2:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800dec6:	429d      	cmp	r5, r3
 800dec8:	f000 80cc 	beq.w	800e064 <nk_panel_begin+0x364>
            background = &style->window.header.active;
            text.text = style->window.header.label_active;
        } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {
 800decc:	ed8d 9a0e 	vstr	s18, [sp, #56]	; 0x38
 800ded0:	edcd 9a0f 	vstr	s19, [sp, #60]	; 0x3c
 800ded4:	edcd 8a10 	vstr	s17, [sp, #64]	; 0x40
 800ded8:	ed8d 8a11 	vstr	s16, [sp, #68]	; 0x44
 800dedc:	eeb0 0a49 	vmov.f32	s0, s18
 800dee0:	eef0 0a69 	vmov.f32	s1, s19
 800dee4:	eeb0 1a68 	vmov.f32	s2, s17
 800dee8:	eef0 1a48 	vmov.f32	s3, s16
 800deec:	4630      	mov	r0, r6
 800deee:	f7fe ff2b 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 800def2:	2800      	cmp	r0, #0
 800def4:	f000 822a 	beq.w	800e34c <nk_panel_begin+0x64c>
            background = &style->window.header.hover;
 800def8:	f506 57c1 	add.w	r7, r6, #6176	; 0x1820
 800defc:	3710      	adds	r7, #16
            text.text = style->window.header.label_hover;
 800defe:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800df02:	f8d3 099f 	ldr.w	r0, [r3, #2463]	; 0x99f
 800df06:	900d      	str	r0, [sp, #52]	; 0x34
 800df08:	e0b4      	b.n	800e074 <nk_panel_begin+0x374>
    NK_ASSERT(ctx);
 800df0a:	4b50      	ldr	r3, [pc, #320]	; (800e04c <nk_panel_begin+0x34c>)
 800df0c:	4a50      	ldr	r2, [pc, #320]	; (800e050 <nk_panel_begin+0x350>)
 800df0e:	2163      	movs	r1, #99	; 0x63
 800df10:	4850      	ldr	r0, [pc, #320]	; (800e054 <nk_panel_begin+0x354>)
 800df12:	f008 fb1b 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800df16:	4b50      	ldr	r3, [pc, #320]	; (800e058 <nk_panel_begin+0x358>)
 800df18:	4a4d      	ldr	r2, [pc, #308]	; (800e050 <nk_panel_begin+0x350>)
 800df1a:	2164      	movs	r1, #100	; 0x64
 800df1c:	484d      	ldr	r0, [pc, #308]	; (800e054 <nk_panel_begin+0x354>)
 800df1e:	f008 fb15 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800df22:	4b4e      	ldr	r3, [pc, #312]	; (800e05c <nk_panel_begin+0x35c>)
 800df24:	4a4a      	ldr	r2, [pc, #296]	; (800e050 <nk_panel_begin+0x350>)
 800df26:	2165      	movs	r1, #101	; 0x65
 800df28:	484a      	ldr	r0, [pc, #296]	; (800e054 <nk_panel_begin+0x354>)
 800df2a:	f008 fb0f 	bl	801654c <__assert_func>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
 800df2e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800df32:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 800df36:	f006 ff27 	bl	8014d88 <nk_zero>
        ctx->current->layout->type = panel_type;
 800df3a:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 800df3e:	f8d6 3658 	ldr.w	r3, [r6, #1624]	; 0x658
 800df42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df46:	701f      	strb	r7, [r3, #0]
        return 0;
 800df48:	2000      	movs	r0, #0
 800df4a:	e1fa      	b.n	800e342 <nk_panel_begin+0x642>
        header.x = win->bounds.x;
 800df4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800df4e:	9312      	str	r3, [sp, #72]	; 0x48
        header.y = win->bounds.y;
 800df50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800df52:	9313      	str	r3, [sp, #76]	; 0x4c
        header.w = win->bounds.w;
 800df54:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800df56:	9314      	str	r3, [sp, #80]	; 0x50
        if (nk_panel_has_header(win->flags, title)) {
 800df58:	9905      	ldr	r1, [sp, #20]
 800df5a:	4640      	mov	r0, r8
 800df5c:	f7ff fdc5 	bl	800daea <nk_panel_has_header>
 800df60:	2800      	cmp	r0, #0
 800df62:	d055      	beq.n	800e010 <nk_panel_begin+0x310>
            header.h = font->height + 2.0f * style->window.header.padding.y;
 800df64:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800df68:	f603 12ac 	addw	r2, r3, #2476	; 0x9ac
 800df6c:	edd2 1a00 	vldr	s3, [r2]
 800df70:	ee71 1aa1 	vadd.f32	s3, s3, s3
 800df74:	edd9 7a01 	vldr	s15, [r9, #4]
 800df78:	ee71 1aa7 	vadd.f32	s3, s3, s15
            header.h += 2.0f * style->window.header.label_padding.y;
 800df7c:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 800df80:	edd3 7a00 	vldr	s15, [r3]
 800df84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800df88:	ee71 1aa7 	vadd.f32	s3, s3, s15
        left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 800df8c:	f8db 8104 	ldr.w	r8, [fp, #260]	; 0x104
        left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 800df90:	f8db 3108 	ldr.w	r3, [fp, #264]	; 0x108
 800df94:	9307      	str	r3, [sp, #28]
        left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 800df96:	edcd 1a15 	vstr	s3, [sp, #84]	; 0x54
 800df9a:	2201      	movs	r2, #1
 800df9c:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 800dfa0:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800dfa4:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	4658      	mov	r0, fp
 800dfac:	f7fe fe94 	bl	800ccd8 <nk_input_has_mouse_click_down_in_rect>
        if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 800dfb0:	f1b8 0f00 	cmp.w	r8, #0
 800dfb4:	f43f aef4 	beq.w	800dda0 <nk_panel_begin+0xa0>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	f43f aef1 	beq.w	800dda0 <nk_panel_begin+0xa0>
 800dfbe:	9b07      	ldr	r3, [sp, #28]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f47f aeed 	bne.w	800dda0 <nk_panel_begin+0xa0>
            win->bounds.x = win->bounds.x + in->mouse.delta.x;
 800dfc6:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
 800dfca:	ed9b 7a55 	vldr	s14, [fp, #340]	; 0x154
 800dfce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfd2:	edc5 7a13 	vstr	s15, [r5, #76]	; 0x4c
            win->bounds.y = win->bounds.y + in->mouse.delta.y;
 800dfd6:	edd5 7a14 	vldr	s15, [r5, #80]	; 0x50
 800dfda:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800dfde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfe2:	edc5 7a14 	vstr	s15, [r5, #80]	; 0x50
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;
 800dfe6:	eddb 7a43 	vldr	s15, [fp, #268]	; 0x10c
 800dfea:	ed9b 7a55 	vldr	s14, [fp, #340]	; 0x154
 800dfee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dff2:	edcb 7a43 	vstr	s15, [fp, #268]	; 0x10c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;
 800dff6:	eddb 7a44 	vldr	s15, [fp, #272]	; 0x110
 800dffa:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800dffe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e002:	edcb 7a44 	vstr	s15, [fp, #272]	; 0x110
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
 800e006:	f8d6 3174 	ldr.w	r3, [r6, #372]	; 0x174
 800e00a:	f8c6 3188 	str.w	r3, [r6, #392]	; 0x188
 800e00e:	e6c7      	b.n	800dda0 <nk_panel_begin+0xa0>
        } else header.h = panel_padding.y;
 800e010:	eef0 1a69 	vmov.f32	s3, s19
 800e014:	e7ba      	b.n	800df8c <nk_panel_begin+0x28c>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
 800e016:	463a      	mov	r2, r7
 800e018:	9806      	ldr	r0, [sp, #24]
 800e01a:	f7ff fdcf 	bl	800dbbc <nk_panel_get_border>
 800e01e:	eeb0 2a40 	vmov.f32	s4, s0
 800e022:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
 800e026:	ed94 0a02 	vldr	s0, [r4, #8]
 800e02a:	edd4 0a03 	vldr	s1, [r4, #12]
 800e02e:	ed94 1a04 	vldr	s2, [r4, #16]
 800e032:	edd4 1a05 	vldr	s3, [r4, #20]
 800e036:	f7ff fbec 	bl	800d812 <nk_shrink_rect>
 800e03a:	ed84 0a02 	vstr	s0, [r4, #8]
 800e03e:	edc4 0a03 	vstr	s1, [r4, #12]
 800e042:	ed84 1a04 	vstr	s2, [r4, #16]
 800e046:	edc4 1a05 	vstr	s3, [r4, #20]
 800e04a:	e6c8      	b.n	800ddde <nk_panel_begin+0xde>
 800e04c:	0801ad58 	.word	0x0801ad58
 800e050:	0801b434 	.word	0x0801b434
 800e054:	0801b3f0 	.word	0x0801b3f0
 800e058:	0801ad5c 	.word	0x0801ad5c
 800e05c:	0801ad6c 	.word	0x0801ad6c
 800e060:	00000000 	.word	0x00000000
            background = &style->window.header.active;
 800e064:	f506 57c2 	add.w	r7, r6, #6208	; 0x1840
 800e068:	370c      	adds	r7, #12
            text.text = style->window.header.label_active;
 800e06a:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e06e:	f8d3 09a3 	ldr.w	r0, [r3, #2467]	; 0x9a3
 800e072:	900d      	str	r0, [sp, #52]	; 0x34
            background = &style->window.header.normal;
            text.text = style->window.header.label_normal;
        }

        /* draw header background */
        header.h += 1.0f;
 800e074:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e078:	ee38 8a27 	vadd.f32	s16, s16, s15

        switch(background->type) {
 800e07c:	783b      	ldrb	r3, [r7, #0]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	f000 816d 	beq.w	800e35e <nk_panel_begin+0x65e>
 800e084:	2b02      	cmp	r3, #2
 800e086:	f000 8188 	beq.w	800e39a <nk_panel_begin+0x69a>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f000 81a3 	beq.w	800e3d6 <nk_panel_begin+0x6d6>
                break;
        }

        /* window close button */
        {struct nk_rect button;
        button.y = header.y + style->window.header.padding.y;
 800e090:	f506 53cd 	add.w	r3, r6, #6560	; 0x19a0
 800e094:	edd3 7a03 	vldr	s15, [r3, #12]
 800e098:	ee39 7aa7 	vadd.f32	s14, s19, s15
 800e09c:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
        button.h = header.h - 2 * style->window.header.padding.y;
 800e0a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e0a4:	ee38 8a67 	vsub.f32	s16, s16, s15
        button.w = button.h;
        if (win->flags & NK_WINDOW_CLOSABLE) {
 800e0a8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e0aa:	f013 0f08 	tst.w	r3, #8
 800e0ae:	d043      	beq.n	800e138 <nk_panel_begin+0x438>
            nk_flags ws = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	9309      	str	r3, [sp, #36]	; 0x24
            if (style->window.header.align == NK_HEADER_RIGHT) {
 800e0b4:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e0b8:	f893 39a7 	ldrb.w	r3, [r3, #2471]	; 0x9a7
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	f000 81a2 	beq.w	800e406 <nk_panel_begin+0x706>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
            } else {
                button.x = header.x + style->window.header.padding.x;
 800e0c2:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e0c6:	f603 12a8 	addw	r2, r3, #2472	; 0x9a8
 800e0ca:	ed92 7a00 	vldr	s14, [r2]
 800e0ce:	ee39 0a07 	vadd.f32	s0, s18, s14
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 800e0d2:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 800e0d6:	edd3 7a00 	vldr	s15, [r3]
 800e0da:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e0de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0e2:	ee39 9a27 	vadd.f32	s18, s18, s15
            }

            if (nk_do_button_symbol(&ws, &win->buffer, button,
                style->window.header.close_symbol, NK_BUTTON_DEFAULT,
 800e0e6:	f506 5280 	add.w	r2, r6, #4096	; 0x1000
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 800e0ea:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 800e0ee:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 800e0f2:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 800e0f6:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 800e0fa:	9302      	str	r3, [sp, #8]
 800e0fc:	f8cd b004 	str.w	fp, [sp, #4]
 800e100:	f506 53c3 	add.w	r3, r6, #6240	; 0x1860
 800e104:	3308      	adds	r3, #8
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	2300      	movs	r3, #0
 800e10a:	f892 2998 	ldrb.w	r2, [r2, #2456]	; 0x998
 800e10e:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800e112:	eeb0 1a48 	vmov.f32	s2, s16
 800e116:	eef0 1a48 	vmov.f32	s3, s16
 800e11a:	4651      	mov	r1, sl
 800e11c:	a809      	add	r0, sp, #36	; 0x24
 800e11e:	f7fb fcf3 	bl	8009b08 <nk_do_button_symbol>
 800e122:	b148      	cbz	r0, 800e138 <nk_panel_begin+0x438>
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 800e124:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e126:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800e12a:	d105      	bne.n	800e138 <nk_panel_begin+0x438>
            {
                layout->flags |= NK_WINDOW_HIDDEN;
                layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;
 800e12c:	6863      	ldr	r3, [r4, #4]
 800e12e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e136:	6063      	str	r3, [r4, #4]
            }
        }

        /* window minimize button */
        if (win->flags & NK_WINDOW_MINIMIZABLE) {
 800e138:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e13a:	f013 0f10 	tst.w	r3, #16
 800e13e:	d04b      	beq.n	800e1d8 <nk_panel_begin+0x4d8>
            nk_flags ws = 0;
 800e140:	2200      	movs	r2, #0
 800e142:	9209      	str	r2, [sp, #36]	; 0x24
            if (style->window.header.align == NK_HEADER_RIGHT) {
 800e144:	f506 5280 	add.w	r2, r6, #4096	; 0x1000
 800e148:	f892 29a7 	ldrb.w	r2, [r2, #2471]	; 0x9a7
 800e14c:	2a01      	cmp	r2, #1
 800e14e:	f000 8171 	beq.w	800e434 <nk_panel_begin+0x734>
                    header.w -= style->window.header.padding.x;
                }
                header.w -= button.w + style->window.header.spacing.x;
            } else {
                button.x = header.x;
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 800e152:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e156:	f603 12b8 	addw	r2, r3, #2488	; 0x9b8
 800e15a:	edd2 7a00 	vldr	s15, [r2]
 800e15e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e162:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 800e166:	ed93 7a00 	vldr	s14, [r3]
 800e16a:	ee77 7a87 	vadd.f32	s15, s15, s14
                button.x = header.x;
 800e16e:	eeb0 0a49 	vmov.f32	s0, s18
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 800e172:	ee37 9a89 	vadd.f32	s18, s15, s18
            }
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 800e176:	6863      	ldr	r3, [r4, #4]
 800e178:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e17c:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e180:	bf14      	ite	ne
 800e182:	f893 299a 	ldrbne.w	r2, [r3, #2458]	; 0x99a
 800e186:	f893 2999 	ldrbeq.w	r2, [r3, #2457]	; 0x999
                style->window.header.maximize_symbol: style->window.header.minimize_symbol,
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 800e18a:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 800e18e:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 800e192:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 800e196:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 800e19a:	9302      	str	r3, [sp, #8]
 800e19c:	f8cd b004 	str.w	fp, [sp, #4]
 800e1a0:	f506 53c8 	add.w	r3, r6, #6400	; 0x1900
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800e1ac:	eeb0 1a48 	vmov.f32	s2, s16
 800e1b0:	eef0 1a48 	vmov.f32	s3, s16
 800e1b4:	4651      	mov	r1, sl
 800e1b6:	a809      	add	r0, sp, #36	; 0x24
 800e1b8:	f7fb fca6 	bl	8009b08 <nk_do_button_symbol>
 800e1bc:	b160      	cbz	r0, 800e1d8 <nk_panel_begin+0x4d8>
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 800e1be:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e1c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800e1c4:	d108      	bne.n	800e1d8 <nk_panel_begin+0x4d8>
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 800e1c6:	6863      	ldr	r3, [r4, #4]
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 800e1c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e1cc:	bf14      	ite	ne
 800e1ce:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800e1d2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 800e1d6:	6063      	str	r3, [r4, #4]
                    layout->flags | NK_WINDOW_MINIMIZED;
        }}

        {/* window header title */
        int text_len = nk_strlen(title);
 800e1d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e1dc:	4640      	mov	r0, r8
 800e1de:	f006 fde7 	bl	8014db0 <nk_strlen>
 800e1e2:	4607      	mov	r7, r0
        struct nk_rect label = {0,0,0,0};
        float t = font->width(font->userdata, font->height, title, text_len);
 800e1e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	4641      	mov	r1, r8
 800e1ec:	ed99 0a01 	vldr	s0, [r9, #4]
 800e1f0:	f8d9 0000 	ldr.w	r0, [r9]
 800e1f4:	4798      	blx	r3
 800e1f6:	eeb0 8a40 	vmov.f32	s16, s0
        text.padding = nk_vec2(0,0);
 800e1fa:	ed1f 0a67 	vldr	s0, [pc, #-412]	; 800e060 <nk_panel_begin+0x360>
 800e1fe:	eef0 0a40 	vmov.f32	s1, s0
 800e202:	f7ff fb21 	bl	800d848 <nk_vec2>
 800e206:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 800e20a:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c

        label.x = header.x + style->window.header.padding.x;
 800e20e:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e212:	f603 12a8 	addw	r2, r3, #2472	; 0x9a8
 800e216:	edd2 7a00 	vldr	s15, [r2]
 800e21a:	ee79 7a27 	vadd.f32	s15, s18, s15
        label.x += style->window.header.label_padding.x;
 800e21e:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 800e222:	ed92 7a00 	vldr	s14, [r2]
 800e226:	ee37 0a87 	vadd.f32	s0, s15, s14
        label.y = header.y + style->window.header.label_padding.y;
 800e22a:	f603 12b4 	addw	r2, r3, #2484	; 0x9b4
 800e22e:	edd2 7a00 	vldr	s15, [r2]
 800e232:	ee79 9aa7 	vadd.f32	s19, s19, s15
 800e236:	edcd 9a13 	vstr	s19, [sp, #76]	; 0x4c
        label.h = font->height + 2 * style->window.header.label_padding.y;
 800e23a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e23e:	ed99 7a01 	vldr	s14, [r9, #4]
 800e242:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e246:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
        label.w = t + 2 * style->window.header.spacing.x;
 800e24a:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 800e24e:	ed93 1a00 	vldr	s2, [r3]
 800e252:	ee31 1a01 	vadd.f32	s2, s2, s2
 800e256:	ee31 1a08 	vadd.f32	s2, s2, s16
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 800e25a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800e25e:	ee78 8ac0 	vsub.f32	s17, s17, s0
 800e262:	eeb4 1ae8 	vcmpe.f32	s2, s17
 800e266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26a:	f140 80fb 	bpl.w	800e464 <nk_panel_begin+0x764>
 800e26e:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800e272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e276:	d501      	bpl.n	800e27c <nk_panel_begin+0x57c>
 800e278:	ed1f 1a87 	vldr	s2, [pc, #-540]	; 800e060 <nk_panel_begin+0x360>
        nk_widget_text(out, label, (const char*)title, text_len, &text, NK_TEXT_LEFT, font);}
 800e27c:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 800e280:	ed8d 1a14 	vstr	s2, [sp, #80]	; 0x50
 800e284:	f8cd 9004 	str.w	r9, [sp, #4]
 800e288:	2311      	movs	r3, #17
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	ab0a      	add	r3, sp, #40	; 0x28
 800e28e:	463a      	mov	r2, r7
 800e290:	9905      	ldr	r1, [sp, #20]
 800e292:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800e296:	eddd 1a15 	vldr	s3, [sp, #84]	; 0x54
 800e29a:	4650      	mov	r0, sl
 800e29c:	f004 fcca 	bl	8012c34 <nk_widget_text>
    }

    /* draw window background */
    if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {
 800e2a0:	6863      	ldr	r3, [r4, #4]
 800e2a2:	f413 4f08 	tst.w	r3, #34816	; 0x8800
 800e2a6:	d11e      	bne.n	800e2e6 <nk_panel_begin+0x5e6>
        struct nk_rect body;
        body.x = win->bounds.x;
 800e2a8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e2aa:	9312      	str	r3, [sp, #72]	; 0x48
        body.w = win->bounds.w;
 800e2ac:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e2ae:	9314      	str	r3, [sp, #80]	; 0x50
        body.y = (win->bounds.y + layout->header_height);
 800e2b0:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800e2b4:	edd5 7a14 	vldr	s15, [r5, #80]	; 0x50
 800e2b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2bc:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
        body.h = (win->bounds.h - layout->header_height);
 800e2c0:	edd5 7a16 	vldr	s15, [r5, #88]	; 0x58
 800e2c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2c8:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54

        switch(style->window.fixed_background.type) {
 800e2cc:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e2d0:	f893 39c0 	ldrb.w	r3, [r3, #2496]	; 0x9c0
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	f000 80d5 	beq.w	800e484 <nk_panel_begin+0x784>
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	f000 80e3 	beq.w	800e4a6 <nk_panel_begin+0x7a6>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 80f1 	beq.w	800e4c8 <nk_panel_begin+0x7c8>
        }
    }

    /* set clipping rectangle */
    {struct nk_rect clip;
    layout->clip = layout->bounds;
 800e2e6:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 800e2ea:	f104 0308 	add.w	r3, r4, #8
 800e2ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e2f0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 800e2f4:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 800e2f8:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
 800e2fc:	edd4 1a12 	vldr	s3, [r4, #72]	; 0x48
 800e300:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
 800e304:	af12      	add	r7, sp, #72	; 0x48
 800e306:	ee70 1aa1 	vadd.f32	s3, s1, s3
 800e30a:	ee30 1a01 	vadd.f32	s2, s0, s2
 800e30e:	f105 0168 	add.w	r1, r5, #104	; 0x68
 800e312:	4638      	mov	r0, r7
 800e314:	f7ff fa9c 	bl	800d850 <nk_unify>
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
    nk_push_scissor(out, clip);
 800e318:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 800e31c:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800e320:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 800e324:	eddd 1a15 	vldr	s3, [sp, #84]	; 0x54
 800e328:	4650      	mov	r0, sl
 800e32a:	f7fc fdb5 	bl	800ae98 <nk_push_scissor>
    layout->clip = clip;}
 800e32e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800e332:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);
 800e336:	6863      	ldr	r3, [r4, #4]
 800e338:	f413 4f20 	tst.w	r3, #40960	; 0xa000
 800e33c:	bf0c      	ite	eq
 800e33e:	2001      	moveq	r0, #1
 800e340:	2000      	movne	r0, #0
}
 800e342:	b019      	add	sp, #100	; 0x64
 800e344:	ecbd 8b04 	vpop	{d8-d9}
 800e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            background = &style->window.header.normal;
 800e34c:	f506 57c0 	add.w	r7, r6, #6144	; 0x1800
 800e350:	3714      	adds	r7, #20
            text.text = style->window.header.label_normal;
 800e352:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e356:	f8d3 099b 	ldr.w	r0, [r3, #2459]	; 0x99b
 800e35a:	900d      	str	r0, [sp, #52]	; 0x34
 800e35c:	e68a      	b.n	800e074 <nk_panel_begin+0x374>
                text.background = nk_rgba(0,0,0,0);
 800e35e:	2300      	movs	r3, #0
 800e360:	461a      	mov	r2, r3
 800e362:	4619      	mov	r1, r3
 800e364:	4618      	mov	r0, r3
 800e366:	f7fb fd59 	bl	8009e1c <nk_rgba>
 800e36a:	900c      	str	r0, [sp, #48]	; 0x30
                nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 800e36c:	ed8d 9a0e 	vstr	s18, [sp, #56]	; 0x38
 800e370:	edcd 9a0f 	vstr	s19, [sp, #60]	; 0x3c
 800e374:	edcd 8a10 	vstr	s17, [sp, #64]	; 0x40
 800e378:	ed8d 8a11 	vstr	s16, [sp, #68]	; 0x44
 800e37c:	4b5c      	ldr	r3, [pc, #368]	; (800e4f0 <nk_panel_begin+0x7f0>)
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	1d39      	adds	r1, r7, #4
 800e382:	eeb0 0a49 	vmov.f32	s0, s18
 800e386:	eef0 0a69 	vmov.f32	s1, s19
 800e38a:	eeb0 1a68 	vmov.f32	s2, s17
 800e38e:	eef0 1a48 	vmov.f32	s3, s16
 800e392:	4650      	mov	r0, sl
 800e394:	f7fd f81a 	bl	800b3cc <nk_draw_image>
                break;
 800e398:	e67a      	b.n	800e090 <nk_panel_begin+0x390>
                text.background = nk_rgba(0, 0, 0, 0);
 800e39a:	2300      	movs	r3, #0
 800e39c:	461a      	mov	r2, r3
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fb fd3b 	bl	8009e1c <nk_rgba>
 800e3a6:	900c      	str	r0, [sp, #48]	; 0x30
                nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 800e3a8:	ed8d 9a0e 	vstr	s18, [sp, #56]	; 0x38
 800e3ac:	edcd 9a0f 	vstr	s19, [sp, #60]	; 0x3c
 800e3b0:	edcd 8a10 	vstr	s17, [sp, #64]	; 0x40
 800e3b4:	ed8d 8a11 	vstr	s16, [sp, #68]	; 0x44
 800e3b8:	4b4d      	ldr	r3, [pc, #308]	; (800e4f0 <nk_panel_begin+0x7f0>)
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	1d39      	adds	r1, r7, #4
 800e3be:	eeb0 0a49 	vmov.f32	s0, s18
 800e3c2:	eef0 0a69 	vmov.f32	s1, s19
 800e3c6:	eeb0 1a68 	vmov.f32	s2, s17
 800e3ca:	eef0 1a48 	vmov.f32	s3, s16
 800e3ce:	4650      	mov	r0, sl
 800e3d0:	f7fd f880 	bl	800b4d4 <nk_draw_nine_slice>
                break;
 800e3d4:	e65c      	b.n	800e090 <nk_panel_begin+0x390>
                text.background = background->data.color;
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	910c      	str	r1, [sp, #48]	; 0x30
                nk_fill_rect(out, header, 0, background->data.color);
 800e3da:	ed8d 9a0e 	vstr	s18, [sp, #56]	; 0x38
 800e3de:	edcd 9a0f 	vstr	s19, [sp, #60]	; 0x3c
 800e3e2:	edcd 8a10 	vstr	s17, [sp, #64]	; 0x40
 800e3e6:	ed8d 8a11 	vstr	s16, [sp, #68]	; 0x44
 800e3ea:	ed9f 2a42 	vldr	s4, [pc, #264]	; 800e4f4 <nk_panel_begin+0x7f4>
 800e3ee:	eeb0 0a49 	vmov.f32	s0, s18
 800e3f2:	eef0 0a69 	vmov.f32	s1, s19
 800e3f6:	eeb0 1a68 	vmov.f32	s2, s17
 800e3fa:	eef0 1a48 	vmov.f32	s3, s16
 800e3fe:	4650      	mov	r0, sl
 800e400:	f7fc fe2a 	bl	800b058 <nk_fill_rect>
                break;
 800e404:	e644      	b.n	800e090 <nk_panel_begin+0x390>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
 800e406:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e40a:	f603 12a8 	addw	r2, r3, #2472	; 0x9a8
 800e40e:	ed92 7a00 	vldr	s14, [r2]
 800e412:	ee39 0a28 	vadd.f32	s0, s18, s17
 800e416:	ee78 7a07 	vadd.f32	s15, s16, s14
 800e41a:	ee30 0a67 	vsub.f32	s0, s0, s15
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
 800e41e:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 800e422:	edd3 7a00 	vldr	s15, [r3]
 800e426:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e42a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e42e:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800e432:	e658      	b.n	800e0e6 <nk_panel_begin+0x3e6>
                button.x = (header.w + header.x) - button.w;
 800e434:	ee39 0a28 	vadd.f32	s0, s18, s17
 800e438:	ee30 0a48 	vsub.f32	s0, s0, s16
                if (!(win->flags & NK_WINDOW_CLOSABLE)) {
 800e43c:	f013 0f08 	tst.w	r3, #8
 800e440:	d107      	bne.n	800e452 <nk_panel_begin+0x752>
                    button.x -= style->window.header.padding.x;
 800e442:	f506 53cd 	add.w	r3, r6, #6560	; 0x19a0
 800e446:	edd3 7a02 	vldr	s15, [r3, #8]
 800e44a:	ee30 0a67 	vsub.f32	s0, s0, s15
                    header.w -= style->window.header.padding.x;
 800e44e:	ee78 8ae7 	vsub.f32	s17, s17, s15
                header.w -= button.w + style->window.header.spacing.x;
 800e452:	f506 53cd 	add.w	r3, r6, #6560	; 0x19a0
 800e456:	edd3 7a06 	vldr	s15, [r3, #24]
 800e45a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e45e:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800e462:	e688      	b.n	800e176 <nk_panel_begin+0x476>
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 800e464:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46c:	d407      	bmi.n	800e47e <nk_panel_begin+0x77e>
 800e46e:	eeb4 1ae8 	vcmpe.f32	s2, s17
 800e472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e476:	bf58      	it	pl
 800e478:	eeb0 1a68 	vmovpl.f32	s2, s17
 800e47c:	e6fe      	b.n	800e27c <nk_panel_begin+0x57c>
 800e47e:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800e4f4 <nk_panel_begin+0x7f4>
 800e482:	e6fb      	b.n	800e27c <nk_panel_begin+0x57c>
                nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);
 800e484:	4b1a      	ldr	r3, [pc, #104]	; (800e4f0 <nk_panel_begin+0x7f0>)
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	f506 51ce 	add.w	r1, r6, #6592	; 0x19c0
 800e48c:	3104      	adds	r1, #4
 800e48e:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 800e492:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800e496:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 800e49a:	eddd 1a15 	vldr	s3, [sp, #84]	; 0x54
 800e49e:	4650      	mov	r0, sl
 800e4a0:	f7fc ff94 	bl	800b3cc <nk_draw_image>
                break;
 800e4a4:	e71f      	b.n	800e2e6 <nk_panel_begin+0x5e6>
                nk_draw_nine_slice(out, body, &style->window.fixed_background.data.slice, nk_white);
 800e4a6:	4b12      	ldr	r3, [pc, #72]	; (800e4f0 <nk_panel_begin+0x7f0>)
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	f506 51ce 	add.w	r1, r6, #6592	; 0x19c0
 800e4ae:	3104      	adds	r1, #4
 800e4b0:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 800e4b4:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800e4b8:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 800e4bc:	eddd 1a15 	vldr	s3, [sp, #84]	; 0x54
 800e4c0:	4650      	mov	r0, sl
 800e4c2:	f7fd f807 	bl	800b4d4 <nk_draw_nine_slice>
                break;
 800e4c6:	e70e      	b.n	800e2e6 <nk_panel_begin+0x5e6>
                nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);
 800e4c8:	9b06      	ldr	r3, [sp, #24]
 800e4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ce:	f8d3 185c 	ldr.w	r1, [r3, #2140]	; 0x85c
 800e4d2:	ed9f 2a08 	vldr	s4, [pc, #32]	; 800e4f4 <nk_panel_begin+0x7f4>
 800e4d6:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 800e4da:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800e4de:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 800e4e2:	eddd 1a15 	vldr	s3, [sp, #84]	; 0x54
 800e4e6:	4650      	mov	r0, sl
 800e4e8:	f7fc fdb6 	bl	800b058 <nk_fill_rect>
                break;
 800e4ec:	e6fb      	b.n	800e2e6 <nk_panel_begin+0x5e6>
 800e4ee:	bf00      	nop
 800e4f0:	0801b454 	.word	0x0801b454
 800e4f4:	00000000 	.word	0x00000000

0800e4f8 <nk_panel_end>:
NK_LIB void
nk_panel_end(struct nk_context *ctx)
{
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	ed2d 8b06 	vpush	{d8-d10}
 800e500:	b08b      	sub	sp, #44	; 0x2c
    struct nk_command_buffer *out;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 800e502:	2800      	cmp	r0, #0
 800e504:	d067      	beq.n	800e5d6 <nk_panel_end+0xde>
 800e506:	4606      	mov	r6, r0
    NK_ASSERT(ctx->current);
 800e508:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800e50c:	f8d3 4658 	ldr.w	r4, [r3, #1624]	; 0x658
 800e510:	2c00      	cmp	r4, #0
 800e512:	d067      	beq.n	800e5e4 <nk_panel_end+0xec>
    NK_ASSERT(ctx->current->layout);
 800e514:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800e518:	2d00      	cmp	r5, #0
 800e51a:	d06a      	beq.n	800e5f2 <nk_panel_end+0xfa>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    window = ctx->current;
    layout = window->layout;
    style = &ctx->style;
 800e51c:	f500 78b4 	add.w	r8, r0, #360	; 0x168
    out = &window->buffer;
 800e520:	f104 0764 	add.w	r7, r4, #100	; 0x64
    in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;
 800e524:	686b      	ldr	r3, [r5, #4]
 800e526:	f413 5fa0 	tst.w	r3, #5120	; 0x1400
 800e52a:	bf0c      	ite	eq
 800e52c:	4681      	moveq	r9, r0
 800e52e:	f04f 0900 	movne.w	r9, #0
    if (!nk_panel_is_sub(layout->type))
 800e532:	782b      	ldrb	r3, [r5, #0]
 800e534:	f013 0ff6 	tst.w	r3, #246	; 0xf6
 800e538:	d062      	beq.n	800e600 <nk_panel_end+0x108>
        nk_push_scissor(out, nk_null_rect);

    /* cache configuration data */
    scrollbar_size = style->window.scrollbar_size;
 800e53a:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e53e:	f603 2244 	addw	r2, r3, #2628	; 0xa44
 800e542:	edd2 8a00 	vldr	s17, [r2]
 800e546:	f603 2348 	addw	r3, r3, #2632	; 0xa48
 800e54a:	ed93 9a00 	vldr	s18, [r3]
    panel_padding = nk_panel_get_padding(style, layout->type);
 800e54e:	7829      	ldrb	r1, [r5, #0]
 800e550:	4640      	mov	r0, r8
 800e552:	f7ff fad8 	bl	800db06 <nk_panel_get_padding>
 800e556:	eeb0 8a40 	vmov.f32	s16, s0
 800e55a:	ed8d 0a08 	vstr	s0, [sp, #32]
 800e55e:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24

    /* update the current cursor Y-position to point over the last added widget */
    layout->at_y += layout->row.height;
 800e562:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
 800e566:	ed95 7a1b 	vldr	s14, [r5, #108]	; 0x6c
 800e56a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e56e:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24

    /* dynamic panels */
    if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))
 800e572:	686b      	ldr	r3, [r5, #4]
 800e574:	f403 4308 	and.w	r3, r3, #34816	; 0x8800
 800e578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e57c:	d04d      	beq.n	800e61a <nk_panel_end+0x122>
            nk_fill_rect(out, empty_space, 0, style->window.background);
        }
    }

    /* scrollbars */
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 800e57e:	686b      	ldr	r3, [r5, #4]
 800e580:	f248 0220 	movw	r2, #32800	; 0x8020
 800e584:	421a      	tst	r2, r3
 800e586:	f040 81f6 	bne.w	800e976 <nk_panel_end+0x47e>
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 800e58a:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 800e58e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800e592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59a:	f140 81ec 	bpl.w	800e976 <nk_panel_end+0x47e>
        float scroll_offset;
        float scroll_step;
        float scroll_inc;

        /* mouse wheel scrolling */
        if (nk_panel_is_sub(layout->type))
 800e59e:	782b      	ldrb	r3, [r5, #0]
 800e5a0:	f013 0ff6 	tst.w	r3, #246	; 0xf6
 800e5a4:	f000 8121 	beq.w	800e7ea <nk_panel_end+0x2f2>
        {
            /* sub-window mouse wheel scrolling */
            struct nk_window *root_window = window;
            struct nk_panel *root_panel = window->layout;
 800e5a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
            while (root_panel->parent)
 800e5ac:	469a      	mov	sl, r3
 800e5ae:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1fa      	bne.n	800e5ac <nk_panel_end+0xb4>
            struct nk_window *root_window = window;
 800e5b6:	4623      	mov	r3, r4
                root_panel = root_panel->parent;
            while (root_window->parent)
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1fa      	bne.n	800e5b8 <nk_panel_end+0xc0>
                root_window = root_window->parent;

            /* only allow scrolling if parent window is active */
            scroll_has_scrolling = 0;
            if ((root_window == ctx->active) && layout->has_scrolling) {
 800e5c2:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 800e5c6:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	f000 80b4 	beq.w	800e738 <nk_panel_end+0x240>
            scroll_has_scrolling = 0;
 800e5d0:	f04f 0b00 	mov.w	fp, #0
 800e5d4:	e14a      	b.n	800e86c <nk_panel_end+0x374>
    NK_ASSERT(ctx);
 800e5d6:	4b95      	ldr	r3, [pc, #596]	; (800e82c <nk_panel_end+0x334>)
 800e5d8:	4a95      	ldr	r2, [pc, #596]	; (800e830 <nk_panel_end+0x338>)
 800e5da:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800e5de:	4895      	ldr	r0, [pc, #596]	; (800e834 <nk_panel_end+0x33c>)
 800e5e0:	f007 ffb4 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800e5e4:	4b94      	ldr	r3, [pc, #592]	; (800e838 <nk_panel_end+0x340>)
 800e5e6:	4a92      	ldr	r2, [pc, #584]	; (800e830 <nk_panel_end+0x338>)
 800e5e8:	f240 1153 	movw	r1, #339	; 0x153
 800e5ec:	4891      	ldr	r0, [pc, #580]	; (800e834 <nk_panel_end+0x33c>)
 800e5ee:	f007 ffad 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800e5f2:	4b92      	ldr	r3, [pc, #584]	; (800e83c <nk_panel_end+0x344>)
 800e5f4:	4a8e      	ldr	r2, [pc, #568]	; (800e830 <nk_panel_end+0x338>)
 800e5f6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800e5fa:	488e      	ldr	r0, [pc, #568]	; (800e834 <nk_panel_end+0x33c>)
 800e5fc:	f007 ffa6 	bl	801654c <__assert_func>
        nk_push_scissor(out, nk_null_rect);
 800e600:	4b8f      	ldr	r3, [pc, #572]	; (800e840 <nk_panel_end+0x348>)
 800e602:	ed93 0a00 	vldr	s0, [r3]
 800e606:	edd3 0a01 	vldr	s1, [r3, #4]
 800e60a:	ed93 1a02 	vldr	s2, [r3, #8]
 800e60e:	edd3 1a03 	vldr	s3, [r3, #12]
 800e612:	4638      	mov	r0, r7
 800e614:	f7fc fc40 	bl	800ae98 <nk_push_scissor>
 800e618:	e78f      	b.n	800e53a <nk_panel_end+0x42>
        if (layout->at_y < (layout->bounds.y + layout->bounds.h))
 800e61a:	edd5 0a03 	vldr	s1, [r5, #12]
 800e61e:	ed95 7a05 	vldr	s14, [r5, #20]
 800e622:	ee30 7a87 	vadd.f32	s14, s1, s14
 800e626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            layout->bounds.h = layout->at_y - layout->bounds.y;
 800e62e:	bf44      	itt	mi
 800e630:	ee77 7ae0 	vsubmi.f32	s15, s15, s1
 800e634:	edc5 7a05 	vstrmi	s15, [r5, #20]
        empty_space.x = window->bounds.x;
 800e638:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 800e63c:	ed8d 0a04 	vstr	s0, [sp, #16]
        empty_space.y = layout->bounds.y;
 800e640:	edcd 0a05 	vstr	s1, [sp, #20]
        empty_space.h = panel_padding.y;
 800e644:	eddd 1a09 	vldr	s3, [sp, #36]	; 0x24
 800e648:	edcd 1a07 	vstr	s3, [sp, #28]
        nk_fill_rect(out, empty_space, 0, style->window.background);
 800e64c:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 800e650:	ed8d 1a06 	vstr	s2, [sp, #24]
 800e654:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
 800e658:	eddf 9a7e 	vldr	s19, [pc, #504]	; 800e854 <nk_panel_end+0x35c>
 800e65c:	f8da 1874 	ldr.w	r1, [sl, #2164]	; 0x874
 800e660:	eeb0 2a69 	vmov.f32	s4, s19
 800e664:	4638      	mov	r0, r7
 800e666:	f7fc fcf7 	bl	800b058 <nk_fill_rect>
        empty_space.x = window->bounds.x;
 800e66a:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 800e66e:	ed8d 0a04 	vstr	s0, [sp, #16]
        empty_space.y = layout->bounds.y;
 800e672:	edd5 0a03 	vldr	s1, [r5, #12]
 800e676:	edcd 0a05 	vstr	s1, [sp, #20]
        empty_space.w = panel_padding.x + layout->border;
 800e67a:	ed95 1a0d 	vldr	s2, [r5, #52]	; 0x34
 800e67e:	ee38 1a01 	vadd.f32	s2, s16, s2
        empty_space.h = layout->bounds.h;
 800e682:	edd5 1a05 	vldr	s3, [r5, #20]
 800e686:	edcd 1a07 	vstr	s3, [sp, #28]
        nk_fill_rect(out, empty_space, 0, style->window.background);
 800e68a:	ed8d 1a06 	vstr	s2, [sp, #24]
 800e68e:	f8da 1874 	ldr.w	r1, [sl, #2164]	; 0x874
 800e692:	eeb0 2a69 	vmov.f32	s4, s19
 800e696:	4638      	mov	r0, r7
 800e698:	f7fc fcde 	bl	800b058 <nk_fill_rect>
        empty_space.x = layout->bounds.x + layout->bounds.w;
 800e69c:	edd5 7a02 	vldr	s15, [r5, #8]
 800e6a0:	ed95 7a04 	vldr	s14, [r5, #16]
 800e6a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6a8:	edcd 7a04 	vstr	s15, [sp, #16]
        empty_space.y = layout->bounds.y;
 800e6ac:	68eb      	ldr	r3, [r5, #12]
 800e6ae:	9305      	str	r3, [sp, #20]
        empty_space.w = panel_padding.x + layout->border;
 800e6b0:	ed95 1a0d 	vldr	s2, [r5, #52]	; 0x34
 800e6b4:	ee38 1a01 	vadd.f32	s2, s16, s2
        empty_space.h = layout->bounds.h;
 800e6b8:	696b      	ldr	r3, [r5, #20]
 800e6ba:	9307      	str	r3, [sp, #28]
        if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))
 800e6bc:	69eb      	ldr	r3, [r5, #28]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	b92b      	cbnz	r3, 800e6ce <nk_panel_end+0x1d6>
 800e6c2:	686b      	ldr	r3, [r5, #4]
 800e6c4:	f013 0f20 	tst.w	r3, #32
            empty_space.w += scrollbar_size.x;
 800e6c8:	bf08      	it	eq
 800e6ca:	ee31 1a28 	vaddeq.f32	s2, s2, s17
        nk_fill_rect(out, empty_space, 0, style->window.background);
 800e6ce:	ed8d 1a06 	vstr	s2, [sp, #24]
 800e6d2:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 800e6d6:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 800e6da:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800e854 <nk_panel_end+0x35c>
 800e6de:	ed9d 0a04 	vldr	s0, [sp, #16]
 800e6e2:	eddd 0a05 	vldr	s1, [sp, #20]
 800e6e6:	eddd 1a07 	vldr	s3, [sp, #28]
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	f7fc fcb4 	bl	800b058 <nk_fill_rect>
        if (layout->footer_height > 0) {
 800e6f0:	edd5 1a0b 	vldr	s3, [r5, #44]	; 0x2c
 800e6f4:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 800e6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fc:	f77f af3f 	ble.w	800e57e <nk_panel_end+0x86>
            empty_space.x = window->bounds.x;
 800e700:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 800e704:	ed8d 0a04 	vstr	s0, [sp, #16]
            empty_space.y = layout->bounds.y + layout->bounds.h;
 800e708:	edd5 0a03 	vldr	s1, [r5, #12]
 800e70c:	edd5 7a05 	vldr	s15, [r5, #20]
 800e710:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800e714:	edcd 0a05 	vstr	s1, [sp, #20]
            empty_space.w = window->bounds.w;
 800e718:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
            empty_space.h = layout->footer_height;
 800e71c:	edcd 1a07 	vstr	s3, [sp, #28]
            nk_fill_rect(out, empty_space, 0, style->window.background);
 800e720:	ed8d 1a06 	vstr	s2, [sp, #24]
 800e724:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 800e728:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 800e72c:	ed9f 2a49 	vldr	s4, [pc, #292]	; 800e854 <nk_panel_end+0x35c>
 800e730:	4638      	mov	r0, r7
 800e732:	f7fc fc91 	bl	800b058 <nk_fill_rect>
 800e736:	e722      	b.n	800e57e <nk_panel_end+0x86>
            if ((root_window == ctx->active) && layout->has_scrolling) {
 800e738:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800e73a:	b913      	cbnz	r3, 800e742 <nk_panel_end+0x24a>
            scroll_has_scrolling = 0;
 800e73c:	f04f 0b00 	mov.w	fp, #0
 800e740:	e094      	b.n	800e86c <nk_panel_end+0x374>
                /* and panel is being hovered and inside clip rect*/
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 800e742:	ed95 0a02 	vldr	s0, [r5, #8]
 800e746:	edd5 0a03 	vldr	s1, [r5, #12]
 800e74a:	ed95 1a04 	vldr	s2, [r5, #16]
 800e74e:	edd5 1a05 	vldr	s3, [r5, #20]
 800e752:	4648      	mov	r0, r9
 800e754:	f7fe faf8 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 800e758:	4683      	mov	fp, r0
 800e75a:	2800      	cmp	r0, #0
 800e75c:	f000 8086 	beq.w	800e86c <nk_panel_end+0x374>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 800e760:	ed9a 7a0f 	vldr	s14, [sl, #60]	; 0x3c
 800e764:	edd5 6a02 	vldr	s13, [r5, #8]
 800e768:	edd5 7a04 	vldr	s15, [r5, #16]
 800e76c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 800e770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e778:	f140 812f 	bpl.w	800e9da <nk_panel_end+0x4e2>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 800e77c:	edda 7a11 	vldr	s15, [sl, #68]	; 0x44
 800e780:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e784:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78c:	f140 8128 	bpl.w	800e9e0 <nk_panel_end+0x4e8>
 800e790:	edda 7a10 	vldr	s15, [sl, #64]	; 0x40
 800e794:	edd5 6a03 	vldr	s13, [r5, #12]
 800e798:	ed95 7a05 	vldr	s14, [r5, #20]
 800e79c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e7a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a8:	f140 811d 	bpl.w	800e9e6 <nk_panel_end+0x4ee>
 800e7ac:	ed9a 7a12 	vldr	s14, [sl, #72]	; 0x48
 800e7b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7bc:	f140 8116 	bpl.w	800e9ec <nk_panel_end+0x4f4>
                        root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))
                {
                    /* deactivate all parent scrolling */
                    root_panel = window->layout;
 800e7c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
                    while (root_panel->parent) {
 800e7c4:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800e7c8:	b16b      	cbz	r3, 800e7e6 <nk_panel_end+0x2ee>
                        root_panel->has_scrolling = nk_false;
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	e000      	b.n	800e7d0 <nk_panel_end+0x2d8>
                    while (root_panel->parent) {
 800e7ce:	460b      	mov	r3, r1
                        root_panel->has_scrolling = nk_false;
 800e7d0:	6390      	str	r0, [r2, #56]	; 0x38
                    while (root_panel->parent) {
 800e7d2:	f8d3 1198 	ldr.w	r1, [r3, #408]	; 0x198
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	2900      	cmp	r1, #0
 800e7da:	d1f8      	bne.n	800e7ce <nk_panel_end+0x2d6>
                        root_panel = root_panel->parent;
                    }
                    root_panel->has_scrolling = nk_false;
 800e7dc:	2200      	movs	r2, #0
 800e7de:	639a      	str	r2, [r3, #56]	; 0x38
                    scroll_has_scrolling = nk_true;
 800e7e0:	f04f 0b01 	mov.w	fp, #1
 800e7e4:	e042      	b.n	800e86c <nk_panel_end+0x374>
                    root_panel = window->layout;
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	e7f8      	b.n	800e7dc <nk_panel_end+0x2e4>
                }
            }
        } else if (!nk_panel_is_sub(layout->type)) {
            /* window mouse wheel scrolling */
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 800e7ea:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 800e7ee:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800e7f2:	429c      	cmp	r4, r3
 800e7f4:	d012      	beq.n	800e81c <nk_panel_end+0x324>
 800e7f6:	f04f 0b00 	mov.w	fp, #0
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 800e7fa:	f1b9 0f00 	cmp.w	r9, #0
 800e7fe:	d032      	beq.n	800e866 <nk_panel_end+0x36e>
 800e800:	edd9 7a58 	vldr	s15, [r9, #352]	; 0x160
 800e804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80c:	dd24      	ble.n	800e858 <nk_panel_end+0x360>
 800e80e:	f1bb 0f00 	cmp.w	fp, #0
 800e812:	d028      	beq.n	800e866 <nk_panel_end+0x36e>
                window->scrolled = nk_true;
 800e814:	2301      	movs	r3, #1
 800e816:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 800e81a:	e027      	b.n	800e86c <nk_panel_end+0x374>
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 800e81c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800e81e:	f1b3 0b00 	subs.w	fp, r3, #0
 800e822:	bf18      	it	ne
 800e824:	f04f 0b01 	movne.w	fp, #1
 800e828:	e7e7      	b.n	800e7fa <nk_panel_end+0x302>
 800e82a:	bf00      	nop
 800e82c:	0801ad58 	.word	0x0801ad58
 800e830:	0801b424 	.word	0x0801b424
 800e834:	0801b3f0 	.word	0x0801b3f0
 800e838:	0801ad5c 	.word	0x0801ad5c
 800e83c:	0801ad6c 	.word	0x0801ad6c
 800e840:	0801b444 	.word	0x0801b444
 800e844:	3c23d70a 	.word	0x3c23d70a
 800e848:	3dcccccd 	.word	0x3dcccccd
 800e84c:	3ba3d70a 	.word	0x3ba3d70a
 800e850:	3d4ccccd 	.word	0x3d4ccccd
 800e854:	00000000 	.word	0x00000000
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 800e858:	edd9 7a57 	vldr	s15, [r9, #348]	; 0x15c
 800e85c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e864:	dcd3      	bgt.n	800e80e <nk_panel_end+0x316>
            else window->scrolled = nk_false;
 800e866:	2300      	movs	r3, #0
 800e868:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
        } else scroll_has_scrolling = nk_false;

        {
            /* vertical scrollbar */
            nk_flags state = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	9303      	str	r3, [sp, #12]
            scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 800e870:	ed95 0a02 	vldr	s0, [r5, #8]
 800e874:	edd5 7a04 	vldr	s15, [r5, #16]
 800e878:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e87c:	ee30 0a08 	vadd.f32	s0, s0, s16
            scroll.y = layout->bounds.y;
 800e880:	edd5 0a03 	vldr	s1, [r5, #12]
            scroll.w = scrollbar_size.x;
 800e884:	edcd 8a06 	vstr	s17, [sp, #24]
            scroll.h = layout->bounds.h;
 800e888:	edd5 1a05 	vldr	s3, [r5, #20]

            scroll_offset = (float)*layout->offset_y;
 800e88c:	69eb      	ldr	r3, [r5, #28]
 800e88e:	ed93 2a00 	vldr	s4, [r3]
            scroll_step = scroll.h * 0.10f;
            scroll_inc = scroll.h * 0.01f;
            scroll_target = (float)(int)(layout->at_y - scroll.y);
 800e892:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
 800e896:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800e89a:	eefd 2ae2 	vcvt.s32.f32	s5, s5
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollv, in, style->font);
 800e89e:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
 800e8a2:	ed8d 0a04 	vstr	s0, [sp, #16]
 800e8a6:	edcd 0a05 	vstr	s1, [sp, #20]
 800e8aa:	edcd 1a07 	vstr	s3, [sp, #28]
 800e8ae:	9301      	str	r3, [sp, #4]
 800e8b0:	f8cd 9000 	str.w	r9, [sp]
 800e8b4:	f506 5391 	add.w	r3, r6, #4640	; 0x1220
 800e8b8:	3318      	adds	r3, #24
 800e8ba:	ed5f 3a1e 	vldr	s7, [pc, #-120]	; 800e844 <nk_panel_end+0x34c>
 800e8be:	ee61 3aa3 	vmul.f32	s7, s3, s7
 800e8c2:	ed1f 3a1f 	vldr	s6, [pc, #-124]	; 800e848 <nk_panel_end+0x350>
 800e8c6:	ee21 3a83 	vmul.f32	s6, s3, s6
 800e8ca:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 800e8ce:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 800e8d2:	465a      	mov	r2, fp
 800e8d4:	eeb0 1a68 	vmov.f32	s2, s17
 800e8d8:	4639      	mov	r1, r7
 800e8da:	a803      	add	r0, sp, #12
 800e8dc:	f001 ff3e 	bl	801075c <nk_do_scrollbarv>
            *layout->offset_y = (nk_uint)scroll_offset;
 800e8e0:	69eb      	ldr	r3, [r5, #28]
 800e8e2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e8e6:	ed83 0a00 	vstr	s0, [r3]
            if (in && scroll_has_scrolling)
 800e8ea:	f1b9 0f00 	cmp.w	r9, #0
 800e8ee:	d005      	beq.n	800e8fc <nk_panel_end+0x404>
 800e8f0:	f1bb 0f00 	cmp.w	fp, #0
 800e8f4:	d002      	beq.n	800e8fc <nk_panel_end+0x404>
                in->mouse.scroll_delta.y = 0;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	f8c9 3160 	str.w	r3, [r9, #352]	; 0x160
        }
        {
            /* horizontal scrollbar */
            nk_flags state = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	9303      	str	r3, [sp, #12]
            scroll.x = layout->bounds.x;
 800e900:	ed95 0a02 	vldr	s0, [r5, #8]
            scroll.y = layout->bounds.y + layout->bounds.h;
 800e904:	edd5 0a03 	vldr	s1, [r5, #12]
 800e908:	edd5 7a05 	vldr	s15, [r5, #20]
 800e90c:	ee70 0aa7 	vadd.f32	s1, s1, s15
            scroll.w = layout->bounds.w;
 800e910:	ed95 1a04 	vldr	s2, [r5, #16]
 800e914:	ed8d 1a06 	vstr	s2, [sp, #24]
            scroll.h = scrollbar_size.y;

            scroll_offset = (float)*layout->offset_x;
 800e918:	69ab      	ldr	r3, [r5, #24]
 800e91a:	ed93 2a00 	vldr	s4, [r3]
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 800e91e:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
            scroll_step = layout->max_x * 0.05f;
            scroll_inc = layout->max_x * 0.005f;
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollh, in, style->font);
 800e922:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 800e926:	ed8d 0a04 	vstr	s0, [sp, #16]
 800e92a:	edcd 0a05 	vstr	s1, [sp, #20]
 800e92e:	ed8d 9a07 	vstr	s18, [sp, #28]
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 800e932:	ee77 2ac0 	vsub.f32	s5, s15, s0
 800e936:	eefd 2ae2 	vcvt.s32.f32	s5, s5
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	f8cd 9000 	str.w	r9, [sp]
 800e940:	f506 5381 	add.w	r3, r6, #4128	; 0x1020
 800e944:	330c      	adds	r3, #12
 800e946:	ed5f 3a3f 	vldr	s7, [pc, #-252]	; 800e84c <nk_panel_end+0x354>
 800e94a:	ee67 3aa3 	vmul.f32	s7, s15, s7
 800e94e:	ed1f 3a40 	vldr	s6, [pc, #-256]	; 800e850 <nk_panel_end+0x358>
 800e952:	ee27 3a83 	vmul.f32	s6, s15, s6
 800e956:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 800e95a:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 800e95e:	465a      	mov	r2, fp
 800e960:	eef0 1a49 	vmov.f32	s3, s18
 800e964:	4639      	mov	r1, r7
 800e966:	a803      	add	r0, sp, #12
 800e968:	f002 f884 	bl	8010a74 <nk_do_scrollbarh>
            *layout->offset_x = (nk_uint)scroll_offset;
 800e96c:	69ab      	ldr	r3, [r5, #24]
 800e96e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e972:	ed83 0a00 	vstr	s0, [r3]
        }
    }

    /* hide scroll if no user input */
    if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {
 800e976:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e978:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e97c:	d039      	beq.n	800e9f2 <nk_panel_end+0x4fa>
        int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;
 800e97e:	edd6 7a55 	vldr	s15, [r6, #340]	; 0x154
 800e982:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98a:	f040 81fd 	bne.w	800ed88 <nk_panel_end+0x890>
 800e98e:	edd6 7a56 	vldr	s15, [r6, #344]	; 0x158
 800e992:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99a:	f040 81f5 	bne.w	800ed88 <nk_panel_end+0x890>
 800e99e:	edd6 9a58 	vldr	s19, [r6, #352]	; 0x160
        int is_window_hovered = nk_window_is_hovered(ctx);
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f007 fcae 	bl	8016304 <nk_window_is_hovered>
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 800e9a8:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800e9ac:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800e9b0:	f003 0302 	and.w	r3, r3, #2
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 800e9b4:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9bc:	f040 81ed 	bne.w	800ed9a <nk_panel_end+0x8a2>
 800e9c0:	b910      	cbnz	r0, 800e9c8 <nk_panel_end+0x4d0>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f040 81ec 	bne.w	800eda0 <nk_panel_end+0x8a8>
            window->scrollbar_hiding_timer += ctx->delta_time_seconds;
 800e9c8:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 800e9cc:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 800e9d0:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 800e9d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9d8:	e00d      	b.n	800e9f6 <nk_panel_end+0x4fe>
            scroll_has_scrolling = 0;
 800e9da:	f04f 0b00 	mov.w	fp, #0
 800e9de:	e745      	b.n	800e86c <nk_panel_end+0x374>
 800e9e0:	f04f 0b00 	mov.w	fp, #0
 800e9e4:	e742      	b.n	800e86c <nk_panel_end+0x374>
 800e9e6:	f04f 0b00 	mov.w	fp, #0
 800e9ea:	e73f      	b.n	800e86c <nk_panel_end+0x374>
 800e9ec:	f04f 0b00 	mov.w	fp, #0
 800e9f0:	e73c      	b.n	800e86c <nk_panel_end+0x374>
 800e9f2:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 800e854 <nk_panel_end+0x35c>
        else window->scrollbar_hiding_timer = 0;
 800e9f6:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    } else window->scrollbar_hiding_timer = 0;

    /* window border */
    if (layout->flags & NK_WINDOW_BORDER)
 800e9fa:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800e9fe:	f01a 0f01 	tst.w	sl, #1
 800ea02:	d02f      	beq.n	800ea64 <nk_panel_end+0x56c>
    {
        struct nk_color border_color = nk_panel_get_border_color(style, layout->type);
 800ea04:	7829      	ldrb	r1, [r5, #0]
 800ea06:	4640      	mov	r0, r8
 800ea08:	f7ff f920 	bl	800dc4c <nk_panel_get_border_color>
 800ea0c:	9003      	str	r0, [sp, #12]
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
            ? (style->window.border + window->bounds.y + layout->header_height)
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 800ea0e:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 800ea12:	f000 80c1 	beq.w	800eb98 <nk_panel_end+0x6a0>
            ? (style->window.border + window->bounds.y + layout->header_height)
 800ea16:	f506 53d0 	add.w	r3, r6, #6656	; 0x1a00
 800ea1a:	edd3 1a06 	vldr	s3, [r3, #24]
 800ea1e:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 800ea22:	ee71 1aa7 	vadd.f32	s3, s3, s15
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 800ea26:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
 800ea2a:	ee71 1aa7 	vadd.f32	s3, s3, s15
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
                : (window->bounds.y + window->bounds.h));
        struct nk_rect b = window->bounds;
 800ea2e:	f10d 0c10 	add.w	ip, sp, #16
 800ea32:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800ea36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        b.h = padding_y - window->bounds.y;
 800ea3c:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 800ea40:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800ea44:	edcd 1a07 	vstr	s3, [sp, #28]
        nk_stroke_rect(out, b, 0, layout->border, border_color);
 800ea48:	9903      	ldr	r1, [sp, #12]
 800ea4a:	edd5 2a0d 	vldr	s5, [r5, #52]	; 0x34
 800ea4e:	ed1f 2a7f 	vldr	s4, [pc, #-508]	; 800e854 <nk_panel_end+0x35c>
 800ea52:	ed9d 0a04 	vldr	s0, [sp, #16]
 800ea56:	eddd 0a05 	vldr	s1, [sp, #20]
 800ea5a:	ed9d 1a06 	vldr	s2, [sp, #24]
 800ea5e:	4638      	mov	r0, r7
 800ea60:	f7fc fa68 	bl	800af34 <nk_stroke_rect>
    }

    /* scaler */
    if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))
 800ea64:	686b      	ldr	r3, [r5, #4]
 800ea66:	f013 0f04 	tst.w	r3, #4
 800ea6a:	d03e      	beq.n	800eaea <nk_panel_end+0x5f2>
 800ea6c:	f1b9 0f00 	cmp.w	r9, #0
 800ea70:	d03b      	beq.n	800eaea <nk_panel_end+0x5f2>
 800ea72:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800ea76:	d138      	bne.n	800eaea <nk_panel_end+0x5f2>
    {
        /* calculate scaler bounds */
        struct nk_rect scaler;
        scaler.w = scrollbar_size.x;
        scaler.h = scrollbar_size.y;
        scaler.y = layout->bounds.y + layout->bounds.h;
 800ea78:	edd5 9a03 	vldr	s19, [r5, #12]
 800ea7c:	edd5 7a05 	vldr	s15, [r5, #20]
 800ea80:	ee79 9aa7 	vadd.f32	s19, s19, s15
        if (layout->flags & NK_WINDOW_SCALE_LEFT)
 800ea84:	f413 7100 	ands.w	r1, r3, #512	; 0x200
 800ea88:	f000 809b 	beq.w	800ebc2 <nk_panel_end+0x6ca>
            scaler.x = layout->bounds.x - panel_padding.x * 0.5f;
 800ea8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ea90:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ea94:	ed95 8a02 	vldr	s16, [r5, #8]
 800ea98:	ee38 8a67 	vsub.f32	s16, s16, s15
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
        if (layout->flags & NK_WINDOW_NO_SCROLLBAR)
 800ea9c:	f013 0f20 	tst.w	r3, #32
            scaler.x -= scaler.w;
 800eaa0:	bf18      	it	ne
 800eaa2:	ee38 8a68 	vsubne.f32	s16, s16, s17

        /* draw scaler */
        {const struct nk_style_item *item = &style->window.scaler;
 800eaa6:	f506 53cf 	add.w	r3, r6, #6624	; 0x19e0
 800eaaa:	331c      	adds	r3, #28
        if (item->type == NK_STYLE_ITEM_IMAGE)
 800eaac:	f506 5280 	add.w	r2, r6, #4096	; 0x1000
 800eab0:	f892 29fc 	ldrb.w	r2, [r2, #2556]	; 0x9fc
 800eab4:	2a01      	cmp	r2, #1
 800eab6:	f000 808d 	beq.w	800ebd4 <nk_panel_end+0x6dc>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
        else {
            if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 800eaba:	2900      	cmp	r1, #0
 800eabc:	f000 80a2 	beq.w	800ec04 <nk_panel_end+0x70c>
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 800eac0:	ee79 1a89 	vadd.f32	s3, s19, s18
 800eac4:	6859      	ldr	r1, [r3, #4]
 800eac6:	eef0 2a61 	vmov.f32	s5, s3
 800eaca:	ee38 2a28 	vadd.f32	s4, s16, s17
 800eace:	eeb0 1a48 	vmov.f32	s2, s16
 800ead2:	eef0 0a69 	vmov.f32	s1, s19
 800ead6:	eeb0 0a48 	vmov.f32	s0, s16
 800eada:	4638      	mov	r0, r7
 800eadc:	f7fc fbc4 	bl	800b268 <nk_fill_triangle>
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
            }
        }}

        /* do window scaling */
        if (!(window->flags & NK_WINDOW_ROM)) {
 800eae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eae2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800eae6:	f000 809e 	beq.w	800ec26 <nk_panel_end+0x72e>
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
            }
        }
    }
    if (!nk_panel_is_sub(layout->type)) {
 800eaea:	782b      	ldrb	r3, [r5, #0]
 800eaec:	f013 0ff6 	tst.w	r3, #246	; 0xf6
 800eaf0:	d107      	bne.n	800eb02 <nk_panel_end+0x60a>
        /* window is hidden so clear command buffer  */
        if (layout->flags & NK_WINDOW_HIDDEN)
 800eaf2:	686b      	ldr	r3, [r5, #4]
 800eaf4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800eaf8:	f000 811c 	beq.w	800ed34 <nk_panel_end+0x83c>
            nk_command_buffer_reset(&window->buffer);
 800eafc:	4638      	mov	r0, r7
 800eafe:	f7fc f97d 	bl	800adfc <nk_command_buffer_reset>
        /* window is visible and not tab */
        else nk_finish(ctx, window);
    }

    /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
    if (layout->flags & NK_WINDOW_REMOVE_ROM) {
 800eb02:	686b      	ldr	r3, [r5, #4]
 800eb04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        layout->flags &= ~(nk_flags)NK_WINDOW_ROM;
        layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 800eb08:	bf1c      	itt	ne
 800eb0a:	f423 3388 	bicne.w	r3, r3, #69632	; 0x11000
 800eb0e:	606b      	strne	r3, [r5, #4]
    }
    window->flags = layout->flags;
 800eb10:	686b      	ldr	r3, [r5, #4]
 800eb12:	64a3      	str	r3, [r4, #72]	; 0x48

    /* property garbage collector */
    if (window->property.active && window->property.old != window->property.seq &&
 800eb14:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800eb18:	b153      	cbz	r3, 800eb30 <nk_panel_end+0x638>
 800eb1a:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 800eb1e:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 800eb22:	4291      	cmp	r1, r2
 800eb24:	d004      	beq.n	800eb30 <nk_panel_end+0x638>
 800eb26:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	f000 8107 	beq.w	800ed3e <nk_panel_end+0x846>
        window->property.active == window->property.prev) {
        nk_zero(&window->property, sizeof(window->property));
    } else {
        window->property.old = window->property.seq;
 800eb30:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 800eb34:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
        window->property.prev = window->property.active;
 800eb38:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        window->property.seq = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    }
    /* edit garbage collector */
    if (window->edit.active && window->edit.old != window->edit.seq &&
 800eb42:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800eb46:	b153      	cbz	r3, 800eb5e <nk_panel_end+0x666>
 800eb48:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 800eb4c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 800eb50:	4291      	cmp	r1, r2
 800eb52:	d004      	beq.n	800eb5e <nk_panel_end+0x666>
 800eb54:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	f000 80f6 	beq.w	800ed4a <nk_panel_end+0x852>
       window->edit.active == window->edit.prev) {
        nk_zero(&window->edit, sizeof(window->edit));
    } else {
        window->edit.old = window->edit.seq;
 800eb5e:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 800eb62:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
        window->edit.prev = window->edit.active;
 800eb66:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        window->edit.seq = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    }
    /* contextual garbage collector */
    if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {
 800eb70:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f000 80ee 	beq.w	800ed56 <nk_panel_end+0x85e>
 800eb7a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800eb7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800eb82:	429a      	cmp	r2, r3
 800eb84:	f000 80e7 	beq.w	800ed56 <nk_panel_end+0x85e>
        window->popup.con_count = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
        window->popup.con_old = 0;
 800eb8e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        window->popup.active_con = 0;
 800eb92:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 800eb96:	e0e5      	b.n	800ed64 <nk_panel_end+0x86c>
                : (window->bounds.y + window->bounds.h));
 800eb98:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 800eb9c:	d00a      	beq.n	800ebb4 <nk_panel_end+0x6bc>
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
 800eb9e:	edd5 1a03 	vldr	s3, [r5, #12]
 800eba2:	edd5 7a05 	vldr	s15, [r5, #20]
 800eba6:	ee71 1aa7 	vadd.f32	s3, s3, s15
                : (window->bounds.y + window->bounds.h));
 800ebaa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800ebae:	ee71 1aa7 	vadd.f32	s3, s3, s15
 800ebb2:	e73c      	b.n	800ea2e <nk_panel_end+0x536>
 800ebb4:	edd4 1a14 	vldr	s3, [r4, #80]	; 0x50
 800ebb8:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800ebbc:	ee71 1aa7 	vadd.f32	s3, s3, s15
 800ebc0:	e735      	b.n	800ea2e <nk_panel_end+0x536>
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 800ebc2:	edd5 7a02 	vldr	s15, [r5, #8]
 800ebc6:	ed95 7a04 	vldr	s14, [r5, #16]
 800ebca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebce:	ee37 8a88 	vadd.f32	s16, s15, s16
 800ebd2:	e763      	b.n	800ea9c <nk_panel_end+0x5a4>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
 800ebd4:	ed8d 8a04 	vstr	s16, [sp, #16]
 800ebd8:	edcd 9a05 	vstr	s19, [sp, #20]
 800ebdc:	edcd 8a06 	vstr	s17, [sp, #24]
 800ebe0:	ed8d 9a07 	vstr	s18, [sp, #28]
 800ebe4:	4b70      	ldr	r3, [pc, #448]	; (800eda8 <nk_panel_end+0x8b0>)
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	f506 51d0 	add.w	r1, r6, #6656	; 0x1a00
 800ebec:	eeb0 0a48 	vmov.f32	s0, s16
 800ebf0:	eef0 0a69 	vmov.f32	s1, s19
 800ebf4:	eeb0 1a68 	vmov.f32	s2, s17
 800ebf8:	eef0 1a49 	vmov.f32	s3, s18
 800ebfc:	4638      	mov	r0, r7
 800ebfe:	f7fc fbe5 	bl	800b3cc <nk_draw_image>
 800ec02:	e76d      	b.n	800eae0 <nk_panel_end+0x5e8>
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 800ec04:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ec08:	ee79 1a89 	vadd.f32	s3, s19, s18
 800ec0c:	6859      	ldr	r1, [r3, #4]
 800ec0e:	eef0 2a61 	vmov.f32	s5, s3
 800ec12:	eeb0 2a48 	vmov.f32	s4, s16
 800ec16:	eeb0 1a40 	vmov.f32	s2, s0
 800ec1a:	eef0 0a69 	vmov.f32	s1, s19
 800ec1e:	4638      	mov	r0, r7
 800ec20:	f7fc fb22 	bl	800b268 <nk_fill_triangle>
 800ec24:	e75c      	b.n	800eae0 <nk_panel_end+0x5e8>
            struct nk_vec2 window_size = style->window.min_size;
 800ec26:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800ec2a:	f603 224c 	addw	r2, r3, #2636	; 0xa4c
 800ec2e:	ed92 aa00 	vldr	s20, [r2]
 800ec32:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 800ec36:	edd3 aa00 	vldr	s21, [r3]
            int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 800ec3a:	f8d9 8104 	ldr.w	r8, [r9, #260]	; 0x104
            int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
 800ec3e:	ed8d 8a04 	vstr	s16, [sp, #16]
 800ec42:	edcd 9a05 	vstr	s19, [sp, #20]
 800ec46:	edcd 8a06 	vstr	s17, [sp, #24]
 800ec4a:	ed8d 9a07 	vstr	s18, [sp, #28]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	eeb0 0a48 	vmov.f32	s0, s16
 800ec54:	eef0 0a69 	vmov.f32	s1, s19
 800ec58:	eeb0 1a68 	vmov.f32	s2, s17
 800ec5c:	eef0 1a49 	vmov.f32	s3, s18
 800ec60:	2100      	movs	r1, #0
 800ec62:	4648      	mov	r0, r9
 800ec64:	f7fe f838 	bl	800ccd8 <nk_input_has_mouse_click_down_in_rect>
            if (left_mouse_down && left_mouse_click_in_scaler) {
 800ec68:	f1b8 0f00 	cmp.w	r8, #0
 800ec6c:	f43f af3d 	beq.w	800eaea <nk_panel_end+0x5f2>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f43f af3a 	beq.w	800eaea <nk_panel_end+0x5f2>
                float delta_x = in->mouse.delta.x;
 800ec76:	ed99 7a55 	vldr	s14, [r9, #340]	; 0x154
                if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 800ec7a:	686b      	ldr	r3, [r5, #4]
 800ec7c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ec80:	d007      	beq.n	800ec92 <nk_panel_end+0x79a>
                    window->bounds.x += in->mouse.delta.x;
 800ec82:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 800ec86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec8a:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
                    delta_x = -delta_x;
 800ec8e:	eeb1 7a47 	vneg.f32	s14, s14
                if (window->bounds.w + delta_x >= window_size.x) {
 800ec92:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 800ec96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec9a:	eef4 7aca 	vcmpe.f32	s15, s20
 800ec9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca2:	db12      	blt.n	800ecca <nk_panel_end+0x7d2>
                    if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {
 800eca4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800eca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecac:	d407      	bmi.n	800ecbe <nk_panel_end+0x7c6>
 800ecae:	dd0c      	ble.n	800ecca <nk_panel_end+0x7d2>
 800ecb0:	ed99 7a51 	vldr	s14, [r9, #324]	; 0x144
 800ecb4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ecb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbc:	db05      	blt.n	800ecca <nk_panel_end+0x7d2>
                        window->bounds.w = window->bounds.w + delta_x;
 800ecbe:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
                        scaler.x += in->mouse.delta.x;
 800ecc2:	edd9 7a55 	vldr	s15, [r9, #340]	; 0x154
 800ecc6:	ee38 8a27 	vadd.f32	s16, s16, s15
                if (!(layout->flags & NK_WINDOW_DYNAMIC)) {
 800ecca:	686b      	ldr	r3, [r5, #4]
 800eccc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ecd0:	d11d      	bne.n	800ed0e <nk_panel_end+0x816>
                    if (window_size.y < window->bounds.h + in->mouse.delta.y) {
 800ecd2:	ed99 7a56 	vldr	s14, [r9, #344]	; 0x158
 800ecd6:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800ecda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecde:	eef4 7aea 	vcmpe.f32	s15, s21
 800ece2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece6:	dd12      	ble.n	800ed0e <nk_panel_end+0x816>
                        if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {
 800ece8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ecec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf0:	d407      	bmi.n	800ed02 <nk_panel_end+0x80a>
 800ecf2:	dd0c      	ble.n	800ed0e <nk_panel_end+0x816>
 800ecf4:	ed99 7a52 	vldr	s14, [r9, #328]	; 0x148
 800ecf8:	eef4 9ac7 	vcmpe.f32	s19, s14
 800ecfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed00:	d805      	bhi.n	800ed0e <nk_panel_end+0x816>
                            window->bounds.h = window->bounds.h + in->mouse.delta.y;
 800ed02:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
                            scaler.y += in->mouse.delta.y;
 800ed06:	edd9 7a56 	vldr	s15, [r9, #344]	; 0x158
 800ed0a:	ee79 9aa7 	vadd.f32	s19, s19, s15
                ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
 800ed0e:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
 800ed12:	f8c6 3188 	str.w	r3, [r6, #392]	; 0x188
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
 800ed16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ed1a:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800ed1e:	ee37 7a08 	vadd.f32	s14, s14, s16
 800ed22:	ed89 7a43 	vstr	s14, [r9, #268]	; 0x10c
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
 800ed26:	ee69 7a27 	vmul.f32	s15, s18, s15
 800ed2a:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800ed2e:	edc9 7a44 	vstr	s15, [r9, #272]	; 0x110
 800ed32:	e6da      	b.n	800eaea <nk_panel_end+0x5f2>
        else nk_finish(ctx, window);
 800ed34:	4621      	mov	r1, r4
 800ed36:	4630      	mov	r0, r6
 800ed38:	f7fb fdbc 	bl	800a8b4 <nk_finish>
 800ed3c:	e6e1      	b.n	800eb02 <nk_panel_end+0x60a>
        nk_zero(&window->property, sizeof(window->property));
 800ed3e:	2168      	movs	r1, #104	; 0x68
 800ed40:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800ed44:	f006 f820 	bl	8014d88 <nk_zero>
 800ed48:	e6fb      	b.n	800eb42 <nk_panel_end+0x64a>
        nk_zero(&window->edit, sizeof(window->edit));
 800ed4a:	212c      	movs	r1, #44	; 0x2c
 800ed4c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800ed50:	f006 f81a 	bl	8014d88 <nk_zero>
 800ed54:	e70c      	b.n	800eb70 <nk_panel_end+0x678>
    } else {
        window->popup.con_old = window->popup.con_count;
 800ed56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800ed5a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        window->popup.con_count = 0;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    }
    window->popup.combo_count = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
    NK_ASSERT(!layout->row.tree_depth);
 800ed6a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800ed6e:	b923      	cbnz	r3, 800ed7a <nk_panel_end+0x882>
}
 800ed70:	b00b      	add	sp, #44	; 0x2c
 800ed72:	ecbd 8b06 	vpop	{d8-d10}
 800ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NK_ASSERT(!layout->row.tree_depth);
 800ed7a:	4b0c      	ldr	r3, [pc, #48]	; (800edac <nk_panel_end+0x8b4>)
 800ed7c:	4a0c      	ldr	r2, [pc, #48]	; (800edb0 <nk_panel_end+0x8b8>)
 800ed7e:	f240 216b 	movw	r1, #619	; 0x26b
 800ed82:	480c      	ldr	r0, [pc, #48]	; (800edb4 <nk_panel_end+0x8bc>)
 800ed84:	f007 fbe2 	bl	801654c <__assert_func>
        int is_window_hovered = nk_window_is_hovered(ctx);
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f007 fabb 	bl	8016304 <nk_window_is_hovered>
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 800ed8e:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800ed92:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800ed96:	f003 0302 	and.w	r3, r3, #2
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	f43f ae11 	beq.w	800e9c2 <nk_panel_end+0x4ca>
            scroll_has_scrolling = 0;
 800eda0:	eddf 7a05 	vldr	s15, [pc, #20]	; 800edb8 <nk_panel_end+0x8c0>
 800eda4:	e627      	b.n	800e9f6 <nk_panel_end+0x4fe>
 800eda6:	bf00      	nop
 800eda8:	0801b454 	.word	0x0801b454
 800edac:	0801b40c 	.word	0x0801b40c
 800edb0:	0801b424 	.word	0x0801b424
 800edb4:	0801b3f0 	.word	0x0801b3f0
 800edb8:	00000000 	.word	0x00000000

0800edbc <nk_pool_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,
    unsigned int capacity)
{
 800edbc:	b570      	push	{r4, r5, r6, lr}
    NK_ASSERT(capacity >= 1);
 800edbe:	b17a      	cbz	r2, 800ede0 <nk_pool_init+0x24>
 800edc0:	4604      	mov	r4, r0
 800edc2:	460d      	mov	r5, r1
 800edc4:	4616      	mov	r6, r2
    nk_zero(pool, sizeof(*pool));
 800edc6:	2128      	movs	r1, #40	; 0x28
 800edc8:	f005 ffde 	bl	8014d88 <nk_zero>
    pool->alloc = *alloc;
 800edcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800edd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    pool->capacity = capacity;
 800edd4:	61e6      	str	r6, [r4, #28]
    pool->type = NK_BUFFER_DYNAMIC;
 800edd6:	2301      	movs	r3, #1
 800edd8:	7323      	strb	r3, [r4, #12]
    pool->pages = 0;
 800edda:	2300      	movs	r3, #0
 800eddc:	6163      	str	r3, [r4, #20]
}
 800edde:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(capacity >= 1);
 800ede0:	4b02      	ldr	r3, [pc, #8]	; (800edec <nk_pool_init+0x30>)
 800ede2:	4a03      	ldr	r2, [pc, #12]	; (800edf0 <nk_pool_init+0x34>)
 800ede4:	210d      	movs	r1, #13
 800ede6:	4803      	ldr	r0, [pc, #12]	; (800edf4 <nk_pool_init+0x38>)
 800ede8:	f007 fbb0 	bl	801654c <__assert_func>
 800edec:	0801b458 	.word	0x0801b458
 800edf0:	0801b4f8 	.word	0x0801b4f8
 800edf4:	0801b468 	.word	0x0801b468

0800edf8 <nk_pool_init_fixed>:
        iter = next;
    }
}
NK_LIB void
nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)
{
 800edf8:	b570      	push	{r4, r5, r6, lr}
 800edfa:	4604      	mov	r4, r0
 800edfc:	460e      	mov	r6, r1
 800edfe:	4615      	mov	r5, r2
    nk_zero(pool, sizeof(*pool));
 800ee00:	2128      	movs	r1, #40	; 0x28
 800ee02:	f005 ffc1 	bl	8014d88 <nk_zero>
    NK_ASSERT(size >= sizeof(struct nk_page));
 800ee06:	f5b5 7fdc 	cmp.w	r5, #440	; 0x1b8
 800ee0a:	d30c      	bcc.n	800ee26 <nk_pool_init_fixed+0x2e>
    if (size < sizeof(struct nk_page)) return;
    /* first nk_page_element is embedded in nk_page, additional elements follow in adjacent space */
    pool->capacity = (unsigned)(1 + (size - sizeof(struct nk_page)) / sizeof(struct nk_page_element));
 800ee0c:	f5a5 73dc 	sub.w	r3, r5, #440	; 0x1b8
 800ee10:	091b      	lsrs	r3, r3, #4
 800ee12:	4a08      	ldr	r2, [pc, #32]	; (800ee34 <nk_pool_init_fixed+0x3c>)
 800ee14:	fba2 2303 	umull	r2, r3, r2, r3
 800ee18:	3301      	adds	r3, #1
 800ee1a:	61e3      	str	r3, [r4, #28]
    pool->pages = (struct nk_page*)memory;
 800ee1c:	6166      	str	r6, [r4, #20]
    pool->type = NK_BUFFER_FIXED;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	7323      	strb	r3, [r4, #12]
    pool->size = size;
 800ee22:	6225      	str	r5, [r4, #32]
}
 800ee24:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(size >= sizeof(struct nk_page));
 800ee26:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <nk_pool_init_fixed+0x40>)
 800ee28:	4a04      	ldr	r2, [pc, #16]	; (800ee3c <nk_pool_init_fixed+0x44>)
 800ee2a:	2125      	movs	r1, #37	; 0x25
 800ee2c:	4804      	ldr	r0, [pc, #16]	; (800ee40 <nk_pool_init_fixed+0x48>)
 800ee2e:	f007 fb8d 	bl	801654c <__assert_func>
 800ee32:	bf00      	nop
 800ee34:	097b425f 	.word	0x097b425f
 800ee38:	0801b484 	.word	0x0801b484
 800ee3c:	0801b4e4 	.word	0x0801b4e4
 800ee40:	0801b468 	.word	0x0801b468

0800ee44 <nk_pool_alloc>:
NK_LIB struct nk_page_element*
nk_pool_alloc(struct nk_pool *pool)
{
 800ee44:	b510      	push	{r4, lr}
 800ee46:	4604      	mov	r4, r0
    if (!pool->pages || pool->pages->size >= pool->capacity) {
 800ee48:	6943      	ldr	r3, [r0, #20]
 800ee4a:	b1db      	cbz	r3, 800ee84 <nk_pool_alloc+0x40>
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	69c3      	ldr	r3, [r0, #28]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d20f      	bcs.n	800ee74 <nk_pool_alloc+0x30>
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
            page->next = pool->pages;
            pool->pages = page;
            page->size = 0;
        }
    } return &pool->pages->win[pool->pages->size++];
 800ee54:	6960      	ldr	r0, [r4, #20]
 800ee56:	6803      	ldr	r3, [r0, #0]
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	6002      	str	r2, [r0, #0]
 800ee5c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ee60:	fb02 0003 	mla	r0, r2, r3, r0
 800ee64:	3008      	adds	r0, #8
}
 800ee66:	bd10      	pop	{r4, pc}
            NK_ASSERT(pool->pages);
 800ee68:	4b10      	ldr	r3, [pc, #64]	; (800eeac <nk_pool_alloc+0x68>)
 800ee6a:	4a11      	ldr	r2, [pc, #68]	; (800eeb0 <nk_pool_alloc+0x6c>)
 800ee6c:	2134      	movs	r1, #52	; 0x34
 800ee6e:	4811      	ldr	r0, [pc, #68]	; (800eeb4 <nk_pool_alloc+0x70>)
 800ee70:	f007 fb6c 	bl	801654c <__assert_func>
        if (pool->type == NK_BUFFER_FIXED) {
 800ee74:	7b03      	ldrb	r3, [r0, #12]
 800ee76:	b943      	cbnz	r3, 800ee8a <nk_pool_alloc+0x46>
            NK_ASSERT(pool->pages->size < pool->capacity);
 800ee78:	4b0f      	ldr	r3, [pc, #60]	; (800eeb8 <nk_pool_alloc+0x74>)
 800ee7a:	4a0d      	ldr	r2, [pc, #52]	; (800eeb0 <nk_pool_alloc+0x6c>)
 800ee7c:	2136      	movs	r1, #54	; 0x36
 800ee7e:	480d      	ldr	r0, [pc, #52]	; (800eeb4 <nk_pool_alloc+0x70>)
 800ee80:	f007 fb64 	bl	801654c <__assert_func>
        if (pool->type == NK_BUFFER_FIXED) {
 800ee84:	7b03      	ldrb	r3, [r0, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d0ee      	beq.n	800ee68 <nk_pool_alloc+0x24>
            size += (pool->capacity - 1) * sizeof(struct nk_page_element);
 800ee8a:	69e2      	ldr	r2, [r4, #28]
 800ee8c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800ee90:	fb03 f202 	mul.w	r2, r3, r2
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
 800ee94:	6863      	ldr	r3, [r4, #4]
 800ee96:	3208      	adds	r2, #8
 800ee98:	2100      	movs	r1, #0
 800ee9a:	6820      	ldr	r0, [r4, #0]
 800ee9c:	4798      	blx	r3
            page->next = pool->pages;
 800ee9e:	6963      	ldr	r3, [r4, #20]
 800eea0:	6043      	str	r3, [r0, #4]
            pool->pages = page;
 800eea2:	6160      	str	r0, [r4, #20]
            page->size = 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	6003      	str	r3, [r0, #0]
 800eea8:	e7d4      	b.n	800ee54 <nk_pool_alloc+0x10>
 800eeaa:	bf00      	nop
 800eeac:	0801b4a4 	.word	0x0801b4a4
 800eeb0:	0801b4d4 	.word	0x0801b4d4
 800eeb4:	0801b468 	.word	0x0801b468
 800eeb8:	0801b4b0 	.word	0x0801b4b0

0800eebc <nk_popup_begin>:
 *
 * ===============================================================*/
NK_API nk_bool
nk_popup_begin(struct nk_context *ctx, enum nk_popup_type type,
    const char *title, nk_flags flags, struct nk_rect rect)
{
 800eebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec0:	ed2d 8b02 	vpush	{d8}
 800eec4:	b084      	sub	sp, #16
 800eec6:	ed8d 0a00 	vstr	s0, [sp]
 800eeca:	edcd 0a01 	vstr	s1, [sp, #4]
 800eece:	ed8d 1a02 	vstr	s2, [sp, #8]
 800eed2:	edcd 1a03 	vstr	s3, [sp, #12]

    int title_len;
    nk_hash title_hash;
    nk_size allocated;

    NK_ASSERT(ctx);
 800eed6:	b378      	cbz	r0, 800ef38 <nk_popup_begin+0x7c>
 800eed8:	468a      	mov	sl, r1
 800eeda:	4617      	mov	r7, r2
 800eedc:	4698      	mov	r8, r3
 800eede:	eef0 8a40 	vmov.f32	s17, s0
 800eee2:	eeb0 8a60 	vmov.f32	s16, s1
 800eee6:	4606      	mov	r6, r0
    NK_ASSERT(title);
 800eee8:	b362      	cbz	r2, 800ef44 <nk_popup_begin+0x88>
    NK_ASSERT(ctx->current);
 800eeea:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800eeee:	f8d3 4658 	ldr.w	r4, [r3, #1624]	; 0x658
 800eef2:	b36c      	cbz	r4, 800ef50 <nk_popup_begin+0x94>
    NK_ASSERT(ctx->current->layout);
 800eef4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800eef8:	b383      	cbz	r3, 800ef5c <nk_popup_begin+0xa0>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return 0;

    win = ctx->current;
    panel = win->layout;
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP) && "popups are not allowed to have popups");
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	f013 0ff4 	tst.w	r3, #244	; 0xf4
 800ef00:	d132      	bne.n	800ef68 <nk_popup_begin+0xac>
    (void)panel;
    title_len = (int)nk_strlen(title);
 800ef02:	4610      	mov	r0, r2
 800ef04:	f005 ff54 	bl	8014db0 <nk_strlen>
 800ef08:	4601      	mov	r1, r0
    title_hash = nk_murmur_hash(title, (int)title_len, NK_PANEL_POPUP);
 800ef0a:	2204      	movs	r2, #4
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	f006 fa77 	bl	8015400 <nk_murmur_hash>
 800ef12:	4681      	mov	r9, r0

    popup = win->popup.win;
 800ef14:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
    if (!popup) {
 800ef18:	b365      	cbz	r5, 800ef74 <nk_popup_begin+0xb8>
        win->popup.active = 0;
        win->popup.type = NK_PANEL_POPUP;
    }

    /* make sure we have correct popup */
    if (win->popup.name != title_hash) {
 800ef1a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800ef1e:	4283      	cmp	r3, r0
 800ef20:	d047      	beq.n	800efb2 <nk_popup_begin+0xf6>
        if (!win->popup.active) {
 800ef22:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d036      	beq.n	800ef98 <nk_popup_begin+0xdc>
            nk_zero(popup, sizeof(*popup));
            win->popup.name = title_hash;
            win->popup.active = 1;
            win->popup.type = NK_PANEL_POPUP;
        } else return 0;
 800ef2a:	2700      	movs	r7, #0
        ctx->current = win;
        nk_free_panel(ctx, popup->layout);
        popup->layout = 0;
        return 0;
    }
}
 800ef2c:	4638      	mov	r0, r7
 800ef2e:	b004      	add	sp, #16
 800ef30:	ecbd 8b02 	vpop	{d8}
 800ef34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NK_ASSERT(ctx);
 800ef38:	4b6b      	ldr	r3, [pc, #428]	; (800f0e8 <nk_popup_begin+0x22c>)
 800ef3a:	4a6c      	ldr	r2, [pc, #432]	; (800f0ec <nk_popup_begin+0x230>)
 800ef3c:	2115      	movs	r1, #21
 800ef3e:	486c      	ldr	r0, [pc, #432]	; (800f0f0 <nk_popup_begin+0x234>)
 800ef40:	f007 fb04 	bl	801654c <__assert_func>
    NK_ASSERT(title);
 800ef44:	4b6b      	ldr	r3, [pc, #428]	; (800f0f4 <nk_popup_begin+0x238>)
 800ef46:	4a69      	ldr	r2, [pc, #420]	; (800f0ec <nk_popup_begin+0x230>)
 800ef48:	2116      	movs	r1, #22
 800ef4a:	4869      	ldr	r0, [pc, #420]	; (800f0f0 <nk_popup_begin+0x234>)
 800ef4c:	f007 fafe 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800ef50:	4b69      	ldr	r3, [pc, #420]	; (800f0f8 <nk_popup_begin+0x23c>)
 800ef52:	4a66      	ldr	r2, [pc, #408]	; (800f0ec <nk_popup_begin+0x230>)
 800ef54:	2117      	movs	r1, #23
 800ef56:	4866      	ldr	r0, [pc, #408]	; (800f0f0 <nk_popup_begin+0x234>)
 800ef58:	f007 faf8 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800ef5c:	4b67      	ldr	r3, [pc, #412]	; (800f0fc <nk_popup_begin+0x240>)
 800ef5e:	4a63      	ldr	r2, [pc, #396]	; (800f0ec <nk_popup_begin+0x230>)
 800ef60:	2118      	movs	r1, #24
 800ef62:	4863      	ldr	r0, [pc, #396]	; (800f0f0 <nk_popup_begin+0x234>)
 800ef64:	f007 faf2 	bl	801654c <__assert_func>
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP) && "popups are not allowed to have popups");
 800ef68:	4b65      	ldr	r3, [pc, #404]	; (800f100 <nk_popup_begin+0x244>)
 800ef6a:	4a60      	ldr	r2, [pc, #384]	; (800f0ec <nk_popup_begin+0x230>)
 800ef6c:	211e      	movs	r1, #30
 800ef6e:	4860      	ldr	r0, [pc, #384]	; (800f0f0 <nk_popup_begin+0x234>)
 800ef70:	f007 faec 	bl	801654c <__assert_func>
        popup = (struct nk_window*)nk_create_window(ctx);
 800ef74:	4630      	mov	r0, r6
 800ef76:	f006 fd53 	bl	8015a20 <nk_create_window>
 800ef7a:	4605      	mov	r5, r0
        popup->parent = win;
 800ef7c:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
        win->popup.win = popup;
 800ef80:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
        win->popup.active = 0;
 800ef84:	2300      	movs	r3, #0
 800ef86:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        win->popup.type = NK_PANEL_POPUP;
 800ef8a:	2304      	movs	r3, #4
 800ef8c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    if (win->popup.name != title_hash) {
 800ef90:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800ef94:	454b      	cmp	r3, r9
 800ef96:	d00c      	beq.n	800efb2 <nk_popup_begin+0xf6>
            nk_zero(popup, sizeof(*popup));
 800ef98:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f005 fef3 	bl	8014d88 <nk_zero>
            win->popup.name = title_hash;
 800efa2:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
            win->popup.active = 1;
 800efa6:	2301      	movs	r3, #1
 800efa8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
            win->popup.type = NK_PANEL_POPUP;
 800efac:	2304      	movs	r3, #4
 800efae:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    ctx->current = popup;
 800efb2:	f506 5e40 	add.w	lr, r6, #12288	; 0x3000
 800efb6:	f8ce 5658 	str.w	r5, [lr, #1624]	; 0x658
    rect.x += win->layout->clip.x;
 800efba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800efbe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800efc2:	ee78 8aa7 	vadd.f32	s17, s17, s15
    rect.y += win->layout->clip.y;
 800efc6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800efca:	ee38 8a27 	vadd.f32	s16, s16, s15
    popup->parent = win;
 800efce:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
    popup->bounds = rect;
 800efd2:	edcd 8a00 	vstr	s17, [sp]
 800efd6:	ed8d 8a01 	vstr	s16, [sp, #4]
 800efda:	f105 0c4c 	add.w	ip, r5, #76	; 0x4c
 800efde:	ab04      	add	r3, sp, #16
 800efe0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800efe4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    popup->seq = ctx->seq;
 800efe8:	f8de 3664 	ldr.w	r3, [lr, #1636]	; 0x664
 800efec:	602b      	str	r3, [r5, #0]
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 800efee:	4630      	mov	r0, r6
 800eff0:	f7fe fd6c 	bl	800dacc <nk_create_panel>
 800eff4:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
    if (type == NK_POPUP_DYNAMIC)
 800eff8:	f1ba 0f01 	cmp.w	sl, #1
    popup->flags |= NK_WINDOW_BORDER;
 800effc:	bf12      	itee	ne
 800effe:	f048 0301 	orrne.w	r3, r8, #1
        popup->flags |= NK_WINDOW_DYNAMIC;
 800f002:	f448 6300 	orreq.w	r3, r8, #2048	; 0x800
 800f006:	f043 0301 	orreq.w	r3, r3, #1
 800f00a:	64ab      	str	r3, [r5, #72]	; 0x48
    popup->buffer = win->buffer;
 800f00c:	f105 0c64 	add.w	ip, r5, #100	; 0x64
 800f010:	f104 0e64 	add.w	lr, r4, #100	; 0x64
 800f014:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f01c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f024:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f028:	e88c 0003 	stmia.w	ip, {r0, r1}
    nk_start_popup(ctx, win);
 800f02c:	4621      	mov	r1, r4
 800f02e:	4630      	mov	r0, r6
 800f030:	f7fb fbda 	bl	800a7e8 <nk_start_popup>
    allocated = ctx->memory.allocated;
 800f034:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800f038:	f8d3 8ab8 	ldr.w	r8, [r3, #2744]	; 0xab8
    nk_push_scissor(&popup->buffer, nk_null_rect);
 800f03c:	4b31      	ldr	r3, [pc, #196]	; (800f104 <nk_popup_begin+0x248>)
 800f03e:	ed93 0a00 	vldr	s0, [r3]
 800f042:	edd3 0a01 	vldr	s1, [r3, #4]
 800f046:	ed93 1a02 	vldr	s2, [r3, #8]
 800f04a:	edd3 1a03 	vldr	s3, [r3, #12]
 800f04e:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800f052:	f7fb ff21 	bl	800ae98 <nk_push_scissor>
    if (nk_panel_begin(ctx, title, NK_PANEL_POPUP)) {
 800f056:	2204      	movs	r2, #4
 800f058:	4639      	mov	r1, r7
 800f05a:	4630      	mov	r0, r6
 800f05c:	f7fe fe50 	bl	800dd00 <nk_panel_begin>
 800f060:	4607      	mov	r7, r0
 800f062:	b300      	cbz	r0, 800f0a6 <nk_popup_begin+0x1ea>
        root = win->layout;
 800f064:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        while (root) {
 800f068:	b14a      	cbz	r2, 800f07e <nk_popup_begin+0x1c2>
            root->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 800f06a:	6853      	ldr	r3, [r2, #4]
 800f06c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f074:	6053      	str	r3, [r2, #4]
            root = root->parent;
 800f076:	f8d2 2198 	ldr.w	r2, [r2, #408]	; 0x198
        while (root) {
 800f07a:	2a00      	cmp	r2, #0
 800f07c:	d1f5      	bne.n	800f06a <nk_popup_begin+0x1ae>
        win->popup.active = 1;
 800f07e:	2701      	movs	r7, #1
 800f080:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
        popup->layout->offset_x = &popup->scrollbar.x;
 800f084:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800f088:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 800f08c:	619a      	str	r2, [r3, #24]
        popup->layout->offset_y = &popup->scrollbar.y;
 800f08e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800f092:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800f096:	61da      	str	r2, [r3, #28]
        popup->layout->parent = win->layout;
 800f098:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800f09c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f0a0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        return 1;
 800f0a4:	e742      	b.n	800ef2c <nk_popup_begin+0x70>
        root = win->layout;
 800f0a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        while (root) {
 800f0aa:	b13b      	cbz	r3, 800f0bc <nk_popup_begin+0x200>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 800f0ac:	685a      	ldr	r2, [r3, #4]
 800f0ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f0b2:	605a      	str	r2, [r3, #4]
            root = root->parent;
 800f0b4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
        while (root) {
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d1f7      	bne.n	800f0ac <nk_popup_begin+0x1f0>
        win->popup.buf.active = 0;
 800f0bc:	f04f 0900 	mov.w	r9, #0
 800f0c0:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
        win->popup.active = 0;
 800f0c4:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
        ctx->memory.allocated = allocated;
 800f0c8:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800f0cc:	f8c3 8ab8 	str.w	r8, [r3, #2744]	; 0xab8
        ctx->current = win;
 800f0d0:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 800f0d4:	f8c3 4658 	str.w	r4, [r3, #1624]	; 0x658
        nk_free_panel(ctx, popup->layout);
 800f0d8:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f7fe fd00 	bl	800dae2 <nk_free_panel>
        popup->layout = 0;
 800f0e2:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
        return 0;
 800f0e6:	e721      	b.n	800ef2c <nk_popup_begin+0x70>
 800f0e8:	0801ad58 	.word	0x0801ad58
 800f0ec:	0801b610 	.word	0x0801b610
 800f0f0:	0801b508 	.word	0x0801b508
 800f0f4:	0801b524 	.word	0x0801b524
 800f0f8:	0801ad5c 	.word	0x0801ad5c
 800f0fc:	0801ad6c 	.word	0x0801ad6c
 800f100:	0801b52c 	.word	0x0801b52c
 800f104:	0801b620 	.word	0x0801b620

0800f108 <nk_nonblock_begin>:
NK_LIB nk_bool
nk_nonblock_begin(struct nk_context *ctx,
    nk_flags flags, struct nk_rect body, struct nk_rect header,
    enum nk_panel_type panel_type)
{
 800f108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f10c:	b088      	sub	sp, #32
 800f10e:	ed8d 0a04 	vstr	s0, [sp, #16]
 800f112:	edcd 0a05 	vstr	s1, [sp, #20]
 800f116:	ed8d 1a06 	vstr	s2, [sp, #24]
 800f11a:	edcd 1a07 	vstr	s3, [sp, #28]
 800f11e:	ed8d 2a00 	vstr	s4, [sp]
 800f122:	edcd 2a01 	vstr	s5, [sp, #4]
 800f126:	ed8d 3a02 	vstr	s6, [sp, #8]
 800f12a:	edcd 3a03 	vstr	s7, [sp, #12]
    struct nk_window *popup;
    struct nk_window *win;
    struct nk_panel *panel;
    int is_active = nk_true;

    NK_ASSERT(ctx);
 800f12e:	2800      	cmp	r0, #0
 800f130:	d04d      	beq.n	800f1ce <nk_nonblock_begin+0xc6>
 800f132:	460e      	mov	r6, r1
 800f134:	4690      	mov	r8, r2
 800f136:	4607      	mov	r7, r0
    NK_ASSERT(ctx->current);
 800f138:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800f13c:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 800f140:	2d00      	cmp	r5, #0
 800f142:	d04a      	beq.n	800f1da <nk_nonblock_begin+0xd2>
    NK_ASSERT(ctx->current->layout);
 800f144:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d04c      	beq.n	800f1e6 <nk_nonblock_begin+0xde>
        return 0;

    /* popups cannot have popups */
    win = ctx->current;
    panel = win->layout;
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	f013 0ff4 	tst.w	r3, #244	; 0xf4
 800f152:	d14e      	bne.n	800f1f2 <nk_nonblock_begin+0xea>
    (void)panel;
    popup = win->popup.win;
 800f154:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
    if (!popup) {
 800f158:	2c00      	cmp	r4, #0
 800f15a:	d050      	beq.n	800f1fe <nk_nonblock_begin+0xf6>
        /* close the popup if user pressed outside or in the header */
        int pressed, in_body, in_header;
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
        pressed = nk_input_is_mouse_released(&ctx->input, NK_BUTTON_LEFT);
#else
        pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 800f15c:	2100      	movs	r1, #0
 800f15e:	f7fd fe5f 	bl	800ce20 <nk_input_is_mouse_pressed>
 800f162:	4681      	mov	r9, r0
#endif
        in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 800f164:	ed9d 0a04 	vldr	s0, [sp, #16]
 800f168:	eddd 0a05 	vldr	s1, [sp, #20]
 800f16c:	ed9d 1a06 	vldr	s2, [sp, #24]
 800f170:	eddd 1a07 	vldr	s3, [sp, #28]
 800f174:	4638      	mov	r0, r7
 800f176:	f7fd fde7 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 800f17a:	4682      	mov	sl, r0
        in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);
 800f17c:	ed9d 0a00 	vldr	s0, [sp]
 800f180:	eddd 0a01 	vldr	s1, [sp, #4]
 800f184:	ed9d 1a02 	vldr	s2, [sp, #8]
 800f188:	eddd 1a03 	vldr	s3, [sp, #12]
 800f18c:	4638      	mov	r0, r7
 800f18e:	f7fd fddb 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
        if (pressed && (!in_body || in_header))
 800f192:	f1b9 0f00 	cmp.w	r9, #0
 800f196:	d042      	beq.n	800f21e <nk_nonblock_begin+0x116>
 800f198:	f1ba 0f00 	cmp.w	sl, #0
 800f19c:	d001      	beq.n	800f1a2 <nk_nonblock_begin+0x9a>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d03d      	beq.n	800f21e <nk_nonblock_begin+0x116>
            is_active = nk_false;
    }
    win->popup.header = header;
 800f1a2:	f505 7498 	add.w	r4, r5, #304	; 0x130
 800f1a6:	466b      	mov	r3, sp
 800f1a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (!is_active) {
        /* remove read only mode from all parent panels */
        struct nk_panel *root = win->layout;
 800f1ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
            is_active = nk_false;
 800f1b2:	2000      	movs	r0, #0
        while (root) {
 800f1b4:	b143      	cbz	r3, 800f1c8 <nk_nonblock_begin+0xc0>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 800f1b6:	685a      	ldr	r2, [r3, #4]
 800f1b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f1bc:	605a      	str	r2, [r3, #4]
            root = root->parent;
 800f1be:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
        while (root) {
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d1f7      	bne.n	800f1b6 <nk_nonblock_begin+0xae>
            is_active = nk_false;
 800f1c6:	2000      	movs	r0, #0
    while (root) {
        root->flags |= NK_WINDOW_ROM;
        root = root->parent;
    }}
    return is_active;
}
 800f1c8:	b008      	add	sp, #32
 800f1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NK_ASSERT(ctx);
 800f1ce:	4b54      	ldr	r3, [pc, #336]	; (800f320 <nk_nonblock_begin+0x218>)
 800f1d0:	4a54      	ldr	r2, [pc, #336]	; (800f324 <nk_nonblock_begin+0x21c>)
 800f1d2:	2173      	movs	r1, #115	; 0x73
 800f1d4:	4854      	ldr	r0, [pc, #336]	; (800f328 <nk_nonblock_begin+0x220>)
 800f1d6:	f007 f9b9 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800f1da:	4b54      	ldr	r3, [pc, #336]	; (800f32c <nk_nonblock_begin+0x224>)
 800f1dc:	4a51      	ldr	r2, [pc, #324]	; (800f324 <nk_nonblock_begin+0x21c>)
 800f1de:	2174      	movs	r1, #116	; 0x74
 800f1e0:	4851      	ldr	r0, [pc, #324]	; (800f328 <nk_nonblock_begin+0x220>)
 800f1e2:	f007 f9b3 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f1e6:	4b52      	ldr	r3, [pc, #328]	; (800f330 <nk_nonblock_begin+0x228>)
 800f1e8:	4a4e      	ldr	r2, [pc, #312]	; (800f324 <nk_nonblock_begin+0x21c>)
 800f1ea:	2175      	movs	r1, #117	; 0x75
 800f1ec:	484e      	ldr	r0, [pc, #312]	; (800f328 <nk_nonblock_begin+0x220>)
 800f1ee:	f007 f9ad 	bl	801654c <__assert_func>
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 800f1f2:	4b50      	ldr	r3, [pc, #320]	; (800f334 <nk_nonblock_begin+0x22c>)
 800f1f4:	4a4b      	ldr	r2, [pc, #300]	; (800f324 <nk_nonblock_begin+0x21c>)
 800f1f6:	217c      	movs	r1, #124	; 0x7c
 800f1f8:	484b      	ldr	r0, [pc, #300]	; (800f328 <nk_nonblock_begin+0x220>)
 800f1fa:	f007 f9a7 	bl	801654c <__assert_func>
        popup = (struct nk_window*)nk_create_window(ctx);
 800f1fe:	f006 fc0f 	bl	8015a20 <nk_create_window>
 800f202:	4604      	mov	r4, r0
        popup->parent = win;
 800f204:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
        win->popup.win = popup;
 800f208:	f8c5 00fc 	str.w	r0, [r5, #252]	; 0xfc
        win->popup.type = panel_type;
 800f20c:	f885 8100 	strb.w	r8, [r5, #256]	; 0x100
        nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);
 800f210:	2201      	movs	r2, #1
 800f212:	f507 51d4 	add.w	r1, r7, #6784	; 0x1a80
 800f216:	310c      	adds	r1, #12
 800f218:	3064      	adds	r0, #100	; 0x64
 800f21a:	f7fb fdcf 	bl	800adbc <nk_command_buffer_init>
    win->popup.header = header;
 800f21e:	f505 7c98 	add.w	ip, r5, #304	; 0x130
 800f222:	466b      	mov	r3, sp
 800f224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f226:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    popup->bounds = body;
 800f22a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800f22e:	ab08      	add	r3, sp, #32
 800f230:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f234:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    popup->parent = win;
 800f238:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 800f23c:	4638      	mov	r0, r7
 800f23e:	f7fe fc45 	bl	800dacc <nk_create_panel>
 800f242:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    popup->flags |= NK_WINDOW_DYNAMIC;
 800f246:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 800f24a:	f046 0601 	orr.w	r6, r6, #1
 800f24e:	64a6      	str	r6, [r4, #72]	; 0x48
    popup->seq = ctx->seq;
 800f250:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800f254:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800f258:	6023      	str	r3, [r4, #0]
    win->popup.active = 1;
 800f25a:	2301      	movs	r3, #1
 800f25c:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    NK_ASSERT(popup->layout);
 800f260:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f264:	2b00      	cmp	r3, #0
 800f266:	d053      	beq.n	800f310 <nk_nonblock_begin+0x208>
    nk_start_popup(ctx, win);
 800f268:	4629      	mov	r1, r5
 800f26a:	4638      	mov	r0, r7
 800f26c:	f7fb fabc 	bl	800a7e8 <nk_start_popup>
    popup->buffer = win->buffer;
 800f270:	f104 0664 	add.w	r6, r4, #100	; 0x64
 800f274:	f105 0c64 	add.w	ip, r5, #100	; 0x64
 800f278:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f27c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f27e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f282:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f284:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f288:	e886 0003 	stmia.w	r6, {r0, r1}
    nk_push_scissor(&popup->buffer, nk_null_rect);
 800f28c:	4b2a      	ldr	r3, [pc, #168]	; (800f338 <nk_nonblock_begin+0x230>)
 800f28e:	f104 0664 	add.w	r6, r4, #100	; 0x64
 800f292:	ed93 0a00 	vldr	s0, [r3]
 800f296:	edd3 0a01 	vldr	s1, [r3, #4]
 800f29a:	ed93 1a02 	vldr	s2, [r3, #8]
 800f29e:	edd3 1a03 	vldr	s3, [r3, #12]
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f7fb fdf8 	bl	800ae98 <nk_push_scissor>
    ctx->current = popup;
 800f2a8:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800f2ac:	f8c3 4658 	str.w	r4, [r3, #1624]	; 0x658
    nk_panel_begin(ctx, 0, panel_type);
 800f2b0:	4642      	mov	r2, r8
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	4638      	mov	r0, r7
 800f2b6:	f7fe fd23 	bl	800dd00 <nk_panel_begin>
    win->buffer = popup->buffer;
 800f2ba:	f105 0e64 	add.w	lr, r5, #100	; 0x64
 800f2be:	46b4      	mov	ip, r6
 800f2c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2d0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f2d4:	e88e 0003 	stmia.w	lr, {r0, r1}
    popup->layout->parent = win->layout;
 800f2d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f2dc:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800f2e0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    popup->layout->offset_x = &popup->scrollbar.x;
 800f2e4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f2e8:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 800f2ec:	619a      	str	r2, [r3, #24]
    popup->layout->offset_y = &popup->scrollbar.y;
 800f2ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f2f2:	3460      	adds	r4, #96	; 0x60
 800f2f4:	61dc      	str	r4, [r3, #28]
    root = win->layout;
 800f2f6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    while (root) {
 800f2fa:	b17b      	cbz	r3, 800f31c <nk_nonblock_begin+0x214>
        root->flags |= NK_WINDOW_ROM;
 800f2fc:	685a      	ldr	r2, [r3, #4]
 800f2fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f302:	605a      	str	r2, [r3, #4]
        root = root->parent;
 800f304:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
    while (root) {
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1f7      	bne.n	800f2fc <nk_nonblock_begin+0x1f4>
 800f30c:	2001      	movs	r0, #1
 800f30e:	e75b      	b.n	800f1c8 <nk_nonblock_begin+0xc0>
    NK_ASSERT(popup->layout);
 800f310:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <nk_nonblock_begin+0x234>)
 800f312:	4a04      	ldr	r2, [pc, #16]	; (800f324 <nk_nonblock_begin+0x21c>)
 800f314:	21a6      	movs	r1, #166	; 0xa6
 800f316:	4804      	ldr	r0, [pc, #16]	; (800f328 <nk_nonblock_begin+0x220>)
 800f318:	f007 f918 	bl	801654c <__assert_func>
    while (root) {
 800f31c:	2001      	movs	r0, #1
 800f31e:	e753      	b.n	800f1c8 <nk_nonblock_begin+0xc0>
 800f320:	0801ad58 	.word	0x0801ad58
 800f324:	0801b5fc 	.word	0x0801b5fc
 800f328:	0801b508 	.word	0x0801b508
 800f32c:	0801ad5c 	.word	0x0801ad5c
 800f330:	0801ad6c 	.word	0x0801ad6c
 800f334:	0801b57c 	.word	0x0801b57c
 800f338:	0801b620 	.word	0x0801b620
 800f33c:	0801b5a0 	.word	0x0801b5a0

0800f340 <nk_popup_close>:
NK_API void
nk_popup_close(struct nk_context *ctx)
{
 800f340:	b508      	push	{r3, lr}
    struct nk_window *popup;
    NK_ASSERT(ctx);
 800f342:	b190      	cbz	r0, 800f36a <nk_popup_close+0x2a>
    if (!ctx || !ctx->current) return;
 800f344:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800f348:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f34c:	b163      	cbz	r3, 800f368 <nk_popup_close+0x28>

    popup = ctx->current;
    NK_ASSERT(popup->parent);
 800f34e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800f352:	b182      	cbz	r2, 800f376 <nk_popup_close+0x36>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 800f354:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f358:	7812      	ldrb	r2, [r2, #0]
 800f35a:	f012 0ff4 	tst.w	r2, #244	; 0xf4
 800f35e:	d010      	beq.n	800f382 <nk_popup_close+0x42>
    popup->flags |= NK_WINDOW_HIDDEN;
 800f360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f362:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f366:	649a      	str	r2, [r3, #72]	; 0x48
}
 800f368:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 800f36a:	4b09      	ldr	r3, [pc, #36]	; (800f390 <nk_popup_close+0x50>)
 800f36c:	4a09      	ldr	r2, [pc, #36]	; (800f394 <nk_popup_close+0x54>)
 800f36e:	21c0      	movs	r1, #192	; 0xc0
 800f370:	4809      	ldr	r0, [pc, #36]	; (800f398 <nk_popup_close+0x58>)
 800f372:	f007 f8eb 	bl	801654c <__assert_func>
    NK_ASSERT(popup->parent);
 800f376:	4b09      	ldr	r3, [pc, #36]	; (800f39c <nk_popup_close+0x5c>)
 800f378:	4a06      	ldr	r2, [pc, #24]	; (800f394 <nk_popup_close+0x54>)
 800f37a:	21c4      	movs	r1, #196	; 0xc4
 800f37c:	4806      	ldr	r0, [pc, #24]	; (800f398 <nk_popup_close+0x58>)
 800f37e:	f007 f8e5 	bl	801654c <__assert_func>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 800f382:	4b07      	ldr	r3, [pc, #28]	; (800f3a0 <nk_popup_close+0x60>)
 800f384:	4a03      	ldr	r2, [pc, #12]	; (800f394 <nk_popup_close+0x54>)
 800f386:	21c5      	movs	r1, #197	; 0xc5
 800f388:	4803      	ldr	r0, [pc, #12]	; (800f398 <nk_popup_close+0x58>)
 800f38a:	f007 f8df 	bl	801654c <__assert_func>
 800f38e:	bf00      	nop
 800f390:	0801ad58 	.word	0x0801ad58
 800f394:	0801b5ec 	.word	0x0801b5ec
 800f398:	0801b508 	.word	0x0801b508
 800f39c:	0801af90 	.word	0x0801af90
 800f3a0:	0801b5b0 	.word	0x0801b5b0

0800f3a4 <nk_popup_end>:
NK_API void
nk_popup_end(struct nk_context *ctx)
{
 800f3a4:	b570      	push	{r4, r5, r6, lr}
    struct nk_window *win;
    struct nk_window *popup;

    NK_ASSERT(ctx);
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d056      	beq.n	800f458 <nk_popup_end+0xb4>
 800f3aa:	4606      	mov	r6, r0
    NK_ASSERT(ctx->current);
 800f3ac:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800f3b0:	f8d3 4658 	ldr.w	r4, [r3, #1624]	; 0x658
 800f3b4:	2c00      	cmp	r4, #0
 800f3b6:	d055      	beq.n	800f464 <nk_popup_end+0xc0>
    NK_ASSERT(ctx->current->layout);
 800f3b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d057      	beq.n	800f470 <nk_popup_end+0xcc>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    popup = ctx->current;
    if (!popup->parent) return;
 800f3c0:	f8d4 5180 	ldr.w	r5, [r4, #384]	; 0x180
 800f3c4:	2d00      	cmp	r5, #0
 800f3c6:	d046      	beq.n	800f456 <nk_popup_end+0xb2>
    win = popup->parent;
    if (popup->flags & NK_WINDOW_HIDDEN) {
 800f3c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f3ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800f3ce:	d00d      	beq.n	800f3ec <nk_popup_end+0x48>
        struct nk_panel *root;
        root = win->layout;
 800f3d0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
        while (root) {
 800f3d4:	b13b      	cbz	r3, 800f3e6 <nk_popup_end+0x42>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 800f3d6:	685a      	ldr	r2, [r3, #4]
 800f3d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f3dc:	605a      	str	r2, [r3, #4]
            root = root->parent;
 800f3de:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
        while (root) {
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1f7      	bne.n	800f3d6 <nk_popup_end+0x32>
        }
        win->popup.active = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    }
    nk_push_scissor(&popup->buffer, nk_null_rect);
 800f3ec:	4b23      	ldr	r3, [pc, #140]	; (800f47c <nk_popup_end+0xd8>)
 800f3ee:	3464      	adds	r4, #100	; 0x64
 800f3f0:	ed93 0a00 	vldr	s0, [r3]
 800f3f4:	edd3 0a01 	vldr	s1, [r3, #4]
 800f3f8:	ed93 1a02 	vldr	s2, [r3, #8]
 800f3fc:	edd3 1a03 	vldr	s3, [r3, #12]
 800f400:	4620      	mov	r0, r4
 800f402:	f7fb fd49 	bl	800ae98 <nk_push_scissor>
    nk_end(ctx);
 800f406:	4630      	mov	r0, r6
 800f408:	f006 ff42 	bl	8016290 <nk_end>

    win->buffer = popup->buffer;
 800f40c:	f105 0e64 	add.w	lr, r5, #100	; 0x64
 800f410:	46a4      	mov	ip, r4
 800f412:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f416:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f41a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f41e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f422:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f426:	e88e 0003 	stmia.w	lr, {r0, r1}
    nk_finish_popup(ctx, win);
 800f42a:	4629      	mov	r1, r5
 800f42c:	4630      	mov	r0, r6
 800f42e:	f7fb fa03 	bl	800a838 <nk_finish_popup>
    ctx->current = win;
 800f432:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 800f436:	f8c6 5658 	str.w	r5, [r6, #1624]	; 0x658
    nk_push_scissor(&win->buffer, win->layout->clip);
 800f43a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800f43e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 800f442:	edd3 0a10 	vldr	s1, [r3, #64]	; 0x40
 800f446:	ed93 1a11 	vldr	s2, [r3, #68]	; 0x44
 800f44a:	edd3 1a12 	vldr	s3, [r3, #72]	; 0x48
 800f44e:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800f452:	f7fb fd21 	bl	800ae98 <nk_push_scissor>
}
 800f456:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(ctx);
 800f458:	4b09      	ldr	r3, [pc, #36]	; (800f480 <nk_popup_end+0xdc>)
 800f45a:	4a0a      	ldr	r2, [pc, #40]	; (800f484 <nk_popup_end+0xe0>)
 800f45c:	21ce      	movs	r1, #206	; 0xce
 800f45e:	480a      	ldr	r0, [pc, #40]	; (800f488 <nk_popup_end+0xe4>)
 800f460:	f007 f874 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800f464:	4b09      	ldr	r3, [pc, #36]	; (800f48c <nk_popup_end+0xe8>)
 800f466:	4a07      	ldr	r2, [pc, #28]	; (800f484 <nk_popup_end+0xe0>)
 800f468:	21cf      	movs	r1, #207	; 0xcf
 800f46a:	4807      	ldr	r0, [pc, #28]	; (800f488 <nk_popup_end+0xe4>)
 800f46c:	f007 f86e 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f470:	4b07      	ldr	r3, [pc, #28]	; (800f490 <nk_popup_end+0xec>)
 800f472:	4a04      	ldr	r2, [pc, #16]	; (800f484 <nk_popup_end+0xe0>)
 800f474:	21d0      	movs	r1, #208	; 0xd0
 800f476:	4804      	ldr	r0, [pc, #16]	; (800f488 <nk_popup_end+0xe4>)
 800f478:	f007 f868 	bl	801654c <__assert_func>
 800f47c:	0801b620 	.word	0x0801b620
 800f480:	0801ad58 	.word	0x0801ad58
 800f484:	0801b5dc 	.word	0x0801b5dc
 800f488:	0801b508 	.word	0x0801b508
 800f48c:	0801ad5c 	.word	0x0801ad5c
 800f490:	0801ad6c 	.word	0x0801ad6c

0800f494 <nk_drag_behavior>:
 * ===============================================================*/
NK_LIB void
nk_drag_behavior(nk_flags *state, const struct nk_input *in,
    struct nk_rect drag, struct nk_property_variant *variant,
    float inc_per_pixel)
{
 800f494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f498:	ed2d 8b02 	vpush	{d8}
 800f49c:	b085      	sub	sp, #20
 800f49e:	4604      	mov	r4, r0
 800f4a0:	4616      	mov	r6, r2
 800f4a2:	eeb0 8a42 	vmov.f32	s16, s4
 800f4a6:	ed8d 0a00 	vstr	s0, [sp]
 800f4aa:	edcd 0a01 	vstr	s1, [sp, #4]
 800f4ae:	ed8d 1a02 	vstr	s2, [sp, #8]
 800f4b2:	edcd 1a03 	vstr	s3, [sp, #12]
    int left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;
 800f4b6:	460d      	mov	r5, r1
 800f4b8:	2900      	cmp	r1, #0
 800f4ba:	d036      	beq.n	800f52a <nk_drag_behavior+0x96>
 800f4bc:	f8d1 7104 	ldr.w	r7, [r1, #260]	; 0x104
 800f4c0:	3f00      	subs	r7, #0
 800f4c2:	bf18      	it	ne
 800f4c4:	2701      	movne	r7, #1
    int left_mouse_click_in_cursor = in &&
        nk_input_has_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, drag, nk_true);
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	2100      	movs	r1, #0
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	f7fd fc04 	bl	800ccd8 <nk_input_has_mouse_click_down_in_rect>
    int left_mouse_click_in_cursor = in &&
 800f4d0:	f1b0 0800 	subs.w	r8, r0, #0
 800f4d4:	bf18      	it	ne
 800f4d6:	f04f 0801 	movne.w	r8, #1

    nk_widget_state_reset(state);
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	f013 0f02 	tst.w	r3, #2
 800f4e0:	bf14      	ite	ne
 800f4e2:	2306      	movne	r3, #6
 800f4e4:	2304      	moveq	r3, #4
 800f4e6:	6023      	str	r3, [r4, #0]
    if (nk_input_is_mouse_hovering_rect(in, drag))
 800f4e8:	ed9d 0a00 	vldr	s0, [sp]
 800f4ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800f4f0:	ed9d 1a02 	vldr	s2, [sp, #8]
 800f4f4:	eddd 1a03 	vldr	s3, [sp, #12]
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	f7fd fc25 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 800f4fe:	b1b8      	cbz	r0, 800f530 <nk_drag_behavior+0x9c>
        *state = NK_WIDGET_STATE_HOVERED;
 800f500:	2312      	movs	r3, #18
 800f502:	6023      	str	r3, [r4, #0]

    if (left_mouse_down && left_mouse_click_in_cursor) {
 800f504:	2f00      	cmp	r7, #0
 800f506:	d17a      	bne.n	800f5fe <nk_drag_behavior+0x16a>
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
            break;
        }
        *state = NK_WIDGET_STATE_ACTIVE;
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, drag))
 800f508:	ed9d 0a00 	vldr	s0, [sp]
 800f50c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f510:	ed9d 1a02 	vldr	s2, [sp, #8]
 800f514:	eddd 1a03 	vldr	s3, [sp, #12]
 800f518:	4628      	mov	r0, r5
 800f51a:	f7fd fc47 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 800f51e:	b978      	cbnz	r0, 800f540 <nk_drag_behavior+0xac>
        *state |= NK_WIDGET_STATE_ENTERED;
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	f043 0308 	orr.w	r3, r3, #8
 800f526:	6023      	str	r3, [r4, #0]
 800f528:	e01a      	b.n	800f560 <nk_drag_behavior+0xcc>
    int left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;
 800f52a:	2700      	movs	r7, #0
    int left_mouse_click_in_cursor = in &&
 800f52c:	46b8      	mov	r8, r7
 800f52e:	e7d4      	b.n	800f4da <nk_drag_behavior+0x46>
    if (left_mouse_down && left_mouse_click_in_cursor) {
 800f530:	b117      	cbz	r7, 800f538 <nk_drag_behavior+0xa4>
 800f532:	f1b8 0f00 	cmp.w	r8, #0
 800f536:	d165      	bne.n	800f604 <nk_drag_behavior+0x170>
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, drag))
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	f013 0f10 	tst.w	r3, #16
 800f53e:	d1e3      	bne.n	800f508 <nk_drag_behavior+0x74>
    else if (nk_input_is_mouse_prev_hovering_rect(in, drag))
 800f540:	ed9d 0a00 	vldr	s0, [sp]
 800f544:	eddd 0a01 	vldr	s1, [sp, #4]
 800f548:	ed9d 1a02 	vldr	s2, [sp, #8]
 800f54c:	eddd 1a03 	vldr	s3, [sp, #12]
 800f550:	4628      	mov	r0, r5
 800f552:	f7fd fc2b 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 800f556:	b118      	cbz	r0, 800f560 <nk_drag_behavior+0xcc>
        *state |= NK_WIDGET_STATE_LEFT;
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f55e:	6023      	str	r3, [r4, #0]
}
 800f560:	b005      	add	sp, #20
 800f562:	ecbd 8b02 	vpop	{d8}
 800f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            variant->value.i = variant->value.i + (int)delta;
 800f56a:	eefd 7ac2 	vcvt.s32.f32	s15, s4
 800f56e:	ee17 3a90 	vmov	r3, s15
 800f572:	68b2      	ldr	r2, [r6, #8]
 800f574:	4413      	add	r3, r2
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);
 800f576:	69b2      	ldr	r2, [r6, #24]
 800f578:	4293      	cmp	r3, r2
 800f57a:	bfa8      	it	ge
 800f57c:	4613      	movge	r3, r2
 800f57e:	6932      	ldr	r2, [r6, #16]
 800f580:	4293      	cmp	r3, r2
 800f582:	bfb8      	it	lt
 800f584:	4613      	movlt	r3, r2
 800f586:	60b3      	str	r3, [r6, #8]
            break;
 800f588:	e047      	b.n	800f61a <nk_drag_behavior+0x186>
            variant->value.f = variant->value.f + (float)delta;
 800f58a:	edd6 7a02 	vldr	s15, [r6, #8]
 800f58e:	ee32 2a27 	vadd.f32	s4, s4, s15
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);
 800f592:	edd6 7a06 	vldr	s15, [r6, #24]
 800f596:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800f59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59e:	bf58      	it	pl
 800f5a0:	eeb0 2a67 	vmovpl.f32	s4, s15
 800f5a4:	edd6 7a04 	vldr	s15, [r6, #16]
 800f5a8:	eef4 7ac2 	vcmpe.f32	s15, s4
 800f5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b0:	bfd8      	it	le
 800f5b2:	eef0 7a42 	vmovle.f32	s15, s4
 800f5b6:	edc6 7a02 	vstr	s15, [r6, #8]
            break;
 800f5ba:	e02e      	b.n	800f61a <nk_drag_behavior+0x186>
            variant->value.d = variant->value.d + (double)delta;
 800f5bc:	ee12 0a10 	vmov	r0, s4
 800f5c0:	f7f0 ffea 	bl	8000598 <__aeabi_f2d>
 800f5c4:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800f5c8:	f7f0 fe88 	bl	80002dc <__adddf3>
 800f5cc:	4680      	mov	r8, r0
 800f5ce:	4689      	mov	r9, r1
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
 800f5d0:	e9d6 ab06 	ldrd	sl, fp, [r6, #24]
 800f5d4:	4652      	mov	r2, sl
 800f5d6:	465b      	mov	r3, fp
 800f5d8:	f7f1 faa8 	bl	8000b2c <__aeabi_dcmplt>
 800f5dc:	b908      	cbnz	r0, 800f5e2 <nk_drag_behavior+0x14e>
 800f5de:	46d0      	mov	r8, sl
 800f5e0:	46d9      	mov	r9, fp
 800f5e2:	e9d6 ab04 	ldrd	sl, fp, [r6, #16]
 800f5e6:	4642      	mov	r2, r8
 800f5e8:	464b      	mov	r3, r9
 800f5ea:	4650      	mov	r0, sl
 800f5ec:	4659      	mov	r1, fp
 800f5ee:	f7f1 fabb 	bl	8000b68 <__aeabi_dcmpgt>
 800f5f2:	b908      	cbnz	r0, 800f5f8 <nk_drag_behavior+0x164>
 800f5f4:	46c2      	mov	sl, r8
 800f5f6:	46cb      	mov	fp, r9
 800f5f8:	e9c6 ab02 	strd	sl, fp, [r6, #8]
            break;
 800f5fc:	e00d      	b.n	800f61a <nk_drag_behavior+0x186>
    if (left_mouse_down && left_mouse_click_in_cursor) {
 800f5fe:	f1b8 0f00 	cmp.w	r8, #0
 800f602:	d081      	beq.n	800f508 <nk_drag_behavior+0x74>
        delta = pixels * inc_per_pixel;
 800f604:	edd5 7a55 	vldr	s15, [r5, #340]	; 0x154
 800f608:	ee28 2a27 	vmul.f32	s4, s16, s15
        switch (variant->kind) {
 800f60c:	7833      	ldrb	r3, [r6, #0]
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d0bb      	beq.n	800f58a <nk_drag_behavior+0xf6>
 800f612:	2b02      	cmp	r3, #2
 800f614:	d0d2      	beq.n	800f5bc <nk_drag_behavior+0x128>
 800f616:	2b00      	cmp	r3, #0
 800f618:	d0a7      	beq.n	800f56a <nk_drag_behavior+0xd6>
        *state = NK_WIDGET_STATE_ACTIVE;
 800f61a:	2322      	movs	r3, #34	; 0x22
 800f61c:	6023      	str	r3, [r4, #0]
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, drag))
 800f61e:	e78f      	b.n	800f540 <nk_drag_behavior+0xac>

0800f620 <nk_property_behavior>:
NK_LIB void
nk_property_behavior(nk_flags *ws, const struct nk_input *in,
    struct nk_rect property,  struct nk_rect label, struct nk_rect edit,
    struct nk_rect empty, int *state, struct nk_property_variant *variant,
    float inc_per_pixel)
{
 800f620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f622:	b091      	sub	sp, #68	; 0x44
 800f624:	4604      	mov	r4, r0
 800f626:	4615      	mov	r5, r2
 800f628:	461e      	mov	r6, r3
 800f62a:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 800f62e:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 800f632:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
 800f636:	edcd 1a0f 	vstr	s3, [sp, #60]	; 0x3c
 800f63a:	ed8d 2a08 	vstr	s4, [sp, #32]
 800f63e:	edcd 2a09 	vstr	s5, [sp, #36]	; 0x24
 800f642:	ed8d 3a0a 	vstr	s6, [sp, #40]	; 0x28
 800f646:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 800f64a:	ed8d 4a04 	vstr	s8, [sp, #16]
 800f64e:	edcd 4a05 	vstr	s9, [sp, #20]
 800f652:	ed8d 5a06 	vstr	s10, [sp, #24]
 800f656:	edcd 5a07 	vstr	s11, [sp, #28]
 800f65a:	ed8d 6a00 	vstr	s12, [sp]
 800f65e:	edcd 6a01 	vstr	s13, [sp, #4]
 800f662:	ed8d 7a02 	vstr	s14, [sp, #8]
 800f666:	edcd 7a03 	vstr	s15, [sp, #12]
    nk_widget_state_reset(ws);
 800f66a:	6800      	ldr	r0, [r0, #0]
 800f66c:	f010 0f02 	tst.w	r0, #2
 800f670:	bf14      	ite	ne
 800f672:	2006      	movne	r0, #6
 800f674:	2004      	moveq	r0, #4
 800f676:	6020      	str	r0, [r4, #0]
    if (in && *state == NK_PROPERTY_DEFAULT) {
 800f678:	460f      	mov	r7, r1
 800f67a:	b109      	cbz	r1, 800f680 <nk_property_behavior+0x60>
 800f67c:	6813      	ldr	r3, [r2, #0]
 800f67e:	b123      	cbz	r3, 800f68a <nk_property_behavior+0x6a>
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, label, nk_true))
            *state = NK_PROPERTY_DRAG;
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, empty, nk_true))
            *state = NK_PROPERTY_DRAG;
    }
    if (*state == NK_PROPERTY_DRAG) {
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	2b02      	cmp	r3, #2
 800f684:	d021      	beq.n	800f6ca <nk_property_behavior+0xaa>
        nk_drag_behavior(ws, in, property, variant, inc_per_pixel);
        if (!(*ws & NK_WIDGET_STATE_ACTIVED)) *state = NK_PROPERTY_DEFAULT;
    }
}
 800f686:	b011      	add	sp, #68	; 0x44
 800f688:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (nk_button_behavior(ws, edit, in, NK_BUTTON_DEFAULT))
 800f68a:	2200      	movs	r2, #0
 800f68c:	eeb0 0a44 	vmov.f32	s0, s8
 800f690:	eef0 0a64 	vmov.f32	s1, s9
 800f694:	eeb0 1a45 	vmov.f32	s2, s10
 800f698:	eef0 1a65 	vmov.f32	s3, s11
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7fa f807 	bl	80096b0 <nk_button_behavior>
 800f6a2:	b110      	cbz	r0, 800f6aa <nk_property_behavior+0x8a>
            *state = NK_PROPERTY_EDIT;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	602b      	str	r3, [r5, #0]
    if (*state == NK_PROPERTY_DRAG) {
 800f6a8:	e7ed      	b.n	800f686 <nk_property_behavior+0x66>
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, label, nk_true))
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	ed9d 0a08 	vldr	s0, [sp, #32]
 800f6b0:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800f6b4:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 800f6b8:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 800f6bc:	2100      	movs	r1, #0
 800f6be:	4638      	mov	r0, r7
 800f6c0:	f7fd fb27 	bl	800cd12 <nk_input_is_mouse_click_down_in_rect>
 800f6c4:	b1b8      	cbz	r0, 800f6f6 <nk_property_behavior+0xd6>
            *state = NK_PROPERTY_DRAG;
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	602b      	str	r3, [r5, #0]
        nk_drag_behavior(ws, in, property, variant, inc_per_pixel);
 800f6ca:	ed9d 2a16 	vldr	s4, [sp, #88]	; 0x58
 800f6ce:	4632      	mov	r2, r6
 800f6d0:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800f6d4:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800f6d8:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800f6dc:	eddd 1a0f 	vldr	s3, [sp, #60]	; 0x3c
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7ff fed6 	bl	800f494 <nk_drag_behavior>
        if (!(*ws & NK_WIDGET_STATE_ACTIVED)) *state = NK_PROPERTY_DEFAULT;
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	f013 0f20 	tst.w	r3, #32
 800f6ee:	d1ca      	bne.n	800f686 <nk_property_behavior+0x66>
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	602b      	str	r3, [r5, #0]
}
 800f6f4:	e7c7      	b.n	800f686 <nk_property_behavior+0x66>
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, empty, nk_true))
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	ed9d 0a00 	vldr	s0, [sp]
 800f6fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f700:	ed9d 1a02 	vldr	s2, [sp, #8]
 800f704:	eddd 1a03 	vldr	s3, [sp, #12]
 800f708:	2100      	movs	r1, #0
 800f70a:	4638      	mov	r0, r7
 800f70c:	f7fd fb01 	bl	800cd12 <nk_input_is_mouse_click_down_in_rect>
 800f710:	2800      	cmp	r0, #0
 800f712:	d1d8      	bne.n	800f6c6 <nk_property_behavior+0xa6>
 800f714:	e7b4      	b.n	800f680 <nk_property_behavior+0x60>
	...

0800f718 <nk_draw_property>:
NK_LIB void
nk_draw_property(struct nk_command_buffer *out, const struct nk_style_property *style,
    const struct nk_rect *bounds, const struct nk_rect *label, nk_flags state,
    const char *name, int len, const struct nk_user_font *font)
{
 800f718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	b086      	sub	sp, #24
 800f71e:	4607      	mov	r7, r0
 800f720:	460e      	mov	r6, r1
 800f722:	4615      	mov	r5, r2
 800f724:	461c      	mov	r4, r3
 800f726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    struct nk_text text;
    const struct nk_style_item *background;

    /* select correct background and text color */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 800f728:	f013 0f20 	tst.w	r3, #32
 800f72c:	d02a      	beq.n	800f784 <nk_draw_property+0x6c>
        background = &style->active;
 800f72e:	f101 0838 	add.w	r8, r1, #56	; 0x38
        text.text = style->label_active;
 800f732:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800f734:	9305      	str	r3, [sp, #20]
        background = &style->normal;
        text.text = style->label_normal;
    }

    /* draw background */
    switch(background->type) {
 800f736:	f898 3000 	ldrb.w	r3, [r8]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d02c      	beq.n	800f798 <nk_draw_property+0x80>
 800f73e:	2b02      	cmp	r3, #2
 800f740:	d041      	beq.n	800f7c6 <nk_draw_property+0xae>
 800f742:	2b00      	cmp	r3, #0
 800f744:	d056      	beq.n	800f7f4 <nk_draw_property+0xdc>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, background->data.color);
            break;
    }

    /* draw label */
    text.padding = nk_vec2(0,0);
 800f746:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800f838 <nk_draw_property+0x120>
 800f74a:	eef0 0a40 	vmov.f32	s1, s0
 800f74e:	f7fe f87b 	bl	800d848 <nk_vec2>
 800f752:	ed8d 0a02 	vstr	s0, [sp, #8]
 800f756:	edcd 0a03 	vstr	s1, [sp, #12]
    nk_widget_text(out, *label, name, len, &text, NK_TEXT_CENTERED, font);
 800f75a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	2312      	movs	r3, #18
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	ab02      	add	r3, sp, #8
 800f764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f766:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f768:	ed94 0a00 	vldr	s0, [r4]
 800f76c:	edd4 0a01 	vldr	s1, [r4, #4]
 800f770:	ed94 1a02 	vldr	s2, [r4, #8]
 800f774:	edd4 1a03 	vldr	s3, [r4, #12]
 800f778:	4638      	mov	r0, r7
 800f77a:	f003 fa5b 	bl	8012c34 <nk_widget_text>
}
 800f77e:	b006      	add	sp, #24
 800f780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (state & NK_WIDGET_STATE_HOVER) {
 800f784:	f013 0f10 	tst.w	r3, #16
        background = &style->hover;
 800f788:	bf19      	ittee	ne
 800f78a:	f101 081c 	addne.w	r8, r1, #28
        text.text = style->label_hover;
 800f78e:	6dcb      	ldrne	r3, [r1, #92]	; 0x5c
        background = &style->normal;
 800f790:	4688      	moveq	r8, r1
        text.text = style->label_normal;
 800f792:	6d8b      	ldreq	r3, [r1, #88]	; 0x58
 800f794:	9305      	str	r3, [sp, #20]
 800f796:	e7ce      	b.n	800f736 <nk_draw_property+0x1e>
            text.background = nk_rgba(0, 0, 0, 0);
 800f798:	2300      	movs	r3, #0
 800f79a:	461a      	mov	r2, r3
 800f79c:	4619      	mov	r1, r3
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fa fb3c 	bl	8009e1c <nk_rgba>
 800f7a4:	9004      	str	r0, [sp, #16]
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 800f7a6:	4b25      	ldr	r3, [pc, #148]	; (800f83c <nk_draw_property+0x124>)
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	f108 0104 	add.w	r1, r8, #4
 800f7ae:	ed95 0a00 	vldr	s0, [r5]
 800f7b2:	edd5 0a01 	vldr	s1, [r5, #4]
 800f7b6:	ed95 1a02 	vldr	s2, [r5, #8]
 800f7ba:	edd5 1a03 	vldr	s3, [r5, #12]
 800f7be:	4638      	mov	r0, r7
 800f7c0:	f7fb fe04 	bl	800b3cc <nk_draw_image>
            break;
 800f7c4:	e7bf      	b.n	800f746 <nk_draw_property+0x2e>
            text.background = nk_rgba(0, 0, 0, 0);
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fa fb25 	bl	8009e1c <nk_rgba>
 800f7d2:	9004      	str	r0, [sp, #16]
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 800f7d4:	4b19      	ldr	r3, [pc, #100]	; (800f83c <nk_draw_property+0x124>)
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	f108 0104 	add.w	r1, r8, #4
 800f7dc:	ed95 0a00 	vldr	s0, [r5]
 800f7e0:	edd5 0a01 	vldr	s1, [r5, #4]
 800f7e4:	ed95 1a02 	vldr	s2, [r5, #8]
 800f7e8:	edd5 1a03 	vldr	s3, [r5, #12]
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	f7fb fe71 	bl	800b4d4 <nk_draw_nine_slice>
            break;
 800f7f2:	e7a8      	b.n	800f746 <nk_draw_property+0x2e>
            text.background = background->data.color;
 800f7f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7f8:	9104      	str	r1, [sp, #16]
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 800f7fa:	ed96 2a1b 	vldr	s4, [r6, #108]	; 0x6c
 800f7fe:	ed95 0a00 	vldr	s0, [r5]
 800f802:	edd5 0a01 	vldr	s1, [r5, #4]
 800f806:	ed95 1a02 	vldr	s2, [r5, #8]
 800f80a:	edd5 1a03 	vldr	s3, [r5, #12]
 800f80e:	4638      	mov	r0, r7
 800f810:	f7fb fc22 	bl	800b058 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, background->data.color);
 800f814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f818:	edd6 2a1a 	vldr	s5, [r6, #104]	; 0x68
 800f81c:	ed96 2a1b 	vldr	s4, [r6, #108]	; 0x6c
 800f820:	ed95 0a00 	vldr	s0, [r5]
 800f824:	edd5 0a01 	vldr	s1, [r5, #4]
 800f828:	ed95 1a02 	vldr	s2, [r5, #8]
 800f82c:	edd5 1a03 	vldr	s3, [r5, #12]
 800f830:	4638      	mov	r0, r7
 800f832:	f7fb fb7f 	bl	800af34 <nk_stroke_rect>
            break;
 800f836:	e786      	b.n	800f746 <nk_draw_property+0x2e>
 800f838:	00000000 	.word	0x00000000
 800f83c:	0801b678 	.word	0x0801b678

0800f840 <nk_do_property>:
    int *state, int *cursor, int *select_begin, int *select_end,
    const struct nk_style_property *style,
    enum nk_property_filter filter, struct nk_input *in,
    const struct nk_user_font *font, struct nk_text_edit *text_edit,
    enum nk_button_behavior behavior)
{
 800f840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f844:	ed2d 8b0a 	vpush	{d8-d12}
 800f848:	b0b7      	sub	sp, #220	; 0xdc
 800f84a:	4683      	mov	fp, r0
 800f84c:	9104      	str	r1, [sp, #16]
 800f84e:	eef0 8a40 	vmov.f32	s17, s0
 800f852:	eeb0 aa60 	vmov.f32	s20, s1
 800f856:	eef0 9a61 	vmov.f32	s19, s3
 800f85a:	4691      	mov	r9, r2
 800f85c:	9209      	str	r2, [sp, #36]	; 0x24
 800f85e:	461f      	mov	r7, r3
 800f860:	eeb0 ba42 	vmov.f32	s22, s4
 800f864:	f8dd 8130 	ldr.w	r8, [sp, #304]	; 0x130
 800f868:	9c50      	ldr	r4, [sp, #320]	; 0x140
 800f86a:	9e53      	ldr	r6, [sp, #332]	; 0x14c
 800f86c:	9d54      	ldr	r5, [sp, #336]	; 0x150
 800f86e:	f89d a154 	ldrb.w	sl, [sp, #340]	; 0x154
 800f872:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 800f876:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c
 800f87a:	ed8d 1a0c 	vstr	s2, [sp, #48]	; 0x30
 800f87e:	edcd 1a0d 	vstr	s3, [sp, #52]	; 0x34
    const nk_plugin_filter filters[] = {
 800f882:	4b98      	ldr	r3, [pc, #608]	; (800fae4 <nk_do_property+0x2a4>)
 800f884:	9334      	str	r3, [sp, #208]	; 0xd0
 800f886:	4b98      	ldr	r3, [pc, #608]	; (800fae8 <nk_do_property+0x2a8>)
 800f888:	9335      	str	r3, [sp, #212]	; 0xd4
        nk_filter_decimal,
        nk_filter_float
    };
    nk_bool active, old;
    int num_len = 0, name_len;
 800f88a:	2300      	movs	r3, #0
 800f88c:	9333      	str	r3, [sp, #204]	; 0xcc
    struct nk_rect label;
    struct nk_rect edit;
    struct nk_rect empty;

    /* left decrement button */
    left.h = font->height/2;
 800f88e:	ed96 8a01 	vldr	s16, [r6, #4]
 800f892:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f896:	ee28 8a27 	vmul.f32	s16, s16, s15
    left.w = left.h;
    left.x = property.x + style->border + style->padding.x;
 800f89a:	ed94 9a1a 	vldr	s18, [r4, #104]	; 0x68
 800f89e:	ee70 aa09 	vadd.f32	s21, s0, s18
 800f8a2:	ed94 7a1c 	vldr	s14, [r4, #112]	; 0x70
 800f8a6:	ee7a aa87 	vadd.f32	s21, s21, s14
    left.y = property.y + style->border + property.h/2.0f - left.h/2;
 800f8aa:	ee39 9a20 	vadd.f32	s18, s18, s1
 800f8ae:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800f8b2:	ee39 9a07 	vadd.f32	s18, s18, s14
 800f8b6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f8ba:	ee39 9a67 	vsub.f32	s18, s18, s15

    /* text label */
    name_len = nk_strlen(name);
 800f8be:	4610      	mov	r0, r2
 800f8c0:	f005 fa76 	bl	8014db0 <nk_strlen>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	9006      	str	r0, [sp, #24]
    size = font->width(font->userdata, font->height, name, name_len);
 800f8c8:	68b3      	ldr	r3, [r6, #8]
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	ed96 0a01 	vldr	s0, [r6, #4]
 800f8d0:	6830      	ldr	r0, [r6, #0]
 800f8d2:	4798      	blx	r3
    label.x = left.x + left.w + style->padding.x;
 800f8d4:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 800f8d8:	ee38 6a2a 	vadd.f32	s12, s16, s21
 800f8dc:	ee76 ba27 	vadd.f32	s23, s12, s15
 800f8e0:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
    label.w = (float)size + 2 * style->padding.x;
 800f8e4:	ee37 caa7 	vadd.f32	s24, s15, s15
 800f8e8:	ee3c ca00 	vadd.f32	s24, s24, s0
 800f8ec:	ed8d ca19 	vstr	s24, [sp, #100]	; 0x64
    label.y = property.y + style->border + style->padding.y;
 800f8f0:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
 800f8f4:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 800f8f8:	ee3a 6a07 	vadd.f32	s12, s20, s14
 800f8fc:	ee36 6a26 	vadd.f32	s12, s12, s13
 800f900:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
    label.h = property.h - (2 * style->border + 2 * style->padding.y);
 800f904:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f908:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f90c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f910:	ee39 7ac7 	vsub.f32	s14, s19, s14
 800f914:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68

    /* right increment button */
    right.y = left.y;
 800f918:	ed8d 9a1c 	vstr	s18, [sp, #112]	; 0x70
    right.w = left.w;
    right.h = left.h;
 800f91c:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
    right.x = property.x + property.w - (right.w + style->padding.x);
 800f920:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800f924:	ee78 8a87 	vadd.f32	s17, s17, s14
 800f928:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f92c:	ee78 8ae7 	vsub.f32	s17, s17, s15

    /* edit */
    if (*state == NK_PROPERTY_EDIT) {
 800f930:	f8d8 3000 	ldr.w	r3, [r8]
 800f934:	2b01      	cmp	r3, #1
 800f936:	f000 814f 	beq.w	800fbd8 <nk_do_property+0x398>
        size = font->width(font->userdata, font->height, buffer, *len);
        size += style->edit.cursor_size;
        length = len;
        dst = buffer;
    } else {
        switch (variant->kind) {
 800f93a:	783b      	ldrb	r3, [r7, #0]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	f000 8165 	beq.w	800fc0c <nk_do_property+0x3cc>
 800f942:	2b02      	cmp	r3, #2
 800f944:	f000 8170 	beq.w	800fc28 <nk_do_property+0x3e8>
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 8156 	beq.w	800fbfa <nk_do_property+0x3ba>
        case NK_PROPERTY_DOUBLE:
            NK_DTOA(string, variant->value.d);
            num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);
            break;
        }
        size = font->width(font->userdata, font->height, string, num_len);
 800f94e:	68b3      	ldr	r3, [r6, #8]
 800f950:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800f952:	a923      	add	r1, sp, #140	; 0x8c
 800f954:	ed96 0a01 	vldr	s0, [r6, #4]
 800f958:	6830      	ldr	r0, [r6, #0]
 800f95a:	4798      	blx	r3
        dst = string;
        length = &num_len;
 800f95c:	f10d 09cc 	add.w	r9, sp, #204	; 0xcc
        dst = string;
 800f960:	ab23      	add	r3, sp, #140	; 0x8c
 800f962:	9305      	str	r3, [sp, #20]
    }

    edit.w =  (float)size + 2 * style->padding.x;
 800f964:	ed94 4a1c 	vldr	s8, [r4, #112]	; 0x70
 800f968:	ee34 5a04 	vadd.f32	s10, s8, s8
 800f96c:	ee35 5a00 	vadd.f32	s10, s10, s0
    edit.w = NK_MIN(edit.w, right.x - (label.x + label.w));
 800f970:	ee3b 6a8c 	vadd.f32	s12, s23, s24
 800f974:	ee78 7ac6 	vsub.f32	s15, s17, s12
 800f978:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800f97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f980:	bf58      	it	pl
 800f982:	eeb0 5a67 	vmovpl.f32	s10, s15
    edit.x = right.x - (edit.w + style->padding.x);
 800f986:	ee34 4a05 	vadd.f32	s8, s8, s10
 800f98a:	ee38 4ac4 	vsub.f32	s8, s17, s8
    edit.y = property.y + style->border;
 800f98e:	edd4 5a1a 	vldr	s11, [r4, #104]	; 0x68
 800f992:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800f996:	edcd 4a14 	vstr	s9, [sp, #80]	; 0x50
    edit.h = property.h - (2 * style->border);
 800f99a:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800f99e:	ee79 5ae5 	vsub.f32	s11, s19, s11
 800f9a2:	edcd 5a16 	vstr	s11, [sp, #88]	; 0x58

    /* empty left space activator */
    empty.w = edit.x - (label.x + label.w);
 800f9a6:	ee34 7a46 	vsub.f32	s14, s8, s12
 800f9aa:	ed8d 7a11 	vstr	s14, [sp, #68]	; 0x44
    empty.x = label.x + label.w;
 800f9ae:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
    empty.y = property.y;
 800f9b2:	ed8d aa10 	vstr	s20, [sp, #64]	; 0x40
    empty.h = property.h;
 800f9b6:	edcd 9a12 	vstr	s19, [sp, #72]	; 0x48

    /* update property */
    old = (*state == NK_PROPERTY_EDIT);
 800f9ba:	f8d8 3000 	ldr.w	r3, [r8]
 800f9be:	9308      	str	r3, [sp, #32]
    nk_property_behavior(ws, in, property, label, edit, empty, state, variant, inc_per_pixel);
 800f9c0:	ed8d 4a13 	vstr	s8, [sp, #76]	; 0x4c
 800f9c4:	ed8d 5a15 	vstr	s10, [sp, #84]	; 0x54
 800f9c8:	ed8d ba00 	vstr	s22, [sp]
 800f9cc:	463b      	mov	r3, r7
 800f9ce:	4642      	mov	r2, r8
 800f9d0:	eef0 6a4a 	vmov.f32	s13, s20
 800f9d4:	eef0 7a69 	vmov.f32	s15, s19
 800f9d8:	ed9d 2a17 	vldr	s4, [sp, #92]	; 0x5c
 800f9dc:	eddd 2a18 	vldr	s5, [sp, #96]	; 0x60
 800f9e0:	ed9d 3a19 	vldr	s6, [sp, #100]	; 0x64
 800f9e4:	eddd 3a1a 	vldr	s7, [sp, #104]	; 0x68
 800f9e8:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 800f9ec:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 800f9f0:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 800f9f4:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
 800f9f8:	9952      	ldr	r1, [sp, #328]	; 0x148
 800f9fa:	4658      	mov	r0, fp
 800f9fc:	f7ff fe10 	bl	800f620 <nk_property_behavior>

    /* draw property */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800fa00:	f8d4 345c 	ldr.w	r3, [r4, #1116]	; 0x45c
 800fa04:	b11b      	cbz	r3, 800fa0e <nk_do_property+0x1ce>
 800fa06:	f8d4 1458 	ldr.w	r1, [r4, #1112]	; 0x458
 800fa0a:	9804      	ldr	r0, [sp, #16]
 800fa0c:	4798      	blx	r3
    nk_draw_property(out, style, &property, &label, *ws, name, name_len, font);
 800fa0e:	9603      	str	r6, [sp, #12]
 800fa10:	9b06      	ldr	r3, [sp, #24]
 800fa12:	9302      	str	r3, [sp, #8]
 800fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa16:	9301      	str	r3, [sp, #4]
 800fa18:	f8db 3000 	ldr.w	r3, [fp]
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	ab17      	add	r3, sp, #92	; 0x5c
 800fa20:	aa0a      	add	r2, sp, #40	; 0x28
 800fa22:	4621      	mov	r1, r4
 800fa24:	9804      	ldr	r0, [sp, #16]
 800fa26:	f7ff fe77 	bl	800f718 <nk_draw_property>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800fa2a:	f8d4 3460 	ldr.w	r3, [r4, #1120]	; 0x460
 800fa2e:	b11b      	cbz	r3, 800fa38 <nk_do_property+0x1f8>
 800fa30:	f8d4 1458 	ldr.w	r1, [r4, #1112]	; 0x458
 800fa34:	9804      	ldr	r0, [sp, #16]
 800fa36:	4798      	blx	r3

    /* execute right button  */
    if (nk_do_button_symbol(ws, out, left, style->sym_left, behavior, &style->dec_button, in, font)) {
 800fa38:	edcd aa1f 	vstr	s21, [sp, #124]	; 0x7c
 800fa3c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 800fa40:	ed8d 8a21 	vstr	s16, [sp, #132]	; 0x84
 800fa44:	ed8d 8a22 	vstr	s16, [sp, #136]	; 0x88
 800fa48:	9602      	str	r6, [sp, #8]
 800fa4a:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800fa4c:	9301      	str	r3, [sp, #4]
 800fa4e:	f504 7370 	add.w	r3, r4, #960	; 0x3c0
 800fa52:	9300      	str	r3, [sp, #0]
 800fa54:	4653      	mov	r3, sl
 800fa56:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 800fa5a:	eeb0 0a6a 	vmov.f32	s0, s21
 800fa5e:	eef0 0a49 	vmov.f32	s1, s18
 800fa62:	eeb0 1a48 	vmov.f32	s2, s16
 800fa66:	eef0 1a48 	vmov.f32	s3, s16
 800fa6a:	9904      	ldr	r1, [sp, #16]
 800fa6c:	4658      	mov	r0, fp
 800fa6e:	f7fa f84b 	bl	8009b08 <nk_do_button_symbol>
 800fa72:	b148      	cbz	r0, 800fa88 <nk_do_property+0x248>
        switch (variant->kind) {
 800fa74:	783b      	ldrb	r3, [r7, #0]
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	f000 80ee 	beq.w	800fc58 <nk_do_property+0x418>
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	f000 8106 	beq.w	800fc8e <nk_do_property+0x44e>
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f000 80db 	beq.w	800fc3e <nk_do_property+0x3fe>
        case NK_PROPERTY_DOUBLE:
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d - variant->step.d, variant->max_value.d); break;
        }
    }
    /* execute left button  */
    if (nk_do_button_symbol(ws, out, right, style->sym_right, behavior, &style->inc_button, in, font)) {
 800fa88:	edcd 8a1b 	vstr	s17, [sp, #108]	; 0x6c
 800fa8c:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 800fa90:	9602      	str	r6, [sp, #8]
 800fa92:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	f504 734a 	add.w	r3, r4, #808	; 0x328
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	4653      	mov	r3, sl
 800fa9e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800faa2:	eeb0 0a68 	vmov.f32	s0, s17
 800faa6:	eddd 0a1c 	vldr	s1, [sp, #112]	; 0x70
 800faaa:	eeb0 1a48 	vmov.f32	s2, s16
 800faae:	eddd 1a1e 	vldr	s3, [sp, #120]	; 0x78
 800fab2:	9904      	ldr	r1, [sp, #16]
 800fab4:	4658      	mov	r0, fp
 800fab6:	f7fa f827 	bl	8009b08 <nk_do_button_symbol>
 800faba:	b148      	cbz	r0, 800fad0 <nk_do_property+0x290>
        switch (variant->kind) {
 800fabc:	783b      	ldrb	r3, [r7, #0]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	f000 8113 	beq.w	800fcea <nk_do_property+0x4aa>
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	f000 812b 	beq.w	800fd20 <nk_do_property+0x4e0>
 800faca:	2b00      	cmp	r3, #0
 800facc:	f000 8100 	beq.w	800fcd0 <nk_do_property+0x490>
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f + variant->step.f, variant->max_value.f); break;
        case NK_PROPERTY_DOUBLE:
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d + variant->step.d, variant->max_value.d); break;
        }
    }
    if (old != NK_PROPERTY_EDIT && (*state == NK_PROPERTY_EDIT)) {
 800fad0:	9b08      	ldr	r3, [sp, #32]
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d00a      	beq.n	800faec <nk_do_property+0x2ac>
 800fad6:	f8d8 3000 	ldr.w	r3, [r8]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	f000 8141 	beq.w	800fd62 <nk_do_property+0x522>
 800fae0:	e004      	b.n	800faec <nk_do_property+0x2ac>
 800fae2:	bf00      	nop
 800fae4:	0800b9a1 	.word	0x0800b9a1
 800fae8:	0800b989 	.word	0x0800b989
        *cursor = nk_utf_len(buffer, *length);
        *len = *length;
        length = len;
        dst = buffer;
        active = 0;
    } else active = (*state == NK_PROPERTY_EDIT);
 800faec:	f8d8 3000 	ldr.w	r3, [r8]
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	bf14      	ite	ne
 800faf4:	f04f 0a00 	movne.w	sl, #0
 800faf8:	f04f 0a01 	moveq.w	sl, #1

    /* execute and run text edit field */
    nk_textedit_clear_state(text_edit, NK_TEXT_EDIT_SINGLE_LINE, filters[filter]);
 800fafc:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 800fb00:	aa36      	add	r2, sp, #216	; 0xd8
 800fb02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb06:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800fb0a:	9308      	str	r3, [sp, #32]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	2100      	movs	r1, #0
 800fb10:	4628      	mov	r0, r5
 800fb12:	f003 ff25 	bl	8013960 <nk_textedit_clear_state>
    text_edit->active = (unsigned char)active;
 800fb16:	f885 a069 	strb.w	sl, [r5, #105]	; 0x69
    text_edit->string.len = *length;
 800fb1a:	f8d9 2000 	ldr.w	r2, [r9]
 800fb1e:	64aa      	str	r2, [r5, #72]	; 0x48
    text_edit->cursor = NK_CLAMP(0, *cursor, *length);
 800fb20:	994d      	ldr	r1, [sp, #308]	; 0x134
 800fb22:	680b      	ldr	r3, [r1, #0]
 800fb24:	4293      	cmp	r3, r2
 800fb26:	bfa8      	it	ge
 800fb28:	4613      	movge	r3, r2
 800fb2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb2e:	65ab      	str	r3, [r5, #88]	; 0x58
    text_edit->select_start = NK_CLAMP(0,*select_begin, *length);
 800fb30:	f8d9 3000 	ldr.w	r3, [r9]
 800fb34:	994e      	ldr	r1, [sp, #312]	; 0x138
 800fb36:	680a      	ldr	r2, [r1, #0]
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	bfa8      	it	ge
 800fb3c:	4613      	movge	r3, r2
 800fb3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb42:	65eb      	str	r3, [r5, #92]	; 0x5c
    text_edit->select_end = NK_CLAMP(0,*select_end, *length);
 800fb44:	f8d9 3000 	ldr.w	r3, [r9]
 800fb48:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800fb4a:	680a      	ldr	r2, [r1, #0]
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	bfa8      	it	ge
 800fb50:	4613      	movge	r3, r2
 800fb52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb56:	662b      	str	r3, [r5, #96]	; 0x60
    text_edit->string.buffer.allocated = (nk_size)*length;
 800fb58:	f8d9 3000 	ldr.w	r3, [r9]
 800fb5c:	63ab      	str	r3, [r5, #56]	; 0x38
    text_edit->string.buffer.memory.size = NK_MAX_NUMBER_BUFFER;
 800fb5e:	2340      	movs	r3, #64	; 0x40
 800fb60:	632b      	str	r3, [r5, #48]	; 0x30
    text_edit->string.buffer.memory.ptr = dst;
 800fb62:	9905      	ldr	r1, [sp, #20]
 800fb64:	62e9      	str	r1, [r5, #44]	; 0x2c
    text_edit->string.buffer.size = NK_MAX_NUMBER_BUFFER;
 800fb66:	646b      	str	r3, [r5, #68]	; 0x44
    text_edit->mode = NK_TEXT_EDIT_MODE_INSERT;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
 800fb6e:	3478      	adds	r4, #120	; 0x78
 800fb70:	f8d8 3000 	ldr.w	r3, [r8]
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	9952      	ldr	r1, [sp, #328]	; 0x148
 800fb78:	bf0c      	ite	eq
 800fb7a:	460b      	moveq	r3, r1
 800fb7c:	2300      	movne	r3, #0
 800fb7e:	9603      	str	r6, [sp, #12]
 800fb80:	9302      	str	r3, [sp, #8]
 800fb82:	9401      	str	r4, [sp, #4]
 800fb84:	9500      	str	r5, [sp, #0]
 800fb86:	9b08      	ldr	r3, [sp, #32]
 800fb88:	f240 2262 	movw	r2, #610	; 0x262
 800fb8c:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
 800fb90:	eddd 0a14 	vldr	s1, [sp, #80]	; 0x50
 800fb94:	ed9d 1a15 	vldr	s2, [sp, #84]	; 0x54
 800fb98:	eddd 1a16 	vldr	s3, [sp, #88]	; 0x58
 800fb9c:	9904      	ldr	r1, [sp, #16]
 800fb9e:	4658      	mov	r0, fp
 800fba0:	f7fc f814 	bl	800bbcc <nk_do_edit>
        filters[filter], text_edit, &style->edit, (*state == NK_PROPERTY_EDIT) ? in: 0, font);

    *length = text_edit->string.len;
 800fba4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800fba6:	f8c9 3000 	str.w	r3, [r9]
    *cursor = text_edit->cursor;
 800fbaa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fbac:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800fbae:	6013      	str	r3, [r2, #0]
    *select_begin = text_edit->select_start;
 800fbb0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800fbb2:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800fbb4:	6013      	str	r3, [r2, #0]
    *select_end = text_edit->select_end;
 800fbb6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800fbb8:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 800fbba:	6013      	str	r3, [r2, #0]
    if (text_edit->active && nk_input_is_key_pressed(in, NK_KEY_ENTER))
 800fbbc:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f040 80e5 	bne.w	800fd90 <nk_do_property+0x550>
        text_edit->active = nk_false;

    if (active && !text_edit->active) {
 800fbc6:	f1ba 0f00 	cmp.w	sl, #0
 800fbca:	f040 80f3 	bne.w	800fdb4 <nk_do_property+0x574>
            variant->value.d = nk_strtod(buffer, 0);
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
            break;
        }
    }
}
 800fbce:	b037      	add	sp, #220	; 0xdc
 800fbd0:	ecbd 8b0a 	vpop	{d8-d12}
 800fbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size = font->width(font->userdata, font->height, buffer, *len);
 800fbd8:	68b3      	ldr	r3, [r6, #8]
 800fbda:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 800fbdc:	6812      	ldr	r2, [r2, #0]
 800fbde:	994a      	ldr	r1, [sp, #296]	; 0x128
 800fbe0:	ed96 0a01 	vldr	s0, [r6, #4]
 800fbe4:	6830      	ldr	r0, [r6, #0]
 800fbe6:	4798      	blx	r3
        size += style->edit.cursor_size;
 800fbe8:	edd4 7ac4 	vldr	s15, [r4, #784]	; 0x310
 800fbec:	ee30 0a27 	vadd.f32	s0, s0, s15
        length = len;
 800fbf0:	f8dd 912c 	ldr.w	r9, [sp, #300]	; 0x12c
        dst = buffer;
 800fbf4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800fbf6:	9305      	str	r3, [sp, #20]
 800fbf8:	e6b4      	b.n	800f964 <nk_do_property+0x124>
            nk_itoa(string, variant->value.i);
 800fbfa:	68b9      	ldr	r1, [r7, #8]
 800fbfc:	a823      	add	r0, sp, #140	; 0x8c
 800fbfe:	f005 fa7f 	bl	8015100 <nk_itoa>
            num_len = nk_strlen(string);
 800fc02:	a823      	add	r0, sp, #140	; 0x8c
 800fc04:	f005 f8d4 	bl	8014db0 <nk_strlen>
 800fc08:	9033      	str	r0, [sp, #204]	; 0xcc
            break;
 800fc0a:	e6a0      	b.n	800f94e <nk_do_property+0x10e>
            NK_DTOA(string, (double)variant->value.f);
 800fc0c:	68b8      	ldr	r0, [r7, #8]
 800fc0e:	f7f0 fcc3 	bl	8000598 <__aeabi_f2d>
 800fc12:	ec41 0b10 	vmov	d0, r0, r1
 800fc16:	a823      	add	r0, sp, #140	; 0x8c
 800fc18:	f005 fabe 	bl	8015198 <nk_dtoa>
            num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);
 800fc1c:	2102      	movs	r1, #2
 800fc1e:	a823      	add	r0, sp, #140	; 0x8c
 800fc20:	f005 fa48 	bl	80150b4 <nk_string_float_limit>
 800fc24:	9033      	str	r0, [sp, #204]	; 0xcc
            break;
 800fc26:	e692      	b.n	800f94e <nk_do_property+0x10e>
            NK_DTOA(string, variant->value.d);
 800fc28:	ed97 0b02 	vldr	d0, [r7, #8]
 800fc2c:	a823      	add	r0, sp, #140	; 0x8c
 800fc2e:	f005 fab3 	bl	8015198 <nk_dtoa>
            num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);
 800fc32:	2102      	movs	r1, #2
 800fc34:	a823      	add	r0, sp, #140	; 0x8c
 800fc36:	f005 fa3d 	bl	80150b4 <nk_string_float_limit>
 800fc3a:	9033      	str	r0, [sp, #204]	; 0xcc
            break;
 800fc3c:	e687      	b.n	800f94e <nk_do_property+0x10e>
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i - variant->step.i, variant->max_value.i); break;
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	6a3a      	ldr	r2, [r7, #32]
 800fc42:	1a9b      	subs	r3, r3, r2
 800fc44:	69ba      	ldr	r2, [r7, #24]
 800fc46:	4293      	cmp	r3, r2
 800fc48:	bfa8      	it	ge
 800fc4a:	4613      	movge	r3, r2
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	bfb8      	it	lt
 800fc52:	4613      	movlt	r3, r2
 800fc54:	60bb      	str	r3, [r7, #8]
 800fc56:	e717      	b.n	800fa88 <nk_do_property+0x248>
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f - variant->step.f, variant->max_value.f); break;
 800fc58:	edd7 7a02 	vldr	s15, [r7, #8]
 800fc5c:	ed97 7a08 	vldr	s14, [r7, #32]
 800fc60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc64:	ed97 7a06 	vldr	s14, [r7, #24]
 800fc68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc70:	bf58      	it	pl
 800fc72:	eef0 7a47 	vmovpl.f32	s15, s14
 800fc76:	ed97 7a04 	vldr	s14, [r7, #16]
 800fc7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc82:	bfd8      	it	le
 800fc84:	eeb0 7a67 	vmovle.f32	s14, s15
 800fc88:	ed87 7a02 	vstr	s14, [r7, #8]
 800fc8c:	e6fc      	b.n	800fa88 <nk_do_property+0x248>
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d - variant->step.d, variant->max_value.d); break;
 800fc8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fc92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc96:	f7f0 fb1f 	bl	80002d8 <__aeabi_dsub>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fca2:	ed97 9b06 	vldr	d9, [r7, #24]
 800fca6:	ec53 2b19 	vmov	r2, r3, d9
 800fcaa:	f7f0 ff3f 	bl	8000b2c <__aeabi_dcmplt>
 800fcae:	b908      	cbnz	r0, 800fcb4 <nk_do_property+0x474>
 800fcb0:	ed8d 9b06 	vstr	d9, [sp, #24]
 800fcb4:	ed97 9b04 	vldr	d9, [r7, #16]
 800fcb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fcbc:	ec51 0b19 	vmov	r0, r1, d9
 800fcc0:	f7f0 ff52 	bl	8000b68 <__aeabi_dcmpgt>
 800fcc4:	b908      	cbnz	r0, 800fcca <nk_do_property+0x48a>
 800fcc6:	ed9d 9b06 	vldr	d9, [sp, #24]
 800fcca:	ed87 9b02 	vstr	d9, [r7, #8]
 800fcce:	e6db      	b.n	800fa88 <nk_do_property+0x248>
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i + variant->step.i, variant->max_value.i); break;
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	6a3a      	ldr	r2, [r7, #32]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	69ba      	ldr	r2, [r7, #24]
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	bfa8      	it	ge
 800fcdc:	4613      	movge	r3, r2
 800fcde:	693a      	ldr	r2, [r7, #16]
 800fce0:	4293      	cmp	r3, r2
 800fce2:	bfb8      	it	lt
 800fce4:	4613      	movlt	r3, r2
 800fce6:	60bb      	str	r3, [r7, #8]
 800fce8:	e6f2      	b.n	800fad0 <nk_do_property+0x290>
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f + variant->step.f, variant->max_value.f); break;
 800fcea:	edd7 7a02 	vldr	s15, [r7, #8]
 800fcee:	ed97 7a08 	vldr	s14, [r7, #32]
 800fcf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcf6:	ed97 7a06 	vldr	s14, [r7, #24]
 800fcfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	bf58      	it	pl
 800fd04:	eef0 7a47 	vmovpl.f32	s15, s14
 800fd08:	ed97 7a04 	vldr	s14, [r7, #16]
 800fd0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd14:	bfd8      	it	le
 800fd16:	eeb0 7a67 	vmovle.f32	s14, s15
 800fd1a:	ed87 7a02 	vstr	s14, [r7, #8]
 800fd1e:	e6d7      	b.n	800fad0 <nk_do_property+0x290>
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d + variant->step.d, variant->max_value.d); break;
 800fd20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fd24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd28:	f7f0 fad8 	bl	80002dc <__adddf3>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	460b      	mov	r3, r1
 800fd30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fd34:	ed97 8b06 	vldr	d8, [r7, #24]
 800fd38:	ec53 2b18 	vmov	r2, r3, d8
 800fd3c:	f7f0 fef6 	bl	8000b2c <__aeabi_dcmplt>
 800fd40:	b908      	cbnz	r0, 800fd46 <nk_do_property+0x506>
 800fd42:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fd46:	ed97 8b04 	vldr	d8, [r7, #16]
 800fd4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd4e:	ec51 0b18 	vmov	r0, r1, d8
 800fd52:	f7f0 ff09 	bl	8000b68 <__aeabi_dcmpgt>
 800fd56:	b908      	cbnz	r0, 800fd5c <nk_do_property+0x51c>
 800fd58:	ed9d 8b06 	vldr	d8, [sp, #24]
 800fd5c:	ed87 8b02 	vstr	d8, [r7, #8]
 800fd60:	e6b6      	b.n	800fad0 <nk_do_property+0x290>
        NK_MEMCPY(buffer, dst, (nk_size)*length);
 800fd62:	f8d9 2000 	ldr.w	r2, [r9]
 800fd66:	9905      	ldr	r1, [sp, #20]
 800fd68:	984a      	ldr	r0, [sp, #296]	; 0x128
 800fd6a:	f004 ff51 	bl	8014c10 <nk_memcopy>
        *cursor = nk_utf_len(buffer, *length);
 800fd6e:	f8d9 1000 	ldr.w	r1, [r9]
 800fd72:	984a      	ldr	r0, [sp, #296]	; 0x128
 800fd74:	f004 ff1a 	bl	8014bac <nk_utf_len>
 800fd78:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800fd7a:	6018      	str	r0, [r3, #0]
        *len = *length;
 800fd7c:	f8d9 3000 	ldr.w	r3, [r9]
 800fd80:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 800fd82:	6013      	str	r3, [r2, #0]
        length = len;
 800fd84:	4691      	mov	r9, r2
        dst = buffer;
 800fd86:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800fd88:	9305      	str	r3, [sp, #20]
        active = 0;
 800fd8a:	f04f 0a00 	mov.w	sl, #0
 800fd8e:	e6b5      	b.n	800fafc <nk_do_property+0x2bc>
    if (text_edit->active && nk_input_is_key_pressed(in, NK_KEY_ENTER))
 800fd90:	2104      	movs	r1, #4
 800fd92:	9852      	ldr	r0, [sp, #328]	; 0x148
 800fd94:	f7fd f852 	bl	800ce3c <nk_input_is_key_pressed>
 800fd98:	b118      	cbz	r0, 800fda2 <nk_do_property+0x562>
        text_edit->active = nk_false;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
 800fda0:	e711      	b.n	800fbc6 <nk_do_property+0x386>
    if (active && !text_edit->active) {
 800fda2:	f1ba 0f00 	cmp.w	sl, #0
 800fda6:	f43f af12 	beq.w	800fbce <nk_do_property+0x38e>
 800fdaa:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	f47f af0d 	bne.w	800fbce <nk_do_property+0x38e>
        *state = NK_PROPERTY_DEFAULT;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	f8c8 3000 	str.w	r3, [r8]
        buffer[*len] = '\0';
 800fdba:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 800fdbc:	6812      	ldr	r2, [r2, #0]
 800fdbe:	994a      	ldr	r1, [sp, #296]	; 0x128
 800fdc0:	548b      	strb	r3, [r1, r2]
        switch (variant->kind) {
 800fdc2:	783b      	ldrb	r3, [r7, #0]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d012      	beq.n	800fdee <nk_do_property+0x5ae>
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	d02d      	beq.n	800fe28 <nk_do_property+0x5e8>
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f47f aefe 	bne.w	800fbce <nk_do_property+0x38e>
            variant->value.i = nk_strtoi(buffer, 0);
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	984a      	ldr	r0, [sp, #296]	; 0x128
 800fdd6:	f005 f803 	bl	8014de0 <nk_strtoi>
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	4298      	cmp	r0, r3
 800fdde:	bfa8      	it	ge
 800fde0:	4618      	movge	r0, r3
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	4298      	cmp	r0, r3
 800fde6:	bfb8      	it	lt
 800fde8:	4618      	movlt	r0, r3
 800fdea:	60b8      	str	r0, [r7, #8]
            break;
 800fdec:	e6ef      	b.n	800fbce <nk_do_property+0x38e>
            nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);
 800fdee:	2102      	movs	r1, #2
 800fdf0:	984a      	ldr	r0, [sp, #296]	; 0x128
 800fdf2:	f005 f95f 	bl	80150b4 <nk_string_float_limit>
            variant->value.f = nk_strtof(buffer, 0);
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	984a      	ldr	r0, [sp, #296]	; 0x128
 800fdfa:	f005 f91b 	bl	8015034 <nk_strtof>
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);
 800fdfe:	edd7 7a06 	vldr	s15, [r7, #24]
 800fe02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fe06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0a:	bf58      	it	pl
 800fe0c:	eeb0 0a67 	vmovpl.f32	s0, s15
 800fe10:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe14:	eef4 7ac0 	vcmpe.f32	s15, s0
 800fe18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1c:	bfd8      	it	le
 800fe1e:	eef0 7a40 	vmovle.f32	s15, s0
 800fe22:	edc7 7a02 	vstr	s15, [r7, #8]
            break;
 800fe26:	e6d2      	b.n	800fbce <nk_do_property+0x38e>
            nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);
 800fe28:	2102      	movs	r1, #2
 800fe2a:	984a      	ldr	r0, [sp, #296]	; 0x128
 800fe2c:	f005 f942 	bl	80150b4 <nk_string_float_limit>
            variant->value.d = nk_strtod(buffer, 0);
 800fe30:	2100      	movs	r1, #0
 800fe32:	984a      	ldr	r0, [sp, #296]	; 0x128
 800fe34:	f005 f814 	bl	8014e60 <nk_strtod>
 800fe38:	ec55 4b10 	vmov	r4, r5, d0
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
 800fe3c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800fe40:	4642      	mov	r2, r8
 800fe42:	464b      	mov	r3, r9
 800fe44:	ee10 0a10 	vmov	r0, s0
 800fe48:	4629      	mov	r1, r5
 800fe4a:	f7f0 fe6f 	bl	8000b2c <__aeabi_dcmplt>
 800fe4e:	b908      	cbnz	r0, 800fe54 <nk_do_property+0x614>
 800fe50:	4644      	mov	r4, r8
 800fe52:	464d      	mov	r5, r9
 800fe54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800fe58:	4622      	mov	r2, r4
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	4640      	mov	r0, r8
 800fe5e:	4649      	mov	r1, r9
 800fe60:	f7f0 fe82 	bl	8000b68 <__aeabi_dcmpgt>
 800fe64:	b908      	cbnz	r0, 800fe6a <nk_do_property+0x62a>
 800fe66:	46a0      	mov	r8, r4
 800fe68:	46a9      	mov	r9, r5
 800fe6a:	e9c7 8902 	strd	r8, r9, [r7, #8]
}
 800fe6e:	e6ae      	b.n	800fbce <nk_do_property+0x38e>

0800fe70 <nk_property>:
    return result;
}
NK_LIB void
nk_property(struct nk_context *ctx, const char *name, struct nk_property_variant *variant,
    float inc_per_pixel, const enum nk_property_filter filter)
{
 800fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe74:	ed2d 8b02 	vpush	{d8}
 800fe78:	b0af      	sub	sp, #188	; 0xbc
 800fe7a:	920d      	str	r2, [sp, #52]	; 0x34
 800fe7c:	930e      	str	r3, [sp, #56]	; 0x38
    int *select_begin = 0;
    int *select_end = 0;
    int old_state;

    char dummy_buffer[NK_MAX_NUMBER_BUFFER];
    int dummy_state = NK_PROPERTY_DEFAULT;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	9319      	str	r3, [sp, #100]	; 0x64
    int dummy_length = 0;
 800fe82:	9318      	str	r3, [sp, #96]	; 0x60
    int dummy_cursor = 0;
 800fe84:	9317      	str	r3, [sp, #92]	; 0x5c
    int dummy_select_begin = 0;
 800fe86:	9316      	str	r3, [sp, #88]	; 0x58
    int dummy_select_end = 0;
 800fe88:	9315      	str	r3, [sp, #84]	; 0x54

    NK_ASSERT(ctx);
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d03a      	beq.n	800ff04 <nk_property+0x94>
 800fe8e:	460e      	mov	r6, r1
 800fe90:	eeb0 8a40 	vmov.f32	s16, s0
 800fe94:	4604      	mov	r4, r0
    NK_ASSERT(ctx->current);
 800fe96:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800fe9a:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 800fe9e:	2d00      	cmp	r5, #0
 800fea0:	d037      	beq.n	800ff12 <nk_property+0xa2>
    NK_ASSERT(ctx->current->layout);
 800fea2:	f8d5 708c 	ldr.w	r7, [r5, #140]	; 0x8c
 800fea6:	2f00      	cmp	r7, #0
 800fea8:	d03a      	beq.n	800ff20 <nk_property+0xb0>
        return;

    win = ctx->current;
    layout = win->layout;
    style = &ctx->style;
    s = nk_widget(&bounds, ctx);
 800feaa:	4601      	mov	r1, r0
 800feac:	a82a      	add	r0, sp, #168	; 0xa8
 800feae:	f005 fc79 	bl	80157a4 <nk_widget>
    if (!s) return;
 800feb2:	900f      	str	r0, [sp, #60]	; 0x3c
 800feb4:	2800      	cmp	r0, #0
 800feb6:	f000 8114 	beq.w	80100e2 <nk_property+0x272>

    /* calculate hash from name */
    if (name[0] == '#') {
 800feba:	7833      	ldrb	r3, [r6, #0]
 800febc:	2b23      	cmp	r3, #35	; 0x23
 800febe:	d036      	beq.n	800ff2e <nk_property+0xbe>
        hash = nk_murmur_hash(name, (int)nk_strlen(name), win->property.seq++);
        name++; /* special number hash */
    } else hash = nk_murmur_hash(name, (int)nk_strlen(name), 42);
 800fec0:	4630      	mov	r0, r6
 800fec2:	f004 ff75 	bl	8014db0 <nk_strlen>
 800fec6:	4601      	mov	r1, r0
 800fec8:	222a      	movs	r2, #42	; 0x2a
 800feca:	4630      	mov	r0, r6
 800fecc:	f005 fa98 	bl	8015400 <nk_murmur_hash>
 800fed0:	9013      	str	r0, [sp, #76]	; 0x4c

    /* check if property is currently hot item */
    if (win->property.active && hash == win->property.name) {
 800fed2:	f8d5 9094 	ldr.w	r9, [r5, #148]	; 0x94
 800fed6:	f1b9 0f00 	cmp.w	r9, #0
 800feda:	d049      	beq.n	800ff70 <nk_property+0x100>
 800fedc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 800fee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d032      	beq.n	800ff4c <nk_property+0xdc>
        select_end = &win->property.select_end;
    } else {
        buffer = dummy_buffer;
        len = &dummy_length;
        cursor = &dummy_cursor;
        state = &dummy_state;
 800fee6:	f04f 0900 	mov.w	r9, #0
        select_begin =  &dummy_select_begin;
        select_end = &dummy_select_end;
 800feea:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
        select_begin =  &dummy_select_begin;
 800feee:	ab16      	add	r3, sp, #88	; 0x58
 800fef0:	9312      	str	r3, [sp, #72]	; 0x48
        cursor = &dummy_cursor;
 800fef2:	ab17      	add	r3, sp, #92	; 0x5c
 800fef4:	9311      	str	r3, [sp, #68]	; 0x44
        len = &dummy_length;
 800fef6:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
        buffer = dummy_buffer;
 800fefa:	ab1a      	add	r3, sp, #104	; 0x68
 800fefc:	9310      	str	r3, [sp, #64]	; 0x40
        state = &dummy_state;
 800fefe:	f10d 0864 	add.w	r8, sp, #100	; 0x64
 800ff02:	e041      	b.n	800ff88 <nk_property+0x118>
    NK_ASSERT(ctx);
 800ff04:	4b85      	ldr	r3, [pc, #532]	; (801011c <nk_property+0x2ac>)
 800ff06:	4a86      	ldr	r2, [pc, #536]	; (8010120 <nk_property+0x2b0>)
 800ff08:	f240 115b 	movw	r1, #347	; 0x15b
 800ff0c:	4885      	ldr	r0, [pc, #532]	; (8010124 <nk_property+0x2b4>)
 800ff0e:	f006 fb1d 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 800ff12:	4b85      	ldr	r3, [pc, #532]	; (8010128 <nk_property+0x2b8>)
 800ff14:	4a82      	ldr	r2, [pc, #520]	; (8010120 <nk_property+0x2b0>)
 800ff16:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800ff1a:	4882      	ldr	r0, [pc, #520]	; (8010124 <nk_property+0x2b4>)
 800ff1c:	f006 fb16 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800ff20:	4b82      	ldr	r3, [pc, #520]	; (801012c <nk_property+0x2bc>)
 800ff22:	4a7f      	ldr	r2, [pc, #508]	; (8010120 <nk_property+0x2b0>)
 800ff24:	f240 115d 	movw	r1, #349	; 0x15d
 800ff28:	487e      	ldr	r0, [pc, #504]	; (8010124 <nk_property+0x2b4>)
 800ff2a:	f006 fb0f 	bl	801654c <__assert_func>
        hash = nk_murmur_hash(name, (int)nk_strlen(name), win->property.seq++);
 800ff2e:	4630      	mov	r0, r6
 800ff30:	f004 ff3e 	bl	8014db0 <nk_strlen>
 800ff34:	4601      	mov	r1, r0
 800ff36:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
 800ff3a:	1c53      	adds	r3, r2, #1
 800ff3c:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 800ff40:	4630      	mov	r0, r6
 800ff42:	f005 fa5d 	bl	8015400 <nk_murmur_hash>
 800ff46:	9013      	str	r0, [sp, #76]	; 0x4c
        name++; /* special number hash */
 800ff48:	3601      	adds	r6, #1
 800ff4a:	e7c2      	b.n	800fed2 <nk_property+0x62>
        buffer = win->property.buffer;
 800ff4c:	f105 039c 	add.w	r3, r5, #156	; 0x9c
 800ff50:	9310      	str	r3, [sp, #64]	; 0x40
        len = &win->property.length;
 800ff52:	f105 0adc 	add.w	sl, r5, #220	; 0xdc
        cursor = &win->property.cursor;
 800ff56:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
 800ff5a:	9311      	str	r3, [sp, #68]	; 0x44
        state = &win->property.state;
 800ff5c:	f105 08f8 	add.w	r8, r5, #248	; 0xf8
        select_begin = &win->property.select_start;
 800ff60:	f105 03e4 	add.w	r3, r5, #228	; 0xe4
 800ff64:	9312      	str	r3, [sp, #72]	; 0x48
        select_end = &win->property.select_end;
 800ff66:	f105 0be8 	add.w	fp, r5, #232	; 0xe8
        state = &win->property.state;
 800ff6a:	f8d5 90f8 	ldr.w	r9, [r5, #248]	; 0xf8
        select_end = &win->property.select_end;
 800ff6e:	e00b      	b.n	800ff88 <nk_property+0x118>
        select_end = &dummy_select_end;
 800ff70:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
        select_begin =  &dummy_select_begin;
 800ff74:	ab16      	add	r3, sp, #88	; 0x58
 800ff76:	9312      	str	r3, [sp, #72]	; 0x48
        cursor = &dummy_cursor;
 800ff78:	ab17      	add	r3, sp, #92	; 0x5c
 800ff7a:	9311      	str	r3, [sp, #68]	; 0x44
        len = &dummy_length;
 800ff7c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
        buffer = dummy_buffer;
 800ff80:	ab1a      	add	r3, sp, #104	; 0x68
 800ff82:	9310      	str	r3, [sp, #64]	; 0x40
        state = &dummy_state;
 800ff84:	f10d 0864 	add.w	r8, sp, #100	; 0x64
    }

    /* execute property widget */
    old_state = *state;
    ctx->text_edit.clip = ctx->clip;
 800ff88:	f504 5304 	add.w	r3, r4, #8448	; 0x2100
 800ff8c:	333c      	adds	r3, #60	; 0x3c
 800ff8e:	f504 52d6 	add.w	r2, r4, #6848	; 0x1ac0
 800ff92:	3208      	adds	r2, #8
 800ff94:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
        layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800ff9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d067      	beq.n	8010070 <nk_property+0x200>
 800ffa0:	687b      	ldr	r3, [r7, #4]
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 800ffa2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800ffa6:	d167      	bne.n	8010078 <nk_property+0x208>
    nk_do_property(&ctx->last_widget_state, &win->buffer, bounds, name,
 800ffa8:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800ffac:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	; 0xad8
 800ffb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffb2:	f504 5304 	add.w	r3, r4, #8448	; 0x2100
 800ffb6:	333c      	adds	r3, #60	; 0x3c
 800ffb8:	930a      	str	r3, [sp, #40]	; 0x28
 800ffba:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 800ffbe:	9309      	str	r3, [sp, #36]	; 0x24
 800ffc0:	9408      	str	r4, [sp, #32]
 800ffc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffc4:	9307      	str	r3, [sp, #28]
 800ffc6:	f504 630e 	add.w	r3, r4, #2272	; 0x8e0
 800ffca:	9306      	str	r3, [sp, #24]
 800ffcc:	f8cd b014 	str.w	fp, [sp, #20]
 800ffd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ffd2:	9304      	str	r3, [sp, #16]
 800ffd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffd6:	9303      	str	r3, [sp, #12]
 800ffd8:	f8cd 8008 	str.w	r8, [sp, #8]
 800ffdc:	f8cd a004 	str.w	sl, [sp, #4]
 800ffe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	eeb0 2a48 	vmov.f32	s4, s16
 800ffe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffea:	4632      	mov	r2, r6
 800ffec:	ed9d 0a2a 	vldr	s0, [sp, #168]	; 0xa8
 800fff0:	eddd 0a2b 	vldr	s1, [sp, #172]	; 0xac
 800fff4:	ed9d 1a2c 	vldr	s2, [sp, #176]	; 0xb0
 800fff8:	eddd 1a2d 	vldr	s3, [sp, #180]	; 0xb4
 800fffc:	f105 0164 	add.w	r1, r5, #100	; 0x64
 8010000:	f504 50d6 	add.w	r0, r4, #6848	; 0x1ac0
 8010004:	3014      	adds	r0, #20
 8010006:	f7ff fc1b 	bl	800f840 <nk_do_property>
        variant, inc_per_pixel, buffer, len, state, cursor, select_begin,
        select_end, &style->property, filter, in, style->font, &ctx->text_edit,
        ctx->button_behavior);

    if (in && *state != NK_PROPERTY_DEFAULT && !win->property.active) {
 801000a:	f8d8 3000 	ldr.w	r3, [r8]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d06c      	beq.n	80100ec <nk_property+0x27c>
 8010012:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8010016:	2b00      	cmp	r3, #0
 8010018:	d163      	bne.n	80100e2 <nk_property+0x272>
        /* current property is now hot */
        win->property.active = 1;
 801001a:	2301      	movs	r3, #1
 801001c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        NK_MEMCPY(win->property.buffer, buffer, (nk_size)*len);
 8010020:	f8da 2000 	ldr.w	r2, [sl]
 8010024:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010026:	f105 009c 	add.w	r0, r5, #156	; 0x9c
 801002a:	f004 fdf1 	bl	8014c10 <nk_memcopy>
        win->property.length = *len;
 801002e:	f8da 3000 	ldr.w	r3, [sl]
 8010032:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        win->property.cursor = *cursor;
 8010036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
        win->property.state = *state;
 801003e:	f8d8 3000 	ldr.w	r3, [r8]
 8010042:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
        win->property.name = hash;
 8010046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010048:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
        win->property.select_start = *select_begin;
 801004c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
        win->property.select_end = *select_end;
 8010054:	f8db 3000 	ldr.w	r3, [fp]
 8010058:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
        if (*state == NK_PROPERTY_DRAG) {
 801005c:	f8d8 3000 	ldr.w	r3, [r8]
 8010060:	2b02      	cmp	r3, #2
 8010062:	d13b      	bne.n	80100dc <nk_property+0x26c>
            ctx->input.mouse.grab = nk_true;
 8010064:	2301      	movs	r3, #1
 8010066:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
            ctx->input.mouse.grabbed = nk_true;
 801006a:	f884 3165 	strb.w	r3, [r4, #357]	; 0x165
 801006e:	e035      	b.n	80100dc <nk_property+0x26c>
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 8010070:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8010074:	2b00      	cmp	r3, #0
 8010076:	d193      	bne.n	800ffa0 <nk_property+0x130>
    nk_do_property(&ctx->last_widget_state, &win->buffer, bounds, name,
 8010078:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801007c:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	; 0xad8
 8010080:	930b      	str	r3, [sp, #44]	; 0x2c
 8010082:	f504 5304 	add.w	r3, r4, #8448	; 0x2100
 8010086:	333c      	adds	r3, #60	; 0x3c
 8010088:	930a      	str	r3, [sp, #40]	; 0x28
 801008a:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 801008e:	9309      	str	r3, [sp, #36]	; 0x24
 8010090:	2300      	movs	r3, #0
 8010092:	9308      	str	r3, [sp, #32]
 8010094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010096:	9307      	str	r3, [sp, #28]
 8010098:	f504 630e 	add.w	r3, r4, #2272	; 0x8e0
 801009c:	9306      	str	r3, [sp, #24]
 801009e:	f8cd b014 	str.w	fp, [sp, #20]
 80100a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100a4:	9304      	str	r3, [sp, #16]
 80100a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100a8:	9303      	str	r3, [sp, #12]
 80100aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80100ae:	f8cd a004 	str.w	sl, [sp, #4]
 80100b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	eeb0 2a48 	vmov.f32	s4, s16
 80100ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100bc:	4632      	mov	r2, r6
 80100be:	ed9d 0a2a 	vldr	s0, [sp, #168]	; 0xa8
 80100c2:	eddd 0a2b 	vldr	s1, [sp, #172]	; 0xac
 80100c6:	ed9d 1a2c 	vldr	s2, [sp, #176]	; 0xb0
 80100ca:	eddd 1a2d 	vldr	s3, [sp, #180]	; 0xb4
 80100ce:	f105 0164 	add.w	r1, r5, #100	; 0x64
 80100d2:	f504 50d6 	add.w	r0, r4, #6848	; 0x1ac0
 80100d6:	3014      	adds	r0, #20
 80100d8:	f7ff fbb2 	bl	800f840 <nk_do_property>
        }
    }
    /* check if previously active property is now inactive */
    if (*state == NK_PROPERTY_DEFAULT && old_state != NK_PROPERTY_DEFAULT) {
 80100dc:	f8d8 3000 	ldr.w	r3, [r8]
 80100e0:	b123      	cbz	r3, 80100ec <nk_property+0x27c>
        }
        win->property.select_start = 0;
        win->property.select_end = 0;
        win->property.active = 0;
    }
}
 80100e2:	b02f      	add	sp, #188	; 0xbc
 80100e4:	ecbd 8b02 	vpop	{d8}
 80100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*state == NK_PROPERTY_DEFAULT && old_state != NK_PROPERTY_DEFAULT) {
 80100ec:	f1b9 0f00 	cmp.w	r9, #0
 80100f0:	d0f7      	beq.n	80100e2 <nk_property+0x272>
        if (old_state == NK_PROPERTY_DRAG) {
 80100f2:	f1b9 0f02 	cmp.w	r9, #2
 80100f6:	d007      	beq.n	8010108 <nk_property+0x298>
        win->property.select_start = 0;
 80100f8:	2300      	movs	r3, #0
 80100fa:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
        win->property.select_end = 0;
 80100fe:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
        win->property.active = 0;
 8010102:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8010106:	e7ec      	b.n	80100e2 <nk_property+0x272>
            ctx->input.mouse.grab = nk_false;
 8010108:	2300      	movs	r3, #0
 801010a:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
            ctx->input.mouse.grabbed = nk_false;
 801010e:	f884 3165 	strb.w	r3, [r4, #357]	; 0x165
            ctx->input.mouse.ungrab = nk_true;
 8010112:	2301      	movs	r3, #1
 8010114:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
 8010118:	e7ee      	b.n	80100f8 <nk_property+0x288>
 801011a:	bf00      	nop
 801011c:	0801ad58 	.word	0x0801ad58
 8010120:	0801b66c 	.word	0x0801b66c
 8010124:	0801b630 	.word	0x0801b630
 8010128:	0801ad5c 	.word	0x0801ad5c
 801012c:	0801ad6c 	.word	0x0801ad6c

08010130 <nk_property_int>:
NK_API void
nk_property_int(struct nk_context *ctx, const char *name,
    int min, int *val, int max, int step, float inc_per_pixel)
{
 8010130:	b510      	push	{r4, lr}
 8010132:	b08a      	sub	sp, #40	; 0x28
    struct nk_property_variant variant;
    NK_ASSERT(ctx);
 8010134:	b1d0      	cbz	r0, 801016c <nk_property_int+0x3c>
 8010136:	461c      	mov	r4, r3
 8010138:	4684      	mov	ip, r0
    NK_ASSERT(name);
 801013a:	b1f1      	cbz	r1, 801017a <nk_property_int+0x4a>
    NK_ASSERT(val);
 801013c:	b323      	cbz	r3, 8010188 <nk_property_int+0x58>

    if (!ctx || !ctx->current || !name || !val) return;
 801013e:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8010142:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010146:	b17b      	cbz	r3, 8010168 <nk_property_int+0x38>
    variant = nk_property_variant_int(*val, min, max, step);
 8010148:	6820      	ldr	r0, [r4, #0]
 801014a:	2300      	movs	r3, #0
 801014c:	f88d 3000 	strb.w	r3, [sp]
 8010150:	9002      	str	r0, [sp, #8]
 8010152:	9204      	str	r2, [sp, #16]
 8010154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010156:	9206      	str	r2, [sp, #24]
 8010158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801015a:	9208      	str	r2, [sp, #32]
    nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_INT);
 801015c:	466a      	mov	r2, sp
 801015e:	4660      	mov	r0, ip
 8010160:	f7ff fe86 	bl	800fe70 <nk_property>
    *val = variant.value.i;
 8010164:	9b02      	ldr	r3, [sp, #8]
 8010166:	6023      	str	r3, [r4, #0]
}
 8010168:	b00a      	add	sp, #40	; 0x28
 801016a:	bd10      	pop	{r4, pc}
    NK_ASSERT(ctx);
 801016c:	4b0a      	ldr	r3, [pc, #40]	; (8010198 <nk_property_int+0x68>)
 801016e:	4a0b      	ldr	r2, [pc, #44]	; (801019c <nk_property_int+0x6c>)
 8010170:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8010174:	480a      	ldr	r0, [pc, #40]	; (80101a0 <nk_property_int+0x70>)
 8010176:	f006 f9e9 	bl	801654c <__assert_func>
    NK_ASSERT(name);
 801017a:	4b0a      	ldr	r3, [pc, #40]	; (80101a4 <nk_property_int+0x74>)
 801017c:	4a07      	ldr	r2, [pc, #28]	; (801019c <nk_property_int+0x6c>)
 801017e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8010182:	4807      	ldr	r0, [pc, #28]	; (80101a0 <nk_property_int+0x70>)
 8010184:	f006 f9e2 	bl	801654c <__assert_func>
    NK_ASSERT(val);
 8010188:	4b07      	ldr	r3, [pc, #28]	; (80101a8 <nk_property_int+0x78>)
 801018a:	4a04      	ldr	r2, [pc, #16]	; (801019c <nk_property_int+0x6c>)
 801018c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010190:	4803      	ldr	r0, [pc, #12]	; (80101a0 <nk_property_int+0x70>)
 8010192:	f006 f9db 	bl	801654c <__assert_func>
 8010196:	bf00      	nop
 8010198:	0801ad58 	.word	0x0801ad58
 801019c:	0801b65c 	.word	0x0801b65c
 80101a0:	0801b630 	.word	0x0801b630
 80101a4:	0801b650 	.word	0x0801b650
 80101a8:	0801b658 	.word	0x0801b658

080101ac <nk_scrollbar_behavior>:
nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,
    int has_scrolling, const struct nk_rect *scroll,
    const struct nk_rect *cursor, const struct nk_rect *empty0,
    const struct nk_rect *empty1, float scroll_offset,
    float target, float scroll_step, enum nk_orientation o)
{
 80101ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b0:	ed2d 8b04 	vpush	{d8-d9}
 80101b4:	b085      	sub	sp, #20
 80101b6:	9200      	str	r2, [sp, #0]
 80101b8:	461c      	mov	r4, r3
 80101ba:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80101bc:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80101c0:	eeb0 8a40 	vmov.f32	s16, s0
 80101c4:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    nk_flags ws = 0;
 80101c8:	2300      	movs	r3, #0
 80101ca:	9303      	str	r3, [sp, #12]
    int left_mouse_down;
    unsigned int left_mouse_clicked;
    int left_mouse_click_in_cursor;
    float scroll_delta;

    nk_widget_state_reset(state);
 80101cc:	6803      	ldr	r3, [r0, #0]
 80101ce:	f013 0f02 	tst.w	r3, #2
 80101d2:	bf14      	ite	ne
 80101d4:	2306      	movne	r3, #6
 80101d6:	2304      	moveq	r3, #4
 80101d8:	6003      	str	r3, [r0, #0]
    if (!in) return scroll_offset;
 80101da:	2900      	cmp	r1, #0
 80101dc:	f000 819b 	beq.w	8010516 <nk_scrollbar_behavior+0x36a>
 80101e0:	4605      	mov	r5, r0
 80101e2:	eeb0 9a60 	vmov.f32	s18, s1
 80101e6:	eef0 8a41 	vmov.f32	s17, s2
 80101ea:	460e      	mov	r6, r1

    left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 80101ec:	f8d1 a104 	ldr.w	sl, [r1, #260]	; 0x104
    left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 80101f0:	f8d1 b108 	ldr.w	fp, [r1, #264]	; 0x108
    left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 80101f4:	2201      	movs	r2, #1
 80101f6:	ed97 0a00 	vldr	s0, [r7]
 80101fa:	edd7 0a01 	vldr	s1, [r7, #4]
 80101fe:	ed97 1a02 	vldr	s2, [r7, #8]
 8010202:	edd7 1a03 	vldr	s3, [r7, #12]
 8010206:	2100      	movs	r1, #0
 8010208:	4630      	mov	r0, r6
 801020a:	f7fc fd65 	bl	800ccd8 <nk_input_has_mouse_click_down_in_rect>
 801020e:	9001      	str	r0, [sp, #4]
        NK_BUTTON_LEFT, *cursor, nk_true);
    if (nk_input_is_mouse_hovering_rect(in, *scroll))
 8010210:	ed94 0a00 	vldr	s0, [r4]
 8010214:	edd4 0a01 	vldr	s1, [r4, #4]
 8010218:	ed94 1a02 	vldr	s2, [r4, #8]
 801021c:	edd4 1a03 	vldr	s3, [r4, #12]
 8010220:	4630      	mov	r0, r6
 8010222:	f7fc fd91 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 8010226:	b108      	cbz	r0, 801022c <nk_scrollbar_behavior+0x80>
        *state = NK_WIDGET_STATE_HOVERED;
 8010228:	2312      	movs	r3, #18
 801022a:	602b      	str	r3, [r5, #0]

    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 801022c:	f1b9 0f00 	cmp.w	r9, #0
 8010230:	d144      	bne.n	80102bc <nk_scrollbar_behavior+0x110>
 8010232:	edd6 9a58 	vldr	s19, [r6, #352]	; 0x160
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8010236:	f1ba 0f00 	cmp.w	sl, #0
 801023a:	d07d      	beq.n	8010338 <nk_scrollbar_behavior+0x18c>
 801023c:	9b01      	ldr	r3, [sp, #4]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d07a      	beq.n	8010338 <nk_scrollbar_behavior+0x18c>
 8010242:	f1bb 0f00 	cmp.w	fp, #0
 8010246:	d177      	bne.n	8010338 <nk_scrollbar_behavior+0x18c>
        /* update cursor by mouse dragging */
        float pixel, delta;
        *state = NK_WIDGET_STATE_ACTIVE;
 8010248:	2322      	movs	r3, #34	; 0x22
 801024a:	602b      	str	r3, [r5, #0]
        if (o == NK_VERTICAL) {
 801024c:	f1b9 0f00 	cmp.w	r9, #0
 8010250:	d13a      	bne.n	80102c8 <nk_scrollbar_behavior+0x11c>
            float cursor_y;
            pixel = in->mouse.delta.y;
            delta = (pixel / scroll->h) * target;
 8010252:	ed94 7a03 	vldr	s14, [r4, #12]
 8010256:	edd6 6a56 	vldr	s13, [r6, #344]	; 0x158
 801025a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801025e:	ee67 7a89 	vmul.f32	s15, s15, s18
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 8010262:	ee37 8a88 	vadd.f32	s16, s15, s16
 8010266:	ee79 7a47 	vsub.f32	s15, s18, s14
 801026a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801026e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010272:	bf4c      	ite	mi
 8010274:	eeb5 8ac0 	vcmpemi.f32	s16, #0.0
 8010278:	eef5 7ac0 	vcmpepl.f32	s15, #0.0
 801027c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010280:	bf4c      	ite	mi
 8010282:	2301      	movmi	r3, #1
 8010284:	2300      	movpl	r3, #0
 8010286:	b9e3      	cbnz	r3, 80102c2 <nk_scrollbar_behavior+0x116>
 8010288:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801028c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010290:	bf58      	it	pl
 8010292:	eeb0 8a67 	vmovpl.f32	s16, s15
            cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);
 8010296:	eec8 7a09 	vdiv.f32	s15, s16, s18
 801029a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801029e:	ed94 7a01 	vldr	s14, [r4, #4]
 80102a2:	ee77 7a87 	vadd.f32	s15, s15, s14
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;
 80102a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80102aa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80102ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80102b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102b6:	edc6 7a44 	vstr	s15, [r6, #272]	; 0x110
 80102ba:	e062      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 80102bc:	edd6 9a57 	vldr	s19, [r6, #348]	; 0x15c
 80102c0:	e7b9      	b.n	8010236 <nk_scrollbar_behavior+0x8a>
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 80102c2:	ed9f 8ab2 	vldr	s16, [pc, #712]	; 801058c <nk_scrollbar_behavior+0x3e0>
 80102c6:	e7e6      	b.n	8010296 <nk_scrollbar_behavior+0xea>
        } else {
            float cursor_x;
            pixel = in->mouse.delta.x;
            delta = (pixel / scroll->w) * target;
 80102c8:	ed94 7a02 	vldr	s14, [r4, #8]
 80102cc:	edd6 6a55 	vldr	s13, [r6, #340]	; 0x154
 80102d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102d4:	ee67 7a89 	vmul.f32	s15, s15, s18
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 80102d8:	ee37 8a88 	vadd.f32	s16, s15, s16
 80102dc:	ee79 7a47 	vsub.f32	s15, s18, s14
 80102e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80102e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e8:	bf4c      	ite	mi
 80102ea:	eeb5 8ac0 	vcmpemi.f32	s16, #0.0
 80102ee:	eef5 7ac0 	vcmpepl.f32	s15, #0.0
 80102f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f6:	bf4c      	ite	mi
 80102f8:	2301      	movmi	r3, #1
 80102fa:	2300      	movpl	r3, #0
 80102fc:	b9cb      	cbnz	r3, 8010332 <nk_scrollbar_behavior+0x186>
 80102fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010306:	bf58      	it	pl
 8010308:	eeb0 8a67 	vmovpl.f32	s16, s15
            cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);
 801030c:	eec8 7a09 	vdiv.f32	s15, s16, s18
 8010310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010314:	ed94 7a00 	vldr	s14, [r4]
 8010318:	ee77 7a87 	vadd.f32	s15, s15, s14
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;
 801031c:	ed97 7a02 	vldr	s14, [r7, #8]
 8010320:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010324:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010328:	ee77 7a87 	vadd.f32	s15, s15, s14
 801032c:	edc6 7a43 	vstr	s15, [r6, #268]	; 0x10c
 8010330:	e027      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 8010332:	ed9f 8a96 	vldr	s16, [pc, #600]	; 801058c <nk_scrollbar_behavior+0x3e0>
 8010336:	e7e9      	b.n	801030c <nk_scrollbar_behavior+0x160>
        }
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8010338:	211d      	movs	r1, #29
 801033a:	4630      	mov	r0, r6
 801033c:	f7fc fd7e 	bl	800ce3c <nk_input_is_key_pressed>
 8010340:	b3b8      	cbz	r0, 80103b2 <nk_scrollbar_behavior+0x206>
 8010342:	f1b9 0f00 	cmp.w	r9, #0
 8010346:	f040 80ed 	bne.w	8010524 <nk_scrollbar_behavior+0x378>
 801034a:	9b00      	ldr	r3, [sp, #0]
 801034c:	b97b      	cbnz	r3, 801036e <nk_scrollbar_behavior+0x1c2>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 801034e:	2200      	movs	r2, #0
 8010350:	4631      	mov	r1, r6
 8010352:	ed98 0a00 	vldr	s0, [r8]
 8010356:	edd8 0a01 	vldr	s1, [r8, #4]
 801035a:	ed98 1a02 	vldr	s2, [r8, #8]
 801035e:	edd8 1a03 	vldr	s3, [r8, #12]
 8010362:	a803      	add	r0, sp, #12
 8010364:	f7f9 f9a4 	bl	80096b0 <nk_button_behavior>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8010368:	2800      	cmp	r0, #0
 801036a:	f000 80f6 	beq.w	801055a <nk_scrollbar_behavior+0x3ae>
        /* scroll page up by click on empty space or shortcut */
        if (o == NK_VERTICAL)
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 801036e:	edd4 7a03 	vldr	s15, [r4, #12]
 8010372:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010376:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037e:	f340 80b1 	ble.w	80104e4 <nk_scrollbar_behavior+0x338>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
            /* update cursor to the end */
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 8010382:	682b      	ldr	r3, [r5, #0]
 8010384:	f013 0f10 	tst.w	r3, #16
 8010388:	f000 80b5 	beq.w	80104f6 <nk_scrollbar_behavior+0x34a>
 801038c:	ed94 0a00 	vldr	s0, [r4]
 8010390:	edd4 0a01 	vldr	s1, [r4, #4]
 8010394:	ed94 1a02 	vldr	s2, [r4, #8]
 8010398:	edd4 1a03 	vldr	s3, [r4, #12]
 801039c:	4630      	mov	r0, r6
 801039e:	f7fc fd05 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	f040 80a7 	bne.w	80104f6 <nk_scrollbar_behavior+0x34a>
        *state |= NK_WIDGET_STATE_ENTERED;
 80103a8:	682b      	ldr	r3, [r5, #0]
 80103aa:	f043 0308 	orr.w	r3, r3, #8
 80103ae:	602b      	str	r3, [r5, #0]
 80103b0:	e0b1      	b.n	8010516 <nk_scrollbar_behavior+0x36a>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 80103b2:	2200      	movs	r2, #0
 80103b4:	4631      	mov	r1, r6
 80103b6:	ed98 0a00 	vldr	s0, [r8]
 80103ba:	edd8 0a01 	vldr	s1, [r8, #4]
 80103be:	ed98 1a02 	vldr	s2, [r8, #8]
 80103c2:	edd8 1a03 	vldr	s3, [r8, #12]
 80103c6:	a803      	add	r0, sp, #12
 80103c8:	f7f9 f972 	bl	80096b0 <nk_button_behavior>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 80103cc:	b120      	cbz	r0, 80103d8 <nk_scrollbar_behavior+0x22c>
        if (o == NK_VERTICAL)
 80103ce:	f1b9 0f00 	cmp.w	r9, #0
 80103d2:	f040 80b5 	bne.w	8010540 <nk_scrollbar_behavior+0x394>
 80103d6:	e7ca      	b.n	801036e <nk_scrollbar_behavior+0x1c2>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 80103d8:	211c      	movs	r1, #28
 80103da:	4630      	mov	r0, r6
 80103dc:	f7fc fd2e 	bl	800ce3c <nk_input_is_key_pressed>
 80103e0:	b1a8      	cbz	r0, 801040e <nk_scrollbar_behavior+0x262>
 80103e2:	f1b9 0f00 	cmp.w	r9, #0
 80103e6:	f040 80da 	bne.w	801059e <nk_scrollbar_behavior+0x3f2>
 80103ea:	9b00      	ldr	r3, [sp, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 80bb 	beq.w	8010568 <nk_scrollbar_behavior+0x3bc>
            scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);
 80103f2:	edd4 7a03 	vldr	s15, [r4, #12]
 80103f6:	ee37 8a88 	vadd.f32	s16, s15, s16
 80103fa:	ee79 7a67 	vsub.f32	s15, s18, s15
 80103fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010406:	bf58      	it	pl
 8010408:	eeb0 8a67 	vmovpl.f32	s16, s15
 801040c:	e7b9      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 801040e:	2200      	movs	r2, #0
 8010410:	4631      	mov	r1, r6
 8010412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010414:	ed93 0a00 	vldr	s0, [r3]
 8010418:	edd3 0a01 	vldr	s1, [r3, #4]
 801041c:	ed93 1a02 	vldr	s2, [r3, #8]
 8010420:	edd3 1a03 	vldr	s3, [r3, #12]
 8010424:	a803      	add	r0, sp, #12
 8010426:	f7f9 f943 	bl	80096b0 <nk_button_behavior>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 801042a:	2800      	cmp	r0, #0
 801042c:	f000 80c8 	beq.w	80105c0 <nk_scrollbar_behavior+0x414>
        if (o == NK_VERTICAL)
 8010430:	f1b9 0f00 	cmp.w	r9, #0
 8010434:	d0dd      	beq.n	80103f2 <nk_scrollbar_behavior+0x246>
        else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);
 8010436:	edd4 7a02 	vldr	s15, [r4, #8]
 801043a:	ee37 8a88 	vadd.f32	s16, s15, s16
 801043e:	ee79 7a67 	vsub.f32	s15, s18, s15
 8010442:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044a:	bf58      	it	pl
 801044c:	eeb0 8a67 	vmovpl.f32	s16, s15
 8010450:	e797      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 8010452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045a:	d446      	bmi.n	80104ea <nk_scrollbar_behavior+0x33e>
 801045c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8010460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010464:	bfd8      	it	le
 8010466:	eeb0 8a67 	vmovle.f32	s16, s15
 801046a:	e78a      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 801046c:	edd4 7a02 	vldr	s15, [r4, #8]
 8010470:	ee79 7a67 	vsub.f32	s15, s18, s15
 8010474:	eef4 7ac8 	vcmpe.f32	s15, s16
 8010478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047c:	dd08      	ble.n	8010490 <nk_scrollbar_behavior+0x2e4>
 801047e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	f57f af7c 	bpl.w	8010382 <nk_scrollbar_behavior+0x1d6>
 801048a:	ed9f 8a40 	vldr	s16, [pc, #256]	; 801058c <nk_scrollbar_behavior+0x3e0>
 801048e:	e778      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
 8010490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010498:	d42a      	bmi.n	80104f0 <nk_scrollbar_behavior+0x344>
 801049a:	eef4 7ac8 	vcmpe.f32	s15, s16
 801049e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a2:	bfd8      	it	le
 80104a4:	eeb0 8a67 	vmovle.f32	s16, s15
 80104a8:	e76b      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {
 80104aa:	211a      	movs	r1, #26
 80104ac:	4630      	mov	r0, r6
 80104ae:	f7fc fcc5 	bl	800ce3c <nk_input_is_key_pressed>
 80104b2:	b138      	cbz	r0, 80104c4 <nk_scrollbar_behavior+0x318>
            if (o == NK_VERTICAL) scroll_offset = 0;
 80104b4:	f1b9 0f00 	cmp.w	r9, #0
 80104b8:	eddf 7a34 	vldr	s15, [pc, #208]	; 801058c <nk_scrollbar_behavior+0x3e0>
 80104bc:	bf08      	it	eq
 80104be:	eeb0 8a67 	vmoveq.f32	s16, s15
 80104c2:	e75e      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
 80104c4:	211b      	movs	r1, #27
 80104c6:	4630      	mov	r0, r6
 80104c8:	f7fc fcb8 	bl	800ce3c <nk_input_is_key_pressed>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	f43f af58 	beq.w	8010382 <nk_scrollbar_behavior+0x1d6>
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
 80104d2:	f1b9 0f00 	cmp.w	r9, #0
 80104d6:	f47f af54 	bne.w	8010382 <nk_scrollbar_behavior+0x1d6>
 80104da:	ed94 8a03 	vldr	s16, [r4, #12]
 80104de:	ee39 8a48 	vsub.f32	s16, s18, s16
 80104e2:	e74e      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 80104e4:	ed9f 8a29 	vldr	s16, [pc, #164]	; 801058c <nk_scrollbar_behavior+0x3e0>
 80104e8:	e74b      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 80104ea:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801058c <nk_scrollbar_behavior+0x3e0>
 80104ee:	e748      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 80104f0:	ed9f 8a26 	vldr	s16, [pc, #152]	; 801058c <nk_scrollbar_behavior+0x3e0>
 80104f4:	e745      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
    else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 80104f6:	ed94 0a00 	vldr	s0, [r4]
 80104fa:	edd4 0a01 	vldr	s1, [r4, #4]
 80104fe:	ed94 1a02 	vldr	s2, [r4, #8]
 8010502:	edd4 1a03 	vldr	s3, [r4, #12]
 8010506:	4630      	mov	r0, r6
 8010508:	f7fc fc50 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 801050c:	b118      	cbz	r0, 8010516 <nk_scrollbar_behavior+0x36a>
        *state |= NK_WIDGET_STATE_LEFT;
 801050e:	682b      	ldr	r3, [r5, #0]
 8010510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010514:	602b      	str	r3, [r5, #0]
    return scroll_offset;
}
 8010516:	eeb0 0a48 	vmov.f32	s0, s16
 801051a:	b005      	add	sp, #20
 801051c:	ecbd 8b04 	vpop	{d8-d9}
 8010520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 8010524:	2200      	movs	r2, #0
 8010526:	4631      	mov	r1, r6
 8010528:	ed98 0a00 	vldr	s0, [r8]
 801052c:	edd8 0a01 	vldr	s1, [r8, #4]
 8010530:	ed98 1a02 	vldr	s2, [r8, #8]
 8010534:	edd8 1a03 	vldr	s3, [r8, #12]
 8010538:	a803      	add	r0, sp, #12
 801053a:	f7f9 f8b9 	bl	80096b0 <nk_button_behavior>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 801053e:	b338      	cbz	r0, 8010590 <nk_scrollbar_behavior+0x3e4>
        else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);
 8010540:	edd4 7a02 	vldr	s15, [r4, #8]
 8010544:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010548:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801054c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010550:	f73f af17 	bgt.w	8010382 <nk_scrollbar_behavior+0x1d6>
 8010554:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 801058c <nk_scrollbar_behavior+0x3e0>
 8010558:	e713      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 801055a:	211c      	movs	r1, #28
 801055c:	4630      	mov	r0, r6
 801055e:	f7fc fc6d 	bl	800ce3c <nk_input_is_key_pressed>
 8010562:	2800      	cmp	r0, #0
 8010564:	f43f af53 	beq.w	801040e <nk_scrollbar_behavior+0x262>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 8010568:	2200      	movs	r2, #0
 801056a:	4631      	mov	r1, r6
 801056c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801056e:	ed93 0a00 	vldr	s0, [r3]
 8010572:	edd3 0a01 	vldr	s1, [r3, #4]
 8010576:	ed93 1a02 	vldr	s2, [r3, #8]
 801057a:	edd3 1a03 	vldr	s3, [r3, #12]
 801057e:	a803      	add	r0, sp, #12
 8010580:	f7f9 f896 	bl	80096b0 <nk_button_behavior>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 8010584:	2800      	cmp	r0, #0
 8010586:	f47f af34 	bne.w	80103f2 <nk_scrollbar_behavior+0x246>
 801058a:	e6fa      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>
 801058c:	00000000 	.word	0x00000000
 8010590:	211c      	movs	r1, #28
 8010592:	4630      	mov	r0, r6
 8010594:	f7fc fc52 	bl	800ce3c <nk_input_is_key_pressed>
 8010598:	2800      	cmp	r0, #0
 801059a:	f43f af38 	beq.w	801040e <nk_scrollbar_behavior+0x262>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 801059e:	2200      	movs	r2, #0
 80105a0:	4631      	mov	r1, r6
 80105a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80105a4:	ed93 0a00 	vldr	s0, [r3]
 80105a8:	edd3 0a01 	vldr	s1, [r3, #4]
 80105ac:	ed93 1a02 	vldr	s2, [r3, #8]
 80105b0:	edd3 1a03 	vldr	s3, [r3, #12]
 80105b4:	a803      	add	r0, sp, #12
 80105b6:	f7f9 f87b 	bl	80096b0 <nk_button_behavior>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 80105ba:	2800      	cmp	r0, #0
 80105bc:	f47f af3b 	bne.w	8010436 <nk_scrollbar_behavior+0x28a>
    } else if (has_scrolling) {
 80105c0:	9b00      	ldr	r3, [sp, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f43f aedd 	beq.w	8010382 <nk_scrollbar_behavior+0x1d6>
        if ((scroll_delta < 0 || (scroll_delta > 0))) {
 80105c8:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 80105cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d0:	d401      	bmi.n	80105d6 <nk_scrollbar_behavior+0x42a>
 80105d2:	f77f af6a 	ble.w	80104aa <nk_scrollbar_behavior+0x2fe>
            scroll_offset = scroll_offset + scroll_step * (-scroll_delta);
 80105d6:	ee69 9ae8 	vnmul.f32	s19, s19, s17
 80105da:	ee39 8a88 	vadd.f32	s16, s19, s16
            if (o == NK_VERTICAL)
 80105de:	f1b9 0f00 	cmp.w	r9, #0
 80105e2:	f47f af43 	bne.w	801046c <nk_scrollbar_behavior+0x2c0>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 80105e6:	edd4 7a03 	vldr	s15, [r4, #12]
 80105ea:	ee79 7a67 	vsub.f32	s15, s18, s15
 80105ee:	eef4 7ac8 	vcmpe.f32	s15, s16
 80105f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f6:	f77f af2c 	ble.w	8010452 <nk_scrollbar_behavior+0x2a6>
 80105fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80105fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010602:	f57f aebe 	bpl.w	8010382 <nk_scrollbar_behavior+0x1d6>
 8010606:	ed1f 8a1f 	vldr	s16, [pc, #-124]	; 801058c <nk_scrollbar_behavior+0x3e0>
 801060a:	e6ba      	b.n	8010382 <nk_scrollbar_behavior+0x1d6>

0801060c <nk_draw_scrollbar>:
NK_LIB void
nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_scrollbar *style, const struct nk_rect *bounds,
    const struct nk_rect *scroll)
{
 801060c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010610:	4606      	mov	r6, r0
 8010612:	4614      	mov	r4, r2
 8010614:	461d      	mov	r5, r3
 8010616:	9f06      	ldr	r7, [sp, #24]
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;

    /* select correct colors/images to draw */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 8010618:	f011 0f20 	tst.w	r1, #32
 801061c:	d013      	beq.n	8010646 <nk_draw_scrollbar+0x3a>
        background = &style->active;
 801061e:	f102 0138 	add.w	r1, r2, #56	; 0x38
        cursor = &style->cursor_active;
 8010622:	f102 0890 	add.w	r8, r2, #144	; 0x90
        background = &style->normal;
        cursor = &style->cursor_normal;
    }

    /* draw background */
    switch (background->type) {
 8010626:	780b      	ldrb	r3, [r1, #0]
 8010628:	2b01      	cmp	r3, #1
 801062a:	d017      	beq.n	801065c <nk_draw_scrollbar+0x50>
 801062c:	2b02      	cmp	r3, #2
 801062e:	d024      	beq.n	801067a <nk_draw_scrollbar+0x6e>
 8010630:	b393      	cbz	r3, 8010698 <nk_draw_scrollbar+0x8c>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
            break;
    }

    /* draw cursor */
    switch (cursor->type) {
 8010632:	f898 3000 	ldrb.w	r3, [r8]
 8010636:	2b01      	cmp	r3, #1
 8010638:	d04d      	beq.n	80106d6 <nk_draw_scrollbar+0xca>
 801063a:	2b02      	cmp	r3, #2
 801063c:	d05b      	beq.n	80106f6 <nk_draw_scrollbar+0xea>
 801063e:	2b00      	cmp	r3, #0
 8010640:	d069      	beq.n	8010716 <nk_draw_scrollbar+0x10a>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
            break;
    }
}
 8010642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (state & NK_WIDGET_STATE_HOVER) {
 8010646:	f011 0f10 	tst.w	r1, #16
        background = &style->hover;
 801064a:	bf19      	ittee	ne
 801064c:	f102 011c 	addne.w	r1, r2, #28
        cursor = &style->cursor_hover;
 8010650:	f102 0874 	addne.w	r8, r2, #116	; 0x74
        background = &style->normal;
 8010654:	4611      	moveq	r1, r2
        cursor = &style->cursor_normal;
 8010656:	f102 0858 	addeq.w	r8, r2, #88	; 0x58
 801065a:	e7e4      	b.n	8010626 <nk_draw_scrollbar+0x1a>
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 801065c:	4b3e      	ldr	r3, [pc, #248]	; (8010758 <nk_draw_scrollbar+0x14c>)
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	3104      	adds	r1, #4
 8010662:	ed95 0a00 	vldr	s0, [r5]
 8010666:	edd5 0a01 	vldr	s1, [r5, #4]
 801066a:	ed95 1a02 	vldr	s2, [r5, #8]
 801066e:	edd5 1a03 	vldr	s3, [r5, #12]
 8010672:	4630      	mov	r0, r6
 8010674:	f7fa feaa 	bl	800b3cc <nk_draw_image>
            break;
 8010678:	e7db      	b.n	8010632 <nk_draw_scrollbar+0x26>
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801067a:	4b37      	ldr	r3, [pc, #220]	; (8010758 <nk_draw_scrollbar+0x14c>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	3104      	adds	r1, #4
 8010680:	ed95 0a00 	vldr	s0, [r5]
 8010684:	edd5 0a01 	vldr	s1, [r5, #4]
 8010688:	ed95 1a02 	vldr	s2, [r5, #8]
 801068c:	edd5 1a03 	vldr	s3, [r5, #12]
 8010690:	4630      	mov	r0, r6
 8010692:	f7fa ff1f 	bl	800b4d4 <nk_draw_nine_slice>
            break;
 8010696:	e7cc      	b.n	8010632 <nk_draw_scrollbar+0x26>
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 8010698:	6849      	ldr	r1, [r1, #4]
 801069a:	ed94 2a2d 	vldr	s4, [r4, #180]	; 0xb4
 801069e:	ed95 0a00 	vldr	s0, [r5]
 80106a2:	edd5 0a01 	vldr	s1, [r5, #4]
 80106a6:	ed95 1a02 	vldr	s2, [r5, #8]
 80106aa:	edd5 1a03 	vldr	s3, [r5, #12]
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7fa fcd2 	bl	800b058 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 80106b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80106b6:	edd4 2a2c 	vldr	s5, [r4, #176]	; 0xb0
 80106ba:	ed94 2a2d 	vldr	s4, [r4, #180]	; 0xb4
 80106be:	ed95 0a00 	vldr	s0, [r5]
 80106c2:	edd5 0a01 	vldr	s1, [r5, #4]
 80106c6:	ed95 1a02 	vldr	s2, [r5, #8]
 80106ca:	edd5 1a03 	vldr	s3, [r5, #12]
 80106ce:	4630      	mov	r0, r6
 80106d0:	f7fa fc30 	bl	800af34 <nk_stroke_rect>
            break;
 80106d4:	e7ad      	b.n	8010632 <nk_draw_scrollbar+0x26>
            nk_draw_image(out, *scroll, &cursor->data.image, nk_white);
 80106d6:	4b20      	ldr	r3, [pc, #128]	; (8010758 <nk_draw_scrollbar+0x14c>)
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	f108 0104 	add.w	r1, r8, #4
 80106de:	ed97 0a00 	vldr	s0, [r7]
 80106e2:	edd7 0a01 	vldr	s1, [r7, #4]
 80106e6:	ed97 1a02 	vldr	s2, [r7, #8]
 80106ea:	edd7 1a03 	vldr	s3, [r7, #12]
 80106ee:	4630      	mov	r0, r6
 80106f0:	f7fa fe6c 	bl	800b3cc <nk_draw_image>
            break;
 80106f4:	e7a5      	b.n	8010642 <nk_draw_scrollbar+0x36>
            nk_draw_nine_slice(out, *scroll, &cursor->data.slice, nk_white);
 80106f6:	4b18      	ldr	r3, [pc, #96]	; (8010758 <nk_draw_scrollbar+0x14c>)
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	f108 0104 	add.w	r1, r8, #4
 80106fe:	ed97 0a00 	vldr	s0, [r7]
 8010702:	edd7 0a01 	vldr	s1, [r7, #4]
 8010706:	ed97 1a02 	vldr	s2, [r7, #8]
 801070a:	edd7 1a03 	vldr	s3, [r7, #12]
 801070e:	4630      	mov	r0, r6
 8010710:	f7fa fee0 	bl	800b4d4 <nk_draw_nine_slice>
            break;
 8010714:	e795      	b.n	8010642 <nk_draw_scrollbar+0x36>
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
 8010716:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801071a:	ed94 2a2f 	vldr	s4, [r4, #188]	; 0xbc
 801071e:	ed97 0a00 	vldr	s0, [r7]
 8010722:	edd7 0a01 	vldr	s1, [r7, #4]
 8010726:	ed97 1a02 	vldr	s2, [r7, #8]
 801072a:	edd7 1a03 	vldr	s3, [r7, #12]
 801072e:	4630      	mov	r0, r6
 8010730:	f7fa fc92 	bl	800b058 <nk_fill_rect>
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
 8010734:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8010738:	edd4 2a2e 	vldr	s5, [r4, #184]	; 0xb8
 801073c:	ed94 2a2f 	vldr	s4, [r4, #188]	; 0xbc
 8010740:	ed97 0a00 	vldr	s0, [r7]
 8010744:	edd7 0a01 	vldr	s1, [r7, #4]
 8010748:	ed97 1a02 	vldr	s2, [r7, #8]
 801074c:	edd7 1a03 	vldr	s3, [r7, #12]
 8010750:	4630      	mov	r0, r6
 8010752:	f7fa fbef 	bl	800af34 <nk_stroke_rect>
}
 8010756:	e774      	b.n	8010642 <nk_draw_scrollbar+0x36>
 8010758:	0801b6c4 	.word	0x0801b6c4

0801075c <nk_do_scrollbarv>:
nk_do_scrollbarv(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 801075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010760:	ed2d 8b06 	vpush	{d8-d10}
 8010764:	b09a      	sub	sp, #104	; 0x68
 8010766:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8010768:	ed8d 0a04 	vstr	s0, [sp, #16]
 801076c:	edcd 0a05 	vstr	s1, [sp, #20]
 8010770:	ed8d 1a06 	vstr	s2, [sp, #24]
 8010774:	edcd 1a07 	vstr	s3, [sp, #28]
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 8010778:	2900      	cmp	r1, #0
 801077a:	f000 8149 	beq.w	8010a10 <nk_do_scrollbarv+0x2b4>
 801077e:	4605      	mov	r5, r0
 8010780:	4617      	mov	r7, r2
 8010782:	eeb0 9a42 	vmov.f32	s18, s4
 8010786:	eeb0 8a62 	vmov.f32	s16, s5
 801078a:	eef0 9a43 	vmov.f32	s19, s6
 801078e:	eef0 aa63 	vmov.f32	s21, s7
 8010792:	461c      	mov	r4, r3
 8010794:	4688      	mov	r8, r1
    NK_ASSERT(style);
 8010796:	2b00      	cmp	r3, #0
 8010798:	f000 8140 	beq.w	8010a1c <nk_do_scrollbarv+0x2c0>
    NK_ASSERT(state);
 801079c:	2800      	cmp	r0, #0
 801079e:	f000 8143 	beq.w	8010a28 <nk_do_scrollbarv+0x2cc>
    if (!out || !style) return 0;

    scroll.w = NK_MAX(scroll.w, 1);
 80107a2:	eddd 8a06 	vldr	s17, [sp, #24]
 80107a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80107aa:	eef4 8a67 	vcmp.f32	s17, s15
 80107ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b2:	bf48      	it	mi
 80107b4:	eef0 8a67 	vmovmi.f32	s17, s15
 80107b8:	edcd 8a06 	vstr	s17, [sp, #24]
    scroll.h = NK_MAX(scroll.h, 0);
 80107bc:	eddd 7a07 	vldr	s15, [sp, #28]
 80107c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c8:	bf48      	it	mi
 80107ca:	eddf 7aa4 	vldrmi	s15, [pc, #656]	; 8010a5c <nk_do_scrollbarv+0x300>
 80107ce:	edcd 7a07 	vstr	s15, [sp, #28]
    if (target <= scroll.h) return 0;
 80107d2:	eef4 7ae2 	vcmpe.f32	s15, s5
 80107d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107da:	f280 813b 	bge.w	8010a54 <nk_do_scrollbarv+0x2f8>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 80107de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d054      	beq.n	8010890 <nk_do_scrollbarv+0x134>
        nk_flags ws;
        float scroll_h;
        struct nk_rect button;

        button.x = scroll.x;
 80107e6:	9b04      	ldr	r3, [sp, #16]
 80107e8:	930a      	str	r3, [sp, #40]	; 0x28
        button.w = scroll.w;
 80107ea:	edcd 8a0c 	vstr	s17, [sp, #48]	; 0x30
        button.h = scroll.w;

        scroll_h = NK_MAX(scroll.h - 2 * button.h,0);
 80107ee:	ee38 7aa8 	vadd.f32	s14, s17, s17
 80107f2:	ee37 aac7 	vsub.f32	s20, s15, s14
 80107f6:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80107fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107fe:	bf48      	it	mi
 8010800:	ed9f aa96 	vldrmi	s20, [pc, #600]	; 8010a5c <nk_do_scrollbarv+0x300>
        scroll_step = NK_MIN(step, button_pixel_inc);
 8010804:	eeb4 3a63 	vcmp.f32	s6, s7
 8010808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080c:	bf48      	it	mi
 801080e:	eef0 aa43 	vmovmi.f32	s21, s6

        /* decrement button */
        button.y = scroll.y;
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 8010812:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8010816:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010818:	9302      	str	r3, [sp, #8]
 801081a:	9601      	str	r6, [sp, #4]
 801081c:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8010820:	9300      	str	r3, [sp, #0]
 8010822:	2301      	movs	r3, #1
 8010824:	f894 21fd 	ldrb.w	r2, [r4, #509]	; 0x1fd
 8010828:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 801082c:	eddd 0a05 	vldr	s1, [sp, #20]
 8010830:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 8010834:	eef0 1a68 	vmov.f32	s3, s17
 8010838:	a809      	add	r0, sp, #36	; 0x24
 801083a:	f7f9 f965 	bl	8009b08 <nk_do_button_symbol>
 801083e:	b108      	cbz	r0, 8010844 <nk_do_scrollbarv+0xe8>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 8010840:	ee39 9a6a 	vsub.f32	s18, s18, s21

        /* increment button */
        button.y = scroll.y + scroll.h - button.h;
 8010844:	eddd 0a05 	vldr	s1, [sp, #20]
 8010848:	eddd 7a07 	vldr	s15, [sp, #28]
 801084c:	ee70 0aa7 	vadd.f32	s1, s1, s15
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8010850:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010852:	9302      	str	r3, [sp, #8]
 8010854:	9601      	str	r6, [sp, #4]
 8010856:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	2301      	movs	r3, #1
 801085e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8010862:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8010866:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801086a:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 801086e:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
 8010872:	4641      	mov	r1, r8
 8010874:	a809      	add	r0, sp, #36	; 0x24
 8010876:	f7f9 f947 	bl	8009b08 <nk_do_button_symbol>
 801087a:	b108      	cbz	r0, 8010880 <nk_do_scrollbarv+0x124>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 801087c:	ee39 9a2a 	vadd.f32	s18, s18, s21

        scroll.y = scroll.y + button.h;
 8010880:	eddd 7a05 	vldr	s15, [sp, #20]
 8010884:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8010888:	edcd 7a05 	vstr	s15, [sp, #20]
        scroll.h = scroll_h;
 801088c:	ed8d aa07 	vstr	s20, [sp, #28]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.h);
 8010890:	ed9d 7a07 	vldr	s14, [sp, #28]
 8010894:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8010898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089c:	bfd8      	it	le
 801089e:	eef0 9a47 	vmovle.f32	s19, s14
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 80108a2:	ee78 7a47 	vsub.f32	s15, s16, s14
 80108a6:	eef4 7ac9 	vcmpe.f32	s15, s18
 80108aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ae:	f340 80c1 	ble.w	8010a34 <nk_do_scrollbarv+0x2d8>
 80108b2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80108b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ba:	d501      	bpl.n	80108c0 <nk_do_scrollbarv+0x164>
 80108bc:	ed9f 9a67 	vldr	s18, [pc, #412]	; 8010a5c <nk_do_scrollbarv+0x300>
    scroll_ratio = scroll.h / target;
    scroll_off = scroll_offset / target;
 80108c0:	eec9 7a08 	vdiv.f32	s15, s18, s16

    /* calculate scrollbar cursor bounds */
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 80108c4:	edd4 6a2c 	vldr	s13, [r4, #176]	; 0xb0
 80108c8:	ee76 3aa6 	vadd.f32	s7, s13, s13
 80108cc:	edd4 5a31 	vldr	s11, [r4, #196]	; 0xc4
    scroll_ratio = scroll.h / target;
 80108d0:	ee87 6a08 	vdiv.f32	s12, s14, s16
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 80108d4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80108d8:	ee35 5aa5 	vadd.f32	s10, s11, s11
 80108dc:	ee35 5a23 	vadd.f32	s10, s10, s7
 80108e0:	ee36 6a45 	vsub.f32	s12, s12, s10
 80108e4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80108e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ec:	bf48      	it	mi
 80108ee:	ed9f 6a5b 	vldrmi	s12, [pc, #364]	; 8010a5c <nk_do_scrollbarv+0x300>
 80108f2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;
 80108f6:	ed9d 5a05 	vldr	s10, [sp, #20]
 80108fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108fe:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010906:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801090a:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
    cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);
 801090e:	eddd 4a06 	vldr	s9, [sp, #24]
 8010912:	ed94 4a30 	vldr	s8, [r4, #192]	; 0xc0
 8010916:	ee74 5a04 	vadd.f32	s11, s8, s8
 801091a:	ee75 5aa3 	vadd.f32	s11, s11, s7
 801091e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8010922:	edcd 5a10 	vstr	s11, [sp, #64]	; 0x40
    cursor.x = scroll.x + style->border + style->padding.x;
 8010926:	eddd 5a04 	vldr	s11, [sp, #16]
 801092a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801092e:	ee76 6a84 	vadd.f32	s13, s13, s8
 8010932:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38

    /* calculate empty space around cursor */
    empty_north.x = scroll.x;
 8010936:	edcd 5a16 	vstr	s11, [sp, #88]	; 0x58
    empty_north.y = scroll.y;
 801093a:	ed8d 5a17 	vstr	s10, [sp, #92]	; 0x5c
    empty_north.w = scroll.w;
 801093e:	edcd 4a18 	vstr	s9, [sp, #96]	; 0x60
    empty_north.h = NK_MAX(cursor.y - scroll.y, 0);
 8010942:	ee77 6ac5 	vsub.f32	s13, s15, s10
 8010946:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094e:	bf48      	it	mi
 8010950:	eddf 6a42 	vldrmi	s13, [pc, #264]	; 8010a5c <nk_do_scrollbarv+0x300>
 8010954:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64

    empty_south.x = scroll.x;
 8010958:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
    empty_south.y = cursor.y + cursor.h;
 801095c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010960:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
    empty_south.w = scroll.w;
 8010964:	edcd 4a14 	vstr	s9, [sp, #80]	; 0x50
    empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);
 8010968:	ee37 7a05 	vadd.f32	s14, s14, s10
 801096c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010970:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010978:	bf48      	it	mi
 801097a:	ed9f 7a38 	vldrmi	s14, [pc, #224]	; 8010a5c <nk_do_scrollbarv+0x300>
 801097e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8010982:	2300      	movs	r3, #0
 8010984:	9303      	str	r3, [sp, #12]
 8010986:	ab12      	add	r3, sp, #72	; 0x48
 8010988:	9302      	str	r3, [sp, #8]
 801098a:	ab16      	add	r3, sp, #88	; 0x58
 801098c:	9301      	str	r3, [sp, #4]
 801098e:	ab0e      	add	r3, sp, #56	; 0x38
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	eeb0 1a69 	vmov.f32	s2, s19
 8010996:	eef0 0a48 	vmov.f32	s1, s16
 801099a:	eeb0 0a49 	vmov.f32	s0, s18
 801099e:	ab04      	add	r3, sp, #16
 80109a0:	463a      	mov	r2, r7
 80109a2:	4631      	mov	r1, r6
 80109a4:	4628      	mov	r0, r5
 80109a6:	f7ff fc01 	bl	80101ac <nk_scrollbar_behavior>
 80109aa:	eef0 8a40 	vmov.f32	s17, s0
        &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);
    scroll_off = scroll_offset / target;
 80109ae:	eec0 7a08 	vdiv.f32	s15, s0, s16
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;
 80109b2:	ed9d 7a07 	vldr	s14, [sp, #28]
 80109b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80109ba:	ed9d 7a05 	vldr	s14, [sp, #20]
 80109be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109c2:	ed94 7a2e 	vldr	s14, [r4, #184]	; 0xb8
 80109c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109ca:	ed94 7a31 	vldr	s14, [r4, #196]	; 0xc4
 80109ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109d2:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 80109d6:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80109da:	b11b      	cbz	r3, 80109e4 <nk_do_scrollbarv+0x288>
 80109dc:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 80109e0:	4640      	mov	r0, r8
 80109e2:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 80109e4:	ab0e      	add	r3, sp, #56	; 0x38
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	ab04      	add	r3, sp, #16
 80109ea:	4622      	mov	r2, r4
 80109ec:	6829      	ldr	r1, [r5, #0]
 80109ee:	4640      	mov	r0, r8
 80109f0:	f7ff fe0c 	bl	801060c <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 80109f4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80109f8:	b11b      	cbz	r3, 8010a02 <nk_do_scrollbarv+0x2a6>
 80109fa:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 80109fe:	4640      	mov	r0, r8
 8010a00:	4798      	blx	r3
    return scroll_offset;
}
 8010a02:	eeb0 0a68 	vmov.f32	s0, s17
 8010a06:	b01a      	add	sp, #104	; 0x68
 8010a08:	ecbd 8b06 	vpop	{d8-d10}
 8010a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(out);
 8010a10:	4b13      	ldr	r3, [pc, #76]	; (8010a60 <nk_do_scrollbarv+0x304>)
 8010a12:	4a14      	ldr	r2, [pc, #80]	; (8010a64 <nk_do_scrollbarv+0x308>)
 8010a14:	2195      	movs	r1, #149	; 0x95
 8010a16:	4814      	ldr	r0, [pc, #80]	; (8010a68 <nk_do_scrollbarv+0x30c>)
 8010a18:	f005 fd98 	bl	801654c <__assert_func>
    NK_ASSERT(style);
 8010a1c:	4b13      	ldr	r3, [pc, #76]	; (8010a6c <nk_do_scrollbarv+0x310>)
 8010a1e:	4a11      	ldr	r2, [pc, #68]	; (8010a64 <nk_do_scrollbarv+0x308>)
 8010a20:	2196      	movs	r1, #150	; 0x96
 8010a22:	4811      	ldr	r0, [pc, #68]	; (8010a68 <nk_do_scrollbarv+0x30c>)
 8010a24:	f005 fd92 	bl	801654c <__assert_func>
    NK_ASSERT(state);
 8010a28:	4b11      	ldr	r3, [pc, #68]	; (8010a70 <nk_do_scrollbarv+0x314>)
 8010a2a:	4a0e      	ldr	r2, [pc, #56]	; (8010a64 <nk_do_scrollbarv+0x308>)
 8010a2c:	2197      	movs	r1, #151	; 0x97
 8010a2e:	480e      	ldr	r0, [pc, #56]	; (8010a68 <nk_do_scrollbarv+0x30c>)
 8010a30:	f005 fd8c 	bl	801654c <__assert_func>
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 8010a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3c:	d407      	bmi.n	8010a4e <nk_do_scrollbarv+0x2f2>
 8010a3e:	eef4 7ac9 	vcmpe.f32	s15, s18
 8010a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a46:	bfd8      	it	le
 8010a48:	eeb0 9a67 	vmovle.f32	s18, s15
 8010a4c:	e738      	b.n	80108c0 <nk_do_scrollbarv+0x164>
 8010a4e:	ed9f 9a03 	vldr	s18, [pc, #12]	; 8010a5c <nk_do_scrollbarv+0x300>
 8010a52:	e735      	b.n	80108c0 <nk_do_scrollbarv+0x164>
    if (target <= scroll.h) return 0;
 8010a54:	eddf 8a01 	vldr	s17, [pc, #4]	; 8010a5c <nk_do_scrollbarv+0x300>
 8010a58:	e7d3      	b.n	8010a02 <nk_do_scrollbarv+0x2a6>
 8010a5a:	bf00      	nop
 8010a5c:	00000000 	.word	0x00000000
 8010a60:	0801ad44 	.word	0x0801ad44
 8010a64:	0801b6b0 	.word	0x0801b6b0
 8010a68:	0801b67c 	.word	0x0801b67c
 8010a6c:	0801ad18 	.word	0x0801ad18
 8010a70:	0801ad3c 	.word	0x0801ad3c

08010a74 <nk_do_scrollbarh>:
nk_do_scrollbarh(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 8010a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a78:	ed2d 8b06 	vpush	{d8-d10}
 8010a7c:	b09a      	sub	sp, #104	; 0x68
 8010a7e:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8010a80:	ed8d 0a04 	vstr	s0, [sp, #16]
 8010a84:	edcd 0a05 	vstr	s1, [sp, #20]
 8010a88:	ed8d 1a06 	vstr	s2, [sp, #24]
 8010a8c:	edcd 1a07 	vstr	s3, [sp, #28]
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 8010a90:	2900      	cmp	r1, #0
 8010a92:	f000 8122 	beq.w	8010cda <nk_do_scrollbarh+0x266>
 8010a96:	4605      	mov	r5, r0
 8010a98:	4617      	mov	r7, r2
 8010a9a:	eef0 9a42 	vmov.f32	s19, s4
 8010a9e:	eef0 8a62 	vmov.f32	s17, s5
 8010aa2:	eeb0 aa43 	vmov.f32	s20, s6
 8010aa6:	eef0 aa63 	vmov.f32	s21, s7
 8010aaa:	461c      	mov	r4, r3
 8010aac:	4688      	mov	r8, r1
    NK_ASSERT(style);
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	f000 8119 	beq.w	8010ce6 <nk_do_scrollbarh+0x272>
    if (!out || !style) return 0;

    /* scrollbar background */
    scroll.h = NK_MAX(scroll.h, 1);
 8010ab4:	ed9d 8a07 	vldr	s16, [sp, #28]
 8010ab8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010abc:	eeb4 8a67 	vcmp.f32	s16, s15
 8010ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac4:	bf48      	it	mi
 8010ac6:	eeb0 8a67 	vmovmi.f32	s16, s15
 8010aca:	ed8d 8a07 	vstr	s16, [sp, #28]
    scroll.w = NK_MAX(scroll.w, 2 * scroll.h);
 8010ace:	eddd 7a06 	vldr	s15, [sp, #24]
 8010ad2:	ee38 7a08 	vadd.f32	s14, s16, s16
 8010ad6:	eef4 7a47 	vcmp.f32	s15, s14
 8010ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ade:	bf48      	it	mi
 8010ae0:	eef0 7a47 	vmovmi.f32	s15, s14
 8010ae4:	edcd 7a06 	vstr	s15, [sp, #24]
    if (target <= scroll.w) return 0;
 8010ae8:	eef4 7ae2 	vcmpe.f32	s15, s5
 8010aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af0:	f280 810f 	bge.w	8010d12 <nk_do_scrollbarh+0x29e>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 8010af4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d04b      	beq.n	8010b94 <nk_do_scrollbarh+0x120>
        nk_flags ws;
        float scroll_w;
        struct nk_rect button;
        button.y = scroll.y;
 8010afc:	eddd 0a05 	vldr	s1, [sp, #20]
 8010b00:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c
        button.w = scroll.h;
        button.h = scroll.h;
 8010b04:	ed8d 8a0d 	vstr	s16, [sp, #52]	; 0x34

        scroll_w = scroll.w - 2 * button.w;
 8010b08:	ee37 9ac7 	vsub.f32	s18, s15, s14
        scroll_step = NK_MIN(step, button_pixel_inc);
 8010b0c:	eeb4 3a63 	vcmp.f32	s6, s7
 8010b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b14:	bf48      	it	mi
 8010b16:	eef0 aa43 	vmovmi.f32	s21, s6

        /* decrement button */
        button.x = scroll.x;
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 8010b1a:	ed8d 8a0c 	vstr	s16, [sp, #48]	; 0x30
 8010b1e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010b20:	9302      	str	r3, [sp, #8]
 8010b22:	9601      	str	r6, [sp, #4]
 8010b24:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	f894 21fd 	ldrb.w	r2, [r4, #509]	; 0x1fd
 8010b30:	ed9d 0a04 	vldr	s0, [sp, #16]
 8010b34:	eeb0 1a48 	vmov.f32	s2, s16
 8010b38:	eef0 1a48 	vmov.f32	s3, s16
 8010b3c:	a809      	add	r0, sp, #36	; 0x24
 8010b3e:	f7f8 ffe3 	bl	8009b08 <nk_do_button_symbol>
 8010b42:	b108      	cbz	r0, 8010b48 <nk_do_scrollbarh+0xd4>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 8010b44:	ee79 9aea 	vsub.f32	s19, s19, s21

        /* increment button */
        button.x = scroll.x + scroll.w - button.w;
 8010b48:	ed9d 0a04 	vldr	s0, [sp, #16]
 8010b4c:	eddd 7a06 	vldr	s15, [sp, #24]
 8010b50:	ee30 0a27 	vadd.f32	s0, s0, s15
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8010b54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010b56:	9302      	str	r3, [sp, #8]
 8010b58:	9601      	str	r6, [sp, #4]
 8010b5a:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	2301      	movs	r3, #1
 8010b62:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8010b66:	ee30 0a48 	vsub.f32	s0, s0, s16
 8010b6a:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8010b6e:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 8010b72:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
 8010b76:	4641      	mov	r1, r8
 8010b78:	a809      	add	r0, sp, #36	; 0x24
 8010b7a:	f7f8 ffc5 	bl	8009b08 <nk_do_button_symbol>
 8010b7e:	b108      	cbz	r0, 8010b84 <nk_do_scrollbarh+0x110>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 8010b80:	ee79 9aaa 	vadd.f32	s19, s19, s21

        scroll.x = scroll.x + button.w;
 8010b84:	eddd 7a04 	vldr	s15, [sp, #16]
 8010b88:	ee77 7a88 	vadd.f32	s15, s15, s16
 8010b8c:	edcd 7a04 	vstr	s15, [sp, #16]
        scroll.w = scroll_w;
 8010b90:	ed8d 9a06 	vstr	s18, [sp, #24]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.w);
 8010b94:	eddd 7a06 	vldr	s15, [sp, #24]
 8010b98:	eef4 7aca 	vcmpe.f32	s15, s20
 8010b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba0:	bfd8      	it	le
 8010ba2:	eeb0 aa67 	vmovle.f32	s20, s15
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 8010ba6:	ee38 7ae7 	vsub.f32	s14, s17, s15
 8010baa:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8010bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb2:	f340 809e 	ble.w	8010cf2 <nk_do_scrollbarh+0x27e>
 8010bb6:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8010bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bbe:	d501      	bpl.n	8010bc4 <nk_do_scrollbarh+0x150>
 8010bc0:	eddf 9a55 	vldr	s19, [pc, #340]	; 8010d18 <nk_do_scrollbarh+0x2a4>
    scroll_ratio = scroll.w / target;
    scroll_off = scroll_offset / target;

    /* calculate cursor bounds */
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 8010bc4:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 8010bc8:	ee76 3a06 	vadd.f32	s7, s12, s12
 8010bcc:	edd4 5a30 	vldr	s11, [r4, #192]	; 0xc0
    scroll_ratio = scroll.w / target;
 8010bd0:	ee87 7aa8 	vdiv.f32	s14, s15, s17
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 8010bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010bd8:	ee75 6aa5 	vadd.f32	s13, s11, s11
 8010bdc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010be0:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010be4:	edcd 6a18 	vstr	s13, [sp, #96]	; 0x60
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 8010be8:	ed9d 5a04 	vldr	s10, [sp, #16]
    scroll_off = scroll_offset / target;
 8010bec:	ee89 7aa8 	vdiv.f32	s14, s19, s17
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 8010bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010bf4:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010bf8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010bfc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010c00:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
    cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);
 8010c04:	eddd 4a07 	vldr	s9, [sp, #28]
 8010c08:	ed94 4a31 	vldr	s8, [r4, #196]	; 0xc4
 8010c0c:	ee74 5a04 	vadd.f32	s11, s8, s8
 8010c10:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8010c14:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8010c18:	edcd 5a19 	vstr	s11, [sp, #100]	; 0x64
    cursor.y = scroll.y + style->border + style->padding.y;
 8010c1c:	eddd 5a05 	vldr	s11, [sp, #20]
 8010c20:	ee36 6a25 	vadd.f32	s12, s12, s11
 8010c24:	ee36 6a04 	vadd.f32	s12, s12, s8
 8010c28:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c

    /* calculate empty space around cursor */
    empty_west.x = scroll.x;
 8010c2c:	ed8d 5a12 	vstr	s10, [sp, #72]	; 0x48
    empty_west.y = scroll.y;
 8010c30:	edcd 5a13 	vstr	s11, [sp, #76]	; 0x4c
    empty_west.w = cursor.x - scroll.x;
 8010c34:	ee37 6a45 	vsub.f32	s12, s14, s10
 8010c38:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
    empty_west.h = scroll.h;
 8010c3c:	edcd 4a15 	vstr	s9, [sp, #84]	; 0x54

    empty_east.x = cursor.x + cursor.w;
 8010c40:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010c44:	ed8d 7a0e 	vstr	s14, [sp, #56]	; 0x38
    empty_east.y = scroll.y;
 8010c48:	edcd 5a0f 	vstr	s11, [sp, #60]	; 0x3c
    empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);
 8010c4c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010c50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c54:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    empty_east.h = scroll.h;
 8010c58:	edcd 4a11 	vstr	s9, [sp, #68]	; 0x44

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	9303      	str	r3, [sp, #12]
 8010c60:	ab0e      	add	r3, sp, #56	; 0x38
 8010c62:	9302      	str	r3, [sp, #8]
 8010c64:	ab12      	add	r3, sp, #72	; 0x48
 8010c66:	9301      	str	r3, [sp, #4]
 8010c68:	ab16      	add	r3, sp, #88	; 0x58
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	eeb0 1a4a 	vmov.f32	s2, s20
 8010c70:	eef0 0a68 	vmov.f32	s1, s17
 8010c74:	eeb0 0a69 	vmov.f32	s0, s19
 8010c78:	ab04      	add	r3, sp, #16
 8010c7a:	463a      	mov	r2, r7
 8010c7c:	4631      	mov	r1, r6
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f7ff fa94 	bl	80101ac <nk_scrollbar_behavior>
 8010c84:	eeb0 8a40 	vmov.f32	s16, s0
        &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);
    scroll_off = scroll_offset / target;
 8010c88:	eec0 7a28 	vdiv.f32	s15, s0, s17
    cursor.x = scroll.x + (scroll_off * scroll.w);
 8010c8c:	ed9d 7a06 	vldr	s14, [sp, #24]
 8010c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c94:	ed9d 7a04 	vldr	s14, [sp, #16]
 8010c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c9c:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8010ca0:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8010ca4:	b11b      	cbz	r3, 8010cae <nk_do_scrollbarh+0x23a>
 8010ca6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8010caa:	4640      	mov	r0, r8
 8010cac:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 8010cae:	ab16      	add	r3, sp, #88	; 0x58
 8010cb0:	9300      	str	r3, [sp, #0]
 8010cb2:	ab04      	add	r3, sp, #16
 8010cb4:	4622      	mov	r2, r4
 8010cb6:	6829      	ldr	r1, [r5, #0]
 8010cb8:	4640      	mov	r0, r8
 8010cba:	f7ff fca7 	bl	801060c <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8010cbe:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8010cc2:	b11b      	cbz	r3, 8010ccc <nk_do_scrollbarh+0x258>
 8010cc4:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8010cc8:	4640      	mov	r0, r8
 8010cca:	4798      	blx	r3
    return scroll_offset;
}
 8010ccc:	eeb0 0a48 	vmov.f32	s0, s16
 8010cd0:	b01a      	add	sp, #104	; 0x68
 8010cd2:	ecbd 8b06 	vpop	{d8-d10}
 8010cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(out);
 8010cda:	4b10      	ldr	r3, [pc, #64]	; (8010d1c <nk_do_scrollbarh+0x2a8>)
 8010cdc:	4a10      	ldr	r2, [pc, #64]	; (8010d20 <nk_do_scrollbarh+0x2ac>)
 8010cde:	21ee      	movs	r1, #238	; 0xee
 8010ce0:	4810      	ldr	r0, [pc, #64]	; (8010d24 <nk_do_scrollbarh+0x2b0>)
 8010ce2:	f005 fc33 	bl	801654c <__assert_func>
    NK_ASSERT(style);
 8010ce6:	4b10      	ldr	r3, [pc, #64]	; (8010d28 <nk_do_scrollbarh+0x2b4>)
 8010ce8:	4a0d      	ldr	r2, [pc, #52]	; (8010d20 <nk_do_scrollbarh+0x2ac>)
 8010cea:	21ef      	movs	r1, #239	; 0xef
 8010cec:	480d      	ldr	r0, [pc, #52]	; (8010d24 <nk_do_scrollbarh+0x2b0>)
 8010cee:	f005 fc2d 	bl	801654c <__assert_func>
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 8010cf2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfa:	d407      	bmi.n	8010d0c <nk_do_scrollbarh+0x298>
 8010cfc:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8010d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d04:	bfd8      	it	le
 8010d06:	eef0 9a47 	vmovle.f32	s19, s14
 8010d0a:	e75b      	b.n	8010bc4 <nk_do_scrollbarh+0x150>
 8010d0c:	eddf 9a02 	vldr	s19, [pc, #8]	; 8010d18 <nk_do_scrollbarh+0x2a4>
 8010d10:	e758      	b.n	8010bc4 <nk_do_scrollbarh+0x150>
    if (target <= scroll.w) return 0;
 8010d12:	ed9f 8a01 	vldr	s16, [pc, #4]	; 8010d18 <nk_do_scrollbarh+0x2a4>
 8010d16:	e7d9      	b.n	8010ccc <nk_do_scrollbarh+0x258>
 8010d18:	00000000 	.word	0x00000000
 8010d1c:	0801ad44 	.word	0x0801ad44
 8010d20:	0801b69c 	.word	0x0801b69c
 8010d24:	0801b67c 	.word	0x0801b67c
 8010d28:	0801ad18 	.word	0x0801ad18

08010d2c <nk_str_append_text_char>:
    nk_buffer_init_fixed(&str->buffer, memory, size);
    str->len = 0;
}
NK_API int
nk_str_append_text_char(struct nk_str *s, const char *str, int len)
{
 8010d2c:	b570      	push	{r4, r5, r6, lr}
    char *mem;
    NK_ASSERT(s);
 8010d2e:	b130      	cbz	r0, 8010d3e <nk_str_append_text_char+0x12>
 8010d30:	460d      	mov	r5, r1
 8010d32:	4614      	mov	r4, r2
 8010d34:	4606      	mov	r6, r0
    NK_ASSERT(str);
 8010d36:	b141      	cbz	r1, 8010d4a <nk_str_append_text_char+0x1e>
    if (!s || !str || !len) return 0;
 8010d38:	b96a      	cbnz	r2, 8010d56 <nk_str_append_text_char+0x2a>
    mem = (char*)nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);
    if (!mem) return 0;
    NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));
    s->len += nk_utf_len(str, len);
    return len;
}
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(s);
 8010d3e:	4b0f      	ldr	r3, [pc, #60]	; (8010d7c <nk_str_append_text_char+0x50>)
 8010d40:	4a0f      	ldr	r2, [pc, #60]	; (8010d80 <nk_str_append_text_char+0x54>)
 8010d42:	2126      	movs	r1, #38	; 0x26
 8010d44:	480f      	ldr	r0, [pc, #60]	; (8010d84 <nk_str_append_text_char+0x58>)
 8010d46:	f005 fc01 	bl	801654c <__assert_func>
    NK_ASSERT(str);
 8010d4a:	4b0f      	ldr	r3, [pc, #60]	; (8010d88 <nk_str_append_text_char+0x5c>)
 8010d4c:	4a0c      	ldr	r2, [pc, #48]	; (8010d80 <nk_str_append_text_char+0x54>)
 8010d4e:	2127      	movs	r1, #39	; 0x27
 8010d50:	480c      	ldr	r0, [pc, #48]	; (8010d84 <nk_str_append_text_char+0x58>)
 8010d52:	f005 fbfb 	bl	801654c <__assert_func>
    mem = (char*)nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);
 8010d56:	2300      	movs	r3, #0
 8010d58:	4619      	mov	r1, r3
 8010d5a:	f7f8 fafd 	bl	8009358 <nk_buffer_alloc>
    if (!mem) return 0;
 8010d5e:	b158      	cbz	r0, 8010d78 <nk_str_append_text_char+0x4c>
    NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));
 8010d60:	4622      	mov	r2, r4
 8010d62:	4629      	mov	r1, r5
 8010d64:	f003 ff54 	bl	8014c10 <nk_memcopy>
    s->len += nk_utf_len(str, len);
 8010d68:	4621      	mov	r1, r4
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	f003 ff1e 	bl	8014bac <nk_utf_len>
 8010d70:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8010d72:	4403      	add	r3, r0
 8010d74:	63f3      	str	r3, [r6, #60]	; 0x3c
    return len;
 8010d76:	e7e0      	b.n	8010d3a <nk_str_append_text_char+0xe>
    if (!mem) return 0;
 8010d78:	2400      	movs	r4, #0
 8010d7a:	e7de      	b.n	8010d3a <nk_str_append_text_char+0xe>
 8010d7c:	0801ae58 	.word	0x0801ae58
 8010d80:	0801b854 	.word	0x0801b854
 8010d84:	0801b6c8 	.word	0x0801b6c8
 8010d88:	0801b6e4 	.word	0x0801b6e4

08010d8c <nk_str_insert_at_char>:
    }
    return i;
}
NK_API int
nk_str_insert_at_char(struct nk_str *s, int pos, const char *str, int len)
{
 8010d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void *mem;
    char *src;
    char *dst;

    int copylen;
    NK_ASSERT(s);
 8010d90:	2800      	cmp	r0, #0
 8010d92:	d042      	beq.n	8010e1a <nk_str_insert_at_char+0x8e>
 8010d94:	460d      	mov	r5, r1
 8010d96:	4617      	mov	r7, r2
 8010d98:	461c      	mov	r4, r3
 8010d9a:	4680      	mov	r8, r0
    NK_ASSERT(str);
 8010d9c:	2a00      	cmp	r2, #0
 8010d9e:	d042      	beq.n	8010e26 <nk_str_insert_at_char+0x9a>
    NK_ASSERT(len >= 0);
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	db46      	blt.n	8010e32 <nk_str_insert_at_char+0xa6>
    if (!s || !str || !len || (nk_size)pos > s->buffer.allocated) return 0;
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d05d      	beq.n	8010e64 <nk_str_insert_at_char+0xd8>
 8010da8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8010daa:	428e      	cmp	r6, r1
 8010dac:	d35d      	bcc.n	8010e6a <nk_str_insert_at_char+0xde>
    if ((s->buffer.allocated + (nk_size)len >= s->buffer.memory.size) &&
 8010dae:	18f3      	adds	r3, r6, r3
 8010db0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d302      	bcc.n	8010dbc <nk_str_insert_at_char+0x30>
 8010db6:	7f03      	ldrb	r3, [r0, #28]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d058      	beq.n	8010e6e <nk_str_insert_at_char+0xe2>
        (s->buffer.type == NK_BUFFER_FIXED)) return 0;

    copylen = (int)s->buffer.allocated - pos;
    if (!copylen) {
 8010dbc:	1b76      	subs	r6, r6, r5
 8010dbe:	d03e      	beq.n	8010e3e <nk_str_insert_at_char+0xb2>
        nk_str_append_text_char(s, str, len);
        return 1;
    }
    mem = nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	4640      	mov	r0, r8
 8010dc8:	f7f8 fac6 	bl	8009358 <nk_buffer_alloc>
    if (!mem) return 0;
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	d050      	beq.n	8010e72 <nk_str_insert_at_char+0xe6>

    /* memmove */
    NK_ASSERT(((int)pos + (int)len + ((int)copylen - 1)) >= 0);
 8010dd0:	1e73      	subs	r3, r6, #1
 8010dd2:	1962      	adds	r2, r4, r5
 8010dd4:	18d1      	adds	r1, r2, r3
 8010dd6:	d439      	bmi.n	8010e4c <nk_str_insert_at_char+0xc0>
    NK_ASSERT(((int)pos + ((int)copylen - 1)) >= 0);
 8010dd8:	195b      	adds	r3, r3, r5
 8010dda:	d43d      	bmi.n	8010e58 <nk_str_insert_at_char+0xcc>
    dst = nk_ptr_add(char, s->buffer.memory.ptr, pos + len + (copylen - 1));
 8010ddc:	f8d8 2020 	ldr.w	r2, [r8, #32]
    src = nk_ptr_add(char, s->buffer.memory.ptr, pos + (copylen-1));
 8010de0:	4413      	add	r3, r2
    for (i = 0; i < copylen; ++i) *dst-- = *src--;
 8010de2:	2e00      	cmp	r6, #0
 8010de4:	dd08      	ble.n	8010df8 <nk_str_insert_at_char+0x6c>
 8010de6:	3101      	adds	r1, #1
 8010de8:	440a      	add	r2, r1
 8010dea:	1b9e      	subs	r6, r3, r6
 8010dec:	f813 1901 	ldrb.w	r1, [r3], #-1
 8010df0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8010df4:	42b3      	cmp	r3, r6
 8010df6:	d1f9      	bne.n	8010dec <nk_str_insert_at_char+0x60>
    mem = nk_ptr_add(void, s->buffer.memory.ptr, pos);
 8010df8:	f8d8 0020 	ldr.w	r0, [r8, #32]
    NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));
 8010dfc:	4622      	mov	r2, r4
 8010dfe:	4639      	mov	r1, r7
 8010e00:	4428      	add	r0, r5
 8010e02:	f003 ff05 	bl	8014c10 <nk_memcopy>
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 8010e06:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8010e0a:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8010e0e:	f003 fecd 	bl	8014bac <nk_utf_len>
 8010e12:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
    return 1;
 8010e16:	2001      	movs	r0, #1
 8010e18:	e025      	b.n	8010e66 <nk_str_insert_at_char+0xda>
    NK_ASSERT(s);
 8010e1a:	4b17      	ldr	r3, [pc, #92]	; (8010e78 <nk_str_insert_at_char+0xec>)
 8010e1c:	4a17      	ldr	r2, [pc, #92]	; (8010e7c <nk_str_insert_at_char+0xf0>)
 8010e1e:	217a      	movs	r1, #122	; 0x7a
 8010e20:	4817      	ldr	r0, [pc, #92]	; (8010e80 <nk_str_insert_at_char+0xf4>)
 8010e22:	f005 fb93 	bl	801654c <__assert_func>
    NK_ASSERT(str);
 8010e26:	4b17      	ldr	r3, [pc, #92]	; (8010e84 <nk_str_insert_at_char+0xf8>)
 8010e28:	4a14      	ldr	r2, [pc, #80]	; (8010e7c <nk_str_insert_at_char+0xf0>)
 8010e2a:	217b      	movs	r1, #123	; 0x7b
 8010e2c:	4814      	ldr	r0, [pc, #80]	; (8010e80 <nk_str_insert_at_char+0xf4>)
 8010e2e:	f005 fb8d 	bl	801654c <__assert_func>
    NK_ASSERT(len >= 0);
 8010e32:	4b15      	ldr	r3, [pc, #84]	; (8010e88 <nk_str_insert_at_char+0xfc>)
 8010e34:	4a11      	ldr	r2, [pc, #68]	; (8010e7c <nk_str_insert_at_char+0xf0>)
 8010e36:	217c      	movs	r1, #124	; 0x7c
 8010e38:	4811      	ldr	r0, [pc, #68]	; (8010e80 <nk_str_insert_at_char+0xf4>)
 8010e3a:	f005 fb87 	bl	801654c <__assert_func>
        nk_str_append_text_char(s, str, len);
 8010e3e:	4622      	mov	r2, r4
 8010e40:	4639      	mov	r1, r7
 8010e42:	4640      	mov	r0, r8
 8010e44:	f7ff ff72 	bl	8010d2c <nk_str_append_text_char>
        return 1;
 8010e48:	2001      	movs	r0, #1
 8010e4a:	e00c      	b.n	8010e66 <nk_str_insert_at_char+0xda>
    NK_ASSERT(((int)pos + (int)len + ((int)copylen - 1)) >= 0);
 8010e4c:	4b0f      	ldr	r3, [pc, #60]	; (8010e8c <nk_str_insert_at_char+0x100>)
 8010e4e:	4a0b      	ldr	r2, [pc, #44]	; (8010e7c <nk_str_insert_at_char+0xf0>)
 8010e50:	218a      	movs	r1, #138	; 0x8a
 8010e52:	480b      	ldr	r0, [pc, #44]	; (8010e80 <nk_str_insert_at_char+0xf4>)
 8010e54:	f005 fb7a 	bl	801654c <__assert_func>
    NK_ASSERT(((int)pos + ((int)copylen - 1)) >= 0);
 8010e58:	4b0d      	ldr	r3, [pc, #52]	; (8010e90 <nk_str_insert_at_char+0x104>)
 8010e5a:	4a08      	ldr	r2, [pc, #32]	; (8010e7c <nk_str_insert_at_char+0xf0>)
 8010e5c:	218b      	movs	r1, #139	; 0x8b
 8010e5e:	4808      	ldr	r0, [pc, #32]	; (8010e80 <nk_str_insert_at_char+0xf4>)
 8010e60:	f005 fb74 	bl	801654c <__assert_func>
    if (!s || !str || !len || (nk_size)pos > s->buffer.allocated) return 0;
 8010e64:	4618      	mov	r0, r3
}
 8010e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!s || !str || !len || (nk_size)pos > s->buffer.allocated) return 0;
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	e7fb      	b.n	8010e66 <nk_str_insert_at_char+0xda>
        (s->buffer.type == NK_BUFFER_FIXED)) return 0;
 8010e6e:	2000      	movs	r0, #0
 8010e70:	e7f9      	b.n	8010e66 <nk_str_insert_at_char+0xda>
    if (!mem) return 0;
 8010e72:	2000      	movs	r0, #0
 8010e74:	e7f7      	b.n	8010e66 <nk_str_insert_at_char+0xda>
 8010e76:	bf00      	nop
 8010e78:	0801ae58 	.word	0x0801ae58
 8010e7c:	0801b82c 	.word	0x0801b82c
 8010e80:	0801b6c8 	.word	0x0801b6c8
 8010e84:	0801b6e4 	.word	0x0801b6e4
 8010e88:	0801b6e8 	.word	0x0801b6e8
 8010e8c:	0801b6f4 	.word	0x0801b6f4
 8010e90:	0801b724 	.word	0x0801b724

08010e94 <nk_str_remove_chars>:
    }
    return i;
}
NK_API void
nk_str_remove_chars(struct nk_str *s, int len)
{
 8010e94:	b510      	push	{r4, lr}
    NK_ASSERT(s);
 8010e96:	b178      	cbz	r0, 8010eb8 <nk_str_remove_chars+0x24>
 8010e98:	460b      	mov	r3, r1
 8010e9a:	4604      	mov	r4, r0
    NK_ASSERT(len >= 0);
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	db11      	blt.n	8010ec4 <nk_str_remove_chars+0x30>
    if (!s || len < 0 || (nk_size)len > s->buffer.allocated) return;
 8010ea0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010ea2:	428a      	cmp	r2, r1
 8010ea4:	d307      	bcc.n	8010eb6 <nk_str_remove_chars+0x22>
    NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 8010ea6:	1a51      	subs	r1, r2, r1
 8010ea8:	d412      	bmi.n	8010ed0 <nk_str_remove_chars+0x3c>
    s->buffer.allocated -= (nk_size)len;
 8010eaa:	1ad2      	subs	r2, r2, r3
 8010eac:	62c2      	str	r2, [r0, #44]	; 0x2c
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 8010eae:	6a00      	ldr	r0, [r0, #32]
 8010eb0:	f003 fe7c 	bl	8014bac <nk_utf_len>
 8010eb4:	63e0      	str	r0, [r4, #60]	; 0x3c
}
 8010eb6:	bd10      	pop	{r4, pc}
    NK_ASSERT(s);
 8010eb8:	4b08      	ldr	r3, [pc, #32]	; (8010edc <nk_str_remove_chars+0x48>)
 8010eba:	4a09      	ldr	r2, [pc, #36]	; (8010ee0 <nk_str_remove_chars+0x4c>)
 8010ebc:	21f4      	movs	r1, #244	; 0xf4
 8010ebe:	4809      	ldr	r0, [pc, #36]	; (8010ee4 <nk_str_remove_chars+0x50>)
 8010ec0:	f005 fb44 	bl	801654c <__assert_func>
    NK_ASSERT(len >= 0);
 8010ec4:	4b08      	ldr	r3, [pc, #32]	; (8010ee8 <nk_str_remove_chars+0x54>)
 8010ec6:	4a06      	ldr	r2, [pc, #24]	; (8010ee0 <nk_str_remove_chars+0x4c>)
 8010ec8:	21f5      	movs	r1, #245	; 0xf5
 8010eca:	4806      	ldr	r0, [pc, #24]	; (8010ee4 <nk_str_remove_chars+0x50>)
 8010ecc:	f005 fb3e 	bl	801654c <__assert_func>
    NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 8010ed0:	4b06      	ldr	r3, [pc, #24]	; (8010eec <nk_str_remove_chars+0x58>)
 8010ed2:	4a03      	ldr	r2, [pc, #12]	; (8010ee0 <nk_str_remove_chars+0x4c>)
 8010ed4:	21f7      	movs	r1, #247	; 0xf7
 8010ed6:	4803      	ldr	r0, [pc, #12]	; (8010ee4 <nk_str_remove_chars+0x50>)
 8010ed8:	f005 fb38 	bl	801654c <__assert_func>
 8010edc:	0801ae58 	.word	0x0801ae58
 8010ee0:	0801b7cc 	.word	0x0801b7cc
 8010ee4:	0801b6c8 	.word	0x0801b6c8
 8010ee8:	0801b6e8 	.word	0x0801b6e8
 8010eec:	0801b74c 	.word	0x0801b74c

08010ef0 <nk_str_delete_chars>:
    end = (const char*)str->buffer.memory.ptr + str->buffer.allocated;
    nk_str_remove_chars(str, (int)(end-begin)+1);
}
NK_API void
nk_str_delete_chars(struct nk_str *s, int pos, int len)
{
 8010ef0:	b538      	push	{r3, r4, r5, lr}
    NK_ASSERT(s);
 8010ef2:	b1b0      	cbz	r0, 8010f22 <nk_str_delete_chars+0x32>
 8010ef4:	460b      	mov	r3, r1
 8010ef6:	4614      	mov	r4, r2
 8010ef8:	4605      	mov	r5, r0
    if (!s || !len || (nk_size)pos > s->buffer.allocated ||
 8010efa:	b342      	cbz	r2, 8010f4e <nk_str_delete_chars+0x5e>
 8010efc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010efe:	428a      	cmp	r2, r1
 8010f00:	d325      	bcc.n	8010f4e <nk_str_delete_chars+0x5e>
        (nk_size)(pos + len) > s->buffer.allocated) return;
 8010f02:	1861      	adds	r1, r4, r1
    if (!s || !len || (nk_size)pos > s->buffer.allocated ||
 8010f04:	428a      	cmp	r2, r1
 8010f06:	d322      	bcc.n	8010f4e <nk_str_delete_chars+0x5e>

    if ((nk_size)(pos + len) < s->buffer.allocated) {
 8010f08:	d919      	bls.n	8010f3e <nk_str_delete_chars+0x4e>
        /* memmove */
        char *dst = nk_ptr_add(char, s->buffer.memory.ptr, pos);
 8010f0a:	6a00      	ldr	r0, [r0, #32]
        char *src = nk_ptr_add(char, s->buffer.memory.ptr, pos + len);
        NK_MEMCPY(dst, src, s->buffer.allocated - (nk_size)(pos + len));
 8010f0c:	1a52      	subs	r2, r2, r1
 8010f0e:	4401      	add	r1, r0
 8010f10:	4418      	add	r0, r3
 8010f12:	f003 fe7d 	bl	8014c10 <nk_memcopy>
        NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 8010f16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010f18:	42a3      	cmp	r3, r4
 8010f1a:	db09      	blt.n	8010f30 <nk_str_delete_chars+0x40>
        s->buffer.allocated -= (nk_size)len;
 8010f1c:	1b1b      	subs	r3, r3, r4
 8010f1e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010f20:	e010      	b.n	8010f44 <nk_str_delete_chars+0x54>
    NK_ASSERT(s);
 8010f22:	4b0b      	ldr	r3, [pc, #44]	; (8010f50 <nk_str_delete_chars+0x60>)
 8010f24:	4a0b      	ldr	r2, [pc, #44]	; (8010f54 <nk_str_delete_chars+0x64>)
 8010f26:	f240 1113 	movw	r1, #275	; 0x113
 8010f2a:	480b      	ldr	r0, [pc, #44]	; (8010f58 <nk_str_delete_chars+0x68>)
 8010f2c:	f005 fb0e 	bl	801654c <__assert_func>
        NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 8010f30:	4b0a      	ldr	r3, [pc, #40]	; (8010f5c <nk_str_delete_chars+0x6c>)
 8010f32:	4a08      	ldr	r2, [pc, #32]	; (8010f54 <nk_str_delete_chars+0x64>)
 8010f34:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8010f38:	4807      	ldr	r0, [pc, #28]	; (8010f58 <nk_str_delete_chars+0x68>)
 8010f3a:	f005 fb07 	bl	801654c <__assert_func>
    } else nk_str_remove_chars(s, len);
 8010f3e:	4621      	mov	r1, r4
 8010f40:	f7ff ffa8 	bl	8010e94 <nk_str_remove_chars>
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 8010f44:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8010f46:	6a28      	ldr	r0, [r5, #32]
 8010f48:	f003 fe30 	bl	8014bac <nk_utf_len>
 8010f4c:	63e8      	str	r0, [r5, #60]	; 0x3c
}
 8010f4e:	bd38      	pop	{r3, r4, r5, pc}
 8010f50:	0801ae58 	.word	0x0801ae58
 8010f54:	0801b7b8 	.word	0x0801b7b8
 8010f58:	0801b6c8 	.word	0x0801b6c8
 8010f5c:	0801b74c 	.word	0x0801b74c

08010f60 <nk_str_at_rune>:
    if (!s || pos > (int)s->buffer.allocated) return 0;
    return nk_ptr_add(char, s->buffer.memory.ptr, pos);
}
NK_API char*
nk_str_at_rune(struct nk_str *str, int pos, nk_rune *unicode, int *len)
{
 8010f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int src_len = 0;
    int glyph_len = 0;
    char *text;
    int text_len;

    NK_ASSERT(str);
 8010f64:	b350      	cbz	r0, 8010fbc <nk_str_at_rune+0x5c>
 8010f66:	460e      	mov	r6, r1
 8010f68:	4690      	mov	r8, r2
 8010f6a:	469a      	mov	sl, r3
    NK_ASSERT(unicode);
 8010f6c:	b36a      	cbz	r2, 8010fca <nk_str_at_rune+0x6a>
    NK_ASSERT(len);
 8010f6e:	f1ba 0f00 	cmp.w	sl, #0
 8010f72:	d031      	beq.n	8010fd8 <nk_str_at_rune+0x78>

    if (!str || !unicode || !len) return 0;
    if (pos < 0) {
 8010f74:	2900      	cmp	r1, #0
 8010f76:	db36      	blt.n	8010fe6 <nk_str_at_rune+0x86>
        *unicode = 0;
        *len = 0;
        return 0;
    }

    text = (char*)str->buffer.memory.ptr;
 8010f78:	6a07      	ldr	r7, [r0, #32]
    text_len = (int)str->buffer.allocated;
 8010f7a:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    glyph_len = nk_utf_decode(text, unicode, text_len);
 8010f7e:	464a      	mov	r2, r9
 8010f80:	4641      	mov	r1, r8
 8010f82:	4638      	mov	r0, r7
 8010f84:	f003 fd8c 	bl	8014aa0 <nk_utf_decode>
    while (glyph_len) {
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d033      	beq.n	8010ff6 <nk_str_at_rune+0x96>
        if (i == pos) {
 8010f8e:	b37e      	cbz	r6, 8010ff0 <nk_str_at_rune+0x90>
    int src_len = 0;
 8010f90:	2400      	movs	r4, #0
    int i = 0;
 8010f92:	4625      	mov	r5, r4
            *len = glyph_len;
            break;
        }

        i++;
 8010f94:	3501      	adds	r5, #1
        src_len = src_len + glyph_len;
 8010f96:	441c      	add	r4, r3
        glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);
 8010f98:	eba9 0204 	sub.w	r2, r9, r4
 8010f9c:	4641      	mov	r1, r8
 8010f9e:	1938      	adds	r0, r7, r4
 8010fa0:	f003 fd7e 	bl	8014aa0 <nk_utf_decode>
    while (glyph_len) {
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	b118      	cbz	r0, 8010fb0 <nk_str_at_rune+0x50>
        if (i == pos) {
 8010fa8:	42ae      	cmp	r6, r5
 8010faa:	d1f3      	bne.n	8010f94 <nk_str_at_rune+0x34>
            *len = glyph_len;
 8010fac:	f8ca 3000 	str.w	r3, [sl]
    }
    if (i != pos) return 0;
 8010fb0:	42ae      	cmp	r6, r5
    return text + src_len;
 8010fb2:	bf0c      	ite	eq
 8010fb4:	1938      	addeq	r0, r7, r4
    if (i != pos) return 0;
 8010fb6:	2000      	movne	r0, #0
}
 8010fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NK_ASSERT(str);
 8010fbc:	4b0f      	ldr	r3, [pc, #60]	; (8010ffc <nk_str_at_rune+0x9c>)
 8010fbe:	4a10      	ldr	r2, [pc, #64]	; (8011000 <nk_str_at_rune+0xa0>)
 8010fc0:	f240 1149 	movw	r1, #329	; 0x149
 8010fc4:	480f      	ldr	r0, [pc, #60]	; (8011004 <nk_str_at_rune+0xa4>)
 8010fc6:	f005 fac1 	bl	801654c <__assert_func>
    NK_ASSERT(unicode);
 8010fca:	4b0f      	ldr	r3, [pc, #60]	; (8011008 <nk_str_at_rune+0xa8>)
 8010fcc:	4a0c      	ldr	r2, [pc, #48]	; (8011000 <nk_str_at_rune+0xa0>)
 8010fce:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8010fd2:	480c      	ldr	r0, [pc, #48]	; (8011004 <nk_str_at_rune+0xa4>)
 8010fd4:	f005 faba 	bl	801654c <__assert_func>
    NK_ASSERT(len);
 8010fd8:	4b0c      	ldr	r3, [pc, #48]	; (801100c <nk_str_at_rune+0xac>)
 8010fda:	4a09      	ldr	r2, [pc, #36]	; (8011000 <nk_str_at_rune+0xa0>)
 8010fdc:	f240 114b 	movw	r1, #331	; 0x14b
 8010fe0:	4808      	ldr	r0, [pc, #32]	; (8011004 <nk_str_at_rune+0xa4>)
 8010fe2:	f005 fab3 	bl	801654c <__assert_func>
        *unicode = 0;
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	6010      	str	r0, [r2, #0]
        *len = 0;
 8010fea:	f8ca 0000 	str.w	r0, [sl]
        return 0;
 8010fee:	e7e3      	b.n	8010fb8 <nk_str_at_rune+0x58>
    int src_len = 0;
 8010ff0:	4634      	mov	r4, r6
    int i = 0;
 8010ff2:	4635      	mov	r5, r6
 8010ff4:	e7da      	b.n	8010fac <nk_str_at_rune+0x4c>
    int src_len = 0;
 8010ff6:	4604      	mov	r4, r0
    int i = 0;
 8010ff8:	4605      	mov	r5, r0
 8010ffa:	e7d9      	b.n	8010fb0 <nk_str_at_rune+0x50>
 8010ffc:	0801b6e4 	.word	0x0801b6e4
 8011000:	0801b89c 	.word	0x0801b89c
 8011004:	0801b6c8 	.word	0x0801b6c8
 8011008:	0801b778 	.word	0x0801b778
 801100c:	0801b790 	.word	0x0801b790

08011010 <nk_str_delete_runes>:
{
 8011010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011012:	b083      	sub	sp, #12
    NK_ASSERT(s);
 8011014:	b140      	cbz	r0, 8011028 <nk_str_delete_runes+0x18>
 8011016:	4614      	mov	r4, r2
 8011018:	4605      	mov	r5, r0
    NK_ASSERT(s->len >= pos + len);
 801101a:	188b      	adds	r3, r1, r2
 801101c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801101e:	429a      	cmp	r2, r3
 8011020:	db09      	blt.n	8011036 <nk_str_delete_runes+0x26>
    if (!len) return;
 8011022:	b97c      	cbnz	r4, 8011044 <nk_str_delete_runes+0x34>
}
 8011024:	b003      	add	sp, #12
 8011026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NK_ASSERT(s);
 8011028:	4b12      	ldr	r3, [pc, #72]	; (8011074 <nk_str_delete_runes+0x64>)
 801102a:	4a13      	ldr	r2, [pc, #76]	; (8011078 <nk_str_delete_runes+0x68>)
 801102c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8011030:	4812      	ldr	r0, [pc, #72]	; (801107c <nk_str_delete_runes+0x6c>)
 8011032:	f005 fa8b 	bl	801654c <__assert_func>
    NK_ASSERT(s->len >= pos + len);
 8011036:	4b12      	ldr	r3, [pc, #72]	; (8011080 <nk_str_delete_runes+0x70>)
 8011038:	4a0f      	ldr	r2, [pc, #60]	; (8011078 <nk_str_delete_runes+0x68>)
 801103a:	f240 112b 	movw	r1, #299	; 0x12b
 801103e:	480f      	ldr	r0, [pc, #60]	; (801107c <nk_str_delete_runes+0x6c>)
 8011040:	f005 fa84 	bl	801654c <__assert_func>
    temp = (char *)s->buffer.memory.ptr;
 8011044:	6a07      	ldr	r7, [r0, #32]
    begin = nk_str_at_rune(s, pos, &unicode, &unused);
 8011046:	466b      	mov	r3, sp
 8011048:	aa01      	add	r2, sp, #4
 801104a:	f7ff ff89 	bl	8010f60 <nk_str_at_rune>
    if (!begin) return;
 801104e:	4606      	mov	r6, r0
 8011050:	2800      	cmp	r0, #0
 8011052:	d0e7      	beq.n	8011024 <nk_str_delete_runes+0x14>
    s->buffer.memory.ptr = begin;
 8011054:	6228      	str	r0, [r5, #32]
    end = nk_str_at_rune(s, len, &unicode, &unused);
 8011056:	466b      	mov	r3, sp
 8011058:	aa01      	add	r2, sp, #4
 801105a:	4621      	mov	r1, r4
 801105c:	4628      	mov	r0, r5
 801105e:	f7ff ff7f 	bl	8010f60 <nk_str_at_rune>
    s->buffer.memory.ptr = temp;
 8011062:	622f      	str	r7, [r5, #32]
    if (!end) return;
 8011064:	2800      	cmp	r0, #0
 8011066:	d0dd      	beq.n	8011024 <nk_str_delete_runes+0x14>
    nk_str_delete_chars(s, (int)(begin - temp), (int)(end - begin));
 8011068:	1b82      	subs	r2, r0, r6
 801106a:	1bf1      	subs	r1, r6, r7
 801106c:	4628      	mov	r0, r5
 801106e:	f7ff ff3f 	bl	8010ef0 <nk_str_delete_chars>
 8011072:	e7d7      	b.n	8011024 <nk_str_delete_runes+0x14>
 8011074:	0801ae58 	.word	0x0801ae58
 8011078:	0801b7a4 	.word	0x0801b7a4
 801107c:	0801b6c8 	.word	0x0801b6c8
 8011080:	0801b780 	.word	0x0801b780

08011084 <nk_str_at_const>:
    if (!s || pos > (int)s->buffer.allocated) return 0;
    return nk_ptr_add(char, s->buffer.memory.ptr, pos);
}
NK_API const char*
nk_str_at_const(const struct nk_str *str, int pos, nk_rune *unicode, int *len)
{
 8011084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int src_len = 0;
    int glyph_len = 0;
    char *text;
    int text_len;

    NK_ASSERT(str);
 8011088:	b350      	cbz	r0, 80110e0 <nk_str_at_const+0x5c>
 801108a:	460e      	mov	r6, r1
 801108c:	4690      	mov	r8, r2
 801108e:	469a      	mov	sl, r3
    NK_ASSERT(unicode);
 8011090:	b36a      	cbz	r2, 80110ee <nk_str_at_const+0x6a>
    NK_ASSERT(len);
 8011092:	f1ba 0f00 	cmp.w	sl, #0
 8011096:	d031      	beq.n	80110fc <nk_str_at_const+0x78>

    if (!str || !unicode || !len) return 0;
    if (pos < 0) {
 8011098:	2900      	cmp	r1, #0
 801109a:	db36      	blt.n	801110a <nk_str_at_const+0x86>
        *unicode = 0;
        *len = 0;
        return 0;
    }

    text = (char*)str->buffer.memory.ptr;
 801109c:	6a07      	ldr	r7, [r0, #32]
    text_len = (int)str->buffer.allocated;
 801109e:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    glyph_len = nk_utf_decode(text, unicode, text_len);
 80110a2:	464a      	mov	r2, r9
 80110a4:	4641      	mov	r1, r8
 80110a6:	4638      	mov	r0, r7
 80110a8:	f003 fcfa 	bl	8014aa0 <nk_utf_decode>
    while (glyph_len) {
 80110ac:	4603      	mov	r3, r0
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d033      	beq.n	801111a <nk_str_at_const+0x96>
        if (i == pos) {
 80110b2:	b37e      	cbz	r6, 8011114 <nk_str_at_const+0x90>
    int src_len = 0;
 80110b4:	2400      	movs	r4, #0
    int i = 0;
 80110b6:	4625      	mov	r5, r4
            *len = glyph_len;
            break;
        }

        i++;
 80110b8:	3501      	adds	r5, #1
        src_len = src_len + glyph_len;
 80110ba:	441c      	add	r4, r3
        glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);
 80110bc:	eba9 0204 	sub.w	r2, r9, r4
 80110c0:	4641      	mov	r1, r8
 80110c2:	1938      	adds	r0, r7, r4
 80110c4:	f003 fcec 	bl	8014aa0 <nk_utf_decode>
    while (glyph_len) {
 80110c8:	4603      	mov	r3, r0
 80110ca:	b118      	cbz	r0, 80110d4 <nk_str_at_const+0x50>
        if (i == pos) {
 80110cc:	42ae      	cmp	r6, r5
 80110ce:	d1f3      	bne.n	80110b8 <nk_str_at_const+0x34>
            *len = glyph_len;
 80110d0:	f8ca 3000 	str.w	r3, [sl]
    }
    if (i != pos) return 0;
 80110d4:	42ae      	cmp	r6, r5
    return text + src_len;
 80110d6:	bf0c      	ite	eq
 80110d8:	1938      	addeq	r0, r7, r4
    if (i != pos) return 0;
 80110da:	2000      	movne	r0, #0
}
 80110dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NK_ASSERT(str);
 80110e0:	4b0f      	ldr	r3, [pc, #60]	; (8011120 <nk_str_at_const+0x9c>)
 80110e2:	4a10      	ldr	r2, [pc, #64]	; (8011124 <nk_str_at_const+0xa0>)
 80110e4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80110e8:	480f      	ldr	r0, [pc, #60]	; (8011128 <nk_str_at_const+0xa4>)
 80110ea:	f005 fa2f 	bl	801654c <__assert_func>
    NK_ASSERT(unicode);
 80110ee:	4b0f      	ldr	r3, [pc, #60]	; (801112c <nk_str_at_const+0xa8>)
 80110f0:	4a0c      	ldr	r2, [pc, #48]	; (8011124 <nk_str_at_const+0xa0>)
 80110f2:	f240 1175 	movw	r1, #373	; 0x175
 80110f6:	480c      	ldr	r0, [pc, #48]	; (8011128 <nk_str_at_const+0xa4>)
 80110f8:	f005 fa28 	bl	801654c <__assert_func>
    NK_ASSERT(len);
 80110fc:	4b0c      	ldr	r3, [pc, #48]	; (8011130 <nk_str_at_const+0xac>)
 80110fe:	4a09      	ldr	r2, [pc, #36]	; (8011124 <nk_str_at_const+0xa0>)
 8011100:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8011104:	4808      	ldr	r0, [pc, #32]	; (8011128 <nk_str_at_const+0xa4>)
 8011106:	f005 fa21 	bl	801654c <__assert_func>
        *unicode = 0;
 801110a:	2000      	movs	r0, #0
 801110c:	6010      	str	r0, [r2, #0]
        *len = 0;
 801110e:	f8ca 0000 	str.w	r0, [sl]
        return 0;
 8011112:	e7e3      	b.n	80110dc <nk_str_at_const+0x58>
    int src_len = 0;
 8011114:	4634      	mov	r4, r6
    int i = 0;
 8011116:	4635      	mov	r5, r6
 8011118:	e7da      	b.n	80110d0 <nk_str_at_const+0x4c>
    int src_len = 0;
 801111a:	4604      	mov	r4, r0
    int i = 0;
 801111c:	4605      	mov	r5, r0
 801111e:	e7d9      	b.n	80110d4 <nk_str_at_const+0x50>
 8011120:	0801b6e4 	.word	0x0801b6e4
 8011124:	0801b88c 	.word	0x0801b88c
 8011128:	0801b6c8 	.word	0x0801b6c8
 801112c:	0801b778 	.word	0x0801b778
 8011130:	0801b790 	.word	0x0801b790

08011134 <nk_str_rune_at>:
NK_API nk_rune
nk_str_rune_at(const struct nk_str *str, int pos)
{
 8011134:	b500      	push	{lr}
 8011136:	b083      	sub	sp, #12
    int len;
    nk_rune unicode = 0;
 8011138:	2300      	movs	r3, #0
 801113a:	9300      	str	r3, [sp, #0]
    nk_str_at_const(str, pos, &unicode, &len);
 801113c:	ab01      	add	r3, sp, #4
 801113e:	466a      	mov	r2, sp
 8011140:	f7ff ffa0 	bl	8011084 <nk_str_at_const>
    return unicode;
}
 8011144:	9800      	ldr	r0, [sp, #0]
 8011146:	b003      	add	sp, #12
 8011148:	f85d fb04 	ldr.w	pc, [sp], #4

0801114c <nk_str_get_const>:
    if (!s || !s->len || !s->buffer.allocated) return 0;
    return (char*)s->buffer.memory.ptr;
}
NK_API const char*
nk_str_get_const(const struct nk_str *s)
{
 801114c:	b508      	push	{r3, lr}
    NK_ASSERT(s);
 801114e:	b128      	cbz	r0, 801115c <nk_str_get_const+0x10>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 8011150:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011152:	b152      	cbz	r2, 801116a <nk_str_get_const+0x1e>
 8011154:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8011156:	b152      	cbz	r2, 801116e <nk_str_get_const+0x22>
    return (const char*)s->buffer.memory.ptr;
 8011158:	6a00      	ldr	r0, [r0, #32]
}
 801115a:	bd08      	pop	{r3, pc}
    NK_ASSERT(s);
 801115c:	4b05      	ldr	r3, [pc, #20]	; (8011174 <nk_str_get_const+0x28>)
 801115e:	4a06      	ldr	r2, [pc, #24]	; (8011178 <nk_str_get_const+0x2c>)
 8011160:	f240 11a1 	movw	r1, #417	; 0x1a1
 8011164:	4805      	ldr	r0, [pc, #20]	; (801117c <nk_str_get_const+0x30>)
 8011166:	f005 f9f1 	bl	801654c <__assert_func>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801116a:	2000      	movs	r0, #0
 801116c:	e7f5      	b.n	801115a <nk_str_get_const+0xe>
 801116e:	2000      	movs	r0, #0
 8011170:	e7f3      	b.n	801115a <nk_str_get_const+0xe>
 8011172:	bf00      	nop
 8011174:	0801ae58 	.word	0x0801ae58
 8011178:	0801b878 	.word	0x0801b878
 801117c:	0801b6c8 	.word	0x0801b6c8

08011180 <nk_str_insert_at_rune>:
{
 8011180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011182:	b083      	sub	sp, #12
    NK_ASSERT(str);
 8011184:	b1b8      	cbz	r0, 80111b6 <nk_str_insert_at_rune+0x36>
 8011186:	4614      	mov	r4, r2
 8011188:	461d      	mov	r5, r3
 801118a:	4606      	mov	r6, r0
    NK_ASSERT(cstr);
 801118c:	b1ca      	cbz	r2, 80111c2 <nk_str_insert_at_rune+0x42>
    NK_ASSERT(len);
 801118e:	b1f3      	cbz	r3, 80111ce <nk_str_insert_at_rune+0x4e>
    begin = nk_str_at_rune(str, pos, &unicode, &glyph_len);
 8011190:	ab01      	add	r3, sp, #4
 8011192:	466a      	mov	r2, sp
 8011194:	f7ff fee4 	bl	8010f60 <nk_str_at_rune>
 8011198:	4607      	mov	r7, r0
    if (!str->len)
 801119a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801119c:	b1eb      	cbz	r3, 80111da <nk_str_insert_at_rune+0x5a>
    buffer = nk_str_get_const(str);
 801119e:	4630      	mov	r0, r6
 80111a0:	f7ff ffd4 	bl	801114c <nk_str_get_const>
    if (!begin) return 0;
 80111a4:	b1ff      	cbz	r7, 80111e6 <nk_str_insert_at_rune+0x66>
    return nk_str_insert_at_char(str, (int)(begin - buffer), cstr, len);
 80111a6:	462b      	mov	r3, r5
 80111a8:	4622      	mov	r2, r4
 80111aa:	1a39      	subs	r1, r7, r0
 80111ac:	4630      	mov	r0, r6
 80111ae:	f7ff fded 	bl	8010d8c <nk_str_insert_at_char>
}
 80111b2:	b003      	add	sp, #12
 80111b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NK_ASSERT(str);
 80111b6:	4b0d      	ldr	r3, [pc, #52]	; (80111ec <nk_str_insert_at_rune+0x6c>)
 80111b8:	4a0d      	ldr	r2, [pc, #52]	; (80111f0 <nk_str_insert_at_rune+0x70>)
 80111ba:	219c      	movs	r1, #156	; 0x9c
 80111bc:	480d      	ldr	r0, [pc, #52]	; (80111f4 <nk_str_insert_at_rune+0x74>)
 80111be:	f005 f9c5 	bl	801654c <__assert_func>
    NK_ASSERT(cstr);
 80111c2:	4b0d      	ldr	r3, [pc, #52]	; (80111f8 <nk_str_insert_at_rune+0x78>)
 80111c4:	4a0a      	ldr	r2, [pc, #40]	; (80111f0 <nk_str_insert_at_rune+0x70>)
 80111c6:	219d      	movs	r1, #157	; 0x9d
 80111c8:	480a      	ldr	r0, [pc, #40]	; (80111f4 <nk_str_insert_at_rune+0x74>)
 80111ca:	f005 f9bf 	bl	801654c <__assert_func>
    NK_ASSERT(len);
 80111ce:	4b0b      	ldr	r3, [pc, #44]	; (80111fc <nk_str_insert_at_rune+0x7c>)
 80111d0:	4a07      	ldr	r2, [pc, #28]	; (80111f0 <nk_str_insert_at_rune+0x70>)
 80111d2:	219e      	movs	r1, #158	; 0x9e
 80111d4:	4807      	ldr	r0, [pc, #28]	; (80111f4 <nk_str_insert_at_rune+0x74>)
 80111d6:	f005 f9b9 	bl	801654c <__assert_func>
        return nk_str_append_text_char(str, cstr, len);
 80111da:	462a      	mov	r2, r5
 80111dc:	4621      	mov	r1, r4
 80111de:	4630      	mov	r0, r6
 80111e0:	f7ff fda4 	bl	8010d2c <nk_str_append_text_char>
 80111e4:	e7e5      	b.n	80111b2 <nk_str_insert_at_rune+0x32>
    if (!begin) return 0;
 80111e6:	2000      	movs	r0, #0
 80111e8:	e7e3      	b.n	80111b2 <nk_str_insert_at_rune+0x32>
 80111ea:	bf00      	nop
 80111ec:	0801b6e4 	.word	0x0801b6e4
 80111f0:	0801b814 	.word	0x0801b814
 80111f4:	0801b6c8 	.word	0x0801b6c8
 80111f8:	0801b794 	.word	0x0801b794
 80111fc:	0801b790 	.word	0x0801b790

08011200 <nk_str_insert_text_utf8>:
{
 8011200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011204:	b082      	sub	sp, #8
    NK_ASSERT(str);
 8011206:	b1f0      	cbz	r0, 8011246 <nk_str_insert_text_utf8+0x46>
 8011208:	4689      	mov	r9, r1
 801120a:	4617      	mov	r7, r2
 801120c:	461e      	mov	r6, r3
 801120e:	4682      	mov	sl, r0
    NK_ASSERT(text);
 8011210:	b1fa      	cbz	r2, 8011252 <nk_str_insert_text_utf8+0x52>
    if (!str || !text || !len) return 0;
 8011212:	b1a3      	cbz	r3, 801123e <nk_str_insert_text_utf8+0x3e>
    for (i = 0; i < len; ++i)
 8011214:	2b00      	cmp	r3, #0
 8011216:	dd22      	ble.n	801125e <nk_str_insert_text_utf8+0x5e>
    int byte_len = 0;
 8011218:	2400      	movs	r4, #0
    for (i = 0; i < len; ++i)
 801121a:	4625      	mov	r5, r4
        byte_len += nk_utf_decode(text+byte_len, &unicode, 4);
 801121c:	f04f 0804 	mov.w	r8, #4
 8011220:	4642      	mov	r2, r8
 8011222:	a901      	add	r1, sp, #4
 8011224:	1938      	adds	r0, r7, r4
 8011226:	f003 fc3b 	bl	8014aa0 <nk_utf_decode>
 801122a:	4404      	add	r4, r0
    for (i = 0; i < len; ++i)
 801122c:	3501      	adds	r5, #1
 801122e:	42ae      	cmp	r6, r5
 8011230:	d1f6      	bne.n	8011220 <nk_str_insert_text_utf8+0x20>
    nk_str_insert_at_rune(str, pos, text, byte_len);
 8011232:	4623      	mov	r3, r4
 8011234:	463a      	mov	r2, r7
 8011236:	4649      	mov	r1, r9
 8011238:	4650      	mov	r0, sl
 801123a:	f7ff ffa1 	bl	8011180 <nk_str_insert_at_rune>
}
 801123e:	4630      	mov	r0, r6
 8011240:	b002      	add	sp, #8
 8011242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NK_ASSERT(str);
 8011246:	4b07      	ldr	r3, [pc, #28]	; (8011264 <nk_str_insert_text_utf8+0x64>)
 8011248:	4a07      	ldr	r2, [pc, #28]	; (8011268 <nk_str_insert_text_utf8+0x68>)
 801124a:	21b8      	movs	r1, #184	; 0xb8
 801124c:	4807      	ldr	r0, [pc, #28]	; (801126c <nk_str_insert_text_utf8+0x6c>)
 801124e:	f005 f97d 	bl	801654c <__assert_func>
    NK_ASSERT(text);
 8011252:	4b07      	ldr	r3, [pc, #28]	; (8011270 <nk_str_insert_text_utf8+0x70>)
 8011254:	4a04      	ldr	r2, [pc, #16]	; (8011268 <nk_str_insert_text_utf8+0x68>)
 8011256:	21b9      	movs	r1, #185	; 0xb9
 8011258:	4804      	ldr	r0, [pc, #16]	; (801126c <nk_str_insert_text_utf8+0x6c>)
 801125a:	f005 f977 	bl	801654c <__assert_func>
    int byte_len = 0;
 801125e:	2400      	movs	r4, #0
 8011260:	e7e7      	b.n	8011232 <nk_str_insert_text_utf8+0x32>
 8011262:	bf00      	nop
 8011264:	0801b6e4 	.word	0x0801b6e4
 8011268:	0801b7fc 	.word	0x0801b7fc
 801126c:	0801b6c8 	.word	0x0801b6c8
 8011270:	0801b79c 	.word	0x0801b79c

08011274 <nk_str_insert_text_runes>:
{
 8011274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011278:	b083      	sub	sp, #12
    NK_ASSERT(str);
 801127a:	b1f0      	cbz	r0, 80112ba <nk_str_insert_text_runes+0x46>
 801127c:	461f      	mov	r7, r3
 801127e:	4680      	mov	r8, r0
    if (!str || !runes || !len) return 0;
 8011280:	b30a      	cbz	r2, 80112c6 <nk_str_insert_text_runes+0x52>
 8011282:	b1b3      	cbz	r3, 80112b2 <nk_str_insert_text_runes+0x3e>
    for (i = 0; i < len; ++i) {
 8011284:	2b00      	cmp	r3, #0
 8011286:	dd14      	ble.n	80112b2 <nk_str_insert_text_runes+0x3e>
 8011288:	1f15      	subs	r5, r2, #4
 801128a:	460c      	mov	r4, r1
 801128c:	185e      	adds	r6, r3, r1
        byte_len = nk_utf_encode(runes[i], glyph, NK_UTF_SIZE);
 801128e:	f04f 0904 	mov.w	r9, #4
 8011292:	464a      	mov	r2, r9
 8011294:	a901      	add	r1, sp, #4
 8011296:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801129a:	f003 fc57 	bl	8014b4c <nk_utf_encode>
        if (!byte_len) break;
 801129e:	4603      	mov	r3, r0
 80112a0:	b138      	cbz	r0, 80112b2 <nk_str_insert_text_runes+0x3e>
        nk_str_insert_at_rune(str, pos+i, glyph, byte_len);
 80112a2:	aa01      	add	r2, sp, #4
 80112a4:	4621      	mov	r1, r4
 80112a6:	4640      	mov	r0, r8
 80112a8:	f7ff ff6a 	bl	8011180 <nk_str_insert_at_rune>
    for (i = 0; i < len; ++i) {
 80112ac:	3401      	adds	r4, #1
 80112ae:	42b4      	cmp	r4, r6
 80112b0:	d1ef      	bne.n	8011292 <nk_str_insert_text_runes+0x1e>
}
 80112b2:	4638      	mov	r0, r7
 80112b4:	b003      	add	sp, #12
 80112b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NK_ASSERT(str);
 80112ba:	4b04      	ldr	r3, [pc, #16]	; (80112cc <nk_str_insert_text_runes+0x58>)
 80112bc:	4a04      	ldr	r2, [pc, #16]	; (80112d0 <nk_str_insert_text_runes+0x5c>)
 80112be:	21d9      	movs	r1, #217	; 0xd9
 80112c0:	4804      	ldr	r0, [pc, #16]	; (80112d4 <nk_str_insert_text_runes+0x60>)
 80112c2:	f005 f943 	bl	801654c <__assert_func>
    if (!str || !runes || !len) return 0;
 80112c6:	2700      	movs	r7, #0
 80112c8:	e7f3      	b.n	80112b2 <nk_str_insert_text_runes+0x3e>
 80112ca:	bf00      	nop
 80112cc:	0801b6e4 	.word	0x0801b6e4
 80112d0:	0801b7e0 	.word	0x0801b7e0
 80112d4:	0801b6c8 	.word	0x0801b6c8

080112d8 <nk_str_len>:
NK_API int
nk_str_len(struct nk_str *s)
{
 80112d8:	b508      	push	{r3, lr}
    NK_ASSERT(s);
 80112da:	b138      	cbz	r0, 80112ec <nk_str_len+0x14>
 80112dc:	4603      	mov	r3, r0
    if (!s || !s->len || !s->buffer.allocated) return 0;
 80112de:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80112e0:	b118      	cbz	r0, 80112ea <nk_str_len+0x12>
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	bf08      	it	eq
 80112e8:	2000      	moveq	r0, #0
    return s->len;
}
 80112ea:	bd08      	pop	{r3, pc}
    NK_ASSERT(s);
 80112ec:	4b03      	ldr	r3, [pc, #12]	; (80112fc <nk_str_len+0x24>)
 80112ee:	4a04      	ldr	r2, [pc, #16]	; (8011300 <nk_str_len+0x28>)
 80112f0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80112f4:	4803      	ldr	r0, [pc, #12]	; (8011304 <nk_str_len+0x2c>)
 80112f6:	f005 f929 	bl	801654c <__assert_func>
 80112fa:	bf00      	nop
 80112fc:	0801ae58 	.word	0x0801ae58
 8011300:	0801b86c 	.word	0x0801b86c
 8011304:	0801b6c8 	.word	0x0801b6c8

08011308 <nk_str_len_char>:
NK_API int
nk_str_len_char(struct nk_str *s)
{
 8011308:	b508      	push	{r3, lr}
    NK_ASSERT(s);
 801130a:	b120      	cbz	r0, 8011316 <nk_str_len_char+0xe>
 801130c:	4603      	mov	r3, r0
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801130e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8011310:	b100      	cbz	r0, 8011314 <nk_str_len_char+0xc>
    return (int)s->buffer.allocated;
 8011312:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
}
 8011314:	bd08      	pop	{r3, pc}
    NK_ASSERT(s);
 8011316:	4b03      	ldr	r3, [pc, #12]	; (8011324 <nk_str_len_char+0x1c>)
 8011318:	4a03      	ldr	r2, [pc, #12]	; (8011328 <nk_str_len_char+0x20>)
 801131a:	f240 11af 	movw	r1, #431	; 0x1af
 801131e:	4803      	ldr	r0, [pc, #12]	; (801132c <nk_str_len_char+0x24>)
 8011320:	f005 f914 	bl	801654c <__assert_func>
 8011324:	0801ae58 	.word	0x0801ae58
 8011328:	0801b844 	.word	0x0801b844
 801132c:	0801b6c8 	.word	0x0801b6c8

08011330 <nk_style_item_color>:
{
    return nk_color_names[c];
}
NK_API struct nk_style_item
nk_style_item_color(struct nk_color col)
{
 8011330:	b082      	sub	sp, #8
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
    i.data.color = col;
 8011332:	6041      	str	r1, [r0, #4]
    return i;
 8011334:	2200      	movs	r2, #0
 8011336:	7002      	strb	r2, [r0, #0]
}
 8011338:	b002      	add	sp, #8
 801133a:	4770      	bx	lr

0801133c <nk_style_item_hide>:
    i.data.slice = slice;
    return i;
}
NK_API struct nk_style_item
nk_style_item_hide(void)
{
 801133c:	b510      	push	{r4, lr}
 801133e:	4604      	mov	r4, r0
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
    i.data.color = nk_rgba(0,0,0,0);
 8011340:	2300      	movs	r3, #0
 8011342:	461a      	mov	r2, r3
 8011344:	4619      	mov	r1, r3
 8011346:	4618      	mov	r0, r3
 8011348:	f7f8 fd68 	bl	8009e1c <nk_rgba>
 801134c:	6060      	str	r0, [r4, #4]
    return i;
 801134e:	2300      	movs	r3, #0
 8011350:	7023      	strb	r3, [r4, #0]
}
 8011352:	4620      	mov	r0, r4
 8011354:	bd10      	pop	{r4, pc}
	...

08011358 <nk_style_from_table>:
NK_API void
nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)
{
 8011358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135c:	ed2d 8b04 	vpush	{d8-d9}
 8011360:	b091      	sub	sp, #68	; 0x44
    struct nk_style_combo *combo;
    struct nk_style_chart *chart;
    struct nk_style_tab *tab;
    struct nk_style_window *win;

    NK_ASSERT(ctx);
 8011362:	2800      	cmp	r0, #0
 8011364:	f001 83a1 	beq.w	8012aaa <nk_style_from_table+0x1752>
 8011368:	460c      	mov	r4, r1
 801136a:	4605      	mov	r5, r0
    if (!ctx) return;
    style = &ctx->style;
    table = (!table) ? nk_default_color_style: table;
 801136c:	4bf0      	ldr	r3, [pc, #960]	; (8011730 <nk_style_from_table+0x3d8>)
 801136e:	2900      	cmp	r1, #0
 8011370:	bf08      	it	eq
 8011372:	461c      	moveq	r4, r3

    /* default text */
    text = &style->text;
    text->color = table[NK_COLOR_TEXT];
 8011374:	6820      	ldr	r0, [r4, #0]
 8011376:	f8c5 0194 	str.w	r0, [r5, #404]	; 0x194
    text->padding = nk_vec2(0,0);
 801137a:	ed9f 8aee 	vldr	s16, [pc, #952]	; 8011734 <nk_style_from_table+0x3dc>
 801137e:	eef0 0a48 	vmov.f32	s1, s16
 8011382:	eeb0 0a48 	vmov.f32	s0, s16
 8011386:	f7fc fa5f 	bl	800d848 <nk_vec2>
 801138a:	ed85 0a66 	vstr	s0, [r5, #408]	; 0x198
 801138e:	edc5 0a67 	vstr	s1, [r5, #412]	; 0x19c

    /* default button */
    button = &style->button;
 8011392:	f505 76d0 	add.w	r6, r5, #416	; 0x1a0
    nk_zero_struct(*button);
 8011396:	2198      	movs	r1, #152	; 0x98
 8011398:	4630      	mov	r0, r6
 801139a:	f003 fcf5 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);
 801139e:	6921      	ldr	r1, [r4, #16]
 80113a0:	a802      	add	r0, sp, #8
 80113a2:	f7ff ffc5 	bl	8011330 <nk_style_item_color>
 80113a6:	4637      	mov	r7, r6
 80113a8:	f10d 0c08 	add.w	ip, sp, #8
 80113ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80113b2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80113b6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 80113ba:	6961      	ldr	r1, [r4, #20]
 80113bc:	a802      	add	r0, sp, #8
 80113be:	f7ff ffb7 	bl	8011330 <nk_style_item_color>
 80113c2:	f505 77de 	add.w	r7, r5, #444	; 0x1bc
 80113c6:	f10d 0c08 	add.w	ip, sp, #8
 80113ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80113d0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80113d4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 80113d8:	69a1      	ldr	r1, [r4, #24]
 80113da:	a802      	add	r0, sp, #8
 80113dc:	f7ff ffa8 	bl	8011330 <nk_style_item_color>
 80113e0:	f505 77ec 	add.w	r7, r5, #472	; 0x1d8
 80113e4:	f10d 0c08 	add.w	ip, sp, #8
 80113e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80113ee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80113f2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_BORDER];
 80113f6:	68e0      	ldr	r0, [r4, #12]
 80113f8:	f8c5 01f4 	str.w	r0, [r5, #500]	; 0x1f4
    button->text_background = table[NK_COLOR_BUTTON];
 80113fc:	6920      	ldr	r0, [r4, #16]
 80113fe:	f8c5 01f8 	str.w	r0, [r5, #504]	; 0x1f8
    button->text_normal     = table[NK_COLOR_TEXT];
 8011402:	6820      	ldr	r0, [r4, #0]
 8011404:	f8c5 01fc 	str.w	r0, [r5, #508]	; 0x1fc
    button->text_hover      = table[NK_COLOR_TEXT];
 8011408:	6820      	ldr	r0, [r4, #0]
 801140a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    button->text_active     = table[NK_COLOR_TEXT];
 801140e:	6820      	ldr	r0, [r4, #0]
 8011410:	f8c5 0204 	str.w	r0, [r5, #516]	; 0x204
    button->padding         = nk_vec2(2.0f,2.0f);
 8011414:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8011418:	eeb0 0a60 	vmov.f32	s0, s1
 801141c:	f7fc fa14 	bl	800d848 <nk_vec2>
 8011420:	ed85 0a85 	vstr	s0, [r5, #532]	; 0x214
 8011424:	edc5 0a86 	vstr	s1, [r5, #536]	; 0x218
    button->image_padding   = nk_vec2(0.0f,0.0f);
 8011428:	eef0 0a48 	vmov.f32	s1, s16
 801142c:	eeb0 0a48 	vmov.f32	s0, s16
 8011430:	f7fc fa0a 	bl	800d848 <nk_vec2>
 8011434:	ed85 0a87 	vstr	s0, [r5, #540]	; 0x21c
 8011438:	edc5 0a88 	vstr	s1, [r5, #544]	; 0x220
    button->touch_padding   = nk_vec2(0.0f, 0.0f);
 801143c:	eef0 0a48 	vmov.f32	s1, s16
 8011440:	eeb0 0a48 	vmov.f32	s0, s16
 8011444:	f7fc fa00 	bl	800d848 <nk_vec2>
 8011448:	ed85 0a89 	vstr	s0, [r5, #548]	; 0x224
 801144c:	edc5 0a8a 	vstr	s1, [r5, #552]	; 0x228
    button->userdata        = nk_handle_ptr(0);
 8011450:	2000      	movs	r0, #0
 8011452:	f7fb fb1f 	bl	800ca94 <nk_handle_ptr>
 8011456:	f8c5 022c 	str.w	r0, [r5, #556]	; 0x22c
    button->text_alignment  = NK_TEXT_CENTERED;
 801145a:	f04f 0812 	mov.w	r8, #18
 801145e:	f8c5 8208 	str.w	r8, [r5, #520]	; 0x208
    button->border          = 1.0f;
 8011462:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8011466:	f8c5 a20c 	str.w	sl, [r5, #524]	; 0x20c
    button->rounding        = 4.0f;
 801146a:	eef1 8a00 	vmov.f32	s17, #16	; 0x40800000  4.0
 801146e:	edc5 8a84 	vstr	s17, [r5, #528]	; 0x210
    button->draw_begin      = 0;
 8011472:	2700      	movs	r7, #0
 8011474:	f8c5 7230 	str.w	r7, [r5, #560]	; 0x230
    button->draw_end        = 0;
 8011478:	f8c5 7234 	str.w	r7, [r5, #564]	; 0x234

    /* contextual button */
    button = &style->contextual_button;
 801147c:	f505 790e 	add.w	r9, r5, #568	; 0x238
    nk_zero_struct(*button);
 8011480:	2198      	movs	r1, #152	; 0x98
 8011482:	4648      	mov	r0, r9
 8011484:	f003 fc80 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8011488:	6861      	ldr	r1, [r4, #4]
 801148a:	a802      	add	r0, sp, #8
 801148c:	f7ff ff50 	bl	8011330 <nk_style_item_color>
 8011490:	464e      	mov	r6, r9
 8011492:	f10d 0c08 	add.w	ip, sp, #8
 8011496:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801149a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801149c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80114a0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 80114a4:	6961      	ldr	r1, [r4, #20]
 80114a6:	a802      	add	r0, sp, #8
 80114a8:	f7ff ff42 	bl	8011330 <nk_style_item_color>
 80114ac:	f505 7615 	add.w	r6, r5, #596	; 0x254
 80114b0:	f10d 0c08 	add.w	ip, sp, #8
 80114b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80114b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80114ba:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80114be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 80114c2:	69a1      	ldr	r1, [r4, #24]
 80114c4:	a802      	add	r0, sp, #8
 80114c6:	f7ff ff33 	bl	8011330 <nk_style_item_color>
 80114ca:	f505 761c 	add.w	r6, r5, #624	; 0x270
 80114ce:	f10d 0c08 	add.w	ip, sp, #8
 80114d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80114d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80114d8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80114dc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 80114e0:	6860      	ldr	r0, [r4, #4]
 80114e2:	f8c5 028c 	str.w	r0, [r5, #652]	; 0x28c
    button->text_background = table[NK_COLOR_WINDOW];
 80114e6:	6860      	ldr	r0, [r4, #4]
 80114e8:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
    button->text_normal     = table[NK_COLOR_TEXT];
 80114ec:	6820      	ldr	r0, [r4, #0]
 80114ee:	f8c5 0294 	str.w	r0, [r5, #660]	; 0x294
    button->text_hover      = table[NK_COLOR_TEXT];
 80114f2:	6820      	ldr	r0, [r4, #0]
 80114f4:	f8c5 0298 	str.w	r0, [r5, #664]	; 0x298
    button->text_active     = table[NK_COLOR_TEXT];
 80114f8:	6820      	ldr	r0, [r4, #0]
 80114fa:	f8c5 029c 	str.w	r0, [r5, #668]	; 0x29c
    button->padding         = nk_vec2(2.0f,2.0f);
 80114fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8011502:	eeb0 0a60 	vmov.f32	s0, s1
 8011506:	f7fc f99f 	bl	800d848 <nk_vec2>
 801150a:	ed85 0aab 	vstr	s0, [r5, #684]	; 0x2ac
 801150e:	edc5 0aac 	vstr	s1, [r5, #688]	; 0x2b0
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8011512:	eef0 0a48 	vmov.f32	s1, s16
 8011516:	eeb0 0a48 	vmov.f32	s0, s16
 801151a:	f7fc f995 	bl	800d848 <nk_vec2>
 801151e:	ed85 0aaf 	vstr	s0, [r5, #700]	; 0x2bc
 8011522:	edc5 0ab0 	vstr	s1, [r5, #704]	; 0x2c0
    button->userdata        = nk_handle_ptr(0);
 8011526:	4638      	mov	r0, r7
 8011528:	f7fb fab4 	bl	800ca94 <nk_handle_ptr>
 801152c:	f8c5 02c4 	str.w	r0, [r5, #708]	; 0x2c4
    button->text_alignment  = NK_TEXT_CENTERED;
 8011530:	f8c5 82a0 	str.w	r8, [r5, #672]	; 0x2a0
    button->border          = 0.0f;
 8011534:	ed85 8aa9 	vstr	s16, [r5, #676]	; 0x2a4
    button->rounding        = 0.0f;
 8011538:	ed85 8aaa 	vstr	s16, [r5, #680]	; 0x2a8
    button->draw_begin      = 0;
 801153c:	f8c5 72c8 	str.w	r7, [r5, #712]	; 0x2c8
    button->draw_end        = 0;
 8011540:	f8c5 72cc 	str.w	r7, [r5, #716]	; 0x2cc

    /* menu button */
    button = &style->menu_button;
 8011544:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    nk_zero_struct(*button);
 8011548:	2198      	movs	r1, #152	; 0x98
 801154a:	4648      	mov	r0, r9
 801154c:	f003 fc1c 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8011550:	6861      	ldr	r1, [r4, #4]
 8011552:	a802      	add	r0, sp, #8
 8011554:	f7ff feec 	bl	8011330 <nk_style_item_color>
 8011558:	464e      	mov	r6, r9
 801155a:	f10d 0c08 	add.w	ip, sp, #8
 801155e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011562:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011564:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011568:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801156c:	6861      	ldr	r1, [r4, #4]
 801156e:	a802      	add	r0, sp, #8
 8011570:	f7ff fede 	bl	8011330 <nk_style_item_color>
 8011574:	f505 763b 	add.w	r6, r5, #748	; 0x2ec
 8011578:	f10d 0c08 	add.w	ip, sp, #8
 801157c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011580:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011582:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011586:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801158a:	6861      	ldr	r1, [r4, #4]
 801158c:	a802      	add	r0, sp, #8
 801158e:	f7ff fecf 	bl	8011330 <nk_style_item_color>
 8011592:	f505 7642 	add.w	r6, r5, #776	; 0x308
 8011596:	f10d 0c08 	add.w	ip, sp, #8
 801159a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801159e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80115a0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80115a4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 80115a8:	6860      	ldr	r0, [r4, #4]
 80115aa:	f8c5 0324 	str.w	r0, [r5, #804]	; 0x324
    button->text_background = table[NK_COLOR_WINDOW];
 80115ae:	6860      	ldr	r0, [r4, #4]
 80115b0:	f8c5 0328 	str.w	r0, [r5, #808]	; 0x328
    button->text_normal     = table[NK_COLOR_TEXT];
 80115b4:	6820      	ldr	r0, [r4, #0]
 80115b6:	f8c5 032c 	str.w	r0, [r5, #812]	; 0x32c
    button->text_hover      = table[NK_COLOR_TEXT];
 80115ba:	6820      	ldr	r0, [r4, #0]
 80115bc:	f8c5 0330 	str.w	r0, [r5, #816]	; 0x330
    button->text_active     = table[NK_COLOR_TEXT];
 80115c0:	6820      	ldr	r0, [r4, #0]
 80115c2:	f8c5 0334 	str.w	r0, [r5, #820]	; 0x334
    button->padding         = nk_vec2(2.0f,2.0f);
 80115c6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80115ca:	eeb0 0a60 	vmov.f32	s0, s1
 80115ce:	f7fc f93b 	bl	800d848 <nk_vec2>
 80115d2:	ed85 0ad1 	vstr	s0, [r5, #836]	; 0x344
 80115d6:	edc5 0ad2 	vstr	s1, [r5, #840]	; 0x348
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80115da:	eef0 0a48 	vmov.f32	s1, s16
 80115de:	eeb0 0a48 	vmov.f32	s0, s16
 80115e2:	f7fc f931 	bl	800d848 <nk_vec2>
 80115e6:	ed85 0ad5 	vstr	s0, [r5, #852]	; 0x354
 80115ea:	edc5 0ad6 	vstr	s1, [r5, #856]	; 0x358
    button->userdata        = nk_handle_ptr(0);
 80115ee:	4638      	mov	r0, r7
 80115f0:	f7fb fa50 	bl	800ca94 <nk_handle_ptr>
 80115f4:	f8c5 035c 	str.w	r0, [r5, #860]	; 0x35c
    button->text_alignment  = NK_TEXT_CENTERED;
 80115f8:	f8c5 8338 	str.w	r8, [r5, #824]	; 0x338
    button->border          = 0.0f;
 80115fc:	ed85 8acf 	vstr	s16, [r5, #828]	; 0x33c
    button->rounding        = 1.0f;
 8011600:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340
    button->draw_begin      = 0;
 8011604:	f8c5 7360 	str.w	r7, [r5, #864]	; 0x360
    button->draw_end        = 0;
 8011608:	f8c5 7364 	str.w	r7, [r5, #868]	; 0x364

    /* checkbox toggle */
    toggle = &style->checkbox;
 801160c:	f505 6686 	add.w	r6, r5, #1072	; 0x430
    nk_zero_struct(*toggle);
 8011610:	21c8      	movs	r1, #200	; 0xc8
 8011612:	4630      	mov	r0, r6
 8011614:	f003 fbb8 	bl	8014d88 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8011618:	69e1      	ldr	r1, [r4, #28]
 801161a:	a802      	add	r0, sp, #8
 801161c:	f7ff fe88 	bl	8011330 <nk_style_item_color>
 8011620:	46b4      	mov	ip, r6
 8011622:	f10d 0e08 	add.w	lr, sp, #8
 8011626:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801162a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801162e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011632:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8011636:	6a21      	ldr	r1, [r4, #32]
 8011638:	a802      	add	r0, sp, #8
 801163a:	f7ff fe79 	bl	8011330 <nk_style_item_color>
 801163e:	f205 4c4c 	addw	ip, r5, #1100	; 0x44c
 8011642:	f10d 0e08 	add.w	lr, sp, #8
 8011646:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801164a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801164e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011652:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8011656:	6a21      	ldr	r1, [r4, #32]
 8011658:	a802      	add	r0, sp, #8
 801165a:	f7ff fe69 	bl	8011330 <nk_style_item_color>
 801165e:	f505 6c8d 	add.w	ip, r5, #1128	; 0x468
 8011662:	f10d 0e08 	add.w	lr, sp, #8
 8011666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801166a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801166e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011672:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8011676:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011678:	a802      	add	r0, sp, #8
 801167a:	f7ff fe59 	bl	8011330 <nk_style_item_color>
 801167e:	f505 6c91 	add.w	ip, r5, #1160	; 0x488
 8011682:	f10d 0e08 	add.w	lr, sp, #8
 8011686:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801168a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801168e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011692:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8011696:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011698:	a802      	add	r0, sp, #8
 801169a:	f7ff fe49 	bl	8011330 <nk_style_item_color>
 801169e:	f205 4ca4 	addw	ip, r5, #1188	; 0x4a4
 80116a2:	f10d 0e08 	add.w	lr, sp, #8
 80116a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80116aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116ae:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80116b2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 80116b6:	4638      	mov	r0, r7
 80116b8:	f7fb f9ec 	bl	800ca94 <nk_handle_ptr>
 80116bc:	f8c5 04ec 	str.w	r0, [r5, #1260]	; 0x4ec
    toggle->text_background = table[NK_COLOR_WINDOW];
 80116c0:	6860      	ldr	r0, [r4, #4]
 80116c2:	f8c5 04cc 	str.w	r0, [r5, #1228]	; 0x4cc
    toggle->text_normal     = table[NK_COLOR_TEXT];
 80116c6:	6820      	ldr	r0, [r4, #0]
 80116c8:	f8c5 04c0 	str.w	r0, [r5, #1216]	; 0x4c0
    toggle->text_hover      = table[NK_COLOR_TEXT];
 80116cc:	6820      	ldr	r0, [r4, #0]
 80116ce:	f8c5 04c4 	str.w	r0, [r5, #1220]	; 0x4c4
    toggle->text_active     = table[NK_COLOR_TEXT];
 80116d2:	6820      	ldr	r0, [r4, #0]
 80116d4:	f8c5 04c8 	str.w	r0, [r5, #1224]	; 0x4c8
    toggle->padding         = nk_vec2(2.0f, 2.0f);
 80116d8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80116dc:	eeb0 0a60 	vmov.f32	s0, s1
 80116e0:	f7fc f8b2 	bl	800d848 <nk_vec2>
 80116e4:	ed86 0a29 	vstr	s0, [r6, #164]	; 0xa4
 80116e8:	edc6 0a2a 	vstr	s1, [r6, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 80116ec:	eef0 0a48 	vmov.f32	s1, s16
 80116f0:	eeb0 0a48 	vmov.f32	s0, s16
 80116f4:	f7fc f8a8 	bl	800d848 <nk_vec2>
 80116f8:	ed86 0a2b 	vstr	s0, [r6, #172]	; 0xac
 80116fc:	edc6 0a2c 	vstr	s1, [r6, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8011700:	463b      	mov	r3, r7
 8011702:	463a      	mov	r2, r7
 8011704:	4639      	mov	r1, r7
 8011706:	4638      	mov	r0, r7
 8011708:	f7f8 fb88 	bl	8009e1c <nk_rgba>
 801170c:	f8c5 0484 	str.w	r0, [r5, #1156]	; 0x484
    toggle->border          = 0.0f;
 8011710:	ed86 8a2e 	vstr	s16, [r6, #184]	; 0xb8
    toggle->spacing         = 4;
 8011714:	edc6 8a2d 	vstr	s17, [r6, #180]	; 0xb4

    /* option toggle */
    toggle = &style->option;
 8011718:	f505 795a 	add.w	r9, r5, #872	; 0x368
    nk_zero_struct(*toggle);
 801171c:	21c8      	movs	r1, #200	; 0xc8
 801171e:	4648      	mov	r0, r9
 8011720:	f003 fb32 	bl	8014d88 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8011724:	69e1      	ldr	r1, [r4, #28]
 8011726:	a802      	add	r0, sp, #8
 8011728:	f7ff fe02 	bl	8011330 <nk_style_item_color>
 801172c:	464e      	mov	r6, r9
 801172e:	e003      	b.n	8011738 <nk_style_from_table+0x3e0>
 8011730:	0801b8dc 	.word	0x0801b8dc
 8011734:	00000000 	.word	0x00000000
 8011738:	f10d 0c08 	add.w	ip, sp, #8
 801173c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011740:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011742:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011746:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801174a:	6a21      	ldr	r1, [r4, #32]
 801174c:	a802      	add	r0, sp, #8
 801174e:	f7ff fdef 	bl	8011330 <nk_style_item_color>
 8011752:	f505 7661 	add.w	r6, r5, #900	; 0x384
 8011756:	f10d 0c08 	add.w	ip, sp, #8
 801175a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801175e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011760:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011764:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8011768:	6a21      	ldr	r1, [r4, #32]
 801176a:	a802      	add	r0, sp, #8
 801176c:	f7ff fde0 	bl	8011330 <nk_style_item_color>
 8011770:	f505 7668 	add.w	r6, r5, #928	; 0x3a0
 8011774:	f10d 0c08 	add.w	ip, sp, #8
 8011778:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801177c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801177e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011782:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8011786:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011788:	a802      	add	r0, sp, #8
 801178a:	f7ff fdd1 	bl	8011330 <nk_style_item_color>
 801178e:	f505 7670 	add.w	r6, r5, #960	; 0x3c0
 8011792:	f10d 0c08 	add.w	ip, sp, #8
 8011796:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801179a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801179c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80117a0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 80117a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80117a6:	a802      	add	r0, sp, #8
 80117a8:	f7ff fdc2 	bl	8011330 <nk_style_item_color>
 80117ac:	f505 7677 	add.w	r6, r5, #988	; 0x3dc
 80117b0:	f10d 0c08 	add.w	ip, sp, #8
 80117b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80117b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80117ba:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80117be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 80117c2:	4638      	mov	r0, r7
 80117c4:	f7fb f966 	bl	800ca94 <nk_handle_ptr>
 80117c8:	f8c5 0424 	str.w	r0, [r5, #1060]	; 0x424
    toggle->text_background = table[NK_COLOR_WINDOW];
 80117cc:	6860      	ldr	r0, [r4, #4]
 80117ce:	f8c5 0404 	str.w	r0, [r5, #1028]	; 0x404
    toggle->text_normal     = table[NK_COLOR_TEXT];
 80117d2:	6820      	ldr	r0, [r4, #0]
 80117d4:	f8c5 03f8 	str.w	r0, [r5, #1016]	; 0x3f8
    toggle->text_hover      = table[NK_COLOR_TEXT];
 80117d8:	6820      	ldr	r0, [r4, #0]
 80117da:	f8c5 03fc 	str.w	r0, [r5, #1020]	; 0x3fc
    toggle->text_active     = table[NK_COLOR_TEXT];
 80117de:	6820      	ldr	r0, [r4, #0]
 80117e0:	f8c5 0400 	str.w	r0, [r5, #1024]	; 0x400
    toggle->padding         = nk_vec2(3.0f, 3.0f);
 80117e4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80117e8:	eeb0 0a60 	vmov.f32	s0, s1
 80117ec:	f7fc f82c 	bl	800d848 <nk_vec2>
 80117f0:	ed89 0a29 	vstr	s0, [r9, #164]	; 0xa4
 80117f4:	edc9 0a2a 	vstr	s1, [r9, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 80117f8:	eef0 0a48 	vmov.f32	s1, s16
 80117fc:	eeb0 0a48 	vmov.f32	s0, s16
 8011800:	f7fc f822 	bl	800d848 <nk_vec2>
 8011804:	ed89 0a2b 	vstr	s0, [r9, #172]	; 0xac
 8011808:	edc9 0a2c 	vstr	s1, [r9, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 801180c:	463b      	mov	r3, r7
 801180e:	463a      	mov	r2, r7
 8011810:	4639      	mov	r1, r7
 8011812:	4638      	mov	r0, r7
 8011814:	f7f8 fb02 	bl	8009e1c <nk_rgba>
 8011818:	f8c5 03bc 	str.w	r0, [r5, #956]	; 0x3bc
    toggle->border          = 0.0f;
 801181c:	f505 6384 	add.w	r3, r5, #1056	; 0x420
 8011820:	ed83 8a00 	vstr	s16, [r3]
    toggle->spacing         = 4;
 8011824:	f205 431c 	addw	r3, r5, #1052	; 0x41c
 8011828:	edc3 8a00 	vstr	s17, [r3]

    /* selectable */
    select = &style->selectable;
 801182c:	f505 669f 	add.w	r6, r5, #1272	; 0x4f8
    nk_zero_struct(*select);
 8011830:	21f0      	movs	r1, #240	; 0xf0
 8011832:	4630      	mov	r0, r6
 8011834:	f003 faa8 	bl	8014d88 <nk_zero>
    select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);
 8011838:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801183a:	a802      	add	r0, sp, #8
 801183c:	f7ff fd78 	bl	8011330 <nk_style_item_color>
 8011840:	46b4      	mov	ip, r6
 8011842:	f10d 0e08 	add.w	lr, sp, #8
 8011846:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801184a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801184e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011852:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);
 8011856:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011858:	a802      	add	r0, sp, #8
 801185a:	f7ff fd69 	bl	8011330 <nk_style_item_color>
 801185e:	f205 5c14 	addw	ip, r5, #1300	; 0x514
 8011862:	f10d 0e08 	add.w	lr, sp, #8
 8011866:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801186a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801186e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011872:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);
 8011876:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011878:	a802      	add	r0, sp, #8
 801187a:	f7ff fd59 	bl	8011330 <nk_style_item_color>
 801187e:	f505 6ca6 	add.w	ip, r5, #1328	; 0x530
 8011882:	f10d 0e08 	add.w	lr, sp, #8
 8011886:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801188a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801188e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011892:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8011896:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011898:	a802      	add	r0, sp, #8
 801189a:	f7ff fd49 	bl	8011330 <nk_style_item_color>
 801189e:	f205 5c4c 	addw	ip, r5, #1356	; 0x54c
 80118a2:	f10d 0e08 	add.w	lr, sp, #8
 80118a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118ae:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80118b2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 80118b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80118b8:	a802      	add	r0, sp, #8
 80118ba:	f7ff fd39 	bl	8011330 <nk_style_item_color>
 80118be:	f505 6cad 	add.w	ip, r5, #1384	; 0x568
 80118c2:	f10d 0e08 	add.w	lr, sp, #8
 80118c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118ce:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80118d2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 80118d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80118d8:	a802      	add	r0, sp, #8
 80118da:	f7ff fd29 	bl	8011330 <nk_style_item_color>
 80118de:	f205 5c84 	addw	ip, r5, #1412	; 0x584
 80118e2:	f10d 0e08 	add.w	lr, sp, #8
 80118e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118ee:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80118f2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    select->text_normal     = table[NK_COLOR_TEXT];
 80118f6:	6820      	ldr	r0, [r4, #0]
 80118f8:	f8c5 05a0 	str.w	r0, [r5, #1440]	; 0x5a0
    select->text_hover      = table[NK_COLOR_TEXT];
 80118fc:	6820      	ldr	r0, [r4, #0]
 80118fe:	f8c5 05a4 	str.w	r0, [r5, #1444]	; 0x5a4
    select->text_pressed    = table[NK_COLOR_TEXT];
 8011902:	6820      	ldr	r0, [r4, #0]
 8011904:	f8c5 05a8 	str.w	r0, [r5, #1448]	; 0x5a8
    select->text_normal_active  = table[NK_COLOR_TEXT];
 8011908:	6820      	ldr	r0, [r4, #0]
 801190a:	f8c5 05ac 	str.w	r0, [r5, #1452]	; 0x5ac
    select->text_hover_active   = table[NK_COLOR_TEXT];
 801190e:	6820      	ldr	r0, [r4, #0]
 8011910:	f8c5 05b0 	str.w	r0, [r5, #1456]	; 0x5b0
    select->text_pressed_active = table[NK_COLOR_TEXT];
 8011914:	6820      	ldr	r0, [r4, #0]
 8011916:	f8c5 05b4 	str.w	r0, [r5, #1460]	; 0x5b4
    select->padding         = nk_vec2(2.0f,2.0f);
 801191a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801191e:	eeb0 0a60 	vmov.f32	s0, s1
 8011922:	f7fb ff91 	bl	800d848 <nk_vec2>
 8011926:	ed86 0a33 	vstr	s0, [r6, #204]	; 0xcc
 801192a:	edc6 0a34 	vstr	s1, [r6, #208]	; 0xd0
    select->image_padding   = nk_vec2(2.0f,2.0f);
 801192e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8011932:	eeb0 0a60 	vmov.f32	s0, s1
 8011936:	f7fb ff87 	bl	800d848 <nk_vec2>
 801193a:	ed86 0a37 	vstr	s0, [r6, #220]	; 0xdc
 801193e:	edc6 0a38 	vstr	s1, [r6, #224]	; 0xe0
    select->touch_padding   = nk_vec2(0,0);
 8011942:	eef0 0a48 	vmov.f32	s1, s16
 8011946:	eeb0 0a48 	vmov.f32	s0, s16
 801194a:	f7fb ff7d 	bl	800d848 <nk_vec2>
 801194e:	ed86 0a35 	vstr	s0, [r6, #212]	; 0xd4
 8011952:	edc6 0a36 	vstr	s1, [r6, #216]	; 0xd8
    select->userdata        = nk_handle_ptr(0);
 8011956:	4638      	mov	r0, r7
 8011958:	f7fb f89c 	bl	800ca94 <nk_handle_ptr>
 801195c:	f8c5 05dc 	str.w	r0, [r5, #1500]	; 0x5dc
    select->rounding        = 0.0f;
 8011960:	ed86 8a32 	vstr	s16, [r6, #200]	; 0xc8
    select->draw_begin      = 0;
 8011964:	f8c5 75e0 	str.w	r7, [r5, #1504]	; 0x5e0
    select->draw_end        = 0;
 8011968:	f8c5 75e4 	str.w	r7, [r5, #1508]	; 0x5e4

    /* slider */
    slider = &style->slider;
 801196c:	f505 66bd 	add.w	r6, r5, #1512	; 0x5e8
    nk_zero_struct(*slider);
 8011970:	f44f 7109 	mov.w	r1, #548	; 0x224
 8011974:	4630      	mov	r0, r6
 8011976:	f003 fa07 	bl	8014d88 <nk_zero>
    slider->normal          = nk_style_item_hide();
 801197a:	a802      	add	r0, sp, #8
 801197c:	f7ff fcde 	bl	801133c <nk_style_item_hide>
 8011980:	46b4      	mov	ip, r6
 8011982:	f10d 0e08 	add.w	lr, sp, #8
 8011986:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801198a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801198e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011992:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    slider->hover           = nk_style_item_hide();
 8011996:	a802      	add	r0, sp, #8
 8011998:	f7ff fcd0 	bl	801133c <nk_style_item_hide>
 801199c:	f205 6c04 	addw	ip, r5, #1540	; 0x604
 80119a0:	f10d 0e08 	add.w	lr, sp, #8
 80119a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119ac:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80119b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    slider->active          = nk_style_item_hide();
 80119b4:	a802      	add	r0, sp, #8
 80119b6:	f7ff fcc1 	bl	801133c <nk_style_item_hide>
 80119ba:	f505 6cc4 	add.w	ip, r5, #1568	; 0x620
 80119be:	f10d 0e08 	add.w	lr, sp, #8
 80119c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119ca:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80119ce:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    slider->bar_normal      = table[NK_COLOR_SLIDER];
 80119d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119d4:	f8c5 0640 	str.w	r0, [r5, #1600]	; 0x640
    slider->bar_hover       = table[NK_COLOR_SLIDER];
 80119d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119da:	f8c5 0644 	str.w	r0, [r5, #1604]	; 0x644
    slider->bar_active      = table[NK_COLOR_SLIDER];
 80119de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119e0:	f8c5 0648 	str.w	r0, [r5, #1608]	; 0x648
    slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];
 80119e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80119e6:	f8c5 064c 	str.w	r0, [r5, #1612]	; 0x64c
    slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 80119ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119ec:	a802      	add	r0, sp, #8
 80119ee:	f7ff fc9f 	bl	8011330 <nk_style_item_color>
 80119f2:	f505 6cca 	add.w	ip, r5, #1616	; 0x650
 80119f6:	f10d 0e08 	add.w	lr, sp, #8
 80119fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a02:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011a06:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 8011a0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011a0c:	a802      	add	r0, sp, #8
 8011a0e:	f7ff fc8f 	bl	8011330 <nk_style_item_color>
 8011a12:	f205 6c6c 	addw	ip, r5, #1644	; 0x66c
 8011a16:	f10d 0e08 	add.w	lr, sp, #8
 8011a1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a22:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011a26:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 8011a2a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011a2c:	a802      	add	r0, sp, #8
 8011a2e:	f7ff fc7f 	bl	8011330 <nk_style_item_color>
 8011a32:	f505 6cd1 	add.w	ip, r5, #1672	; 0x688
 8011a36:	f10d 0e08 	add.w	lr, sp, #8
 8011a3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a42:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011a46:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;
 8011a4a:	230a      	movs	r3, #10
 8011a4c:	f885 37fc 	strb.w	r3, [r5, #2044]	; 0x7fc
    slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;
 8011a50:	2309      	movs	r3, #9
 8011a52:	f885 37fd 	strb.w	r3, [r5, #2045]	; 0x7fd
    slider->cursor_size     = nk_vec2(16,16);
 8011a56:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 8011a5a:	eeb0 0a60 	vmov.f32	s0, s1
 8011a5e:	f7fb fef3 	bl	800d848 <nk_vec2>
 8011a62:	ed86 0a36 	vstr	s0, [r6, #216]	; 0xd8
 8011a66:	edc6 0a37 	vstr	s1, [r6, #220]	; 0xdc
    slider->padding         = nk_vec2(2,2);
 8011a6a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8011a6e:	eeb0 0a60 	vmov.f32	s0, s1
 8011a72:	f7fb fee9 	bl	800d848 <nk_vec2>
 8011a76:	ed86 0a32 	vstr	s0, [r6, #200]	; 0xc8
 8011a7a:	edc6 0a33 	vstr	s1, [r6, #204]	; 0xcc
    slider->spacing         = nk_vec2(2,2);
 8011a7e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8011a82:	eeb0 0a60 	vmov.f32	s0, s1
 8011a86:	f7fb fedf 	bl	800d848 <nk_vec2>
 8011a8a:	ed86 0a34 	vstr	s0, [r6, #208]	; 0xd0
 8011a8e:	edc6 0a35 	vstr	s1, [r6, #212]	; 0xd4
    slider->userdata        = nk_handle_ptr(0);
 8011a92:	4638      	mov	r0, r7
 8011a94:	f7fa fffe 	bl	800ca94 <nk_handle_ptr>
 8011a98:	f8c5 0800 	str.w	r0, [r5, #2048]	; 0x800
    slider->show_buttons    = nk_false;
 8011a9c:	f8c5 76c8 	str.w	r7, [r5, #1736]	; 0x6c8
    slider->bar_height      = 8;
 8011aa0:	eeb2 9a00 	vmov.f32	s18, #32	; 0x41000000  8.0
 8011aa4:	ed86 9a31 	vstr	s18, [r6, #196]	; 0xc4
    slider->rounding        = 0;
 8011aa8:	ed86 8a30 	vstr	s16, [r6, #192]	; 0xc0
    slider->draw_begin      = 0;
 8011aac:	f8c5 7804 	str.w	r7, [r5, #2052]	; 0x804
    slider->draw_end        = 0;
 8011ab0:	f8c5 7808 	str.w	r7, [r5, #2056]	; 0x808

    /* slider buttons */
    button = &style->slider.inc_button;
 8011ab4:	f205 66cc 	addw	r6, r5, #1740	; 0x6cc
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 8011ab8:	2228      	movs	r2, #40	; 0x28
 8011aba:	4611      	mov	r1, r2
 8011abc:	4610      	mov	r0, r2
 8011abe:	f7f8 f9e0 	bl	8009e82 <nk_rgb>
 8011ac2:	4601      	mov	r1, r0
 8011ac4:	900a      	str	r0, [sp, #40]	; 0x28
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f7ff fc32 	bl	8011330 <nk_style_item_color>
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 8011acc:	222a      	movs	r2, #42	; 0x2a
 8011ace:	4611      	mov	r1, r2
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	f7f8 f9d6 	bl	8009e82 <nk_rgb>
 8011ad6:	4601      	mov	r1, r0
 8011ad8:	900b      	str	r0, [sp, #44]	; 0x2c
 8011ada:	f505 60dd 	add.w	r0, r5, #1768	; 0x6e8
 8011ade:	f7ff fc27 	bl	8011330 <nk_style_item_color>
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 8011ae2:	222c      	movs	r2, #44	; 0x2c
 8011ae4:	4611      	mov	r1, r2
 8011ae6:	4610      	mov	r0, r2
 8011ae8:	f7f8 f9cb 	bl	8009e82 <nk_rgb>
 8011aec:	4601      	mov	r1, r0
 8011aee:	900c      	str	r0, [sp, #48]	; 0x30
 8011af0:	f205 7004 	addw	r0, r5, #1796	; 0x704
 8011af4:	f7ff fc1c 	bl	8011330 <nk_style_item_color>
    button->border_color    = nk_rgb(65,65,65);
 8011af8:	2241      	movs	r2, #65	; 0x41
 8011afa:	4611      	mov	r1, r2
 8011afc:	4610      	mov	r0, r2
 8011afe:	f7f8 f9c0 	bl	8009e82 <nk_rgb>
 8011b02:	f8c5 0720 	str.w	r0, [r5, #1824]	; 0x720
    button->text_background = nk_rgb(40,40,40);
 8011b06:	2228      	movs	r2, #40	; 0x28
 8011b08:	4611      	mov	r1, r2
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	f7f8 f9b9 	bl	8009e82 <nk_rgb>
 8011b10:	f8c5 0724 	str.w	r0, [r5, #1828]	; 0x724
    button->text_normal     = nk_rgb(175,175,175);
 8011b14:	22af      	movs	r2, #175	; 0xaf
 8011b16:	4611      	mov	r1, r2
 8011b18:	4610      	mov	r0, r2
 8011b1a:	f7f8 f9b2 	bl	8009e82 <nk_rgb>
 8011b1e:	f8c5 0728 	str.w	r0, [r5, #1832]	; 0x728
    button->text_hover      = nk_rgb(175,175,175);
 8011b22:	22af      	movs	r2, #175	; 0xaf
 8011b24:	4611      	mov	r1, r2
 8011b26:	4610      	mov	r0, r2
 8011b28:	f7f8 f9ab 	bl	8009e82 <nk_rgb>
 8011b2c:	f8c5 072c 	str.w	r0, [r5, #1836]	; 0x72c
    button->text_active     = nk_rgb(175,175,175);
 8011b30:	22af      	movs	r2, #175	; 0xaf
 8011b32:	4611      	mov	r1, r2
 8011b34:	4610      	mov	r0, r2
 8011b36:	f7f8 f9a4 	bl	8009e82 <nk_rgb>
 8011b3a:	f8c5 0730 	str.w	r0, [r5, #1840]	; 0x730
    button->padding         = nk_vec2(8.0f,8.0f);
 8011b3e:	eef0 0a49 	vmov.f32	s1, s18
 8011b42:	eeb0 0a49 	vmov.f32	s0, s18
 8011b46:	f7fb fe7f 	bl	800d848 <nk_vec2>
 8011b4a:	ed86 0a1d 	vstr	s0, [r6, #116]	; 0x74
 8011b4e:	edc6 0a1e 	vstr	s1, [r6, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8011b52:	eef0 0a48 	vmov.f32	s1, s16
 8011b56:	eeb0 0a48 	vmov.f32	s0, s16
 8011b5a:	f7fb fe75 	bl	800d848 <nk_vec2>
 8011b5e:	ed86 0a21 	vstr	s0, [r6, #132]	; 0x84
 8011b62:	edc6 0a22 	vstr	s1, [r6, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8011b66:	4638      	mov	r0, r7
 8011b68:	f7fa ff94 	bl	800ca94 <nk_handle_ptr>
 8011b6c:	f8c5 0758 	str.w	r0, [r5, #1880]	; 0x758
    button->text_alignment  = NK_TEXT_CENTERED;
 8011b70:	f8c5 8734 	str.w	r8, [r5, #1844]	; 0x734
    button->border          = 1.0f;
 8011b74:	f8c6 a06c 	str.w	sl, [r6, #108]	; 0x6c
    button->rounding        = 0.0f;
 8011b78:	ed86 8a1c 	vstr	s16, [r6, #112]	; 0x70
    button->draw_begin      = 0;
 8011b7c:	f8c5 775c 	str.w	r7, [r5, #1884]	; 0x75c
    button->draw_end        = 0;
 8011b80:	f8c5 7760 	str.w	r7, [r5, #1888]	; 0x760
    style->slider.dec_button = style->slider.inc_button;
 8011b84:	2298      	movs	r2, #152	; 0x98
 8011b86:	4631      	mov	r1, r6
 8011b88:	f205 7064 	addw	r0, r5, #1892	; 0x764
 8011b8c:	f005 fb06 	bl	801719c <memcpy>

    /* progressbar */
    prog = &style->progress;
 8011b90:	f605 080c 	addw	r8, r5, #2060	; 0x80c
    nk_zero_struct(*prog);
 8011b94:	21d4      	movs	r1, #212	; 0xd4
 8011b96:	4640      	mov	r0, r8
 8011b98:	f003 f8f6 	bl	8014d88 <nk_zero>
    prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8011b9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011b9e:	a802      	add	r0, sp, #8
 8011ba0:	f7ff fbc6 	bl	8011330 <nk_style_item_color>
 8011ba4:	4646      	mov	r6, r8
 8011ba6:	f10d 0c08 	add.w	ip, sp, #8
 8011baa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011bb0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011bb4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8011bb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011bba:	a802      	add	r0, sp, #8
 8011bbc:	f7ff fbb8 	bl	8011330 <nk_style_item_color>
 8011bc0:	f605 0628 	addw	r6, r5, #2088	; 0x828
 8011bc4:	f10d 0c08 	add.w	ip, sp, #8
 8011bc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011bce:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011bd2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8011bd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011bd8:	a802      	add	r0, sp, #8
 8011bda:	f7ff fba9 	bl	8011330 <nk_style_item_color>
 8011bde:	f605 0644 	addw	r6, r5, #2116	; 0x844
 8011be2:	f10d 0c08 	add.w	ip, sp, #8
 8011be6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011bec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011bf0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 8011bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bf6:	a802      	add	r0, sp, #8
 8011bf8:	f7ff fb9a 	bl	8011330 <nk_style_item_color>
 8011bfc:	f605 0664 	addw	r6, r5, #2148	; 0x864
 8011c00:	f10d 0c08 	add.w	ip, sp, #8
 8011c04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011c0a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011c0e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 8011c12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011c14:	a802      	add	r0, sp, #8
 8011c16:	f7ff fb8b 	bl	8011330 <nk_style_item_color>
 8011c1a:	f505 6608 	add.w	r6, r5, #2176	; 0x880
 8011c1e:	f10d 0c08 	add.w	ip, sp, #8
 8011c22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011c28:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011c2c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 8011c30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011c32:	a802      	add	r0, sp, #8
 8011c34:	f7ff fb7c 	bl	8011330 <nk_style_item_color>
 8011c38:	f605 0c9c 	addw	ip, r5, #2204	; 0x89c
 8011c3c:	ae02      	add	r6, sp, #8
 8011c3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011c40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c44:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011c48:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    prog->border_color      = nk_rgba(0,0,0,0);
 8011c4c:	463b      	mov	r3, r7
 8011c4e:	463a      	mov	r2, r7
 8011c50:	4639      	mov	r1, r7
 8011c52:	4638      	mov	r0, r7
 8011c54:	f7f8 f8e2 	bl	8009e1c <nk_rgba>
 8011c58:	f8c5 0860 	str.w	r0, [r5, #2144]	; 0x860
    prog->cursor_border_color = nk_rgba(0,0,0,0);
 8011c5c:	463b      	mov	r3, r7
 8011c5e:	463a      	mov	r2, r7
 8011c60:	4639      	mov	r1, r7
 8011c62:	4638      	mov	r0, r7
 8011c64:	f7f8 f8da 	bl	8009e1c <nk_rgba>
 8011c68:	f8c5 08b8 	str.w	r0, [r5, #2232]	; 0x8b8
    prog->userdata          = nk_handle_ptr(0);
 8011c6c:	4638      	mov	r0, r7
 8011c6e:	f7fa ff11 	bl	800ca94 <nk_handle_ptr>
 8011c72:	f8c5 08d4 	str.w	r0, [r5, #2260]	; 0x8d4
    prog->padding           = nk_vec2(4,4);
 8011c76:	eef0 0a68 	vmov.f32	s1, s17
 8011c7a:	eeb0 0a68 	vmov.f32	s0, s17
 8011c7e:	f7fb fde3 	bl	800d848 <nk_vec2>
 8011c82:	ed88 0a30 	vstr	s0, [r8, #192]	; 0xc0
 8011c86:	edc8 0a31 	vstr	s1, [r8, #196]	; 0xc4
    prog->rounding          = 0;
 8011c8a:	ed88 8a2c 	vstr	s16, [r8, #176]	; 0xb0
    prog->border            = 0;
 8011c8e:	ed88 8a2d 	vstr	s16, [r8, #180]	; 0xb4
    prog->cursor_rounding   = 0;
 8011c92:	ed88 8a2f 	vstr	s16, [r8, #188]	; 0xbc
    prog->cursor_border     = 0;
 8011c96:	ed88 8a2e 	vstr	s16, [r8, #184]	; 0xb8
    prog->draw_begin        = 0;
 8011c9a:	f8c5 78d8 	str.w	r7, [r5, #2264]	; 0x8d8
    prog->draw_end          = 0;
 8011c9e:	f8c5 78dc 	str.w	r7, [r5, #2268]	; 0x8dc

    /* scrollbars */
    scroll = &style->scrollh;
 8011ca2:	f505 78b4 	add.w	r8, r5, #360	; 0x168
 8011ca6:	f608 69c4 	addw	r9, r8, #3780	; 0xec4
    nk_zero_struct(*scroll);
 8011caa:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8011cae:	4648      	mov	r0, r9
 8011cb0:	f003 f86a 	bl	8014d88 <nk_zero>
    scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8011cb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011cb6:	a802      	add	r0, sp, #8
 8011cb8:	f7ff fb3a 	bl	8011330 <nk_style_item_color>
 8011cbc:	464e      	mov	r6, r9
 8011cbe:	f10d 0c08 	add.w	ip, sp, #8
 8011cc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011cc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011cc8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011ccc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8011cd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011cd2:	a802      	add	r0, sp, #8
 8011cd4:	f7ff fb2c 	bl	8011330 <nk_style_item_color>
 8011cd8:	f508 666e 	add.w	r6, r8, #3808	; 0xee0
 8011cdc:	f10d 0c08 	add.w	ip, sp, #8
 8011ce0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ce4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ce6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011cea:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8011cee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011cf0:	a802      	add	r0, sp, #8
 8011cf2:	f7ff fb1d 	bl	8011330 <nk_style_item_color>
 8011cf6:	f608 66fc 	addw	r6, r8, #3836	; 0xefc
 8011cfa:	f10d 0c08 	add.w	ip, sp, #8
 8011cfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011d04:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011d08:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);
 8011d0c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8011d0e:	a802      	add	r0, sp, #8
 8011d10:	f7ff fb0e 	bl	8011330 <nk_style_item_color>
 8011d14:	f608 761c 	addw	r6, r8, #3868	; 0xf1c
 8011d18:	f10d 0c08 	add.w	ip, sp, #8
 8011d1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011d22:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011d26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);
 8011d2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8011d2c:	a802      	add	r0, sp, #8
 8011d2e:	f7ff faff 	bl	8011330 <nk_style_item_color>
 8011d32:	f505 5685 	add.w	r6, r5, #4256	; 0x10a0
 8011d36:	f10d 0c08 	add.w	ip, sp, #8
 8011d3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011d40:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011d44:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);
 8011d48:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8011d4a:	a802      	add	r0, sp, #8
 8011d4c:	f7ff faf0 	bl	8011330 <nk_style_item_color>
 8011d50:	f608 7654 	addw	r6, r8, #3924	; 0xf54
 8011d54:	f10d 0c08 	add.w	ip, sp, #8
 8011d58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011d5e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011d62:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 8011d66:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	f886 3229 	strb.w	r3, [r6, #553]	; 0x229
    scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 8011d70:	f886 3228 	strb.w	r3, [r6, #552]	; 0x228
    scroll->userdata        = nk_handle_ptr(0);
 8011d74:	4638      	mov	r0, r7
 8011d76:	f7fa fe8d 	bl	800ca94 <nk_handle_ptr>
 8011d7a:	f8c9 0200 	str.w	r0, [r9, #512]	; 0x200
    scroll->border_color    = table[NK_COLOR_SCROLLBAR];
 8011d7e:	f505 5384 	add.w	r3, r5, #4224	; 0x1080
 8011d82:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8011d84:	6018      	str	r0, [r3, #0]
    scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];
 8011d86:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8011d88:	f8c6 00d8 	str.w	r0, [r6, #216]	; 0xd8
    scroll->padding         = nk_vec2(0,0);
 8011d8c:	eef0 0a48 	vmov.f32	s1, s16
 8011d90:	eeb0 0a48 	vmov.f32	s0, s16
 8011d94:	f7fb fd58 	bl	800d848 <nk_vec2>
 8011d98:	ed89 0a30 	vstr	s0, [r9, #192]	; 0xc0
 8011d9c:	edc9 0a31 	vstr	s1, [r9, #196]	; 0xc4
    scroll->show_buttons    = nk_false;
 8011da0:	f8c6 70f4 	str.w	r7, [r6, #244]	; 0xf4
    scroll->border          = 0;
 8011da4:	ed86 8a37 	vstr	s16, [r6, #220]	; 0xdc
    scroll->rounding        = 0;
 8011da8:	ed86 8a38 	vstr	s16, [r6, #224]	; 0xe0
    scroll->border_cursor   = 0;
 8011dac:	ed86 8a39 	vstr	s16, [r6, #228]	; 0xe4
    scroll->rounding_cursor = 0;
 8011db0:	ed86 8a3a 	vstr	s16, [r6, #232]	; 0xe8
    scroll->draw_begin      = 0;
 8011db4:	f8c6 7230 	str.w	r7, [r6, #560]	; 0x230
    scroll->draw_end        = 0;
 8011db8:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234
    style->scrollv = style->scrollh;
 8011dbc:	f506 730e 	add.w	r3, r6, #568	; 0x238
 8011dc0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8011dc4:	f106 012c 	add.w	r1, r6, #44	; 0x2c
 8011dc8:	9301      	str	r3, [sp, #4]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f005 f9e6 	bl	801719c <memcpy>

    /* scrollbars buttons */
    button = &style->scrollh.inc_button;
 8011dd0:	f508 6979 	add.w	r9, r8, #3984	; 0xf90
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 8011dd4:	2228      	movs	r2, #40	; 0x28
 8011dd6:	4611      	mov	r1, r2
 8011dd8:	4610      	mov	r0, r2
 8011dda:	f7f8 f852 	bl	8009e82 <nk_rgb>
 8011dde:	4601      	mov	r1, r0
 8011de0:	900d      	str	r0, [sp, #52]	; 0x34
 8011de2:	4648      	mov	r0, r9
 8011de4:	f7ff faa4 	bl	8011330 <nk_style_item_color>
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 8011de8:	222a      	movs	r2, #42	; 0x2a
 8011dea:	4611      	mov	r1, r2
 8011dec:	4610      	mov	r0, r2
 8011dee:	f7f8 f848 	bl	8009e82 <nk_rgb>
 8011df2:	4601      	mov	r1, r0
 8011df4:	900e      	str	r0, [sp, #56]	; 0x38
 8011df6:	f608 70ac 	addw	r0, r8, #4012	; 0xfac
 8011dfa:	f7ff fa99 	bl	8011330 <nk_style_item_color>
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 8011dfe:	222c      	movs	r2, #44	; 0x2c
 8011e00:	4611      	mov	r1, r2
 8011e02:	4610      	mov	r0, r2
 8011e04:	f7f8 f83d 	bl	8009e82 <nk_rgb>
 8011e08:	4601      	mov	r1, r0
 8011e0a:	900f      	str	r0, [sp, #60]	; 0x3c
 8011e0c:	f608 70c8 	addw	r0, r8, #4040	; 0xfc8
 8011e10:	f7ff fa8e 	bl	8011330 <nk_style_item_color>
    button->border_color    = nk_rgb(65,65,65);
 8011e14:	2241      	movs	r2, #65	; 0x41
 8011e16:	4611      	mov	r1, r2
 8011e18:	4610      	mov	r0, r2
 8011e1a:	f7f8 f832 	bl	8009e82 <nk_rgb>
 8011e1e:	f8c8 0fe4 	str.w	r0, [r8, #4068]	; 0xfe4
    button->text_background = nk_rgb(40,40,40);
 8011e22:	2228      	movs	r2, #40	; 0x28
 8011e24:	4611      	mov	r1, r2
 8011e26:	4610      	mov	r0, r2
 8011e28:	f7f8 f82b 	bl	8009e82 <nk_rgb>
 8011e2c:	f8c8 0fe8 	str.w	r0, [r8, #4072]	; 0xfe8
    button->text_normal     = nk_rgb(175,175,175);
 8011e30:	22af      	movs	r2, #175	; 0xaf
 8011e32:	4611      	mov	r1, r2
 8011e34:	4610      	mov	r0, r2
 8011e36:	f7f8 f824 	bl	8009e82 <nk_rgb>
 8011e3a:	f8c8 0fec 	str.w	r0, [r8, #4076]	; 0xfec
    button->text_hover      = nk_rgb(175,175,175);
 8011e3e:	22af      	movs	r2, #175	; 0xaf
 8011e40:	4611      	mov	r1, r2
 8011e42:	4610      	mov	r0, r2
 8011e44:	f7f8 f81d 	bl	8009e82 <nk_rgb>
 8011e48:	f8c8 0ff0 	str.w	r0, [r8, #4080]	; 0xff0
    button->text_active     = nk_rgb(175,175,175);
 8011e4c:	22af      	movs	r2, #175	; 0xaf
 8011e4e:	4611      	mov	r1, r2
 8011e50:	4610      	mov	r0, r2
 8011e52:	f7f8 f816 	bl	8009e82 <nk_rgb>
 8011e56:	f8c8 0ff4 	str.w	r0, [r8, #4084]	; 0xff4
    button->padding         = nk_vec2(4.0f,4.0f);
 8011e5a:	eef0 0a68 	vmov.f32	s1, s17
 8011e5e:	eeb0 0a68 	vmov.f32	s0, s17
 8011e62:	f7fb fcf1 	bl	800d848 <nk_vec2>
 8011e66:	ed89 0a1d 	vstr	s0, [r9, #116]	; 0x74
 8011e6a:	edc9 0a1e 	vstr	s1, [r9, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8011e6e:	eef0 0a48 	vmov.f32	s1, s16
 8011e72:	eeb0 0a48 	vmov.f32	s0, s16
 8011e76:	f7fb fce7 	bl	800d848 <nk_vec2>
 8011e7a:	ed89 0a21 	vstr	s0, [r9, #132]	; 0x84
 8011e7e:	edc9 0a22 	vstr	s1, [r9, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8011e82:	4638      	mov	r0, r7
 8011e84:	f7fa fe06 	bl	800ca94 <nk_handle_ptr>
 8011e88:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8011e8c:	f04f 0b12 	mov.w	fp, #18
 8011e90:	f8c6 b160 	str.w	fp, [r6, #352]	; 0x160
    button->border          = 1.0f;
 8011e94:	ee09 aa10 	vmov	s18, sl
 8011e98:	f8c6 a164 	str.w	sl, [r6, #356]	; 0x164
    button->rounding        = 0.0f;
 8011e9c:	ed86 8a5a 	vstr	s16, [r6, #360]	; 0x168
    button->draw_begin      = 0;
 8011ea0:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
    button->draw_end        = 0;
 8011ea4:	f8c6 718c 	str.w	r7, [r6, #396]	; 0x18c
    style->scrollh.dec_button = style->scrollh.inc_button;
 8011ea8:	f106 09f8 	add.w	r9, r6, #248	; 0xf8
 8011eac:	f04f 0a98 	mov.w	sl, #152	; 0x98
 8011eb0:	4652      	mov	r2, sl
 8011eb2:	4649      	mov	r1, r9
 8011eb4:	f506 70c8 	add.w	r0, r6, #400	; 0x190
 8011eb8:	f005 f970 	bl	801719c <memcpy>
    style->scrollv.inc_button = style->scrollh.inc_button;
 8011ebc:	4652      	mov	r2, sl
 8011ebe:	4649      	mov	r1, r9
 8011ec0:	f506 7041 	add.w	r0, r6, #772	; 0x304
 8011ec4:	f005 f96a 	bl	801719c <memcpy>
    style->scrollv.dec_button = style->scrollh.inc_button;
 8011ec8:	4652      	mov	r2, sl
 8011eca:	4649      	mov	r1, r9
 8011ecc:	f506 7067 	add.w	r0, r6, #924	; 0x39c
 8011ed0:	f005 f964 	bl	801719c <memcpy>

    /* edit */
    edit = &style->edit;
 8011ed4:	f605 5944 	addw	r9, r5, #3396	; 0xd44
    nk_zero_struct(*edit);
 8011ed8:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8011edc:	4648      	mov	r0, r9
 8011ede:	f002 ff53 	bl	8014d88 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);
 8011ee2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011ee4:	a802      	add	r0, sp, #8
 8011ee6:	f7ff fa23 	bl	8011330 <nk_style_item_color>
 8011eea:	46cc      	mov	ip, r9
 8011eec:	f10d 0e08 	add.w	lr, sp, #8
 8011ef0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ef4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ef8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011efc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);
 8011f00:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011f02:	a802      	add	r0, sp, #8
 8011f04:	f7ff fa14 	bl	8011330 <nk_style_item_color>
 8011f08:	f505 6c56 	add.w	ip, r5, #3424	; 0xd60
 8011f0c:	f10d 0e08 	add.w	lr, sp, #8
 8011f10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f18:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011f1c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);
 8011f20:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011f22:	a802      	add	r0, sp, #8
 8011f24:	f7ff fa04 	bl	8011330 <nk_style_item_color>
 8011f28:	f605 5c7c 	addw	ip, r5, #3452	; 0xd7c
 8011f2c:	f10d 0e08 	add.w	lr, sp, #8
 8011f30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f38:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011f3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 8011f40:	6820      	ldr	r0, [r4, #0]
 8011f42:	f8c5 0fa8 	str.w	r0, [r5, #4008]	; 0xfa8
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 8011f46:	6820      	ldr	r0, [r4, #0]
 8011f48:	f8c5 0fac 	str.w	r0, [r5, #4012]	; 0xfac
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 8011f4c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011f4e:	f8c5 0fb0 	str.w	r0, [r5, #4016]	; 0xfb0
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 8011f52:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011f54:	f8c5 0fb4 	str.w	r0, [r5, #4020]	; 0xfb4
    edit->border_color      = table[NK_COLOR_BORDER];
 8011f58:	68e0      	ldr	r0, [r4, #12]
 8011f5a:	f8c5 0d98 	str.w	r0, [r5, #3480]	; 0xd98
    edit->text_normal       = table[NK_COLOR_TEXT];
 8011f5e:	6820      	ldr	r0, [r4, #0]
 8011f60:	f8c5 0fb8 	str.w	r0, [r5, #4024]	; 0xfb8
    edit->text_hover        = table[NK_COLOR_TEXT];
 8011f64:	6820      	ldr	r0, [r4, #0]
 8011f66:	f8c5 0fbc 	str.w	r0, [r5, #4028]	; 0xfbc
    edit->text_active       = table[NK_COLOR_TEXT];
 8011f6a:	6820      	ldr	r0, [r4, #0]
 8011f6c:	f8c5 0fc0 	str.w	r0, [r5, #4032]	; 0xfc0
    edit->selected_normal   = table[NK_COLOR_TEXT];
 8011f70:	6820      	ldr	r0, [r4, #0]
 8011f72:	f8c5 0fc4 	str.w	r0, [r5, #4036]	; 0xfc4
    edit->selected_hover    = table[NK_COLOR_TEXT];
 8011f76:	6820      	ldr	r0, [r4, #0]
 8011f78:	f8c5 0fc8 	str.w	r0, [r5, #4040]	; 0xfc8
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 8011f7c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011f7e:	f8c5 0fcc 	str.w	r0, [r5, #4044]	; 0xfcc
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 8011f82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011f84:	f8c5 0fd0 	str.w	r0, [r5, #4048]	; 0xfd0
    edit->scrollbar_size    = nk_vec2(10,10);
 8011f88:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8011f8c:	eeb0 0a60 	vmov.f32	s0, s1
 8011f90:	f7fb fc5a 	bl	800d848 <nk_vec2>
 8011f94:	ed89 0aa7 	vstr	s0, [r9, #668]	; 0x29c
 8011f98:	edc9 0aa8 	vstr	s1, [r9, #672]	; 0x2a0
    edit->scrollbar         = style->scrollv;
 8011f9c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8011fa0:	9901      	ldr	r1, [sp, #4]
 8011fa2:	f605 509c 	addw	r0, r5, #3484	; 0xd9c
 8011fa6:	f005 f8f9 	bl	801719c <memcpy>
    edit->padding           = nk_vec2(4,4);
 8011faa:	eef0 0a68 	vmov.f32	s1, s17
 8011fae:	eeb0 0a68 	vmov.f32	s0, s17
 8011fb2:	f7fb fc49 	bl	800d848 <nk_vec2>
 8011fb6:	ed89 0aa9 	vstr	s0, [r9, #676]	; 0x2a4
 8011fba:	edc9 0aaa 	vstr	s1, [r9, #680]	; 0x2a8
    edit->row_padding       = 2;
 8011fbe:	eef0 9a00 	vmov.f32	s19, #0	; 0x40000000  2.0
 8011fc2:	edc9 9aab 	vstr	s19, [r9, #684]	; 0x2ac
    edit->cursor_size       = 4;
 8011fc6:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
    edit->border            = 1;
 8011fca:	ed89 9aa4 	vstr	s18, [r9, #656]	; 0x290
    edit->rounding          = 0;
 8011fce:	ed89 8aa5 	vstr	s16, [r9, #660]	; 0x294

    /* property */
    property = &style->property;
 8011fd2:	f505 690e 	add.w	r9, r5, #2272	; 0x8e0
    nk_zero_struct(*property);
 8011fd6:	f240 4164 	movw	r1, #1124	; 0x464
 8011fda:	4648      	mov	r0, r9
 8011fdc:	f002 fed4 	bl	8014d88 <nk_zero>
    property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8011fe0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011fe2:	a802      	add	r0, sp, #8
 8011fe4:	f7ff f9a4 	bl	8011330 <nk_style_item_color>
 8011fe8:	46cc      	mov	ip, r9
 8011fea:	f10d 0e08 	add.w	lr, sp, #8
 8011fee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ff2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ff6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011ffa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8011ffe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012000:	a802      	add	r0, sp, #8
 8012002:	f7ff f995 	bl	8011330 <nk_style_item_color>
 8012006:	f605 0cfc 	addw	ip, r5, #2300	; 0x8fc
 801200a:	f10d 0e08 	add.w	lr, sp, #8
 801200e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012012:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012016:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801201a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801201e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012020:	a802      	add	r0, sp, #8
 8012022:	f7ff f985 	bl	8011330 <nk_style_item_color>
 8012026:	f605 1c18 	addw	ip, r5, #2328	; 0x918
 801202a:	f10d 0e08 	add.w	lr, sp, #8
 801202e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012032:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012036:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801203a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    property->border_color  = table[NK_COLOR_BORDER];
 801203e:	68e0      	ldr	r0, [r4, #12]
 8012040:	f8c5 0934 	str.w	r0, [r5, #2356]	; 0x934
    property->label_normal  = table[NK_COLOR_TEXT];
 8012044:	6820      	ldr	r0, [r4, #0]
 8012046:	f8c5 0938 	str.w	r0, [r5, #2360]	; 0x938
    property->label_hover   = table[NK_COLOR_TEXT];
 801204a:	6820      	ldr	r0, [r4, #0]
 801204c:	f8c5 093c 	str.w	r0, [r5, #2364]	; 0x93c
    property->label_active  = table[NK_COLOR_TEXT];
 8012050:	6820      	ldr	r0, [r4, #0]
 8012052:	f8c5 0940 	str.w	r0, [r5, #2368]	; 0x940
    property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;
 8012056:	2309      	movs	r3, #9
 8012058:	f885 3944 	strb.w	r3, [r5, #2372]	; 0x944
    property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;
 801205c:	230a      	movs	r3, #10
 801205e:	f885 3945 	strb.w	r3, [r5, #2373]	; 0x945
    property->userdata      = nk_handle_ptr(0);
 8012062:	4638      	mov	r0, r7
 8012064:	f7fa fd16 	bl	800ca94 <nk_handle_ptr>
 8012068:	f8c5 0d38 	str.w	r0, [r5, #3384]	; 0xd38
    property->padding       = nk_vec2(4,4);
 801206c:	eef0 0a68 	vmov.f32	s1, s17
 8012070:	eeb0 0a68 	vmov.f32	s0, s17
 8012074:	f7fb fbe8 	bl	800d848 <nk_vec2>
 8012078:	ed89 0a1c 	vstr	s0, [r9, #112]	; 0x70
 801207c:	edc9 0a1d 	vstr	s1, [r9, #116]	; 0x74
    property->border        = 1;
 8012080:	ed89 9a1a 	vstr	s18, [r9, #104]	; 0x68
    property->rounding      = 10;
 8012084:	4bf5      	ldr	r3, [pc, #980]	; (801245c <nk_style_from_table+0x1104>)
 8012086:	f8c9 306c 	str.w	r3, [r9, #108]	; 0x6c
    property->draw_begin    = 0;
 801208a:	f8c5 7d3c 	str.w	r7, [r5, #3388]	; 0xd3c
    property->draw_end      = 0;
 801208e:	f8c5 7d40 	str.w	r7, [r5, #3392]	; 0xd40

    /* property buttons */
    button = &style->property.dec_button;
 8012092:	f505 694a 	add.w	r9, r5, #3232	; 0xca0
    nk_zero_struct(*button);
 8012096:	4651      	mov	r1, sl
 8012098:	4648      	mov	r0, r9
 801209a:	f002 fe75 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801209e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80120a0:	a802      	add	r0, sp, #8
 80120a2:	f7ff f945 	bl	8011330 <nk_style_item_color>
 80120a6:	46cc      	mov	ip, r9
 80120a8:	f10d 0e08 	add.w	lr, sp, #8
 80120ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120b4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80120b8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 80120bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80120be:	a802      	add	r0, sp, #8
 80120c0:	f7ff f936 	bl	8011330 <nk_style_item_color>
 80120c4:	f605 4cbc 	addw	ip, r5, #3260	; 0xcbc
 80120c8:	f10d 0e08 	add.w	lr, sp, #8
 80120cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120d4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80120d8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 80120dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80120de:	a802      	add	r0, sp, #8
 80120e0:	f7ff f926 	bl	8011330 <nk_style_item_color>
 80120e4:	f605 4cd8 	addw	ip, r5, #3288	; 0xcd8
 80120e8:	f10d 0e08 	add.w	lr, sp, #8
 80120ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120f4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80120f8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 80120fc:	463b      	mov	r3, r7
 80120fe:	463a      	mov	r2, r7
 8012100:	4639      	mov	r1, r7
 8012102:	4638      	mov	r0, r7
 8012104:	f7f7 fe8a 	bl	8009e1c <nk_rgba>
 8012108:	f8c5 0cf4 	str.w	r0, [r5, #3316]	; 0xcf4
    button->text_background = table[NK_COLOR_PROPERTY];
 801210c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801210e:	f8c5 0cf8 	str.w	r0, [r5, #3320]	; 0xcf8
    button->text_normal     = table[NK_COLOR_TEXT];
 8012112:	6820      	ldr	r0, [r4, #0]
 8012114:	f8c5 0cfc 	str.w	r0, [r5, #3324]	; 0xcfc
    button->text_hover      = table[NK_COLOR_TEXT];
 8012118:	6820      	ldr	r0, [r4, #0]
 801211a:	f8c5 0d00 	str.w	r0, [r5, #3328]	; 0xd00
    button->text_active     = table[NK_COLOR_TEXT];
 801211e:	6820      	ldr	r0, [r4, #0]
 8012120:	f8c5 0d04 	str.w	r0, [r5, #3332]	; 0xd04
    button->padding         = nk_vec2(0.0f,0.0f);
 8012124:	eef0 0a48 	vmov.f32	s1, s16
 8012128:	eeb0 0a48 	vmov.f32	s0, s16
 801212c:	f7fb fb8c 	bl	800d848 <nk_vec2>
 8012130:	ed89 0a1d 	vstr	s0, [r9, #116]	; 0x74
 8012134:	edc9 0a1e 	vstr	s1, [r9, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8012138:	eef0 0a48 	vmov.f32	s1, s16
 801213c:	eeb0 0a48 	vmov.f32	s0, s16
 8012140:	f7fb fb82 	bl	800d848 <nk_vec2>
 8012144:	ed89 0a21 	vstr	s0, [r9, #132]	; 0x84
 8012148:	edc9 0a22 	vstr	s1, [r9, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801214c:	4638      	mov	r0, r7
 801214e:	f7fa fca1 	bl	800ca94 <nk_handle_ptr>
 8012152:	f8c5 0d2c 	str.w	r0, [r5, #3372]	; 0xd2c
    button->text_alignment  = NK_TEXT_CENTERED;
 8012156:	f8c5 bd08 	str.w	fp, [r5, #3336]	; 0xd08
    button->border          = 0.0f;
 801215a:	ed89 8a1b 	vstr	s16, [r9, #108]	; 0x6c
    button->rounding        = 0.0f;
 801215e:	ed89 8a1c 	vstr	s16, [r9, #112]	; 0x70
    button->draw_begin      = 0;
 8012162:	f8c5 7d30 	str.w	r7, [r5, #3376]	; 0xd30
    button->draw_end        = 0;
 8012166:	f8c5 7d34 	str.w	r7, [r5, #3380]	; 0xd34
    style->property.inc_button = style->property.dec_button;
 801216a:	4652      	mov	r2, sl
 801216c:	4649      	mov	r1, r9
 801216e:	f605 4008 	addw	r0, r5, #3080	; 0xc08
 8012172:	f005 f813 	bl	801719c <memcpy>

    /* property edit */
    edit = &style->property.edit;
 8012176:	f605 1958 	addw	r9, r5, #2392	; 0x958
    nk_zero_struct(*edit);
 801217a:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 801217e:	4648      	mov	r0, r9
 8012180:	f002 fe02 	bl	8014d88 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8012184:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012186:	a802      	add	r0, sp, #8
 8012188:	f7ff f8d2 	bl	8011330 <nk_style_item_color>
 801218c:	46cc      	mov	ip, r9
 801218e:	f10d 0e08 	add.w	lr, sp, #8
 8012192:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012196:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801219a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801219e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 80121a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80121a4:	a802      	add	r0, sp, #8
 80121a6:	f7ff f8c3 	bl	8011330 <nk_style_item_color>
 80121aa:	f605 1c74 	addw	ip, r5, #2420	; 0x974
 80121ae:	f10d 0e08 	add.w	lr, sp, #8
 80121b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121ba:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80121be:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 80121c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80121c4:	a802      	add	r0, sp, #8
 80121c6:	f7ff f8b3 	bl	8011330 <nk_style_item_color>
 80121ca:	f505 6c19 	add.w	ip, r5, #2448	; 0x990
 80121ce:	f10d 0e08 	add.w	lr, sp, #8
 80121d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121da:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80121de:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    edit->border_color      = nk_rgba(0,0,0,0);
 80121e2:	463b      	mov	r3, r7
 80121e4:	463a      	mov	r2, r7
 80121e6:	4639      	mov	r1, r7
 80121e8:	4638      	mov	r0, r7
 80121ea:	f7f7 fe17 	bl	8009e1c <nk_rgba>
 80121ee:	f8c5 09ac 	str.w	r0, [r5, #2476]	; 0x9ac
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 80121f2:	6820      	ldr	r0, [r4, #0]
 80121f4:	f8c5 0bbc 	str.w	r0, [r5, #3004]	; 0xbbc
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 80121f8:	6820      	ldr	r0, [r4, #0]
 80121fa:	f8c5 0bc0 	str.w	r0, [r5, #3008]	; 0xbc0
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 80121fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012200:	f8c5 0bc4 	str.w	r0, [r5, #3012]	; 0xbc4
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 8012204:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012206:	f8c5 0bc8 	str.w	r0, [r5, #3016]	; 0xbc8
    edit->text_normal       = table[NK_COLOR_TEXT];
 801220a:	6820      	ldr	r0, [r4, #0]
 801220c:	f8c5 0bcc 	str.w	r0, [r5, #3020]	; 0xbcc
    edit->text_hover        = table[NK_COLOR_TEXT];
 8012210:	6820      	ldr	r0, [r4, #0]
 8012212:	f8c5 0bd0 	str.w	r0, [r5, #3024]	; 0xbd0
    edit->text_active       = table[NK_COLOR_TEXT];
 8012216:	6820      	ldr	r0, [r4, #0]
 8012218:	f8c5 0bd4 	str.w	r0, [r5, #3028]	; 0xbd4
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801221c:	6820      	ldr	r0, [r4, #0]
 801221e:	f8c5 0bd8 	str.w	r0, [r5, #3032]	; 0xbd8
    edit->selected_hover    = table[NK_COLOR_TEXT];
 8012222:	6820      	ldr	r0, [r4, #0]
 8012224:	f8c5 0bdc 	str.w	r0, [r5, #3036]	; 0xbdc
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 8012228:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801222a:	f8c5 0be0 	str.w	r0, [r5, #3040]	; 0xbe0
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801222e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012230:	f8c5 0be4 	str.w	r0, [r5, #3044]	; 0xbe4
    edit->padding           = nk_vec2(0,0);
 8012234:	eef0 0a48 	vmov.f32	s1, s16
 8012238:	eeb0 0a48 	vmov.f32	s0, s16
 801223c:	f7fb fb04 	bl	800d848 <nk_vec2>
 8012240:	ed89 0aa9 	vstr	s0, [r9, #676]	; 0x2a4
 8012244:	edc9 0aaa 	vstr	s1, [r9, #680]	; 0x2a8
    edit->cursor_size       = 8;
 8012248:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801224c:	f8c9 3298 	str.w	r3, [r9, #664]	; 0x298
    edit->border            = 0;
 8012250:	ed89 8aa4 	vstr	s16, [r9, #656]	; 0x290
    edit->rounding          = 0;
 8012254:	ed89 8aa5 	vstr	s16, [r9, #660]	; 0x294

    /* chart */
    chart = &style->chart;
 8012258:	f605 79f4 	addw	r9, r5, #4084	; 0xff4
    nk_zero_struct(*chart);
 801225c:	2138      	movs	r1, #56	; 0x38
 801225e:	4648      	mov	r0, r9
 8012260:	f002 fd92 	bl	8014d88 <nk_zero>
    chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);
 8012264:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8012266:	a802      	add	r0, sp, #8
 8012268:	f7ff f862 	bl	8011330 <nk_style_item_color>
 801226c:	46cc      	mov	ip, r9
 801226e:	f10d 0e08 	add.w	lr, sp, #8
 8012272:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801227a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801227e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    chart->border_color     = table[NK_COLOR_BORDER];
 8012282:	68e0      	ldr	r0, [r4, #12]
 8012284:	6130      	str	r0, [r6, #16]
    chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];
 8012286:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012288:	6170      	str	r0, [r6, #20]
    chart->color            = table[NK_COLOR_CHART_COLOR];
 801228a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801228c:	61b0      	str	r0, [r6, #24]
    chart->padding          = nk_vec2(4,4);
 801228e:	eef0 0a68 	vmov.f32	s1, s17
 8012292:	eeb0 0a68 	vmov.f32	s0, s17
 8012296:	f7fb fad7 	bl	800d848 <nk_vec2>
 801229a:	ed89 0a0c 	vstr	s0, [r9, #48]	; 0x30
 801229e:	edc9 0a0d 	vstr	s1, [r9, #52]	; 0x34
    chart->border           = 0;
 80122a2:	ed89 8a0a 	vstr	s16, [r9, #40]	; 0x28
    chart->rounding         = 0;
 80122a6:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c

    /* combo */
    combo = &style->combo;
 80122aa:	f508 59ac 	add.w	r9, r8, #5504	; 0x1580
    combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);
 80122ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80122b0:	a802      	add	r0, sp, #8
 80122b2:	f7ff f83d 	bl	8011330 <nk_style_item_color>
 80122b6:	46cc      	mov	ip, r9
 80122b8:	f10d 0e08 	add.w	lr, sp, #8
 80122bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122c4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80122c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);
 80122cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80122ce:	a802      	add	r0, sp, #8
 80122d0:	f7ff f82e 	bl	8011330 <nk_style_item_color>
 80122d4:	f109 0c1c 	add.w	ip, r9, #28
 80122d8:	f10d 0e08 	add.w	lr, sp, #8
 80122dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122e4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80122e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);
 80122ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80122ee:	a802      	add	r0, sp, #8
 80122f0:	f7ff f81e 	bl	8011330 <nk_style_item_color>
 80122f4:	f109 0c38 	add.w	ip, r9, #56	; 0x38
 80122f8:	f10d 0e08 	add.w	lr, sp, #8
 80122fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012300:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012304:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8012308:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    combo->border_color     = table[NK_COLOR_BORDER];
 801230c:	68e0      	ldr	r0, [r4, #12]
 801230e:	f8c6 073c 	str.w	r0, [r6, #1852]	; 0x73c
    combo->label_normal     = table[NK_COLOR_TEXT];
 8012312:	f505 53ba 	add.w	r3, r5, #5952	; 0x1740
 8012316:	6820      	ldr	r0, [r4, #0]
 8012318:	6018      	str	r0, [r3, #0]
    combo->label_hover      = table[NK_COLOR_TEXT];
 801231a:	6820      	ldr	r0, [r4, #0]
 801231c:	f8c6 0744 	str.w	r0, [r6, #1860]	; 0x744
    combo->label_active     = table[NK_COLOR_TEXT];
 8012320:	6820      	ldr	r0, [r4, #0]
 8012322:	f8c6 0748 	str.w	r0, [r6, #1864]	; 0x748
    combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;
 8012326:	2308      	movs	r3, #8
 8012328:	f886 37f0 	strb.w	r3, [r6, #2032]	; 0x7f0
    combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;
 801232c:	f886 37f1 	strb.w	r3, [r6, #2033]	; 0x7f1
    combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;
 8012330:	f886 37f2 	strb.w	r3, [r6, #2034]	; 0x7f2
    combo->content_padding  = nk_vec2(4,4);
 8012334:	eef0 0a68 	vmov.f32	s1, s17
 8012338:	eeb0 0a68 	vmov.f32	s0, s17
 801233c:	f7fb fa84 	bl	800d848 <nk_vec2>
 8012340:	ed89 0a45 	vstr	s0, [r9, #276]	; 0x114
 8012344:	edc9 0a46 	vstr	s1, [r9, #280]	; 0x118
    combo->button_padding   = nk_vec2(0,4);
 8012348:	eef0 0a68 	vmov.f32	s1, s17
 801234c:	eeb0 0a48 	vmov.f32	s0, s16
 8012350:	f7fb fa7a 	bl	800d848 <nk_vec2>
 8012354:	ed89 0a47 	vstr	s0, [r9, #284]	; 0x11c
 8012358:	edc9 0a48 	vstr	s1, [r9, #288]	; 0x120
    combo->spacing          = nk_vec2(4,0);
 801235c:	eef0 0a48 	vmov.f32	s1, s16
 8012360:	eeb0 0a68 	vmov.f32	s0, s17
 8012364:	f7fb fa70 	bl	800d848 <nk_vec2>
 8012368:	ed89 0a49 	vstr	s0, [r9, #292]	; 0x124
 801236c:	edc9 0a4a 	vstr	s1, [r9, #296]	; 0x128
    combo->border           = 1;
 8012370:	f506 63dd 	add.w	r3, r6, #1768	; 0x6e8
 8012374:	ed83 9a43 	vstr	s18, [r3, #268]	; 0x10c
    combo->rounding         = 0;
 8012378:	ed83 8a44 	vstr	s16, [r3, #272]	; 0x110

    /* combo button */
    button = &style->combo.button;
 801237c:	f508 58af 	add.w	r8, r8, #5600	; 0x15e0
 8012380:	f108 0810 	add.w	r8, r8, #16
    nk_zero_struct(*button);
 8012384:	4651      	mov	r1, sl
 8012386:	4640      	mov	r0, r8
 8012388:	f002 fcfe 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);
 801238c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801238e:	a802      	add	r0, sp, #8
 8012390:	f7fe ffce 	bl	8011330 <nk_style_item_color>
 8012394:	46c4      	mov	ip, r8
 8012396:	f10d 0e08 	add.w	lr, sp, #8
 801239a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801239e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123a2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80123a6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);
 80123aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80123ac:	a802      	add	r0, sp, #8
 80123ae:	f7fe ffbf 	bl	8011330 <nk_style_item_color>
 80123b2:	f108 0c1c 	add.w	ip, r8, #28
 80123b6:	f10d 0e08 	add.w	lr, sp, #8
 80123ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123c2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80123c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);
 80123ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80123cc:	a802      	add	r0, sp, #8
 80123ce:	f7fe ffaf 	bl	8011330 <nk_style_item_color>
 80123d2:	f108 0e38 	add.w	lr, r8, #56	; 0x38
 80123d6:	f10d 0c08 	add.w	ip, sp, #8
 80123da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80123e2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80123e6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 80123ea:	463b      	mov	r3, r7
 80123ec:	463a      	mov	r2, r7
 80123ee:	4639      	mov	r1, r7
 80123f0:	4638      	mov	r0, r7
 80123f2:	f7f7 fd13 	bl	8009e1c <nk_rgba>
 80123f6:	f8c8 0054 	str.w	r0, [r8, #84]	; 0x54
    button->text_background = table[NK_COLOR_COMBO];
 80123fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80123fc:	f8c6 07b0 	str.w	r0, [r6, #1968]	; 0x7b0
    button->text_normal     = table[NK_COLOR_TEXT];
 8012400:	6820      	ldr	r0, [r4, #0]
 8012402:	f8c6 07b4 	str.w	r0, [r6, #1972]	; 0x7b4
    button->text_hover      = table[NK_COLOR_TEXT];
 8012406:	6820      	ldr	r0, [r4, #0]
 8012408:	f8c6 07b8 	str.w	r0, [r6, #1976]	; 0x7b8
    button->text_active     = table[NK_COLOR_TEXT];
 801240c:	6820      	ldr	r0, [r4, #0]
 801240e:	f8c6 07bc 	str.w	r0, [r6, #1980]	; 0x7bc
    button->padding         = nk_vec2(2.0f,2.0f);
 8012412:	eef0 0a69 	vmov.f32	s1, s19
 8012416:	eeb0 0a69 	vmov.f32	s0, s19
 801241a:	f7fb fa15 	bl	800d848 <nk_vec2>
 801241e:	ed88 0a1d 	vstr	s0, [r8, #116]	; 0x74
 8012422:	edc8 0a1e 	vstr	s1, [r8, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8012426:	eef0 0a48 	vmov.f32	s1, s16
 801242a:	eeb0 0a48 	vmov.f32	s0, s16
 801242e:	f7fb fa0b 	bl	800d848 <nk_vec2>
 8012432:	ed88 0a21 	vstr	s0, [r8, #132]	; 0x84
 8012436:	edc8 0a22 	vstr	s1, [r8, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801243a:	4638      	mov	r0, r7
 801243c:	f7fa fb2a 	bl	800ca94 <nk_handle_ptr>
 8012440:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8012444:	f8c6 b7c0 	str.w	fp, [r6, #1984]	; 0x7c0
    button->border          = 0.0f;
 8012448:	f506 63eb 	add.w	r3, r6, #1880	; 0x758
 801244c:	ed83 8a1b 	vstr	s16, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8012450:	ed83 8a1c 	vstr	s16, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8012454:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8012458:	e002      	b.n	8012460 <nk_style_from_table+0x1108>
 801245a:	bf00      	nop
 801245c:	41200000 	.word	0x41200000
 8012460:	46b8      	mov	r8, r7
 8012462:	f8c6 77e8 	str.w	r7, [r6, #2024]	; 0x7e8
    button->draw_end        = 0;
 8012466:	f8c6 77ec 	str.w	r7, [r6, #2028]	; 0x7ec

    /* tab */
    tab = &style->tab;
 801246a:	f505 79b4 	add.w	r9, r5, #360	; 0x168
 801246e:	f505 5aa2 	add.w	sl, r5, #5184	; 0x1440
 8012472:	f10a 0a04 	add.w	sl, sl, #4
    tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8012476:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8012478:	a802      	add	r0, sp, #8
 801247a:	f7fe ff59 	bl	8011330 <nk_style_item_color>
 801247e:	4657      	mov	r7, sl
 8012480:	f10d 0c08 	add.w	ip, sp, #8
 8012484:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012488:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801248a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801248e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    tab->border_color       = table[NK_COLOR_BORDER];
 8012492:	f505 53a3 	add.w	r3, r5, #5216	; 0x1460
 8012496:	68e0      	ldr	r0, [r4, #12]
 8012498:	6018      	str	r0, [r3, #0]
    tab->text               = table[NK_COLOR_TEXT];
 801249a:	6820      	ldr	r0, [r4, #0]
 801249c:	f8c6 0464 	str.w	r0, [r6, #1124]	; 0x464
    tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;
 80124a0:	230a      	movs	r3, #10
 80124a2:	f886 36c8 	strb.w	r3, [r6, #1736]	; 0x6c8
    tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;
 80124a6:	2308      	movs	r3, #8
 80124a8:	f886 36c9 	strb.w	r3, [r6, #1737]	; 0x6c9
    tab->padding            = nk_vec2(4,4);
 80124ac:	eef0 0a68 	vmov.f32	s1, s17
 80124b0:	eeb0 0a68 	vmov.f32	s0, s17
 80124b4:	f7fb f9c8 	bl	800d848 <nk_vec2>
 80124b8:	ed8a 0aa5 	vstr	s0, [sl, #660]	; 0x294
 80124bc:	edca 0aa6 	vstr	s1, [sl, #664]	; 0x298
    tab->spacing            = nk_vec2(4,4);
 80124c0:	eef0 0a68 	vmov.f32	s1, s17
 80124c4:	eeb0 0a68 	vmov.f32	s0, s17
 80124c8:	f7fb f9be 	bl	800d848 <nk_vec2>
 80124cc:	ed8a 0aa7 	vstr	s0, [sl, #668]	; 0x29c
 80124d0:	edca 0aa8 	vstr	s1, [sl, #672]	; 0x2a0
    tab->indent             = 10.0f;
 80124d4:	f206 4344 	addw	r3, r6, #1092	; 0x444
 80124d8:	4af4      	ldr	r2, [pc, #976]	; (80128ac <nk_style_from_table+0x1554>)
 80124da:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    tab->border             = 1;
 80124de:	ed83 9aa2 	vstr	s18, [r3, #648]	; 0x288
    tab->rounding           = 0;
 80124e2:	ed83 8aa3 	vstr	s16, [r3, #652]	; 0x28c

    /* tab button */
    button = &style->tab.tab_minimize_button;
 80124e6:	f505 57a8 	add.w	r7, r5, #5376	; 0x1500
    nk_zero_struct(*button);
 80124ea:	2198      	movs	r1, #152	; 0x98
 80124ec:	4638      	mov	r0, r7
 80124ee:	f002 fc4b 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 80124f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80124f4:	a802      	add	r0, sp, #8
 80124f6:	f7fe ff1b 	bl	8011330 <nk_style_item_color>
 80124fa:	46bc      	mov	ip, r7
 80124fc:	f10d 0e08 	add.w	lr, sp, #8
 8012500:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012508:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801250c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8012510:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8012512:	a802      	add	r0, sp, #8
 8012514:	f7fe ff0c 	bl	8011330 <nk_style_item_color>
 8012518:	f107 0c1c 	add.w	ip, r7, #28
 801251c:	f10d 0e08 	add.w	lr, sp, #8
 8012520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012528:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801252c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8012530:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8012532:	a802      	add	r0, sp, #8
 8012534:	f7fe fefc 	bl	8011330 <nk_style_item_color>
 8012538:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 801253c:	f10d 0e08 	add.w	lr, sp, #8
 8012540:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012544:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012548:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801254c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8012550:	4643      	mov	r3, r8
 8012552:	4642      	mov	r2, r8
 8012554:	4641      	mov	r1, r8
 8012556:	4640      	mov	r0, r8
 8012558:	f7f7 fc60 	bl	8009e1c <nk_rgba>
 801255c:	6578      	str	r0, [r7, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801255e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012560:	f8c6 0558 	str.w	r0, [r6, #1368]	; 0x558
    button->text_normal     = table[NK_COLOR_TEXT];
 8012564:	6820      	ldr	r0, [r4, #0]
 8012566:	f8c6 055c 	str.w	r0, [r6, #1372]	; 0x55c
    button->text_hover      = table[NK_COLOR_TEXT];
 801256a:	f505 53ab 	add.w	r3, r5, #5472	; 0x1560
 801256e:	6820      	ldr	r0, [r4, #0]
 8012570:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8012572:	6820      	ldr	r0, [r4, #0]
 8012574:	f8c6 0564 	str.w	r0, [r6, #1380]	; 0x564
    button->padding         = nk_vec2(2.0f,2.0f);
 8012578:	eef0 0a69 	vmov.f32	s1, s19
 801257c:	eeb0 0a69 	vmov.f32	s0, s19
 8012580:	f7fb f962 	bl	800d848 <nk_vec2>
 8012584:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
 8012588:	edc7 0a1e 	vstr	s1, [r7, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801258c:	eef0 0a48 	vmov.f32	s1, s16
 8012590:	eeb0 0a48 	vmov.f32	s0, s16
 8012594:	f7fb f958 	bl	800d848 <nk_vec2>
 8012598:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
 801259c:	edc7 0a22 	vstr	s1, [r7, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80125a0:	4640      	mov	r0, r8
 80125a2:	f7fa fa77 	bl	800ca94 <nk_handle_ptr>
 80125a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80125aa:	f8c6 b568 	str.w	fp, [r6, #1384]	; 0x568
    button->border          = 0.0f;
 80125ae:	ed87 8a1b 	vstr	s16, [r7, #108]	; 0x6c
    button->rounding        = 0.0f;
 80125b2:	ed87 8a1c 	vstr	s16, [r7, #112]	; 0x70
    button->draw_begin      = 0;
 80125b6:	f8c6 8590 	str.w	r8, [r6, #1424]	; 0x590
    button->draw_end        = 0;
 80125ba:	f8c6 8594 	str.w	r8, [r6, #1428]	; 0x594
    style->tab.tab_maximize_button =*button;
 80125be:	f04f 0a98 	mov.w	sl, #152	; 0x98
 80125c2:	4652      	mov	r2, sl
 80125c4:	4639      	mov	r1, r7
 80125c6:	f506 608d 	add.w	r0, r6, #1128	; 0x468
 80125ca:	f004 fde7 	bl	801719c <memcpy>

    /* node button */
    button = &style->tab.node_minimize_button;
 80125ce:	f509 57a6 	add.w	r7, r9, #5312	; 0x14c0
 80125d2:	3708      	adds	r7, #8
    nk_zero_struct(*button);
 80125d4:	4651      	mov	r1, sl
 80125d6:	4638      	mov	r0, r7
 80125d8:	f002 fbd6 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 80125dc:	6861      	ldr	r1, [r4, #4]
 80125de:	a802      	add	r0, sp, #8
 80125e0:	f7fe fea6 	bl	8011330 <nk_style_item_color>
 80125e4:	46bc      	mov	ip, r7
 80125e6:	f10d 0e08 	add.w	lr, sp, #8
 80125ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125f2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80125f6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 80125fa:	6861      	ldr	r1, [r4, #4]
 80125fc:	a802      	add	r0, sp, #8
 80125fe:	f7fe fe97 	bl	8011330 <nk_style_item_color>
 8012602:	f107 0c1c 	add.w	ip, r7, #28
 8012606:	f10d 0e08 	add.w	lr, sp, #8
 801260a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801260e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012612:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8012616:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801261a:	6861      	ldr	r1, [r4, #4]
 801261c:	a802      	add	r0, sp, #8
 801261e:	f7fe fe87 	bl	8011330 <nk_style_item_color>
 8012622:	f509 5ca8 	add.w	ip, r9, #5376	; 0x1500
 8012626:	f10d 0e08 	add.w	lr, sp, #8
 801262a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801262e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012632:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8012636:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801263a:	4643      	mov	r3, r8
 801263c:	4642      	mov	r2, r8
 801263e:	4641      	mov	r1, r8
 8012640:	4640      	mov	r0, r8
 8012642:	f7f7 fbeb 	bl	8009e1c <nk_rgba>
 8012646:	6578      	str	r0, [r7, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 8012648:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801264a:	f8c6 0688 	str.w	r0, [r6, #1672]	; 0x688
    button->text_normal     = table[NK_COLOR_TEXT];
 801264e:	6820      	ldr	r0, [r4, #0]
 8012650:	f8c6 068c 	str.w	r0, [r6, #1676]	; 0x68c
    button->text_hover      = table[NK_COLOR_TEXT];
 8012654:	6820      	ldr	r0, [r4, #0]
 8012656:	f8c6 0690 	str.w	r0, [r6, #1680]	; 0x690
    button->text_active     = table[NK_COLOR_TEXT];
 801265a:	6820      	ldr	r0, [r4, #0]
 801265c:	f8c6 0694 	str.w	r0, [r6, #1684]	; 0x694
    button->padding         = nk_vec2(2.0f,2.0f);
 8012660:	eef0 0a69 	vmov.f32	s1, s19
 8012664:	eeb0 0a69 	vmov.f32	s0, s19
 8012668:	f7fb f8ee 	bl	800d848 <nk_vec2>
 801266c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
 8012670:	edc7 0a1e 	vstr	s1, [r7, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8012674:	eef0 0a48 	vmov.f32	s1, s16
 8012678:	eeb0 0a48 	vmov.f32	s0, s16
 801267c:	f7fb f8e4 	bl	800d848 <nk_vec2>
 8012680:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
 8012684:	edc7 0a22 	vstr	s1, [r7, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8012688:	4640      	mov	r0, r8
 801268a:	f7fa fa03 	bl	800ca94 <nk_handle_ptr>
 801268e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8012692:	f8c6 b698 	str.w	fp, [r6, #1688]	; 0x698
    button->border          = 0.0f;
 8012696:	f506 61c6 	add.w	r1, r6, #1584	; 0x630
 801269a:	ed81 8a1b 	vstr	s16, [r1, #108]	; 0x6c
    button->rounding        = 0.0f;
 801269e:	ed81 8a1c 	vstr	s16, [r1, #112]	; 0x70
    button->draw_begin      = 0;
 80126a2:	f8c6 86c0 	str.w	r8, [r6, #1728]	; 0x6c0
    button->draw_end        = 0;
 80126a6:	f8c6 86c4 	str.w	r8, [r6, #1732]	; 0x6c4
    style->tab.node_maximize_button =*button;
 80126aa:	4652      	mov	r2, sl
 80126ac:	f506 60b3 	add.w	r0, r6, #1432	; 0x598
 80126b0:	f004 fd74 	bl	801719c <memcpy>

    /* window header */
    win = &style->window;
 80126b4:	f509 57b5 	add.w	r7, r9, #5792	; 0x16a0
 80126b8:	370c      	adds	r7, #12
    win->header.align = NK_HEADER_RIGHT;
 80126ba:	2301      	movs	r3, #1
 80126bc:	f886 39a7 	strb.w	r3, [r6, #2471]	; 0x9a7
    win->header.close_symbol = NK_SYMBOL_X;
 80126c0:	f886 3998 	strb.w	r3, [r6, #2456]	; 0x998
    win->header.minimize_symbol = NK_SYMBOL_MINUS;
 80126c4:	230c      	movs	r3, #12
 80126c6:	f886 3999 	strb.w	r3, [r6, #2457]	; 0x999
    win->header.maximize_symbol = NK_SYMBOL_PLUS;
 80126ca:	230b      	movs	r3, #11
 80126cc:	f886 399a 	strb.w	r3, [r6, #2458]	; 0x99a
    win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);
 80126d0:	68a1      	ldr	r1, [r4, #8]
 80126d2:	a802      	add	r0, sp, #8
 80126d4:	f7fe fe2c 	bl	8011330 <nk_style_item_color>
 80126d8:	46bc      	mov	ip, r7
 80126da:	f10d 0e08 	add.w	lr, sp, #8
 80126de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80126e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126e6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80126ea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);
 80126ee:	68a1      	ldr	r1, [r4, #8]
 80126f0:	a802      	add	r0, sp, #8
 80126f2:	f7fe fe1d 	bl	8011330 <nk_style_item_color>
 80126f6:	f107 0c1c 	add.w	ip, r7, #28
 80126fa:	f10d 0e08 	add.w	lr, sp, #8
 80126fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012702:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012706:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801270a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);
 801270e:	68a1      	ldr	r1, [r4, #8]
 8012710:	a802      	add	r0, sp, #8
 8012712:	f7fe fe0d 	bl	8011330 <nk_style_item_color>
 8012716:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 801271a:	f10d 0e08 	add.w	lr, sp, #8
 801271e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012722:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012726:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801272a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    win->header.label_normal = table[NK_COLOR_TEXT];
 801272e:	6823      	ldr	r3, [r4, #0]
 8012730:	f8c6 399b 	str.w	r3, [r6, #2459]	; 0x99b
    win->header.label_hover = table[NK_COLOR_TEXT];
 8012734:	6823      	ldr	r3, [r4, #0]
 8012736:	f8c6 399f 	str.w	r3, [r6, #2463]	; 0x99f
    win->header.label_active = table[NK_COLOR_TEXT];
 801273a:	6823      	ldr	r3, [r4, #0]
 801273c:	f8c6 39a3 	str.w	r3, [r6, #2467]	; 0x9a3
    win->header.label_padding = nk_vec2(4,4);
 8012740:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012744:	eeb0 0a60 	vmov.f32	s0, s1
 8012748:	f7fb f87e 	bl	800d848 <nk_vec2>
 801274c:	ed87 0a67 	vstr	s0, [r7, #412]	; 0x19c
 8012750:	edc7 0a68 	vstr	s1, [r7, #416]	; 0x1a0
    win->header.padding = nk_vec2(4,4);
 8012754:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012758:	eeb0 0a60 	vmov.f32	s0, s1
 801275c:	f7fb f874 	bl	800d848 <nk_vec2>
 8012760:	ed87 0a65 	vstr	s0, [r7, #404]	; 0x194
 8012764:	edc7 0a66 	vstr	s1, [r7, #408]	; 0x198
    win->header.spacing = nk_vec2(0,0);
 8012768:	eef0 0a48 	vmov.f32	s1, s16
 801276c:	eeb0 0a48 	vmov.f32	s0, s16
 8012770:	f7fb f86a 	bl	800d848 <nk_vec2>
 8012774:	ed87 0a69 	vstr	s0, [r7, #420]	; 0x1a4
 8012778:	edc7 0a6a 	vstr	s1, [r7, #424]	; 0x1a8

    /* window header close button */
    button = &style->window.header.close_button;
 801277c:	f509 59b8 	add.w	r9, r9, #5888	; 0x1700
    nk_zero_struct(*button);
 8012780:	4651      	mov	r1, sl
 8012782:	4648      	mov	r0, r9
 8012784:	f002 fb00 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 8012788:	68a1      	ldr	r1, [r4, #8]
 801278a:	a802      	add	r0, sp, #8
 801278c:	f7fe fdd0 	bl	8011330 <nk_style_item_color>
 8012790:	46cc      	mov	ip, r9
 8012792:	f10d 0e08 	add.w	lr, sp, #8
 8012796:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801279a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801279e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80127a2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 80127a6:	68a1      	ldr	r1, [r4, #8]
 80127a8:	a802      	add	r0, sp, #8
 80127aa:	f7fe fdc1 	bl	8011330 <nk_style_item_color>
 80127ae:	f109 0c1c 	add.w	ip, r9, #28
 80127b2:	f10d 0e08 	add.w	lr, sp, #8
 80127b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127be:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80127c2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 80127c6:	68a1      	ldr	r1, [r4, #8]
 80127c8:	a802      	add	r0, sp, #8
 80127ca:	f7fe fdb1 	bl	8011330 <nk_style_item_color>
 80127ce:	f109 0c38 	add.w	ip, r9, #56	; 0x38
 80127d2:	f10d 0e08 	add.w	lr, sp, #8
 80127d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127de:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80127e2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 80127e6:	4643      	mov	r3, r8
 80127e8:	4642      	mov	r2, r8
 80127ea:	4641      	mov	r1, r8
 80127ec:	4640      	mov	r0, r8
 80127ee:	f7f7 fb15 	bl	8009e1c <nk_rgba>
 80127f2:	f8c9 0054 	str.w	r0, [r9, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 80127f6:	f505 53c6 	add.w	r3, r5, #6336	; 0x18c0
 80127fa:	68a0      	ldr	r0, [r4, #8]
 80127fc:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 80127fe:	6820      	ldr	r0, [r4, #0]
 8012800:	f8c6 08c4 	str.w	r0, [r6, #2244]	; 0x8c4
    button->text_hover      = table[NK_COLOR_TEXT];
 8012804:	6820      	ldr	r0, [r4, #0]
 8012806:	f8c6 08c8 	str.w	r0, [r6, #2248]	; 0x8c8
    button->text_active     = table[NK_COLOR_TEXT];
 801280a:	6820      	ldr	r0, [r4, #0]
 801280c:	f8c6 08cc 	str.w	r0, [r6, #2252]	; 0x8cc
    button->padding         = nk_vec2(0.0f,0.0f);
 8012810:	eef0 0a48 	vmov.f32	s1, s16
 8012814:	eeb0 0a48 	vmov.f32	s0, s16
 8012818:	f7fb f816 	bl	800d848 <nk_vec2>
 801281c:	ed89 0a1d 	vstr	s0, [r9, #116]	; 0x74
 8012820:	edc9 0a1e 	vstr	s1, [r9, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8012824:	eef0 0a48 	vmov.f32	s1, s16
 8012828:	eeb0 0a48 	vmov.f32	s0, s16
 801282c:	f7fb f80c 	bl	800d848 <nk_vec2>
 8012830:	ed89 0a21 	vstr	s0, [r9, #132]	; 0x84
 8012834:	edc9 0a22 	vstr	s1, [r9, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8012838:	4640      	mov	r0, r8
 801283a:	f7fa f92b 	bl	800ca94 <nk_handle_ptr>
 801283e:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8012842:	f8c6 b8d0 	str.w	fp, [r6, #2256]	; 0x8d0
    button->border          = 0.0f;
 8012846:	f606 0368 	addw	r3, r6, #2152	; 0x868
 801284a:	ed83 8a1b 	vstr	s16, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801284e:	ed83 8a1c 	vstr	s16, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8012852:	f8c6 88f8 	str.w	r8, [r6, #2296]	; 0x8f8
    button->draw_end        = 0;
 8012856:	f8c6 88fc 	str.w	r8, [r6, #2300]	; 0x8fc

    /* window header minimize button */
    button = &style->window.header.minimize_button;
 801285a:	f505 59c8 	add.w	r9, r5, #6400	; 0x1900
    nk_zero_struct(*button);
 801285e:	4651      	mov	r1, sl
 8012860:	4648      	mov	r0, r9
 8012862:	f002 fa91 	bl	8014d88 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 8012866:	68a1      	ldr	r1, [r4, #8]
 8012868:	a802      	add	r0, sp, #8
 801286a:	f7fe fd61 	bl	8011330 <nk_style_item_color>
 801286e:	46cc      	mov	ip, r9
 8012870:	f10d 0e08 	add.w	lr, sp, #8
 8012874:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012878:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801287c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8012880:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 8012884:	68a1      	ldr	r1, [r4, #8]
 8012886:	a802      	add	r0, sp, #8
 8012888:	f7fe fd52 	bl	8011330 <nk_style_item_color>
 801288c:	f109 0c1c 	add.w	ip, r9, #28
 8012890:	f10d 0e08 	add.w	lr, sp, #8
 8012894:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012898:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801289c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80128a0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 80128a4:	68a1      	ldr	r1, [r4, #8]
 80128a6:	a802      	add	r0, sp, #8
 80128a8:	e004      	b.n	80128b4 <nk_style_from_table+0x155c>
 80128aa:	bf00      	nop
 80128ac:	41200000 	.word	0x41200000
 80128b0:	42800000 	.word	0x42800000
 80128b4:	f7fe fd3c 	bl	8011330 <nk_style_item_color>
 80128b8:	f109 0c38 	add.w	ip, r9, #56	; 0x38
 80128bc:	f10d 0e08 	add.w	lr, sp, #8
 80128c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128c8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80128cc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 80128d0:	4643      	mov	r3, r8
 80128d2:	4642      	mov	r2, r8
 80128d4:	4641      	mov	r1, r8
 80128d6:	4640      	mov	r0, r8
 80128d8:	f7f7 faa0 	bl	8009e1c <nk_rgba>
 80128dc:	f8c9 0054 	str.w	r0, [r9, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 80128e0:	68a0      	ldr	r0, [r4, #8]
 80128e2:	f8c6 0958 	str.w	r0, [r6, #2392]	; 0x958
    button->text_normal     = table[NK_COLOR_TEXT];
 80128e6:	6820      	ldr	r0, [r4, #0]
 80128e8:	f8c6 095c 	str.w	r0, [r6, #2396]	; 0x95c
    button->text_hover      = table[NK_COLOR_TEXT];
 80128ec:	f505 53cb 	add.w	r3, r5, #6496	; 0x1960
 80128f0:	6820      	ldr	r0, [r4, #0]
 80128f2:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 80128f4:	6820      	ldr	r0, [r4, #0]
 80128f6:	f8c6 0964 	str.w	r0, [r6, #2404]	; 0x964
    button->padding         = nk_vec2(0.0f,0.0f);
 80128fa:	eef0 0a48 	vmov.f32	s1, s16
 80128fe:	eeb0 0a48 	vmov.f32	s0, s16
 8012902:	f7fa ffa1 	bl	800d848 <nk_vec2>
 8012906:	ed89 0a1d 	vstr	s0, [r9, #116]	; 0x74
 801290a:	edc9 0a1e 	vstr	s1, [r9, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801290e:	eef0 0a48 	vmov.f32	s1, s16
 8012912:	eeb0 0a48 	vmov.f32	s0, s16
 8012916:	f7fa ff97 	bl	800d848 <nk_vec2>
 801291a:	ed89 0a21 	vstr	s0, [r9, #132]	; 0x84
 801291e:	edc9 0a22 	vstr	s1, [r9, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8012922:	4640      	mov	r0, r8
 8012924:	f7fa f8b6 	bl	800ca94 <nk_handle_ptr>
 8012928:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801292c:	f8c6 b968 	str.w	fp, [r6, #2408]	; 0x968
    button->border          = 0.0f;
 8012930:	ed89 8a1b 	vstr	s16, [r9, #108]	; 0x6c
    button->rounding        = 0.0f;
 8012934:	ed89 8a1c 	vstr	s16, [r9, #112]	; 0x70
    button->draw_begin      = 0;
 8012938:	f8c6 8990 	str.w	r8, [r6, #2448]	; 0x990
    button->draw_end        = 0;
 801293c:	f8c6 8994 	str.w	r8, [r6, #2452]	; 0x994

    /* window */
    win->background = table[NK_COLOR_WINDOW];
 8012940:	6860      	ldr	r0, [r4, #4]
 8012942:	f8c6 09dc 	str.w	r0, [r6, #2524]	; 0x9dc
    win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8012946:	6861      	ldr	r1, [r4, #4]
 8012948:	a802      	add	r0, sp, #8
 801294a:	f7fe fcf1 	bl	8011330 <nk_style_item_color>
 801294e:	f507 7cd6 	add.w	ip, r7, #428	; 0x1ac
 8012952:	f10d 0e08 	add.w	lr, sp, #8
 8012956:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801295a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801295e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8012962:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    win->border_color = table[NK_COLOR_BORDER];
 8012966:	f505 55cf 	add.w	r5, r5, #6624	; 0x19e0
 801296a:	68e0      	ldr	r0, [r4, #12]
 801296c:	6028      	str	r0, [r5, #0]
    win->popup_border_color = table[NK_COLOR_BORDER];
 801296e:	68e0      	ldr	r0, [r4, #12]
 8012970:	f8c6 09e4 	str.w	r0, [r6, #2532]	; 0x9e4
    win->combo_border_color = table[NK_COLOR_BORDER];
 8012974:	68e0      	ldr	r0, [r4, #12]
 8012976:	f8c6 09e8 	str.w	r0, [r6, #2536]	; 0x9e8
    win->contextual_border_color = table[NK_COLOR_BORDER];
 801297a:	68e0      	ldr	r0, [r4, #12]
 801297c:	f8c6 09ec 	str.w	r0, [r6, #2540]	; 0x9ec
    win->menu_border_color = table[NK_COLOR_BORDER];
 8012980:	68e0      	ldr	r0, [r4, #12]
 8012982:	f8c6 09f0 	str.w	r0, [r6, #2544]	; 0x9f0
    win->group_border_color = table[NK_COLOR_BORDER];
 8012986:	68e0      	ldr	r0, [r4, #12]
 8012988:	f8c6 09f4 	str.w	r0, [r6, #2548]	; 0x9f4
    win->tooltip_border_color = table[NK_COLOR_BORDER];
 801298c:	68e0      	ldr	r0, [r4, #12]
 801298e:	f8c6 09f8 	str.w	r0, [r6, #2552]	; 0x9f8
    win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);
 8012992:	6821      	ldr	r1, [r4, #0]
 8012994:	a802      	add	r0, sp, #8
 8012996:	f7fe fccb 	bl	8011330 <nk_style_item_color>
 801299a:	f507 75f4 	add.w	r5, r7, #488	; 0x1e8
 801299e:	ac02      	add	r4, sp, #8
 80129a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80129a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80129a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    win->rounding = 0.0f;
 80129ac:	f606 0614 	addw	r6, r6, #2068	; 0x814
 80129b0:	ed86 8a89 	vstr	s16, [r6, #548]	; 0x224
    win->spacing = nk_vec2(4,4);
 80129b4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80129b8:	eeb0 0a60 	vmov.f32	s0, s1
 80129bc:	f7fa ff44 	bl	800d848 <nk_vec2>
 80129c0:	ed87 0a8a 	vstr	s0, [r7, #552]	; 0x228
 80129c4:	edc7 0a8b 	vstr	s1, [r7, #556]	; 0x22c
    win->scrollbar_size = nk_vec2(20,20);
 80129c8:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80129cc:	eeb0 0a60 	vmov.f32	s0, s1
 80129d0:	f7fa ff3a 	bl	800d848 <nk_vec2>
 80129d4:	ed87 0a8c 	vstr	s0, [r7, #560]	; 0x230
 80129d8:	edc7 0a8d 	vstr	s1, [r7, #564]	; 0x234
    win->min_size = nk_vec2(64,64);
 80129dc:	ed1f 0a4c 	vldr	s0, [pc, #-304]	; 80128b0 <nk_style_from_table+0x1558>
 80129e0:	eef0 0a40 	vmov.f32	s1, s0
 80129e4:	f7fa ff30 	bl	800d848 <nk_vec2>
 80129e8:	ed87 0a8e 	vstr	s0, [r7, #568]	; 0x238
 80129ec:	edc7 0a8f 	vstr	s1, [r7, #572]	; 0x23c

    win->combo_border = 1.0f;
 80129f0:	ed86 9a82 	vstr	s18, [r6, #520]	; 0x208
    win->contextual_border = 1.0f;
 80129f4:	ed86 9a83 	vstr	s18, [r6, #524]	; 0x20c
    win->menu_border = 1.0f;
 80129f8:	ed86 9a84 	vstr	s18, [r6, #528]	; 0x210
    win->group_border = 1.0f;
 80129fc:	ed86 9a85 	vstr	s18, [r6, #532]	; 0x214
    win->tooltip_border = 1.0f;
 8012a00:	ed86 9a86 	vstr	s18, [r6, #536]	; 0x218
    win->popup_border = 1.0f;
 8012a04:	ed86 9a87 	vstr	s18, [r6, #540]	; 0x21c
    win->border = 2.0f;
 8012a08:	edc6 9a81 	vstr	s19, [r6, #516]	; 0x204
    win->min_row_height_padding = 8;
 8012a0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8012a10:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220

    win->padding = nk_vec2(4,4);
 8012a14:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012a18:	eeb0 0a60 	vmov.f32	s0, s1
 8012a1c:	f7fa ff14 	bl	800d848 <nk_vec2>
 8012a20:	ed87 0a90 	vstr	s0, [r7, #576]	; 0x240
 8012a24:	edc7 0a91 	vstr	s1, [r7, #580]	; 0x244
    win->group_padding = nk_vec2(4,4);
 8012a28:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012a2c:	eeb0 0a60 	vmov.f32	s0, s1
 8012a30:	f7fa ff0a 	bl	800d848 <nk_vec2>
 8012a34:	ed87 0a92 	vstr	s0, [r7, #584]	; 0x248
 8012a38:	edc7 0a93 	vstr	s1, [r7, #588]	; 0x24c
    win->popup_padding = nk_vec2(4,4);
 8012a3c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012a40:	eeb0 0a60 	vmov.f32	s0, s1
 8012a44:	f7fa ff00 	bl	800d848 <nk_vec2>
 8012a48:	ed87 0a94 	vstr	s0, [r7, #592]	; 0x250
 8012a4c:	edc7 0a95 	vstr	s1, [r7, #596]	; 0x254
    win->combo_padding = nk_vec2(4,4);
 8012a50:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012a54:	eeb0 0a60 	vmov.f32	s0, s1
 8012a58:	f7fa fef6 	bl	800d848 <nk_vec2>
 8012a5c:	ed87 0a96 	vstr	s0, [r7, #600]	; 0x258
 8012a60:	edc7 0a97 	vstr	s1, [r7, #604]	; 0x25c
    win->contextual_padding = nk_vec2(4,4);
 8012a64:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012a68:	eeb0 0a60 	vmov.f32	s0, s1
 8012a6c:	f7fa feec 	bl	800d848 <nk_vec2>
 8012a70:	ed87 0a98 	vstr	s0, [r7, #608]	; 0x260
 8012a74:	edc7 0a99 	vstr	s1, [r7, #612]	; 0x264
    win->menu_padding = nk_vec2(4,4);
 8012a78:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012a7c:	eeb0 0a60 	vmov.f32	s0, s1
 8012a80:	f7fa fee2 	bl	800d848 <nk_vec2>
 8012a84:	ed87 0a9a 	vstr	s0, [r7, #616]	; 0x268
 8012a88:	edc7 0a9b 	vstr	s1, [r7, #620]	; 0x26c
    win->tooltip_padding = nk_vec2(4,4);
 8012a8c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012a90:	eeb0 0a60 	vmov.f32	s0, s1
 8012a94:	f7fa fed8 	bl	800d848 <nk_vec2>
 8012a98:	ed87 0a9c 	vstr	s0, [r7, #624]	; 0x270
 8012a9c:	edc7 0a9d 	vstr	s1, [r7, #628]	; 0x274
}
 8012aa0:	b011      	add	sp, #68	; 0x44
 8012aa2:	ecbd 8b04 	vpop	{d8-d9}
 8012aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NK_ASSERT(ctx);
 8012aaa:	4b03      	ldr	r3, [pc, #12]	; (8012ab8 <nk_style_from_table+0x1760>)
 8012aac:	4a03      	ldr	r2, [pc, #12]	; (8012abc <nk_style_from_table+0x1764>)
 8012aae:	216b      	movs	r1, #107	; 0x6b
 8012ab0:	4803      	ldr	r0, [pc, #12]	; (8012ac0 <nk_style_from_table+0x1768>)
 8012ab2:	f003 fd4b 	bl	801654c <__assert_func>
 8012ab6:	bf00      	nop
 8012ab8:	0801ad58 	.word	0x0801ad58
 8012abc:	0801b8c8 	.word	0x0801b8c8
 8012ac0:	0801b8ac 	.word	0x0801b8ac

08012ac4 <nk_style_default>:
NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}
 8012ac4:	b508      	push	{r3, lr}
 8012ac6:	2100      	movs	r1, #0
 8012ac8:	f7fe fc46 	bl	8011358 <nk_style_from_table>
 8012acc:	bd08      	pop	{r3, pc}

08012ace <nk_create_table>:
 *                              TABLE
 *
 * ===============================================================*/
NK_LIB struct nk_table*
nk_create_table(struct nk_context *ctx)
{
 8012ace:	b510      	push	{r4, lr}
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8012ad0:	f7fa ff8e 	bl	800d9f0 <nk_create_page_element>
    if (!elem) return 0;
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	b118      	cbz	r0, 8012ae0 <nk_create_table+0x12>
    nk_zero_struct(*elem);
 8012ad8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8012adc:	f002 f954 	bl	8014d88 <nk_zero>
    return &elem->data.tbl;
}
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	bd10      	pop	{r4, pc}

08012ae4 <nk_free_table>:
NK_LIB void
nk_free_table(struct nk_context *ctx, struct nk_table *tbl)
{
 8012ae4:	b508      	push	{r3, lr}
    union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
    nk_free_page_element(ctx, pe);
 8012ae6:	f7fa ffd3 	bl	800da90 <nk_free_page_element>
}
 8012aea:	bd08      	pop	{r3, pc}

08012aec <nk_push_table>:
NK_LIB void
nk_push_table(struct nk_window *win, struct nk_table *tbl)
{
    if (!win->tables) {
 8012aec:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 8012af0:	b18b      	cbz	r3, 8012b16 <nk_push_table+0x2a>
        tbl->prev = 0;
        tbl->size = 0;
        win->table_count = 1;
        return;
    }
    win->tables->prev = tbl;
 8012af2:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
    tbl->next = win->tables;
 8012af6:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 8012afa:	f8c1 31a0 	str.w	r3, [r1, #416]	; 0x1a0
    tbl->prev = 0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	f8c1 31a4 	str.w	r3, [r1, #420]	; 0x1a4
    tbl->size = 0;
 8012b04:	604b      	str	r3, [r1, #4]
    win->tables = tbl;
 8012b06:	f8c0 1170 	str.w	r1, [r0, #368]	; 0x170
    win->table_count++;
 8012b0a:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
 8012b0e:	3301      	adds	r3, #1
        win->table_count = 1;
 8012b10:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
}
 8012b14:	4770      	bx	lr
        win->tables = tbl;
 8012b16:	f8c0 1170 	str.w	r1, [r0, #368]	; 0x170
        tbl->next = 0;
 8012b1a:	f8c1 31a0 	str.w	r3, [r1, #416]	; 0x1a0
        tbl->prev = 0;
 8012b1e:	f8c1 31a4 	str.w	r3, [r1, #420]	; 0x1a4
        tbl->size = 0;
 8012b22:	604b      	str	r3, [r1, #4]
        return;
 8012b24:	2301      	movs	r3, #1
 8012b26:	e7f3      	b.n	8012b10 <nk_push_table+0x24>

08012b28 <nk_remove_table>:
NK_LIB void
nk_remove_table(struct nk_window *win, struct nk_table *tbl)
{
    if (win->tables == tbl)
 8012b28:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 8012b2c:	428b      	cmp	r3, r1
        win->tables = tbl->next;
 8012b2e:	bf04      	itt	eq
 8012b30:	f8d1 31a0 	ldreq.w	r3, [r1, #416]	; 0x1a0
 8012b34:	f8c0 3170 	streq.w	r3, [r0, #368]	; 0x170
    if (tbl->next)
 8012b38:	f8d1 31a0 	ldr.w	r3, [r1, #416]	; 0x1a0
 8012b3c:	b11b      	cbz	r3, 8012b46 <nk_remove_table+0x1e>
        tbl->next->prev = tbl->prev;
 8012b3e:	f8d1 21a4 	ldr.w	r2, [r1, #420]	; 0x1a4
 8012b42:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    if (tbl->prev)
 8012b46:	f8d1 31a4 	ldr.w	r3, [r1, #420]	; 0x1a4
 8012b4a:	b11b      	cbz	r3, 8012b54 <nk_remove_table+0x2c>
        tbl->prev->next = tbl->next;
 8012b4c:	f8d1 21a0 	ldr.w	r2, [r1, #416]	; 0x1a0
 8012b50:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->next = 0;
 8012b54:	2300      	movs	r3, #0
 8012b56:	f8c1 31a0 	str.w	r3, [r1, #416]	; 0x1a0
    tbl->prev = 0;
 8012b5a:	f8c1 31a4 	str.w	r3, [r1, #420]	; 0x1a4
}
 8012b5e:	4770      	bx	lr

08012b60 <nk_add_value>:
NK_LIB nk_uint*
nk_add_value(struct nk_context *ctx, struct nk_window *win,
            nk_hash name, nk_uint value)
{
 8012b60:	b570      	push	{r4, r5, r6, lr}
    NK_ASSERT(ctx);
 8012b62:	b360      	cbz	r0, 8012bbe <nk_add_value+0x5e>
 8012b64:	460c      	mov	r4, r1
 8012b66:	4616      	mov	r6, r2
 8012b68:	461d      	mov	r5, r3
 8012b6a:	4602      	mov	r2, r0
    NK_ASSERT(win);
 8012b6c:	b369      	cbz	r1, 8012bca <nk_add_value+0x6a>
    if (!win || !ctx) return 0;
    if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {
 8012b6e:	f8d1 3170 	ldr.w	r3, [r1, #368]	; 0x170
 8012b72:	b113      	cbz	r3, 8012b7a <nk_add_value+0x1a>
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	2b32      	cmp	r3, #50	; 0x32
 8012b78:	d907      	bls.n	8012b8a <nk_add_value+0x2a>
        struct nk_table *tbl = nk_create_table(ctx);
 8012b7a:	4610      	mov	r0, r2
 8012b7c:	f7ff ffa7 	bl	8012ace <nk_create_table>
        NK_ASSERT(tbl);
 8012b80:	4601      	mov	r1, r0
 8012b82:	b340      	cbz	r0, 8012bd6 <nk_add_value+0x76>
        if (!tbl) return 0;
        nk_push_table(win, tbl);
 8012b84:	4620      	mov	r0, r4
 8012b86:	f7ff ffb1 	bl	8012aec <nk_push_table>
    }
    win->tables->seq = win->seq;
 8012b8a:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 8012b8e:	6822      	ldr	r2, [r4, #0]
 8012b90:	601a      	str	r2, [r3, #0]
    win->tables->keys[win->tables->size] = name;
 8012b92:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
 8012b96:	6853      	ldr	r3, [r2, #4]
 8012b98:	3302      	adds	r3, #2
 8012b9a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    win->tables->values[win->tables->size] = value;
 8012b9e:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
 8012ba2:	6853      	ldr	r3, [r2, #4]
 8012ba4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012ba8:	f8c2 50d4 	str.w	r5, [r2, #212]	; 0xd4
    return &win->tables->values[win->tables->size++];
 8012bac:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 8012bb0:	6843      	ldr	r3, [r0, #4]
 8012bb2:	1c5a      	adds	r2, r3, #1
 8012bb4:	6042      	str	r2, [r0, #4]
 8012bb6:	3335      	adds	r3, #53	; 0x35
}
 8012bb8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012bbc:	bd70      	pop	{r4, r5, r6, pc}
    NK_ASSERT(ctx);
 8012bbe:	4b09      	ldr	r3, [pc, #36]	; (8012be4 <nk_add_value+0x84>)
 8012bc0:	4a09      	ldr	r2, [pc, #36]	; (8012be8 <nk_add_value+0x88>)
 8012bc2:	213b      	movs	r1, #59	; 0x3b
 8012bc4:	4809      	ldr	r0, [pc, #36]	; (8012bec <nk_add_value+0x8c>)
 8012bc6:	f003 fcc1 	bl	801654c <__assert_func>
    NK_ASSERT(win);
 8012bca:	4b09      	ldr	r3, [pc, #36]	; (8012bf0 <nk_add_value+0x90>)
 8012bcc:	4a06      	ldr	r2, [pc, #24]	; (8012be8 <nk_add_value+0x88>)
 8012bce:	213c      	movs	r1, #60	; 0x3c
 8012bd0:	4806      	ldr	r0, [pc, #24]	; (8012bec <nk_add_value+0x8c>)
 8012bd2:	f003 fcbb 	bl	801654c <__assert_func>
        NK_ASSERT(tbl);
 8012bd6:	4b07      	ldr	r3, [pc, #28]	; (8012bf4 <nk_add_value+0x94>)
 8012bd8:	4a03      	ldr	r2, [pc, #12]	; (8012be8 <nk_add_value+0x88>)
 8012bda:	2140      	movs	r1, #64	; 0x40
 8012bdc:	4803      	ldr	r0, [pc, #12]	; (8012bec <nk_add_value+0x8c>)
 8012bde:	f003 fcb5 	bl	801654c <__assert_func>
 8012be2:	bf00      	nop
 8012be4:	0801ad58 	.word	0x0801ad58
 8012be8:	0801b96c 	.word	0x0801b96c
 8012bec:	0801b94c 	.word	0x0801b94c
 8012bf0:	0801bc24 	.word	0x0801bc24
 8012bf4:	0801b968 	.word	0x0801b968

08012bf8 <nk_find_value>:
NK_LIB nk_uint*
nk_find_value(struct nk_window *win, nk_hash name)
{
 8012bf8:	4684      	mov	ip, r0
    struct nk_table *iter = win->tables;
 8012bfa:	f8d0 0170 	ldr.w	r0, [r0, #368]	; 0x170
    while (iter) {
 8012bfe:	b1c0      	cbz	r0, 8012c32 <nk_find_value+0x3a>
{
 8012c00:	b430      	push	{r4, r5}
        unsigned int i = 0;
        unsigned int size = iter->size;
 8012c02:	6845      	ldr	r5, [r0, #4]
        for (i = 0; i < size; ++i) {
 8012c04:	b145      	cbz	r5, 8012c18 <nk_find_value+0x20>
 8012c06:	1d02      	adds	r2, r0, #4
 8012c08:	2300      	movs	r3, #0
            if (iter->keys[i] == name) {
 8012c0a:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8012c0e:	428c      	cmp	r4, r1
 8012c10:	d007      	beq.n	8012c22 <nk_find_value+0x2a>
        for (i = 0; i < size; ++i) {
 8012c12:	3301      	adds	r3, #1
 8012c14:	429d      	cmp	r5, r3
 8012c16:	d1f8      	bne.n	8012c0a <nk_find_value+0x12>
                iter->seq = win->seq;
                return &iter->values[i];
            }
        } size = NK_VALUE_PAGE_CAPACITY;
        iter = iter->next;
 8012c18:	f8d0 01a0 	ldr.w	r0, [r0, #416]	; 0x1a0
    while (iter) {
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	d1f0      	bne.n	8012c02 <nk_find_value+0xa>
 8012c20:	e005      	b.n	8012c2e <nk_find_value+0x36>
                iter->seq = win->seq;
 8012c22:	f8dc 2000 	ldr.w	r2, [ip]
 8012c26:	6002      	str	r2, [r0, #0]
                return &iter->values[i];
 8012c28:	3335      	adds	r3, #53	; 0x35
 8012c2a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    }
    return 0;
}
 8012c2e:	bc30      	pop	{r4, r5}
 8012c30:	4770      	bx	lr
 8012c32:	4770      	bx	lr

08012c34 <nk_widget_text>:
 * ===============================================================*/
NK_LIB void
nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,
    const char *string, int len, const struct nk_text *t,
    nk_flags a, const struct nk_user_font *f)
{
 8012c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c38:	ed2d 8b04 	vpush	{d8-d9}
 8012c3c:	b08b      	sub	sp, #44	; 0x2c
 8012c3e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8012c40:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    struct nk_rect label;
    float text_width;

    NK_ASSERT(o);
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d06f      	beq.n	8012d26 <nk_widget_text+0xf2>
 8012c46:	eeb0 9a40 	vmov.f32	s18, s0
 8012c4a:	eeb0 8a60 	vmov.f32	s16, s1
 8012c4e:	eef0 9a41 	vmov.f32	s19, s2
 8012c52:	460f      	mov	r7, r1
 8012c54:	4690      	mov	r8, r2
 8012c56:	461c      	mov	r4, r3
 8012c58:	eef0 8a61 	vmov.f32	s17, s3
 8012c5c:	4681      	mov	r9, r0
    NK_ASSERT(t);
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d067      	beq.n	8012d32 <nk_widget_text+0xfe>
    if (!o || !t) return;

    b.h = NK_MAX(b.h, 2 * t->padding.y);
 8012c62:	ed93 7a01 	vldr	s14, [r3, #4]
 8012c66:	ee77 7a07 	vadd.f32	s15, s14, s14
 8012c6a:	eef4 7a61 	vcmp.f32	s15, s3
 8012c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c72:	bfc8      	it	gt
 8012c74:	eef0 8a67 	vmovgt.f32	s17, s15
    label.x = 0; label.w = 0;
    label.y = b.y + t->padding.y;
 8012c78:	ee37 7a20 	vadd.f32	s14, s14, s1
 8012c7c:	ed8d 7a07 	vstr	s14, [sp, #28]
    label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);
 8012c80:	ed96 0a01 	vldr	s0, [r6, #4]
 8012c84:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012c88:	eeb4 0a67 	vcmp.f32	s0, s15
 8012c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c90:	bf48      	it	mi
 8012c92:	eef0 7a40 	vmovmi.f32	s15, s0
 8012c96:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

    text_width = f->width(f->userdata, f->height, (const char*)string, len);
 8012c9a:	68b3      	ldr	r3, [r6, #8]
 8012c9c:	6830      	ldr	r0, [r6, #0]
 8012c9e:	4798      	blx	r3
    text_width += (2.0f * t->padding.x);
 8012ca0:	ed94 7a00 	vldr	s14, [r4]
 8012ca4:	ee77 7a07 	vadd.f32	s15, s14, s14

    /* align in x-axis */
    if (a & NK_TEXT_ALIGN_LEFT) {
 8012ca8:	f015 0f01 	tst.w	r5, #1
 8012cac:	d047      	beq.n	8012d3e <nk_widget_text+0x10a>
        label.x = b.x + t->padding.x;
 8012cae:	ee37 0a09 	vadd.f32	s0, s14, s18
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 8012cb2:	ee39 1ae7 	vsub.f32	s2, s19, s15
 8012cb6:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8012cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbe:	f340 8087 	ble.w	8012dd0 <nk_widget_text+0x19c>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
        label.w = (float)text_width + 2 * t->padding.x;
    } else return;

    /* align in y-axis */
    if (a & NK_TEXT_ALIGN_MIDDLE) {
 8012cc2:	f015 0f10 	tst.w	r5, #16
 8012cc6:	f000 8086 	beq.w	8012dd6 <nk_widget_text+0x1a2>
        label.y = b.y + b.h/2.0f - (float)f->height/2.0f;
 8012cca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012cce:	ee28 7aa6 	vmul.f32	s14, s17, s13
 8012cd2:	edd6 7a01 	vldr	s15, [r6, #4]
 8012cd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cda:	ee37 8a08 	vadd.f32	s16, s14, s16
 8012cde:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012ce2:	ed8d 8a07 	vstr	s16, [sp, #28]
        label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));
 8012ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cea:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf6:	bf58      	it	pl
 8012cf8:	eef0 7a47 	vmovpl.f32	s15, s14
 8012cfc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
        label.y = b.y + b.h - f->height;
        label.h = f->height;
    }
    nk_draw_text(o, label, (const char*)string, len, f, t->background, t->text);
 8012d00:	68e3      	ldr	r3, [r4, #12]
 8012d02:	9301      	str	r3, [sp, #4]
 8012d04:	68a3      	ldr	r3, [r4, #8]
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	4633      	mov	r3, r6
 8012d0a:	4642      	mov	r2, r8
 8012d0c:	4639      	mov	r1, r7
 8012d0e:	eddd 0a07 	vldr	s1, [sp, #28]
 8012d12:	eddd 1a09 	vldr	s3, [sp, #36]	; 0x24
 8012d16:	4648      	mov	r0, r9
 8012d18:	f7f8 fd7a 	bl	800b810 <nk_draw_text>
}
 8012d1c:	b00b      	add	sp, #44	; 0x2c
 8012d1e:	ecbd 8b04 	vpop	{d8-d9}
 8012d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NK_ASSERT(o);
 8012d26:	4b33      	ldr	r3, [pc, #204]	; (8012df4 <nk_widget_text+0x1c0>)
 8012d28:	4a33      	ldr	r2, [pc, #204]	; (8012df8 <nk_widget_text+0x1c4>)
 8012d2a:	2111      	movs	r1, #17
 8012d2c:	4833      	ldr	r0, [pc, #204]	; (8012dfc <nk_widget_text+0x1c8>)
 8012d2e:	f003 fc0d 	bl	801654c <__assert_func>
    NK_ASSERT(t);
 8012d32:	4b33      	ldr	r3, [pc, #204]	; (8012e00 <nk_widget_text+0x1cc>)
 8012d34:	4a30      	ldr	r2, [pc, #192]	; (8012df8 <nk_widget_text+0x1c4>)
 8012d36:	2112      	movs	r1, #18
 8012d38:	4830      	ldr	r0, [pc, #192]	; (8012dfc <nk_widget_text+0x1c8>)
 8012d3a:	f003 fc07 	bl	801654c <__assert_func>
    text_width += (2.0f * t->padding.x);
 8012d3e:	ee37 0a80 	vadd.f32	s0, s15, s0
    } else if (a & NK_TEXT_ALIGN_CENTERED) {
 8012d42:	f015 0f02 	tst.w	r5, #2
 8012d46:	d030      	beq.n	8012daa <nk_widget_text+0x176>
        label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);
 8012d48:	ee77 6a80 	vadd.f32	s13, s15, s0
 8012d4c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012d50:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d58:	bfd8      	it	le
 8012d5a:	eef0 6a46 	vmovle.f32	s13, s12
        label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);
 8012d5e:	ee37 7a09 	vadd.f32	s14, s14, s18
 8012d62:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8012d66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d6a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012d6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d72:	ee37 0a87 	vadd.f32	s0, s15, s14
        label.x = NK_MAX(b.x + t->padding.x, label.x);
 8012d76:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8012d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7e:	bf58      	it	pl
 8012d80:	eeb0 0a47 	vmovpl.f32	s0, s14
        label.w = NK_MIN(b.x + b.w, label.x + label.w);
 8012d84:	ee39 1a29 	vadd.f32	s2, s18, s19
 8012d88:	ee76 6a80 	vadd.f32	s13, s13, s0
 8012d8c:	eeb4 1ae6 	vcmpe.f32	s2, s13
 8012d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d94:	bf58      	it	pl
 8012d96:	eeb0 1a66 	vmovpl.f32	s2, s13
        if (label.w >= label.x) label.w -= label.x;
 8012d9a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8012d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da2:	d88e      	bhi.n	8012cc2 <nk_widget_text+0x8e>
 8012da4:	ee31 1a40 	vsub.f32	s2, s2, s0
 8012da8:	e78b      	b.n	8012cc2 <nk_widget_text+0x8e>
    } else if (a & NK_TEXT_ALIGN_RIGHT) {
 8012daa:	f015 0f04 	tst.w	r5, #4
 8012dae:	d0b5      	beq.n	8012d1c <nk_widget_text+0xe8>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
 8012db0:	ee37 7a09 	vadd.f32	s14, s14, s18
 8012db4:	ee37 1a80 	vadd.f32	s2, s15, s0
 8012db8:	ee39 9a29 	vadd.f32	s18, s18, s19
 8012dbc:	ee39 0a41 	vsub.f32	s0, s18, s2
 8012dc0:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8012dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc8:	bf58      	it	pl
 8012dca:	eeb0 0a47 	vmovpl.f32	s0, s14
 8012dce:	e778      	b.n	8012cc2 <nk_widget_text+0x8e>
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 8012dd0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8012e04 <nk_widget_text+0x1d0>
 8012dd4:	e775      	b.n	8012cc2 <nk_widget_text+0x8e>
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
 8012dd6:	f015 0f20 	tst.w	r5, #32
 8012dda:	d091      	beq.n	8012d00 <nk_widget_text+0xcc>
        label.y = b.y + b.h - f->height;
 8012ddc:	edd6 7a01 	vldr	s15, [r6, #4]
 8012de0:	ee78 8a88 	vadd.f32	s17, s17, s16
 8012de4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8012de8:	edcd 8a07 	vstr	s17, [sp, #28]
        label.h = f->height;
 8012dec:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8012df0:	e786      	b.n	8012d00 <nk_widget_text+0xcc>
 8012df2:	bf00      	nop
 8012df4:	0801b274 	.word	0x0801b274
 8012df8:	0801b9b0 	.word	0x0801b9b0
 8012dfc:	0801b97c 	.word	0x0801b97c
 8012e00:	0801af9c 	.word	0x0801af9c
 8012e04:	00000000 	.word	0x00000000

08012e08 <nk_text_colored>:
    }
}
NK_API void
nk_text_colored(struct nk_context *ctx, const char *str, int len,
    nk_flags alignment, struct nk_color color)
{
 8012e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e0c:	b08a      	sub	sp, #40	; 0x28

    struct nk_vec2 item_padding;
    struct nk_rect bounds;
    struct nk_text text;

    NK_ASSERT(ctx);
 8012e0e:	b398      	cbz	r0, 8012e78 <nk_text_colored+0x70>
 8012e10:	4688      	mov	r8, r1
 8012e12:	4617      	mov	r7, r2
 8012e14:	461e      	mov	r6, r3
 8012e16:	4604      	mov	r4, r0
    NK_ASSERT(ctx->current);
 8012e18:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8012e1c:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 8012e20:	b385      	cbz	r5, 8012e84 <nk_text_colored+0x7c>
    NK_ASSERT(ctx->current->layout);
 8012e22:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d032      	beq.n	8012e90 <nk_text_colored+0x88>
    if (!ctx || !ctx->current || !ctx->current->layout) return;

    win = ctx->current;
    style = &ctx->style;
    nk_panel_alloc_space(&bounds, ctx);
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	a806      	add	r0, sp, #24
 8012e2e:	f7fa fc19 	bl	800d664 <nk_panel_alloc_space>
    item_padding = style->text.padding;
 8012e32:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c

    text.padding.x = item_padding.x;
 8012e36:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 8012e3a:	9202      	str	r2, [sp, #8]
    text.padding.y = item_padding.y;
 8012e3c:	9303      	str	r3, [sp, #12]
    text.background = style->window.background;
 8012e3e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8012e42:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	; 0x9dc
 8012e46:	9304      	str	r3, [sp, #16]
    text.text = color;
 8012e48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e4a:	9305      	str	r3, [sp, #20]
    nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);
 8012e4c:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 8012e50:	9301      	str	r3, [sp, #4]
 8012e52:	9600      	str	r6, [sp, #0]
 8012e54:	ab02      	add	r3, sp, #8
 8012e56:	463a      	mov	r2, r7
 8012e58:	4641      	mov	r1, r8
 8012e5a:	ed9d 0a06 	vldr	s0, [sp, #24]
 8012e5e:	eddd 0a07 	vldr	s1, [sp, #28]
 8012e62:	ed9d 1a08 	vldr	s2, [sp, #32]
 8012e66:	eddd 1a09 	vldr	s3, [sp, #36]	; 0x24
 8012e6a:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8012e6e:	f7ff fee1 	bl	8012c34 <nk_widget_text>
}
 8012e72:	b00a      	add	sp, #40	; 0x28
 8012e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(ctx);
 8012e78:	4b08      	ldr	r3, [pc, #32]	; (8012e9c <nk_text_colored+0x94>)
 8012e7a:	4a09      	ldr	r2, [pc, #36]	; (8012ea0 <nk_text_colored+0x98>)
 8012e7c:	2168      	movs	r1, #104	; 0x68
 8012e7e:	4809      	ldr	r0, [pc, #36]	; (8012ea4 <nk_text_colored+0x9c>)
 8012e80:	f003 fb64 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 8012e84:	4b08      	ldr	r3, [pc, #32]	; (8012ea8 <nk_text_colored+0xa0>)
 8012e86:	4a06      	ldr	r2, [pc, #24]	; (8012ea0 <nk_text_colored+0x98>)
 8012e88:	2169      	movs	r1, #105	; 0x69
 8012e8a:	4806      	ldr	r0, [pc, #24]	; (8012ea4 <nk_text_colored+0x9c>)
 8012e8c:	f003 fb5e 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012e90:	4b06      	ldr	r3, [pc, #24]	; (8012eac <nk_text_colored+0xa4>)
 8012e92:	4a03      	ldr	r2, [pc, #12]	; (8012ea0 <nk_text_colored+0x98>)
 8012e94:	216a      	movs	r1, #106	; 0x6a
 8012e96:	4803      	ldr	r0, [pc, #12]	; (8012ea4 <nk_text_colored+0x9c>)
 8012e98:	f003 fb58 	bl	801654c <__assert_func>
 8012e9c:	0801ad58 	.word	0x0801ad58
 8012ea0:	0801b9a0 	.word	0x0801b9a0
 8012ea4:	0801b97c 	.word	0x0801b97c
 8012ea8:	0801ad5c 	.word	0x0801ad5c
 8012eac:	0801ad6c 	.word	0x0801ad6c

08012eb0 <nk_text>:
    nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);
}
#endif
NK_API void
nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)
{
 8012eb0:	b500      	push	{lr}
 8012eb2:	b083      	sub	sp, #12
    NK_ASSERT(ctx);
 8012eb4:	b148      	cbz	r0, 8012eca <nk_text+0x1a>
 8012eb6:	4684      	mov	ip, r0
    if (!ctx) return;
    nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);
 8012eb8:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
 8012ebc:	9000      	str	r0, [sp, #0]
 8012ebe:	4660      	mov	r0, ip
 8012ec0:	f7ff ffa2 	bl	8012e08 <nk_text_colored>
}
 8012ec4:	b003      	add	sp, #12
 8012ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    NK_ASSERT(ctx);
 8012eca:	4b03      	ldr	r3, [pc, #12]	; (8012ed8 <nk_text+0x28>)
 8012ecc:	4a03      	ldr	r2, [pc, #12]	; (8012edc <nk_text+0x2c>)
 8012ece:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012ed2:	4803      	ldr	r0, [pc, #12]	; (8012ee0 <nk_text+0x30>)
 8012ed4:	f003 fb3a 	bl	801654c <__assert_func>
 8012ed8:	0801ad58 	.word	0x0801ad58
 8012edc:	0801b998 	.word	0x0801b998
 8012ee0:	0801b97c 	.word	0x0801b97c

08012ee4 <nk_label>:
    if (!ctx) return;
    nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);
}
NK_API void
nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)
{
 8012ee4:	b570      	push	{r4, r5, r6, lr}
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	460c      	mov	r4, r1
 8012eea:	4616      	mov	r6, r2
    nk_text(ctx, str, nk_strlen(str), alignment);
 8012eec:	4608      	mov	r0, r1
 8012eee:	f001 ff5f 	bl	8014db0 <nk_strlen>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	4633      	mov	r3, r6
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	4628      	mov	r0, r5
 8012efa:	f7ff ffd9 	bl	8012eb0 <nk_text>
}
 8012efe:	bd70      	pop	{r4, r5, r6, pc}

08012f00 <nk_textedit_clamp>:
}
NK_INTERN void
nk_textedit_clamp(struct nk_text_edit *state)
{
    /* make the selection/cursor state valid if client altered the string */
    int n = state->string.len;
 8012f00:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (NK_TEXT_HAS_SELECTION(state)) {
 8012f02:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8012f04:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8012f06:	4291      	cmp	r1, r2
 8012f08:	d00a      	beq.n	8012f20 <nk_textedit_clamp+0x20>
        if (state->select_start > n) state->select_start = n;
 8012f0a:	4299      	cmp	r1, r3
 8012f0c:	dd0d      	ble.n	8012f2a <nk_textedit_clamp+0x2a>
 8012f0e:	65c3      	str	r3, [r0, #92]	; 0x5c
        if (state->select_end   > n) state->select_end = n;
 8012f10:	429a      	cmp	r2, r3
 8012f12:	dd00      	ble.n	8012f16 <nk_textedit_clamp+0x16>
 8012f14:	6603      	str	r3, [r0, #96]	; 0x60
        /* if clamping forced them to be equal, move the cursor to match */
        if (state->select_start == state->select_end)
 8012f16:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012f18:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8012f1a:	428a      	cmp	r2, r1
            state->cursor = state->select_start;
 8012f1c:	bf08      	it	eq
 8012f1e:	6582      	streq	r2, [r0, #88]	; 0x58
    }
    if (state->cursor > n) state->cursor = n;
 8012f20:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8012f22:	429a      	cmp	r2, r3
 8012f24:	dd04      	ble.n	8012f30 <nk_textedit_clamp+0x30>
 8012f26:	6583      	str	r3, [r0, #88]	; 0x58
}
 8012f28:	4770      	bx	lr
        if (state->select_end   > n) state->select_end = n;
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	dcf2      	bgt.n	8012f14 <nk_textedit_clamp+0x14>
 8012f2e:	e7f7      	b.n	8012f20 <nk_textedit_clamp+0x20>
}
 8012f30:	4770      	bx	lr

08012f32 <nk_textedit_move_to_first>:
}
NK_INTERN void
nk_textedit_move_to_first(struct nk_text_edit *state)
{
    /* move cursor to first character of selection */
    if (NK_TEXT_HAS_SELECTION(state)) {
 8012f32:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012f34:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d100      	bne.n	8012f3c <nk_textedit_move_to_first+0xa>
        nk_textedit_sortselection(state);
        state->cursor = state->select_start;
        state->select_end = state->select_start;
        state->has_preferred_x = 0;
    }
}
 8012f3a:	4770      	bx	lr
        state->select_start = temp;
 8012f3c:	bfc8      	it	gt
 8012f3e:	65c3      	strgt	r3, [r0, #92]	; 0x5c
        state->cursor = state->select_start;
 8012f40:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8012f42:	6583      	str	r3, [r0, #88]	; 0x58
        state->select_end = state->select_start;
 8012f44:	6603      	str	r3, [r0, #96]	; 0x60
        state->has_preferred_x = 0;
 8012f46:	2300      	movs	r3, #0
 8012f48:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
}
 8012f4c:	e7f5      	b.n	8012f3a <nk_textedit_move_to_first+0x8>

08012f4e <nk_textedit_prep_selection_at_cursor>:
}
NK_INTERN void
nk_textedit_prep_selection_at_cursor(struct nk_text_edit *state)
{
    /* update selection and cursor to match each other */
    if (!NK_TEXT_HAS_SELECTION(state))
 8012f4e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012f50:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012f52:	429a      	cmp	r2, r3
        state->select_start = state->select_end = state->cursor;
 8012f54:	bf03      	ittte	eq
 8012f56:	6d83      	ldreq	r3, [r0, #88]	; 0x58
 8012f58:	6603      	streq	r3, [r0, #96]	; 0x60
 8012f5a:	65c3      	streq	r3, [r0, #92]	; 0x5c
    else state->cursor = state->select_end;
 8012f5c:	6583      	strne	r3, [r0, #88]	; 0x58
}
 8012f5e:	4770      	bx	lr

08012f60 <nk_textedit_get_width>:
{
 8012f60:	b510      	push	{r4, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	4694      	mov	ip, r2
 8012f66:	461c      	mov	r4, r3
    int len = 0;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	9301      	str	r3, [sp, #4]
    nk_rune unicode = 0;
 8012f6c:	9300      	str	r3, [sp, #0]
    const char *str = nk_str_at_const(&edit->string, line_start + char_id, &unicode, &len);
 8012f6e:	ab01      	add	r3, sp, #4
 8012f70:	466a      	mov	r2, sp
 8012f72:	4461      	add	r1, ip
 8012f74:	300c      	adds	r0, #12
 8012f76:	f7fe f885 	bl	8011084 <nk_str_at_const>
 8012f7a:	4601      	mov	r1, r0
    return font->width(font->userdata, font->height, str, len);
 8012f7c:	68a3      	ldr	r3, [r4, #8]
 8012f7e:	9a01      	ldr	r2, [sp, #4]
 8012f80:	ed94 0a01 	vldr	s0, [r4, #4]
 8012f84:	6820      	ldr	r0, [r4, #0]
 8012f86:	4798      	blx	r3
}
 8012f88:	b002      	add	sp, #8
 8012f8a:	bd10      	pop	{r4, pc}

08012f8c <nk_textedit_layout_row>:
{
 8012f8c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8012f90:	ed2d 8b02 	vpush	{d8}
 8012f94:	b08b      	sub	sp, #44	; 0x2c
 8012f96:	4604      	mov	r4, r0
 8012f98:	4690      	mov	r8, r2
 8012f9a:	eeb0 8a40 	vmov.f32	s16, s0
 8012f9e:	461e      	mov	r6, r3
    int glyphs = 0;
 8012fa0:	2700      	movs	r7, #0
 8012fa2:	9708      	str	r7, [sp, #32]
    int len = nk_str_len_char(&edit->string);
 8012fa4:	f101 050c 	add.w	r5, r1, #12
 8012fa8:	4628      	mov	r0, r5
 8012faa:	f7fe f9ad 	bl	8011308 <nk_str_len_char>
 8012fae:	4682      	mov	sl, r0
    const char *end = nk_str_get_const(&edit->string) + len;
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	f7fe f8cb 	bl	801114c <nk_str_get_const>
 8012fb6:	4482      	add	sl, r0
    const char *text = nk_str_at_const(&edit->string, line_start_id, &unicode, &l);
 8012fb8:	ab09      	add	r3, sp, #36	; 0x24
 8012fba:	aa07      	add	r2, sp, #28
 8012fbc:	4641      	mov	r1, r8
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f7fe f860 	bl	8011084 <nk_str_at_const>
 8012fc4:	4601      	mov	r1, r0
    const struct nk_vec2 size = nk_text_calculate_text_bounds(font,
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	9302      	str	r3, [sp, #8]
 8012fca:	ab08      	add	r3, sp, #32
 8012fcc:	9301      	str	r3, [sp, #4]
 8012fce:	9700      	str	r7, [sp, #0]
 8012fd0:	ab06      	add	r3, sp, #24
 8012fd2:	eeb0 0a48 	vmov.f32	s0, s16
 8012fd6:	ebaa 0200 	sub.w	r2, sl, r0
 8012fda:	4630      	mov	r0, r6
 8012fdc:	f002 fb0c 	bl	80155f8 <nk_text_calculate_text_bounds>
    r->x0 = 0.0f;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	6023      	str	r3, [r4, #0]
    r->x1 = size.x;
 8012fe4:	ed84 0a01 	vstr	s0, [r4, #4]
    r->baseline_y_delta = size.y;
 8012fe8:	edc4 0a02 	vstr	s1, [r4, #8]
    r->ymin = 0.0f;
 8012fec:	60e3      	str	r3, [r4, #12]
    r->ymax = size.y;
 8012fee:	edc4 0a04 	vstr	s1, [r4, #16]
    r->num_chars = glyphs;
 8012ff2:	9b08      	ldr	r3, [sp, #32]
 8012ff4:	6163      	str	r3, [r4, #20]
}
 8012ff6:	b00b      	add	sp, #44	; 0x2c
 8012ff8:	ecbd 8b02 	vpop	{d8}
 8012ffc:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}

08013000 <nk_textedit_locate_coord>:
{
 8013000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013004:	ed2d 8b04 	vpush	{d8-d9}
 8013008:	b086      	sub	sp, #24
    int n = edit->string.len;
 801300a:	6c86      	ldr	r6, [r0, #72]	; 0x48
    r.x0 = r.x1 = 0;
 801300c:	2300      	movs	r3, #0
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	9300      	str	r3, [sp, #0]
    r.ymin = r.ymax = 0;
 8013012:	9304      	str	r3, [sp, #16]
 8013014:	9303      	str	r3, [sp, #12]
    r.num_chars = 0;
 8013016:	2300      	movs	r3, #0
 8013018:	9305      	str	r3, [sp, #20]
    while (i < n) {
 801301a:	429e      	cmp	r6, r3
 801301c:	dd61      	ble.n	80130e2 <nk_textedit_locate_coord+0xe2>
 801301e:	4680      	mov	r8, r0
 8013020:	eef0 9a40 	vmov.f32	s19, s0
 8013024:	eef0 8a60 	vmov.f32	s17, s1
 8013028:	460f      	mov	r7, r1
 801302a:	eeb0 9a41 	vmov.f32	s18, s2
    int i=0, k;
 801302e:	461c      	mov	r4, r3
    float base_y = 0, prev_x;
 8013030:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8013110 <nk_textedit_locate_coord+0x110>
 8013034:	e00f      	b.n	8013056 <nk_textedit_locate_coord+0x56>
        if (y < base_y + r.ymax)
 8013036:	eddd 7a04 	vldr	s15, [sp, #16]
 801303a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801303e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013046:	dc1e      	bgt.n	8013086 <nk_textedit_locate_coord+0x86>
        i += r.num_chars;
 8013048:	442c      	add	r4, r5
        base_y += r.baseline_y_delta;
 801304a:	eddd 7a02 	vldr	s15, [sp, #8]
 801304e:	ee38 8a27 	vadd.f32	s16, s16, s15
    while (i < n) {
 8013052:	42a6      	cmp	r6, r4
 8013054:	dd45      	ble.n	80130e2 <nk_textedit_locate_coord+0xe2>
        nk_textedit_layout_row(&r, edit, i, row_height, font);
 8013056:	463b      	mov	r3, r7
 8013058:	eeb0 0a49 	vmov.f32	s0, s18
 801305c:	4622      	mov	r2, r4
 801305e:	4641      	mov	r1, r8
 8013060:	4668      	mov	r0, sp
 8013062:	f7ff ff93 	bl	8012f8c <nk_textedit_layout_row>
        if (r.num_chars <= 0)
 8013066:	9d05      	ldr	r5, [sp, #20]
 8013068:	2d00      	cmp	r5, #0
 801306a:	dd3a      	ble.n	80130e2 <nk_textedit_locate_coord+0xe2>
        if (i==0 && y < base_y + r.ymin)
 801306c:	2c00      	cmp	r4, #0
 801306e:	d1e2      	bne.n	8013036 <nk_textedit_locate_coord+0x36>
 8013070:	eddd 7a03 	vldr	s15, [sp, #12]
 8013074:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013078:	eef4 7ae8 	vcmpe.f32	s15, s17
 801307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013080:	ddd9      	ble.n	8013036 <nk_textedit_locate_coord+0x36>
            return 0;
 8013082:	4626      	mov	r6, r4
 8013084:	e02d      	b.n	80130e2 <nk_textedit_locate_coord+0xe2>
    if (i >= n)
 8013086:	42a6      	cmp	r6, r4
 8013088:	dd2b      	ble.n	80130e2 <nk_textedit_locate_coord+0xe2>
    if (x < r.x0)
 801308a:	ed9d 8a00 	vldr	s16, [sp]
 801308e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8013092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013096:	dc39      	bgt.n	801310c <nk_textedit_locate_coord+0x10c>
    if (x < r.x1) {
 8013098:	eddd 7a01 	vldr	s15, [sp, #4]
 801309c:	eef4 7ae9 	vcmpe.f32	s15, s19
 80130a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a4:	dd13      	ble.n	80130ce <nk_textedit_locate_coord+0xce>
        for (i=0; i < r.num_chars; ++i) {
 80130a6:	2600      	movs	r6, #0
            float w = nk_textedit_get_width(edit, k, i, font);
 80130a8:	463b      	mov	r3, r7
 80130aa:	4632      	mov	r2, r6
 80130ac:	4621      	mov	r1, r4
 80130ae:	4640      	mov	r0, r8
 80130b0:	f7ff ff56 	bl	8012f60 <nk_textedit_get_width>
            if (x < prev_x+w) {
 80130b4:	eeb0 7a48 	vmov.f32	s14, s16
 80130b8:	ee38 8a00 	vadd.f32	s16, s16, s0
 80130bc:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80130c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c4:	dc13      	bgt.n	80130ee <nk_textedit_locate_coord+0xee>
        for (i=0; i < r.num_chars; ++i) {
 80130c6:	3601      	adds	r6, #1
 80130c8:	42b5      	cmp	r5, r6
 80130ca:	d1ed      	bne.n	80130a8 <nk_textedit_locate_coord+0xa8>
 80130cc:	4634      	mov	r4, r6
    if (nk_str_rune_at(&edit->string, i+r.num_chars-1) == '\n')
 80130ce:	4425      	add	r5, r4
 80130d0:	1e6e      	subs	r6, r5, #1
 80130d2:	4631      	mov	r1, r6
 80130d4:	f108 000c 	add.w	r0, r8, #12
 80130d8:	f7fe f82c 	bl	8011134 <nk_str_rune_at>
    else return i+r.num_chars;
 80130dc:	280a      	cmp	r0, #10
 80130de:	bf18      	it	ne
 80130e0:	462e      	movne	r6, r5
}
 80130e2:	4630      	mov	r0, r6
 80130e4:	b006      	add	sp, #24
 80130e6:	ecbd 8b04 	vpop	{d8-d9}
 80130ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (x < prev_x+w/2)
 80130ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80130f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80130f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80130fa:	eef4 7ae9 	vcmpe.f32	s15, s19
 80130fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    return k+i;
 8013102:	bfce      	itee	gt
 8013104:	1936      	addgt	r6, r6, r4
                else return k+i+1;
 8013106:	19a4      	addle	r4, r4, r6
 8013108:	1c66      	addle	r6, r4, #1
 801310a:	e7ea      	b.n	80130e2 <nk_textedit_locate_coord+0xe2>
 801310c:	4626      	mov	r6, r4
 801310e:	e7e8      	b.n	80130e2 <nk_textedit_locate_coord+0xe2>
 8013110:	00000000 	.word	0x00000000

08013114 <nk_textedit_discard_undo>:
}
NK_INTERN void
nk_textedit_discard_undo(struct nk_text_undo_state *state)
{
    /* discard the oldest entry in the undo list */
    if (state->undo_point > 0) {
 8013114:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8013118:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 801311c:	2b00      	cmp	r3, #0
 801311e:	dd3b      	ble.n	8013198 <nk_textedit_discard_undo+0x84>
{
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	4604      	mov	r4, r0
        /* if the 0th undo state has characters, clean those up */
        if (state->undo_rec[0].char_storage >= 0) {
 8013124:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013128:	2b00      	cmp	r3, #0
 801312a:	da10      	bge.n	801314e <nk_textedit_discard_undo+0x3a>
                if (state->undo_rec[i].char_storage >= 0)
                state->undo_rec[i].char_storage = (short)
                    (state->undo_rec[i].char_storage - n);
            }
        }
        --state->undo_point;
 801312c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8013130:	f8b3 2440 	ldrh.w	r2, [r3, #1088]	; 0x440
 8013134:	3a01      	subs	r2, #1
 8013136:	b212      	sxth	r2, r2
 8013138:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
        NK_MEMCPY(state->undo_rec, state->undo_rec+1,
 801313c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013140:	0092      	lsls	r2, r2, #2
 8013142:	f104 010c 	add.w	r1, r4, #12
 8013146:	4620      	mov	r0, r4
 8013148:	f001 fd62 	bl	8014c10 <nk_memcopy>
            (nk_size)((nk_size)state->undo_point * sizeof(state->undo_rec[0])));
    }
}
 801314c:	bd70      	pop	{r4, r5, r6, pc}
            int n = state->undo_rec[0].insert_length, i;
 801314e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
            state->undo_char_point = (short)(state->undo_char_point - n);
 8013152:	b28d      	uxth	r5, r1
 8013154:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
 8013158:	f8b6 2444 	ldrh.w	r2, [r6, #1092]	; 0x444
 801315c:	1b52      	subs	r2, r2, r5
 801315e:	b212      	sxth	r2, r2
 8013160:	f8a6 2444 	strh.w	r2, [r6, #1092]	; 0x444
            NK_MEMCPY(state->undo_char, state->undo_char + n,
 8013164:	f200 40a4 	addw	r0, r0, #1188	; 0x4a4
 8013168:	0092      	lsls	r2, r2, #2
 801316a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801316e:	f001 fd4f 	bl	8014c10 <nk_memcopy>
            for (i=0; i < state->undo_point; ++i) {
 8013172:	f9b6 1440 	ldrsh.w	r1, [r6, #1088]	; 0x440
 8013176:	2900      	cmp	r1, #0
 8013178:	ddd8      	ble.n	801312c <nk_textedit_discard_undo+0x18>
 801317a:	4623      	mov	r3, r4
 801317c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013180:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                if (state->undo_rec[i].char_storage >= 0)
 8013184:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8013188:	2a00      	cmp	r2, #0
                    (state->undo_rec[i].char_storage - n);
 801318a:	bfa4      	itt	ge
 801318c:	1b52      	subge	r2, r2, r5
                state->undo_rec[i].char_storage = (short)
 801318e:	811a      	strhge	r2, [r3, #8]
            for (i=0; i < state->undo_point; ++i) {
 8013190:	330c      	adds	r3, #12
 8013192:	428b      	cmp	r3, r1
 8013194:	d1f6      	bne.n	8013184 <nk_textedit_discard_undo+0x70>
 8013196:	e7c9      	b.n	801312c <nk_textedit_discard_undo+0x18>
 8013198:	4770      	bx	lr

0801319a <nk_textedit_createundo>:
    return &state->undo_rec[state->undo_point++];
}
NK_INTERN nk_rune*
nk_textedit_createundo(struct nk_text_undo_state *state, int pos,
    int insert_len, int delete_len)
{
 801319a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801319e:	4604      	mov	r4, r0
 80131a0:	4688      	mov	r8, r1
 80131a2:	4615      	mov	r5, r2
 80131a4:	461f      	mov	r7, r3
    state->redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;
 80131a6:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80131aa:	2263      	movs	r2, #99	; 0x63
 80131ac:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
    state->redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;
 80131b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80131b4:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
    if (state->undo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 80131b8:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 80131bc:	2b63      	cmp	r3, #99	; 0x63
 80131be:	d037      	beq.n	8013230 <nk_textedit_createundo+0x96>
    if (numchars > NK_TEXTEDIT_UNDOCHARCOUNT) {
 80131c0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80131c4:	da37      	bge.n	8013236 <nk_textedit_createundo+0x9c>
    while (state->undo_char_point + numchars > NK_TEXTEDIT_UNDOCHARCOUNT)
 80131c6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80131ca:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80131ce:	442b      	add	r3, r5
 80131d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80131d4:	db0a      	blt.n	80131ec <nk_textedit_createundo+0x52>
 80131d6:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
        nk_textedit_discard_undo(state);
 80131da:	4620      	mov	r0, r4
 80131dc:	f7ff ff9a 	bl	8013114 <nk_textedit_discard_undo>
    while (state->undo_char_point + numchars > NK_TEXTEDIT_UNDOCHARCOUNT)
 80131e0:	f9b6 c444 	ldrsh.w	ip, [r6, #1092]	; 0x444
 80131e4:	44ac      	add	ip, r5
 80131e6:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 80131ea:	daf6      	bge.n	80131da <nk_textedit_createundo+0x40>
    return &state->undo_rec[state->undo_point++];
 80131ec:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80131f0:	f9b3 2440 	ldrsh.w	r2, [r3, #1088]	; 0x440
 80131f4:	1c51      	adds	r1, r2, #1
 80131f6:	f8a3 1440 	strh.w	r1, [r3, #1088]	; 0x440
    struct nk_text_undo_record *r = nk_textedit_create_undo_record(state, insert_len);
    if (r == 0)
        return 0;

    r->where = pos;
 80131fa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80131fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8013202:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
    r->insert_length = (short) insert_len;
 8013206:	809d      	strh	r5, [r3, #4]
    r->delete_length = (short) delete_len;
 8013208:	80df      	strh	r7, [r3, #6]

    if (insert_len == 0) {
 801320a:	b1e5      	cbz	r5, 8013246 <nk_textedit_createundo+0xac>
        r->char_storage = -1;
        return 0;
    } else {
        r->char_storage = state->undo_char_point;
 801320c:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
 8013210:	f9b1 3444 	ldrsh.w	r3, [r1, #1092]	; 0x444
 8013214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013218:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801321c:	8113      	strh	r3, [r2, #8]
        state->undo_char_point = (short)(state->undo_char_point +  insert_len);
 801321e:	441d      	add	r5, r3
 8013220:	f8a1 5444 	strh.w	r5, [r1, #1092]	; 0x444
        return &state->undo_char[r->char_storage];
 8013224:	f203 1329 	addw	r3, r3, #297	; 0x129
 8013228:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    }
}
 801322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nk_textedit_discard_undo(state);
 8013230:	f7ff ff70 	bl	8013114 <nk_textedit_discard_undo>
 8013234:	e7c4      	b.n	80131c0 <nk_textedit_createundo+0x26>
        state->undo_point = 0;
 8013236:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801323a:	2000      	movs	r0, #0
 801323c:	f8a3 0440 	strh.w	r0, [r3, #1088]	; 0x440
        state->undo_char_point = 0;
 8013240:	f8a3 0444 	strh.w	r0, [r3, #1092]	; 0x444
    if (r == 0)
 8013244:	e7f2      	b.n	801322c <nk_textedit_createundo+0x92>
        r->char_storage = -1;
 8013246:	461a      	mov	r2, r3
 8013248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801324c:	8113      	strh	r3, [r2, #8]
        return 0;
 801324e:	2000      	movs	r0, #0
 8013250:	e7ec      	b.n	801322c <nk_textedit_createundo+0x92>
	...

08013254 <nk_is_word_boundary>:
    if (idx <= 0) return 1;
 8013254:	2900      	cmp	r1, #0
 8013256:	dd29      	ble.n	80132ac <nk_is_word_boundary+0x58>
{
 8013258:	b500      	push	{lr}
 801325a:	b083      	sub	sp, #12
    if (!nk_str_at_rune(&state->string, idx, &c, &len)) return 1;
 801325c:	ab01      	add	r3, sp, #4
 801325e:	466a      	mov	r2, sp
 8013260:	300c      	adds	r0, #12
 8013262:	f7fd fe7d 	bl	8010f60 <nk_str_at_rune>
 8013266:	b318      	cbz	r0, 80132b0 <nk_is_word_boundary+0x5c>
    return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
 8013268:	9800      	ldr	r0, [sp, #0]
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 801326a:	2820      	cmp	r0, #32
 801326c:	d022      	beq.n	80132b4 <nk_is_word_boundary+0x60>
 801326e:	285b      	cmp	r0, #91	; 0x5b
 8013270:	d022      	beq.n	80132b8 <nk_is_word_boundary+0x64>
 8013272:	d80c      	bhi.n	801328e <nk_is_word_boundary+0x3a>
 8013274:	2809      	cmp	r0, #9
 8013276:	d021      	beq.n	80132bc <nk_is_word_boundary+0x68>
 8013278:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 801327c:	2b13      	cmp	r3, #19
 801327e:	d81f      	bhi.n	80132c0 <nk_is_word_boundary+0x6c>
 8013280:	4811      	ldr	r0, [pc, #68]	; (80132c8 <nk_is_word_boundary+0x74>)
 8013282:	40d8      	lsrs	r0, r3
 8013284:	f000 0001 	and.w	r0, r0, #1
}
 8013288:	b003      	add	sp, #12
 801328a:	f85d fb04 	ldr.w	pc, [sp], #4
 801328e:	287d      	cmp	r0, #125	; 0x7d
 8013290:	d806      	bhi.n	80132a0 <nk_is_word_boundary+0x4c>
 8013292:	287a      	cmp	r0, #122	; 0x7a
 8013294:	d816      	bhi.n	80132c4 <nk_is_word_boundary+0x70>
    if (idx <= 0) return 1;
 8013296:	285d      	cmp	r0, #93	; 0x5d
 8013298:	bf14      	ite	ne
 801329a:	2000      	movne	r0, #0
 801329c:	2001      	moveq	r0, #1
 801329e:	e7f3      	b.n	8013288 <nk_is_word_boundary+0x34>
 80132a0:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 80132a4:	bf14      	ite	ne
 80132a6:	2000      	movne	r0, #0
 80132a8:	2001      	moveq	r0, #1
 80132aa:	e7ed      	b.n	8013288 <nk_is_word_boundary+0x34>
 80132ac:	2001      	movs	r0, #1
}
 80132ae:	4770      	bx	lr
    if (!nk_str_at_rune(&state->string, idx, &c, &len)) return 1;
 80132b0:	2001      	movs	r0, #1
 80132b2:	e7e9      	b.n	8013288 <nk_is_word_boundary+0x34>
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 80132b4:	2001      	movs	r0, #1
 80132b6:	e7e7      	b.n	8013288 <nk_is_word_boundary+0x34>
 80132b8:	2001      	movs	r0, #1
 80132ba:	e7e5      	b.n	8013288 <nk_is_word_boundary+0x34>
 80132bc:	2001      	movs	r0, #1
 80132be:	e7e3      	b.n	8013288 <nk_is_word_boundary+0x34>
 80132c0:	2000      	movs	r0, #0
 80132c2:	e7e1      	b.n	8013288 <nk_is_word_boundary+0x34>
 80132c4:	2001      	movs	r0, #1
 80132c6:	e7df      	b.n	8013288 <nk_is_word_boundary+0x34>
 80132c8:	00080013 	.word	0x00080013

080132cc <nk_textedit_move_to_word_previous>:
{
 80132cc:	b538      	push	{r3, r4, r5, lr}
 80132ce:	4605      	mov	r5, r0
   int c = state->cursor - 1;
 80132d0:	6d84      	ldr	r4, [r0, #88]	; 0x58
   while( c >= 0 && !nk_is_word_boundary(state, c))
 80132d2:	3c01      	subs	r4, #1
 80132d4:	d408      	bmi.n	80132e8 <nk_textedit_move_to_word_previous+0x1c>
 80132d6:	4621      	mov	r1, r4
 80132d8:	4628      	mov	r0, r5
 80132da:	f7ff ffbb 	bl	8013254 <nk_is_word_boundary>
 80132de:	b918      	cbnz	r0, 80132e8 <nk_textedit_move_to_word_previous+0x1c>
      --c;
 80132e0:	3c01      	subs	r4, #1
   while( c >= 0 && !nk_is_word_boundary(state, c))
 80132e2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80132e6:	d1f6      	bne.n	80132d6 <nk_textedit_move_to_word_previous+0xa>
}
 80132e8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 80132ec:	bd38      	pop	{r3, r4, r5, pc}

080132ee <nk_textedit_move_to_word_next>:
{
 80132ee:	b570      	push	{r4, r5, r6, lr}
 80132f0:	4605      	mov	r5, r0
   const int len = state->string.len;
 80132f2:	6c86      	ldr	r6, [r0, #72]	; 0x48
   int c = state->cursor+1;
 80132f4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80132f6:	3401      	adds	r4, #1
   while( c < len && !nk_is_word_boundary(state, c))
 80132f8:	42a6      	cmp	r6, r4
 80132fa:	dd08      	ble.n	801330e <nk_textedit_move_to_word_next+0x20>
 80132fc:	4621      	mov	r1, r4
 80132fe:	4628      	mov	r0, r5
 8013300:	f7ff ffa8 	bl	8013254 <nk_is_word_boundary>
 8013304:	b918      	cbnz	r0, 801330e <nk_textedit_move_to_word_next+0x20>
      ++c;
 8013306:	3401      	adds	r4, #1
   while( c < len && !nk_is_word_boundary(state, c))
 8013308:	42a6      	cmp	r6, r4
 801330a:	d1f7      	bne.n	80132fc <nk_textedit_move_to_word_next+0xe>
      ++c;
 801330c:	4634      	mov	r4, r6
}
 801330e:	4630      	mov	r0, r6
 8013310:	42a6      	cmp	r6, r4
 8013312:	bfa8      	it	ge
 8013314:	4620      	movge	r0, r4
 8013316:	bd70      	pop	{r4, r5, r6, pc}

08013318 <nk_textedit_find_charpos>:
{
 8013318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801331c:	ed2d 8b02 	vpush	{d8}
 8013320:	b087      	sub	sp, #28
 8013322:	4605      	mov	r5, r0
 8013324:	4688      	mov	r8, r1
 8013326:	4616      	mov	r6, r2
 8013328:	461c      	mov	r4, r3
 801332a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 801332e:	eeb0 8a40 	vmov.f32	s16, s0
    int z = state->string.len;
 8013332:	6c8f      	ldr	r7, [r1, #72]	; 0x48
    nk_zero_struct(r);
 8013334:	2118      	movs	r1, #24
 8013336:	4668      	mov	r0, sp
 8013338:	f001 fd26 	bl	8014d88 <nk_zero>
    if (n == z) {
 801333c:	42b7      	cmp	r7, r6
 801333e:	d004      	beq.n	801334a <nk_textedit_find_charpos+0x32>
 8013340:	eddf 7a36 	vldr	s15, [pc, #216]	; 801341c <nk_textedit_find_charpos+0x104>
    int i=0, first;
 8013344:	2400      	movs	r4, #0
    int prev_start = 0;
 8013346:	4627      	mov	r7, r4
 8013348:	e035      	b.n	80133b6 <nk_textedit_find_charpos+0x9e>
        nk_textedit_layout_row(&r, state, 0, row_height, font);
 801334a:	464b      	mov	r3, r9
 801334c:	eeb0 0a48 	vmov.f32	s0, s16
 8013350:	2200      	movs	r2, #0
 8013352:	4641      	mov	r1, r8
 8013354:	4668      	mov	r0, sp
 8013356:	f7ff fe19 	bl	8012f8c <nk_textedit_layout_row>
        if (single_line) {
 801335a:	b99c      	cbnz	r4, 8013384 <nk_textedit_find_charpos+0x6c>
            while (i < z) {
 801335c:	2e00      	cmp	r6, #0
    int prev_start = 0;
 801335e:	bfd8      	it	le
 8013360:	4627      	movle	r7, r4
            while (i < z) {
 8013362:	dd0c      	ble.n	801337e <nk_textedit_find_charpos+0x66>
                i += r.num_chars;
 8013364:	4627      	mov	r7, r4
 8013366:	9b05      	ldr	r3, [sp, #20]
 8013368:	441c      	add	r4, r3
                nk_textedit_layout_row(&r, state, i, row_height, font);
 801336a:	464b      	mov	r3, r9
 801336c:	eeb0 0a48 	vmov.f32	s0, s16
 8013370:	4622      	mov	r2, r4
 8013372:	4641      	mov	r1, r8
 8013374:	4668      	mov	r0, sp
 8013376:	f7ff fe09 	bl	8012f8c <nk_textedit_layout_row>
            while (i < z) {
 801337a:	42a6      	cmp	r6, r4
 801337c:	dcf2      	bgt.n	8013364 <nk_textedit_find_charpos+0x4c>
            find->first_char = i;
 801337e:	60ec      	str	r4, [r5, #12]
            find->length = r.num_chars;
 8013380:	9e05      	ldr	r6, [sp, #20]
 8013382:	e001      	b.n	8013388 <nk_textedit_find_charpos+0x70>
            find->first_char = 0;
 8013384:	2700      	movs	r7, #0
 8013386:	60ef      	str	r7, [r5, #12]
            find->length = z;
 8013388:	612e      	str	r6, [r5, #16]
        find->x = r.x1;
 801338a:	9b01      	ldr	r3, [sp, #4]
 801338c:	602b      	str	r3, [r5, #0]
        find->y = r.ymin;
 801338e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8013392:	ed85 7a01 	vstr	s14, [r5, #4]
        find->height = r.ymax - r.ymin;
 8013396:	eddd 7a04 	vldr	s15, [sp, #16]
 801339a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801339e:	edc5 7a02 	vstr	s15, [r5, #8]
        find->prev_first = prev_start;
 80133a2:	616f      	str	r7, [r5, #20]
        return;
 80133a4:	e035      	b.n	8013412 <nk_textedit_find_charpos+0xfa>
        find->y += r.baseline_y_delta;
 80133a6:	edd5 7a01 	vldr	s15, [r5, #4]
 80133aa:	ed9d 7a02 	vldr	s14, [sp, #8]
 80133ae:	ee77 7a87 	vadd.f32	s15, s15, s14
        nk_textedit_layout_row(&r, state, i, row_height, font);
 80133b2:	4627      	mov	r7, r4
        i += r.num_chars;
 80133b4:	461c      	mov	r4, r3
    find->y = 0;
 80133b6:	edc5 7a01 	vstr	s15, [r5, #4]
        nk_textedit_layout_row(&r, state, i, row_height, font);
 80133ba:	464b      	mov	r3, r9
 80133bc:	eeb0 0a48 	vmov.f32	s0, s16
 80133c0:	4622      	mov	r2, r4
 80133c2:	4641      	mov	r1, r8
 80133c4:	4668      	mov	r0, sp
 80133c6:	f7ff fde1 	bl	8012f8c <nk_textedit_layout_row>
        if (n < i + r.num_chars) break;
 80133ca:	9a05      	ldr	r2, [sp, #20]
 80133cc:	1913      	adds	r3, r2, r4
 80133ce:	42b3      	cmp	r3, r6
 80133d0:	dde9      	ble.n	80133a6 <nk_textedit_find_charpos+0x8e>
    find->first_char = first = i;
 80133d2:	60ec      	str	r4, [r5, #12]
    find->length = r.num_chars;
 80133d4:	612a      	str	r2, [r5, #16]
    find->height = r.ymax - r.ymin;
 80133d6:	eddd 7a04 	vldr	s15, [sp, #16]
 80133da:	ed9d 7a03 	vldr	s14, [sp, #12]
 80133de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133e2:	edc5 7a02 	vstr	s15, [r5, #8]
    find->prev_first = prev_start;
 80133e6:	616f      	str	r7, [r5, #20]
    find->x = r.x0;
 80133e8:	9b00      	ldr	r3, [sp, #0]
 80133ea:	602b      	str	r3, [r5, #0]
    for (i=0; first+i < n; ++i)
 80133ec:	42b4      	cmp	r4, r6
 80133ee:	da10      	bge.n	8013412 <nk_textedit_find_charpos+0xfa>
 80133f0:	1b37      	subs	r7, r6, r4
 80133f2:	2600      	movs	r6, #0
        find->x += nk_textedit_get_width(state, first, i, font);
 80133f4:	464b      	mov	r3, r9
 80133f6:	4632      	mov	r2, r6
 80133f8:	4621      	mov	r1, r4
 80133fa:	4640      	mov	r0, r8
 80133fc:	f7ff fdb0 	bl	8012f60 <nk_textedit_get_width>
 8013400:	edd5 7a00 	vldr	s15, [r5]
 8013404:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013408:	edc5 7a00 	vstr	s15, [r5]
    for (i=0; first+i < n; ++i)
 801340c:	3601      	adds	r6, #1
 801340e:	42b7      	cmp	r7, r6
 8013410:	d1f0      	bne.n	80133f4 <nk_textedit_find_charpos+0xdc>
}
 8013412:	b007      	add	sp, #28
 8013414:	ecbd 8b02 	vpop	{d8}
 8013418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801341c:	00000000 	.word	0x00000000

08013420 <nk_textedit_move_to_last>:
    if (NK_TEXT_HAS_SELECTION(state)) {
 8013420:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013422:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013424:	429a      	cmp	r2, r3
 8013426:	d100      	bne.n	801342a <nk_textedit_move_to_last+0xa>
 8013428:	4770      	bx	lr
{
 801342a:	b510      	push	{r4, lr}
 801342c:	4604      	mov	r4, r0
        state->select_end = state->select_start;
 801342e:	bfc4      	itt	gt
 8013430:	6602      	strgt	r2, [r0, #96]	; 0x60
        state->select_start = temp;
 8013432:	65c3      	strgt	r3, [r0, #92]	; 0x5c
        nk_textedit_clamp(state);
 8013434:	f7ff fd64 	bl	8012f00 <nk_textedit_clamp>
        state->cursor = state->select_end;
 8013438:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801343a:	65a3      	str	r3, [r4, #88]	; 0x58
        state->select_start = state->select_end;
 801343c:	65e3      	str	r3, [r4, #92]	; 0x5c
        state->has_preferred_x = 0;
 801343e:	2300      	movs	r3, #0
 8013440:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
}
 8013444:	bd10      	pop	{r4, pc}

08013446 <nk_textedit_click>:
{
 8013446:	b510      	push	{r4, lr}
 8013448:	4604      	mov	r4, r0
    state->cursor = nk_textedit_locate_coord(state, x, y, font, row_height);
 801344a:	f7ff fdd9 	bl	8013000 <nk_textedit_locate_coord>
 801344e:	65a0      	str	r0, [r4, #88]	; 0x58
    state->select_start = state->cursor;
 8013450:	65e0      	str	r0, [r4, #92]	; 0x5c
    state->select_end = state->cursor;
 8013452:	6620      	str	r0, [r4, #96]	; 0x60
    state->has_preferred_x = 0;
 8013454:	2300      	movs	r3, #0
 8013456:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
}
 801345a:	bd10      	pop	{r4, pc}

0801345c <nk_textedit_drag>:
{
 801345c:	b510      	push	{r4, lr}
 801345e:	4604      	mov	r4, r0
    int p = nk_textedit_locate_coord(state, x, y, font, row_height);
 8013460:	f7ff fdce 	bl	8013000 <nk_textedit_locate_coord>
    if (state->select_start == state->select_end)
 8013464:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8013466:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013468:	429a      	cmp	r2, r3
        state->select_start = state->cursor;
 801346a:	bf04      	itt	eq
 801346c:	6da3      	ldreq	r3, [r4, #88]	; 0x58
 801346e:	65e3      	streq	r3, [r4, #92]	; 0x5c
    state->cursor = state->select_end = p;
 8013470:	6620      	str	r0, [r4, #96]	; 0x60
 8013472:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8013474:	bd10      	pop	{r4, pc}

08013476 <nk_textedit_delete>:
{
 8013476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801347a:	4606      	mov	r6, r0
 801347c:	4689      	mov	r9, r1
 801347e:	4690      	mov	r8, r2
}
NK_INTERN void
nk_textedit_makeundo_delete(struct nk_text_edit *state, int where, int length)
{
    int i;
    nk_rune *p = nk_textedit_createundo(&state->undo, where, length, 0);
 8013480:	2300      	movs	r3, #0
 8013482:	3070      	adds	r0, #112	; 0x70
 8013484:	f7ff fe89 	bl	801319a <nk_textedit_createundo>
    if (p) {
 8013488:	b188      	cbz	r0, 80134ae <nk_textedit_delete+0x38>
        for (i=0; i < length; ++i)
 801348a:	f1b8 0f00 	cmp.w	r8, #0
 801348e:	dd0e      	ble.n	80134ae <nk_textedit_delete+0x38>
 8013490:	464c      	mov	r4, r9
 8013492:	1f05      	subs	r5, r0, #4
 8013494:	eb08 0a09 	add.w	sl, r8, r9
            p[i] = nk_str_rune_at(&state->string, where+i);
 8013498:	f106 070c 	add.w	r7, r6, #12
 801349c:	4621      	mov	r1, r4
 801349e:	4638      	mov	r0, r7
 80134a0:	f7fd fe48 	bl	8011134 <nk_str_rune_at>
 80134a4:	f845 0f04 	str.w	r0, [r5, #4]!
        for (i=0; i < length; ++i)
 80134a8:	3401      	adds	r4, #1
 80134aa:	4554      	cmp	r4, sl
 80134ac:	d1f6      	bne.n	801349c <nk_textedit_delete+0x26>
    nk_str_delete_runes(&state->string, where, len);
 80134ae:	4642      	mov	r2, r8
 80134b0:	4649      	mov	r1, r9
 80134b2:	f106 000c 	add.w	r0, r6, #12
 80134b6:	f7fd fdab 	bl	8011010 <nk_str_delete_runes>
    state->has_preferred_x = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
}
 80134c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080134c4 <nk_textedit_delete_selection>:
{
 80134c4:	b510      	push	{r4, lr}
 80134c6:	4604      	mov	r4, r0
    nk_textedit_clamp(state);
 80134c8:	f7ff fd1a 	bl	8012f00 <nk_textedit_clamp>
    if (NK_TEXT_HAS_SELECTION(state)) {
 80134cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80134ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80134d0:	4299      	cmp	r1, r3
 80134d2:	d00a      	beq.n	80134ea <nk_textedit_delete_selection+0x26>
        if (state->select_start < state->select_end) {
 80134d4:	da0a      	bge.n	80134ec <nk_textedit_delete_selection+0x28>
            nk_textedit_delete(state, state->select_start,
 80134d6:	1a5a      	subs	r2, r3, r1
 80134d8:	4620      	mov	r0, r4
 80134da:	f7ff ffcc 	bl	8013476 <nk_textedit_delete>
            state->select_end = state->cursor = state->select_start;
 80134de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80134e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80134e2:	6623      	str	r3, [r4, #96]	; 0x60
        state->has_preferred_x = 0;
 80134e4:	2300      	movs	r3, #0
 80134e6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
}
 80134ea:	bd10      	pop	{r4, pc}
            nk_textedit_delete(state, state->select_end,
 80134ec:	1aca      	subs	r2, r1, r3
 80134ee:	4619      	mov	r1, r3
 80134f0:	4620      	mov	r0, r4
 80134f2:	f7ff ffc0 	bl	8013476 <nk_textedit_delete>
            state->select_start = state->cursor = state->select_end;
 80134f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80134f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80134fa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80134fc:	e7f2      	b.n	80134e4 <nk_textedit_delete_selection+0x20>

080134fe <nk_textedit_cut>:
    if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 80134fe:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8013502:	b173      	cbz	r3, 8013522 <nk_textedit_cut+0x24>
{
 8013504:	b510      	push	{r4, lr}
 8013506:	4604      	mov	r4, r0
    if (NK_TEXT_HAS_SELECTION(state)) {
 8013508:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801350a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801350c:	429a      	cmp	r2, r3
 801350e:	d101      	bne.n	8013514 <nk_textedit_cut+0x16>
   return 0;
 8013510:	2000      	movs	r0, #0
}
 8013512:	bd10      	pop	{r4, pc}
        nk_textedit_delete_selection(state); /* implicitly clamps */
 8013514:	f7ff ffd6 	bl	80134c4 <nk_textedit_delete_selection>
        state->has_preferred_x = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        return 1;
 801351e:	2001      	movs	r0, #1
 8013520:	e7f7      	b.n	8013512 <nk_textedit_cut+0x14>
        return 0;
 8013522:	2000      	movs	r0, #0
}
 8013524:	4770      	bx	lr
	...

08013528 <nk_textedit_text>:
{
 8013528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352c:	b085      	sub	sp, #20
    NK_ASSERT(state);
 801352e:	b150      	cbz	r0, 8013546 <nk_textedit_text+0x1e>
 8013530:	4688      	mov	r8, r1
 8013532:	4617      	mov	r7, r2
 8013534:	4604      	mov	r4, r0
    NK_ASSERT(text);
 8013536:	b169      	cbz	r1, 8013554 <nk_textedit_text+0x2c>
    if (!text || !total_len || state->mode == NK_TEXT_EDIT_MODE_VIEW) return;
 8013538:	b112      	cbz	r2, 8013540 <nk_textedit_text+0x18>
 801353a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 801353e:	b983      	cbnz	r3, 8013562 <nk_textedit_text+0x3a>
}
 8013540:	b005      	add	sp, #20
 8013542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NK_ASSERT(state);
 8013546:	4b44      	ldr	r3, [pc, #272]	; (8013658 <nk_textedit_text+0x130>)
 8013548:	4a44      	ldr	r2, [pc, #272]	; (801365c <nk_textedit_text+0x134>)
 801354a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801354e:	4844      	ldr	r0, [pc, #272]	; (8013660 <nk_textedit_text+0x138>)
 8013550:	f002 fffc 	bl	801654c <__assert_func>
    NK_ASSERT(text);
 8013554:	4b43      	ldr	r3, [pc, #268]	; (8013664 <nk_textedit_text+0x13c>)
 8013556:	4a41      	ldr	r2, [pc, #260]	; (801365c <nk_textedit_text+0x134>)
 8013558:	f240 116d 	movw	r1, #365	; 0x16d
 801355c:	4840      	ldr	r0, [pc, #256]	; (8013660 <nk_textedit_text+0x138>)
 801355e:	f002 fff5 	bl	801654c <__assert_func>
    glyph_len = nk_utf_decode(text, &unicode, total_len);
 8013562:	a903      	add	r1, sp, #12
 8013564:	4640      	mov	r0, r8
 8013566:	f001 fa9b 	bl	8014aa0 <nk_utf_decode>
 801356a:	4606      	mov	r6, r0
    while ((text_len < total_len) && glyph_len)
 801356c:	2f00      	cmp	r7, #0
 801356e:	dde7      	ble.n	8013540 <nk_textedit_text+0x18>
 8013570:	2800      	cmp	r0, #0
 8013572:	d0e5      	beq.n	8013540 <nk_textedit_text+0x18>
    int text_len = 0;
 8013574:	2500      	movs	r5, #0
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 8013576:	f104 0a0c 	add.w	sl, r4, #12
 801357a:	f04f 0901 	mov.w	r9, #1
    nk_textedit_createundo(&state->undo, where, 0, length);
 801357e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	e02f      	b.n	80135e6 <nk_textedit_text+0xbe>
        if (unicode == '\n' && state->single_line) goto next;
 8013586:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 801358a:	b38b      	cbz	r3, 80135f0 <nk_textedit_text+0xc8>
 801358c:	e01f      	b.n	80135ce <nk_textedit_text+0xa6>
NK_INTERN void
nk_textedit_makeundo_replace(struct nk_text_edit *state, int where,
    int old_length, int new_length)
{
    int i;
    nk_rune *p = nk_textedit_createundo(&state->undo, where, old_length, new_length);
 801358e:	464b      	mov	r3, r9
 8013590:	464a      	mov	r2, r9
 8013592:	4659      	mov	r1, fp
 8013594:	9800      	ldr	r0, [sp, #0]
 8013596:	f7ff fe00 	bl	801319a <nk_textedit_createundo>
    if (p) {
 801359a:	9001      	str	r0, [sp, #4]
 801359c:	b128      	cbz	r0, 80135aa <nk_textedit_text+0x82>
        for (i=0; i < old_length; ++i)
            p[i] = nk_str_rune_at(&state->string, where+i);
 801359e:	4659      	mov	r1, fp
 80135a0:	4650      	mov	r0, sl
 80135a2:	f7fd fdc7 	bl	8011134 <nk_str_rune_at>
 80135a6:	9b01      	ldr	r3, [sp, #4]
 80135a8:	6018      	str	r0, [r3, #0]
                nk_str_delete_runes(&state->string, state->cursor, 1);
 80135aa:	464a      	mov	r2, r9
 80135ac:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80135ae:	4650      	mov	r0, sl
 80135b0:	f7fd fd2e 	bl	8011010 <nk_str_delete_runes>
 80135b4:	e02f      	b.n	8013616 <nk_textedit_text+0xee>
            nk_textedit_delete_selection(state); /* implicitly clamps */
 80135b6:	4620      	mov	r0, r4
 80135b8:	f7ff ff84 	bl	80134c4 <nk_textedit_delete_selection>
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 80135bc:	464b      	mov	r3, r9
 80135be:	eb08 0205 	add.w	r2, r8, r5
 80135c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80135c4:	4650      	mov	r0, sl
 80135c6:	f7fd fe1b 	bl	8011200 <nk_str_insert_text_utf8>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	d133      	bne.n	8013636 <nk_textedit_text+0x10e>
        text_len += glyph_len;
 80135ce:	4435      	add	r5, r6
        glyph_len = nk_utf_decode(text + text_len, &unicode, total_len-text_len);
 80135d0:	1b7a      	subs	r2, r7, r5
 80135d2:	a903      	add	r1, sp, #12
 80135d4:	eb08 0005 	add.w	r0, r8, r5
 80135d8:	f001 fa62 	bl	8014aa0 <nk_utf_decode>
 80135dc:	4606      	mov	r6, r0
    while ((text_len < total_len) && glyph_len)
 80135de:	42af      	cmp	r7, r5
 80135e0:	ddae      	ble.n	8013540 <nk_textedit_text+0x18>
 80135e2:	2800      	cmp	r0, #0
 80135e4:	d0ac      	beq.n	8013540 <nk_textedit_text+0x18>
        if (unicode == 127) goto next;
 80135e6:	9903      	ldr	r1, [sp, #12]
 80135e8:	297f      	cmp	r1, #127	; 0x7f
 80135ea:	d0f0      	beq.n	80135ce <nk_textedit_text+0xa6>
        if (unicode == '\n' && state->single_line) goto next;
 80135ec:	290a      	cmp	r1, #10
 80135ee:	d0ca      	beq.n	8013586 <nk_textedit_text+0x5e>
        if (state->filter && !state->filter(state, unicode)) goto next;
 80135f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80135f2:	b11b      	cbz	r3, 80135fc <nk_textedit_text+0xd4>
 80135f4:	4620      	mov	r0, r4
 80135f6:	4798      	blx	r3
 80135f8:	2800      	cmp	r0, #0
 80135fa:	d0e8      	beq.n	80135ce <nk_textedit_text+0xa6>
        if (!NK_TEXT_HAS_SELECTION(state) &&
 80135fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80135fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013600:	429a      	cmp	r2, r3
 8013602:	d1d8      	bne.n	80135b6 <nk_textedit_text+0x8e>
            state->cursor < state->string.len)
 8013604:	f8d4 b058 	ldr.w	fp, [r4, #88]	; 0x58
        if (!NK_TEXT_HAS_SELECTION(state) &&
 8013608:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801360a:	459b      	cmp	fp, r3
 801360c:	dad3      	bge.n	80135b6 <nk_textedit_text+0x8e>
            if (state->mode == NK_TEXT_EDIT_MODE_REPLACE) {
 801360e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8013612:	2b02      	cmp	r3, #2
 8013614:	d0bb      	beq.n	801358e <nk_textedit_text+0x66>
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 8013616:	464b      	mov	r3, r9
 8013618:	eb08 0205 	add.w	r2, r8, r5
 801361c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801361e:	4650      	mov	r0, sl
 8013620:	f7fd fdee 	bl	8011200 <nk_str_insert_text_utf8>
 8013624:	2800      	cmp	r0, #0
 8013626:	d0d2      	beq.n	80135ce <nk_textedit_text+0xa6>
                ++state->cursor;
 8013628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801362a:	3301      	adds	r3, #1
 801362c:	65a3      	str	r3, [r4, #88]	; 0x58
                state->has_preferred_x = 0;
 801362e:	2300      	movs	r3, #0
 8013630:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013634:	e7cb      	b.n	80135ce <nk_textedit_text+0xa6>
    nk_textedit_createundo(&state->undo, where, 0, length);
 8013636:	464b      	mov	r3, r9
 8013638:	2200      	movs	r2, #0
 801363a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801363c:	9800      	ldr	r0, [sp, #0]
 801363e:	f7ff fdac 	bl	801319a <nk_textedit_createundo>
                state->cursor = NK_MIN(state->cursor + 1, state->string.len);
 8013642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013644:	3301      	adds	r3, #1
 8013646:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013648:	4293      	cmp	r3, r2
 801364a:	bfa8      	it	ge
 801364c:	4613      	movge	r3, r2
 801364e:	65a3      	str	r3, [r4, #88]	; 0x58
                state->has_preferred_x = 0;
 8013650:	2300      	movs	r3, #0
 8013652:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013656:	e7ba      	b.n	80135ce <nk_textedit_text+0xa6>
 8013658:	0801ad3c 	.word	0x0801ad3c
 801365c:	0801b9fc 	.word	0x0801b9fc
 8013660:	0801b9c0 	.word	0x0801b9c0
 8013664:	0801b79c 	.word	0x0801b79c

08013668 <nk_textedit_undo>:
    if (s->undo_point == 0)
 8013668:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801366c:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
 8013670:	2b00      	cmp	r3, #0
 8013672:	f000 80e7 	beq.w	8013844 <nk_textedit_undo+0x1dc>
{
 8013676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367a:	b083      	sub	sp, #12
 801367c:	4604      	mov	r4, r0
    u = s->undo_rec[s->undo_point-1];
 801367e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013682:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013686:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8013688:	f9b2 9068 	ldrsh.w	r9, [r2, #104]	; 0x68
 801368c:	f9b2 606a 	ldrsh.w	r6, [r2, #106]	; 0x6a
 8013690:	3b01      	subs	r3, #1
 8013692:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013696:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801369a:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 801369e:	9301      	str	r3, [sp, #4]
    r = &s->undo_rec[s->redo_point-1];
 80136a0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80136a4:	f9b3 34b2 	ldrsh.w	r3, [r3, #1202]	; 0x4b2
    r->char_storage = -1;
 80136a8:	1e5a      	subs	r2, r3, #1
 80136aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80136ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80136b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80136b6:	f8a2 1078 	strh.w	r1, [r2, #120]	; 0x78
    r->insert_length = u.delete_length;
 80136ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80136be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80136c2:	f8a3 6068 	strh.w	r6, [r3, #104]	; 0x68
    r->delete_length = u.insert_length;
 80136c6:	f8a3 906a 	strh.w	r9, [r3, #106]	; 0x6a
    r->where = u.where;
 80136ca:	665d      	str	r5, [r3, #100]	; 0x64
    if (u.delete_length)
 80136cc:	b1c6      	cbz	r6, 8013700 <nk_textedit_undo+0x98>
        if (s->undo_char_point + u.delete_length >= NK_TEXTEDIT_UNDOCHARCOUNT) {
 80136ce:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 80136d2:	f9b2 24b4 	ldrsh.w	r2, [r2, #1204]	; 0x4b4
 80136d6:	4432      	add	r2, r6
 80136d8:	f240 31e6 	movw	r1, #998	; 0x3e6
 80136dc:	428a      	cmp	r2, r1
 80136de:	dc06      	bgt.n	80136ee <nk_textedit_undo+0x86>
    struct nk_text_undo_state *s = &state->undo;
 80136e0:	f100 0b70 	add.w	fp, r0, #112	; 0x70
            while (s->undo_char_point + u.delete_length > s->redo_char_point) {
 80136e4:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
            NK_MEMCPY(state->undo_char + state->redo_char_point,
 80136e8:	f200 5a14 	addw	sl, r0, #1300	; 0x514
 80136ec:	e04a      	b.n	8013784 <nk_textedit_undo+0x11c>
            r->insert_length = 0;
 80136ee:	2200      	movs	r2, #0
 80136f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        nk_str_delete_runes(&state->string, u.where, u.delete_length);
 80136f4:	4632      	mov	r2, r6
 80136f6:	4629      	mov	r1, r5
 80136f8:	f104 000c 	add.w	r0, r4, #12
 80136fc:	f7fd fc88 	bl	8011010 <nk_str_delete_runes>
    if (u.insert_length) {
 8013700:	f1b9 0f00 	cmp.w	r9, #0
 8013704:	f040 808a 	bne.w	801381c <nk_textedit_undo+0x1b4>
    state->cursor = (short)(u.where + u.insert_length);
 8013708:	444d      	add	r5, r9
 801370a:	b22d      	sxth	r5, r5
 801370c:	65a5      	str	r5, [r4, #88]	; 0x58
    s->undo_point--;
 801370e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8013712:	f8b4 34b0 	ldrh.w	r3, [r4, #1200]	; 0x4b0
 8013716:	3b01      	subs	r3, #1
 8013718:	f8a4 34b0 	strh.w	r3, [r4, #1200]	; 0x4b0
    s->redo_point--;
 801371c:	f8b4 34b2 	ldrh.w	r3, [r4, #1202]	; 0x4b2
 8013720:	3b01      	subs	r3, #1
 8013722:	f8a4 34b2 	strh.w	r3, [r4, #1202]	; 0x4b2
}
 8013726:	b003      	add	sp, #12
 8013728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int n = state->undo_rec[k].insert_length, i;
 801372c:	f9b4 150c 	ldrsh.w	r1, [r4, #1292]	; 0x50c
            state->redo_char_point = (short)(state->redo_char_point + n);
 8013730:	fa1f f881 	uxth.w	r8, r1
 8013734:	eb08 0002 	add.w	r0, r8, r2
 8013738:	b200      	sxth	r0, r0
 801373a:	f8a7 04b6 	strh.w	r0, [r7, #1206]	; 0x4b6
                state->undo_char + state->redo_char_point-n, num * sizeof(char));
 801373e:	1a41      	subs	r1, r0, r1
            NK_MEMCPY(state->undo_char + state->redo_char_point,
 8013740:	f5c0 7279 	rsb	r2, r0, #996	; 0x3e4
 8013744:	3203      	adds	r2, #3
 8013746:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801374a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801374e:	f001 fa5f 	bl	8014c10 <nk_memcopy>
            for (i = state->redo_point; i < k; ++i) {
 8013752:	f9b7 34b2 	ldrsh.w	r3, [r7, #1202]	; 0x4b2
 8013756:	2b61      	cmp	r3, #97	; 0x61
 8013758:	dc23      	bgt.n	80137a2 <nk_textedit_undo+0x13a>
 801375a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801375e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013762:	f504 6193 	add.w	r1, r4, #1176	; 0x498
                if (state->undo_rec[i].char_storage >= 0) {
 8013766:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 801376a:	2a00      	cmp	r2, #0
                        (state->undo_rec[i].char_storage + n);
 801376c:	bfa4      	itt	ge
 801376e:	4442      	addge	r2, r8
                    state->undo_rec[i].char_storage = (short)
 8013770:	f8a3 2078 	strhge.w	r2, [r3, #120]	; 0x78
            for (i = state->redo_point; i < k; ++i) {
 8013774:	330c      	adds	r3, #12
 8013776:	428b      	cmp	r3, r1
 8013778:	d1f5      	bne.n	8013766 <nk_textedit_undo+0xfe>
 801377a:	e012      	b.n	80137a2 <nk_textedit_undo+0x13a>
                if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 801377c:	f9b7 34b2 	ldrsh.w	r3, [r7, #1202]	; 0x4b2
 8013780:	2b63      	cmp	r3, #99	; 0x63
 8013782:	d0d0      	beq.n	8013726 <nk_textedit_undo+0xbe>
            while (s->undo_char_point + u.delete_length > s->redo_char_point) {
 8013784:	f9b7 24b6 	ldrsh.w	r2, [r7, #1206]	; 0x4b6
 8013788:	f9b7 34b4 	ldrsh.w	r3, [r7, #1204]	; 0x4b4
 801378c:	4433      	add	r3, r6
 801378e:	4293      	cmp	r3, r2
 8013790:	dd1c      	ble.n	80137cc <nk_textedit_undo+0x164>
    if (state->redo_point <= k) {
 8013792:	f9b7 34b2 	ldrsh.w	r3, [r7, #1202]	; 0x4b2
 8013796:	2b62      	cmp	r3, #98	; 0x62
 8013798:	dcf0      	bgt.n	801377c <nk_textedit_undo+0x114>
        if (state->undo_rec[k].char_storage >= 0) {
 801379a:	f9b4 3510 	ldrsh.w	r3, [r4, #1296]	; 0x510
 801379e:	2b00      	cmp	r3, #0
 80137a0:	dac4      	bge.n	801372c <nk_textedit_undo+0xc4>
        ++state->redo_point;
 80137a2:	f8b7 14b2 	ldrh.w	r1, [r7, #1202]	; 0x4b2
 80137a6:	3101      	adds	r1, #1
 80137a8:	b209      	sxth	r1, r1
 80137aa:	f8a7 14b2 	strh.w	r1, [r7, #1202]	; 0x4b2
        if (num) NK_MEMCPY(state->undo_rec + state->redo_point-1,
 80137ae:	f1d1 0263 	rsbs	r2, r1, #99	; 0x63
 80137b2:	d0b8      	beq.n	8013726 <nk_textedit_undo+0xbe>
 80137b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80137b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80137bc:	eb0b 0081 	add.w	r0, fp, r1, lsl #2
 80137c0:	0092      	lsls	r2, r2, #2
 80137c2:	4601      	mov	r1, r0
 80137c4:	380c      	subs	r0, #12
 80137c6:	f001 fa23 	bl	8014c10 <nk_memcopy>
 80137ca:	e7d7      	b.n	801377c <nk_textedit_undo+0x114>
            r = &s->undo_rec[s->redo_point-1];
 80137cc:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
 80137d0:	f9b1 a4b2 	ldrsh.w	sl, [r1, #1202]	; 0x4b2
 80137d4:	f10a 3aff 	add.w	sl, sl, #4294967295
            r->char_storage = (short)(s->redo_char_point - u.delete_length);
 80137d8:	1b92      	subs	r2, r2, r6
 80137da:	b212      	sxth	r2, r2
 80137dc:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 80137e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80137e4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
            s->redo_char_point = (short)(s->redo_char_point -  u.delete_length);
 80137e8:	f8a1 24b6 	strh.w	r2, [r1, #1206]	; 0x4b6
            for (i=0; i < u.delete_length; ++i)
 80137ec:	2e00      	cmp	r6, #0
 80137ee:	dd81      	ble.n	80136f4 <nk_textedit_undo+0x8c>
 80137f0:	f04f 0800 	mov.w	r8, #0
                s->undo_char[r->char_storage + i] =
 80137f4:	469a      	mov	sl, r3
                    nk_str_rune_at(&state->string, u.where + i);
 80137f6:	f104 0b0c 	add.w	fp, r4, #12
                s->undo_char[r->char_storage + i] =
 80137fa:	f9ba 7078 	ldrsh.w	r7, [sl, #120]	; 0x78
 80137fe:	4447      	add	r7, r8
                    nk_str_rune_at(&state->string, u.where + i);
 8013800:	eb05 0108 	add.w	r1, r5, r8
 8013804:	4658      	mov	r0, fp
 8013806:	f7fd fc95 	bl	8011134 <nk_str_rune_at>
                s->undo_char[r->char_storage + i] =
 801380a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801380e:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
            for (i=0; i < u.delete_length; ++i)
 8013812:	f108 0801 	add.w	r8, r8, #1
 8013816:	4546      	cmp	r6, r8
 8013818:	d1ef      	bne.n	80137fa <nk_textedit_undo+0x192>
 801381a:	e76b      	b.n	80136f4 <nk_textedit_undo+0x8c>
            &s->undo_char[u.char_storage], u.insert_length);
 801381c:	9b01      	ldr	r3, [sp, #4]
 801381e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
        nk_str_insert_text_runes(&state->string, u.where,
 8013822:	464b      	mov	r3, r9
 8013824:	f202 5214 	addw	r2, r2, #1300	; 0x514
 8013828:	4629      	mov	r1, r5
 801382a:	f104 000c 	add.w	r0, r4, #12
 801382e:	f7fd fd21 	bl	8011274 <nk_str_insert_text_runes>
        s->undo_char_point = (short)(s->undo_char_point - u.insert_length);
 8013832:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8013836:	f8b2 34b4 	ldrh.w	r3, [r2, #1204]	; 0x4b4
 801383a:	eba3 0309 	sub.w	r3, r3, r9
 801383e:	f8a2 34b4 	strh.w	r3, [r2, #1204]	; 0x4b4
 8013842:	e761      	b.n	8013708 <nk_textedit_undo+0xa0>
 8013844:	4770      	bx	lr

08013846 <nk_textedit_redo>:
    if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 8013846:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801384a:	f9b3 34b2 	ldrsh.w	r3, [r3, #1202]	; 0x4b2
 801384e:	2b63      	cmp	r3, #99	; 0x63
 8013850:	f000 8084 	beq.w	801395c <nk_textedit_redo+0x116>
{
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	b083      	sub	sp, #12
 801385a:	4604      	mov	r4, r0
    u = &s->undo_rec[s->undo_point];
 801385c:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8013860:	f9b2 84b0 	ldrsh.w	r8, [r2, #1200]	; 0x4b0
    r = s->undo_rec[s->redo_point];
 8013864:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013868:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801386c:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
 8013870:	f9b2 9074 	ldrsh.w	r9, [r2, #116]	; 0x74
 8013874:	f9b2 a076 	ldrsh.w	sl, [r2, #118]	; 0x76
 8013878:	f9b2 3078 	ldrsh.w	r3, [r2, #120]	; 0x78
 801387c:	9301      	str	r3, [sp, #4]
    u->delete_length = r.insert_length;
 801387e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013882:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8013886:	f8a6 9076 	strh.w	r9, [r6, #118]	; 0x76
    u->insert_length = r.delete_length;
 801388a:	f8a6 a074 	strh.w	sl, [r6, #116]	; 0x74
    u->where = r.where;
 801388e:	f8c6 b070 	str.w	fp, [r6, #112]	; 0x70
    u->char_storage = -1;
 8013892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013896:	f8a6 2078 	strh.w	r2, [r6, #120]	; 0x78
    if (r.delete_length) {
 801389a:	f1ba 0f00 	cmp.w	sl, #0
 801389e:	d014      	beq.n	80138ca <nk_textedit_redo+0x84>
        if (s->undo_char_point + u->insert_length > s->redo_char_point) {
 80138a0:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 80138a4:	f9b2 34b4 	ldrsh.w	r3, [r2, #1204]	; 0x4b4
 80138a8:	eb03 010a 	add.w	r1, r3, sl
 80138ac:	f9b2 24b6 	ldrsh.w	r2, [r2, #1206]	; 0x4b6
 80138b0:	4291      	cmp	r1, r2
 80138b2:	dd1f      	ble.n	80138f4 <nk_textedit_redo+0xae>
            u->insert_length = 0;
 80138b4:	2300      	movs	r3, #0
 80138b6:	f8a6 3074 	strh.w	r3, [r6, #116]	; 0x74
            u->delete_length = 0;
 80138ba:	f8a6 3076 	strh.w	r3, [r6, #118]	; 0x76
        nk_str_delete_runes(&state->string, r.where, r.delete_length);
 80138be:	4652      	mov	r2, sl
 80138c0:	4659      	mov	r1, fp
 80138c2:	f104 000c 	add.w	r0, r4, #12
 80138c6:	f7fd fba3 	bl	8011010 <nk_str_delete_runes>
    if (r.insert_length) {
 80138ca:	f1b9 0f00 	cmp.w	r9, #0
 80138ce:	d139      	bne.n	8013944 <nk_textedit_redo+0xfe>
    state->cursor = r.where + r.insert_length;
 80138d0:	eb09 030b 	add.w	r3, r9, fp
 80138d4:	65a3      	str	r3, [r4, #88]	; 0x58
    s->undo_point++;
 80138d6:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80138da:	f8b4 34b0 	ldrh.w	r3, [r4, #1200]	; 0x4b0
 80138de:	3301      	adds	r3, #1
 80138e0:	f8a4 34b0 	strh.w	r3, [r4, #1200]	; 0x4b0
    s->redo_point++;
 80138e4:	f8b4 34b2 	ldrh.w	r3, [r4, #1202]	; 0x4b2
 80138e8:	3301      	adds	r3, #1
 80138ea:	f8a4 34b2 	strh.w	r3, [r4, #1202]	; 0x4b2
}
 80138ee:	b003      	add	sp, #12
 80138f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            u->char_storage = s->undo_char_point;
 80138f4:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80138f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80138fc:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
            s->undo_char_point = (short)(s->undo_char_point + u->insert_length);
 8013900:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8013904:	4453      	add	r3, sl
 8013906:	f8a2 34b4 	strh.w	r3, [r2, #1204]	; 0x4b4
            for (i=0; i < u->insert_length; ++i) {
 801390a:	f1ba 0f00 	cmp.w	sl, #0
 801390e:	ddd6      	ble.n	80138be <nk_textedit_redo+0x78>
 8013910:	2700      	movs	r7, #0
                s->undo_char[u->char_storage + i] =
 8013912:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013916:	eb00 0888 	add.w	r8, r0, r8, lsl #2
                    nk_str_rune_at(&state->string, u->where + i);
 801391a:	f100 030c 	add.w	r3, r0, #12
 801391e:	9300      	str	r3, [sp, #0]
                s->undo_char[u->char_storage + i] =
 8013920:	f9b8 5078 	ldrsh.w	r5, [r8, #120]	; 0x78
 8013924:	443d      	add	r5, r7
                    nk_str_rune_at(&state->string, u->where + i);
 8013926:	6f31      	ldr	r1, [r6, #112]	; 0x70
 8013928:	4439      	add	r1, r7
 801392a:	9800      	ldr	r0, [sp, #0]
 801392c:	f7fd fc02 	bl	8011134 <nk_str_rune_at>
                s->undo_char[u->char_storage + i] =
 8013930:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8013934:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
            for (i=0; i < u->insert_length; ++i) {
 8013938:	3701      	adds	r7, #1
 801393a:	f9b6 3074 	ldrsh.w	r3, [r6, #116]	; 0x74
 801393e:	42bb      	cmp	r3, r7
 8013940:	dcee      	bgt.n	8013920 <nk_textedit_redo+0xda>
 8013942:	e7bc      	b.n	80138be <nk_textedit_redo+0x78>
            &s->undo_char[r.char_storage], r.insert_length);
 8013944:	9b01      	ldr	r3, [sp, #4]
 8013946:	eb04 0283 	add.w	r2, r4, r3, lsl #2
        nk_str_insert_text_runes(&state->string, r.where,
 801394a:	464b      	mov	r3, r9
 801394c:	f202 5214 	addw	r2, r2, #1300	; 0x514
 8013950:	4659      	mov	r1, fp
 8013952:	f104 000c 	add.w	r0, r4, #12
 8013956:	f7fd fc8d 	bl	8011274 <nk_str_insert_text_runes>
 801395a:	e7b9      	b.n	80138d0 <nk_textedit_redo+0x8a>
 801395c:	4770      	bx	lr
	...

08013960 <nk_textedit_clear_state>:
    }
}
NK_LIB void
nk_textedit_clear_state(struct nk_text_edit *state, enum nk_text_edit_type type,
    nk_plugin_filter filter)
{
 8013960:	b510      	push	{r4, lr}
 8013962:	4604      	mov	r4, r0
    /* reset the state to default */
   state->undo.undo_point = 0;
 8013964:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8013968:	2300      	movs	r3, #0
 801396a:	f8a0 34b0 	strh.w	r3, [r0, #1200]	; 0x4b0
   state->undo.undo_char_point = 0;
 801396e:	f8a0 34b4 	strh.w	r3, [r0, #1204]	; 0x4b4
   state->undo.redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;
 8013972:	f04f 0c63 	mov.w	ip, #99	; 0x63
 8013976:	f8a0 c4b2 	strh.w	ip, [r0, #1202]	; 0x4b2
   state->undo.redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;
 801397a:	f240 3ce7 	movw	ip, #999	; 0x3e7
 801397e:	f8a0 c4b6 	strh.w	ip, [r0, #1206]	; 0x4b6
   state->select_end = state->select_start = 0;
 8013982:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013984:	6623      	str	r3, [r4, #96]	; 0x60
   state->cursor = 0;
 8013986:	65a3      	str	r3, [r4, #88]	; 0x58
   state->has_preferred_x = 0;
 8013988:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   state->preferred_x = 0;
 801398c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80139c0 <nk_textedit_clear_state+0x60>
 8013990:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
   state->cursor_at_end_of_line = 0;
 8013994:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   state->initialized = 1;
 8013998:	2001      	movs	r0, #1
 801399a:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
   state->single_line = (unsigned char)(type == NK_TEXT_EDIT_SINGLE_LINE);
 801399e:	fab1 f181 	clz	r1, r1
 80139a2:	0949      	lsrs	r1, r1, #5
 80139a4:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
   state->mode = NK_TEXT_EDIT_MODE_VIEW;
 80139a8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   state->filter = filter;
 80139ac:	64e2      	str	r2, [r4, #76]	; 0x4c
   state->scrollbar = nk_vec2(0,0);
 80139ae:	eef0 0a40 	vmov.f32	s1, s0
 80139b2:	f7f9 ff49 	bl	800d848 <nk_vec2>
 80139b6:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
 80139ba:	edc4 0a15 	vstr	s1, [r4, #84]	; 0x54
}
 80139be:	bd10      	pop	{r4, pc}
 80139c0:	00000000 	.word	0x00000000

080139c4 <nk_textedit_select_all>:
    nk_str_init_default(&state->string);
}
#endif
NK_API void
nk_textedit_select_all(struct nk_text_edit *state)
{
 80139c4:	b508      	push	{r3, lr}
    NK_ASSERT(state);
 80139c6:	b120      	cbz	r0, 80139d2 <nk_textedit_select_all+0xe>
    state->select_start = 0;
 80139c8:	2200      	movs	r2, #0
 80139ca:	65c2      	str	r2, [r0, #92]	; 0x5c
    state->select_end = state->string.len;
 80139cc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80139ce:	6602      	str	r2, [r0, #96]	; 0x60
}
 80139d0:	bd08      	pop	{r3, pc}
    NK_ASSERT(state);
 80139d2:	4b03      	ldr	r3, [pc, #12]	; (80139e0 <nk_textedit_select_all+0x1c>)
 80139d4:	4a03      	ldr	r2, [pc, #12]	; (80139e4 <nk_textedit_select_all+0x20>)
 80139d6:	f240 31fa 	movw	r1, #1018	; 0x3fa
 80139da:	4803      	ldr	r0, [pc, #12]	; (80139e8 <nk_textedit_select_all+0x24>)
 80139dc:	f002 fdb6 	bl	801654c <__assert_func>
 80139e0:	0801ad3c 	.word	0x0801ad3c
 80139e4:	0801b9e4 	.word	0x0801b9e4
 80139e8:	0801b9c0 	.word	0x0801b9c0

080139ec <nk_textedit_key>:
{
 80139ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139f0:	ed2d 8b02 	vpush	{d8}
 80139f4:	b08f      	sub	sp, #60	; 0x3c
 80139f6:	4604      	mov	r4, r0
 80139f8:	4616      	mov	r6, r2
 80139fa:	461d      	mov	r5, r3
 80139fc:	eeb0 8a40 	vmov.f32	s16, s0
    switch (key)
 8013a00:	3903      	subs	r1, #3
 8013a02:	2916      	cmp	r1, #22
 8013a04:	d81d      	bhi.n	8013a42 <nk_textedit_key+0x56>
 8013a06:	e8df f011 	tbh	[pc, r1, lsl #1]
 8013a0a:	019a      	.short	0x019a
 8013a0c:	001c001c 	.word	0x001c001c
 8013a10:	001c01b1 	.word	0x001c01b1
 8013a14:	001c001c 	.word	0x001c001c
 8013a18:	00cc0133 	.word	0x00cc0133
 8013a1c:	006c0047 	.word	0x006c0047
 8013a20:	0035002d 	.word	0x0035002d
 8013a24:	01f0003d 	.word	0x01f0003d
 8013a28:	01ce022d 	.word	0x01ce022d
 8013a2c:	001701de 	.word	0x001701de
 8013a30:	00270021 	.word	0x00270021
 8013a34:	00ad008e 	.word	0x00ad008e
         nk_textedit_undo(state);
 8013a38:	f7ff fe16 	bl	8013668 <nk_textedit_undo>
         state->has_preferred_x = 0;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
}
 8013a42:	b00f      	add	sp, #60	; 0x3c
 8013a44:	ecbd 8b02 	vpop	{d8}
 8013a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nk_textedit_redo(state);
 8013a4c:	f7ff fefb 	bl	8013846 <nk_textedit_redo>
        state->has_preferred_x = 0;
 8013a50:	2300      	movs	r3, #0
 8013a52:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        break;
 8013a56:	e7f4      	b.n	8013a42 <nk_textedit_key+0x56>
        nk_textedit_select_all(state);
 8013a58:	f7ff ffb4 	bl	80139c4 <nk_textedit_select_all>
        state->has_preferred_x = 0;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        break;
 8013a62:	e7ee      	b.n	8013a42 <nk_textedit_key+0x56>
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8013a64:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d1ea      	bne.n	8013a42 <nk_textedit_key+0x56>
            state->mode = NK_TEXT_EDIT_MODE_INSERT;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 8013a72:	e7e6      	b.n	8013a42 <nk_textedit_key+0x56>
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8013a74:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d1e2      	bne.n	8013a42 <nk_textedit_key+0x56>
            state->mode = NK_TEXT_EDIT_MODE_REPLACE;
 8013a7c:	2302      	movs	r3, #2
 8013a7e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 8013a82:	e7de      	b.n	8013a42 <nk_textedit_key+0x56>
        if (state->mode == NK_TEXT_EDIT_MODE_INSERT ||
 8013a84:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d8d8      	bhi.n	8013a42 <nk_textedit_key+0x56>
            state->mode = NK_TEXT_EDIT_MODE_VIEW;
 8013a90:	2300      	movs	r3, #0
 8013a92:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 8013a96:	e7d4      	b.n	8013a42 <nk_textedit_key+0x56>
        if (shift_mod) {
 8013a98:	b96e      	cbnz	r6, 8013ab6 <nk_textedit_key+0xca>
            if (NK_TEXT_HAS_SELECTION(state))
 8013a9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8013a9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d11b      	bne.n	8013ada <nk_textedit_key+0xee>
            else if (state->cursor > 0)
 8013aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013aa4:	2b00      	cmp	r3, #0
               --state->cursor;
 8013aa6:	bfc4      	itt	gt
 8013aa8:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8013aac:	65a3      	strgt	r3, [r4, #88]	; 0x58
            state->has_preferred_x = 0;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013ab4:	e7c5      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_clamp(state);
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f7ff fa22 	bl	8012f00 <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8013abc:	4620      	mov	r0, r4
 8013abe:	f7ff fa46 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
            if (state->select_end > 0)
 8013ac2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013ac4:	2b00      	cmp	r3, #0
                --state->select_end;
 8013ac6:	bfc4      	itt	gt
 8013ac8:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8013acc:	6623      	strgt	r3, [r4, #96]	; 0x60
            state->cursor = state->select_end;
 8013ace:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013ad0:	65a3      	str	r3, [r4, #88]	; 0x58
            state->has_preferred_x = 0;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013ad8:	e7b3      	b.n	8013a42 <nk_textedit_key+0x56>
                nk_textedit_move_to_first(state);
 8013ada:	4620      	mov	r0, r4
 8013adc:	f7ff fa29 	bl	8012f32 <nk_textedit_move_to_first>
 8013ae0:	e7e5      	b.n	8013aae <nk_textedit_key+0xc2>
        if (shift_mod) {
 8013ae2:	b96e      	cbnz	r6, 8013b00 <nk_textedit_key+0x114>
            if (NK_TEXT_HAS_SELECTION(state))
 8013ae4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8013ae6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d118      	bne.n	8013b1e <nk_textedit_key+0x132>
            else ++state->cursor;
 8013aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013aee:	3301      	adds	r3, #1
 8013af0:	65a3      	str	r3, [r4, #88]	; 0x58
            nk_textedit_clamp(state);
 8013af2:	4620      	mov	r0, r4
 8013af4:	f7ff fa04 	bl	8012f00 <nk_textedit_clamp>
            state->has_preferred_x = 0;
 8013af8:	2300      	movs	r3, #0
 8013afa:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013afe:	e7a0      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_prep_selection_at_cursor(state);
 8013b00:	4620      	mov	r0, r4
 8013b02:	f7ff fa24 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
            ++state->select_end;
 8013b06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013b08:	3301      	adds	r3, #1
 8013b0a:	6623      	str	r3, [r4, #96]	; 0x60
            nk_textedit_clamp(state);
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f7ff f9f7 	bl	8012f00 <nk_textedit_clamp>
            state->cursor = state->select_end;
 8013b12:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013b14:	65a3      	str	r3, [r4, #88]	; 0x58
            state->has_preferred_x = 0;
 8013b16:	2300      	movs	r3, #0
 8013b18:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013b1c:	e791      	b.n	8013a42 <nk_textedit_key+0x56>
                nk_textedit_move_to_last(state);
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f7ff fc7e 	bl	8013420 <nk_textedit_move_to_last>
 8013b24:	e7e5      	b.n	8013af2 <nk_textedit_key+0x106>
        if (shift_mod) {
 8013b26:	b17a      	cbz	r2, 8013b48 <nk_textedit_key+0x15c>
            if( !NK_TEXT_HAS_SELECTION( state ) )
 8013b28:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013b2a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d008      	beq.n	8013b42 <nk_textedit_key+0x156>
            state->cursor = nk_textedit_move_to_word_previous(state);
 8013b30:	4620      	mov	r0, r4
 8013b32:	f7ff fbcb 	bl	80132cc <nk_textedit_move_to_word_previous>
 8013b36:	65a0      	str	r0, [r4, #88]	; 0x58
            state->select_end = state->cursor;
 8013b38:	6620      	str	r0, [r4, #96]	; 0x60
            nk_textedit_clamp(state );
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f7ff f9e0 	bl	8012f00 <nk_textedit_clamp>
 8013b40:	e77f      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_prep_selection_at_cursor(state);
 8013b42:	f7ff fa04 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
 8013b46:	e7f3      	b.n	8013b30 <nk_textedit_key+0x144>
            if (NK_TEXT_HAS_SELECTION(state))
 8013b48:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013b4a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d002      	beq.n	8013b56 <nk_textedit_key+0x16a>
                nk_textedit_move_to_first(state);
 8013b50:	f7ff f9ef 	bl	8012f32 <nk_textedit_move_to_first>
 8013b54:	e775      	b.n	8013a42 <nk_textedit_key+0x56>
                state->cursor = nk_textedit_move_to_word_previous(state);
 8013b56:	f7ff fbb9 	bl	80132cc <nk_textedit_move_to_word_previous>
 8013b5a:	65a0      	str	r0, [r4, #88]	; 0x58
                nk_textedit_clamp(state );
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f7ff f9cf 	bl	8012f00 <nk_textedit_clamp>
 8013b62:	e76e      	b.n	8013a42 <nk_textedit_key+0x56>
        if (shift_mod) {
 8013b64:	b17a      	cbz	r2, 8013b86 <nk_textedit_key+0x19a>
            if( !NK_TEXT_HAS_SELECTION( state ) )
 8013b66:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013b68:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d008      	beq.n	8013b80 <nk_textedit_key+0x194>
            state->cursor = nk_textedit_move_to_word_next(state);
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f7ff fbbd 	bl	80132ee <nk_textedit_move_to_word_next>
 8013b74:	65a0      	str	r0, [r4, #88]	; 0x58
            state->select_end = state->cursor;
 8013b76:	6620      	str	r0, [r4, #96]	; 0x60
            nk_textedit_clamp(state);
 8013b78:	4620      	mov	r0, r4
 8013b7a:	f7ff f9c1 	bl	8012f00 <nk_textedit_clamp>
 8013b7e:	e760      	b.n	8013a42 <nk_textedit_key+0x56>
                nk_textedit_prep_selection_at_cursor(state);
 8013b80:	f7ff f9e5 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
 8013b84:	e7f3      	b.n	8013b6e <nk_textedit_key+0x182>
            if (NK_TEXT_HAS_SELECTION(state))
 8013b86:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013b88:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d002      	beq.n	8013b94 <nk_textedit_key+0x1a8>
                nk_textedit_move_to_last(state);
 8013b8e:	f7ff fc47 	bl	8013420 <nk_textedit_move_to_last>
 8013b92:	e756      	b.n	8013a42 <nk_textedit_key+0x56>
                state->cursor = nk_textedit_move_to_word_next(state);
 8013b94:	f7ff fbab 	bl	80132ee <nk_textedit_move_to_word_next>
 8013b98:	65a0      	str	r0, [r4, #88]	; 0x58
                nk_textedit_clamp(state );
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f7ff f9b0 	bl	8012f00 <nk_textedit_clamp>
 8013ba0:	e74f      	b.n	8013a42 <nk_textedit_key+0x56>
        if (state->single_line) {
 8013ba2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d19b      	bne.n	8013ae2 <nk_textedit_key+0xf6>
        if (sel)
 8013baa:	2a00      	cmp	r2, #0
 8013bac:	d157      	bne.n	8013c5e <nk_textedit_key+0x272>
        else if (NK_TEXT_HAS_SELECTION(state))
 8013bae:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013bb0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d156      	bne.n	8013c64 <nk_textedit_key+0x278>
        nk_textedit_clamp(state);
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	f7ff f9a2 	bl	8012f00 <nk_textedit_clamp>
        nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8013bbc:	9500      	str	r5, [sp, #0]
 8013bbe:	eeb0 0a48 	vmov.f32	s0, s16
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013bc6:	4621      	mov	r1, r4
 8013bc8:	a802      	add	r0, sp, #8
 8013bca:	f7ff fba5 	bl	8013318 <nk_textedit_find_charpos>
        if (find.length)
 8013bce:	9b06      	ldr	r3, [sp, #24]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	f43f af36 	beq.w	8013a42 <nk_textedit_key+0x56>
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 8013bd6:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 8013bda:	2a00      	cmp	r2, #0
 8013bdc:	d045      	beq.n	8013c6a <nk_textedit_key+0x27e>
 8013bde:	edd4 8a1b 	vldr	s17, [r4, #108]	; 0x6c
            int start = find.first_char + find.length;
 8013be2:	9a05      	ldr	r2, [sp, #20]
 8013be4:	eb03 0802 	add.w	r8, r3, r2
            state->cursor = start;
 8013be8:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
            nk_textedit_layout_row(&row, state, state->cursor, row_height, font);
 8013bec:	462b      	mov	r3, r5
 8013bee:	eeb0 0a48 	vmov.f32	s0, s16
 8013bf2:	4642      	mov	r2, r8
 8013bf4:	4621      	mov	r1, r4
 8013bf6:	a808      	add	r0, sp, #32
 8013bf8:	f7ff f9c8 	bl	8012f8c <nk_textedit_layout_row>
            x = row.x0;
 8013bfc:	ed9d 8a08 	vldr	s16, [sp, #32]
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8013c00:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8013c04:	f1b9 0f00 	cmp.w	r9, #0
 8013c08:	bfc8      	it	gt
 8013c0a:	2700      	movgt	r7, #0
 8013c0c:	dd19      	ble.n	8013c42 <nk_textedit_key+0x256>
 8013c0e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8013c12:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c1a:	dd12      	ble.n	8013c42 <nk_textedit_key+0x256>
                float dx = nk_textedit_get_width(state, start, i, font);
 8013c1c:	462b      	mov	r3, r5
 8013c1e:	463a      	mov	r2, r7
 8013c20:	4641      	mov	r1, r8
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7ff f99c 	bl	8012f60 <nk_textedit_get_width>
                x += dx;
 8013c28:	ee38 8a00 	vadd.f32	s16, s16, s0
                if (x > goal_x)
 8013c2c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8013c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c34:	d405      	bmi.n	8013c42 <nk_textedit_key+0x256>
                ++state->cursor;
 8013c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013c38:	3301      	adds	r3, #1
 8013c3a:	65a3      	str	r3, [r4, #88]	; 0x58
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8013c3c:	3701      	adds	r7, #1
 8013c3e:	454f      	cmp	r7, r9
 8013c40:	d1e5      	bne.n	8013c0e <nk_textedit_key+0x222>
            nk_textedit_clamp(state);
 8013c42:	4620      	mov	r0, r4
 8013c44:	f7ff f95c 	bl	8012f00 <nk_textedit_clamp>
            state->has_preferred_x = 1;
 8013c48:	2301      	movs	r3, #1
 8013c4a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
            state->preferred_x = goal_x;
 8013c4e:	edc4 8a1b 	vstr	s17, [r4, #108]	; 0x6c
            if (sel)
 8013c52:	2e00      	cmp	r6, #0
 8013c54:	f43f aef5 	beq.w	8013a42 <nk_textedit_key+0x56>
                state->select_end = state->cursor;
 8013c58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013c5a:	6623      	str	r3, [r4, #96]	; 0x60
    } break;
 8013c5c:	e6f1      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_prep_selection_at_cursor(state);
 8013c5e:	f7ff f976 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
 8013c62:	e7a8      	b.n	8013bb6 <nk_textedit_key+0x1ca>
            nk_textedit_move_to_last(state);
 8013c64:	f7ff fbdc 	bl	8013420 <nk_textedit_move_to_last>
 8013c68:	e7a5      	b.n	8013bb6 <nk_textedit_key+0x1ca>
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 8013c6a:	eddd 8a02 	vldr	s17, [sp, #8]
 8013c6e:	e7b8      	b.n	8013be2 <nk_textedit_key+0x1f6>
        if (state->single_line) {
 8013c70:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	f47f af0f 	bne.w	8013a98 <nk_textedit_key+0xac>
        if (sel)
 8013c7a:	2a00      	cmp	r2, #0
 8013c7c:	d156      	bne.n	8013d2c <nk_textedit_key+0x340>
        else if (NK_TEXT_HAS_SELECTION(state))
 8013c7e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013c80:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d155      	bne.n	8013d32 <nk_textedit_key+0x346>
         nk_textedit_clamp(state);
 8013c86:	4620      	mov	r0, r4
 8013c88:	f7ff f93a 	bl	8012f00 <nk_textedit_clamp>
         nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8013c8c:	9500      	str	r5, [sp, #0]
 8013c8e:	eeb0 0a48 	vmov.f32	s0, s16
 8013c92:	2300      	movs	r3, #0
 8013c94:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013c96:	4621      	mov	r1, r4
 8013c98:	a802      	add	r0, sp, #8
 8013c9a:	f7ff fb3d 	bl	8013318 <nk_textedit_find_charpos>
         if (find.prev_first != find.first_char) {
 8013c9e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013ca2:	9b05      	ldr	r3, [sp, #20]
 8013ca4:	4598      	cmp	r8, r3
 8013ca6:	f43f aecc 	beq.w	8013a42 <nk_textedit_key+0x56>
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 8013caa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d042      	beq.n	8013d38 <nk_textedit_key+0x34c>
 8013cb2:	edd4 8a1b 	vldr	s17, [r4, #108]	; 0x6c
            state->cursor = find.prev_first;
 8013cb6:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
            nk_textedit_layout_row(&row, state, state->cursor, row_height, font);
 8013cba:	462b      	mov	r3, r5
 8013cbc:	eeb0 0a48 	vmov.f32	s0, s16
 8013cc0:	4642      	mov	r2, r8
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	a808      	add	r0, sp, #32
 8013cc6:	f7ff f961 	bl	8012f8c <nk_textedit_layout_row>
            x = row.x0;
 8013cca:	ed9d 8a08 	vldr	s16, [sp, #32]
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8013cce:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8013cd2:	f1b9 0f00 	cmp.w	r9, #0
 8013cd6:	bfc8      	it	gt
 8013cd8:	2700      	movgt	r7, #0
 8013cda:	dd19      	ble.n	8013d10 <nk_textedit_key+0x324>
 8013cdc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8013ce0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce8:	dd12      	ble.n	8013d10 <nk_textedit_key+0x324>
                float dx = nk_textedit_get_width(state, find.prev_first, i, font);
 8013cea:	462b      	mov	r3, r5
 8013cec:	463a      	mov	r2, r7
 8013cee:	4641      	mov	r1, r8
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	f7ff f935 	bl	8012f60 <nk_textedit_get_width>
                x += dx;
 8013cf6:	ee38 8a00 	vadd.f32	s16, s16, s0
                if (x > goal_x)
 8013cfa:	eef4 8ac8 	vcmpe.f32	s17, s16
 8013cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d02:	d405      	bmi.n	8013d10 <nk_textedit_key+0x324>
                ++state->cursor;
 8013d04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d06:	3301      	adds	r3, #1
 8013d08:	65a3      	str	r3, [r4, #88]	; 0x58
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8013d0a:	3701      	adds	r7, #1
 8013d0c:	454f      	cmp	r7, r9
 8013d0e:	d1e5      	bne.n	8013cdc <nk_textedit_key+0x2f0>
            nk_textedit_clamp(state);
 8013d10:	4620      	mov	r0, r4
 8013d12:	f7ff f8f5 	bl	8012f00 <nk_textedit_clamp>
            state->has_preferred_x = 1;
 8013d16:	2301      	movs	r3, #1
 8013d18:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
            state->preferred_x = goal_x;
 8013d1c:	edc4 8a1b 	vstr	s17, [r4, #108]	; 0x6c
            if (sel) state->select_end = state->cursor;
 8013d20:	2e00      	cmp	r6, #0
 8013d22:	f43f ae8e 	beq.w	8013a42 <nk_textedit_key+0x56>
 8013d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d28:	6623      	str	r3, [r4, #96]	; 0x60
      } break;
 8013d2a:	e68a      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_prep_selection_at_cursor(state);
 8013d2c:	f7ff f90f 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
 8013d30:	e7a9      	b.n	8013c86 <nk_textedit_key+0x29a>
            nk_textedit_move_to_first(state);
 8013d32:	f7ff f8fe 	bl	8012f32 <nk_textedit_move_to_first>
 8013d36:	e7a6      	b.n	8013c86 <nk_textedit_key+0x29a>
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 8013d38:	eddd 8a02 	vldr	s17, [sp, #8]
 8013d3c:	e7bb      	b.n	8013cb6 <nk_textedit_key+0x2ca>
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8013d3e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f43f ae7d 	beq.w	8013a42 <nk_textedit_key+0x56>
        if (NK_TEXT_HAS_SELECTION(state))
 8013d48:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013d4a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d107      	bne.n	8013d60 <nk_textedit_key+0x374>
            if (state->cursor < n)
 8013d50:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8013d52:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8013d54:	4299      	cmp	r1, r3
 8013d56:	da05      	bge.n	8013d64 <nk_textedit_key+0x378>
                nk_textedit_delete(state, state->cursor, 1);
 8013d58:	2201      	movs	r2, #1
 8013d5a:	f7ff fb8c 	bl	8013476 <nk_textedit_delete>
 8013d5e:	e001      	b.n	8013d64 <nk_textedit_key+0x378>
            nk_textedit_delete_selection(state);
 8013d60:	f7ff fbb0 	bl	80134c4 <nk_textedit_delete_selection>
         state->has_preferred_x = 0;
 8013d64:	2300      	movs	r3, #0
 8013d66:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
         break;
 8013d6a:	e66a      	b.n	8013a42 <nk_textedit_key+0x56>
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8013d6c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f43f ae66 	beq.w	8013a42 <nk_textedit_key+0x56>
        if (NK_TEXT_HAS_SELECTION(state))
 8013d76:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013d78:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d005      	beq.n	8013d8a <nk_textedit_key+0x39e>
            nk_textedit_delete_selection(state);
 8013d7e:	f7ff fba1 	bl	80134c4 <nk_textedit_delete_selection>
         state->has_preferred_x = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
         break;
 8013d88:	e65b      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_clamp(state);
 8013d8a:	f7ff f8b9 	bl	8012f00 <nk_textedit_clamp>
            if (state->cursor > 0) {
 8013d8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013d90:	2900      	cmp	r1, #0
 8013d92:	ddf6      	ble.n	8013d82 <nk_textedit_key+0x396>
                nk_textedit_delete(state, state->cursor-1, 1);
 8013d94:	2201      	movs	r2, #1
 8013d96:	3901      	subs	r1, #1
 8013d98:	4620      	mov	r0, r4
 8013d9a:	f7ff fb6c 	bl	8013476 <nk_textedit_delete>
                --state->cursor;
 8013d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013da0:	3b01      	subs	r3, #1
 8013da2:	65a3      	str	r3, [r4, #88]	; 0x58
 8013da4:	e7ed      	b.n	8013d82 <nk_textedit_key+0x396>
         if (shift_mod) {
 8013da6:	b932      	cbnz	r2, 8013db6 <nk_textedit_key+0x3ca>
            state->cursor = state->select_start = state->select_end = 0;
 8013da8:	2300      	movs	r3, #0
 8013daa:	6603      	str	r3, [r0, #96]	; 0x60
 8013dac:	65c3      	str	r3, [r0, #92]	; 0x5c
 8013dae:	6583      	str	r3, [r0, #88]	; 0x58
            state->has_preferred_x = 0;
 8013db0:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
 8013db4:	e645      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_prep_selection_at_cursor(state);
 8013db6:	f7ff f8ca 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
            state->cursor = state->select_end = 0;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	6623      	str	r3, [r4, #96]	; 0x60
 8013dbe:	65a3      	str	r3, [r4, #88]	; 0x58
            state->has_preferred_x = 0;
 8013dc0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013dc4:	e63d      	b.n	8013a42 <nk_textedit_key+0x56>
         if (shift_mod) {
 8013dc6:	b93a      	cbnz	r2, 8013dd8 <nk_textedit_key+0x3ec>
            state->cursor = state->string.len;
 8013dc8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8013dca:	6583      	str	r3, [r0, #88]	; 0x58
            state->select_start = state->select_end = 0;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	6603      	str	r3, [r0, #96]	; 0x60
 8013dd0:	65c3      	str	r3, [r0, #92]	; 0x5c
            state->has_preferred_x = 0;
 8013dd2:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
 8013dd6:	e634      	b.n	8013a42 <nk_textedit_key+0x56>
            nk_textedit_prep_selection_at_cursor(state);
 8013dd8:	f7ff f8b9 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
            state->cursor = state->select_end = state->string.len;
 8013ddc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8013dde:	6623      	str	r3, [r4, #96]	; 0x60
 8013de0:	65a3      	str	r3, [r4, #88]	; 0x58
            state->has_preferred_x = 0;
 8013de2:	2300      	movs	r3, #0
 8013de4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013de8:	e62b      	b.n	8013a42 <nk_textedit_key+0x56>
        if (shift_mod) {
 8013dea:	b9ea      	cbnz	r2, 8013e28 <nk_textedit_key+0x43c>
            if (state->string.len && state->cursor == state->string.len)
 8013dec:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8013dee:	b12b      	cbz	r3, 8013dfc <nk_textedit_key+0x410>
 8013df0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8013df2:	4293      	cmp	r3, r2
                --state->cursor;
 8013df4:	bf04      	itt	eq
 8013df6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8013dfa:	6582      	streq	r2, [r0, #88]	; 0x58
            nk_textedit_clamp(state);
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f7ff f87f 	bl	8012f00 <nk_textedit_clamp>
            nk_textedit_move_to_first(state);
 8013e02:	4620      	mov	r0, r4
 8013e04:	f7ff f895 	bl	8012f32 <nk_textedit_move_to_first>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8013e08:	9500      	str	r5, [sp, #0]
 8013e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8013e0e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8013e12:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013e14:	4621      	mov	r1, r4
 8013e16:	a808      	add	r0, sp, #32
 8013e18:	f7ff fa7e 	bl	8013318 <nk_textedit_find_charpos>
            state->cursor = find.first_char;
 8013e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e1e:	65a3      	str	r3, [r4, #88]	; 0x58
            state->has_preferred_x = 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013e26:	e60c      	b.n	8013a42 <nk_textedit_key+0x56>
           nk_textedit_clamp(state);
 8013e28:	f7ff f86a 	bl	8012f00 <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	f7ff f88e 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
            if (state->string.len && state->cursor == state->string.len)
 8013e32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8013e34:	b12b      	cbz	r3, 8013e42 <nk_textedit_key+0x456>
 8013e36:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013e38:	4293      	cmp	r3, r2
                --state->cursor;
 8013e3a:	bf04      	itt	eq
 8013e3c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8013e40:	65a2      	streq	r2, [r4, #88]	; 0x58
            nk_textedit_find_charpos(&find, state,state->cursor, state->single_line,
 8013e42:	9500      	str	r5, [sp, #0]
 8013e44:	eeb0 0a48 	vmov.f32	s0, s16
 8013e48:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8013e4c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013e4e:	4621      	mov	r1, r4
 8013e50:	a808      	add	r0, sp, #32
 8013e52:	f7ff fa61 	bl	8013318 <nk_textedit_find_charpos>
            state->cursor = state->select_end = find.first_char;
 8013e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e58:	6623      	str	r3, [r4, #96]	; 0x60
 8013e5a:	65a3      	str	r3, [r4, #88]	; 0x58
            state->has_preferred_x = 0;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013e62:	e5ee      	b.n	8013a42 <nk_textedit_key+0x56>
        if (shift_mod) {
 8013e64:	b32a      	cbz	r2, 8013eb2 <nk_textedit_key+0x4c6>
            nk_textedit_clamp(state);
 8013e66:	f7ff f84b 	bl	8012f00 <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f7ff f86f 	bl	8012f4e <nk_textedit_prep_selection_at_cursor>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8013e70:	9500      	str	r5, [sp, #0]
 8013e72:	eeb0 0a48 	vmov.f32	s0, s16
 8013e76:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8013e7a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	a808      	add	r0, sp, #32
 8013e80:	f7ff fa4a 	bl	8013318 <nk_textedit_find_charpos>
            state->has_preferred_x = 0;
 8013e84:	2300      	movs	r3, #0
 8013e86:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
            state->cursor = find.first_char + find.length;
 8013e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e8e:	4419      	add	r1, r3
 8013e90:	65a1      	str	r1, [r4, #88]	; 0x58
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	dc02      	bgt.n	8013e9c <nk_textedit_key+0x4b0>
            state->select_end = state->cursor;
 8013e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013e98:	6623      	str	r3, [r4, #96]	; 0x60
 8013e9a:	e5d2      	b.n	8013a42 <nk_textedit_key+0x56>
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
 8013e9c:	3901      	subs	r1, #1
 8013e9e:	f104 000c 	add.w	r0, r4, #12
 8013ea2:	f7fd f947 	bl	8011134 <nk_str_rune_at>
 8013ea6:	280a      	cmp	r0, #10
 8013ea8:	d1f5      	bne.n	8013e96 <nk_textedit_key+0x4aa>
                --state->cursor;
 8013eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013eac:	3b01      	subs	r3, #1
 8013eae:	65a3      	str	r3, [r4, #88]	; 0x58
 8013eb0:	e7f1      	b.n	8013e96 <nk_textedit_key+0x4aa>
            nk_textedit_clamp(state);
 8013eb2:	f7ff f825 	bl	8012f00 <nk_textedit_clamp>
            nk_textedit_move_to_first(state);
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f7ff f83b 	bl	8012f32 <nk_textedit_move_to_first>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8013ebc:	9500      	str	r5, [sp, #0]
 8013ebe:	eeb0 0a48 	vmov.f32	s0, s16
 8013ec2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8013ec6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013ec8:	4621      	mov	r1, r4
 8013eca:	a808      	add	r0, sp, #32
 8013ecc:	f7ff fa24 	bl	8013318 <nk_textedit_find_charpos>
            state->has_preferred_x = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
            state->cursor = find.first_char + find.length;
 8013ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013eda:	4419      	add	r1, r3
 8013edc:	65a1      	str	r1, [r4, #88]	; 0x58
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	f77f adaf 	ble.w	8013a42 <nk_textedit_key+0x56>
 8013ee4:	3901      	subs	r1, #1
 8013ee6:	f104 000c 	add.w	r0, r4, #12
 8013eea:	f7fd f923 	bl	8011134 <nk_str_rune_at>
 8013eee:	280a      	cmp	r0, #10
 8013ef0:	f47f ada7 	bne.w	8013a42 <nk_textedit_key+0x56>
                --state->cursor;
 8013ef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ef6:	3b01      	subs	r3, #1
 8013ef8:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8013efa:	e5a2      	b.n	8013a42 <nk_textedit_key+0x56>

08013efc <nk_toggle_behavior>:
 *
 * ===============================================================*/
NK_LIB nk_bool
nk_toggle_behavior(const struct nk_input *in, struct nk_rect select,
    nk_flags *state, nk_bool active)
{
 8013efc:	b570      	push	{r4, r5, r6, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	4606      	mov	r6, r0
 8013f02:	460c      	mov	r4, r1
 8013f04:	4615      	mov	r5, r2
 8013f06:	ed8d 0a00 	vstr	s0, [sp]
 8013f0a:	edcd 0a01 	vstr	s1, [sp, #4]
 8013f0e:	ed8d 1a02 	vstr	s2, [sp, #8]
 8013f12:	edcd 1a03 	vstr	s3, [sp, #12]
    nk_widget_state_reset(state);
 8013f16:	680b      	ldr	r3, [r1, #0]
 8013f18:	f013 0f02 	tst.w	r3, #2
 8013f1c:	bf14      	ite	ne
 8013f1e:	2306      	movne	r3, #6
 8013f20:	2304      	moveq	r3, #4
 8013f22:	600b      	str	r3, [r1, #0]
    if (nk_button_behavior(state, select, in, NK_BUTTON_DEFAULT)) {
 8013f24:	2200      	movs	r2, #0
 8013f26:	4601      	mov	r1, r0
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f7f5 fbc1 	bl	80096b0 <nk_button_behavior>
 8013f2e:	b1b8      	cbz	r0, 8013f60 <nk_toggle_behavior+0x64>
        *state = NK_WIDGET_STATE_ACTIVE;
 8013f30:	2322      	movs	r3, #34	; 0x22
 8013f32:	6023      	str	r3, [r4, #0]
        active = !active;
 8013f34:	fab5 f585 	clz	r5, r5
 8013f38:	096d      	lsrs	r5, r5, #5
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, select))
        *state |= NK_WIDGET_STATE_ENTERED;
    else if (nk_input_is_mouse_prev_hovering_rect(in, select))
 8013f3a:	ed9d 0a00 	vldr	s0, [sp]
 8013f3e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013f42:	ed9d 1a02 	vldr	s2, [sp, #8]
 8013f46:	eddd 1a03 	vldr	s3, [sp, #12]
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f7f8 ff2e 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 8013f50:	b118      	cbz	r0, 8013f5a <nk_toggle_behavior+0x5e>
        *state |= NK_WIDGET_STATE_LEFT;
 8013f52:	6823      	ldr	r3, [r4, #0]
 8013f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f58:	6023      	str	r3, [r4, #0]
    return active;
}
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	b004      	add	sp, #16
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, select))
 8013f60:	6823      	ldr	r3, [r4, #0]
 8013f62:	f013 0f10 	tst.w	r3, #16
 8013f66:	d0e8      	beq.n	8013f3a <nk_toggle_behavior+0x3e>
 8013f68:	ed9d 0a00 	vldr	s0, [sp]
 8013f6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013f70:	ed9d 1a02 	vldr	s2, [sp, #8]
 8013f74:	eddd 1a03 	vldr	s3, [sp, #12]
 8013f78:	4630      	mov	r0, r6
 8013f7a:	f7f8 ff17 	bl	800cdac <nk_input_is_mouse_prev_hovering_rect>
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	d1db      	bne.n	8013f3a <nk_toggle_behavior+0x3e>
        *state |= NK_WIDGET_STATE_ENTERED;
 8013f82:	6823      	ldr	r3, [r4, #0]
 8013f84:	f043 0308 	orr.w	r3, r3, #8
 8013f88:	6023      	str	r3, [r4, #0]
 8013f8a:	e7e6      	b.n	8013f5a <nk_toggle_behavior+0x5e>

08013f8c <nk_draw_checkbox>:
nk_draw_checkbox(struct nk_command_buffer *out,
    nk_flags state, const struct nk_style_toggle *style, nk_bool active,
    const struct nk_rect *label, const struct nk_rect *selector,
    const struct nk_rect *cursors, const char *string, int len,
    const struct nk_user_font *font)
{
 8013f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f90:	ed2d 8b02 	vpush	{d8}
 8013f94:	b08b      	sub	sp, #44	; 0x2c
 8013f96:	4606      	mov	r6, r0
 8013f98:	4614      	mov	r4, r2
 8013f9a:	4698      	mov	r8, r3
 8013f9c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8013f9e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8013fa0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;
    struct nk_text text;

    /* select correct colors/images */
    if (state & NK_WIDGET_STATE_HOVER) {
 8013fa4:	f011 0f10 	tst.w	r1, #16
 8013fa8:	d060      	beq.n	801406c <nk_draw_checkbox+0xe0>
        background = &style->hover;
 8013faa:	f102 0a1c 	add.w	sl, r2, #28
        cursor = &style->cursor_hover;
 8013fae:	f102 0b74 	add.w	fp, r2, #116	; 0x74
        text.text = style->text_hover;
 8013fb2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8013fb6:	9305      	str	r3, [sp, #20]
        cursor = &style->cursor_normal;
        text.text = style->text_normal;
    }

    /* draw background and cursor */
    if (background->type == NK_STYLE_ITEM_COLOR) {
 8013fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d167      	bne.n	8014090 <nk_draw_checkbox+0x104>
        nk_fill_rect(out, *selector, 0, style->border_color);
 8013fc0:	ed9f 8a43 	vldr	s16, [pc, #268]	; 80140d0 <nk_draw_checkbox+0x144>
 8013fc4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8013fc6:	eeb0 2a48 	vmov.f32	s4, s16
 8013fca:	ed95 0a00 	vldr	s0, [r5]
 8013fce:	edd5 0a01 	vldr	s1, [r5, #4]
 8013fd2:	ed95 1a02 	vldr	s2, [r5, #8]
 8013fd6:	edd5 1a03 	vldr	s3, [r5, #12]
 8013fda:	4630      	mov	r0, r6
 8013fdc:	f7f7 f83c 	bl	800b058 <nk_fill_rect>
        nk_fill_rect(out, nk_shrink_rect(*selector, style->border), 0, background->data.color);
 8013fe0:	ed94 2a2e 	vldr	s4, [r4, #184]	; 0xb8
 8013fe4:	ed95 0a00 	vldr	s0, [r5]
 8013fe8:	edd5 0a01 	vldr	s1, [r5, #4]
 8013fec:	ed95 1a02 	vldr	s2, [r5, #8]
 8013ff0:	edd5 1a03 	vldr	s3, [r5, #12]
 8013ff4:	f7f9 fc0d 	bl	800d812 <nk_shrink_rect>
 8013ff8:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013ffc:	eeb0 2a48 	vmov.f32	s4, s16
 8014000:	4630      	mov	r0, r6
 8014002:	f7f7 f829 	bl	800b058 <nk_fill_rect>
    } else nk_draw_image(out, *selector, &background->data.image, nk_white);
    if (active) {
 8014006:	f1b8 0f00 	cmp.w	r8, #0
 801400a:	d012      	beq.n	8014032 <nk_draw_checkbox+0xa6>
        if (cursor->type == NK_STYLE_ITEM_IMAGE)
 801400c:	f89b 3000 	ldrb.w	r3, [fp]
 8014010:	2b01      	cmp	r3, #1
 8014012:	d04d      	beq.n	80140b0 <nk_draw_checkbox+0x124>
            nk_draw_image(out, *cursors, &cursor->data.image, nk_white);
        else nk_fill_rect(out, *cursors, 0, cursor->data.color);
 8014014:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014018:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 80140d0 <nk_draw_checkbox+0x144>
 801401c:	ed99 0a00 	vldr	s0, [r9]
 8014020:	edd9 0a01 	vldr	s1, [r9, #4]
 8014024:	ed99 1a02 	vldr	s2, [r9, #8]
 8014028:	edd9 1a03 	vldr	s3, [r9, #12]
 801402c:	4630      	mov	r0, r6
 801402e:	f7f7 f813 	bl	800b058 <nk_fill_rect>
    }

    text.padding.x = 0;
 8014032:	2300      	movs	r3, #0
 8014034:	9302      	str	r3, [sp, #8]
    text.padding.y = 0;
 8014036:	9303      	str	r3, [sp, #12]
    text.background = style->text_background;
 8014038:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801403c:	9304      	str	r3, [sp, #16]
    nk_widget_text(out, *label, string, len, &text, NK_TEXT_LEFT, font);
 801403e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014040:	9301      	str	r3, [sp, #4]
 8014042:	2311      	movs	r3, #17
 8014044:	9300      	str	r3, [sp, #0]
 8014046:	ab02      	add	r3, sp, #8
 8014048:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801404a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801404c:	ed97 0a00 	vldr	s0, [r7]
 8014050:	edd7 0a01 	vldr	s1, [r7, #4]
 8014054:	ed97 1a02 	vldr	s2, [r7, #8]
 8014058:	edd7 1a03 	vldr	s3, [r7, #12]
 801405c:	4630      	mov	r0, r6
 801405e:	f7fe fde9 	bl	8012c34 <nk_widget_text>
}
 8014062:	b00b      	add	sp, #44	; 0x2c
 8014064:	ecbd 8b02 	vpop	{d8}
 8014068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state & NK_WIDGET_STATE_ACTIVED) {
 801406c:	f011 0f20 	tst.w	r1, #32
 8014070:	d007      	beq.n	8014082 <nk_draw_checkbox+0xf6>
        background = &style->hover;
 8014072:	f102 0a1c 	add.w	sl, r2, #28
        cursor = &style->cursor_hover;
 8014076:	f102 0b74 	add.w	fp, r2, #116	; 0x74
        text.text = style->text_active;
 801407a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 801407e:	9305      	str	r3, [sp, #20]
 8014080:	e79a      	b.n	8013fb8 <nk_draw_checkbox+0x2c>
        background = &style->normal;
 8014082:	4692      	mov	sl, r2
        cursor = &style->cursor_normal;
 8014084:	f102 0b58 	add.w	fp, r2, #88	; 0x58
        text.text = style->text_normal;
 8014088:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801408c:	9305      	str	r3, [sp, #20]
 801408e:	e793      	b.n	8013fb8 <nk_draw_checkbox+0x2c>
    } else nk_draw_image(out, *selector, &background->data.image, nk_white);
 8014090:	4b10      	ldr	r3, [pc, #64]	; (80140d4 <nk_draw_checkbox+0x148>)
 8014092:	681a      	ldr	r2, [r3, #0]
 8014094:	f10a 0104 	add.w	r1, sl, #4
 8014098:	ed95 0a00 	vldr	s0, [r5]
 801409c:	edd5 0a01 	vldr	s1, [r5, #4]
 80140a0:	ed95 1a02 	vldr	s2, [r5, #8]
 80140a4:	edd5 1a03 	vldr	s3, [r5, #12]
 80140a8:	4630      	mov	r0, r6
 80140aa:	f7f7 f98f 	bl	800b3cc <nk_draw_image>
 80140ae:	e7aa      	b.n	8014006 <nk_draw_checkbox+0x7a>
            nk_draw_image(out, *cursors, &cursor->data.image, nk_white);
 80140b0:	4b08      	ldr	r3, [pc, #32]	; (80140d4 <nk_draw_checkbox+0x148>)
 80140b2:	681a      	ldr	r2, [r3, #0]
 80140b4:	f10b 0104 	add.w	r1, fp, #4
 80140b8:	ed99 0a00 	vldr	s0, [r9]
 80140bc:	edd9 0a01 	vldr	s1, [r9, #4]
 80140c0:	ed99 1a02 	vldr	s2, [r9, #8]
 80140c4:	edd9 1a03 	vldr	s3, [r9, #12]
 80140c8:	4630      	mov	r0, r6
 80140ca:	f7f7 f97f 	bl	800b3cc <nk_draw_image>
 80140ce:	e7b0      	b.n	8014032 <nk_draw_checkbox+0xa6>
 80140d0:	00000000 	.word	0x00000000
 80140d4:	0801ba4c 	.word	0x0801ba4c

080140d8 <nk_draw_option>:
nk_draw_option(struct nk_command_buffer *out,
    nk_flags state, const struct nk_style_toggle *style, nk_bool active,
    const struct nk_rect *label, const struct nk_rect *selector,
    const struct nk_rect *cursors, const char *string, int len,
    const struct nk_user_font *font)
{
 80140d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140dc:	b08b      	sub	sp, #44	; 0x2c
 80140de:	4606      	mov	r6, r0
 80140e0:	4614      	mov	r4, r2
 80140e2:	4698      	mov	r8, r3
 80140e4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80140e6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80140e8:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;
    struct nk_text text;

    /* select correct colors/images */
    if (state & NK_WIDGET_STATE_HOVER) {
 80140ec:	f011 0f10 	tst.w	r1, #16
 80140f0:	d056      	beq.n	80141a0 <nk_draw_option+0xc8>
        background = &style->hover;
 80140f2:	f102 0a1c 	add.w	sl, r2, #28
        cursor = &style->cursor_hover;
 80140f6:	f102 0b74 	add.w	fp, r2, #116	; 0x74
        text.text = style->text_hover;
 80140fa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80140fe:	9305      	str	r3, [sp, #20]
        cursor = &style->cursor_normal;
        text.text = style->text_normal;
    }

    /* draw background and cursor */
    if (background->type == NK_STYLE_ITEM_COLOR) {
 8014100:	f89a 3000 	ldrb.w	r3, [sl]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d15d      	bne.n	80141c4 <nk_draw_option+0xec>
        nk_fill_circle(out, *selector, style->border_color);
 8014108:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801410a:	ed95 0a00 	vldr	s0, [r5]
 801410e:	edd5 0a01 	vldr	s1, [r5, #4]
 8014112:	ed95 1a02 	vldr	s2, [r5, #8]
 8014116:	edd5 1a03 	vldr	s3, [r5, #12]
 801411a:	4630      	mov	r0, r6
 801411c:	f7f7 f824 	bl	800b168 <nk_fill_circle>
        nk_fill_circle(out, nk_shrink_rect(*selector, style->border), background->data.color);
 8014120:	ed94 2a2e 	vldr	s4, [r4, #184]	; 0xb8
 8014124:	ed95 0a00 	vldr	s0, [r5]
 8014128:	edd5 0a01 	vldr	s1, [r5, #4]
 801412c:	ed95 1a02 	vldr	s2, [r5, #8]
 8014130:	edd5 1a03 	vldr	s3, [r5, #12]
 8014134:	f7f9 fb6d 	bl	800d812 <nk_shrink_rect>
 8014138:	f8da 1004 	ldr.w	r1, [sl, #4]
 801413c:	4630      	mov	r0, r6
 801413e:	f7f7 f813 	bl	800b168 <nk_fill_circle>
    } else nk_draw_image(out, *selector, &background->data.image, nk_white);
    if (active) {
 8014142:	f1b8 0f00 	cmp.w	r8, #0
 8014146:	d010      	beq.n	801416a <nk_draw_option+0x92>
        if (cursor->type == NK_STYLE_ITEM_IMAGE)
 8014148:	f89b 3000 	ldrb.w	r3, [fp]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d049      	beq.n	80141e4 <nk_draw_option+0x10c>
            nk_draw_image(out, *cursors, &cursor->data.image, nk_white);
        else nk_fill_circle(out, *cursors, cursor->data.color);
 8014150:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014154:	ed99 0a00 	vldr	s0, [r9]
 8014158:	edd9 0a01 	vldr	s1, [r9, #4]
 801415c:	ed99 1a02 	vldr	s2, [r9, #8]
 8014160:	edd9 1a03 	vldr	s3, [r9, #12]
 8014164:	4630      	mov	r0, r6
 8014166:	f7f6 ffff 	bl	800b168 <nk_fill_circle>
    }

    text.padding.x = 0;
 801416a:	2300      	movs	r3, #0
 801416c:	9302      	str	r3, [sp, #8]
    text.padding.y = 0;
 801416e:	9303      	str	r3, [sp, #12]
    text.background = style->text_background;
 8014170:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8014174:	9304      	str	r3, [sp, #16]
    nk_widget_text(out, *label, string, len, &text, NK_TEXT_LEFT, font);
 8014176:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014178:	9301      	str	r3, [sp, #4]
 801417a:	2311      	movs	r3, #17
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	ab02      	add	r3, sp, #8
 8014180:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014182:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014184:	ed97 0a00 	vldr	s0, [r7]
 8014188:	edd7 0a01 	vldr	s1, [r7, #4]
 801418c:	ed97 1a02 	vldr	s2, [r7, #8]
 8014190:	edd7 1a03 	vldr	s3, [r7, #12]
 8014194:	4630      	mov	r0, r6
 8014196:	f7fe fd4d 	bl	8012c34 <nk_widget_text>
}
 801419a:	b00b      	add	sp, #44	; 0x2c
 801419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state & NK_WIDGET_STATE_ACTIVED) {
 80141a0:	f011 0f20 	tst.w	r1, #32
 80141a4:	d007      	beq.n	80141b6 <nk_draw_option+0xde>
        background = &style->hover;
 80141a6:	f102 0a1c 	add.w	sl, r2, #28
        cursor = &style->cursor_hover;
 80141aa:	f102 0b74 	add.w	fp, r2, #116	; 0x74
        text.text = style->text_active;
 80141ae:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80141b2:	9305      	str	r3, [sp, #20]
 80141b4:	e7a4      	b.n	8014100 <nk_draw_option+0x28>
        background = &style->normal;
 80141b6:	4692      	mov	sl, r2
        cursor = &style->cursor_normal;
 80141b8:	f102 0b58 	add.w	fp, r2, #88	; 0x58
        text.text = style->text_normal;
 80141bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80141c0:	9305      	str	r3, [sp, #20]
 80141c2:	e79d      	b.n	8014100 <nk_draw_option+0x28>
    } else nk_draw_image(out, *selector, &background->data.image, nk_white);
 80141c4:	4b0f      	ldr	r3, [pc, #60]	; (8014204 <nk_draw_option+0x12c>)
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	f10a 0104 	add.w	r1, sl, #4
 80141cc:	ed95 0a00 	vldr	s0, [r5]
 80141d0:	edd5 0a01 	vldr	s1, [r5, #4]
 80141d4:	ed95 1a02 	vldr	s2, [r5, #8]
 80141d8:	edd5 1a03 	vldr	s3, [r5, #12]
 80141dc:	4630      	mov	r0, r6
 80141de:	f7f7 f8f5 	bl	800b3cc <nk_draw_image>
 80141e2:	e7ae      	b.n	8014142 <nk_draw_option+0x6a>
            nk_draw_image(out, *cursors, &cursor->data.image, nk_white);
 80141e4:	4b07      	ldr	r3, [pc, #28]	; (8014204 <nk_draw_option+0x12c>)
 80141e6:	681a      	ldr	r2, [r3, #0]
 80141e8:	f10b 0104 	add.w	r1, fp, #4
 80141ec:	ed99 0a00 	vldr	s0, [r9]
 80141f0:	edd9 0a01 	vldr	s1, [r9, #4]
 80141f4:	ed99 1a02 	vldr	s2, [r9, #8]
 80141f8:	edd9 1a03 	vldr	s3, [r9, #12]
 80141fc:	4630      	mov	r0, r6
 80141fe:	f7f7 f8e5 	bl	800b3cc <nk_draw_image>
 8014202:	e7b2      	b.n	801416a <nk_draw_option+0x92>
 8014204:	0801ba4c 	.word	0x0801ba4c

08014208 <nk_do_toggle>:
nk_do_toggle(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect r,
    nk_bool *active, const char *str, int len, enum nk_toggle_type type,
    const struct nk_style_toggle *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 8014208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801420c:	b09b      	sub	sp, #108	; 0x6c
 801420e:	f89d b094 	ldrb.w	fp, [sp, #148]	; 0x94
 8014212:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8014214:	f8dd 90a0 	ldr.w	r9, [sp, #160]	; 0xa0
    struct nk_rect bounds;
    struct nk_rect select;
    struct nk_rect cursor;
    struct nk_rect label;

    NK_ASSERT(style);
 8014218:	2c00      	cmp	r4, #0
 801421a:	f000 80b4 	beq.w	8014386 <nk_do_toggle+0x17e>
 801421e:	4607      	mov	r7, r0
 8014220:	460e      	mov	r6, r1
 8014222:	4615      	mov	r5, r2
 8014224:	4698      	mov	r8, r3
    NK_ASSERT(out);
 8014226:	2900      	cmp	r1, #0
 8014228:	f000 80b3 	beq.w	8014392 <nk_do_toggle+0x18a>
    NK_ASSERT(font);
 801422c:	f1b9 0f00 	cmp.w	r9, #0
 8014230:	f000 80b5 	beq.w	801439e <nk_do_toggle+0x196>
    if (!out || !style || !font || !active)
 8014234:	2a00      	cmp	r2, #0
 8014236:	f000 80cb 	beq.w	80143d0 <nk_do_toggle+0x1c8>
        return 0;

    r.w = NK_MAX(r.w, font->height + 2 * style->padding.x);
 801423a:	edd9 7a01 	vldr	s15, [r9, #4]
 801423e:	edd4 5a29 	vldr	s11, [r4, #164]	; 0xa4
 8014242:	ee75 4aa5 	vadd.f32	s9, s11, s11
 8014246:	ee77 3aa4 	vadd.f32	s7, s15, s9
 801424a:	eef4 3ac1 	vcmpe.f32	s7, s2
 801424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014252:	bfd8      	it	le
 8014254:	eef0 3a41 	vmovle.f32	s7, s2
    r.h = NK_MAX(r.h, font->height + 2 * style->padding.y);
 8014258:	ed94 6a2a 	vldr	s12, [r4, #168]	; 0xa8
 801425c:	ee36 5a06 	vadd.f32	s10, s12, s12
 8014260:	ee37 4a85 	vadd.f32	s8, s15, s10
 8014264:	eeb4 4ae1 	vcmpe.f32	s8, s3
 8014268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801426c:	bfd8      	it	le
 801426e:	eeb0 4a61 	vmovle.f32	s8, s3

    /* add additional touch padding for touch screen devices */
    bounds.x = r.x - style->touch_padding.x;
 8014272:	edd4 2a2b 	vldr	s5, [r4, #172]	; 0xac
    bounds.y = r.y - style->touch_padding.y;
 8014276:	ed94 3a2c 	vldr	s6, [r4, #176]	; 0xb0
    bounds.w = r.w + 2 * style->touch_padding.x;
 801427a:	ee32 1aa2 	vadd.f32	s2, s5, s5
    bounds.h = r.h + 2 * style->touch_padding.y;
 801427e:	ee73 1a03 	vadd.f32	s3, s6, s6

    /* calculate the selector space */
    select.w = font->height;
 8014282:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
    select.h = select.w;
 8014286:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
    select.y = r.y + r.h/2.0f - select.h/2.0f;
 801428a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801428e:	ee24 7a26 	vmul.f32	s14, s8, s13
 8014292:	ee37 7a20 	vadd.f32	s14, s14, s1
 8014296:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801429a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801429e:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
    select.x = r.x;
 80142a2:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48

    /* calculate the bounds of the cursor inside the selector */
    cursor.x = select.x + style->padding.x + style->border;
 80142a6:	edd4 6a2e 	vldr	s13, [r4, #184]	; 0xb8
 80142aa:	ee75 5a80 	vadd.f32	s11, s11, s0
 80142ae:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80142b2:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
    cursor.y = select.y + style->padding.y + style->border;
 80142b6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80142ba:	ee36 6a26 	vadd.f32	s12, s12, s13
 80142be:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
    cursor.w = select.w - (2 * style->padding.x + 2 * style->border);
 80142c2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80142c6:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80142ca:	ee77 4ae4 	vsub.f32	s9, s15, s9
 80142ce:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
    cursor.h = select.h - (2 * style->padding.y + 2 * style->border);
 80142d2:	ee35 5a26 	vadd.f32	s10, s10, s13
 80142d6:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80142da:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44

    /* label behind the selector */
    label.x = select.x + select.w + style->spacing;
 80142de:	ee77 6a80 	vadd.f32	s13, s15, s0
 80142e2:	ed94 6a2d 	vldr	s12, [r4, #180]	; 0xb4
 80142e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80142ea:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    label.y = select.y;
 80142ee:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
    label.w = NK_MAX(r.x + r.w, label.x) - label.x;
 80142f2:	ee33 7a80 	vadd.f32	s14, s7, s0
 80142f6:	eef4 6a47 	vcmp.f32	s13, s14
 80142fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142fe:	bfc8      	it	gt
 8014300:	eeb0 7a66 	vmovgt.f32	s14, s13
 8014304:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014308:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
    label.h = select.w;
 801430c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34

    /* update selector */
    was_active = *active;
 8014310:	f8d2 a000 	ldr.w	sl, [r2]
    *active = nk_toggle_behavior(in, bounds, state, *active);
 8014314:	4652      	mov	r2, sl
 8014316:	4601      	mov	r1, r0
 8014318:	ee30 0a62 	vsub.f32	s0, s0, s5
 801431c:	ee70 0ac3 	vsub.f32	s1, s1, s6
 8014320:	ee31 1a23 	vadd.f32	s2, s2, s7
 8014324:	ee71 1a84 	vadd.f32	s3, s3, s8
 8014328:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801432a:	f7ff fde7 	bl	8013efc <nk_toggle_behavior>
 801432e:	6028      	str	r0, [r5, #0]

    /* draw selector */
    if (style->draw_begin)
 8014330:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8014334:	b11b      	cbz	r3, 801433e <nk_do_toggle+0x136>
        style->draw_begin(out, style->userdata);
 8014336:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801433a:	4630      	mov	r0, r6
 801433c:	4798      	blx	r3
    if (type == NK_TOGGLE_CHECK) {
 801433e:	f1bb 0f00 	cmp.w	fp, #0
 8014342:	d132      	bne.n	80143aa <nk_do_toggle+0x1a2>
        nk_draw_checkbox(out, *state, style, *active, &label, &select, &cursor, str, len, font);
 8014344:	f8cd 9014 	str.w	r9, [sp, #20]
 8014348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801434a:	9304      	str	r3, [sp, #16]
 801434c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014350:	ab0e      	add	r3, sp, #56	; 0x38
 8014352:	9302      	str	r3, [sp, #8]
 8014354:	ab12      	add	r3, sp, #72	; 0x48
 8014356:	9301      	str	r3, [sp, #4]
 8014358:	ab0a      	add	r3, sp, #40	; 0x28
 801435a:	9300      	str	r3, [sp, #0]
 801435c:	682b      	ldr	r3, [r5, #0]
 801435e:	4622      	mov	r2, r4
 8014360:	6839      	ldr	r1, [r7, #0]
 8014362:	4630      	mov	r0, r6
 8014364:	f7ff fe12 	bl	8013f8c <nk_draw_checkbox>
    } else {
        nk_draw_option(out, *state, style, *active, &label, &select, &cursor, str, len, font);
    }
    if (style->draw_end)
 8014368:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801436c:	b11b      	cbz	r3, 8014376 <nk_do_toggle+0x16e>
        style->draw_end(out, style->userdata);
 801436e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8014372:	4630      	mov	r0, r6
 8014374:	4798      	blx	r3
    return (was_active != *active);
 8014376:	6828      	ldr	r0, [r5, #0]
 8014378:	ebb0 000a 	subs.w	r0, r0, sl
 801437c:	bf18      	it	ne
 801437e:	2001      	movne	r0, #1
}
 8014380:	b01b      	add	sp, #108	; 0x6c
 8014382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NK_ASSERT(style);
 8014386:	4b13      	ldr	r3, [pc, #76]	; (80143d4 <nk_do_toggle+0x1cc>)
 8014388:	4a13      	ldr	r2, [pc, #76]	; (80143d8 <nk_do_toggle+0x1d0>)
 801438a:	2179      	movs	r1, #121	; 0x79
 801438c:	4813      	ldr	r0, [pc, #76]	; (80143dc <nk_do_toggle+0x1d4>)
 801438e:	f002 f8dd 	bl	801654c <__assert_func>
    NK_ASSERT(out);
 8014392:	4b13      	ldr	r3, [pc, #76]	; (80143e0 <nk_do_toggle+0x1d8>)
 8014394:	4a10      	ldr	r2, [pc, #64]	; (80143d8 <nk_do_toggle+0x1d0>)
 8014396:	217a      	movs	r1, #122	; 0x7a
 8014398:	4810      	ldr	r0, [pc, #64]	; (80143dc <nk_do_toggle+0x1d4>)
 801439a:	f002 f8d7 	bl	801654c <__assert_func>
    NK_ASSERT(font);
 801439e:	4b11      	ldr	r3, [pc, #68]	; (80143e4 <nk_do_toggle+0x1dc>)
 80143a0:	4a0d      	ldr	r2, [pc, #52]	; (80143d8 <nk_do_toggle+0x1d0>)
 80143a2:	217b      	movs	r1, #123	; 0x7b
 80143a4:	480d      	ldr	r0, [pc, #52]	; (80143dc <nk_do_toggle+0x1d4>)
 80143a6:	f002 f8d1 	bl	801654c <__assert_func>
        nk_draw_option(out, *state, style, *active, &label, &select, &cursor, str, len, font);
 80143aa:	f8cd 9014 	str.w	r9, [sp, #20]
 80143ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80143b0:	9304      	str	r3, [sp, #16]
 80143b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80143b6:	ab0e      	add	r3, sp, #56	; 0x38
 80143b8:	9302      	str	r3, [sp, #8]
 80143ba:	ab12      	add	r3, sp, #72	; 0x48
 80143bc:	9301      	str	r3, [sp, #4]
 80143be:	ab0a      	add	r3, sp, #40	; 0x28
 80143c0:	9300      	str	r3, [sp, #0]
 80143c2:	682b      	ldr	r3, [r5, #0]
 80143c4:	4622      	mov	r2, r4
 80143c6:	6839      	ldr	r1, [r7, #0]
 80143c8:	4630      	mov	r0, r6
 80143ca:	f7ff fe85 	bl	80140d8 <nk_draw_option>
 80143ce:	e7cb      	b.n	8014368 <nk_do_toggle+0x160>
        return 0;
 80143d0:	2000      	movs	r0, #0
 80143d2:	e7d5      	b.n	8014380 <nk_do_toggle+0x178>
 80143d4:	0801ad18 	.word	0x0801ad18
 80143d8:	0801ba3c 	.word	0x0801ba3c
 80143dc:	0801ba10 	.word	0x0801ba10
 80143e0:	0801ad44 	.word	0x0801ad44
 80143e4:	0801ad50 	.word	0x0801ad50

080143e8 <nk_check_text>:
 *                          CHECKBOX
 *
 * --------------------------------------------------------------*/
NK_API nk_bool
nk_check_text(struct nk_context *ctx, const char *text, int len, nk_bool active)
{
 80143e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ec:	b08c      	sub	sp, #48	; 0x30
 80143ee:	9307      	str	r3, [sp, #28]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 80143f0:	2800      	cmp	r0, #0
 80143f2:	d039      	beq.n	8014468 <nk_check_text+0x80>
 80143f4:	4688      	mov	r8, r1
 80143f6:	4617      	mov	r7, r2
 80143f8:	4604      	mov	r4, r0
    NK_ASSERT(ctx->current);
 80143fa:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 80143fe:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 8014402:	2d00      	cmp	r5, #0
 8014404:	d036      	beq.n	8014474 <nk_check_text+0x8c>
    NK_ASSERT(ctx->current->layout);
 8014406:	f8d5 608c 	ldr.w	r6, [r5, #140]	; 0x8c
 801440a:	2e00      	cmp	r6, #0
 801440c:	d038      	beq.n	8014480 <nk_check_text+0x98>

    win = ctx->current;
    style = &ctx->style;
    layout = win->layout;

    state = nk_widget(&bounds, ctx);
 801440e:	4601      	mov	r1, r0
 8014410:	a808      	add	r0, sp, #32
 8014412:	f001 f9c7 	bl	80157a4 <nk_widget>
    if (!state) return active;
 8014416:	2800      	cmp	r0, #0
 8014418:	d038      	beq.n	801448c <nk_check_text+0xa4>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801441a:	2802      	cmp	r0, #2
 801441c:	d038      	beq.n	8014490 <nk_check_text+0xa8>
 801441e:	6873      	ldr	r3, [r6, #4]
 8014420:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8014424:	bf0c      	ite	eq
 8014426:	4623      	moveq	r3, r4
 8014428:	2300      	movne	r3, #0
    nk_do_toggle(&ctx->last_widget_state, &win->buffer, bounds, &active,
 801442a:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 801442e:	9204      	str	r2, [sp, #16]
 8014430:	9303      	str	r3, [sp, #12]
 8014432:	f504 6386 	add.w	r3, r4, #1072	; 0x430
 8014436:	9302      	str	r3, [sp, #8]
 8014438:	2300      	movs	r3, #0
 801443a:	9301      	str	r3, [sp, #4]
 801443c:	9700      	str	r7, [sp, #0]
 801443e:	4643      	mov	r3, r8
 8014440:	aa07      	add	r2, sp, #28
 8014442:	ed9d 0a08 	vldr	s0, [sp, #32]
 8014446:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801444a:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801444e:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8014452:	f105 0164 	add.w	r1, r5, #100	; 0x64
 8014456:	f504 50d6 	add.w	r0, r4, #6848	; 0x1ac0
 801445a:	3014      	adds	r0, #20
 801445c:	f7ff fed4 	bl	8014208 <nk_do_toggle>
        text, len, NK_TOGGLE_CHECK, &style->checkbox, in, style->font);
    return active;
 8014460:	9807      	ldr	r0, [sp, #28]
}
 8014462:	b00c      	add	sp, #48	; 0x30
 8014464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NK_ASSERT(ctx);
 8014468:	4b0a      	ldr	r3, [pc, #40]	; (8014494 <nk_check_text+0xac>)
 801446a:	4a0b      	ldr	r2, [pc, #44]	; (8014498 <nk_check_text+0xb0>)
 801446c:	21ba      	movs	r1, #186	; 0xba
 801446e:	480b      	ldr	r0, [pc, #44]	; (801449c <nk_check_text+0xb4>)
 8014470:	f002 f86c 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 8014474:	4b0a      	ldr	r3, [pc, #40]	; (80144a0 <nk_check_text+0xb8>)
 8014476:	4a08      	ldr	r2, [pc, #32]	; (8014498 <nk_check_text+0xb0>)
 8014478:	21bb      	movs	r1, #187	; 0xbb
 801447a:	4808      	ldr	r0, [pc, #32]	; (801449c <nk_check_text+0xb4>)
 801447c:	f002 f866 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8014480:	4b08      	ldr	r3, [pc, #32]	; (80144a4 <nk_check_text+0xbc>)
 8014482:	4a05      	ldr	r2, [pc, #20]	; (8014498 <nk_check_text+0xb0>)
 8014484:	21bc      	movs	r1, #188	; 0xbc
 8014486:	4805      	ldr	r0, [pc, #20]	; (801449c <nk_check_text+0xb4>)
 8014488:	f002 f860 	bl	801654c <__assert_func>
    if (!state) return active;
 801448c:	9807      	ldr	r0, [sp, #28]
 801448e:	e7e8      	b.n	8014462 <nk_check_text+0x7a>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8014490:	2300      	movs	r3, #0
 8014492:	e7ca      	b.n	801442a <nk_check_text+0x42>
 8014494:	0801ad58 	.word	0x0801ad58
 8014498:	0801ba2c 	.word	0x0801ba2c
 801449c:	0801ba10 	.word	0x0801ba10
 80144a0:	0801ad5c 	.word	0x0801ad5c
 80144a4:	0801ad6c 	.word	0x0801ad6c

080144a8 <nk_check_label>:
        return 1;
    }
    return 0;
}
NK_API nk_bool nk_check_label(struct nk_context *ctx, const char *label, nk_bool active)
{
 80144a8:	b570      	push	{r4, r5, r6, lr}
 80144aa:	4605      	mov	r5, r0
 80144ac:	460c      	mov	r4, r1
 80144ae:	4616      	mov	r6, r2
    return nk_check_text(ctx, label, nk_strlen(label), active);
 80144b0:	4608      	mov	r0, r1
 80144b2:	f000 fc7d 	bl	8014db0 <nk_strlen>
 80144b6:	4602      	mov	r2, r0
 80144b8:	4633      	mov	r3, r6
 80144ba:	4621      	mov	r1, r4
 80144bc:	4628      	mov	r0, r5
 80144be:	f7ff ff93 	bl	80143e8 <nk_check_text>
}
 80144c2:	bd70      	pop	{r4, r5, r6, pc}

080144c4 <nk_tree_state_base>:
 *
 * ===============================================================*/
NK_INTERN int
nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states *state)
{
 80144c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c8:	ed2d 8b06 	vpush	{d8-d10}
 80144cc:	b09d      	sub	sp, #116	; 0x74
 80144ce:	461f      	mov	r7, r3
 80144d0:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
    const struct nk_style_button *button;
    enum nk_symbol_type symbol;
    float row_height;

    struct nk_vec2 item_spacing;
    struct nk_rect header = {0,0,0,0};
 80144d4:	2300      	movs	r3, #0
 80144d6:	9314      	str	r3, [sp, #80]	; 0x50
 80144d8:	9315      	str	r3, [sp, #84]	; 0x54
 80144da:	9316      	str	r3, [sp, #88]	; 0x58
 80144dc:	9317      	str	r3, [sp, #92]	; 0x5c
    struct nk_rect sym = {0,0,0,0};
    struct nk_text text;

    nk_flags ws = 0;
 80144de:	930b      	str	r3, [sp, #44]	; 0x2c
    enum nk_widget_layout_states widget_state;

    NK_ASSERT(ctx);
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d04b      	beq.n	801457c <nk_tree_state_base+0xb8>
 80144e4:	4688      	mov	r8, r1
 80144e6:	4691      	mov	r9, r2
 80144e8:	4604      	mov	r4, r0
    NK_ASSERT(ctx->current);
 80144ea:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 80144ee:	f8d3 5658 	ldr.w	r5, [r3, #1624]	; 0x658
 80144f2:	2d00      	cmp	r5, #0
 80144f4:	d048      	beq.n	8014588 <nk_tree_state_base+0xc4>
    NK_ASSERT(ctx->current->layout);
 80144f6:	f8d5 608c 	ldr.w	r6, [r5, #140]	; 0x8c
 80144fa:	2e00      	cmp	r6, #0
 80144fc:	d04a      	beq.n	8014594 <nk_tree_state_base+0xd0>
        return 0;

    /* cache some data */
    win = ctx->current;
    layout = win->layout;
    out = &win->buffer;
 80144fe:	3564      	adds	r5, #100	; 0x64
    style = &ctx->style;
    item_spacing = style->window.spacing;
 8014500:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8014504:	f603 223c 	addw	r2, r3, #2620	; 0xa3c
 8014508:	ed92 aa00 	vldr	s20, [r2]
 801450c:	f500 52d2 	add.w	r2, r0, #6720	; 0x1a40
 8014510:	edd2 9a00 	vldr	s19, [r2]

    /* calculate header bounds and draw background */
    row_height = 4 + style->font->height + 2 * style->tab.padding.y;
 8014514:	f8d0 2168 	ldr.w	r2, [r0, #360]	; 0x168
 8014518:	ed92 8a01 	vldr	s16, [r2, #4]
 801451c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014520:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014524:	f203 63dc 	addw	r3, r3, #1756	; 0x6dc
 8014528:	edd3 7a00 	vldr	s15, [r3]
 801452c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014530:	ee38 8a27 	vadd.f32	s16, s16, s15
    nk_layout_set_min_row_height(ctx, row_height);
 8014534:	eeb0 0a48 	vmov.f32	s0, s16
 8014538:	f7f8 fc94 	bl	800ce64 <nk_layout_set_min_row_height>
    nk_layout_row_dynamic(ctx, row_height, 1);
 801453c:	2101      	movs	r1, #1
 801453e:	eeb0 0a48 	vmov.f32	s0, s16
 8014542:	4620      	mov	r0, r4
 8014544:	f7f8 fdf0 	bl	800d128 <nk_layout_row_dynamic>
    nk_layout_reset_min_row_height(ctx);
 8014548:	4620      	mov	r0, r4
 801454a:	f7f8 fcb5 	bl	800ceb8 <nk_layout_reset_min_row_height>

    widget_state = nk_widget(&header, ctx);
 801454e:	4621      	mov	r1, r4
 8014550:	a814      	add	r0, sp, #80	; 0x50
 8014552:	f001 f927 	bl	80157a4 <nk_widget>
 8014556:	4683      	mov	fp, r0
    if (type == NK_TREE_TAB) {
 8014558:	f1b8 0f01 	cmp.w	r8, #1
 801455c:	d020      	beq.n	80145a0 <nk_tree_state_base+0xdc>
                nk_fill_rect(out, header, 0, style->tab.border_color);
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
                    style->tab.rounding, background->data.color);
                break;
        }
    } else text.background = style->window.background;
 801455e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8014562:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	; 0x9dc
 8014566:	930e      	str	r3, [sp, #56]	; 0x38

    /* update node state */
    in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;
 8014568:	6873      	ldr	r3, [r6, #4]
 801456a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 801456e:	d177      	bne.n	8014660 <nk_tree_state_base+0x19c>
 8014570:	f1bb 0f01 	cmp.w	fp, #1
 8014574:	bf0c      	ite	eq
 8014576:	4621      	moveq	r1, r4
 8014578:	2100      	movne	r1, #0
 801457a:	e072      	b.n	8014662 <nk_tree_state_base+0x19e>
    NK_ASSERT(ctx);
 801457c:	4bc0      	ldr	r3, [pc, #768]	; (8014880 <nk_tree_state_base+0x3bc>)
 801457e:	4ac1      	ldr	r2, [pc, #772]	; (8014884 <nk_tree_state_base+0x3c0>)
 8014580:	211e      	movs	r1, #30
 8014582:	48c1      	ldr	r0, [pc, #772]	; (8014888 <nk_tree_state_base+0x3c4>)
 8014584:	f001 ffe2 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 8014588:	4bc0      	ldr	r3, [pc, #768]	; (801488c <nk_tree_state_base+0x3c8>)
 801458a:	4abe      	ldr	r2, [pc, #760]	; (8014884 <nk_tree_state_base+0x3c0>)
 801458c:	211f      	movs	r1, #31
 801458e:	48be      	ldr	r0, [pc, #760]	; (8014888 <nk_tree_state_base+0x3c4>)
 8014590:	f001 ffdc 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8014594:	4bbe      	ldr	r3, [pc, #760]	; (8014890 <nk_tree_state_base+0x3cc>)
 8014596:	4abb      	ldr	r2, [pc, #748]	; (8014884 <nk_tree_state_base+0x3c0>)
 8014598:	2120      	movs	r1, #32
 801459a:	48bb      	ldr	r0, [pc, #748]	; (8014888 <nk_tree_state_base+0x3c4>)
 801459c:	f001 ffd6 	bl	801654c <__assert_func>
        switch(background->type) {
 80145a0:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80145a4:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	d037      	beq.n	801461c <nk_tree_state_base+0x158>
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d046      	beq.n	801463e <nk_tree_state_base+0x17a>
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d1d9      	bne.n	8014568 <nk_tree_state_base+0xa4>
                nk_fill_rect(out, header, 0, style->tab.border_color);
 80145b4:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80145b8:	9205      	str	r2, [sp, #20]
 80145ba:	f8d2 1460 	ldr.w	r1, [r2, #1120]	; 0x460
 80145be:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 8014894 <nk_tree_state_base+0x3d0>
 80145c2:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 80145c6:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 80145ca:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 80145ce:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 80145d2:	4628      	mov	r0, r5
 80145d4:	f7f6 fd40 	bl	800b058 <nk_fill_rect>
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 80145d8:	9a05      	ldr	r2, [sp, #20]
 80145da:	f202 63cc 	addw	r3, r2, #1740	; 0x6cc
 80145de:	ed93 2a00 	vldr	s4, [r3]
 80145e2:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 80145e6:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 80145ea:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 80145ee:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 80145f2:	f7f9 f90e 	bl	800d812 <nk_shrink_rect>
 80145f6:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 80145fa:	edcd 0a19 	vstr	s1, [sp, #100]	; 0x64
 80145fe:	ed8d 1a1a 	vstr	s2, [sp, #104]	; 0x68
 8014602:	edcd 1a1b 	vstr	s3, [sp, #108]	; 0x6c
                    style->tab.rounding, background->data.color);
 8014606:	9a05      	ldr	r2, [sp, #20]
 8014608:	f502 63da 	add.w	r3, r2, #1744	; 0x6d0
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801460c:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8014610:	ed93 2a00 	vldr	s4, [r3]
 8014614:	4628      	mov	r0, r5
 8014616:	f7f6 fd1f 	bl	800b058 <nk_fill_rect>
                break;
 801461a:	e7a5      	b.n	8014568 <nk_tree_state_base+0xa4>
                nk_draw_image(out, header, &background->data.image, nk_white);
 801461c:	4b9e      	ldr	r3, [pc, #632]	; (8014898 <nk_tree_state_base+0x3d4>)
 801461e:	681a      	ldr	r2, [r3, #0]
 8014620:	f504 51a2 	add.w	r1, r4, #5184	; 0x1440
 8014624:	3108      	adds	r1, #8
 8014626:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 801462a:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 801462e:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 8014632:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 8014636:	4628      	mov	r0, r5
 8014638:	f7f6 fec8 	bl	800b3cc <nk_draw_image>
                break;
 801463c:	e794      	b.n	8014568 <nk_tree_state_base+0xa4>
                nk_draw_nine_slice(out, header, &background->data.slice, nk_white);
 801463e:	4b96      	ldr	r3, [pc, #600]	; (8014898 <nk_tree_state_base+0x3d4>)
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	f504 51a2 	add.w	r1, r4, #5184	; 0x1440
 8014646:	3108      	adds	r1, #8
 8014648:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 801464c:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 8014650:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 8014654:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 8014658:	4628      	mov	r0, r5
 801465a:	f7f6 ff3b 	bl	800b4d4 <nk_draw_nine_slice>
                break;
 801465e:	e783      	b.n	8014568 <nk_tree_state_base+0xa4>
    in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;
 8014660:	2100      	movs	r1, #0
    if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))
 8014662:	2200      	movs	r2, #0
 8014664:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 8014668:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 801466c:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
 8014670:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 8014674:	a80b      	add	r0, sp, #44	; 0x2c
 8014676:	f7f5 f81b 	bl	80096b0 <nk_button_behavior>
 801467a:	b130      	cbz	r0, 801468a <nk_tree_state_base+0x1c6>
        *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;
 801467c:	f89a 3000 	ldrb.w	r3, [sl]
 8014680:	3b01      	subs	r3, #1
 8014682:	bf18      	it	ne
 8014684:	2301      	movne	r3, #1
 8014686:	f88a 3000 	strb.w	r3, [sl]

    /* select correct button style */
    if (*state == NK_MAXIMIZED) {
 801468a:	f89a 3000 	ldrb.w	r3, [sl]
 801468e:	2b01      	cmp	r3, #1
 8014690:	f000 80b3 	beq.w	80147fa <nk_tree_state_base+0x336>
        symbol = style->tab.sym_maximize;
        if (type == NK_TREE_TAB)
            button = &style->tab.tab_maximize_button;
        else button = &style->tab.node_maximize_button;
    } else {
        symbol = style->tab.sym_minimize;
 8014694:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8014698:	f893 26c8 	ldrb.w	r2, [r3, #1736]	; 0x6c8
        if (type == NK_TREE_TAB)
 801469c:	f1b8 0f01 	cmp.w	r8, #1
            button = &style->tab.tab_minimize_button;
 80146a0:	bf0e      	itee	eq
 80146a2:	f504 51a8 	addeq.w	r1, r4, #5376	; 0x1500
        else button = &style->tab.node_minimize_button;
 80146a6:	f504 51b1 	addne.w	r1, r4, #5664	; 0x1620
 80146aa:	3110      	addne	r1, #16
    }

    {/* draw triangle button */
    sym.w = sym.h = style->font->height;
 80146ac:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
 80146b0:	ed90 8a01 	vldr	s16, [r0, #4]
    sym.y = header.y + style->tab.padding.y;
 80146b4:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80146b8:	f203 6cdc 	addw	ip, r3, #1756	; 0x6dc
 80146bc:	eddc 7a00 	vldr	s15, [ip]
 80146c0:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
 80146c4:	ee39 9a27 	vadd.f32	s18, s18, s15
    sym.x = header.x + style->tab.padding.x;
 80146c8:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 80146cc:	edd3 7a00 	vldr	s15, [r3]
 80146d0:	eddd 8a14 	vldr	s17, [sp, #80]	; 0x50
 80146d4:	ee78 8aa7 	vadd.f32	s17, s17, s15
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 80146d8:	edcd 8a10 	vstr	s17, [sp, #64]	; 0x40
 80146dc:	ed8d 9a11 	vstr	s18, [sp, #68]	; 0x44
 80146e0:	ed8d 8a12 	vstr	s16, [sp, #72]	; 0x48
 80146e4:	ed8d 8a13 	vstr	s16, [sp, #76]	; 0x4c
 80146e8:	9002      	str	r0, [sp, #8]
 80146ea:	2300      	movs	r3, #0
 80146ec:	9301      	str	r3, [sp, #4]
 80146ee:	9100      	str	r1, [sp, #0]
 80146f0:	eeb0 0a68 	vmov.f32	s0, s17
 80146f4:	eef0 0a49 	vmov.f32	s1, s18
 80146f8:	eeb0 1a48 	vmov.f32	s2, s16
 80146fc:	eef0 1a48 	vmov.f32	s3, s16
 8014700:	4629      	mov	r1, r5
 8014702:	a80b      	add	r0, sp, #44	; 0x2c
 8014704:	f7f5 fa00 	bl	8009b08 <nk_do_button_symbol>
        button, 0, style->font);

    if (img) {
 8014708:	f1b9 0f00 	cmp.w	r9, #0
 801470c:	d021      	beq.n	8014752 <nk_tree_state_base+0x28e>
        /* draw optional image icon */
        sym.x = sym.x + sym.w + 4 * item_spacing.x;
 801470e:	ee78 8a28 	vadd.f32	s17, s16, s17
 8014712:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014716:	ee6a 7a27 	vmul.f32	s15, s20, s15
 801471a:	ee78 8aa7 	vadd.f32	s17, s17, s15
        nk_draw_image(&win->buffer, sym, img, nk_white);
 801471e:	edcd 8a10 	vstr	s17, [sp, #64]	; 0x40
 8014722:	4b5d      	ldr	r3, [pc, #372]	; (8014898 <nk_tree_state_base+0x3d4>)
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	4649      	mov	r1, r9
 8014728:	eeb0 0a68 	vmov.f32	s0, s17
 801472c:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 8014730:	ed9d 1a12 	vldr	s2, [sp, #72]	; 0x48
 8014734:	eddd 1a13 	vldr	s3, [sp, #76]	; 0x4c
 8014738:	4628      	mov	r0, r5
 801473a:	f7f6 fe47 	bl	800b3cc <nk_draw_image>
        sym.w = style->font->height + style->tab.spacing.x;}
 801473e:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 8014742:	f504 53b7 	add.w	r3, r4, #5856	; 0x16e0
 8014746:	ed92 8a01 	vldr	s16, [r2, #4]
 801474a:	edd3 7a00 	vldr	s15, [r3]
 801474e:	ee38 8a27 	vadd.f32	s16, s16, s15
    }

    {/* draw label */
    struct nk_rect label;
    header.w = NK_MAX(header.w, sym.w + item_spacing.x);
 8014752:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8014756:	ee78 7a0a 	vadd.f32	s15, s16, s20
 801475a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014762:	bf58      	it	pl
 8014764:	eef0 7a47 	vmovpl.f32	s15, s14
 8014768:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
    label.x = sym.x + sym.w + item_spacing.x;
 801476c:	ee78 8a88 	vadd.f32	s17, s17, s16
 8014770:	ee78 8a8a 	vadd.f32	s17, s17, s20
 8014774:	edcd 8a07 	vstr	s17, [sp, #28]
    label.y = sym.y;
 8014778:	ed8d 9a08 	vstr	s18, [sp, #32]
    label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);
 801477c:	ee38 8a29 	vadd.f32	s16, s16, s19
 8014780:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8014784:	f203 62d4 	addw	r2, r3, #1748	; 0x6d4
 8014788:	ed92 7a00 	vldr	s14, [r2]
 801478c:	ee38 8a07 	vadd.f32	s16, s16, s14
 8014790:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8014794:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    label.h = style->font->height;
 8014798:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 801479c:	6852      	ldr	r2, [r2, #4]
 801479e:	920a      	str	r2, [sp, #40]	; 0x28
    text.text = style->tab.text;
 80147a0:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 80147a4:	930f      	str	r3, [sp, #60]	; 0x3c
    text.padding = nk_vec2(0,0);
 80147a6:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8014894 <nk_tree_state_base+0x3d0>
 80147aa:	eef0 0a40 	vmov.f32	s1, s0
 80147ae:	f7f9 f84b 	bl	800d848 <nk_vec2>
 80147b2:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80147b6:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 80147ba:	4638      	mov	r0, r7
 80147bc:	f000 faf8 	bl	8014db0 <nk_strlen>
 80147c0:	4602      	mov	r2, r0
 80147c2:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 80147c6:	9301      	str	r3, [sp, #4]
 80147c8:	2311      	movs	r3, #17
 80147ca:	9300      	str	r3, [sp, #0]
 80147cc:	ab0c      	add	r3, sp, #48	; 0x30
 80147ce:	4639      	mov	r1, r7
 80147d0:	ed9d 0a07 	vldr	s0, [sp, #28]
 80147d4:	eddd 0a08 	vldr	s1, [sp, #32]
 80147d8:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 80147dc:	eddd 1a0a 	vldr	s3, [sp, #40]	; 0x28
 80147e0:	4628      	mov	r0, r5
 80147e2:	f7fe fa27 	bl	8012c34 <nk_widget_text>
        NK_TEXT_LEFT, style->font);}

    /* increase x-axis cursor widget position pointer */
    if (*state == NK_MAXIMIZED) {
 80147e6:	f89a 3000 	ldrb.w	r3, [sl]
 80147ea:	2b01      	cmp	r3, #1
 80147ec:	d013      	beq.n	8014816 <nk_tree_state_base+0x352>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
        layout->row.tree_depth++;
        return nk_true;
    } else return nk_false;
 80147ee:	2000      	movs	r0, #0
}
 80147f0:	b01d      	add	sp, #116	; 0x74
 80147f2:	ecbd 8b06 	vpop	{d8-d10}
 80147f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        symbol = style->tab.sym_maximize;
 80147fa:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80147fe:	f893 26c9 	ldrb.w	r2, [r3, #1737]	; 0x6c9
        if (type == NK_TREE_TAB)
 8014802:	f1b8 0f01 	cmp.w	r8, #1
            button = &style->tab.tab_maximize_button;
 8014806:	bf07      	ittee	eq
 8014808:	f504 51a3 	addeq.w	r1, r4, #5216	; 0x1460
 801480c:	3108      	addeq	r1, #8
        else button = &style->tab.node_maximize_button;
 801480e:	f504 51ac 	addne.w	r1, r4, #5504	; 0x1580
 8014812:	3118      	addne	r1, #24
 8014814:	e74a      	b.n	80146ac <nk_tree_state_base+0x1e8>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
 8014816:	69b3      	ldr	r3, [r6, #24]
 8014818:	edd3 7a00 	vldr	s15, [r3]
 801481c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014820:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8014824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014828:	f504 53b6 	add.w	r3, r4, #5824	; 0x16c0
 801482c:	ed93 7a05 	vldr	s14, [r3, #20]
 8014830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014834:	edc6 7a08 	vstr	s15, [r6, #32]
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
 8014838:	ed96 7a04 	vldr	s14, [r6, #16]
 801483c:	edd3 7a05 	vldr	s15, [r3, #20]
 8014840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014848:	bf58      	it	pl
 801484a:	eef0 7a47 	vmovpl.f32	s15, s14
 801484e:	edc6 7a04 	vstr	s15, [r6, #16]
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
 8014852:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8014856:	f204 63d4 	addw	r3, r4, #1748	; 0x6d4
 801485a:	f604 2454 	addw	r4, r4, #2644	; 0xa54
 801485e:	ed93 7a00 	vldr	s14, [r3]
 8014862:	edd4 6a00 	vldr	s13, [r4]
 8014866:	ee37 7a26 	vadd.f32	s14, s14, s13
 801486a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801486e:	edc6 7a04 	vstr	s15, [r6, #16]
        layout->row.tree_depth++;
 8014872:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 8014876:	3301      	adds	r3, #1
 8014878:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
        return nk_true;
 801487c:	2001      	movs	r0, #1
 801487e:	e7b7      	b.n	80147f0 <nk_tree_state_base+0x32c>
 8014880:	0801ad58 	.word	0x0801ad58
 8014884:	0801ba98 	.word	0x0801ba98
 8014888:	0801ba50 	.word	0x0801ba50
 801488c:	0801ad5c 	.word	0x0801ad5c
 8014890:	0801ad6c 	.word	0x0801ad6c
 8014894:	00000000 	.word	0x00000000
 8014898:	0801baac 	.word	0x0801baac

0801489c <nk_tree_base>:
NK_INTERN int
nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801489c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148a0:	b083      	sub	sp, #12
 80148a2:	4604      	mov	r4, r0
 80148a4:	460f      	mov	r7, r1
 80148a6:	4690      	mov	r8, r2
 80148a8:	461d      	mov	r5, r3
 80148aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    struct nk_window *win = ctx->current;
 80148ac:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80148b0:	f8d3 9658 	ldr.w	r9, [r3, #1624]	; 0x658
    int title_len = 0;
    nk_hash tree_hash = 0;
    nk_uint *state = 0;

    /* retrieve tree state from internal widget state tables */
    if (!hash) {
 80148b4:	b1a0      	cbz	r0, 80148e0 <nk_tree_base+0x44>
        title_len = (int)nk_strlen(title);
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
    } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);
 80148b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80148b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80148ba:	f000 fda1 	bl	8015400 <nk_murmur_hash>
 80148be:	4606      	mov	r6, r0
    state = nk_find_value(win, tree_hash);
 80148c0:	4631      	mov	r1, r6
 80148c2:	4648      	mov	r0, r9
 80148c4:	f7fe f998 	bl	8012bf8 <nk_find_value>
    if (!state) {
 80148c8:	4603      	mov	r3, r0
 80148ca:	b198      	cbz	r0, 80148f4 <nk_tree_base+0x58>
        state = nk_add_value(ctx, win, tree_hash, 0);
        *state = initial_state;
    }
    return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);
 80148cc:	9300      	str	r3, [sp, #0]
 80148ce:	462b      	mov	r3, r5
 80148d0:	4642      	mov	r2, r8
 80148d2:	4639      	mov	r1, r7
 80148d4:	4620      	mov	r0, r4
 80148d6:	f7ff fdf5 	bl	80144c4 <nk_tree_state_base>
}
 80148da:	b003      	add	sp, #12
 80148dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        title_len = (int)nk_strlen(title);
 80148e0:	4628      	mov	r0, r5
 80148e2:	f000 fa65 	bl	8014db0 <nk_strlen>
 80148e6:	4601      	mov	r1, r0
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
 80148e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80148ea:	4628      	mov	r0, r5
 80148ec:	f000 fd88 	bl	8015400 <nk_murmur_hash>
 80148f0:	4606      	mov	r6, r0
 80148f2:	e7e5      	b.n	80148c0 <nk_tree_base+0x24>
        state = nk_add_value(ctx, win, tree_hash, 0);
 80148f4:	2300      	movs	r3, #0
 80148f6:	4632      	mov	r2, r6
 80148f8:	4649      	mov	r1, r9
 80148fa:	4620      	mov	r0, r4
 80148fc:	f7fe f930 	bl	8012b60 <nk_add_value>
 8014900:	4603      	mov	r3, r0
        *state = initial_state;
 8014902:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8014906:	6002      	str	r2, [r0, #0]
 8014908:	e7e0      	b.n	80148cc <nk_tree_base+0x30>
	...

0801490c <nk_tree_state_pop>:
{
    return nk_tree_state_base(ctx, type, &img, title, state);
}
NK_API void
nk_tree_state_pop(struct nk_context *ctx)
{
 801490c:	b508      	push	{r3, lr}
    struct nk_window *win = 0;
    struct nk_panel *layout = 0;

    NK_ASSERT(ctx);
 801490e:	b378      	cbz	r0, 8014970 <nk_tree_state_pop+0x64>
    NK_ASSERT(ctx->current);
 8014910:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8014914:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014918:	b383      	cbz	r3, 801497c <nk_tree_state_pop+0x70>
    NK_ASSERT(ctx->current->layout);
 801491a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801491e:	b39b      	cbz	r3, 8014988 <nk_tree_state_pop+0x7c>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return;

    win = ctx->current;
    layout = win->layout;
    layout->at_x -= ctx->style.tab.indent + (float)*layout->offset_x;
 8014920:	6999      	ldr	r1, [r3, #24]
 8014922:	edd1 7a00 	vldr	s15, [r1]
 8014926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801492a:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 801492e:	f202 61d4 	addw	r1, r2, #1748	; 0x6d4
 8014932:	ed91 7a00 	vldr	s14, [r1]
 8014936:	ee77 7a87 	vadd.f32	s15, s15, s14
 801493a:	ed93 7a08 	vldr	s14, [r3, #32]
 801493e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014942:	edc3 7a08 	vstr	s15, [r3, #32]
    layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;
 8014946:	f602 2254 	addw	r2, r2, #2644	; 0xa54
 801494a:	ed91 7a00 	vldr	s14, [r1]
 801494e:	edd2 7a00 	vldr	s15, [r2]
 8014952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014956:	edd3 7a04 	vldr	s15, [r3, #16]
 801495a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801495e:	edc3 7a04 	vstr	s15, [r3, #16]
    NK_ASSERT(layout->row.tree_depth);
 8014962:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8014966:	b1aa      	cbz	r2, 8014994 <nk_tree_state_pop+0x88>
    layout->row.tree_depth--;
 8014968:	3a01      	subs	r2, #1
 801496a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 801496e:	bd08      	pop	{r3, pc}
    NK_ASSERT(ctx);
 8014970:	4b0b      	ldr	r3, [pc, #44]	; (80149a0 <nk_tree_state_pop+0x94>)
 8014972:	4a0c      	ldr	r2, [pc, #48]	; (80149a4 <nk_tree_state_pop+0x98>)
 8014974:	21a2      	movs	r1, #162	; 0xa2
 8014976:	480c      	ldr	r0, [pc, #48]	; (80149a8 <nk_tree_state_pop+0x9c>)
 8014978:	f001 fde8 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 801497c:	4b0b      	ldr	r3, [pc, #44]	; (80149ac <nk_tree_state_pop+0xa0>)
 801497e:	4a09      	ldr	r2, [pc, #36]	; (80149a4 <nk_tree_state_pop+0x98>)
 8014980:	21a3      	movs	r1, #163	; 0xa3
 8014982:	4809      	ldr	r0, [pc, #36]	; (80149a8 <nk_tree_state_pop+0x9c>)
 8014984:	f001 fde2 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8014988:	4b09      	ldr	r3, [pc, #36]	; (80149b0 <nk_tree_state_pop+0xa4>)
 801498a:	4a06      	ldr	r2, [pc, #24]	; (80149a4 <nk_tree_state_pop+0x98>)
 801498c:	21a4      	movs	r1, #164	; 0xa4
 801498e:	4806      	ldr	r0, [pc, #24]	; (80149a8 <nk_tree_state_pop+0x9c>)
 8014990:	f001 fddc 	bl	801654c <__assert_func>
    NK_ASSERT(layout->row.tree_depth);
 8014994:	4b07      	ldr	r3, [pc, #28]	; (80149b4 <nk_tree_state_pop+0xa8>)
 8014996:	4a03      	ldr	r2, [pc, #12]	; (80149a4 <nk_tree_state_pop+0x98>)
 8014998:	21ac      	movs	r1, #172	; 0xac
 801499a:	4803      	ldr	r0, [pc, #12]	; (80149a8 <nk_tree_state_pop+0x9c>)
 801499c:	f001 fdd6 	bl	801654c <__assert_func>
 80149a0:	0801ad58 	.word	0x0801ad58
 80149a4:	0801ba84 	.word	0x0801ba84
 80149a8:	0801ba50 	.word	0x0801ba50
 80149ac:	0801ad5c 	.word	0x0801ad5c
 80149b0:	0801ad6c 	.word	0x0801ad6c
 80149b4:	0801ba6c 	.word	0x0801ba6c

080149b8 <nk_tree_push_hashed>:
NK_API nk_bool
nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,
    const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 80149b8:	b510      	push	{r4, lr}
 80149ba:	b084      	sub	sp, #16
    return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);
 80149bc:	9c08      	ldr	r4, [sp, #32]
 80149be:	9403      	str	r4, [sp, #12]
 80149c0:	9c07      	ldr	r4, [sp, #28]
 80149c2:	9402      	str	r4, [sp, #8]
 80149c4:	9c06      	ldr	r4, [sp, #24]
 80149c6:	9401      	str	r4, [sp, #4]
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	4613      	mov	r3, r2
 80149cc:	2200      	movs	r2, #0
 80149ce:	f7ff ff65 	bl	801489c <nk_tree_base>
}
 80149d2:	b004      	add	sp, #16
 80149d4:	bd10      	pop	{r4, pc}

080149d6 <nk_tree_pop>:
{
    return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);
}
NK_API void
nk_tree_pop(struct nk_context *ctx)
{
 80149d6:	b508      	push	{r3, lr}
    nk_tree_state_pop(ctx);
 80149d8:	f7ff ff98 	bl	801490c <nk_tree_state_pop>
}
 80149dc:	bd08      	pop	{r3, pc}
	...

080149e0 <nk_utf_decode_byte>:
    for (i = 1; *u > nk_utfmax[i]; ++i);
    return i;
}
NK_INTERN nk_rune
nk_utf_decode_byte(char c, int *i)
{
 80149e0:	b538      	push	{r3, r4, r5, lr}
    NK_ASSERT(i);
 80149e2:	b191      	cbz	r1, 8014a0a <nk_utf_decode_byte+0x2a>
 80149e4:	460d      	mov	r5, r1
    if (!i) return 0;
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 80149e6:	2300      	movs	r3, #0
 80149e8:	600b      	str	r3, [r1, #0]
 80149ea:	490c      	ldr	r1, [pc, #48]	; (8014a1c <nk_utf_decode_byte+0x3c>)
 80149ec:	4a0c      	ldr	r2, [pc, #48]	; (8014a20 <nk_utf_decode_byte+0x40>)
        if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])
 80149ee:	f811 cb01 	ldrb.w	ip, [r1], #1
 80149f2:	f812 eb01 	ldrb.w	lr, [r2], #1
 80149f6:	ea0c 0400 	and.w	r4, ip, r0
 80149fa:	4574      	cmp	r4, lr
 80149fc:	d00b      	beq.n	8014a16 <nk_utf_decode_byte+0x36>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 80149fe:	3301      	adds	r3, #1
 8014a00:	602b      	str	r3, [r5, #0]
 8014a02:	2b05      	cmp	r3, #5
 8014a04:	d1f3      	bne.n	80149ee <nk_utf_decode_byte+0xe>
            return (nk_byte)(c & ~nk_utfmask[*i]);
    }
    return 0;
 8014a06:	2000      	movs	r0, #0
 8014a08:	e007      	b.n	8014a1a <nk_utf_decode_byte+0x3a>
    NK_ASSERT(i);
 8014a0a:	4b06      	ldr	r3, [pc, #24]	; (8014a24 <nk_utf_decode_byte+0x44>)
 8014a0c:	4a06      	ldr	r2, [pc, #24]	; (8014a28 <nk_utf_decode_byte+0x48>)
 8014a0e:	211c      	movs	r1, #28
 8014a10:	4806      	ldr	r0, [pc, #24]	; (8014a2c <nk_utf_decode_byte+0x4c>)
 8014a12:	f001 fd9b 	bl	801654c <__assert_func>
            return (nk_byte)(c & ~nk_utfmask[*i]);
 8014a16:	ea20 000c 	bic.w	r0, r0, ip
}
 8014a1a:	bd38      	pop	{r3, r4, r5, pc}
 8014a1c:	0801bb18 	.word	0x0801bb18
 8014a20:	0801bb10 	.word	0x0801bb10
 8014a24:	0801bab0 	.word	0x0801bab0
 8014a28:	0801baec 	.word	0x0801baec
 8014a2c:	0801bab4 	.word	0x0801bab4

08014a30 <nk_utf_validate>:
{
 8014a30:	b508      	push	{r3, lr}
    NK_ASSERT(u);
 8014a32:	b1d0      	cbz	r0, 8014a6a <nk_utf_validate+0x3a>
 8014a34:	4602      	mov	r2, r0
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 8014a36:	6803      	ldr	r3, [r0, #0]
 8014a38:	4814      	ldr	r0, [pc, #80]	; (8014a8c <nk_utf_validate+0x5c>)
 8014a3a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014a3e:	4298      	cmp	r0, r3
 8014a40:	d80a      	bhi.n	8014a58 <nk_utf_validate+0x28>
 8014a42:	4813      	ldr	r0, [pc, #76]	; (8014a90 <nk_utf_validate+0x60>)
 8014a44:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014a48:	428b      	cmp	r3, r1
 8014a4a:	d205      	bcs.n	8014a58 <nk_utf_validate+0x28>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 8014a4c:	f5a3 4058 	sub.w	r0, r3, #55296	; 0xd800
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 8014a50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014a54:	4288      	cmp	r0, r1
 8014a56:	d80e      	bhi.n	8014a76 <nk_utf_validate+0x46>
            *u = NK_UTF_INVALID;
 8014a58:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8014a5c:	6013      	str	r3, [r2, #0]
    for (i = 1; *u > nk_utfmax[i]; ++i);
 8014a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a62:	bf2c      	ite	cs
 8014a64:	2004      	movcs	r0, #4
 8014a66:	2003      	movcc	r0, #3
}
 8014a68:	bd08      	pop	{r3, pc}
    NK_ASSERT(u);
 8014a6a:	4b0a      	ldr	r3, [pc, #40]	; (8014a94 <nk_utf_validate+0x64>)
 8014a6c:	4a0a      	ldr	r2, [pc, #40]	; (8014a98 <nk_utf_validate+0x68>)
 8014a6e:	2111      	movs	r1, #17
 8014a70:	480a      	ldr	r0, [pc, #40]	; (8014a9c <nk_utf_validate+0x6c>)
 8014a72:	f001 fd6b 	bl	801654c <__assert_func>
    for (i = 1; *u > nk_utfmax[i]; ++i);
 8014a76:	2b7f      	cmp	r3, #127	; 0x7f
 8014a78:	bf98      	it	ls
 8014a7a:	2001      	movls	r0, #1
 8014a7c:	d9f4      	bls.n	8014a68 <nk_utf_validate+0x38>
 8014a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a82:	bf38      	it	cc
 8014a84:	2002      	movcc	r0, #2
 8014a86:	d3ef      	bcc.n	8014a68 <nk_utf_validate+0x38>
 8014a88:	e7e9      	b.n	8014a5e <nk_utf_validate+0x2e>
 8014a8a:	bf00      	nop
 8014a8c:	0801bb34 	.word	0x0801bb34
 8014a90:	0801bb20 	.word	0x0801bb20
 8014a94:	08019de8 	.word	0x08019de8
 8014a98:	0801badc 	.word	0x0801badc
 8014a9c:	0801bab4 	.word	0x0801bab4

08014aa0 <nk_utf_decode>:
NK_API int
nk_utf_decode(const char *c, nk_rune *u, int clen)
{
 8014aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aa4:	b083      	sub	sp, #12
    int i, j, len, type=0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	9300      	str	r3, [sp, #0]
    nk_rune udecoded;

    NK_ASSERT(c);
 8014aaa:	b140      	cbz	r0, 8014abe <nk_utf_decode+0x1e>
 8014aac:	4688      	mov	r8, r1
 8014aae:	4616      	mov	r6, r2
 8014ab0:	4607      	mov	r7, r0
    NK_ASSERT(u);
 8014ab2:	b151      	cbz	r1, 8014aca <nk_utf_decode+0x2a>

    if (!c || !u) return 0;
    if (!clen) return 0;
 8014ab4:	b97a      	cbnz	r2, 8014ad6 <nk_utf_decode+0x36>
    if (j < len)
        return 0;
    *u = udecoded;
    nk_utf_validate(u, len);
    return len;
}
 8014ab6:	4630      	mov	r0, r6
 8014ab8:	b003      	add	sp, #12
 8014aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NK_ASSERT(c);
 8014abe:	4b1f      	ldr	r3, [pc, #124]	; (8014b3c <nk_utf_decode+0x9c>)
 8014ac0:	4a1f      	ldr	r2, [pc, #124]	; (8014b40 <nk_utf_decode+0xa0>)
 8014ac2:	212a      	movs	r1, #42	; 0x2a
 8014ac4:	481f      	ldr	r0, [pc, #124]	; (8014b44 <nk_utf_decode+0xa4>)
 8014ac6:	f001 fd41 	bl	801654c <__assert_func>
    NK_ASSERT(u);
 8014aca:	4b1f      	ldr	r3, [pc, #124]	; (8014b48 <nk_utf_decode+0xa8>)
 8014acc:	4a1c      	ldr	r2, [pc, #112]	; (8014b40 <nk_utf_decode+0xa0>)
 8014ace:	212b      	movs	r1, #43	; 0x2b
 8014ad0:	481c      	ldr	r0, [pc, #112]	; (8014b44 <nk_utf_decode+0xa4>)
 8014ad2:	f001 fd3b 	bl	801654c <__assert_func>
    *u = NK_UTF_INVALID;
 8014ad6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8014ada:	600b      	str	r3, [r1, #0]
    udecoded = nk_utf_decode_byte(c[0], &len);
 8014adc:	a901      	add	r1, sp, #4
 8014ade:	7800      	ldrb	r0, [r0, #0]
 8014ae0:	f7ff ff7e 	bl	80149e0 <nk_utf_decode_byte>
    if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))
 8014ae4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014ae8:	f109 33ff 	add.w	r3, r9, #4294967295
 8014aec:	2b02      	cmp	r3, #2
 8014aee:	d821      	bhi.n	8014b34 <nk_utf_decode+0x94>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 8014af0:	2e01      	cmp	r6, #1
 8014af2:	dd19      	ble.n	8014b28 <nk_utf_decode+0x88>
 8014af4:	f1b9 0f01 	cmp.w	r9, #1
 8014af8:	dd0e      	ble.n	8014b18 <nk_utf_decode+0x78>
 8014afa:	2501      	movs	r5, #1
        udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);
 8014afc:	0184      	lsls	r4, r0, #6
 8014afe:	4669      	mov	r1, sp
 8014b00:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8014b04:	f7ff ff6c 	bl	80149e0 <nk_utf_decode_byte>
 8014b08:	4320      	orrs	r0, r4
        if (type != 0)
 8014b0a:	9b00      	ldr	r3, [sp, #0]
 8014b0c:	b9a3      	cbnz	r3, 8014b38 <nk_utf_decode+0x98>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 8014b0e:	3501      	adds	r5, #1
 8014b10:	42ae      	cmp	r6, r5
 8014b12:	d00a      	beq.n	8014b2a <nk_utf_decode+0x8a>
 8014b14:	45a9      	cmp	r9, r5
 8014b16:	d1f1      	bne.n	8014afc <nk_utf_decode+0x5c>
    *u = udecoded;
 8014b18:	f8c8 0000 	str.w	r0, [r8]
    nk_utf_validate(u, len);
 8014b1c:	4649      	mov	r1, r9
 8014b1e:	4640      	mov	r0, r8
 8014b20:	f7ff ff86 	bl	8014a30 <nk_utf_validate>
    return len;
 8014b24:	464e      	mov	r6, r9
 8014b26:	e7c6      	b.n	8014ab6 <nk_utf_decode+0x16>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 8014b28:	2501      	movs	r5, #1
    if (j < len)
 8014b2a:	45a9      	cmp	r9, r5
        return 0;
 8014b2c:	bfc8      	it	gt
 8014b2e:	2600      	movgt	r6, #0
    if (j < len)
 8014b30:	dcc1      	bgt.n	8014ab6 <nk_utf_decode+0x16>
 8014b32:	e7f1      	b.n	8014b18 <nk_utf_decode+0x78>
        return 1;
 8014b34:	2601      	movs	r6, #1
 8014b36:	e7be      	b.n	8014ab6 <nk_utf_decode+0x16>
 8014b38:	462e      	mov	r6, r5
 8014b3a:	e7bc      	b.n	8014ab6 <nk_utf_decode+0x16>
 8014b3c:	0801bacc 	.word	0x0801bacc
 8014b40:	0801bb00 	.word	0x0801bb00
 8014b44:	0801bab4 	.word	0x0801bab4
 8014b48:	08019de8 	.word	0x08019de8

08014b4c <nk_utf_encode>:
{
    return (char)((nk_utfbyte[i]) | ((nk_byte)u & ~nk_utfmask[i]));
}
NK_API int
nk_utf_encode(nk_rune u, char *c, int clen)
{
 8014b4c:	b530      	push	{r4, r5, lr}
 8014b4e:	b083      	sub	sp, #12
 8014b50:	9001      	str	r0, [sp, #4]
 8014b52:	460d      	mov	r5, r1
 8014b54:	4614      	mov	r4, r2
    int len, i;
    len = nk_utf_validate(&u, 0);
 8014b56:	2100      	movs	r1, #0
 8014b58:	a801      	add	r0, sp, #4
 8014b5a:	f7ff ff69 	bl	8014a30 <nk_utf_validate>
    if (clen < len || !len || len > NK_UTF_SIZE)
 8014b5e:	42a0      	cmp	r0, r4
 8014b60:	dc1b      	bgt.n	8014b9a <nk_utf_encode+0x4e>
 8014b62:	b1d8      	cbz	r0, 8014b9c <nk_utf_encode+0x50>
 8014b64:	2804      	cmp	r0, #4
 8014b66:	dc1b      	bgt.n	8014ba0 <nk_utf_encode+0x54>
        return 0;

    for (i = len - 1; i != 0; --i) {
 8014b68:	2801      	cmp	r0, #1
 8014b6a:	d00c      	beq.n	8014b86 <nk_utf_encode+0x3a>
 8014b6c:	9a01      	ldr	r2, [sp, #4]
 8014b6e:	1829      	adds	r1, r5, r0
 8014b70:	1c6c      	adds	r4, r5, #1
    return (char)((nk_utfbyte[i]) | ((nk_byte)u & ~nk_utfmask[i]));
 8014b72:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8014b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
        c[i] = nk_utf_encode_byte(u, 0);
 8014b7a:	f801 3d01 	strb.w	r3, [r1, #-1]!
        u >>= 6;
 8014b7e:	0992      	lsrs	r2, r2, #6
    for (i = len - 1; i != 0; --i) {
 8014b80:	42a1      	cmp	r1, r4
 8014b82:	d1f6      	bne.n	8014b72 <nk_utf_encode+0x26>
 8014b84:	9201      	str	r2, [sp, #4]
    return (char)((nk_utfbyte[i]) | ((nk_byte)u & ~nk_utfmask[i]));
 8014b86:	4b07      	ldr	r3, [pc, #28]	; (8014ba4 <nk_utf_encode+0x58>)
 8014b88:	5c1a      	ldrb	r2, [r3, r0]
 8014b8a:	9b01      	ldr	r3, [sp, #4]
 8014b8c:	ea23 0302 	bic.w	r3, r3, r2
 8014b90:	4a05      	ldr	r2, [pc, #20]	; (8014ba8 <nk_utf_encode+0x5c>)
 8014b92:	5c12      	ldrb	r2, [r2, r0]
 8014b94:	4313      	orrs	r3, r2
    }
    c[0] = nk_utf_encode_byte(u, len);
 8014b96:	702b      	strb	r3, [r5, #0]
    return len;
 8014b98:	e000      	b.n	8014b9c <nk_utf_encode+0x50>
        return 0;
 8014b9a:	2000      	movs	r0, #0
}
 8014b9c:	b003      	add	sp, #12
 8014b9e:	bd30      	pop	{r4, r5, pc}
        return 0;
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	e7fb      	b.n	8014b9c <nk_utf_encode+0x50>
 8014ba4:	0801bb18 	.word	0x0801bb18
 8014ba8:	0801bb10 	.word	0x0801bb10

08014bac <nk_utf_len>:
NK_API int
nk_utf_len(const char *str, int len)
{
 8014bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bae:	b083      	sub	sp, #12
    int text_len;
    int glyph_len;
    int src_len = 0;
    nk_rune unicode;

    NK_ASSERT(str);
 8014bb0:	b128      	cbz	r0, 8014bbe <nk_utf_len+0x12>
 8014bb2:	460d      	mov	r5, r1
 8014bb4:	4607      	mov	r7, r0
    if (!str || !len) return 0;
 8014bb6:	b941      	cbnz	r1, 8014bca <nk_utf_len+0x1e>
        glyphs++;
        src_len = src_len + glyph_len;
        glyph_len = nk_utf_decode(text + src_len, &unicode, text_len - src_len);
    }
    return glyphs;
}
 8014bb8:	4628      	mov	r0, r5
 8014bba:	b003      	add	sp, #12
 8014bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NK_ASSERT(str);
 8014bbe:	4b11      	ldr	r3, [pc, #68]	; (8014c04 <nk_utf_len+0x58>)
 8014bc0:	4a11      	ldr	r2, [pc, #68]	; (8014c08 <nk_utf_len+0x5c>)
 8014bc2:	215e      	movs	r1, #94	; 0x5e
 8014bc4:	4811      	ldr	r0, [pc, #68]	; (8014c0c <nk_utf_len+0x60>)
 8014bc6:	f001 fcc1 	bl	801654c <__assert_func>
    glyph_len = nk_utf_decode(text, &unicode, text_len);
 8014bca:	460a      	mov	r2, r1
 8014bcc:	a901      	add	r1, sp, #4
 8014bce:	f7ff ff67 	bl	8014aa0 <nk_utf_decode>
    while (glyph_len && src_len < len) {
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	b180      	cbz	r0, 8014bf8 <nk_utf_len+0x4c>
 8014bd6:	2d00      	cmp	r5, #0
 8014bd8:	dd10      	ble.n	8014bfc <nk_utf_len+0x50>
    int src_len = 0;
 8014bda:	2400      	movs	r4, #0
    int glyphs = 0;
 8014bdc:	4626      	mov	r6, r4
        glyphs++;
 8014bde:	3601      	adds	r6, #1
        src_len = src_len + glyph_len;
 8014be0:	441c      	add	r4, r3
        glyph_len = nk_utf_decode(text + src_len, &unicode, text_len - src_len);
 8014be2:	1b2a      	subs	r2, r5, r4
 8014be4:	a901      	add	r1, sp, #4
 8014be6:	1938      	adds	r0, r7, r4
 8014be8:	f7ff ff5a 	bl	8014aa0 <nk_utf_decode>
    while (glyph_len && src_len < len) {
 8014bec:	4603      	mov	r3, r0
 8014bee:	b138      	cbz	r0, 8014c00 <nk_utf_len+0x54>
 8014bf0:	42a5      	cmp	r5, r4
 8014bf2:	dcf4      	bgt.n	8014bde <nk_utf_len+0x32>
        glyphs++;
 8014bf4:	4635      	mov	r5, r6
 8014bf6:	e7df      	b.n	8014bb8 <nk_utf_len+0xc>
    int glyphs = 0;
 8014bf8:	4605      	mov	r5, r0
 8014bfa:	e7dd      	b.n	8014bb8 <nk_utf_len+0xc>
 8014bfc:	2500      	movs	r5, #0
 8014bfe:	e7db      	b.n	8014bb8 <nk_utf_len+0xc>
        glyphs++;
 8014c00:	4635      	mov	r5, r6
 8014c02:	e7d9      	b.n	8014bb8 <nk_utf_len+0xc>
 8014c04:	0801b6e4 	.word	0x0801b6e4
 8014c08:	0801bad0 	.word	0x0801bad0
 8014c0c:	0801bab4 	.word	0x0801bab4

08014c10 <nk_memcopy>:
nk_memcopy(void *dst0, const void *src0, nk_size length)
{
    nk_ptr t;
    char *dst = (char*)dst0;
    const char *src = (const char*)src0;
    if (length == 0 || dst == src)
 8014c10:	2a00      	cmp	r2, #0
 8014c12:	f000 8086 	beq.w	8014d22 <nk_memcopy+0x112>
 8014c16:	4613      	mov	r3, r2
 8014c18:	4288      	cmp	r0, r1
 8014c1a:	f000 8082 	beq.w	8014d22 <nk_memcopy+0x112>
{
 8014c1e:	b570      	push	{r4, r5, r6, lr}
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize-1)
    #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
    #define NK_TLOOP1(s) do { s; } while (--t)

    if (dst < src) {
 8014c20:	d23f      	bcs.n	8014ca2 <nk_memcopy+0x92>
        t = (nk_ptr)src; /* only need low bits */
        if ((t | (nk_ptr)dst) & nk_wmask) {
 8014c22:	ea40 0401 	orr.w	r4, r0, r1
 8014c26:	f014 0f03 	tst.w	r4, #3
 8014c2a:	d038      	beq.n	8014c9e <nk_memcopy+0x8e>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)
 8014c2c:	ea80 0401 	eor.w	r4, r0, r1
 8014c30:	f014 0f03 	tst.w	r4, #3
 8014c34:	d106      	bne.n	8014c44 <nk_memcopy+0x34>
 8014c36:	2b03      	cmp	r3, #3
 8014c38:	d92f      	bls.n	8014c9a <nk_memcopy+0x8a>
                t = length;
            else
                t = nk_wsize - (t & nk_wmask);
 8014c3a:	f001 0203 	and.w	r2, r1, #3
 8014c3e:	f1c2 0204 	rsb	r2, r2, #4
 8014c42:	e000      	b.n	8014c46 <nk_memcopy+0x36>
                t = length;
 8014c44:	461a      	mov	r2, r3
            length -= t;
 8014c46:	1a9b      	subs	r3, r3, r2
 8014c48:	1e44      	subs	r4, r0, #1
 8014c4a:	eb01 0c02 	add.w	ip, r1, r2
            NK_TLOOP1(*dst++ = *src++);
 8014c4e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8014c52:	f804 5f01 	strb.w	r5, [r4, #1]!
 8014c56:	4561      	cmp	r1, ip
 8014c58:	d1f9      	bne.n	8014c4e <nk_memcopy+0x3e>
 8014c5a:	4402      	add	r2, r0
 8014c5c:	4661      	mov	r1, ip
        }
        t = length / nk_wsize;
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 8014c5e:	2b03      	cmp	r3, #3
 8014c60:	d90f      	bls.n	8014c82 <nk_memcopy+0x72>
        t = length / nk_wsize;
 8014c62:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8014c66:	f1a1 0e04 	sub.w	lr, r1, #4
 8014c6a:	4614      	mov	r4, r2
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 8014c6c:	f85e 5f04 	ldr.w	r5, [lr, #4]!
 8014c70:	f844 5b04 	str.w	r5, [r4], #4
 8014c74:	f1bc 0c01 	subs.w	ip, ip, #1
 8014c78:	d1f8      	bne.n	8014c6c <nk_memcopy+0x5c>
 8014c7a:	f023 0403 	bic.w	r4, r3, #3
 8014c7e:	4421      	add	r1, r4
 8014c80:	4422      	add	r2, r4
            src += nk_wsize; dst += nk_wsize);
        t = length & nk_wmask;
        NK_TLOOP(*dst++ = *src++);
 8014c82:	f013 0303 	ands.w	r3, r3, #3
 8014c86:	d007      	beq.n	8014c98 <nk_memcopy+0x88>
 8014c88:	3a01      	subs	r2, #1
 8014c8a:	440b      	add	r3, r1
 8014c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014c94:	4299      	cmp	r1, r3
 8014c96:	d1f9      	bne.n	8014c8c <nk_memcopy+0x7c>
    #undef nk_wmask
    #undef NK_TLOOP
    #undef NK_TLOOP1
done:
    return (dst0);
}
 8014c98:	bd70      	pop	{r4, r5, r6, pc}
                t = length;
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	e7d3      	b.n	8014c46 <nk_memcopy+0x36>
    char *dst = (char*)dst0;
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	e7dd      	b.n	8014c5e <nk_memcopy+0x4e>
        src += length;
 8014ca2:	4411      	add	r1, r2
        dst += length;
 8014ca4:	eb00 0c02 	add.w	ip, r0, r2
        if ((t | (nk_ptr)dst) & nk_wmask) {
 8014ca8:	4662      	mov	r2, ip
 8014caa:	ea4c 0401 	orr.w	r4, ip, r1
 8014cae:	f014 0f03 	tst.w	r4, #3
 8014cb2:	d015      	beq.n	8014ce0 <nk_memcopy+0xd0>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)
 8014cb4:	ea81 040c 	eor.w	r4, r1, ip
 8014cb8:	f014 0f03 	tst.w	r4, #3
 8014cbc:	d104      	bne.n	8014cc8 <nk_memcopy+0xb8>
 8014cbe:	2b04      	cmp	r3, #4
 8014cc0:	d92d      	bls.n	8014d1e <nk_memcopy+0x10e>
                t &= nk_wmask;
 8014cc2:	f001 0503 	and.w	r5, r1, #3
 8014cc6:	e000      	b.n	8014cca <nk_memcopy+0xba>
                t = length;
 8014cc8:	461d      	mov	r5, r3
            length -= t;
 8014cca:	1b5b      	subs	r3, r3, r5
 8014ccc:	426e      	negs	r6, r5
 8014cce:	1b4d      	subs	r5, r1, r5
            NK_TLOOP1(*--dst = *--src);
 8014cd0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8014cd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014cd8:	42a9      	cmp	r1, r5
 8014cda:	d1f9      	bne.n	8014cd0 <nk_memcopy+0xc0>
 8014cdc:	44b4      	add	ip, r6
 8014cde:	4629      	mov	r1, r5
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 8014ce0:	2b03      	cmp	r3, #3
 8014ce2:	d90f      	bls.n	8014d04 <nk_memcopy+0xf4>
        t = length / nk_wsize;
 8014ce4:	089e      	lsrs	r6, r3, #2
 8014ce6:	4664      	mov	r4, ip
 8014ce8:	468e      	mov	lr, r1
 8014cea:	4632      	mov	r2, r6
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 8014cec:	f85e 5d04 	ldr.w	r5, [lr, #-4]!
 8014cf0:	f844 5d04 	str.w	r5, [r4, #-4]!
 8014cf4:	3a01      	subs	r2, #1
 8014cf6:	d1f9      	bne.n	8014cec <nk_memcopy+0xdc>
 8014cf8:	ebc6 7686 	rsb	r6, r6, r6, lsl #30
 8014cfc:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8014d00:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
        NK_TLOOP(*--dst = *--src);
 8014d04:	f013 0303 	ands.w	r3, r3, #3
 8014d08:	d0c6      	beq.n	8014c98 <nk_memcopy+0x88>
 8014d0a:	4662      	mov	r2, ip
 8014d0c:	ebac 0c03 	sub.w	ip, ip, r3
 8014d10:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 8014d14:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8014d18:	4562      	cmp	r2, ip
 8014d1a:	d1f9      	bne.n	8014d10 <nk_memcopy+0x100>
done:
 8014d1c:	e7bc      	b.n	8014c98 <nk_memcopy+0x88>
                t = length;
 8014d1e:	461d      	mov	r5, r3
 8014d20:	e7d3      	b.n	8014cca <nk_memcopy+0xba>
}
 8014d22:	4770      	bx	lr

08014d24 <nk_memset>:
//#endif
//#ifndef NK_MEMSET
//#define NK_MEMSET nk_memset
NK_LIB void
nk_memset(void *ptr, int c0, nk_size size)
{
 8014d24:	b410      	push	{r4}
    #define nk_wmask (nk_wsize - 1)
    nk_byte *dst = (nk_byte*)ptr;
    unsigned c = 0;
    nk_size t = 0;

    if ((c = (nk_byte)c0) != 0) {
 8014d26:	b2c9      	uxtb	r1, r1
 8014d28:	460c      	mov	r4, r1
 8014d2a:	b119      	cbz	r1, 8014d34 <nk_memset+0x10>
        c = (c << 8) | c; /* at least 16-bits  */
 8014d2c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
        if (sizeof(unsigned int) > 2)
            c = (c << 16) | c; /* at least 32-bits*/
 8014d30:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
    }

    /* too small of a word count */
    dst = (nk_byte*)ptr;
    if (size < 3 * nk_wsize) {
 8014d34:	2a0b      	cmp	r2, #11
 8014d36:	d91f      	bls.n	8014d78 <nk_memset+0x54>
        while (size--) *dst++ = (nk_byte)c0;
        return;
    }

    /* align destination */
    if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {
 8014d38:	f010 0303 	ands.w	r3, r0, #3
 8014d3c:	d009      	beq.n	8014d52 <nk_memset+0x2e>
        t = nk_wsize -t;
        size -= t;
 8014d3e:	3a04      	subs	r2, #4
 8014d40:	441a      	add	r2, r3
        t = nk_wsize -t;
 8014d42:	f1c3 0304 	rsb	r3, r3, #4
 8014d46:	4403      	add	r3, r0
        do {
            *dst++ = (nk_byte)c0;
 8014d48:	f800 1b01 	strb.w	r1, [r0], #1
        } while (--t != 0);
 8014d4c:	4298      	cmp	r0, r3
 8014d4e:	d1fb      	bne.n	8014d48 <nk_memset+0x24>
            *dst++ = (nk_byte)c0;
 8014d50:	4618      	mov	r0, r3
    }

    /* fill word */
    t = size / nk_wsize;
 8014d52:	f022 0c03 	bic.w	ip, r2, #3
 8014d56:	4484      	add	ip, r0
            *dst++ = (nk_byte)c0;
 8014d58:	4603      	mov	r3, r0
    do {
        *(nk_word*)((void*)dst) = c;
 8014d5a:	f843 4b04 	str.w	r4, [r3], #4
        dst += nk_wsize;
    } while (--t != 0);
 8014d5e:	4563      	cmp	r3, ip
 8014d60:	d1fb      	bne.n	8014d5a <nk_memset+0x36>

    /* fill trailing bytes */
    t = (size & nk_wmask);
    if (t != 0) {
 8014d62:	f012 0f03 	tst.w	r2, #3
 8014d66:	d004      	beq.n	8014d72 <nk_memset+0x4e>
 8014d68:	4410      	add	r0, r2
        do {
            *dst++ = (nk_byte)c0;
 8014d6a:	f80c 1b01 	strb.w	r1, [ip], #1
        } while (--t != 0);
 8014d6e:	4584      	cmp	ip, r0
 8014d70:	d1fb      	bne.n	8014d6a <nk_memset+0x46>
    }

    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
}
 8014d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d76:	4770      	bx	lr
        while (size--) *dst++ = (nk_byte)c0;
 8014d78:	2a00      	cmp	r2, #0
 8014d7a:	d0fa      	beq.n	8014d72 <nk_memset+0x4e>
 8014d7c:	4402      	add	r2, r0
 8014d7e:	f800 1b01 	strb.w	r1, [r0], #1
 8014d82:	4282      	cmp	r2, r0
 8014d84:	d1fb      	bne.n	8014d7e <nk_memset+0x5a>
 8014d86:	e7f4      	b.n	8014d72 <nk_memset+0x4e>

08014d88 <nk_zero>:
//#endif
NK_LIB void
nk_zero(void *ptr, nk_size size)
{
 8014d88:	b508      	push	{r3, lr}
    NK_ASSERT(ptr);
 8014d8a:	b120      	cbz	r0, 8014d96 <nk_zero+0xe>
 8014d8c:	460a      	mov	r2, r1
    NK_MEMSET(ptr, 0, size);
 8014d8e:	2100      	movs	r1, #0
 8014d90:	f7ff ffc8 	bl	8014d24 <nk_memset>
}
 8014d94:	bd08      	pop	{r3, pc}
    NK_ASSERT(ptr);
 8014d96:	4b03      	ldr	r3, [pc, #12]	; (8014da4 <nk_zero+0x1c>)
 8014d98:	4a03      	ldr	r2, [pc, #12]	; (8014da8 <nk_zero+0x20>)
 8014d9a:	2184      	movs	r1, #132	; 0x84
 8014d9c:	4803      	ldr	r0, [pc, #12]	; (8014dac <nk_zero+0x24>)
 8014d9e:	f001 fbd5 	bl	801654c <__assert_func>
 8014da2:	bf00      	nop
 8014da4:	0801bb48 	.word	0x0801bb48
 8014da8:	0801bba8 	.word	0x0801bba8
 8014dac:	0801bb4c 	.word	0x0801bb4c

08014db0 <nk_strlen>:
NK_API int
nk_strlen(const char *str)
{
 8014db0:	b508      	push	{r3, lr}
    int siz = 0;
    NK_ASSERT(str);
 8014db2:	b110      	cbz	r0, 8014dba <nk_strlen+0xa>
 8014db4:	4603      	mov	r3, r0
    int siz = 0;
 8014db6:	2000      	movs	r0, #0
 8014db8:	e006      	b.n	8014dc8 <nk_strlen+0x18>
    NK_ASSERT(str);
 8014dba:	4b06      	ldr	r3, [pc, #24]	; (8014dd4 <nk_strlen+0x24>)
 8014dbc:	4a06      	ldr	r2, [pc, #24]	; (8014dd8 <nk_strlen+0x28>)
 8014dbe:	218b      	movs	r1, #139	; 0x8b
 8014dc0:	4806      	ldr	r0, [pc, #24]	; (8014ddc <nk_strlen+0x2c>)
 8014dc2:	f001 fbc3 	bl	801654c <__assert_func>
    while (str && *str++ != '\0') siz++;
 8014dc6:	3001      	adds	r0, #1
 8014dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dcc:	2a00      	cmp	r2, #0
 8014dce:	d1fa      	bne.n	8014dc6 <nk_strlen+0x16>
    return siz;
}
 8014dd0:	bd08      	pop	{r3, pc}
 8014dd2:	bf00      	nop
 8014dd4:	0801b6e4 	.word	0x0801b6e4
 8014dd8:	0801bb9c 	.word	0x0801bb9c
 8014ddc:	0801bb4c 	.word	0x0801bb4c

08014de0 <nk_strtoi>:
NK_API int
nk_strtoi(const char *str, const char **endptr)
{
 8014de0:	b508      	push	{r3, lr}
    int neg = 1;
    const char *p = str;
    int value = 0;

    NK_ASSERT(str);
 8014de2:	b340      	cbz	r0, 8014e36 <nk_strtoi+0x56>
 8014de4:	4602      	mov	r2, r0
    if (!str) return 0;

    /* skip whitespace */
    while (*p == ' ') p++;
 8014de6:	7803      	ldrb	r3, [r0, #0]
 8014de8:	2b20      	cmp	r3, #32
 8014dea:	d103      	bne.n	8014df4 <nk_strtoi+0x14>
 8014dec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014df0:	2b20      	cmp	r3, #32
 8014df2:	d0fb      	beq.n	8014dec <nk_strtoi+0xc>
    if (*p == '-') {
 8014df4:	2b2d      	cmp	r3, #45	; 0x2d
 8014df6:	d024      	beq.n	8014e42 <nk_strtoi+0x62>
    int neg = 1;
 8014df8:	f04f 0e01 	mov.w	lr, #1
        neg = -1;
        p++;
    }
    while (*p && *p >= '0' && *p <= '9') {
 8014dfc:	7813      	ldrb	r3, [r2, #0]
 8014dfe:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8014e02:	fa5f fc8c 	uxtb.w	ip, ip
 8014e06:	f1bc 0f09 	cmp.w	ip, #9
 8014e0a:	bf98      	it	ls
 8014e0c:	2000      	movls	r0, #0
 8014e0e:	d81c      	bhi.n	8014e4a <nk_strtoi+0x6a>
        value = value * 10 + (int) (*p - '0');
 8014e10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014e14:	3b30      	subs	r3, #48	; 0x30
 8014e16:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    while (*p && *p >= '0' && *p <= '9') {
 8014e1a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014e1e:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8014e22:	fa5f fc8c 	uxtb.w	ip, ip
 8014e26:	f1bc 0f09 	cmp.w	ip, #9
 8014e2a:	d9f1      	bls.n	8014e10 <nk_strtoi+0x30>
        p++;
    }
    if (endptr)
 8014e2c:	b101      	cbz	r1, 8014e30 <nk_strtoi+0x50>
        *endptr = p;
 8014e2e:	600a      	str	r2, [r1, #0]
    return neg*value;
}
 8014e30:	fb00 f00e 	mul.w	r0, r0, lr
 8014e34:	bd08      	pop	{r3, pc}
    NK_ASSERT(str);
 8014e36:	4b06      	ldr	r3, [pc, #24]	; (8014e50 <nk_strtoi+0x70>)
 8014e38:	4a06      	ldr	r2, [pc, #24]	; (8014e54 <nk_strtoi+0x74>)
 8014e3a:	2196      	movs	r1, #150	; 0x96
 8014e3c:	4806      	ldr	r0, [pc, #24]	; (8014e58 <nk_strtoi+0x78>)
 8014e3e:	f001 fb85 	bl	801654c <__assert_func>
        p++;
 8014e42:	3201      	adds	r2, #1
        neg = -1;
 8014e44:	f04f 3eff 	mov.w	lr, #4294967295
 8014e48:	e7d8      	b.n	8014dfc <nk_strtoi+0x1c>
    while (*p && *p >= '0' && *p <= '9') {
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	e7ee      	b.n	8014e2c <nk_strtoi+0x4c>
 8014e4e:	bf00      	nop
 8014e50:	0801b6e4 	.word	0x0801b6e4
 8014e54:	0801bb90 	.word	0x0801bb90
 8014e58:	0801bb4c 	.word	0x0801bb4c
 8014e5c:	00000000 	.word	0x00000000

08014e60 <nk_strtod>:
NK_API double
nk_strtod(const char *str, const char **endptr)
{
 8014e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e64:	ed2d 8b02 	vpush	{d8}
 8014e68:	b083      	sub	sp, #12
    double neg = 1.0;
    const char *p = str;
    double value = 0;
    double number = 0;

    NK_ASSERT(str);
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	d04a      	beq.n	8014f04 <nk_strtod+0xa4>
 8014e6e:	468b      	mov	fp, r1
 8014e70:	4604      	mov	r4, r0
    if (!str) return 0;

    /* skip whitespace */
    while (*p == ' ') p++;
 8014e72:	7803      	ldrb	r3, [r0, #0]
 8014e74:	2b20      	cmp	r3, #32
 8014e76:	d103      	bne.n	8014e80 <nk_strtod+0x20>
 8014e78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014e7c:	2b20      	cmp	r3, #32
 8014e7e:	d0fb      	beq.n	8014e78 <nk_strtod+0x18>
    if (*p == '-') {
 8014e80:	2b2d      	cmp	r3, #45	; 0x2d
 8014e82:	d045      	beq.n	8014f10 <nk_strtod+0xb0>
    double neg = 1.0;
 8014e84:	ed9f 7b60 	vldr	d7, [pc, #384]	; 8015008 <nk_strtod+0x1a8>
 8014e88:	eeb0 8a47 	vmov.f32	s16, s14
 8014e8c:	eef0 8a67 	vmov.f32	s17, s15
        neg = -1.0;
        p++;
    }

    while (*p && *p != '.' && *p != 'e') {
 8014e90:	7825      	ldrb	r5, [r4, #0]
 8014e92:	2d00      	cmp	r5, #0
 8014e94:	f000 8089 	beq.w	8014faa <nk_strtod+0x14a>
 8014e98:	f04f 0800 	mov.w	r8, #0
 8014e9c:	f04f 0900 	mov.w	r9, #0
        value = value * 10.0 + (double) (*p - '0');
 8014ea0:	2600      	movs	r6, #0
 8014ea2:	4f5f      	ldr	r7, [pc, #380]	; (8015020 <nk_strtod+0x1c0>)
    while (*p && *p != '.' && *p != 'e') {
 8014ea4:	2d2e      	cmp	r5, #46	; 0x2e
 8014ea6:	f000 8085 	beq.w	8014fb4 <nk_strtod+0x154>
 8014eaa:	2d65      	cmp	r5, #101	; 0x65
 8014eac:	d015      	beq.n	8014eda <nk_strtod+0x7a>
        value = value * 10.0 + (double) (*p - '0');
 8014eae:	4632      	mov	r2, r6
 8014eb0:	463b      	mov	r3, r7
 8014eb2:	4640      	mov	r0, r8
 8014eb4:	4649      	mov	r1, r9
 8014eb6:	f7eb fbc7 	bl	8000648 <__aeabi_dmul>
 8014eba:	4680      	mov	r8, r0
 8014ebc:	4689      	mov	r9, r1
 8014ebe:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8014ec2:	f7eb fb57 	bl	8000574 <__aeabi_i2d>
 8014ec6:	4642      	mov	r2, r8
 8014ec8:	464b      	mov	r3, r9
 8014eca:	f7eb fa07 	bl	80002dc <__adddf3>
 8014ece:	4680      	mov	r8, r0
 8014ed0:	4689      	mov	r9, r1
    while (*p && *p != '.' && *p != 'e') {
 8014ed2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8014ed6:	2d00      	cmp	r5, #0
 8014ed8:	d1e4      	bne.n	8014ea4 <nk_strtod+0x44>
        for(m = 0.1; *p && *p != 'e'; p++ ) {
            value = value + (double) (*p - '0') * m;
            m *= 0.1;
        }
    }
    if (*p == 'e') {
 8014eda:	7823      	ldrb	r3, [r4, #0]
 8014edc:	2b65      	cmp	r3, #101	; 0x65
 8014ede:	d021      	beq.n	8014f24 <nk_strtod+0xc4>

        if (div)
            value /= m;
        else value *= m;
    }
    number = value * neg;
 8014ee0:	ec53 2b18 	vmov	r2, r3, d8
 8014ee4:	4640      	mov	r0, r8
 8014ee6:	4649      	mov	r1, r9
 8014ee8:	f7eb fbae 	bl	8000648 <__aeabi_dmul>
 8014eec:	ec41 0b10 	vmov	d0, r0, r1
    if (endptr)
 8014ef0:	f1bb 0f00 	cmp.w	fp, #0
 8014ef4:	d001      	beq.n	8014efa <nk_strtod+0x9a>
        *endptr = p;
 8014ef6:	f8cb 4000 	str.w	r4, [fp]
    return number;
}
 8014efa:	b003      	add	sp, #12
 8014efc:	ecbd 8b02 	vpop	{d8}
 8014f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NK_ASSERT(str);
 8014f04:	4b47      	ldr	r3, [pc, #284]	; (8015024 <nk_strtod+0x1c4>)
 8014f06:	4a48      	ldr	r2, [pc, #288]	; (8015028 <nk_strtod+0x1c8>)
 8014f08:	21b0      	movs	r1, #176	; 0xb0
 8014f0a:	4848      	ldr	r0, [pc, #288]	; (801502c <nk_strtod+0x1cc>)
 8014f0c:	f001 fb1e 	bl	801654c <__assert_func>
        p++;
 8014f10:	3401      	adds	r4, #1
        neg = -1.0;
 8014f12:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 8015010 <nk_strtod+0x1b0>
 8014f16:	eeb0 8a47 	vmov.f32	s16, s14
 8014f1a:	eef0 8a67 	vmov.f32	s17, s15
 8014f1e:	e7b7      	b.n	8014e90 <nk_strtod+0x30>
 8014f20:	4654      	mov	r4, sl
 8014f22:	e7da      	b.n	8014eda <nk_strtod+0x7a>
        if (*p == '-') {
 8014f24:	7863      	ldrb	r3, [r4, #1]
 8014f26:	2b2d      	cmp	r3, #45	; 0x2d
 8014f28:	d02c      	beq.n	8014f84 <nk_strtod+0x124>
        } else if (*p == '+') {
 8014f2a:	2b2b      	cmp	r3, #43	; 0x2b
        p++;
 8014f2c:	bf14      	ite	ne
 8014f2e:	3401      	addne	r4, #1
            p++;
 8014f30:	3402      	addeq	r4, #2
            div = nk_false;
 8014f32:	2300      	movs	r3, #0
 8014f34:	9301      	str	r3, [sp, #4]
        for (pow = 0; *p; p++)
 8014f36:	7823      	ldrb	r3, [r4, #0]
 8014f38:	b343      	cbz	r3, 8014f8c <nk_strtod+0x12c>
 8014f3a:	2500      	movs	r5, #0
            pow = pow * 10 + (int) (*p - '0');
 8014f3c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014f40:	3b30      	subs	r3, #48	; 0x30
 8014f42:	eb03 0545 	add.w	r5, r3, r5, lsl #1
        for (pow = 0; *p; p++)
 8014f46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d1f6      	bne.n	8014f3c <nk_strtod+0xdc>
        for (m = 1.0, i = 0; i < pow; i++)
 8014f4e:	2d00      	cmp	r5, #0
 8014f50:	dd1f      	ble.n	8014f92 <nk_strtod+0x132>
 8014f52:	f04f 0a00 	mov.w	sl, #0
 8014f56:	2000      	movs	r0, #0
 8014f58:	4935      	ldr	r1, [pc, #212]	; (8015030 <nk_strtod+0x1d0>)
            m *= 10.0;
 8014f5a:	2600      	movs	r6, #0
 8014f5c:	4f30      	ldr	r7, [pc, #192]	; (8015020 <nk_strtod+0x1c0>)
 8014f5e:	4632      	mov	r2, r6
 8014f60:	463b      	mov	r3, r7
 8014f62:	f7eb fb71 	bl	8000648 <__aeabi_dmul>
        for (m = 1.0, i = 0; i < pow; i++)
 8014f66:	f10a 0a01 	add.w	sl, sl, #1
 8014f6a:	45aa      	cmp	sl, r5
 8014f6c:	d1f7      	bne.n	8014f5e <nk_strtod+0xfe>
        if (div)
 8014f6e:	9b01      	ldr	r3, [sp, #4]
 8014f70:	b193      	cbz	r3, 8014f98 <nk_strtod+0x138>
            value /= m;
 8014f72:	4602      	mov	r2, r0
 8014f74:	460b      	mov	r3, r1
 8014f76:	4640      	mov	r0, r8
 8014f78:	4649      	mov	r1, r9
 8014f7a:	f7eb fc8f 	bl	800089c <__aeabi_ddiv>
 8014f7e:	4680      	mov	r8, r0
 8014f80:	4689      	mov	r9, r1
 8014f82:	e7ad      	b.n	8014ee0 <nk_strtod+0x80>
            p++;
 8014f84:	3402      	adds	r4, #2
            div = nk_true;
 8014f86:	2301      	movs	r3, #1
 8014f88:	9301      	str	r3, [sp, #4]
 8014f8a:	e7d4      	b.n	8014f36 <nk_strtod+0xd6>
        for (m = 1.0, i = 0; i < pow; i++)
 8014f8c:	2000      	movs	r0, #0
 8014f8e:	4928      	ldr	r1, [pc, #160]	; (8015030 <nk_strtod+0x1d0>)
 8014f90:	e7ed      	b.n	8014f6e <nk_strtod+0x10e>
 8014f92:	2000      	movs	r0, #0
 8014f94:	4926      	ldr	r1, [pc, #152]	; (8015030 <nk_strtod+0x1d0>)
 8014f96:	e7ea      	b.n	8014f6e <nk_strtod+0x10e>
        else value *= m;
 8014f98:	4602      	mov	r2, r0
 8014f9a:	460b      	mov	r3, r1
 8014f9c:	4640      	mov	r0, r8
 8014f9e:	4649      	mov	r1, r9
 8014fa0:	f7eb fb52 	bl	8000648 <__aeabi_dmul>
 8014fa4:	4680      	mov	r8, r0
 8014fa6:	4689      	mov	r9, r1
 8014fa8:	e79a      	b.n	8014ee0 <nk_strtod+0x80>
    while (*p && *p != '.' && *p != 'e') {
 8014faa:	f04f 0800 	mov.w	r8, #0
 8014fae:	f04f 0900 	mov.w	r9, #0
 8014fb2:	e795      	b.n	8014ee0 <nk_strtod+0x80>
        p++;
 8014fb4:	f104 0a01 	add.w	sl, r4, #1
        for(m = 0.1; *p && *p != 'e'; p++ ) {
 8014fb8:	7860      	ldrb	r0, [r4, #1]
 8014fba:	b308      	cbz	r0, 8015000 <nk_strtod+0x1a0>
 8014fbc:	a516      	add	r5, pc, #88	; (adr r5, 8015018 <nk_strtod+0x1b8>)
 8014fbe:	e9d5 4500 	ldrd	r4, r5, [r5]
            m *= 0.1;
 8014fc2:	4626      	mov	r6, r4
 8014fc4:	462f      	mov	r7, r5
        for(m = 0.1; *p && *p != 'e'; p++ ) {
 8014fc6:	2865      	cmp	r0, #101	; 0x65
 8014fc8:	d0aa      	beq.n	8014f20 <nk_strtod+0xc0>
            value = value + (double) (*p - '0') * m;
 8014fca:	3830      	subs	r0, #48	; 0x30
 8014fcc:	f7eb fad2 	bl	8000574 <__aeabi_i2d>
 8014fd0:	4622      	mov	r2, r4
 8014fd2:	462b      	mov	r3, r5
 8014fd4:	f7eb fb38 	bl	8000648 <__aeabi_dmul>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	460b      	mov	r3, r1
 8014fdc:	4640      	mov	r0, r8
 8014fde:	4649      	mov	r1, r9
 8014fe0:	f7eb f97c 	bl	80002dc <__adddf3>
 8014fe4:	4680      	mov	r8, r0
 8014fe6:	4689      	mov	r9, r1
            m *= 0.1;
 8014fe8:	4632      	mov	r2, r6
 8014fea:	463b      	mov	r3, r7
 8014fec:	4620      	mov	r0, r4
 8014fee:	4629      	mov	r1, r5
 8014ff0:	f7eb fb2a 	bl	8000648 <__aeabi_dmul>
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	460d      	mov	r5, r1
        for(m = 0.1; *p && *p != 'e'; p++ ) {
 8014ff8:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d1e2      	bne.n	8014fc6 <nk_strtod+0x166>
        for (m = 1.0, i = 0; i < pow; i++)
 8015000:	4654      	mov	r4, sl
 8015002:	e76d      	b.n	8014ee0 <nk_strtod+0x80>
 8015004:	f3af 8000 	nop.w
 8015008:	00000000 	.word	0x00000000
 801500c:	3ff00000 	.word	0x3ff00000
 8015010:	00000000 	.word	0x00000000
 8015014:	bff00000 	.word	0xbff00000
 8015018:	9999999a 	.word	0x9999999a
 801501c:	3fb99999 	.word	0x3fb99999
 8015020:	40240000 	.word	0x40240000
 8015024:	0801b6e4 	.word	0x0801b6e4
 8015028:	0801bb84 	.word	0x0801bb84
 801502c:	0801bb4c 	.word	0x0801bb4c
 8015030:	3ff00000 	.word	0x3ff00000

08015034 <nk_strtof>:
NK_API float
nk_strtof(const char *str, const char **endptr)
{
 8015034:	b508      	push	{r3, lr}
    float float_value;
    double double_value;
    double_value = NK_STRTOD(str, endptr);
 8015036:	f7ff ff13 	bl	8014e60 <nk_strtod>
 801503a:	ec51 0b10 	vmov	r0, r1, d0
    float_value = (float)double_value;
 801503e:	f7eb fdfb 	bl	8000c38 <__aeabi_d2f>
    return float_value;
}
 8015042:	ee00 0a10 	vmov	s0, r0
 8015046:	bd08      	pop	{r3, pc}

08015048 <nk_stricmpn>:
    } while (c1);
    return 0;
}
NK_API int
nk_stricmpn(const char *s1, const char *s2, int n)
{
 8015048:	b538      	push	{r3, r4, r5, lr}
    int c1,c2,d;
    NK_ASSERT(n >= 0);
 801504a:	1e14      	subs	r4, r2, #0
 801504c:	db03      	blt.n	8015056 <nk_stricmpn+0xe>
 801504e:	4684      	mov	ip, r0
 8015050:	3401      	adds	r4, #1
 8015052:	4404      	add	r4, r0
 8015054:	e00d      	b.n	8015072 <nk_stricmpn+0x2a>
 8015056:	4b14      	ldr	r3, [pc, #80]	; (80150a8 <nk_stricmpn+0x60>)
 8015058:	4a14      	ldr	r2, [pc, #80]	; (80150ac <nk_stricmpn+0x64>)
 801505a:	f240 1103 	movw	r1, #259	; 0x103
 801505e:	4814      	ldr	r0, [pc, #80]	; (80150b0 <nk_stricmpn+0x68>)
 8015060:	f001 fa74 	bl	801654c <__assert_func>
        while (d) {
            if (c1 <= 'Z' && c1 >= 'A') {
                d += ('a' - 'A');
                if (!d) break;
            }
            if (c2 <= 'Z' && c2 >= 'A') {
 8015064:	3a41      	subs	r2, #65	; 0x41
 8015066:	2a19      	cmp	r2, #25
 8015068:	d815      	bhi.n	8015096 <nk_stricmpn+0x4e>
                d -= ('a' - 'A');
                if (!d) break;
 801506a:	f1be 0e20 	subs.w	lr, lr, #32
 801506e:	d112      	bne.n	8015096 <nk_stricmpn+0x4e>
            }
            return ((d >= 0) << 1) - 1;
        }
    } while (c1);
 8015070:	b1cb      	cbz	r3, 80150a6 <nk_stricmpn+0x5e>
        c1 = *s1++;
 8015072:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8015076:	4618      	mov	r0, r3
        c2 = *s2++;
 8015078:	f811 2b01 	ldrb.w	r2, [r1], #1
        if (!n--) return 0;
 801507c:	45a4      	cmp	ip, r4
 801507e:	d011      	beq.n	80150a4 <nk_stricmpn+0x5c>
        while (d) {
 8015080:	ebb3 0e02 	subs.w	lr, r3, r2
 8015084:	d0f4      	beq.n	8015070 <nk_stricmpn+0x28>
            if (c1 <= 'Z' && c1 >= 'A') {
 8015086:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 801508a:	2d19      	cmp	r5, #25
 801508c:	d8ea      	bhi.n	8015064 <nk_stricmpn+0x1c>
                if (!d) break;
 801508e:	f11e 0e20 	adds.w	lr, lr, #32
 8015092:	d0ed      	beq.n	8015070 <nk_stricmpn+0x28>
 8015094:	e7e6      	b.n	8015064 <nk_stricmpn+0x1c>
            return ((d >= 0) << 1) - 1;
 8015096:	f1be 0f00 	cmp.w	lr, #0
 801509a:	bfac      	ite	ge
 801509c:	2001      	movge	r0, #1
 801509e:	f04f 30ff 	movlt.w	r0, #4294967295
 80150a2:	e000      	b.n	80150a6 <nk_stricmpn+0x5e>
        if (!n--) return 0;
 80150a4:	2000      	movs	r0, #0
    return 0;
}
 80150a6:	bd38      	pop	{r3, r4, r5, pc}
 80150a8:	0801bb68 	.word	0x0801bb68
 80150ac:	0801bb78 	.word	0x0801bb78
 80150b0:	0801bb4c 	.word	0x0801bb4c

080150b4 <nk_string_float_limit>:
NK_LIB int
nk_string_float_limit(char *string, int prec)
{
    int dot = 0;
    char *c = string;
    while (*c) {
 80150b4:	7802      	ldrb	r2, [r0, #0]
 80150b6:	b302      	cbz	r2, 80150fa <nk_string_float_limit+0x46>
{
 80150b8:	b500      	push	{lr}
 80150ba:	1c43      	adds	r3, r0, #1
    int dot = 0;
 80150bc:	f04f 0e00 	mov.w	lr, #0
        if (*c == '.') {
            dot = 1;
            c++;
            continue;
        }
        if (dot == (prec+1)) {
 80150c0:	3101      	adds	r1, #1
 80150c2:	e006      	b.n	80150d2 <nk_string_float_limit+0x1e>
            c++;
 80150c4:	469c      	mov	ip, r3
            dot = 1;
 80150c6:	f04f 0e01 	mov.w	lr, #1
    while (*c) {
 80150ca:	f89c 2000 	ldrb.w	r2, [ip]
 80150ce:	3301      	adds	r3, #1
 80150d0:	b17a      	cbz	r2, 80150f2 <nk_string_float_limit+0x3e>
 80150d2:	f103 3cff 	add.w	ip, r3, #4294967295
        if (*c == '.') {
 80150d6:	2a2e      	cmp	r2, #46	; 0x2e
 80150d8:	d0f4      	beq.n	80150c4 <nk_string_float_limit+0x10>
        if (dot == (prec+1)) {
 80150da:	4571      	cmp	r1, lr
 80150dc:	d006      	beq.n	80150ec <nk_string_float_limit+0x38>
            *c = 0;
            break;
        }
        if (dot > 0) dot++;
 80150de:	f1be 0f00 	cmp.w	lr, #0
 80150e2:	bfc8      	it	gt
 80150e4:	f10e 0e01 	addgt.w	lr, lr, #1
        c++;
 80150e8:	469c      	mov	ip, r3
 80150ea:	e7ee      	b.n	80150ca <nk_string_float_limit+0x16>
            *c = 0;
 80150ec:	2300      	movs	r3, #0
 80150ee:	f88c 3000 	strb.w	r3, [ip]
    }
    return (int)(c - string);
}
 80150f2:	ebac 0000 	sub.w	r0, ip, r0
 80150f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80150fa:	1a00      	subs	r0, r0, r0
 80150fc:	4770      	bx	lr
	...

08015100 <nk_itoa>:
        s[len -1 - i] = t;
    }
}
NK_LIB char*
nk_itoa(char *s, long n)
{
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4604      	mov	r4, r0
    long i = 0;
    if (n == 0) {
 8015104:	b3d1      	cbz	r1, 801517c <nk_itoa+0x7c>
 8015106:	468c      	mov	ip, r1
        s[i++] = '0';
        s[i] = 0;
        return s;
    }
    if (n < 0) {
 8015108:	2900      	cmp	r1, #0
 801510a:	db3c      	blt.n	8015186 <nk_itoa+0x86>
    long i = 0;
 801510c:	2100      	movs	r1, #0
 801510e:	3901      	subs	r1, #1
 8015110:	4421      	add	r1, r4
 8015112:	f1c4 0e02 	rsb	lr, r4, #2
        s[i++] = '-';
        n = -n;
    }
    while (n > 0) {
        s[i++] = (char)('0' + (n % 10));
 8015116:	4d1f      	ldr	r5, [pc, #124]	; (8015194 <nk_itoa+0x94>)
 8015118:	eb0e 0001 	add.w	r0, lr, r1
 801511c:	fb85 320c 	smull	r3, r2, r5, ip
 8015120:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8015124:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8015128:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801512c:	ebac 0242 	sub.w	r2, ip, r2, lsl #1
 8015130:	3230      	adds	r2, #48	; 0x30
 8015132:	f801 2f01 	strb.w	r2, [r1, #1]!
        n /= 10;
 8015136:	4662      	mov	r2, ip
 8015138:	469c      	mov	ip, r3
    while (n > 0) {
 801513a:	2a09      	cmp	r2, #9
 801513c:	dcec      	bgt.n	8015118 <nk_itoa+0x18>
    }
    s[i] = 0;
 801513e:	2300      	movs	r3, #0
 8015140:	5423      	strb	r3, [r4, r0]
    if (s[0] == '-')
 8015142:	7823      	ldrb	r3, [r4, #0]
 8015144:	2b2d      	cmp	r3, #45	; 0x2d
        ++s;
 8015146:	bf08      	it	eq
 8015148:	3401      	addeq	r4, #1
    int len = nk_strlen(s);
 801514a:	4620      	mov	r0, r4
 801514c:	f7ff fe30 	bl	8014db0 <nk_strlen>
    int end = len / 2;
 8015150:	eb00 7ed0 	add.w	lr, r0, r0, lsr #31
 8015154:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    for (; i < end; ++i) {
 8015158:	2801      	cmp	r0, #1
 801515a:	dd0d      	ble.n	8015178 <nk_itoa+0x78>
 801515c:	1e62      	subs	r2, r4, #1
 801515e:	1821      	adds	r1, r4, r0
        t = s[i];
 8015160:	4613      	mov	r3, r2
 8015162:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        s[i] = s[len - 1 - i];
 8015166:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 801516a:	f882 c000 	strb.w	ip, [r2]
        s[len -1 - i] = t;
 801516e:	7008      	strb	r0, [r1, #0]
    for (; i < end; ++i) {
 8015170:	3302      	adds	r3, #2
 8015172:	1b1b      	subs	r3, r3, r4
 8015174:	459e      	cmp	lr, r3
 8015176:	dcf3      	bgt.n	8015160 <nk_itoa+0x60>

    nk_strrev_ascii(s);
    return s;
}
 8015178:	4620      	mov	r0, r4
 801517a:	bd38      	pop	{r3, r4, r5, pc}
        s[i++] = '0';
 801517c:	2330      	movs	r3, #48	; 0x30
 801517e:	7003      	strb	r3, [r0, #0]
        s[i] = 0;
 8015180:	2300      	movs	r3, #0
 8015182:	7043      	strb	r3, [r0, #1]
        return s;
 8015184:	e7f8      	b.n	8015178 <nk_itoa+0x78>
        s[i++] = '-';
 8015186:	232d      	movs	r3, #45	; 0x2d
 8015188:	7003      	strb	r3, [r0, #0]
        n = -n;
 801518a:	f1c1 0c00 	rsb	ip, r1, #0
        s[i++] = '-';
 801518e:	2101      	movs	r1, #1
 8015190:	e7bd      	b.n	801510e <nk_itoa+0xe>
 8015192:	bf00      	nop
 8015194:	66666667 	.word	0x66666667

08015198 <nk_dtoa>:

NK_LIB char*
nk_dtoa(char *s, double n)
{
 8015198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801519c:	ed2d 8b02 	vpush	{d8}
 80151a0:	b083      	sub	sp, #12
    int useExp = 0;
    int digit = 0, m = 0, m1 = 0;
    char *c = s;
    int neg = 0;

    NK_ASSERT(s);
 80151a2:	9000      	str	r0, [sp, #0]
 80151a4:	b3c8      	cbz	r0, 801521a <nk_dtoa+0x82>
 80151a6:	ec55 4b10 	vmov	r4, r5, d0
    if (!s) return 0;

    if (n == 0.0) {
 80151aa:	2200      	movs	r2, #0
 80151ac:	2300      	movs	r3, #0
 80151ae:	ee10 0a10 	vmov	r0, s0
 80151b2:	4629      	mov	r1, r5
 80151b4:	f7eb fcb0 	bl	8000b18 <__aeabi_dcmpeq>
 80151b8:	bbb0      	cbnz	r0, 8015228 <nk_dtoa+0x90>
        s[0] = '0'; s[1] = '\0';
        return s;
    }

    neg = (n < 0);
    if (neg) n = -n;
 80151ba:	2200      	movs	r2, #0
 80151bc:	2300      	movs	r3, #0
 80151be:	4620      	mov	r0, r4
 80151c0:	4629      	mov	r1, r5
 80151c2:	f7eb fcb3 	bl	8000b2c <__aeabi_dcmplt>
 80151c6:	bba8      	cbnz	r0, 8015234 <nk_dtoa+0x9c>

    /* calculate magnitude */
    m = nk_log10(n);
 80151c8:	ec45 4b10 	vmov	d0, r4, r5
 80151cc:	f7f8 faea 	bl	800d7a4 <nk_log10>
 80151d0:	4682      	mov	sl, r0
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 80151d2:	280d      	cmp	r0, #13
 80151d4:	dd40      	ble.n	8015258 <nk_dtoa+0xc0>
    if (neg) *(c++) = '-';
 80151d6:	2200      	movs	r2, #0
 80151d8:	2300      	movs	r3, #0
 80151da:	4620      	mov	r0, r4
 80151dc:	4629      	mov	r1, r5
 80151de:	f7eb fca5 	bl	8000b2c <__aeabi_dcmplt>
 80151e2:	2800      	cmp	r0, #0
 80151e4:	d15b      	bne.n	801529e <nk_dtoa+0x106>
    char *c = s;
 80151e6:	9e00      	ldr	r6, [sp, #0]

    /* set up for scientific notation */
    if (useExp) {
        if (m < 0)
           m -= 1;
        n = n / (double)nk_pow(10.0, m);
 80151e8:	4650      	mov	r0, sl
 80151ea:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 80153e0 <nk_dtoa+0x248>
 80151ee:	f7f8 fa85 	bl	800d6fc <nk_pow>
 80151f2:	ec53 2b10 	vmov	r2, r3, d0
 80151f6:	4620      	mov	r0, r4
 80151f8:	4629      	mov	r1, r5
 80151fa:	f7eb fb4f 	bl	800089c <__aeabi_ddiv>
 80151fe:	4680      	mov	r8, r0
 8015200:	4689      	mov	r9, r1
        m1 = m;
 8015202:	4657      	mov	r7, sl
        n = n / (double)nk_pow(10.0, m);
 8015204:	2301      	movs	r3, #1
 8015206:	9301      	str	r3, [sp, #4]
        m = 0;
 8015208:	f04f 0a00 	mov.w	sl, #0
    }
    if (m < 1.0) {
 801520c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
        m = 0;
    }

    /* convert the number */
    while (n > NK_FLOAT_PRECISION || m >= 0) {
        double weight = nk_pow(10.0, m);
 8015210:	ed9f 8b73 	vldr	d8, [pc, #460]	; 80153e0 <nk_dtoa+0x248>
 8015214:	46bb      	mov	fp, r7
 8015216:	4657      	mov	r7, sl
 8015218:	e04f      	b.n	80152ba <nk_dtoa+0x122>
    NK_ASSERT(s);
 801521a:	4b75      	ldr	r3, [pc, #468]	; (80153f0 <nk_dtoa+0x258>)
 801521c:	4a75      	ldr	r2, [pc, #468]	; (80153f4 <nk_dtoa+0x25c>)
 801521e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8015222:	4875      	ldr	r0, [pc, #468]	; (80153f8 <nk_dtoa+0x260>)
 8015224:	f001 f992 	bl	801654c <__assert_func>
        s[0] = '0'; s[1] = '\0';
 8015228:	2330      	movs	r3, #48	; 0x30
 801522a:	9a00      	ldr	r2, [sp, #0]
 801522c:	7013      	strb	r3, [r2, #0]
 801522e:	2300      	movs	r3, #0
 8015230:	7053      	strb	r3, [r2, #1]
        return s;
 8015232:	e0c2      	b.n	80153ba <nk_dtoa+0x222>
    if (neg) n = -n;
 8015234:	46a0      	mov	r8, r4
 8015236:	f105 4900 	add.w	r9, r5, #2147483648	; 0x80000000
    m = nk_log10(n);
 801523a:	ec49 8b10 	vmov	d0, r8, r9
 801523e:	f7f8 fab1 	bl	800d7a4 <nk_log10>
 8015242:	4682      	mov	sl, r0
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 8015244:	280d      	cmp	r0, #13
 8015246:	dd09      	ble.n	801525c <nk_dtoa+0xc4>
 8015248:	2701      	movs	r7, #1
    if (neg) *(c++) = '-';
 801524a:	9e00      	ldr	r6, [sp, #0]
 801524c:	232d      	movs	r3, #45	; 0x2d
 801524e:	f806 3b01 	strb.w	r3, [r6], #1
    if (useExp) {
 8015252:	bb47      	cbnz	r7, 80152a6 <nk_dtoa+0x10e>
 8015254:	9701      	str	r7, [sp, #4]
 8015256:	e7d9      	b.n	801520c <nk_dtoa+0x74>
 8015258:	46a0      	mov	r8, r4
 801525a:	46a9      	mov	r9, r5
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 801525c:	2200      	movs	r2, #0
 801525e:	2300      	movs	r3, #0
 8015260:	4620      	mov	r0, r4
 8015262:	4629      	mov	r1, r5
 8015264:	f7eb fc62 	bl	8000b2c <__aeabi_dcmplt>
 8015268:	b970      	cbnz	r0, 8015288 <nk_dtoa+0xf0>
 801526a:	f11a 0f08 	cmn.w	sl, #8
 801526e:	bfac      	ite	ge
 8015270:	2700      	movge	r7, #0
 8015272:	2701      	movlt	r7, #1
    if (neg) *(c++) = '-';
 8015274:	2200      	movs	r2, #0
 8015276:	2300      	movs	r3, #0
 8015278:	4620      	mov	r0, r4
 801527a:	4629      	mov	r1, r5
 801527c:	f7eb fc56 	bl	8000b2c <__aeabi_dcmplt>
 8015280:	2800      	cmp	r0, #0
 8015282:	d1e2      	bne.n	801524a <nk_dtoa+0xb2>
    char *c = s;
 8015284:	9e00      	ldr	r6, [sp, #0]
 8015286:	e7e4      	b.n	8015252 <nk_dtoa+0xba>
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 8015288:	f1ba 0f08 	cmp.w	sl, #8
 801528c:	dc05      	bgt.n	801529a <nk_dtoa+0x102>
 801528e:	f11a 0f08 	cmn.w	sl, #8
 8015292:	bfac      	ite	ge
 8015294:	2700      	movge	r7, #0
 8015296:	2701      	movlt	r7, #1
    if (neg) *(c++) = '-';
 8015298:	e7d7      	b.n	801524a <nk_dtoa+0xb2>
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 801529a:	2701      	movs	r7, #1
 801529c:	e7d5      	b.n	801524a <nk_dtoa+0xb2>
    if (neg) *(c++) = '-';
 801529e:	46a0      	mov	r8, r4
 80152a0:	46a9      	mov	r9, r5
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 80152a2:	2701      	movs	r7, #1
 80152a4:	e7d1      	b.n	801524a <nk_dtoa+0xb2>
        if (m < 0)
 80152a6:	f1ba 0f00 	cmp.w	sl, #0
           m -= 1;
 80152aa:	bfb8      	it	lt
 80152ac:	f10a 3aff 	addlt.w	sl, sl, #4294967295
 80152b0:	4644      	mov	r4, r8
 80152b2:	464d      	mov	r5, r9
 80152b4:	e798      	b.n	80151e8 <nk_dtoa+0x50>
            double t = (double)n / weight;
            digit = nk_ifloord(t);
            n -= ((double)digit * weight);
            *(c++) = (char)('0' + (char)digit);
        }
        if (m == 0 && n > 0)
 80152b6:	b3d7      	cbz	r7, 801532e <nk_dtoa+0x196>
            *(c++) = '.';
        m--;
 80152b8:	3f01      	subs	r7, #1
    while (n > NK_FLOAT_PRECISION || m >= 0) {
 80152ba:	a34b      	add	r3, pc, #300	; (adr r3, 80153e8 <nk_dtoa+0x250>)
 80152bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152c0:	4640      	mov	r0, r8
 80152c2:	4649      	mov	r1, r9
 80152c4:	f7eb fc50 	bl	8000b68 <__aeabi_dcmpgt>
 80152c8:	b908      	cbnz	r0, 80152ce <nk_dtoa+0x136>
 80152ca:	2f00      	cmp	r7, #0
 80152cc:	db3b      	blt.n	8015346 <nk_dtoa+0x1ae>
        double weight = nk_pow(10.0, m);
 80152ce:	4638      	mov	r0, r7
 80152d0:	eeb0 0a48 	vmov.f32	s0, s16
 80152d4:	eef0 0a68 	vmov.f32	s1, s17
 80152d8:	f7f8 fa10 	bl	800d6fc <nk_pow>
 80152dc:	ec55 4b10 	vmov	r4, r5, d0
        if (weight > 0) {
 80152e0:	2200      	movs	r2, #0
 80152e2:	2300      	movs	r3, #0
 80152e4:	ee10 0a10 	vmov	r0, s0
 80152e8:	4629      	mov	r1, r5
 80152ea:	f7eb fc3d 	bl	8000b68 <__aeabi_dcmpgt>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d0e1      	beq.n	80152b6 <nk_dtoa+0x11e>
            double t = (double)n / weight;
 80152f2:	4622      	mov	r2, r4
 80152f4:	462b      	mov	r3, r5
 80152f6:	4640      	mov	r0, r8
 80152f8:	4649      	mov	r1, r9
 80152fa:	f7eb facf 	bl	800089c <__aeabi_ddiv>
            digit = nk_ifloord(t);
 80152fe:	ec41 0b10 	vmov	d0, r0, r1
 8015302:	f7f8 fa3b 	bl	800d77c <nk_ifloord>
 8015306:	4682      	mov	sl, r0
            n -= ((double)digit * weight);
 8015308:	f7eb f934 	bl	8000574 <__aeabi_i2d>
 801530c:	4622      	mov	r2, r4
 801530e:	462b      	mov	r3, r5
 8015310:	f7eb f99a 	bl	8000648 <__aeabi_dmul>
 8015314:	4602      	mov	r2, r0
 8015316:	460b      	mov	r3, r1
 8015318:	4640      	mov	r0, r8
 801531a:	4649      	mov	r1, r9
 801531c:	f7ea ffdc 	bl	80002d8 <__aeabi_dsub>
 8015320:	4680      	mov	r8, r0
 8015322:	4689      	mov	r9, r1
            *(c++) = (char)('0' + (char)digit);
 8015324:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8015328:	f806 ab01 	strb.w	sl, [r6], #1
 801532c:	e7c3      	b.n	80152b6 <nk_dtoa+0x11e>
        if (m == 0 && n > 0)
 801532e:	2200      	movs	r2, #0
 8015330:	2300      	movs	r3, #0
 8015332:	4640      	mov	r0, r8
 8015334:	4649      	mov	r1, r9
 8015336:	f7eb fc17 	bl	8000b68 <__aeabi_dcmpgt>
 801533a:	2800      	cmp	r0, #0
 801533c:	d0bc      	beq.n	80152b8 <nk_dtoa+0x120>
            *(c++) = '.';
 801533e:	232e      	movs	r3, #46	; 0x2e
 8015340:	f806 3b01 	strb.w	r3, [r6], #1
 8015344:	e7b8      	b.n	80152b8 <nk_dtoa+0x120>
    }

    if (useExp) {
 8015346:	465f      	mov	r7, fp
 8015348:	9b01      	ldr	r3, [sp, #4]
 801534a:	b3a3      	cbz	r3, 80153b6 <nk_dtoa+0x21e>
        /* convert the exponent */
        int i, j;
        *(c++) = 'e';
 801534c:	2365      	movs	r3, #101	; 0x65
 801534e:	7033      	strb	r3, [r6, #0]
        if (m1 > 0) {
 8015350:	2f00      	cmp	r7, #0
 8015352:	dd38      	ble.n	80153c6 <nk_dtoa+0x22e>
            *(c++) = '+';
 8015354:	232b      	movs	r3, #43	; 0x2b
 8015356:	7073      	strb	r3, [r6, #1]
 8015358:	3602      	adds	r6, #2
        } else {
            *(c++) = '-';
 801535a:	2000      	movs	r0, #0
            m1 = -m1;
        }
        m = 0;
        while (m1 > 0) {
            *(c++) = (char)('0' + (char)(m1 % 10));
 801535c:	4927      	ldr	r1, [pc, #156]	; (80153fc <nk_dtoa+0x264>)
 801535e:	fb81 3207 	smull	r3, r2, r1, r7
 8015362:	17fb      	asrs	r3, r7, #31
 8015364:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8015368:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801536c:	eba7 0242 	sub.w	r2, r7, r2, lsl #1
 8015370:	3230      	adds	r2, #48	; 0x30
 8015372:	f806 2b01 	strb.w	r2, [r6], #1
            m1 /= 10;
 8015376:	463a      	mov	r2, r7
 8015378:	461f      	mov	r7, r3
            m++;
 801537a:	4604      	mov	r4, r0
 801537c:	3001      	adds	r0, #1
        while (m1 > 0) {
 801537e:	2a09      	cmp	r2, #9
 8015380:	dced      	bgt.n	801535e <nk_dtoa+0x1c6>
        }
        c -= m;
 8015382:	1a30      	subs	r0, r6, r0
        for (i = 0, j = m-1; i<j; i++, j--) {
 8015384:	2c00      	cmp	r4, #0
 8015386:	dd16      	ble.n	80153b6 <nk_dtoa+0x21e>
 8015388:	1e42      	subs	r2, r0, #1
 801538a:	1c65      	adds	r5, r4, #1
 801538c:	4405      	add	r5, r0
            /* swap without temporary */
            c[i] ^= c[j];
 801538e:	4611      	mov	r1, r2
 8015390:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015394:	f815 7d01 	ldrb.w	r7, [r5, #-1]!
 8015398:	407b      	eors	r3, r7
 801539a:	7013      	strb	r3, [r2, #0]
            c[j] ^= c[i];
 801539c:	782f      	ldrb	r7, [r5, #0]
 801539e:	407b      	eors	r3, r7
 80153a0:	702b      	strb	r3, [r5, #0]
            c[i] ^= c[j];
 80153a2:	7817      	ldrb	r7, [r2, #0]
 80153a4:	407b      	eors	r3, r7
 80153a6:	7013      	strb	r3, [r2, #0]
        for (i = 0, j = m-1; i<j; i++, j--) {
 80153a8:	3102      	adds	r1, #2
 80153aa:	1a09      	subs	r1, r1, r0
 80153ac:	1aa3      	subs	r3, r4, r2
 80153ae:	3b01      	subs	r3, #1
 80153b0:	4403      	add	r3, r0
 80153b2:	4299      	cmp	r1, r3
 80153b4:	dbeb      	blt.n	801538e <nk_dtoa+0x1f6>
        }
        c += m;
    }
    *(c) = '\0';
 80153b6:	2300      	movs	r3, #0
 80153b8:	7033      	strb	r3, [r6, #0]
    return s;
}
 80153ba:	9800      	ldr	r0, [sp, #0]
 80153bc:	b003      	add	sp, #12
 80153be:	ecbd 8b02 	vpop	{d8}
 80153c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *(c++) = '-';
 80153c6:	1cb3      	adds	r3, r6, #2
            m1 = -m1;
 80153c8:	222d      	movs	r2, #45	; 0x2d
 80153ca:	7072      	strb	r2, [r6, #1]
        while (m1 > 0) {
 80153cc:	2f00      	cmp	r7, #0
 80153ce:	da02      	bge.n	80153d6 <nk_dtoa+0x23e>
            m1 = -m1;
 80153d0:	427f      	negs	r7, r7
            *(c++) = '-';
 80153d2:	461e      	mov	r6, r3
 80153d4:	e7c1      	b.n	801535a <nk_dtoa+0x1c2>
 80153d6:	461e      	mov	r6, r3
 80153d8:	e7ed      	b.n	80153b6 <nk_dtoa+0x21e>
 80153da:	bf00      	nop
 80153dc:	f3af 8000 	nop.w
 80153e0:	00000000 	.word	0x00000000
 80153e4:	40240000 	.word	0x40240000
 80153e8:	86a12b9b 	.word	0x86a12b9b
 80153ec:	3d06849b 	.word	0x3d06849b
 80153f0:	0801ae58 	.word	0x0801ae58
 80153f4:	0801bb70 	.word	0x0801bb70
 80153f8:	0801bb4c 	.word	0x0801bb4c
 80153fc:	66666667 	.word	0x66666667

08015400 <nk_murmur_hash>:
    return result;
}
#endif
NK_API nk_hash
nk_murmur_hash(const void * key, int len, nk_hash seed)
{
 8015400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015404:	4690      	mov	r8, r2
    nk_uint k1;
    const nk_byte *data = (const nk_byte*)key;
    const nk_byte *keyptr = data;
    nk_byte *k1ptr;
    const int bsize = sizeof(k1);
    const int nblocks = len/4;
 8015406:	460c      	mov	r4, r1
 8015408:	2900      	cmp	r1, #0
 801540a:	bfb8      	it	lt
 801540c:	1ccc      	addlt	r4, r1, #3
 801540e:	10a4      	asrs	r4, r4, #2
    const nk_uint c2 = 0x1b873593;
    const nk_byte *tail;
    int i;

    /* body */
    if (!key) return 0;
 8015410:	2800      	cmp	r0, #0
 8015412:	d05c      	beq.n	80154ce <nk_murmur_hash+0xce>
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 8015414:	2903      	cmp	r1, #3
 8015416:	dd28      	ble.n	801546a <nk_murmur_hash+0x6a>
 8015418:	1d03      	adds	r3, r0, #4
 801541a:	f04f 0e00 	mov.w	lr, #0
        k1ptr[0] = keyptr[0];
        k1ptr[1] = keyptr[1];
        k1ptr[2] = keyptr[2];
        k1ptr[3] = keyptr[3];

        k1 *= c1;
 801541e:	4f2d      	ldr	r7, [pc, #180]	; (80154d4 <nk_murmur_hash+0xd4>)
        k1 = NK_ROTL(k1,15);
        k1 *= c2;
 8015420:	4e2d      	ldr	r6, [pc, #180]	; (80154d8 <nk_murmur_hash+0xd8>)

        h1 ^= k1;
        h1 = NK_ROTL(h1,13);
        h1 = h1*5+0xe6546b64;
 8015422:	4d2e      	ldr	r5, [pc, #184]	; (80154dc <nk_murmur_hash+0xdc>)
        k1ptr[0] = keyptr[0];
 8015424:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8015428:	f362 0c07 	bfi	ip, r2, #0, #8
        k1ptr[1] = keyptr[1];
 801542c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8015430:	f362 2c0f 	bfi	ip, r2, #8, #8
        k1ptr[2] = keyptr[2];
 8015434:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8015438:	f362 4c17 	bfi	ip, r2, #16, #8
        k1ptr[3] = keyptr[3];
 801543c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8015440:	f362 6c1f 	bfi	ip, r2, #24, #8
        k1 *= c1;
 8015444:	fb07 f20c 	mul.w	r2, r7, ip
        k1 = NK_ROTL(k1,15);
 8015448:	ea4f 4272 	mov.w	r2, r2, ror #17
        k1 *= c2;
 801544c:	fb06 f202 	mul.w	r2, r6, r2
        h1 ^= k1;
 8015450:	ea82 0208 	eor.w	r2, r2, r8
        h1 = NK_ROTL(h1,13);
 8015454:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h1 = h1*5+0xe6546b64;
 8015458:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801545c:	eb02 0805 	add.w	r8, r2, r5
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 8015460:	f10e 0e01 	add.w	lr, lr, #1
 8015464:	3304      	adds	r3, #4
 8015466:	4574      	cmp	r4, lr
 8015468:	dcdc      	bgt.n	8015424 <nk_murmur_hash+0x24>
    }

    /* tail */
    tail = (const nk_byte*)(data + nblocks*4);
 801546a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    k1 = 0;
 801546e:	f04f 0c00 	mov.w	ip, #0
    switch (len & 3) {
 8015472:	f001 0303 	and.w	r3, r1, #3
 8015476:	2b02      	cmp	r3, #2
 8015478:	d008      	beq.n	801548c <nk_murmur_hash+0x8c>
 801547a:	2b03      	cmp	r3, #3
 801547c:	d002      	beq.n	8015484 <nk_murmur_hash+0x84>
 801547e:	2b01      	cmp	r3, #1
 8015480:	d115      	bne.n	80154ae <nk_murmur_hash+0xae>
 8015482:	e006      	b.n	8015492 <nk_murmur_hash+0x92>
        case 3: k1 ^= (nk_uint)(tail[2] << 16); /* fallthrough */
 8015484:	f892 c002 	ldrb.w	ip, [r2, #2]
 8015488:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        case 2: k1 ^= (nk_uint)(tail[1] << 8u); /* fallthrough */
 801548c:	7853      	ldrb	r3, [r2, #1]
 801548e:	ea8c 2c03 	eor.w	ip, ip, r3, lsl #8
        case 1: k1 ^= tail[0];
 8015492:	f810 3024 	ldrb.w	r3, [r0, r4, lsl #2]
 8015496:	ea83 030c 	eor.w	r3, r3, ip
            k1 *= c1;
 801549a:	4a0e      	ldr	r2, [pc, #56]	; (80154d4 <nk_murmur_hash+0xd4>)
 801549c:	fb02 f303 	mul.w	r3, r2, r3
            k1 = NK_ROTL(k1,15);
 80154a0:	ea4f 4373 	mov.w	r3, r3, ror #17
            k1 *= c2;
 80154a4:	4a0c      	ldr	r2, [pc, #48]	; (80154d8 <nk_murmur_hash+0xd8>)
 80154a6:	fb02 f303 	mul.w	r3, r2, r3
            h1 ^= k1;
 80154aa:	ea88 0803 	eor.w	r8, r8, r3
            break;
        default: break;
    }

    /* finalization */
    h1 ^= (nk_uint)len;
 80154ae:	ea81 0108 	eor.w	r1, r1, r8
    /* fmix32 */
    h1 ^= h1 >> 16;
 80154b2:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    h1 *= 0x85ebca6b;
 80154b6:	480a      	ldr	r0, [pc, #40]	; (80154e0 <nk_murmur_hash+0xe0>)
 80154b8:	fb01 f000 	mul.w	r0, r1, r0
    h1 ^= h1 >> 13;
 80154bc:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
    h1 *= 0xc2b2ae35;
 80154c0:	4b08      	ldr	r3, [pc, #32]	; (80154e4 <nk_murmur_hash+0xe4>)
 80154c2:	fb03 f000 	mul.w	r0, r3, r0
    h1 ^= h1 >> 16;
 80154c6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16

    #undef NK_ROTL
    return h1;
}
 80154ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!key) return 0;
 80154ce:	2000      	movs	r0, #0
 80154d0:	e7fb      	b.n	80154ca <nk_murmur_hash+0xca>
 80154d2:	bf00      	nop
 80154d4:	cc9e2d51 	.word	0xcc9e2d51
 80154d8:	1b873593 	.word	0x1b873593
 80154dc:	e6546b64 	.word	0xe6546b64
 80154e0:	85ebca6b 	.word	0x85ebca6b
 80154e4:	c2b2ae35 	.word	0xc2b2ae35

080154e8 <nk_text_clamp>:
#endif
NK_LIB int
nk_text_clamp(const struct nk_user_font *font, const char *text,
    int text_len, float space, int *glyphs, float *text_width,
    nk_rune *sep_list, int sep_count)
{
 80154e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ec:	ed2d 8b06 	vpush	{d8-d10}
 80154f0:	b087      	sub	sp, #28
 80154f2:	4606      	mov	r6, r0
 80154f4:	460f      	mov	r7, r1
 80154f6:	4690      	mov	r8, r2
 80154f8:	eef0 9a40 	vmov.f32	s19, s0
 80154fc:	9303      	str	r3, [sp, #12]
 80154fe:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8015502:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    int i = 0;
    int glyph_len = 0;
    float last_width = 0;
    nk_rune unicode = 0;
 8015506:	2300      	movs	r3, #0
 8015508:	9305      	str	r3, [sp, #20]
    int sep_len = 0;
    int sep_g = 0;
    float sep_width = 0;
    sep_count = NK_MAX(sep_count,0);

    glyph_len = nk_utf_decode(text, &unicode, text_len);
 801550a:	a905      	add	r1, sp, #20
 801550c:	4638      	mov	r0, r7
 801550e:	f7ff fac7 	bl	8014aa0 <nk_utf_decode>
    while (glyph_len && (width < space) && (len < text_len)) {
 8015512:	4602      	mov	r2, r0
 8015514:	2800      	cmp	r0, #0
 8015516:	d064      	beq.n	80155e2 <nk_text_clamp+0xfa>
 8015518:	ea2a 79ea 	bic.w	r9, sl, sl, asr #31
 801551c:	2501      	movs	r5, #1
    float sep_width = 0;
 801551e:	ed9f 9a35 	vldr	s18, [pc, #212]	; 80155f4 <nk_text_clamp+0x10c>
    int sep_g = 0;
 8015522:	2400      	movs	r4, #0
 8015524:	9401      	str	r4, [sp, #4]
    int sep_len = 0;
 8015526:	9402      	str	r4, [sp, #8]
    float width = 0;
 8015528:	eeb0 8a49 	vmov.f32	s16, s18
    float last_width = 0;
 801552c:	eeb0 aa49 	vmov.f32	s20, s18
 8015530:	e011      	b.n	8015556 <nk_text_clamp+0x6e>
        len += glyph_len;
        s = font->width(font->userdata, font->height, text, len);
        for (i = 0; i < sep_count; ++i) {
 8015532:	3301      	adds	r3, #1
 8015534:	4599      	cmp	r9, r3
 8015536:	dc27      	bgt.n	8015588 <nk_text_clamp+0xa0>
 8015538:	e030      	b.n	801559c <nk_text_clamp+0xb4>
 801553a:	2300      	movs	r3, #0
 801553c:	e02e      	b.n	801559c <nk_text_clamp+0xb4>
        if (i == sep_count){
            last_width = sep_width = width;
            sep_g = g+1;
        }
        width = s;
        glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);
 801553e:	eba8 0204 	sub.w	r2, r8, r4
 8015542:	a905      	add	r1, sp, #20
 8015544:	1938      	adds	r0, r7, r4
 8015546:	f7ff faab 	bl	8014aa0 <nk_utf_decode>
        g++;
 801554a:	462b      	mov	r3, r5
    while (glyph_len && (width < space) && (len < text_len)) {
 801554c:	3501      	adds	r5, #1
 801554e:	4602      	mov	r2, r0
 8015550:	b360      	cbz	r0, 80155ac <nk_text_clamp+0xc4>
        width = s;
 8015552:	eeb0 8a68 	vmov.f32	s16, s17
 8015556:	1e6b      	subs	r3, r5, #1
    while (glyph_len && (width < space) && (len < text_len)) {
 8015558:	eef4 9ac8 	vcmpe.f32	s19, s16
 801555c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015560:	dd24      	ble.n	80155ac <nk_text_clamp+0xc4>
 8015562:	45a0      	cmp	r8, r4
 8015564:	dd2e      	ble.n	80155c4 <nk_text_clamp+0xdc>
        len += glyph_len;
 8015566:	4414      	add	r4, r2
        s = font->width(font->userdata, font->height, text, len);
 8015568:	68b3      	ldr	r3, [r6, #8]
 801556a:	4622      	mov	r2, r4
 801556c:	4639      	mov	r1, r7
 801556e:	ed96 0a01 	vldr	s0, [r6, #4]
 8015572:	6830      	ldr	r0, [r6, #0]
 8015574:	4798      	blx	r3
 8015576:	eef0 8a40 	vmov.f32	s17, s0
        for (i = 0; i < sep_count; ++i) {
 801557a:	f1ba 0f00 	cmp.w	sl, #0
 801557e:	dddc      	ble.n	801553a <nk_text_clamp+0x52>
            if (unicode != sep_list[i]) continue;
 8015580:	9805      	ldr	r0, [sp, #20]
 8015582:	f1ab 0204 	sub.w	r2, fp, #4
        for (i = 0; i < sep_count; ++i) {
 8015586:	2300      	movs	r3, #0
            if (unicode != sep_list[i]) continue;
 8015588:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801558c:	4281      	cmp	r1, r0
 801558e:	d1d0      	bne.n	8015532 <nk_text_clamp+0x4a>
            sep_g = g+1;
 8015590:	9501      	str	r5, [sp, #4]
            break;
 8015592:	eeb0 9a48 	vmov.f32	s18, s16
            sep_len = len;
 8015596:	9402      	str	r4, [sp, #8]
            break;
 8015598:	eeb0 aa48 	vmov.f32	s20, s16
        if (i == sep_count){
 801559c:	4599      	cmp	r9, r3
 801559e:	d1ce      	bne.n	801553e <nk_text_clamp+0x56>
            sep_g = g+1;
 80155a0:	9501      	str	r5, [sp, #4]
 80155a2:	eeb0 9a48 	vmov.f32	s18, s16
 80155a6:	eeb0 aa48 	vmov.f32	s20, s16
 80155aa:	e7c8      	b.n	801553e <nk_text_clamp+0x56>
    }
    if (len >= text_len) {
 80155ac:	45a0      	cmp	r8, r4
 80155ae:	dd09      	ble.n	80155c4 <nk_text_clamp+0xdc>
        *text_width = last_width;
        return len;
    } else {
        *glyphs = sep_g;
        *text_width = sep_width;
        return (!sep_len) ? len: sep_len;
 80155b0:	9b02      	ldr	r3, [sp, #8]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	bf08      	it	eq
 80155b6:	4623      	moveq	r3, r4
 80155b8:	461c      	mov	r4, r3
 80155ba:	e006      	b.n	80155ca <nk_text_clamp+0xe2>
    int g = 0;
 80155bc:	4613      	mov	r3, r2
    int len = 0;
 80155be:	4614      	mov	r4, r2
    float last_width = 0;
 80155c0:	ed9f aa0c 	vldr	s20, [pc, #48]	; 80155f4 <nk_text_clamp+0x10c>
        return len;
 80155c4:	9301      	str	r3, [sp, #4]
 80155c6:	eeb0 9a4a 	vmov.f32	s18, s20
        *glyphs = g;
 80155ca:	9b03      	ldr	r3, [sp, #12]
 80155cc:	9a01      	ldr	r2, [sp, #4]
 80155ce:	601a      	str	r2, [r3, #0]
        *text_width = last_width;
 80155d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80155d2:	ed83 9a00 	vstr	s18, [r3]
    }
}
 80155d6:	4620      	mov	r0, r4
 80155d8:	b007      	add	sp, #28
 80155da:	ecbd 8b06 	vpop	{d8-d10}
 80155de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (len >= text_len) {
 80155e2:	f1b8 0f00 	cmp.w	r8, #0
 80155e6:	dde9      	ble.n	80155bc <nk_text_clamp+0xd4>
 80155e8:	9001      	str	r0, [sp, #4]
    int len = 0;
 80155ea:	4604      	mov	r4, r0
    if (len >= text_len) {
 80155ec:	ed9f 9a01 	vldr	s18, [pc, #4]	; 80155f4 <nk_text_clamp+0x10c>
 80155f0:	e7eb      	b.n	80155ca <nk_text_clamp+0xe2>
 80155f2:	bf00      	nop
 80155f4:	00000000 	.word	0x00000000

080155f8 <nk_text_calculate_text_bounds>:
NK_LIB struct nk_vec2
nk_text_calculate_text_bounds(const struct nk_user_font *font,
    const char *begin, int byte_len, float row_height, const char **remaining,
    struct nk_vec2 *out_offset, int *glyphs, int op)
{
 80155f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155fc:	ed2d 8b06 	vpush	{d8-d10}
 8015600:	b089      	sub	sp, #36	; 0x24
 8015602:	4606      	mov	r6, r0
 8015604:	460c      	mov	r4, r1
 8015606:	4615      	mov	r5, r2
 8015608:	eeb0 8a40 	vmov.f32	s16, s0
 801560c:	4699      	mov	r9, r3
 801560e:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
    float line_height = row_height;
    struct nk_vec2 text_size = nk_vec2(0,0);
 8015612:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80157a0 <nk_text_calculate_text_bounds+0x1a8>
 8015616:	eef0 0a40 	vmov.f32	s1, s0
 801561a:	f7f8 f915 	bl	800d848 <nk_vec2>
    float line_width = 0.0f;

    float glyph_width;
    int glyph_len = 0;
    nk_rune unicode = 0;
 801561e:	2300      	movs	r3, #0
 8015620:	9303      	str	r3, [sp, #12]
    int text_len = 0;
    if (!begin || byte_len <= 0 || !font)
 8015622:	b304      	cbz	r4, 8015666 <nk_text_calculate_text_bounds+0x6e>
 8015624:	ee10 ba10 	vmov	fp, s0
 8015628:	ee10 7a90 	vmov	r7, s1
 801562c:	eeb0 aa40 	vmov.f32	s20, s0
 8015630:	eeb0 9a60 	vmov.f32	s18, s1
 8015634:	429d      	cmp	r5, r3
 8015636:	dd16      	ble.n	8015666 <nk_text_calculate_text_bounds+0x6e>
 8015638:	b1ae      	cbz	r6, 8015666 <nk_text_calculate_text_bounds+0x6e>
        return nk_vec2(0,row_height);

    glyph_len = nk_utf_decode(begin, &unicode, byte_len);
 801563a:	462a      	mov	r2, r5
 801563c:	a903      	add	r1, sp, #12
 801563e:	4620      	mov	r0, r4
 8015640:	f7ff fa2e 	bl	8014aa0 <nk_utf_decode>
    if (!glyph_len) return text_size;
 8015644:	4680      	mov	r8, r0
 8015646:	b308      	cbz	r0, 801568c <nk_text_calculate_text_bounds+0x94>
    glyph_width = font->width(font->userdata, font->height, begin, glyph_len);
 8015648:	68b3      	ldr	r3, [r6, #8]
 801564a:	4602      	mov	r2, r0
 801564c:	4621      	mov	r1, r4
 801564e:	ed96 0a01 	vldr	s0, [r6, #4]
 8015652:	6830      	ldr	r0, [r6, #0]
 8015654:	4798      	blx	r3
 8015656:	eef0 9a40 	vmov.f32	s19, s0

    *glyphs = 0;
 801565a:	2700      	movs	r7, #0
 801565c:	f8ca 7000 	str.w	r7, [sl]
    float line_width = 0.0f;
 8015660:	eddf 8a4f 	vldr	s17, [pc, #316]	; 80157a0 <nk_text_calculate_text_bounds+0x1a8>
 8015664:	e06c      	b.n	8015740 <nk_text_calculate_text_bounds+0x148>
        return nk_vec2(0,row_height);
 8015666:	eef0 0a48 	vmov.f32	s1, s16
 801566a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80157a0 <nk_text_calculate_text_bounds+0x1a8>
 801566e:	f7f8 f8eb 	bl	800d848 <nk_vec2>
 8015672:	ed8d 0a06 	vstr	s0, [sp, #24]
 8015676:	edcd 0a07 	vstr	s1, [sp, #28]
    if (line_width > 0 || text_size.y == 0.0f)
        text_size.y += line_height;
    if (remaining)
        *remaining = begin+text_len;
    return text_size;
}
 801567a:	ed9d 0a06 	vldr	s0, [sp, #24]
 801567e:	eddd 0a07 	vldr	s1, [sp, #28]
 8015682:	b009      	add	sp, #36	; 0x24
 8015684:	ecbd 8b06 	vpop	{d8-d10}
 8015688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!glyph_len) return text_size;
 801568c:	f8cd b018 	str.w	fp, [sp, #24]
 8015690:	9707      	str	r7, [sp, #28]
 8015692:	e7f2      	b.n	801567a <nk_text_calculate_text_bounds+0x82>
            text_size.x = NK_MAX(text_size.x, line_width);
 8015694:	eef4 8aca 	vcmpe.f32	s17, s20
 8015698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801569c:	bfd8      	it	le
 801569e:	eef0 8a4a 	vmovle.f32	s17, s20
            text_size.y += line_height;
 80156a2:	ee39 9a08 	vadd.f32	s18, s18, s16
            *glyphs+=1;
 80156a6:	f8da 3000 	ldr.w	r3, [sl]
 80156aa:	3301      	adds	r3, #1
 80156ac:	f8ca 3000 	str.w	r3, [sl]
            if (op == NK_STOP_ON_NEW_LINE)
 80156b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80156b2:	2b01      	cmp	r3, #1
 80156b4:	d127      	bne.n	8015706 <nk_text_calculate_text_bounds+0x10e>
            line_width = 0;
 80156b6:	eddf 9a3a 	vldr	s19, [pc, #232]	; 80157a0 <nk_text_calculate_text_bounds+0x1a8>
        text_size.x = line_width;
 80156ba:	eef4 9a68 	vcmp.f32	s19, s17
 80156be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c2:	bfc8      	it	gt
 80156c4:	eef0 8a69 	vmovgt.f32	s17, s19
    if (out_offset)
 80156c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80156ca:	b153      	cbz	r3, 80156e2 <nk_text_calculate_text_bounds+0xea>
        *out_offset = nk_vec2(line_width, text_size.y + line_height);
 80156cc:	ee78 0a09 	vadd.f32	s1, s16, s18
 80156d0:	eeb0 0a69 	vmov.f32	s0, s19
 80156d4:	f7f8 f8b8 	bl	800d848 <nk_vec2>
 80156d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80156da:	ed83 0a00 	vstr	s0, [r3]
 80156de:	edc3 0a01 	vstr	s1, [r3, #4]
    if (line_width > 0 || text_size.y == 0.0f)
 80156e2:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 80156e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ea:	dd52      	ble.n	8015792 <nk_text_calculate_text_bounds+0x19a>
        text_size.y += line_height;
 80156ec:	ee39 9a08 	vadd.f32	s18, s18, s16
    if (remaining)
 80156f0:	f1b9 0f00 	cmp.w	r9, #0
 80156f4:	d002      	beq.n	80156fc <nk_text_calculate_text_bounds+0x104>
        *remaining = begin+text_len;
 80156f6:	443c      	add	r4, r7
 80156f8:	f8c9 4000 	str.w	r4, [r9]
    return text_size;
 80156fc:	edcd 8a06 	vstr	s17, [sp, #24]
 8015700:	ed8d 9a07 	vstr	s18, [sp, #28]
 8015704:	e7b9      	b.n	801567a <nk_text_calculate_text_bounds+0x82>
            text_len++;
 8015706:	3701      	adds	r7, #1
            glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 8015708:	1bea      	subs	r2, r5, r7
 801570a:	a903      	add	r1, sp, #12
 801570c:	19e0      	adds	r0, r4, r7
 801570e:	f7ff f9c7 	bl	8014aa0 <nk_utf_decode>
 8015712:	4680      	mov	r8, r0
            continue;
 8015714:	eeb0 aa68 	vmov.f32	s20, s17
            line_width = 0;
 8015718:	eddf 8a21 	vldr	s17, [pc, #132]	; 80157a0 <nk_text_calculate_text_bounds+0x1a8>
            continue;
 801571c:	e00b      	b.n	8015736 <nk_text_calculate_text_bounds+0x13e>
            text_len++;
 801571e:	3701      	adds	r7, #1
            *glyphs+=1;
 8015720:	f8da 3000 	ldr.w	r3, [sl]
 8015724:	3301      	adds	r3, #1
 8015726:	f8ca 3000 	str.w	r3, [sl]
            glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 801572a:	1bea      	subs	r2, r5, r7
 801572c:	a903      	add	r1, sp, #12
 801572e:	19e0      	adds	r0, r4, r7
 8015730:	f7ff f9b6 	bl	8014aa0 <nk_utf_decode>
 8015734:	4680      	mov	r8, r0
    while ((text_len < byte_len) && glyph_len) {
 8015736:	42af      	cmp	r7, r5
 8015738:	da26      	bge.n	8015788 <nk_text_calculate_text_bounds+0x190>
 801573a:	f1b8 0f00 	cmp.w	r8, #0
 801573e:	d01e      	beq.n	801577e <nk_text_calculate_text_bounds+0x186>
        if (unicode == '\n') {
 8015740:	9b03      	ldr	r3, [sp, #12]
 8015742:	2b0a      	cmp	r3, #10
 8015744:	d0a6      	beq.n	8015694 <nk_text_calculate_text_bounds+0x9c>
        if (unicode == '\r') {
 8015746:	2b0d      	cmp	r3, #13
 8015748:	d0e9      	beq.n	801571e <nk_text_calculate_text_bounds+0x126>
        *glyphs = *glyphs + 1;
 801574a:	f8da 3000 	ldr.w	r3, [sl]
 801574e:	3301      	adds	r3, #1
 8015750:	f8ca 3000 	str.w	r3, [sl]
        text_len += glyph_len;
 8015754:	4447      	add	r7, r8
        line_width += (float)glyph_width;
 8015756:	ee78 8aa9 	vadd.f32	s17, s17, s19
        glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 801575a:	eb04 0b07 	add.w	fp, r4, r7
 801575e:	1bea      	subs	r2, r5, r7
 8015760:	a903      	add	r1, sp, #12
 8015762:	4658      	mov	r0, fp
 8015764:	f7ff f99c 	bl	8014aa0 <nk_utf_decode>
 8015768:	4680      	mov	r8, r0
        glyph_width = font->width(font->userdata, font->height, begin+text_len, glyph_len);
 801576a:	68b3      	ldr	r3, [r6, #8]
 801576c:	4602      	mov	r2, r0
 801576e:	4659      	mov	r1, fp
 8015770:	ed96 0a01 	vldr	s0, [r6, #4]
 8015774:	6830      	ldr	r0, [r6, #0]
 8015776:	4798      	blx	r3
 8015778:	eef0 9a40 	vmov.f32	s19, s0
        continue;
 801577c:	e7db      	b.n	8015736 <nk_text_calculate_text_bounds+0x13e>
 801577e:	eef0 9a68 	vmov.f32	s19, s17
 8015782:	eef0 8a4a 	vmov.f32	s17, s20
 8015786:	e798      	b.n	80156ba <nk_text_calculate_text_bounds+0xc2>
 8015788:	eef0 9a68 	vmov.f32	s19, s17
 801578c:	eef0 8a4a 	vmov.f32	s17, s20
 8015790:	e793      	b.n	80156ba <nk_text_calculate_text_bounds+0xc2>
    if (line_width > 0 || text_size.y == 0.0f)
 8015792:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801579a:	d1a9      	bne.n	80156f0 <nk_text_calculate_text_bounds+0xf8>
 801579c:	e7a6      	b.n	80156ec <nk_text_calculate_text_bounds+0xf4>
 801579e:	bf00      	nop
 80157a0:	00000000 	.word	0x00000000

080157a4 <nk_widget>:
        return 0;
    return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);
}
NK_API enum nk_widget_layout_states
nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)
{
 80157a4:	b570      	push	{r4, r5, r6, lr}
 80157a6:	b088      	sub	sp, #32
    struct nk_rect c, v;
    struct nk_window *win;
    struct nk_panel *layout;
    const struct nk_input *in;

    NK_ASSERT(ctx);
 80157a8:	2900      	cmp	r1, #0
 80157aa:	f000 80c5 	beq.w	8015938 <nk_widget+0x194>
 80157ae:	4604      	mov	r4, r0
 80157b0:	460d      	mov	r5, r1
    NK_ASSERT(ctx->current);
 80157b2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
 80157b6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	f000 80c2 	beq.w	8015944 <nk_widget+0x1a0>
    NK_ASSERT(ctx->current->layout);
 80157c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	f000 80c3 	beq.w	8015950 <nk_widget+0x1ac>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return NK_WIDGET_INVALID;

    /* allocate space and check if the widget needs to be updated and drawn */
    nk_panel_alloc_space(bounds, ctx);
 80157ca:	f7f7 ff4b 	bl	800d664 <nk_panel_alloc_space>
    win = ctx->current;
    layout = win->layout;
 80157ce:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 80157d2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80157d6:	f8d3 608c 	ldr.w	r6, [r3, #140]	; 0x8c
    in = &ctx->input;
    c = layout->clip;
 80157da:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 80157de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80157e0:	f10d 0c20 	add.w	ip, sp, #32
 80157e4:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 80157e8:	6873      	ldr	r3, [r6, #4]
 80157ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80157ee:	f040 80b5 	bne.w	801595c <nk_widget+0x1b8>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 80157f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80157f6:	f040 80b7 	bne.w	8015968 <nk_widget+0x1c4>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 80157fa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80157fe:	f040 80b9 	bne.w	8015974 <nk_widget+0x1d0>

    /* need to convert to int here to remove floating point errors */
    bounds->x = (float)((int)bounds->x);
 8015802:	ed94 0a00 	vldr	s0, [r4]
 8015806:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801580a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801580e:	ed84 0a00 	vstr	s0, [r4]
    bounds->y = (float)((int)bounds->y);
 8015812:	edd4 0a01 	vldr	s1, [r4, #4]
 8015816:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 801581a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801581e:	edc4 0a01 	vstr	s1, [r4, #4]
    bounds->w = (float)((int)bounds->w);
 8015822:	ed94 1a02 	vldr	s2, [r4, #8]
 8015826:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 801582a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801582e:	ed84 1a02 	vstr	s2, [r4, #8]
    bounds->h = (float)((int)bounds->h);
 8015832:	edd4 1a03 	vldr	s3, [r4, #12]
 8015836:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 801583a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801583e:	edc4 1a03 	vstr	s3, [r4, #12]

    c.x = (float)((int)c.x);
 8015842:	eddd 7a04 	vldr	s15, [sp, #16]
 8015846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801584a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801584e:	edcd 7a04 	vstr	s15, [sp, #16]
    c.y = (float)((int)c.y);
 8015852:	eddd 7a05 	vldr	s15, [sp, #20]
 8015856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801585a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801585e:	edcd 7a05 	vstr	s15, [sp, #20]
    c.w = (float)((int)c.w);
 8015862:	eddd 7a06 	vldr	s15, [sp, #24]
 8015866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801586a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801586e:	edcd 7a06 	vstr	s15, [sp, #24]
    c.h = (float)((int)c.h);
 8015872:	eddd 7a07 	vldr	s15, [sp, #28]
 8015876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801587a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801587e:	edcd 7a07 	vstr	s15, [sp, #28]

    nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);
 8015882:	ee70 1aa1 	vadd.f32	s3, s1, s3
 8015886:	ee30 1a01 	vadd.f32	s2, s0, s2
 801588a:	a904      	add	r1, sp, #16
 801588c:	4668      	mov	r0, sp
 801588e:	f7f7 ffdf 	bl	800d850 <nk_unify>
    if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))
 8015892:	ed94 7a00 	vldr	s14, [r4]
 8015896:	eddd 6a04 	vldr	s13, [sp, #16]
 801589a:	eddd 7a06 	vldr	s15, [sp, #24]
 801589e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80158a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80158a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158aa:	d569      	bpl.n	8015980 <nk_widget+0x1dc>
 80158ac:	edd4 7a02 	vldr	s15, [r4, #8]
 80158b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80158b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80158b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158bc:	d563      	bpl.n	8015986 <nk_widget+0x1e2>
 80158be:	ed94 7a01 	vldr	s14, [r4, #4]
 80158c2:	eddd 6a05 	vldr	s13, [sp, #20]
 80158c6:	eddd 7a07 	vldr	s15, [sp, #28]
 80158ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80158ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80158d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d6:	d558      	bpl.n	801598a <nk_widget+0x1e6>
 80158d8:	edd4 7a03 	vldr	s15, [r4, #12]
 80158dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80158e0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80158e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158e8:	d551      	bpl.n	801598e <nk_widget+0x1ea>
        return NK_WIDGET_INVALID;
    if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))
 80158ea:	eddd 7a00 	vldr	s15, [sp]
 80158ee:	ed95 7a51 	vldr	s14, [r5, #324]	; 0x144
 80158f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80158f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158fa:	d84a      	bhi.n	8015992 <nk_widget+0x1ee>
 80158fc:	eddd 6a02 	vldr	s13, [sp, #8]
 8015900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590c:	d543      	bpl.n	8015996 <nk_widget+0x1f2>
 801590e:	eddd 7a01 	vldr	s15, [sp, #4]
 8015912:	ed95 7a52 	vldr	s14, [r5, #328]	; 0x148
 8015916:	eef4 7ac7 	vcmpe.f32	s15, s14
 801591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801591e:	d83c      	bhi.n	801599a <nk_widget+0x1f6>
 8015920:	eddd 6a03 	vldr	s13, [sp, #12]
 8015924:	ee77 7aa6 	vadd.f32	s15, s15, s13
        return NK_WIDGET_ROM;
 8015928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015930:	bf4c      	ite	mi
 8015932:	2001      	movmi	r0, #1
 8015934:	2002      	movpl	r0, #2
 8015936:	e024      	b.n	8015982 <nk_widget+0x1de>
    NK_ASSERT(ctx);
 8015938:	4b19      	ldr	r3, [pc, #100]	; (80159a0 <nk_widget+0x1fc>)
 801593a:	4a1a      	ldr	r2, [pc, #104]	; (80159a4 <nk_widget+0x200>)
 801593c:	218e      	movs	r1, #142	; 0x8e
 801593e:	481a      	ldr	r0, [pc, #104]	; (80159a8 <nk_widget+0x204>)
 8015940:	f000 fe04 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 8015944:	4b19      	ldr	r3, [pc, #100]	; (80159ac <nk_widget+0x208>)
 8015946:	4a17      	ldr	r2, [pc, #92]	; (80159a4 <nk_widget+0x200>)
 8015948:	218f      	movs	r1, #143	; 0x8f
 801594a:	4817      	ldr	r0, [pc, #92]	; (80159a8 <nk_widget+0x204>)
 801594c:	f000 fdfe 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015950:	4b17      	ldr	r3, [pc, #92]	; (80159b0 <nk_widget+0x20c>)
 8015952:	4a14      	ldr	r2, [pc, #80]	; (80159a4 <nk_widget+0x200>)
 8015954:	2190      	movs	r1, #144	; 0x90
 8015956:	4814      	ldr	r0, [pc, #80]	; (80159a8 <nk_widget+0x204>)
 8015958:	f000 fdf8 	bl	801654c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 801595c:	4b15      	ldr	r3, [pc, #84]	; (80159b4 <nk_widget+0x210>)
 801595e:	4a11      	ldr	r2, [pc, #68]	; (80159a4 <nk_widget+0x200>)
 8015960:	21a0      	movs	r1, #160	; 0xa0
 8015962:	4811      	ldr	r0, [pc, #68]	; (80159a8 <nk_widget+0x204>)
 8015964:	f000 fdf2 	bl	801654c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 8015968:	4b13      	ldr	r3, [pc, #76]	; (80159b8 <nk_widget+0x214>)
 801596a:	4a0e      	ldr	r2, [pc, #56]	; (80159a4 <nk_widget+0x200>)
 801596c:	21a1      	movs	r1, #161	; 0xa1
 801596e:	480e      	ldr	r0, [pc, #56]	; (80159a8 <nk_widget+0x204>)
 8015970:	f000 fdec 	bl	801654c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 8015974:	4b11      	ldr	r3, [pc, #68]	; (80159bc <nk_widget+0x218>)
 8015976:	4a0b      	ldr	r2, [pc, #44]	; (80159a4 <nk_widget+0x200>)
 8015978:	21a2      	movs	r1, #162	; 0xa2
 801597a:	480b      	ldr	r0, [pc, #44]	; (80159a8 <nk_widget+0x204>)
 801597c:	f000 fde6 	bl	801654c <__assert_func>
        return NK_WIDGET_INVALID;
 8015980:	2000      	movs	r0, #0
    return NK_WIDGET_VALID;
}
 8015982:	b008      	add	sp, #32
 8015984:	bd70      	pop	{r4, r5, r6, pc}
        return NK_WIDGET_INVALID;
 8015986:	2000      	movs	r0, #0
 8015988:	e7fb      	b.n	8015982 <nk_widget+0x1de>
 801598a:	2000      	movs	r0, #0
 801598c:	e7f9      	b.n	8015982 <nk_widget+0x1de>
 801598e:	2000      	movs	r0, #0
 8015990:	e7f7      	b.n	8015982 <nk_widget+0x1de>
        return NK_WIDGET_ROM;
 8015992:	2002      	movs	r0, #2
 8015994:	e7f5      	b.n	8015982 <nk_widget+0x1de>
 8015996:	2002      	movs	r0, #2
 8015998:	e7f3      	b.n	8015982 <nk_widget+0x1de>
 801599a:	2002      	movs	r0, #2
 801599c:	e7f1      	b.n	8015982 <nk_widget+0x1de>
 801599e:	bf00      	nop
 80159a0:	0801ad58 	.word	0x0801ad58
 80159a4:	0801bbe0 	.word	0x0801bbe0
 80159a8:	0801bbb0 	.word	0x0801bbb0
 80159ac:	0801ad5c 	.word	0x0801ad5c
 80159b0:	0801ad6c 	.word	0x0801ad6c
 80159b4:	0801b1ec 	.word	0x0801b1ec
 80159b8:	0801b214 	.word	0x0801b214
 80159bc:	0801b238 	.word	0x0801b238

080159c0 <nk_widget_fitting>:
NK_API enum nk_widget_layout_states
nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,
    struct nk_vec2 item_padding)
{
 80159c0:	b500      	push	{lr}
 80159c2:	b083      	sub	sp, #12
 80159c4:	ed8d 0a00 	vstr	s0, [sp]
 80159c8:	edcd 0a01 	vstr	s1, [sp, #4]
    /* update the bounds to stand without padding  */
    enum nk_widget_layout_states state;
    NK_UNUSED(item_padding);

    NK_ASSERT(ctx);
 80159cc:	b161      	cbz	r1, 80159e8 <nk_widget_fitting+0x28>
    NK_ASSERT(ctx->current);
 80159ce:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
 80159d2:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
 80159d6:	b16a      	cbz	r2, 80159f4 <nk_widget_fitting+0x34>
    NK_ASSERT(ctx->current->layout);
 80159d8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80159dc:	b182      	cbz	r2, 8015a00 <nk_widget_fitting+0x40>
    if (!ctx || !ctx->current || !ctx->current->layout)
        return NK_WIDGET_INVALID;

    state = nk_widget(bounds, ctx);
 80159de:	f7ff fee1 	bl	80157a4 <nk_widget>
    return state;
}
 80159e2:	b003      	add	sp, #12
 80159e4:	f85d fb04 	ldr.w	pc, [sp], #4
    NK_ASSERT(ctx);
 80159e8:	4b08      	ldr	r3, [pc, #32]	; (8015a0c <nk_widget_fitting+0x4c>)
 80159ea:	4a09      	ldr	r2, [pc, #36]	; (8015a10 <nk_widget_fitting+0x50>)
 80159ec:	21be      	movs	r1, #190	; 0xbe
 80159ee:	4809      	ldr	r0, [pc, #36]	; (8015a14 <nk_widget_fitting+0x54>)
 80159f0:	f000 fdac 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 80159f4:	4b08      	ldr	r3, [pc, #32]	; (8015a18 <nk_widget_fitting+0x58>)
 80159f6:	4a06      	ldr	r2, [pc, #24]	; (8015a10 <nk_widget_fitting+0x50>)
 80159f8:	21bf      	movs	r1, #191	; 0xbf
 80159fa:	4806      	ldr	r0, [pc, #24]	; (8015a14 <nk_widget_fitting+0x54>)
 80159fc:	f000 fda6 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015a00:	4b06      	ldr	r3, [pc, #24]	; (8015a1c <nk_widget_fitting+0x5c>)
 8015a02:	4a03      	ldr	r2, [pc, #12]	; (8015a10 <nk_widget_fitting+0x50>)
 8015a04:	21c0      	movs	r1, #192	; 0xc0
 8015a06:	4803      	ldr	r0, [pc, #12]	; (8015a14 <nk_widget_fitting+0x54>)
 8015a08:	f000 fda0 	bl	801654c <__assert_func>
 8015a0c:	0801ad58 	.word	0x0801ad58
 8015a10:	0801bbcc 	.word	0x0801bbcc
 8015a14:	0801bbb0 	.word	0x0801bbb0
 8015a18:	0801ad5c 	.word	0x0801ad5c
 8015a1c:	0801ad6c 	.word	0x0801ad6c

08015a20 <nk_create_window>:
 *                              WINDOW
 *
 * ===============================================================*/
NK_LIB void*
nk_create_window(struct nk_context *ctx)
{
 8015a20:	b510      	push	{r4, lr}
 8015a22:	4604      	mov	r4, r0
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8015a24:	f7f7 ffe4 	bl	800d9f0 <nk_create_page_element>
    if (!elem) return 0;
 8015a28:	b120      	cbz	r0, 8015a34 <nk_create_window+0x14>
    elem->data.win.seq = ctx->seq;
 8015a2a:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 8015a2e:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8015a32:	6003      	str	r3, [r0, #0]
    return &elem->data.win;
}
 8015a34:	bd10      	pop	{r4, pc}

08015a36 <nk_free_window>:
NK_LIB void
nk_free_window(struct nk_context *ctx, struct nk_window *win)
{
 8015a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a38:	4607      	mov	r7, r0
 8015a3a:	460e      	mov	r6, r1
    /* unlink windows from list */
    struct nk_table *it = win->tables;
 8015a3c:	f8d1 4170 	ldr.w	r4, [r1, #368]	; 0x170
    if (win->popup.win) {
 8015a40:	f8d1 10fc 	ldr.w	r1, [r1, #252]	; 0xfc
 8015a44:	b121      	cbz	r1, 8015a50 <nk_free_window+0x1a>
        nk_free_window(ctx, win->popup.win);
 8015a46:	f7ff fff6 	bl	8015a36 <nk_free_window>
        win->popup.win = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
    }
    win->next = 0;
 8015a50:	2300      	movs	r3, #0
 8015a52:	f8c6 3178 	str.w	r3, [r6, #376]	; 0x178
    win->prev = 0;
 8015a56:	f8c6 317c 	str.w	r3, [r6, #380]	; 0x17c

    while (it) {
 8015a5a:	b194      	cbz	r4, 8015a82 <nk_free_window+0x4c>
        /*free window state tables */
        struct nk_table *n = it->next;
 8015a5c:	4625      	mov	r5, r4
 8015a5e:	f8d4 41a0 	ldr.w	r4, [r4, #416]	; 0x1a0
        nk_remove_table(win, it);
 8015a62:	4629      	mov	r1, r5
 8015a64:	4630      	mov	r0, r6
 8015a66:	f7fd f85f 	bl	8012b28 <nk_remove_table>
        nk_free_table(ctx, it);
 8015a6a:	4629      	mov	r1, r5
 8015a6c:	4638      	mov	r0, r7
 8015a6e:	f7fd f839 	bl	8012ae4 <nk_free_table>
        if (it == win->tables)
 8015a72:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
 8015a76:	42ab      	cmp	r3, r5
            win->tables = n;
 8015a78:	bf08      	it	eq
 8015a7a:	f8c6 4170 	streq.w	r4, [r6, #368]	; 0x170
    while (it) {
 8015a7e:	2c00      	cmp	r4, #0
 8015a80:	d1ec      	bne.n	8015a5c <nk_free_window+0x26>
    }

    /* link windows into freelist */
    {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
    nk_free_page_element(ctx, pe);}
 8015a82:	4631      	mov	r1, r6
 8015a84:	4638      	mov	r0, r7
 8015a86:	f7f8 f803 	bl	800da90 <nk_free_page_element>
}
 8015a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015a8c <nk_find_window>:
NK_LIB struct nk_window*
nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)
{
 8015a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a8e:	460d      	mov	r5, r1
 8015a90:	4617      	mov	r7, r2
    struct nk_window *iter;
    iter = ctx->begin;
 8015a92:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8015a96:	f8d0 464c 	ldr.w	r4, [r0, #1612]	; 0x64c
    while (iter) {
 8015a9a:	b94c      	cbnz	r4, 8015ab0 <nk_find_window+0x24>
 8015a9c:	e01b      	b.n	8015ad6 <nk_find_window+0x4a>
        NK_ASSERT(iter != iter->next);
 8015a9e:	4b0f      	ldr	r3, [pc, #60]	; (8015adc <nk_find_window+0x50>)
 8015aa0:	4a0f      	ldr	r2, [pc, #60]	; (8015ae0 <nk_find_window+0x54>)
 8015aa2:	2133      	movs	r1, #51	; 0x33
 8015aa4:	480f      	ldr	r0, [pc, #60]	; (8015ae4 <nk_find_window+0x58>)
 8015aa6:	f000 fd51 	bl	801654c <__assert_func>
        if (iter->name == hash) {
            int max_len = nk_strlen(iter->name_string);
            if (!nk_stricmpn(iter->name_string, name, max_len))
                return iter;
        }
        iter = iter->next;
 8015aaa:	f8d4 4178 	ldr.w	r4, [r4, #376]	; 0x178
    while (iter) {
 8015aae:	b194      	cbz	r4, 8015ad6 <nk_find_window+0x4a>
        NK_ASSERT(iter != iter->next);
 8015ab0:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 8015ab4:	42a3      	cmp	r3, r4
 8015ab6:	d0f2      	beq.n	8015a9e <nk_find_window+0x12>
        if (iter->name == hash) {
 8015ab8:	6863      	ldr	r3, [r4, #4]
 8015aba:	42ab      	cmp	r3, r5
 8015abc:	d1f5      	bne.n	8015aaa <nk_find_window+0x1e>
            int max_len = nk_strlen(iter->name_string);
 8015abe:	f104 0608 	add.w	r6, r4, #8
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	f7ff f974 	bl	8014db0 <nk_strlen>
            if (!nk_stricmpn(iter->name_string, name, max_len))
 8015ac8:	4602      	mov	r2, r0
 8015aca:	4639      	mov	r1, r7
 8015acc:	4630      	mov	r0, r6
 8015ace:	f7ff fabb 	bl	8015048 <nk_stricmpn>
 8015ad2:	2800      	cmp	r0, #0
 8015ad4:	d1e9      	bne.n	8015aaa <nk_find_window+0x1e>
    }
    return 0;
}
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ada:	bf00      	nop
 8015adc:	0801bbec 	.word	0x0801bbec
 8015ae0:	0801bd7c 	.word	0x0801bd7c
 8015ae4:	0801bc00 	.word	0x0801bc00

08015ae8 <nk_insert_window>:
NK_LIB void
nk_insert_window(struct nk_context *ctx, struct nk_window *win,
    enum nk_window_insert_location loc)
{
 8015ae8:	b510      	push	{r4, lr}
    const struct nk_window *iter;
    NK_ASSERT(ctx);
 8015aea:	b178      	cbz	r0, 8015b0c <nk_insert_window+0x24>
 8015aec:	4684      	mov	ip, r0
    NK_ASSERT(win);
 8015aee:	b199      	cbz	r1, 8015b18 <nk_insert_window+0x30>
    if (!win || !ctx) return;

    iter = ctx->begin;
 8015af0:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8015af4:	f8d0 464c 	ldr.w	r4, [r0, #1612]	; 0x64c
 8015af8:	4623      	mov	r3, r4
    while (iter) {
 8015afa:	b1fb      	cbz	r3, 8015b3c <nk_insert_window+0x54>
        NK_ASSERT(iter != iter->next);
 8015afc:	f8d3 0178 	ldr.w	r0, [r3, #376]	; 0x178
 8015b00:	4298      	cmp	r0, r3
 8015b02:	d00f      	beq.n	8015b24 <nk_insert_window+0x3c>
        NK_ASSERT(iter != win);
 8015b04:	428b      	cmp	r3, r1
 8015b06:	d013      	beq.n	8015b30 <nk_insert_window+0x48>
        if (iter == win) return;
        iter = iter->next;
 8015b08:	4603      	mov	r3, r0
 8015b0a:	e7f6      	b.n	8015afa <nk_insert_window+0x12>
    NK_ASSERT(ctx);
 8015b0c:	4b2c      	ldr	r3, [pc, #176]	; (8015bc0 <nk_insert_window+0xd8>)
 8015b0e:	4a2d      	ldr	r2, [pc, #180]	; (8015bc4 <nk_insert_window+0xdc>)
 8015b10:	2142      	movs	r1, #66	; 0x42
 8015b12:	482d      	ldr	r0, [pc, #180]	; (8015bc8 <nk_insert_window+0xe0>)
 8015b14:	f000 fd1a 	bl	801654c <__assert_func>
    NK_ASSERT(win);
 8015b18:	4b2c      	ldr	r3, [pc, #176]	; (8015bcc <nk_insert_window+0xe4>)
 8015b1a:	4a2a      	ldr	r2, [pc, #168]	; (8015bc4 <nk_insert_window+0xdc>)
 8015b1c:	2143      	movs	r1, #67	; 0x43
 8015b1e:	482a      	ldr	r0, [pc, #168]	; (8015bc8 <nk_insert_window+0xe0>)
 8015b20:	f000 fd14 	bl	801654c <__assert_func>
        NK_ASSERT(iter != iter->next);
 8015b24:	4b2a      	ldr	r3, [pc, #168]	; (8015bd0 <nk_insert_window+0xe8>)
 8015b26:	4a27      	ldr	r2, [pc, #156]	; (8015bc4 <nk_insert_window+0xdc>)
 8015b28:	2148      	movs	r1, #72	; 0x48
 8015b2a:	4827      	ldr	r0, [pc, #156]	; (8015bc8 <nk_insert_window+0xe0>)
 8015b2c:	f000 fd0e 	bl	801654c <__assert_func>
        NK_ASSERT(iter != win);
 8015b30:	4b28      	ldr	r3, [pc, #160]	; (8015bd4 <nk_insert_window+0xec>)
 8015b32:	4a24      	ldr	r2, [pc, #144]	; (8015bc4 <nk_insert_window+0xdc>)
 8015b34:	2149      	movs	r1, #73	; 0x49
 8015b36:	4824      	ldr	r0, [pc, #144]	; (8015bc8 <nk_insert_window+0xe0>)
 8015b38:	f000 fd08 	bl	801654c <__assert_func>
    }

    if (!ctx->begin) {
 8015b3c:	b31c      	cbz	r4, 8015b86 <nk_insert_window+0x9e>
        ctx->begin = win;
        ctx->end = win;
        ctx->count = 1;
        return;
    }
    if (loc == NK_INSERT_BACK) {
 8015b3e:	bb72      	cbnz	r2, 8015b9e <nk_insert_window+0xb6>
        struct nk_window *end;
        end = ctx->end;
 8015b40:	f50c 5240 	add.w	r2, ip, #12288	; 0x3000
 8015b44:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
        end->flags |= NK_WINDOW_ROM;
 8015b48:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8015b4a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8015b4e:	6498      	str	r0, [r3, #72]	; 0x48
        end->next = win;
 8015b50:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
        win->prev = ctx->end;
 8015b54:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
 8015b58:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
        win->next = 0;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
        ctx->end = win;
 8015b62:	f8c2 1650 	str.w	r1, [r2, #1616]	; 0x650
        ctx->active = ctx->end;
 8015b66:	f8c2 1654 	str.w	r1, [r2, #1620]	; 0x654
        ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8015b6a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8015b6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015b70:	648a      	str	r2, [r1, #72]	; 0x48
        win->next = ctx->begin;
        win->prev = 0;
        ctx->begin = win;
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
    }
    ctx->count++;
 8015b72:	f50c 5340 	add.w	r3, ip, #12288	; 0x3000
 8015b76:	f8d3 2660 	ldr.w	r2, [r3, #1632]	; 0x660
 8015b7a:	3201      	adds	r2, #1
 8015b7c:	f50c 5340 	add.w	r3, ip, #12288	; 0x3000
 8015b80:	f8c3 2660 	str.w	r2, [r3, #1632]	; 0x660
}
 8015b84:	bd10      	pop	{r4, pc}
        win->next = 0;
 8015b86:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
        win->prev = 0;
 8015b8a:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
        ctx->begin = win;
 8015b8e:	f50c 5340 	add.w	r3, ip, #12288	; 0x3000
 8015b92:	f8c3 164c 	str.w	r1, [r3, #1612]	; 0x64c
        ctx->end = win;
 8015b96:	f8c3 1650 	str.w	r1, [r3, #1616]	; 0x650
        return;
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	e7ee      	b.n	8015b7c <nk_insert_window+0x94>
        ctx->begin->prev = win;
 8015b9e:	f8c4 117c 	str.w	r1, [r4, #380]	; 0x17c
        win->next = ctx->begin;
 8015ba2:	f50c 5340 	add.w	r3, ip, #12288	; 0x3000
 8015ba6:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
 8015baa:	f8c1 2178 	str.w	r2, [r1, #376]	; 0x178
        win->prev = 0;
 8015bae:	2200      	movs	r2, #0
 8015bb0:	f8c1 217c 	str.w	r2, [r1, #380]	; 0x17c
        ctx->begin = win;
 8015bb4:	f8c3 164c 	str.w	r1, [r3, #1612]	; 0x64c
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8015bb8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8015bba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015bbe:	e7d7      	b.n	8015b70 <nk_insert_window+0x88>
 8015bc0:	0801ad58 	.word	0x0801ad58
 8015bc4:	0801bd68 	.word	0x0801bd68
 8015bc8:	0801bc00 	.word	0x0801bc00
 8015bcc:	0801bc24 	.word	0x0801bc24
 8015bd0:	0801bbec 	.word	0x0801bbec
 8015bd4:	0801bc1c 	.word	0x0801bc1c

08015bd8 <nk_remove_window>:
NK_LIB void
nk_remove_window(struct nk_context *ctx, struct nk_window *win)
{
    if (win == ctx->begin || win == ctx->end) {
 8015bd8:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8015bdc:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8015be0:	428b      	cmp	r3, r1
 8015be2:	d014      	beq.n	8015c0e <nk_remove_window+0x36>
 8015be4:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8015be8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8015bec:	428b      	cmp	r3, r1
 8015bee:	d032      	beq.n	8015c56 <nk_remove_window+0x7e>
            ctx->end = win->prev;
            if (win->prev)
                win->prev->next = 0;
        }
    } else {
        if (win->next)
 8015bf0:	f8d1 3178 	ldr.w	r3, [r1, #376]	; 0x178
 8015bf4:	b11b      	cbz	r3, 8015bfe <nk_remove_window+0x26>
            win->next->prev = win->prev;
 8015bf6:	f8d1 217c 	ldr.w	r2, [r1, #380]	; 0x17c
 8015bfa:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win->prev)
 8015bfe:	f8d1 317c 	ldr.w	r3, [r1, #380]	; 0x17c
 8015c02:	b1a3      	cbz	r3, 8015c2e <nk_remove_window+0x56>
            win->prev->next = win->next;
 8015c04:	f8d1 2178 	ldr.w	r2, [r1, #376]	; 0x178
 8015c08:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8015c0c:	e00f      	b.n	8015c2e <nk_remove_window+0x56>
            ctx->begin = win->next;
 8015c0e:	f8d1 3178 	ldr.w	r3, [r1, #376]	; 0x178
 8015c12:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8015c16:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (win->next)
 8015c1a:	b113      	cbz	r3, 8015c22 <nk_remove_window+0x4a>
                win->next->prev = 0;
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win == ctx->end) {
 8015c22:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8015c26:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8015c2a:	428b      	cmp	r3, r1
 8015c2c:	d013      	beq.n	8015c56 <nk_remove_window+0x7e>
    }
    if (win == ctx->active || !ctx->active) {
 8015c2e:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8015c32:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015c36:	428b      	cmp	r3, r1
 8015c38:	d018      	beq.n	8015c6c <nk_remove_window+0x94>
 8015c3a:	b1bb      	cbz	r3, 8015c6c <nk_remove_window+0x94>
        ctx->active = ctx->end;
        if (ctx->end)
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
    }
    win->next = 0;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
    win->prev = 0;
 8015c42:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
    ctx->count--;
 8015c46:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8015c4a:	f8d0 3660 	ldr.w	r3, [r0, #1632]	; 0x660
 8015c4e:	3b01      	subs	r3, #1
 8015c50:	f8c0 3660 	str.w	r3, [r0, #1632]	; 0x660
}
 8015c54:	4770      	bx	lr
            ctx->end = win->prev;
 8015c56:	f8d1 317c 	ldr.w	r3, [r1, #380]	; 0x17c
 8015c5a:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8015c5e:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (win->prev)
 8015c62:	b183      	cbz	r3, 8015c86 <nk_remove_window+0xae>
                win->prev->next = 0;
 8015c64:	2200      	movs	r2, #0
 8015c66:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8015c6a:	e7e0      	b.n	8015c2e <nk_remove_window+0x56>
        ctx->active = ctx->end;
 8015c6c:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8015c70:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
 8015c74:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        if (ctx->end)
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d0df      	beq.n	8015c3c <nk_remove_window+0x64>
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8015c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015c7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015c82:	649a      	str	r2, [r3, #72]	; 0x48
 8015c84:	e7da      	b.n	8015c3c <nk_remove_window+0x64>
    if (win == ctx->active || !ctx->active) {
 8015c86:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8015c8a:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015c8e:	4299      	cmp	r1, r3
 8015c90:	d1d3      	bne.n	8015c3a <nk_remove_window+0x62>
        ctx->active = ctx->end;
 8015c92:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8015c96:	2200      	movs	r2, #0
 8015c98:	f8c3 2654 	str.w	r2, [r3, #1620]	; 0x654
        if (ctx->end)
 8015c9c:	e7ce      	b.n	8015c3c <nk_remove_window+0x64>
	...

08015ca0 <nk_begin_titled>:
    return nk_begin_titled(ctx, title, title, bounds, flags);
}
NK_API nk_bool
nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 8015ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ca4:	ed2d 8b06 	vpush	{d8-d10}
 8015ca8:	b090      	sub	sp, #64	; 0x40
 8015caa:	ed8d 0a00 	vstr	s0, [sp]
 8015cae:	edcd 0a01 	vstr	s1, [sp, #4]
 8015cb2:	ed8d 1a02 	vstr	s2, [sp, #8]
 8015cb6:	edcd 1a03 	vstr	s3, [sp, #12]
    struct nk_style *style;
    nk_hash name_hash;
    int name_len;
    int ret = 0;

    NK_ASSERT(ctx);
 8015cba:	2800      	cmp	r0, #0
 8015cbc:	f000 80cf 	beq.w	8015e5e <nk_begin_titled+0x1be>
 8015cc0:	460c      	mov	r4, r1
 8015cc2:	4617      	mov	r7, r2
 8015cc4:	4699      	mov	r9, r3
 8015cc6:	4606      	mov	r6, r0
    NK_ASSERT(name);
 8015cc8:	2900      	cmp	r1, #0
 8015cca:	f000 80ce 	beq.w	8015e6a <nk_begin_titled+0x1ca>
    NK_ASSERT(title);
 8015cce:	2a00      	cmp	r2, #0
 8015cd0:	f000 80d1 	beq.w	8015e76 <nk_begin_titled+0x1d6>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 8015cd4:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f000 80d2 	beq.w	8015e82 <nk_begin_titled+0x1e2>
 8015cde:	689b      	ldr	r3, [r3, #8]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	f000 80ce 	beq.w	8015e82 <nk_begin_titled+0x1e2>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 8015ce6:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8015cea:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f040 80cd 	bne.w	8015e8e <nk_begin_titled+0x1ee>
    if (!ctx || ctx->current || !title || !name)
        return 0;

    /* find or create window */
    style = &ctx->style;
    name_len = (int)nk_strlen(name);
 8015cf4:	4608      	mov	r0, r1
 8015cf6:	f7ff f85b 	bl	8014db0 <nk_strlen>
 8015cfa:	4680      	mov	r8, r0
    name_hash = nk_murmur_hash(name, (int)name_len, NK_WINDOW_TITLE);
 8015cfc:	2240      	movs	r2, #64	; 0x40
 8015cfe:	4601      	mov	r1, r0
 8015d00:	4620      	mov	r0, r4
 8015d02:	f7ff fb7d 	bl	8015400 <nk_murmur_hash>
 8015d06:	4682      	mov	sl, r0
    win = nk_find_window(ctx, name_hash, name);
 8015d08:	4622      	mov	r2, r4
 8015d0a:	4601      	mov	r1, r0
 8015d0c:	4630      	mov	r0, r6
 8015d0e:	f7ff febd 	bl	8015a8c <nk_find_window>
    if (!win) {
 8015d12:	4605      	mov	r5, r0
 8015d14:	2800      	cmp	r0, #0
 8015d16:	f000 80c0 	beq.w	8015e9a <nk_begin_titled+0x1fa>
        win->popup.win = 0;
        if (!ctx->active)
            ctx->active = win;
    } else {
        /* update window */
        win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);
 8015d1a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8015d1c:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8015d20:	f020 0007 	bic.w	r0, r0, #7
        win->flags |= flags;
 8015d24:	ea40 0409 	orr.w	r4, r0, r9
 8015d28:	64ac      	str	r4, [r5, #72]	; 0x48
        if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))
 8015d2a:	f014 0f06 	tst.w	r4, #6
 8015d2e:	d105      	bne.n	8015d3c <nk_begin_titled+0x9c>
            win->bounds = bounds;
 8015d30:	f105 0c4c 	add.w	ip, r5, #76	; 0x4c
 8015d34:	466b      	mov	r3, sp
 8015d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
         * I.) Have more than one window with the same name or
         * II.) You forgot to actually draw the window.
         *      More specific you did not call `nk_clear` (nk_clear will be
         *      automatically called for you if you are using one of the
         *      provided demo backends). */
        NK_ASSERT(win->seq != ctx->seq);
 8015d3c:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015d40:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8015d44:	682a      	ldr	r2, [r5, #0]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	f000 80ea 	beq.w	8015f20 <nk_begin_titled+0x280>
        win->seq = ctx->seq;
 8015d4c:	602b      	str	r3, [r5, #0]
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 8015d4e:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015d52:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	f000 80e8 	beq.w	8015f2c <nk_begin_titled+0x28c>
            ctx->active = win;
            ctx->end = win;
        }
    }
    if (win->flags & NK_WINDOW_HIDDEN) {
 8015d5c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8015d5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8015d62:	f040 80ed 	bne.w	8015f40 <nk_begin_titled+0x2a0>
        ctx->current = win;
        win->layout = 0;
        return 0;
    } else nk_start(ctx, win);
 8015d66:	4629      	mov	r1, r5
 8015d68:	4630      	mov	r0, r6
 8015d6a:	f7f4 fd21 	bl	800a7b0 <nk_start>

    /* window overlapping */
    if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))
 8015d6e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8015d70:	f413 5f10 	tst.w	r3, #9216	; 0x2400
 8015d74:	f040 8269 	bne.w	801624a <nk_begin_titled+0x5aa>
    {
        int inpanel, ishovered;
        struct nk_window *iter = win;
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 8015d78:	f8d6 1168 	ldr.w	r1, [r6, #360]	; 0x168
 8015d7c:	f506 5280 	add.w	r2, r6, #4096	; 0x1000
 8015d80:	f602 10ac 	addw	r0, r2, #2476	; 0x9ac
 8015d84:	ed90 8a00 	vldr	s16, [r0]
 8015d88:	ee38 8a08 	vadd.f32	s16, s16, s16
 8015d8c:	edd1 7a01 	vldr	s15, [r1, #4]
 8015d90:	ee38 8a27 	vadd.f32	s16, s16, s15
            (2.0f * style->window.header.label_padding.y);
 8015d94:	f602 12b4 	addw	r2, r2, #2484	; 0x9b4
 8015d98:	edd2 7a00 	vldr	s15, [r2]
 8015d9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 8015da0:	ee38 8a27 	vadd.f32	s16, s16, s15
        struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
 8015da4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8015da8:	f040 80d6 	bne.w	8015f58 <nk_begin_titled+0x2b8>
 8015dac:	edd5 8a13 	vldr	s17, [r5, #76]	; 0x4c
 8015db0:	edd5 9a14 	vldr	s19, [r5, #80]	; 0x50
 8015db4:	ed95 9a15 	vldr	s18, [r5, #84]	; 0x54
 8015db8:	ed95 aa16 	vldr	s20, [r5, #88]	; 0x58
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);

        /* activate window if hovered and no other window is overlapping this window */
        inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);
 8015dbc:	edcd 8a04 	vstr	s17, [sp, #16]
 8015dc0:	edcd 9a05 	vstr	s19, [sp, #20]
 8015dc4:	ed8d 9a06 	vstr	s18, [sp, #24]
 8015dc8:	ed8d aa07 	vstr	s20, [sp, #28]
 8015dcc:	2201      	movs	r2, #1
 8015dce:	eeb0 0a68 	vmov.f32	s0, s17
 8015dd2:	eef0 0a69 	vmov.f32	s1, s19
 8015dd6:	eeb0 1a49 	vmov.f32	s2, s18
 8015dda:	eef0 1a4a 	vmov.f32	s3, s20
 8015dde:	2100      	movs	r1, #0
 8015de0:	4630      	mov	r0, r6
 8015de2:	f7f6 ff79 	bl	800ccd8 <nk_input_has_mouse_click_down_in_rect>
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 8015de6:	b120      	cbz	r0, 8015df2 <nk_begin_titled+0x152>
 8015de8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	f040 8202 	bne.w	80161f6 <nk_begin_titled+0x556>
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 8015df2:	ed9d 0a04 	vldr	s0, [sp, #16]
 8015df6:	eddd 0a05 	vldr	s1, [sp, #20]
 8015dfa:	ed9d 1a06 	vldr	s2, [sp, #24]
 8015dfe:	eddd 1a07 	vldr	s3, [sp, #28]
 8015e02:	4630      	mov	r0, r6
 8015e04:	f7f6 ffa0 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 8015e08:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015e0c:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015e10:	429d      	cmp	r5, r3
 8015e12:	f000 8206 	beq.w	8016222 <nk_begin_titled+0x582>
 8015e16:	f04f 0800 	mov.w	r8, #0
 8015e1a:	2800      	cmp	r0, #0
 8015e1c:	f000 81ba 	beq.w	8016194 <nk_begin_titled+0x4f4>
 8015e20:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	f040 81c5 	bne.w	80161b4 <nk_begin_titled+0x514>
            iter = win->next;
 8015e2a:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
            while (iter) {
 8015e2e:	2c00      	cmp	r4, #0
 8015e30:	f040 80bd 	bne.w	8015fae <nk_begin_titled+0x30e>
                 * at the highest priority in stack */
                nk_remove_window(ctx, iter);
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
            }
        } else {
            if (!iter && ctx->end != win) {
 8015e34:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015e38:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8015e3c:	42ab      	cmp	r3, r5
 8015e3e:	f000 8204 	beq.w	801624a <nk_begin_titled+0x5aa>
                if (!(win->flags & NK_WINDOW_BACKGROUND)) {
 8015e42:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8015e44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015e48:	f000 8187 	beq.w	801615a <nk_begin_titled+0x4ba>
                    /* current window is active in that position so transfer to top
                     * at the highest priority in stack */
                    nk_remove_window(ctx, win);
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
                }
                win->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8015e4c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8015e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e52:	64ab      	str	r3, [r5, #72]	; 0x48
                ctx->active = win;
 8015e54:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015e58:	f8c3 5654 	str.w	r5, [r3, #1620]	; 0x654
 8015e5c:	e1e8      	b.n	8016230 <nk_begin_titled+0x590>
    NK_ASSERT(ctx);
 8015e5e:	4bc4      	ldr	r3, [pc, #784]	; (8016170 <nk_begin_titled+0x4d0>)
 8015e60:	4ac4      	ldr	r2, [pc, #784]	; (8016174 <nk_begin_titled+0x4d4>)
 8015e62:	2197      	movs	r1, #151	; 0x97
 8015e64:	48c4      	ldr	r0, [pc, #784]	; (8016178 <nk_begin_titled+0x4d8>)
 8015e66:	f000 fb71 	bl	801654c <__assert_func>
    NK_ASSERT(name);
 8015e6a:	4bc4      	ldr	r3, [pc, #784]	; (801617c <nk_begin_titled+0x4dc>)
 8015e6c:	4ac1      	ldr	r2, [pc, #772]	; (8016174 <nk_begin_titled+0x4d4>)
 8015e6e:	2198      	movs	r1, #152	; 0x98
 8015e70:	48c1      	ldr	r0, [pc, #772]	; (8016178 <nk_begin_titled+0x4d8>)
 8015e72:	f000 fb6b 	bl	801654c <__assert_func>
    NK_ASSERT(title);
 8015e76:	4bc2      	ldr	r3, [pc, #776]	; (8016180 <nk_begin_titled+0x4e0>)
 8015e78:	4abe      	ldr	r2, [pc, #760]	; (8016174 <nk_begin_titled+0x4d4>)
 8015e7a:	2199      	movs	r1, #153	; 0x99
 8015e7c:	48be      	ldr	r0, [pc, #760]	; (8016178 <nk_begin_titled+0x4d8>)
 8015e7e:	f000 fb65 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 8015e82:	4bc0      	ldr	r3, [pc, #768]	; (8016184 <nk_begin_titled+0x4e4>)
 8015e84:	4abb      	ldr	r2, [pc, #748]	; (8016174 <nk_begin_titled+0x4d4>)
 8015e86:	219a      	movs	r1, #154	; 0x9a
 8015e88:	48bb      	ldr	r0, [pc, #748]	; (8016178 <nk_begin_titled+0x4d8>)
 8015e8a:	f000 fb5f 	bl	801654c <__assert_func>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 8015e8e:	4bbe      	ldr	r3, [pc, #760]	; (8016188 <nk_begin_titled+0x4e8>)
 8015e90:	4ab8      	ldr	r2, [pc, #736]	; (8016174 <nk_begin_titled+0x4d4>)
 8015e92:	219b      	movs	r1, #155	; 0x9b
 8015e94:	48b8      	ldr	r0, [pc, #736]	; (8016178 <nk_begin_titled+0x4d8>)
 8015e96:	f000 fb59 	bl	801654c <__assert_func>
        win = (struct nk_window*)nk_create_window(ctx);
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	f7ff fdc0 	bl	8015a20 <nk_create_window>
        NK_ASSERT(win);
 8015ea0:	4605      	mov	r5, r0
 8015ea2:	b3b8      	cbz	r0, 8015f14 <nk_begin_titled+0x274>
        if (flags & NK_WINDOW_BACKGROUND)
 8015ea4:	f419 7f80 	tst.w	r9, #256	; 0x100
            nk_insert_window(ctx, win, NK_INSERT_FRONT);
 8015ea8:	bf14      	ite	ne
 8015eaa:	2201      	movne	r2, #1
        else nk_insert_window(ctx, win, NK_INSERT_BACK);
 8015eac:	2200      	moveq	r2, #0
 8015eae:	4601      	mov	r1, r0
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	f7ff fe19 	bl	8015ae8 <nk_insert_window>
        nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);
 8015eb6:	2201      	movs	r2, #1
 8015eb8:	f506 51d4 	add.w	r1, r6, #6784	; 0x1a80
 8015ebc:	310c      	adds	r1, #12
 8015ebe:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8015ec2:	f7f4 ff7b 	bl	800adbc <nk_command_buffer_init>
        win->flags = flags;
 8015ec6:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
        win->bounds = bounds;
 8015eca:	f105 0c4c 	add.w	ip, r5, #76	; 0x4c
 8015ece:	466b      	mov	r3, sp
 8015ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ed2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        win->name = name_hash;
 8015ed6:	f8c5 a004 	str.w	sl, [r5, #4]
        name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);
 8015eda:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8015ede:	bf28      	it	cs
 8015ee0:	f04f 083f 	movcs.w	r8, #63	; 0x3f
        NK_MEMCPY(win->name_string, name, name_length);
 8015ee4:	4642      	mov	r2, r8
 8015ee6:	4621      	mov	r1, r4
 8015ee8:	f105 0008 	add.w	r0, r5, #8
 8015eec:	f7fe fe90 	bl	8014c10 <nk_memcopy>
        win->name_string[name_length] = 0;
 8015ef0:	44a8      	add	r8, r5
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	f888 3008 	strb.w	r3, [r8, #8]
        win->popup.win = 0;
 8015ef8:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
        if (!ctx->active)
 8015efc:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015f00:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	f47f af29 	bne.w	8015d5c <nk_begin_titled+0xbc>
            ctx->active = win;
 8015f0a:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015f0e:	f8c3 5654 	str.w	r5, [r3, #1620]	; 0x654
 8015f12:	e723      	b.n	8015d5c <nk_begin_titled+0xbc>
        NK_ASSERT(win);
 8015f14:	4b9d      	ldr	r3, [pc, #628]	; (801618c <nk_begin_titled+0x4ec>)
 8015f16:	4a97      	ldr	r2, [pc, #604]	; (8016174 <nk_begin_titled+0x4d4>)
 8015f18:	21a8      	movs	r1, #168	; 0xa8
 8015f1a:	4897      	ldr	r0, [pc, #604]	; (8016178 <nk_begin_titled+0x4d8>)
 8015f1c:	f000 fb16 	bl	801654c <__assert_func>
        NK_ASSERT(win->seq != ctx->seq);
 8015f20:	4b9b      	ldr	r3, [pc, #620]	; (8016190 <nk_begin_titled+0x4f0>)
 8015f22:	4a94      	ldr	r2, [pc, #592]	; (8016174 <nk_begin_titled+0x4d4>)
 8015f24:	21c6      	movs	r1, #198	; 0xc6
 8015f26:	4894      	ldr	r0, [pc, #592]	; (8016178 <nk_begin_titled+0x4d8>)
 8015f28:	f000 fb10 	bl	801654c <__assert_func>
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 8015f2c:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8015f30:	d106      	bne.n	8015f40 <nk_begin_titled+0x2a0>
            ctx->active = win;
 8015f32:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8015f36:	f8c3 5654 	str.w	r5, [r3, #1620]	; 0x654
            ctx->end = win;
 8015f3a:	f8c3 5650 	str.w	r5, [r3, #1616]	; 0x650
 8015f3e:	e70d      	b.n	8015d5c <nk_begin_titled+0xbc>
        ctx->current = win;
 8015f40:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 8015f44:	f8c6 5658 	str.w	r5, [r6, #1624]	; 0x658
        win->layout = 0;
 8015f48:	2000      	movs	r0, #0
 8015f4a:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
    ctx->current = win;
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
    win->layout->offset_x = &win->scrollbar.x;
    win->layout->offset_y = &win->scrollbar.y;
    return ret;
}
 8015f4e:	b010      	add	sp, #64	; 0x40
 8015f50:	ecbd 8b06 	vpop	{d8-d10}
 8015f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);
 8015f58:	eef0 1a48 	vmov.f32	s3, s16
 8015f5c:	ed95 1a15 	vldr	s2, [r5, #84]	; 0x54
 8015f60:	edd5 0a14 	vldr	s1, [r5, #80]	; 0x50
 8015f64:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
 8015f68:	f7f7 fc50 	bl	800d80c <nk_rect>
 8015f6c:	eef0 8a40 	vmov.f32	s17, s0
 8015f70:	eef0 9a60 	vmov.f32	s19, s1
 8015f74:	eeb0 9a41 	vmov.f32	s18, s2
 8015f78:	eeb0 aa61 	vmov.f32	s20, s3
 8015f7c:	e71e      	b.n	8015dbc <nk_begin_titled+0x11c>
                    iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 8015f7e:	eef0 1a48 	vmov.f32	s3, s16
 8015f82:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8015f86:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 8015f8a:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 8015f8e:	f7f7 fc3d 	bl	800d80c <nk_rect>
 8015f92:	ed8d 0a08 	vstr	s0, [sp, #32]
 8015f96:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 8015f9a:	ed8d 1a0a 	vstr	s2, [sp, #40]	; 0x28
 8015f9e:	edcd 1a0b 	vstr	s3, [sp, #44]	; 0x2c
 8015fa2:	e010      	b.n	8015fc6 <nk_begin_titled+0x326>
                iter = iter->next;
 8015fa4:	f8d4 4178 	ldr.w	r4, [r4, #376]	; 0x178
            while (iter) {
 8015fa8:	2c00      	cmp	r4, #0
 8015faa:	f43f af43 	beq.w	8015e34 <nk_begin_titled+0x194>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 8015fae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8015fb0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8015fb4:	d1e3      	bne.n	8015f7e <nk_begin_titled+0x2de>
 8015fb6:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 8015fba:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 8015fbe:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8015fc2:	edd4 1a16 	vldr	s3, [r4, #88]	; 0x58
                if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8015fc6:	ee79 7a28 	vadd.f32	s15, s18, s17
 8015fca:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd2:	dd19      	ble.n	8016008 <nk_begin_titled+0x368>
 8015fd4:	ee30 0a01 	vadd.f32	s0, s0, s2
 8015fd8:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8015fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe0:	dd12      	ble.n	8016008 <nk_begin_titled+0x368>
 8015fe2:	ee79 7a8a 	vadd.f32	s15, s19, s20
 8015fe6:	eef4 7ae0 	vcmpe.f32	s15, s1
 8015fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fee:	dd0b      	ble.n	8016008 <nk_begin_titled+0x368>
 8015ff0:	ee70 0aa1 	vadd.f32	s1, s1, s3
 8015ff4:	eef4 0ae9 	vcmpe.f32	s1, s19
 8015ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ffc:	dd04      	ble.n	8016008 <nk_begin_titled+0x368>
                    (!(iter->flags & NK_WINDOW_HIDDEN)))
 8015ffe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 8016000:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8016004:	f000 80c7 	beq.w	8016196 <nk_begin_titled+0x4f6>
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 8016008:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801600c:	2b00      	cmp	r3, #0
 801600e:	d0c9      	beq.n	8015fa4 <nk_begin_titled+0x304>
 8016010:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8016014:	2a00      	cmp	r2, #0
 8016016:	d0c5      	beq.n	8015fa4 <nk_begin_titled+0x304>
 8016018:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801601a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 801601e:	d1c1      	bne.n	8015fa4 <nk_begin_titled+0x304>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8016020:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8016024:	ed95 7a13 	vldr	s14, [r5, #76]	; 0x4c
 8016028:	ee77 6a09 	vadd.f32	s13, s14, s18
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801602c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016034:	d5b6      	bpl.n	8015fa4 <nk_begin_titled+0x304>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8016036:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801603e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016046:	d5ad      	bpl.n	8015fa4 <nk_begin_titled+0x304>
 8016048:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801604c:	ee39 7a8a 	vadd.f32	s14, s19, s20
 8016050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016058:	d5a4      	bpl.n	8015fa4 <nk_begin_titled+0x304>
 801605a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801605e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016062:	eef4 7ae9 	vcmpe.f32	s15, s19
 8016066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801606a:	dd9b      	ble.n	8015fa4 <nk_begin_titled+0x304>
 801606c:	e093      	b.n	8016196 <nk_begin_titled+0x4f6>
                iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801606e:	eef0 1a48 	vmov.f32	s3, s16
 8016072:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8016076:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 801607a:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 801607e:	f7f7 fbc5 	bl	800d80c <nk_rect>
 8016082:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8016086:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 801608a:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
 801608e:	edcd 1a0f 	vstr	s3, [sp, #60]	; 0x3c
 8016092:	e010      	b.n	80160b6 <nk_begin_titled+0x416>
                iter = iter->next;
 8016094:	f8d4 4178 	ldr.w	r4, [r4, #376]	; 0x178
            while (iter) {
 8016098:	2c00      	cmp	r4, #0
 801609a:	f43f aecb 	beq.w	8015e34 <nk_begin_titled+0x194>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801609e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80160a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80160a4:	d1e3      	bne.n	801606e <nk_begin_titled+0x3ce>
 80160a6:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
 80160aa:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 80160ae:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 80160b2:	edd4 1a16 	vldr	s3, [r4, #88]	; 0x58
                if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
 80160b6:	edd6 7a51 	vldr	s15, [r6, #324]	; 0x144
 80160ba:	eef4 7ac0 	vcmpe.f32	s15, s0
 80160be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c2:	db19      	blt.n	80160f8 <nk_begin_titled+0x458>
 80160c4:	ee30 0a01 	vadd.f32	s0, s0, s2
 80160c8:	eef4 7ac0 	vcmpe.f32	s15, s0
 80160cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d0:	d512      	bpl.n	80160f8 <nk_begin_titled+0x458>
 80160d2:	edd6 7a52 	vldr	s15, [r6, #328]	; 0x148
 80160d6:	eef4 7ae0 	vcmpe.f32	s15, s1
 80160da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160de:	db0b      	blt.n	80160f8 <nk_begin_titled+0x458>
 80160e0:	ee70 0aa1 	vadd.f32	s1, s1, s3
 80160e4:	eef4 7ae0 	vcmpe.f32	s15, s1
 80160e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160ec:	d504      	bpl.n	80160f8 <nk_begin_titled+0x458>
                    !(iter->flags & NK_WINDOW_HIDDEN))
 80160ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 80160f0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80160f4:	f000 8096 	beq.w	8016224 <nk_begin_titled+0x584>
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 80160f8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d0c9      	beq.n	8016094 <nk_begin_titled+0x3f4>
 8016100:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8016104:	2a00      	cmp	r2, #0
 8016106:	d0c5      	beq.n	8016094 <nk_begin_titled+0x3f4>
 8016108:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801610a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 801610e:	d1c1      	bne.n	8016094 <nk_begin_titled+0x3f4>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8016110:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8016114:	ee39 7a28 	vadd.f32	s14, s18, s17
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 8016118:	eef4 7ac7 	vcmpe.f32	s15, s14
 801611c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016120:	d5b8      	bpl.n	8016094 <nk_begin_titled+0x3f4>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8016122:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8016126:	ee77 7a87 	vadd.f32	s15, s15, s14
 801612a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016132:	ddaf      	ble.n	8016094 <nk_begin_titled+0x3f4>
 8016134:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8016138:	ee39 7a8a 	vadd.f32	s14, s19, s20
 801613c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016144:	d5a6      	bpl.n	8016094 <nk_begin_titled+0x3f4>
 8016146:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801614a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801614e:	eef4 7ae9 	vcmpe.f32	s15, s19
 8016152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016156:	dd9d      	ble.n	8016094 <nk_begin_titled+0x3f4>
 8016158:	e064      	b.n	8016224 <nk_begin_titled+0x584>
                    nk_remove_window(ctx, win);
 801615a:	4629      	mov	r1, r5
 801615c:	4630      	mov	r0, r6
 801615e:	f7ff fd3b 	bl	8015bd8 <nk_remove_window>
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
 8016162:	2200      	movs	r2, #0
 8016164:	4629      	mov	r1, r5
 8016166:	4630      	mov	r0, r6
 8016168:	f7ff fcbe 	bl	8015ae8 <nk_insert_window>
 801616c:	e66e      	b.n	8015e4c <nk_begin_titled+0x1ac>
 801616e:	bf00      	nop
 8016170:	0801ad58 	.word	0x0801ad58
 8016174:	0801bd58 	.word	0x0801bd58
 8016178:	0801bc00 	.word	0x0801bc00
 801617c:	0801b650 	.word	0x0801b650
 8016180:	0801b524 	.word	0x0801b524
 8016184:	0801bc28 	.word	0x0801bc28
 8016188:	0801bc84 	.word	0x0801bc84
 801618c:	0801bc24 	.word	0x0801bc24
 8016190:	0801bcc4 	.word	0x0801bcc4
 8016194:	462c      	mov	r4, r5
        if (iter && inpanel && (win != ctx->end)) {
 8016196:	f1b8 0f00 	cmp.w	r8, #0
 801619a:	d043      	beq.n	8016224 <nk_begin_titled+0x584>
 801619c:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 80161a0:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 80161a4:	42ab      	cmp	r3, r5
 80161a6:	d007      	beq.n	80161b8 <nk_begin_titled+0x518>
            iter = win->next;
 80161a8:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
            while (iter) {
 80161ac:	2c00      	cmp	r4, #0
 80161ae:	f47f af76 	bne.w	801609e <nk_begin_titled+0x3fe>
 80161b2:	e646      	b.n	8015e42 <nk_begin_titled+0x1a2>
 80161b4:	462c      	mov	r4, r5
 80161b6:	e7ee      	b.n	8016196 <nk_begin_titled+0x4f6>
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 80161b8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80161ba:	f403 5288 	and.w	r2, r3, #4352	; 0x1100
 80161be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80161c2:	d142      	bne.n	801624a <nk_begin_titled+0x5aa>
            win->flags |= (nk_flags)NK_WINDOW_ROM;
 80161c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80161c8:	64ab      	str	r3, [r5, #72]	; 0x48
            iter->flags &= ~(nk_flags)NK_WINDOW_ROM;
 80161ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80161cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80161d0:	64a3      	str	r3, [r4, #72]	; 0x48
            ctx->active = iter;
 80161d2:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 80161d6:	f8c3 4654 	str.w	r4, [r3, #1620]	; 0x654
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 80161da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80161dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80161e0:	d133      	bne.n	801624a <nk_begin_titled+0x5aa>
                nk_remove_window(ctx, iter);
 80161e2:	4621      	mov	r1, r4
 80161e4:	4630      	mov	r0, r6
 80161e6:	f7ff fcf7 	bl	8015bd8 <nk_remove_window>
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
 80161ea:	2200      	movs	r2, #0
 80161ec:	4621      	mov	r1, r4
 80161ee:	4630      	mov	r0, r6
 80161f0:	f7ff fc7a 	bl	8015ae8 <nk_insert_window>
 80161f4:	e029      	b.n	801624a <nk_begin_titled+0x5aa>
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 80161f6:	ed9d 0a04 	vldr	s0, [sp, #16]
 80161fa:	eddd 0a05 	vldr	s1, [sp, #20]
 80161fe:	ed9d 1a06 	vldr	s2, [sp, #24]
 8016202:	eddd 1a07 	vldr	s3, [sp, #28]
 8016206:	4630      	mov	r0, r6
 8016208:	f7f6 fd9e 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 801620c:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8016210:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8016214:	429d      	cmp	r5, r3
 8016216:	d002      	beq.n	801621e <nk_begin_titled+0x57e>
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 8016218:	f04f 0801 	mov.w	r8, #1
 801621c:	e5fd      	b.n	8015e1a <nk_begin_titled+0x17a>
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 801621e:	462c      	mov	r4, r5
 8016220:	e7bc      	b.n	801619c <nk_begin_titled+0x4fc>
 8016222:	462c      	mov	r4, r5
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 8016224:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8016226:	f403 5288 	and.w	r2, r3, #4352	; 0x1100
 801622a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801622e:	d0c9      	beq.n	80161c4 <nk_begin_titled+0x524>
            if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))
 8016230:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8016234:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8016238:	42ab      	cmp	r3, r5
 801623a:	d006      	beq.n	801624a <nk_begin_titled+0x5aa>
 801623c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801623e:	f413 7f80 	tst.w	r3, #256	; 0x100
                win->flags |= NK_WINDOW_ROM;
 8016242:	bf04      	itt	eq
 8016244:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8016248:	64ab      	streq	r3, [r5, #72]	; 0x48
    win->layout = (struct nk_panel*)nk_create_panel(ctx);
 801624a:	4630      	mov	r0, r6
 801624c:	f7f7 fc3e 	bl	800dacc <nk_create_panel>
 8016250:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
    ctx->current = win;
 8016254:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8016258:	f8c3 5658 	str.w	r5, [r3, #1624]	; 0x658
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
 801625c:	2201      	movs	r2, #1
 801625e:	4639      	mov	r1, r7
 8016260:	4630      	mov	r0, r6
 8016262:	f7f7 fd4d 	bl	800dd00 <nk_panel_begin>
    win->layout->offset_x = &win->scrollbar.x;
 8016266:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 801626a:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 801626e:	619a      	str	r2, [r3, #24]
    win->layout->offset_y = &win->scrollbar.y;
 8016270:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8016274:	3560      	adds	r5, #96	; 0x60
 8016276:	61dd      	str	r5, [r3, #28]
    return ret;
 8016278:	e669      	b.n	8015f4e <nk_begin_titled+0x2ae>
 801627a:	bf00      	nop

0801627c <nk_begin>:
{
 801627c:	b500      	push	{lr}
 801627e:	b085      	sub	sp, #20
 8016280:	4613      	mov	r3, r2
    return nk_begin_titled(ctx, title, title, bounds, flags);
 8016282:	460a      	mov	r2, r1
 8016284:	f7ff fd0c 	bl	8015ca0 <nk_begin_titled>
}
 8016288:	b005      	add	sp, #20
 801628a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016290 <nk_end>:
NK_API void
nk_end(struct nk_context *ctx)
{
 8016290:	b510      	push	{r4, lr}
    struct nk_panel *layout;
    NK_ASSERT(ctx);
 8016292:	b308      	cbz	r0, 80162d8 <nk_end+0x48>
 8016294:	4604      	mov	r4, r0
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 8016296:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 801629a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801629e:	b313      	cbz	r3, 80162e6 <nk_end+0x56>
    if (!ctx || !ctx->current)
        return;

    layout = ctx->current->layout;
 80162a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {
 80162a4:	b192      	cbz	r2, 80162cc <nk_end+0x3c>
 80162a6:	7812      	ldrb	r2, [r2, #0]
 80162a8:	2a01      	cmp	r2, #1
 80162aa:	d103      	bne.n	80162b4 <nk_end+0x24>
 80162ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80162b2:	d10b      	bne.n	80162cc <nk_end+0x3c>
        ctx->current = 0;
        return;
    }
    nk_panel_end(ctx);
 80162b4:	4620      	mov	r0, r4
 80162b6:	f7f8 f91f 	bl	800e4f8 <nk_panel_end>
    nk_free_panel(ctx, ctx->current->layout);
 80162ba:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80162be:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80162c2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80162c6:	4620      	mov	r0, r4
 80162c8:	f7f7 fc0b 	bl	800dae2 <nk_free_panel>
    ctx->current = 0;
 80162cc:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 80162d0:	2300      	movs	r3, #0
 80162d2:	f8c4 3658 	str.w	r3, [r4, #1624]	; 0x658
}
 80162d6:	bd10      	pop	{r4, pc}
    NK_ASSERT(ctx);
 80162d8:	4b06      	ldr	r3, [pc, #24]	; (80162f4 <nk_end+0x64>)
 80162da:	4a07      	ldr	r2, [pc, #28]	; (80162f8 <nk_end+0x68>)
 80162dc:	f240 112b 	movw	r1, #299	; 0x12b
 80162e0:	4806      	ldr	r0, [pc, #24]	; (80162fc <nk_end+0x6c>)
 80162e2:	f000 f933 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 80162e6:	4b06      	ldr	r3, [pc, #24]	; (8016300 <nk_end+0x70>)
 80162e8:	4a03      	ldr	r2, [pc, #12]	; (80162f8 <nk_end+0x68>)
 80162ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80162ee:	4803      	ldr	r0, [pc, #12]	; (80162fc <nk_end+0x6c>)
 80162f0:	f000 f92c 	bl	801654c <__assert_func>
 80162f4:	0801ad58 	.word	0x0801ad58
 80162f8:	0801bd50 	.word	0x0801bd50
 80162fc:	0801bc00 	.word	0x0801bc00
 8016300:	0801bcdc 	.word	0x0801bcdc

08016304 <nk_window_is_hovered>:
    if (!ctx || !ctx->current) return 0;
    return ctx->current == ctx->active;
}
NK_API nk_bool
nk_window_is_hovered(struct nk_context *ctx)
{
 8016304:	b510      	push	{r4, lr}
 8016306:	b084      	sub	sp, #16
    NK_ASSERT(ctx);
 8016308:	b340      	cbz	r0, 801635c <nk_window_is_hovered+0x58>
 801630a:	4684      	mov	ip, r0
    NK_ASSERT(ctx->current);
 801630c:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8016310:	f8d3 4658 	ldr.w	r4, [r3, #1624]	; 0x658
 8016314:	b34c      	cbz	r4, 801636a <nk_window_is_hovered+0x66>
    if (!ctx || !ctx->current || (ctx->current->flags & NK_WINDOW_HIDDEN))
 8016316:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8016318:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801631c:	d12c      	bne.n	8016378 <nk_window_is_hovered+0x74>
        return 0;
    else {
        struct nk_rect actual_bounds = ctx->current->bounds;
 801631e:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8016322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016324:	f10d 0e10 	add.w	lr, sp, #16
 8016328:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        if (ctx->begin->flags & NK_WINDOW_MINIMIZED) {
 801632c:	f50c 5340 	add.w	r3, ip, #12288	; 0x3000
 8016330:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8016334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016336:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 801633a:	d003      	beq.n	8016344 <nk_window_is_hovered+0x40>
            actual_bounds.h = ctx->current->layout->header_height;
 801633c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016342:	9303      	str	r3, [sp, #12]
        }
        return nk_input_is_mouse_hovering_rect(&ctx->input, actual_bounds);
 8016344:	ed9d 0a00 	vldr	s0, [sp]
 8016348:	eddd 0a01 	vldr	s1, [sp, #4]
 801634c:	ed9d 1a02 	vldr	s2, [sp, #8]
 8016350:	eddd 1a03 	vldr	s3, [sp, #12]
 8016354:	4660      	mov	r0, ip
 8016356:	f7f6 fcf7 	bl	800cd48 <nk_input_is_mouse_hovering_rect>
 801635a:	e00e      	b.n	801637a <nk_window_is_hovered+0x76>
    NK_ASSERT(ctx);
 801635c:	4b08      	ldr	r3, [pc, #32]	; (8016380 <nk_window_is_hovered+0x7c>)
 801635e:	4a09      	ldr	r2, [pc, #36]	; (8016384 <nk_window_is_hovered+0x80>)
 8016360:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016364:	4808      	ldr	r0, [pc, #32]	; (8016388 <nk_window_is_hovered+0x84>)
 8016366:	f000 f8f1 	bl	801654c <__assert_func>
    NK_ASSERT(ctx->current);
 801636a:	4b08      	ldr	r3, [pc, #32]	; (801638c <nk_window_is_hovered+0x88>)
 801636c:	4a05      	ldr	r2, [pc, #20]	; (8016384 <nk_window_is_hovered+0x80>)
 801636e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016372:	4805      	ldr	r0, [pc, #20]	; (8016388 <nk_window_is_hovered+0x84>)
 8016374:	f000 f8ea 	bl	801654c <__assert_func>
        return 0;
 8016378:	2000      	movs	r0, #0
    }
}
 801637a:	b004      	add	sp, #16
 801637c:	bd10      	pop	{r4, pc}
 801637e:	bf00      	nop
 8016380:	0801ad58 	.word	0x0801ad58
 8016384:	0801bd38 	.word	0x0801bd38
 8016388:	0801bc00 	.word	0x0801bc00
 801638c:	0801ad5c 	.word	0x0801ad5c

08016390 <nk_window_is_collapsed>:
    int any_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
    return any_hovered || any_active;
}
NK_API nk_bool
nk_window_is_collapsed(struct nk_context *ctx, const char *name)
{
 8016390:	b538      	push	{r3, r4, r5, lr}
    int title_len;
    nk_hash title_hash;
    struct nk_window *win;
    NK_ASSERT(ctx);
 8016392:	b198      	cbz	r0, 80163bc <nk_window_is_collapsed+0x2c>
 8016394:	460c      	mov	r4, r1
 8016396:	4605      	mov	r5, r0
    if (!ctx) return 0;

    title_len = (int)nk_strlen(name);
 8016398:	4608      	mov	r0, r1
 801639a:	f7fe fd09 	bl	8014db0 <nk_strlen>
 801639e:	4601      	mov	r1, r0
    title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);
 80163a0:	2240      	movs	r2, #64	; 0x40
 80163a2:	4620      	mov	r0, r4
 80163a4:	f7ff f82c 	bl	8015400 <nk_murmur_hash>
 80163a8:	4601      	mov	r1, r0
    win = nk_find_window(ctx, title_hash, name);
 80163aa:	4622      	mov	r2, r4
 80163ac:	4628      	mov	r0, r5
 80163ae:	f7ff fb6d 	bl	8015a8c <nk_find_window>
    if (!win) return 0;
 80163b2:	b150      	cbz	r0, 80163ca <nk_window_is_collapsed+0x3a>
    return win->flags & NK_WINDOW_MINIMIZED;
 80163b4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80163b6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
}
 80163ba:	bd38      	pop	{r3, r4, r5, pc}
    NK_ASSERT(ctx);
 80163bc:	4b04      	ldr	r3, [pc, #16]	; (80163d0 <nk_window_is_collapsed+0x40>)
 80163be:	4a05      	ldr	r2, [pc, #20]	; (80163d4 <nk_window_is_collapsed+0x44>)
 80163c0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80163c4:	4804      	ldr	r0, [pc, #16]	; (80163d8 <nk_window_is_collapsed+0x48>)
 80163c6:	f000 f8c1 	bl	801654c <__assert_func>
    if (!win) return 0;
 80163ca:	2000      	movs	r0, #0
 80163cc:	e7f5      	b.n	80163ba <nk_window_is_collapsed+0x2a>
 80163ce:	bf00      	nop
 80163d0:	0801ad58 	.word	0x0801ad58
 80163d4:	0801bd20 	.word	0x0801bd20
 80163d8:	0801bc00 	.word	0x0801bc00

080163dc <tsc2046_init>:
#include <stdint.h>
#include "tsc2046.h"


void tsc2046_init(tTsc2046* tsc, SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin, float ax, float bx, float ay, float by, int avg )
{
 80163dc:	b508      	push	{r3, lr}
 80163de:	4684      	mov	ip, r0
 80163e0:	4610      	mov	r0, r2
	tsc->spi = spi;
 80163e2:	f8cc 1000 	str.w	r1, [ip]
	tsc->cs_port = cs_port;
 80163e6:	f8cc 2004 	str.w	r2, [ip, #4]
	tsc->cs_pin = cs_pin;
 80163ea:	f8ac 3008 	strh.w	r3, [ip, #8]
	tsc->ax = ax;
 80163ee:	ed8c 0a03 	vstr	s0, [ip, #12]
	tsc->bx = bx;
 80163f2:	edcc 0a04 	vstr	s1, [ip, #16]
	tsc->ay = ay;
 80163f6:	ed8c 1a05 	vstr	s2, [ip, #20]
	tsc->by = by;
 80163fa:	edcc 1a06 	vstr	s3, [ip, #24]
	tsc->avg = avg;
 80163fe:	9a02      	ldr	r2, [sp, #8]
 8016400:	f8cc 201c 	str.w	r2, [ip, #28]
    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 8016404:	2201      	movs	r2, #1
 8016406:	4619      	mov	r1, r3
 8016408:	f7f0 f8c6 	bl	8006598 <HAL_GPIO_WritePin>
}
 801640c:	bd08      	pop	{r3, pc}
	...

08016410 <tsc2046_read_ll>:

void tsc2046_read_ll( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 8016410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016412:	b085      	sub	sp, #20
 8016414:	4604      	mov	r4, r0
 8016416:	460d      	mov	r5, r1
 8016418:	4616      	mov	r6, r2
	uint8_t buf_tx[3] = {0};
 801641a:	4b21      	ldr	r3, [pc, #132]	; (80164a0 <tsc2046_read_ll+0x90>)
 801641c:	881b      	ldrh	r3, [r3, #0]
 801641e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016422:	2200      	movs	r2, #0
 8016424:	f88d 200e 	strb.w	r2, [sp, #14]
	uint8_t buf_rx[3] = {0};
 8016428:	f8ad 3008 	strh.w	r3, [sp, #8]
 801642c:	f88d 200a 	strb.w	r2, [sp, #10]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_RESET);
 8016430:	8901      	ldrh	r1, [r0, #8]
 8016432:	6840      	ldr	r0, [r0, #4]
 8016434:	f7f0 f8b0 	bl	8006598 <HAL_GPIO_WritePin>

    buf_tx[0] = TSC2046_CHANNEL_X;
 8016438:	2390      	movs	r3, #144	; 0x90
 801643a:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801643e:	f04f 37ff 	mov.w	r7, #4294967295
 8016442:	9700      	str	r7, [sp, #0]
 8016444:	2303      	movs	r3, #3
 8016446:	aa02      	add	r2, sp, #8
 8016448:	a903      	add	r1, sp, #12
 801644a:	6820      	ldr	r0, [r4, #0]
 801644c:	f7f1 fabf 	bl	80079ce <HAL_SPI_TransmitReceive>
    *x = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 8016450:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8016454:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8016458:	091b      	lsrs	r3, r3, #4
 801645a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801645e:	802b      	strh	r3, [r5, #0]

    buf_tx[0] = TSC2046_CHANNEL_Y;
 8016460:	23d0      	movs	r3, #208	; 0xd0
 8016462:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 8016466:	9700      	str	r7, [sp, #0]
 8016468:	2303      	movs	r3, #3
 801646a:	aa02      	add	r2, sp, #8
 801646c:	a903      	add	r1, sp, #12
 801646e:	6820      	ldr	r0, [r4, #0]
 8016470:	f7f1 faad 	bl	80079ce <HAL_SPI_TransmitReceive>
    *y = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 8016474:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8016478:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801647c:	091b      	lsrs	r3, r3, #4
 801647e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8016482:	8033      	strh	r3, [r6, #0]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 8016484:	2201      	movs	r2, #1
 8016486:	8921      	ldrh	r1, [r4, #8]
 8016488:	6860      	ldr	r0, [r4, #4]
 801648a:	f7f0 f885 	bl	8006598 <HAL_GPIO_WritePin>

    if (*x == 2047) {
 801648e:	882a      	ldrh	r2, [r5, #0]
 8016490:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016494:	429a      	cmp	r2, r3
        *x = 0;
 8016496:	bf04      	itt	eq
 8016498:	2300      	moveq	r3, #0
 801649a:	802b      	strheq	r3, [r5, #0]
    }
}
 801649c:	b005      	add	sp, #20
 801649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164a0:	08019d30 	.word	0x08019d30

080164a4 <tsc2046_read>:

void tsc2046_read( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 80164a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164a8:	4606      	mov	r6, r0
 80164aa:	460f      	mov	r7, r1
 80164ac:	4690      	mov	r8, r2
    int32_t x_acc = 0;
    int32_t y_acc = 0;

    for (int i = 0; i < tsc->avg; i++) {
 80164ae:	69c3      	ldr	r3, [r0, #28]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	dd47      	ble.n	8016544 <tsc2046_read+0xa0>
 80164b4:	2400      	movs	r4, #0
    int32_t y_acc = 0;
 80164b6:	46a1      	mov	r9, r4
    int32_t x_acc = 0;
 80164b8:	46a2      	mov	sl, r4
    	tsc2046_read_ll(tsc, x, y);
 80164ba:	4642      	mov	r2, r8
 80164bc:	4639      	mov	r1, r7
 80164be:	4630      	mov	r0, r6
 80164c0:	f7ff ffa6 	bl	8016410 <tsc2046_read_ll>
        if (*x && *y) {
 80164c4:	883b      	ldrh	r3, [r7, #0]
 80164c6:	b3bb      	cbz	r3, 8016538 <tsc2046_read+0x94>
 80164c8:	f8b8 5000 	ldrh.w	r5, [r8]
 80164cc:	b3a5      	cbz	r5, 8016538 <tsc2046_read+0x94>
            x_acc += *x;
 80164ce:	449a      	add	sl, r3
            y_acc += *y;
 80164d0:	44a9      	add	r9, r5
    for (int i = 0; i < tsc->avg; i++) {
 80164d2:	3401      	adds	r4, #1
 80164d4:	69f3      	ldr	r3, [r6, #28]
 80164d6:	42a3      	cmp	r3, r4
 80164d8:	dcef      	bgt.n	80164ba <tsc2046_read+0x16>
            *y = 0;
            return;
        }
        //HAL_Delay(1);
    }
    *x = x_acc / tsc->avg;
 80164da:	fb9a faf3 	sdiv	sl, sl, r3
 80164de:	f8a7 a000 	strh.w	sl, [r7]
    *y = y_acc / tsc->avg;
 80164e2:	69f3      	ldr	r3, [r6, #28]
 80164e4:	fb99 f9f3 	sdiv	r9, r9, r3
 80164e8:	f8a8 9000 	strh.w	r9, [r8]
    *x = tsc->ax * *x + tsc->bx;
 80164ec:	883b      	ldrh	r3, [r7, #0]
 80164ee:	ee07 3a90 	vmov	s15, r3
 80164f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164f6:	ed96 7a03 	vldr	s14, [r6, #12]
 80164fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80164fe:	ed96 7a04 	vldr	s14, [r6, #16]
 8016502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801650a:	ee17 3a90 	vmov	r3, s15
 801650e:	803b      	strh	r3, [r7, #0]
    *y = tsc->ay * *y + tsc->by;
 8016510:	f8b8 3000 	ldrh.w	r3, [r8]
 8016514:	ee07 3a90 	vmov	s15, r3
 8016518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801651c:	ed96 7a05 	vldr	s14, [r6, #20]
 8016520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016524:	ed96 7a06 	vldr	s14, [r6, #24]
 8016528:	ee77 7a87 	vadd.f32	s15, s15, s14
 801652c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016530:	ee17 3a90 	vmov	r3, s15
 8016534:	b29b      	uxth	r3, r3
 8016536:	e001      	b.n	801653c <tsc2046_read+0x98>
            *x = 0;
 8016538:	2300      	movs	r3, #0
 801653a:	803b      	strh	r3, [r7, #0]
            *y = 0;
 801653c:	f8a8 3000 	strh.w	r3, [r8]
}
 8016540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int32_t y_acc = 0;
 8016544:	f04f 0900 	mov.w	r9, #0
    int32_t x_acc = 0;
 8016548:	46ca      	mov	sl, r9
 801654a:	e7c6      	b.n	80164da <tsc2046_read+0x36>

0801654c <__assert_func>:
 801654c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801654e:	4614      	mov	r4, r2
 8016550:	461a      	mov	r2, r3
 8016552:	4b09      	ldr	r3, [pc, #36]	; (8016578 <__assert_func+0x2c>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	4605      	mov	r5, r0
 8016558:	68d8      	ldr	r0, [r3, #12]
 801655a:	b14c      	cbz	r4, 8016570 <__assert_func+0x24>
 801655c:	4b07      	ldr	r3, [pc, #28]	; (801657c <__assert_func+0x30>)
 801655e:	9100      	str	r1, [sp, #0]
 8016560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016564:	4906      	ldr	r1, [pc, #24]	; (8016580 <__assert_func+0x34>)
 8016566:	462b      	mov	r3, r5
 8016568:	f000 fd06 	bl	8016f78 <fiprintf>
 801656c:	f000 fe24 	bl	80171b8 <abort>
 8016570:	4b04      	ldr	r3, [pc, #16]	; (8016584 <__assert_func+0x38>)
 8016572:	461c      	mov	r4, r3
 8016574:	e7f3      	b.n	801655e <__assert_func+0x12>
 8016576:	bf00      	nop
 8016578:	200001f8 	.word	0x200001f8
 801657c:	0801bd8b 	.word	0x0801bd8b
 8016580:	0801bd98 	.word	0x0801bd98
 8016584:	0801bdc6 	.word	0x0801bdc6

08016588 <__cvt>:
 8016588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801658c:	ec55 4b10 	vmov	r4, r5, d0
 8016590:	2d00      	cmp	r5, #0
 8016592:	460e      	mov	r6, r1
 8016594:	4619      	mov	r1, r3
 8016596:	462b      	mov	r3, r5
 8016598:	bfbb      	ittet	lt
 801659a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801659e:	461d      	movlt	r5, r3
 80165a0:	2300      	movge	r3, #0
 80165a2:	232d      	movlt	r3, #45	; 0x2d
 80165a4:	700b      	strb	r3, [r1, #0]
 80165a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80165ac:	4691      	mov	r9, r2
 80165ae:	f023 0820 	bic.w	r8, r3, #32
 80165b2:	bfbc      	itt	lt
 80165b4:	4622      	movlt	r2, r4
 80165b6:	4614      	movlt	r4, r2
 80165b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80165bc:	d005      	beq.n	80165ca <__cvt+0x42>
 80165be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80165c2:	d100      	bne.n	80165c6 <__cvt+0x3e>
 80165c4:	3601      	adds	r6, #1
 80165c6:	2102      	movs	r1, #2
 80165c8:	e000      	b.n	80165cc <__cvt+0x44>
 80165ca:	2103      	movs	r1, #3
 80165cc:	ab03      	add	r3, sp, #12
 80165ce:	9301      	str	r3, [sp, #4]
 80165d0:	ab02      	add	r3, sp, #8
 80165d2:	9300      	str	r3, [sp, #0]
 80165d4:	ec45 4b10 	vmov	d0, r4, r5
 80165d8:	4653      	mov	r3, sl
 80165da:	4632      	mov	r2, r6
 80165dc:	f000 fe7c 	bl	80172d8 <_dtoa_r>
 80165e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80165e4:	4607      	mov	r7, r0
 80165e6:	d102      	bne.n	80165ee <__cvt+0x66>
 80165e8:	f019 0f01 	tst.w	r9, #1
 80165ec:	d022      	beq.n	8016634 <__cvt+0xac>
 80165ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80165f2:	eb07 0906 	add.w	r9, r7, r6
 80165f6:	d110      	bne.n	801661a <__cvt+0x92>
 80165f8:	783b      	ldrb	r3, [r7, #0]
 80165fa:	2b30      	cmp	r3, #48	; 0x30
 80165fc:	d10a      	bne.n	8016614 <__cvt+0x8c>
 80165fe:	2200      	movs	r2, #0
 8016600:	2300      	movs	r3, #0
 8016602:	4620      	mov	r0, r4
 8016604:	4629      	mov	r1, r5
 8016606:	f7ea fa87 	bl	8000b18 <__aeabi_dcmpeq>
 801660a:	b918      	cbnz	r0, 8016614 <__cvt+0x8c>
 801660c:	f1c6 0601 	rsb	r6, r6, #1
 8016610:	f8ca 6000 	str.w	r6, [sl]
 8016614:	f8da 3000 	ldr.w	r3, [sl]
 8016618:	4499      	add	r9, r3
 801661a:	2200      	movs	r2, #0
 801661c:	2300      	movs	r3, #0
 801661e:	4620      	mov	r0, r4
 8016620:	4629      	mov	r1, r5
 8016622:	f7ea fa79 	bl	8000b18 <__aeabi_dcmpeq>
 8016626:	b108      	cbz	r0, 801662c <__cvt+0xa4>
 8016628:	f8cd 900c 	str.w	r9, [sp, #12]
 801662c:	2230      	movs	r2, #48	; 0x30
 801662e:	9b03      	ldr	r3, [sp, #12]
 8016630:	454b      	cmp	r3, r9
 8016632:	d307      	bcc.n	8016644 <__cvt+0xbc>
 8016634:	9b03      	ldr	r3, [sp, #12]
 8016636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016638:	1bdb      	subs	r3, r3, r7
 801663a:	4638      	mov	r0, r7
 801663c:	6013      	str	r3, [r2, #0]
 801663e:	b004      	add	sp, #16
 8016640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016644:	1c59      	adds	r1, r3, #1
 8016646:	9103      	str	r1, [sp, #12]
 8016648:	701a      	strb	r2, [r3, #0]
 801664a:	e7f0      	b.n	801662e <__cvt+0xa6>

0801664c <__exponent>:
 801664c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801664e:	4603      	mov	r3, r0
 8016650:	2900      	cmp	r1, #0
 8016652:	bfb8      	it	lt
 8016654:	4249      	neglt	r1, r1
 8016656:	f803 2b02 	strb.w	r2, [r3], #2
 801665a:	bfb4      	ite	lt
 801665c:	222d      	movlt	r2, #45	; 0x2d
 801665e:	222b      	movge	r2, #43	; 0x2b
 8016660:	2909      	cmp	r1, #9
 8016662:	7042      	strb	r2, [r0, #1]
 8016664:	dd2a      	ble.n	80166bc <__exponent+0x70>
 8016666:	f10d 0207 	add.w	r2, sp, #7
 801666a:	4617      	mov	r7, r2
 801666c:	260a      	movs	r6, #10
 801666e:	4694      	mov	ip, r2
 8016670:	fb91 f5f6 	sdiv	r5, r1, r6
 8016674:	fb06 1415 	mls	r4, r6, r5, r1
 8016678:	3430      	adds	r4, #48	; 0x30
 801667a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801667e:	460c      	mov	r4, r1
 8016680:	2c63      	cmp	r4, #99	; 0x63
 8016682:	f102 32ff 	add.w	r2, r2, #4294967295
 8016686:	4629      	mov	r1, r5
 8016688:	dcf1      	bgt.n	801666e <__exponent+0x22>
 801668a:	3130      	adds	r1, #48	; 0x30
 801668c:	f1ac 0402 	sub.w	r4, ip, #2
 8016690:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016694:	1c41      	adds	r1, r0, #1
 8016696:	4622      	mov	r2, r4
 8016698:	42ba      	cmp	r2, r7
 801669a:	d30a      	bcc.n	80166b2 <__exponent+0x66>
 801669c:	f10d 0209 	add.w	r2, sp, #9
 80166a0:	eba2 020c 	sub.w	r2, r2, ip
 80166a4:	42bc      	cmp	r4, r7
 80166a6:	bf88      	it	hi
 80166a8:	2200      	movhi	r2, #0
 80166aa:	4413      	add	r3, r2
 80166ac:	1a18      	subs	r0, r3, r0
 80166ae:	b003      	add	sp, #12
 80166b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80166b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80166ba:	e7ed      	b.n	8016698 <__exponent+0x4c>
 80166bc:	2330      	movs	r3, #48	; 0x30
 80166be:	3130      	adds	r1, #48	; 0x30
 80166c0:	7083      	strb	r3, [r0, #2]
 80166c2:	70c1      	strb	r1, [r0, #3]
 80166c4:	1d03      	adds	r3, r0, #4
 80166c6:	e7f1      	b.n	80166ac <__exponent+0x60>

080166c8 <_printf_float>:
 80166c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166cc:	ed2d 8b02 	vpush	{d8}
 80166d0:	b08d      	sub	sp, #52	; 0x34
 80166d2:	460c      	mov	r4, r1
 80166d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80166d8:	4616      	mov	r6, r2
 80166da:	461f      	mov	r7, r3
 80166dc:	4605      	mov	r5, r0
 80166de:	f000 fce7 	bl	80170b0 <_localeconv_r>
 80166e2:	f8d0 a000 	ldr.w	sl, [r0]
 80166e6:	4650      	mov	r0, sl
 80166e8:	f7e9 fdea 	bl	80002c0 <strlen>
 80166ec:	2300      	movs	r3, #0
 80166ee:	930a      	str	r3, [sp, #40]	; 0x28
 80166f0:	6823      	ldr	r3, [r4, #0]
 80166f2:	9305      	str	r3, [sp, #20]
 80166f4:	f8d8 3000 	ldr.w	r3, [r8]
 80166f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80166fc:	3307      	adds	r3, #7
 80166fe:	f023 0307 	bic.w	r3, r3, #7
 8016702:	f103 0208 	add.w	r2, r3, #8
 8016706:	f8c8 2000 	str.w	r2, [r8]
 801670a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801670e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016712:	9307      	str	r3, [sp, #28]
 8016714:	f8cd 8018 	str.w	r8, [sp, #24]
 8016718:	ee08 0a10 	vmov	s16, r0
 801671c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016724:	4b9e      	ldr	r3, [pc, #632]	; (80169a0 <_printf_float+0x2d8>)
 8016726:	f04f 32ff 	mov.w	r2, #4294967295
 801672a:	f7ea fa27 	bl	8000b7c <__aeabi_dcmpun>
 801672e:	bb88      	cbnz	r0, 8016794 <_printf_float+0xcc>
 8016730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016734:	4b9a      	ldr	r3, [pc, #616]	; (80169a0 <_printf_float+0x2d8>)
 8016736:	f04f 32ff 	mov.w	r2, #4294967295
 801673a:	f7ea fa01 	bl	8000b40 <__aeabi_dcmple>
 801673e:	bb48      	cbnz	r0, 8016794 <_printf_float+0xcc>
 8016740:	2200      	movs	r2, #0
 8016742:	2300      	movs	r3, #0
 8016744:	4640      	mov	r0, r8
 8016746:	4649      	mov	r1, r9
 8016748:	f7ea f9f0 	bl	8000b2c <__aeabi_dcmplt>
 801674c:	b110      	cbz	r0, 8016754 <_printf_float+0x8c>
 801674e:	232d      	movs	r3, #45	; 0x2d
 8016750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016754:	4a93      	ldr	r2, [pc, #588]	; (80169a4 <_printf_float+0x2dc>)
 8016756:	4b94      	ldr	r3, [pc, #592]	; (80169a8 <_printf_float+0x2e0>)
 8016758:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801675c:	bf94      	ite	ls
 801675e:	4690      	movls	r8, r2
 8016760:	4698      	movhi	r8, r3
 8016762:	2303      	movs	r3, #3
 8016764:	6123      	str	r3, [r4, #16]
 8016766:	9b05      	ldr	r3, [sp, #20]
 8016768:	f023 0304 	bic.w	r3, r3, #4
 801676c:	6023      	str	r3, [r4, #0]
 801676e:	f04f 0900 	mov.w	r9, #0
 8016772:	9700      	str	r7, [sp, #0]
 8016774:	4633      	mov	r3, r6
 8016776:	aa0b      	add	r2, sp, #44	; 0x2c
 8016778:	4621      	mov	r1, r4
 801677a:	4628      	mov	r0, r5
 801677c:	f000 f9da 	bl	8016b34 <_printf_common>
 8016780:	3001      	adds	r0, #1
 8016782:	f040 8090 	bne.w	80168a6 <_printf_float+0x1de>
 8016786:	f04f 30ff 	mov.w	r0, #4294967295
 801678a:	b00d      	add	sp, #52	; 0x34
 801678c:	ecbd 8b02 	vpop	{d8}
 8016790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016794:	4642      	mov	r2, r8
 8016796:	464b      	mov	r3, r9
 8016798:	4640      	mov	r0, r8
 801679a:	4649      	mov	r1, r9
 801679c:	f7ea f9ee 	bl	8000b7c <__aeabi_dcmpun>
 80167a0:	b140      	cbz	r0, 80167b4 <_printf_float+0xec>
 80167a2:	464b      	mov	r3, r9
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	bfbc      	itt	lt
 80167a8:	232d      	movlt	r3, #45	; 0x2d
 80167aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80167ae:	4a7f      	ldr	r2, [pc, #508]	; (80169ac <_printf_float+0x2e4>)
 80167b0:	4b7f      	ldr	r3, [pc, #508]	; (80169b0 <_printf_float+0x2e8>)
 80167b2:	e7d1      	b.n	8016758 <_printf_float+0x90>
 80167b4:	6863      	ldr	r3, [r4, #4]
 80167b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80167ba:	9206      	str	r2, [sp, #24]
 80167bc:	1c5a      	adds	r2, r3, #1
 80167be:	d13f      	bne.n	8016840 <_printf_float+0x178>
 80167c0:	2306      	movs	r3, #6
 80167c2:	6063      	str	r3, [r4, #4]
 80167c4:	9b05      	ldr	r3, [sp, #20]
 80167c6:	6861      	ldr	r1, [r4, #4]
 80167c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80167cc:	2300      	movs	r3, #0
 80167ce:	9303      	str	r3, [sp, #12]
 80167d0:	ab0a      	add	r3, sp, #40	; 0x28
 80167d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80167d6:	ab09      	add	r3, sp, #36	; 0x24
 80167d8:	ec49 8b10 	vmov	d0, r8, r9
 80167dc:	9300      	str	r3, [sp, #0]
 80167de:	6022      	str	r2, [r4, #0]
 80167e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80167e4:	4628      	mov	r0, r5
 80167e6:	f7ff fecf 	bl	8016588 <__cvt>
 80167ea:	9b06      	ldr	r3, [sp, #24]
 80167ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167ee:	2b47      	cmp	r3, #71	; 0x47
 80167f0:	4680      	mov	r8, r0
 80167f2:	d108      	bne.n	8016806 <_printf_float+0x13e>
 80167f4:	1cc8      	adds	r0, r1, #3
 80167f6:	db02      	blt.n	80167fe <_printf_float+0x136>
 80167f8:	6863      	ldr	r3, [r4, #4]
 80167fa:	4299      	cmp	r1, r3
 80167fc:	dd41      	ble.n	8016882 <_printf_float+0x1ba>
 80167fe:	f1ab 0302 	sub.w	r3, fp, #2
 8016802:	fa5f fb83 	uxtb.w	fp, r3
 8016806:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801680a:	d820      	bhi.n	801684e <_printf_float+0x186>
 801680c:	3901      	subs	r1, #1
 801680e:	465a      	mov	r2, fp
 8016810:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016814:	9109      	str	r1, [sp, #36]	; 0x24
 8016816:	f7ff ff19 	bl	801664c <__exponent>
 801681a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801681c:	1813      	adds	r3, r2, r0
 801681e:	2a01      	cmp	r2, #1
 8016820:	4681      	mov	r9, r0
 8016822:	6123      	str	r3, [r4, #16]
 8016824:	dc02      	bgt.n	801682c <_printf_float+0x164>
 8016826:	6822      	ldr	r2, [r4, #0]
 8016828:	07d2      	lsls	r2, r2, #31
 801682a:	d501      	bpl.n	8016830 <_printf_float+0x168>
 801682c:	3301      	adds	r3, #1
 801682e:	6123      	str	r3, [r4, #16]
 8016830:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016834:	2b00      	cmp	r3, #0
 8016836:	d09c      	beq.n	8016772 <_printf_float+0xaa>
 8016838:	232d      	movs	r3, #45	; 0x2d
 801683a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801683e:	e798      	b.n	8016772 <_printf_float+0xaa>
 8016840:	9a06      	ldr	r2, [sp, #24]
 8016842:	2a47      	cmp	r2, #71	; 0x47
 8016844:	d1be      	bne.n	80167c4 <_printf_float+0xfc>
 8016846:	2b00      	cmp	r3, #0
 8016848:	d1bc      	bne.n	80167c4 <_printf_float+0xfc>
 801684a:	2301      	movs	r3, #1
 801684c:	e7b9      	b.n	80167c2 <_printf_float+0xfa>
 801684e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016852:	d118      	bne.n	8016886 <_printf_float+0x1be>
 8016854:	2900      	cmp	r1, #0
 8016856:	6863      	ldr	r3, [r4, #4]
 8016858:	dd0b      	ble.n	8016872 <_printf_float+0x1aa>
 801685a:	6121      	str	r1, [r4, #16]
 801685c:	b913      	cbnz	r3, 8016864 <_printf_float+0x19c>
 801685e:	6822      	ldr	r2, [r4, #0]
 8016860:	07d0      	lsls	r0, r2, #31
 8016862:	d502      	bpl.n	801686a <_printf_float+0x1a2>
 8016864:	3301      	adds	r3, #1
 8016866:	440b      	add	r3, r1
 8016868:	6123      	str	r3, [r4, #16]
 801686a:	65a1      	str	r1, [r4, #88]	; 0x58
 801686c:	f04f 0900 	mov.w	r9, #0
 8016870:	e7de      	b.n	8016830 <_printf_float+0x168>
 8016872:	b913      	cbnz	r3, 801687a <_printf_float+0x1b2>
 8016874:	6822      	ldr	r2, [r4, #0]
 8016876:	07d2      	lsls	r2, r2, #31
 8016878:	d501      	bpl.n	801687e <_printf_float+0x1b6>
 801687a:	3302      	adds	r3, #2
 801687c:	e7f4      	b.n	8016868 <_printf_float+0x1a0>
 801687e:	2301      	movs	r3, #1
 8016880:	e7f2      	b.n	8016868 <_printf_float+0x1a0>
 8016882:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016888:	4299      	cmp	r1, r3
 801688a:	db05      	blt.n	8016898 <_printf_float+0x1d0>
 801688c:	6823      	ldr	r3, [r4, #0]
 801688e:	6121      	str	r1, [r4, #16]
 8016890:	07d8      	lsls	r0, r3, #31
 8016892:	d5ea      	bpl.n	801686a <_printf_float+0x1a2>
 8016894:	1c4b      	adds	r3, r1, #1
 8016896:	e7e7      	b.n	8016868 <_printf_float+0x1a0>
 8016898:	2900      	cmp	r1, #0
 801689a:	bfd4      	ite	le
 801689c:	f1c1 0202 	rsble	r2, r1, #2
 80168a0:	2201      	movgt	r2, #1
 80168a2:	4413      	add	r3, r2
 80168a4:	e7e0      	b.n	8016868 <_printf_float+0x1a0>
 80168a6:	6823      	ldr	r3, [r4, #0]
 80168a8:	055a      	lsls	r2, r3, #21
 80168aa:	d407      	bmi.n	80168bc <_printf_float+0x1f4>
 80168ac:	6923      	ldr	r3, [r4, #16]
 80168ae:	4642      	mov	r2, r8
 80168b0:	4631      	mov	r1, r6
 80168b2:	4628      	mov	r0, r5
 80168b4:	47b8      	blx	r7
 80168b6:	3001      	adds	r0, #1
 80168b8:	d12c      	bne.n	8016914 <_printf_float+0x24c>
 80168ba:	e764      	b.n	8016786 <_printf_float+0xbe>
 80168bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80168c0:	f240 80e0 	bls.w	8016a84 <_printf_float+0x3bc>
 80168c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80168c8:	2200      	movs	r2, #0
 80168ca:	2300      	movs	r3, #0
 80168cc:	f7ea f924 	bl	8000b18 <__aeabi_dcmpeq>
 80168d0:	2800      	cmp	r0, #0
 80168d2:	d034      	beq.n	801693e <_printf_float+0x276>
 80168d4:	4a37      	ldr	r2, [pc, #220]	; (80169b4 <_printf_float+0x2ec>)
 80168d6:	2301      	movs	r3, #1
 80168d8:	4631      	mov	r1, r6
 80168da:	4628      	mov	r0, r5
 80168dc:	47b8      	blx	r7
 80168de:	3001      	adds	r0, #1
 80168e0:	f43f af51 	beq.w	8016786 <_printf_float+0xbe>
 80168e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80168e8:	429a      	cmp	r2, r3
 80168ea:	db02      	blt.n	80168f2 <_printf_float+0x22a>
 80168ec:	6823      	ldr	r3, [r4, #0]
 80168ee:	07d8      	lsls	r0, r3, #31
 80168f0:	d510      	bpl.n	8016914 <_printf_float+0x24c>
 80168f2:	ee18 3a10 	vmov	r3, s16
 80168f6:	4652      	mov	r2, sl
 80168f8:	4631      	mov	r1, r6
 80168fa:	4628      	mov	r0, r5
 80168fc:	47b8      	blx	r7
 80168fe:	3001      	adds	r0, #1
 8016900:	f43f af41 	beq.w	8016786 <_printf_float+0xbe>
 8016904:	f04f 0800 	mov.w	r8, #0
 8016908:	f104 091a 	add.w	r9, r4, #26
 801690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801690e:	3b01      	subs	r3, #1
 8016910:	4543      	cmp	r3, r8
 8016912:	dc09      	bgt.n	8016928 <_printf_float+0x260>
 8016914:	6823      	ldr	r3, [r4, #0]
 8016916:	079b      	lsls	r3, r3, #30
 8016918:	f100 8107 	bmi.w	8016b2a <_printf_float+0x462>
 801691c:	68e0      	ldr	r0, [r4, #12]
 801691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016920:	4298      	cmp	r0, r3
 8016922:	bfb8      	it	lt
 8016924:	4618      	movlt	r0, r3
 8016926:	e730      	b.n	801678a <_printf_float+0xc2>
 8016928:	2301      	movs	r3, #1
 801692a:	464a      	mov	r2, r9
 801692c:	4631      	mov	r1, r6
 801692e:	4628      	mov	r0, r5
 8016930:	47b8      	blx	r7
 8016932:	3001      	adds	r0, #1
 8016934:	f43f af27 	beq.w	8016786 <_printf_float+0xbe>
 8016938:	f108 0801 	add.w	r8, r8, #1
 801693c:	e7e6      	b.n	801690c <_printf_float+0x244>
 801693e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016940:	2b00      	cmp	r3, #0
 8016942:	dc39      	bgt.n	80169b8 <_printf_float+0x2f0>
 8016944:	4a1b      	ldr	r2, [pc, #108]	; (80169b4 <_printf_float+0x2ec>)
 8016946:	2301      	movs	r3, #1
 8016948:	4631      	mov	r1, r6
 801694a:	4628      	mov	r0, r5
 801694c:	47b8      	blx	r7
 801694e:	3001      	adds	r0, #1
 8016950:	f43f af19 	beq.w	8016786 <_printf_float+0xbe>
 8016954:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016958:	4313      	orrs	r3, r2
 801695a:	d102      	bne.n	8016962 <_printf_float+0x29a>
 801695c:	6823      	ldr	r3, [r4, #0]
 801695e:	07d9      	lsls	r1, r3, #31
 8016960:	d5d8      	bpl.n	8016914 <_printf_float+0x24c>
 8016962:	ee18 3a10 	vmov	r3, s16
 8016966:	4652      	mov	r2, sl
 8016968:	4631      	mov	r1, r6
 801696a:	4628      	mov	r0, r5
 801696c:	47b8      	blx	r7
 801696e:	3001      	adds	r0, #1
 8016970:	f43f af09 	beq.w	8016786 <_printf_float+0xbe>
 8016974:	f04f 0900 	mov.w	r9, #0
 8016978:	f104 0a1a 	add.w	sl, r4, #26
 801697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801697e:	425b      	negs	r3, r3
 8016980:	454b      	cmp	r3, r9
 8016982:	dc01      	bgt.n	8016988 <_printf_float+0x2c0>
 8016984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016986:	e792      	b.n	80168ae <_printf_float+0x1e6>
 8016988:	2301      	movs	r3, #1
 801698a:	4652      	mov	r2, sl
 801698c:	4631      	mov	r1, r6
 801698e:	4628      	mov	r0, r5
 8016990:	47b8      	blx	r7
 8016992:	3001      	adds	r0, #1
 8016994:	f43f aef7 	beq.w	8016786 <_printf_float+0xbe>
 8016998:	f109 0901 	add.w	r9, r9, #1
 801699c:	e7ee      	b.n	801697c <_printf_float+0x2b4>
 801699e:	bf00      	nop
 80169a0:	7fefffff 	.word	0x7fefffff
 80169a4:	0801bdc7 	.word	0x0801bdc7
 80169a8:	0801bdcb 	.word	0x0801bdcb
 80169ac:	0801bdcf 	.word	0x0801bdcf
 80169b0:	0801bdd3 	.word	0x0801bdd3
 80169b4:	0801bdd7 	.word	0x0801bdd7
 80169b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169bc:	429a      	cmp	r2, r3
 80169be:	bfa8      	it	ge
 80169c0:	461a      	movge	r2, r3
 80169c2:	2a00      	cmp	r2, #0
 80169c4:	4691      	mov	r9, r2
 80169c6:	dc37      	bgt.n	8016a38 <_printf_float+0x370>
 80169c8:	f04f 0b00 	mov.w	fp, #0
 80169cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80169d0:	f104 021a 	add.w	r2, r4, #26
 80169d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169d6:	9305      	str	r3, [sp, #20]
 80169d8:	eba3 0309 	sub.w	r3, r3, r9
 80169dc:	455b      	cmp	r3, fp
 80169de:	dc33      	bgt.n	8016a48 <_printf_float+0x380>
 80169e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80169e4:	429a      	cmp	r2, r3
 80169e6:	db3b      	blt.n	8016a60 <_printf_float+0x398>
 80169e8:	6823      	ldr	r3, [r4, #0]
 80169ea:	07da      	lsls	r2, r3, #31
 80169ec:	d438      	bmi.n	8016a60 <_printf_float+0x398>
 80169ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80169f2:	eba2 0903 	sub.w	r9, r2, r3
 80169f6:	9b05      	ldr	r3, [sp, #20]
 80169f8:	1ad2      	subs	r2, r2, r3
 80169fa:	4591      	cmp	r9, r2
 80169fc:	bfa8      	it	ge
 80169fe:	4691      	movge	r9, r2
 8016a00:	f1b9 0f00 	cmp.w	r9, #0
 8016a04:	dc35      	bgt.n	8016a72 <_printf_float+0x3aa>
 8016a06:	f04f 0800 	mov.w	r8, #0
 8016a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a0e:	f104 0a1a 	add.w	sl, r4, #26
 8016a12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a16:	1a9b      	subs	r3, r3, r2
 8016a18:	eba3 0309 	sub.w	r3, r3, r9
 8016a1c:	4543      	cmp	r3, r8
 8016a1e:	f77f af79 	ble.w	8016914 <_printf_float+0x24c>
 8016a22:	2301      	movs	r3, #1
 8016a24:	4652      	mov	r2, sl
 8016a26:	4631      	mov	r1, r6
 8016a28:	4628      	mov	r0, r5
 8016a2a:	47b8      	blx	r7
 8016a2c:	3001      	adds	r0, #1
 8016a2e:	f43f aeaa 	beq.w	8016786 <_printf_float+0xbe>
 8016a32:	f108 0801 	add.w	r8, r8, #1
 8016a36:	e7ec      	b.n	8016a12 <_printf_float+0x34a>
 8016a38:	4613      	mov	r3, r2
 8016a3a:	4631      	mov	r1, r6
 8016a3c:	4642      	mov	r2, r8
 8016a3e:	4628      	mov	r0, r5
 8016a40:	47b8      	blx	r7
 8016a42:	3001      	adds	r0, #1
 8016a44:	d1c0      	bne.n	80169c8 <_printf_float+0x300>
 8016a46:	e69e      	b.n	8016786 <_printf_float+0xbe>
 8016a48:	2301      	movs	r3, #1
 8016a4a:	4631      	mov	r1, r6
 8016a4c:	4628      	mov	r0, r5
 8016a4e:	9205      	str	r2, [sp, #20]
 8016a50:	47b8      	blx	r7
 8016a52:	3001      	adds	r0, #1
 8016a54:	f43f ae97 	beq.w	8016786 <_printf_float+0xbe>
 8016a58:	9a05      	ldr	r2, [sp, #20]
 8016a5a:	f10b 0b01 	add.w	fp, fp, #1
 8016a5e:	e7b9      	b.n	80169d4 <_printf_float+0x30c>
 8016a60:	ee18 3a10 	vmov	r3, s16
 8016a64:	4652      	mov	r2, sl
 8016a66:	4631      	mov	r1, r6
 8016a68:	4628      	mov	r0, r5
 8016a6a:	47b8      	blx	r7
 8016a6c:	3001      	adds	r0, #1
 8016a6e:	d1be      	bne.n	80169ee <_printf_float+0x326>
 8016a70:	e689      	b.n	8016786 <_printf_float+0xbe>
 8016a72:	9a05      	ldr	r2, [sp, #20]
 8016a74:	464b      	mov	r3, r9
 8016a76:	4442      	add	r2, r8
 8016a78:	4631      	mov	r1, r6
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	47b8      	blx	r7
 8016a7e:	3001      	adds	r0, #1
 8016a80:	d1c1      	bne.n	8016a06 <_printf_float+0x33e>
 8016a82:	e680      	b.n	8016786 <_printf_float+0xbe>
 8016a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a86:	2a01      	cmp	r2, #1
 8016a88:	dc01      	bgt.n	8016a8e <_printf_float+0x3c6>
 8016a8a:	07db      	lsls	r3, r3, #31
 8016a8c:	d53a      	bpl.n	8016b04 <_printf_float+0x43c>
 8016a8e:	2301      	movs	r3, #1
 8016a90:	4642      	mov	r2, r8
 8016a92:	4631      	mov	r1, r6
 8016a94:	4628      	mov	r0, r5
 8016a96:	47b8      	blx	r7
 8016a98:	3001      	adds	r0, #1
 8016a9a:	f43f ae74 	beq.w	8016786 <_printf_float+0xbe>
 8016a9e:	ee18 3a10 	vmov	r3, s16
 8016aa2:	4652      	mov	r2, sl
 8016aa4:	4631      	mov	r1, r6
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	47b8      	blx	r7
 8016aaa:	3001      	adds	r0, #1
 8016aac:	f43f ae6b 	beq.w	8016786 <_printf_float+0xbe>
 8016ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016abc:	f7ea f82c 	bl	8000b18 <__aeabi_dcmpeq>
 8016ac0:	b9d8      	cbnz	r0, 8016afa <_printf_float+0x432>
 8016ac2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016ac6:	f108 0201 	add.w	r2, r8, #1
 8016aca:	4631      	mov	r1, r6
 8016acc:	4628      	mov	r0, r5
 8016ace:	47b8      	blx	r7
 8016ad0:	3001      	adds	r0, #1
 8016ad2:	d10e      	bne.n	8016af2 <_printf_float+0x42a>
 8016ad4:	e657      	b.n	8016786 <_printf_float+0xbe>
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	4652      	mov	r2, sl
 8016ada:	4631      	mov	r1, r6
 8016adc:	4628      	mov	r0, r5
 8016ade:	47b8      	blx	r7
 8016ae0:	3001      	adds	r0, #1
 8016ae2:	f43f ae50 	beq.w	8016786 <_printf_float+0xbe>
 8016ae6:	f108 0801 	add.w	r8, r8, #1
 8016aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016aec:	3b01      	subs	r3, #1
 8016aee:	4543      	cmp	r3, r8
 8016af0:	dcf1      	bgt.n	8016ad6 <_printf_float+0x40e>
 8016af2:	464b      	mov	r3, r9
 8016af4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016af8:	e6da      	b.n	80168b0 <_printf_float+0x1e8>
 8016afa:	f04f 0800 	mov.w	r8, #0
 8016afe:	f104 0a1a 	add.w	sl, r4, #26
 8016b02:	e7f2      	b.n	8016aea <_printf_float+0x422>
 8016b04:	2301      	movs	r3, #1
 8016b06:	4642      	mov	r2, r8
 8016b08:	e7df      	b.n	8016aca <_printf_float+0x402>
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	464a      	mov	r2, r9
 8016b0e:	4631      	mov	r1, r6
 8016b10:	4628      	mov	r0, r5
 8016b12:	47b8      	blx	r7
 8016b14:	3001      	adds	r0, #1
 8016b16:	f43f ae36 	beq.w	8016786 <_printf_float+0xbe>
 8016b1a:	f108 0801 	add.w	r8, r8, #1
 8016b1e:	68e3      	ldr	r3, [r4, #12]
 8016b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b22:	1a5b      	subs	r3, r3, r1
 8016b24:	4543      	cmp	r3, r8
 8016b26:	dcf0      	bgt.n	8016b0a <_printf_float+0x442>
 8016b28:	e6f8      	b.n	801691c <_printf_float+0x254>
 8016b2a:	f04f 0800 	mov.w	r8, #0
 8016b2e:	f104 0919 	add.w	r9, r4, #25
 8016b32:	e7f4      	b.n	8016b1e <_printf_float+0x456>

08016b34 <_printf_common>:
 8016b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b38:	4616      	mov	r6, r2
 8016b3a:	4699      	mov	r9, r3
 8016b3c:	688a      	ldr	r2, [r1, #8]
 8016b3e:	690b      	ldr	r3, [r1, #16]
 8016b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b44:	4293      	cmp	r3, r2
 8016b46:	bfb8      	it	lt
 8016b48:	4613      	movlt	r3, r2
 8016b4a:	6033      	str	r3, [r6, #0]
 8016b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b50:	4607      	mov	r7, r0
 8016b52:	460c      	mov	r4, r1
 8016b54:	b10a      	cbz	r2, 8016b5a <_printf_common+0x26>
 8016b56:	3301      	adds	r3, #1
 8016b58:	6033      	str	r3, [r6, #0]
 8016b5a:	6823      	ldr	r3, [r4, #0]
 8016b5c:	0699      	lsls	r1, r3, #26
 8016b5e:	bf42      	ittt	mi
 8016b60:	6833      	ldrmi	r3, [r6, #0]
 8016b62:	3302      	addmi	r3, #2
 8016b64:	6033      	strmi	r3, [r6, #0]
 8016b66:	6825      	ldr	r5, [r4, #0]
 8016b68:	f015 0506 	ands.w	r5, r5, #6
 8016b6c:	d106      	bne.n	8016b7c <_printf_common+0x48>
 8016b6e:	f104 0a19 	add.w	sl, r4, #25
 8016b72:	68e3      	ldr	r3, [r4, #12]
 8016b74:	6832      	ldr	r2, [r6, #0]
 8016b76:	1a9b      	subs	r3, r3, r2
 8016b78:	42ab      	cmp	r3, r5
 8016b7a:	dc26      	bgt.n	8016bca <_printf_common+0x96>
 8016b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016b80:	1e13      	subs	r3, r2, #0
 8016b82:	6822      	ldr	r2, [r4, #0]
 8016b84:	bf18      	it	ne
 8016b86:	2301      	movne	r3, #1
 8016b88:	0692      	lsls	r2, r2, #26
 8016b8a:	d42b      	bmi.n	8016be4 <_printf_common+0xb0>
 8016b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016b90:	4649      	mov	r1, r9
 8016b92:	4638      	mov	r0, r7
 8016b94:	47c0      	blx	r8
 8016b96:	3001      	adds	r0, #1
 8016b98:	d01e      	beq.n	8016bd8 <_printf_common+0xa4>
 8016b9a:	6823      	ldr	r3, [r4, #0]
 8016b9c:	6922      	ldr	r2, [r4, #16]
 8016b9e:	f003 0306 	and.w	r3, r3, #6
 8016ba2:	2b04      	cmp	r3, #4
 8016ba4:	bf02      	ittt	eq
 8016ba6:	68e5      	ldreq	r5, [r4, #12]
 8016ba8:	6833      	ldreq	r3, [r6, #0]
 8016baa:	1aed      	subeq	r5, r5, r3
 8016bac:	68a3      	ldr	r3, [r4, #8]
 8016bae:	bf0c      	ite	eq
 8016bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bb4:	2500      	movne	r5, #0
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	bfc4      	itt	gt
 8016bba:	1a9b      	subgt	r3, r3, r2
 8016bbc:	18ed      	addgt	r5, r5, r3
 8016bbe:	2600      	movs	r6, #0
 8016bc0:	341a      	adds	r4, #26
 8016bc2:	42b5      	cmp	r5, r6
 8016bc4:	d11a      	bne.n	8016bfc <_printf_common+0xc8>
 8016bc6:	2000      	movs	r0, #0
 8016bc8:	e008      	b.n	8016bdc <_printf_common+0xa8>
 8016bca:	2301      	movs	r3, #1
 8016bcc:	4652      	mov	r2, sl
 8016bce:	4649      	mov	r1, r9
 8016bd0:	4638      	mov	r0, r7
 8016bd2:	47c0      	blx	r8
 8016bd4:	3001      	adds	r0, #1
 8016bd6:	d103      	bne.n	8016be0 <_printf_common+0xac>
 8016bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8016bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016be0:	3501      	adds	r5, #1
 8016be2:	e7c6      	b.n	8016b72 <_printf_common+0x3e>
 8016be4:	18e1      	adds	r1, r4, r3
 8016be6:	1c5a      	adds	r2, r3, #1
 8016be8:	2030      	movs	r0, #48	; 0x30
 8016bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016bee:	4422      	add	r2, r4
 8016bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016bf8:	3302      	adds	r3, #2
 8016bfa:	e7c7      	b.n	8016b8c <_printf_common+0x58>
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	4622      	mov	r2, r4
 8016c00:	4649      	mov	r1, r9
 8016c02:	4638      	mov	r0, r7
 8016c04:	47c0      	blx	r8
 8016c06:	3001      	adds	r0, #1
 8016c08:	d0e6      	beq.n	8016bd8 <_printf_common+0xa4>
 8016c0a:	3601      	adds	r6, #1
 8016c0c:	e7d9      	b.n	8016bc2 <_printf_common+0x8e>
	...

08016c10 <_printf_i>:
 8016c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c14:	7e0f      	ldrb	r7, [r1, #24]
 8016c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016c18:	2f78      	cmp	r7, #120	; 0x78
 8016c1a:	4691      	mov	r9, r2
 8016c1c:	4680      	mov	r8, r0
 8016c1e:	460c      	mov	r4, r1
 8016c20:	469a      	mov	sl, r3
 8016c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016c26:	d807      	bhi.n	8016c38 <_printf_i+0x28>
 8016c28:	2f62      	cmp	r7, #98	; 0x62
 8016c2a:	d80a      	bhi.n	8016c42 <_printf_i+0x32>
 8016c2c:	2f00      	cmp	r7, #0
 8016c2e:	f000 80d4 	beq.w	8016dda <_printf_i+0x1ca>
 8016c32:	2f58      	cmp	r7, #88	; 0x58
 8016c34:	f000 80c0 	beq.w	8016db8 <_printf_i+0x1a8>
 8016c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016c40:	e03a      	b.n	8016cb8 <_printf_i+0xa8>
 8016c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016c46:	2b15      	cmp	r3, #21
 8016c48:	d8f6      	bhi.n	8016c38 <_printf_i+0x28>
 8016c4a:	a101      	add	r1, pc, #4	; (adr r1, 8016c50 <_printf_i+0x40>)
 8016c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c50:	08016ca9 	.word	0x08016ca9
 8016c54:	08016cbd 	.word	0x08016cbd
 8016c58:	08016c39 	.word	0x08016c39
 8016c5c:	08016c39 	.word	0x08016c39
 8016c60:	08016c39 	.word	0x08016c39
 8016c64:	08016c39 	.word	0x08016c39
 8016c68:	08016cbd 	.word	0x08016cbd
 8016c6c:	08016c39 	.word	0x08016c39
 8016c70:	08016c39 	.word	0x08016c39
 8016c74:	08016c39 	.word	0x08016c39
 8016c78:	08016c39 	.word	0x08016c39
 8016c7c:	08016dc1 	.word	0x08016dc1
 8016c80:	08016ce9 	.word	0x08016ce9
 8016c84:	08016d7b 	.word	0x08016d7b
 8016c88:	08016c39 	.word	0x08016c39
 8016c8c:	08016c39 	.word	0x08016c39
 8016c90:	08016de3 	.word	0x08016de3
 8016c94:	08016c39 	.word	0x08016c39
 8016c98:	08016ce9 	.word	0x08016ce9
 8016c9c:	08016c39 	.word	0x08016c39
 8016ca0:	08016c39 	.word	0x08016c39
 8016ca4:	08016d83 	.word	0x08016d83
 8016ca8:	682b      	ldr	r3, [r5, #0]
 8016caa:	1d1a      	adds	r2, r3, #4
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	602a      	str	r2, [r5, #0]
 8016cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016cb8:	2301      	movs	r3, #1
 8016cba:	e09f      	b.n	8016dfc <_printf_i+0x1ec>
 8016cbc:	6820      	ldr	r0, [r4, #0]
 8016cbe:	682b      	ldr	r3, [r5, #0]
 8016cc0:	0607      	lsls	r7, r0, #24
 8016cc2:	f103 0104 	add.w	r1, r3, #4
 8016cc6:	6029      	str	r1, [r5, #0]
 8016cc8:	d501      	bpl.n	8016cce <_printf_i+0xbe>
 8016cca:	681e      	ldr	r6, [r3, #0]
 8016ccc:	e003      	b.n	8016cd6 <_printf_i+0xc6>
 8016cce:	0646      	lsls	r6, r0, #25
 8016cd0:	d5fb      	bpl.n	8016cca <_printf_i+0xba>
 8016cd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016cd6:	2e00      	cmp	r6, #0
 8016cd8:	da03      	bge.n	8016ce2 <_printf_i+0xd2>
 8016cda:	232d      	movs	r3, #45	; 0x2d
 8016cdc:	4276      	negs	r6, r6
 8016cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ce2:	485a      	ldr	r0, [pc, #360]	; (8016e4c <_printf_i+0x23c>)
 8016ce4:	230a      	movs	r3, #10
 8016ce6:	e012      	b.n	8016d0e <_printf_i+0xfe>
 8016ce8:	682b      	ldr	r3, [r5, #0]
 8016cea:	6820      	ldr	r0, [r4, #0]
 8016cec:	1d19      	adds	r1, r3, #4
 8016cee:	6029      	str	r1, [r5, #0]
 8016cf0:	0605      	lsls	r5, r0, #24
 8016cf2:	d501      	bpl.n	8016cf8 <_printf_i+0xe8>
 8016cf4:	681e      	ldr	r6, [r3, #0]
 8016cf6:	e002      	b.n	8016cfe <_printf_i+0xee>
 8016cf8:	0641      	lsls	r1, r0, #25
 8016cfa:	d5fb      	bpl.n	8016cf4 <_printf_i+0xe4>
 8016cfc:	881e      	ldrh	r6, [r3, #0]
 8016cfe:	4853      	ldr	r0, [pc, #332]	; (8016e4c <_printf_i+0x23c>)
 8016d00:	2f6f      	cmp	r7, #111	; 0x6f
 8016d02:	bf0c      	ite	eq
 8016d04:	2308      	moveq	r3, #8
 8016d06:	230a      	movne	r3, #10
 8016d08:	2100      	movs	r1, #0
 8016d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d0e:	6865      	ldr	r5, [r4, #4]
 8016d10:	60a5      	str	r5, [r4, #8]
 8016d12:	2d00      	cmp	r5, #0
 8016d14:	bfa2      	ittt	ge
 8016d16:	6821      	ldrge	r1, [r4, #0]
 8016d18:	f021 0104 	bicge.w	r1, r1, #4
 8016d1c:	6021      	strge	r1, [r4, #0]
 8016d1e:	b90e      	cbnz	r6, 8016d24 <_printf_i+0x114>
 8016d20:	2d00      	cmp	r5, #0
 8016d22:	d04b      	beq.n	8016dbc <_printf_i+0x1ac>
 8016d24:	4615      	mov	r5, r2
 8016d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8016d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8016d2e:	5dc7      	ldrb	r7, [r0, r7]
 8016d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016d34:	4637      	mov	r7, r6
 8016d36:	42bb      	cmp	r3, r7
 8016d38:	460e      	mov	r6, r1
 8016d3a:	d9f4      	bls.n	8016d26 <_printf_i+0x116>
 8016d3c:	2b08      	cmp	r3, #8
 8016d3e:	d10b      	bne.n	8016d58 <_printf_i+0x148>
 8016d40:	6823      	ldr	r3, [r4, #0]
 8016d42:	07de      	lsls	r6, r3, #31
 8016d44:	d508      	bpl.n	8016d58 <_printf_i+0x148>
 8016d46:	6923      	ldr	r3, [r4, #16]
 8016d48:	6861      	ldr	r1, [r4, #4]
 8016d4a:	4299      	cmp	r1, r3
 8016d4c:	bfde      	ittt	le
 8016d4e:	2330      	movle	r3, #48	; 0x30
 8016d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016d58:	1b52      	subs	r2, r2, r5
 8016d5a:	6122      	str	r2, [r4, #16]
 8016d5c:	f8cd a000 	str.w	sl, [sp]
 8016d60:	464b      	mov	r3, r9
 8016d62:	aa03      	add	r2, sp, #12
 8016d64:	4621      	mov	r1, r4
 8016d66:	4640      	mov	r0, r8
 8016d68:	f7ff fee4 	bl	8016b34 <_printf_common>
 8016d6c:	3001      	adds	r0, #1
 8016d6e:	d14a      	bne.n	8016e06 <_printf_i+0x1f6>
 8016d70:	f04f 30ff 	mov.w	r0, #4294967295
 8016d74:	b004      	add	sp, #16
 8016d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d7a:	6823      	ldr	r3, [r4, #0]
 8016d7c:	f043 0320 	orr.w	r3, r3, #32
 8016d80:	6023      	str	r3, [r4, #0]
 8016d82:	4833      	ldr	r0, [pc, #204]	; (8016e50 <_printf_i+0x240>)
 8016d84:	2778      	movs	r7, #120	; 0x78
 8016d86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016d8a:	6823      	ldr	r3, [r4, #0]
 8016d8c:	6829      	ldr	r1, [r5, #0]
 8016d8e:	061f      	lsls	r7, r3, #24
 8016d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8016d94:	d402      	bmi.n	8016d9c <_printf_i+0x18c>
 8016d96:	065f      	lsls	r7, r3, #25
 8016d98:	bf48      	it	mi
 8016d9a:	b2b6      	uxthmi	r6, r6
 8016d9c:	07df      	lsls	r7, r3, #31
 8016d9e:	bf48      	it	mi
 8016da0:	f043 0320 	orrmi.w	r3, r3, #32
 8016da4:	6029      	str	r1, [r5, #0]
 8016da6:	bf48      	it	mi
 8016da8:	6023      	strmi	r3, [r4, #0]
 8016daa:	b91e      	cbnz	r6, 8016db4 <_printf_i+0x1a4>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	f023 0320 	bic.w	r3, r3, #32
 8016db2:	6023      	str	r3, [r4, #0]
 8016db4:	2310      	movs	r3, #16
 8016db6:	e7a7      	b.n	8016d08 <_printf_i+0xf8>
 8016db8:	4824      	ldr	r0, [pc, #144]	; (8016e4c <_printf_i+0x23c>)
 8016dba:	e7e4      	b.n	8016d86 <_printf_i+0x176>
 8016dbc:	4615      	mov	r5, r2
 8016dbe:	e7bd      	b.n	8016d3c <_printf_i+0x12c>
 8016dc0:	682b      	ldr	r3, [r5, #0]
 8016dc2:	6826      	ldr	r6, [r4, #0]
 8016dc4:	6961      	ldr	r1, [r4, #20]
 8016dc6:	1d18      	adds	r0, r3, #4
 8016dc8:	6028      	str	r0, [r5, #0]
 8016dca:	0635      	lsls	r5, r6, #24
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	d501      	bpl.n	8016dd4 <_printf_i+0x1c4>
 8016dd0:	6019      	str	r1, [r3, #0]
 8016dd2:	e002      	b.n	8016dda <_printf_i+0x1ca>
 8016dd4:	0670      	lsls	r0, r6, #25
 8016dd6:	d5fb      	bpl.n	8016dd0 <_printf_i+0x1c0>
 8016dd8:	8019      	strh	r1, [r3, #0]
 8016dda:	2300      	movs	r3, #0
 8016ddc:	6123      	str	r3, [r4, #16]
 8016dde:	4615      	mov	r5, r2
 8016de0:	e7bc      	b.n	8016d5c <_printf_i+0x14c>
 8016de2:	682b      	ldr	r3, [r5, #0]
 8016de4:	1d1a      	adds	r2, r3, #4
 8016de6:	602a      	str	r2, [r5, #0]
 8016de8:	681d      	ldr	r5, [r3, #0]
 8016dea:	6862      	ldr	r2, [r4, #4]
 8016dec:	2100      	movs	r1, #0
 8016dee:	4628      	mov	r0, r5
 8016df0:	f7e9 fa16 	bl	8000220 <memchr>
 8016df4:	b108      	cbz	r0, 8016dfa <_printf_i+0x1ea>
 8016df6:	1b40      	subs	r0, r0, r5
 8016df8:	6060      	str	r0, [r4, #4]
 8016dfa:	6863      	ldr	r3, [r4, #4]
 8016dfc:	6123      	str	r3, [r4, #16]
 8016dfe:	2300      	movs	r3, #0
 8016e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e04:	e7aa      	b.n	8016d5c <_printf_i+0x14c>
 8016e06:	6923      	ldr	r3, [r4, #16]
 8016e08:	462a      	mov	r2, r5
 8016e0a:	4649      	mov	r1, r9
 8016e0c:	4640      	mov	r0, r8
 8016e0e:	47d0      	blx	sl
 8016e10:	3001      	adds	r0, #1
 8016e12:	d0ad      	beq.n	8016d70 <_printf_i+0x160>
 8016e14:	6823      	ldr	r3, [r4, #0]
 8016e16:	079b      	lsls	r3, r3, #30
 8016e18:	d413      	bmi.n	8016e42 <_printf_i+0x232>
 8016e1a:	68e0      	ldr	r0, [r4, #12]
 8016e1c:	9b03      	ldr	r3, [sp, #12]
 8016e1e:	4298      	cmp	r0, r3
 8016e20:	bfb8      	it	lt
 8016e22:	4618      	movlt	r0, r3
 8016e24:	e7a6      	b.n	8016d74 <_printf_i+0x164>
 8016e26:	2301      	movs	r3, #1
 8016e28:	4632      	mov	r2, r6
 8016e2a:	4649      	mov	r1, r9
 8016e2c:	4640      	mov	r0, r8
 8016e2e:	47d0      	blx	sl
 8016e30:	3001      	adds	r0, #1
 8016e32:	d09d      	beq.n	8016d70 <_printf_i+0x160>
 8016e34:	3501      	adds	r5, #1
 8016e36:	68e3      	ldr	r3, [r4, #12]
 8016e38:	9903      	ldr	r1, [sp, #12]
 8016e3a:	1a5b      	subs	r3, r3, r1
 8016e3c:	42ab      	cmp	r3, r5
 8016e3e:	dcf2      	bgt.n	8016e26 <_printf_i+0x216>
 8016e40:	e7eb      	b.n	8016e1a <_printf_i+0x20a>
 8016e42:	2500      	movs	r5, #0
 8016e44:	f104 0619 	add.w	r6, r4, #25
 8016e48:	e7f5      	b.n	8016e36 <_printf_i+0x226>
 8016e4a:	bf00      	nop
 8016e4c:	0801bdd9 	.word	0x0801bdd9
 8016e50:	0801bdea 	.word	0x0801bdea

08016e54 <std>:
 8016e54:	2300      	movs	r3, #0
 8016e56:	b510      	push	{r4, lr}
 8016e58:	4604      	mov	r4, r0
 8016e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8016e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e62:	6083      	str	r3, [r0, #8]
 8016e64:	8181      	strh	r1, [r0, #12]
 8016e66:	6643      	str	r3, [r0, #100]	; 0x64
 8016e68:	81c2      	strh	r2, [r0, #14]
 8016e6a:	6183      	str	r3, [r0, #24]
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	2208      	movs	r2, #8
 8016e70:	305c      	adds	r0, #92	; 0x5c
 8016e72:	f000 f914 	bl	801709e <memset>
 8016e76:	4b05      	ldr	r3, [pc, #20]	; (8016e8c <std+0x38>)
 8016e78:	6263      	str	r3, [r4, #36]	; 0x24
 8016e7a:	4b05      	ldr	r3, [pc, #20]	; (8016e90 <std+0x3c>)
 8016e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e7e:	4b05      	ldr	r3, [pc, #20]	; (8016e94 <std+0x40>)
 8016e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e82:	4b05      	ldr	r3, [pc, #20]	; (8016e98 <std+0x44>)
 8016e84:	6224      	str	r4, [r4, #32]
 8016e86:	6323      	str	r3, [r4, #48]	; 0x30
 8016e88:	bd10      	pop	{r4, pc}
 8016e8a:	bf00      	nop
 8016e8c:	08017019 	.word	0x08017019
 8016e90:	0801703b 	.word	0x0801703b
 8016e94:	08017073 	.word	0x08017073
 8016e98:	08017097 	.word	0x08017097

08016e9c <stdio_exit_handler>:
 8016e9c:	4a02      	ldr	r2, [pc, #8]	; (8016ea8 <stdio_exit_handler+0xc>)
 8016e9e:	4903      	ldr	r1, [pc, #12]	; (8016eac <stdio_exit_handler+0x10>)
 8016ea0:	4803      	ldr	r0, [pc, #12]	; (8016eb0 <stdio_exit_handler+0x14>)
 8016ea2:	f000 b87b 	b.w	8016f9c <_fwalk_sglue>
 8016ea6:	bf00      	nop
 8016ea8:	200001a0 	.word	0x200001a0
 8016eac:	08018df9 	.word	0x08018df9
 8016eb0:	200001ac 	.word	0x200001ac

08016eb4 <cleanup_stdio>:
 8016eb4:	6841      	ldr	r1, [r0, #4]
 8016eb6:	4b0c      	ldr	r3, [pc, #48]	; (8016ee8 <cleanup_stdio+0x34>)
 8016eb8:	4299      	cmp	r1, r3
 8016eba:	b510      	push	{r4, lr}
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	d001      	beq.n	8016ec4 <cleanup_stdio+0x10>
 8016ec0:	f001 ff9a 	bl	8018df8 <_fflush_r>
 8016ec4:	68a1      	ldr	r1, [r4, #8]
 8016ec6:	4b09      	ldr	r3, [pc, #36]	; (8016eec <cleanup_stdio+0x38>)
 8016ec8:	4299      	cmp	r1, r3
 8016eca:	d002      	beq.n	8016ed2 <cleanup_stdio+0x1e>
 8016ecc:	4620      	mov	r0, r4
 8016ece:	f001 ff93 	bl	8018df8 <_fflush_r>
 8016ed2:	68e1      	ldr	r1, [r4, #12]
 8016ed4:	4b06      	ldr	r3, [pc, #24]	; (8016ef0 <cleanup_stdio+0x3c>)
 8016ed6:	4299      	cmp	r1, r3
 8016ed8:	d004      	beq.n	8016ee4 <cleanup_stdio+0x30>
 8016eda:	4620      	mov	r0, r4
 8016edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ee0:	f001 bf8a 	b.w	8018df8 <_fflush_r>
 8016ee4:	bd10      	pop	{r4, pc}
 8016ee6:	bf00      	nop
 8016ee8:	20016954 	.word	0x20016954
 8016eec:	200169bc 	.word	0x200169bc
 8016ef0:	20016a24 	.word	0x20016a24

08016ef4 <global_stdio_init.part.0>:
 8016ef4:	b510      	push	{r4, lr}
 8016ef6:	4b0b      	ldr	r3, [pc, #44]	; (8016f24 <global_stdio_init.part.0+0x30>)
 8016ef8:	4c0b      	ldr	r4, [pc, #44]	; (8016f28 <global_stdio_init.part.0+0x34>)
 8016efa:	4a0c      	ldr	r2, [pc, #48]	; (8016f2c <global_stdio_init.part.0+0x38>)
 8016efc:	601a      	str	r2, [r3, #0]
 8016efe:	4620      	mov	r0, r4
 8016f00:	2200      	movs	r2, #0
 8016f02:	2104      	movs	r1, #4
 8016f04:	f7ff ffa6 	bl	8016e54 <std>
 8016f08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	2109      	movs	r1, #9
 8016f10:	f7ff ffa0 	bl	8016e54 <std>
 8016f14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016f18:	2202      	movs	r2, #2
 8016f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f1e:	2112      	movs	r1, #18
 8016f20:	f7ff bf98 	b.w	8016e54 <std>
 8016f24:	20016a8c 	.word	0x20016a8c
 8016f28:	20016954 	.word	0x20016954
 8016f2c:	08016e9d 	.word	0x08016e9d

08016f30 <__sfp_lock_acquire>:
 8016f30:	4801      	ldr	r0, [pc, #4]	; (8016f38 <__sfp_lock_acquire+0x8>)
 8016f32:	f000 b931 	b.w	8017198 <__retarget_lock_acquire_recursive>
 8016f36:	bf00      	nop
 8016f38:	20016a95 	.word	0x20016a95

08016f3c <__sfp_lock_release>:
 8016f3c:	4801      	ldr	r0, [pc, #4]	; (8016f44 <__sfp_lock_release+0x8>)
 8016f3e:	f000 b92c 	b.w	801719a <__retarget_lock_release_recursive>
 8016f42:	bf00      	nop
 8016f44:	20016a95 	.word	0x20016a95

08016f48 <__sinit>:
 8016f48:	b510      	push	{r4, lr}
 8016f4a:	4604      	mov	r4, r0
 8016f4c:	f7ff fff0 	bl	8016f30 <__sfp_lock_acquire>
 8016f50:	6a23      	ldr	r3, [r4, #32]
 8016f52:	b11b      	cbz	r3, 8016f5c <__sinit+0x14>
 8016f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f58:	f7ff bff0 	b.w	8016f3c <__sfp_lock_release>
 8016f5c:	4b04      	ldr	r3, [pc, #16]	; (8016f70 <__sinit+0x28>)
 8016f5e:	6223      	str	r3, [r4, #32]
 8016f60:	4b04      	ldr	r3, [pc, #16]	; (8016f74 <__sinit+0x2c>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d1f5      	bne.n	8016f54 <__sinit+0xc>
 8016f68:	f7ff ffc4 	bl	8016ef4 <global_stdio_init.part.0>
 8016f6c:	e7f2      	b.n	8016f54 <__sinit+0xc>
 8016f6e:	bf00      	nop
 8016f70:	08016eb5 	.word	0x08016eb5
 8016f74:	20016a8c 	.word	0x20016a8c

08016f78 <fiprintf>:
 8016f78:	b40e      	push	{r1, r2, r3}
 8016f7a:	b503      	push	{r0, r1, lr}
 8016f7c:	4601      	mov	r1, r0
 8016f7e:	ab03      	add	r3, sp, #12
 8016f80:	4805      	ldr	r0, [pc, #20]	; (8016f98 <fiprintf+0x20>)
 8016f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f86:	6800      	ldr	r0, [r0, #0]
 8016f88:	9301      	str	r3, [sp, #4]
 8016f8a:	f001 fd95 	bl	8018ab8 <_vfiprintf_r>
 8016f8e:	b002      	add	sp, #8
 8016f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f94:	b003      	add	sp, #12
 8016f96:	4770      	bx	lr
 8016f98:	200001f8 	.word	0x200001f8

08016f9c <_fwalk_sglue>:
 8016f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fa0:	4607      	mov	r7, r0
 8016fa2:	4688      	mov	r8, r1
 8016fa4:	4614      	mov	r4, r2
 8016fa6:	2600      	movs	r6, #0
 8016fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016fac:	f1b9 0901 	subs.w	r9, r9, #1
 8016fb0:	d505      	bpl.n	8016fbe <_fwalk_sglue+0x22>
 8016fb2:	6824      	ldr	r4, [r4, #0]
 8016fb4:	2c00      	cmp	r4, #0
 8016fb6:	d1f7      	bne.n	8016fa8 <_fwalk_sglue+0xc>
 8016fb8:	4630      	mov	r0, r6
 8016fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fbe:	89ab      	ldrh	r3, [r5, #12]
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	d907      	bls.n	8016fd4 <_fwalk_sglue+0x38>
 8016fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016fc8:	3301      	adds	r3, #1
 8016fca:	d003      	beq.n	8016fd4 <_fwalk_sglue+0x38>
 8016fcc:	4629      	mov	r1, r5
 8016fce:	4638      	mov	r0, r7
 8016fd0:	47c0      	blx	r8
 8016fd2:	4306      	orrs	r6, r0
 8016fd4:	3568      	adds	r5, #104	; 0x68
 8016fd6:	e7e9      	b.n	8016fac <_fwalk_sglue+0x10>

08016fd8 <siprintf>:
 8016fd8:	b40e      	push	{r1, r2, r3}
 8016fda:	b500      	push	{lr}
 8016fdc:	b09c      	sub	sp, #112	; 0x70
 8016fde:	ab1d      	add	r3, sp, #116	; 0x74
 8016fe0:	9002      	str	r0, [sp, #8]
 8016fe2:	9006      	str	r0, [sp, #24]
 8016fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016fe8:	4809      	ldr	r0, [pc, #36]	; (8017010 <siprintf+0x38>)
 8016fea:	9107      	str	r1, [sp, #28]
 8016fec:	9104      	str	r1, [sp, #16]
 8016fee:	4909      	ldr	r1, [pc, #36]	; (8017014 <siprintf+0x3c>)
 8016ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ff4:	9105      	str	r1, [sp, #20]
 8016ff6:	6800      	ldr	r0, [r0, #0]
 8016ff8:	9301      	str	r3, [sp, #4]
 8016ffa:	a902      	add	r1, sp, #8
 8016ffc:	f001 fc34 	bl	8018868 <_svfiprintf_r>
 8017000:	9b02      	ldr	r3, [sp, #8]
 8017002:	2200      	movs	r2, #0
 8017004:	701a      	strb	r2, [r3, #0]
 8017006:	b01c      	add	sp, #112	; 0x70
 8017008:	f85d eb04 	ldr.w	lr, [sp], #4
 801700c:	b003      	add	sp, #12
 801700e:	4770      	bx	lr
 8017010:	200001f8 	.word	0x200001f8
 8017014:	ffff0208 	.word	0xffff0208

08017018 <__sread>:
 8017018:	b510      	push	{r4, lr}
 801701a:	460c      	mov	r4, r1
 801701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017020:	f000 f86c 	bl	80170fc <_read_r>
 8017024:	2800      	cmp	r0, #0
 8017026:	bfab      	itete	ge
 8017028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801702a:	89a3      	ldrhlt	r3, [r4, #12]
 801702c:	181b      	addge	r3, r3, r0
 801702e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017032:	bfac      	ite	ge
 8017034:	6563      	strge	r3, [r4, #84]	; 0x54
 8017036:	81a3      	strhlt	r3, [r4, #12]
 8017038:	bd10      	pop	{r4, pc}

0801703a <__swrite>:
 801703a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801703e:	461f      	mov	r7, r3
 8017040:	898b      	ldrh	r3, [r1, #12]
 8017042:	05db      	lsls	r3, r3, #23
 8017044:	4605      	mov	r5, r0
 8017046:	460c      	mov	r4, r1
 8017048:	4616      	mov	r6, r2
 801704a:	d505      	bpl.n	8017058 <__swrite+0x1e>
 801704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017050:	2302      	movs	r3, #2
 8017052:	2200      	movs	r2, #0
 8017054:	f000 f840 	bl	80170d8 <_lseek_r>
 8017058:	89a3      	ldrh	r3, [r4, #12]
 801705a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801705e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017062:	81a3      	strh	r3, [r4, #12]
 8017064:	4632      	mov	r2, r6
 8017066:	463b      	mov	r3, r7
 8017068:	4628      	mov	r0, r5
 801706a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801706e:	f000 b857 	b.w	8017120 <_write_r>

08017072 <__sseek>:
 8017072:	b510      	push	{r4, lr}
 8017074:	460c      	mov	r4, r1
 8017076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801707a:	f000 f82d 	bl	80170d8 <_lseek_r>
 801707e:	1c43      	adds	r3, r0, #1
 8017080:	89a3      	ldrh	r3, [r4, #12]
 8017082:	bf15      	itete	ne
 8017084:	6560      	strne	r0, [r4, #84]	; 0x54
 8017086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801708a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801708e:	81a3      	strheq	r3, [r4, #12]
 8017090:	bf18      	it	ne
 8017092:	81a3      	strhne	r3, [r4, #12]
 8017094:	bd10      	pop	{r4, pc}

08017096 <__sclose>:
 8017096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801709a:	f000 b80d 	b.w	80170b8 <_close_r>

0801709e <memset>:
 801709e:	4402      	add	r2, r0
 80170a0:	4603      	mov	r3, r0
 80170a2:	4293      	cmp	r3, r2
 80170a4:	d100      	bne.n	80170a8 <memset+0xa>
 80170a6:	4770      	bx	lr
 80170a8:	f803 1b01 	strb.w	r1, [r3], #1
 80170ac:	e7f9      	b.n	80170a2 <memset+0x4>
	...

080170b0 <_localeconv_r>:
 80170b0:	4800      	ldr	r0, [pc, #0]	; (80170b4 <_localeconv_r+0x4>)
 80170b2:	4770      	bx	lr
 80170b4:	200002ec 	.word	0x200002ec

080170b8 <_close_r>:
 80170b8:	b538      	push	{r3, r4, r5, lr}
 80170ba:	4d06      	ldr	r5, [pc, #24]	; (80170d4 <_close_r+0x1c>)
 80170bc:	2300      	movs	r3, #0
 80170be:	4604      	mov	r4, r0
 80170c0:	4608      	mov	r0, r1
 80170c2:	602b      	str	r3, [r5, #0]
 80170c4:	f7ed f945 	bl	8004352 <_close>
 80170c8:	1c43      	adds	r3, r0, #1
 80170ca:	d102      	bne.n	80170d2 <_close_r+0x1a>
 80170cc:	682b      	ldr	r3, [r5, #0]
 80170ce:	b103      	cbz	r3, 80170d2 <_close_r+0x1a>
 80170d0:	6023      	str	r3, [r4, #0]
 80170d2:	bd38      	pop	{r3, r4, r5, pc}
 80170d4:	20016a90 	.word	0x20016a90

080170d8 <_lseek_r>:
 80170d8:	b538      	push	{r3, r4, r5, lr}
 80170da:	4d07      	ldr	r5, [pc, #28]	; (80170f8 <_lseek_r+0x20>)
 80170dc:	4604      	mov	r4, r0
 80170de:	4608      	mov	r0, r1
 80170e0:	4611      	mov	r1, r2
 80170e2:	2200      	movs	r2, #0
 80170e4:	602a      	str	r2, [r5, #0]
 80170e6:	461a      	mov	r2, r3
 80170e8:	f7ed f93d 	bl	8004366 <_lseek>
 80170ec:	1c43      	adds	r3, r0, #1
 80170ee:	d102      	bne.n	80170f6 <_lseek_r+0x1e>
 80170f0:	682b      	ldr	r3, [r5, #0]
 80170f2:	b103      	cbz	r3, 80170f6 <_lseek_r+0x1e>
 80170f4:	6023      	str	r3, [r4, #0]
 80170f6:	bd38      	pop	{r3, r4, r5, pc}
 80170f8:	20016a90 	.word	0x20016a90

080170fc <_read_r>:
 80170fc:	b538      	push	{r3, r4, r5, lr}
 80170fe:	4d07      	ldr	r5, [pc, #28]	; (801711c <_read_r+0x20>)
 8017100:	4604      	mov	r4, r0
 8017102:	4608      	mov	r0, r1
 8017104:	4611      	mov	r1, r2
 8017106:	2200      	movs	r2, #0
 8017108:	602a      	str	r2, [r5, #0]
 801710a:	461a      	mov	r2, r3
 801710c:	f7ed f914 	bl	8004338 <_read>
 8017110:	1c43      	adds	r3, r0, #1
 8017112:	d102      	bne.n	801711a <_read_r+0x1e>
 8017114:	682b      	ldr	r3, [r5, #0]
 8017116:	b103      	cbz	r3, 801711a <_read_r+0x1e>
 8017118:	6023      	str	r3, [r4, #0]
 801711a:	bd38      	pop	{r3, r4, r5, pc}
 801711c:	20016a90 	.word	0x20016a90

08017120 <_write_r>:
 8017120:	b538      	push	{r3, r4, r5, lr}
 8017122:	4d07      	ldr	r5, [pc, #28]	; (8017140 <_write_r+0x20>)
 8017124:	4604      	mov	r4, r0
 8017126:	4608      	mov	r0, r1
 8017128:	4611      	mov	r1, r2
 801712a:	2200      	movs	r2, #0
 801712c:	602a      	str	r2, [r5, #0]
 801712e:	461a      	mov	r2, r3
 8017130:	f7ea fa8c 	bl	800164c <_write>
 8017134:	1c43      	adds	r3, r0, #1
 8017136:	d102      	bne.n	801713e <_write_r+0x1e>
 8017138:	682b      	ldr	r3, [r5, #0]
 801713a:	b103      	cbz	r3, 801713e <_write_r+0x1e>
 801713c:	6023      	str	r3, [r4, #0]
 801713e:	bd38      	pop	{r3, r4, r5, pc}
 8017140:	20016a90 	.word	0x20016a90

08017144 <__errno>:
 8017144:	4b01      	ldr	r3, [pc, #4]	; (801714c <__errno+0x8>)
 8017146:	6818      	ldr	r0, [r3, #0]
 8017148:	4770      	bx	lr
 801714a:	bf00      	nop
 801714c:	200001f8 	.word	0x200001f8

08017150 <__libc_init_array>:
 8017150:	b570      	push	{r4, r5, r6, lr}
 8017152:	4d0d      	ldr	r5, [pc, #52]	; (8017188 <__libc_init_array+0x38>)
 8017154:	4c0d      	ldr	r4, [pc, #52]	; (801718c <__libc_init_array+0x3c>)
 8017156:	1b64      	subs	r4, r4, r5
 8017158:	10a4      	asrs	r4, r4, #2
 801715a:	2600      	movs	r6, #0
 801715c:	42a6      	cmp	r6, r4
 801715e:	d109      	bne.n	8017174 <__libc_init_array+0x24>
 8017160:	4d0b      	ldr	r5, [pc, #44]	; (8017190 <__libc_init_array+0x40>)
 8017162:	4c0c      	ldr	r4, [pc, #48]	; (8017194 <__libc_init_array+0x44>)
 8017164:	f002 fd9e 	bl	8019ca4 <_init>
 8017168:	1b64      	subs	r4, r4, r5
 801716a:	10a4      	asrs	r4, r4, #2
 801716c:	2600      	movs	r6, #0
 801716e:	42a6      	cmp	r6, r4
 8017170:	d105      	bne.n	801717e <__libc_init_array+0x2e>
 8017172:	bd70      	pop	{r4, r5, r6, pc}
 8017174:	f855 3b04 	ldr.w	r3, [r5], #4
 8017178:	4798      	blx	r3
 801717a:	3601      	adds	r6, #1
 801717c:	e7ee      	b.n	801715c <__libc_init_array+0xc>
 801717e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017182:	4798      	blx	r3
 8017184:	3601      	adds	r6, #1
 8017186:	e7f2      	b.n	801716e <__libc_init_array+0x1e>
 8017188:	0801c4d0 	.word	0x0801c4d0
 801718c:	0801c4d0 	.word	0x0801c4d0
 8017190:	0801c4d0 	.word	0x0801c4d0
 8017194:	0801c4d4 	.word	0x0801c4d4

08017198 <__retarget_lock_acquire_recursive>:
 8017198:	4770      	bx	lr

0801719a <__retarget_lock_release_recursive>:
 801719a:	4770      	bx	lr

0801719c <memcpy>:
 801719c:	440a      	add	r2, r1
 801719e:	4291      	cmp	r1, r2
 80171a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80171a4:	d100      	bne.n	80171a8 <memcpy+0xc>
 80171a6:	4770      	bx	lr
 80171a8:	b510      	push	{r4, lr}
 80171aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171b2:	4291      	cmp	r1, r2
 80171b4:	d1f9      	bne.n	80171aa <memcpy+0xe>
 80171b6:	bd10      	pop	{r4, pc}

080171b8 <abort>:
 80171b8:	b508      	push	{r3, lr}
 80171ba:	2006      	movs	r0, #6
 80171bc:	f001 ff1c 	bl	8018ff8 <raise>
 80171c0:	2001      	movs	r0, #1
 80171c2:	f7ed f8b3 	bl	800432c <_exit>

080171c6 <quorem>:
 80171c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ca:	6903      	ldr	r3, [r0, #16]
 80171cc:	690c      	ldr	r4, [r1, #16]
 80171ce:	42a3      	cmp	r3, r4
 80171d0:	4607      	mov	r7, r0
 80171d2:	db7e      	blt.n	80172d2 <quorem+0x10c>
 80171d4:	3c01      	subs	r4, #1
 80171d6:	f101 0814 	add.w	r8, r1, #20
 80171da:	f100 0514 	add.w	r5, r0, #20
 80171de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171e2:	9301      	str	r3, [sp, #4]
 80171e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80171e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80171ec:	3301      	adds	r3, #1
 80171ee:	429a      	cmp	r2, r3
 80171f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80171f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80171f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80171fc:	d331      	bcc.n	8017262 <quorem+0x9c>
 80171fe:	f04f 0e00 	mov.w	lr, #0
 8017202:	4640      	mov	r0, r8
 8017204:	46ac      	mov	ip, r5
 8017206:	46f2      	mov	sl, lr
 8017208:	f850 2b04 	ldr.w	r2, [r0], #4
 801720c:	b293      	uxth	r3, r2
 801720e:	fb06 e303 	mla	r3, r6, r3, lr
 8017212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017216:	0c1a      	lsrs	r2, r3, #16
 8017218:	b29b      	uxth	r3, r3
 801721a:	ebaa 0303 	sub.w	r3, sl, r3
 801721e:	f8dc a000 	ldr.w	sl, [ip]
 8017222:	fa13 f38a 	uxtah	r3, r3, sl
 8017226:	fb06 220e 	mla	r2, r6, lr, r2
 801722a:	9300      	str	r3, [sp, #0]
 801722c:	9b00      	ldr	r3, [sp, #0]
 801722e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017232:	b292      	uxth	r2, r2
 8017234:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801723c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017240:	4581      	cmp	r9, r0
 8017242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017246:	f84c 3b04 	str.w	r3, [ip], #4
 801724a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801724e:	d2db      	bcs.n	8017208 <quorem+0x42>
 8017250:	f855 300b 	ldr.w	r3, [r5, fp]
 8017254:	b92b      	cbnz	r3, 8017262 <quorem+0x9c>
 8017256:	9b01      	ldr	r3, [sp, #4]
 8017258:	3b04      	subs	r3, #4
 801725a:	429d      	cmp	r5, r3
 801725c:	461a      	mov	r2, r3
 801725e:	d32c      	bcc.n	80172ba <quorem+0xf4>
 8017260:	613c      	str	r4, [r7, #16]
 8017262:	4638      	mov	r0, r7
 8017264:	f001 f9a6 	bl	80185b4 <__mcmp>
 8017268:	2800      	cmp	r0, #0
 801726a:	db22      	blt.n	80172b2 <quorem+0xec>
 801726c:	3601      	adds	r6, #1
 801726e:	4629      	mov	r1, r5
 8017270:	2000      	movs	r0, #0
 8017272:	f858 2b04 	ldr.w	r2, [r8], #4
 8017276:	f8d1 c000 	ldr.w	ip, [r1]
 801727a:	b293      	uxth	r3, r2
 801727c:	1ac3      	subs	r3, r0, r3
 801727e:	0c12      	lsrs	r2, r2, #16
 8017280:	fa13 f38c 	uxtah	r3, r3, ip
 8017284:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801728c:	b29b      	uxth	r3, r3
 801728e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017292:	45c1      	cmp	r9, r8
 8017294:	f841 3b04 	str.w	r3, [r1], #4
 8017298:	ea4f 4022 	mov.w	r0, r2, asr #16
 801729c:	d2e9      	bcs.n	8017272 <quorem+0xac>
 801729e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172a6:	b922      	cbnz	r2, 80172b2 <quorem+0xec>
 80172a8:	3b04      	subs	r3, #4
 80172aa:	429d      	cmp	r5, r3
 80172ac:	461a      	mov	r2, r3
 80172ae:	d30a      	bcc.n	80172c6 <quorem+0x100>
 80172b0:	613c      	str	r4, [r7, #16]
 80172b2:	4630      	mov	r0, r6
 80172b4:	b003      	add	sp, #12
 80172b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ba:	6812      	ldr	r2, [r2, #0]
 80172bc:	3b04      	subs	r3, #4
 80172be:	2a00      	cmp	r2, #0
 80172c0:	d1ce      	bne.n	8017260 <quorem+0x9a>
 80172c2:	3c01      	subs	r4, #1
 80172c4:	e7c9      	b.n	801725a <quorem+0x94>
 80172c6:	6812      	ldr	r2, [r2, #0]
 80172c8:	3b04      	subs	r3, #4
 80172ca:	2a00      	cmp	r2, #0
 80172cc:	d1f0      	bne.n	80172b0 <quorem+0xea>
 80172ce:	3c01      	subs	r4, #1
 80172d0:	e7eb      	b.n	80172aa <quorem+0xe4>
 80172d2:	2000      	movs	r0, #0
 80172d4:	e7ee      	b.n	80172b4 <quorem+0xee>
	...

080172d8 <_dtoa_r>:
 80172d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172dc:	ed2d 8b04 	vpush	{d8-d9}
 80172e0:	69c5      	ldr	r5, [r0, #28]
 80172e2:	b093      	sub	sp, #76	; 0x4c
 80172e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80172e8:	ec57 6b10 	vmov	r6, r7, d0
 80172ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80172f0:	9107      	str	r1, [sp, #28]
 80172f2:	4604      	mov	r4, r0
 80172f4:	920a      	str	r2, [sp, #40]	; 0x28
 80172f6:	930d      	str	r3, [sp, #52]	; 0x34
 80172f8:	b975      	cbnz	r5, 8017318 <_dtoa_r+0x40>
 80172fa:	2010      	movs	r0, #16
 80172fc:	f000 fe2a 	bl	8017f54 <malloc>
 8017300:	4602      	mov	r2, r0
 8017302:	61e0      	str	r0, [r4, #28]
 8017304:	b920      	cbnz	r0, 8017310 <_dtoa_r+0x38>
 8017306:	4bae      	ldr	r3, [pc, #696]	; (80175c0 <_dtoa_r+0x2e8>)
 8017308:	21ef      	movs	r1, #239	; 0xef
 801730a:	48ae      	ldr	r0, [pc, #696]	; (80175c4 <_dtoa_r+0x2ec>)
 801730c:	f7ff f91e 	bl	801654c <__assert_func>
 8017310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017314:	6005      	str	r5, [r0, #0]
 8017316:	60c5      	str	r5, [r0, #12]
 8017318:	69e3      	ldr	r3, [r4, #28]
 801731a:	6819      	ldr	r1, [r3, #0]
 801731c:	b151      	cbz	r1, 8017334 <_dtoa_r+0x5c>
 801731e:	685a      	ldr	r2, [r3, #4]
 8017320:	604a      	str	r2, [r1, #4]
 8017322:	2301      	movs	r3, #1
 8017324:	4093      	lsls	r3, r2
 8017326:	608b      	str	r3, [r1, #8]
 8017328:	4620      	mov	r0, r4
 801732a:	f000 ff07 	bl	801813c <_Bfree>
 801732e:	69e3      	ldr	r3, [r4, #28]
 8017330:	2200      	movs	r2, #0
 8017332:	601a      	str	r2, [r3, #0]
 8017334:	1e3b      	subs	r3, r7, #0
 8017336:	bfbb      	ittet	lt
 8017338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801733c:	9303      	strlt	r3, [sp, #12]
 801733e:	2300      	movge	r3, #0
 8017340:	2201      	movlt	r2, #1
 8017342:	bfac      	ite	ge
 8017344:	f8c8 3000 	strge.w	r3, [r8]
 8017348:	f8c8 2000 	strlt.w	r2, [r8]
 801734c:	4b9e      	ldr	r3, [pc, #632]	; (80175c8 <_dtoa_r+0x2f0>)
 801734e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017352:	ea33 0308 	bics.w	r3, r3, r8
 8017356:	d11b      	bne.n	8017390 <_dtoa_r+0xb8>
 8017358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801735a:	f242 730f 	movw	r3, #9999	; 0x270f
 801735e:	6013      	str	r3, [r2, #0]
 8017360:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017364:	4333      	orrs	r3, r6
 8017366:	f000 8593 	beq.w	8017e90 <_dtoa_r+0xbb8>
 801736a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801736c:	b963      	cbnz	r3, 8017388 <_dtoa_r+0xb0>
 801736e:	4b97      	ldr	r3, [pc, #604]	; (80175cc <_dtoa_r+0x2f4>)
 8017370:	e027      	b.n	80173c2 <_dtoa_r+0xea>
 8017372:	4b97      	ldr	r3, [pc, #604]	; (80175d0 <_dtoa_r+0x2f8>)
 8017374:	9300      	str	r3, [sp, #0]
 8017376:	3308      	adds	r3, #8
 8017378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801737a:	6013      	str	r3, [r2, #0]
 801737c:	9800      	ldr	r0, [sp, #0]
 801737e:	b013      	add	sp, #76	; 0x4c
 8017380:	ecbd 8b04 	vpop	{d8-d9}
 8017384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017388:	4b90      	ldr	r3, [pc, #576]	; (80175cc <_dtoa_r+0x2f4>)
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	3303      	adds	r3, #3
 801738e:	e7f3      	b.n	8017378 <_dtoa_r+0xa0>
 8017390:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017394:	2200      	movs	r2, #0
 8017396:	ec51 0b17 	vmov	r0, r1, d7
 801739a:	eeb0 8a47 	vmov.f32	s16, s14
 801739e:	eef0 8a67 	vmov.f32	s17, s15
 80173a2:	2300      	movs	r3, #0
 80173a4:	f7e9 fbb8 	bl	8000b18 <__aeabi_dcmpeq>
 80173a8:	4681      	mov	r9, r0
 80173aa:	b160      	cbz	r0, 80173c6 <_dtoa_r+0xee>
 80173ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80173ae:	2301      	movs	r3, #1
 80173b0:	6013      	str	r3, [r2, #0]
 80173b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	f000 8568 	beq.w	8017e8a <_dtoa_r+0xbb2>
 80173ba:	4b86      	ldr	r3, [pc, #536]	; (80175d4 <_dtoa_r+0x2fc>)
 80173bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80173be:	6013      	str	r3, [r2, #0]
 80173c0:	3b01      	subs	r3, #1
 80173c2:	9300      	str	r3, [sp, #0]
 80173c4:	e7da      	b.n	801737c <_dtoa_r+0xa4>
 80173c6:	aa10      	add	r2, sp, #64	; 0x40
 80173c8:	a911      	add	r1, sp, #68	; 0x44
 80173ca:	4620      	mov	r0, r4
 80173cc:	eeb0 0a48 	vmov.f32	s0, s16
 80173d0:	eef0 0a68 	vmov.f32	s1, s17
 80173d4:	f001 f994 	bl	8018700 <__d2b>
 80173d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80173dc:	4682      	mov	sl, r0
 80173de:	2d00      	cmp	r5, #0
 80173e0:	d07f      	beq.n	80174e2 <_dtoa_r+0x20a>
 80173e2:	ee18 3a90 	vmov	r3, s17
 80173e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80173ee:	ec51 0b18 	vmov	r0, r1, d8
 80173f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80173f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80173fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80173fe:	4619      	mov	r1, r3
 8017400:	2200      	movs	r2, #0
 8017402:	4b75      	ldr	r3, [pc, #468]	; (80175d8 <_dtoa_r+0x300>)
 8017404:	f7e8 ff68 	bl	80002d8 <__aeabi_dsub>
 8017408:	a367      	add	r3, pc, #412	; (adr r3, 80175a8 <_dtoa_r+0x2d0>)
 801740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740e:	f7e9 f91b 	bl	8000648 <__aeabi_dmul>
 8017412:	a367      	add	r3, pc, #412	; (adr r3, 80175b0 <_dtoa_r+0x2d8>)
 8017414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017418:	f7e8 ff60 	bl	80002dc <__adddf3>
 801741c:	4606      	mov	r6, r0
 801741e:	4628      	mov	r0, r5
 8017420:	460f      	mov	r7, r1
 8017422:	f7e9 f8a7 	bl	8000574 <__aeabi_i2d>
 8017426:	a364      	add	r3, pc, #400	; (adr r3, 80175b8 <_dtoa_r+0x2e0>)
 8017428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742c:	f7e9 f90c 	bl	8000648 <__aeabi_dmul>
 8017430:	4602      	mov	r2, r0
 8017432:	460b      	mov	r3, r1
 8017434:	4630      	mov	r0, r6
 8017436:	4639      	mov	r1, r7
 8017438:	f7e8 ff50 	bl	80002dc <__adddf3>
 801743c:	4606      	mov	r6, r0
 801743e:	460f      	mov	r7, r1
 8017440:	f7e9 fbb2 	bl	8000ba8 <__aeabi_d2iz>
 8017444:	2200      	movs	r2, #0
 8017446:	4683      	mov	fp, r0
 8017448:	2300      	movs	r3, #0
 801744a:	4630      	mov	r0, r6
 801744c:	4639      	mov	r1, r7
 801744e:	f7e9 fb6d 	bl	8000b2c <__aeabi_dcmplt>
 8017452:	b148      	cbz	r0, 8017468 <_dtoa_r+0x190>
 8017454:	4658      	mov	r0, fp
 8017456:	f7e9 f88d 	bl	8000574 <__aeabi_i2d>
 801745a:	4632      	mov	r2, r6
 801745c:	463b      	mov	r3, r7
 801745e:	f7e9 fb5b 	bl	8000b18 <__aeabi_dcmpeq>
 8017462:	b908      	cbnz	r0, 8017468 <_dtoa_r+0x190>
 8017464:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017468:	f1bb 0f16 	cmp.w	fp, #22
 801746c:	d857      	bhi.n	801751e <_dtoa_r+0x246>
 801746e:	4b5b      	ldr	r3, [pc, #364]	; (80175dc <_dtoa_r+0x304>)
 8017470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017478:	ec51 0b18 	vmov	r0, r1, d8
 801747c:	f7e9 fb56 	bl	8000b2c <__aeabi_dcmplt>
 8017480:	2800      	cmp	r0, #0
 8017482:	d04e      	beq.n	8017522 <_dtoa_r+0x24a>
 8017484:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017488:	2300      	movs	r3, #0
 801748a:	930c      	str	r3, [sp, #48]	; 0x30
 801748c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801748e:	1b5b      	subs	r3, r3, r5
 8017490:	1e5a      	subs	r2, r3, #1
 8017492:	bf45      	ittet	mi
 8017494:	f1c3 0301 	rsbmi	r3, r3, #1
 8017498:	9305      	strmi	r3, [sp, #20]
 801749a:	2300      	movpl	r3, #0
 801749c:	2300      	movmi	r3, #0
 801749e:	9206      	str	r2, [sp, #24]
 80174a0:	bf54      	ite	pl
 80174a2:	9305      	strpl	r3, [sp, #20]
 80174a4:	9306      	strmi	r3, [sp, #24]
 80174a6:	f1bb 0f00 	cmp.w	fp, #0
 80174aa:	db3c      	blt.n	8017526 <_dtoa_r+0x24e>
 80174ac:	9b06      	ldr	r3, [sp, #24]
 80174ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80174b2:	445b      	add	r3, fp
 80174b4:	9306      	str	r3, [sp, #24]
 80174b6:	2300      	movs	r3, #0
 80174b8:	9308      	str	r3, [sp, #32]
 80174ba:	9b07      	ldr	r3, [sp, #28]
 80174bc:	2b09      	cmp	r3, #9
 80174be:	d868      	bhi.n	8017592 <_dtoa_r+0x2ba>
 80174c0:	2b05      	cmp	r3, #5
 80174c2:	bfc4      	itt	gt
 80174c4:	3b04      	subgt	r3, #4
 80174c6:	9307      	strgt	r3, [sp, #28]
 80174c8:	9b07      	ldr	r3, [sp, #28]
 80174ca:	f1a3 0302 	sub.w	r3, r3, #2
 80174ce:	bfcc      	ite	gt
 80174d0:	2500      	movgt	r5, #0
 80174d2:	2501      	movle	r5, #1
 80174d4:	2b03      	cmp	r3, #3
 80174d6:	f200 8085 	bhi.w	80175e4 <_dtoa_r+0x30c>
 80174da:	e8df f003 	tbb	[pc, r3]
 80174de:	3b2e      	.short	0x3b2e
 80174e0:	5839      	.short	0x5839
 80174e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80174e6:	441d      	add	r5, r3
 80174e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80174ec:	2b20      	cmp	r3, #32
 80174ee:	bfc1      	itttt	gt
 80174f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80174f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80174f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80174fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017500:	bfd6      	itet	le
 8017502:	f1c3 0320 	rsble	r3, r3, #32
 8017506:	ea48 0003 	orrgt.w	r0, r8, r3
 801750a:	fa06 f003 	lslle.w	r0, r6, r3
 801750e:	f7e9 f821 	bl	8000554 <__aeabi_ui2d>
 8017512:	2201      	movs	r2, #1
 8017514:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017518:	3d01      	subs	r5, #1
 801751a:	920e      	str	r2, [sp, #56]	; 0x38
 801751c:	e76f      	b.n	80173fe <_dtoa_r+0x126>
 801751e:	2301      	movs	r3, #1
 8017520:	e7b3      	b.n	801748a <_dtoa_r+0x1b2>
 8017522:	900c      	str	r0, [sp, #48]	; 0x30
 8017524:	e7b2      	b.n	801748c <_dtoa_r+0x1b4>
 8017526:	9b05      	ldr	r3, [sp, #20]
 8017528:	eba3 030b 	sub.w	r3, r3, fp
 801752c:	9305      	str	r3, [sp, #20]
 801752e:	f1cb 0300 	rsb	r3, fp, #0
 8017532:	9308      	str	r3, [sp, #32]
 8017534:	2300      	movs	r3, #0
 8017536:	930b      	str	r3, [sp, #44]	; 0x2c
 8017538:	e7bf      	b.n	80174ba <_dtoa_r+0x1e2>
 801753a:	2300      	movs	r3, #0
 801753c:	9309      	str	r3, [sp, #36]	; 0x24
 801753e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017540:	2b00      	cmp	r3, #0
 8017542:	dc52      	bgt.n	80175ea <_dtoa_r+0x312>
 8017544:	2301      	movs	r3, #1
 8017546:	9301      	str	r3, [sp, #4]
 8017548:	9304      	str	r3, [sp, #16]
 801754a:	461a      	mov	r2, r3
 801754c:	920a      	str	r2, [sp, #40]	; 0x28
 801754e:	e00b      	b.n	8017568 <_dtoa_r+0x290>
 8017550:	2301      	movs	r3, #1
 8017552:	e7f3      	b.n	801753c <_dtoa_r+0x264>
 8017554:	2300      	movs	r3, #0
 8017556:	9309      	str	r3, [sp, #36]	; 0x24
 8017558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801755a:	445b      	add	r3, fp
 801755c:	9301      	str	r3, [sp, #4]
 801755e:	3301      	adds	r3, #1
 8017560:	2b01      	cmp	r3, #1
 8017562:	9304      	str	r3, [sp, #16]
 8017564:	bfb8      	it	lt
 8017566:	2301      	movlt	r3, #1
 8017568:	69e0      	ldr	r0, [r4, #28]
 801756a:	2100      	movs	r1, #0
 801756c:	2204      	movs	r2, #4
 801756e:	f102 0614 	add.w	r6, r2, #20
 8017572:	429e      	cmp	r6, r3
 8017574:	d93d      	bls.n	80175f2 <_dtoa_r+0x31a>
 8017576:	6041      	str	r1, [r0, #4]
 8017578:	4620      	mov	r0, r4
 801757a:	f000 fd9f 	bl	80180bc <_Balloc>
 801757e:	9000      	str	r0, [sp, #0]
 8017580:	2800      	cmp	r0, #0
 8017582:	d139      	bne.n	80175f8 <_dtoa_r+0x320>
 8017584:	4b16      	ldr	r3, [pc, #88]	; (80175e0 <_dtoa_r+0x308>)
 8017586:	4602      	mov	r2, r0
 8017588:	f240 11af 	movw	r1, #431	; 0x1af
 801758c:	e6bd      	b.n	801730a <_dtoa_r+0x32>
 801758e:	2301      	movs	r3, #1
 8017590:	e7e1      	b.n	8017556 <_dtoa_r+0x27e>
 8017592:	2501      	movs	r5, #1
 8017594:	2300      	movs	r3, #0
 8017596:	9307      	str	r3, [sp, #28]
 8017598:	9509      	str	r5, [sp, #36]	; 0x24
 801759a:	f04f 33ff 	mov.w	r3, #4294967295
 801759e:	9301      	str	r3, [sp, #4]
 80175a0:	9304      	str	r3, [sp, #16]
 80175a2:	2200      	movs	r2, #0
 80175a4:	2312      	movs	r3, #18
 80175a6:	e7d1      	b.n	801754c <_dtoa_r+0x274>
 80175a8:	636f4361 	.word	0x636f4361
 80175ac:	3fd287a7 	.word	0x3fd287a7
 80175b0:	8b60c8b3 	.word	0x8b60c8b3
 80175b4:	3fc68a28 	.word	0x3fc68a28
 80175b8:	509f79fb 	.word	0x509f79fb
 80175bc:	3fd34413 	.word	0x3fd34413
 80175c0:	0801be08 	.word	0x0801be08
 80175c4:	0801be1f 	.word	0x0801be1f
 80175c8:	7ff00000 	.word	0x7ff00000
 80175cc:	0801be04 	.word	0x0801be04
 80175d0:	0801bdfb 	.word	0x0801bdfb
 80175d4:	0801bdd8 	.word	0x0801bdd8
 80175d8:	3ff80000 	.word	0x3ff80000
 80175dc:	0801bf10 	.word	0x0801bf10
 80175e0:	0801be77 	.word	0x0801be77
 80175e4:	2301      	movs	r3, #1
 80175e6:	9309      	str	r3, [sp, #36]	; 0x24
 80175e8:	e7d7      	b.n	801759a <_dtoa_r+0x2c2>
 80175ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175ec:	9301      	str	r3, [sp, #4]
 80175ee:	9304      	str	r3, [sp, #16]
 80175f0:	e7ba      	b.n	8017568 <_dtoa_r+0x290>
 80175f2:	3101      	adds	r1, #1
 80175f4:	0052      	lsls	r2, r2, #1
 80175f6:	e7ba      	b.n	801756e <_dtoa_r+0x296>
 80175f8:	69e3      	ldr	r3, [r4, #28]
 80175fa:	9a00      	ldr	r2, [sp, #0]
 80175fc:	601a      	str	r2, [r3, #0]
 80175fe:	9b04      	ldr	r3, [sp, #16]
 8017600:	2b0e      	cmp	r3, #14
 8017602:	f200 80a8 	bhi.w	8017756 <_dtoa_r+0x47e>
 8017606:	2d00      	cmp	r5, #0
 8017608:	f000 80a5 	beq.w	8017756 <_dtoa_r+0x47e>
 801760c:	f1bb 0f00 	cmp.w	fp, #0
 8017610:	dd38      	ble.n	8017684 <_dtoa_r+0x3ac>
 8017612:	4bc0      	ldr	r3, [pc, #768]	; (8017914 <_dtoa_r+0x63c>)
 8017614:	f00b 020f 	and.w	r2, fp, #15
 8017618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801761c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017620:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017624:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017628:	d019      	beq.n	801765e <_dtoa_r+0x386>
 801762a:	4bbb      	ldr	r3, [pc, #748]	; (8017918 <_dtoa_r+0x640>)
 801762c:	ec51 0b18 	vmov	r0, r1, d8
 8017630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017634:	f7e9 f932 	bl	800089c <__aeabi_ddiv>
 8017638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801763c:	f008 080f 	and.w	r8, r8, #15
 8017640:	2503      	movs	r5, #3
 8017642:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017918 <_dtoa_r+0x640>
 8017646:	f1b8 0f00 	cmp.w	r8, #0
 801764a:	d10a      	bne.n	8017662 <_dtoa_r+0x38a>
 801764c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017650:	4632      	mov	r2, r6
 8017652:	463b      	mov	r3, r7
 8017654:	f7e9 f922 	bl	800089c <__aeabi_ddiv>
 8017658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801765c:	e02b      	b.n	80176b6 <_dtoa_r+0x3de>
 801765e:	2502      	movs	r5, #2
 8017660:	e7ef      	b.n	8017642 <_dtoa_r+0x36a>
 8017662:	f018 0f01 	tst.w	r8, #1
 8017666:	d008      	beq.n	801767a <_dtoa_r+0x3a2>
 8017668:	4630      	mov	r0, r6
 801766a:	4639      	mov	r1, r7
 801766c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017670:	f7e8 ffea 	bl	8000648 <__aeabi_dmul>
 8017674:	3501      	adds	r5, #1
 8017676:	4606      	mov	r6, r0
 8017678:	460f      	mov	r7, r1
 801767a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801767e:	f109 0908 	add.w	r9, r9, #8
 8017682:	e7e0      	b.n	8017646 <_dtoa_r+0x36e>
 8017684:	f000 809f 	beq.w	80177c6 <_dtoa_r+0x4ee>
 8017688:	f1cb 0600 	rsb	r6, fp, #0
 801768c:	4ba1      	ldr	r3, [pc, #644]	; (8017914 <_dtoa_r+0x63c>)
 801768e:	4fa2      	ldr	r7, [pc, #648]	; (8017918 <_dtoa_r+0x640>)
 8017690:	f006 020f 	and.w	r2, r6, #15
 8017694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801769c:	ec51 0b18 	vmov	r0, r1, d8
 80176a0:	f7e8 ffd2 	bl	8000648 <__aeabi_dmul>
 80176a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176a8:	1136      	asrs	r6, r6, #4
 80176aa:	2300      	movs	r3, #0
 80176ac:	2502      	movs	r5, #2
 80176ae:	2e00      	cmp	r6, #0
 80176b0:	d17e      	bne.n	80177b0 <_dtoa_r+0x4d8>
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d1d0      	bne.n	8017658 <_dtoa_r+0x380>
 80176b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	f000 8084 	beq.w	80177ca <_dtoa_r+0x4f2>
 80176c2:	4b96      	ldr	r3, [pc, #600]	; (801791c <_dtoa_r+0x644>)
 80176c4:	2200      	movs	r2, #0
 80176c6:	4640      	mov	r0, r8
 80176c8:	4649      	mov	r1, r9
 80176ca:	f7e9 fa2f 	bl	8000b2c <__aeabi_dcmplt>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	d07b      	beq.n	80177ca <_dtoa_r+0x4f2>
 80176d2:	9b04      	ldr	r3, [sp, #16]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d078      	beq.n	80177ca <_dtoa_r+0x4f2>
 80176d8:	9b01      	ldr	r3, [sp, #4]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	dd39      	ble.n	8017752 <_dtoa_r+0x47a>
 80176de:	4b90      	ldr	r3, [pc, #576]	; (8017920 <_dtoa_r+0x648>)
 80176e0:	2200      	movs	r2, #0
 80176e2:	4640      	mov	r0, r8
 80176e4:	4649      	mov	r1, r9
 80176e6:	f7e8 ffaf 	bl	8000648 <__aeabi_dmul>
 80176ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176ee:	9e01      	ldr	r6, [sp, #4]
 80176f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80176f4:	3501      	adds	r5, #1
 80176f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80176fa:	4628      	mov	r0, r5
 80176fc:	f7e8 ff3a 	bl	8000574 <__aeabi_i2d>
 8017700:	4642      	mov	r2, r8
 8017702:	464b      	mov	r3, r9
 8017704:	f7e8 ffa0 	bl	8000648 <__aeabi_dmul>
 8017708:	4b86      	ldr	r3, [pc, #536]	; (8017924 <_dtoa_r+0x64c>)
 801770a:	2200      	movs	r2, #0
 801770c:	f7e8 fde6 	bl	80002dc <__adddf3>
 8017710:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017718:	9303      	str	r3, [sp, #12]
 801771a:	2e00      	cmp	r6, #0
 801771c:	d158      	bne.n	80177d0 <_dtoa_r+0x4f8>
 801771e:	4b82      	ldr	r3, [pc, #520]	; (8017928 <_dtoa_r+0x650>)
 8017720:	2200      	movs	r2, #0
 8017722:	4640      	mov	r0, r8
 8017724:	4649      	mov	r1, r9
 8017726:	f7e8 fdd7 	bl	80002d8 <__aeabi_dsub>
 801772a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801772e:	4680      	mov	r8, r0
 8017730:	4689      	mov	r9, r1
 8017732:	f7e9 fa19 	bl	8000b68 <__aeabi_dcmpgt>
 8017736:	2800      	cmp	r0, #0
 8017738:	f040 8296 	bne.w	8017c68 <_dtoa_r+0x990>
 801773c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017740:	4640      	mov	r0, r8
 8017742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017746:	4649      	mov	r1, r9
 8017748:	f7e9 f9f0 	bl	8000b2c <__aeabi_dcmplt>
 801774c:	2800      	cmp	r0, #0
 801774e:	f040 8289 	bne.w	8017c64 <_dtoa_r+0x98c>
 8017752:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017758:	2b00      	cmp	r3, #0
 801775a:	f2c0 814e 	blt.w	80179fa <_dtoa_r+0x722>
 801775e:	f1bb 0f0e 	cmp.w	fp, #14
 8017762:	f300 814a 	bgt.w	80179fa <_dtoa_r+0x722>
 8017766:	4b6b      	ldr	r3, [pc, #428]	; (8017914 <_dtoa_r+0x63c>)
 8017768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801776c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017772:	2b00      	cmp	r3, #0
 8017774:	f280 80dc 	bge.w	8017930 <_dtoa_r+0x658>
 8017778:	9b04      	ldr	r3, [sp, #16]
 801777a:	2b00      	cmp	r3, #0
 801777c:	f300 80d8 	bgt.w	8017930 <_dtoa_r+0x658>
 8017780:	f040 826f 	bne.w	8017c62 <_dtoa_r+0x98a>
 8017784:	4b68      	ldr	r3, [pc, #416]	; (8017928 <_dtoa_r+0x650>)
 8017786:	2200      	movs	r2, #0
 8017788:	4640      	mov	r0, r8
 801778a:	4649      	mov	r1, r9
 801778c:	f7e8 ff5c 	bl	8000648 <__aeabi_dmul>
 8017790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017794:	f7e9 f9de 	bl	8000b54 <__aeabi_dcmpge>
 8017798:	9e04      	ldr	r6, [sp, #16]
 801779a:	4637      	mov	r7, r6
 801779c:	2800      	cmp	r0, #0
 801779e:	f040 8245 	bne.w	8017c2c <_dtoa_r+0x954>
 80177a2:	9d00      	ldr	r5, [sp, #0]
 80177a4:	2331      	movs	r3, #49	; 0x31
 80177a6:	f805 3b01 	strb.w	r3, [r5], #1
 80177aa:	f10b 0b01 	add.w	fp, fp, #1
 80177ae:	e241      	b.n	8017c34 <_dtoa_r+0x95c>
 80177b0:	07f2      	lsls	r2, r6, #31
 80177b2:	d505      	bpl.n	80177c0 <_dtoa_r+0x4e8>
 80177b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177b8:	f7e8 ff46 	bl	8000648 <__aeabi_dmul>
 80177bc:	3501      	adds	r5, #1
 80177be:	2301      	movs	r3, #1
 80177c0:	1076      	asrs	r6, r6, #1
 80177c2:	3708      	adds	r7, #8
 80177c4:	e773      	b.n	80176ae <_dtoa_r+0x3d6>
 80177c6:	2502      	movs	r5, #2
 80177c8:	e775      	b.n	80176b6 <_dtoa_r+0x3de>
 80177ca:	9e04      	ldr	r6, [sp, #16]
 80177cc:	465f      	mov	r7, fp
 80177ce:	e792      	b.n	80176f6 <_dtoa_r+0x41e>
 80177d0:	9900      	ldr	r1, [sp, #0]
 80177d2:	4b50      	ldr	r3, [pc, #320]	; (8017914 <_dtoa_r+0x63c>)
 80177d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80177d8:	4431      	add	r1, r6
 80177da:	9102      	str	r1, [sp, #8]
 80177dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177de:	eeb0 9a47 	vmov.f32	s18, s14
 80177e2:	eef0 9a67 	vmov.f32	s19, s15
 80177e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80177ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80177ee:	2900      	cmp	r1, #0
 80177f0:	d044      	beq.n	801787c <_dtoa_r+0x5a4>
 80177f2:	494e      	ldr	r1, [pc, #312]	; (801792c <_dtoa_r+0x654>)
 80177f4:	2000      	movs	r0, #0
 80177f6:	f7e9 f851 	bl	800089c <__aeabi_ddiv>
 80177fa:	ec53 2b19 	vmov	r2, r3, d9
 80177fe:	f7e8 fd6b 	bl	80002d8 <__aeabi_dsub>
 8017802:	9d00      	ldr	r5, [sp, #0]
 8017804:	ec41 0b19 	vmov	d9, r0, r1
 8017808:	4649      	mov	r1, r9
 801780a:	4640      	mov	r0, r8
 801780c:	f7e9 f9cc 	bl	8000ba8 <__aeabi_d2iz>
 8017810:	4606      	mov	r6, r0
 8017812:	f7e8 feaf 	bl	8000574 <__aeabi_i2d>
 8017816:	4602      	mov	r2, r0
 8017818:	460b      	mov	r3, r1
 801781a:	4640      	mov	r0, r8
 801781c:	4649      	mov	r1, r9
 801781e:	f7e8 fd5b 	bl	80002d8 <__aeabi_dsub>
 8017822:	3630      	adds	r6, #48	; 0x30
 8017824:	f805 6b01 	strb.w	r6, [r5], #1
 8017828:	ec53 2b19 	vmov	r2, r3, d9
 801782c:	4680      	mov	r8, r0
 801782e:	4689      	mov	r9, r1
 8017830:	f7e9 f97c 	bl	8000b2c <__aeabi_dcmplt>
 8017834:	2800      	cmp	r0, #0
 8017836:	d164      	bne.n	8017902 <_dtoa_r+0x62a>
 8017838:	4642      	mov	r2, r8
 801783a:	464b      	mov	r3, r9
 801783c:	4937      	ldr	r1, [pc, #220]	; (801791c <_dtoa_r+0x644>)
 801783e:	2000      	movs	r0, #0
 8017840:	f7e8 fd4a 	bl	80002d8 <__aeabi_dsub>
 8017844:	ec53 2b19 	vmov	r2, r3, d9
 8017848:	f7e9 f970 	bl	8000b2c <__aeabi_dcmplt>
 801784c:	2800      	cmp	r0, #0
 801784e:	f040 80b6 	bne.w	80179be <_dtoa_r+0x6e6>
 8017852:	9b02      	ldr	r3, [sp, #8]
 8017854:	429d      	cmp	r5, r3
 8017856:	f43f af7c 	beq.w	8017752 <_dtoa_r+0x47a>
 801785a:	4b31      	ldr	r3, [pc, #196]	; (8017920 <_dtoa_r+0x648>)
 801785c:	ec51 0b19 	vmov	r0, r1, d9
 8017860:	2200      	movs	r2, #0
 8017862:	f7e8 fef1 	bl	8000648 <__aeabi_dmul>
 8017866:	4b2e      	ldr	r3, [pc, #184]	; (8017920 <_dtoa_r+0x648>)
 8017868:	ec41 0b19 	vmov	d9, r0, r1
 801786c:	2200      	movs	r2, #0
 801786e:	4640      	mov	r0, r8
 8017870:	4649      	mov	r1, r9
 8017872:	f7e8 fee9 	bl	8000648 <__aeabi_dmul>
 8017876:	4680      	mov	r8, r0
 8017878:	4689      	mov	r9, r1
 801787a:	e7c5      	b.n	8017808 <_dtoa_r+0x530>
 801787c:	ec51 0b17 	vmov	r0, r1, d7
 8017880:	f7e8 fee2 	bl	8000648 <__aeabi_dmul>
 8017884:	9b02      	ldr	r3, [sp, #8]
 8017886:	9d00      	ldr	r5, [sp, #0]
 8017888:	930f      	str	r3, [sp, #60]	; 0x3c
 801788a:	ec41 0b19 	vmov	d9, r0, r1
 801788e:	4649      	mov	r1, r9
 8017890:	4640      	mov	r0, r8
 8017892:	f7e9 f989 	bl	8000ba8 <__aeabi_d2iz>
 8017896:	4606      	mov	r6, r0
 8017898:	f7e8 fe6c 	bl	8000574 <__aeabi_i2d>
 801789c:	3630      	adds	r6, #48	; 0x30
 801789e:	4602      	mov	r2, r0
 80178a0:	460b      	mov	r3, r1
 80178a2:	4640      	mov	r0, r8
 80178a4:	4649      	mov	r1, r9
 80178a6:	f7e8 fd17 	bl	80002d8 <__aeabi_dsub>
 80178aa:	f805 6b01 	strb.w	r6, [r5], #1
 80178ae:	9b02      	ldr	r3, [sp, #8]
 80178b0:	429d      	cmp	r5, r3
 80178b2:	4680      	mov	r8, r0
 80178b4:	4689      	mov	r9, r1
 80178b6:	f04f 0200 	mov.w	r2, #0
 80178ba:	d124      	bne.n	8017906 <_dtoa_r+0x62e>
 80178bc:	4b1b      	ldr	r3, [pc, #108]	; (801792c <_dtoa_r+0x654>)
 80178be:	ec51 0b19 	vmov	r0, r1, d9
 80178c2:	f7e8 fd0b 	bl	80002dc <__adddf3>
 80178c6:	4602      	mov	r2, r0
 80178c8:	460b      	mov	r3, r1
 80178ca:	4640      	mov	r0, r8
 80178cc:	4649      	mov	r1, r9
 80178ce:	f7e9 f94b 	bl	8000b68 <__aeabi_dcmpgt>
 80178d2:	2800      	cmp	r0, #0
 80178d4:	d173      	bne.n	80179be <_dtoa_r+0x6e6>
 80178d6:	ec53 2b19 	vmov	r2, r3, d9
 80178da:	4914      	ldr	r1, [pc, #80]	; (801792c <_dtoa_r+0x654>)
 80178dc:	2000      	movs	r0, #0
 80178de:	f7e8 fcfb 	bl	80002d8 <__aeabi_dsub>
 80178e2:	4602      	mov	r2, r0
 80178e4:	460b      	mov	r3, r1
 80178e6:	4640      	mov	r0, r8
 80178e8:	4649      	mov	r1, r9
 80178ea:	f7e9 f91f 	bl	8000b2c <__aeabi_dcmplt>
 80178ee:	2800      	cmp	r0, #0
 80178f0:	f43f af2f 	beq.w	8017752 <_dtoa_r+0x47a>
 80178f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80178f6:	1e6b      	subs	r3, r5, #1
 80178f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80178fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178fe:	2b30      	cmp	r3, #48	; 0x30
 8017900:	d0f8      	beq.n	80178f4 <_dtoa_r+0x61c>
 8017902:	46bb      	mov	fp, r7
 8017904:	e04a      	b.n	801799c <_dtoa_r+0x6c4>
 8017906:	4b06      	ldr	r3, [pc, #24]	; (8017920 <_dtoa_r+0x648>)
 8017908:	f7e8 fe9e 	bl	8000648 <__aeabi_dmul>
 801790c:	4680      	mov	r8, r0
 801790e:	4689      	mov	r9, r1
 8017910:	e7bd      	b.n	801788e <_dtoa_r+0x5b6>
 8017912:	bf00      	nop
 8017914:	0801bf10 	.word	0x0801bf10
 8017918:	0801bee8 	.word	0x0801bee8
 801791c:	3ff00000 	.word	0x3ff00000
 8017920:	40240000 	.word	0x40240000
 8017924:	401c0000 	.word	0x401c0000
 8017928:	40140000 	.word	0x40140000
 801792c:	3fe00000 	.word	0x3fe00000
 8017930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017934:	9d00      	ldr	r5, [sp, #0]
 8017936:	4642      	mov	r2, r8
 8017938:	464b      	mov	r3, r9
 801793a:	4630      	mov	r0, r6
 801793c:	4639      	mov	r1, r7
 801793e:	f7e8 ffad 	bl	800089c <__aeabi_ddiv>
 8017942:	f7e9 f931 	bl	8000ba8 <__aeabi_d2iz>
 8017946:	9001      	str	r0, [sp, #4]
 8017948:	f7e8 fe14 	bl	8000574 <__aeabi_i2d>
 801794c:	4642      	mov	r2, r8
 801794e:	464b      	mov	r3, r9
 8017950:	f7e8 fe7a 	bl	8000648 <__aeabi_dmul>
 8017954:	4602      	mov	r2, r0
 8017956:	460b      	mov	r3, r1
 8017958:	4630      	mov	r0, r6
 801795a:	4639      	mov	r1, r7
 801795c:	f7e8 fcbc 	bl	80002d8 <__aeabi_dsub>
 8017960:	9e01      	ldr	r6, [sp, #4]
 8017962:	9f04      	ldr	r7, [sp, #16]
 8017964:	3630      	adds	r6, #48	; 0x30
 8017966:	f805 6b01 	strb.w	r6, [r5], #1
 801796a:	9e00      	ldr	r6, [sp, #0]
 801796c:	1bae      	subs	r6, r5, r6
 801796e:	42b7      	cmp	r7, r6
 8017970:	4602      	mov	r2, r0
 8017972:	460b      	mov	r3, r1
 8017974:	d134      	bne.n	80179e0 <_dtoa_r+0x708>
 8017976:	f7e8 fcb1 	bl	80002dc <__adddf3>
 801797a:	4642      	mov	r2, r8
 801797c:	464b      	mov	r3, r9
 801797e:	4606      	mov	r6, r0
 8017980:	460f      	mov	r7, r1
 8017982:	f7e9 f8f1 	bl	8000b68 <__aeabi_dcmpgt>
 8017986:	b9c8      	cbnz	r0, 80179bc <_dtoa_r+0x6e4>
 8017988:	4642      	mov	r2, r8
 801798a:	464b      	mov	r3, r9
 801798c:	4630      	mov	r0, r6
 801798e:	4639      	mov	r1, r7
 8017990:	f7e9 f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8017994:	b110      	cbz	r0, 801799c <_dtoa_r+0x6c4>
 8017996:	9b01      	ldr	r3, [sp, #4]
 8017998:	07db      	lsls	r3, r3, #31
 801799a:	d40f      	bmi.n	80179bc <_dtoa_r+0x6e4>
 801799c:	4651      	mov	r1, sl
 801799e:	4620      	mov	r0, r4
 80179a0:	f000 fbcc 	bl	801813c <_Bfree>
 80179a4:	2300      	movs	r3, #0
 80179a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179a8:	702b      	strb	r3, [r5, #0]
 80179aa:	f10b 0301 	add.w	r3, fp, #1
 80179ae:	6013      	str	r3, [r2, #0]
 80179b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f43f ace2 	beq.w	801737c <_dtoa_r+0xa4>
 80179b8:	601d      	str	r5, [r3, #0]
 80179ba:	e4df      	b.n	801737c <_dtoa_r+0xa4>
 80179bc:	465f      	mov	r7, fp
 80179be:	462b      	mov	r3, r5
 80179c0:	461d      	mov	r5, r3
 80179c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179c6:	2a39      	cmp	r2, #57	; 0x39
 80179c8:	d106      	bne.n	80179d8 <_dtoa_r+0x700>
 80179ca:	9a00      	ldr	r2, [sp, #0]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d1f7      	bne.n	80179c0 <_dtoa_r+0x6e8>
 80179d0:	9900      	ldr	r1, [sp, #0]
 80179d2:	2230      	movs	r2, #48	; 0x30
 80179d4:	3701      	adds	r7, #1
 80179d6:	700a      	strb	r2, [r1, #0]
 80179d8:	781a      	ldrb	r2, [r3, #0]
 80179da:	3201      	adds	r2, #1
 80179dc:	701a      	strb	r2, [r3, #0]
 80179de:	e790      	b.n	8017902 <_dtoa_r+0x62a>
 80179e0:	4ba3      	ldr	r3, [pc, #652]	; (8017c70 <_dtoa_r+0x998>)
 80179e2:	2200      	movs	r2, #0
 80179e4:	f7e8 fe30 	bl	8000648 <__aeabi_dmul>
 80179e8:	2200      	movs	r2, #0
 80179ea:	2300      	movs	r3, #0
 80179ec:	4606      	mov	r6, r0
 80179ee:	460f      	mov	r7, r1
 80179f0:	f7e9 f892 	bl	8000b18 <__aeabi_dcmpeq>
 80179f4:	2800      	cmp	r0, #0
 80179f6:	d09e      	beq.n	8017936 <_dtoa_r+0x65e>
 80179f8:	e7d0      	b.n	801799c <_dtoa_r+0x6c4>
 80179fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179fc:	2a00      	cmp	r2, #0
 80179fe:	f000 80ca 	beq.w	8017b96 <_dtoa_r+0x8be>
 8017a02:	9a07      	ldr	r2, [sp, #28]
 8017a04:	2a01      	cmp	r2, #1
 8017a06:	f300 80ad 	bgt.w	8017b64 <_dtoa_r+0x88c>
 8017a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a0c:	2a00      	cmp	r2, #0
 8017a0e:	f000 80a5 	beq.w	8017b5c <_dtoa_r+0x884>
 8017a12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017a16:	9e08      	ldr	r6, [sp, #32]
 8017a18:	9d05      	ldr	r5, [sp, #20]
 8017a1a:	9a05      	ldr	r2, [sp, #20]
 8017a1c:	441a      	add	r2, r3
 8017a1e:	9205      	str	r2, [sp, #20]
 8017a20:	9a06      	ldr	r2, [sp, #24]
 8017a22:	2101      	movs	r1, #1
 8017a24:	441a      	add	r2, r3
 8017a26:	4620      	mov	r0, r4
 8017a28:	9206      	str	r2, [sp, #24]
 8017a2a:	f000 fc3d 	bl	80182a8 <__i2b>
 8017a2e:	4607      	mov	r7, r0
 8017a30:	b165      	cbz	r5, 8017a4c <_dtoa_r+0x774>
 8017a32:	9b06      	ldr	r3, [sp, #24]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	dd09      	ble.n	8017a4c <_dtoa_r+0x774>
 8017a38:	42ab      	cmp	r3, r5
 8017a3a:	9a05      	ldr	r2, [sp, #20]
 8017a3c:	bfa8      	it	ge
 8017a3e:	462b      	movge	r3, r5
 8017a40:	1ad2      	subs	r2, r2, r3
 8017a42:	9205      	str	r2, [sp, #20]
 8017a44:	9a06      	ldr	r2, [sp, #24]
 8017a46:	1aed      	subs	r5, r5, r3
 8017a48:	1ad3      	subs	r3, r2, r3
 8017a4a:	9306      	str	r3, [sp, #24]
 8017a4c:	9b08      	ldr	r3, [sp, #32]
 8017a4e:	b1f3      	cbz	r3, 8017a8e <_dtoa_r+0x7b6>
 8017a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	f000 80a3 	beq.w	8017b9e <_dtoa_r+0x8c6>
 8017a58:	2e00      	cmp	r6, #0
 8017a5a:	dd10      	ble.n	8017a7e <_dtoa_r+0x7a6>
 8017a5c:	4639      	mov	r1, r7
 8017a5e:	4632      	mov	r2, r6
 8017a60:	4620      	mov	r0, r4
 8017a62:	f000 fce1 	bl	8018428 <__pow5mult>
 8017a66:	4652      	mov	r2, sl
 8017a68:	4601      	mov	r1, r0
 8017a6a:	4607      	mov	r7, r0
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	f000 fc31 	bl	80182d4 <__multiply>
 8017a72:	4651      	mov	r1, sl
 8017a74:	4680      	mov	r8, r0
 8017a76:	4620      	mov	r0, r4
 8017a78:	f000 fb60 	bl	801813c <_Bfree>
 8017a7c:	46c2      	mov	sl, r8
 8017a7e:	9b08      	ldr	r3, [sp, #32]
 8017a80:	1b9a      	subs	r2, r3, r6
 8017a82:	d004      	beq.n	8017a8e <_dtoa_r+0x7b6>
 8017a84:	4651      	mov	r1, sl
 8017a86:	4620      	mov	r0, r4
 8017a88:	f000 fcce 	bl	8018428 <__pow5mult>
 8017a8c:	4682      	mov	sl, r0
 8017a8e:	2101      	movs	r1, #1
 8017a90:	4620      	mov	r0, r4
 8017a92:	f000 fc09 	bl	80182a8 <__i2b>
 8017a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	4606      	mov	r6, r0
 8017a9c:	f340 8081 	ble.w	8017ba2 <_dtoa_r+0x8ca>
 8017aa0:	461a      	mov	r2, r3
 8017aa2:	4601      	mov	r1, r0
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	f000 fcbf 	bl	8018428 <__pow5mult>
 8017aaa:	9b07      	ldr	r3, [sp, #28]
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	4606      	mov	r6, r0
 8017ab0:	dd7a      	ble.n	8017ba8 <_dtoa_r+0x8d0>
 8017ab2:	f04f 0800 	mov.w	r8, #0
 8017ab6:	6933      	ldr	r3, [r6, #16]
 8017ab8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017abc:	6918      	ldr	r0, [r3, #16]
 8017abe:	f000 fba5 	bl	801820c <__hi0bits>
 8017ac2:	f1c0 0020 	rsb	r0, r0, #32
 8017ac6:	9b06      	ldr	r3, [sp, #24]
 8017ac8:	4418      	add	r0, r3
 8017aca:	f010 001f 	ands.w	r0, r0, #31
 8017ace:	f000 8094 	beq.w	8017bfa <_dtoa_r+0x922>
 8017ad2:	f1c0 0320 	rsb	r3, r0, #32
 8017ad6:	2b04      	cmp	r3, #4
 8017ad8:	f340 8085 	ble.w	8017be6 <_dtoa_r+0x90e>
 8017adc:	9b05      	ldr	r3, [sp, #20]
 8017ade:	f1c0 001c 	rsb	r0, r0, #28
 8017ae2:	4403      	add	r3, r0
 8017ae4:	9305      	str	r3, [sp, #20]
 8017ae6:	9b06      	ldr	r3, [sp, #24]
 8017ae8:	4403      	add	r3, r0
 8017aea:	4405      	add	r5, r0
 8017aec:	9306      	str	r3, [sp, #24]
 8017aee:	9b05      	ldr	r3, [sp, #20]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	dd05      	ble.n	8017b00 <_dtoa_r+0x828>
 8017af4:	4651      	mov	r1, sl
 8017af6:	461a      	mov	r2, r3
 8017af8:	4620      	mov	r0, r4
 8017afa:	f000 fcef 	bl	80184dc <__lshift>
 8017afe:	4682      	mov	sl, r0
 8017b00:	9b06      	ldr	r3, [sp, #24]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	dd05      	ble.n	8017b12 <_dtoa_r+0x83a>
 8017b06:	4631      	mov	r1, r6
 8017b08:	461a      	mov	r2, r3
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	f000 fce6 	bl	80184dc <__lshift>
 8017b10:	4606      	mov	r6, r0
 8017b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d072      	beq.n	8017bfe <_dtoa_r+0x926>
 8017b18:	4631      	mov	r1, r6
 8017b1a:	4650      	mov	r0, sl
 8017b1c:	f000 fd4a 	bl	80185b4 <__mcmp>
 8017b20:	2800      	cmp	r0, #0
 8017b22:	da6c      	bge.n	8017bfe <_dtoa_r+0x926>
 8017b24:	2300      	movs	r3, #0
 8017b26:	4651      	mov	r1, sl
 8017b28:	220a      	movs	r2, #10
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f000 fb28 	bl	8018180 <__multadd>
 8017b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017b36:	4682      	mov	sl, r0
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	f000 81b0 	beq.w	8017e9e <_dtoa_r+0xbc6>
 8017b3e:	2300      	movs	r3, #0
 8017b40:	4639      	mov	r1, r7
 8017b42:	220a      	movs	r2, #10
 8017b44:	4620      	mov	r0, r4
 8017b46:	f000 fb1b 	bl	8018180 <__multadd>
 8017b4a:	9b01      	ldr	r3, [sp, #4]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	4607      	mov	r7, r0
 8017b50:	f300 8096 	bgt.w	8017c80 <_dtoa_r+0x9a8>
 8017b54:	9b07      	ldr	r3, [sp, #28]
 8017b56:	2b02      	cmp	r3, #2
 8017b58:	dc59      	bgt.n	8017c0e <_dtoa_r+0x936>
 8017b5a:	e091      	b.n	8017c80 <_dtoa_r+0x9a8>
 8017b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b62:	e758      	b.n	8017a16 <_dtoa_r+0x73e>
 8017b64:	9b04      	ldr	r3, [sp, #16]
 8017b66:	1e5e      	subs	r6, r3, #1
 8017b68:	9b08      	ldr	r3, [sp, #32]
 8017b6a:	42b3      	cmp	r3, r6
 8017b6c:	bfbf      	itttt	lt
 8017b6e:	9b08      	ldrlt	r3, [sp, #32]
 8017b70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017b72:	9608      	strlt	r6, [sp, #32]
 8017b74:	1af3      	sublt	r3, r6, r3
 8017b76:	bfb4      	ite	lt
 8017b78:	18d2      	addlt	r2, r2, r3
 8017b7a:	1b9e      	subge	r6, r3, r6
 8017b7c:	9b04      	ldr	r3, [sp, #16]
 8017b7e:	bfbc      	itt	lt
 8017b80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017b82:	2600      	movlt	r6, #0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	bfb7      	itett	lt
 8017b88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017b8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017b90:	1a9d      	sublt	r5, r3, r2
 8017b92:	2300      	movlt	r3, #0
 8017b94:	e741      	b.n	8017a1a <_dtoa_r+0x742>
 8017b96:	9e08      	ldr	r6, [sp, #32]
 8017b98:	9d05      	ldr	r5, [sp, #20]
 8017b9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017b9c:	e748      	b.n	8017a30 <_dtoa_r+0x758>
 8017b9e:	9a08      	ldr	r2, [sp, #32]
 8017ba0:	e770      	b.n	8017a84 <_dtoa_r+0x7ac>
 8017ba2:	9b07      	ldr	r3, [sp, #28]
 8017ba4:	2b01      	cmp	r3, #1
 8017ba6:	dc19      	bgt.n	8017bdc <_dtoa_r+0x904>
 8017ba8:	9b02      	ldr	r3, [sp, #8]
 8017baa:	b9bb      	cbnz	r3, 8017bdc <_dtoa_r+0x904>
 8017bac:	9b03      	ldr	r3, [sp, #12]
 8017bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017bb2:	b99b      	cbnz	r3, 8017bdc <_dtoa_r+0x904>
 8017bb4:	9b03      	ldr	r3, [sp, #12]
 8017bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017bba:	0d1b      	lsrs	r3, r3, #20
 8017bbc:	051b      	lsls	r3, r3, #20
 8017bbe:	b183      	cbz	r3, 8017be2 <_dtoa_r+0x90a>
 8017bc0:	9b05      	ldr	r3, [sp, #20]
 8017bc2:	3301      	adds	r3, #1
 8017bc4:	9305      	str	r3, [sp, #20]
 8017bc6:	9b06      	ldr	r3, [sp, #24]
 8017bc8:	3301      	adds	r3, #1
 8017bca:	9306      	str	r3, [sp, #24]
 8017bcc:	f04f 0801 	mov.w	r8, #1
 8017bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	f47f af6f 	bne.w	8017ab6 <_dtoa_r+0x7de>
 8017bd8:	2001      	movs	r0, #1
 8017bda:	e774      	b.n	8017ac6 <_dtoa_r+0x7ee>
 8017bdc:	f04f 0800 	mov.w	r8, #0
 8017be0:	e7f6      	b.n	8017bd0 <_dtoa_r+0x8f8>
 8017be2:	4698      	mov	r8, r3
 8017be4:	e7f4      	b.n	8017bd0 <_dtoa_r+0x8f8>
 8017be6:	d082      	beq.n	8017aee <_dtoa_r+0x816>
 8017be8:	9a05      	ldr	r2, [sp, #20]
 8017bea:	331c      	adds	r3, #28
 8017bec:	441a      	add	r2, r3
 8017bee:	9205      	str	r2, [sp, #20]
 8017bf0:	9a06      	ldr	r2, [sp, #24]
 8017bf2:	441a      	add	r2, r3
 8017bf4:	441d      	add	r5, r3
 8017bf6:	9206      	str	r2, [sp, #24]
 8017bf8:	e779      	b.n	8017aee <_dtoa_r+0x816>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	e7f4      	b.n	8017be8 <_dtoa_r+0x910>
 8017bfe:	9b04      	ldr	r3, [sp, #16]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	dc37      	bgt.n	8017c74 <_dtoa_r+0x99c>
 8017c04:	9b07      	ldr	r3, [sp, #28]
 8017c06:	2b02      	cmp	r3, #2
 8017c08:	dd34      	ble.n	8017c74 <_dtoa_r+0x99c>
 8017c0a:	9b04      	ldr	r3, [sp, #16]
 8017c0c:	9301      	str	r3, [sp, #4]
 8017c0e:	9b01      	ldr	r3, [sp, #4]
 8017c10:	b963      	cbnz	r3, 8017c2c <_dtoa_r+0x954>
 8017c12:	4631      	mov	r1, r6
 8017c14:	2205      	movs	r2, #5
 8017c16:	4620      	mov	r0, r4
 8017c18:	f000 fab2 	bl	8018180 <__multadd>
 8017c1c:	4601      	mov	r1, r0
 8017c1e:	4606      	mov	r6, r0
 8017c20:	4650      	mov	r0, sl
 8017c22:	f000 fcc7 	bl	80185b4 <__mcmp>
 8017c26:	2800      	cmp	r0, #0
 8017c28:	f73f adbb 	bgt.w	80177a2 <_dtoa_r+0x4ca>
 8017c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c2e:	9d00      	ldr	r5, [sp, #0]
 8017c30:	ea6f 0b03 	mvn.w	fp, r3
 8017c34:	f04f 0800 	mov.w	r8, #0
 8017c38:	4631      	mov	r1, r6
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f000 fa7e 	bl	801813c <_Bfree>
 8017c40:	2f00      	cmp	r7, #0
 8017c42:	f43f aeab 	beq.w	801799c <_dtoa_r+0x6c4>
 8017c46:	f1b8 0f00 	cmp.w	r8, #0
 8017c4a:	d005      	beq.n	8017c58 <_dtoa_r+0x980>
 8017c4c:	45b8      	cmp	r8, r7
 8017c4e:	d003      	beq.n	8017c58 <_dtoa_r+0x980>
 8017c50:	4641      	mov	r1, r8
 8017c52:	4620      	mov	r0, r4
 8017c54:	f000 fa72 	bl	801813c <_Bfree>
 8017c58:	4639      	mov	r1, r7
 8017c5a:	4620      	mov	r0, r4
 8017c5c:	f000 fa6e 	bl	801813c <_Bfree>
 8017c60:	e69c      	b.n	801799c <_dtoa_r+0x6c4>
 8017c62:	2600      	movs	r6, #0
 8017c64:	4637      	mov	r7, r6
 8017c66:	e7e1      	b.n	8017c2c <_dtoa_r+0x954>
 8017c68:	46bb      	mov	fp, r7
 8017c6a:	4637      	mov	r7, r6
 8017c6c:	e599      	b.n	80177a2 <_dtoa_r+0x4ca>
 8017c6e:	bf00      	nop
 8017c70:	40240000 	.word	0x40240000
 8017c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	f000 80c8 	beq.w	8017e0c <_dtoa_r+0xb34>
 8017c7c:	9b04      	ldr	r3, [sp, #16]
 8017c7e:	9301      	str	r3, [sp, #4]
 8017c80:	2d00      	cmp	r5, #0
 8017c82:	dd05      	ble.n	8017c90 <_dtoa_r+0x9b8>
 8017c84:	4639      	mov	r1, r7
 8017c86:	462a      	mov	r2, r5
 8017c88:	4620      	mov	r0, r4
 8017c8a:	f000 fc27 	bl	80184dc <__lshift>
 8017c8e:	4607      	mov	r7, r0
 8017c90:	f1b8 0f00 	cmp.w	r8, #0
 8017c94:	d05b      	beq.n	8017d4e <_dtoa_r+0xa76>
 8017c96:	6879      	ldr	r1, [r7, #4]
 8017c98:	4620      	mov	r0, r4
 8017c9a:	f000 fa0f 	bl	80180bc <_Balloc>
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	b928      	cbnz	r0, 8017cae <_dtoa_r+0x9d6>
 8017ca2:	4b83      	ldr	r3, [pc, #524]	; (8017eb0 <_dtoa_r+0xbd8>)
 8017ca4:	4602      	mov	r2, r0
 8017ca6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017caa:	f7ff bb2e 	b.w	801730a <_dtoa_r+0x32>
 8017cae:	693a      	ldr	r2, [r7, #16]
 8017cb0:	3202      	adds	r2, #2
 8017cb2:	0092      	lsls	r2, r2, #2
 8017cb4:	f107 010c 	add.w	r1, r7, #12
 8017cb8:	300c      	adds	r0, #12
 8017cba:	f7ff fa6f 	bl	801719c <memcpy>
 8017cbe:	2201      	movs	r2, #1
 8017cc0:	4629      	mov	r1, r5
 8017cc2:	4620      	mov	r0, r4
 8017cc4:	f000 fc0a 	bl	80184dc <__lshift>
 8017cc8:	9b00      	ldr	r3, [sp, #0]
 8017cca:	3301      	adds	r3, #1
 8017ccc:	9304      	str	r3, [sp, #16]
 8017cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cd2:	4413      	add	r3, r2
 8017cd4:	9308      	str	r3, [sp, #32]
 8017cd6:	9b02      	ldr	r3, [sp, #8]
 8017cd8:	f003 0301 	and.w	r3, r3, #1
 8017cdc:	46b8      	mov	r8, r7
 8017cde:	9306      	str	r3, [sp, #24]
 8017ce0:	4607      	mov	r7, r0
 8017ce2:	9b04      	ldr	r3, [sp, #16]
 8017ce4:	4631      	mov	r1, r6
 8017ce6:	3b01      	subs	r3, #1
 8017ce8:	4650      	mov	r0, sl
 8017cea:	9301      	str	r3, [sp, #4]
 8017cec:	f7ff fa6b 	bl	80171c6 <quorem>
 8017cf0:	4641      	mov	r1, r8
 8017cf2:	9002      	str	r0, [sp, #8]
 8017cf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017cf8:	4650      	mov	r0, sl
 8017cfa:	f000 fc5b 	bl	80185b4 <__mcmp>
 8017cfe:	463a      	mov	r2, r7
 8017d00:	9005      	str	r0, [sp, #20]
 8017d02:	4631      	mov	r1, r6
 8017d04:	4620      	mov	r0, r4
 8017d06:	f000 fc71 	bl	80185ec <__mdiff>
 8017d0a:	68c2      	ldr	r2, [r0, #12]
 8017d0c:	4605      	mov	r5, r0
 8017d0e:	bb02      	cbnz	r2, 8017d52 <_dtoa_r+0xa7a>
 8017d10:	4601      	mov	r1, r0
 8017d12:	4650      	mov	r0, sl
 8017d14:	f000 fc4e 	bl	80185b4 <__mcmp>
 8017d18:	4602      	mov	r2, r0
 8017d1a:	4629      	mov	r1, r5
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8017d20:	f000 fa0c 	bl	801813c <_Bfree>
 8017d24:	9b07      	ldr	r3, [sp, #28]
 8017d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d28:	9d04      	ldr	r5, [sp, #16]
 8017d2a:	ea43 0102 	orr.w	r1, r3, r2
 8017d2e:	9b06      	ldr	r3, [sp, #24]
 8017d30:	4319      	orrs	r1, r3
 8017d32:	d110      	bne.n	8017d56 <_dtoa_r+0xa7e>
 8017d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d38:	d029      	beq.n	8017d8e <_dtoa_r+0xab6>
 8017d3a:	9b05      	ldr	r3, [sp, #20]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	dd02      	ble.n	8017d46 <_dtoa_r+0xa6e>
 8017d40:	9b02      	ldr	r3, [sp, #8]
 8017d42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017d46:	9b01      	ldr	r3, [sp, #4]
 8017d48:	f883 9000 	strb.w	r9, [r3]
 8017d4c:	e774      	b.n	8017c38 <_dtoa_r+0x960>
 8017d4e:	4638      	mov	r0, r7
 8017d50:	e7ba      	b.n	8017cc8 <_dtoa_r+0x9f0>
 8017d52:	2201      	movs	r2, #1
 8017d54:	e7e1      	b.n	8017d1a <_dtoa_r+0xa42>
 8017d56:	9b05      	ldr	r3, [sp, #20]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	db04      	blt.n	8017d66 <_dtoa_r+0xa8e>
 8017d5c:	9907      	ldr	r1, [sp, #28]
 8017d5e:	430b      	orrs	r3, r1
 8017d60:	9906      	ldr	r1, [sp, #24]
 8017d62:	430b      	orrs	r3, r1
 8017d64:	d120      	bne.n	8017da8 <_dtoa_r+0xad0>
 8017d66:	2a00      	cmp	r2, #0
 8017d68:	dded      	ble.n	8017d46 <_dtoa_r+0xa6e>
 8017d6a:	4651      	mov	r1, sl
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	4620      	mov	r0, r4
 8017d70:	f000 fbb4 	bl	80184dc <__lshift>
 8017d74:	4631      	mov	r1, r6
 8017d76:	4682      	mov	sl, r0
 8017d78:	f000 fc1c 	bl	80185b4 <__mcmp>
 8017d7c:	2800      	cmp	r0, #0
 8017d7e:	dc03      	bgt.n	8017d88 <_dtoa_r+0xab0>
 8017d80:	d1e1      	bne.n	8017d46 <_dtoa_r+0xa6e>
 8017d82:	f019 0f01 	tst.w	r9, #1
 8017d86:	d0de      	beq.n	8017d46 <_dtoa_r+0xa6e>
 8017d88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d8c:	d1d8      	bne.n	8017d40 <_dtoa_r+0xa68>
 8017d8e:	9a01      	ldr	r2, [sp, #4]
 8017d90:	2339      	movs	r3, #57	; 0x39
 8017d92:	7013      	strb	r3, [r2, #0]
 8017d94:	462b      	mov	r3, r5
 8017d96:	461d      	mov	r5, r3
 8017d98:	3b01      	subs	r3, #1
 8017d9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d9e:	2a39      	cmp	r2, #57	; 0x39
 8017da0:	d06c      	beq.n	8017e7c <_dtoa_r+0xba4>
 8017da2:	3201      	adds	r2, #1
 8017da4:	701a      	strb	r2, [r3, #0]
 8017da6:	e747      	b.n	8017c38 <_dtoa_r+0x960>
 8017da8:	2a00      	cmp	r2, #0
 8017daa:	dd07      	ble.n	8017dbc <_dtoa_r+0xae4>
 8017dac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017db0:	d0ed      	beq.n	8017d8e <_dtoa_r+0xab6>
 8017db2:	9a01      	ldr	r2, [sp, #4]
 8017db4:	f109 0301 	add.w	r3, r9, #1
 8017db8:	7013      	strb	r3, [r2, #0]
 8017dba:	e73d      	b.n	8017c38 <_dtoa_r+0x960>
 8017dbc:	9b04      	ldr	r3, [sp, #16]
 8017dbe:	9a08      	ldr	r2, [sp, #32]
 8017dc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017dc4:	4293      	cmp	r3, r2
 8017dc6:	d043      	beq.n	8017e50 <_dtoa_r+0xb78>
 8017dc8:	4651      	mov	r1, sl
 8017dca:	2300      	movs	r3, #0
 8017dcc:	220a      	movs	r2, #10
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f000 f9d6 	bl	8018180 <__multadd>
 8017dd4:	45b8      	cmp	r8, r7
 8017dd6:	4682      	mov	sl, r0
 8017dd8:	f04f 0300 	mov.w	r3, #0
 8017ddc:	f04f 020a 	mov.w	r2, #10
 8017de0:	4641      	mov	r1, r8
 8017de2:	4620      	mov	r0, r4
 8017de4:	d107      	bne.n	8017df6 <_dtoa_r+0xb1e>
 8017de6:	f000 f9cb 	bl	8018180 <__multadd>
 8017dea:	4680      	mov	r8, r0
 8017dec:	4607      	mov	r7, r0
 8017dee:	9b04      	ldr	r3, [sp, #16]
 8017df0:	3301      	adds	r3, #1
 8017df2:	9304      	str	r3, [sp, #16]
 8017df4:	e775      	b.n	8017ce2 <_dtoa_r+0xa0a>
 8017df6:	f000 f9c3 	bl	8018180 <__multadd>
 8017dfa:	4639      	mov	r1, r7
 8017dfc:	4680      	mov	r8, r0
 8017dfe:	2300      	movs	r3, #0
 8017e00:	220a      	movs	r2, #10
 8017e02:	4620      	mov	r0, r4
 8017e04:	f000 f9bc 	bl	8018180 <__multadd>
 8017e08:	4607      	mov	r7, r0
 8017e0a:	e7f0      	b.n	8017dee <_dtoa_r+0xb16>
 8017e0c:	9b04      	ldr	r3, [sp, #16]
 8017e0e:	9301      	str	r3, [sp, #4]
 8017e10:	9d00      	ldr	r5, [sp, #0]
 8017e12:	4631      	mov	r1, r6
 8017e14:	4650      	mov	r0, sl
 8017e16:	f7ff f9d6 	bl	80171c6 <quorem>
 8017e1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017e1e:	9b00      	ldr	r3, [sp, #0]
 8017e20:	f805 9b01 	strb.w	r9, [r5], #1
 8017e24:	1aea      	subs	r2, r5, r3
 8017e26:	9b01      	ldr	r3, [sp, #4]
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	dd07      	ble.n	8017e3c <_dtoa_r+0xb64>
 8017e2c:	4651      	mov	r1, sl
 8017e2e:	2300      	movs	r3, #0
 8017e30:	220a      	movs	r2, #10
 8017e32:	4620      	mov	r0, r4
 8017e34:	f000 f9a4 	bl	8018180 <__multadd>
 8017e38:	4682      	mov	sl, r0
 8017e3a:	e7ea      	b.n	8017e12 <_dtoa_r+0xb3a>
 8017e3c:	9b01      	ldr	r3, [sp, #4]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	bfc8      	it	gt
 8017e42:	461d      	movgt	r5, r3
 8017e44:	9b00      	ldr	r3, [sp, #0]
 8017e46:	bfd8      	it	le
 8017e48:	2501      	movle	r5, #1
 8017e4a:	441d      	add	r5, r3
 8017e4c:	f04f 0800 	mov.w	r8, #0
 8017e50:	4651      	mov	r1, sl
 8017e52:	2201      	movs	r2, #1
 8017e54:	4620      	mov	r0, r4
 8017e56:	f000 fb41 	bl	80184dc <__lshift>
 8017e5a:	4631      	mov	r1, r6
 8017e5c:	4682      	mov	sl, r0
 8017e5e:	f000 fba9 	bl	80185b4 <__mcmp>
 8017e62:	2800      	cmp	r0, #0
 8017e64:	dc96      	bgt.n	8017d94 <_dtoa_r+0xabc>
 8017e66:	d102      	bne.n	8017e6e <_dtoa_r+0xb96>
 8017e68:	f019 0f01 	tst.w	r9, #1
 8017e6c:	d192      	bne.n	8017d94 <_dtoa_r+0xabc>
 8017e6e:	462b      	mov	r3, r5
 8017e70:	461d      	mov	r5, r3
 8017e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e76:	2a30      	cmp	r2, #48	; 0x30
 8017e78:	d0fa      	beq.n	8017e70 <_dtoa_r+0xb98>
 8017e7a:	e6dd      	b.n	8017c38 <_dtoa_r+0x960>
 8017e7c:	9a00      	ldr	r2, [sp, #0]
 8017e7e:	429a      	cmp	r2, r3
 8017e80:	d189      	bne.n	8017d96 <_dtoa_r+0xabe>
 8017e82:	f10b 0b01 	add.w	fp, fp, #1
 8017e86:	2331      	movs	r3, #49	; 0x31
 8017e88:	e796      	b.n	8017db8 <_dtoa_r+0xae0>
 8017e8a:	4b0a      	ldr	r3, [pc, #40]	; (8017eb4 <_dtoa_r+0xbdc>)
 8017e8c:	f7ff ba99 	b.w	80173c2 <_dtoa_r+0xea>
 8017e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	f47f aa6d 	bne.w	8017372 <_dtoa_r+0x9a>
 8017e98:	4b07      	ldr	r3, [pc, #28]	; (8017eb8 <_dtoa_r+0xbe0>)
 8017e9a:	f7ff ba92 	b.w	80173c2 <_dtoa_r+0xea>
 8017e9e:	9b01      	ldr	r3, [sp, #4]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	dcb5      	bgt.n	8017e10 <_dtoa_r+0xb38>
 8017ea4:	9b07      	ldr	r3, [sp, #28]
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	f73f aeb1 	bgt.w	8017c0e <_dtoa_r+0x936>
 8017eac:	e7b0      	b.n	8017e10 <_dtoa_r+0xb38>
 8017eae:	bf00      	nop
 8017eb0:	0801be77 	.word	0x0801be77
 8017eb4:	0801bdd7 	.word	0x0801bdd7
 8017eb8:	0801bdfb 	.word	0x0801bdfb

08017ebc <_free_r>:
 8017ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ebe:	2900      	cmp	r1, #0
 8017ec0:	d044      	beq.n	8017f4c <_free_r+0x90>
 8017ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ec6:	9001      	str	r0, [sp, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	f1a1 0404 	sub.w	r4, r1, #4
 8017ece:	bfb8      	it	lt
 8017ed0:	18e4      	addlt	r4, r4, r3
 8017ed2:	f000 f8e7 	bl	80180a4 <__malloc_lock>
 8017ed6:	4a1e      	ldr	r2, [pc, #120]	; (8017f50 <_free_r+0x94>)
 8017ed8:	9801      	ldr	r0, [sp, #4]
 8017eda:	6813      	ldr	r3, [r2, #0]
 8017edc:	b933      	cbnz	r3, 8017eec <_free_r+0x30>
 8017ede:	6063      	str	r3, [r4, #4]
 8017ee0:	6014      	str	r4, [r2, #0]
 8017ee2:	b003      	add	sp, #12
 8017ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ee8:	f000 b8e2 	b.w	80180b0 <__malloc_unlock>
 8017eec:	42a3      	cmp	r3, r4
 8017eee:	d908      	bls.n	8017f02 <_free_r+0x46>
 8017ef0:	6825      	ldr	r5, [r4, #0]
 8017ef2:	1961      	adds	r1, r4, r5
 8017ef4:	428b      	cmp	r3, r1
 8017ef6:	bf01      	itttt	eq
 8017ef8:	6819      	ldreq	r1, [r3, #0]
 8017efa:	685b      	ldreq	r3, [r3, #4]
 8017efc:	1949      	addeq	r1, r1, r5
 8017efe:	6021      	streq	r1, [r4, #0]
 8017f00:	e7ed      	b.n	8017ede <_free_r+0x22>
 8017f02:	461a      	mov	r2, r3
 8017f04:	685b      	ldr	r3, [r3, #4]
 8017f06:	b10b      	cbz	r3, 8017f0c <_free_r+0x50>
 8017f08:	42a3      	cmp	r3, r4
 8017f0a:	d9fa      	bls.n	8017f02 <_free_r+0x46>
 8017f0c:	6811      	ldr	r1, [r2, #0]
 8017f0e:	1855      	adds	r5, r2, r1
 8017f10:	42a5      	cmp	r5, r4
 8017f12:	d10b      	bne.n	8017f2c <_free_r+0x70>
 8017f14:	6824      	ldr	r4, [r4, #0]
 8017f16:	4421      	add	r1, r4
 8017f18:	1854      	adds	r4, r2, r1
 8017f1a:	42a3      	cmp	r3, r4
 8017f1c:	6011      	str	r1, [r2, #0]
 8017f1e:	d1e0      	bne.n	8017ee2 <_free_r+0x26>
 8017f20:	681c      	ldr	r4, [r3, #0]
 8017f22:	685b      	ldr	r3, [r3, #4]
 8017f24:	6053      	str	r3, [r2, #4]
 8017f26:	440c      	add	r4, r1
 8017f28:	6014      	str	r4, [r2, #0]
 8017f2a:	e7da      	b.n	8017ee2 <_free_r+0x26>
 8017f2c:	d902      	bls.n	8017f34 <_free_r+0x78>
 8017f2e:	230c      	movs	r3, #12
 8017f30:	6003      	str	r3, [r0, #0]
 8017f32:	e7d6      	b.n	8017ee2 <_free_r+0x26>
 8017f34:	6825      	ldr	r5, [r4, #0]
 8017f36:	1961      	adds	r1, r4, r5
 8017f38:	428b      	cmp	r3, r1
 8017f3a:	bf04      	itt	eq
 8017f3c:	6819      	ldreq	r1, [r3, #0]
 8017f3e:	685b      	ldreq	r3, [r3, #4]
 8017f40:	6063      	str	r3, [r4, #4]
 8017f42:	bf04      	itt	eq
 8017f44:	1949      	addeq	r1, r1, r5
 8017f46:	6021      	streq	r1, [r4, #0]
 8017f48:	6054      	str	r4, [r2, #4]
 8017f4a:	e7ca      	b.n	8017ee2 <_free_r+0x26>
 8017f4c:	b003      	add	sp, #12
 8017f4e:	bd30      	pop	{r4, r5, pc}
 8017f50:	20016a98 	.word	0x20016a98

08017f54 <malloc>:
 8017f54:	4b02      	ldr	r3, [pc, #8]	; (8017f60 <malloc+0xc>)
 8017f56:	4601      	mov	r1, r0
 8017f58:	6818      	ldr	r0, [r3, #0]
 8017f5a:	f000 b823 	b.w	8017fa4 <_malloc_r>
 8017f5e:	bf00      	nop
 8017f60:	200001f8 	.word	0x200001f8

08017f64 <sbrk_aligned>:
 8017f64:	b570      	push	{r4, r5, r6, lr}
 8017f66:	4e0e      	ldr	r6, [pc, #56]	; (8017fa0 <sbrk_aligned+0x3c>)
 8017f68:	460c      	mov	r4, r1
 8017f6a:	6831      	ldr	r1, [r6, #0]
 8017f6c:	4605      	mov	r5, r0
 8017f6e:	b911      	cbnz	r1, 8017f76 <sbrk_aligned+0x12>
 8017f70:	f001 f85e 	bl	8019030 <_sbrk_r>
 8017f74:	6030      	str	r0, [r6, #0]
 8017f76:	4621      	mov	r1, r4
 8017f78:	4628      	mov	r0, r5
 8017f7a:	f001 f859 	bl	8019030 <_sbrk_r>
 8017f7e:	1c43      	adds	r3, r0, #1
 8017f80:	d00a      	beq.n	8017f98 <sbrk_aligned+0x34>
 8017f82:	1cc4      	adds	r4, r0, #3
 8017f84:	f024 0403 	bic.w	r4, r4, #3
 8017f88:	42a0      	cmp	r0, r4
 8017f8a:	d007      	beq.n	8017f9c <sbrk_aligned+0x38>
 8017f8c:	1a21      	subs	r1, r4, r0
 8017f8e:	4628      	mov	r0, r5
 8017f90:	f001 f84e 	bl	8019030 <_sbrk_r>
 8017f94:	3001      	adds	r0, #1
 8017f96:	d101      	bne.n	8017f9c <sbrk_aligned+0x38>
 8017f98:	f04f 34ff 	mov.w	r4, #4294967295
 8017f9c:	4620      	mov	r0, r4
 8017f9e:	bd70      	pop	{r4, r5, r6, pc}
 8017fa0:	20016a9c 	.word	0x20016a9c

08017fa4 <_malloc_r>:
 8017fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fa8:	1ccd      	adds	r5, r1, #3
 8017faa:	f025 0503 	bic.w	r5, r5, #3
 8017fae:	3508      	adds	r5, #8
 8017fb0:	2d0c      	cmp	r5, #12
 8017fb2:	bf38      	it	cc
 8017fb4:	250c      	movcc	r5, #12
 8017fb6:	2d00      	cmp	r5, #0
 8017fb8:	4607      	mov	r7, r0
 8017fba:	db01      	blt.n	8017fc0 <_malloc_r+0x1c>
 8017fbc:	42a9      	cmp	r1, r5
 8017fbe:	d905      	bls.n	8017fcc <_malloc_r+0x28>
 8017fc0:	230c      	movs	r3, #12
 8017fc2:	603b      	str	r3, [r7, #0]
 8017fc4:	2600      	movs	r6, #0
 8017fc6:	4630      	mov	r0, r6
 8017fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80180a0 <_malloc_r+0xfc>
 8017fd0:	f000 f868 	bl	80180a4 <__malloc_lock>
 8017fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8017fd8:	461c      	mov	r4, r3
 8017fda:	bb5c      	cbnz	r4, 8018034 <_malloc_r+0x90>
 8017fdc:	4629      	mov	r1, r5
 8017fde:	4638      	mov	r0, r7
 8017fe0:	f7ff ffc0 	bl	8017f64 <sbrk_aligned>
 8017fe4:	1c43      	adds	r3, r0, #1
 8017fe6:	4604      	mov	r4, r0
 8017fe8:	d155      	bne.n	8018096 <_malloc_r+0xf2>
 8017fea:	f8d8 4000 	ldr.w	r4, [r8]
 8017fee:	4626      	mov	r6, r4
 8017ff0:	2e00      	cmp	r6, #0
 8017ff2:	d145      	bne.n	8018080 <_malloc_r+0xdc>
 8017ff4:	2c00      	cmp	r4, #0
 8017ff6:	d048      	beq.n	801808a <_malloc_r+0xe6>
 8017ff8:	6823      	ldr	r3, [r4, #0]
 8017ffa:	4631      	mov	r1, r6
 8017ffc:	4638      	mov	r0, r7
 8017ffe:	eb04 0903 	add.w	r9, r4, r3
 8018002:	f001 f815 	bl	8019030 <_sbrk_r>
 8018006:	4581      	cmp	r9, r0
 8018008:	d13f      	bne.n	801808a <_malloc_r+0xe6>
 801800a:	6821      	ldr	r1, [r4, #0]
 801800c:	1a6d      	subs	r5, r5, r1
 801800e:	4629      	mov	r1, r5
 8018010:	4638      	mov	r0, r7
 8018012:	f7ff ffa7 	bl	8017f64 <sbrk_aligned>
 8018016:	3001      	adds	r0, #1
 8018018:	d037      	beq.n	801808a <_malloc_r+0xe6>
 801801a:	6823      	ldr	r3, [r4, #0]
 801801c:	442b      	add	r3, r5
 801801e:	6023      	str	r3, [r4, #0]
 8018020:	f8d8 3000 	ldr.w	r3, [r8]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d038      	beq.n	801809a <_malloc_r+0xf6>
 8018028:	685a      	ldr	r2, [r3, #4]
 801802a:	42a2      	cmp	r2, r4
 801802c:	d12b      	bne.n	8018086 <_malloc_r+0xe2>
 801802e:	2200      	movs	r2, #0
 8018030:	605a      	str	r2, [r3, #4]
 8018032:	e00f      	b.n	8018054 <_malloc_r+0xb0>
 8018034:	6822      	ldr	r2, [r4, #0]
 8018036:	1b52      	subs	r2, r2, r5
 8018038:	d41f      	bmi.n	801807a <_malloc_r+0xd6>
 801803a:	2a0b      	cmp	r2, #11
 801803c:	d917      	bls.n	801806e <_malloc_r+0xca>
 801803e:	1961      	adds	r1, r4, r5
 8018040:	42a3      	cmp	r3, r4
 8018042:	6025      	str	r5, [r4, #0]
 8018044:	bf18      	it	ne
 8018046:	6059      	strne	r1, [r3, #4]
 8018048:	6863      	ldr	r3, [r4, #4]
 801804a:	bf08      	it	eq
 801804c:	f8c8 1000 	streq.w	r1, [r8]
 8018050:	5162      	str	r2, [r4, r5]
 8018052:	604b      	str	r3, [r1, #4]
 8018054:	4638      	mov	r0, r7
 8018056:	f104 060b 	add.w	r6, r4, #11
 801805a:	f000 f829 	bl	80180b0 <__malloc_unlock>
 801805e:	f026 0607 	bic.w	r6, r6, #7
 8018062:	1d23      	adds	r3, r4, #4
 8018064:	1af2      	subs	r2, r6, r3
 8018066:	d0ae      	beq.n	8017fc6 <_malloc_r+0x22>
 8018068:	1b9b      	subs	r3, r3, r6
 801806a:	50a3      	str	r3, [r4, r2]
 801806c:	e7ab      	b.n	8017fc6 <_malloc_r+0x22>
 801806e:	42a3      	cmp	r3, r4
 8018070:	6862      	ldr	r2, [r4, #4]
 8018072:	d1dd      	bne.n	8018030 <_malloc_r+0x8c>
 8018074:	f8c8 2000 	str.w	r2, [r8]
 8018078:	e7ec      	b.n	8018054 <_malloc_r+0xb0>
 801807a:	4623      	mov	r3, r4
 801807c:	6864      	ldr	r4, [r4, #4]
 801807e:	e7ac      	b.n	8017fda <_malloc_r+0x36>
 8018080:	4634      	mov	r4, r6
 8018082:	6876      	ldr	r6, [r6, #4]
 8018084:	e7b4      	b.n	8017ff0 <_malloc_r+0x4c>
 8018086:	4613      	mov	r3, r2
 8018088:	e7cc      	b.n	8018024 <_malloc_r+0x80>
 801808a:	230c      	movs	r3, #12
 801808c:	603b      	str	r3, [r7, #0]
 801808e:	4638      	mov	r0, r7
 8018090:	f000 f80e 	bl	80180b0 <__malloc_unlock>
 8018094:	e797      	b.n	8017fc6 <_malloc_r+0x22>
 8018096:	6025      	str	r5, [r4, #0]
 8018098:	e7dc      	b.n	8018054 <_malloc_r+0xb0>
 801809a:	605b      	str	r3, [r3, #4]
 801809c:	deff      	udf	#255	; 0xff
 801809e:	bf00      	nop
 80180a0:	20016a98 	.word	0x20016a98

080180a4 <__malloc_lock>:
 80180a4:	4801      	ldr	r0, [pc, #4]	; (80180ac <__malloc_lock+0x8>)
 80180a6:	f7ff b877 	b.w	8017198 <__retarget_lock_acquire_recursive>
 80180aa:	bf00      	nop
 80180ac:	20016a94 	.word	0x20016a94

080180b0 <__malloc_unlock>:
 80180b0:	4801      	ldr	r0, [pc, #4]	; (80180b8 <__malloc_unlock+0x8>)
 80180b2:	f7ff b872 	b.w	801719a <__retarget_lock_release_recursive>
 80180b6:	bf00      	nop
 80180b8:	20016a94 	.word	0x20016a94

080180bc <_Balloc>:
 80180bc:	b570      	push	{r4, r5, r6, lr}
 80180be:	69c6      	ldr	r6, [r0, #28]
 80180c0:	4604      	mov	r4, r0
 80180c2:	460d      	mov	r5, r1
 80180c4:	b976      	cbnz	r6, 80180e4 <_Balloc+0x28>
 80180c6:	2010      	movs	r0, #16
 80180c8:	f7ff ff44 	bl	8017f54 <malloc>
 80180cc:	4602      	mov	r2, r0
 80180ce:	61e0      	str	r0, [r4, #28]
 80180d0:	b920      	cbnz	r0, 80180dc <_Balloc+0x20>
 80180d2:	4b18      	ldr	r3, [pc, #96]	; (8018134 <_Balloc+0x78>)
 80180d4:	4818      	ldr	r0, [pc, #96]	; (8018138 <_Balloc+0x7c>)
 80180d6:	216b      	movs	r1, #107	; 0x6b
 80180d8:	f7fe fa38 	bl	801654c <__assert_func>
 80180dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80180e0:	6006      	str	r6, [r0, #0]
 80180e2:	60c6      	str	r6, [r0, #12]
 80180e4:	69e6      	ldr	r6, [r4, #28]
 80180e6:	68f3      	ldr	r3, [r6, #12]
 80180e8:	b183      	cbz	r3, 801810c <_Balloc+0x50>
 80180ea:	69e3      	ldr	r3, [r4, #28]
 80180ec:	68db      	ldr	r3, [r3, #12]
 80180ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80180f2:	b9b8      	cbnz	r0, 8018124 <_Balloc+0x68>
 80180f4:	2101      	movs	r1, #1
 80180f6:	fa01 f605 	lsl.w	r6, r1, r5
 80180fa:	1d72      	adds	r2, r6, #5
 80180fc:	0092      	lsls	r2, r2, #2
 80180fe:	4620      	mov	r0, r4
 8018100:	f000 ffa6 	bl	8019050 <_calloc_r>
 8018104:	b160      	cbz	r0, 8018120 <_Balloc+0x64>
 8018106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801810a:	e00e      	b.n	801812a <_Balloc+0x6e>
 801810c:	2221      	movs	r2, #33	; 0x21
 801810e:	2104      	movs	r1, #4
 8018110:	4620      	mov	r0, r4
 8018112:	f000 ff9d 	bl	8019050 <_calloc_r>
 8018116:	69e3      	ldr	r3, [r4, #28]
 8018118:	60f0      	str	r0, [r6, #12]
 801811a:	68db      	ldr	r3, [r3, #12]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d1e4      	bne.n	80180ea <_Balloc+0x2e>
 8018120:	2000      	movs	r0, #0
 8018122:	bd70      	pop	{r4, r5, r6, pc}
 8018124:	6802      	ldr	r2, [r0, #0]
 8018126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801812a:	2300      	movs	r3, #0
 801812c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018130:	e7f7      	b.n	8018122 <_Balloc+0x66>
 8018132:	bf00      	nop
 8018134:	0801be08 	.word	0x0801be08
 8018138:	0801be88 	.word	0x0801be88

0801813c <_Bfree>:
 801813c:	b570      	push	{r4, r5, r6, lr}
 801813e:	69c6      	ldr	r6, [r0, #28]
 8018140:	4605      	mov	r5, r0
 8018142:	460c      	mov	r4, r1
 8018144:	b976      	cbnz	r6, 8018164 <_Bfree+0x28>
 8018146:	2010      	movs	r0, #16
 8018148:	f7ff ff04 	bl	8017f54 <malloc>
 801814c:	4602      	mov	r2, r0
 801814e:	61e8      	str	r0, [r5, #28]
 8018150:	b920      	cbnz	r0, 801815c <_Bfree+0x20>
 8018152:	4b09      	ldr	r3, [pc, #36]	; (8018178 <_Bfree+0x3c>)
 8018154:	4809      	ldr	r0, [pc, #36]	; (801817c <_Bfree+0x40>)
 8018156:	218f      	movs	r1, #143	; 0x8f
 8018158:	f7fe f9f8 	bl	801654c <__assert_func>
 801815c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018160:	6006      	str	r6, [r0, #0]
 8018162:	60c6      	str	r6, [r0, #12]
 8018164:	b13c      	cbz	r4, 8018176 <_Bfree+0x3a>
 8018166:	69eb      	ldr	r3, [r5, #28]
 8018168:	6862      	ldr	r2, [r4, #4]
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018170:	6021      	str	r1, [r4, #0]
 8018172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018176:	bd70      	pop	{r4, r5, r6, pc}
 8018178:	0801be08 	.word	0x0801be08
 801817c:	0801be88 	.word	0x0801be88

08018180 <__multadd>:
 8018180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018184:	690d      	ldr	r5, [r1, #16]
 8018186:	4607      	mov	r7, r0
 8018188:	460c      	mov	r4, r1
 801818a:	461e      	mov	r6, r3
 801818c:	f101 0c14 	add.w	ip, r1, #20
 8018190:	2000      	movs	r0, #0
 8018192:	f8dc 3000 	ldr.w	r3, [ip]
 8018196:	b299      	uxth	r1, r3
 8018198:	fb02 6101 	mla	r1, r2, r1, r6
 801819c:	0c1e      	lsrs	r6, r3, #16
 801819e:	0c0b      	lsrs	r3, r1, #16
 80181a0:	fb02 3306 	mla	r3, r2, r6, r3
 80181a4:	b289      	uxth	r1, r1
 80181a6:	3001      	adds	r0, #1
 80181a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80181ac:	4285      	cmp	r5, r0
 80181ae:	f84c 1b04 	str.w	r1, [ip], #4
 80181b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80181b6:	dcec      	bgt.n	8018192 <__multadd+0x12>
 80181b8:	b30e      	cbz	r6, 80181fe <__multadd+0x7e>
 80181ba:	68a3      	ldr	r3, [r4, #8]
 80181bc:	42ab      	cmp	r3, r5
 80181be:	dc19      	bgt.n	80181f4 <__multadd+0x74>
 80181c0:	6861      	ldr	r1, [r4, #4]
 80181c2:	4638      	mov	r0, r7
 80181c4:	3101      	adds	r1, #1
 80181c6:	f7ff ff79 	bl	80180bc <_Balloc>
 80181ca:	4680      	mov	r8, r0
 80181cc:	b928      	cbnz	r0, 80181da <__multadd+0x5a>
 80181ce:	4602      	mov	r2, r0
 80181d0:	4b0c      	ldr	r3, [pc, #48]	; (8018204 <__multadd+0x84>)
 80181d2:	480d      	ldr	r0, [pc, #52]	; (8018208 <__multadd+0x88>)
 80181d4:	21ba      	movs	r1, #186	; 0xba
 80181d6:	f7fe f9b9 	bl	801654c <__assert_func>
 80181da:	6922      	ldr	r2, [r4, #16]
 80181dc:	3202      	adds	r2, #2
 80181de:	f104 010c 	add.w	r1, r4, #12
 80181e2:	0092      	lsls	r2, r2, #2
 80181e4:	300c      	adds	r0, #12
 80181e6:	f7fe ffd9 	bl	801719c <memcpy>
 80181ea:	4621      	mov	r1, r4
 80181ec:	4638      	mov	r0, r7
 80181ee:	f7ff ffa5 	bl	801813c <_Bfree>
 80181f2:	4644      	mov	r4, r8
 80181f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80181f8:	3501      	adds	r5, #1
 80181fa:	615e      	str	r6, [r3, #20]
 80181fc:	6125      	str	r5, [r4, #16]
 80181fe:	4620      	mov	r0, r4
 8018200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018204:	0801be77 	.word	0x0801be77
 8018208:	0801be88 	.word	0x0801be88

0801820c <__hi0bits>:
 801820c:	0c03      	lsrs	r3, r0, #16
 801820e:	041b      	lsls	r3, r3, #16
 8018210:	b9d3      	cbnz	r3, 8018248 <__hi0bits+0x3c>
 8018212:	0400      	lsls	r0, r0, #16
 8018214:	2310      	movs	r3, #16
 8018216:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801821a:	bf04      	itt	eq
 801821c:	0200      	lsleq	r0, r0, #8
 801821e:	3308      	addeq	r3, #8
 8018220:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018224:	bf04      	itt	eq
 8018226:	0100      	lsleq	r0, r0, #4
 8018228:	3304      	addeq	r3, #4
 801822a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801822e:	bf04      	itt	eq
 8018230:	0080      	lsleq	r0, r0, #2
 8018232:	3302      	addeq	r3, #2
 8018234:	2800      	cmp	r0, #0
 8018236:	db05      	blt.n	8018244 <__hi0bits+0x38>
 8018238:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801823c:	f103 0301 	add.w	r3, r3, #1
 8018240:	bf08      	it	eq
 8018242:	2320      	moveq	r3, #32
 8018244:	4618      	mov	r0, r3
 8018246:	4770      	bx	lr
 8018248:	2300      	movs	r3, #0
 801824a:	e7e4      	b.n	8018216 <__hi0bits+0xa>

0801824c <__lo0bits>:
 801824c:	6803      	ldr	r3, [r0, #0]
 801824e:	f013 0207 	ands.w	r2, r3, #7
 8018252:	d00c      	beq.n	801826e <__lo0bits+0x22>
 8018254:	07d9      	lsls	r1, r3, #31
 8018256:	d422      	bmi.n	801829e <__lo0bits+0x52>
 8018258:	079a      	lsls	r2, r3, #30
 801825a:	bf49      	itett	mi
 801825c:	085b      	lsrmi	r3, r3, #1
 801825e:	089b      	lsrpl	r3, r3, #2
 8018260:	6003      	strmi	r3, [r0, #0]
 8018262:	2201      	movmi	r2, #1
 8018264:	bf5c      	itt	pl
 8018266:	6003      	strpl	r3, [r0, #0]
 8018268:	2202      	movpl	r2, #2
 801826a:	4610      	mov	r0, r2
 801826c:	4770      	bx	lr
 801826e:	b299      	uxth	r1, r3
 8018270:	b909      	cbnz	r1, 8018276 <__lo0bits+0x2a>
 8018272:	0c1b      	lsrs	r3, r3, #16
 8018274:	2210      	movs	r2, #16
 8018276:	b2d9      	uxtb	r1, r3
 8018278:	b909      	cbnz	r1, 801827e <__lo0bits+0x32>
 801827a:	3208      	adds	r2, #8
 801827c:	0a1b      	lsrs	r3, r3, #8
 801827e:	0719      	lsls	r1, r3, #28
 8018280:	bf04      	itt	eq
 8018282:	091b      	lsreq	r3, r3, #4
 8018284:	3204      	addeq	r2, #4
 8018286:	0799      	lsls	r1, r3, #30
 8018288:	bf04      	itt	eq
 801828a:	089b      	lsreq	r3, r3, #2
 801828c:	3202      	addeq	r2, #2
 801828e:	07d9      	lsls	r1, r3, #31
 8018290:	d403      	bmi.n	801829a <__lo0bits+0x4e>
 8018292:	085b      	lsrs	r3, r3, #1
 8018294:	f102 0201 	add.w	r2, r2, #1
 8018298:	d003      	beq.n	80182a2 <__lo0bits+0x56>
 801829a:	6003      	str	r3, [r0, #0]
 801829c:	e7e5      	b.n	801826a <__lo0bits+0x1e>
 801829e:	2200      	movs	r2, #0
 80182a0:	e7e3      	b.n	801826a <__lo0bits+0x1e>
 80182a2:	2220      	movs	r2, #32
 80182a4:	e7e1      	b.n	801826a <__lo0bits+0x1e>
	...

080182a8 <__i2b>:
 80182a8:	b510      	push	{r4, lr}
 80182aa:	460c      	mov	r4, r1
 80182ac:	2101      	movs	r1, #1
 80182ae:	f7ff ff05 	bl	80180bc <_Balloc>
 80182b2:	4602      	mov	r2, r0
 80182b4:	b928      	cbnz	r0, 80182c2 <__i2b+0x1a>
 80182b6:	4b05      	ldr	r3, [pc, #20]	; (80182cc <__i2b+0x24>)
 80182b8:	4805      	ldr	r0, [pc, #20]	; (80182d0 <__i2b+0x28>)
 80182ba:	f240 1145 	movw	r1, #325	; 0x145
 80182be:	f7fe f945 	bl	801654c <__assert_func>
 80182c2:	2301      	movs	r3, #1
 80182c4:	6144      	str	r4, [r0, #20]
 80182c6:	6103      	str	r3, [r0, #16]
 80182c8:	bd10      	pop	{r4, pc}
 80182ca:	bf00      	nop
 80182cc:	0801be77 	.word	0x0801be77
 80182d0:	0801be88 	.word	0x0801be88

080182d4 <__multiply>:
 80182d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d8:	4691      	mov	r9, r2
 80182da:	690a      	ldr	r2, [r1, #16]
 80182dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80182e0:	429a      	cmp	r2, r3
 80182e2:	bfb8      	it	lt
 80182e4:	460b      	movlt	r3, r1
 80182e6:	460c      	mov	r4, r1
 80182e8:	bfbc      	itt	lt
 80182ea:	464c      	movlt	r4, r9
 80182ec:	4699      	movlt	r9, r3
 80182ee:	6927      	ldr	r7, [r4, #16]
 80182f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80182f4:	68a3      	ldr	r3, [r4, #8]
 80182f6:	6861      	ldr	r1, [r4, #4]
 80182f8:	eb07 060a 	add.w	r6, r7, sl
 80182fc:	42b3      	cmp	r3, r6
 80182fe:	b085      	sub	sp, #20
 8018300:	bfb8      	it	lt
 8018302:	3101      	addlt	r1, #1
 8018304:	f7ff feda 	bl	80180bc <_Balloc>
 8018308:	b930      	cbnz	r0, 8018318 <__multiply+0x44>
 801830a:	4602      	mov	r2, r0
 801830c:	4b44      	ldr	r3, [pc, #272]	; (8018420 <__multiply+0x14c>)
 801830e:	4845      	ldr	r0, [pc, #276]	; (8018424 <__multiply+0x150>)
 8018310:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018314:	f7fe f91a 	bl	801654c <__assert_func>
 8018318:	f100 0514 	add.w	r5, r0, #20
 801831c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018320:	462b      	mov	r3, r5
 8018322:	2200      	movs	r2, #0
 8018324:	4543      	cmp	r3, r8
 8018326:	d321      	bcc.n	801836c <__multiply+0x98>
 8018328:	f104 0314 	add.w	r3, r4, #20
 801832c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018330:	f109 0314 	add.w	r3, r9, #20
 8018334:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018338:	9202      	str	r2, [sp, #8]
 801833a:	1b3a      	subs	r2, r7, r4
 801833c:	3a15      	subs	r2, #21
 801833e:	f022 0203 	bic.w	r2, r2, #3
 8018342:	3204      	adds	r2, #4
 8018344:	f104 0115 	add.w	r1, r4, #21
 8018348:	428f      	cmp	r7, r1
 801834a:	bf38      	it	cc
 801834c:	2204      	movcc	r2, #4
 801834e:	9201      	str	r2, [sp, #4]
 8018350:	9a02      	ldr	r2, [sp, #8]
 8018352:	9303      	str	r3, [sp, #12]
 8018354:	429a      	cmp	r2, r3
 8018356:	d80c      	bhi.n	8018372 <__multiply+0x9e>
 8018358:	2e00      	cmp	r6, #0
 801835a:	dd03      	ble.n	8018364 <__multiply+0x90>
 801835c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018360:	2b00      	cmp	r3, #0
 8018362:	d05b      	beq.n	801841c <__multiply+0x148>
 8018364:	6106      	str	r6, [r0, #16]
 8018366:	b005      	add	sp, #20
 8018368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801836c:	f843 2b04 	str.w	r2, [r3], #4
 8018370:	e7d8      	b.n	8018324 <__multiply+0x50>
 8018372:	f8b3 a000 	ldrh.w	sl, [r3]
 8018376:	f1ba 0f00 	cmp.w	sl, #0
 801837a:	d024      	beq.n	80183c6 <__multiply+0xf2>
 801837c:	f104 0e14 	add.w	lr, r4, #20
 8018380:	46a9      	mov	r9, r5
 8018382:	f04f 0c00 	mov.w	ip, #0
 8018386:	f85e 2b04 	ldr.w	r2, [lr], #4
 801838a:	f8d9 1000 	ldr.w	r1, [r9]
 801838e:	fa1f fb82 	uxth.w	fp, r2
 8018392:	b289      	uxth	r1, r1
 8018394:	fb0a 110b 	mla	r1, sl, fp, r1
 8018398:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801839c:	f8d9 2000 	ldr.w	r2, [r9]
 80183a0:	4461      	add	r1, ip
 80183a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80183a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80183aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80183ae:	b289      	uxth	r1, r1
 80183b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80183b4:	4577      	cmp	r7, lr
 80183b6:	f849 1b04 	str.w	r1, [r9], #4
 80183ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80183be:	d8e2      	bhi.n	8018386 <__multiply+0xb2>
 80183c0:	9a01      	ldr	r2, [sp, #4]
 80183c2:	f845 c002 	str.w	ip, [r5, r2]
 80183c6:	9a03      	ldr	r2, [sp, #12]
 80183c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80183cc:	3304      	adds	r3, #4
 80183ce:	f1b9 0f00 	cmp.w	r9, #0
 80183d2:	d021      	beq.n	8018418 <__multiply+0x144>
 80183d4:	6829      	ldr	r1, [r5, #0]
 80183d6:	f104 0c14 	add.w	ip, r4, #20
 80183da:	46ae      	mov	lr, r5
 80183dc:	f04f 0a00 	mov.w	sl, #0
 80183e0:	f8bc b000 	ldrh.w	fp, [ip]
 80183e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80183e8:	fb09 220b 	mla	r2, r9, fp, r2
 80183ec:	4452      	add	r2, sl
 80183ee:	b289      	uxth	r1, r1
 80183f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80183f4:	f84e 1b04 	str.w	r1, [lr], #4
 80183f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80183fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018400:	f8be 1000 	ldrh.w	r1, [lr]
 8018404:	fb09 110a 	mla	r1, r9, sl, r1
 8018408:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801840c:	4567      	cmp	r7, ip
 801840e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018412:	d8e5      	bhi.n	80183e0 <__multiply+0x10c>
 8018414:	9a01      	ldr	r2, [sp, #4]
 8018416:	50a9      	str	r1, [r5, r2]
 8018418:	3504      	adds	r5, #4
 801841a:	e799      	b.n	8018350 <__multiply+0x7c>
 801841c:	3e01      	subs	r6, #1
 801841e:	e79b      	b.n	8018358 <__multiply+0x84>
 8018420:	0801be77 	.word	0x0801be77
 8018424:	0801be88 	.word	0x0801be88

08018428 <__pow5mult>:
 8018428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801842c:	4615      	mov	r5, r2
 801842e:	f012 0203 	ands.w	r2, r2, #3
 8018432:	4606      	mov	r6, r0
 8018434:	460f      	mov	r7, r1
 8018436:	d007      	beq.n	8018448 <__pow5mult+0x20>
 8018438:	4c25      	ldr	r4, [pc, #148]	; (80184d0 <__pow5mult+0xa8>)
 801843a:	3a01      	subs	r2, #1
 801843c:	2300      	movs	r3, #0
 801843e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018442:	f7ff fe9d 	bl	8018180 <__multadd>
 8018446:	4607      	mov	r7, r0
 8018448:	10ad      	asrs	r5, r5, #2
 801844a:	d03d      	beq.n	80184c8 <__pow5mult+0xa0>
 801844c:	69f4      	ldr	r4, [r6, #28]
 801844e:	b97c      	cbnz	r4, 8018470 <__pow5mult+0x48>
 8018450:	2010      	movs	r0, #16
 8018452:	f7ff fd7f 	bl	8017f54 <malloc>
 8018456:	4602      	mov	r2, r0
 8018458:	61f0      	str	r0, [r6, #28]
 801845a:	b928      	cbnz	r0, 8018468 <__pow5mult+0x40>
 801845c:	4b1d      	ldr	r3, [pc, #116]	; (80184d4 <__pow5mult+0xac>)
 801845e:	481e      	ldr	r0, [pc, #120]	; (80184d8 <__pow5mult+0xb0>)
 8018460:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018464:	f7fe f872 	bl	801654c <__assert_func>
 8018468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801846c:	6004      	str	r4, [r0, #0]
 801846e:	60c4      	str	r4, [r0, #12]
 8018470:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018478:	b94c      	cbnz	r4, 801848e <__pow5mult+0x66>
 801847a:	f240 2171 	movw	r1, #625	; 0x271
 801847e:	4630      	mov	r0, r6
 8018480:	f7ff ff12 	bl	80182a8 <__i2b>
 8018484:	2300      	movs	r3, #0
 8018486:	f8c8 0008 	str.w	r0, [r8, #8]
 801848a:	4604      	mov	r4, r0
 801848c:	6003      	str	r3, [r0, #0]
 801848e:	f04f 0900 	mov.w	r9, #0
 8018492:	07eb      	lsls	r3, r5, #31
 8018494:	d50a      	bpl.n	80184ac <__pow5mult+0x84>
 8018496:	4639      	mov	r1, r7
 8018498:	4622      	mov	r2, r4
 801849a:	4630      	mov	r0, r6
 801849c:	f7ff ff1a 	bl	80182d4 <__multiply>
 80184a0:	4639      	mov	r1, r7
 80184a2:	4680      	mov	r8, r0
 80184a4:	4630      	mov	r0, r6
 80184a6:	f7ff fe49 	bl	801813c <_Bfree>
 80184aa:	4647      	mov	r7, r8
 80184ac:	106d      	asrs	r5, r5, #1
 80184ae:	d00b      	beq.n	80184c8 <__pow5mult+0xa0>
 80184b0:	6820      	ldr	r0, [r4, #0]
 80184b2:	b938      	cbnz	r0, 80184c4 <__pow5mult+0x9c>
 80184b4:	4622      	mov	r2, r4
 80184b6:	4621      	mov	r1, r4
 80184b8:	4630      	mov	r0, r6
 80184ba:	f7ff ff0b 	bl	80182d4 <__multiply>
 80184be:	6020      	str	r0, [r4, #0]
 80184c0:	f8c0 9000 	str.w	r9, [r0]
 80184c4:	4604      	mov	r4, r0
 80184c6:	e7e4      	b.n	8018492 <__pow5mult+0x6a>
 80184c8:	4638      	mov	r0, r7
 80184ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184ce:	bf00      	nop
 80184d0:	0801bfd8 	.word	0x0801bfd8
 80184d4:	0801be08 	.word	0x0801be08
 80184d8:	0801be88 	.word	0x0801be88

080184dc <__lshift>:
 80184dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184e0:	460c      	mov	r4, r1
 80184e2:	6849      	ldr	r1, [r1, #4]
 80184e4:	6923      	ldr	r3, [r4, #16]
 80184e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80184ea:	68a3      	ldr	r3, [r4, #8]
 80184ec:	4607      	mov	r7, r0
 80184ee:	4691      	mov	r9, r2
 80184f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80184f4:	f108 0601 	add.w	r6, r8, #1
 80184f8:	42b3      	cmp	r3, r6
 80184fa:	db0b      	blt.n	8018514 <__lshift+0x38>
 80184fc:	4638      	mov	r0, r7
 80184fe:	f7ff fddd 	bl	80180bc <_Balloc>
 8018502:	4605      	mov	r5, r0
 8018504:	b948      	cbnz	r0, 801851a <__lshift+0x3e>
 8018506:	4602      	mov	r2, r0
 8018508:	4b28      	ldr	r3, [pc, #160]	; (80185ac <__lshift+0xd0>)
 801850a:	4829      	ldr	r0, [pc, #164]	; (80185b0 <__lshift+0xd4>)
 801850c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018510:	f7fe f81c 	bl	801654c <__assert_func>
 8018514:	3101      	adds	r1, #1
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	e7ee      	b.n	80184f8 <__lshift+0x1c>
 801851a:	2300      	movs	r3, #0
 801851c:	f100 0114 	add.w	r1, r0, #20
 8018520:	f100 0210 	add.w	r2, r0, #16
 8018524:	4618      	mov	r0, r3
 8018526:	4553      	cmp	r3, sl
 8018528:	db33      	blt.n	8018592 <__lshift+0xb6>
 801852a:	6920      	ldr	r0, [r4, #16]
 801852c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018530:	f104 0314 	add.w	r3, r4, #20
 8018534:	f019 091f 	ands.w	r9, r9, #31
 8018538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801853c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018540:	d02b      	beq.n	801859a <__lshift+0xbe>
 8018542:	f1c9 0e20 	rsb	lr, r9, #32
 8018546:	468a      	mov	sl, r1
 8018548:	2200      	movs	r2, #0
 801854a:	6818      	ldr	r0, [r3, #0]
 801854c:	fa00 f009 	lsl.w	r0, r0, r9
 8018550:	4310      	orrs	r0, r2
 8018552:	f84a 0b04 	str.w	r0, [sl], #4
 8018556:	f853 2b04 	ldr.w	r2, [r3], #4
 801855a:	459c      	cmp	ip, r3
 801855c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018560:	d8f3      	bhi.n	801854a <__lshift+0x6e>
 8018562:	ebac 0304 	sub.w	r3, ip, r4
 8018566:	3b15      	subs	r3, #21
 8018568:	f023 0303 	bic.w	r3, r3, #3
 801856c:	3304      	adds	r3, #4
 801856e:	f104 0015 	add.w	r0, r4, #21
 8018572:	4584      	cmp	ip, r0
 8018574:	bf38      	it	cc
 8018576:	2304      	movcc	r3, #4
 8018578:	50ca      	str	r2, [r1, r3]
 801857a:	b10a      	cbz	r2, 8018580 <__lshift+0xa4>
 801857c:	f108 0602 	add.w	r6, r8, #2
 8018580:	3e01      	subs	r6, #1
 8018582:	4638      	mov	r0, r7
 8018584:	612e      	str	r6, [r5, #16]
 8018586:	4621      	mov	r1, r4
 8018588:	f7ff fdd8 	bl	801813c <_Bfree>
 801858c:	4628      	mov	r0, r5
 801858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018592:	f842 0f04 	str.w	r0, [r2, #4]!
 8018596:	3301      	adds	r3, #1
 8018598:	e7c5      	b.n	8018526 <__lshift+0x4a>
 801859a:	3904      	subs	r1, #4
 801859c:	f853 2b04 	ldr.w	r2, [r3], #4
 80185a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80185a4:	459c      	cmp	ip, r3
 80185a6:	d8f9      	bhi.n	801859c <__lshift+0xc0>
 80185a8:	e7ea      	b.n	8018580 <__lshift+0xa4>
 80185aa:	bf00      	nop
 80185ac:	0801be77 	.word	0x0801be77
 80185b0:	0801be88 	.word	0x0801be88

080185b4 <__mcmp>:
 80185b4:	b530      	push	{r4, r5, lr}
 80185b6:	6902      	ldr	r2, [r0, #16]
 80185b8:	690c      	ldr	r4, [r1, #16]
 80185ba:	1b12      	subs	r2, r2, r4
 80185bc:	d10e      	bne.n	80185dc <__mcmp+0x28>
 80185be:	f100 0314 	add.w	r3, r0, #20
 80185c2:	3114      	adds	r1, #20
 80185c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80185c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80185cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80185d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80185d4:	42a5      	cmp	r5, r4
 80185d6:	d003      	beq.n	80185e0 <__mcmp+0x2c>
 80185d8:	d305      	bcc.n	80185e6 <__mcmp+0x32>
 80185da:	2201      	movs	r2, #1
 80185dc:	4610      	mov	r0, r2
 80185de:	bd30      	pop	{r4, r5, pc}
 80185e0:	4283      	cmp	r3, r0
 80185e2:	d3f3      	bcc.n	80185cc <__mcmp+0x18>
 80185e4:	e7fa      	b.n	80185dc <__mcmp+0x28>
 80185e6:	f04f 32ff 	mov.w	r2, #4294967295
 80185ea:	e7f7      	b.n	80185dc <__mcmp+0x28>

080185ec <__mdiff>:
 80185ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f0:	460c      	mov	r4, r1
 80185f2:	4606      	mov	r6, r0
 80185f4:	4611      	mov	r1, r2
 80185f6:	4620      	mov	r0, r4
 80185f8:	4690      	mov	r8, r2
 80185fa:	f7ff ffdb 	bl	80185b4 <__mcmp>
 80185fe:	1e05      	subs	r5, r0, #0
 8018600:	d110      	bne.n	8018624 <__mdiff+0x38>
 8018602:	4629      	mov	r1, r5
 8018604:	4630      	mov	r0, r6
 8018606:	f7ff fd59 	bl	80180bc <_Balloc>
 801860a:	b930      	cbnz	r0, 801861a <__mdiff+0x2e>
 801860c:	4b3a      	ldr	r3, [pc, #232]	; (80186f8 <__mdiff+0x10c>)
 801860e:	4602      	mov	r2, r0
 8018610:	f240 2137 	movw	r1, #567	; 0x237
 8018614:	4839      	ldr	r0, [pc, #228]	; (80186fc <__mdiff+0x110>)
 8018616:	f7fd ff99 	bl	801654c <__assert_func>
 801861a:	2301      	movs	r3, #1
 801861c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018624:	bfa4      	itt	ge
 8018626:	4643      	movge	r3, r8
 8018628:	46a0      	movge	r8, r4
 801862a:	4630      	mov	r0, r6
 801862c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018630:	bfa6      	itte	ge
 8018632:	461c      	movge	r4, r3
 8018634:	2500      	movge	r5, #0
 8018636:	2501      	movlt	r5, #1
 8018638:	f7ff fd40 	bl	80180bc <_Balloc>
 801863c:	b920      	cbnz	r0, 8018648 <__mdiff+0x5c>
 801863e:	4b2e      	ldr	r3, [pc, #184]	; (80186f8 <__mdiff+0x10c>)
 8018640:	4602      	mov	r2, r0
 8018642:	f240 2145 	movw	r1, #581	; 0x245
 8018646:	e7e5      	b.n	8018614 <__mdiff+0x28>
 8018648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801864c:	6926      	ldr	r6, [r4, #16]
 801864e:	60c5      	str	r5, [r0, #12]
 8018650:	f104 0914 	add.w	r9, r4, #20
 8018654:	f108 0514 	add.w	r5, r8, #20
 8018658:	f100 0e14 	add.w	lr, r0, #20
 801865c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018664:	f108 0210 	add.w	r2, r8, #16
 8018668:	46f2      	mov	sl, lr
 801866a:	2100      	movs	r1, #0
 801866c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018674:	fa11 f88b 	uxtah	r8, r1, fp
 8018678:	b299      	uxth	r1, r3
 801867a:	0c1b      	lsrs	r3, r3, #16
 801867c:	eba8 0801 	sub.w	r8, r8, r1
 8018680:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018684:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018688:	fa1f f888 	uxth.w	r8, r8
 801868c:	1419      	asrs	r1, r3, #16
 801868e:	454e      	cmp	r6, r9
 8018690:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018694:	f84a 3b04 	str.w	r3, [sl], #4
 8018698:	d8e8      	bhi.n	801866c <__mdiff+0x80>
 801869a:	1b33      	subs	r3, r6, r4
 801869c:	3b15      	subs	r3, #21
 801869e:	f023 0303 	bic.w	r3, r3, #3
 80186a2:	3304      	adds	r3, #4
 80186a4:	3415      	adds	r4, #21
 80186a6:	42a6      	cmp	r6, r4
 80186a8:	bf38      	it	cc
 80186aa:	2304      	movcc	r3, #4
 80186ac:	441d      	add	r5, r3
 80186ae:	4473      	add	r3, lr
 80186b0:	469e      	mov	lr, r3
 80186b2:	462e      	mov	r6, r5
 80186b4:	4566      	cmp	r6, ip
 80186b6:	d30e      	bcc.n	80186d6 <__mdiff+0xea>
 80186b8:	f10c 0203 	add.w	r2, ip, #3
 80186bc:	1b52      	subs	r2, r2, r5
 80186be:	f022 0203 	bic.w	r2, r2, #3
 80186c2:	3d03      	subs	r5, #3
 80186c4:	45ac      	cmp	ip, r5
 80186c6:	bf38      	it	cc
 80186c8:	2200      	movcc	r2, #0
 80186ca:	4413      	add	r3, r2
 80186cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80186d0:	b17a      	cbz	r2, 80186f2 <__mdiff+0x106>
 80186d2:	6107      	str	r7, [r0, #16]
 80186d4:	e7a4      	b.n	8018620 <__mdiff+0x34>
 80186d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80186da:	fa11 f288 	uxtah	r2, r1, r8
 80186de:	1414      	asrs	r4, r2, #16
 80186e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80186e4:	b292      	uxth	r2, r2
 80186e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80186ea:	f84e 2b04 	str.w	r2, [lr], #4
 80186ee:	1421      	asrs	r1, r4, #16
 80186f0:	e7e0      	b.n	80186b4 <__mdiff+0xc8>
 80186f2:	3f01      	subs	r7, #1
 80186f4:	e7ea      	b.n	80186cc <__mdiff+0xe0>
 80186f6:	bf00      	nop
 80186f8:	0801be77 	.word	0x0801be77
 80186fc:	0801be88 	.word	0x0801be88

08018700 <__d2b>:
 8018700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018704:	460f      	mov	r7, r1
 8018706:	2101      	movs	r1, #1
 8018708:	ec59 8b10 	vmov	r8, r9, d0
 801870c:	4616      	mov	r6, r2
 801870e:	f7ff fcd5 	bl	80180bc <_Balloc>
 8018712:	4604      	mov	r4, r0
 8018714:	b930      	cbnz	r0, 8018724 <__d2b+0x24>
 8018716:	4602      	mov	r2, r0
 8018718:	4b24      	ldr	r3, [pc, #144]	; (80187ac <__d2b+0xac>)
 801871a:	4825      	ldr	r0, [pc, #148]	; (80187b0 <__d2b+0xb0>)
 801871c:	f240 310f 	movw	r1, #783	; 0x30f
 8018720:	f7fd ff14 	bl	801654c <__assert_func>
 8018724:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801872c:	bb2d      	cbnz	r5, 801877a <__d2b+0x7a>
 801872e:	9301      	str	r3, [sp, #4]
 8018730:	f1b8 0300 	subs.w	r3, r8, #0
 8018734:	d026      	beq.n	8018784 <__d2b+0x84>
 8018736:	4668      	mov	r0, sp
 8018738:	9300      	str	r3, [sp, #0]
 801873a:	f7ff fd87 	bl	801824c <__lo0bits>
 801873e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018742:	b1e8      	cbz	r0, 8018780 <__d2b+0x80>
 8018744:	f1c0 0320 	rsb	r3, r0, #32
 8018748:	fa02 f303 	lsl.w	r3, r2, r3
 801874c:	430b      	orrs	r3, r1
 801874e:	40c2      	lsrs	r2, r0
 8018750:	6163      	str	r3, [r4, #20]
 8018752:	9201      	str	r2, [sp, #4]
 8018754:	9b01      	ldr	r3, [sp, #4]
 8018756:	61a3      	str	r3, [r4, #24]
 8018758:	2b00      	cmp	r3, #0
 801875a:	bf14      	ite	ne
 801875c:	2202      	movne	r2, #2
 801875e:	2201      	moveq	r2, #1
 8018760:	6122      	str	r2, [r4, #16]
 8018762:	b1bd      	cbz	r5, 8018794 <__d2b+0x94>
 8018764:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018768:	4405      	add	r5, r0
 801876a:	603d      	str	r5, [r7, #0]
 801876c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018770:	6030      	str	r0, [r6, #0]
 8018772:	4620      	mov	r0, r4
 8018774:	b003      	add	sp, #12
 8018776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801877a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801877e:	e7d6      	b.n	801872e <__d2b+0x2e>
 8018780:	6161      	str	r1, [r4, #20]
 8018782:	e7e7      	b.n	8018754 <__d2b+0x54>
 8018784:	a801      	add	r0, sp, #4
 8018786:	f7ff fd61 	bl	801824c <__lo0bits>
 801878a:	9b01      	ldr	r3, [sp, #4]
 801878c:	6163      	str	r3, [r4, #20]
 801878e:	3020      	adds	r0, #32
 8018790:	2201      	movs	r2, #1
 8018792:	e7e5      	b.n	8018760 <__d2b+0x60>
 8018794:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018798:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801879c:	6038      	str	r0, [r7, #0]
 801879e:	6918      	ldr	r0, [r3, #16]
 80187a0:	f7ff fd34 	bl	801820c <__hi0bits>
 80187a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80187a8:	e7e2      	b.n	8018770 <__d2b+0x70>
 80187aa:	bf00      	nop
 80187ac:	0801be77 	.word	0x0801be77
 80187b0:	0801be88 	.word	0x0801be88

080187b4 <__ssputs_r>:
 80187b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187b8:	688e      	ldr	r6, [r1, #8]
 80187ba:	461f      	mov	r7, r3
 80187bc:	42be      	cmp	r6, r7
 80187be:	680b      	ldr	r3, [r1, #0]
 80187c0:	4682      	mov	sl, r0
 80187c2:	460c      	mov	r4, r1
 80187c4:	4690      	mov	r8, r2
 80187c6:	d82c      	bhi.n	8018822 <__ssputs_r+0x6e>
 80187c8:	898a      	ldrh	r2, [r1, #12]
 80187ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80187ce:	d026      	beq.n	801881e <__ssputs_r+0x6a>
 80187d0:	6965      	ldr	r5, [r4, #20]
 80187d2:	6909      	ldr	r1, [r1, #16]
 80187d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80187d8:	eba3 0901 	sub.w	r9, r3, r1
 80187dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80187e0:	1c7b      	adds	r3, r7, #1
 80187e2:	444b      	add	r3, r9
 80187e4:	106d      	asrs	r5, r5, #1
 80187e6:	429d      	cmp	r5, r3
 80187e8:	bf38      	it	cc
 80187ea:	461d      	movcc	r5, r3
 80187ec:	0553      	lsls	r3, r2, #21
 80187ee:	d527      	bpl.n	8018840 <__ssputs_r+0x8c>
 80187f0:	4629      	mov	r1, r5
 80187f2:	f7ff fbd7 	bl	8017fa4 <_malloc_r>
 80187f6:	4606      	mov	r6, r0
 80187f8:	b360      	cbz	r0, 8018854 <__ssputs_r+0xa0>
 80187fa:	6921      	ldr	r1, [r4, #16]
 80187fc:	464a      	mov	r2, r9
 80187fe:	f7fe fccd 	bl	801719c <memcpy>
 8018802:	89a3      	ldrh	r3, [r4, #12]
 8018804:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801880c:	81a3      	strh	r3, [r4, #12]
 801880e:	6126      	str	r6, [r4, #16]
 8018810:	6165      	str	r5, [r4, #20]
 8018812:	444e      	add	r6, r9
 8018814:	eba5 0509 	sub.w	r5, r5, r9
 8018818:	6026      	str	r6, [r4, #0]
 801881a:	60a5      	str	r5, [r4, #8]
 801881c:	463e      	mov	r6, r7
 801881e:	42be      	cmp	r6, r7
 8018820:	d900      	bls.n	8018824 <__ssputs_r+0x70>
 8018822:	463e      	mov	r6, r7
 8018824:	6820      	ldr	r0, [r4, #0]
 8018826:	4632      	mov	r2, r6
 8018828:	4641      	mov	r1, r8
 801882a:	f000 fba3 	bl	8018f74 <memmove>
 801882e:	68a3      	ldr	r3, [r4, #8]
 8018830:	1b9b      	subs	r3, r3, r6
 8018832:	60a3      	str	r3, [r4, #8]
 8018834:	6823      	ldr	r3, [r4, #0]
 8018836:	4433      	add	r3, r6
 8018838:	6023      	str	r3, [r4, #0]
 801883a:	2000      	movs	r0, #0
 801883c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018840:	462a      	mov	r2, r5
 8018842:	f000 fc2d 	bl	80190a0 <_realloc_r>
 8018846:	4606      	mov	r6, r0
 8018848:	2800      	cmp	r0, #0
 801884a:	d1e0      	bne.n	801880e <__ssputs_r+0x5a>
 801884c:	6921      	ldr	r1, [r4, #16]
 801884e:	4650      	mov	r0, sl
 8018850:	f7ff fb34 	bl	8017ebc <_free_r>
 8018854:	230c      	movs	r3, #12
 8018856:	f8ca 3000 	str.w	r3, [sl]
 801885a:	89a3      	ldrh	r3, [r4, #12]
 801885c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018860:	81a3      	strh	r3, [r4, #12]
 8018862:	f04f 30ff 	mov.w	r0, #4294967295
 8018866:	e7e9      	b.n	801883c <__ssputs_r+0x88>

08018868 <_svfiprintf_r>:
 8018868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801886c:	4698      	mov	r8, r3
 801886e:	898b      	ldrh	r3, [r1, #12]
 8018870:	061b      	lsls	r3, r3, #24
 8018872:	b09d      	sub	sp, #116	; 0x74
 8018874:	4607      	mov	r7, r0
 8018876:	460d      	mov	r5, r1
 8018878:	4614      	mov	r4, r2
 801887a:	d50e      	bpl.n	801889a <_svfiprintf_r+0x32>
 801887c:	690b      	ldr	r3, [r1, #16]
 801887e:	b963      	cbnz	r3, 801889a <_svfiprintf_r+0x32>
 8018880:	2140      	movs	r1, #64	; 0x40
 8018882:	f7ff fb8f 	bl	8017fa4 <_malloc_r>
 8018886:	6028      	str	r0, [r5, #0]
 8018888:	6128      	str	r0, [r5, #16]
 801888a:	b920      	cbnz	r0, 8018896 <_svfiprintf_r+0x2e>
 801888c:	230c      	movs	r3, #12
 801888e:	603b      	str	r3, [r7, #0]
 8018890:	f04f 30ff 	mov.w	r0, #4294967295
 8018894:	e0d0      	b.n	8018a38 <_svfiprintf_r+0x1d0>
 8018896:	2340      	movs	r3, #64	; 0x40
 8018898:	616b      	str	r3, [r5, #20]
 801889a:	2300      	movs	r3, #0
 801889c:	9309      	str	r3, [sp, #36]	; 0x24
 801889e:	2320      	movs	r3, #32
 80188a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80188a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80188a8:	2330      	movs	r3, #48	; 0x30
 80188aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018a50 <_svfiprintf_r+0x1e8>
 80188ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80188b2:	f04f 0901 	mov.w	r9, #1
 80188b6:	4623      	mov	r3, r4
 80188b8:	469a      	mov	sl, r3
 80188ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188be:	b10a      	cbz	r2, 80188c4 <_svfiprintf_r+0x5c>
 80188c0:	2a25      	cmp	r2, #37	; 0x25
 80188c2:	d1f9      	bne.n	80188b8 <_svfiprintf_r+0x50>
 80188c4:	ebba 0b04 	subs.w	fp, sl, r4
 80188c8:	d00b      	beq.n	80188e2 <_svfiprintf_r+0x7a>
 80188ca:	465b      	mov	r3, fp
 80188cc:	4622      	mov	r2, r4
 80188ce:	4629      	mov	r1, r5
 80188d0:	4638      	mov	r0, r7
 80188d2:	f7ff ff6f 	bl	80187b4 <__ssputs_r>
 80188d6:	3001      	adds	r0, #1
 80188d8:	f000 80a9 	beq.w	8018a2e <_svfiprintf_r+0x1c6>
 80188dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188de:	445a      	add	r2, fp
 80188e0:	9209      	str	r2, [sp, #36]	; 0x24
 80188e2:	f89a 3000 	ldrb.w	r3, [sl]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	f000 80a1 	beq.w	8018a2e <_svfiprintf_r+0x1c6>
 80188ec:	2300      	movs	r3, #0
 80188ee:	f04f 32ff 	mov.w	r2, #4294967295
 80188f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188f6:	f10a 0a01 	add.w	sl, sl, #1
 80188fa:	9304      	str	r3, [sp, #16]
 80188fc:	9307      	str	r3, [sp, #28]
 80188fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018902:	931a      	str	r3, [sp, #104]	; 0x68
 8018904:	4654      	mov	r4, sl
 8018906:	2205      	movs	r2, #5
 8018908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801890c:	4850      	ldr	r0, [pc, #320]	; (8018a50 <_svfiprintf_r+0x1e8>)
 801890e:	f7e7 fc87 	bl	8000220 <memchr>
 8018912:	9a04      	ldr	r2, [sp, #16]
 8018914:	b9d8      	cbnz	r0, 801894e <_svfiprintf_r+0xe6>
 8018916:	06d0      	lsls	r0, r2, #27
 8018918:	bf44      	itt	mi
 801891a:	2320      	movmi	r3, #32
 801891c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018920:	0711      	lsls	r1, r2, #28
 8018922:	bf44      	itt	mi
 8018924:	232b      	movmi	r3, #43	; 0x2b
 8018926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801892a:	f89a 3000 	ldrb.w	r3, [sl]
 801892e:	2b2a      	cmp	r3, #42	; 0x2a
 8018930:	d015      	beq.n	801895e <_svfiprintf_r+0xf6>
 8018932:	9a07      	ldr	r2, [sp, #28]
 8018934:	4654      	mov	r4, sl
 8018936:	2000      	movs	r0, #0
 8018938:	f04f 0c0a 	mov.w	ip, #10
 801893c:	4621      	mov	r1, r4
 801893e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018942:	3b30      	subs	r3, #48	; 0x30
 8018944:	2b09      	cmp	r3, #9
 8018946:	d94d      	bls.n	80189e4 <_svfiprintf_r+0x17c>
 8018948:	b1b0      	cbz	r0, 8018978 <_svfiprintf_r+0x110>
 801894a:	9207      	str	r2, [sp, #28]
 801894c:	e014      	b.n	8018978 <_svfiprintf_r+0x110>
 801894e:	eba0 0308 	sub.w	r3, r0, r8
 8018952:	fa09 f303 	lsl.w	r3, r9, r3
 8018956:	4313      	orrs	r3, r2
 8018958:	9304      	str	r3, [sp, #16]
 801895a:	46a2      	mov	sl, r4
 801895c:	e7d2      	b.n	8018904 <_svfiprintf_r+0x9c>
 801895e:	9b03      	ldr	r3, [sp, #12]
 8018960:	1d19      	adds	r1, r3, #4
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	9103      	str	r1, [sp, #12]
 8018966:	2b00      	cmp	r3, #0
 8018968:	bfbb      	ittet	lt
 801896a:	425b      	neglt	r3, r3
 801896c:	f042 0202 	orrlt.w	r2, r2, #2
 8018970:	9307      	strge	r3, [sp, #28]
 8018972:	9307      	strlt	r3, [sp, #28]
 8018974:	bfb8      	it	lt
 8018976:	9204      	strlt	r2, [sp, #16]
 8018978:	7823      	ldrb	r3, [r4, #0]
 801897a:	2b2e      	cmp	r3, #46	; 0x2e
 801897c:	d10c      	bne.n	8018998 <_svfiprintf_r+0x130>
 801897e:	7863      	ldrb	r3, [r4, #1]
 8018980:	2b2a      	cmp	r3, #42	; 0x2a
 8018982:	d134      	bne.n	80189ee <_svfiprintf_r+0x186>
 8018984:	9b03      	ldr	r3, [sp, #12]
 8018986:	1d1a      	adds	r2, r3, #4
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	9203      	str	r2, [sp, #12]
 801898c:	2b00      	cmp	r3, #0
 801898e:	bfb8      	it	lt
 8018990:	f04f 33ff 	movlt.w	r3, #4294967295
 8018994:	3402      	adds	r4, #2
 8018996:	9305      	str	r3, [sp, #20]
 8018998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018a60 <_svfiprintf_r+0x1f8>
 801899c:	7821      	ldrb	r1, [r4, #0]
 801899e:	2203      	movs	r2, #3
 80189a0:	4650      	mov	r0, sl
 80189a2:	f7e7 fc3d 	bl	8000220 <memchr>
 80189a6:	b138      	cbz	r0, 80189b8 <_svfiprintf_r+0x150>
 80189a8:	9b04      	ldr	r3, [sp, #16]
 80189aa:	eba0 000a 	sub.w	r0, r0, sl
 80189ae:	2240      	movs	r2, #64	; 0x40
 80189b0:	4082      	lsls	r2, r0
 80189b2:	4313      	orrs	r3, r2
 80189b4:	3401      	adds	r4, #1
 80189b6:	9304      	str	r3, [sp, #16]
 80189b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189bc:	4825      	ldr	r0, [pc, #148]	; (8018a54 <_svfiprintf_r+0x1ec>)
 80189be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189c2:	2206      	movs	r2, #6
 80189c4:	f7e7 fc2c 	bl	8000220 <memchr>
 80189c8:	2800      	cmp	r0, #0
 80189ca:	d038      	beq.n	8018a3e <_svfiprintf_r+0x1d6>
 80189cc:	4b22      	ldr	r3, [pc, #136]	; (8018a58 <_svfiprintf_r+0x1f0>)
 80189ce:	bb1b      	cbnz	r3, 8018a18 <_svfiprintf_r+0x1b0>
 80189d0:	9b03      	ldr	r3, [sp, #12]
 80189d2:	3307      	adds	r3, #7
 80189d4:	f023 0307 	bic.w	r3, r3, #7
 80189d8:	3308      	adds	r3, #8
 80189da:	9303      	str	r3, [sp, #12]
 80189dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189de:	4433      	add	r3, r6
 80189e0:	9309      	str	r3, [sp, #36]	; 0x24
 80189e2:	e768      	b.n	80188b6 <_svfiprintf_r+0x4e>
 80189e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80189e8:	460c      	mov	r4, r1
 80189ea:	2001      	movs	r0, #1
 80189ec:	e7a6      	b.n	801893c <_svfiprintf_r+0xd4>
 80189ee:	2300      	movs	r3, #0
 80189f0:	3401      	adds	r4, #1
 80189f2:	9305      	str	r3, [sp, #20]
 80189f4:	4619      	mov	r1, r3
 80189f6:	f04f 0c0a 	mov.w	ip, #10
 80189fa:	4620      	mov	r0, r4
 80189fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a00:	3a30      	subs	r2, #48	; 0x30
 8018a02:	2a09      	cmp	r2, #9
 8018a04:	d903      	bls.n	8018a0e <_svfiprintf_r+0x1a6>
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d0c6      	beq.n	8018998 <_svfiprintf_r+0x130>
 8018a0a:	9105      	str	r1, [sp, #20]
 8018a0c:	e7c4      	b.n	8018998 <_svfiprintf_r+0x130>
 8018a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a12:	4604      	mov	r4, r0
 8018a14:	2301      	movs	r3, #1
 8018a16:	e7f0      	b.n	80189fa <_svfiprintf_r+0x192>
 8018a18:	ab03      	add	r3, sp, #12
 8018a1a:	9300      	str	r3, [sp, #0]
 8018a1c:	462a      	mov	r2, r5
 8018a1e:	4b0f      	ldr	r3, [pc, #60]	; (8018a5c <_svfiprintf_r+0x1f4>)
 8018a20:	a904      	add	r1, sp, #16
 8018a22:	4638      	mov	r0, r7
 8018a24:	f7fd fe50 	bl	80166c8 <_printf_float>
 8018a28:	1c42      	adds	r2, r0, #1
 8018a2a:	4606      	mov	r6, r0
 8018a2c:	d1d6      	bne.n	80189dc <_svfiprintf_r+0x174>
 8018a2e:	89ab      	ldrh	r3, [r5, #12]
 8018a30:	065b      	lsls	r3, r3, #25
 8018a32:	f53f af2d 	bmi.w	8018890 <_svfiprintf_r+0x28>
 8018a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a38:	b01d      	add	sp, #116	; 0x74
 8018a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a3e:	ab03      	add	r3, sp, #12
 8018a40:	9300      	str	r3, [sp, #0]
 8018a42:	462a      	mov	r2, r5
 8018a44:	4b05      	ldr	r3, [pc, #20]	; (8018a5c <_svfiprintf_r+0x1f4>)
 8018a46:	a904      	add	r1, sp, #16
 8018a48:	4638      	mov	r0, r7
 8018a4a:	f7fe f8e1 	bl	8016c10 <_printf_i>
 8018a4e:	e7eb      	b.n	8018a28 <_svfiprintf_r+0x1c0>
 8018a50:	0801bfe4 	.word	0x0801bfe4
 8018a54:	0801bfee 	.word	0x0801bfee
 8018a58:	080166c9 	.word	0x080166c9
 8018a5c:	080187b5 	.word	0x080187b5
 8018a60:	0801bfea 	.word	0x0801bfea

08018a64 <__sfputc_r>:
 8018a64:	6893      	ldr	r3, [r2, #8]
 8018a66:	3b01      	subs	r3, #1
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	b410      	push	{r4}
 8018a6c:	6093      	str	r3, [r2, #8]
 8018a6e:	da08      	bge.n	8018a82 <__sfputc_r+0x1e>
 8018a70:	6994      	ldr	r4, [r2, #24]
 8018a72:	42a3      	cmp	r3, r4
 8018a74:	db01      	blt.n	8018a7a <__sfputc_r+0x16>
 8018a76:	290a      	cmp	r1, #10
 8018a78:	d103      	bne.n	8018a82 <__sfputc_r+0x1e>
 8018a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a7e:	f000 b9e3 	b.w	8018e48 <__swbuf_r>
 8018a82:	6813      	ldr	r3, [r2, #0]
 8018a84:	1c58      	adds	r0, r3, #1
 8018a86:	6010      	str	r0, [r2, #0]
 8018a88:	7019      	strb	r1, [r3, #0]
 8018a8a:	4608      	mov	r0, r1
 8018a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a90:	4770      	bx	lr

08018a92 <__sfputs_r>:
 8018a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a94:	4606      	mov	r6, r0
 8018a96:	460f      	mov	r7, r1
 8018a98:	4614      	mov	r4, r2
 8018a9a:	18d5      	adds	r5, r2, r3
 8018a9c:	42ac      	cmp	r4, r5
 8018a9e:	d101      	bne.n	8018aa4 <__sfputs_r+0x12>
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	e007      	b.n	8018ab4 <__sfputs_r+0x22>
 8018aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018aa8:	463a      	mov	r2, r7
 8018aaa:	4630      	mov	r0, r6
 8018aac:	f7ff ffda 	bl	8018a64 <__sfputc_r>
 8018ab0:	1c43      	adds	r3, r0, #1
 8018ab2:	d1f3      	bne.n	8018a9c <__sfputs_r+0xa>
 8018ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018ab8 <_vfiprintf_r>:
 8018ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018abc:	460d      	mov	r5, r1
 8018abe:	b09d      	sub	sp, #116	; 0x74
 8018ac0:	4614      	mov	r4, r2
 8018ac2:	4698      	mov	r8, r3
 8018ac4:	4606      	mov	r6, r0
 8018ac6:	b118      	cbz	r0, 8018ad0 <_vfiprintf_r+0x18>
 8018ac8:	6a03      	ldr	r3, [r0, #32]
 8018aca:	b90b      	cbnz	r3, 8018ad0 <_vfiprintf_r+0x18>
 8018acc:	f7fe fa3c 	bl	8016f48 <__sinit>
 8018ad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ad2:	07d9      	lsls	r1, r3, #31
 8018ad4:	d405      	bmi.n	8018ae2 <_vfiprintf_r+0x2a>
 8018ad6:	89ab      	ldrh	r3, [r5, #12]
 8018ad8:	059a      	lsls	r2, r3, #22
 8018ada:	d402      	bmi.n	8018ae2 <_vfiprintf_r+0x2a>
 8018adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018ade:	f7fe fb5b 	bl	8017198 <__retarget_lock_acquire_recursive>
 8018ae2:	89ab      	ldrh	r3, [r5, #12]
 8018ae4:	071b      	lsls	r3, r3, #28
 8018ae6:	d501      	bpl.n	8018aec <_vfiprintf_r+0x34>
 8018ae8:	692b      	ldr	r3, [r5, #16]
 8018aea:	b99b      	cbnz	r3, 8018b14 <_vfiprintf_r+0x5c>
 8018aec:	4629      	mov	r1, r5
 8018aee:	4630      	mov	r0, r6
 8018af0:	f000 f9e8 	bl	8018ec4 <__swsetup_r>
 8018af4:	b170      	cbz	r0, 8018b14 <_vfiprintf_r+0x5c>
 8018af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018af8:	07dc      	lsls	r4, r3, #31
 8018afa:	d504      	bpl.n	8018b06 <_vfiprintf_r+0x4e>
 8018afc:	f04f 30ff 	mov.w	r0, #4294967295
 8018b00:	b01d      	add	sp, #116	; 0x74
 8018b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b06:	89ab      	ldrh	r3, [r5, #12]
 8018b08:	0598      	lsls	r0, r3, #22
 8018b0a:	d4f7      	bmi.n	8018afc <_vfiprintf_r+0x44>
 8018b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018b0e:	f7fe fb44 	bl	801719a <__retarget_lock_release_recursive>
 8018b12:	e7f3      	b.n	8018afc <_vfiprintf_r+0x44>
 8018b14:	2300      	movs	r3, #0
 8018b16:	9309      	str	r3, [sp, #36]	; 0x24
 8018b18:	2320      	movs	r3, #32
 8018b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b22:	2330      	movs	r3, #48	; 0x30
 8018b24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018cd8 <_vfiprintf_r+0x220>
 8018b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b2c:	f04f 0901 	mov.w	r9, #1
 8018b30:	4623      	mov	r3, r4
 8018b32:	469a      	mov	sl, r3
 8018b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b38:	b10a      	cbz	r2, 8018b3e <_vfiprintf_r+0x86>
 8018b3a:	2a25      	cmp	r2, #37	; 0x25
 8018b3c:	d1f9      	bne.n	8018b32 <_vfiprintf_r+0x7a>
 8018b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8018b42:	d00b      	beq.n	8018b5c <_vfiprintf_r+0xa4>
 8018b44:	465b      	mov	r3, fp
 8018b46:	4622      	mov	r2, r4
 8018b48:	4629      	mov	r1, r5
 8018b4a:	4630      	mov	r0, r6
 8018b4c:	f7ff ffa1 	bl	8018a92 <__sfputs_r>
 8018b50:	3001      	adds	r0, #1
 8018b52:	f000 80a9 	beq.w	8018ca8 <_vfiprintf_r+0x1f0>
 8018b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b58:	445a      	add	r2, fp
 8018b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8018b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	f000 80a1 	beq.w	8018ca8 <_vfiprintf_r+0x1f0>
 8018b66:	2300      	movs	r3, #0
 8018b68:	f04f 32ff 	mov.w	r2, #4294967295
 8018b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b70:	f10a 0a01 	add.w	sl, sl, #1
 8018b74:	9304      	str	r3, [sp, #16]
 8018b76:	9307      	str	r3, [sp, #28]
 8018b78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8018b7e:	4654      	mov	r4, sl
 8018b80:	2205      	movs	r2, #5
 8018b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b86:	4854      	ldr	r0, [pc, #336]	; (8018cd8 <_vfiprintf_r+0x220>)
 8018b88:	f7e7 fb4a 	bl	8000220 <memchr>
 8018b8c:	9a04      	ldr	r2, [sp, #16]
 8018b8e:	b9d8      	cbnz	r0, 8018bc8 <_vfiprintf_r+0x110>
 8018b90:	06d1      	lsls	r1, r2, #27
 8018b92:	bf44      	itt	mi
 8018b94:	2320      	movmi	r3, #32
 8018b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b9a:	0713      	lsls	r3, r2, #28
 8018b9c:	bf44      	itt	mi
 8018b9e:	232b      	movmi	r3, #43	; 0x2b
 8018ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8018ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8018baa:	d015      	beq.n	8018bd8 <_vfiprintf_r+0x120>
 8018bac:	9a07      	ldr	r2, [sp, #28]
 8018bae:	4654      	mov	r4, sl
 8018bb0:	2000      	movs	r0, #0
 8018bb2:	f04f 0c0a 	mov.w	ip, #10
 8018bb6:	4621      	mov	r1, r4
 8018bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bbc:	3b30      	subs	r3, #48	; 0x30
 8018bbe:	2b09      	cmp	r3, #9
 8018bc0:	d94d      	bls.n	8018c5e <_vfiprintf_r+0x1a6>
 8018bc2:	b1b0      	cbz	r0, 8018bf2 <_vfiprintf_r+0x13a>
 8018bc4:	9207      	str	r2, [sp, #28]
 8018bc6:	e014      	b.n	8018bf2 <_vfiprintf_r+0x13a>
 8018bc8:	eba0 0308 	sub.w	r3, r0, r8
 8018bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8018bd0:	4313      	orrs	r3, r2
 8018bd2:	9304      	str	r3, [sp, #16]
 8018bd4:	46a2      	mov	sl, r4
 8018bd6:	e7d2      	b.n	8018b7e <_vfiprintf_r+0xc6>
 8018bd8:	9b03      	ldr	r3, [sp, #12]
 8018bda:	1d19      	adds	r1, r3, #4
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	9103      	str	r1, [sp, #12]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	bfbb      	ittet	lt
 8018be4:	425b      	neglt	r3, r3
 8018be6:	f042 0202 	orrlt.w	r2, r2, #2
 8018bea:	9307      	strge	r3, [sp, #28]
 8018bec:	9307      	strlt	r3, [sp, #28]
 8018bee:	bfb8      	it	lt
 8018bf0:	9204      	strlt	r2, [sp, #16]
 8018bf2:	7823      	ldrb	r3, [r4, #0]
 8018bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8018bf6:	d10c      	bne.n	8018c12 <_vfiprintf_r+0x15a>
 8018bf8:	7863      	ldrb	r3, [r4, #1]
 8018bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8018bfc:	d134      	bne.n	8018c68 <_vfiprintf_r+0x1b0>
 8018bfe:	9b03      	ldr	r3, [sp, #12]
 8018c00:	1d1a      	adds	r2, r3, #4
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	9203      	str	r2, [sp, #12]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	bfb8      	it	lt
 8018c0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8018c0e:	3402      	adds	r4, #2
 8018c10:	9305      	str	r3, [sp, #20]
 8018c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018ce8 <_vfiprintf_r+0x230>
 8018c16:	7821      	ldrb	r1, [r4, #0]
 8018c18:	2203      	movs	r2, #3
 8018c1a:	4650      	mov	r0, sl
 8018c1c:	f7e7 fb00 	bl	8000220 <memchr>
 8018c20:	b138      	cbz	r0, 8018c32 <_vfiprintf_r+0x17a>
 8018c22:	9b04      	ldr	r3, [sp, #16]
 8018c24:	eba0 000a 	sub.w	r0, r0, sl
 8018c28:	2240      	movs	r2, #64	; 0x40
 8018c2a:	4082      	lsls	r2, r0
 8018c2c:	4313      	orrs	r3, r2
 8018c2e:	3401      	adds	r4, #1
 8018c30:	9304      	str	r3, [sp, #16]
 8018c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c36:	4829      	ldr	r0, [pc, #164]	; (8018cdc <_vfiprintf_r+0x224>)
 8018c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c3c:	2206      	movs	r2, #6
 8018c3e:	f7e7 faef 	bl	8000220 <memchr>
 8018c42:	2800      	cmp	r0, #0
 8018c44:	d03f      	beq.n	8018cc6 <_vfiprintf_r+0x20e>
 8018c46:	4b26      	ldr	r3, [pc, #152]	; (8018ce0 <_vfiprintf_r+0x228>)
 8018c48:	bb1b      	cbnz	r3, 8018c92 <_vfiprintf_r+0x1da>
 8018c4a:	9b03      	ldr	r3, [sp, #12]
 8018c4c:	3307      	adds	r3, #7
 8018c4e:	f023 0307 	bic.w	r3, r3, #7
 8018c52:	3308      	adds	r3, #8
 8018c54:	9303      	str	r3, [sp, #12]
 8018c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c58:	443b      	add	r3, r7
 8018c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8018c5c:	e768      	b.n	8018b30 <_vfiprintf_r+0x78>
 8018c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c62:	460c      	mov	r4, r1
 8018c64:	2001      	movs	r0, #1
 8018c66:	e7a6      	b.n	8018bb6 <_vfiprintf_r+0xfe>
 8018c68:	2300      	movs	r3, #0
 8018c6a:	3401      	adds	r4, #1
 8018c6c:	9305      	str	r3, [sp, #20]
 8018c6e:	4619      	mov	r1, r3
 8018c70:	f04f 0c0a 	mov.w	ip, #10
 8018c74:	4620      	mov	r0, r4
 8018c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c7a:	3a30      	subs	r2, #48	; 0x30
 8018c7c:	2a09      	cmp	r2, #9
 8018c7e:	d903      	bls.n	8018c88 <_vfiprintf_r+0x1d0>
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d0c6      	beq.n	8018c12 <_vfiprintf_r+0x15a>
 8018c84:	9105      	str	r1, [sp, #20]
 8018c86:	e7c4      	b.n	8018c12 <_vfiprintf_r+0x15a>
 8018c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c8c:	4604      	mov	r4, r0
 8018c8e:	2301      	movs	r3, #1
 8018c90:	e7f0      	b.n	8018c74 <_vfiprintf_r+0x1bc>
 8018c92:	ab03      	add	r3, sp, #12
 8018c94:	9300      	str	r3, [sp, #0]
 8018c96:	462a      	mov	r2, r5
 8018c98:	4b12      	ldr	r3, [pc, #72]	; (8018ce4 <_vfiprintf_r+0x22c>)
 8018c9a:	a904      	add	r1, sp, #16
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	f7fd fd13 	bl	80166c8 <_printf_float>
 8018ca2:	4607      	mov	r7, r0
 8018ca4:	1c78      	adds	r0, r7, #1
 8018ca6:	d1d6      	bne.n	8018c56 <_vfiprintf_r+0x19e>
 8018ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018caa:	07d9      	lsls	r1, r3, #31
 8018cac:	d405      	bmi.n	8018cba <_vfiprintf_r+0x202>
 8018cae:	89ab      	ldrh	r3, [r5, #12]
 8018cb0:	059a      	lsls	r2, r3, #22
 8018cb2:	d402      	bmi.n	8018cba <_vfiprintf_r+0x202>
 8018cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cb6:	f7fe fa70 	bl	801719a <__retarget_lock_release_recursive>
 8018cba:	89ab      	ldrh	r3, [r5, #12]
 8018cbc:	065b      	lsls	r3, r3, #25
 8018cbe:	f53f af1d 	bmi.w	8018afc <_vfiprintf_r+0x44>
 8018cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cc4:	e71c      	b.n	8018b00 <_vfiprintf_r+0x48>
 8018cc6:	ab03      	add	r3, sp, #12
 8018cc8:	9300      	str	r3, [sp, #0]
 8018cca:	462a      	mov	r2, r5
 8018ccc:	4b05      	ldr	r3, [pc, #20]	; (8018ce4 <_vfiprintf_r+0x22c>)
 8018cce:	a904      	add	r1, sp, #16
 8018cd0:	4630      	mov	r0, r6
 8018cd2:	f7fd ff9d 	bl	8016c10 <_printf_i>
 8018cd6:	e7e4      	b.n	8018ca2 <_vfiprintf_r+0x1ea>
 8018cd8:	0801bfe4 	.word	0x0801bfe4
 8018cdc:	0801bfee 	.word	0x0801bfee
 8018ce0:	080166c9 	.word	0x080166c9
 8018ce4:	08018a93 	.word	0x08018a93
 8018ce8:	0801bfea 	.word	0x0801bfea

08018cec <__sflush_r>:
 8018cec:	898a      	ldrh	r2, [r1, #12]
 8018cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cf2:	4605      	mov	r5, r0
 8018cf4:	0710      	lsls	r0, r2, #28
 8018cf6:	460c      	mov	r4, r1
 8018cf8:	d458      	bmi.n	8018dac <__sflush_r+0xc0>
 8018cfa:	684b      	ldr	r3, [r1, #4]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	dc05      	bgt.n	8018d0c <__sflush_r+0x20>
 8018d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	dc02      	bgt.n	8018d0c <__sflush_r+0x20>
 8018d06:	2000      	movs	r0, #0
 8018d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d0e:	2e00      	cmp	r6, #0
 8018d10:	d0f9      	beq.n	8018d06 <__sflush_r+0x1a>
 8018d12:	2300      	movs	r3, #0
 8018d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018d18:	682f      	ldr	r7, [r5, #0]
 8018d1a:	6a21      	ldr	r1, [r4, #32]
 8018d1c:	602b      	str	r3, [r5, #0]
 8018d1e:	d032      	beq.n	8018d86 <__sflush_r+0x9a>
 8018d20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018d22:	89a3      	ldrh	r3, [r4, #12]
 8018d24:	075a      	lsls	r2, r3, #29
 8018d26:	d505      	bpl.n	8018d34 <__sflush_r+0x48>
 8018d28:	6863      	ldr	r3, [r4, #4]
 8018d2a:	1ac0      	subs	r0, r0, r3
 8018d2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d2e:	b10b      	cbz	r3, 8018d34 <__sflush_r+0x48>
 8018d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d32:	1ac0      	subs	r0, r0, r3
 8018d34:	2300      	movs	r3, #0
 8018d36:	4602      	mov	r2, r0
 8018d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d3a:	6a21      	ldr	r1, [r4, #32]
 8018d3c:	4628      	mov	r0, r5
 8018d3e:	47b0      	blx	r6
 8018d40:	1c43      	adds	r3, r0, #1
 8018d42:	89a3      	ldrh	r3, [r4, #12]
 8018d44:	d106      	bne.n	8018d54 <__sflush_r+0x68>
 8018d46:	6829      	ldr	r1, [r5, #0]
 8018d48:	291d      	cmp	r1, #29
 8018d4a:	d82b      	bhi.n	8018da4 <__sflush_r+0xb8>
 8018d4c:	4a29      	ldr	r2, [pc, #164]	; (8018df4 <__sflush_r+0x108>)
 8018d4e:	410a      	asrs	r2, r1
 8018d50:	07d6      	lsls	r6, r2, #31
 8018d52:	d427      	bmi.n	8018da4 <__sflush_r+0xb8>
 8018d54:	2200      	movs	r2, #0
 8018d56:	6062      	str	r2, [r4, #4]
 8018d58:	04d9      	lsls	r1, r3, #19
 8018d5a:	6922      	ldr	r2, [r4, #16]
 8018d5c:	6022      	str	r2, [r4, #0]
 8018d5e:	d504      	bpl.n	8018d6a <__sflush_r+0x7e>
 8018d60:	1c42      	adds	r2, r0, #1
 8018d62:	d101      	bne.n	8018d68 <__sflush_r+0x7c>
 8018d64:	682b      	ldr	r3, [r5, #0]
 8018d66:	b903      	cbnz	r3, 8018d6a <__sflush_r+0x7e>
 8018d68:	6560      	str	r0, [r4, #84]	; 0x54
 8018d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d6c:	602f      	str	r7, [r5, #0]
 8018d6e:	2900      	cmp	r1, #0
 8018d70:	d0c9      	beq.n	8018d06 <__sflush_r+0x1a>
 8018d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d76:	4299      	cmp	r1, r3
 8018d78:	d002      	beq.n	8018d80 <__sflush_r+0x94>
 8018d7a:	4628      	mov	r0, r5
 8018d7c:	f7ff f89e 	bl	8017ebc <_free_r>
 8018d80:	2000      	movs	r0, #0
 8018d82:	6360      	str	r0, [r4, #52]	; 0x34
 8018d84:	e7c0      	b.n	8018d08 <__sflush_r+0x1c>
 8018d86:	2301      	movs	r3, #1
 8018d88:	4628      	mov	r0, r5
 8018d8a:	47b0      	blx	r6
 8018d8c:	1c41      	adds	r1, r0, #1
 8018d8e:	d1c8      	bne.n	8018d22 <__sflush_r+0x36>
 8018d90:	682b      	ldr	r3, [r5, #0]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d0c5      	beq.n	8018d22 <__sflush_r+0x36>
 8018d96:	2b1d      	cmp	r3, #29
 8018d98:	d001      	beq.n	8018d9e <__sflush_r+0xb2>
 8018d9a:	2b16      	cmp	r3, #22
 8018d9c:	d101      	bne.n	8018da2 <__sflush_r+0xb6>
 8018d9e:	602f      	str	r7, [r5, #0]
 8018da0:	e7b1      	b.n	8018d06 <__sflush_r+0x1a>
 8018da2:	89a3      	ldrh	r3, [r4, #12]
 8018da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018da8:	81a3      	strh	r3, [r4, #12]
 8018daa:	e7ad      	b.n	8018d08 <__sflush_r+0x1c>
 8018dac:	690f      	ldr	r7, [r1, #16]
 8018dae:	2f00      	cmp	r7, #0
 8018db0:	d0a9      	beq.n	8018d06 <__sflush_r+0x1a>
 8018db2:	0793      	lsls	r3, r2, #30
 8018db4:	680e      	ldr	r6, [r1, #0]
 8018db6:	bf08      	it	eq
 8018db8:	694b      	ldreq	r3, [r1, #20]
 8018dba:	600f      	str	r7, [r1, #0]
 8018dbc:	bf18      	it	ne
 8018dbe:	2300      	movne	r3, #0
 8018dc0:	eba6 0807 	sub.w	r8, r6, r7
 8018dc4:	608b      	str	r3, [r1, #8]
 8018dc6:	f1b8 0f00 	cmp.w	r8, #0
 8018dca:	dd9c      	ble.n	8018d06 <__sflush_r+0x1a>
 8018dcc:	6a21      	ldr	r1, [r4, #32]
 8018dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018dd0:	4643      	mov	r3, r8
 8018dd2:	463a      	mov	r2, r7
 8018dd4:	4628      	mov	r0, r5
 8018dd6:	47b0      	blx	r6
 8018dd8:	2800      	cmp	r0, #0
 8018dda:	dc06      	bgt.n	8018dea <__sflush_r+0xfe>
 8018ddc:	89a3      	ldrh	r3, [r4, #12]
 8018dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018de2:	81a3      	strh	r3, [r4, #12]
 8018de4:	f04f 30ff 	mov.w	r0, #4294967295
 8018de8:	e78e      	b.n	8018d08 <__sflush_r+0x1c>
 8018dea:	4407      	add	r7, r0
 8018dec:	eba8 0800 	sub.w	r8, r8, r0
 8018df0:	e7e9      	b.n	8018dc6 <__sflush_r+0xda>
 8018df2:	bf00      	nop
 8018df4:	dfbffffe 	.word	0xdfbffffe

08018df8 <_fflush_r>:
 8018df8:	b538      	push	{r3, r4, r5, lr}
 8018dfa:	690b      	ldr	r3, [r1, #16]
 8018dfc:	4605      	mov	r5, r0
 8018dfe:	460c      	mov	r4, r1
 8018e00:	b913      	cbnz	r3, 8018e08 <_fflush_r+0x10>
 8018e02:	2500      	movs	r5, #0
 8018e04:	4628      	mov	r0, r5
 8018e06:	bd38      	pop	{r3, r4, r5, pc}
 8018e08:	b118      	cbz	r0, 8018e12 <_fflush_r+0x1a>
 8018e0a:	6a03      	ldr	r3, [r0, #32]
 8018e0c:	b90b      	cbnz	r3, 8018e12 <_fflush_r+0x1a>
 8018e0e:	f7fe f89b 	bl	8016f48 <__sinit>
 8018e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d0f3      	beq.n	8018e02 <_fflush_r+0xa>
 8018e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018e1c:	07d0      	lsls	r0, r2, #31
 8018e1e:	d404      	bmi.n	8018e2a <_fflush_r+0x32>
 8018e20:	0599      	lsls	r1, r3, #22
 8018e22:	d402      	bmi.n	8018e2a <_fflush_r+0x32>
 8018e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e26:	f7fe f9b7 	bl	8017198 <__retarget_lock_acquire_recursive>
 8018e2a:	4628      	mov	r0, r5
 8018e2c:	4621      	mov	r1, r4
 8018e2e:	f7ff ff5d 	bl	8018cec <__sflush_r>
 8018e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e34:	07da      	lsls	r2, r3, #31
 8018e36:	4605      	mov	r5, r0
 8018e38:	d4e4      	bmi.n	8018e04 <_fflush_r+0xc>
 8018e3a:	89a3      	ldrh	r3, [r4, #12]
 8018e3c:	059b      	lsls	r3, r3, #22
 8018e3e:	d4e1      	bmi.n	8018e04 <_fflush_r+0xc>
 8018e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e42:	f7fe f9aa 	bl	801719a <__retarget_lock_release_recursive>
 8018e46:	e7dd      	b.n	8018e04 <_fflush_r+0xc>

08018e48 <__swbuf_r>:
 8018e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e4a:	460e      	mov	r6, r1
 8018e4c:	4614      	mov	r4, r2
 8018e4e:	4605      	mov	r5, r0
 8018e50:	b118      	cbz	r0, 8018e5a <__swbuf_r+0x12>
 8018e52:	6a03      	ldr	r3, [r0, #32]
 8018e54:	b90b      	cbnz	r3, 8018e5a <__swbuf_r+0x12>
 8018e56:	f7fe f877 	bl	8016f48 <__sinit>
 8018e5a:	69a3      	ldr	r3, [r4, #24]
 8018e5c:	60a3      	str	r3, [r4, #8]
 8018e5e:	89a3      	ldrh	r3, [r4, #12]
 8018e60:	071a      	lsls	r2, r3, #28
 8018e62:	d525      	bpl.n	8018eb0 <__swbuf_r+0x68>
 8018e64:	6923      	ldr	r3, [r4, #16]
 8018e66:	b31b      	cbz	r3, 8018eb0 <__swbuf_r+0x68>
 8018e68:	6823      	ldr	r3, [r4, #0]
 8018e6a:	6922      	ldr	r2, [r4, #16]
 8018e6c:	1a98      	subs	r0, r3, r2
 8018e6e:	6963      	ldr	r3, [r4, #20]
 8018e70:	b2f6      	uxtb	r6, r6
 8018e72:	4283      	cmp	r3, r0
 8018e74:	4637      	mov	r7, r6
 8018e76:	dc04      	bgt.n	8018e82 <__swbuf_r+0x3a>
 8018e78:	4621      	mov	r1, r4
 8018e7a:	4628      	mov	r0, r5
 8018e7c:	f7ff ffbc 	bl	8018df8 <_fflush_r>
 8018e80:	b9e0      	cbnz	r0, 8018ebc <__swbuf_r+0x74>
 8018e82:	68a3      	ldr	r3, [r4, #8]
 8018e84:	3b01      	subs	r3, #1
 8018e86:	60a3      	str	r3, [r4, #8]
 8018e88:	6823      	ldr	r3, [r4, #0]
 8018e8a:	1c5a      	adds	r2, r3, #1
 8018e8c:	6022      	str	r2, [r4, #0]
 8018e8e:	701e      	strb	r6, [r3, #0]
 8018e90:	6962      	ldr	r2, [r4, #20]
 8018e92:	1c43      	adds	r3, r0, #1
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d004      	beq.n	8018ea2 <__swbuf_r+0x5a>
 8018e98:	89a3      	ldrh	r3, [r4, #12]
 8018e9a:	07db      	lsls	r3, r3, #31
 8018e9c:	d506      	bpl.n	8018eac <__swbuf_r+0x64>
 8018e9e:	2e0a      	cmp	r6, #10
 8018ea0:	d104      	bne.n	8018eac <__swbuf_r+0x64>
 8018ea2:	4621      	mov	r1, r4
 8018ea4:	4628      	mov	r0, r5
 8018ea6:	f7ff ffa7 	bl	8018df8 <_fflush_r>
 8018eaa:	b938      	cbnz	r0, 8018ebc <__swbuf_r+0x74>
 8018eac:	4638      	mov	r0, r7
 8018eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018eb0:	4621      	mov	r1, r4
 8018eb2:	4628      	mov	r0, r5
 8018eb4:	f000 f806 	bl	8018ec4 <__swsetup_r>
 8018eb8:	2800      	cmp	r0, #0
 8018eba:	d0d5      	beq.n	8018e68 <__swbuf_r+0x20>
 8018ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8018ec0:	e7f4      	b.n	8018eac <__swbuf_r+0x64>
	...

08018ec4 <__swsetup_r>:
 8018ec4:	b538      	push	{r3, r4, r5, lr}
 8018ec6:	4b2a      	ldr	r3, [pc, #168]	; (8018f70 <__swsetup_r+0xac>)
 8018ec8:	4605      	mov	r5, r0
 8018eca:	6818      	ldr	r0, [r3, #0]
 8018ecc:	460c      	mov	r4, r1
 8018ece:	b118      	cbz	r0, 8018ed8 <__swsetup_r+0x14>
 8018ed0:	6a03      	ldr	r3, [r0, #32]
 8018ed2:	b90b      	cbnz	r3, 8018ed8 <__swsetup_r+0x14>
 8018ed4:	f7fe f838 	bl	8016f48 <__sinit>
 8018ed8:	89a3      	ldrh	r3, [r4, #12]
 8018eda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018ede:	0718      	lsls	r0, r3, #28
 8018ee0:	d422      	bmi.n	8018f28 <__swsetup_r+0x64>
 8018ee2:	06d9      	lsls	r1, r3, #27
 8018ee4:	d407      	bmi.n	8018ef6 <__swsetup_r+0x32>
 8018ee6:	2309      	movs	r3, #9
 8018ee8:	602b      	str	r3, [r5, #0]
 8018eea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018eee:	81a3      	strh	r3, [r4, #12]
 8018ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ef4:	e034      	b.n	8018f60 <__swsetup_r+0x9c>
 8018ef6:	0758      	lsls	r0, r3, #29
 8018ef8:	d512      	bpl.n	8018f20 <__swsetup_r+0x5c>
 8018efa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018efc:	b141      	cbz	r1, 8018f10 <__swsetup_r+0x4c>
 8018efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018f02:	4299      	cmp	r1, r3
 8018f04:	d002      	beq.n	8018f0c <__swsetup_r+0x48>
 8018f06:	4628      	mov	r0, r5
 8018f08:	f7fe ffd8 	bl	8017ebc <_free_r>
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	6363      	str	r3, [r4, #52]	; 0x34
 8018f10:	89a3      	ldrh	r3, [r4, #12]
 8018f12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018f16:	81a3      	strh	r3, [r4, #12]
 8018f18:	2300      	movs	r3, #0
 8018f1a:	6063      	str	r3, [r4, #4]
 8018f1c:	6923      	ldr	r3, [r4, #16]
 8018f1e:	6023      	str	r3, [r4, #0]
 8018f20:	89a3      	ldrh	r3, [r4, #12]
 8018f22:	f043 0308 	orr.w	r3, r3, #8
 8018f26:	81a3      	strh	r3, [r4, #12]
 8018f28:	6923      	ldr	r3, [r4, #16]
 8018f2a:	b94b      	cbnz	r3, 8018f40 <__swsetup_r+0x7c>
 8018f2c:	89a3      	ldrh	r3, [r4, #12]
 8018f2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018f36:	d003      	beq.n	8018f40 <__swsetup_r+0x7c>
 8018f38:	4621      	mov	r1, r4
 8018f3a:	4628      	mov	r0, r5
 8018f3c:	f000 f912 	bl	8019164 <__smakebuf_r>
 8018f40:	89a0      	ldrh	r0, [r4, #12]
 8018f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018f46:	f010 0301 	ands.w	r3, r0, #1
 8018f4a:	d00a      	beq.n	8018f62 <__swsetup_r+0x9e>
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	60a3      	str	r3, [r4, #8]
 8018f50:	6963      	ldr	r3, [r4, #20]
 8018f52:	425b      	negs	r3, r3
 8018f54:	61a3      	str	r3, [r4, #24]
 8018f56:	6923      	ldr	r3, [r4, #16]
 8018f58:	b943      	cbnz	r3, 8018f6c <__swsetup_r+0xa8>
 8018f5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018f5e:	d1c4      	bne.n	8018eea <__swsetup_r+0x26>
 8018f60:	bd38      	pop	{r3, r4, r5, pc}
 8018f62:	0781      	lsls	r1, r0, #30
 8018f64:	bf58      	it	pl
 8018f66:	6963      	ldrpl	r3, [r4, #20]
 8018f68:	60a3      	str	r3, [r4, #8]
 8018f6a:	e7f4      	b.n	8018f56 <__swsetup_r+0x92>
 8018f6c:	2000      	movs	r0, #0
 8018f6e:	e7f7      	b.n	8018f60 <__swsetup_r+0x9c>
 8018f70:	200001f8 	.word	0x200001f8

08018f74 <memmove>:
 8018f74:	4288      	cmp	r0, r1
 8018f76:	b510      	push	{r4, lr}
 8018f78:	eb01 0402 	add.w	r4, r1, r2
 8018f7c:	d902      	bls.n	8018f84 <memmove+0x10>
 8018f7e:	4284      	cmp	r4, r0
 8018f80:	4623      	mov	r3, r4
 8018f82:	d807      	bhi.n	8018f94 <memmove+0x20>
 8018f84:	1e43      	subs	r3, r0, #1
 8018f86:	42a1      	cmp	r1, r4
 8018f88:	d008      	beq.n	8018f9c <memmove+0x28>
 8018f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f92:	e7f8      	b.n	8018f86 <memmove+0x12>
 8018f94:	4402      	add	r2, r0
 8018f96:	4601      	mov	r1, r0
 8018f98:	428a      	cmp	r2, r1
 8018f9a:	d100      	bne.n	8018f9e <memmove+0x2a>
 8018f9c:	bd10      	pop	{r4, pc}
 8018f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018fa6:	e7f7      	b.n	8018f98 <memmove+0x24>

08018fa8 <_raise_r>:
 8018fa8:	291f      	cmp	r1, #31
 8018faa:	b538      	push	{r3, r4, r5, lr}
 8018fac:	4604      	mov	r4, r0
 8018fae:	460d      	mov	r5, r1
 8018fb0:	d904      	bls.n	8018fbc <_raise_r+0x14>
 8018fb2:	2316      	movs	r3, #22
 8018fb4:	6003      	str	r3, [r0, #0]
 8018fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8018fba:	bd38      	pop	{r3, r4, r5, pc}
 8018fbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018fbe:	b112      	cbz	r2, 8018fc6 <_raise_r+0x1e>
 8018fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018fc4:	b94b      	cbnz	r3, 8018fda <_raise_r+0x32>
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	f000 f830 	bl	801902c <_getpid_r>
 8018fcc:	462a      	mov	r2, r5
 8018fce:	4601      	mov	r1, r0
 8018fd0:	4620      	mov	r0, r4
 8018fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018fd6:	f000 b817 	b.w	8019008 <_kill_r>
 8018fda:	2b01      	cmp	r3, #1
 8018fdc:	d00a      	beq.n	8018ff4 <_raise_r+0x4c>
 8018fde:	1c59      	adds	r1, r3, #1
 8018fe0:	d103      	bne.n	8018fea <_raise_r+0x42>
 8018fe2:	2316      	movs	r3, #22
 8018fe4:	6003      	str	r3, [r0, #0]
 8018fe6:	2001      	movs	r0, #1
 8018fe8:	e7e7      	b.n	8018fba <_raise_r+0x12>
 8018fea:	2400      	movs	r4, #0
 8018fec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018ff0:	4628      	mov	r0, r5
 8018ff2:	4798      	blx	r3
 8018ff4:	2000      	movs	r0, #0
 8018ff6:	e7e0      	b.n	8018fba <_raise_r+0x12>

08018ff8 <raise>:
 8018ff8:	4b02      	ldr	r3, [pc, #8]	; (8019004 <raise+0xc>)
 8018ffa:	4601      	mov	r1, r0
 8018ffc:	6818      	ldr	r0, [r3, #0]
 8018ffe:	f7ff bfd3 	b.w	8018fa8 <_raise_r>
 8019002:	bf00      	nop
 8019004:	200001f8 	.word	0x200001f8

08019008 <_kill_r>:
 8019008:	b538      	push	{r3, r4, r5, lr}
 801900a:	4d07      	ldr	r5, [pc, #28]	; (8019028 <_kill_r+0x20>)
 801900c:	2300      	movs	r3, #0
 801900e:	4604      	mov	r4, r0
 8019010:	4608      	mov	r0, r1
 8019012:	4611      	mov	r1, r2
 8019014:	602b      	str	r3, [r5, #0]
 8019016:	f7eb f981 	bl	800431c <_kill>
 801901a:	1c43      	adds	r3, r0, #1
 801901c:	d102      	bne.n	8019024 <_kill_r+0x1c>
 801901e:	682b      	ldr	r3, [r5, #0]
 8019020:	b103      	cbz	r3, 8019024 <_kill_r+0x1c>
 8019022:	6023      	str	r3, [r4, #0]
 8019024:	bd38      	pop	{r3, r4, r5, pc}
 8019026:	bf00      	nop
 8019028:	20016a90 	.word	0x20016a90

0801902c <_getpid_r>:
 801902c:	f7eb b974 	b.w	8004318 <_getpid>

08019030 <_sbrk_r>:
 8019030:	b538      	push	{r3, r4, r5, lr}
 8019032:	4d06      	ldr	r5, [pc, #24]	; (801904c <_sbrk_r+0x1c>)
 8019034:	2300      	movs	r3, #0
 8019036:	4604      	mov	r4, r0
 8019038:	4608      	mov	r0, r1
 801903a:	602b      	str	r3, [r5, #0]
 801903c:	f7eb f996 	bl	800436c <_sbrk>
 8019040:	1c43      	adds	r3, r0, #1
 8019042:	d102      	bne.n	801904a <_sbrk_r+0x1a>
 8019044:	682b      	ldr	r3, [r5, #0]
 8019046:	b103      	cbz	r3, 801904a <_sbrk_r+0x1a>
 8019048:	6023      	str	r3, [r4, #0]
 801904a:	bd38      	pop	{r3, r4, r5, pc}
 801904c:	20016a90 	.word	0x20016a90

08019050 <_calloc_r>:
 8019050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019052:	fba1 2402 	umull	r2, r4, r1, r2
 8019056:	b94c      	cbnz	r4, 801906c <_calloc_r+0x1c>
 8019058:	4611      	mov	r1, r2
 801905a:	9201      	str	r2, [sp, #4]
 801905c:	f7fe ffa2 	bl	8017fa4 <_malloc_r>
 8019060:	9a01      	ldr	r2, [sp, #4]
 8019062:	4605      	mov	r5, r0
 8019064:	b930      	cbnz	r0, 8019074 <_calloc_r+0x24>
 8019066:	4628      	mov	r0, r5
 8019068:	b003      	add	sp, #12
 801906a:	bd30      	pop	{r4, r5, pc}
 801906c:	220c      	movs	r2, #12
 801906e:	6002      	str	r2, [r0, #0]
 8019070:	2500      	movs	r5, #0
 8019072:	e7f8      	b.n	8019066 <_calloc_r+0x16>
 8019074:	4621      	mov	r1, r4
 8019076:	f7fe f812 	bl	801709e <memset>
 801907a:	e7f4      	b.n	8019066 <_calloc_r+0x16>

0801907c <__ascii_mbtowc>:
 801907c:	b082      	sub	sp, #8
 801907e:	b901      	cbnz	r1, 8019082 <__ascii_mbtowc+0x6>
 8019080:	a901      	add	r1, sp, #4
 8019082:	b142      	cbz	r2, 8019096 <__ascii_mbtowc+0x1a>
 8019084:	b14b      	cbz	r3, 801909a <__ascii_mbtowc+0x1e>
 8019086:	7813      	ldrb	r3, [r2, #0]
 8019088:	600b      	str	r3, [r1, #0]
 801908a:	7812      	ldrb	r2, [r2, #0]
 801908c:	1e10      	subs	r0, r2, #0
 801908e:	bf18      	it	ne
 8019090:	2001      	movne	r0, #1
 8019092:	b002      	add	sp, #8
 8019094:	4770      	bx	lr
 8019096:	4610      	mov	r0, r2
 8019098:	e7fb      	b.n	8019092 <__ascii_mbtowc+0x16>
 801909a:	f06f 0001 	mvn.w	r0, #1
 801909e:	e7f8      	b.n	8019092 <__ascii_mbtowc+0x16>

080190a0 <_realloc_r>:
 80190a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190a4:	4680      	mov	r8, r0
 80190a6:	4614      	mov	r4, r2
 80190a8:	460e      	mov	r6, r1
 80190aa:	b921      	cbnz	r1, 80190b6 <_realloc_r+0x16>
 80190ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190b0:	4611      	mov	r1, r2
 80190b2:	f7fe bf77 	b.w	8017fa4 <_malloc_r>
 80190b6:	b92a      	cbnz	r2, 80190c4 <_realloc_r+0x24>
 80190b8:	f7fe ff00 	bl	8017ebc <_free_r>
 80190bc:	4625      	mov	r5, r4
 80190be:	4628      	mov	r0, r5
 80190c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190c4:	f000 f8ac 	bl	8019220 <_malloc_usable_size_r>
 80190c8:	4284      	cmp	r4, r0
 80190ca:	4607      	mov	r7, r0
 80190cc:	d802      	bhi.n	80190d4 <_realloc_r+0x34>
 80190ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80190d2:	d812      	bhi.n	80190fa <_realloc_r+0x5a>
 80190d4:	4621      	mov	r1, r4
 80190d6:	4640      	mov	r0, r8
 80190d8:	f7fe ff64 	bl	8017fa4 <_malloc_r>
 80190dc:	4605      	mov	r5, r0
 80190de:	2800      	cmp	r0, #0
 80190e0:	d0ed      	beq.n	80190be <_realloc_r+0x1e>
 80190e2:	42bc      	cmp	r4, r7
 80190e4:	4622      	mov	r2, r4
 80190e6:	4631      	mov	r1, r6
 80190e8:	bf28      	it	cs
 80190ea:	463a      	movcs	r2, r7
 80190ec:	f7fe f856 	bl	801719c <memcpy>
 80190f0:	4631      	mov	r1, r6
 80190f2:	4640      	mov	r0, r8
 80190f4:	f7fe fee2 	bl	8017ebc <_free_r>
 80190f8:	e7e1      	b.n	80190be <_realloc_r+0x1e>
 80190fa:	4635      	mov	r5, r6
 80190fc:	e7df      	b.n	80190be <_realloc_r+0x1e>

080190fe <__ascii_wctomb>:
 80190fe:	b149      	cbz	r1, 8019114 <__ascii_wctomb+0x16>
 8019100:	2aff      	cmp	r2, #255	; 0xff
 8019102:	bf85      	ittet	hi
 8019104:	238a      	movhi	r3, #138	; 0x8a
 8019106:	6003      	strhi	r3, [r0, #0]
 8019108:	700a      	strbls	r2, [r1, #0]
 801910a:	f04f 30ff 	movhi.w	r0, #4294967295
 801910e:	bf98      	it	ls
 8019110:	2001      	movls	r0, #1
 8019112:	4770      	bx	lr
 8019114:	4608      	mov	r0, r1
 8019116:	4770      	bx	lr

08019118 <__swhatbuf_r>:
 8019118:	b570      	push	{r4, r5, r6, lr}
 801911a:	460c      	mov	r4, r1
 801911c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019120:	2900      	cmp	r1, #0
 8019122:	b096      	sub	sp, #88	; 0x58
 8019124:	4615      	mov	r5, r2
 8019126:	461e      	mov	r6, r3
 8019128:	da0d      	bge.n	8019146 <__swhatbuf_r+0x2e>
 801912a:	89a3      	ldrh	r3, [r4, #12]
 801912c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019130:	f04f 0100 	mov.w	r1, #0
 8019134:	bf0c      	ite	eq
 8019136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801913a:	2340      	movne	r3, #64	; 0x40
 801913c:	2000      	movs	r0, #0
 801913e:	6031      	str	r1, [r6, #0]
 8019140:	602b      	str	r3, [r5, #0]
 8019142:	b016      	add	sp, #88	; 0x58
 8019144:	bd70      	pop	{r4, r5, r6, pc}
 8019146:	466a      	mov	r2, sp
 8019148:	f000 f848 	bl	80191dc <_fstat_r>
 801914c:	2800      	cmp	r0, #0
 801914e:	dbec      	blt.n	801912a <__swhatbuf_r+0x12>
 8019150:	9901      	ldr	r1, [sp, #4]
 8019152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801915a:	4259      	negs	r1, r3
 801915c:	4159      	adcs	r1, r3
 801915e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019162:	e7eb      	b.n	801913c <__swhatbuf_r+0x24>

08019164 <__smakebuf_r>:
 8019164:	898b      	ldrh	r3, [r1, #12]
 8019166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019168:	079d      	lsls	r5, r3, #30
 801916a:	4606      	mov	r6, r0
 801916c:	460c      	mov	r4, r1
 801916e:	d507      	bpl.n	8019180 <__smakebuf_r+0x1c>
 8019170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019174:	6023      	str	r3, [r4, #0]
 8019176:	6123      	str	r3, [r4, #16]
 8019178:	2301      	movs	r3, #1
 801917a:	6163      	str	r3, [r4, #20]
 801917c:	b002      	add	sp, #8
 801917e:	bd70      	pop	{r4, r5, r6, pc}
 8019180:	ab01      	add	r3, sp, #4
 8019182:	466a      	mov	r2, sp
 8019184:	f7ff ffc8 	bl	8019118 <__swhatbuf_r>
 8019188:	9900      	ldr	r1, [sp, #0]
 801918a:	4605      	mov	r5, r0
 801918c:	4630      	mov	r0, r6
 801918e:	f7fe ff09 	bl	8017fa4 <_malloc_r>
 8019192:	b948      	cbnz	r0, 80191a8 <__smakebuf_r+0x44>
 8019194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019198:	059a      	lsls	r2, r3, #22
 801919a:	d4ef      	bmi.n	801917c <__smakebuf_r+0x18>
 801919c:	f023 0303 	bic.w	r3, r3, #3
 80191a0:	f043 0302 	orr.w	r3, r3, #2
 80191a4:	81a3      	strh	r3, [r4, #12]
 80191a6:	e7e3      	b.n	8019170 <__smakebuf_r+0xc>
 80191a8:	89a3      	ldrh	r3, [r4, #12]
 80191aa:	6020      	str	r0, [r4, #0]
 80191ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191b0:	81a3      	strh	r3, [r4, #12]
 80191b2:	9b00      	ldr	r3, [sp, #0]
 80191b4:	6163      	str	r3, [r4, #20]
 80191b6:	9b01      	ldr	r3, [sp, #4]
 80191b8:	6120      	str	r0, [r4, #16]
 80191ba:	b15b      	cbz	r3, 80191d4 <__smakebuf_r+0x70>
 80191bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191c0:	4630      	mov	r0, r6
 80191c2:	f000 f81d 	bl	8019200 <_isatty_r>
 80191c6:	b128      	cbz	r0, 80191d4 <__smakebuf_r+0x70>
 80191c8:	89a3      	ldrh	r3, [r4, #12]
 80191ca:	f023 0303 	bic.w	r3, r3, #3
 80191ce:	f043 0301 	orr.w	r3, r3, #1
 80191d2:	81a3      	strh	r3, [r4, #12]
 80191d4:	89a3      	ldrh	r3, [r4, #12]
 80191d6:	431d      	orrs	r5, r3
 80191d8:	81a5      	strh	r5, [r4, #12]
 80191da:	e7cf      	b.n	801917c <__smakebuf_r+0x18>

080191dc <_fstat_r>:
 80191dc:	b538      	push	{r3, r4, r5, lr}
 80191de:	4d07      	ldr	r5, [pc, #28]	; (80191fc <_fstat_r+0x20>)
 80191e0:	2300      	movs	r3, #0
 80191e2:	4604      	mov	r4, r0
 80191e4:	4608      	mov	r0, r1
 80191e6:	4611      	mov	r1, r2
 80191e8:	602b      	str	r3, [r5, #0]
 80191ea:	f7eb f8b5 	bl	8004358 <_fstat>
 80191ee:	1c43      	adds	r3, r0, #1
 80191f0:	d102      	bne.n	80191f8 <_fstat_r+0x1c>
 80191f2:	682b      	ldr	r3, [r5, #0]
 80191f4:	b103      	cbz	r3, 80191f8 <_fstat_r+0x1c>
 80191f6:	6023      	str	r3, [r4, #0]
 80191f8:	bd38      	pop	{r3, r4, r5, pc}
 80191fa:	bf00      	nop
 80191fc:	20016a90 	.word	0x20016a90

08019200 <_isatty_r>:
 8019200:	b538      	push	{r3, r4, r5, lr}
 8019202:	4d06      	ldr	r5, [pc, #24]	; (801921c <_isatty_r+0x1c>)
 8019204:	2300      	movs	r3, #0
 8019206:	4604      	mov	r4, r0
 8019208:	4608      	mov	r0, r1
 801920a:	602b      	str	r3, [r5, #0]
 801920c:	f7eb f8a9 	bl	8004362 <_isatty>
 8019210:	1c43      	adds	r3, r0, #1
 8019212:	d102      	bne.n	801921a <_isatty_r+0x1a>
 8019214:	682b      	ldr	r3, [r5, #0]
 8019216:	b103      	cbz	r3, 801921a <_isatty_r+0x1a>
 8019218:	6023      	str	r3, [r4, #0]
 801921a:	bd38      	pop	{r3, r4, r5, pc}
 801921c:	20016a90 	.word	0x20016a90

08019220 <_malloc_usable_size_r>:
 8019220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019224:	1f18      	subs	r0, r3, #4
 8019226:	2b00      	cmp	r3, #0
 8019228:	bfbc      	itt	lt
 801922a:	580b      	ldrlt	r3, [r1, r0]
 801922c:	18c0      	addlt	r0, r0, r3
 801922e:	4770      	bx	lr

08019230 <sinf>:
 8019230:	ee10 3a10 	vmov	r3, s0
 8019234:	b507      	push	{r0, r1, r2, lr}
 8019236:	4a1f      	ldr	r2, [pc, #124]	; (80192b4 <sinf+0x84>)
 8019238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801923c:	4293      	cmp	r3, r2
 801923e:	dc07      	bgt.n	8019250 <sinf+0x20>
 8019240:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80192b8 <sinf+0x88>
 8019244:	2000      	movs	r0, #0
 8019246:	b003      	add	sp, #12
 8019248:	f85d eb04 	ldr.w	lr, [sp], #4
 801924c:	f000 b894 	b.w	8019378 <__kernel_sinf>
 8019250:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019254:	db04      	blt.n	8019260 <sinf+0x30>
 8019256:	ee30 0a40 	vsub.f32	s0, s0, s0
 801925a:	b003      	add	sp, #12
 801925c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019260:	4668      	mov	r0, sp
 8019262:	f000 f8d1 	bl	8019408 <__ieee754_rem_pio2f>
 8019266:	f000 0003 	and.w	r0, r0, #3
 801926a:	2801      	cmp	r0, #1
 801926c:	d00a      	beq.n	8019284 <sinf+0x54>
 801926e:	2802      	cmp	r0, #2
 8019270:	d00f      	beq.n	8019292 <sinf+0x62>
 8019272:	b9c0      	cbnz	r0, 80192a6 <sinf+0x76>
 8019274:	eddd 0a01 	vldr	s1, [sp, #4]
 8019278:	ed9d 0a00 	vldr	s0, [sp]
 801927c:	2001      	movs	r0, #1
 801927e:	f000 f87b 	bl	8019378 <__kernel_sinf>
 8019282:	e7ea      	b.n	801925a <sinf+0x2a>
 8019284:	eddd 0a01 	vldr	s1, [sp, #4]
 8019288:	ed9d 0a00 	vldr	s0, [sp]
 801928c:	f000 f816 	bl	80192bc <__kernel_cosf>
 8019290:	e7e3      	b.n	801925a <sinf+0x2a>
 8019292:	eddd 0a01 	vldr	s1, [sp, #4]
 8019296:	ed9d 0a00 	vldr	s0, [sp]
 801929a:	2001      	movs	r0, #1
 801929c:	f000 f86c 	bl	8019378 <__kernel_sinf>
 80192a0:	eeb1 0a40 	vneg.f32	s0, s0
 80192a4:	e7d9      	b.n	801925a <sinf+0x2a>
 80192a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80192aa:	ed9d 0a00 	vldr	s0, [sp]
 80192ae:	f000 f805 	bl	80192bc <__kernel_cosf>
 80192b2:	e7f5      	b.n	80192a0 <sinf+0x70>
 80192b4:	3f490fd8 	.word	0x3f490fd8
 80192b8:	00000000 	.word	0x00000000

080192bc <__kernel_cosf>:
 80192bc:	ee10 3a10 	vmov	r3, s0
 80192c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80192c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80192c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80192cc:	da05      	bge.n	80192da <__kernel_cosf+0x1e>
 80192ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80192d2:	ee17 2a90 	vmov	r2, s15
 80192d6:	2a00      	cmp	r2, #0
 80192d8:	d03b      	beq.n	8019352 <__kernel_cosf+0x96>
 80192da:	ee20 7a00 	vmul.f32	s14, s0, s0
 80192de:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019358 <__kernel_cosf+0x9c>
 80192e2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801935c <__kernel_cosf+0xa0>
 80192e6:	4a1e      	ldr	r2, [pc, #120]	; (8019360 <__kernel_cosf+0xa4>)
 80192e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80192ec:	4293      	cmp	r3, r2
 80192ee:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8019364 <__kernel_cosf+0xa8>
 80192f2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80192f6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8019368 <__kernel_cosf+0xac>
 80192fa:	eea7 6a87 	vfma.f32	s12, s15, s14
 80192fe:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801936c <__kernel_cosf+0xb0>
 8019302:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019306:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8019370 <__kernel_cosf+0xb4>
 801930a:	eea7 6a87 	vfma.f32	s12, s15, s14
 801930e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8019312:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019316:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801931a:	eee7 0a06 	vfma.f32	s1, s14, s12
 801931e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019322:	dc04      	bgt.n	801932e <__kernel_cosf+0x72>
 8019324:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019328:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801932c:	4770      	bx	lr
 801932e:	4a11      	ldr	r2, [pc, #68]	; (8019374 <__kernel_cosf+0xb8>)
 8019330:	4293      	cmp	r3, r2
 8019332:	bfda      	itte	le
 8019334:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8019338:	ee07 3a10 	vmovle	s14, r3
 801933c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8019340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019344:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8019348:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801934c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019350:	4770      	bx	lr
 8019352:	eeb0 0a66 	vmov.f32	s0, s13
 8019356:	4770      	bx	lr
 8019358:	ad47d74e 	.word	0xad47d74e
 801935c:	310f74f6 	.word	0x310f74f6
 8019360:	3e999999 	.word	0x3e999999
 8019364:	b493f27c 	.word	0xb493f27c
 8019368:	37d00d01 	.word	0x37d00d01
 801936c:	bab60b61 	.word	0xbab60b61
 8019370:	3d2aaaab 	.word	0x3d2aaaab
 8019374:	3f480000 	.word	0x3f480000

08019378 <__kernel_sinf>:
 8019378:	ee10 3a10 	vmov	r3, s0
 801937c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019380:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019384:	da04      	bge.n	8019390 <__kernel_sinf+0x18>
 8019386:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801938a:	ee17 3a90 	vmov	r3, s15
 801938e:	b35b      	cbz	r3, 80193e8 <__kernel_sinf+0x70>
 8019390:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019394:	eddf 7a15 	vldr	s15, [pc, #84]	; 80193ec <__kernel_sinf+0x74>
 8019398:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80193f0 <__kernel_sinf+0x78>
 801939c:	eea7 6a27 	vfma.f32	s12, s14, s15
 80193a0:	eddf 7a14 	vldr	s15, [pc, #80]	; 80193f4 <__kernel_sinf+0x7c>
 80193a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80193a8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80193f8 <__kernel_sinf+0x80>
 80193ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80193b0:	eddf 7a12 	vldr	s15, [pc, #72]	; 80193fc <__kernel_sinf+0x84>
 80193b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80193b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80193bc:	b930      	cbnz	r0, 80193cc <__kernel_sinf+0x54>
 80193be:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019400 <__kernel_sinf+0x88>
 80193c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80193c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80193ca:	4770      	bx	lr
 80193cc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80193d0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80193d4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80193d8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80193dc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019404 <__kernel_sinf+0x8c>
 80193e0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80193e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80193e8:	4770      	bx	lr
 80193ea:	bf00      	nop
 80193ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80193f0:	b2d72f34 	.word	0xb2d72f34
 80193f4:	3638ef1b 	.word	0x3638ef1b
 80193f8:	b9500d01 	.word	0xb9500d01
 80193fc:	3c088889 	.word	0x3c088889
 8019400:	be2aaaab 	.word	0xbe2aaaab
 8019404:	3e2aaaab 	.word	0x3e2aaaab

08019408 <__ieee754_rem_pio2f>:
 8019408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801940a:	ee10 6a10 	vmov	r6, s0
 801940e:	4b86      	ldr	r3, [pc, #536]	; (8019628 <__ieee754_rem_pio2f+0x220>)
 8019410:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019414:	429d      	cmp	r5, r3
 8019416:	b087      	sub	sp, #28
 8019418:	4604      	mov	r4, r0
 801941a:	dc05      	bgt.n	8019428 <__ieee754_rem_pio2f+0x20>
 801941c:	2300      	movs	r3, #0
 801941e:	ed80 0a00 	vstr	s0, [r0]
 8019422:	6043      	str	r3, [r0, #4]
 8019424:	2000      	movs	r0, #0
 8019426:	e020      	b.n	801946a <__ieee754_rem_pio2f+0x62>
 8019428:	4b80      	ldr	r3, [pc, #512]	; (801962c <__ieee754_rem_pio2f+0x224>)
 801942a:	429d      	cmp	r5, r3
 801942c:	dc38      	bgt.n	80194a0 <__ieee754_rem_pio2f+0x98>
 801942e:	2e00      	cmp	r6, #0
 8019430:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8019630 <__ieee754_rem_pio2f+0x228>
 8019434:	4b7f      	ldr	r3, [pc, #508]	; (8019634 <__ieee754_rem_pio2f+0x22c>)
 8019436:	f025 050f 	bic.w	r5, r5, #15
 801943a:	dd18      	ble.n	801946e <__ieee754_rem_pio2f+0x66>
 801943c:	429d      	cmp	r5, r3
 801943e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019442:	bf09      	itett	eq
 8019444:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8019638 <__ieee754_rem_pio2f+0x230>
 8019448:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801963c <__ieee754_rem_pio2f+0x234>
 801944c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019450:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8019640 <__ieee754_rem_pio2f+0x238>
 8019454:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019458:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801945c:	edc0 6a00 	vstr	s13, [r0]
 8019460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019464:	edc0 7a01 	vstr	s15, [r0, #4]
 8019468:	2001      	movs	r0, #1
 801946a:	b007      	add	sp, #28
 801946c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801946e:	429d      	cmp	r5, r3
 8019470:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019474:	bf09      	itett	eq
 8019476:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8019638 <__ieee754_rem_pio2f+0x230>
 801947a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801963c <__ieee754_rem_pio2f+0x234>
 801947e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019482:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8019640 <__ieee754_rem_pio2f+0x238>
 8019486:	ee77 6a87 	vadd.f32	s13, s15, s14
 801948a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801948e:	edc0 6a00 	vstr	s13, [r0]
 8019492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019496:	edc0 7a01 	vstr	s15, [r0, #4]
 801949a:	f04f 30ff 	mov.w	r0, #4294967295
 801949e:	e7e4      	b.n	801946a <__ieee754_rem_pio2f+0x62>
 80194a0:	4b68      	ldr	r3, [pc, #416]	; (8019644 <__ieee754_rem_pio2f+0x23c>)
 80194a2:	429d      	cmp	r5, r3
 80194a4:	dc71      	bgt.n	801958a <__ieee754_rem_pio2f+0x182>
 80194a6:	f000 f8db 	bl	8019660 <fabsf>
 80194aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019648 <__ieee754_rem_pio2f+0x240>
 80194ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80194b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80194b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80194be:	ee17 0a90 	vmov	r0, s15
 80194c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019630 <__ieee754_rem_pio2f+0x228>
 80194c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80194ca:	281f      	cmp	r0, #31
 80194cc:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801963c <__ieee754_rem_pio2f+0x234>
 80194d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80194d4:	eeb1 6a47 	vneg.f32	s12, s14
 80194d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80194dc:	ee16 2a90 	vmov	r2, s13
 80194e0:	dc1c      	bgt.n	801951c <__ieee754_rem_pio2f+0x114>
 80194e2:	495a      	ldr	r1, [pc, #360]	; (801964c <__ieee754_rem_pio2f+0x244>)
 80194e4:	1e47      	subs	r7, r0, #1
 80194e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80194ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80194ee:	428b      	cmp	r3, r1
 80194f0:	d014      	beq.n	801951c <__ieee754_rem_pio2f+0x114>
 80194f2:	6022      	str	r2, [r4, #0]
 80194f4:	ed94 7a00 	vldr	s14, [r4]
 80194f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80194fc:	2e00      	cmp	r6, #0
 80194fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019502:	ed84 0a01 	vstr	s0, [r4, #4]
 8019506:	dab0      	bge.n	801946a <__ieee754_rem_pio2f+0x62>
 8019508:	eeb1 7a47 	vneg.f32	s14, s14
 801950c:	eeb1 0a40 	vneg.f32	s0, s0
 8019510:	ed84 7a00 	vstr	s14, [r4]
 8019514:	ed84 0a01 	vstr	s0, [r4, #4]
 8019518:	4240      	negs	r0, r0
 801951a:	e7a6      	b.n	801946a <__ieee754_rem_pio2f+0x62>
 801951c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019520:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8019524:	2908      	cmp	r1, #8
 8019526:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801952a:	dde2      	ble.n	80194f2 <__ieee754_rem_pio2f+0xea>
 801952c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019638 <__ieee754_rem_pio2f+0x230>
 8019530:	eef0 6a40 	vmov.f32	s13, s0
 8019534:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019538:	ee70 7a66 	vsub.f32	s15, s0, s13
 801953c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019540:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019640 <__ieee754_rem_pio2f+0x238>
 8019544:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019548:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801954c:	ee15 2a90 	vmov	r2, s11
 8019550:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019554:	1a5b      	subs	r3, r3, r1
 8019556:	2b19      	cmp	r3, #25
 8019558:	dc04      	bgt.n	8019564 <__ieee754_rem_pio2f+0x15c>
 801955a:	edc4 5a00 	vstr	s11, [r4]
 801955e:	eeb0 0a66 	vmov.f32	s0, s13
 8019562:	e7c7      	b.n	80194f4 <__ieee754_rem_pio2f+0xec>
 8019564:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019650 <__ieee754_rem_pio2f+0x248>
 8019568:	eeb0 0a66 	vmov.f32	s0, s13
 801956c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019570:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019574:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019654 <__ieee754_rem_pio2f+0x24c>
 8019578:	eee6 7a25 	vfma.f32	s15, s12, s11
 801957c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019580:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019584:	ed84 7a00 	vstr	s14, [r4]
 8019588:	e7b4      	b.n	80194f4 <__ieee754_rem_pio2f+0xec>
 801958a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801958e:	db06      	blt.n	801959e <__ieee754_rem_pio2f+0x196>
 8019590:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019594:	edc0 7a01 	vstr	s15, [r0, #4]
 8019598:	edc0 7a00 	vstr	s15, [r0]
 801959c:	e742      	b.n	8019424 <__ieee754_rem_pio2f+0x1c>
 801959e:	15ea      	asrs	r2, r5, #23
 80195a0:	3a86      	subs	r2, #134	; 0x86
 80195a2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80195a6:	ee07 3a90 	vmov	s15, r3
 80195aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80195ae:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8019658 <__ieee754_rem_pio2f+0x250>
 80195b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80195ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 80195be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80195c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80195ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 80195d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80195da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195de:	edcd 7a05 	vstr	s15, [sp, #20]
 80195e2:	d11e      	bne.n	8019622 <__ieee754_rem_pio2f+0x21a>
 80195e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80195e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ec:	bf14      	ite	ne
 80195ee:	2302      	movne	r3, #2
 80195f0:	2301      	moveq	r3, #1
 80195f2:	491a      	ldr	r1, [pc, #104]	; (801965c <__ieee754_rem_pio2f+0x254>)
 80195f4:	9101      	str	r1, [sp, #4]
 80195f6:	2102      	movs	r1, #2
 80195f8:	9100      	str	r1, [sp, #0]
 80195fa:	a803      	add	r0, sp, #12
 80195fc:	4621      	mov	r1, r4
 80195fe:	f000 f837 	bl	8019670 <__kernel_rem_pio2f>
 8019602:	2e00      	cmp	r6, #0
 8019604:	f6bf af31 	bge.w	801946a <__ieee754_rem_pio2f+0x62>
 8019608:	edd4 7a00 	vldr	s15, [r4]
 801960c:	eef1 7a67 	vneg.f32	s15, s15
 8019610:	edc4 7a00 	vstr	s15, [r4]
 8019614:	edd4 7a01 	vldr	s15, [r4, #4]
 8019618:	eef1 7a67 	vneg.f32	s15, s15
 801961c:	edc4 7a01 	vstr	s15, [r4, #4]
 8019620:	e77a      	b.n	8019518 <__ieee754_rem_pio2f+0x110>
 8019622:	2303      	movs	r3, #3
 8019624:	e7e5      	b.n	80195f2 <__ieee754_rem_pio2f+0x1ea>
 8019626:	bf00      	nop
 8019628:	3f490fd8 	.word	0x3f490fd8
 801962c:	4016cbe3 	.word	0x4016cbe3
 8019630:	3fc90f80 	.word	0x3fc90f80
 8019634:	3fc90fd0 	.word	0x3fc90fd0
 8019638:	37354400 	.word	0x37354400
 801963c:	37354443 	.word	0x37354443
 8019640:	2e85a308 	.word	0x2e85a308
 8019644:	43490f80 	.word	0x43490f80
 8019648:	3f22f984 	.word	0x3f22f984
 801964c:	0801c100 	.word	0x0801c100
 8019650:	2e85a300 	.word	0x2e85a300
 8019654:	248d3132 	.word	0x248d3132
 8019658:	43800000 	.word	0x43800000
 801965c:	0801c180 	.word	0x0801c180

08019660 <fabsf>:
 8019660:	ee10 3a10 	vmov	r3, s0
 8019664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019668:	ee00 3a10 	vmov	s0, r3
 801966c:	4770      	bx	lr
	...

08019670 <__kernel_rem_pio2f>:
 8019670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019674:	ed2d 8b04 	vpush	{d8-d9}
 8019678:	b0d9      	sub	sp, #356	; 0x164
 801967a:	4688      	mov	r8, r1
 801967c:	9002      	str	r0, [sp, #8]
 801967e:	49b8      	ldr	r1, [pc, #736]	; (8019960 <__kernel_rem_pio2f+0x2f0>)
 8019680:	9866      	ldr	r0, [sp, #408]	; 0x198
 8019682:	9301      	str	r3, [sp, #4]
 8019684:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8019688:	9901      	ldr	r1, [sp, #4]
 801968a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801968c:	f101 3bff 	add.w	fp, r1, #4294967295
 8019690:	1d11      	adds	r1, r2, #4
 8019692:	db25      	blt.n	80196e0 <__kernel_rem_pio2f+0x70>
 8019694:	1ed0      	subs	r0, r2, #3
 8019696:	bf48      	it	mi
 8019698:	1d10      	addmi	r0, r2, #4
 801969a:	10c0      	asrs	r0, r0, #3
 801969c:	1c45      	adds	r5, r0, #1
 801969e:	00e9      	lsls	r1, r5, #3
 80196a0:	eba0 070b 	sub.w	r7, r0, fp
 80196a4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8019970 <__kernel_rem_pio2f+0x300>
 80196a8:	9103      	str	r1, [sp, #12]
 80196aa:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80196ae:	eb0a 0c0b 	add.w	ip, sl, fp
 80196b2:	ae1c      	add	r6, sp, #112	; 0x70
 80196b4:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80196b8:	2400      	movs	r4, #0
 80196ba:	4564      	cmp	r4, ip
 80196bc:	dd12      	ble.n	80196e4 <__kernel_rem_pio2f+0x74>
 80196be:	9901      	ldr	r1, [sp, #4]
 80196c0:	ac1c      	add	r4, sp, #112	; 0x70
 80196c2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80196c6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80196ca:	f04f 0c00 	mov.w	ip, #0
 80196ce:	45d4      	cmp	ip, sl
 80196d0:	dc27      	bgt.n	8019722 <__kernel_rem_pio2f+0xb2>
 80196d2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80196d6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8019970 <__kernel_rem_pio2f+0x300>
 80196da:	4627      	mov	r7, r4
 80196dc:	2600      	movs	r6, #0
 80196de:	e016      	b.n	801970e <__kernel_rem_pio2f+0x9e>
 80196e0:	2000      	movs	r0, #0
 80196e2:	e7db      	b.n	801969c <__kernel_rem_pio2f+0x2c>
 80196e4:	42e7      	cmn	r7, r4
 80196e6:	bf5d      	ittte	pl
 80196e8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80196ec:	ee07 1a90 	vmovpl	s15, r1
 80196f0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80196f4:	eef0 7a47 	vmovmi.f32	s15, s14
 80196f8:	ece6 7a01 	vstmia	r6!, {s15}
 80196fc:	3401      	adds	r4, #1
 80196fe:	e7dc      	b.n	80196ba <__kernel_rem_pio2f+0x4a>
 8019700:	ecfe 6a01 	vldmia	lr!, {s13}
 8019704:	ed97 7a00 	vldr	s14, [r7]
 8019708:	eee6 7a87 	vfma.f32	s15, s13, s14
 801970c:	3601      	adds	r6, #1
 801970e:	455e      	cmp	r6, fp
 8019710:	f1a7 0704 	sub.w	r7, r7, #4
 8019714:	ddf4      	ble.n	8019700 <__kernel_rem_pio2f+0x90>
 8019716:	ece9 7a01 	vstmia	r9!, {s15}
 801971a:	f10c 0c01 	add.w	ip, ip, #1
 801971e:	3404      	adds	r4, #4
 8019720:	e7d5      	b.n	80196ce <__kernel_rem_pio2f+0x5e>
 8019722:	a908      	add	r1, sp, #32
 8019724:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019728:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801972c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801996c <__kernel_rem_pio2f+0x2fc>
 8019730:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8019968 <__kernel_rem_pio2f+0x2f8>
 8019734:	9105      	str	r1, [sp, #20]
 8019736:	9304      	str	r3, [sp, #16]
 8019738:	4656      	mov	r6, sl
 801973a:	00b3      	lsls	r3, r6, #2
 801973c:	9306      	str	r3, [sp, #24]
 801973e:	ab58      	add	r3, sp, #352	; 0x160
 8019740:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8019744:	ac08      	add	r4, sp, #32
 8019746:	ab44      	add	r3, sp, #272	; 0x110
 8019748:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801974c:	46a4      	mov	ip, r4
 801974e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8019752:	4637      	mov	r7, r6
 8019754:	2f00      	cmp	r7, #0
 8019756:	f1a0 0004 	sub.w	r0, r0, #4
 801975a:	dc4a      	bgt.n	80197f2 <__kernel_rem_pio2f+0x182>
 801975c:	4628      	mov	r0, r5
 801975e:	9207      	str	r2, [sp, #28]
 8019760:	f000 f9f8 	bl	8019b54 <scalbnf>
 8019764:	eeb0 8a40 	vmov.f32	s16, s0
 8019768:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801976c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019770:	f000 fa56 	bl	8019c20 <floorf>
 8019774:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8019778:	eea0 8a67 	vfms.f32	s16, s0, s15
 801977c:	2d00      	cmp	r5, #0
 801977e:	9a07      	ldr	r2, [sp, #28]
 8019780:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019784:	ee17 9a90 	vmov	r9, s15
 8019788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801978c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019790:	dd41      	ble.n	8019816 <__kernel_rem_pio2f+0x1a6>
 8019792:	f106 3cff 	add.w	ip, r6, #4294967295
 8019796:	ab08      	add	r3, sp, #32
 8019798:	f1c5 0e08 	rsb	lr, r5, #8
 801979c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80197a0:	fa47 f00e 	asr.w	r0, r7, lr
 80197a4:	4481      	add	r9, r0
 80197a6:	fa00 f00e 	lsl.w	r0, r0, lr
 80197aa:	1a3f      	subs	r7, r7, r0
 80197ac:	f1c5 0007 	rsb	r0, r5, #7
 80197b0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80197b4:	4107      	asrs	r7, r0
 80197b6:	2f00      	cmp	r7, #0
 80197b8:	dd3c      	ble.n	8019834 <__kernel_rem_pio2f+0x1c4>
 80197ba:	f04f 0e00 	mov.w	lr, #0
 80197be:	f109 0901 	add.w	r9, r9, #1
 80197c2:	4671      	mov	r1, lr
 80197c4:	4576      	cmp	r6, lr
 80197c6:	dc67      	bgt.n	8019898 <__kernel_rem_pio2f+0x228>
 80197c8:	2d00      	cmp	r5, #0
 80197ca:	dd03      	ble.n	80197d4 <__kernel_rem_pio2f+0x164>
 80197cc:	2d01      	cmp	r5, #1
 80197ce:	d074      	beq.n	80198ba <__kernel_rem_pio2f+0x24a>
 80197d0:	2d02      	cmp	r5, #2
 80197d2:	d07b      	beq.n	80198cc <__kernel_rem_pio2f+0x25c>
 80197d4:	2f02      	cmp	r7, #2
 80197d6:	d12d      	bne.n	8019834 <__kernel_rem_pio2f+0x1c4>
 80197d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80197dc:	ee30 8a48 	vsub.f32	s16, s0, s16
 80197e0:	b341      	cbz	r1, 8019834 <__kernel_rem_pio2f+0x1c4>
 80197e2:	4628      	mov	r0, r5
 80197e4:	9207      	str	r2, [sp, #28]
 80197e6:	f000 f9b5 	bl	8019b54 <scalbnf>
 80197ea:	9a07      	ldr	r2, [sp, #28]
 80197ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 80197f0:	e020      	b.n	8019834 <__kernel_rem_pio2f+0x1c4>
 80197f2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80197f6:	3f01      	subs	r7, #1
 80197f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019800:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019808:	ecac 0a01 	vstmia	ip!, {s0}
 801980c:	ed90 0a00 	vldr	s0, [r0]
 8019810:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019814:	e79e      	b.n	8019754 <__kernel_rem_pio2f+0xe4>
 8019816:	d105      	bne.n	8019824 <__kernel_rem_pio2f+0x1b4>
 8019818:	1e70      	subs	r0, r6, #1
 801981a:	ab08      	add	r3, sp, #32
 801981c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8019820:	11ff      	asrs	r7, r7, #7
 8019822:	e7c8      	b.n	80197b6 <__kernel_rem_pio2f+0x146>
 8019824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019828:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019830:	da30      	bge.n	8019894 <__kernel_rem_pio2f+0x224>
 8019832:	2700      	movs	r7, #0
 8019834:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801983c:	f040 809a 	bne.w	8019974 <__kernel_rem_pio2f+0x304>
 8019840:	1e74      	subs	r4, r6, #1
 8019842:	46a4      	mov	ip, r4
 8019844:	2100      	movs	r1, #0
 8019846:	45d4      	cmp	ip, sl
 8019848:	da47      	bge.n	80198da <__kernel_rem_pio2f+0x26a>
 801984a:	2900      	cmp	r1, #0
 801984c:	d063      	beq.n	8019916 <__kernel_rem_pio2f+0x2a6>
 801984e:	ab08      	add	r3, sp, #32
 8019850:	3d08      	subs	r5, #8
 8019852:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d07f      	beq.n	801995a <__kernel_rem_pio2f+0x2ea>
 801985a:	4628      	mov	r0, r5
 801985c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019860:	f000 f978 	bl	8019b54 <scalbnf>
 8019864:	1c63      	adds	r3, r4, #1
 8019866:	aa44      	add	r2, sp, #272	; 0x110
 8019868:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801996c <__kernel_rem_pio2f+0x2fc>
 801986c:	0099      	lsls	r1, r3, #2
 801986e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019872:	4623      	mov	r3, r4
 8019874:	2b00      	cmp	r3, #0
 8019876:	f280 80ad 	bge.w	80199d4 <__kernel_rem_pio2f+0x364>
 801987a:	4623      	mov	r3, r4
 801987c:	2b00      	cmp	r3, #0
 801987e:	f2c0 80cb 	blt.w	8019a18 <__kernel_rem_pio2f+0x3a8>
 8019882:	aa44      	add	r2, sp, #272	; 0x110
 8019884:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019888:	4e36      	ldr	r6, [pc, #216]	; (8019964 <__kernel_rem_pio2f+0x2f4>)
 801988a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019970 <__kernel_rem_pio2f+0x300>
 801988e:	2000      	movs	r0, #0
 8019890:	1ae2      	subs	r2, r4, r3
 8019892:	e0b6      	b.n	8019a02 <__kernel_rem_pio2f+0x392>
 8019894:	2702      	movs	r7, #2
 8019896:	e790      	b.n	80197ba <__kernel_rem_pio2f+0x14a>
 8019898:	6820      	ldr	r0, [r4, #0]
 801989a:	b949      	cbnz	r1, 80198b0 <__kernel_rem_pio2f+0x240>
 801989c:	b118      	cbz	r0, 80198a6 <__kernel_rem_pio2f+0x236>
 801989e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80198a2:	6020      	str	r0, [r4, #0]
 80198a4:	2001      	movs	r0, #1
 80198a6:	f10e 0e01 	add.w	lr, lr, #1
 80198aa:	3404      	adds	r4, #4
 80198ac:	4601      	mov	r1, r0
 80198ae:	e789      	b.n	80197c4 <__kernel_rem_pio2f+0x154>
 80198b0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80198b4:	6020      	str	r0, [r4, #0]
 80198b6:	4608      	mov	r0, r1
 80198b8:	e7f5      	b.n	80198a6 <__kernel_rem_pio2f+0x236>
 80198ba:	1e74      	subs	r4, r6, #1
 80198bc:	ab08      	add	r3, sp, #32
 80198be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80198c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80198c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80198ca:	e783      	b.n	80197d4 <__kernel_rem_pio2f+0x164>
 80198cc:	1e74      	subs	r4, r6, #1
 80198ce:	ab08      	add	r3, sp, #32
 80198d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80198d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80198d8:	e7f5      	b.n	80198c6 <__kernel_rem_pio2f+0x256>
 80198da:	ab08      	add	r3, sp, #32
 80198dc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80198e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80198e4:	4301      	orrs	r1, r0
 80198e6:	e7ae      	b.n	8019846 <__kernel_rem_pio2f+0x1d6>
 80198e8:	3001      	adds	r0, #1
 80198ea:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80198ee:	2f00      	cmp	r7, #0
 80198f0:	d0fa      	beq.n	80198e8 <__kernel_rem_pio2f+0x278>
 80198f2:	9b06      	ldr	r3, [sp, #24]
 80198f4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80198f8:	eb0d 0403 	add.w	r4, sp, r3
 80198fc:	9b01      	ldr	r3, [sp, #4]
 80198fe:	18f7      	adds	r7, r6, r3
 8019900:	ab1c      	add	r3, sp, #112	; 0x70
 8019902:	f106 0c01 	add.w	ip, r6, #1
 8019906:	3c4c      	subs	r4, #76	; 0x4c
 8019908:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801990c:	4430      	add	r0, r6
 801990e:	4560      	cmp	r0, ip
 8019910:	da04      	bge.n	801991c <__kernel_rem_pio2f+0x2ac>
 8019912:	4606      	mov	r6, r0
 8019914:	e711      	b.n	801973a <__kernel_rem_pio2f+0xca>
 8019916:	9c05      	ldr	r4, [sp, #20]
 8019918:	2001      	movs	r0, #1
 801991a:	e7e6      	b.n	80198ea <__kernel_rem_pio2f+0x27a>
 801991c:	9b04      	ldr	r3, [sp, #16]
 801991e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019922:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019926:	9306      	str	r3, [sp, #24]
 8019928:	ee07 3a90 	vmov	s15, r3
 801992c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019930:	2600      	movs	r6, #0
 8019932:	ece7 7a01 	vstmia	r7!, {s15}
 8019936:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019970 <__kernel_rem_pio2f+0x300>
 801993a:	46b9      	mov	r9, r7
 801993c:	455e      	cmp	r6, fp
 801993e:	dd04      	ble.n	801994a <__kernel_rem_pio2f+0x2da>
 8019940:	ece4 7a01 	vstmia	r4!, {s15}
 8019944:	f10c 0c01 	add.w	ip, ip, #1
 8019948:	e7e1      	b.n	801990e <__kernel_rem_pio2f+0x29e>
 801994a:	ecfe 6a01 	vldmia	lr!, {s13}
 801994e:	ed39 7a01 	vldmdb	r9!, {s14}
 8019952:	3601      	adds	r6, #1
 8019954:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019958:	e7f0      	b.n	801993c <__kernel_rem_pio2f+0x2cc>
 801995a:	3c01      	subs	r4, #1
 801995c:	e777      	b.n	801984e <__kernel_rem_pio2f+0x1de>
 801995e:	bf00      	nop
 8019960:	0801c4c4 	.word	0x0801c4c4
 8019964:	0801c498 	.word	0x0801c498
 8019968:	43800000 	.word	0x43800000
 801996c:	3b800000 	.word	0x3b800000
 8019970:	00000000 	.word	0x00000000
 8019974:	9b03      	ldr	r3, [sp, #12]
 8019976:	eeb0 0a48 	vmov.f32	s0, s16
 801997a:	1a98      	subs	r0, r3, r2
 801997c:	f000 f8ea 	bl	8019b54 <scalbnf>
 8019980:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8019968 <__kernel_rem_pio2f+0x2f8>
 8019984:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801998c:	db19      	blt.n	80199c2 <__kernel_rem_pio2f+0x352>
 801998e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801996c <__kernel_rem_pio2f+0x2fc>
 8019992:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019996:	aa08      	add	r2, sp, #32
 8019998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801999c:	1c74      	adds	r4, r6, #1
 801999e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199a2:	3508      	adds	r5, #8
 80199a4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80199a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199b0:	ee10 3a10 	vmov	r3, s0
 80199b4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80199b8:	ee17 3a90 	vmov	r3, s15
 80199bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80199c0:	e74b      	b.n	801985a <__kernel_rem_pio2f+0x1ea>
 80199c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199c6:	aa08      	add	r2, sp, #32
 80199c8:	ee10 3a10 	vmov	r3, s0
 80199cc:	4634      	mov	r4, r6
 80199ce:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80199d2:	e742      	b.n	801985a <__kernel_rem_pio2f+0x1ea>
 80199d4:	a808      	add	r0, sp, #32
 80199d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80199da:	9001      	str	r0, [sp, #4]
 80199dc:	ee07 0a90 	vmov	s15, r0
 80199e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199e4:	3b01      	subs	r3, #1
 80199e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80199ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 80199ee:	ed62 7a01 	vstmdb	r2!, {s15}
 80199f2:	e73f      	b.n	8019874 <__kernel_rem_pio2f+0x204>
 80199f4:	ecf6 6a01 	vldmia	r6!, {s13}
 80199f8:	ecb5 7a01 	vldmia	r5!, {s14}
 80199fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019a00:	3001      	adds	r0, #1
 8019a02:	4550      	cmp	r0, sl
 8019a04:	dc01      	bgt.n	8019a0a <__kernel_rem_pio2f+0x39a>
 8019a06:	4290      	cmp	r0, r2
 8019a08:	ddf4      	ble.n	80199f4 <__kernel_rem_pio2f+0x384>
 8019a0a:	a858      	add	r0, sp, #352	; 0x160
 8019a0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019a10:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8019a14:	3b01      	subs	r3, #1
 8019a16:	e731      	b.n	801987c <__kernel_rem_pio2f+0x20c>
 8019a18:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019a1a:	2b02      	cmp	r3, #2
 8019a1c:	dc09      	bgt.n	8019a32 <__kernel_rem_pio2f+0x3c2>
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	dc2b      	bgt.n	8019a7a <__kernel_rem_pio2f+0x40a>
 8019a22:	d044      	beq.n	8019aae <__kernel_rem_pio2f+0x43e>
 8019a24:	f009 0007 	and.w	r0, r9, #7
 8019a28:	b059      	add	sp, #356	; 0x164
 8019a2a:	ecbd 8b04 	vpop	{d8-d9}
 8019a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a32:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019a34:	2b03      	cmp	r3, #3
 8019a36:	d1f5      	bne.n	8019a24 <__kernel_rem_pio2f+0x3b4>
 8019a38:	aa30      	add	r2, sp, #192	; 0xc0
 8019a3a:	1f0b      	subs	r3, r1, #4
 8019a3c:	4413      	add	r3, r2
 8019a3e:	461a      	mov	r2, r3
 8019a40:	4620      	mov	r0, r4
 8019a42:	2800      	cmp	r0, #0
 8019a44:	f1a2 0204 	sub.w	r2, r2, #4
 8019a48:	dc52      	bgt.n	8019af0 <__kernel_rem_pio2f+0x480>
 8019a4a:	4622      	mov	r2, r4
 8019a4c:	2a01      	cmp	r2, #1
 8019a4e:	f1a3 0304 	sub.w	r3, r3, #4
 8019a52:	dc5d      	bgt.n	8019b10 <__kernel_rem_pio2f+0x4a0>
 8019a54:	ab30      	add	r3, sp, #192	; 0xc0
 8019a56:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8019970 <__kernel_rem_pio2f+0x300>
 8019a5a:	440b      	add	r3, r1
 8019a5c:	2c01      	cmp	r4, #1
 8019a5e:	dc67      	bgt.n	8019b30 <__kernel_rem_pio2f+0x4c0>
 8019a60:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019a64:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8019a68:	2f00      	cmp	r7, #0
 8019a6a:	d167      	bne.n	8019b3c <__kernel_rem_pio2f+0x4cc>
 8019a6c:	edc8 6a00 	vstr	s13, [r8]
 8019a70:	ed88 7a01 	vstr	s14, [r8, #4]
 8019a74:	edc8 7a02 	vstr	s15, [r8, #8]
 8019a78:	e7d4      	b.n	8019a24 <__kernel_rem_pio2f+0x3b4>
 8019a7a:	ab30      	add	r3, sp, #192	; 0xc0
 8019a7c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8019970 <__kernel_rem_pio2f+0x300>
 8019a80:	440b      	add	r3, r1
 8019a82:	4622      	mov	r2, r4
 8019a84:	2a00      	cmp	r2, #0
 8019a86:	da24      	bge.n	8019ad2 <__kernel_rem_pio2f+0x462>
 8019a88:	b34f      	cbz	r7, 8019ade <__kernel_rem_pio2f+0x46e>
 8019a8a:	eef1 7a47 	vneg.f32	s15, s14
 8019a8e:	edc8 7a00 	vstr	s15, [r8]
 8019a92:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8019a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a9a:	aa31      	add	r2, sp, #196	; 0xc4
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	429c      	cmp	r4, r3
 8019aa0:	da20      	bge.n	8019ae4 <__kernel_rem_pio2f+0x474>
 8019aa2:	b10f      	cbz	r7, 8019aa8 <__kernel_rem_pio2f+0x438>
 8019aa4:	eef1 7a67 	vneg.f32	s15, s15
 8019aa8:	edc8 7a01 	vstr	s15, [r8, #4]
 8019aac:	e7ba      	b.n	8019a24 <__kernel_rem_pio2f+0x3b4>
 8019aae:	ab30      	add	r3, sp, #192	; 0xc0
 8019ab0:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8019970 <__kernel_rem_pio2f+0x300>
 8019ab4:	440b      	add	r3, r1
 8019ab6:	2c00      	cmp	r4, #0
 8019ab8:	da05      	bge.n	8019ac6 <__kernel_rem_pio2f+0x456>
 8019aba:	b10f      	cbz	r7, 8019ac0 <__kernel_rem_pio2f+0x450>
 8019abc:	eef1 7a67 	vneg.f32	s15, s15
 8019ac0:	edc8 7a00 	vstr	s15, [r8]
 8019ac4:	e7ae      	b.n	8019a24 <__kernel_rem_pio2f+0x3b4>
 8019ac6:	ed33 7a01 	vldmdb	r3!, {s14}
 8019aca:	3c01      	subs	r4, #1
 8019acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ad0:	e7f1      	b.n	8019ab6 <__kernel_rem_pio2f+0x446>
 8019ad2:	ed73 7a01 	vldmdb	r3!, {s15}
 8019ad6:	3a01      	subs	r2, #1
 8019ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019adc:	e7d2      	b.n	8019a84 <__kernel_rem_pio2f+0x414>
 8019ade:	eef0 7a47 	vmov.f32	s15, s14
 8019ae2:	e7d4      	b.n	8019a8e <__kernel_rem_pio2f+0x41e>
 8019ae4:	ecb2 7a01 	vldmia	r2!, {s14}
 8019ae8:	3301      	adds	r3, #1
 8019aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019aee:	e7d6      	b.n	8019a9e <__kernel_rem_pio2f+0x42e>
 8019af0:	edd2 7a00 	vldr	s15, [r2]
 8019af4:	edd2 6a01 	vldr	s13, [r2, #4]
 8019af8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019afc:	3801      	subs	r0, #1
 8019afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b02:	ed82 7a00 	vstr	s14, [r2]
 8019b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b0a:	edc2 7a01 	vstr	s15, [r2, #4]
 8019b0e:	e798      	b.n	8019a42 <__kernel_rem_pio2f+0x3d2>
 8019b10:	edd3 7a00 	vldr	s15, [r3]
 8019b14:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019b1c:	3a01      	subs	r2, #1
 8019b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b22:	ed83 7a00 	vstr	s14, [r3]
 8019b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b2a:	edc3 7a01 	vstr	s15, [r3, #4]
 8019b2e:	e78d      	b.n	8019a4c <__kernel_rem_pio2f+0x3dc>
 8019b30:	ed33 7a01 	vldmdb	r3!, {s14}
 8019b34:	3c01      	subs	r4, #1
 8019b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b3a:	e78f      	b.n	8019a5c <__kernel_rem_pio2f+0x3ec>
 8019b3c:	eef1 6a66 	vneg.f32	s13, s13
 8019b40:	eeb1 7a47 	vneg.f32	s14, s14
 8019b44:	edc8 6a00 	vstr	s13, [r8]
 8019b48:	ed88 7a01 	vstr	s14, [r8, #4]
 8019b4c:	eef1 7a67 	vneg.f32	s15, s15
 8019b50:	e790      	b.n	8019a74 <__kernel_rem_pio2f+0x404>
 8019b52:	bf00      	nop

08019b54 <scalbnf>:
 8019b54:	ee10 3a10 	vmov	r3, s0
 8019b58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019b5c:	d02b      	beq.n	8019bb6 <scalbnf+0x62>
 8019b5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019b62:	d302      	bcc.n	8019b6a <scalbnf+0x16>
 8019b64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019b68:	4770      	bx	lr
 8019b6a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019b6e:	d123      	bne.n	8019bb8 <scalbnf+0x64>
 8019b70:	4b24      	ldr	r3, [pc, #144]	; (8019c04 <scalbnf+0xb0>)
 8019b72:	eddf 7a25 	vldr	s15, [pc, #148]	; 8019c08 <scalbnf+0xb4>
 8019b76:	4298      	cmp	r0, r3
 8019b78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019b7c:	db17      	blt.n	8019bae <scalbnf+0x5a>
 8019b7e:	ee10 3a10 	vmov	r3, s0
 8019b82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019b86:	3a19      	subs	r2, #25
 8019b88:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019b8c:	4288      	cmp	r0, r1
 8019b8e:	dd15      	ble.n	8019bbc <scalbnf+0x68>
 8019b90:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019c0c <scalbnf+0xb8>
 8019b94:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8019c10 <scalbnf+0xbc>
 8019b98:	ee10 3a10 	vmov	r3, s0
 8019b9c:	eeb0 7a67 	vmov.f32	s14, s15
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	bfb8      	it	lt
 8019ba4:	eef0 7a66 	vmovlt.f32	s15, s13
 8019ba8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019bac:	4770      	bx	lr
 8019bae:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019c14 <scalbnf+0xc0>
 8019bb2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019bb6:	4770      	bx	lr
 8019bb8:	0dd2      	lsrs	r2, r2, #23
 8019bba:	e7e5      	b.n	8019b88 <scalbnf+0x34>
 8019bbc:	4410      	add	r0, r2
 8019bbe:	28fe      	cmp	r0, #254	; 0xfe
 8019bc0:	dce6      	bgt.n	8019b90 <scalbnf+0x3c>
 8019bc2:	2800      	cmp	r0, #0
 8019bc4:	dd06      	ble.n	8019bd4 <scalbnf+0x80>
 8019bc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019bca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019bce:	ee00 3a10 	vmov	s0, r3
 8019bd2:	4770      	bx	lr
 8019bd4:	f110 0f16 	cmn.w	r0, #22
 8019bd8:	da09      	bge.n	8019bee <scalbnf+0x9a>
 8019bda:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019c14 <scalbnf+0xc0>
 8019bde:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8019c18 <scalbnf+0xc4>
 8019be2:	ee10 3a10 	vmov	r3, s0
 8019be6:	eeb0 7a67 	vmov.f32	s14, s15
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	e7d9      	b.n	8019ba2 <scalbnf+0x4e>
 8019bee:	3019      	adds	r0, #25
 8019bf0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019bf4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019bf8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019c1c <scalbnf+0xc8>
 8019bfc:	ee07 3a90 	vmov	s15, r3
 8019c00:	e7d7      	b.n	8019bb2 <scalbnf+0x5e>
 8019c02:	bf00      	nop
 8019c04:	ffff3cb0 	.word	0xffff3cb0
 8019c08:	4c000000 	.word	0x4c000000
 8019c0c:	7149f2ca 	.word	0x7149f2ca
 8019c10:	f149f2ca 	.word	0xf149f2ca
 8019c14:	0da24260 	.word	0x0da24260
 8019c18:	8da24260 	.word	0x8da24260
 8019c1c:	33000000 	.word	0x33000000

08019c20 <floorf>:
 8019c20:	ee10 3a10 	vmov	r3, s0
 8019c24:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019c28:	3a7f      	subs	r2, #127	; 0x7f
 8019c2a:	2a16      	cmp	r2, #22
 8019c2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019c30:	dc2a      	bgt.n	8019c88 <floorf+0x68>
 8019c32:	2a00      	cmp	r2, #0
 8019c34:	da11      	bge.n	8019c5a <floorf+0x3a>
 8019c36:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019c98 <floorf+0x78>
 8019c3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019c3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c46:	dd05      	ble.n	8019c54 <floorf+0x34>
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	da23      	bge.n	8019c94 <floorf+0x74>
 8019c4c:	4a13      	ldr	r2, [pc, #76]	; (8019c9c <floorf+0x7c>)
 8019c4e:	2900      	cmp	r1, #0
 8019c50:	bf18      	it	ne
 8019c52:	4613      	movne	r3, r2
 8019c54:	ee00 3a10 	vmov	s0, r3
 8019c58:	4770      	bx	lr
 8019c5a:	4911      	ldr	r1, [pc, #68]	; (8019ca0 <floorf+0x80>)
 8019c5c:	4111      	asrs	r1, r2
 8019c5e:	420b      	tst	r3, r1
 8019c60:	d0fa      	beq.n	8019c58 <floorf+0x38>
 8019c62:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019c98 <floorf+0x78>
 8019c66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019c6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c72:	ddef      	ble.n	8019c54 <floorf+0x34>
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	bfbe      	ittt	lt
 8019c78:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8019c7c:	fa40 f202 	asrlt.w	r2, r0, r2
 8019c80:	189b      	addlt	r3, r3, r2
 8019c82:	ea23 0301 	bic.w	r3, r3, r1
 8019c86:	e7e5      	b.n	8019c54 <floorf+0x34>
 8019c88:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019c8c:	d3e4      	bcc.n	8019c58 <floorf+0x38>
 8019c8e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c92:	4770      	bx	lr
 8019c94:	2300      	movs	r3, #0
 8019c96:	e7dd      	b.n	8019c54 <floorf+0x34>
 8019c98:	7149f2ca 	.word	0x7149f2ca
 8019c9c:	bf800000 	.word	0xbf800000
 8019ca0:	007fffff 	.word	0x007fffff

08019ca4 <_init>:
 8019ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ca6:	bf00      	nop
 8019ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019caa:	bc08      	pop	{r3}
 8019cac:	469e      	mov	lr, r3
 8019cae:	4770      	bx	lr

08019cb0 <_fini>:
 8019cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cb2:	bf00      	nop
 8019cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cb6:	bc08      	pop	{r3}
 8019cb8:	469e      	mov	lr, r3
 8019cba:	4770      	bx	lr
