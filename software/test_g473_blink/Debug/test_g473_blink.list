
test_g473_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002806c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003210  08028250  08028250  00038250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b460  0802b460  00040368  2**0
                  CONTENTS
  4 .ARM          00000000  0802b460  0802b460  00040368  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802b460  0802b460  00040368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b460  0802b460  0003b460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b464  0802b464  0003b464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0802b468  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001673c  20000368  0802b7d0  00040368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016aa4  0802b7d0  00046aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006ca4c  00000000  00000000  000403db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a22b  00000000  00000000  000ace27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003038  00000000  00000000  000b7058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002630  00000000  00000000  000ba090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d6e  00000000  00000000  000bc6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f8d5  00000000  00000000  000e542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100454  00000000  00000000  00124d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000dda0  00000000  00000000  00225158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00232ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000368 	.word	0x20000368
 80001fc:	00000000 	.word	0x00000000
 8000200:	08028234 	.word	0x08028234

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000036c 	.word	0x2000036c
 800021c:	08028234 	.word	0x08028234

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f024 fc90 	bl	802562a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d54:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d7a:	f006 faa9 	bl	80072d0 <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f003 ffef 	bl	8004d66 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d94:	f008 f938 	bl	8009008 <HAL_ADCEx_MultiModeConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d9e:	f003 ffe2 	bl	8004d66 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC1_Init+0x168>)
 8000da4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000da6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 4095;
 8000db6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 2048+768;
 8000dbc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dce:	f007 fc21 	bl	8008614 <HAL_ADC_AnalogWDGConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f003 ffc5 	bl	8004d66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	237f      	movs	r3, #127	; 0x7f
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dec:	2304      	movs	r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dfa:	f006 ffcb 	bl	8007d94 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000e04:	f003 ffaf 	bl	8004d66 <Error_Handler>
  }

  /** Configure the channel to be monitored by WatchDog 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x170>)
 8000e0a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REGINJEC;
 8000e0c:	f04f 73e0 	mov.w	r3, #29360128	; 0x1c00000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2816;
 8000e12:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000e24:	f007 fbf6 	bl	8008614 <HAL_ADC_AnalogWDGConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000e2e:	f003 ff9a 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3748      	adds	r7, #72	; 0x48
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000384 	.word	0x20000384
 8000e40:	7dc00000 	.word	0x7dc00000
 8000e44:	b6902000 	.word	0xb6902000
 8000e48:	0017ffff 	.word	0x0017ffff

08000e4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f024 fbe0 	bl	802562a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <MX_ADC3_Init+0xec>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eb2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed8:	f006 f9fa 	bl	80072d0 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ee2:	f003 ff40 	bl	8004d66 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ef2:	f008 f889 	bl	8009008 <HAL_ADCEx_MultiModeConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000efc:	f003 ff33 	bl	8004d66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_ADC3_Init+0xf0>)
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0c:	237f      	movs	r3, #127	; 0x7f
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000f1e:	f006 ff39 	bl	8007d94 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000f28:	f003 ff1d 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200003f0 	.word	0x200003f0
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	b6982000 	.word	0xb6982000

08000f40 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f024 fb6c 	bl	802562a <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_ADC4_Init+0xc8>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f9a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fc0:	f006 f986 	bl	80072d0 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f003 fecc 	bl	8004d66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC4_Init+0xcc>)
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	237f      	movs	r3, #127	; 0x7f
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fec:	f006 fed2 	bl	8007d94 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000ff6:	f003 feb6 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000045c 	.word	0x2000045c
 8001008:	50000500 	.word	0x50000500
 800100c:	c75a0000 	.word	0xc75a0000

08001010 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f024 fb04 	bl	802562a <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_ADC5_Init+0xc8>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800104a:	2204      	movs	r2, #4
 800104c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800106a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001090:	f006 f91e 	bl	80072d0 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800109a:	f003 fe64 	bl	8004d66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC5_Init+0xcc>)
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010aa:	237f      	movs	r3, #127	; 0x7f
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_ADC5_Init+0xc4>)
 80010bc:	f006 fe6a 	bl	8007d94 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80010c6:	f003 fe4e 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004c8 	.word	0x200004c8
 80010d8:	50000600 	.word	0x50000600
 80010dc:	8c900008 	.word	0x8c900008

080010e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f024 fa9a 	bl	802562a <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d14f      	bne.n	80011a0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001106:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fbaf 	bl	800b874 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800111c:	f003 fe23 	bl	8004d66 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a74      	ldr	r2, [pc, #464]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_ADC_MspInit+0x220>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001140:	2205      	movs	r2, #5
 8001142:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001168:	2220      	movs	r2, #32
 800116a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	4862      	ldr	r0, [pc, #392]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001174:	f008 fd1a 	bl	8009bac <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800117e:	f003 fdf2 	bl	8004d66 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2012      	movs	r0, #18
 8001194:	f008 f91b 	bl	80093ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f008 f932 	bl	8009402 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800119e:	e114      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_ADC_MspInit+0x224>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d150      	bne.n	800124c <HAL_ADC_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fb5a 	bl	800b874 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_ADC_MspInit+0xea>
      Error_Handler();
 80011c6:	f003 fdce 	bl	8004d66 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    hdma_adc3.Instance = DMA1_Channel5;
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_ADC_MspInit+0x230>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011fc:	2225      	movs	r2, #37	; 0x25
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001224:	2220      	movs	r2, #32
 8001226:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800122e:	4837      	ldr	r0, [pc, #220]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001230:	f008 fcbc 	bl	8009bac <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x15e>
      Error_Handler();
 800123a:	f003 fd94 	bl	8004d66 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
}
 800124a:	e0be      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_ADC_MspInit+0x234>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d164      	bne.n	8001320 <HAL_ADC_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800125c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f00a fb04 	bl	800b874 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8001272:	f003 fd78 	bl	8004d66 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_ADC_MspInit+0x228>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x1c0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel6;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_ADC_MspInit+0x23c>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a8:	2226      	movs	r2, #38	; 0x26
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012dc:	f008 fc66 	bl	8009bac <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 80012e6:	f003 fd3e 	bl	8004d66 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012f6:	e068      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	20000534 	.word	0x20000534
 8001300:	4002001c 	.word	0x4002001c
 8001304:	50000400 	.word	0x50000400
 8001308:	200006b4 	.word	0x200006b4
 800130c:	20000594 	.word	0x20000594
 8001310:	40020058 	.word	0x40020058
 8001314:	50000500 	.word	0x50000500
 8001318:	200005f4 	.word	0x200005f4
 800131c:	4002006c 	.word	0x4002006c
  else if(adcHandle->Instance==ADC5)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <HAL_ADC_MspInit+0x2f4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14f      	bne.n	80013ca <HAL_ADC_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001334:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4618      	mov	r0, r3
 800133c:	f00a fa9a 	bl	800b874 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0x26a>
      Error_Handler();
 8001346:	f003 fd0e 	bl	8004d66 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x294>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel7;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_ADC_MspInit+0x304>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800137c:	2227      	movs	r2, #39	; 0x27
 800137e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013b0:	f008 fbfc 	bl	8009bac <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_ADC_MspInit+0x2de>
      Error_Handler();
 80013ba:	f003 fcd4 	bl	8004d66 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	3770      	adds	r7, #112	; 0x70
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	50000600 	.word	0x50000600
 80013d8:	200006b4 	.word	0x200006b4
 80013dc:	40021000 	.word	0x40021000
 80013e0:	20000654 	.word	0x20000654
 80013e4:	40020080 	.word	0x40020080

080013e8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f024 f918 	bl	802562a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_DAC1_Init+0x80>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <MX_DAC1_Init+0x84>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <MX_DAC1_Init+0x80>)
 8001402:	f008 f818 	bl	8009436 <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f003 fcab 	bl	8004d66 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001410:	2302      	movs	r3, #2
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001420:	2322      	movs	r3, #34	; 0x22
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_DAC1_Init+0x80>)
 800143c:	f008 f984 	bl	8009748 <HAL_DAC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001446:	f003 fc8e 	bl	8004d66 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2210      	movs	r2, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_DAC1_Init+0x80>)
 8001452:	f008 f979 	bl	8009748 <HAL_DAC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800145c:	f003 fc83 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200006b8 	.word	0x200006b8
 800146c:	50000800 	.word	0x50000800

08001470 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f024 f8d4 	bl	802562a <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_DAC2_Init+0x6c>)
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <MX_DAC2_Init+0x70>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_DAC2_Init+0x6c>)
 800148a:	f007 ffd4 	bl	8009436 <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001494:	f003 fc67 	bl	8004d66 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001498:	2302      	movs	r3, #2
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_DAC2_Init+0x6c>)
 80014c4:	f008 f940 	bl	8009748 <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80014ce:	f003 fc4a 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200006cc 	.word	0x200006cc
 80014e0:	50000c00 	.word	0x50000c00

080014e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DAC_MspInit+0x178>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d17b      	bne.n	80015fe <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2330      	movs	r3, #48	; 0x30
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f008 fe60 	bl	800a210 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001552:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_DAC_MspInit+0x184>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001558:	2206      	movs	r2, #6
 800155a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800155e:	2210      	movs	r2, #16
 8001560:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800158c:	f008 fb0e 	bl	8009bac <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001596:	f003 fbe6 	bl	8004d66 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_DAC_MspInit+0x180>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DAC_MspInit+0x18c>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015e2:	f008 fae3 	bl	8009bac <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80015ec:	f003 fbbb 	bl	8004d66 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015fc:	e029      	b.n	8001652 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_DAC_MspInit+0x190>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f008 fddf 	bl	800a210 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50000800 	.word	0x50000800
 8001660:	40021000 	.word	0x40021000
 8001664:	200006e0 	.word	0x200006e0
 8001668:	40020030 	.word	0x40020030
 800166c:	20000740 	.word	0x20000740
 8001670:	40020044 	.word	0x40020044
 8001674:	50000c00 	.word	0x50000c00

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_DMA_Init+0xb0>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_DMA_Init+0xb0>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_DMA_Init+0xb0>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_DMA_Init+0xb0>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_DMA_Init+0xb0>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	; 0x48
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_DMA_Init+0xb0>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f007 fe8b 	bl	80093ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f007 fea2 	bl	8009402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200c      	movs	r0, #12
 80016c4:	f007 fe83 	bl	80093ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f007 fe9a 	bl	8009402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200d      	movs	r0, #13
 80016d4:	f007 fe7b 	bl	80093ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d8:	200d      	movs	r0, #13
 80016da:	f007 fe92 	bl	8009402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200e      	movs	r0, #14
 80016e4:	f007 fe73 	bl	80093ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f007 fe8a 	bl	8009402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200f      	movs	r0, #15
 80016f4:	f007 fe6b 	bl	80093ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f007 fe82 	bl	8009402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2010      	movs	r0, #16
 8001704:	f007 fe63 	bl	80093ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f007 fe7a 	bl	8009402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2011      	movs	r0, #17
 8001714:	f007 fe5b 	bl	80093ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f007 fe72 	bl	8009402 <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f023 ff76 	bl	802562a <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001740:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001744:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <MX_FMC_Init+0xd0>)
 800174a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_FMC_Init+0xcc>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_FMC_Init+0xcc>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001760:	2210      	movs	r2, #16
 8001762:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_FMC_Init+0xcc>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_FMC_Init+0xcc>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001792:	2200      	movs	r2, #0
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_FMC_Init+0xcc>)
 800179e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80017b8:	230f      	movs	r3, #15
 80017ba:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80017bc:	230f      	movs	r3, #15
 80017be:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 15;
 80017c0:	230f      	movs	r3, #15
 80017c2:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80017c8:	230f      	movs	r3, #15
 80017ca:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80017cc:	2310      	movs	r3, #16
 80017ce:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017d0:	2311      	movs	r3, #17
 80017d2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017e0:	f00a feb8 	bl	800c554 <HAL_SRAM_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_FMC_Init+0xc2>
  {
    Error_Handler( );
 80017ea:	f003 fabc 	bl	8004d66 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200007a0 	.word	0x200007a0
 80017fc:	a0000104 	.word	0xa0000104

08001800 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d13f      	bne.n	800189c <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6513      	str	r3, [r2, #80]	; 0x50
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184c:	230c      	movs	r3, #12
 800184e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <HAL_FMC_MspInit+0xac>)
 8001856:	f008 fcdb 	bl	800a210 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800185a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800185e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186c:	230c      	movs	r3, #12
 800186e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <HAL_FMC_MspInit+0xb0>)
 8001876:	f008 fccb 	bl	800a210 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800187a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800187e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188c:	230c      	movs	r3, #12
 800188e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_FMC_MspInit+0xb4>)
 8001896:	f008 fcbb 	bl	800a210 <HAL_GPIO_Init>
 800189a:	e000      	b.n	800189e <HAL_FMC_MspInit+0x9e>
    return;
 800189c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200007f8 	.word	0x200007f8
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48001400 	.word	0x48001400
 80018b0:	48001000 	.word	0x48001000
 80018b4:	48000c00 	.word	0x48000c00

080018b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018c0:	f7ff ff9e 	bl	8001800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a24      	ldr	r2, [pc, #144]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f248 3104 	movw	r1, #33540	; 0x8304
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f008 fdca 	bl	800a514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001980:	f248 3304 	movw	r3, #33540	; 0x8304
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f008 fc38 	bl	800a210 <HAL_GPIO_Init>

}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019d4:	e000      	b.n	80019d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f9      	beq.n	80019d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80019e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffc9 	bl	80019ac <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
    return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <get_systick>:

int32_t get_systick()
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <get_systick+0x14>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <diff_systick>:

int32_t diff_systick( int32_t b, int32_t a )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	int d = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
	if( b < a )
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da04      	bge.n	8001a6c <diff_systick+0x20>
	{
	  d = a-b;
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e006      	b.n	8001a7a <diff_systick+0x2e>
	}
	else
	{
	  d = a+(SysTick->LOAD-b);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <diff_systick+0x3c>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
	}
	return d;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <text_width_f>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color );
tRectangle get_char_rect( const tFont *pFont, uint8_t c );
tRectangle get_text_rect( const tFont *pFont, char *pString );

float text_width_f( nk_handle handle, float h, const char* t, int len )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a98:	6079      	str	r1, [r7, #4]
 8001a9a:	603a      	str	r2, [r7, #0]

	return get_text_rect( &fontUbuntuBookRNormal16, t ).width;
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <text_width_f+0x34>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fc2e 	bl	8002306 <get_text_rect>
 8001aaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	0802a460 	.word	0x0802a460

08001ac4 <lcd_config>:

void lcd_config( void );
void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color );

void lcd_config( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET );
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f008 fd1e 	bl	800a514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f008 fd17 	bl	800a514 <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f005 f842 	bl	8006b70 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_SET );
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f008 fd0d 	bl	800a514 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	f005 f838 	bl	8006b70 <HAL_Delay>

	*addr_cmd = 0x01;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <lcd_config+0xa0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 100 );
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f005 f831 	bl	8006b70 <HAL_Delay>
	*addr_cmd = 0x11;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <lcd_config+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2211      	movs	r2, #17
 8001b14:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b16:	200a      	movs	r0, #10
 8001b18:	f005 f82a 	bl	8006b70 <HAL_Delay>
	*addr_cmd = 0x3A;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <lcd_config+0xa0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	223a      	movs	r2, #58	; 0x3a
 8001b22:	801a      	strh	r2, [r3, #0]
	*addr_data = 0x06;//0x05;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <lcd_config+0xa4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2206      	movs	r2, #6
 8001b2a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x36;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <lcd_config+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2236      	movs	r2, #54	; 0x36
 8001b32:	801a      	strh	r2, [r3, #0]
	*addr_data = (0x01<<5)|(0x01<<6)|(0x01<<7);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <lcd_config+0xa4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22e0      	movs	r2, #224	; 0xe0
 8001b3a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x29;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <lcd_config+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2229      	movs	r2, #41	; 0x29
 8001b42:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b44:	200a      	movs	r0, #10
 8001b46:	f005 f813 	bl	8006b70 <HAL_Delay>

	lcd_rect( 0, 0, 480, 320, 0x0000 );
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 f867 	bl	8001c2c <lcd_rect>
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <nk_colot_to_rgb666>:

uint32_t nk_colot_to_rgb666( struct nk_color color )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	uint32_t rgb666 = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]

	color.r = (color.r*color.a)/256.0;
 8001b78:	793b      	ldrb	r3, [r7, #4]
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcf7 	bl	8000574 <__aeabi_i2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001b8c:	f7fe fe86 	bl	800089c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f82e 	bl	8000bf8 <__aeabi_d2uiz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	713b      	strb	r3, [r7, #4]
	color.g = (color.g*color.a)/256.0;
 8001ba2:	797b      	ldrb	r3, [r7, #5]
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fce2 	bl	8000574 <__aeabi_i2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001bb6:	f7fe fe71 	bl	800089c <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff f819 	bl	8000bf8 <__aeabi_d2uiz>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	717b      	strb	r3, [r7, #5]
	color.b = (color.b*color.a)/256.0;
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fccd 	bl	8000574 <__aeabi_i2d>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001be0:	f7fe fe5c 	bl	800089c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff f804 	bl	8000bf8 <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	71bb      	strb	r3, [r7, #6]

	color.r >>= 2;
 8001bf6:	793b      	ldrb	r3, [r7, #4]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	713b      	strb	r3, [r7, #4]
	color.g >>= 2;
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	717b      	strb	r3, [r7, #5]
	color.b >>= 2;
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	71bb      	strb	r3, [r7, #6]
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	031a      	lsls	r2, r3, #12
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	4313      	orrs	r3, r2
 8001c18:	79ba      	ldrb	r2, [r7, #6]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
	return rgb666;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40700000 	.word	0x40700000

08001c2c <lcd_rect>:

void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color )
{
 8001c2c:	b490      	push	{r4, r7}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y0 = y;
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t x1 = x + w - 1;
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t y1 = y + h - 1;
 8001c60:	88ba      	ldrh	r2, [r7, #4]
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	843b      	strh	r3, [r7, #32]

	if( x0 < 0 )
 8001c6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da02      	bge.n	8001c7c <lcd_rect+0x50>
	{
		x0 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c7a:	e007      	b.n	8001c8c <lcd_rect+0x60>
	}
	else if( x0 > 480 - 1 )
 8001c7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c80:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c84:	db02      	blt.n	8001c8c <lcd_rect+0x60>
	{
		x0 = 480 - 1;
 8001c86:	f240 13df 	movw	r3, #479	; 0x1df
 8001c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	if( x1 < 0 )
 8001c8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da02      	bge.n	8001c9a <lcd_rect+0x6e>
	{
		x1 = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c98:	e007      	b.n	8001caa <lcd_rect+0x7e>
	}
	else if( x1 > 480 - 1 )
 8001c9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c9e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ca2:	db02      	blt.n	8001caa <lcd_rect+0x7e>
	{
		x1 = 480 - 1;
 8001ca4:	f240 13df 	movw	r3, #479	; 0x1df
 8001ca8:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 < 0 )
 8001caa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da02      	bge.n	8001cb8 <lcd_rect+0x8c>
	{
		y0 = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001cb6:	e007      	b.n	8001cc8 <lcd_rect+0x9c>
	}
	else if( y0 > 320 - 1 )
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cc0:	db02      	blt.n	8001cc8 <lcd_rect+0x9c>
	{
		y0 = 320 - 1;
 8001cc2:	f240 133f 	movw	r3, #319	; 0x13f
 8001cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( y1 < 0 )
 8001cc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da02      	bge.n	8001cd6 <lcd_rect+0xaa>
	{
		y1 = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	843b      	strh	r3, [r7, #32]
 8001cd4:	e007      	b.n	8001ce6 <lcd_rect+0xba>
	}
	else if( y1 > 320 - 1 )
 8001cd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001cda:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cde:	db02      	blt.n	8001ce6 <lcd_rect+0xba>
	{
		y1 = 320 - 1;
 8001ce0:	f240 133f 	movw	r3, #319	; 0x13f
 8001ce4:	843b      	strh	r3, [r7, #32]
	}

	if( x0 > x1 )
 8001ce6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001cea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dd06      	ble.n	8001d00 <lcd_rect+0xd4>
	{
		int tmp = x0;
 8001cf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001cf6:	61bb      	str	r3, [r7, #24]
		x0 = x1;
 8001cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
		x1 = tmp;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 > y1 )
 8001d00:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001d04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dd06      	ble.n	8001d1a <lcd_rect+0xee>
	{
		int tmp = y0;
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d10:	617b      	str	r3, [r7, #20]
		y0 = y1;
 8001d12:	8c3b      	ldrh	r3, [r7, #32]
 8001d14:	84bb      	strh	r3, [r7, #36]	; 0x24
		y1 = tmp;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	843b      	strh	r3, [r7, #32]
	}

	w = x1 - x0 + 1;
 8001d1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8001d28:	8c3a      	ldrh	r2, [r7, #32]
 8001d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
	uint32_t n = w*h;
 8001d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	613b      	str	r3, [r7, #16]

	uint16_t color_l = (color>>0)&0x1FF;
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	0a5b      	lsrs	r3, r3, #9
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5c:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <lcd_rect+0x1d8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	222a      	movs	r2, #42	; 0x2a
 8001d64:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001d66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <lcd_rect+0x1dc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a12      	lsrs	r2, r2, #8
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001d72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <lcd_rect+0x1dc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001d7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <lcd_rect+0x1dc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0a12      	lsrs	r2, r2, #8
 8001d86:	b292      	uxth	r2, r2
 8001d88:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001d8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <lcd_rect+0x1dc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	b292      	uxth	r2, r2
 8001d94:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <lcd_rect+0x1d8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	222b      	movs	r2, #43	; 0x2b
 8001d9c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <lcd_rect+0x1dc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0a12      	lsrs	r2, r2, #8
 8001da6:	b292      	uxth	r2, r2
 8001da8:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <lcd_rect+0x1dc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	b292      	uxth	r2, r2
 8001db4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001db6:	8c3a      	ldrh	r2, [r7, #32]
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <lcd_rect+0x1dc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0a12      	lsrs	r2, r2, #8
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001dc2:	8c3a      	ldrh	r2, [r7, #32]
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <lcd_rect+0x1dc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <lcd_rect+0x1d8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	222c      	movs	r2, #44	; 0x2c
 8001dd4:	801a      	strh	r2, [r3, #0]
	for( i=n ; i ; i-- )
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e00a      	b.n	8001df2 <lcd_rect+0x1c6>
	{
		*addr_data = color_l;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <lcd_rect+0x1dc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	89fa      	ldrh	r2, [r7, #14]
 8001de2:	801a      	strh	r2, [r3, #0]
		*addr_data = color_h;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <lcd_rect+0x1dc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	89ba      	ldrh	r2, [r7, #12]
 8001dea:	801a      	strh	r2, [r3, #0]
	for( i=n ; i ; i-- )
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f1      	bne.n	8001ddc <lcd_rect+0x1b0>
	}
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	; 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc90      	pop	{r4, r7}
 8001e02:	4770      	bx	lr
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004

08001e0c <lcd_set_pixel>:

void lcd_set_pixel( int16_t x, int16_t y, uint32_t color )
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	603a      	str	r2, [r7, #0]
 8001e16:	80fb      	strh	r3, [r7, #6]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	80bb      	strh	r3, [r7, #4]
	int16_t x0 = x;
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	82fb      	strh	r3, [r7, #22]
	int16_t y0 = y;
 8001e20:	88bb      	ldrh	r3, [r7, #4]
 8001e22:	82bb      	strh	r3, [r7, #20]
	int16_t x1 = x + 1;
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	827b      	strh	r3, [r7, #18]
	int16_t y1 = y + 1;
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	823b      	strh	r3, [r7, #16]
	uint16_t color_l = (color>>0)&0x1FF;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3c:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	0a5b      	lsrs	r3, r3, #9
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e48:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <lcd_set_pixel+0xd4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	222a      	movs	r2, #42	; 0x2a
 8001e50:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001e52:	8afa      	ldrh	r2, [r7, #22]
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0a12      	lsrs	r2, r2, #8
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001e5e:	8afa      	ldrh	r2, [r7, #22]
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	b292      	uxth	r2, r2
 8001e68:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001e6a:	8a7a      	ldrh	r2, [r7, #18]
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0a12      	lsrs	r2, r2, #8
 8001e72:	b292      	uxth	r2, r2
 8001e74:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001e76:	8a7a      	ldrh	r2, [r7, #18]
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <lcd_set_pixel+0xd4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	222b      	movs	r2, #43	; 0x2b
 8001e88:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001e8a:	8aba      	ldrh	r2, [r7, #20]
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0a12      	lsrs	r2, r2, #8
 8001e92:	b292      	uxth	r2, r2
 8001e94:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001e96:	8aba      	ldrh	r2, [r7, #20]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001ea2:	8a3a      	ldrh	r2, [r7, #16]
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0a12      	lsrs	r2, r2, #8
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001eae:	8a3a      	ldrh	r2, [r7, #16]
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <lcd_set_pixel+0xd4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	222c      	movs	r2, #44	; 0x2c
 8001ec0:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	89fa      	ldrh	r2, [r7, #14]
 8001ec8:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <lcd_set_pixel+0xd8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	89ba      	ldrh	r2, [r7, #12]
 8001ed0:	801a      	strh	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <lcd_set_pixel_bench>:


int32_t lcd_set_pixel_bench( int16_t x, int16_t y, uint32_t color )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	603a      	str	r2, [r7, #0]
 8001ef2:	80fb      	strh	r3, [r7, #6]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	80bb      	strh	r3, [r7, #4]
	int32_t a, b, d;
	int16_t x0 = x;
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 8001efc:	88bb      	ldrh	r3, [r7, #4]
 8001efe:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + 4;
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	3304      	adds	r3, #4
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + 4;
 8001f08:	88bb      	ldrh	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	833b      	strh	r3, [r7, #24]
	uint16_t color_l = (color>>0)&0x1FF;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f18:	82fb      	strh	r3, [r7, #22]
	uint16_t color_h = (color>>9)&0x1FF;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	0a5b      	lsrs	r3, r3, #9
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f24:	82bb      	strh	r3, [r7, #20]

	*addr_cmd = 0x2A;
 8001f26:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <lcd_set_pixel_bench+0x1d8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	222a      	movs	r2, #42	; 0x2a
 8001f2c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001f2e:	8bfa      	ldrh	r2, [r7, #30]
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0a12      	lsrs	r2, r2, #8
 8001f36:	b292      	uxth	r2, r2
 8001f38:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001f3a:	8bfa      	ldrh	r2, [r7, #30]
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	b292      	uxth	r2, r2
 8001f44:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001f46:	8b7a      	ldrh	r2, [r7, #26]
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0a12      	lsrs	r2, r2, #8
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001f52:	8b7a      	ldrh	r2, [r7, #26]
 8001f54:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <lcd_set_pixel_bench+0x1d8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	222b      	movs	r2, #43	; 0x2b
 8001f64:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001f66:	8bba      	ldrh	r2, [r7, #28]
 8001f68:	4b56      	ldr	r3, [pc, #344]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0a12      	lsrs	r2, r2, #8
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001f72:	8bba      	ldrh	r2, [r7, #28]
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001f7e:	8b3a      	ldrh	r2, [r7, #24]
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0a12      	lsrs	r2, r2, #8
 8001f86:	b292      	uxth	r2, r2
 8001f88:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001f8a:	8b3a      	ldrh	r2, [r7, #24]
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	b292      	uxth	r2, r2
 8001f94:	801a      	strh	r2, [r3, #0]

	a = get_systick();
 8001f96:	f7ff fd4d 	bl	8001a34 <get_systick>
 8001f9a:	6138      	str	r0, [r7, #16]
	*addr_cmd = 0x2C;
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <lcd_set_pixel_bench+0x1d8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	222c      	movs	r2, #44	; 0x2c
 8001fa2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	8afa      	ldrh	r2, [r7, #22]
 8001faa:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fac:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	8aba      	ldrh	r2, [r7, #20]
 8001fb2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fb4:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	8afa      	ldrh	r2, [r7, #22]
 8001fba:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fbc:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	8aba      	ldrh	r2, [r7, #20]
 8001fc2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	8afa      	ldrh	r2, [r7, #22]
 8001fca:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	8aba      	ldrh	r2, [r7, #20]
 8001fd2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	8afa      	ldrh	r2, [r7, #22]
 8001fda:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	8aba      	ldrh	r2, [r7, #20]
 8001fe2:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8001fe4:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	8afa      	ldrh	r2, [r7, #22]
 8001fea:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fec:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	8aba      	ldrh	r2, [r7, #20]
 8001ff2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	8afa      	ldrh	r2, [r7, #22]
 8001ffa:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	8aba      	ldrh	r2, [r7, #20]
 8002002:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	8afa      	ldrh	r2, [r7, #22]
 800200a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	8aba      	ldrh	r2, [r7, #20]
 8002012:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	8afa      	ldrh	r2, [r7, #22]
 800201a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	8aba      	ldrh	r2, [r7, #20]
 8002022:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	8afa      	ldrh	r2, [r7, #22]
 800202a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	8aba      	ldrh	r2, [r7, #20]
 8002032:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	8afa      	ldrh	r2, [r7, #22]
 800203a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	8aba      	ldrh	r2, [r7, #20]
 8002042:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	8afa      	ldrh	r2, [r7, #22]
 800204a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	8aba      	ldrh	r2, [r7, #20]
 8002052:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	8afa      	ldrh	r2, [r7, #22]
 800205a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	8aba      	ldrh	r2, [r7, #20]
 8002062:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	8afa      	ldrh	r2, [r7, #22]
 800206a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	8aba      	ldrh	r2, [r7, #20]
 8002072:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	8afa      	ldrh	r2, [r7, #22]
 800207a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	8aba      	ldrh	r2, [r7, #20]
 8002082:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	8afa      	ldrh	r2, [r7, #22]
 800208a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	8aba      	ldrh	r2, [r7, #20]
 8002092:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	8afa      	ldrh	r2, [r7, #22]
 800209a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <lcd_set_pixel_bench+0x1dc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	8aba      	ldrh	r2, [r7, #20]
 80020a2:	801a      	strh	r2, [r3, #0]
	b = get_systick();
 80020a4:	f7ff fcc6 	bl	8001a34 <get_systick>
 80020a8:	60f8      	str	r0, [r7, #12]
	d = diff_systick(b,a);
 80020aa:	6939      	ldr	r1, [r7, #16]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff fccd 	bl	8001a4c <diff_systick>
 80020b2:	60b8      	str	r0, [r7, #8]
	return d;
 80020b4:	68bb      	ldr	r3, [r7, #8]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <lcd_text>:
void lcd_text( const tFramebuf *fb, uint16_t x0, uint16_t y0, char *str, uint32_t color )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	4613      	mov	r3, r2
 80020d8:	813b      	strh	r3, [r7, #8]
	for(; *str; ++str) {
 80020da:	e02a      	b.n	8002132 <lcd_text+0x6a>
	        // get char and make sure its in range of font
	        int chr = *(uint8_t *)str;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	61fb      	str	r3, [r7, #28]
	        if (chr < 32 || chr > 127) {
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	2b1f      	cmp	r3, #31
 80020e6:	dd02      	ble.n	80020ee <lcd_text+0x26>
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b7f      	cmp	r3, #127	; 0x7f
 80020ec:	dd01      	ble.n	80020f2 <lcd_text+0x2a>
	            chr = 127;
 80020ee:	237f      	movs	r3, #127	; 0x7f
 80020f0:	61fb      	str	r3, [r7, #28]
	        }
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
 80020f2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80020f6:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002100:	9201      	str	r2, [sp, #4]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4603      	mov	r3, r0
 8002106:	460a      	mov	r2, r1
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <lcd_text+0x7c>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f81c 	bl	8002148 <draw_char>
	        x0 += get_char_rect( &fontUbuntuBookRNormal16, chr ).width;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	490a      	ldr	r1, [pc, #40]	; (8002144 <lcd_text+0x7c>)
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f8c9 	bl	80022b2 <get_char_rect>
 8002120:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002124:	b29a      	uxth	r2, r3
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	4413      	add	r3, r2
 800212a:	817b      	strh	r3, [r7, #10]
	for(; *str; ++str) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3301      	adds	r3, #1
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1d0      	bne.n	80020dc <lcd_text+0x14>
	}
}
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	0802a460 	.word	0x0802a460

08002148 <draw_char>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4611      	mov	r1, r2
 8002154:	461a      	mov	r2, r3
 8002156:	460b      	mov	r3, r1
 8002158:	80fb      	strh	r3, [r7, #6]
 800215a:	4613      	mov	r3, r2
 800215c:	80bb      	strh	r3, [r7, #4]
    int16_t x, y, w, bitmap, b;
    int16_t px, py;
    const tGlyph *pGlyph;

    pGlyph = pFont->pGlyphs[c-32];
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800216a:	3b20      	subs	r3, #32
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61fb      	str	r3, [r7, #28]

    y0 += pFont->bbxh;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800217a:	b29a      	uxth	r2, r3
 800217c:	88bb      	ldrh	r3, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	b29b      	uxth	r3, r3
 8002182:	80bb      	strh	r3, [r7, #4]
    y0 -= pFont->descent;
 8002184:	88ba      	ldrh	r2, [r7, #4]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	79db      	ldrb	r3, [r3, #7]
 800218a:	b29b      	uxth	r3, r3
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	b29b      	uxth	r3, r3
 8002190:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxh;
 8002192:	88ba      	ldrh	r2, [r7, #4]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800219a:	b29b      	uxth	r3, r3
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	b29b      	uxth	r3, r3
 80021a0:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxy;
 80021a2:	88ba      	ldrh	r2, [r7, #4]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	80bb      	strh	r3, [r7, #4]

    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 80021b2:	2300      	movs	r3, #0
 80021b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021b6:	e06f      	b.n	8002298 <draw_char+0x150>
    {
        py = y0+y;
 80021b8:	88ba      	ldrh	r2, [r7, #4]
 80021ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021bc:	4413      	add	r3, r2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	837b      	strh	r3, [r7, #26]

        w = (pGlyph->bbxw-1)/8+1;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da00      	bge.n	80021d0 <draw_char+0x88>
 80021ce:	3307      	adds	r3, #7
 80021d0:	10db      	asrs	r3, r3, #3
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	833b      	strh	r3, [r7, #24]

        int16_t yw = y*w;
 80021da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021dc:	8b3b      	ldrh	r3, [r7, #24]
 80021de:	fb12 f303 	smulbb	r3, r2, r3
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	82fb      	strh	r3, [r7, #22]
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 80021e6:	2300      	movs	r3, #0
 80021e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021ea:	e047      	b.n	800227c <draw_char+0x134>
        {
            bitmap = pGlyph->pBitmap[yw+x/8];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80021f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da00      	bge.n	80021fe <draw_char+0xb6>
 80021fc:	3307      	adds	r3, #7
 80021fe:	10db      	asrs	r3, r3, #3
 8002200:	b21b      	sxth	r3, r3
 8002202:	440b      	add	r3, r1
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	82bb      	strh	r3, [r7, #20]

            for( b = 0 ; b < 8 ; b++ )
 800220a:	2300      	movs	r3, #0
 800220c:	847b      	strh	r3, [r7, #34]	; 0x22
 800220e:	e02b      	b.n	8002268 <draw_char+0x120>
            {
                if( x+b >= pGlyph->bbxw )
 8002210:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002214:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002218:	4413      	add	r3, r2
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	f992 2009 	ldrsb.w	r2, [r2, #9]
 8002220:	4293      	cmp	r3, r2
 8002222:	da26      	bge.n	8002272 <draw_char+0x12a>
                {
                    break;
                }

                px = x0+x+b;
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002228:	4413      	add	r3, r2
 800222a:	b29a      	uxth	r2, r3
 800222c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800222e:	4413      	add	r3, r2
 8002230:	b29b      	uxth	r3, r3
 8002232:	827b      	strh	r3, [r7, #18]

                if( bitmap & (0x80>>b) )
 8002234:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002238:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	fa41 f303 	asr.w	r3, r1, r3
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <draw_char+0x114>
                {
                    //set_pixel( px, py, color );
                    //lcd_rect( px, py, 1, 1, color);
                	setpixel_checked(fb, px, py, color, 1);
 8002248:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800224c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	2001      	movs	r0, #1
 8002254:	9000      	str	r0, [sp, #0]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f00b fe4e 	bl	800def8 <setpixel_checked>
            for( b = 0 ; b < 8 ; b++ )
 800225c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002260:	b29b      	uxth	r3, r3
 8002262:	3301      	adds	r3, #1
 8002264:	b29b      	uxth	r3, r3
 8002266:	847b      	strh	r3, [r7, #34]	; 0x22
 8002268:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800226c:	2b07      	cmp	r3, #7
 800226e:	ddcf      	ble.n	8002210 <draw_char+0xc8>
 8002270:	e000      	b.n	8002274 <draw_char+0x12c>
                    break;
 8002272:	bf00      	nop
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 8002274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002276:	3308      	adds	r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002282:	b21b      	sxth	r3, r3
 8002284:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002288:	429a      	cmp	r2, r3
 800228a:	dbaf      	blt.n	80021ec <draw_char+0xa4>
    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 800228c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002290:	b29b      	uxth	r3, r3
 8002292:	3301      	adds	r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80022a4:	429a      	cmp	r2, r3
 80022a6:	db87      	blt.n	80021b8 <draw_char+0x70>
                }
            }
        }
    }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <get_char_rect>:


tRectangle get_char_rect( const tFont *pFont, uint8_t c )
{
 80022b2:	b480      	push	{r7}
 80022b4:	b087      	sub	sp, #28
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	4613      	mov	r3, r2
 80022be:	71fb      	strb	r3, [r7, #7]
    tRectangle rect = {0};
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]

    rect.width = pFont->pGlyphs[c-32]->dwidthx;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d4:	3b20      	subs	r3, #32
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	79db      	ldrb	r3, [r3, #7]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	82bb      	strh	r3, [r7, #20]
    rect.height = pFont->bbxh;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	82fb      	strh	r3, [r7, #22]
    return rect;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	cb03      	ldmia	r3!, {r0, r1}
 80022f6:	6010      	str	r0, [r2, #0]
 80022f8:	6051      	str	r1, [r2, #4]
}
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <get_text_rect>:

tRectangle get_text_rect( const tFont *pFont, char *pString )
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b08a      	sub	sp, #40	; 0x28
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
	uint8_t i;
	tRectangle rect = {0};
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]

	rect.height = pFont->bbxh;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002322:	b21b      	sxth	r3, r3
 8002324:	837b      	strh	r3, [r7, #26]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800232c:	e019      	b.n	8002362 <get_text_rect+0x5c>
	{
		rect.width += get_char_rect( pFont, pString[i] ).width;
 800232e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ffb7 	bl	80022b2 <get_char_rect>
 8002344:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002348:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800234c:	b292      	uxth	r2, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	4413      	add	r3, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	b21b      	sxth	r3, r3
 8002356:	833b      	strh	r3, [r7, #24]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 8002358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235c:	3301      	adds	r3, #1
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1de      	bne.n	800232e <get_text_rect+0x28>
    }

    return rect;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	461a      	mov	r2, r3
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	cb03      	ldmia	r3!, {r0, r1}
 800237a:	6010      	str	r0, [r2, #0]
 800237c:	6051      	str	r1, [r2, #4]
}
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <lcd_bmp>:
	        }
	    }
}

void lcd_bmp( int16_t x, int16_t y, int16_t w, int16_t h, uint8_t *buf )
{
 8002388:	b490      	push	{r4, r7}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	80fb      	strh	r3, [r7, #6]
 800239a:	4603      	mov	r3, r0
 800239c:	80bb      	strh	r3, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	807b      	strh	r3, [r7, #2]
 80023a2:	4613      	mov	r3, r2
 80023a4:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 80023aa:	88bb      	ldrh	r3, [r7, #4]
 80023ac:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + w - 1;
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	4413      	add	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + h - 1;
 80023bc:	88ba      	ldrh	r2, [r7, #4]
 80023be:	883b      	ldrh	r3, [r7, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	833b      	strh	r3, [r7, #24]

	if( x0 < 0 )
 80023ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	da02      	bge.n	80023d8 <lcd_bmp+0x50>
	{
		x0 = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	83fb      	strh	r3, [r7, #30]
 80023d6:	e005      	b.n	80023e4 <lcd_bmp+0x5c>
	}
	else if( x0 > 240 - 1 )
 80023d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023dc:	2bef      	cmp	r3, #239	; 0xef
 80023de:	dd01      	ble.n	80023e4 <lcd_bmp+0x5c>
	{
		x0 = 240 - 1;
 80023e0:	23ef      	movs	r3, #239	; 0xef
 80023e2:	83fb      	strh	r3, [r7, #30]
	}

	if( x1 < 0 )
 80023e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	da02      	bge.n	80023f2 <lcd_bmp+0x6a>
	{
		x1 = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	837b      	strh	r3, [r7, #26]
 80023f0:	e005      	b.n	80023fe <lcd_bmp+0x76>
	}
	else if( x1 > 240 - 1 )
 80023f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023f6:	2bef      	cmp	r3, #239	; 0xef
 80023f8:	dd01      	ble.n	80023fe <lcd_bmp+0x76>
	{
		x1 = 240 - 1;
 80023fa:	23ef      	movs	r3, #239	; 0xef
 80023fc:	837b      	strh	r3, [r7, #26]
	}

	if( y0 < 0 )
 80023fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da02      	bge.n	800240c <lcd_bmp+0x84>
	{
		y0 = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	83bb      	strh	r3, [r7, #28]
 800240a:	e007      	b.n	800241c <lcd_bmp+0x94>
	}
	else if( y0 > 320 - 1 )
 800240c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002410:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002414:	db02      	blt.n	800241c <lcd_bmp+0x94>
	{
		y0 = 320 - 1;
 8002416:	f240 133f 	movw	r3, #319	; 0x13f
 800241a:	83bb      	strh	r3, [r7, #28]
	}

	if( y1 < 0 )
 800241c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da02      	bge.n	800242a <lcd_bmp+0xa2>
	{
		y1 = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	833b      	strh	r3, [r7, #24]
 8002428:	e007      	b.n	800243a <lcd_bmp+0xb2>
	}
	else if( y1 > 320 - 1 )
 800242a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800242e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002432:	db02      	blt.n	800243a <lcd_bmp+0xb2>
	{
		y1 = 320 - 1;
 8002434:	f240 133f 	movw	r3, #319	; 0x13f
 8002438:	833b      	strh	r3, [r7, #24]
	}

	if( x0 > x1 )
 800243a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800243e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002442:	429a      	cmp	r2, r3
 8002444:	dd06      	ble.n	8002454 <lcd_bmp+0xcc>
	{
		int tmp = x0;
 8002446:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800244a:	613b      	str	r3, [r7, #16]
		x0 = x1;
 800244c:	8b7b      	ldrh	r3, [r7, #26]
 800244e:	83fb      	strh	r3, [r7, #30]
		x1 = tmp;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	837b      	strh	r3, [r7, #26]
	}

	if( y0 > y1 )
 8002454:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002458:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800245c:	429a      	cmp	r2, r3
 800245e:	dd06      	ble.n	800246e <lcd_bmp+0xe6>
	{
		int tmp = y0;
 8002460:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002464:	60fb      	str	r3, [r7, #12]
		y0 = y1;
 8002466:	8b3b      	ldrh	r3, [r7, #24]
 8002468:	83bb      	strh	r3, [r7, #28]
		y1 = tmp;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	833b      	strh	r3, [r7, #24]
	}

	w = x1 - x0 + 1;
 800246e:	8b7a      	ldrh	r2, [r7, #26]
 8002470:	8bfb      	ldrh	r3, [r7, #30]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b29b      	uxth	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b29b      	uxth	r3, r3
 800247a:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 800247c:	8b3a      	ldrh	r2, [r7, #24]
 800247e:	8bbb      	ldrh	r3, [r7, #28]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	b29b      	uxth	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
	uint32_t n = w*h;
 800248e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002492:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	60bb      	str	r3, [r7, #8]

	//uint16_t color_l = (color>>0)&0x1FF;
	//uint16_t color_h = (color>>9)&0x1FF;

	*addr_cmd = 0x2A;
 800249c:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <lcd_bmp+0x1d0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	222a      	movs	r2, #42	; 0x2a
 80024a2:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 80024a4:	8bfa      	ldrh	r2, [r7, #30]
 80024a6:	4b2d      	ldr	r3, [pc, #180]	; (800255c <lcd_bmp+0x1d4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0a12      	lsrs	r2, r2, #8
 80024ac:	b292      	uxth	r2, r2
 80024ae:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 80024b0:	8bfa      	ldrh	r2, [r7, #30]
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <lcd_bmp+0x1d4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	b292      	uxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 80024bc:	8b7a      	ldrh	r2, [r7, #26]
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <lcd_bmp+0x1d4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0a12      	lsrs	r2, r2, #8
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 80024c8:	8b7a      	ldrh	r2, [r7, #26]
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <lcd_bmp+0x1d4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	b292      	uxth	r2, r2
 80024d2:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <lcd_bmp+0x1d0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	222b      	movs	r2, #43	; 0x2b
 80024da:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 80024dc:	8bba      	ldrh	r2, [r7, #28]
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <lcd_bmp+0x1d4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0a12      	lsrs	r2, r2, #8
 80024e4:	b292      	uxth	r2, r2
 80024e6:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 80024e8:	8bba      	ldrh	r2, [r7, #28]
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <lcd_bmp+0x1d4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	b292      	uxth	r2, r2
 80024f2:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 80024f4:	8b3a      	ldrh	r2, [r7, #24]
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <lcd_bmp+0x1d4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0a12      	lsrs	r2, r2, #8
 80024fc:	b292      	uxth	r2, r2
 80024fe:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8002500:	8b3a      	ldrh	r2, [r7, #24]
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <lcd_bmp+0x1d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	b292      	uxth	r2, r2
 800250a:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <lcd_bmp+0x1d0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	222c      	movs	r2, #44	; 0x2c
 8002512:	801a      	strh	r2, [r3, #0]
	for( i = n ; i ; i-- )
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e014      	b.n	8002544 <lcd_bmp+0x1bc>
	{
		*addr_data = *buf;
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <lcd_bmp+0x1d4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b292      	uxth	r2, r2
 8002524:	801a      	strh	r2, [r3, #0]
		buf++;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	3301      	adds	r3, #1
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
		*addr_data = *buf;
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <lcd_bmp+0x1d4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b292      	uxth	r2, r2
 8002536:	801a      	strh	r2, [r3, #0]
		buf++;
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	3301      	adds	r3, #1
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
	for( i = n ; i ; i-- )
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3b01      	subs	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e7      	bne.n	800251a <lcd_bmp+0x192>
	}
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bc90      	pop	{r4, r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000
 800255c:	20000004 	.word	0x20000004

08002560 <oscilloscope_process>:
    int draw_signals;
};
int visible = 0;
struct nk_rect keypad_size = {35, 35, 142, 208};
void oscilloscope_process(struct Oscilloscope *osc, struct nk_context *ctx)
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b0fc      	sub	sp, #496	; 0x1f0
 8002564:	af04      	add	r7, sp, #16
 8002566:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800256a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800256e:	6018      	str	r0, [r3, #0]
 8002570:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002574:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002578:	6019      	str	r1, [r3, #0]
	visible = 0;
 800257a:	4b6d      	ldr	r3, [pc, #436]	; (8002730 <oscilloscope_process+0x1d0>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
	if( nk_begin(ctx, "STM32G4 Scope", nk_rect(0, 0, 240, 320), NK_WINDOW_MINIMIZABLE ) )
 8002580:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8002734 <oscilloscope_process+0x1d4>
 8002584:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8002738 <oscilloscope_process+0x1d8>
 8002588:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800273c <oscilloscope_process+0x1dc>
 800258c:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800273c <oscilloscope_process+0x1dc>
 8002590:	f014 f94c 	bl	801682c <nk_rect>
 8002594:	eeb0 6a40 	vmov.f32	s12, s0
 8002598:	eef0 6a60 	vmov.f32	s13, s1
 800259c:	eeb0 7a41 	vmov.f32	s14, s2
 80025a0:	eef0 7a61 	vmov.f32	s15, s3
 80025a4:	ed87 6a59 	vstr	s12, [r7, #356]	; 0x164
 80025a8:	edc7 6a5a 	vstr	s13, [r7, #360]	; 0x168
 80025ac:	ed87 7a5b 	vstr	s14, [r7, #364]	; 0x16c
 80025b0:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
 80025b4:	ed97 6a59 	vldr	s12, [r7, #356]	; 0x164
 80025b8:	edd7 6a5a 	vldr	s13, [r7, #360]	; 0x168
 80025bc:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 80025c0:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 80025c4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80025c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025cc:	2210      	movs	r2, #16
 80025ce:	eeb0 0a46 	vmov.f32	s0, s12
 80025d2:	eef0 0a66 	vmov.f32	s1, s13
 80025d6:	eeb0 1a47 	vmov.f32	s2, s14
 80025da:	eef0 1a67 	vmov.f32	s3, s15
 80025de:	4958      	ldr	r1, [pc, #352]	; (8002740 <oscilloscope_process+0x1e0>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	f021 fbe4 	bl	8023dae <nk_begin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f001 85ac 	beq.w	8004146 <oscilloscope_process+0x1be6>
	{
		visible = 1;
 80025ee:	4b50      	ldr	r3, [pc, #320]	; (8002730 <oscilloscope_process+0x1d0>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
        osc->draw_bg = nk_true;
 80025f4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80025f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if( nk_tree_push( ctx, NK_TREE_TAB, "Acquire", NK_MAXIMIZED) ){
 8002604:	484f      	ldr	r0, [pc, #316]	; (8002744 <oscilloscope_process+0x1e4>)
 8002606:	f020 f85b 	bl	80226c0 <nk_strlen>
 800260a:	4603      	mov	r3, r0
 800260c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002610:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002614:	f44f 721a 	mov.w	r2, #616	; 0x268
 8002618:	9202      	str	r2, [sp, #8]
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	4b49      	ldr	r3, [pc, #292]	; (8002744 <oscilloscope_process+0x1e4>)
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2301      	movs	r3, #1
 8002622:	4a49      	ldr	r2, [pc, #292]	; (8002748 <oscilloscope_process+0x1e8>)
 8002624:	2101      	movs	r1, #1
 8002626:	6800      	ldr	r0, [r0, #0]
 8002628:	f01f fcf0 	bl	802200c <nk_tree_push_hashed>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80a5 	beq.w	800277e <oscilloscope_process+0x21e>
            osc->draw_bg = nk_false;
 8002634:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002638:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 60, 60, 60});
 8002644:	4b41      	ldr	r3, [pc, #260]	; (800274c <oscilloscope_process+0x1ec>)
 8002646:	f507 74aa 	add.w	r4, r7, #340	; 0x154
 800264a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002650:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8002654:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002658:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 800265c:	2204      	movs	r2, #4
 800265e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002662:	2101      	movs	r1, #1
 8002664:	6800      	ldr	r0, [r0, #0]
 8002666:	f013 fac5 	bl	8015bf4 <nk_layout_row>
            if (osc->acquire_run) {
 800266a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800266e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d012      	beq.n	80026a0 <oscilloscope_process+0x140>
                if (nk_button_label(ctx, "Stop")) {
 800267a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800267e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002682:	4933      	ldr	r1, [pc, #204]	; (8002750 <oscilloscope_process+0x1f0>)
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	f00d fa1f 	bl	800fac8 <nk_button_label>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d019      	beq.n	80026c4 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_false;
 8002690:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002694:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e011      	b.n	80026c4 <oscilloscope_process+0x164>
                }
            } else {
                if (nk_button_label(ctx, "Run")) {
 80026a0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026a8:	492a      	ldr	r1, [pc, #168]	; (8002754 <oscilloscope_process+0x1f4>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	f00d fa0c 	bl	800fac8 <nk_button_label>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_true;
 80026b6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
                }
            }

            if (nk_button_label(ctx, "Single")) {
 80026c4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026cc:	4922      	ldr	r1, [pc, #136]	; (8002758 <oscilloscope_process+0x1f8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	f00d f9fa 	bl	800fac8 <nk_button_label>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <oscilloscope_process+0x188>
                osc->acquire_single = nk_true;
 80026da:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
            }

            if (nk_button_label(ctx, "Draw")) {
 80026e8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026f0:	491a      	ldr	r1, [pc, #104]	; (800275c <oscilloscope_process+0x1fc>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	f00d f9e8 	bl	800fac8 <nk_button_label>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d038      	beq.n	8002770 <oscilloscope_process+0x210>
                if (osc->draw_signals + 1 < 3) {
 80026fe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002702:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800270c:	2b01      	cmp	r3, #1
 800270e:	dc27      	bgt.n	8002760 <oscilloscope_process+0x200>
                    osc->draw_signals += 1;
 8002710:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002714:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002724:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800272e:	e01f      	b.n	8002770 <oscilloscope_process+0x210>
 8002730:	200007fc 	.word	0x200007fc
 8002734:	43a00000 	.word	0x43a00000
 8002738:	43700000 	.word	0x43700000
 800273c:	00000000 	.word	0x00000000
 8002740:	08028250 	.word	0x08028250
 8002744:	08028260 	.word	0x08028260
 8002748:	08028278 	.word	0x08028278
 800274c:	08028424 	.word	0x08028424
 8002750:	08028280 	.word	0x08028280
 8002754:	08028288 	.word	0x08028288
 8002758:	0802828c 	.word	0x0802828c
 800275c:	08028294 	.word	0x08028294
                } else {
                    osc->draw_signals = 0;
 8002760:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002764:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                }
            }
            nk_tree_pop(ctx);
 8002770:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002774:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f01f fc64 	bl	8022046 <nk_tree_pop>
        }

        {
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Horizontal", NK_MINIMIZED) ){
 800277e:	48a8      	ldr	r0, [pc, #672]	; (8002a20 <oscilloscope_process+0x4c0>)
 8002780:	f01f ff9e 	bl	80226c0 <nk_strlen>
 8002784:	4603      	mov	r3, r0
 8002786:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800278a:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 800278e:	f44f 7221 	mov.w	r2, #644	; 0x284
 8002792:	9202      	str	r2, [sp, #8]
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	4ba2      	ldr	r3, [pc, #648]	; (8002a20 <oscilloscope_process+0x4c0>)
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2300      	movs	r3, #0
 800279c:	4aa1      	ldr	r2, [pc, #644]	; (8002a24 <oscilloscope_process+0x4c4>)
 800279e:	2101      	movs	r1, #1
 80027a0:	6800      	ldr	r0, [r0, #0]
 80027a2:	f01f fc33 	bl	802200c <nk_tree_push_hashed>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 81cf 	beq.w	8002b4c <oscilloscope_process+0x5ec>
        		nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80027ae:	4b9e      	ldr	r3, [pc, #632]	; (8002a28 <oscilloscope_process+0x4c8>)
 80027b0:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 80027b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027ba:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80027be:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80027c2:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80027c6:	2204      	movs	r2, #4
 80027c8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80027cc:	2101      	movs	r1, #1
 80027ce:	6800      	ldr	r0, [r0, #0]
 80027d0:	f013 fa10 	bl	8015bf4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80027d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80027d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027dc:	2211      	movs	r2, #17
 80027de:	4993      	ldr	r1, [pc, #588]	; (8002a2c <oscilloscope_process+0x4cc>)
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	f01d f9a7 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80027e6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80027ea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027ee:	2101      	movs	r1, #1
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	f00d f865 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80027f6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80027fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027fe:	2109      	movs	r1, #9
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	f00d fa17 	bl	800fc34 <nk_button_symbol>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d011      	beq.n	8002830 <oscilloscope_process+0x2d0>
        		{
        			osc->horizontal_offset -= 1;
 800280c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002810:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	edd3 7a02 	vldr	s15, [r3, #8]
 800281a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800281e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002822:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002826:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	edc3 7a02 	vstr	s15, [r3, #8]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->horizontal_offset);
 8002830:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002834:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd feab 	bl	8000598 <__aeabi_f2d>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	f107 0008 	add.w	r0, r7, #8
 800284a:	4979      	ldr	r1, [pc, #484]	; (8002a30 <oscilloscope_process+0x4d0>)
 800284c:	f022 fe8a 	bl	8025564 <siprintf>

        		static int show_app_about = 0;
        		show_app_about |= nk_button_label( ctx, combo_buffer );
 8002850:	f107 0208 	add.w	r2, r7, #8
 8002854:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002858:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800285c:	4611      	mov	r1, r2
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	f00d f932 	bl	800fac8 <nk_button_label>
 8002864:	4602      	mov	r2, r0
 8002866:	4b73      	ldr	r3, [pc, #460]	; (8002a34 <oscilloscope_process+0x4d4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	4a71      	ldr	r2, [pc, #452]	; (8002a34 <oscilloscope_process+0x4d4>)
 800286e:	6013      	str	r3, [r2, #0]

                if (show_app_about)
 8002870:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <oscilloscope_process+0x4d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 810a 	beq.w	8002a8e <oscilloscope_process+0x52e>
                {
                    /* about popup */
                    //static struct nk_rect s = {20, 20, 200, 200};
                    if (nk_popup_begin(ctx, NK_POPUP_STATIC, "Keypad", NK_WINDOW_CLOSABLE | NK_WINDOW_NO_SCROLLBAR, keypad_size ) )
 800287a:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <oscilloscope_process+0x4d8>)
 800287c:	ed93 6a00 	vldr	s12, [r3]
 8002880:	edd3 6a01 	vldr	s13, [r3, #4]
 8002884:	ed93 7a02 	vldr	s14, [r3, #8]
 8002888:	edd3 7a03 	vldr	s15, [r3, #12]
 800288c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002890:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8002894:	eeb0 0a46 	vmov.f32	s0, s12
 8002898:	eef0 0a66 	vmov.f32	s1, s13
 800289c:	eeb0 1a47 	vmov.f32	s2, s14
 80028a0:	eef0 1a67 	vmov.f32	s3, s15
 80028a4:	2328      	movs	r3, #40	; 0x28
 80028a6:	4a65      	ldr	r2, [pc, #404]	; (8002a3c <oscilloscope_process+0x4dc>)
 80028a8:	2100      	movs	r1, #0
 80028aa:	6800      	ldr	r0, [r0, #0]
 80028ac:	f016 fe20 	bl	80194f0 <nk_popup_begin>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80e8 	beq.w	8002a88 <oscilloscope_process+0x528>
                    {
                    	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){30+30+30+30});
 80028b8:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <oscilloscope_process+0x4e0>)
 80028ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80028be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028c2:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80028c6:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80028ca:	2201      	movs	r2, #1
 80028cc:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80028d0:	2101      	movs	r1, #1
 80028d2:	6800      	ldr	r0, [r0, #0]
 80028d4:	f013 f98e 	bl	8015bf4 <nk_layout_row>
                        nk_label(ctx, "0.00", NK_TEXT_RIGHT );
 80028d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80028dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028e0:	2214      	movs	r2, #20
 80028e2:	4958      	ldr	r1, [pc, #352]	; (8002a44 <oscilloscope_process+0x4e4>)
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	f01d f925 	bl	801fb34 <nk_label>
                        nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){30, 30, 30, 30});
 80028ea:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <oscilloscope_process+0x4e8>)
 80028ec:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80028f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028fa:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80028fe:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002902:	2204      	movs	r2, #4
 8002904:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002908:	2101      	movs	r1, #1
 800290a:	6800      	ldr	r0, [r0, #0]
 800290c:	f013 f972 	bl	8015bf4 <nk_layout_row>
                        nk_button_label( ctx, "7" );
 8002910:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002914:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002918:	494c      	ldr	r1, [pc, #304]	; (8002a4c <oscilloscope_process+0x4ec>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f00d f8d4 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "8" );
 8002920:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002924:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002928:	4949      	ldr	r1, [pc, #292]	; (8002a50 <oscilloscope_process+0x4f0>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f00d f8cc 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "9" );
 8002930:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002934:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002938:	4946      	ldr	r1, [pc, #280]	; (8002a54 <oscilloscope_process+0x4f4>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	f00d f8c4 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "k" );
 8002940:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002944:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002948:	4943      	ldr	r1, [pc, #268]	; (8002a58 <oscilloscope_process+0x4f8>)
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	f00d f8bc 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "4" );
 8002950:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002954:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002958:	4940      	ldr	r1, [pc, #256]	; (8002a5c <oscilloscope_process+0x4fc>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f00d f8b4 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "5" );
 8002960:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002964:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002968:	493d      	ldr	r1, [pc, #244]	; (8002a60 <oscilloscope_process+0x500>)
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	f00d f8ac 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "6" );
 8002970:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002974:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002978:	493a      	ldr	r1, [pc, #232]	; (8002a64 <oscilloscope_process+0x504>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	f00d f8a4 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "m" );
 8002980:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002984:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002988:	4937      	ldr	r1, [pc, #220]	; (8002a68 <oscilloscope_process+0x508>)
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	f00d f89c 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "1" );
 8002990:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002994:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002998:	4934      	ldr	r1, [pc, #208]	; (8002a6c <oscilloscope_process+0x50c>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f00d f894 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "2" );
 80029a0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029a8:	4931      	ldr	r1, [pc, #196]	; (8002a70 <oscilloscope_process+0x510>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f00d f88c 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "3" );
 80029b0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029b8:	492e      	ldr	r1, [pc, #184]	; (8002a74 <oscilloscope_process+0x514>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	f00d f884 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "u" );
 80029c0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029c8:	492b      	ldr	r1, [pc, #172]	; (8002a78 <oscilloscope_process+0x518>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f00d f87c 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "C" );
 80029d0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029d8:	4928      	ldr	r1, [pc, #160]	; (8002a7c <oscilloscope_process+0x51c>)
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	f00d f874 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "0" );
 80029e0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029e8:	4925      	ldr	r1, [pc, #148]	; (8002a80 <oscilloscope_process+0x520>)
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	f00d f86c 	bl	800fac8 <nk_button_label>
                        nk_button_label( ctx, "." );
 80029f0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029f8:	4922      	ldr	r1, [pc, #136]	; (8002a84 <oscilloscope_process+0x524>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	f00d f864 	bl	800fac8 <nk_button_label>
                        nk_button_symbol( ctx, NK_SYMBOL_X );
 8002a00:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002a04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a08:	2101      	movs	r1, #1
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	f00d f912 	bl	800fc34 <nk_button_symbol>
                        nk_popup_end(ctx);
 8002a10:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002a14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	f017 f913 	bl	8019c44 <nk_popup_end>
 8002a1e:	e036      	b.n	8002a8e <oscilloscope_process+0x52e>
 8002a20:	0802829c 	.word	0x0802829c
 8002a24:	080282b4 	.word	0x080282b4
 8002a28:	08028434 	.word	0x08028434
 8002a2c:	080282c0 	.word	0x080282c0
 8002a30:	080282c8 	.word	0x080282c8
 8002a34:	20000800 	.word	0x20000800
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	080282d0 	.word	0x080282d0
 8002a40:	42f00000 	.word	0x42f00000
 8002a44:	080282d8 	.word	0x080282d8
 8002a48:	08028444 	.word	0x08028444
 8002a4c:	080282e0 	.word	0x080282e0
 8002a50:	080282e4 	.word	0x080282e4
 8002a54:	080282e8 	.word	0x080282e8
 8002a58:	080282ec 	.word	0x080282ec
 8002a5c:	080282f0 	.word	0x080282f0
 8002a60:	080282f4 	.word	0x080282f4
 8002a64:	080282f8 	.word	0x080282f8
 8002a68:	080282fc 	.word	0x080282fc
 8002a6c:	08028300 	.word	0x08028300
 8002a70:	08028304 	.word	0x08028304
 8002a74:	08028308 	.word	0x08028308
 8002a78:	0802830c 	.word	0x0802830c
 8002a7c:	08028310 	.word	0x08028310
 8002a80:	08028314 	.word	0x08028314
 8002a84:	08028318 	.word	0x08028318
                    } else show_app_about = nk_false;
 8002a88:	4bd0      	ldr	r3, [pc, #832]	; (8002dcc <oscilloscope_process+0x86c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
                }

        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002a8e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002a92:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a96:	2101      	movs	r1, #1
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	f00c ff11 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002a9e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002aa2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002aa6:	210a      	movs	r1, #10
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	f00d f8c3 	bl	800fc34 <nk_button_symbol>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d011      	beq.n	8002ad8 <oscilloscope_process+0x578>
        		{
        			osc->horizontal_offset += 1;
 8002ab4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ab8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aca:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ace:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	edc3 7a02 	vstr	s15, [r3, #8]
        		}

        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60,30+60+30});
 8002ad8:	4abd      	ldr	r2, [pc, #756]	; (8002dd0 <oscilloscope_process+0x870>)
 8002ada:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae2:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ae6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002aea:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002aee:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002af2:	2202      	movs	r2, #2
 8002af4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002af8:	2101      	movs	r1, #1
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	f013 f87a 	bl	8015bf4 <nk_layout_row>
        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 8002b00:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002b04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b08:	2211      	movs	r2, #17
 8002b0a:	49b2      	ldr	r1, [pc, #712]	; (8002dd4 <oscilloscope_process+0x874>)
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f01d f811 	bl	801fb34 <nk_label>
        		nk_property_int(ctx, "", -100, &osc->horizontal_scale, 100, 1, 1);
 8002b12:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002b16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b22:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002b26:	2201      	movs	r2, #1
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	2264      	movs	r2, #100	; 0x64
 8002b2c:	9200      	str	r2, [sp, #0]
 8002b2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b32:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8002b36:	49a8      	ldr	r1, [pc, #672]	; (8002dd8 <oscilloscope_process+0x878>)
 8002b38:	6800      	ldr	r0, [r0, #0]
 8002b3a:	f018 fc1d 	bl	801b378 <nk_property_int>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
				{
					osc->horizontal_scale += 1;
				}*/
                nk_tree_pop(ctx);
 8002b3e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002b42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	f01f fa7d 	bl	8022046 <nk_tree_pop>
            }

        	if( nk_tree_push( ctx, NK_TREE_TAB, "Vertical", NK_MINIMIZED) ){
 8002b4c:	48a3      	ldr	r0, [pc, #652]	; (8002ddc <oscilloscope_process+0x87c>)
 8002b4e:	f01f fdb7 	bl	80226c0 <nk_strlen>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b58:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002b5c:	f240 22ca 	movw	r2, #714	; 0x2ca
 8002b60:	9202      	str	r2, [sp, #8]
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	4b9d      	ldr	r3, [pc, #628]	; (8002ddc <oscilloscope_process+0x87c>)
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4a9d      	ldr	r2, [pc, #628]	; (8002de0 <oscilloscope_process+0x880>)
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	6800      	ldr	r0, [r0, #0]
 8002b70:	f01f fa4c 	bl	802200c <nk_tree_push_hashed>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8285 	beq.w	8003086 <oscilloscope_process+0xb26>
        		nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 8002b7c:	4b99      	ldr	r3, [pc, #612]	; (8002de4 <oscilloscope_process+0x884>)
 8002b7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b82:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002b86:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b8a:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002b8e:	2201      	movs	r2, #1
 8002b90:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002b94:	2101      	movs	r1, #1
 8002b96:	6800      	ldr	r0, [r0, #0]
 8002b98:	f013 f82c 	bl	8015bf4 <nk_layout_row>
        		//nk_style_push_style_item(&ctx, &ctx->style.combo.button.text_background, nk_style_item_color(nk_rgb(255,0,0)));
        		osc->channel_selected = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->channel_selected, 30, nk_vec2(94, 160));
 8002b9c:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <oscilloscope_process+0x888>)
 8002b9e:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8002ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ba8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002bac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002bb4:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8002dec <oscilloscope_process+0x88c>
 8002bb8:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8002df0 <oscilloscope_process+0x890>
 8002bbc:	f013 fee8 	bl	8016990 <nk_vec2>
 8002bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8002bc4:	eef0 7a60 	vmov.f32	s15, s1
 8002bc8:	ed87 7a5d 	vstr	s14, [r7, #372]	; 0x174
 8002bcc:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
 8002bd0:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 8002bd4:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 8002bd8:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002bdc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002be0:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8002be4:	231e      	movs	r3, #30
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	eeb0 0a47 	vmov.f32	s0, s14
 8002bec:	eef0 0a67 	vmov.f32	s1, s15
 8002bf0:	4623      	mov	r3, r4
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	6800      	ldr	r0, [r0, #0]
 8002bf6:	f00d fd1f 	bl	8010638 <nk_combo>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c00:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
        		//nk_style_pop_style_item(&ctx);
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 8002c08:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <oscilloscope_process+0x894>)
 8002c0a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c12:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c16:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002c1a:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002c1e:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002c22:	2202      	movs	r2, #2
 8002c24:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002c28:	2101      	movs	r1, #1
 8002c2a:	6800      	ldr	r0, [r0, #0]
 8002c2c:	f012 ffe2 	bl	8015bf4 <nk_layout_row>
                osc->channels[osc->channel_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->channels[osc->channel_selected].enabled, 30, nk_vec2(94, 120));
 8002c30:	4a71      	ldr	r2, [pc, #452]	; (8002df8 <oscilloscope_process+0x898>)
 8002c32:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c3e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3328      	adds	r3, #40	; 0x28
 8002c60:	681d      	ldr	r5, [r3, #0]
 8002c62:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002dfc <oscilloscope_process+0x89c>
 8002c66:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002df0 <oscilloscope_process+0x890>
 8002c6a:	f013 fe91 	bl	8016990 <nk_vec2>
 8002c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002c72:	eef0 7a60 	vmov.f32	s15, s1
 8002c76:	ed87 7a5f 	vstr	s14, [r7, #380]	; 0x17c
 8002c7a:	edc7 7a60 	vstr	s15, [r7, #384]	; 0x180
 8002c7e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002c8a:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 8002c8e:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 8002c92:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002c96:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c9a:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8002c9e:	231e      	movs	r3, #30
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca6:	eef0 0a67 	vmov.f32	s1, s15
 8002caa:	462b      	mov	r3, r5
 8002cac:	2202      	movs	r2, #2
 8002cae:	6800      	ldr	r0, [r0, #0]
 8002cb0:	f00d fcc2 	bl	8010638 <nk_combo>
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002cba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4623      	mov	r3, r4
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4423      	add	r3, r4
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3328      	adds	r3, #40	; 0x28
 8002ccc:	6019      	str	r1, [r3, #0]
                osc->channels[osc->channel_selected].coupling = nk_combo(ctx, (const char*[]){"DC", "AC", "Gnd"}, 3, osc->channels[osc->channel_selected].coupling, 30, nk_vec2(94, 120));
 8002cce:	4a4c      	ldr	r2, [pc, #304]	; (8002e00 <oscilloscope_process+0x8a0>)
 8002cd0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cda:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002cde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002cea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	332c      	adds	r3, #44	; 0x2c
 8002cfc:	681d      	ldr	r5, [r3, #0]
 8002cfe:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002dfc <oscilloscope_process+0x89c>
 8002d02:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8002df0 <oscilloscope_process+0x890>
 8002d06:	f013 fe43 	bl	8016990 <nk_vec2>
 8002d0a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d0e:	eef0 7a60 	vmov.f32	s15, s1
 8002d12:	ed87 7a61 	vstr	s14, [r7, #388]	; 0x184
 8002d16:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
 8002d1a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d26:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 8002d2a:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002d2e:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002d32:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d36:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8002d3a:	231e      	movs	r3, #30
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d42:	eef0 0a67 	vmov.f32	s1, s15
 8002d46:	462b      	mov	r3, r5
 8002d48:	2203      	movs	r2, #3
 8002d4a:	6800      	ldr	r0, [r0, #0]
 8002d4c:	f00d fc74 	bl	8010638 <nk_combo>
 8002d50:	4601      	mov	r1, r0
 8002d52:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4623      	mov	r3, r4
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4423      	add	r3, r4
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	332c      	adds	r3, #44	; 0x2c
 8002d68:	6019      	str	r1, [r3, #0]
                //osc->channels[osc->channel_selected].offset = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].offset, 10.0f, 1.0f);
                //osc->channels[osc->channel_selected].scale = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].scale, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <oscilloscope_process+0x8a4>)
 8002d6c:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8002d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d7a:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002d7e:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002d82:	2204      	movs	r2, #4
 8002d84:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002d88:	2101      	movs	r1, #1
 8002d8a:	6800      	ldr	r0, [r0, #0]
 8002d8c:	f012 ff32 	bl	8015bf4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8002d90:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d98:	2211      	movs	r2, #17
 8002d9a:	491b      	ldr	r1, [pc, #108]	; (8002e08 <oscilloscope_process+0x8a8>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f01c fec9 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002da2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002da6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002daa:	2101      	movs	r1, #1
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	f00c fd87 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002db2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002db6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dba:	2109      	movs	r1, #9
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	f00c ff39 	bl	800fc34 <nk_button_symbol>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d04b      	beq.n	8002e60 <oscilloscope_process+0x900>
 8002dc8:	e020      	b.n	8002e0c <oscilloscope_process+0x8ac>
 8002dca:	bf00      	nop
 8002dcc:	20000800 	.word	0x20000800
 8002dd0:	08028454 	.word	0x08028454
 8002dd4:	0802831c 	.word	0x0802831c
 8002dd8:	08028324 	.word	0x08028324
 8002ddc:	08028328 	.word	0x08028328
 8002de0:	08028340 	.word	0x08028340
 8002de4:	42bc0000 	.word	0x42bc0000
 8002de8:	0802846c 	.word	0x0802846c
 8002dec:	43200000 	.word	0x43200000
 8002df0:	42bc0000 	.word	0x42bc0000
 8002df4:	0802847c 	.word	0x0802847c
 8002df8:	0802848c 	.word	0x0802848c
 8002dfc:	42f00000 	.word	0x42f00000
 8002e00:	080284a0 	.word	0x080284a0
 8002e04:	08028434 	.word	0x08028434
 8002e08:	080282c0 	.word	0x080282c0
        		{
        			osc->channels[osc->channel_selected].offset -= 1;
 8002e0c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e18:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3330      	adds	r3, #48	; 0x30
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e46:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e4a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3330      	adds	r3, #48	; 0x30
 8002e5c:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].offset);
 8002e60:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e70:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3330      	adds	r3, #48	; 0x30
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fb87 	bl	8000598 <__aeabi_f2d>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	f107 0008 	add.w	r0, r7, #8
 8002e92:	49db      	ldr	r1, [pc, #876]	; (8003200 <oscilloscope_process+0xca0>)
 8002e94:	f022 fb66 	bl	8025564 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002e98:	f107 0108 	add.w	r1, r7, #8
 8002e9c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ea0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ea4:	2212      	movs	r2, #18
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	f01c fe44 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002eac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002eb0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	f00c fd02 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002ebc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ec0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ec4:	210a      	movs	r1, #10
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	f00c feb4 	bl	800fc34 <nk_button_symbol>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d029      	beq.n	8002f26 <oscilloscope_process+0x9c6>
        		{
        			osc->channels[osc->channel_selected].offset += 1;
 8002ed2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ed6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ede:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ee2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3330      	adds	r3, #48	; 0x30
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002efc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f0c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3330      	adds	r3, #48	; 0x30
 8002f22:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 8002f26:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f2e:	2211      	movs	r2, #17
 8002f30:	49b4      	ldr	r1, [pc, #720]	; (8003204 <oscilloscope_process+0xca4>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	f01c fdfe 	bl	801fb34 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002f38:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f3c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f40:	2101      	movs	r1, #1
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	f00c fcbc 	bl	800f8c0 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002f48:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f50:	2109      	movs	r1, #9
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	f00c fe6e 	bl	800fc34 <nk_button_symbol>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d029      	beq.n	8002fb2 <oscilloscope_process+0xa52>
				{
					osc->channels[osc->channel_selected].scale -= 1;
 8002f5e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f62:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f72:	6819      	ldr	r1, [r3, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3334      	adds	r3, #52	; 0x34
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f98:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fa0:	6819      	ldr	r1, [r3, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3334      	adds	r3, #52	; 0x34
 8002fae:	edc3 7a00 	vstr	s15, [r3]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].scale);
 8002fb2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002fb6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002fc2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3334      	adds	r3, #52	; 0x34
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fade 	bl	8000598 <__aeabi_f2d>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	f107 0008 	add.w	r0, r7, #8
 8002fe4:	4986      	ldr	r1, [pc, #536]	; (8003200 <oscilloscope_process+0xca0>)
 8002fe6:	f022 fabd 	bl	8025564 <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002fea:	f107 0108 	add.w	r1, r7, #8
 8002fee:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ff2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ff6:	2212      	movs	r2, #18
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	f01c fd9b 	bl	801fb34 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002ffe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003002:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003006:	2101      	movs	r1, #1
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	f00c fc59 	bl	800f8c0 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800300e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003012:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003016:	210a      	movs	r1, #10
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	f00c fe0b 	bl	800fc34 <nk_button_symbol>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d029      	beq.n	8003078 <oscilloscope_process+0xb18>
				{
					osc->channels[osc->channel_selected].scale += 1;
 8003024:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003028:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003030:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003034:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003038:	6819      	ldr	r1, [r3, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3334      	adds	r3, #52	; 0x34
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800304e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800305a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800305e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003062:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003066:	6819      	ldr	r1, [r3, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3334      	adds	r3, #52	; 0x34
 8003074:	edc3 7a00 	vstr	s15, [r3]
				}
                nk_tree_pop(ctx);
 8003078:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800307c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f01e ffe0 	bl	8022046 <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Trigger", NK_MINIMIZED) ){
 8003086:	4860      	ldr	r0, [pc, #384]	; (8003208 <oscilloscope_process+0xca8>)
 8003088:	f01f fb1a 	bl	80226c0 <nk_strlen>
 800308c:	4603      	mov	r3, r0
 800308e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003092:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003096:	f240 22f6 	movw	r2, #758	; 0x2f6
 800309a:	9202      	str	r2, [sp, #8]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <oscilloscope_process+0xca8>)
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	4a59      	ldr	r2, [pc, #356]	; (800320c <oscilloscope_process+0xcac>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	6800      	ldr	r0, [r0, #0]
 80030aa:	f01e ffaf 	bl	802200c <nk_tree_push_hashed>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8176 	beq.w	80033a2 <oscilloscope_process+0xe42>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 80030b6:	4b56      	ldr	r3, [pc, #344]	; (8003210 <oscilloscope_process+0xcb0>)
 80030b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030c0:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80030c4:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80030c8:	2201      	movs	r2, #1
 80030ca:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80030ce:	2101      	movs	r1, #1
 80030d0:	6800      	ldr	r0, [r0, #0]
 80030d2:	f012 fd8f 	bl	8015bf4 <nk_layout_row>
                osc->trigger_source = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->trigger_source, 30, nk_vec2(94, 160));
 80030d6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80030da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030de:	4a4d      	ldr	r2, [pc, #308]	; (8003214 <oscilloscope_process+0xcb4>)
 80030e0:	461c      	mov	r4, r3
 80030e2:	4613      	mov	r3, r2
 80030e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030ea:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80030ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69dc      	ldr	r4, [r3, #28]
 80030f6:	eddf 0a48 	vldr	s1, [pc, #288]	; 8003218 <oscilloscope_process+0xcb8>
 80030fa:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800322c <oscilloscope_process+0xccc>
 80030fe:	f013 fc47 	bl	8016990 <nk_vec2>
 8003102:	eeb0 7a40 	vmov.f32	s14, s0
 8003106:	eef0 7a60 	vmov.f32	s15, s1
 800310a:	ed87 7a63 	vstr	s14, [r7, #396]	; 0x18c
 800310e:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
 8003112:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8003116:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800311a:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800311e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003122:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003126:	231e      	movs	r3, #30
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	eeb0 0a47 	vmov.f32	s0, s14
 800312e:	eef0 0a67 	vmov.f32	s1, s15
 8003132:	4623      	mov	r3, r4
 8003134:	2204      	movs	r2, #4
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	f00d fa7e 	bl	8010638 <nk_combo>
 800313c:	4602      	mov	r2, r0
 800313e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003142:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61da      	str	r2, [r3, #28]
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 800314a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800314e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003152:	4a32      	ldr	r2, [pc, #200]	; (800321c <oscilloscope_process+0xcbc>)
 8003154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003158:	e883 0003 	stmia.w	r3, {r0, r1}
 800315c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003160:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003164:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003168:	2202      	movs	r2, #2
 800316a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800316e:	2101      	movs	r1, #1
 8003170:	6800      	ldr	r0, [r0, #0]
 8003172:	f012 fd3f 	bl	8015bf4 <nk_layout_row>
                osc->trigger_mode = nk_combo(ctx, (const char*[]){"Normal", "Auto"}, 2, osc->trigger_mode, 30, nk_vec2(94, 120));
 8003176:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800317a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800317e:	4a28      	ldr	r2, [pc, #160]	; (8003220 <oscilloscope_process+0xcc0>)
 8003180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003184:	e883 0003 	stmia.w	r3, {r0, r1}
 8003188:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800318c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695c      	ldr	r4, [r3, #20]
 8003194:	eddf 0a24 	vldr	s1, [pc, #144]	; 8003228 <oscilloscope_process+0xcc8>
 8003198:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800322c <oscilloscope_process+0xccc>
 800319c:	f013 fbf8 	bl	8016990 <nk_vec2>
 80031a0:	eeb0 7a40 	vmov.f32	s14, s0
 80031a4:	eef0 7a60 	vmov.f32	s15, s1
 80031a8:	ed87 7a65 	vstr	s14, [r7, #404]	; 0x194
 80031ac:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
 80031b0:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 80031b4:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80031b8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80031bc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80031c0:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 80031c4:	231e      	movs	r3, #30
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	eeb0 0a47 	vmov.f32	s0, s14
 80031cc:	eef0 0a67 	vmov.f32	s1, s15
 80031d0:	4623      	mov	r3, r4
 80031d2:	2202      	movs	r2, #2
 80031d4:	6800      	ldr	r0, [r0, #0]
 80031d6:	f00d fa2f 	bl	8010638 <nk_combo>
 80031da:	4602      	mov	r2, r0
 80031dc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80031e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	615a      	str	r2, [r3, #20]
                osc->trigger_slope = nk_combo(ctx, (const char*[]){"Rising", "Falling", "Both"}, 3, osc->trigger_slope, 30, nk_vec2(94, 120));
 80031e8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80031ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031f0:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <oscilloscope_process+0xcc4>)
 80031f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80031f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031f8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80031fc:	e018      	b.n	8003230 <oscilloscope_process+0xcd0>
 80031fe:	bf00      	nop
 8003200:	080282c8 	.word	0x080282c8
 8003204:	0802831c 	.word	0x0802831c
 8003208:	0802834c 	.word	0x0802834c
 800320c:	08028364 	.word	0x08028364
 8003210:	42bc0000 	.word	0x42bc0000
 8003214:	0802846c 	.word	0x0802846c
 8003218:	43200000 	.word	0x43200000
 800321c:	0802847c 	.word	0x0802847c
 8003220:	080284bc 	.word	0x080284bc
 8003224:	080284dc 	.word	0x080284dc
 8003228:	42f00000 	.word	0x42f00000
 800322c:	42bc0000 	.word	0x42bc0000
 8003230:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699c      	ldr	r4, [r3, #24]
 8003238:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8003228 <oscilloscope_process+0xcc8>
 800323c:	ed1f 0a05 	vldr	s0, [pc, #-20]	; 800322c <oscilloscope_process+0xccc>
 8003240:	f013 fba6 	bl	8016990 <nk_vec2>
 8003244:	eeb0 7a40 	vmov.f32	s14, s0
 8003248:	eef0 7a60 	vmov.f32	s15, s1
 800324c:	ed87 7a67 	vstr	s14, [r7, #412]	; 0x19c
 8003250:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
 8003254:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8003258:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800325c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8003260:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003264:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003268:	231e      	movs	r3, #30
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	eeb0 0a47 	vmov.f32	s0, s14
 8003270:	eef0 0a67 	vmov.f32	s1, s15
 8003274:	4623      	mov	r3, r4
 8003276:	2203      	movs	r2, #3
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	f00d f9dd 	bl	8010638 <nk_combo>
 800327e:	4602      	mov	r2, r0
 8003280:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003284:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	619a      	str	r2, [r3, #24]
                //nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){200});
                //nk_slider_float(ctx, -10.0f, &osc->trigger_offset, 10.0f, 1.0f);


                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 800328c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003290:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003294:	4adb      	ldr	r2, [pc, #876]	; (8003604 <oscilloscope_process+0x10a4>)
 8003296:	461c      	mov	r4, r3
 8003298:	4613      	mov	r3, r2
 800329a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800329c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80032a4:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80032a8:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80032ac:	2204      	movs	r2, #4
 80032ae:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80032b2:	2101      	movs	r1, #1
 80032b4:	6800      	ldr	r0, [r0, #0]
 80032b6:	f012 fc9d 	bl	8015bf4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80032ba:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032c2:	2211      	movs	r2, #17
 80032c4:	49d0      	ldr	r1, [pc, #832]	; (8003608 <oscilloscope_process+0x10a8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	f01c fc34 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80032cc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032d4:	2101      	movs	r1, #1
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	f00c faf2 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80032dc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032e4:	2109      	movs	r1, #9
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	f00c fca4 	bl	800fc34 <nk_button_symbol>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d011      	beq.n	8003316 <oscilloscope_process+0xdb6>
        		{
        			osc->trigger_offset -= 1;
 80032f2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003304:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003308:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800330c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	edc3 7a04 	vstr	s15, [r3, #16]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->trigger_offset);
 8003316:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800331a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f938 	bl	8000598 <__aeabi_f2d>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	f107 0008 	add.w	r0, r7, #8
 8003330:	49b6      	ldr	r1, [pc, #728]	; (800360c <oscilloscope_process+0x10ac>)
 8003332:	f022 f917 	bl	8025564 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003336:	f107 0108 	add.w	r1, r7, #8
 800333a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800333e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003342:	2212      	movs	r2, #18
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f01c fbf5 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800334a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800334e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003352:	2101      	movs	r1, #1
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	f00c fab3 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800335a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800335e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003362:	210a      	movs	r1, #10
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	f00c fc65 	bl	800fc34 <nk_button_symbol>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d011      	beq.n	8003394 <oscilloscope_process+0xe34>
        		{
        			osc->trigger_offset += 1;
 8003370:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003374:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	edd3 7a04 	vldr	s15, [r3, #16]
 800337e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003386:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800338a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	edc3 7a04 	vstr	s15, [r3, #16]
        		}


                nk_tree_pop(ctx);
 8003394:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003398:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	f01e fe52 	bl	8022046 <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Waveform", NK_MINIMIZED) ){
 80033a2:	489b      	ldr	r0, [pc, #620]	; (8003610 <oscilloscope_process+0x10b0>)
 80033a4:	f01f f98c 	bl	80226c0 <nk_strlen>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80033ae:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80033b2:	f44f 7245 	mov.w	r2, #788	; 0x314
 80033b6:	9202      	str	r2, [sp, #8]
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	4b95      	ldr	r3, [pc, #596]	; (8003610 <oscilloscope_process+0x10b0>)
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	4a94      	ldr	r2, [pc, #592]	; (8003614 <oscilloscope_process+0x10b4>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	6800      	ldr	r0, [r0, #0]
 80033c6:	f01e fe21 	bl	802200c <nk_tree_push_hashed>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8347 	beq.w	8003a60 <oscilloscope_process+0x1500>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 80033d2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80033d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033da:	4a8f      	ldr	r2, [pc, #572]	; (8003618 <oscilloscope_process+0x10b8>)
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033e2:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80033e6:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80033ea:	2201      	movs	r2, #1
 80033ec:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80033f0:	2101      	movs	r1, #1
 80033f2:	6800      	ldr	r0, [r0, #0]
 80033f4:	f012 fbfe 	bl	8015bf4 <nk_layout_row>
                osc->waveform_selected = nk_combo(ctx, (const char*[]){"Wf1", "Wf2"}, WAVEFORM_COUNT, osc->waveform_selected, 30, nk_vec2(94, 80));
 80033f8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80033fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003400:	4a86      	ldr	r2, [pc, #536]	; (800361c <oscilloscope_process+0x10bc>)
 8003402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003406:	e883 0003 	stmia.w	r3, {r0, r1}
 800340a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800340e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003416:	eddf 0a82 	vldr	s1, [pc, #520]	; 8003620 <oscilloscope_process+0x10c0>
 800341a:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8003624 <oscilloscope_process+0x10c4>
 800341e:	f013 fab7 	bl	8016990 <nk_vec2>
 8003422:	eeb0 7a40 	vmov.f32	s14, s0
 8003426:	eef0 7a60 	vmov.f32	s15, s1
 800342a:	ed87 7a69 	vstr	s14, [r7, #420]	; 0x1a4
 800342e:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
 8003432:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 8003436:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 800343a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800343e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003442:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003446:	231e      	movs	r3, #30
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	eeb0 0a47 	vmov.f32	s0, s14
 800344e:	eef0 0a67 	vmov.f32	s1, s15
 8003452:	4623      	mov	r3, r4
 8003454:	2202      	movs	r2, #2
 8003456:	6800      	ldr	r0, [r0, #0]
 8003458:	f00d f8ee 	bl	8010638 <nk_combo>
 800345c:	4602      	mov	r2, r0
 800345e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003462:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	679a      	str	r2, [r3, #120]	; 0x78
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 800346a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800346e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003472:	4a6d      	ldr	r2, [pc, #436]	; (8003628 <oscilloscope_process+0x10c8>)
 8003474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003478:	e883 0003 	stmia.w	r3, {r0, r1}
 800347c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003480:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003484:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003488:	2202      	movs	r2, #2
 800348a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800348e:	2101      	movs	r1, #1
 8003490:	6800      	ldr	r0, [r0, #0]
 8003492:	f012 fbaf 	bl	8015bf4 <nk_layout_row>
                osc->waveforms[osc->waveform_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->waveforms[osc->waveform_selected].enabled, 30, nk_vec2(94, 200));
 8003496:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800349a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800349e:	4a63      	ldr	r2, [pc, #396]	; (800362c <oscilloscope_process+0x10cc>)
 80034a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80034a8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80034ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034b4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80034b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	337c      	adds	r3, #124	; 0x7c
 80034ca:	681d      	ldr	r5, [r3, #0]
 80034cc:	eddf 0a58 	vldr	s1, [pc, #352]	; 8003630 <oscilloscope_process+0x10d0>
 80034d0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8003624 <oscilloscope_process+0x10c4>
 80034d4:	f013 fa5c 	bl	8016990 <nk_vec2>
 80034d8:	eeb0 7a40 	vmov.f32	s14, s0
 80034dc:	eef0 7a60 	vmov.f32	s15, s1
 80034e0:	ed87 7a6b 	vstr	s14, [r7, #428]	; 0x1ac
 80034e4:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
 80034e8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80034ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80034f4:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 80034f8:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 80034fc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003500:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003504:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003508:	231e      	movs	r3, #30
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	eeb0 0a47 	vmov.f32	s0, s14
 8003510:	eef0 0a67 	vmov.f32	s1, s15
 8003514:	462b      	mov	r3, r5
 8003516:	2202      	movs	r2, #2
 8003518:	6800      	ldr	r0, [r0, #0]
 800351a:	f00d f88d 	bl	8010638 <nk_combo>
 800351e:	4601      	mov	r1, r0
 8003520:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003524:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4623      	mov	r3, r4
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4423      	add	r3, r4
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	337c      	adds	r3, #124	; 0x7c
 8003536:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].type = nk_combo(ctx, (const char*[]){"DC", "PWM", "Sine", "Tria", "Saw", "Noise"}, 6, osc->waveforms[osc->waveform_selected].type, 30, nk_vec2(94, 240));
 8003538:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800353c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003540:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <oscilloscope_process+0x10d4>)
 8003542:	461c      	mov	r4, r3
 8003544:	4615      	mov	r5, r2
 8003546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800354e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003552:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003556:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800355e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003562:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003566:	6819      	ldr	r1, [r3, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	3380      	adds	r3, #128	; 0x80
 8003574:	681d      	ldr	r5, [r3, #0]
 8003576:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003638 <oscilloscope_process+0x10d8>
 800357a:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003624 <oscilloscope_process+0x10c4>
 800357e:	f013 fa07 	bl	8016990 <nk_vec2>
 8003582:	eeb0 7a40 	vmov.f32	s14, s0
 8003586:	eef0 7a60 	vmov.f32	s15, s1
 800358a:	ed87 7a6d 	vstr	s14, [r7, #436]	; 0x1b4
 800358e:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 8003592:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003596:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800359e:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 80035a2:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80035a6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80035aa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035ae:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 80035b2:	231e      	movs	r3, #30
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	eeb0 0a47 	vmov.f32	s0, s14
 80035ba:	eef0 0a67 	vmov.f32	s1, s15
 80035be:	462b      	mov	r3, r5
 80035c0:	2206      	movs	r2, #6
 80035c2:	6800      	ldr	r0, [r0, #0]
 80035c4:	f00d f838 	bl	8010638 <nk_combo>
 80035c8:	4601      	mov	r1, r0
 80035ca:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4623      	mov	r3, r4
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4423      	add	r3, r4
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	3380      	adds	r3, #128	; 0x80
 80035e0:	6019      	str	r1, [r3, #0]
                //osc->waveforms[osc->waveform_selected].offset = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].offset, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].scale = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].scale, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].duty_cycle = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].duty_cycle, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80035e2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035ea:	4a06      	ldr	r2, [pc, #24]	; (8003604 <oscilloscope_process+0x10a4>)
 80035ec:	461c      	mov	r4, r3
 80035ee:	4613      	mov	r3, r2
 80035f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80035fa:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80035fe:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003602:	e01b      	b.n	800363c <oscilloscope_process+0x10dc>
 8003604:	08028434 	.word	0x08028434
 8003608:	080282c0 	.word	0x080282c0
 800360c:	080282c8 	.word	0x080282c8
 8003610:	0802836c 	.word	0x0802836c
 8003614:	08028384 	.word	0x08028384
 8003618:	42bc0000 	.word	0x42bc0000
 800361c:	080284f0 	.word	0x080284f0
 8003620:	42a00000 	.word	0x42a00000
 8003624:	42bc0000 	.word	0x42bc0000
 8003628:	0802847c 	.word	0x0802847c
 800362c:	0802848c 	.word	0x0802848c
 8003630:	43480000 	.word	0x43480000
 8003634:	08028518 	.word	0x08028518
 8003638:	43700000 	.word	0x43700000
 800363c:	2204      	movs	r2, #4
 800363e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003642:	2101      	movs	r1, #1
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	f012 fad5 	bl	8015bf4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 800364a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800364e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003652:	2211      	movs	r2, #17
 8003654:	49d7      	ldr	r1, [pc, #860]	; (80039b4 <oscilloscope_process+0x1454>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	f01c fa6c 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800365c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003660:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003664:	2101      	movs	r1, #1
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	f00c f92a 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 800366c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003670:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003674:	2109      	movs	r1, #9
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	f00c fadc 	bl	800fc34 <nk_button_symbol>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d029      	beq.n	80036d6 <oscilloscope_process+0x1176>
        		{
        			osc->waveforms[osc->waveform_selected].offset -= 1;
 8003682:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003686:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800368e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003692:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	3384      	adds	r3, #132	; 0x84
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036bc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	3384      	adds	r3, #132	; 0x84
 80036d2:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].offset);
 80036d6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036e2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	3384      	adds	r3, #132	; 0x84
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff4c 	bl	8000598 <__aeabi_f2d>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	f107 0008 	add.w	r0, r7, #8
 8003708:	49ab      	ldr	r1, [pc, #684]	; (80039b8 <oscilloscope_process+0x1458>)
 800370a:	f021 ff2b 	bl	8025564 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 800370e:	f107 0108 	add.w	r1, r7, #8
 8003712:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003716:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800371a:	2212      	movs	r2, #18
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	f01c fa09 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003722:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003726:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800372a:	2101      	movs	r1, #1
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	f00c f8c7 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003732:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003736:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800373a:	210a      	movs	r1, #10
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	f00c fa79 	bl	800fc34 <nk_button_symbol>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d029      	beq.n	800379c <oscilloscope_process+0x123c>
        		{
        			osc->waveforms[osc->waveform_selected].offset += 1;
 8003748:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800374c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003754:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003758:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	3384      	adds	r3, #132	; 0x84
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003772:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800377a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800377e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003782:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003786:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	440b      	add	r3, r1
 8003796:	3384      	adds	r3, #132	; 0x84
 8003798:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 800379c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037a4:	2211      	movs	r2, #17
 80037a6:	4985      	ldr	r1, [pc, #532]	; (80039bc <oscilloscope_process+0x145c>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	f01c f9c3 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80037ae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037b6:	2101      	movs	r1, #1
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f00c f881 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80037be:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037c6:	2109      	movs	r1, #9
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	f00c fa33 	bl	800fc34 <nk_button_symbol>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d029      	beq.n	8003828 <oscilloscope_process+0x12c8>
        		{
        			osc->waveforms[osc->waveform_selected].scale -= 1;
 80037d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037e0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	3388      	adds	r3, #136	; 0x88
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800380e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003812:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	440b      	add	r3, r1
 8003822:	3388      	adds	r3, #136	; 0x88
 8003824:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].scale);
 8003828:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800382c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003834:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003838:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	440b      	add	r3, r1
 8003848:	3388      	adds	r3, #136	; 0x88
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fea3 	bl	8000598 <__aeabi_f2d>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	f107 0008 	add.w	r0, r7, #8
 800385a:	4957      	ldr	r1, [pc, #348]	; (80039b8 <oscilloscope_process+0x1458>)
 800385c:	f021 fe82 	bl	8025564 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003860:	f107 0108 	add.w	r1, r7, #8
 8003864:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003868:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800386c:	2212      	movs	r2, #18
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	f01c f960 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003874:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003878:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800387c:	2101      	movs	r1, #1
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	f00c f81e 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003884:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003888:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800388c:	210a      	movs	r1, #10
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	f00c f9d0 	bl	800fc34 <nk_button_symbol>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d029      	beq.n	80038ee <oscilloscope_process+0x138e>
        		{
        			osc->waveforms[osc->waveform_selected].scale += 1;
 800389a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800389e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038a6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	3388      	adds	r3, #136	; 0x88
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	3388      	adds	r3, #136	; 0x88
 80038ea:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Duty", NK_TEXT_LEFT );
 80038ee:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038f6:	2211      	movs	r2, #17
 80038f8:	4931      	ldr	r1, [pc, #196]	; (80039c0 <oscilloscope_process+0x1460>)
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	f01c f91a 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003900:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003904:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003908:	2101      	movs	r1, #1
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	f00b ffd8 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003910:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003914:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003918:	2109      	movs	r1, #9
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	f00c f98a 	bl	800fc34 <nk_button_symbol>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d029      	beq.n	800397a <oscilloscope_process+0x141a>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle -= 1;
 8003926:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800392a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003932:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003936:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	338c      	adds	r3, #140	; 0x8c
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003950:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800395c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003960:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003964:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	338c      	adds	r3, #140	; 0x8c
 8003976:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].duty_cycle);
 800397a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800397e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003986:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800398a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	338c      	adds	r3, #140	; 0x8c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fdfa 	bl	8000598 <__aeabi_f2d>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	f107 0008 	add.w	r0, r7, #8
 80039ac:	4902      	ldr	r1, [pc, #8]	; (80039b8 <oscilloscope_process+0x1458>)
 80039ae:	f021 fdd9 	bl	8025564 <siprintf>
 80039b2:	e007      	b.n	80039c4 <oscilloscope_process+0x1464>
 80039b4:	080282c0 	.word	0x080282c0
 80039b8:	080282c8 	.word	0x080282c8
 80039bc:	0802831c 	.word	0x0802831c
 80039c0:	08028390 	.word	0x08028390
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 80039c4:	f107 0108 	add.w	r1, r7, #8
 80039c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80039cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039d0:	2212      	movs	r2, #18
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	f01c f8ae 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80039d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80039dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039e0:	2101      	movs	r1, #1
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	f00b ff6c 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 80039e8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80039ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039f0:	210a      	movs	r1, #10
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	f00c f91e 	bl	800fc34 <nk_button_symbol>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d029      	beq.n	8003a52 <oscilloscope_process+0x14f2>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle += 1;
 80039fe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a0a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	338c      	adds	r3, #140	; 0x8c
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a38:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	338c      	adds	r3, #140	; 0x8c
 8003a4e:	edc3 7a00 	vstr	s15, [r3]
        		}
                nk_tree_pop(ctx);
 8003a52:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	f01e faf3 	bl	8022046 <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Cursor", NK_MINIMIZED) ){
 8003a60:	48dd      	ldr	r0, [pc, #884]	; (8003dd8 <oscilloscope_process+0x1878>)
 8003a62:	f01e fe2d 	bl	80226c0 <nk_strlen>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003a6c:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003a70:	f240 324e 	movw	r2, #846	; 0x34e
 8003a74:	9202      	str	r2, [sp, #8]
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	4bd7      	ldr	r3, [pc, #860]	; (8003dd8 <oscilloscope_process+0x1878>)
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4ad7      	ldr	r2, [pc, #860]	; (8003ddc <oscilloscope_process+0x187c>)
 8003a80:	2101      	movs	r1, #1
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	f01e fac2 	bl	802200c <nk_tree_push_hashed>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 829d 	beq.w	8003fca <oscilloscope_process+0x1a6a>
				nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 8003a90:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003a98:	4ad1      	ldr	r2, [pc, #836]	; (8003de0 <oscilloscope_process+0x1880>)
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003aa0:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003aa4:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003aae:	2101      	movs	r1, #1
 8003ab0:	6800      	ldr	r0, [r0, #0]
 8003ab2:	f012 f89f 	bl	8015bf4 <nk_layout_row>
                osc->cursor_selected = nk_combo(ctx, (const char*[]){"C1", "C2"}, CURSOR_COUNT, osc->cursor_selected, 20, nk_vec2(94, 100));
 8003ab6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003aba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003abe:	4ac9      	ldr	r2, [pc, #804]	; (8003de4 <oscilloscope_process+0x1884>)
 8003ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ac4:	e883 0003 	stmia.w	r3, {r0, r1}
 8003ac8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003acc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003ad6:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8003de8 <oscilloscope_process+0x1888>
 8003ada:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8003dec <oscilloscope_process+0x188c>
 8003ade:	f012 ff57 	bl	8016990 <nk_vec2>
 8003ae2:	eeb0 7a40 	vmov.f32	s14, s0
 8003ae6:	eef0 7a60 	vmov.f32	s15, s1
 8003aea:	ed87 7a6f 	vstr	s14, [r7, #444]	; 0x1bc
 8003aee:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
 8003af2:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 8003af6:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 8003afa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003afe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b02:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003b06:	2314      	movs	r3, #20
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b0e:	eef0 0a67 	vmov.f32	s1, s15
 8003b12:	4623      	mov	r3, r4
 8003b14:	2202      	movs	r2, #2
 8003b16:	6800      	ldr	r0, [r0, #0]
 8003b18:	f00c fd8e 	bl	8010638 <nk_combo>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 8003b2c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b34:	4aae      	ldr	r2, [pc, #696]	; (8003df0 <oscilloscope_process+0x1890>)
 8003b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b42:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003b46:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003b50:	2101      	movs	r1, #1
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	f012 f84e 	bl	8015bf4 <nk_layout_row>
                osc->cursors[osc->cursor_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->cursors[osc->cursor_selected].enabled, 30, nk_vec2(94, 100));
 8003b58:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b60:	4aa4      	ldr	r2, [pc, #656]	; (8003df4 <oscilloscope_process+0x1894>)
 8003b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b66:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b6a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b78:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b7c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	33b0      	adds	r3, #176	; 0xb0
 8003b8e:	681d      	ldr	r5, [r3, #0]
 8003b90:	eddf 0a95 	vldr	s1, [pc, #596]	; 8003de8 <oscilloscope_process+0x1888>
 8003b94:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8003dec <oscilloscope_process+0x188c>
 8003b98:	f012 fefa 	bl	8016990 <nk_vec2>
 8003b9c:	eeb0 7a40 	vmov.f32	s14, s0
 8003ba0:	eef0 7a60 	vmov.f32	s15, s1
 8003ba4:	ed87 7a71 	vstr	s14, [r7, #452]	; 0x1c4
 8003ba8:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 8003bac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003bb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003bba:	ed97 7a71 	vldr	s14, [r7, #452]	; 0x1c4
 8003bbe:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 8003bc2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003bc6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003bca:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003bce:	231e      	movs	r3, #30
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8003bd6:	eef0 0a67 	vmov.f32	s1, s15
 8003bda:	462b      	mov	r3, r5
 8003bdc:	2202      	movs	r2, #2
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	f00c fd2a 	bl	8010638 <nk_combo>
 8003be4:	4601      	mov	r1, r0
 8003be6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003bea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4423      	add	r3, r4
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	33b0      	adds	r3, #176	; 0xb0
 8003bfc:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].horizontal = nk_combo(ctx, (const char*[]){"Track", "Free"}, 2, osc->cursors[osc->cursor_selected].horizontal, 30, nk_vec2(94, 100));
 8003bfe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c02:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003c06:	4a7c      	ldr	r2, [pc, #496]	; (8003df8 <oscilloscope_process+0x1898>)
 8003c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c10:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c14:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c1e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	33b4      	adds	r3, #180	; 0xb4
 8003c34:	681d      	ldr	r5, [r3, #0]
 8003c36:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8003de8 <oscilloscope_process+0x1888>
 8003c3a:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8003dec <oscilloscope_process+0x188c>
 8003c3e:	f012 fea7 	bl	8016990 <nk_vec2>
 8003c42:	eeb0 7a40 	vmov.f32	s14, s0
 8003c46:	eef0 7a60 	vmov.f32	s15, s1
 8003c4a:	ed87 7a73 	vstr	s14, [r7, #460]	; 0x1cc
 8003c4e:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
 8003c52:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003c60:	ed97 7a73 	vldr	s14, [r7, #460]	; 0x1cc
 8003c64:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8003c68:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003c6c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c70:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003c74:	231e      	movs	r3, #30
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	eeb0 0a47 	vmov.f32	s0, s14
 8003c7c:	eef0 0a67 	vmov.f32	s1, s15
 8003c80:	462b      	mov	r3, r5
 8003c82:	2202      	movs	r2, #2
 8003c84:	6800      	ldr	r0, [r0, #0]
 8003c86:	f00c fcd7 	bl	8010638 <nk_combo>
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4623      	mov	r3, r4
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4423      	add	r3, r4
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	33b4      	adds	r3, #180	; 0xb4
 8003ca2:	6019      	str	r1, [r3, #0]


                //osc->cursors[osc->cursor_selected].offset = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].offset, 10.0f, 1.0f);
                //osc->cursors[osc->cursor_selected].track = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].track, 10.0f, 1.0f);
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8003ca4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ca8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003cac:	4a53      	ldr	r2, [pc, #332]	; (8003dfc <oscilloscope_process+0x189c>)
 8003cae:	461c      	mov	r4, r3
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cbc:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003cc0:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003cca:	2101      	movs	r1, #1
 8003ccc:	6800      	ldr	r0, [r0, #0]
 8003cce:	f011 ff91 	bl	8015bf4 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8003cd2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003cd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003cda:	2211      	movs	r2, #17
 8003cdc:	4948      	ldr	r1, [pc, #288]	; (8003e00 <oscilloscope_process+0x18a0>)
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	f01b ff28 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003ce4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ce8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003cec:	2101      	movs	r1, #1
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	f00b fde6 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003cf4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003cf8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003cfc:	2109      	movs	r1, #9
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	f00b ff98 	bl	800fc34 <nk_button_symbol>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02b      	beq.n	8003d62 <oscilloscope_process+0x1802>
        		{
        			osc->cursors[osc->cursor_selected].offset -= 1;
 8003d0a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d18:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	33b8      	adds	r3, #184	; 0xb8
 8003d2e:	edd3 7a00 	vldr	s15, [r3]
 8003d32:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d48:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	33b8      	adds	r3, #184	; 0xb8
 8003d5e:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].offset);
 8003d62:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d70:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	33b8      	adds	r3, #184	; 0xb8
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fc fc05 	bl	8000598 <__aeabi_f2d>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	f107 0008 	add.w	r0, r7, #8
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <oscilloscope_process+0x18a4>)
 8003d98:	f021 fbe4 	bl	8025564 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003d9c:	f107 0108 	add.w	r1, r7, #8
 8003da0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003da4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003da8:	2212      	movs	r2, #18
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	f01b fec2 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003db0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003db4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003db8:	2101      	movs	r1, #1
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	f00b fd80 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003dc0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003dc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003dc8:	210a      	movs	r1, #10
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	f00b ff32 	bl	800fc34 <nk_button_symbol>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d044      	beq.n	8003e60 <oscilloscope_process+0x1900>
 8003dd6:	e017      	b.n	8003e08 <oscilloscope_process+0x18a8>
 8003dd8:	08028398 	.word	0x08028398
 8003ddc:	080283b0 	.word	0x080283b0
 8003de0:	42bc0000 	.word	0x42bc0000
 8003de4:	08028538 	.word	0x08028538
 8003de8:	42c80000 	.word	0x42c80000
 8003dec:	42bc0000 	.word	0x42bc0000
 8003df0:	0802847c 	.word	0x0802847c
 8003df4:	0802848c 	.word	0x0802848c
 8003df8:	08028548 	.word	0x08028548
 8003dfc:	08028434 	.word	0x08028434
 8003e00:	080282c0 	.word	0x080282c0
 8003e04:	080282c8 	.word	0x080282c8
        		{
        			osc->cursors[osc->cursor_selected].offset += 1;
 8003e08:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e16:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	33b8      	adds	r3, #184	; 0xb8
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e46:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e4a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	33b8      	adds	r3, #184	; 0xb8
 8003e5c:	edc3 7a00 	vstr	s15, [r3]
        		}


        		nk_label( ctx, "Track", NK_TEXT_LEFT );
 8003e60:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e68:	2211      	movs	r2, #17
 8003e6a:	49bd      	ldr	r1, [pc, #756]	; (8004160 <oscilloscope_process+0x1c00>)
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	f01b fe61 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003e72:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	f00b fd1f 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003e82:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e86:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e8a:	2109      	movs	r1, #9
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f00b fed1 	bl	800fc34 <nk_button_symbol>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02b      	beq.n	8003ef0 <oscilloscope_process+0x1990>
        		{
        			osc->cursors[osc->cursor_selected].track -= 1;
 8003e98:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ea6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003eaa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	33bc      	adds	r3, #188	; 0xbc
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ec4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ed6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003eda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	33bc      	adds	r3, #188	; 0xbc
 8003eec:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].track);
 8003ef0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ef4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003efe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	33bc      	adds	r3, #188	; 0xbc
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fb3e 	bl	8000598 <__aeabi_f2d>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	f107 0008 	add.w	r0, r7, #8
 8003f24:	498f      	ldr	r1, [pc, #572]	; (8004164 <oscilloscope_process+0x1c04>)
 8003f26:	f021 fb1d 	bl	8025564 <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003f2a:	f107 0108 	add.w	r1, r7, #8
 8003f2e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f36:	2212      	movs	r2, #18
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f01b fdfb 	bl	801fb34 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003f3e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f46:	2101      	movs	r1, #1
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	f00b fcb9 	bl	800f8c0 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003f4e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f56:	210a      	movs	r1, #10
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	f00b fe6b 	bl	800fc34 <nk_button_symbol>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02b      	beq.n	8003fbc <oscilloscope_process+0x1a5c>
        		{
        			osc->cursors[osc->cursor_selected].track += 1;
 8003f64:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f68:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f72:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f76:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	33bc      	adds	r3, #188	; 0xbc
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fa2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003fa6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	33bc      	adds	r3, #188	; 0xbc
 8003fb8:	edc3 7a00 	vstr	s15, [r3]
        		}


                nk_tree_pop(ctx);
 8003fbc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003fc0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	f01e f83e 	bl	8022046 <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Measurements", NK_MINIMIZED) ){
 8003fca:	4867      	ldr	r0, [pc, #412]	; (8004168 <oscilloscope_process+0x1c08>)
 8003fcc:	f01e fb78 	bl	80226c0 <nk_strlen>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003fd6:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003fda:	f44f 725f 	mov.w	r2, #892	; 0x37c
 8003fde:	9202      	str	r2, [sp, #8]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	4b61      	ldr	r3, [pc, #388]	; (8004168 <oscilloscope_process+0x1c08>)
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	4a60      	ldr	r2, [pc, #384]	; (800416c <oscilloscope_process+0x1c0c>)
 8003fea:	2101      	movs	r1, #1
 8003fec:	6800      	ldr	r0, [r0, #0]
 8003fee:	f01e f80d 	bl	802200c <nk_tree_push_hashed>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00f      	beq.n	8004018 <oscilloscope_process+0x1ab8>
                nk_label(ctx, "Todo", NK_TEXT_LEFT);
 8003ff8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ffc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004000:	2211      	movs	r2, #17
 8004002:	495b      	ldr	r1, [pc, #364]	; (8004170 <oscilloscope_process+0x1c10>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f01b fd95 	bl	801fb34 <nk_label>
                nk_tree_pop(ctx);
 800400a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800400e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	f01e f817 	bl	8022046 <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Info", NK_MINIMIZED) ){
 8004018:	4856      	ldr	r0, [pc, #344]	; (8004174 <oscilloscope_process+0x1c14>)
 800401a:	f01e fb51 	bl	80226c0 <nk_strlen>
 800401e:	4603      	mov	r3, r0
 8004020:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8004024:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8004028:	f240 3281 	movw	r2, #897	; 0x381
 800402c:	9202      	str	r2, [sp, #8]
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <oscilloscope_process+0x1c14>)
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	4a50      	ldr	r2, [pc, #320]	; (8004178 <oscilloscope_process+0x1c18>)
 8004038:	2101      	movs	r1, #1
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	f01d ffe6 	bl	802200c <nk_tree_push_hashed>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d07f      	beq.n	8004146 <oscilloscope_process+0x1be6>
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 120});
 8004046:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800404a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800404e:	4a4b      	ldr	r2, [pc, #300]	; (800417c <oscilloscope_process+0x1c1c>)
 8004050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004054:	e883 0003 	stmia.w	r3, {r0, r1}
 8004058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800405c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8004060:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8004064:	2202      	movs	r2, #2
 8004066:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800406a:	2101      	movs	r1, #1
 800406c:	6800      	ldr	r0, [r0, #0]
 800406e:	f011 fdc1 	bl	8015bf4 <nk_layout_row>

                float fps = 0.0f; // Calculate fps here
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
                nk_label(ctx, "FPS", NK_TEXT_LEFT);
 800407a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800407e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004082:	2211      	movs	r2, #17
 8004084:	493e      	ldr	r1, [pc, #248]	; (8004180 <oscilloscope_process+0x1c20>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f01b fd54 	bl	801fb34 <nk_label>

                static int a = 0;
                static int b = 0;
                b = a;
 800408c:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <oscilloscope_process+0x1c24>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <oscilloscope_process+0x1c28>)
 8004092:	6013      	str	r3, [r2, #0]
                a = HAL_GetTick();
 8004094:	f002 fd60 	bl	8006b58 <HAL_GetTick>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	4b39      	ldr	r3, [pc, #228]	; (8004184 <oscilloscope_process+0x1c24>)
 800409e:	601a      	str	r2, [r3, #0]
                int d = a-b;
 80040a0:	4b38      	ldr	r3, [pc, #224]	; (8004184 <oscilloscope_process+0x1c24>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <oscilloscope_process+0x1c28>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                char buffer[32];
                sprintf(buffer, "%f", 1000.0f/d);
 80040ae:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800418c <oscilloscope_process+0x1c2c>
 80040be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040c2:	ee16 0a90 	vmov	r0, s13
 80040c6:	f7fc fa67 	bl	8000598 <__aeabi_f2d>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	f107 0008 	add.w	r0, r7, #8
 80040d2:	492f      	ldr	r1, [pc, #188]	; (8004190 <oscilloscope_process+0x1c30>)
 80040d4:	f021 fa46 	bl	8025564 <siprintf>

                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual fps
 80040d8:	f107 0108 	add.w	r1, r7, #8
 80040dc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80040e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040e4:	2211      	movs	r2, #17
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	f01b fd24 	bl	801fb34 <nk_label>

                float ratio = 0.0f; // Calculate memory ratio here
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                nk_label(ctx, "Memory", NK_TEXT_LEFT);
 80040f4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80040f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040fc:	2211      	movs	r2, #17
 80040fe:	4925      	ldr	r1, [pc, #148]	; (8004194 <oscilloscope_process+0x1c34>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	f01b fd17 	bl	801fb34 <nk_label>

                sprintf(buffer, "%d", ctx->memory.allocated );
 8004106:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800410a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004114:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	491e      	ldr	r1, [pc, #120]	; (8004198 <oscilloscope_process+0x1c38>)
 800411e:	4618      	mov	r0, r3
 8004120:	f021 fa20 	bl	8025564 <siprintf>
                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual memory ratio
 8004124:	f107 0108 	add.w	r1, r7, #8
 8004128:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800412c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004130:	2211      	movs	r2, #17
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	f01b fcfe 	bl	801fb34 <nk_label>

                nk_tree_pop(ctx);
 8004138:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800413c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f01d ff80 	bl	8022046 <nk_tree_pop>
            }
        }
        //nk_end(ctx);
    }
	nk_end(ctx);
 8004146:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800414a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f020 fa9e 	bl	8024690 <nk_end>
}
 8004154:	bf00      	nop
 8004156:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800415a:	46bd      	mov	sp, r7
 800415c:	bdb0      	pop	{r4, r5, r7, pc}
 800415e:	bf00      	nop
 8004160:	080283b8 	.word	0x080283b8
 8004164:	080282c8 	.word	0x080282c8
 8004168:	080283c0 	.word	0x080283c0
 800416c:	080283d8 	.word	0x080283d8
 8004170:	080283e8 	.word	0x080283e8
 8004174:	080283f0 	.word	0x080283f0
 8004178:	08028408 	.word	0x08028408
 800417c:	08028454 	.word	0x08028454
 8004180:	08028410 	.word	0x08028410
 8004184:	20000804 	.word	0x20000804
 8004188:	20000808 	.word	0x20000808
 800418c:	447a0000 	.word	0x447a0000
 8004190:	08028414 	.word	0x08028414
 8004194:	08028418 	.word	0x08028418
 8004198:	08028420 	.word	0x08028420

0800419c <nk_draw_fb>:



int quadrant = 0x01;
void nk_draw_fb( struct nk_context *ctx, const tFramebuf *pfb )
{
 800419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a0:	b094      	sub	sp, #80	; 0x50
 80041a2:	af02      	add	r7, sp, #8
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
	  for( int y0 = 0 ; y0 < 320 ; y0 += 80 )
 80041a8:	2300      	movs	r3, #0
 80041aa:	647b      	str	r3, [r7, #68]	; 0x44
 80041ac:	e3d6      	b.n	800495c <nk_draw_fb+0x7c0>
	  {
	   framebuf_fill( pfb, 0x00000000 );
 80041ae:	2100      	movs	r1, #0
 80041b0:	6838      	ldr	r0, [r7, #0]
 80041b2:	f009 ff5a 	bl	800e06a <framebuf_fill>

	  {
		  const struct nk_command *cmd = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	643b      	str	r3, [r7, #64]	; 0x40
		  nk_foreach(cmd, ctx)
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f00c ff78 	bl	80110b0 <nk__begin>
 80041c0:	6438      	str	r0, [r7, #64]	; 0x40
 80041c2:	e3b5      	b.n	8004930 <nk_draw_fb+0x794>
		  {
			  //printf( "cmd->type = %d\n", cmd->type );
			  switch (cmd->type) {
 80041c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b11      	cmp	r3, #17
 80041ca:	f200 83ab 	bhi.w	8004924 <nk_draw_fb+0x788>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <nk_draw_fb+0x38>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	08004925 	.word	0x08004925
 80041d8:	0800421d 	.word	0x0800421d
 80041dc:	08004223 	.word	0x08004223
 80041e0:	08004925 	.word	0x08004925
 80041e4:	08004319 	.word	0x08004319
 80041e8:	0800451f 	.word	0x0800451f
 80041ec:	08004925 	.word	0x08004925
 80041f0:	08004709 	.word	0x08004709
 80041f4:	08004783 	.word	0x08004783
 80041f8:	08004925 	.word	0x08004925
 80041fc:	08004925 	.word	0x08004925
 8004200:	08004925 	.word	0x08004925
 8004204:	0800485b 	.word	0x0800485b
 8004208:	08004925 	.word	0x08004925
 800420c:	08004925 	.word	0x08004925
 8004210:	08004925 	.word	0x08004925
 8004214:	080047f7 	.word	0x080047f7
 8004218:	08004825 	.word	0x08004825
			  case NK_COMMAND_NOP: break;
			  case NK_COMMAND_SCISSOR: {
				  const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;
 800421c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421e:	617b      	str	r3, [r7, #20]
			  } break;
 8004220:	e381      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_LINE: {
				  const struct nk_command_line *l = (const struct nk_command_line*)cmd;
 8004222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004224:	61bb      	str	r3, [r7, #24]
				  if( l->begin.y == l->end.y )
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004232:	429a      	cmp	r2, r3
 8004234:	d121      	bne.n	800427a <nk_draw_fb+0xde>
				  {
					  framebuf_hline( pfb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800423c:	461e      	mov	r6, r3
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004244:	461a      	mov	r2, r3
 8004246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004248:	1ad4      	subs	r4, r2, r3
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004250:	461a      	mov	r2, r3
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004258:	1ad5      	subs	r5, r2, r3
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004260:	4613      	mov	r3, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fc82 	bl	8001b6c <nk_colot_to_rgb666>
 8004268:	4603      	mov	r3, r0
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	462b      	mov	r3, r5
 800426e:	4622      	mov	r2, r4
 8004270:	4631      	mov	r1, r6
 8004272:	6838      	ldr	r0, [r7, #0]
 8004274:	f009 ff49 	bl	800e10a <framebuf_hline>
				  }
				  else
				  {
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
				  }
			  } break;
 8004278:	e355      	b.n	8004926 <nk_draw_fb+0x78a>
				  else if( l->begin.x == l->end.x )
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004286:	429a      	cmp	r2, r3
 8004288:	d121      	bne.n	80042ce <nk_draw_fb+0x132>
					  framebuf_vline( pfb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004290:	461e      	mov	r6, r3
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004298:	461a      	mov	r2, r3
 800429a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429c:	1ad4      	subs	r4, r2, r3
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80042a4:	461a      	mov	r2, r3
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80042ac:	1ad5      	subs	r5, r2, r3
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80042b4:	4613      	mov	r3, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd fc58 	bl	8001b6c <nk_colot_to_rgb666>
 80042bc:	4603      	mov	r3, r0
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	462b      	mov	r3, r5
 80042c2:	4622      	mov	r2, r4
 80042c4:	4631      	mov	r1, r6
 80042c6:	6838      	ldr	r0, [r7, #0]
 80042c8:	f009 ff34 	bl	800e134 <framebuf_vline>
			  } break;
 80042cc:	e32b      	b.n	8004926 <nk_draw_fb+0x78a>
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042d4:	461e      	mov	r6, r3
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80042dc:	461a      	mov	r2, r3
 80042de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e0:	1ad5      	subs	r5, r2, r3
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80042e8:	4698      	mov	r8, r3
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f4:	1ad4      	subs	r4, r2, r3
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80042fc:	4613      	mov	r3, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd fc34 	bl	8001b6c <nk_colot_to_rgb666>
 8004304:	4603      	mov	r3, r0
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	9400      	str	r4, [sp, #0]
 800430a:	4643      	mov	r3, r8
 800430c:	462a      	mov	r2, r5
 800430e:	4631      	mov	r1, r6
 8004310:	6838      	ldr	r0, [r7, #0]
 8004312:	f009 ffdb 	bl	800e2cc <framebuf_line>
			  } break;
 8004316:	e306      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_RECT: {
				  const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	623b      	str	r3, [r7, #32]
				  //printf( "NK_COMMAND_RECT x: %d, y: %d, width: %d, height: %d, rounding: %d, thickness: %d\n", r->x, r->y, r->w, r->h, r->rounding, r->line_thickness );
				  //framebuf_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
				  int rad = 4;//r->rounding;
 800431c:	2304      	movs	r3, #4
 800431e:	61fb      	str	r3, [r7, #28]
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_0 );
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	8a1b      	ldrh	r3, [r3, #16]
 800432c:	441a      	add	r2, r3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	1ad4      	subs	r4, r2, r3
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004338:	461a      	mov	r2, r3
 800433a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	8a52      	ldrh	r2, [r2, #18]
 8004342:	441a      	add	r2, r3
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	1ad5      	subs	r5, r2, r3
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	6958      	ldr	r0, [r3, #20]
 800434c:	f7fd fc0e 	bl	8001b6c <nk_colot_to_rgb666>
 8004350:	4603      	mov	r3, r0
 8004352:	2201      	movs	r2, #1
 8004354:	9201      	str	r2, [sp, #4]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	462a      	mov	r2, r5
 800435c:	4621      	mov	r1, r4
 800435e:	6838      	ldr	r0, [r7, #0]
 8004360:	f00a f84b 	bl	800e3fa <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_90 );
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800436a:	461a      	mov	r2, r3
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	18d4      	adds	r4, r2, r3
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004376:	461a      	mov	r2, r3
 8004378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	8a52      	ldrh	r2, [r2, #18]
 8004380:	441a      	add	r2, r3
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	1ad5      	subs	r5, r2, r3
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	6958      	ldr	r0, [r3, #20]
 800438a:	f7fd fbef 	bl	8001b6c <nk_colot_to_rgb666>
 800438e:	4603      	mov	r3, r0
 8004390:	2202      	movs	r2, #2
 8004392:	9201      	str	r2, [sp, #4]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	462a      	mov	r2, r5
 800439a:	4621      	mov	r1, r4
 800439c:	6838      	ldr	r0, [r7, #0]
 800439e:	f00a f82c 	bl	800e3fa <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_180 );
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043a8:	461a      	mov	r2, r3
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	18d4      	adds	r4, r2, r3
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	18d5      	adds	r5, r2, r3
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	6958      	ldr	r0, [r3, #20]
 80043c2:	f7fd fbd3 	bl	8001b6c <nk_colot_to_rgb666>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2204      	movs	r2, #4
 80043ca:	9201      	str	r2, [sp, #4]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	462a      	mov	r2, r5
 80043d2:	4621      	mov	r1, r4
 80043d4:	6838      	ldr	r0, [r7, #0]
 80043d6:	f00a f810 	bl	800e3fa <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_270 );
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	8a1b      	ldrh	r3, [r3, #16]
 80043e6:	441a      	add	r2, r3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	1ad4      	subs	r4, r2, r3
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	18d5      	adds	r5, r2, r3
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	6958      	ldr	r0, [r3, #20]
 8004400:	f7fd fbb4 	bl	8001b6c <nk_colot_to_rgb666>
 8004404:	4603      	mov	r3, r0
 8004406:	2208      	movs	r2, #8
 8004408:	9201      	str	r2, [sp, #4]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	462a      	mov	r2, r5
 8004410:	4621      	mov	r1, r4
 8004412:	6838      	ldr	r0, [r7, #0]
 8004414:	f009 fff1 	bl	800e3fa <framebuf_circle_quadrant>

                    framebuf_hline( pfb, r->x+rad, r->y-y0, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800441e:	461a      	mov	r2, r3
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	18d4      	adds	r4, r2, r3
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800442a:	461a      	mov	r2, r3
 800442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442e:	1ad5      	subs	r5, r2, r3
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	8a1b      	ldrh	r3, [r3, #16]
 8004434:	461a      	mov	r2, r3
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	1ad2      	subs	r2, r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	1ad6      	subs	r6, r2, r3
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	6958      	ldr	r0, [r3, #20]
 8004442:	f7fd fb93 	bl	8001b6c <nk_colot_to_rgb666>
 8004446:	4603      	mov	r3, r0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4633      	mov	r3, r6
 800444c:	462a      	mov	r2, r5
 800444e:	4621      	mov	r1, r4
 8004450:	6838      	ldr	r0, [r7, #0]
 8004452:	f009 fe5a 	bl	800e10a <framebuf_hline>
                    framebuf_hline( pfb, r->x+rad, r->y-y0+r->h, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800445c:	461a      	mov	r2, r3
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	18d4      	adds	r4, r2, r3
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004468:	461a      	mov	r2, r3
 800446a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	8a52      	ldrh	r2, [r2, #18]
 8004472:	189d      	adds	r5, r3, r2
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	8a1b      	ldrh	r3, [r3, #16]
 8004478:	461a      	mov	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	1ad6      	subs	r6, r2, r3
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	6958      	ldr	r0, [r3, #20]
 8004486:	f7fd fb71 	bl	8001b6c <nk_colot_to_rgb666>
 800448a:	4603      	mov	r3, r0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	4633      	mov	r3, r6
 8004490:	462a      	mov	r2, r5
 8004492:	4621      	mov	r1, r4
 8004494:	6838      	ldr	r0, [r7, #0]
 8004496:	f009 fe38 	bl	800e10a <framebuf_hline>
                    framebuf_vline( pfb, r->x, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044a0:	461e      	mov	r6, r3
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ac:	1ad2      	subs	r2, r2, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	18d4      	adds	r4, r2, r3
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	8a5b      	ldrh	r3, [r3, #18]
 80044b6:	461a      	mov	r2, r3
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1ad5      	subs	r5, r2, r3
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	6958      	ldr	r0, [r3, #20]
 80044c4:	f7fd fb52 	bl	8001b6c <nk_colot_to_rgb666>
 80044c8:	4603      	mov	r3, r0
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	462b      	mov	r3, r5
 80044ce:	4622      	mov	r2, r4
 80044d0:	4631      	mov	r1, r6
 80044d2:	6838      	ldr	r0, [r7, #0]
 80044d4:	f009 fe2e 	bl	800e134 <framebuf_vline>
                    framebuf_vline( pfb, r->x+r->w, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044de:	461a      	mov	r2, r3
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	8a1b      	ldrh	r3, [r3, #16]
 80044e4:	18d4      	adds	r4, r2, r3
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044ec:	461a      	mov	r2, r3
 80044ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f0:	1ad2      	subs	r2, r2, r3
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	18d5      	adds	r5, r2, r3
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	8a5b      	ldrh	r3, [r3, #18]
 80044fa:	461a      	mov	r2, r3
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	1ad6      	subs	r6, r2, r3
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	6958      	ldr	r0, [r3, #20]
 8004508:	f7fd fb30 	bl	8001b6c <nk_colot_to_rgb666>
 800450c:	4603      	mov	r3, r0
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	4633      	mov	r3, r6
 8004512:	462a      	mov	r2, r5
 8004514:	4621      	mov	r1, r4
 8004516:	6838      	ldr	r0, [r7, #0]
 8004518:	f009 fe0c 	bl	800e134 <framebuf_vline>
			  } break;
 800451c:	e203      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_RECT_FILLED: {
				  const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;
 800451e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
				  //framebuf_fill_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
                  int rad = 4;//r->rounding;
 8004522:	2304      	movs	r3, #4
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
                  struct nk_color r_color = r->color;
 8004526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	3212      	adds	r2, #18
 800452e:	6810      	ldr	r0, [r2, #0]
 8004530:	6018      	str	r0, [r3, #0]
                  if( r_color.r == 50 )
 8004532:	7c3b      	ldrb	r3, [r7, #16]
 8004534:	2b32      	cmp	r3, #50	; 0x32
 8004536:	d107      	bne.n	8004548 <nk_draw_fb+0x3ac>
                  {
                	  r_color.r = 40;
 8004538:	2328      	movs	r3, #40	; 0x28
 800453a:	743b      	strb	r3, [r7, #16]
                	  r_color.g = 40;
 800453c:	2328      	movs	r3, #40	; 0x28
 800453e:	747b      	strb	r3, [r7, #17]
                	  r_color.b = 40;
 8004540:	2328      	movs	r3, #40	; 0x28
 8004542:	74bb      	strb	r3, [r7, #18]
                	  r_color.a = 255;
 8004544:	23ff      	movs	r3, #255	; 0xff
 8004546:	74fb      	strb	r3, [r7, #19]
                  }
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800454e:	461a      	mov	r2, r3
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	89db      	ldrh	r3, [r3, #14]
 8004554:	441a      	add	r2, r3
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1ad4      	subs	r4, r2, r3
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004560:	461a      	mov	r2, r3
 8004562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	8a12      	ldrh	r2, [r2, #16]
 800456a:	441a      	add	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad5      	subs	r5, r2, r3
 8004570:	6938      	ldr	r0, [r7, #16]
 8004572:	f7fd fafb 	bl	8001b6c <nk_colot_to_rgb666>
 8004576:	4603      	mov	r3, r0
 8004578:	2202      	movs	r2, #2
 800457a:	9201      	str	r2, [sp, #4]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	462a      	mov	r2, r5
 8004582:	4621      	mov	r1, r4
 8004584:	6838      	ldr	r0, [r7, #0]
 8004586:	f00a f84f 	bl	800e628 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004590:	461a      	mov	r2, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	18d4      	adds	r4, r2, r3
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800459c:	461a      	mov	r2, r3
 800459e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a4:	8a12      	ldrh	r2, [r2, #16]
 80045a6:	441a      	add	r2, r3
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	1ad5      	subs	r5, r2, r3
 80045ac:	6938      	ldr	r0, [r7, #16]
 80045ae:	f7fd fadd 	bl	8001b6c <nk_colot_to_rgb666>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2202      	movs	r2, #2
 80045b6:	9201      	str	r2, [sp, #4]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	462a      	mov	r2, r5
 80045be:	4621      	mov	r1, r4
 80045c0:	6838      	ldr	r0, [r7, #0]
 80045c2:	f00a f831 	bl	800e628 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	18d4      	adds	r4, r2, r3
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80045d8:	461a      	mov	r2, r3
 80045da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045dc:	1ad2      	subs	r2, r2, r3
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	18d5      	adds	r5, r2, r3
 80045e2:	6938      	ldr	r0, [r7, #16]
 80045e4:	f7fd fac2 	bl	8001b6c <nk_colot_to_rgb666>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2202      	movs	r2, #2
 80045ec:	9201      	str	r2, [sp, #4]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	462a      	mov	r2, r5
 80045f4:	4621      	mov	r1, r4
 80045f6:	6838      	ldr	r0, [r7, #0]
 80045f8:	f00a f816 	bl	800e628 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004602:	461a      	mov	r2, r3
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	89db      	ldrh	r3, [r3, #14]
 8004608:	441a      	add	r2, r3
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	1ad4      	subs	r4, r2, r3
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004614:	461a      	mov	r2, r3
 8004616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004618:	1ad2      	subs	r2, r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	18d5      	adds	r5, r2, r3
 800461e:	6938      	ldr	r0, [r7, #16]
 8004620:	f7fd faa4 	bl	8001b6c <nk_colot_to_rgb666>
 8004624:	4603      	mov	r3, r0
 8004626:	2202      	movs	r2, #2
 8004628:	9201      	str	r2, [sp, #4]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	462a      	mov	r2, r5
 8004630:	4621      	mov	r1, r4
 8004632:	6838      	ldr	r0, [r7, #0]
 8004634:	f009 fff8 	bl	800e628 <framebuf_fill_circle_quadrant>
                    // up and down
                    //framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, r->h, nk_colot_to_rgb666( r_color ) );
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800463e:	461a      	mov	r2, r3
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	18d4      	adds	r4, r2, r3
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800464a:	461a      	mov	r2, r3
 800464c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464e:	1ad5      	subs	r5, r2, r3
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	89db      	ldrh	r3, [r3, #14]
 8004654:	461a      	mov	r2, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad2      	subs	r2, r2, r3
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	1ad6      	subs	r6, r2, r3
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f7fd fa84 	bl	8001b6c <nk_colot_to_rgb666>
 8004664:	4603      	mov	r3, r0
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4633      	mov	r3, r6
 800466e:	462a      	mov	r2, r5
 8004670:	4621      	mov	r1, r4
 8004672:	6838      	ldr	r0, [r7, #0]
 8004674:	f009 fd11 	bl	800e09a <framebuf_fill_rect>
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0+r->h-rad, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800467e:	461a      	mov	r2, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	18d4      	adds	r4, r2, r3
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800468a:	461a      	mov	r2, r3
 800468c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004692:	8a12      	ldrh	r2, [r2, #16]
 8004694:	441a      	add	r2, r3
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1ad5      	subs	r5, r2, r3
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	89db      	ldrh	r3, [r3, #14]
 800469e:	461a      	mov	r2, r3
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1ad2      	subs	r2, r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	1ad6      	subs	r6, r2, r3
 80046a8:	6938      	ldr	r0, [r7, #16]
 80046aa:	f7fd fa5f 	bl	8001b6c <nk_colot_to_rgb666>
 80046ae:	4603      	mov	r3, r0
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	4633      	mov	r3, r6
 80046b8:	462a      	mov	r2, r5
 80046ba:	4621      	mov	r1, r4
 80046bc:	6838      	ldr	r0, [r7, #0]
 80046be:	f009 fcec 	bl	800e09a <framebuf_fill_rect>
                    // middle
                    framebuf_fill_rect(  pfb, r->x, r->y-y0+rad, r->w, r->h-rad-rad, nk_colot_to_rgb666( r_color ) );
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80046c8:	461e      	mov	r6, r3
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046d0:	461a      	mov	r2, r3
 80046d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d4:	1ad2      	subs	r2, r2, r3
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	18d5      	adds	r5, r2, r3
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	89db      	ldrh	r3, [r3, #14]
 80046de:	4698      	mov	r8, r3
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	8a1b      	ldrh	r3, [r3, #16]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1ad2      	subs	r2, r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1ad4      	subs	r4, r2, r3
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f7fd fa3c 	bl	8001b6c <nk_colot_to_rgb666>
 80046f4:	4603      	mov	r3, r0
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	9400      	str	r4, [sp, #0]
 80046fa:	4643      	mov	r3, r8
 80046fc:	462a      	mov	r2, r5
 80046fe:	4631      	mov	r1, r6
 8004700:	6838      	ldr	r0, [r7, #0]
 8004702:	f009 fcca 	bl	800e09a <framebuf_fill_rect>
			 } break;
 8004706:	e10e      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_CIRCLE: {
				  const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;
 8004708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
				  framebuf_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004712:	461a      	mov	r2, r3
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	89db      	ldrh	r3, [r3, #14]
 8004718:	4619      	mov	r1, r3
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	8a1b      	ldrh	r3, [r3, #16]
 800471e:	440b      	add	r3, r1
 8004720:	2b00      	cmp	r3, #0
 8004722:	da00      	bge.n	8004726 <nk_draw_fb+0x58a>
 8004724:	3303      	adds	r3, #3
 8004726:	109b      	asrs	r3, r3, #2
 8004728:	18d4      	adds	r4, r2, r3
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004730:	461a      	mov	r2, r3
 8004732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004734:	1ad2      	subs	r2, r2, r3
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	89db      	ldrh	r3, [r3, #14]
 800473a:	4619      	mov	r1, r3
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	8a1b      	ldrh	r3, [r3, #16]
 8004740:	440b      	add	r3, r1
 8004742:	2b00      	cmp	r3, #0
 8004744:	da00      	bge.n	8004748 <nk_draw_fb+0x5ac>
 8004746:	3303      	adds	r3, #3
 8004748:	109b      	asrs	r3, r3, #2
 800474a:	18d5      	adds	r5, r2, r3
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	89db      	ldrh	r3, [r3, #14]
 8004750:	461a      	mov	r2, r3
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	8a1b      	ldrh	r3, [r3, #16]
 8004756:	4413      	add	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	da00      	bge.n	800475e <nk_draw_fb+0x5c2>
 800475c:	3303      	adds	r3, #3
 800475e:	109b      	asrs	r3, r3, #2
 8004760:	461e      	mov	r6, r3
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004768:	4613      	mov	r3, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f7fd f9fe 	bl	8001b6c <nk_colot_to_rgb666>
 8004770:	4603      	mov	r3, r0
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	4633      	mov	r3, r6
 8004776:	462a      	mov	r2, r5
 8004778:	4621      	mov	r1, r4
 800477a:	6838      	ldr	r0, [r7, #0]
 800477c:	f009 fdbb 	bl	800e2f6 <framebuf_circle>
			  } break;
 8004780:	e0d1      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_CIRCLE_FILLED: {
				  const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;
 8004782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004784:	633b      	str	r3, [r7, #48]	; 0x30
				  framebuf_fill_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800478c:	461a      	mov	r2, r3
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	899b      	ldrh	r3, [r3, #12]
 8004792:	4619      	mov	r1, r3
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	89db      	ldrh	r3, [r3, #14]
 8004798:	440b      	add	r3, r1
 800479a:	2b00      	cmp	r3, #0
 800479c:	da00      	bge.n	80047a0 <nk_draw_fb+0x604>
 800479e:	3303      	adds	r3, #3
 80047a0:	109b      	asrs	r3, r3, #2
 80047a2:	18d4      	adds	r4, r2, r3
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	899b      	ldrh	r3, [r3, #12]
 80047b4:	4619      	mov	r1, r3
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	89db      	ldrh	r3, [r3, #14]
 80047ba:	440b      	add	r3, r1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da00      	bge.n	80047c2 <nk_draw_fb+0x626>
 80047c0:	3303      	adds	r3, #3
 80047c2:	109b      	asrs	r3, r3, #2
 80047c4:	18d5      	adds	r5, r2, r3
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	899b      	ldrh	r3, [r3, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	89db      	ldrh	r3, [r3, #14]
 80047d0:	4413      	add	r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da00      	bge.n	80047d8 <nk_draw_fb+0x63c>
 80047d6:	3303      	adds	r3, #3
 80047d8:	109b      	asrs	r3, r3, #2
 80047da:	461e      	mov	r6, r3
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	6918      	ldr	r0, [r3, #16]
 80047e0:	f7fd f9c4 	bl	8001b6c <nk_colot_to_rgb666>
 80047e4:	4603      	mov	r3, r0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4633      	mov	r3, r6
 80047ea:	462a      	mov	r2, r5
 80047ec:	4621      	mov	r1, r4
 80047ee:	6838      	ldr	r0, [r7, #0]
 80047f0:	f009 fe9e 	bl	800e530 <framebuf_fill_circle>
			  } break;
 80047f4:	e097      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_TEXT: {
				  const struct nk_command_text *t = (const struct nk_command_text*)cmd;
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
				  //framebuf_text( pfb, t->x, t->y-y0, (char *)t->string, nk_colot_to_rgb666( t->foreground ) );
				  lcd_text( pfb,  t->x, t->y-y0, (char *)t->string, 0xFFFF );
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004800:	b299      	uxth	r1, r3
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004808:	b29a      	uxth	r2, r3
 800480a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480c:	b29b      	uxth	r3, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	b29a      	uxth	r2, r3
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	3324      	adds	r3, #36	; 0x24
 8004816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800481a:	9000      	str	r0, [sp, #0]
 800481c:	6838      	ldr	r0, [r7, #0]
 800481e:	f7fd fc53 	bl	80020c8 <lcd_text>
			  } break;
 8004822:	e080      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_IMAGE: {
				  const struct nk_command_image *i = (const struct nk_command_image*)cmd;
 8004824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
				  framebuf_fill_rect( pfb, i->x, i->y-y0, i->w, i->h, 0x0003FFFF );
 8004828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004836:	461a      	mov	r2, r3
 8004838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	899b      	ldrh	r3, [r3, #12]
 8004840:	461c      	mov	r4, r3
 8004842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004844:	89db      	ldrh	r3, [r3, #14]
 8004846:	4619      	mov	r1, r3
 8004848:	4b4a      	ldr	r3, [pc, #296]	; (8004974 <nk_draw_fb+0x7d8>)
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	9100      	str	r1, [sp, #0]
 800484e:	4623      	mov	r3, r4
 8004850:	4601      	mov	r1, r0
 8004852:	6838      	ldr	r0, [r7, #0]
 8004854:	f009 fc21 	bl	800e09a <framebuf_fill_rect>
			  } break;
 8004858:	e065      	b.n	8004926 <nk_draw_fb+0x78a>
			  case NK_COMMAND_TRIANGLE_FILLED: {
				  const struct nk_command_triangle_filled *t = (const struct nk_command_triangle_filled*)cmd;
 800485a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
				  struct nk_color t_color = t->color;
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	60fb      	str	r3, [r7, #12]
				if( 1 )
				{
				  t_color.r = 175;
 8004864:	23af      	movs	r3, #175	; 0xaf
 8004866:	733b      	strb	r3, [r7, #12]
				  t_color.g = 175;
 8004868:	23af      	movs	r3, #175	; 0xaf
 800486a:	737b      	strb	r3, [r7, #13]
				  t_color.b = 175;
 800486c:	23af      	movs	r3, #175	; 0xaf
 800486e:	73bb      	strb	r3, [r7, #14]
				  t_color.a = 255;
 8004870:	23ff      	movs	r3, #255	; 0xff
 8004872:	73fb      	strb	r3, [r7, #15]
				}

				  framebuf_line( pfb, t->a.x, t->a.y-y0, t->b.x, t->b.y-y0, 0xFFFF );
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004882:	461a      	mov	r2, r3
 8004884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004886:	1ad2      	subs	r2, r2, r3
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800488e:	461c      	mov	r4, r3
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004896:	4619      	mov	r1, r3
 8004898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489a:	1acb      	subs	r3, r1, r3
 800489c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048a0:	9101      	str	r1, [sp, #4]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4623      	mov	r3, r4
 80048a6:	4601      	mov	r1, r0
 80048a8:	6838      	ldr	r0, [r7, #0]
 80048aa:	f009 fd0f 	bl	800e2cc <framebuf_line>
				  framebuf_line( pfb, t->b.x, t->b.y-y0, t->c.x, t->c.y-y0, 0xFFFF );
 80048ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80048b4:	4618      	mov	r0, r3
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80048bc:	461a      	mov	r2, r3
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	1ad2      	subs	r2, r2, r3
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80048c8:	461c      	mov	r4, r3
 80048ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048d0:	4619      	mov	r1, r3
 80048d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d4:	1acb      	subs	r3, r1, r3
 80048d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048da:	9101      	str	r1, [sp, #4]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	4623      	mov	r3, r4
 80048e0:	4601      	mov	r1, r0
 80048e2:	6838      	ldr	r0, [r7, #0]
 80048e4:	f009 fcf2 	bl	800e2cc <framebuf_line>
				  framebuf_line( pfb, t->c.x, t->c.y-y0, t->a.x, t->a.y-y0, 0xFFFF );
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80048ee:	4618      	mov	r0, r3
 80048f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048f6:	461a      	mov	r2, r3
 80048f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004902:	461c      	mov	r4, r3
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800490a:	4619      	mov	r1, r3
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	1acb      	subs	r3, r1, r3
 8004910:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004914:	9101      	str	r1, [sp, #4]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4623      	mov	r3, r4
 800491a:	4601      	mov	r1, r0
 800491c:	6838      	ldr	r0, [r7, #0]
 800491e:	f009 fcd5 	bl	800e2cc <framebuf_line>
			  } break;
 8004922:	e000      	b.n	8004926 <nk_draw_fb+0x78a>
			  default: break;
 8004924:	bf00      	nop
		  nk_foreach(cmd, ctx)
 8004926:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f00c fc2d 	bl	8011188 <nk__next>
 800492e:	6438      	str	r0, [r7, #64]	; 0x40
 8004930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	f47f ac46 	bne.w	80041c4 <nk_draw_fb+0x28>
			  }
		  }
	  }

		lcd_bmp( 0, y0, pfb->width, pfb->height, pfb->buf );
 8004938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493a:	b219      	sxth	r1, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	889b      	ldrh	r3, [r3, #4]
 8004940:	b21a      	sxth	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	88db      	ldrh	r3, [r3, #6]
 8004946:	b218      	sxth	r0, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4603      	mov	r3, r0
 8004950:	2000      	movs	r0, #0
 8004952:	f7fd fd19 	bl	8002388 <lcd_bmp>
	  for( int y0 = 0 ; y0 < 320 ; y0 += 80 )
 8004956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004958:	3350      	adds	r3, #80	; 0x50
 800495a:	647b      	str	r3, [r7, #68]	; 0x44
 800495c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004962:	f6ff ac24 	blt.w	80041ae <nk_draw_fb+0x12>
	  }
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	3748      	adds	r7, #72	; 0x48
 800496c:	46bd      	mov	sp, r7
 800496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004972:	bf00      	nop
 8004974:	0003ffff 	.word	0x0003ffff

08004978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b09a      	sub	sp, #104	; 0x68
 800497c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800497e:	f002 f886 	bl	8006a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004982:	f000 f9a7 	bl	8004cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004986:	f7fc ffa1 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 800498a:	f7fc fe75 	bl	8001678 <MX_DMA_Init>
  MX_QUADSPI1_Init();
 800498e:	f000 fb6f 	bl	8005070 <MX_QUADSPI1_Init>
  MX_ADC1_Init();
 8004992:	f7fc f9a1 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC2_Init();
 8004996:	f7fc fd6b 	bl	8001470 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 800499a:	f000 f9e9 	bl	8004d70 <MX_OPAMP1_Init>
  MX_DAC1_Init();
 800499e:	f7fc fd23 	bl	80013e8 <MX_DAC1_Init>
  MX_ADC3_Init();
 80049a2:	f7fc fa53 	bl	8000e4c <MX_ADC3_Init>
  MX_ADC4_Init();
 80049a6:	f7fc facb 	bl	8000f40 <MX_ADC4_Init>
  MX_ADC5_Init();
 80049aa:	f7fc fb31 	bl	8001010 <MX_ADC5_Init>
  MX_OPAMP3_Init();
 80049ae:	f000 fa0b 	bl	8004dc8 <MX_OPAMP3_Init>
  MX_OPAMP5_Init();
 80049b2:	f000 fa35 	bl	8004e20 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80049b6:	f000 fa5f 	bl	8004e78 <MX_OPAMP6_Init>
  MX_FMC_Init();
 80049ba:	f7fc feb7 	bl	800172c <MX_FMC_Init>
  MX_SPI3_Init();
 80049be:	f001 fcd7 	bl	8006370 <MX_SPI3_Init>
  MX_TIM1_Init();
 80049c2:	f001 fedb 	bl	800677c <MX_TIM1_Init>
  MX_TIM2_Init();
 80049c6:	f001 ff2b 	bl	8006820 <MX_TIM2_Init>
  MX_TIM3_Init();
 80049ca:	f001 ff9d 	bl	8006908 <MX_TIM3_Init>
  //float bx = -15800/989.0;
  //float ay = 250/1407.0;
  //float by = -1150/67.0;

  //solve([50=a*250+b,480-50=a*1760+b],[a,b])
  float ax = 38.0/151.0;
 80049ce:	4bad      	ldr	r3, [pc, #692]	; (8004c84 <main+0x30c>)
 80049d0:	653b      	str	r3, [r7, #80]	; 0x50
  float bx = -1950.0/151.0;
 80049d2:	4bad      	ldr	r3, [pc, #692]	; (8004c88 <main+0x310>)
 80049d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  //solve([50=a*387+b,320-50=a*1627+b],[a,b])
  float ay = 11.0/62.0;
 80049d6:	4bad      	ldr	r3, [pc, #692]	; (8004c8c <main+0x314>)
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
  float by = -1157.0/62.0;
 80049da:	4bad      	ldr	r3, [pc, #692]	; (8004c90 <main+0x318>)
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44

  uint16_t x = 0, y = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80049e2:	2300      	movs	r3, #0
 80049e4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t x_bck = 0, y_bck = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40



  tTsc2046 tsc;
  tsc2046_init( &tsc, &hspi3, GPIOA, GPIO_PIN_15, ax, bx, ay, by, 8 );
 80049f2:	f107 0010 	add.w	r0, r7, #16
 80049f6:	2308      	movs	r3, #8
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	edd7 1a11 	vldr	s3, [r7, #68]	; 0x44
 80049fe:	ed97 1a12 	vldr	s2, [r7, #72]	; 0x48
 8004a02:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8004a06:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004a12:	49a0      	ldr	r1, [pc, #640]	; (8004c94 <main+0x31c>)
 8004a14:	f01f ff50 	bl	80248b8 <tsc2046_init>

  lcd_config();
 8004a18:	f7fd f854 	bl	8001ac4 <lcd_config>

  lcd_rect( 50, 50, 2, 2, 0xFFFF );
 8004a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2302      	movs	r3, #2
 8004a24:	2202      	movs	r2, #2
 8004a26:	2132      	movs	r1, #50	; 0x32
 8004a28:	2032      	movs	r0, #50	; 0x32
 8004a2a:	f7fd f8ff 	bl	8001c2c <lcd_rect>
  lcd_rect( 240-50, 50, 2, 2, 0xFFFF );
 8004a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2302      	movs	r3, #2
 8004a36:	2202      	movs	r2, #2
 8004a38:	2132      	movs	r1, #50	; 0x32
 8004a3a:	20be      	movs	r0, #190	; 0xbe
 8004a3c:	f7fd f8f6 	bl	8001c2c <lcd_rect>
  lcd_rect( 50, 320-50, 2, 2, 0xFFFF );
 8004a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2302      	movs	r3, #2
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004a4e:	2032      	movs	r0, #50	; 0x32
 8004a50:	f7fd f8ec 	bl	8001c2c <lcd_rect>
  lcd_rect( 240-50, 320-50, 2, 2, 0xFFFF );
 8004a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004a62:	20be      	movs	r0, #190	; 0xbe
 8004a64:	f7fd f8e2 	bl	8001c2c <lcd_rect>

  while( 0 )
 8004a68:	bf00      	nop
	  lcd_rect( x, y, 2, 2, 0xFFFF );
	  printf("%d, %d, %d\n", cnt++, x, y );
	  HAL_Delay( 1 );
  }

  int d = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  d = lcd_set_pixel_bench( 100, 100, 0xFFFF );
 8004a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a72:	2164      	movs	r1, #100	; 0x64
 8004a74:	2064      	movs	r0, #100	; 0x64
 8004a76:	f7fd fa37 	bl	8001ee8 <lcd_set_pixel_bench>
 8004a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
  d = d+1;
 8004a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7e:	3301      	adds	r3, #1
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  static struct nk_buffer pool;
  static struct nk_user_font font;
  static uint8_t buf_cmds[1024*8] = {0};
  static uint8_t buf_pool[1024*8] = {0};

  nk_buffer_init_fixed( &cmds, buf_cmds, 1024*8 );
 8004a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a86:	4984      	ldr	r1, [pc, #528]	; (8004c98 <main+0x320>)
 8004a88:	4884      	ldr	r0, [pc, #528]	; (8004c9c <main+0x324>)
 8004a8a:	f009 fea1 	bl	800e7d0 <nk_buffer_init_fixed>
  nk_buffer_init_fixed( &pool, buf_pool, 1024*8 );
 8004a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a92:	4983      	ldr	r1, [pc, #524]	; (8004ca0 <main+0x328>)
 8004a94:	4883      	ldr	r0, [pc, #524]	; (8004ca4 <main+0x32c>)
 8004a96:	f009 fe9b 	bl	800e7d0 <nk_buffer_init_fixed>

  font.height = fontUbuntuBookRNormal16.bbxh;
 8004a9a:	4b83      	ldr	r3, [pc, #524]	; (8004ca8 <main+0x330>)
 8004a9c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa8:	4b80      	ldr	r3, [pc, #512]	; (8004cac <main+0x334>)
 8004aaa:	edc3 7a01 	vstr	s15, [r3, #4]
  font.width = text_width_f;
 8004aae:	4b7f      	ldr	r3, [pc, #508]	; (8004cac <main+0x334>)
 8004ab0:	4a7f      	ldr	r2, [pc, #508]	; (8004cb0 <main+0x338>)
 8004ab2:	609a      	str	r2, [r3, #8]
  nk_init_custom( &ctx, &cmds, &pool, &font );
 8004ab4:	4b7d      	ldr	r3, [pc, #500]	; (8004cac <main+0x334>)
 8004ab6:	4a7b      	ldr	r2, [pc, #492]	; (8004ca4 <main+0x32c>)
 8004ab8:	4978      	ldr	r1, [pc, #480]	; (8004c9c <main+0x324>)
 8004aba:	487e      	ldr	r0, [pc, #504]	; (8004cb4 <main+0x33c>)
 8004abc:	f00b fed0 	bl	8010860 <nk_init_custom>

	static uint8_t fb_buf[240*80*2];
	tFramebuf fb;

	framebuf_init( &fb, 240, 80, fb_buf );
 8004ac0:	1d38      	adds	r0, r7, #4
 8004ac2:	4b7d      	ldr	r3, [pc, #500]	; (8004cb8 <main+0x340>)
 8004ac4:	2250      	movs	r2, #80	; 0x50
 8004ac6:	21f0      	movs	r1, #240	; 0xf0
 8004ac8:	f009 fab3 	bl	800e032 <framebuf_init>

	  int pressed = 1;
 8004acc:	2301      	movs	r3, #1
 8004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
	  int pressed_bck = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	65bb      	str	r3, [r7, #88]	; 0x58
	  int pressed_bck2 = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
	int pressed_cnt = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
	static struct Oscilloscope osc = {0};

  while( 1 )
  {
	  x_bck = x;
 8004adc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004ade:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  y_bck = y;
 8004ae2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ae4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  tsc2046_read( &tsc, &x, &y );
 8004ae8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004aec:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8004af0:	f107 0310 	add.w	r3, r7, #16
 8004af4:	4618      	mov	r0, r3
 8004af6:	f01f ff77 	bl	80249e8 <tsc2046_read>

	  pressed_bck2 = pressed_bck;
 8004afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
	  pressed_bck = pressed;
 8004afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b00:	65bb      	str	r3, [r7, #88]	; 0x58
	  pressed = (x!=0);
 8004b02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf14      	ite	ne
 8004b08:	2301      	movne	r3, #1
 8004b0a:	2300      	moveq	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	65fb      	str	r3, [r7, #92]	; 0x5c

	  if(  (pressed || pressed_bck) )// && (pressed != pressed_bck) )
 8004b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <main+0x1a6>
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 808c 	beq.w	8004c36 <main+0x2be>
	  {
		  //printf("%d, %d, %d, %d, %d, %d, %d,\n", pressed_cnt, pressed, pressed_bck, x, y, x_bck, y_bck );
		  static int a = 0;
		  static int b = 0;
		  int d = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
		  a = get_systick();
 8004b22:	f7fc ff87 	bl	8001a34 <get_systick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	4a64      	ldr	r2, [pc, #400]	; (8004cbc <main+0x344>)
 8004b2a:	6013      	str	r3, [r2, #0]
		  pressed_cnt++;
 8004b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b2e:	3301      	adds	r3, #1
 8004b30:	657b      	str	r3, [r7, #84]	; 0x54
		  nk_input_begin( &ctx );
 8004b32:	4860      	ldr	r0, [pc, #384]	; (8004cb4 <main+0x33c>)
 8004b34:	f010 f9e2 	bl	8014efc <nk_input_begin>
		  if( pressed )
 8004b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d012      	beq.n	8004b64 <main+0x1ec>
		  {
			  nk_input_motion( &ctx, x, y );
 8004b3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b40:	4619      	mov	r1, r3
 8004b42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b44:	461a      	mov	r2, r3
 8004b46:	485b      	ldr	r0, [pc, #364]	; (8004cb4 <main+0x33c>)
 8004b48:	f010 fa78 	bl	801503c <nk_input_motion>
			  nk_input_button( &ctx, 0, x, y, 1 );
 8004b4c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b4e:	461a      	mov	r2, r3
 8004b50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b52:	4619      	mov	r1, r3
 8004b54:	2301      	movs	r3, #1
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	4855      	ldr	r0, [pc, #340]	; (8004cb4 <main+0x33c>)
 8004b5e:	f010 fab3 	bl	80150c8 <nk_input_button>
 8004b62:	e014      	b.n	8004b8e <main+0x216>
		  }
		  else if( pressed_bck )
 8004b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d011      	beq.n	8004b8e <main+0x216>
		  {
			  nk_input_motion( &ctx, x_bck, y_bck );
 8004b6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b72:	4619      	mov	r1, r3
 8004b74:	484f      	ldr	r0, [pc, #316]	; (8004cb4 <main+0x33c>)
 8004b76:	f010 fa61 	bl	801503c <nk_input_motion>
			  nk_input_button( &ctx, 0, x_bck, y_bck, 0 );
 8004b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b82:	2100      	movs	r1, #0
 8004b84:	9100      	str	r1, [sp, #0]
 8004b86:	2100      	movs	r1, #0
 8004b88:	484a      	ldr	r0, [pc, #296]	; (8004cb4 <main+0x33c>)
 8004b8a:	f010 fa9d 	bl	80150c8 <nk_input_button>
		  }
		  nk_input_end( &ctx );
 8004b8e:	4849      	ldr	r0, [pc, #292]	; (8004cb4 <main+0x33c>)
 8004b90:	f010 fa1c 	bl	8014fcc <nk_input_end>

		  oscilloscope_process(&osc, &ctx);
 8004b94:	4947      	ldr	r1, [pc, #284]	; (8004cb4 <main+0x33c>)
 8004b96:	484a      	ldr	r0, [pc, #296]	; (8004cc0 <main+0x348>)
 8004b98:	f7fd fce2 	bl	8002560 <oscilloscope_process>
		  nk_draw_fb( &ctx, &fb );
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4844      	ldr	r0, [pc, #272]	; (8004cb4 <main+0x33c>)
 8004ba2:	f7ff fafb 	bl	800419c <nk_draw_fb>
		  nk_clear(&ctx);
 8004ba6:	4843      	ldr	r0, [pc, #268]	; (8004cb4 <main+0x33c>)
 8004ba8:	f00b fec2 	bl	8010930 <nk_clear>
		  //HAL_Delay(10);
		  b = get_systick();
 8004bac:	f7fc ff42 	bl	8001a34 <get_systick>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4a44      	ldr	r2, [pc, #272]	; (8004cc4 <main+0x34c>)
 8004bb4:	6013      	str	r3, [r2, #0]
		  d = diff_systick( b, a );
 8004bb6:	4b43      	ldr	r3, [pc, #268]	; (8004cc4 <main+0x34c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <main+0x344>)
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fc ff43 	bl	8001a4c <diff_systick>
 8004bc6:	6378      	str	r0, [r7, #52]	; 0x34
		  if( x )
 8004bc8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d033      	beq.n	8004c36 <main+0x2be>
		  {
			  lcd_rect( x-4, y, 4, 2, 0xFFFF );
 8004bce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bd0:	3b04      	subs	r3, #4
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	b218      	sxth	r0, r3
 8004bd6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bd8:	b219      	sxth	r1, r3
 8004bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2302      	movs	r3, #2
 8004be2:	2204      	movs	r2, #4
 8004be4:	f7fd f822 	bl	8001c2c <lcd_rect>
			  lcd_rect( x+2, y, 4, 2, 0xFFFF );
 8004be8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bea:	3302      	adds	r3, #2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	b218      	sxth	r0, r3
 8004bf0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bf2:	b219      	sxth	r1, r3
 8004bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	f7fd f815 	bl	8001c2c <lcd_rect>
			  lcd_rect( x, y-4, 2, 4, 0xFFFF );
 8004c02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c04:	b218      	sxth	r0, r3
 8004c06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	b219      	sxth	r1, r3
 8004c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2304      	movs	r3, #4
 8004c16:	2202      	movs	r2, #2
 8004c18:	f7fd f808 	bl	8001c2c <lcd_rect>
			  lcd_rect( x, y+2, 2, 4, 0xFFFF );
 8004c1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c1e:	b218      	sxth	r0, r3
 8004c20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c22:	3302      	adds	r3, #2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	b219      	sxth	r1, r3
 8004c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2304      	movs	r3, #4
 8004c30:	2202      	movs	r2, #2
 8004c32:	f7fc fffb 	bl	8001c2c <lcd_rect>
	  }
	  //else if( nk_window_is_collapsed( &ctx, "STM32G4 Scope" ) )
	  {
		  static int collapsed = 0;
		  static int collapsed_bck = 0;
		  collapsed_bck = collapsed;
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <main+0x350>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <main+0x354>)
 8004c3c:	6013      	str	r3, [r2, #0]
		  collapsed = nk_window_is_collapsed( &ctx, "STM32G4 Scope" );
 8004c3e:	4924      	ldr	r1, [pc, #144]	; (8004cd0 <main+0x358>)
 8004c40:	481c      	ldr	r0, [pc, #112]	; (8004cb4 <main+0x33c>)
 8004c42:	f01f fe01 	bl	8024848 <nk_window_is_collapsed>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <main+0x350>)
 8004c4a:	6013      	str	r3, [r2, #0]
		  test_scope( !collapsed );
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <main+0x350>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fdfc 	bl	8005858 <test_scope>
		  if( collapsed != collapsed_bck )
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <main+0x350>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <main+0x354>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f43f af37 	beq.w	8004adc <main+0x164>
		  {
			  lcd_rect( 0, 0, 480, 320, 0x0000 );
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004c76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fc ffd5 	bl	8001c2c <lcd_rect>
	  x_bck = x;
 8004c82:	e72b      	b.n	8004adc <main+0x164>
 8004c84:	3e80d902 	.word	0x3e80d902
 8004c88:	c14e9f5d 	.word	0xc14e9f5d
 8004c8c:	3e35ad6b 	.word	0x3e35ad6b
 8004c90:	c1954a53 	.word	0xc1954a53
 8004c94:	20016808 	.word	0x20016808
 8004c98:	20000848 	.word	0x20000848
 8004c9c:	2000080c 	.word	0x2000080c
 8004ca0:	20002884 	.word	0x20002884
 8004ca4:	20002848 	.word	0x20002848
 8004ca8:	0802a460 	.word	0x0802a460
 8004cac:	20004884 	.word	0x20004884
 8004cb0:	08001a8d 	.word	0x08001a8d
 8004cb4:	20004890 	.word	0x20004890
 8004cb8:	20007ef8 	.word	0x20007ef8
 8004cbc:	200114f8 	.word	0x200114f8
 8004cc0:	200114fc 	.word	0x200114fc
 8004cc4:	200115dc 	.word	0x200115dc
 8004cc8:	200115e0 	.word	0x200115e0
 8004ccc:	200115e4 	.word	0x200115e4
 8004cd0:	08028250 	.word	0x08028250

08004cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b094      	sub	sp, #80	; 0x50
 8004cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cda:	f107 0318 	add.w	r3, r7, #24
 8004cde:	2238      	movs	r2, #56	; 0x38
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f020 fca1 	bl	802562a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ce8:	1d3b      	adds	r3, r7, #4
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	60da      	str	r2, [r3, #12]
 8004cf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f005 fd26 	bl	800a748 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d04:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d06:	2302      	movs	r3, #2
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8004d0e:	2306      	movs	r3, #6
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004d12:	2355      	movs	r3, #85	; 0x55
 8004d14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d16:	2302      	movs	r3, #2
 8004d18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d22:	f107 0318 	add.w	r3, r7, #24
 8004d26:	4618      	mov	r0, r3
 8004d28:	f006 f89c 	bl	800ae64 <HAL_RCC_OscConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004d32:	f000 f818 	bl	8004d66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d36:	230f      	movs	r3, #15
 8004d38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f006 fba0 	bl	800b494 <HAL_RCC_ClockConfig>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004d5a:	f000 f804 	bl	8004d66 <Error_Handler>
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3750      	adds	r7, #80	; 0x50
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d6a:	b672      	cpsid	i
}
 8004d6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d6e:	e7fe      	b.n	8004d6e <Error_Handler+0x8>

08004d70 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp5;
OPAMP_HandleTypeDef hopamp6;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004d76:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <MX_OPAMP1_Init+0x54>)
 8004d78:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004d82:	2240      	movs	r2, #64	; 0x40
 8004d84:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004d86:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004d88:	2208      	movs	r2, #8
 8004d8a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004dac:	4804      	ldr	r0, [pc, #16]	; (8004dc0 <MX_OPAMP1_Init+0x50>)
 8004dae:	f005 fbc9 	bl	800a544 <HAL_OPAMP_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 8004db8:	f7ff ffd5 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004dbc:	bf00      	nop
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200115e8 	.word	0x200115e8
 8004dc4:	40010300 	.word	0x40010300

08004dc8 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004dce:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <MX_OPAMP3_Init+0x54>)
 8004dd0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004df0:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004e04:	4804      	ldr	r0, [pc, #16]	; (8004e18 <MX_OPAMP3_Init+0x50>)
 8004e06:	f005 fb9d 	bl	800a544 <HAL_OPAMP_Init>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 8004e10:	f7ff ffa9 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004e14:	bf00      	nop
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20011624 	.word	0x20011624
 8004e1c:	40010308 	.word	0x40010308

08004e20 <MX_OPAMP5_Init>:
/* OPAMP5 init function */
void MX_OPAMP5_Init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8004e24:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <MX_OPAMP5_Init+0x54>)
 8004e28:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004e2a:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8004e5c:	4804      	ldr	r0, [pc, #16]	; (8004e70 <MX_OPAMP5_Init+0x50>)
 8004e5e:	f005 fb71 	bl	800a544 <HAL_OPAMP_Init>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <MX_OPAMP5_Init+0x4c>
  {
    Error_Handler();
 8004e68:	f7ff ff7d 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20011660 	.word	0x20011660
 8004e74:	40010310 	.word	0x40010310

08004e78 <MX_OPAMP6_Init>:
/* OPAMP6 init function */
void MX_OPAMP6_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8004e7c:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <MX_OPAMP6_Init+0x54>)
 8004e80:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004e90:	2208      	movs	r2, #8
 8004e92:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8004eb4:	4804      	ldr	r0, [pc, #16]	; (8004ec8 <MX_OPAMP6_Init+0x50>)
 8004eb6:	f005 fb45 	bl	800a544 <HAL_OPAMP_Init>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 8004ec0:	f7ff ff51 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8004ec4:	bf00      	nop
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	2001169c 	.word	0x2001169c
 8004ecc:	40010314 	.word	0x40010314

08004ed0 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed8:	f107 031c 	add.w	r3, r7, #28
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a4a      	ldr	r2, [pc, #296]	; (8005018 <HAL_OPAMP_MspInit+0x148>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d119      	bne.n	8004f26 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef2:	4b4a      	ldr	r3, [pc, #296]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	4a49      	ldr	r2, [pc, #292]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004efe:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8004f0a:	2388      	movs	r3, #136	; 0x88
 8004f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f16:	f107 031c 	add.w	r3, r7, #28
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f20:	f005 f976 	bl	800a210 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }
}
 8004f24:	e073      	b.n	800500e <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP3)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <HAL_OPAMP_MspInit+0x150>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d118      	bne.n	8004f62 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f30:	4b3a      	ldr	r3, [pc, #232]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f34:	4a39      	ldr	r2, [pc, #228]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004f36:	f043 0302 	orr.w	r3, r3, #2
 8004f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f3c:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004f48:	2305      	movs	r3, #5
 8004f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f54:	f107 031c 	add.w	r3, r7, #28
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4832      	ldr	r0, [pc, #200]	; (8005024 <HAL_OPAMP_MspInit+0x154>)
 8004f5c:	f005 f958 	bl	800a210 <HAL_GPIO_Init>
}
 8004f60:	e055      	b.n	800500e <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP5)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a30      	ldr	r2, [pc, #192]	; (8005028 <HAL_OPAMP_MspInit+0x158>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d119      	bne.n	8004fa0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f70:	4a2a      	ldr	r2, [pc, #168]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004f72:	f043 0302 	orr.w	r3, r3, #2
 8004f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f78:	4b28      	ldr	r3, [pc, #160]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004f84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f92:	f107 031c 	add.w	r3, r7, #28
 8004f96:	4619      	mov	r1, r3
 8004f98:	4822      	ldr	r0, [pc, #136]	; (8005024 <HAL_OPAMP_MspInit+0x154>)
 8004f9a:	f005 f939 	bl	800a210 <HAL_GPIO_Init>
}
 8004f9e:	e036      	b.n	800500e <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP6)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a21      	ldr	r2, [pc, #132]	; (800502c <HAL_OPAMP_MspInit+0x15c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d131      	bne.n	800500e <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004faa:	4b1c      	ldr	r3, [pc, #112]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fb6:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <HAL_OPAMP_MspInit+0x14c>)
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fe6:	f107 031c 	add.w	r3, r7, #28
 8004fea:	4619      	mov	r1, r3
 8004fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff0:	f005 f90e 	bl	800a210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005002:	f107 031c 	add.w	r3, r7, #28
 8005006:	4619      	mov	r1, r3
 8005008:	4806      	ldr	r0, [pc, #24]	; (8005024 <HAL_OPAMP_MspInit+0x154>)
 800500a:	f005 f901 	bl	800a210 <HAL_GPIO_Init>
}
 800500e:	bf00      	nop
 8005010:	3730      	adds	r7, #48	; 0x30
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40010300 	.word	0x40010300
 800501c:	40021000 	.word	0x40021000
 8005020:	40010308 	.word	0x40010308
 8005024:	48000400 	.word	0x48000400
 8005028:	40010310 	.word	0x40010310
 800502c:	40010314 	.word	0x40010314

08005030 <HAL_QSPI_TxCpltCallback>:
    uint32_t SIOOMode,
	enum ePsram_Direction direction
);

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    TxCpltCallback = 1;
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <HAL_QSPI_TxCpltCallback+0x1c>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	200116d8 	.word	0x200116d8

08005050 <HAL_QSPI_RxCpltCallback>:
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
    RxCpltCallback = 1;
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <HAL_QSPI_RxCpltCallback+0x1c>)
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	200116d9 	.word	0x200116d9

08005070 <MX_QUADSPI1_Init>:
QSPI_HandleTypeDef hqspi1;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8005074:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 8005076:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <MX_QUADSPI1_Init+0x54>)
 8005078:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 6;
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 800507c:	2206      	movs	r2, #6
 800507e:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 8005082:	2201      	movs	r2, #1
 8005084:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 8005088:	2200      	movs	r2, #0
 800508a:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 23;
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 800508e:	2217      	movs	r2, #23
 8005090:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 8005094:	2200      	movs	r2, #0
 8005096:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_2;
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 80050a0:	2280      	movs	r2, #128	; 0x80
 80050a2:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80050aa:	4805      	ldr	r0, [pc, #20]	; (80050c0 <MX_QUADSPI1_Init+0x50>)
 80050ac:	f005 fbf0 	bl	800a890 <HAL_QSPI_Init>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 80050b6:	f7ff fe56 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	200116dc 	.word	0x200116dc
 80050c4:	a0001000 	.word	0xa0001000

080050c8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b0a0      	sub	sp, #128	; 0x80
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050e0:	f107 0318 	add.w	r3, r7, #24
 80050e4:	2254      	movs	r2, #84	; 0x54
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f020 fa9e 	bl	802562a <memset>
  if(qspiHandle->Instance==QUADSPI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a54      	ldr	r2, [pc, #336]	; (8005244 <HAL_QSPI_MspInit+0x17c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	f040 80a1 	bne.w	800523c <HAL_QSPI_MspInit+0x174>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80050fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8005100:	2300      	movs	r3, #0
 8005102:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005104:	f107 0318 	add.w	r3, r7, #24
 8005108:	4618      	mov	r0, r3
 800510a:	f006 fbb3 	bl	800b874 <HAL_RCCEx_PeriphCLKConfig>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8005114:	f7ff fe27 	bl	8004d66 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005118:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	4a4a      	ldr	r2, [pc, #296]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 800511e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005122:	6513      	str	r3, [r2, #80]	; 0x50
 8005124:	4b48      	ldr	r3, [pc, #288]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 8005126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005130:	4b45      	ldr	r3, [pc, #276]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	4a44      	ldr	r2, [pc, #272]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800513c:	4b42      	ldr	r3, [pc, #264]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 800513e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005148:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 800514a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514c:	4a3e      	ldr	r2, [pc, #248]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 800514e:	f043 0302 	orr.w	r3, r3, #2
 8005152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005154:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 8005156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005160:	4b39      	ldr	r3, [pc, #228]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 8005162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005164:	4a38      	ldr	r2, [pc, #224]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 8005166:	f043 0308 	orr.w	r3, r3, #8
 800516a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800516c:	4b36      	ldr	r3, [pc, #216]	; (8005248 <HAL_QSPI_MspInit+0x180>)
 800516e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> QUADSPI1_BK2_IO2
    PC4     ------> QUADSPI1_BK2_IO3
    PB10     ------> QUADSPI1_CLK
    PD3     ------> QUADSPI1_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8005178:	231e      	movs	r3, #30
 800517a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517c:	2302      	movs	r3, #2
 800517e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005184:	2300      	movs	r3, #0
 8005186:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005188:	230a      	movs	r3, #10
 800518a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800518c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005190:	4619      	mov	r1, r3
 8005192:	482e      	ldr	r0, [pc, #184]	; (800524c <HAL_QSPI_MspInit+0x184>)
 8005194:	f005 f83c 	bl	800a210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800519c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a6:	2300      	movs	r3, #0
 80051a8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80051aa:	230a      	movs	r3, #10
 80051ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051b2:	4619      	mov	r1, r3
 80051b4:	4826      	ldr	r0, [pc, #152]	; (8005250 <HAL_QSPI_MspInit+0x188>)
 80051b6:	f005 f82b 	bl	800a210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80051ba:	2308      	movs	r3, #8
 80051bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051be:	2302      	movs	r3, #2
 80051c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c6:	2300      	movs	r3, #0
 80051c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80051ca:	230a      	movs	r3, #10
 80051cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051d2:	4619      	mov	r1, r3
 80051d4:	481f      	ldr	r0, [pc, #124]	; (8005254 <HAL_QSPI_MspInit+0x18c>)
 80051d6:	f005 f81b 	bl	800a210 <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA1_Channel1;
 80051da:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_QSPI_MspInit+0x194>)
 80051de:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_QUADSPI;
 80051e0:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 80051e2:	2228      	movs	r2, #40	; 0x28
 80051e4:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 80051e8:	2210      	movs	r2, #16
 80051ea:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 80051f2:	4b19      	ldr	r3, [pc, #100]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 80051f4:	2280      	movs	r2, #128	; 0x80
 80051f6:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051f8:	4b17      	ldr	r3, [pc, #92]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 8005200:	2200      	movs	r2, #0
 8005202:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 8005206:	2200      	movs	r2, #0
 8005208:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 800520c:	2200      	movs	r2, #0
 800520e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 8005210:	4811      	ldr	r0, [pc, #68]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 8005212:	f004 fccb 	bl	8009bac <HAL_DMA_Init>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_QSPI_MspInit+0x158>
    {
      Error_Handler();
 800521c:	f7ff fda3 	bl	8004d66 <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 8005224:	63da      	str	r2, [r3, #60]	; 0x3c
 8005226:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <HAL_QSPI_MspInit+0x190>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6293      	str	r3, [r2, #40]	; 0x28

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 800522c:	2200      	movs	r2, #0
 800522e:	2100      	movs	r1, #0
 8005230:	205f      	movs	r0, #95	; 0x5f
 8005232:	f004 f8cc 	bl	80093ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005236:	205f      	movs	r0, #95	; 0x5f
 8005238:	f004 f8e3 	bl	8009402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800523c:	bf00      	nop
 800523e:	3780      	adds	r7, #128	; 0x80
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	a0001000 	.word	0xa0001000
 8005248:	40021000 	.word	0x40021000
 800524c:	48000800 	.word	0x48000800
 8005250:	48000400 	.word	0x48000400
 8005254:	48000c00 	.word	0x48000c00
 8005258:	20011728 	.word	0x20011728
 800525c:	40020008 	.word	0x40020008

08005260 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	605a      	str	r2, [r3, #4]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	605a      	str	r2, [r3, #4]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	605a      	str	r2, [r3, #4]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	605a      	str	r2, [r3, #4]
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <scope_init>:
#include "scope.h"

static tScope *_scope;

void scope_init( tScope *scope, uint16_t trigger_level, uint16_t sample_rate, uint16_t *buffer1, uint16_t *buffer2, uint16_t *buffer3, uint16_t *buffer4, uint16_t len )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	817b      	strh	r3, [r7, #10]
 80052ee:	4613      	mov	r3, r2
 80052f0:	813b      	strh	r3, [r7, #8]
	scope->trigger_level = trigger_level;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	897a      	ldrh	r2, [r7, #10]
 80052f6:	82da      	strh	r2, [r3, #22]
	scope->sample_rate = sample_rate;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	893a      	ldrh	r2, [r7, #8]
 80052fc:	805a      	strh	r2, [r3, #2]
	scope->buffer1 = buffer1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	605a      	str	r2, [r3, #4]
	scope->buffer2 = buffer2;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	609a      	str	r2, [r3, #8]
	scope->buffer3 = buffer3;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	60da      	str	r2, [r3, #12]
	scope->buffer4 = buffer4;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	611a      	str	r2, [r3, #16]
	scope->len = len;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800531a:	829a      	strh	r2, [r3, #20]
	scope->trigger_location = 0;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	831a      	strh	r2, [r3, #24]
	scope->state = SCOPE_STATE_RESET;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]

	_scope = scope;
 8005328:	4a13      	ldr	r2, [pc, #76]	; (8005378 <scope_init+0x98>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6013      	str	r3, [r2, #0]
	extern DMA_HandleTypeDef hdma_adc5;
	extern DMA_HandleTypeDef hdma_adc4;
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim2;

	scope->hadc1 = &hadc1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a12      	ldr	r2, [pc, #72]	; (800537c <scope_init+0x9c>)
 8005332:	61da      	str	r2, [r3, #28]
	scope->hadc2 = &hadc3;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <scope_init+0xa0>)
 8005338:	621a      	str	r2, [r3, #32]
	scope->hadc3 = &hadc5;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a11      	ldr	r2, [pc, #68]	; (8005384 <scope_init+0xa4>)
 800533e:	625a      	str	r2, [r3, #36]	; 0x24
	scope->hadc4 = &hadc4;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a11      	ldr	r2, [pc, #68]	; (8005388 <scope_init+0xa8>)
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
	scope->hdma_adc1 = &hdma_adc1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a10      	ldr	r2, [pc, #64]	; (800538c <scope_init+0xac>)
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
	scope->hdma_adc2 = &hdma_adc3;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a10      	ldr	r2, [pc, #64]	; (8005390 <scope_init+0xb0>)
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
	scope->hdma_adc3 = &hdma_adc5;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a0f      	ldr	r2, [pc, #60]	; (8005394 <scope_init+0xb4>)
 8005356:	635a      	str	r2, [r3, #52]	; 0x34
	scope->hdma_adc4 = &hdma_adc4;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a0f      	ldr	r2, [pc, #60]	; (8005398 <scope_init+0xb8>)
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
	scope->htim1 = &htim1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4a0e      	ldr	r2, [pc, #56]	; (800539c <scope_init+0xbc>)
 8005362:	63da      	str	r2, [r3, #60]	; 0x3c
	scope->htim2 = &htim2;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a0e      	ldr	r2, [pc, #56]	; (80053a0 <scope_init+0xc0>)
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
	//MX_DMA_Init();
	//MX_ADC1_Init();
	//MX_OPAMP1_Init();
	//MX_TIM1_Init();
	//MX_TIM2_Init();
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20011788 	.word	0x20011788
 800537c:	20000384 	.word	0x20000384
 8005380:	200003f0 	.word	0x200003f0
 8005384:	200004c8 	.word	0x200004c8
 8005388:	2000045c 	.word	0x2000045c
 800538c:	20000534 	.word	0x20000534
 8005390:	20000594 	.word	0x20000594
 8005394:	20000654 	.word	0x20000654
 8005398:	200005f4 	.word	0x200005f4
 800539c:	20016870 	.word	0x20016870
 80053a0:	200168bc 	.word	0x200168bc
 80053a4:	00000000 	.word	0x00000000

080053a8 <scope_start>:
	scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = 0;
	scope->state = SCOPE_STATE_RESET;
}

void scope_start( tScope *scope )
{
 80053a8:	b5b0      	push	{r4, r5, r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e009      	b.n	80053ca <scope_start+0x22>
	{
		scope->CNDTRs[i] = 0;
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3310      	adds	r3, #16
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	ddf2      	ble.n	80053b6 <scope_start+0xe>
	}

	__HAL_DBGMCU_FREEZE_TIM1();
 80053d0:	4b5b      	ldr	r3, [pc, #364]	; (8005540 <scope_start+0x198>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	4a5a      	ldr	r2, [pc, #360]	; (8005540 <scope_start+0x198>)
 80053d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053da:	6113      	str	r3, [r2, #16]
	__HAL_DBGMCU_FREEZE_TIM2();
 80053dc:	4b58      	ldr	r3, [pc, #352]	; (8005540 <scope_start+0x198>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a57      	ldr	r2, [pc, #348]	; (8005540 <scope_start+0x198>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6093      	str	r3, [r2, #8]

	extern DAC_HandleTypeDef hdac2;
	int vcc = 3.3;
 80053e8:	2303      	movs	r3, #3
 80053ea:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (vcc/2.0)/vcc*4095);
 80053ec:	68b8      	ldr	r0, [r7, #8]
 80053ee:	f7fb f8c1 	bl	8000574 <__aeabi_i2d>
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053fa:	f7fb fa4f 	bl	800089c <__aeabi_ddiv>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4614      	mov	r4, r2
 8005404:	461d      	mov	r5, r3
 8005406:	68b8      	ldr	r0, [r7, #8]
 8005408:	f7fb f8b4 	bl	8000574 <__aeabi_i2d>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4620      	mov	r0, r4
 8005412:	4629      	mov	r1, r5
 8005414:	f7fb fa42 	bl	800089c <__aeabi_ddiv>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	a345      	add	r3, pc, #276	; (adr r3, 8005538 <scope_start+0x190>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fb f90f 	bl	8000648 <__aeabi_dmul>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	f7fb fbe1 	bl	8000bf8 <__aeabi_d2uiz>
 8005436:	4603      	mov	r3, r0
 8005438:	2200      	movs	r2, #0
 800543a:	2100      	movs	r1, #0
 800543c:	4841      	ldr	r0, [pc, #260]	; (8005544 <scope_start+0x19c>)
 800543e:	f004 f93d 	bl	80096bc <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8005442:	2100      	movs	r1, #0
 8005444:	483f      	ldr	r0, [pc, #252]	; (8005544 <scope_start+0x19c>)
 8005446:	f004 f818 	bl	800947a <HAL_DAC_Start>

	extern OPAMP_HandleTypeDef hopamp1;
	extern OPAMP_HandleTypeDef hopamp3;
	extern OPAMP_HandleTypeDef hopamp5;
	extern OPAMP_HandleTypeDef hopamp6;
	HAL_OPAMP_Start(&hopamp1);
 800544a:	483f      	ldr	r0, [pc, #252]	; (8005548 <scope_start+0x1a0>)
 800544c:	f005 f94a 	bl	800a6e4 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8005450:	483e      	ldr	r0, [pc, #248]	; (800554c <scope_start+0x1a4>)
 8005452:	f005 f947 	bl	800a6e4 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 8005456:	483e      	ldr	r0, [pc, #248]	; (8005550 <scope_start+0x1a8>)
 8005458:	f005 f944 	bl	800a6e4 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp6);
 800545c:	483d      	ldr	r0, [pc, #244]	; (8005554 <scope_start+0x1ac>)
 800545e:	f005 f941 	bl	800a6e4 <HAL_OPAMP_Start>

	HAL_ADCEx_Calibration_Start( scope->hadc1, ADC_SINGLE_ENDED );
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	217f      	movs	r1, #127	; 0x7f
 8005468:	4618      	mov	r0, r3
 800546a:	f003 fd43 	bl	8008ef4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc2, ADC_SINGLE_ENDED );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	217f      	movs	r1, #127	; 0x7f
 8005474:	4618      	mov	r0, r3
 8005476:	f003 fd3d 	bl	8008ef4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc3, ADC_SINGLE_ENDED );
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	217f      	movs	r1, #127	; 0x7f
 8005480:	4618      	mov	r0, r3
 8005482:	f003 fd37 	bl	8008ef4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc4, ADC_SINGLE_ENDED );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	217f      	movs	r1, #127	; 0x7f
 800548c:	4618      	mov	r0, r3
 800548e:	f003 fd31 	bl	8008ef4 <HAL_ADCEx_Calibration_Start>

	LL_ADC_DisableIT_AWD1( scope->hadc1->Instance );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ff01 	bl	80052a0 <LL_ADC_DisableIT_AWD1>
	LL_ADC_DisableIT_AWD2( scope->hadc1->Instance );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff ff0b 	bl	80052c0 <LL_ADC_DisableIT_AWD2>
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD1 );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	601a      	str	r2, [r3, #0]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD2 );
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054be:	601a      	str	r2, [r3, #0]

	scope->htim1->Instance->CNT = 0;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24
	scope->htim2->Instance->CNT = 0;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2200      	movs	r2, #0
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_ADC_Start_DMA( scope->hadc1, (uint32_t*)scope->buffer1, scope->len );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69d8      	ldr	r0, [r3, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6859      	ldr	r1, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8a9b      	ldrh	r3, [r3, #20]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f002 f8b7 	bl	8007654 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc2, (uint32_t*)scope->buffer2, scope->len );
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a18      	ldr	r0, [r3, #32]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6899      	ldr	r1, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8a9b      	ldrh	r3, [r3, #20]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f002 f8ae 	bl	8007654 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc3, (uint32_t*)scope->buffer3, scope->len );
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68d9      	ldr	r1, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8a9b      	ldrh	r3, [r3, #20]
 8005504:	461a      	mov	r2, r3
 8005506:	f002 f8a5 	bl	8007654 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc4, (uint32_t*)scope->buffer4, scope->len );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6919      	ldr	r1, [r3, #16]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8a9b      	ldrh	r3, [r3, #20]
 8005516:	461a      	mov	r2, r3
 8005518:	f002 f89c 	bl	8007654 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start( scope->htim1 );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	4618      	mov	r0, r3
 8005522:	f007 f8b7 	bl	800c694 <HAL_TIM_Base_Start>
	scope->state = SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bdb0      	pop	{r4, r5, r7, pc}
 8005534:	f3af 8000 	nop.w
 8005538:	00000000 	.word	0x00000000
 800553c:	40affe00 	.word	0x40affe00
 8005540:	e0042000 	.word	0xe0042000
 8005544:	200006cc 	.word	0x200006cc
 8005548:	200115e8 	.word	0x200115e8
 800554c:	20011624 	.word	0x20011624
 8005550:	20011660 	.word	0x20011660
 8005554:	2001169c 	.word	0x2001169c

08005558 <scope_stop>:

void scope_stop( tScope *scope )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop( scope->htim1 );
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	4618      	mov	r0, r3
 8005566:	f007 f905 	bl	800c774 <HAL_TIM_Base_Stop>
	HAL_TIM_OnePulse_Stop_IT( scope->htim2, TIM_CHANNEL_1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f007 fa15 	bl	800c9a0 <HAL_TIM_OnePulse_Stop_IT>
	HAL_TIM_Base_Stop( scope->htim2 );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f007 f8fa 	bl	800c774 <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA( scope->hadc1 );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	4618      	mov	r0, r3
 8005586:	f002 f939 	bl	80077fc <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc2 );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	4618      	mov	r0, r3
 8005590:	f002 f934 	bl	80077fc <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc3 );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	4618      	mov	r0, r3
 800559a:	f002 f92f 	bl	80077fc <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc4 );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	4618      	mov	r0, r3
 80055a4:	f002 f92a 	bl	80077fc <HAL_ADC_Stop_DMA>
	scope->state = SCOPE_STATE_DONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2205      	movs	r2, #5
 80055ac:	701a      	strb	r2, [r3, #0]
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <scope_is_busy>:

uint8_t scope_is_busy( tScope *scope )
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
	return scope->state != SCOPE_STATE_DONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <scope_get_trigger>:

int32_t scope_get_trigger( tScope *scope )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	return scope->len - scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP];
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8a9b      	ldrh	r3, [r3, #20]
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	1ad3      	subs	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_ADC_ConvHalfCpltCallback>:

// ********************** IRQs ********************** //
int cndtr1 = 0;
int cndtr2 = 0;
void HAL_ADC_ConvHalfCpltCallback( ADC_HandleTypeDef* hadc )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
	{
	}
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <HAL_ADC_ConvCpltCallback+0x60>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d120      	bne.n	8005662 <HAL_ADC_ConvCpltCallback+0x56>
	{
		if( 1 && _scope->state == SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE )
 8005620:	4b12      	ldr	r3, [pc, #72]	; (800566c <HAL_ADC_ConvCpltCallback+0x60>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d11b      	bne.n	8005662 <HAL_ADC_ConvCpltCallback+0x56>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_ARM;
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <HAL_ADC_ConvCpltCallback+0x60>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2202      	movs	r2, #2
 8005630:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_ARM] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 8005632:	4b0e      	ldr	r3, [pc, #56]	; (800566c <HAL_ADC_ConvCpltCallback+0x60>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <HAL_ADC_ConvCpltCallback+0x64>)
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	64da      	str	r2, [r3, #76]	; 0x4c
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_ADC_ConvCpltCallback+0x60>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	601a      	str	r2, [r3, #0]
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
			LL_ADC_EnableIT_AWD1( _scope->hadc1->Instance );
 8005648:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_ADC_ConvCpltCallback+0x60>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fe05 	bl	8005260 <LL_ADC_EnableIT_AWD1>
			cndtr1 = 0;
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_ADC_ConvCpltCallback+0x64>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
			cndtr2 = 0;
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_ADC_ConvCpltCallback+0x68>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20011788 	.word	0x20011788
 8005670:	2001178c 	.word	0x2001178c
 8005674:	20011790 	.word	0x20011790

08005678 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback( ADC_HandleTypeDef* hadc )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d125      	bne.n	80056d8 <HAL_ADC_LevelOutOfWindowCallback+0x60>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_ARM )
 800568c:	4b14      	ldr	r3, [pc, #80]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d120      	bne.n	80056d8 <HAL_ADC_LevelOutOfWindowCallback+0x60>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_TRIGGER;
 8005696:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2203      	movs	r2, #3
 800569c:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_TRIGGER] = _scope->hdma_adc1->Instance->CNDTR;
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50
			LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fdf2 	bl	80052a0 <LL_ADC_DisableIT_AWD1>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
 80056bc:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c8:	601a      	str	r2, [r3, #0]
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fdd4 	bl	8005280 <LL_ADC_EnableIT_AWD2>
		}
	}
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20011788 	.word	0x20011788

080056e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
uint32_t start_cpu;
uint32_t stop_cpu;

void HAL_ADCEx_LevelOutOfWindow2Callback( ADC_HandleTypeDef* hadc )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 80056ec:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d14f      	bne.n	8005798 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_TRIGGER )
 80056f8:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d14a      	bne.n	8005798 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_STOP;
 8005702:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2204      	movs	r2, #4
 8005708:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 800570a:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc0>)
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54

			//_scope->htim2->Instance->CCR1 = 127;
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC1 );
 8005714:	4b22      	ldr	r3, [pc, #136]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0202 	mvn.w	r2, #2
 8005720:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC2 );
 8005722:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0204 	mvn.w	r2, #4
 800572e:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_UPDATE );
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0201 	mvn.w	r2, #1
 800573c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC1 );
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f06f 0202 	mvn.w	r2, #2
 800574a:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC2 );
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0204 	mvn.w	r2, #4
 8005758:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_UPDATE );
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f06f 0201 	mvn.w	r2, #1
 8005766:	611a      	str	r2, [r3, #16]
			start_cpu = SysTick->VAL;
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc4>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4a0f      	ldr	r2, [pc, #60]	; (80057ac <HAL_ADCEx_LevelOutOfWindow2Callback+0xc8>)
 800576e:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start( _scope->htim2 );
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	4618      	mov	r0, r3
 8005778:	f006 ff8c 	bl	800c694 <HAL_TIM_Base_Start>
			HAL_TIM_OnePulse_Start_IT( _scope->htim2, TIM_CHANNEL_1);
 800577c:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	2100      	movs	r1, #0
 8005784:	4618      	mov	r0, r3
 8005786:	f007 f87d 	bl	800c884 <HAL_TIM_OnePulse_Start_IT>
			//LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fd94 	bl	80052c0 <LL_ADC_DisableIT_AWD2>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20011788 	.word	0x20011788
 80057a4:	2001178c 	.word	0x2001178c
 80057a8:	e000e010 	.word	0xe000e010
 80057ac:	20011794 	.word	0x20011794

080057b0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	if( htim == _scope->htim2 ) // htim2
 80057b8:	4b23      	ldr	r3, [pc, #140]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d13c      	bne.n	800583e <HAL_TIM_OC_DelayElapsedCallback+0x8e>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_STOP )
 80057c4:	4b20      	ldr	r3, [pc, #128]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d137      	bne.n	800583e <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		{
			stop_cpu = SysTick->VAL;
 80057ce:	4b1f      	ldr	r3, [pc, #124]	; (800584c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 80057d4:	6013      	str	r3, [r2, #0]
			_scope->state = SCOPE_STATE_DONE;
 80057d6:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2205      	movs	r2, #5
 80057dc:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_DONE] = cndtr2;//_scope->hdma_adc1->Instance->CNDTR;
 80057de:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_TIM_Base_Stop( _scope->htim1 );
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	4618      	mov	r0, r3
 80057f0:	f006 ffc0 	bl	800c774 <HAL_TIM_Base_Stop>
			HAL_ADC_Stop_DMA( _scope->hadc1 );
 80057f4:	4b14      	ldr	r3, [pc, #80]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f001 fffe 	bl	80077fc <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc2 );
 8005800:	4b11      	ldr	r3, [pc, #68]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	4618      	mov	r0, r3
 8005808:	f001 fff8 	bl	80077fc <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc3 );
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	4618      	mov	r0, r3
 8005814:	f001 fff2 	bl	80077fc <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc4 );
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	4618      	mov	r0, r3
 8005820:	f001 ffec 	bl	80077fc <HAL_ADC_Stop_DMA>
			HAL_TIM_OnePulse_Stop_IT( _scope->htim2, TIM_CHANNEL_1);
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f007 f8b7 	bl	800c9a0 <HAL_TIM_OnePulse_Stop_IT>
			HAL_TIM_Base_Stop( _scope->htim2 );
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	4618      	mov	r0, r3
 800583a:	f006 ff9b 	bl	800c774 <HAL_TIM_Base_Stop>
		}
	}
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20011788 	.word	0x20011788
 800584c:	e000e010 	.word	0xe000e010
 8005850:	20011798 	.word	0x20011798
 8005854:	20011790 	.word	0x20011790

08005858 <test_scope>:
uint16_t buffer6[BUFFER_LEN];
uint16_t buffer7[BUFFER_LEN];
uint16_t buffer8[BUFFER_LEN];
tScope scope = {0};
void test_scope( int collapsed )
{
 8005858:	b5b0      	push	{r4, r5, r7, lr}
 800585a:	b098      	sub	sp, #96	; 0x60
 800585c:	af04      	add	r7, sp, #16
 800585e:	6078      	str	r0, [r7, #4]
	// test scope

	uint16_t start = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  static int trigger_bck = 0;
	  static int i = 0;

	if( _scope_init == 0 )
 8005864:	4ba8      	ldr	r3, [pc, #672]	; (8005b08 <test_scope+0x2b0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d17e      	bne.n	800596a <test_scope+0x112>
	{

		float freq = 3;
 800586c:	4ba7      	ldr	r3, [pc, #668]	; (8005b0c <test_scope+0x2b4>)
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8005870:	2300      	movs	r3, #0
 8005872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005874:	e057      	b.n	8005926 <test_scope+0xce>
		{
			dac1_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*1023 + 2048;
 8005876:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800587a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800587e:	ee17 0a90 	vmov	r0, s15
 8005882:	f7fa fe89 	bl	8000598 <__aeabi_f2d>
 8005886:	a39e      	add	r3, pc, #632	; (adr r3, 8005b00 <test_scope+0x2a8>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f7fa fedc 	bl	8000648 <__aeabi_dmul>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4614      	mov	r4, r2
 8005896:	461d      	mov	r5, r3
 8005898:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800589a:	f7fa fe6b 	bl	8000574 <__aeabi_i2d>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7fa fecf 	bl	8000648 <__aeabi_dmul>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	4b96      	ldr	r3, [pc, #600]	; (8005b10 <test_scope+0x2b8>)
 80058b8:	f7fa fff0 	bl	800089c <__aeabi_ddiv>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	f7fb f9b8 	bl	8000c38 <__aeabi_d2f>
 80058c8:	4603      	mov	r3, r0
 80058ca:	ee00 3a10 	vmov	s0, r3
 80058ce:	f021 ff77 	bl	80277c0 <sinf>
 80058d2:	eef0 7a40 	vmov.f32	s15, s0
 80058d6:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005b14 <test_scope+0x2bc>
 80058da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058de:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8005b18 <test_scope+0x2c0>
 80058e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ea:	ee17 3a90 	vmov	r3, s15
 80058ee:	b299      	uxth	r1, r3
 80058f0:	4a8a      	ldr	r2, [pc, #552]	; (8005b1c <test_scope+0x2c4>)
 80058f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//dac2_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*2000 + 2048;
			dac2_buffer[i] = 1024+(((BUFFER_LEN-i-1)*8)%2048);
 80058f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fa:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80058fe:	3303      	adds	r3, #3
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	425a      	negs	r2, r3
 8005904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005908:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800590c:	bf58      	it	pl
 800590e:	4253      	negpl	r3, r2
 8005910:	b29b      	uxth	r3, r3
 8005912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005916:	b299      	uxth	r1, r3
 8005918:	4a81      	ldr	r2, [pc, #516]	; (8005b20 <test_scope+0x2c8>)
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8005920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005922:	3301      	adds	r3, #1
 8005924:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592c:	dba3      	blt.n	8005876 <test_scope+0x1e>
		}
		extern DAC_HandleTypeDef hdac1;
		extern TIM_HandleTypeDef htim2;
		extern TIM_HandleTypeDef htim3;
		__HAL_DBGMCU_FREEZE_TIM3();
 800592e:	4b7d      	ldr	r3, [pc, #500]	; (8005b24 <test_scope+0x2cc>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4a7c      	ldr	r2, [pc, #496]	; (8005b24 <test_scope+0x2cc>)
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	6093      	str	r3, [r2, #8]
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 800593a:	2300      	movs	r3, #0
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005942:	4a76      	ldr	r2, [pc, #472]	; (8005b1c <test_scope+0x2c4>)
 8005944:	2100      	movs	r1, #0
 8005946:	4878      	ldr	r0, [pc, #480]	; (8005b28 <test_scope+0x2d0>)
 8005948:	f003 fdea 	bl	8009520 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_2, (uint32_t*)dac2_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 800594c:	2300      	movs	r3, #0
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005954:	4a72      	ldr	r2, [pc, #456]	; (8005b20 <test_scope+0x2c8>)
 8005956:	2110      	movs	r1, #16
 8005958:	4873      	ldr	r0, [pc, #460]	; (8005b28 <test_scope+0x2d0>)
 800595a:	f003 fde1 	bl	8009520 <HAL_DAC_Start_DMA>
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start( &htim3 );
 800595e:	4873      	ldr	r0, [pc, #460]	; (8005b2c <test_scope+0x2d4>)
 8005960:	f006 fe98 	bl	800c694 <HAL_TIM_Base_Start>
		//htim1.Instance->ARR = 0x54;
		//htim1.Instance->CNT = 0x2A;
		//HAL_TIM_Base_Start( &htim1 );


		_scope_init = 1;
 8005964:	4b68      	ldr	r3, [pc, #416]	; (8005b08 <test_scope+0x2b0>)
 8005966:	2201      	movs	r2, #1
 8005968:	601a      	str	r2, [r3, #0]


	{

		static int dd = 0;
		if( dd<10 )
 800596a:	4b71      	ldr	r3, [pc, #452]	; (8005b30 <test_scope+0x2d8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b09      	cmp	r3, #9
 8005970:	dc05      	bgt.n	800597e <test_scope+0x126>
		{
			dd++;
 8005972:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <test_scope+0x2d8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	4a6d      	ldr	r2, [pc, #436]	; (8005b30 <test_scope+0x2d8>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	e09b      	b.n	8005ab6 <test_scope+0x25e>
		}
		else
		{
			dd = 0;
 800597e:	4b6c      	ldr	r3, [pc, #432]	; (8005b30 <test_scope+0x2d8>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
			if( collapsed )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d04d      	beq.n	8005a26 <test_scope+0x1ce>
			{
				for( int d = 0 ; d < 480 ; d += 40 )
 800598a:	2300      	movs	r3, #0
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48
 800598e:	e011      	b.n	80059b4 <test_scope+0x15c>
				{
					lcd_rect( d/2+240, 0, 1, 320, 0x55555555 );
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	0fda      	lsrs	r2, r3, #31
 8005994:	4413      	add	r3, r2
 8005996:	105b      	asrs	r3, r3, #1
 8005998:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800599c:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80059a6:	2201      	movs	r2, #1
 80059a8:	2100      	movs	r1, #0
 80059aa:	f7fc f93f 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 80059ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b0:	3328      	adds	r3, #40	; 0x28
 80059b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80059ba:	dbe9      	blt.n	8005990 <test_scope+0x138>
				}
				lcd_rect( 480/2+240, 0, 1, 320, 0x55555555 );
 80059bc:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80059c6:	2201      	movs	r2, #1
 80059c8:	2100      	movs	r1, #0
 80059ca:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80059ce:	f7fc f92d 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 80059d2:	2300      	movs	r3, #0
 80059d4:	647b      	str	r3, [r7, #68]	; 0x44
 80059d6:	e00c      	b.n	80059f2 <test_scope+0x19a>
				{
					lcd_rect( 0/2+240, d, 480, 1, 0x55555555 );
 80059d8:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2301      	movs	r3, #1
 80059e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80059e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e6:	20f0      	movs	r0, #240	; 0xf0
 80059e8:	f7fc f920 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 80059ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ee:	3328      	adds	r3, #40	; 0x28
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
 80059f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80059f8:	dbee      	blt.n	80059d8 <test_scope+0x180>
				}
				lcd_rect( 0/2+240, 320, 480, 1, 0x55555555 );
 80059fa:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2301      	movs	r3, #1
 8005a02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a0a:	20f0      	movs	r0, #240	; 0xf0
 8005a0c:	f7fc f90e 	bl	8001c2c <lcd_rect>

				lcd_rect( 0/2+240, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8005a10:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	2301      	movs	r3, #1
 8005a18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a1c:	2164      	movs	r1, #100	; 0x64
 8005a1e:	20f0      	movs	r0, #240	; 0xf0
 8005a20:	f7fc f904 	bl	8001c2c <lcd_rect>
 8005a24:	e047      	b.n	8005ab6 <test_scope+0x25e>
			}
			else
			{
				for( int d = 0 ; d < 480 ; d += 40 )
 8005a26:	2300      	movs	r3, #0
 8005a28:	643b      	str	r3, [r7, #64]	; 0x40
 8005a2a:	e00c      	b.n	8005a46 <test_scope+0x1ee>
				{
					lcd_rect( d, 0, 1, 320, 0x55555555 );
 8005a2c:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005a36:	2201      	movs	r2, #1
 8005a38:	2100      	movs	r1, #0
 8005a3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a3c:	f7fc f8f6 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	3328      	adds	r3, #40	; 0x28
 8005a44:	643b      	str	r3, [r7, #64]	; 0x40
 8005a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a48:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005a4c:	dbee      	blt.n	8005a2c <test_scope+0x1d4>
				}
				lcd_rect( 480, 0, 1, 320, 0x55555555 );
 8005a4e:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005a58:	2201      	movs	r2, #1
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005a60:	f7fc f8e4 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005a64:	2300      	movs	r3, #0
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a68:	e00c      	b.n	8005a84 <test_scope+0x22c>
				{
					lcd_rect( 0, d, 480, 1, 0x55555555 );
 8005a6a:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2301      	movs	r3, #1
 8005a72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a78:	2000      	movs	r0, #0
 8005a7a:	f7fc f8d7 	bl	8001c2c <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a80:	3328      	adds	r3, #40	; 0x28
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005a8a:	dbee      	blt.n	8005a6a <test_scope+0x212>
				}
				lcd_rect( 0, 320, 480, 1, 0x55555555 );
 8005a8c:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	2301      	movs	r3, #1
 8005a94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a98:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7fc f8c5 	bl	8001c2c <lcd_rect>

				lcd_rect( 0, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8005aa2:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005aae:	2164      	movs	r1, #100	; 0x64
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f7fc f8bb 	bl	8001c2c <lcd_rect>

		}


		scope_init( &scope, 2048, 1000000,
				(i&0x01)?buffer1:buffer5,
 8005ab6:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <test_scope+0x2dc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <test_scope+0x26e>
 8005ac2:	481d      	ldr	r0, [pc, #116]	; (8005b38 <test_scope+0x2e0>)
 8005ac4:	e000      	b.n	8005ac8 <test_scope+0x270>
 8005ac6:	481d      	ldr	r0, [pc, #116]	; (8005b3c <test_scope+0x2e4>)
				(i&0x01)?buffer2:buffer6,
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	; (8005b34 <test_scope+0x2dc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <test_scope+0x280>
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <test_scope+0x2e8>)
 8005ad6:	e000      	b.n	8005ada <test_scope+0x282>
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <test_scope+0x2ec>)
				(i&0x01)?buffer3:buffer7,
 8005ada:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <test_scope+0x2dc>)
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	f002 0201 	and.w	r2, r2, #1
		scope_init( &scope, 2048, 1000000,
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	d001      	beq.n	8005aea <test_scope+0x292>
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <test_scope+0x2f0>)
 8005ae8:	e000      	b.n	8005aec <test_scope+0x294>
 8005aea:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <test_scope+0x2f4>)
				(i&0x01)?buffer4:buffer8,
 8005aec:	4911      	ldr	r1, [pc, #68]	; (8005b34 <test_scope+0x2dc>)
 8005aee:	6809      	ldr	r1, [r1, #0]
 8005af0:	f001 0101 	and.w	r1, r1, #1
		scope_init( &scope, 2048, 1000000,
 8005af4:	2900      	cmp	r1, #0
 8005af6:	d02d      	beq.n	8005b54 <test_scope+0x2fc>
 8005af8:	4915      	ldr	r1, [pc, #84]	; (8005b50 <test_scope+0x2f8>)
 8005afa:	e02c      	b.n	8005b56 <test_scope+0x2fe>
 8005afc:	f3af 8000 	nop.w
 8005b00:	54442d18 	.word	0x54442d18
 8005b04:	400921fb 	.word	0x400921fb
 8005b08:	2001179c 	.word	0x2001179c
 8005b0c:	40400000 	.word	0x40400000
 8005b10:	40900000 	.word	0x40900000
 8005b14:	447fc000 	.word	0x447fc000
 8005b18:	45000000 	.word	0x45000000
 8005b1c:	200117a0 	.word	0x200117a0
 8005b20:	20011fa0 	.word	0x20011fa0
 8005b24:	e0042000 	.word	0xe0042000
 8005b28:	200006b8 	.word	0x200006b8
 8005b2c:	20016908 	.word	0x20016908
 8005b30:	200167fc 	.word	0x200167fc
 8005b34:	20016800 	.word	0x20016800
 8005b38:	200127a0 	.word	0x200127a0
 8005b3c:	200147a0 	.word	0x200147a0
 8005b40:	20012fa0 	.word	0x20012fa0
 8005b44:	20014fa0 	.word	0x20014fa0
 8005b48:	200137a0 	.word	0x200137a0
 8005b4c:	200157a0 	.word	0x200157a0
 8005b50:	20013fa0 	.word	0x20013fa0
 8005b54:	49af      	ldr	r1, [pc, #700]	; (8005e14 <test_scope+0x5bc>)
 8005b56:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005b5a:	9403      	str	r4, [sp, #12]
 8005b5c:	9102      	str	r1, [sp, #8]
 8005b5e:	9201      	str	r2, [sp, #4]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	4603      	mov	r3, r0
 8005b64:	f244 2240 	movw	r2, #16960	; 0x4240
 8005b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b6c:	48aa      	ldr	r0, [pc, #680]	; (8005e18 <test_scope+0x5c0>)
 8005b6e:	f7ff fbb7 	bl	80052e0 <scope_init>
				BUFFER_LEN );
		scope_start( &scope );
 8005b72:	48a9      	ldr	r0, [pc, #676]	; (8005e18 <test_scope+0x5c0>)
 8005b74:	f7ff fc18 	bl	80053a8 <scope_start>
		while( scope_is_busy( &scope ) );
 8005b78:	bf00      	nop
 8005b7a:	48a7      	ldr	r0, [pc, #668]	; (8005e18 <test_scope+0x5c0>)
 8005b7c:	f7ff fd1b 	bl	80055b6 <scope_is_busy>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f9      	bne.n	8005b7a <test_scope+0x322>
		scope_stop( &scope );
 8005b86:	48a4      	ldr	r0, [pc, #656]	; (8005e18 <test_scope+0x5c0>)
 8005b88:	f7ff fce6 	bl	8005558 <scope_stop>

		int32_t trigger = scope_get_trigger( &scope ) - BUFFER_LEN/2;
 8005b8c:	48a2      	ldr	r0, [pc, #648]	; (8005e18 <test_scope+0x5c0>)
 8005b8e:	f7ff fd23 	bl	80055d8 <scope_get_trigger>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24

		//printf( "data%d = np.array( [", i );
		for( int jj = 0; jj < 480; jj++ )
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b9e:	e3c7      	b.n	8006330 <test_scope+0xad8>
		//for( int jj = 0; jj < BUFFER_LEN; jj++ )
		{
			int j = (jj*BUFFER_LEN)/480.0;
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fa fce5 	bl	8000574 <__aeabi_i2d>
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	4b9b      	ldr	r3, [pc, #620]	; (8005e1c <test_scope+0x5c4>)
 8005bb0:	f7fa fe74 	bl	800089c <__aeabi_ddiv>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f7fa fff4 	bl	8000ba8 <__aeabi_d2iz>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	623b      	str	r3, [r7, #32]
			//int j = jj;
			int n = trigger + j;
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	4413      	add	r3, r2
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
			if( n < 0 )
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da04      	bge.n	8005bdc <test_scope+0x384>
			{
				n += BUFFER_LEN;
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bda:	e007      	b.n	8005bec <test_scope+0x394>
			}
			else if( n >= BUFFER_LEN )
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	db03      	blt.n	8005bec <test_scope+0x394>
			{
				n -= BUFFER_LEN;
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
			}

			int n2 = trigger_bck + j;
 8005bec:	4b8c      	ldr	r3, [pc, #560]	; (8005e20 <test_scope+0x5c8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
			if( n2 < 0 )
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da04      	bge.n	8005c06 <test_scope+0x3ae>
			{
				n2 += BUFFER_LEN;
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c02:	633b      	str	r3, [r7, #48]	; 0x30
 8005c04:	e007      	b.n	8005c16 <test_scope+0x3be>
			}
			else if( n2 >= BUFFER_LEN )
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0c:	db03      	blt.n	8005c16 <test_scope+0x3be>
			{
				n2 -= BUFFER_LEN;
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
			}
			//printf( "%d, ", buffer[n] );

			if( collapsed )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 81dc 	beq.w	8005fd6 <test_scope+0x77e>
			{
				int x0, y0, y1;
				x0 = jj;//(j*480)/BUFFER_LEN;
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	613b      	str	r3, [r7, #16]
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8005c22:	4b80      	ldr	r3, [pc, #512]	; (8005e24 <test_scope+0x5cc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d011      	beq.n	8005c52 <test_scope+0x3fa>
 8005c2e:	4a7e      	ldr	r2, [pc, #504]	; (8005e28 <test_scope+0x5d0>)
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c36:	461a      	mov	r2, r3
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	019b      	lsls	r3, r3, #6
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da01      	bge.n	8005c48 <test_scope+0x3f0>
 8005c44:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005c48:	131b      	asrs	r3, r3, #12
 8005c4a:	425b      	negs	r3, r3
 8005c4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005c50:	e010      	b.n	8005c74 <test_scope+0x41c>
 8005c52:	4a76      	ldr	r2, [pc, #472]	; (8005e2c <test_scope+0x5d4>)
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	019b      	lsls	r3, r3, #6
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da01      	bge.n	8005c6c <test_scope+0x414>
 8005c68:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005c6c:	131b      	asrs	r3, r3, #12
 8005c6e:	425b      	negs	r3, r3
 8005c70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005c74:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8005c76:	4b6b      	ldr	r3, [pc, #428]	; (8005e24 <test_scope+0x5cc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d011      	beq.n	8005ca6 <test_scope+0x44e>
 8005c82:	4a6a      	ldr	r2, [pc, #424]	; (8005e2c <test_scope+0x5d4>)
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	019b      	lsls	r3, r3, #6
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	da01      	bge.n	8005c9c <test_scope+0x444>
 8005c98:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005c9c:	131b      	asrs	r3, r3, #12
 8005c9e:	425b      	negs	r3, r3
 8005ca0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ca4:	e010      	b.n	8005cc8 <test_scope+0x470>
 8005ca6:	4a60      	ldr	r2, [pc, #384]	; (8005e28 <test_scope+0x5d0>)
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	019b      	lsls	r3, r3, #6
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da01      	bge.n	8005cc0 <test_scope+0x468>
 8005cbc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005cc0:	131b      	asrs	r3, r3, #12
 8005cc2:	425b      	negs	r3, r3
 8005cc4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005cc8:	60bb      	str	r3, [r7, #8]
				extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	0fda      	lsrs	r2, r3, #31
 8005cce:	4413      	add	r3, r2
 8005cd0:	105b      	asrs	r3, r3, #1
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	33f0      	adds	r3, #240	; 0xf0
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	b21b      	sxth	r3, r3
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	b211      	sxth	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fc f893 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x0001C007 );
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	0fda      	lsrs	r2, r3, #31
 8005cea:	4413      	add	r3, r2
 8005cec:	105b      	asrs	r3, r3, #1
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	33f0      	adds	r3, #240	; 0xf0
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	b21b      	sxth	r3, r3
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	b211      	sxth	r1, r2
 8005cfa:	4a4d      	ldr	r2, [pc, #308]	; (8005e30 <test_scope+0x5d8>)
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fc f885 	bl	8001e0c <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8005d02:	4b48      	ldr	r3, [pc, #288]	; (8005e24 <test_scope+0x5cc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d011      	beq.n	8005d32 <test_scope+0x4da>
 8005d0e:	4a49      	ldr	r2, [pc, #292]	; (8005e34 <test_scope+0x5dc>)
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d16:	461a      	mov	r2, r3
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	019b      	lsls	r3, r3, #6
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	da01      	bge.n	8005d28 <test_scope+0x4d0>
 8005d24:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d28:	131b      	asrs	r3, r3, #12
 8005d2a:	425b      	negs	r3, r3
 8005d2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d30:	e010      	b.n	8005d54 <test_scope+0x4fc>
 8005d32:	4a41      	ldr	r2, [pc, #260]	; (8005e38 <test_scope+0x5e0>)
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	019b      	lsls	r3, r3, #6
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da01      	bge.n	8005d4c <test_scope+0x4f4>
 8005d48:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d4c:	131b      	asrs	r3, r3, #12
 8005d4e:	425b      	negs	r3, r3
 8005d50:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d54:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8005d56:	4b33      	ldr	r3, [pc, #204]	; (8005e24 <test_scope+0x5cc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d011      	beq.n	8005d86 <test_scope+0x52e>
 8005d62:	4a35      	ldr	r2, [pc, #212]	; (8005e38 <test_scope+0x5e0>)
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	019b      	lsls	r3, r3, #6
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da01      	bge.n	8005d7c <test_scope+0x524>
 8005d78:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d7c:	131b      	asrs	r3, r3, #12
 8005d7e:	425b      	negs	r3, r3
 8005d80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d84:	e010      	b.n	8005da8 <test_scope+0x550>
 8005d86:	4a2b      	ldr	r2, [pc, #172]	; (8005e34 <test_scope+0x5dc>)
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	019b      	lsls	r3, r3, #6
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	da01      	bge.n	8005da0 <test_scope+0x548>
 8005d9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005da0:	131b      	asrs	r3, r3, #12
 8005da2:	425b      	negs	r3, r3
 8005da4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005da8:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	0fda      	lsrs	r2, r3, #31
 8005dae:	4413      	add	r3, r2
 8005db0:	105b      	asrs	r3, r3, #1
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	33f0      	adds	r3, #240	; 0xf0
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	b211      	sxth	r1, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fc f823 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x00003F00 );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	0fda      	lsrs	r2, r3, #31
 8005dca:	4413      	add	r3, r2
 8005dcc:	105b      	asrs	r3, r3, #1
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	33f0      	adds	r3, #240	; 0xf0
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	b21b      	sxth	r3, r3
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	b211      	sxth	r1, r2
 8005dda:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fc f814 	bl	8001e0c <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8005de4:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <test_scope+0x5cc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d027      	beq.n	8005e40 <test_scope+0x5e8>
 8005df0:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <test_scope+0x5e4>)
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da01      	bge.n	8005e0a <test_scope+0x5b2>
 8005e06:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e0a:	131b      	asrs	r3, r3, #12
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e12:	e026      	b.n	8005e62 <test_scope+0x60a>
 8005e14:	20015fa0 	.word	0x20015fa0
 8005e18:	200167a0 	.word	0x200167a0
 8005e1c:	407e0000 	.word	0x407e0000
 8005e20:	20016804 	.word	0x20016804
 8005e24:	20016800 	.word	0x20016800
 8005e28:	200147a0 	.word	0x200147a0
 8005e2c:	200127a0 	.word	0x200127a0
 8005e30:	0001c007 	.word	0x0001c007
 8005e34:	20014fa0 	.word	0x20014fa0
 8005e38:	20012fa0 	.word	0x20012fa0
 8005e3c:	200157a0 	.word	0x200157a0
 8005e40:	4ab9      	ldr	r2, [pc, #740]	; (8006128 <test_scope+0x8d0>)
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	019b      	lsls	r3, r3, #6
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da01      	bge.n	8005e5a <test_scope+0x602>
 8005e56:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e5a:	131b      	asrs	r3, r3, #12
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e62:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8005e64:	4bb1      	ldr	r3, [pc, #708]	; (800612c <test_scope+0x8d4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d011      	beq.n	8005e94 <test_scope+0x63c>
 8005e70:	4aad      	ldr	r2, [pc, #692]	; (8006128 <test_scope+0x8d0>)
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	019b      	lsls	r3, r3, #6
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da01      	bge.n	8005e8a <test_scope+0x632>
 8005e86:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e8a:	131b      	asrs	r3, r3, #12
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e92:	e010      	b.n	8005eb6 <test_scope+0x65e>
 8005e94:	4aa6      	ldr	r2, [pc, #664]	; (8006130 <test_scope+0x8d8>)
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	019b      	lsls	r3, r3, #6
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da01      	bge.n	8005eae <test_scope+0x656>
 8005eaa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005eae:	131b      	asrs	r3, r3, #12
 8005eb0:	425b      	negs	r3, r3
 8005eb2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005eb6:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	0fda      	lsrs	r2, r3, #31
 8005ebc:	4413      	add	r3, r2
 8005ebe:	105b      	asrs	r3, r3, #1
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	33f0      	adds	r3, #240	; 0xf0
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	b21b      	sxth	r3, r3
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	b211      	sxth	r1, r2
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fb ff9c 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x000001F8 );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	0fda      	lsrs	r2, r3, #31
 8005ed8:	4413      	add	r3, r2
 8005eda:	105b      	asrs	r3, r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	33f0      	adds	r3, #240	; 0xf0
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	b21b      	sxth	r3, r3
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	b211      	sxth	r1, r2
 8005ee8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fb ff8d 	bl	8001e0c <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8005ef2:	4b8e      	ldr	r3, [pc, #568]	; (800612c <test_scope+0x8d4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d011      	beq.n	8005f22 <test_scope+0x6ca>
 8005efe:	4a8d      	ldr	r2, [pc, #564]	; (8006134 <test_scope+0x8dc>)
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f06:	461a      	mov	r2, r3
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	019b      	lsls	r3, r3, #6
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	da01      	bge.n	8005f18 <test_scope+0x6c0>
 8005f14:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f18:	131b      	asrs	r3, r3, #12
 8005f1a:	425b      	negs	r3, r3
 8005f1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f20:	e010      	b.n	8005f44 <test_scope+0x6ec>
 8005f22:	4a85      	ldr	r2, [pc, #532]	; (8006138 <test_scope+0x8e0>)
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	019b      	lsls	r3, r3, #6
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da01      	bge.n	8005f3c <test_scope+0x6e4>
 8005f38:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f3c:	131b      	asrs	r3, r3, #12
 8005f3e:	425b      	negs	r3, r3
 8005f40:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f44:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8005f46:	4b79      	ldr	r3, [pc, #484]	; (800612c <test_scope+0x8d4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d011      	beq.n	8005f76 <test_scope+0x71e>
 8005f52:	4a79      	ldr	r2, [pc, #484]	; (8006138 <test_scope+0x8e0>)
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	019b      	lsls	r3, r3, #6
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	da01      	bge.n	8005f6c <test_scope+0x714>
 8005f68:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f6c:	131b      	asrs	r3, r3, #12
 8005f6e:	425b      	negs	r3, r3
 8005f70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f74:	e010      	b.n	8005f98 <test_scope+0x740>
 8005f76:	4a6f      	ldr	r2, [pc, #444]	; (8006134 <test_scope+0x8dc>)
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	019b      	lsls	r3, r3, #6
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da01      	bge.n	8005f90 <test_scope+0x738>
 8005f8c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f90:	131b      	asrs	r3, r3, #12
 8005f92:	425b      	negs	r3, r3
 8005f94:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f98:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	0fda      	lsrs	r2, r3, #31
 8005f9e:	4413      	add	r3, r2
 8005fa0:	105b      	asrs	r3, r3, #1
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	33f0      	adds	r3, #240	; 0xf0
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	b211      	sxth	r1, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fb ff2b 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0xFFFFFFFF );
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	0fda      	lsrs	r2, r3, #31
 8005fba:	4413      	add	r3, r2
 8005fbc:	105b      	asrs	r3, r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	33f0      	adds	r3, #240	; 0xf0
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	b211      	sxth	r1, r2
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fb ff1c 	bl	8001e0c <lcd_set_pixel>
 8005fd4:	e1a9      	b.n	800632a <test_scope+0xad2>
			}
			else
			{
				int x0, y0, y1;
				x0 = jj;//(j*480)/BUFFER_LEN;
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	61fb      	str	r3, [r7, #28]
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8005fda:	4b54      	ldr	r3, [pc, #336]	; (800612c <test_scope+0x8d4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d011      	beq.n	800600a <test_scope+0x7b2>
 8005fe6:	4a55      	ldr	r2, [pc, #340]	; (800613c <test_scope+0x8e4>)
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	019b      	lsls	r3, r3, #6
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	da01      	bge.n	8006000 <test_scope+0x7a8>
 8005ffc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006000:	131b      	asrs	r3, r3, #12
 8006002:	425b      	negs	r3, r3
 8006004:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006008:	e010      	b.n	800602c <test_scope+0x7d4>
 800600a:	4a4d      	ldr	r2, [pc, #308]	; (8006140 <test_scope+0x8e8>)
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006012:	461a      	mov	r2, r3
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	019b      	lsls	r3, r3, #6
 800601c:	2b00      	cmp	r3, #0
 800601e:	da01      	bge.n	8006024 <test_scope+0x7cc>
 8006020:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006024:	131b      	asrs	r3, r3, #12
 8006026:	425b      	negs	r3, r3
 8006028:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800602c:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 800602e:	4b3f      	ldr	r3, [pc, #252]	; (800612c <test_scope+0x8d4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d011      	beq.n	800605e <test_scope+0x806>
 800603a:	4a41      	ldr	r2, [pc, #260]	; (8006140 <test_scope+0x8e8>)
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006042:	461a      	mov	r2, r3
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	019b      	lsls	r3, r3, #6
 800604c:	2b00      	cmp	r3, #0
 800604e:	da01      	bge.n	8006054 <test_scope+0x7fc>
 8006050:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006054:	131b      	asrs	r3, r3, #12
 8006056:	425b      	negs	r3, r3
 8006058:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800605c:	e010      	b.n	8006080 <test_scope+0x828>
 800605e:	4a37      	ldr	r2, [pc, #220]	; (800613c <test_scope+0x8e4>)
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006066:	461a      	mov	r2, r3
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	019b      	lsls	r3, r3, #6
 8006070:	2b00      	cmp	r3, #0
 8006072:	da01      	bge.n	8006078 <test_scope+0x820>
 8006074:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006078:	131b      	asrs	r3, r3, #12
 800607a:	425b      	negs	r3, r3
 800607c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006080:	617b      	str	r3, [r7, #20]
				extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
				lcd_set_pixel( x0, y0, 0x00000000 );
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	b21b      	sxth	r3, r3
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	b211      	sxth	r1, r2
 800608a:	2200      	movs	r2, #0
 800608c:	4618      	mov	r0, r3
 800608e:	f7fb febd 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x0001C007 );
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	b21b      	sxth	r3, r3
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	b211      	sxth	r1, r2
 800609a:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <test_scope+0x8ec>)
 800609c:	4618      	mov	r0, r3
 800609e:	f7fb feb5 	bl	8001e0c <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 80060a2:	4b22      	ldr	r3, [pc, #136]	; (800612c <test_scope+0x8d4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d011      	beq.n	80060d2 <test_scope+0x87a>
 80060ae:	4a26      	ldr	r2, [pc, #152]	; (8006148 <test_scope+0x8f0>)
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b6:	461a      	mov	r2, r3
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	019b      	lsls	r3, r3, #6
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da01      	bge.n	80060c8 <test_scope+0x870>
 80060c4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80060c8:	131b      	asrs	r3, r3, #12
 80060ca:	425b      	negs	r3, r3
 80060cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80060d0:	e010      	b.n	80060f4 <test_scope+0x89c>
 80060d2:	4a1e      	ldr	r2, [pc, #120]	; (800614c <test_scope+0x8f4>)
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060da:	461a      	mov	r2, r3
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	019b      	lsls	r3, r3, #6
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da01      	bge.n	80060ec <test_scope+0x894>
 80060e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80060ec:	131b      	asrs	r3, r3, #12
 80060ee:	425b      	negs	r3, r3
 80060f0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80060f4:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <test_scope+0x8d4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d026      	beq.n	8006150 <test_scope+0x8f8>
 8006102:	4a12      	ldr	r2, [pc, #72]	; (800614c <test_scope+0x8f4>)
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800610a:	461a      	mov	r2, r3
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	019b      	lsls	r3, r3, #6
 8006114:	2b00      	cmp	r3, #0
 8006116:	da01      	bge.n	800611c <test_scope+0x8c4>
 8006118:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800611c:	131b      	asrs	r3, r3, #12
 800611e:	425b      	negs	r3, r3
 8006120:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006124:	e025      	b.n	8006172 <test_scope+0x91a>
 8006126:	bf00      	nop
 8006128:	200137a0 	.word	0x200137a0
 800612c:	20016800 	.word	0x20016800
 8006130:	200157a0 	.word	0x200157a0
 8006134:	20015fa0 	.word	0x20015fa0
 8006138:	20013fa0 	.word	0x20013fa0
 800613c:	200147a0 	.word	0x200147a0
 8006140:	200127a0 	.word	0x200127a0
 8006144:	0001c007 	.word	0x0001c007
 8006148:	20014fa0 	.word	0x20014fa0
 800614c:	20012fa0 	.word	0x20012fa0
 8006150:	4a80      	ldr	r2, [pc, #512]	; (8006354 <test_scope+0xafc>)
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006158:	461a      	mov	r2, r3
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	019b      	lsls	r3, r3, #6
 8006162:	2b00      	cmp	r3, #0
 8006164:	da01      	bge.n	800616a <test_scope+0x912>
 8006166:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800616a:	131b      	asrs	r3, r3, #12
 800616c:	425b      	negs	r3, r3
 800616e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006172:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	b21b      	sxth	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	b211      	sxth	r1, r2
 800617c:	2200      	movs	r2, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f7fb fe44 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x00003F00 );
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	b21b      	sxth	r3, r3
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	b211      	sxth	r1, r2
 800618c:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8006190:	4618      	mov	r0, r3
 8006192:	f7fb fe3b 	bl	8001e0c <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8006196:	4b70      	ldr	r3, [pc, #448]	; (8006358 <test_scope+0xb00>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d011      	beq.n	80061c6 <test_scope+0x96e>
 80061a2:	4a6e      	ldr	r2, [pc, #440]	; (800635c <test_scope+0xb04>)
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061aa:	461a      	mov	r2, r3
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	019b      	lsls	r3, r3, #6
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da01      	bge.n	80061bc <test_scope+0x964>
 80061b8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80061bc:	131b      	asrs	r3, r3, #12
 80061be:	425b      	negs	r3, r3
 80061c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061c4:	e010      	b.n	80061e8 <test_scope+0x990>
 80061c6:	4a66      	ldr	r2, [pc, #408]	; (8006360 <test_scope+0xb08>)
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ce:	461a      	mov	r2, r3
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	019b      	lsls	r3, r3, #6
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da01      	bge.n	80061e0 <test_scope+0x988>
 80061dc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80061e0:	131b      	asrs	r3, r3, #12
 80061e2:	425b      	negs	r3, r3
 80061e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061e8:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 80061ea:	4b5b      	ldr	r3, [pc, #364]	; (8006358 <test_scope+0xb00>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d011      	beq.n	800621a <test_scope+0x9c2>
 80061f6:	4a5a      	ldr	r2, [pc, #360]	; (8006360 <test_scope+0xb08>)
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fe:	461a      	mov	r2, r3
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	019b      	lsls	r3, r3, #6
 8006208:	2b00      	cmp	r3, #0
 800620a:	da01      	bge.n	8006210 <test_scope+0x9b8>
 800620c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006210:	131b      	asrs	r3, r3, #12
 8006212:	425b      	negs	r3, r3
 8006214:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006218:	e010      	b.n	800623c <test_scope+0x9e4>
 800621a:	4a50      	ldr	r2, [pc, #320]	; (800635c <test_scope+0xb04>)
 800621c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006222:	461a      	mov	r2, r3
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	019b      	lsls	r3, r3, #6
 800622c:	2b00      	cmp	r3, #0
 800622e:	da01      	bge.n	8006234 <test_scope+0x9dc>
 8006230:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006234:	131b      	asrs	r3, r3, #12
 8006236:	425b      	negs	r3, r3
 8006238:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800623c:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	b21b      	sxth	r3, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	b211      	sxth	r1, r2
 8006246:	2200      	movs	r2, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f7fb fddf 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x000001F8 );
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	b21b      	sxth	r3, r3
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	b211      	sxth	r1, r2
 8006256:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800625a:	4618      	mov	r0, r3
 800625c:	f7fb fdd6 	bl	8001e0c <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8006260:	4b3d      	ldr	r3, [pc, #244]	; (8006358 <test_scope+0xb00>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d011      	beq.n	8006290 <test_scope+0xa38>
 800626c:	4a3d      	ldr	r2, [pc, #244]	; (8006364 <test_scope+0xb0c>)
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006274:	461a      	mov	r2, r3
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	019b      	lsls	r3, r3, #6
 800627e:	2b00      	cmp	r3, #0
 8006280:	da01      	bge.n	8006286 <test_scope+0xa2e>
 8006282:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006286:	131b      	asrs	r3, r3, #12
 8006288:	425b      	negs	r3, r3
 800628a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800628e:	e010      	b.n	80062b2 <test_scope+0xa5a>
 8006290:	4a35      	ldr	r2, [pc, #212]	; (8006368 <test_scope+0xb10>)
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006298:	461a      	mov	r2, r3
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da01      	bge.n	80062aa <test_scope+0xa52>
 80062a6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80062aa:	131b      	asrs	r3, r3, #12
 80062ac:	425b      	negs	r3, r3
 80062ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80062b2:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 80062b4:	4b28      	ldr	r3, [pc, #160]	; (8006358 <test_scope+0xb00>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d011      	beq.n	80062e4 <test_scope+0xa8c>
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <test_scope+0xb10>)
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c8:	461a      	mov	r2, r3
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	019b      	lsls	r3, r3, #6
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da01      	bge.n	80062da <test_scope+0xa82>
 80062d6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80062da:	131b      	asrs	r3, r3, #12
 80062dc:	425b      	negs	r3, r3
 80062de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80062e2:	e010      	b.n	8006306 <test_scope+0xaae>
 80062e4:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <test_scope+0xb0c>)
 80062e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ec:	461a      	mov	r2, r3
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da01      	bge.n	80062fe <test_scope+0xaa6>
 80062fa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80062fe:	131b      	asrs	r3, r3, #12
 8006300:	425b      	negs	r3, r3
 8006302:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006306:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	b21b      	sxth	r3, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	b211      	sxth	r1, r2
 8006310:	2200      	movs	r2, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f7fb fd7a 	bl	8001e0c <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0xFFFFFFFF );
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	b21b      	sxth	r3, r3
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	b211      	sxth	r1, r2
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	4618      	mov	r0, r3
 8006326:	f7fb fd71 	bl	8001e0c <lcd_set_pixel>
		for( int jj = 0; jj < 480; jj++ )
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	3301      	adds	r3, #1
 800632e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006336:	f6ff ac33 	blt.w	8005ba0 <test_scope+0x348>

		}

		//lcd_rect( 240, 0, 1, 320, 0xFFFFFF00 );
		//printf( "], dtype=np.float32 )\n" );
		i += 1;
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <test_scope+0xb00>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	4a05      	ldr	r2, [pc, #20]	; (8006358 <test_scope+0xb00>)
 8006342:	6013      	str	r3, [r2, #0]
		trigger_bck = trigger;
 8006344:	4a09      	ldr	r2, [pc, #36]	; (800636c <test_scope+0xb14>)
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	6013      	str	r3, [r2, #0]
		//HAL_Delay( 10 );
	}
}
 800634a:	bf00      	nop
 800634c:	3750      	adds	r7, #80	; 0x50
 800634e:	46bd      	mov	sp, r7
 8006350:	bdb0      	pop	{r4, r5, r7, pc}
 8006352:	bf00      	nop
 8006354:	20014fa0 	.word	0x20014fa0
 8006358:	20016800 	.word	0x20016800
 800635c:	200157a0 	.word	0x200157a0
 8006360:	200137a0 	.word	0x200137a0
 8006364:	20015fa0 	.word	0x20015fa0
 8006368:	20013fa0 	.word	0x20013fa0
 800636c:	20016804 	.word	0x20016804

08006370 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <MX_SPI3_Init+0x74>)
 8006376:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <MX_SPI3_Init+0x78>)
 8006378:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800637a:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <MX_SPI3_Init+0x74>)
 800637c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006380:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006382:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <MX_SPI3_Init+0x74>)
 8006384:	2200      	movs	r2, #0
 8006386:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006388:	4b16      	ldr	r3, [pc, #88]	; (80063e4 <MX_SPI3_Init+0x74>)
 800638a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800638e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006390:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <MX_SPI3_Init+0x74>)
 8006392:	2200      	movs	r2, #0
 8006394:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <MX_SPI3_Init+0x74>)
 8006398:	2200      	movs	r2, #0
 800639a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <MX_SPI3_Init+0x74>)
 800639e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063a6:	2230      	movs	r2, #48	; 0x30
 80063a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063aa:	4b0e      	ldr	r3, [pc, #56]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80063bc:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063be:	2207      	movs	r2, #7
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80063c2:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80063ce:	4805      	ldr	r0, [pc, #20]	; (80063e4 <MX_SPI3_Init+0x74>)
 80063d0:	f005 fc9e 	bl	800bd10 <HAL_SPI_Init>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80063da:	f7fe fcc4 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80063de:	bf00      	nop
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20016808 	.word	0x20016808
 80063e8:	40003c00 	.word	0x40003c00

080063ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a17      	ldr	r2, [pc, #92]	; (8006468 <HAL_SPI_MspInit+0x7c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d128      	bne.n	8006460 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800640e:	4b17      	ldr	r3, [pc, #92]	; (800646c <HAL_SPI_MspInit+0x80>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	4a16      	ldr	r2, [pc, #88]	; (800646c <HAL_SPI_MspInit+0x80>)
 8006414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006418:	6593      	str	r3, [r2, #88]	; 0x58
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <HAL_SPI_MspInit+0x80>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006426:	4b11      	ldr	r3, [pc, #68]	; (800646c <HAL_SPI_MspInit+0x80>)
 8006428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642a:	4a10      	ldr	r2, [pc, #64]	; (800646c <HAL_SPI_MspInit+0x80>)
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006432:	4b0e      	ldr	r3, [pc, #56]	; (800646c <HAL_SPI_MspInit+0x80>)
 8006434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800643e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006444:	2302      	movs	r3, #2
 8006446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800644c:	2300      	movs	r3, #0
 800644e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006450:	2306      	movs	r3, #6
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006454:	f107 0314 	add.w	r3, r7, #20
 8006458:	4619      	mov	r1, r3
 800645a:	4805      	ldr	r0, [pc, #20]	; (8006470 <HAL_SPI_MspInit+0x84>)
 800645c:	f003 fed8 	bl	800a210 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006460:	bf00      	nop
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40003c00 	.word	0x40003c00
 800646c:	40021000 	.word	0x40021000
 8006470:	48000800 	.word	0x48000800

08006474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800647a:	4b10      	ldr	r3, [pc, #64]	; (80064bc <HAL_MspInit+0x48>)
 800647c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647e:	4a0f      	ldr	r2, [pc, #60]	; (80064bc <HAL_MspInit+0x48>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	6613      	str	r3, [r2, #96]	; 0x60
 8006486:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <HAL_MspInit+0x48>)
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <HAL_MspInit+0x48>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <HAL_MspInit+0x48>)
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649c:	6593      	str	r3, [r2, #88]	; 0x58
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <HAL_MspInit+0x48>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80064aa:	f000 fb97 	bl	8006bdc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80064ae:	2002      	movs	r0, #2
 80064b0:	f000 fb80 	bl	8006bb4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40021000 	.word	0x40021000

080064c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064c4:	e7fe      	b.n	80064c4 <NMI_Handler+0x4>

080064c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064ca:	e7fe      	b.n	80064ca <HardFault_Handler+0x4>

080064cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064d0:	e7fe      	b.n	80064d0 <MemManage_Handler+0x4>

080064d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064d2:	b480      	push	{r7}
 80064d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064d6:	e7fe      	b.n	80064d6 <BusFault_Handler+0x4>

080064d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064dc:	e7fe      	b.n	80064dc <UsageFault_Handler+0x4>

080064de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064de:	b480      	push	{r7}
 80064e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064e2:	bf00      	nop
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064f0:	bf00      	nop
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064fa:	b480      	push	{r7}
 80064fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064fe:	bf00      	nop
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800650c:	f000 fb12 	bl	8006b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006510:	bf00      	nop
 8006512:	bd80      	pop	{r7, pc}

08006514 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 8006518:	4802      	ldr	r0, [pc, #8]	; (8006524 <DMA1_Channel1_IRQHandler+0x10>)
 800651a:	f003 fd2a 	bl	8009f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800651e:	bf00      	nop
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20011728 	.word	0x20011728

08006528 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800652c:	4802      	ldr	r0, [pc, #8]	; (8006538 <DMA1_Channel2_IRQHandler+0x10>)
 800652e:	f003 fd20 	bl	8009f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000534 	.word	0x20000534

0800653c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8006540:	4802      	ldr	r0, [pc, #8]	; (800654c <DMA1_Channel3_IRQHandler+0x10>)
 8006542:	f003 fd16 	bl	8009f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	200006e0 	.word	0x200006e0

08006550 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8006554:	4802      	ldr	r0, [pc, #8]	; (8006560 <DMA1_Channel4_IRQHandler+0x10>)
 8006556:	f003 fd0c 	bl	8009f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800655a:	bf00      	nop
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000740 	.word	0x20000740

08006564 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8006568:	4802      	ldr	r0, [pc, #8]	; (8006574 <DMA1_Channel5_IRQHandler+0x10>)
 800656a:	f003 fd02 	bl	8009f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000594 	.word	0x20000594

08006578 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800657c:	4802      	ldr	r0, [pc, #8]	; (8006588 <DMA1_Channel6_IRQHandler+0x10>)
 800657e:	f003 fcf8 	bl	8009f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200005f4 	.word	0x200005f4

0800658c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8006590:	4802      	ldr	r0, [pc, #8]	; (800659c <DMA1_Channel7_IRQHandler+0x10>)
 8006592:	f003 fcee 	bl	8009f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000654 	.word	0x20000654

080065a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	extern int cndtr1;
	cndtr1 = hdma_adc1.Instance->CNDTR;
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <ADC1_2_IRQHandler+0x1c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <ADC1_2_IRQHandler+0x20>)
 80065ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80065b0:	4804      	ldr	r0, [pc, #16]	; (80065c4 <ADC1_2_IRQHandler+0x24>)
 80065b2:	f001 f985 	bl	80078c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80065b6:	bf00      	nop
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000534 	.word	0x20000534
 80065c0:	2001178c 	.word	0x2001178c
 80065c4:	20000384 	.word	0x20000384

080065c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern int cndtr2;
	cndtr2 = hdma_adc1.Instance->CNDTR;
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <TIM2_IRQHandler+0x1c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b04      	ldr	r3, [pc, #16]	; (80065e8 <TIM2_IRQHandler+0x20>)
 80065d6:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80065d8:	4804      	ldr	r0, [pc, #16]	; (80065ec <TIM2_IRQHandler+0x24>)
 80065da:	f006 fa79 	bl	800cad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80065de:	bf00      	nop
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000534 	.word	0x20000534
 80065e8:	20011790 	.word	0x20011790
 80065ec:	200168bc 	.word	0x200168bc

080065f0 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi1);
 80065f4:	4802      	ldr	r0, [pc, #8]	; (8006600 <QUADSPI_IRQHandler+0x10>)
 80065f6:	f004 f9c7 	bl	800a988 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80065fa:	bf00      	nop
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200116dc 	.word	0x200116dc

08006604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return 1;
 8006608:	2301      	movs	r3, #1
}
 800660a:	4618      	mov	r0, r3
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <_kill>:

int _kill(int pid, int sig)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800661e:	f01f f857 	bl	80256d0 <__errno>
 8006622:	4603      	mov	r3, r0
 8006624:	2216      	movs	r2, #22
 8006626:	601a      	str	r2, [r3, #0]
  return -1;
 8006628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <_exit>:

void _exit (int status)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800663c:	f04f 31ff 	mov.w	r1, #4294967295
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ffe7 	bl	8006614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006646:	e7fe      	b.n	8006646 <_exit+0x12>

08006648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e00a      	b.n	8006670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800665a:	f3af 8000 	nop.w
 800665e:	4601      	mov	r1, r0
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	60ba      	str	r2, [r7, #8]
 8006666:	b2ca      	uxtb	r2, r1
 8006668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	3301      	adds	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	dbf0      	blt.n	800665a <_read+0x12>
  }

  return len;
 8006678:	687b      	ldr	r3, [r7, #4]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800668a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066aa:	605a      	str	r2, [r3, #4]
  return 0;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <_isatty>:

int _isatty(int file)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80066c2:	2301      	movs	r3, #1
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066f4:	4a14      	ldr	r2, [pc, #80]	; (8006748 <_sbrk+0x5c>)
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <_sbrk+0x60>)
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006700:	4b13      	ldr	r3, [pc, #76]	; (8006750 <_sbrk+0x64>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006708:	4b11      	ldr	r3, [pc, #68]	; (8006750 <_sbrk+0x64>)
 800670a:	4a12      	ldr	r2, [pc, #72]	; (8006754 <_sbrk+0x68>)
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <_sbrk+0x64>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4413      	add	r3, r2
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d207      	bcs.n	800672c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800671c:	f01e ffd8 	bl	80256d0 <__errno>
 8006720:	4603      	mov	r3, r0
 8006722:	220c      	movs	r2, #12
 8006724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	e009      	b.n	8006740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <_sbrk+0x64>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006732:	4b07      	ldr	r3, [pc, #28]	; (8006750 <_sbrk+0x64>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	4a05      	ldr	r2, [pc, #20]	; (8006750 <_sbrk+0x64>)
 800673c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800673e:	68fb      	ldr	r3, [r7, #12]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20020000 	.word	0x20020000
 800674c:	00000400 	.word	0x00000400
 8006750:	2001686c 	.word	0x2001686c
 8006754:	20016aa8 	.word	0x20016aa8

08006758 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <SystemInit+0x20>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	4a05      	ldr	r2, [pc, #20]	; (8006778 <SystemInit+0x20>)
 8006764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800676c:	bf00      	nop
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006782:	f107 0310 	add.w	r3, r7, #16
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	609a      	str	r2, [r3, #8]
 800678e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006790:	1d3b      	adds	r3, r7, #4
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	605a      	str	r2, [r3, #4]
 8006798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800679a:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <MX_TIM1_Init+0x9c>)
 800679c:	4a1f      	ldr	r2, [pc, #124]	; (800681c <MX_TIM1_Init+0xa0>)
 800679e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 80067a0:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067a2:	2254      	movs	r2, #84	; 0x54
 80067a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80067ac:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067b2:	4b19      	ldr	r3, [pc, #100]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80067b8:	4b17      	ldr	r3, [pc, #92]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067be:	4b16      	ldr	r3, [pc, #88]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80067c4:	4814      	ldr	r0, [pc, #80]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067c6:	f005 ff0d 	bl	800c5e4 <HAL_TIM_Base_Init>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80067d0:	f7fe fac9 	bl	8004d66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80067da:	f107 0310 	add.w	r3, r7, #16
 80067de:	4619      	mov	r1, r3
 80067e0:	480d      	ldr	r0, [pc, #52]	; (8006818 <MX_TIM1_Init+0x9c>)
 80067e2:	f006 fb6f 	bl	800cec4 <HAL_TIM_ConfigClockSource>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80067ec:	f7fe fabb 	bl	8004d66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80067f0:	2320      	movs	r3, #32
 80067f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4805      	ldr	r0, [pc, #20]	; (8006818 <MX_TIM1_Init+0x9c>)
 8006802:	f007 f927 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800680c:	f7fe faab 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006810:	bf00      	nop
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20016870 	.word	0x20016870
 800681c:	40012c00 	.word	0x40012c00

08006820 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08e      	sub	sp, #56	; 0x38
 8006824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006834:	f107 031c 	add.w	r3, r7, #28
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	605a      	str	r2, [r3, #4]
 800683e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006840:	463b      	mov	r3, r7
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	605a      	str	r2, [r3, #4]
 8006848:	609a      	str	r2, [r3, #8]
 800684a:	60da      	str	r2, [r3, #12]
 800684c:	611a      	str	r2, [r3, #16]
 800684e:	615a      	str	r2, [r3, #20]
 8006850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006852:	4b2c      	ldr	r3, [pc, #176]	; (8006904 <MX_TIM2_Init+0xe4>)
 8006854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006858:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 85-1;
 800685a:	4b2a      	ldr	r3, [pc, #168]	; (8006904 <MX_TIM2_Init+0xe4>)
 800685c:	2254      	movs	r2, #84	; 0x54
 800685e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006860:	4b28      	ldr	r3, [pc, #160]	; (8006904 <MX_TIM2_Init+0xe4>)
 8006862:	2200      	movs	r2, #0
 8006864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 8006866:	4b27      	ldr	r3, [pc, #156]	; (8006904 <MX_TIM2_Init+0xe4>)
 8006868:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800686c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800686e:	4b25      	ldr	r3, [pc, #148]	; (8006904 <MX_TIM2_Init+0xe4>)
 8006870:	2200      	movs	r2, #0
 8006872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006874:	4b23      	ldr	r3, [pc, #140]	; (8006904 <MX_TIM2_Init+0xe4>)
 8006876:	2200      	movs	r2, #0
 8006878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800687a:	4822      	ldr	r0, [pc, #136]	; (8006904 <MX_TIM2_Init+0xe4>)
 800687c:	f005 feb2 	bl	800c5e4 <HAL_TIM_Base_Init>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8006886:	f7fe fa6e 	bl	8004d66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800688a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006894:	4619      	mov	r1, r3
 8006896:	481b      	ldr	r0, [pc, #108]	; (8006904 <MX_TIM2_Init+0xe4>)
 8006898:	f006 fb14 	bl	800cec4 <HAL_TIM_ConfigClockSource>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80068a2:	f7fe fa60 	bl	8004d66 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80068a6:	4817      	ldr	r0, [pc, #92]	; (8006904 <MX_TIM2_Init+0xe4>)
 80068a8:	f005 ff8b 	bl	800c7c2 <HAL_TIM_OC_Init>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80068b2:	f7fe fa58 	bl	8004d66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80068be:	f107 031c 	add.w	r3, r7, #28
 80068c2:	4619      	mov	r1, r3
 80068c4:	480f      	ldr	r0, [pc, #60]	; (8006904 <MX_TIM2_Init+0xe4>)
 80068c6:	f007 f8c5 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80068d0:	f7fe fa49 	bl	8004d66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80068d4:	2300      	movs	r3, #0
 80068d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1023;
 80068d8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80068dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068e6:	463b      	mov	r3, r7
 80068e8:	2200      	movs	r2, #0
 80068ea:	4619      	mov	r1, r3
 80068ec:	4805      	ldr	r0, [pc, #20]	; (8006904 <MX_TIM2_Init+0xe4>)
 80068ee:	f006 fa6f 	bl	800cdd0 <HAL_TIM_OC_ConfigChannel>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80068f8:	f7fe fa35 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80068fc:	bf00      	nop
 80068fe:	3738      	adds	r7, #56	; 0x38
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	200168bc 	.word	0x200168bc

08006908 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800690e:	f107 0310 	add.w	r3, r7, #16
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	605a      	str	r2, [r3, #4]
 8006918:	609a      	str	r2, [r3, #8]
 800691a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800691c:	1d3b      	adds	r3, r7, #4
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	605a      	str	r2, [r3, #4]
 8006924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006926:	4b1d      	ldr	r3, [pc, #116]	; (800699c <MX_TIM3_Init+0x94>)
 8006928:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <MX_TIM3_Init+0x98>)
 800692a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85-1;
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <MX_TIM3_Init+0x94>)
 800692e:	2254      	movs	r2, #84	; 0x54
 8006930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006932:	4b1a      	ldr	r3, [pc, #104]	; (800699c <MX_TIM3_Init+0x94>)
 8006934:	2200      	movs	r2, #0
 8006936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8006938:	4b18      	ldr	r3, [pc, #96]	; (800699c <MX_TIM3_Init+0x94>)
 800693a:	2201      	movs	r2, #1
 800693c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800693e:	4b17      	ldr	r3, [pc, #92]	; (800699c <MX_TIM3_Init+0x94>)
 8006940:	2200      	movs	r2, #0
 8006942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006944:	4b15      	ldr	r3, [pc, #84]	; (800699c <MX_TIM3_Init+0x94>)
 8006946:	2200      	movs	r2, #0
 8006948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800694a:	4814      	ldr	r0, [pc, #80]	; (800699c <MX_TIM3_Init+0x94>)
 800694c:	f005 fe4a 	bl	800c5e4 <HAL_TIM_Base_Init>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006956:	f7fe fa06 	bl	8004d66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800695a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800695e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006960:	f107 0310 	add.w	r3, r7, #16
 8006964:	4619      	mov	r1, r3
 8006966:	480d      	ldr	r0, [pc, #52]	; (800699c <MX_TIM3_Init+0x94>)
 8006968:	f006 faac 	bl	800cec4 <HAL_TIM_ConfigClockSource>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8006972:	f7fe f9f8 	bl	8004d66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006976:	2320      	movs	r3, #32
 8006978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4806      	ldr	r0, [pc, #24]	; (800699c <MX_TIM3_Init+0x94>)
 8006984:	f007 f866 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800698e:	f7fe f9ea 	bl	8004d66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006992:	bf00      	nop
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20016908 	.word	0x20016908
 80069a0:	40000400 	.word	0x40000400

080069a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <HAL_TIM_Base_MspInit+0x8c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d10c      	bne.n	80069d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80069b6:	4b1f      	ldr	r3, [pc, #124]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 80069b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 80069bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069c0:	6613      	str	r3, [r2, #96]	; 0x60
 80069c2:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 80069c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80069ce:	e02a      	b.n	8006a26 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d8:	d114      	bne.n	8006a04 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069da:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6593      	str	r3, [r2, #88]	; 0x58
 80069e6:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80069f2:	2200      	movs	r2, #0
 80069f4:	2100      	movs	r1, #0
 80069f6:	201c      	movs	r0, #28
 80069f8:	f002 fce9 	bl	80093ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80069fc:	201c      	movs	r0, #28
 80069fe:	f002 fd00 	bl	8009402 <HAL_NVIC_EnableIRQ>
}
 8006a02:	e010      	b.n	8006a26 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a0b      	ldr	r2, [pc, #44]	; (8006a38 <HAL_TIM_Base_MspInit+0x94>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d10b      	bne.n	8006a26 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a0e:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 8006a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a12:	4a08      	ldr	r2, [pc, #32]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 8006a14:	f043 0302 	orr.w	r3, r3, #2
 8006a18:	6593      	str	r3, [r2, #88]	; 0x58
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <HAL_TIM_Base_MspInit+0x90>)
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40021000 	.word	0x40021000
 8006a38:	40000400 	.word	0x40000400

08006a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006a3c:	480d      	ldr	r0, [pc, #52]	; (8006a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006a3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a40:	480d      	ldr	r0, [pc, #52]	; (8006a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a42:	490e      	ldr	r1, [pc, #56]	; (8006a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a44:	4a0e      	ldr	r2, [pc, #56]	; (8006a80 <LoopForever+0xe>)
  movs r3, #0
 8006a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006a48:	e002      	b.n	8006a50 <LoopCopyDataInit>

08006a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a4e:	3304      	adds	r3, #4

08006a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a54:	d3f9      	bcc.n	8006a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a56:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a58:	4c0b      	ldr	r4, [pc, #44]	; (8006a88 <LoopForever+0x16>)
  movs r3, #0
 8006a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a5c:	e001      	b.n	8006a62 <LoopFillZerobss>

08006a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a60:	3204      	adds	r2, #4

08006a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a64:	d3fb      	bcc.n	8006a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a66:	f7ff fe77 	bl	8006758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a6a:	f01e fe37 	bl	80256dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a6e:	f7fd ff83 	bl	8004978 <main>

08006a72 <LoopForever>:

LoopForever:
    b LoopForever
 8006a72:	e7fe      	b.n	8006a72 <LoopForever>
  ldr   r0, =_estack
 8006a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a7c:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8006a80:	0802b468 	.word	0x0802b468
  ldr r2, =_sbss
 8006a84:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8006a88:	20016aa4 	.word	0x20016aa4

08006a8c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006a8c:	e7fe      	b.n	8006a8c <ADC3_IRQHandler>

08006a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a98:	2003      	movs	r0, #3
 8006a9a:	f002 fc8d 	bl	80093b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	f000 f80e 	bl	8006ac0 <HAL_InitTick>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	71fb      	strb	r3, [r7, #7]
 8006aae:	e001      	b.n	8006ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006ab0:	f7ff fce0 	bl	8006474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006ab4:	79fb      	ldrb	r3, [r7, #7]

}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006acc:	4b16      	ldr	r3, [pc, #88]	; (8006b28 <HAL_InitTick+0x68>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d022      	beq.n	8006b1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006ad4:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <HAL_InitTick+0x6c>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <HAL_InitTick+0x68>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f002 fc98 	bl	800941e <HAL_SYSTICK_Config>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10f      	bne.n	8006b14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d809      	bhi.n	8006b0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006afa:	2200      	movs	r2, #0
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295
 8006b02:	f002 fc64 	bl	80093ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b06:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <HAL_InitTick+0x70>)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	e007      	b.n	8006b1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]
 8006b12:	e004      	b.n	8006b1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
 8006b18:	e001      	b.n	8006b1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20000020 	.word	0x20000020
 8006b2c:	20000018 	.word	0x20000018
 8006b30:	2000001c 	.word	0x2000001c

08006b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <HAL_IncTick+0x1c>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <HAL_IncTick+0x20>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4413      	add	r3, r2
 8006b42:	4a03      	ldr	r2, [pc, #12]	; (8006b50 <HAL_IncTick+0x1c>)
 8006b44:	6013      	str	r3, [r2, #0]
}
 8006b46:	bf00      	nop
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	20016954 	.word	0x20016954
 8006b54:	20000020 	.word	0x20000020

08006b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8006b5c:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <HAL_GetTick+0x14>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20016954 	.word	0x20016954

08006b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b78:	f7ff ffee 	bl	8006b58 <HAL_GetTick>
 8006b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d004      	beq.n	8006b94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b8a:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <HAL_Delay+0x40>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b94:	bf00      	nop
 8006b96:	f7ff ffdf 	bl	8006b58 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d8f7      	bhi.n	8006b96 <HAL_Delay+0x26>
  {
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000020 	.word	0x20000020

08006bb4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f023 0202 	bic.w	r2, r3, #2
 8006bc4:	4904      	ldr	r1, [pc, #16]	; (8006bd8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	600b      	str	r3, [r1, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	40010030 	.word	0x40010030

08006bdc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a04      	ldr	r2, [pc, #16]	; (8006bf8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	6013      	str	r3, [r2, #0]
}
 8006bec:	bf00      	nop
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40010030 	.word	0x40010030

08006bfc <LL_ADC_SetCommonClock>:
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	609a      	str	r2, [r3, #8]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <LL_ADC_SetCommonPathInternalCh>:
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LL_ADC_GetCommonPathInternalCh>:
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <LL_ADC_SetOffset>:
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3360      	adds	r3, #96	; 0x60
 8006c76:	461a      	mov	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b08      	ldr	r3, [pc, #32]	; (8006ca8 <LL_ADC_SetOffset+0x44>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	601a      	str	r2, [r3, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	03fff000 	.word	0x03fff000

08006cac <LL_ADC_GetOffsetChannel>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3360      	adds	r3, #96	; 0x60
 8006cba:	461a      	mov	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <LL_ADC_SetOffsetState>:
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3360      	adds	r3, #96	; 0x60
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	601a      	str	r2, [r3, #0]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <LL_ADC_SetOffsetSign>:
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b087      	sub	sp, #28
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3360      	adds	r3, #96	; 0x60
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	601a      	str	r2, [r3, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <LL_ADC_SetOffsetSaturation>:
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3360      	adds	r3, #96	; 0x60
 8006d54:	461a      	mov	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	601a      	str	r2, [r3, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	615a      	str	r2, [r3, #20]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <LL_ADC_REG_SetSequencerRanks>:
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3330      	adds	r3, #48	; 0x30
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	4413      	add	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	211f      	movs	r1, #31
 8006df2:	fa01 f303 	lsl.w	r3, r1, r3
 8006df6:	43db      	mvns	r3, r3
 8006df8:	401a      	ands	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0e9b      	lsrs	r3, r3, #26
 8006dfe:	f003 011f 	and.w	r1, r3, #31
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <LL_ADC_SetChannelSamplingTime>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3314      	adds	r3, #20
 8006e54:	461a      	mov	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	0e5b      	lsrs	r3, r3, #25
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	4413      	add	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	0d1b      	lsrs	r3, r3, #20
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	2107      	movs	r1, #7
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	43db      	mvns	r3, r3
 8006e78:	401a      	ands	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	0d1b      	lsrs	r3, r3, #20
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	fa01 f303 	lsl.w	r3, r1, r3
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	601a      	str	r2, [r3, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <LL_ADC_SetChannelSingleDiff>:
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a0f      	ldr	r2, [pc, #60]	; (8006ee8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d10a      	bne.n	8006ec6 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006ec4:	e00a      	b.n	8006edc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006edc:	bf00      	nop
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	407f0000 	.word	0x407f0000

08006eec <LL_ADC_SetAnalogWDMonitChannels>:
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	330c      	adds	r3, #12
 8006efc:	4618      	mov	r0, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	0d1b      	lsrs	r3, r3, #20
 8006f02:	f003 0103 	and.w	r1, r3, #3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f003 0201 	and.w	r2, r3, #1
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4403      	add	r3, r0
 8006f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006f26:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006f2a:	43db      	mvns	r3, r3
 8006f2c:	401a      	ands	r2, r3
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	400b      	ands	r3, r1
 8006f34:	431a      	orrs	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <LL_ADC_ConfigAnalogWDThresholds>:
{
 8006f46:	b480      	push	{r7}
 8006f48:	b087      	sub	sp, #28
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
 8006f52:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3320      	adds	r3, #32
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	0d1b      	lsrs	r3, r3, #20
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	f003 030c 	and.w	r3, r3, #12
 8006f64:	4413      	add	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	0419      	lsls	r1, r3, #16
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	430b      	orrs	r3, r1
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	601a      	str	r2, [r3, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <LL_ADC_GetMultimode>:
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 031f 	and.w	r3, r3, #31
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <LL_ADC_GetMultiDMATransfer>:
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <LL_ADC_DisableDeepPowerDown>:
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6093      	str	r3, [r2, #8]
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffa:	d101      	bne.n	8007000 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <LL_ADC_EnableInternalRegulator>:
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800701e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007022:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	609a      	str	r2, [r3, #8]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800704a:	d101      	bne.n	8007050 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <LL_ADC_Enable>:
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800706e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007072:	f043 0201 	orr.w	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	609a      	str	r2, [r3, #8]
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <LL_ADC_Disable>:
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007096:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800709a:	f043 0202 	orr.w	r2, r3, #2
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <LL_ADC_IsEnabled>:
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <LL_ADC_IsEnabled+0x18>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <LL_ADC_IsEnabled+0x1a>
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <LL_ADC_IsDisableOngoing>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d101      	bne.n	80070ec <LL_ADC_IsDisableOngoing+0x18>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e000      	b.n	80070ee <LL_ADC_IsDisableOngoing+0x1a>
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <LL_ADC_REG_StartConversion>:
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800710a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800710e:	f043 0204 	orr.w	r2, r3, #4
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	609a      	str	r2, [r3, #8]
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <LL_ADC_REG_StopConversion>:
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007132:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007136:	f043 0210 	orr.w	r2, r3, #16
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <LL_ADC_REG_IsConversionOngoing>:
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b04      	cmp	r3, #4
 800715c:	d101      	bne.n	8007162 <LL_ADC_REG_IsConversionOngoing+0x18>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <LL_ADC_INJ_StopConversion>:
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	609a      	str	r2, [r3, #8]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <LL_ADC_INJ_IsConversionOngoing>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d101      	bne.n	80071b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <LL_ADC_ClearFlag_AWD1>:
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2280      	movs	r2, #128	; 0x80
 80071ca:	601a      	str	r2, [r3, #0]
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <LL_ADC_ClearFlag_AWD2>:
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071e6:	601a      	str	r2, [r3, #0]
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <LL_ADC_ClearFlag_AWD3>:
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007202:	601a      	str	r2, [r3, #0]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <LL_ADC_EnableIT_AWD1>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <LL_ADC_EnableIT_AWD2>:
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <LL_ADC_EnableIT_AWD3>:
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <LL_ADC_DisableIT_AWD1>:
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	605a      	str	r2, [r3, #4]
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <LL_ADC_DisableIT_AWD2>:
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	605a      	str	r2, [r3, #4]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b089      	sub	sp, #36	; 0x24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80072dc:	2300      	movs	r3, #0
 80072de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e1af      	b.n	800764a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7f9 fef1 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff fe68 	bl	8006fe6 <LL_ADC_IsDeepPowerDownEnabled>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fe4e 	bl	8006fc2 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff fe83 	bl	8007036 <LL_ADC_IsInternalRegulatorEnabled>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d115      	bne.n	8007362 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fe67 	bl	800700e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007340:	4b9f      	ldr	r3, [pc, #636]	; (80075c0 <HAL_ADC_Init+0x2f0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	099b      	lsrs	r3, r3, #6
 8007346:	4a9f      	ldr	r2, [pc, #636]	; (80075c4 <HAL_ADC_Init+0x2f4>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	099b      	lsrs	r3, r3, #6
 800734e:	3301      	adds	r3, #1
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007354:	e002      	b.n	800735c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	3b01      	subs	r3, #1
 800735a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f9      	bne.n	8007356 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fe65 	bl	8007036 <LL_ADC_IsInternalRegulatorEnabled>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10d      	bne.n	800738e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007376:	f043 0210 	orr.w	r2, r3, #16
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007382:	f043 0201 	orr.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fed9 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 8007398:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f040 8148 	bne.w	8007638 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 8144 	bne.w	8007638 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80073b8:	f043 0202 	orr.w	r2, r3, #2
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff fe72 	bl	80070ae <LL_ADC_IsEnabled>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d141      	bne.n	8007454 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d8:	d004      	beq.n	80073e4 <HAL_ADC_Init+0x114>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a7a      	ldr	r2, [pc, #488]	; (80075c8 <HAL_ADC_Init+0x2f8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10f      	bne.n	8007404 <HAL_ADC_Init+0x134>
 80073e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80073e8:	f7ff fe61 	bl	80070ae <LL_ADC_IsEnabled>
 80073ec:	4604      	mov	r4, r0
 80073ee:	4876      	ldr	r0, [pc, #472]	; (80075c8 <HAL_ADC_Init+0x2f8>)
 80073f0:	f7ff fe5d 	bl	80070ae <LL_ADC_IsEnabled>
 80073f4:	4603      	mov	r3, r0
 80073f6:	4323      	orrs	r3, r4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bf0c      	ite	eq
 80073fc:	2301      	moveq	r3, #1
 80073fe:	2300      	movne	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	e012      	b.n	800742a <HAL_ADC_Init+0x15a>
 8007404:	4871      	ldr	r0, [pc, #452]	; (80075cc <HAL_ADC_Init+0x2fc>)
 8007406:	f7ff fe52 	bl	80070ae <LL_ADC_IsEnabled>
 800740a:	4604      	mov	r4, r0
 800740c:	4870      	ldr	r0, [pc, #448]	; (80075d0 <HAL_ADC_Init+0x300>)
 800740e:	f7ff fe4e 	bl	80070ae <LL_ADC_IsEnabled>
 8007412:	4603      	mov	r3, r0
 8007414:	431c      	orrs	r4, r3
 8007416:	486f      	ldr	r0, [pc, #444]	; (80075d4 <HAL_ADC_Init+0x304>)
 8007418:	f7ff fe49 	bl	80070ae <LL_ADC_IsEnabled>
 800741c:	4603      	mov	r3, r0
 800741e:	4323      	orrs	r3, r4
 8007420:	2b00      	cmp	r3, #0
 8007422:	bf0c      	ite	eq
 8007424:	2301      	moveq	r3, #1
 8007426:	2300      	movne	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d012      	beq.n	8007454 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007436:	d004      	beq.n	8007442 <HAL_ADC_Init+0x172>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a62      	ldr	r2, [pc, #392]	; (80075c8 <HAL_ADC_Init+0x2f8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d101      	bne.n	8007446 <HAL_ADC_Init+0x176>
 8007442:	4a65      	ldr	r2, [pc, #404]	; (80075d8 <HAL_ADC_Init+0x308>)
 8007444:	e000      	b.n	8007448 <HAL_ADC_Init+0x178>
 8007446:	4a65      	ldr	r2, [pc, #404]	; (80075dc <HAL_ADC_Init+0x30c>)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7ff fbd4 	bl	8006bfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7f5b      	ldrb	r3, [r3, #29]
 8007458:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800745e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007464:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800746a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007472:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007474:	4313      	orrs	r3, r2
 8007476:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800747e:	2b01      	cmp	r3, #1
 8007480:	d106      	bne.n	8007490 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	3b01      	subs	r3, #1
 8007488:	045b      	lsls	r3, r3, #17
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	4313      	orrs	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	4b4b      	ldr	r3, [pc, #300]	; (80075e0 <HAL_ADC_Init+0x310>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	69b9      	ldr	r1, [r7, #24]
 80074bc:	430b      	orrs	r3, r1
 80074be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fe35 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 80074e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fe56 	bl	8007198 <LL_ADC_INJ_IsConversionOngoing>
 80074ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d17f      	bne.n	80075f4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d17c      	bne.n	80075f4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80074fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007506:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007508:	4313      	orrs	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007516:	f023 0302 	bic.w	r3, r3, #2
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	69b9      	ldr	r1, [r7, #24]
 8007520:	430b      	orrs	r3, r1
 8007522:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d017      	beq.n	800755c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800753a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007544:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6911      	ldr	r1, [r2, #16]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	430b      	orrs	r3, r1
 8007556:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800755a:	e013      	b.n	8007584 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800756a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6812      	ldr	r2, [r2, #0]
 8007578:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800757c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007580:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800758a:	2b01      	cmp	r3, #1
 800758c:	d12a      	bne.n	80075e4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007598:	f023 0304 	bic.w	r3, r3, #4
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075a4:	4311      	orrs	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80075aa:	4311      	orrs	r1, r2
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075b0:	430a      	orrs	r2, r1
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0201 	orr.w	r2, r2, #1
 80075bc:	611a      	str	r2, [r3, #16]
 80075be:	e019      	b.n	80075f4 <HAL_ADC_Init+0x324>
 80075c0:	20000018 	.word	0x20000018
 80075c4:	053e2d63 	.word	0x053e2d63
 80075c8:	50000100 	.word	0x50000100
 80075cc:	50000400 	.word	0x50000400
 80075d0:	50000500 	.word	0x50000500
 80075d4:	50000600 	.word	0x50000600
 80075d8:	50000300 	.word	0x50000300
 80075dc:	50000700 	.word	0x50000700
 80075e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0201 	bic.w	r2, r2, #1
 80075f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d10c      	bne.n	8007616 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	f023 010f 	bic.w	r1, r3, #15
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	1e5a      	subs	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
 8007614:	e007      	b.n	8007626 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 020f 	bic.w	r2, r2, #15
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	f043 0201 	orr.w	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	65da      	str	r2, [r3, #92]	; 0x5c
 8007636:	e007      	b.n	8007648 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763c:	f043 0210 	orr.w	r2, r3, #16
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007648:	7ffb      	ldrb	r3, [r7, #31]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3724      	adds	r7, #36	; 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd90      	pop	{r4, r7, pc}
 8007652:	bf00      	nop

08007654 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007668:	d004      	beq.n	8007674 <HAL_ADC_Start_DMA+0x20>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a5a      	ldr	r2, [pc, #360]	; (80077d8 <HAL_ADC_Start_DMA+0x184>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d101      	bne.n	8007678 <HAL_ADC_Start_DMA+0x24>
 8007674:	4b59      	ldr	r3, [pc, #356]	; (80077dc <HAL_ADC_Start_DMA+0x188>)
 8007676:	e000      	b.n	800767a <HAL_ADC_Start_DMA+0x26>
 8007678:	4b59      	ldr	r3, [pc, #356]	; (80077e0 <HAL_ADC_Start_DMA+0x18c>)
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fc85 	bl	8006f8a <LL_ADC_GetMultimode>
 8007680:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fd5f 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 809b 	bne.w	80077ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_ADC_Start_DMA+0x4e>
 800769e:	2302      	movs	r3, #2
 80076a0:	e096      	b.n	80077d0 <HAL_ADC_Start_DMA+0x17c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4d      	ldr	r2, [pc, #308]	; (80077e4 <HAL_ADC_Start_DMA+0x190>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d008      	beq.n	80076c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b05      	cmp	r3, #5
 80076be:	d002      	beq.n	80076c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b09      	cmp	r3, #9
 80076c4:	d17a      	bne.n	80077bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f001 fa6c 	bl	8008ba4 <ADC_Enable>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d16d      	bne.n	80077b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a3a      	ldr	r2, [pc, #232]	; (80077d8 <HAL_ADC_Start_DMA+0x184>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d009      	beq.n	8007708 <HAL_ADC_Start_DMA+0xb4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a3b      	ldr	r2, [pc, #236]	; (80077e8 <HAL_ADC_Start_DMA+0x194>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d002      	beq.n	8007704 <HAL_ADC_Start_DMA+0xb0>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	e003      	b.n	800770c <HAL_ADC_Start_DMA+0xb8>
 8007704:	4b39      	ldr	r3, [pc, #228]	; (80077ec <HAL_ADC_Start_DMA+0x198>)
 8007706:	e001      	b.n	800770c <HAL_ADC_Start_DMA+0xb8>
 8007708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	4293      	cmp	r3, r2
 8007712:	d002      	beq.n	800771a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d105      	bne.n	8007726 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d006      	beq.n	8007740 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007736:	f023 0206 	bic.w	r2, r3, #6
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	661a      	str	r2, [r3, #96]	; 0x60
 800773e:	e002      	b.n	8007746 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <HAL_ADC_Start_DMA+0x19c>)
 800774c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	4a28      	ldr	r2, [pc, #160]	; (80077f4 <HAL_ADC_Start_DMA+0x1a0>)
 8007754:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775a:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <HAL_ADC_Start_DMA+0x1a4>)
 800775c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	221c      	movs	r2, #28
 8007764:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0210 	orr.w	r2, r2, #16
 800777c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0201 	orr.w	r2, r2, #1
 800778c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3340      	adds	r3, #64	; 0x40
 8007798:	4619      	mov	r1, r3
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f002 faad 	bl	8009cfc <HAL_DMA_Start_IT>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff fca5 	bl	80070fa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80077b0:	e00d      	b.n	80077ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80077ba:	e008      	b.n	80077ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80077c8:	e001      	b.n	80077ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
 80077cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	50000100 	.word	0x50000100
 80077dc:	50000300 	.word	0x50000300
 80077e0:	50000700 	.word	0x50000700
 80077e4:	50000600 	.word	0x50000600
 80077e8:	50000500 	.word	0x50000500
 80077ec:	50000400 	.word	0x50000400
 80077f0:	08008d27 	.word	0x08008d27
 80077f4:	08008dff 	.word	0x08008dff
 80077f8:	08008e1b 	.word	0x08008e1b

080077fc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_ADC_Stop_DMA+0x16>
 800780e:	2302      	movs	r3, #2
 8007810:	e051      	b.n	80078b6 <HAL_ADC_Stop_DMA+0xba>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800781a:	2103      	movs	r1, #3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 f905 	bl	8008a2c <ADC_ConversionStop>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d13f      	bne.n	80078ac <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0201 	bic.w	r2, r2, #1
 800783a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d10f      	bne.n	800786a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	4618      	mov	r0, r3
 8007850:	f002 facf 	bl	8009df2 <HAL_DMA_Abort>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0210 	bic.w	r2, r2, #16
 8007878:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 f9f1 	bl	8008c68 <ADC_Disable>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]
 800788a:	e002      	b.n	8007892 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f9eb 	bl	8008c68 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d109      	bne.n	80078ac <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80078a0:	f023 0301 	bic.w	r3, r3, #1
 80078a4:	f043 0201 	orr.w	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80078c8:	2300      	movs	r3, #0
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078e4:	d004      	beq.n	80078f0 <HAL_ADC_IRQHandler+0x30>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a8e      	ldr	r2, [pc, #568]	; (8007b24 <HAL_ADC_IRQHandler+0x264>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d101      	bne.n	80078f4 <HAL_ADC_IRQHandler+0x34>
 80078f0:	4b8d      	ldr	r3, [pc, #564]	; (8007b28 <HAL_ADC_IRQHandler+0x268>)
 80078f2:	e000      	b.n	80078f6 <HAL_ADC_IRQHandler+0x36>
 80078f4:	4b8d      	ldr	r3, [pc, #564]	; (8007b2c <HAL_ADC_IRQHandler+0x26c>)
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fb47 	bl	8006f8a <LL_ADC_GetMultimode>
 80078fc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <HAL_ADC_IRQHandler+0x78>
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d012      	beq.n	8007938 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007922:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fb62 	bl	8008ff4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2202      	movs	r2, #2
 8007936:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f003 0304 	and.w	r3, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d004      	beq.n	800794c <HAL_ADC_IRQHandler+0x8c>
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 8094 	beq.w	8007a80 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f003 0308 	and.w	r3, r3, #8
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 808e 	beq.w	8007a80 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d105      	bne.n	800797c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007974:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fa0d 	bl	8006da0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d072      	beq.n	8007a72 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a64      	ldr	r2, [pc, #400]	; (8007b24 <HAL_ADC_IRQHandler+0x264>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_ADC_IRQHandler+0xea>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a65      	ldr	r2, [pc, #404]	; (8007b30 <HAL_ADC_IRQHandler+0x270>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d002      	beq.n	80079a6 <HAL_ADC_IRQHandler+0xe6>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	e003      	b.n	80079ae <HAL_ADC_IRQHandler+0xee>
 80079a6:	4b63      	ldr	r3, [pc, #396]	; (8007b34 <HAL_ADC_IRQHandler+0x274>)
 80079a8:	e001      	b.n	80079ae <HAL_ADC_IRQHandler+0xee>
 80079aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d008      	beq.n	80079c8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d002      	beq.n	80079c8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b09      	cmp	r3, #9
 80079c6:	d104      	bne.n	80079d2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	623b      	str	r3, [r7, #32]
 80079d0:	e014      	b.n	80079fc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a53      	ldr	r2, [pc, #332]	; (8007b24 <HAL_ADC_IRQHandler+0x264>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d009      	beq.n	80079f0 <HAL_ADC_IRQHandler+0x130>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a53      	ldr	r2, [pc, #332]	; (8007b30 <HAL_ADC_IRQHandler+0x270>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d002      	beq.n	80079ec <HAL_ADC_IRQHandler+0x12c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	e003      	b.n	80079f4 <HAL_ADC_IRQHandler+0x134>
 80079ec:	4b51      	ldr	r3, [pc, #324]	; (8007b34 <HAL_ADC_IRQHandler+0x274>)
 80079ee:	e001      	b.n	80079f4 <HAL_ADC_IRQHandler+0x134>
 80079f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079f4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d135      	bne.n	8007a72 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d12e      	bne.n	8007a72 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff fb96 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11a      	bne.n	8007a5a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 020c 	bic.w	r2, r2, #12
 8007a32:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d112      	bne.n	8007a72 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a50:	f043 0201 	orr.w	r2, r3, #1
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a58:	e00b      	b.n	8007a72 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5e:	f043 0210 	orr.w	r2, r3, #16
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a6a:	f043 0201 	orr.w	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fd fdca 	bl	800560c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	220c      	movs	r2, #12
 8007a7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <HAL_ADC_IRQHandler+0x1d4>
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80b3 	beq.w	8007c06 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 80ad 	beq.w	8007c06 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff f9a8 	bl	8006e1e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007ace:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff f963 	bl	8006da0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ada:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a10      	ldr	r2, [pc, #64]	; (8007b24 <HAL_ADC_IRQHandler+0x264>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d009      	beq.n	8007afa <HAL_ADC_IRQHandler+0x23a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a11      	ldr	r2, [pc, #68]	; (8007b30 <HAL_ADC_IRQHandler+0x270>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d002      	beq.n	8007af6 <HAL_ADC_IRQHandler+0x236>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	e003      	b.n	8007afe <HAL_ADC_IRQHandler+0x23e>
 8007af6:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <HAL_ADC_IRQHandler+0x274>)
 8007af8:	e001      	b.n	8007afe <HAL_ADC_IRQHandler+0x23e>
 8007afa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6812      	ldr	r2, [r2, #0]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d008      	beq.n	8007b18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b06      	cmp	r3, #6
 8007b10:	d002      	beq.n	8007b18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b07      	cmp	r3, #7
 8007b16:	d10f      	bne.n	8007b38 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	623b      	str	r3, [r7, #32]
 8007b20:	e01f      	b.n	8007b62 <HAL_ADC_IRQHandler+0x2a2>
 8007b22:	bf00      	nop
 8007b24:	50000100 	.word	0x50000100
 8007b28:	50000300 	.word	0x50000300
 8007b2c:	50000700 	.word	0x50000700
 8007b30:	50000500 	.word	0x50000500
 8007b34:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a8b      	ldr	r2, [pc, #556]	; (8007d6c <HAL_ADC_IRQHandler+0x4ac>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <HAL_ADC_IRQHandler+0x296>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a8a      	ldr	r2, [pc, #552]	; (8007d70 <HAL_ADC_IRQHandler+0x4b0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d002      	beq.n	8007b52 <HAL_ADC_IRQHandler+0x292>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	e003      	b.n	8007b5a <HAL_ADC_IRQHandler+0x29a>
 8007b52:	4b88      	ldr	r3, [pc, #544]	; (8007d74 <HAL_ADC_IRQHandler+0x4b4>)
 8007b54:	e001      	b.n	8007b5a <HAL_ADC_IRQHandler+0x29a>
 8007b56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007b5a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d047      	beq.n	8007bf8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <HAL_ADC_IRQHandler+0x2c2>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d03f      	beq.n	8007bf8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d13a      	bne.n	8007bf8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	d133      	bne.n	8007bf8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d12e      	bne.n	8007bf8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff fafa 	bl	8007198 <LL_ADC_INJ_IsConversionOngoing>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d11a      	bne.n	8007be0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bb8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d112      	bne.n	8007bf8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd6:	f043 0201 	orr.w	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8007bde:	e00b      	b.n	8007bf8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	f043 0210 	orr.w	r2, r3, #16
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf0:	f043 0201 	orr.w	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 f9dd 	bl	8008fb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2260      	movs	r2, #96	; 0x60
 8007c04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d011      	beq.n	8007c34 <HAL_ADC_IRQHandler+0x374>
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fd fd26 	bl	8005678 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2280      	movs	r2, #128	; 0x80
 8007c32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d012      	beq.n	8007c64 <HAL_ADC_IRQHandler+0x3a4>
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7fd fd45 	bl	80056e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d012      	beq.n	8007c94 <HAL_ADC_IRQHandler+0x3d4>
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00d      	beq.n	8007c94 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f9ab 	bl	8008fe0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d043      	beq.n	8007d26 <HAL_ADC_IRQHandler+0x466>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d03e      	beq.n	8007d26 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb4:	e021      	b.n	8007cfa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d015      	beq.n	8007ce8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cc4:	d004      	beq.n	8007cd0 <HAL_ADC_IRQHandler+0x410>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a28      	ldr	r2, [pc, #160]	; (8007d6c <HAL_ADC_IRQHandler+0x4ac>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d101      	bne.n	8007cd4 <HAL_ADC_IRQHandler+0x414>
 8007cd0:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <HAL_ADC_IRQHandler+0x4b8>)
 8007cd2:	e000      	b.n	8007cd6 <HAL_ADC_IRQHandler+0x416>
 8007cd4:	4b29      	ldr	r3, [pc, #164]	; (8007d7c <HAL_ADC_IRQHandler+0x4bc>)
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff f965 	bl	8006fa6 <LL_ADC_GetMultiDMATransfer>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce6:	e008      	b.n	8007cfa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10e      	bne.n	8007d1e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d10:	f043 0202 	orr.w	r2, r3, #2
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f831 	bl	8007d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2210      	movs	r2, #16
 8007d24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d018      	beq.n	8007d62 <HAL_ADC_IRQHandler+0x4a2>
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d013      	beq.n	8007d62 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4a:	f043 0208 	orr.w	r2, r3, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f935 	bl	8008fcc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007d62:	bf00      	nop
 8007d64:	3728      	adds	r7, #40	; 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	50000100 	.word	0x50000100
 8007d70:	50000500 	.word	0x50000500
 8007d74:	50000400 	.word	0x50000400
 8007d78:	50000300 	.word	0x50000300
 8007d7c:	50000700 	.word	0x50000700

08007d80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b0b6      	sub	sp, #216	; 0xd8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d102      	bne.n	8007db8 <HAL_ADC_ConfigChannel+0x24>
 8007db2:	2302      	movs	r3, #2
 8007db4:	f000 bc13 	b.w	80085de <HAL_ADC_ConfigChannel+0x84a>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff f9c0 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 83f3 	bne.w	80085b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6859      	ldr	r1, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f7fe fff1 	bl	8006dc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff f9ae 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 8007dee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff f9ce 	bl	8007198 <LL_ADC_INJ_IsConversionOngoing>
 8007dfc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f040 81d9 	bne.w	80081bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f040 81d4 	bne.w	80081bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1c:	d10f      	bne.n	8007e3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f7ff f80b 	bl	8006e44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe ff9f 	bl	8006d7a <LL_ADC_SetSamplingTimeCommonConfig>
 8007e3c:	e00e      	b.n	8007e5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6819      	ldr	r1, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7fe fffa 	bl	8006e44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2100      	movs	r1, #0
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe ff8f 	bl	8006d7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	695a      	ldr	r2, [r3, #20]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	08db      	lsrs	r3, r3, #3
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d022      	beq.n	8007ec4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6919      	ldr	r1, [r3, #16]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e8e:	f7fe fee9 	bl	8006c64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6818      	ldr	r0, [r3, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	6919      	ldr	r1, [r3, #16]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f7fe ff35 	bl	8006d0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	6919      	ldr	r1, [r3, #16]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	7f1b      	ldrb	r3, [r3, #28]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d102      	bne.n	8007eba <HAL_ADC_ConfigChannel+0x126>
 8007eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eb8:	e000      	b.n	8007ebc <HAL_ADC_ConfigChannel+0x128>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f7fe ff41 	bl	8006d44 <LL_ADC_SetOffsetSaturation>
 8007ec2:	e17b      	b.n	80081bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe feee 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <HAL_ADC_ConfigChannel+0x15c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2100      	movs	r1, #0
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe fee3 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	0e9b      	lsrs	r3, r3, #26
 8007eea:	f003 021f 	and.w	r2, r3, #31
 8007eee:	e01e      	b.n	8007f2e <HAL_ADC_ConfigChannel+0x19a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fed8 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f06:	fa93 f3a3 	rbit	r3, r3
 8007f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007f1e:	2320      	movs	r3, #32
 8007f20:	e004      	b.n	8007f2c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f26:	fab3 f383 	clz	r3, r3
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d105      	bne.n	8007f46 <HAL_ADC_ConfigChannel+0x1b2>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	0e9b      	lsrs	r3, r3, #26
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	e018      	b.n	8007f78 <HAL_ADC_ConfigChannel+0x1e4>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f52:	fa93 f3a3 	rbit	r3, r3
 8007f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8007f6a:	2320      	movs	r3, #32
 8007f6c:	e004      	b.n	8007f78 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f72:	fab3 f383 	clz	r3, r3
 8007f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d106      	bne.n	8007f8a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fea7 	bl	8006cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2101      	movs	r1, #1
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe fe8b 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <HAL_ADC_ConfigChannel+0x222>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fe80 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8007fac:	4603      	mov	r3, r0
 8007fae:	0e9b      	lsrs	r3, r3, #26
 8007fb0:	f003 021f 	and.w	r2, r3, #31
 8007fb4:	e01e      	b.n	8007ff4 <HAL_ADC_ConfigChannel+0x260>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2101      	movs	r1, #1
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fe75 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fcc:	fa93 f3a3 	rbit	r3, r3
 8007fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007fd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	e004      	b.n	8007ff2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fec:	fab3 f383 	clz	r3, r3
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <HAL_ADC_ConfigChannel+0x278>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	0e9b      	lsrs	r3, r3, #26
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	e018      	b.n	800803e <HAL_ADC_ConfigChannel+0x2aa>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008018:	fa93 f3a3 	rbit	r3, r3
 800801c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008030:	2320      	movs	r3, #32
 8008032:	e004      	b.n	800803e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008038:	fab3 f383 	clz	r3, r3
 800803c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800803e:	429a      	cmp	r2, r3
 8008040:	d106      	bne.n	8008050 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2200      	movs	r2, #0
 8008048:	2101      	movs	r1, #1
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fe44 	bl	8006cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2102      	movs	r1, #2
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fe28 	bl	8006cac <LL_ADC_GetOffsetChannel>
 800805c:	4603      	mov	r3, r0
 800805e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10a      	bne.n	800807c <HAL_ADC_ConfigChannel+0x2e8>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2102      	movs	r1, #2
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe fe1d 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8008072:	4603      	mov	r3, r0
 8008074:	0e9b      	lsrs	r3, r3, #26
 8008076:	f003 021f 	and.w	r2, r3, #31
 800807a:	e01e      	b.n	80080ba <HAL_ADC_ConfigChannel+0x326>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2102      	movs	r1, #2
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fe12 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8008088:	4603      	mov	r3, r0
 800808a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800808e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008092:	fa93 f3a3 	rbit	r3, r3
 8008096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800809a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800809e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80080a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80080aa:	2320      	movs	r3, #32
 80080ac:	e004      	b.n	80080b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80080ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080b2:	fab3 f383 	clz	r3, r3
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x33e>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	0e9b      	lsrs	r3, r3, #26
 80080cc:	f003 031f 	and.w	r3, r3, #31
 80080d0:	e016      	b.n	8008100 <HAL_ADC_ConfigChannel+0x36c>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080de:	fa93 f3a3 	rbit	r3, r3
 80080e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80080e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80080ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80080f2:	2320      	movs	r3, #32
 80080f4:	e004      	b.n	8008100 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80080f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080fa:	fab3 f383 	clz	r3, r3
 80080fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008100:	429a      	cmp	r2, r3
 8008102:	d106      	bne.n	8008112 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2200      	movs	r2, #0
 800810a:	2102      	movs	r1, #2
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fde3 	bl	8006cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2103      	movs	r1, #3
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fdc7 	bl	8006cac <LL_ADC_GetOffsetChannel>
 800811e:	4603      	mov	r3, r0
 8008120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <HAL_ADC_ConfigChannel+0x3aa>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2103      	movs	r1, #3
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fdbc 	bl	8006cac <LL_ADC_GetOffsetChannel>
 8008134:	4603      	mov	r3, r0
 8008136:	0e9b      	lsrs	r3, r3, #26
 8008138:	f003 021f 	and.w	r2, r3, #31
 800813c:	e017      	b.n	800816e <HAL_ADC_ConfigChannel+0x3da>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2103      	movs	r1, #3
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fdb1 	bl	8006cac <LL_ADC_GetOffsetChannel>
 800814a:	4603      	mov	r3, r0
 800814c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800814e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008150:	fa93 f3a3 	rbit	r3, r3
 8008154:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008158:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800815a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008160:	2320      	movs	r3, #32
 8008162:	e003      	b.n	800816c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008166:	fab3 f383 	clz	r3, r3
 800816a:	b2db      	uxtb	r3, r3
 800816c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008176:	2b00      	cmp	r3, #0
 8008178:	d105      	bne.n	8008186 <HAL_ADC_ConfigChannel+0x3f2>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	0e9b      	lsrs	r3, r3, #26
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	e011      	b.n	80081aa <HAL_ADC_ConfigChannel+0x416>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800818e:	fa93 f3a3 	rbit	r3, r3
 8008192:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008196:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800819e:	2320      	movs	r3, #32
 80081a0:	e003      	b.n	80081aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80081a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a4:	fab3 f383 	clz	r3, r3
 80081a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d106      	bne.n	80081bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	2103      	movs	r1, #3
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fd8e 	bl	8006cd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe ff74 	bl	80070ae <LL_ADC_IsEnabled>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 813d 	bne.w	8008448 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7fe fe5e 	bl	8006e9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	4aa2      	ldr	r2, [pc, #648]	; (8008470 <HAL_ADC_ConfigChannel+0x6dc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	f040 812e 	bne.w	8008448 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <HAL_ADC_ConfigChannel+0x480>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	0e9b      	lsrs	r3, r3, #26
 8008202:	3301      	adds	r3, #1
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2b09      	cmp	r3, #9
 800820a:	bf94      	ite	ls
 800820c:	2301      	movls	r3, #1
 800820e:	2300      	movhi	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	e019      	b.n	8008248 <HAL_ADC_ConfigChannel+0x4b4>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800821c:	fa93 f3a3 	rbit	r3, r3
 8008220:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008224:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800822c:	2320      	movs	r3, #32
 800822e:	e003      	b.n	8008238 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008232:	fab3 f383 	clz	r3, r3
 8008236:	b2db      	uxtb	r3, r3
 8008238:	3301      	adds	r3, #1
 800823a:	f003 031f 	and.w	r3, r3, #31
 800823e:	2b09      	cmp	r3, #9
 8008240:	bf94      	ite	ls
 8008242:	2301      	movls	r3, #1
 8008244:	2300      	movhi	r3, #0
 8008246:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008248:	2b00      	cmp	r3, #0
 800824a:	d079      	beq.n	8008340 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008254:	2b00      	cmp	r3, #0
 8008256:	d107      	bne.n	8008268 <HAL_ADC_ConfigChannel+0x4d4>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	0e9b      	lsrs	r3, r3, #26
 800825e:	3301      	adds	r3, #1
 8008260:	069b      	lsls	r3, r3, #26
 8008262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008266:	e015      	b.n	8008294 <HAL_ADC_ConfigChannel+0x500>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008270:	fa93 f3a3 	rbit	r3, r3
 8008274:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008278:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800827a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008280:	2320      	movs	r3, #32
 8008282:	e003      	b.n	800828c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008286:	fab3 f383 	clz	r3, r3
 800828a:	b2db      	uxtb	r3, r3
 800828c:	3301      	adds	r3, #1
 800828e:	069b      	lsls	r3, r3, #26
 8008290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <HAL_ADC_ConfigChannel+0x520>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	0e9b      	lsrs	r3, r3, #26
 80082a6:	3301      	adds	r3, #1
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2101      	movs	r1, #1
 80082ae:	fa01 f303 	lsl.w	r3, r1, r3
 80082b2:	e017      	b.n	80082e4 <HAL_ADC_ConfigChannel+0x550>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082bc:	fa93 f3a3 	rbit	r3, r3
 80082c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80082c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80082c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80082cc:	2320      	movs	r3, #32
 80082ce:	e003      	b.n	80082d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80082d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d2:	fab3 f383 	clz	r3, r3
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3301      	adds	r3, #1
 80082da:	f003 031f 	and.w	r3, r3, #31
 80082de:	2101      	movs	r1, #1
 80082e0:	fa01 f303 	lsl.w	r3, r1, r3
 80082e4:	ea42 0103 	orr.w	r1, r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <HAL_ADC_ConfigChannel+0x576>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	0e9b      	lsrs	r3, r3, #26
 80082fa:	3301      	adds	r3, #1
 80082fc:	f003 021f 	and.w	r2, r3, #31
 8008300:	4613      	mov	r3, r2
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	4413      	add	r3, r2
 8008306:	051b      	lsls	r3, r3, #20
 8008308:	e018      	b.n	800833c <HAL_ADC_ConfigChannel+0x5a8>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	fa93 f3a3 	rbit	r3, r3
 8008316:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800831c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8008322:	2320      	movs	r3, #32
 8008324:	e003      	b.n	800832e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8008326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008328:	fab3 f383 	clz	r3, r3
 800832c:	b2db      	uxtb	r3, r3
 800832e:	3301      	adds	r3, #1
 8008330:	f003 021f 	and.w	r2, r3, #31
 8008334:	4613      	mov	r3, r2
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	4413      	add	r3, r2
 800833a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800833c:	430b      	orrs	r3, r1
 800833e:	e07e      	b.n	800843e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <HAL_ADC_ConfigChannel+0x5c8>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	0e9b      	lsrs	r3, r3, #26
 8008352:	3301      	adds	r3, #1
 8008354:	069b      	lsls	r3, r3, #26
 8008356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800835a:	e015      	b.n	8008388 <HAL_ADC_ConfigChannel+0x5f4>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	fa93 f3a3 	rbit	r3, r3
 8008368:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008374:	2320      	movs	r3, #32
 8008376:	e003      	b.n	8008380 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837a:	fab3 f383 	clz	r3, r3
 800837e:	b2db      	uxtb	r3, r3
 8008380:	3301      	adds	r3, #1
 8008382:	069b      	lsls	r3, r3, #26
 8008384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <HAL_ADC_ConfigChannel+0x614>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	0e9b      	lsrs	r3, r3, #26
 800839a:	3301      	adds	r3, #1
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	2101      	movs	r1, #1
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	e017      	b.n	80083d8 <HAL_ADC_ConfigChannel+0x644>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	fa93 f3a3 	rbit	r3, r3
 80083b4:	61fb      	str	r3, [r7, #28]
  return result;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80083c0:	2320      	movs	r3, #32
 80083c2:	e003      	b.n	80083cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	fab3 f383 	clz	r3, r3
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	3301      	adds	r3, #1
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	2101      	movs	r1, #1
 80083d4:	fa01 f303 	lsl.w	r3, r1, r3
 80083d8:	ea42 0103 	orr.w	r1, r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10d      	bne.n	8008404 <HAL_ADC_ConfigChannel+0x670>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	0e9b      	lsrs	r3, r3, #26
 80083ee:	3301      	adds	r3, #1
 80083f0:	f003 021f 	and.w	r2, r3, #31
 80083f4:	4613      	mov	r3, r2
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	4413      	add	r3, r2
 80083fa:	3b1e      	subs	r3, #30
 80083fc:	051b      	lsls	r3, r3, #20
 80083fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008402:	e01b      	b.n	800843c <HAL_ADC_ConfigChannel+0x6a8>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	fa93 f3a3 	rbit	r3, r3
 8008410:	613b      	str	r3, [r7, #16]
  return result;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800841c:	2320      	movs	r3, #32
 800841e:	e003      	b.n	8008428 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	fab3 f383 	clz	r3, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	3301      	adds	r3, #1
 800842a:	f003 021f 	and.w	r2, r3, #31
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	3b1e      	subs	r3, #30
 8008436:	051b      	lsls	r3, r3, #20
 8008438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800843c:	430b      	orrs	r3, r1
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	6892      	ldr	r2, [r2, #8]
 8008442:	4619      	mov	r1, r3
 8008444:	f7fe fcfe 	bl	8006e44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	4b09      	ldr	r3, [pc, #36]	; (8008474 <HAL_ADC_ConfigChannel+0x6e0>)
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80be 	beq.w	80085d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800845e:	d004      	beq.n	800846a <HAL_ADC_ConfigChannel+0x6d6>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a04      	ldr	r2, [pc, #16]	; (8008478 <HAL_ADC_ConfigChannel+0x6e4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d10a      	bne.n	8008480 <HAL_ADC_ConfigChannel+0x6ec>
 800846a:	4b04      	ldr	r3, [pc, #16]	; (800847c <HAL_ADC_ConfigChannel+0x6e8>)
 800846c:	e009      	b.n	8008482 <HAL_ADC_ConfigChannel+0x6ee>
 800846e:	bf00      	nop
 8008470:	407f0000 	.word	0x407f0000
 8008474:	80080000 	.word	0x80080000
 8008478:	50000100 	.word	0x50000100
 800847c:	50000300 	.word	0x50000300
 8008480:	4b59      	ldr	r3, [pc, #356]	; (80085e8 <HAL_ADC_ConfigChannel+0x854>)
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fbe0 	bl	8006c48 <LL_ADC_GetCommonPathInternalCh>
 8008488:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a56      	ldr	r2, [pc, #344]	; (80085ec <HAL_ADC_ConfigChannel+0x858>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d004      	beq.n	80084a0 <HAL_ADC_ConfigChannel+0x70c>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a55      	ldr	r2, [pc, #340]	; (80085f0 <HAL_ADC_ConfigChannel+0x85c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d13a      	bne.n	8008516 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80084a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d134      	bne.n	8008516 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084b4:	d005      	beq.n	80084c2 <HAL_ADC_ConfigChannel+0x72e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a4e      	ldr	r2, [pc, #312]	; (80085f4 <HAL_ADC_ConfigChannel+0x860>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	f040 8085 	bne.w	80085cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ca:	d004      	beq.n	80084d6 <HAL_ADC_ConfigChannel+0x742>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a49      	ldr	r2, [pc, #292]	; (80085f8 <HAL_ADC_ConfigChannel+0x864>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d101      	bne.n	80084da <HAL_ADC_ConfigChannel+0x746>
 80084d6:	4a49      	ldr	r2, [pc, #292]	; (80085fc <HAL_ADC_ConfigChannel+0x868>)
 80084d8:	e000      	b.n	80084dc <HAL_ADC_ConfigChannel+0x748>
 80084da:	4a43      	ldr	r2, [pc, #268]	; (80085e8 <HAL_ADC_ConfigChannel+0x854>)
 80084dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084e4:	4619      	mov	r1, r3
 80084e6:	4610      	mov	r0, r2
 80084e8:	f7fe fb9b 	bl	8006c22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80084ec:	4b44      	ldr	r3, [pc, #272]	; (8008600 <HAL_ADC_ConfigChannel+0x86c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	099b      	lsrs	r3, r3, #6
 80084f2:	4a44      	ldr	r2, [pc, #272]	; (8008604 <HAL_ADC_ConfigChannel+0x870>)
 80084f4:	fba2 2303 	umull	r2, r3, r2, r3
 80084f8:	099b      	lsrs	r3, r3, #6
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	4613      	mov	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008506:	e002      	b.n	800850e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3b01      	subs	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f9      	bne.n	8008508 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008514:	e05a      	b.n	80085cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <HAL_ADC_ConfigChannel+0x874>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d125      	bne.n	800856c <HAL_ADC_ConfigChannel+0x7d8>
 8008520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d11f      	bne.n	800856c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a31      	ldr	r2, [pc, #196]	; (80085f8 <HAL_ADC_ConfigChannel+0x864>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d104      	bne.n	8008540 <HAL_ADC_ConfigChannel+0x7ac>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a34      	ldr	r2, [pc, #208]	; (800860c <HAL_ADC_ConfigChannel+0x878>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d047      	beq.n	80085d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008548:	d004      	beq.n	8008554 <HAL_ADC_ConfigChannel+0x7c0>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a2a      	ldr	r2, [pc, #168]	; (80085f8 <HAL_ADC_ConfigChannel+0x864>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d101      	bne.n	8008558 <HAL_ADC_ConfigChannel+0x7c4>
 8008554:	4a29      	ldr	r2, [pc, #164]	; (80085fc <HAL_ADC_ConfigChannel+0x868>)
 8008556:	e000      	b.n	800855a <HAL_ADC_ConfigChannel+0x7c6>
 8008558:	4a23      	ldr	r2, [pc, #140]	; (80085e8 <HAL_ADC_ConfigChannel+0x854>)
 800855a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800855e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008562:	4619      	mov	r1, r3
 8008564:	4610      	mov	r0, r2
 8008566:	f7fe fb5c 	bl	8006c22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800856a:	e031      	b.n	80085d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a27      	ldr	r2, [pc, #156]	; (8008610 <HAL_ADC_ConfigChannel+0x87c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d12d      	bne.n	80085d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800857a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d127      	bne.n	80085d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a1c      	ldr	r2, [pc, #112]	; (80085f8 <HAL_ADC_ConfigChannel+0x864>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d022      	beq.n	80085d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008594:	d004      	beq.n	80085a0 <HAL_ADC_ConfigChannel+0x80c>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a17      	ldr	r2, [pc, #92]	; (80085f8 <HAL_ADC_ConfigChannel+0x864>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d101      	bne.n	80085a4 <HAL_ADC_ConfigChannel+0x810>
 80085a0:	4a16      	ldr	r2, [pc, #88]	; (80085fc <HAL_ADC_ConfigChannel+0x868>)
 80085a2:	e000      	b.n	80085a6 <HAL_ADC_ConfigChannel+0x812>
 80085a4:	4a10      	ldr	r2, [pc, #64]	; (80085e8 <HAL_ADC_ConfigChannel+0x854>)
 80085a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085ae:	4619      	mov	r1, r3
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7fe fb36 	bl	8006c22 <LL_ADC_SetCommonPathInternalCh>
 80085b6:	e00c      	b.n	80085d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085bc:	f043 0220 	orr.w	r2, r3, #32
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80085ca:	e002      	b.n	80085d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80085cc:	bf00      	nop
 80085ce:	e000      	b.n	80085d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80085d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80085da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80085de:	4618      	mov	r0, r3
 80085e0:	37d8      	adds	r7, #216	; 0xd8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	50000700 	.word	0x50000700
 80085ec:	c3210000 	.word	0xc3210000
 80085f0:	90c00010 	.word	0x90c00010
 80085f4:	50000600 	.word	0x50000600
 80085f8:	50000100 	.word	0x50000100
 80085fc:	50000300 	.word	0x50000300
 8008600:	20000018 	.word	0x20000018
 8008604:	053e2d63 	.word	0x053e2d63
 8008608:	c7520000 	.word	0xc7520000
 800860c:	50000500 	.word	0x50000500
 8008610:	cb840000 	.word	0xcb840000

08008614 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08e      	sub	sp, #56	; 0x38
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800862c:	d003      	beq.n	8008636 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008632:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_ADC_AnalogWDGConfig+0x30>
 8008640:	2302      	movs	r3, #2
 8008642:	e1ea      	b.n	8008a1a <HAL_ADC_AnalogWDGConfig+0x406>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fd7a 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 8008656:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fd9b 	bl	8007198 <LL_ADC_INJ_IsConversionOngoing>
 8008662:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 8175 	bne.w	8008956 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	2b00      	cmp	r3, #0
 8008670:	f040 8171 	bne.w	8008956 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a90      	ldr	r2, [pc, #576]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	f040 808d 	bne.w	800879a <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008688:	d034      	beq.n	80086f4 <HAL_ADC_AnalogWDGConfig+0xe0>
 800868a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800868e:	d856      	bhi.n	800873e <HAL_ADC_AnalogWDGConfig+0x12a>
 8008690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008694:	d04b      	beq.n	800872e <HAL_ADC_AnalogWDGConfig+0x11a>
 8008696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800869a:	d850      	bhi.n	800873e <HAL_ADC_AnalogWDGConfig+0x12a>
 800869c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80086a0:	d01b      	beq.n	80086da <HAL_ADC_AnalogWDGConfig+0xc6>
 80086a2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80086a6:	d84a      	bhi.n	800873e <HAL_ADC_AnalogWDGConfig+0x12a>
 80086a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086ac:	d037      	beq.n	800871e <HAL_ADC_AnalogWDGConfig+0x10a>
 80086ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b2:	d844      	bhi.n	800873e <HAL_ADC_AnalogWDGConfig+0x12a>
 80086b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086b8:	d029      	beq.n	800870e <HAL_ADC_AnalogWDGConfig+0xfa>
 80086ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086be:	d13e      	bne.n	800873e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80086cc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80086d0:	461a      	mov	r2, r3
 80086d2:	497a      	ldr	r1, [pc, #488]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80086d4:	f7fe fc0a 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80086d8:	e039      	b.n	800874e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6818      	ldr	r0, [r3, #0]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80086e6:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80086ea:	461a      	mov	r2, r3
 80086ec:	4973      	ldr	r1, [pc, #460]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80086ee:	f7fe fbfd 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 80086f2:	e02c      	b.n	800874e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008700:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8008704:	461a      	mov	r2, r3
 8008706:	496d      	ldr	r1, [pc, #436]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008708:	f7fe fbf0 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 800870c:	e01f      	b.n	800874e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a6b      	ldr	r2, [pc, #428]	; (80088c0 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8008714:	4969      	ldr	r1, [pc, #420]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fbe8 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800871c:	e017      	b.n	800874e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a68      	ldr	r2, [pc, #416]	; (80088c4 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8008724:	4965      	ldr	r1, [pc, #404]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fbe0 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800872c:	e00f      	b.n	800874e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a65      	ldr	r2, [pc, #404]	; (80088c8 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008734:	4961      	ldr	r1, [pc, #388]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fbd8 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800873c:	e007      	b.n	800874e <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	495d      	ldr	r1, [pc, #372]	; (80088bc <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fbd0 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800874c:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fd22 	bl	80071be <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	7b1b      	ldrb	r3, [r3, #12]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d105      	bne.n	800878e <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fd42 	bl	8007210 <LL_ADC_EnableIT_AWD1>
 800878c:	e0e3      	b.n	8008956 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fd6c 	bl	8007270 <LL_ADC_DisableIT_AWD1>
 8008798:	e0dd      	b.n	8008956 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80087a2:	d01d      	beq.n	80087e0 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80087a4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80087a8:	f200 8092 	bhi.w	80088d0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087b0:	d07b      	beq.n	80088aa <HAL_ADC_AnalogWDGConfig+0x296>
 80087b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087b6:	f200 808b 	bhi.w	80088d0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80087be:	d00f      	beq.n	80087e0 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80087c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80087c4:	f200 8084 	bhi.w	80088d0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087cc:	d06d      	beq.n	80088aa <HAL_ADC_AnalogWDGConfig+0x296>
 80087ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087d2:	d87d      	bhi.n	80088d0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087d8:	d067      	beq.n	80088aa <HAL_ADC_AnalogWDGConfig+0x296>
 80087da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087de:	d177      	bne.n	80088d0 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a39      	ldr	r2, [pc, #228]	; (80088cc <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d12f      	bne.n	800884a <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d108      	bne.n	8008808 <HAL_ADC_AnalogWDGConfig+0x1f4>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	0e9b      	lsrs	r3, r3, #26
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	2201      	movs	r2, #1
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	e016      	b.n	8008836 <HAL_ADC_AnalogWDGConfig+0x222>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	fa93 f3a3 	rbit	r3, r3
 8008814:	61bb      	str	r3, [r7, #24]
  return result;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8008820:	2320      	movs	r3, #32
 8008822:	e003      	b.n	800882c <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	fab3 f383 	clz	r3, r3
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 031f 	and.w	r3, r3, #31
 8008830:	2201      	movs	r2, #1
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	6812      	ldr	r2, [r2, #0]
 8008842:	430b      	orrs	r3, r1
 8008844:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8008848:	e04b      	b.n	80088e2 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008852:	2b00      	cmp	r3, #0
 8008854:	d108      	bne.n	8008868 <HAL_ADC_AnalogWDGConfig+0x254>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	0e9b      	lsrs	r3, r3, #26
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	2201      	movs	r2, #1
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	e016      	b.n	8008896 <HAL_ADC_AnalogWDGConfig+0x282>
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	fa93 f3a3 	rbit	r3, r3
 8008874:	60fb      	str	r3, [r7, #12]
  return result;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8008880:	2320      	movs	r3, #32
 8008882:	e003      	b.n	800888c <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	fab3 f383 	clz	r3, r3
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	2201      	movs	r2, #1
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6812      	ldr	r2, [r2, #0]
 800889a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	430b      	orrs	r3, r1
 80088a4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80088a8:	e01b      	b.n	80088e2 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a05      	ldr	r2, [pc, #20]	; (80088c8 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80088b4:	4619      	mov	r1, r3
 80088b6:	f7fe fb19 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80088ba:	e012      	b.n	80088e2 <HAL_ADC_AnalogWDGConfig+0x2ce>
 80088bc:	7dc00000 	.word	0x7dc00000
 80088c0:	0087ffff 	.word	0x0087ffff
 80088c4:	0107ffff 	.word	0x0107ffff
 80088c8:	0187ffff 	.word	0x0187ffff
 80088cc:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	4619      	mov	r1, r3
 80088dc:	f7fe fb06 	bl	8006eec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80088e0:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a4f      	ldr	r2, [pc, #316]	; (8008a24 <HAL_ADC_AnalogWDGConfig+0x410>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d11a      	bne.n	8008922 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe fc6b 	bl	80071d8 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	7b1b      	ldrb	r3, [r3, #12]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d105      	bne.n	8008916 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fc8e 	bl	8007230 <LL_ADC_EnableIT_AWD2>
 8008914:	e01f      	b.n	8008956 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe fcb8 	bl	8007290 <LL_ADC_DisableIT_AWD2>
 8008920:	e019      	b.n	8008956 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008926:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fc5e 	bl	80071f4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	7b1b      	ldrb	r3, [r3, #12]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d105      	bne.n	800894c <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fc83 	bl	8007250 <LL_ADC_EnableIT_AWD3>
 800894a:	e004      	b.n	8008956 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fcad 	bl	80072b0 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a33      	ldr	r2, [pc, #204]	; (8008a28 <HAL_ADC_AnalogWDGConfig+0x414>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d118      	bne.n	8008992 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	691a      	ldr	r2, [r3, #16]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	08db      	lsrs	r3, r3, #3
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	695a      	ldr	r2, [r3, #20]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	633b      	str	r3, [r7, #48]	; 0x30
 8008990:	e035      	b.n	80089fe <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0318 	and.w	r3, r3, #24
 800899c:	2b18      	cmp	r3, #24
 800899e:	d00f      	beq.n	80089c0 <HAL_ADC_AnalogWDGConfig+0x3ac>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	08db      	lsrs	r3, r3, #3
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	f1c3 0302 	rsb	r3, r3, #2
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	f003 031e 	and.w	r3, r3, #30
 80089ba:	fa22 f303 	lsr.w	r3, r2, r3
 80089be:	e002      	b.n	80089c6 <HAL_ADC_AnalogWDGConfig+0x3b2>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f003 0318 	and.w	r3, r3, #24
 80089d2:	2b18      	cmp	r3, #24
 80089d4:	d00f      	beq.n	80089f6 <HAL_ADC_AnalogWDGConfig+0x3e2>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	695a      	ldr	r2, [r3, #20]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	08db      	lsrs	r3, r3, #3
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	f1c3 0302 	rsb	r3, r3, #2
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	f003 031e 	and.w	r3, r3, #30
 80089f0:	fa22 f303 	lsr.w	r3, r2, r3
 80089f4:	e002      	b.n	80089fc <HAL_ADC_AnalogWDGConfig+0x3e8>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6819      	ldr	r1, [r3, #0]
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a0a:	f7fe fa9c 	bl	8006f46 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3738      	adds	r7, #56	; 0x38
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	0017ffff 	.word	0x0017ffff
 8008a28:	7dc00000 	.word	0x7dc00000

08008a2c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe fb81 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 8008a48:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fba2 	bl	8007198 <LL_ADC_INJ_IsConversionOngoing>
 8008a54:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 8098 	beq.w	8008b94 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d02a      	beq.n	8008ac8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	7f5b      	ldrb	r3, [r3, #29]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d126      	bne.n	8008ac8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7f1b      	ldrb	r3, [r3, #28]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d122      	bne.n	8008ac8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008a82:	2301      	movs	r3, #1
 8008a84:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008a86:	e014      	b.n	8008ab2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4a45      	ldr	r2, [pc, #276]	; (8008ba0 <ADC_ConversionStop+0x174>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d90d      	bls.n	8008aac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a94:	f043 0210 	orr.w	r2, r3, #16
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa0:	f043 0201 	orr.w	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e074      	b.n	8008b96 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abc:	2b40      	cmp	r3, #64	; 0x40
 8008abe:	d1e3      	bne.n	8008a88 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2240      	movs	r2, #64	; 0x40
 8008ac6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d014      	beq.n	8008af8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fb39 	bl	800714a <LL_ADC_REG_IsConversionOngoing>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00c      	beq.n	8008af8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe faf6 	bl	80070d4 <LL_ADC_IsDisableOngoing>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe fb15 	bl	8007122 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d014      	beq.n	8008b28 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe fb48 	bl	8007198 <LL_ADC_INJ_IsConversionOngoing>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00c      	beq.n	8008b28 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fade 	bl	80070d4 <LL_ADC_IsDisableOngoing>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fb24 	bl	8007170 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d005      	beq.n	8008b3a <ADC_ConversionStop+0x10e>
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d105      	bne.n	8008b40 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008b34:	230c      	movs	r3, #12
 8008b36:	617b      	str	r3, [r7, #20]
        break;
 8008b38:	e005      	b.n	8008b46 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008b3a:	2308      	movs	r3, #8
 8008b3c:	617b      	str	r3, [r7, #20]
        break;
 8008b3e:	e002      	b.n	8008b46 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008b40:	2304      	movs	r3, #4
 8008b42:	617b      	str	r3, [r7, #20]
        break;
 8008b44:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008b46:	f7fe f807 	bl	8006b58 <HAL_GetTick>
 8008b4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b4c:	e01b      	b.n	8008b86 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008b4e:	f7fe f803 	bl	8006b58 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	d914      	bls.n	8008b86 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	4013      	ands	r3, r2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00d      	beq.n	8008b86 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b6e:	f043 0210 	orr.w	r2, r3, #16
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7a:	f043 0201 	orr.w	r2, r3, #1
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e007      	b.n	8008b96 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1dc      	bne.n	8008b4e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	a33fffff 	.word	0xa33fffff

08008ba4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe fa7c 	bl	80070ae <LL_ADC_IsEnabled>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d14d      	bne.n	8008c58 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <ADC_Enable+0xc0>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00d      	beq.n	8008be6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bce:	f043 0210 	orr.w	r2, r3, #16
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bda:	f043 0201 	orr.w	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e039      	b.n	8008c5a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fa37 	bl	800705e <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008bf0:	f7fd ffb2 	bl	8006b58 <HAL_GetTick>
 8008bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008bf6:	e028      	b.n	8008c4a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fa56 	bl	80070ae <LL_ADC_IsEnabled>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe fa26 	bl	800705e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c12:	f7fd ffa1 	bl	8006b58 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d914      	bls.n	8008c4a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d00d      	beq.n	8008c4a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c32:	f043 0210 	orr.w	r2, r3, #16
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3e:	f043 0201 	orr.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e007      	b.n	8008c5a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d1cf      	bne.n	8008bf8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	8000003f 	.word	0x8000003f

08008c68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fe fa2d 	bl	80070d4 <LL_ADC_IsDisableOngoing>
 8008c7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fa14 	bl	80070ae <LL_ADC_IsEnabled>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d047      	beq.n	8008d1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d144      	bne.n	8008d1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 030d 	and.w	r3, r3, #13
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10c      	bne.n	8008cba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fe f9ee 	bl	8007086 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008cb2:	f7fd ff51 	bl	8006b58 <HAL_GetTick>
 8008cb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008cb8:	e029      	b.n	8008d0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cbe:	f043 0210 	orr.w	r2, r3, #16
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cca:	f043 0201 	orr.w	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e023      	b.n	8008d1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008cd6:	f7fd ff3f 	bl	8006b58 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d914      	bls.n	8008d0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00d      	beq.n	8008d0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf6:	f043 0210 	orr.w	r2, r3, #16
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d02:	f043 0201 	orr.w	r2, r3, #1
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e007      	b.n	8008d1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1dc      	bne.n	8008cd6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d14b      	bne.n	8008dd8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0308 	and.w	r3, r3, #8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d021      	beq.n	8008d9e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe f81e 	bl	8006da0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d032      	beq.n	8008dd0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d12b      	bne.n	8008dd0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d11f      	bne.n	8008dd0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d94:	f043 0201 	orr.w	r2, r3, #1
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d9c:	e018      	b.n	8008dd0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d111      	bne.n	8008dd0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc8:	f043 0201 	orr.w	r2, r3, #1
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7fc fc1b 	bl	800560c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008dd6:	e00e      	b.n	8008df6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ddc:	f003 0310 	and.w	r3, r3, #16
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7fe ffcb 	bl	8007d80 <HAL_ADC_ErrorCallback>
}
 8008dea:	e004      	b.n	8008df6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7fc fbf3 	bl	80055f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e38:	f043 0204 	orr.w	r2, r3, #4
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7fe ff9d 	bl	8007d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <LL_ADC_IsEnabled>:
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d101      	bne.n	8008e66 <LL_ADC_IsEnabled+0x18>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <LL_ADC_IsEnabled+0x1a>
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <LL_ADC_StartCalibration>:
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	609a      	str	r2, [r3, #8]
}
 8008e9a:	bf00      	nop
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <LL_ADC_IsCalibrationOnGoing>:
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eba:	d101      	bne.n	8008ec0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e000      	b.n	8008ec2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <LL_ADC_REG_IsConversionOngoing>:
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0304 	and.w	r3, r3, #4
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d101      	bne.n	8008ee6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e000      	b.n	8008ee8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d101      	bne.n	8008f10 <HAL_ADCEx_Calibration_Start+0x1c>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e04d      	b.n	8008fac <HAL_ADCEx_Calibration_Start+0xb8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff fea5 	bl	8008c68 <ADC_Disable>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d136      	bne.n	8008f96 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f30:	f023 0302 	bic.w	r3, r3, #2
 8008f34:	f043 0202 	orr.w	r2, r3, #2
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff ff96 	bl	8008e74 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008f48:	e014      	b.n	8008f74 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4a18      	ldr	r2, [pc, #96]	; (8008fb4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d90d      	bls.n	8008f74 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f5c:	f023 0312 	bic.w	r3, r3, #18
 8008f60:	f043 0210 	orr.w	r2, r3, #16
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e01b      	b.n	8008fac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff ff94 	bl	8008ea6 <LL_ADC_IsCalibrationOnGoing>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e2      	bne.n	8008f4a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f88:	f023 0303 	bic.w	r3, r3, #3
 8008f8c:	f043 0201 	orr.w	r2, r3, #1
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f94:	e005      	b.n	8008fa2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f9a:	f043 0210 	orr.w	r2, r3, #16
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	0004de01 	.word	0x0004de01

08008fb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009008:	b590      	push	{r4, r7, lr}
 800900a:	b0a1      	sub	sp, #132	; 0x84
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800901e:	2b01      	cmp	r3, #1
 8009020:	d101      	bne.n	8009026 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009022:	2302      	movs	r3, #2
 8009024:	e0e7      	b.n	80091f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800902e:	2300      	movs	r3, #0
 8009030:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8009032:	2300      	movs	r3, #0
 8009034:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800903e:	d102      	bne.n	8009046 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009040:	4b6f      	ldr	r3, [pc, #444]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009042:	60bb      	str	r3, [r7, #8]
 8009044:	e009      	b.n	800905a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a6e      	ldr	r2, [pc, #440]	; (8009204 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d102      	bne.n	8009056 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8009050:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009052:	60bb      	str	r3, [r7, #8]
 8009054:	e001      	b.n	800905a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10b      	bne.n	8009078 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009064:	f043 0220 	orr.w	r2, r3, #32
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0be      	b.n	80091f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff ff27 	bl	8008ece <LL_ADC_REG_IsConversionOngoing>
 8009080:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff ff21 	bl	8008ece <LL_ADC_REG_IsConversionOngoing>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 80a0 	bne.w	80091d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 809c 	bne.w	80091d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a4:	d004      	beq.n	80090b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a55      	ldr	r2, [pc, #340]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d101      	bne.n	80090b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80090b0:	4b56      	ldr	r3, [pc, #344]	; (800920c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80090b2:	e000      	b.n	80090b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80090b4:	4b56      	ldr	r3, [pc, #344]	; (8009210 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80090b6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d04b      	beq.n	8009158 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	6859      	ldr	r1, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090d2:	035b      	lsls	r3, r3, #13
 80090d4:	430b      	orrs	r3, r1
 80090d6:	431a      	orrs	r2, r3
 80090d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090e4:	d004      	beq.n	80090f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a45      	ldr	r2, [pc, #276]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10f      	bne.n	8009110 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80090f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80090f4:	f7ff feab 	bl	8008e4e <LL_ADC_IsEnabled>
 80090f8:	4604      	mov	r4, r0
 80090fa:	4841      	ldr	r0, [pc, #260]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80090fc:	f7ff fea7 	bl	8008e4e <LL_ADC_IsEnabled>
 8009100:	4603      	mov	r3, r0
 8009102:	4323      	orrs	r3, r4
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf0c      	ite	eq
 8009108:	2301      	moveq	r3, #1
 800910a:	2300      	movne	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	e012      	b.n	8009136 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8009110:	483c      	ldr	r0, [pc, #240]	; (8009204 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009112:	f7ff fe9c 	bl	8008e4e <LL_ADC_IsEnabled>
 8009116:	4604      	mov	r4, r0
 8009118:	483b      	ldr	r0, [pc, #236]	; (8009208 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800911a:	f7ff fe98 	bl	8008e4e <LL_ADC_IsEnabled>
 800911e:	4603      	mov	r3, r0
 8009120:	431c      	orrs	r4, r3
 8009122:	483c      	ldr	r0, [pc, #240]	; (8009214 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8009124:	f7ff fe93 	bl	8008e4e <LL_ADC_IsEnabled>
 8009128:	4603      	mov	r3, r0
 800912a:	4323      	orrs	r3, r4
 800912c:	2b00      	cmp	r3, #0
 800912e:	bf0c      	ite	eq
 8009130:	2301      	moveq	r3, #1
 8009132:	2300      	movne	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d056      	beq.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800913a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009142:	f023 030f 	bic.w	r3, r3, #15
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	6811      	ldr	r1, [r2, #0]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	6892      	ldr	r2, [r2, #8]
 800914e:	430a      	orrs	r2, r1
 8009150:	431a      	orrs	r2, r3
 8009152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009154:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009156:	e047      	b.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009162:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800916c:	d004      	beq.n	8009178 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a23      	ldr	r2, [pc, #140]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d10f      	bne.n	8009198 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8009178:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800917c:	f7ff fe67 	bl	8008e4e <LL_ADC_IsEnabled>
 8009180:	4604      	mov	r4, r0
 8009182:	481f      	ldr	r0, [pc, #124]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009184:	f7ff fe63 	bl	8008e4e <LL_ADC_IsEnabled>
 8009188:	4603      	mov	r3, r0
 800918a:	4323      	orrs	r3, r4
 800918c:	2b00      	cmp	r3, #0
 800918e:	bf0c      	ite	eq
 8009190:	2301      	moveq	r3, #1
 8009192:	2300      	movne	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	e012      	b.n	80091be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009198:	481a      	ldr	r0, [pc, #104]	; (8009204 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800919a:	f7ff fe58 	bl	8008e4e <LL_ADC_IsEnabled>
 800919e:	4604      	mov	r4, r0
 80091a0:	4819      	ldr	r0, [pc, #100]	; (8009208 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80091a2:	f7ff fe54 	bl	8008e4e <LL_ADC_IsEnabled>
 80091a6:	4603      	mov	r3, r0
 80091a8:	431c      	orrs	r4, r3
 80091aa:	481a      	ldr	r0, [pc, #104]	; (8009214 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80091ac:	f7ff fe4f 	bl	8008e4e <LL_ADC_IsEnabled>
 80091b0:	4603      	mov	r3, r0
 80091b2:	4323      	orrs	r3, r4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bf0c      	ite	eq
 80091b8:	2301      	moveq	r3, #1
 80091ba:	2300      	movne	r3, #0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d012      	beq.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80091c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80091ca:	f023 030f 	bic.w	r3, r3, #15
 80091ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80091d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091d2:	e009      	b.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d8:	f043 0220 	orr.w	r2, r3, #32
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80091e6:	e000      	b.n	80091ea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80091f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3784      	adds	r7, #132	; 0x84
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd90      	pop	{r4, r7, pc}
 80091fe:	bf00      	nop
 8009200:	50000100 	.word	0x50000100
 8009204:	50000400 	.word	0x50000400
 8009208:	50000500 	.word	0x50000500
 800920c:	50000300 	.word	0x50000300
 8009210:	50000700 	.word	0x50000700
 8009214:	50000600 	.word	0x50000600

08009218 <__NVIC_SetPriorityGrouping>:
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009228:	4b0c      	ldr	r3, [pc, #48]	; (800925c <__NVIC_SetPriorityGrouping+0x44>)
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009234:	4013      	ands	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800924a:	4a04      	ldr	r2, [pc, #16]	; (800925c <__NVIC_SetPriorityGrouping+0x44>)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	60d3      	str	r3, [r2, #12]
}
 8009250:	bf00      	nop
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	e000ed00 	.word	0xe000ed00

08009260 <__NVIC_GetPriorityGrouping>:
{
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009264:	4b04      	ldr	r3, [pc, #16]	; (8009278 <__NVIC_GetPriorityGrouping+0x18>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	0a1b      	lsrs	r3, r3, #8
 800926a:	f003 0307 	and.w	r3, r3, #7
}
 800926e:	4618      	mov	r0, r3
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	e000ed00 	.word	0xe000ed00

0800927c <__NVIC_EnableIRQ>:
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	db0b      	blt.n	80092a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	f003 021f 	and.w	r2, r3, #31
 8009294:	4907      	ldr	r1, [pc, #28]	; (80092b4 <__NVIC_EnableIRQ+0x38>)
 8009296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800929a:	095b      	lsrs	r3, r3, #5
 800929c:	2001      	movs	r0, #1
 800929e:	fa00 f202 	lsl.w	r2, r0, r2
 80092a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80092a6:	bf00      	nop
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	e000e100 	.word	0xe000e100

080092b8 <__NVIC_SetPriority>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	db0a      	blt.n	80092e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	490c      	ldr	r1, [pc, #48]	; (8009304 <__NVIC_SetPriority+0x4c>)
 80092d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092d6:	0112      	lsls	r2, r2, #4
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	440b      	add	r3, r1
 80092dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092e0:	e00a      	b.n	80092f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	4908      	ldr	r1, [pc, #32]	; (8009308 <__NVIC_SetPriority+0x50>)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	3b04      	subs	r3, #4
 80092f0:	0112      	lsls	r2, r2, #4
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	440b      	add	r3, r1
 80092f6:	761a      	strb	r2, [r3, #24]
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	e000e100 	.word	0xe000e100
 8009308:	e000ed00 	.word	0xe000ed00

0800930c <NVIC_EncodePriority>:
{
 800930c:	b480      	push	{r7}
 800930e:	b089      	sub	sp, #36	; 0x24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f003 0307 	and.w	r3, r3, #7
 800931e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	f1c3 0307 	rsb	r3, r3, #7
 8009326:	2b04      	cmp	r3, #4
 8009328:	bf28      	it	cs
 800932a:	2304      	movcs	r3, #4
 800932c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	3304      	adds	r3, #4
 8009332:	2b06      	cmp	r3, #6
 8009334:	d902      	bls.n	800933c <NVIC_EncodePriority+0x30>
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	3b03      	subs	r3, #3
 800933a:	e000      	b.n	800933e <NVIC_EncodePriority+0x32>
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009340:	f04f 32ff 	mov.w	r2, #4294967295
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	fa02 f303 	lsl.w	r3, r2, r3
 800934a:	43da      	mvns	r2, r3
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	401a      	ands	r2, r3
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009354:	f04f 31ff 	mov.w	r1, #4294967295
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	fa01 f303 	lsl.w	r3, r1, r3
 800935e:	43d9      	mvns	r1, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009364:	4313      	orrs	r3, r2
}
 8009366:	4618      	mov	r0, r3
 8009368:	3724      	adds	r7, #36	; 0x24
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
	...

08009374 <SysTick_Config>:
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3b01      	subs	r3, #1
 8009380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009384:	d301      	bcc.n	800938a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009386:	2301      	movs	r3, #1
 8009388:	e00f      	b.n	80093aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800938a:	4a0a      	ldr	r2, [pc, #40]	; (80093b4 <SysTick_Config+0x40>)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	3b01      	subs	r3, #1
 8009390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009392:	210f      	movs	r1, #15
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	f7ff ff8e 	bl	80092b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <SysTick_Config+0x40>)
 800939e:	2200      	movs	r2, #0
 80093a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093a2:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <SysTick_Config+0x40>)
 80093a4:	2207      	movs	r2, #7
 80093a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	e000e010 	.word	0xe000e010

080093b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff ff29 	bl	8009218 <__NVIC_SetPriorityGrouping>
}
 80093c6:	bf00      	nop
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	4603      	mov	r3, r0
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	607a      	str	r2, [r7, #4]
 80093da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80093dc:	f7ff ff40 	bl	8009260 <__NVIC_GetPriorityGrouping>
 80093e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	6978      	ldr	r0, [r7, #20]
 80093e8:	f7ff ff90 	bl	800930c <NVIC_EncodePriority>
 80093ec:	4602      	mov	r2, r0
 80093ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff ff5f 	bl	80092b8 <__NVIC_SetPriority>
}
 80093fa:	bf00      	nop
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	4603      	mov	r3, r0
 800940a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800940c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff ff33 	bl	800927c <__NVIC_EnableIRQ>
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7ff ffa4 	bl	8009374 <SysTick_Config>
 800942c:	4603      	mov	r3, r0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e014      	b.n	8009472 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	791b      	ldrb	r3, [r3, #4]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d105      	bne.n	800945e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f8 f843 	bl	80014e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2202      	movs	r2, #2
 8009462:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	795b      	ldrb	r3, [r3, #5]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <HAL_DAC_Start+0x16>
 800948c:	2302      	movs	r3, #2
 800948e:	e043      	b.n	8009518 <HAL_DAC_Start+0x9e>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6819      	ldr	r1, [r3, #0]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	f003 0310 	and.w	r3, r3, #16
 80094a8:	2201      	movs	r2, #1
 80094aa:	409a      	lsls	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80094b4:	2001      	movs	r0, #1
 80094b6:	f7fd fb5b 	bl	8006b70 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10f      	bne.n	80094e0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d11d      	bne.n	800950a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0201 	orr.w	r2, r2, #1
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	e014      	b.n	800950a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f003 0310 	and.w	r3, r3, #16
 80094f0:	2102      	movs	r1, #2
 80094f2:	fa01 f303 	lsl.w	r3, r1, r3
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d107      	bne.n	800950a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f042 0202 	orr.w	r2, r2, #2
 8009508:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
 800952c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	795b      	ldrb	r3, [r3, #5]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <HAL_DAC_Start_DMA+0x1e>
 800953a:	2302      	movs	r3, #2
 800953c:	e0ae      	b.n	800969c <HAL_DAC_Start_DMA+0x17c>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2201      	movs	r2, #1
 8009542:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2202      	movs	r2, #2
 8009548:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d12f      	bne.n	80095b0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4a53      	ldr	r2, [pc, #332]	; (80096a4 <HAL_DAC_Start_DMA+0x184>)
 8009556:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	4a52      	ldr	r2, [pc, #328]	; (80096a8 <HAL_DAC_Start_DMA+0x188>)
 800955e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	4a51      	ldr	r2, [pc, #324]	; (80096ac <HAL_DAC_Start_DMA+0x18c>)
 8009566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009576:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	2b08      	cmp	r3, #8
 800957c:	d013      	beq.n	80095a6 <HAL_DAC_Start_DMA+0x86>
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	2b08      	cmp	r3, #8
 8009582:	d845      	bhi.n	8009610 <HAL_DAC_Start_DMA+0xf0>
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <HAL_DAC_Start_DMA+0x72>
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	2b04      	cmp	r3, #4
 800958e:	d005      	beq.n	800959c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009590:	e03e      	b.n	8009610 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	613b      	str	r3, [r7, #16]
        break;
 800959a:	e03c      	b.n	8009616 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	330c      	adds	r3, #12
 80095a2:	613b      	str	r3, [r7, #16]
        break;
 80095a4:	e037      	b.n	8009616 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3310      	adds	r3, #16
 80095ac:	613b      	str	r3, [r7, #16]
        break;
 80095ae:	e032      	b.n	8009616 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	4a3e      	ldr	r2, [pc, #248]	; (80096b0 <HAL_DAC_Start_DMA+0x190>)
 80095b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	4a3d      	ldr	r2, [pc, #244]	; (80096b4 <HAL_DAC_Start_DMA+0x194>)
 80095be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	4a3c      	ldr	r2, [pc, #240]	; (80096b8 <HAL_DAC_Start_DMA+0x198>)
 80095c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80095d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2b08      	cmp	r3, #8
 80095dc:	d013      	beq.n	8009606 <HAL_DAC_Start_DMA+0xe6>
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d817      	bhi.n	8009614 <HAL_DAC_Start_DMA+0xf4>
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_DAC_Start_DMA+0xd2>
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d005      	beq.n	80095fc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80095f0:	e010      	b.n	8009614 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3314      	adds	r3, #20
 80095f8:	613b      	str	r3, [r7, #16]
        break;
 80095fa:	e00c      	b.n	8009616 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3318      	adds	r3, #24
 8009602:	613b      	str	r3, [r7, #16]
        break;
 8009604:	e007      	b.n	8009616 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	331c      	adds	r3, #28
 800960c:	613b      	str	r3, [r7, #16]
        break;
 800960e:	e002      	b.n	8009616 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009610:	bf00      	nop
 8009612:	e000      	b.n	8009616 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009614:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d111      	bne.n	8009640 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800962a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6898      	ldr	r0, [r3, #8]
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	f000 fb61 	bl	8009cfc <HAL_DMA_Start_IT>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]
 800963e:	e010      	b.n	8009662 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800964e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	68d8      	ldr	r0, [r3, #12]
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	f000 fb4f 	bl	8009cfc <HAL_DMA_Start_IT>
 800965e:	4603      	mov	r3, r0
 8009660:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10f      	bne.n	800968e <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f003 0310 	and.w	r3, r3, #16
 800967a:	2201      	movs	r2, #1
 800967c:	409a      	lsls	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009686:	2001      	movs	r0, #1
 8009688:	f7fd fa72 	bl	8006b70 <HAL_Delay>
 800968c:	e005      	b.n	800969a <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f043 0204 	orr.w	r2, r3, #4
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800969a:	7dfb      	ldrb	r3, [r7, #23]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	08009a99 	.word	0x08009a99
 80096a8:	08009abb 	.word	0x08009abb
 80096ac:	08009ad7 	.word	0x08009ad7
 80096b0:	08009b41 	.word	0x08009b41
 80096b4:	08009b63 	.word	0x08009b63
 80096b8:	08009b7f 	.word	0x08009b7f

080096bc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d105      	bne.n	80096ec <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4413      	add	r3, r2
 80096e6:	3308      	adds	r3, #8
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e004      	b.n	80096f6 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4413      	add	r3, r2
 80096f2:	3314      	adds	r3, #20
 80096f4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	461a      	mov	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	371c      	adds	r7, #28
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	795b      	ldrb	r3, [r3, #5]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_DAC_ConfigChannel+0x18>
 800975c:	2302      	movs	r3, #2
 800975e:	e192      	b.n	8009a86 <HAL_DAC_ConfigChannel+0x33e>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2202      	movs	r2, #2
 800976a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	2b04      	cmp	r3, #4
 8009772:	d174      	bne.n	800985e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009774:	f7fd f9f0 	bl	8006b58 <HAL_GetTick>
 8009778:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d134      	bne.n	80097ea <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009780:	e011      	b.n	80097a6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009782:	f7fd f9e9 	bl	8006b58 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	2b01      	cmp	r3, #1
 800978e:	d90a      	bls.n	80097a6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	f043 0208 	orr.w	r2, r3, #8
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2203      	movs	r2, #3
 80097a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e16f      	b.n	8009a86 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e6      	bne.n	8009782 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80097b4:	2001      	movs	r0, #1
 80097b6:	f7fd f9db 	bl	8006b70 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097c2:	641a      	str	r2, [r3, #64]	; 0x40
 80097c4:	e01e      	b.n	8009804 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80097c6:	f7fd f9c7 	bl	8006b58 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d90a      	bls.n	80097ea <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f043 0208 	orr.w	r2, r3, #8
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2203      	movs	r2, #3
 80097e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e14d      	b.n	8009a86 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dbe8      	blt.n	80097c6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80097f4:	2001      	movs	r0, #1
 80097f6:	f7fd f9bb 	bl	8006b70 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009802:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009814:	fa01 f303 	lsl.w	r3, r1, r3
 8009818:	43db      	mvns	r3, r3
 800981a:	ea02 0103 	and.w	r1, r2, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f003 0310 	and.w	r3, r3, #16
 8009828:	409a      	lsls	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f003 0310 	and.w	r3, r3, #16
 800983e:	21ff      	movs	r1, #255	; 0xff
 8009840:	fa01 f303 	lsl.w	r3, r1, r3
 8009844:	43db      	mvns	r3, r3
 8009846:	ea02 0103 	and.w	r1, r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	409a      	lsls	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d11d      	bne.n	80098a2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	221f      	movs	r2, #31
 8009876:	fa02 f303 	lsl.w	r3, r2, r3
 800987a:	43db      	mvns	r3, r3
 800987c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987e:	4013      	ands	r3, r2
 8009880:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	fa02 f303 	lsl.w	r3, r2, r3
 8009894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009896:	4313      	orrs	r3, r2
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f003 0310 	and.w	r3, r3, #16
 80098b0:	2207      	movs	r2, #7
 80098b2:	fa02 f303 	lsl.w	r3, r2, r3
 80098b6:	43db      	mvns	r3, r3
 80098b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ba:	4013      	ands	r3, r2
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d102      	bne.n	80098cc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	623b      	str	r3, [r7, #32]
 80098ca:	e00f      	b.n	80098ec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d102      	bne.n	80098da <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80098d4:	2301      	movs	r3, #1
 80098d6:	623b      	str	r3, [r7, #32]
 80098d8:	e008      	b.n	80098ec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d102      	bne.n	80098e8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80098e2:	2301      	movs	r3, #1
 80098e4:	623b      	str	r3, [r7, #32]
 80098e6:	e001      	b.n	80098ec <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80098e8:	2300      	movs	r3, #0
 80098ea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	6a3a      	ldr	r2, [r7, #32]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f003 0310 	and.w	r3, r3, #16
 8009902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009906:	fa02 f303 	lsl.w	r3, r2, r3
 800990a:	43db      	mvns	r3, r3
 800990c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800990e:	4013      	ands	r3, r2
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	791b      	ldrb	r3, [r3, #4]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d102      	bne.n	8009920 <HAL_DAC_ConfigChannel+0x1d8>
 800991a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800991e:	e000      	b.n	8009922 <HAL_DAC_ConfigChannel+0x1da>
 8009920:	2300      	movs	r3, #0
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	4313      	orrs	r3, r2
 8009926:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f003 0310 	and.w	r3, r3, #16
 800992e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	43db      	mvns	r3, r3
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	4013      	ands	r3, r2
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	795b      	ldrb	r3, [r3, #5]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d102      	bne.n	800994c <HAL_DAC_ConfigChannel+0x204>
 8009946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800994a:	e000      	b.n	800994e <HAL_DAC_ConfigChannel+0x206>
 800994c:	2300      	movs	r3, #0
 800994e:	69ba      	ldr	r2, [r7, #24]
 8009950:	4313      	orrs	r3, r2
 8009952:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800995a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d114      	bne.n	800998e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009964:	f001 ff34 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
 8009968:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	4a48      	ldr	r2, [pc, #288]	; (8009a90 <HAL_DAC_ConfigChannel+0x348>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d904      	bls.n	800997c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
 800997a:	e00f      	b.n	800999c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4a45      	ldr	r2, [pc, #276]	; (8009a94 <HAL_DAC_ConfigChannel+0x34c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d90a      	bls.n	800999a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
 800998c:	e006      	b.n	800999c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009994:	4313      	orrs	r3, r2
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
 8009998:	e000      	b.n	800999c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800999a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f003 0310 	and.w	r3, r3, #16
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099aa:	4313      	orrs	r3, r2
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6819      	ldr	r1, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099c6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ca:	43da      	mvns	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	400a      	ands	r2, r1
 80099d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f003 0310 	and.w	r3, r3, #16
 80099e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	43db      	mvns	r3, r3
 80099ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ee:	4013      	ands	r3, r2
 80099f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f003 0310 	and.w	r3, r3, #16
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a06:	4313      	orrs	r3, r2
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f003 0310 	and.w	r3, r3, #16
 8009a1e:	22c0      	movs	r2, #192	; 0xc0
 8009a20:	fa02 f303 	lsl.w	r3, r2, r3
 8009a24:	43da      	mvns	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	400a      	ands	r2, r1
 8009a2c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	089b      	lsrs	r3, r3, #2
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	089b      	lsrs	r3, r3, #2
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f003 0310 	and.w	r3, r3, #16
 8009a58:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a60:	43db      	mvns	r3, r3
 8009a62:	ea02 0103 	and.w	r1, r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	409a      	lsls	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	430a      	orrs	r2, r1
 8009a76:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3728      	adds	r7, #40	; 0x28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	09896800 	.word	0x09896800
 8009a94:	04c4b400 	.word	0x04c4b400

08009a98 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff fe30 	bl	800970c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	711a      	strb	r2, [r3, #4]
}
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7ff fe29 	bl	8009720 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009ace:	bf00      	nop
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	f043 0204 	orr.w	r2, r3, #4
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7ff fe1f 	bl	8009734 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2201      	movs	r2, #1
 8009afa:	711a      	strb	r2, [r3, #4]
}
 8009afc:	bf00      	nop
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7ff ffd8 	bl	8009b04 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2201      	movs	r2, #1
 8009b58:	711a      	strb	r2, [r3, #4]
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff ffd1 	bl	8009b18 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009b76:	bf00      	nop
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	f043 0204 	orr.w	r2, r3, #4
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7ff ffc7 	bl	8009b2c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	711a      	strb	r2, [r3, #4]
}
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e08d      	b.n	8009cda <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	4b47      	ldr	r3, [pc, #284]	; (8009ce4 <HAL_DMA_Init+0x138>)
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d80f      	bhi.n	8009bea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	4b45      	ldr	r3, [pc, #276]	; (8009ce8 <HAL_DMA_Init+0x13c>)
 8009bd2:	4413      	add	r3, r2
 8009bd4:	4a45      	ldr	r2, [pc, #276]	; (8009cec <HAL_DMA_Init+0x140>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	091b      	lsrs	r3, r3, #4
 8009bdc:	009a      	lsls	r2, r3, #2
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a42      	ldr	r2, [pc, #264]	; (8009cf0 <HAL_DMA_Init+0x144>)
 8009be6:	641a      	str	r2, [r3, #64]	; 0x40
 8009be8:	e00e      	b.n	8009c08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	4b40      	ldr	r3, [pc, #256]	; (8009cf4 <HAL_DMA_Init+0x148>)
 8009bf2:	4413      	add	r3, r2
 8009bf4:	4a3d      	ldr	r2, [pc, #244]	; (8009cec <HAL_DMA_Init+0x140>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	091b      	lsrs	r3, r3, #4
 8009bfc:	009a      	lsls	r2, r3, #2
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a3c      	ldr	r2, [pc, #240]	; (8009cf8 <HAL_DMA_Init+0x14c>)
 8009c06:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa76 	bl	800a14c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c68:	d102      	bne.n	8009c70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c78:	b2d2      	uxtb	r2, r2
 8009c7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c84:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d010      	beq.n	8009cb0 <HAL_DMA_Init+0x104>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d80c      	bhi.n	8009cb0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fa96 	bl	800a1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009cac:	605a      	str	r2, [r3, #4]
 8009cae:	e008      	b.n	8009cc2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	40020407 	.word	0x40020407
 8009ce8:	bffdfff8 	.word	0xbffdfff8
 8009cec:	cccccccd 	.word	0xcccccccd
 8009cf0:	40020000 	.word	0x40020000
 8009cf4:	bffdfbf8 	.word	0xbffdfbf8
 8009cf8:	40020400 	.word	0x40020400

08009cfc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <HAL_DMA_Start_IT+0x20>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e066      	b.n	8009dea <HAL_DMA_Start_IT+0xee>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d155      	bne.n	8009ddc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0201 	bic.w	r2, r2, #1
 8009d4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f9bb 	bl	800a0d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d008      	beq.n	8009d74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f042 020e 	orr.w	r2, r2, #14
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	e00f      	b.n	8009d94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0204 	bic.w	r2, r2, #4
 8009d82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 020a 	orr.w	r2, r2, #10
 8009d92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009db0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0201 	orr.w	r2, r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	e005      	b.n	8009de8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009de4:	2302      	movs	r3, #2
 8009de6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d005      	beq.n	8009e16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2204      	movs	r2, #4
 8009e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	73fb      	strb	r3, [r7, #15]
 8009e14:	e037      	b.n	8009e86 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 020e 	bic.w	r2, r2, #14
 8009e24:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e34:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0201 	bic.w	r2, r2, #1
 8009e44:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4a:	f003 021f 	and.w	r2, r3, #31
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	2101      	movs	r1, #1
 8009e54:	fa01 f202 	lsl.w	r2, r1, r2
 8009e58:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e62:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00c      	beq.n	8009e86 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e7a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e84:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d00d      	beq.n	8009ed8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	73fb      	strb	r3, [r7, #15]
 8009ed6:	e047      	b.n	8009f68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f022 020e 	bic.w	r2, r2, #14
 8009ee6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0201 	bic.w	r2, r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0c:	f003 021f 	and.w	r2, r3, #31
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f14:	2101      	movs	r1, #1
 8009f16:	fa01 f202 	lsl.w	r2, r1, r2
 8009f1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009f24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00c      	beq.n	8009f48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009f46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	4798      	blx	r3
    }
  }
  return status;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8e:	f003 031f 	and.w	r3, r3, #31
 8009f92:	2204      	movs	r2, #4
 8009f94:	409a      	lsls	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d026      	beq.n	8009fec <HAL_DMA_IRQHandler+0x7a>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d021      	beq.n	8009fec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0320 	and.w	r3, r3, #32
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d107      	bne.n	8009fc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 0204 	bic.w	r2, r2, #4
 8009fc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fca:	f003 021f 	and.w	r2, r3, #31
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	2104      	movs	r1, #4
 8009fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8009fd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d071      	beq.n	800a0c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009fea:	e06c      	b.n	800a0c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff0:	f003 031f 	and.w	r3, r3, #31
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	409a      	lsls	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d02e      	beq.n	800a05e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d029      	beq.n	800a05e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10b      	bne.n	800a030 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 020a 	bic.w	r2, r2, #10
 800a026:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a034:	f003 021f 	and.w	r2, r3, #31
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	2102      	movs	r1, #2
 800a03e:	fa01 f202 	lsl.w	r2, r1, r2
 800a042:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d038      	beq.n	800a0c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a05c:	e033      	b.n	800a0c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a062:	f003 031f 	and.w	r3, r3, #31
 800a066:	2208      	movs	r2, #8
 800a068:	409a      	lsls	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4013      	ands	r3, r2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d02a      	beq.n	800a0c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d025      	beq.n	800a0c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 020e 	bic.w	r2, r2, #14
 800a08a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a090:	f003 021f 	and.w	r2, r3, #31
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a098:	2101      	movs	r1, #1
 800a09a:	fa01 f202 	lsl.w	r2, r1, r2
 800a09e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d004      	beq.n	800a0c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a0c6:	bf00      	nop
 800a0c8:	bf00      	nop
}
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a0e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a0f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0fe:	f003 021f 	and.w	r2, r3, #31
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a106:	2101      	movs	r1, #1
 800a108:	fa01 f202 	lsl.w	r2, r1, r2
 800a10c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	2b10      	cmp	r3, #16
 800a11c:	d108      	bne.n	800a130 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a12e:	e007      	b.n	800a140 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	60da      	str	r2, [r3, #12]
}
 800a140:	bf00      	nop
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	4b16      	ldr	r3, [pc, #88]	; (800a1b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d802      	bhi.n	800a166 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a160:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e001      	b.n	800a16a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a166:	4b15      	ldr	r3, [pc, #84]	; (800a1bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a168:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	3b08      	subs	r3, #8
 800a176:	4a12      	ldr	r2, [pc, #72]	; (800a1c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a178:	fba2 2303 	umull	r2, r3, r2, r3
 800a17c:	091b      	lsrs	r3, r3, #4
 800a17e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a184:	089b      	lsrs	r3, r3, #2
 800a186:	009a      	lsls	r2, r3, #2
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	4413      	add	r3, r2
 800a18c:	461a      	mov	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a0b      	ldr	r2, [pc, #44]	; (800a1c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a196:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f003 031f 	and.w	r3, r3, #31
 800a19e:	2201      	movs	r2, #1
 800a1a0:	409a      	lsls	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a1a6:	bf00      	nop
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40020407 	.word	0x40020407
 800a1b8:	40020800 	.word	0x40020800
 800a1bc:	40020820 	.word	0x40020820
 800a1c0:	cccccccd 	.word	0xcccccccd
 800a1c4:	40020880 	.word	0x40020880

0800a1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a08      	ldr	r2, [pc, #32]	; (800a20c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a1ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	409a      	lsls	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a1fc:	bf00      	nop
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	1000823f 	.word	0x1000823f
 800a20c:	40020940 	.word	0x40020940

0800a210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a21e:	e15a      	b.n	800a4d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	2101      	movs	r1, #1
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	fa01 f303 	lsl.w	r3, r1, r3
 800a22c:	4013      	ands	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 814c 	beq.w	800a4d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f003 0303 	and.w	r3, r3, #3
 800a240:	2b01      	cmp	r3, #1
 800a242:	d005      	beq.n	800a250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d130      	bne.n	800a2b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	2203      	movs	r2, #3
 800a25c:	fa02 f303 	lsl.w	r3, r2, r3
 800a260:	43db      	mvns	r3, r3
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	4013      	ands	r3, r2
 800a266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	fa02 f303 	lsl.w	r3, r2, r3
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4313      	orrs	r3, r2
 800a278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a286:	2201      	movs	r2, #1
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	43db      	mvns	r3, r3
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4013      	ands	r3, r2
 800a294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	091b      	lsrs	r3, r3, #4
 800a29c:	f003 0201 	and.w	r2, r3, #1
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f003 0303 	and.w	r3, r3, #3
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d017      	beq.n	800a2ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	2203      	movs	r2, #3
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	43db      	mvns	r3, r3
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d123      	bne.n	800a342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	08da      	lsrs	r2, r3, #3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3208      	adds	r2, #8
 800a302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	220f      	movs	r2, #15
 800a312:	fa02 f303 	lsl.w	r3, r2, r3
 800a316:	43db      	mvns	r3, r3
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4013      	ands	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	691a      	ldr	r2, [r3, #16]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f003 0307 	and.w	r3, r3, #7
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4313      	orrs	r3, r2
 800a332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	08da      	lsrs	r2, r3, #3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3208      	adds	r2, #8
 800a33c:	6939      	ldr	r1, [r7, #16]
 800a33e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	2203      	movs	r2, #3
 800a34e:	fa02 f303 	lsl.w	r3, r2, r3
 800a352:	43db      	mvns	r3, r3
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4013      	ands	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f003 0203 	and.w	r2, r3, #3
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	fa02 f303 	lsl.w	r3, r2, r3
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 80a6 	beq.w	800a4d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a384:	4b5b      	ldr	r3, [pc, #364]	; (800a4f4 <HAL_GPIO_Init+0x2e4>)
 800a386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a388:	4a5a      	ldr	r2, [pc, #360]	; (800a4f4 <HAL_GPIO_Init+0x2e4>)
 800a38a:	f043 0301 	orr.w	r3, r3, #1
 800a38e:	6613      	str	r3, [r2, #96]	; 0x60
 800a390:	4b58      	ldr	r3, [pc, #352]	; (800a4f4 <HAL_GPIO_Init+0x2e4>)
 800a392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	60bb      	str	r3, [r7, #8]
 800a39a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a39c:	4a56      	ldr	r2, [pc, #344]	; (800a4f8 <HAL_GPIO_Init+0x2e8>)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	089b      	lsrs	r3, r3, #2
 800a3a2:	3302      	adds	r3, #2
 800a3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	220f      	movs	r2, #15
 800a3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a3c6:	d01f      	beq.n	800a408 <HAL_GPIO_Init+0x1f8>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a4c      	ldr	r2, [pc, #304]	; (800a4fc <HAL_GPIO_Init+0x2ec>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d019      	beq.n	800a404 <HAL_GPIO_Init+0x1f4>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a4b      	ldr	r2, [pc, #300]	; (800a500 <HAL_GPIO_Init+0x2f0>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d013      	beq.n	800a400 <HAL_GPIO_Init+0x1f0>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a4a      	ldr	r2, [pc, #296]	; (800a504 <HAL_GPIO_Init+0x2f4>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d00d      	beq.n	800a3fc <HAL_GPIO_Init+0x1ec>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a49      	ldr	r2, [pc, #292]	; (800a508 <HAL_GPIO_Init+0x2f8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d007      	beq.n	800a3f8 <HAL_GPIO_Init+0x1e8>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a48      	ldr	r2, [pc, #288]	; (800a50c <HAL_GPIO_Init+0x2fc>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d101      	bne.n	800a3f4 <HAL_GPIO_Init+0x1e4>
 800a3f0:	2305      	movs	r3, #5
 800a3f2:	e00a      	b.n	800a40a <HAL_GPIO_Init+0x1fa>
 800a3f4:	2306      	movs	r3, #6
 800a3f6:	e008      	b.n	800a40a <HAL_GPIO_Init+0x1fa>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	e006      	b.n	800a40a <HAL_GPIO_Init+0x1fa>
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e004      	b.n	800a40a <HAL_GPIO_Init+0x1fa>
 800a400:	2302      	movs	r3, #2
 800a402:	e002      	b.n	800a40a <HAL_GPIO_Init+0x1fa>
 800a404:	2301      	movs	r3, #1
 800a406:	e000      	b.n	800a40a <HAL_GPIO_Init+0x1fa>
 800a408:	2300      	movs	r3, #0
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	f002 0203 	and.w	r2, r2, #3
 800a410:	0092      	lsls	r2, r2, #2
 800a412:	4093      	lsls	r3, r2
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a41a:	4937      	ldr	r1, [pc, #220]	; (800a4f8 <HAL_GPIO_Init+0x2e8>)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	089b      	lsrs	r3, r3, #2
 800a420:	3302      	adds	r3, #2
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a428:	4b39      	ldr	r3, [pc, #228]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	43db      	mvns	r3, r3
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	4013      	ands	r3, r2
 800a436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4313      	orrs	r3, r2
 800a44a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a44c:	4a30      	ldr	r2, [pc, #192]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a452:	4b2f      	ldr	r3, [pc, #188]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	43db      	mvns	r3, r3
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	4013      	ands	r3, r2
 800a460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4313      	orrs	r3, r2
 800a474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a476:	4a26      	ldr	r2, [pc, #152]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a47c:	4b24      	ldr	r3, [pc, #144]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	43db      	mvns	r3, r3
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	4013      	ands	r3, r2
 800a48a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a4a0:	4a1b      	ldr	r2, [pc, #108]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a4a6:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	43db      	mvns	r3, r3
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a4ca:	4a11      	ldr	r2, [pc, #68]	; (800a510 <HAL_GPIO_Init+0x300>)
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f47f ae9d 	bne.w	800a220 <HAL_GPIO_Init+0x10>
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	371c      	adds	r7, #28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	40021000 	.word	0x40021000
 800a4f8:	40010000 	.word	0x40010000
 800a4fc:	48000400 	.word	0x48000400
 800a500:	48000800 	.word	0x48000800
 800a504:	48000c00 	.word	0x48000c00
 800a508:	48001000 	.word	0x48001000
 800a50c:	48001400 	.word	0x48001400
 800a510:	40010400 	.word	0x40010400

0800a514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	807b      	strh	r3, [r7, #2]
 800a520:	4613      	mov	r3, r2
 800a522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a524:	787b      	ldrb	r3, [r7, #1]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a52a:	887a      	ldrh	r2, [r7, #2]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a530:	e002      	b.n	800a538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a532:	887a      	ldrh	r2, [r7, #2]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e0bb      	b.n	800a6d2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b05      	cmp	r3, #5
 800a564:	d101      	bne.n	800a56a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e0b3      	b.n	800a6d2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b02      	cmp	r3, #2
 800a574:	d101      	bne.n	800a57a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e0ab      	b.n	800a6d2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a57a:	4b58      	ldr	r3, [pc, #352]	; (800a6dc <HAL_OPAMP_Init+0x198>)
 800a57c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a57e:	4a57      	ldr	r2, [pc, #348]	; (800a6dc <HAL_OPAMP_Init+0x198>)
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	6613      	str	r3, [r2, #96]	; 0x60
 800a586:	4b55      	ldr	r3, [pc, #340]	; (800a6dc <HAL_OPAMP_Init+0x198>)
 800a588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	60bb      	str	r3, [r7, #8]
 800a590:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d103      	bne.n	800a5a6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7fa fc92 	bl	8004ed0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	2b40      	cmp	r3, #64	; 0x40
 800a5b2:	d003      	beq.n	800a5bc <HAL_OPAMP_Init+0x78>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	2b60      	cmp	r3, #96	; 0x60
 800a5ba:	d133      	bne.n	800a624 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f023 0110 	bic.w	r1, r3, #16
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	4b41      	ldr	r3, [pc, #260]	; (800a6e0 <HAL_OPAMP_Init+0x19c>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6851      	ldr	r1, [r2, #4]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	6892      	ldr	r2, [r2, #8]
 800a5e4:	4311      	orrs	r1, r2
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	6912      	ldr	r2, [r2, #16]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	7d09      	ldrb	r1, [r1, #20]
 800a5f0:	2901      	cmp	r1, #1
 800a5f2:	d102      	bne.n	800a5fa <HAL_OPAMP_Init+0xb6>
 800a5f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5f8:	e000      	b.n	800a5fc <HAL_OPAMP_Init+0xb8>
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	4311      	orrs	r1, r2
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a602:	4311      	orrs	r1, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a608:	4311      	orrs	r1, r2
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a60e:	04d2      	lsls	r2, r2, #19
 800a610:	4311      	orrs	r1, r2
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a616:	0612      	lsls	r2, r2, #24
 800a618:	4311      	orrs	r1, r2
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	430b      	orrs	r3, r1
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	e035      	b.n	800a690 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f023 0110 	bic.w	r1, r3, #16
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	4b27      	ldr	r3, [pc, #156]	; (800a6e0 <HAL_OPAMP_Init+0x19c>)
 800a642:	4013      	ands	r3, r2
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	6851      	ldr	r1, [r2, #4]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6892      	ldr	r2, [r2, #8]
 800a64c:	4311      	orrs	r1, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	68d2      	ldr	r2, [r2, #12]
 800a652:	4311      	orrs	r1, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	6912      	ldr	r2, [r2, #16]
 800a658:	430a      	orrs	r2, r1
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	7d09      	ldrb	r1, [r1, #20]
 800a65e:	2901      	cmp	r1, #1
 800a660:	d102      	bne.n	800a668 <HAL_OPAMP_Init+0x124>
 800a662:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a666:	e000      	b.n	800a66a <HAL_OPAMP_Init+0x126>
 800a668:	2100      	movs	r1, #0
 800a66a:	4311      	orrs	r1, r2
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a670:	4311      	orrs	r1, r2
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a676:	4311      	orrs	r1, r2
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a67c:	04d2      	lsls	r2, r2, #19
 800a67e:	4311      	orrs	r1, r2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a684:	0612      	lsls	r2, r2, #24
 800a686:	4311      	orrs	r1, r2
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	6812      	ldr	r2, [r2, #0]
 800a68c:	430b      	orrs	r3, r1
 800a68e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	2b00      	cmp	r3, #0
 800a698:	db10      	blt.n	800a6bc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	699a      	ldr	r2, [r3, #24]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d103      	bne.n	800a6d0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	40021000 	.word	0x40021000
 800a6e0:	e0003e11 	.word	0xe0003e11

0800a6e4 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d102      	bne.n	800a6fc <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	73fb      	strb	r3, [r7, #15]
 800a6fa:	e01d      	b.n	800a738 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b05      	cmp	r3, #5
 800a706:	d102      	bne.n	800a70e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	73fb      	strb	r3, [r7, #15]
 800a70c:	e014      	b.n	800a738 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b01      	cmp	r3, #1
 800a718:	d10c      	bne.n	800a734 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f042 0201 	orr.w	r2, r2, #1
 800a728:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2204      	movs	r2, #4
 800a72e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a732:	e001      	b.n	800a738 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800a738:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
	...

0800a748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d141      	bne.n	800a7da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a756:	4b4b      	ldr	r3, [pc, #300]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a75e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a762:	d131      	bne.n	800a7c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a764:	4b47      	ldr	r3, [pc, #284]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a76a:	4a46      	ldr	r2, [pc, #280]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a774:	4b43      	ldr	r3, [pc, #268]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a77c:	4a41      	ldr	r2, [pc, #260]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a77e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a784:	4b40      	ldr	r3, [pc, #256]	; (800a888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2232      	movs	r2, #50	; 0x32
 800a78a:	fb02 f303 	mul.w	r3, r2, r3
 800a78e:	4a3f      	ldr	r2, [pc, #252]	; (800a88c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a790:	fba2 2303 	umull	r2, r3, r2, r3
 800a794:	0c9b      	lsrs	r3, r3, #18
 800a796:	3301      	adds	r3, #1
 800a798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a79a:	e002      	b.n	800a7a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7a2:	4b38      	ldr	r3, [pc, #224]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ae:	d102      	bne.n	800a7b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1f2      	bne.n	800a79c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a7b6:	4b33      	ldr	r3, [pc, #204]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c2:	d158      	bne.n	800a876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e057      	b.n	800a878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7c8:	4b2e      	ldr	r3, [pc, #184]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7ce:	4a2d      	ldr	r2, [pc, #180]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a7d8:	e04d      	b.n	800a876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e0:	d141      	bne.n	800a866 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7e2:	4b28      	ldr	r3, [pc, #160]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ee:	d131      	bne.n	800a854 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7f0:	4b24      	ldr	r3, [pc, #144]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7f6:	4a23      	ldr	r2, [pc, #140]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a800:	4b20      	ldr	r3, [pc, #128]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a808:	4a1e      	ldr	r2, [pc, #120]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a80a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a80e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a810:	4b1d      	ldr	r3, [pc, #116]	; (800a888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2232      	movs	r2, #50	; 0x32
 800a816:	fb02 f303 	mul.w	r3, r2, r3
 800a81a:	4a1c      	ldr	r2, [pc, #112]	; (800a88c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a81c:	fba2 2303 	umull	r2, r3, r2, r3
 800a820:	0c9b      	lsrs	r3, r3, #18
 800a822:	3301      	adds	r3, #1
 800a824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a826:	e002      	b.n	800a82e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a82e:	4b15      	ldr	r3, [pc, #84]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a83a:	d102      	bne.n	800a842 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f2      	bne.n	800a828 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a842:	4b10      	ldr	r3, [pc, #64]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a84e:	d112      	bne.n	800a876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e011      	b.n	800a878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a854:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a85a:	4a0a      	ldr	r2, [pc, #40]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a864:	e007      	b.n	800a876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a866:	4b07      	ldr	r3, [pc, #28]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a86e:	4a05      	ldr	r2, [pc, #20]	; (800a884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a874:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	40007000 	.word	0x40007000
 800a888:	20000018 	.word	0x20000018
 800a88c:	431bde83 	.word	0x431bde83

0800a890 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af02      	add	r7, sp, #8
 800a896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a898:	f7fc f95e 	bl	8006b58 <HAL_GetTick>
 800a89c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e069      	b.n	800a97c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10b      	bne.n	800a8cc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7fa fc03 	bl	80050c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a8c2:	f241 3188 	movw	r1, #5000	; 0x1388
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fa54 	bl	800ad74 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	021a      	lsls	r2, r3, #8
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2120      	movs	r1, #32
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fa7f 	bl	800adf6 <QSPI_WaitFlagStateUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a8fc:	7afb      	ldrb	r3, [r7, #11]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d137      	bne.n	800a972 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a90c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6852      	ldr	r2, [r2, #4]
 800a914:	0611      	lsls	r1, r2, #24
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68d2      	ldr	r2, [r2, #12]
 800a91a:	4311      	orrs	r1, r2
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	69d2      	ldr	r2, [r2, #28]
 800a920:	4311      	orrs	r1, r2
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	6a12      	ldr	r2, [r2, #32]
 800a926:	4311      	orrs	r1, r2
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6812      	ldr	r2, [r2, #0]
 800a92c:	430b      	orrs	r3, r1
 800a92e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	4b13      	ldr	r3, [pc, #76]	; (800a984 <HAL_QSPI_Init+0xf4>)
 800a938:	4013      	ands	r3, r2
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	6912      	ldr	r2, [r2, #16]
 800a93e:	0411      	lsls	r1, r2, #16
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6952      	ldr	r2, [r2, #20]
 800a944:	4311      	orrs	r1, r2
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	6992      	ldr	r2, [r2, #24]
 800a94a:	4311      	orrs	r1, r2
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	6812      	ldr	r2, [r2, #0]
 800a950:	430b      	orrs	r3, r1
 800a952:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a97a:	7afb      	ldrb	r3, [r7, #11]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	ffe0f8fe 	.word	0xffe0f8fe

0800a988 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f003 0304 	and.w	r3, r3, #4
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d064      	beq.n	800aa74 <HAL_QSPI_IRQHandler+0xec>
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d05f      	beq.n	800aa74 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3320      	adds	r3, #32
 800a9ba:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b12      	cmp	r3, #18
 800a9c6:	d125      	bne.n	800aa14 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a9c8:	e01c      	b.n	800aa04 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00f      	beq.n	800a9f2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	781a      	ldrb	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ea:	1e5a      	subs	r2, r3, #1
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	62da      	str	r2, [r3, #44]	; 0x2c
 800a9f0:	e008      	b.n	800aa04 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa00:	601a      	str	r2, [r3, #0]
          break;
 800aa02:	e033      	b.n	800aa6c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1db      	bne.n	800a9ca <HAL_QSPI_IRQHandler+0x42>
 800aa12:	e02b      	b.n	800aa6c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b22      	cmp	r3, #34	; 0x22
 800aa1e:	d125      	bne.n	800aa6c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa20:	e01d      	b.n	800aa5e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d010      	beq.n	800aa4c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	7812      	ldrb	r2, [r2, #0]
 800aa32:	b2d2      	uxtb	r2, r2
 800aa34:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	1e5a      	subs	r2, r3, #1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
 800aa4a:	e008      	b.n	800aa5e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa5a:	601a      	str	r2, [r3, #0]
          break;
 800aa5c:	e006      	b.n	800aa6c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1da      	bne.n	800aa22 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f963 	bl	800ad38 <HAL_QSPI_FifoThresholdCallback>
 800aa72:	e13c      	b.n	800acee <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 80b0 	beq.w	800abe0 <HAL_QSPI_IRQHandler+0x258>
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 80aa 	beq.w	800abe0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2202      	movs	r2, #2
 800aa92:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800aaa2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b12      	cmp	r3, #18
 800aaae:	d120      	bne.n	800aaf2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0304 	and.w	r3, r3, #4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d011      	beq.n	800aae2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0204 	bic.w	r2, r2, #4
 800aacc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0201 	bic.w	r2, r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7fa faa0 	bl	8005030 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aaf0:	e0fa      	b.n	800ace8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b22      	cmp	r3, #34	; 0x22
 800aafc:	d143      	bne.n	800ab86 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d012      	beq.n	800ab32 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0204 	bic.w	r2, r2, #4
 800ab1a:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 0201 	bic.w	r2, r2, #1
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	e021      	b.n	800ab76 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3320      	adds	r3, #32
 800ab38:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ab3a:	e013      	b.n	800ab64 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d017      	beq.n	800ab74 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	7812      	ldrb	r2, [r2, #0]
 800ab4c:	b2d2      	uxtb	r2, r2
 800ab4e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	1e5a      	subs	r2, r3, #1
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e4      	bne.n	800ab3c <HAL_QSPI_IRQHandler+0x1b4>
 800ab72:	e000      	b.n	800ab76 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800ab74:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7fa fa66 	bl	8005050 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ab84:	e0b0      	b.n	800ace8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d107      	bne.n	800aba2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f8c2 	bl	800ad24 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aba0:	e0a2      	b.n	800ace8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b08      	cmp	r3, #8
 800abac:	f040 809c 	bne.w	800ace8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	695a      	ldr	r2, [r3, #20]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800abbe:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d103      	bne.n	800abd8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f89d 	bl	800ad10 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800abd6:	e087      	b.n	800ace8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f88f 	bl	800acfc <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800abde:	e083      	b.n	800ace8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f003 0308 	and.w	r3, r3, #8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d01f      	beq.n	800ac2a <HAL_QSPI_IRQHandler+0x2a2>
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01a      	beq.n	800ac2a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2208      	movs	r2, #8
 800abfa:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ac18:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f892 	bl	800ad4c <HAL_QSPI_StatusMatchCallback>
 800ac28:	e061      	b.n	800acee <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d047      	beq.n	800acc4 <HAL_QSPI_IRQHandler+0x33c>
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d042      	beq.n	800acc4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2201      	movs	r2, #1
 800ac44:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800ac54:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	f043 0202 	orr.w	r2, r3, #2
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d021      	beq.n	800acb4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0204 	bic.w	r2, r2, #4
 800ac7e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac84:	4a1c      	ldr	r2, [pc, #112]	; (800acf8 <HAL_QSPI_IRQHandler+0x370>)
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7ff f909 	bl	8009ea4 <HAL_DMA_Abort_IT>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d029      	beq.n	800acec <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac9c:	f043 0204 	orr.w	r2, r3, #4
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f825 	bl	800acfc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800acb2:	e01b      	b.n	800acec <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f81d 	bl	800acfc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800acc2:	e013      	b.n	800acec <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f003 0310 	and.w	r3, r3, #16
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00f      	beq.n	800acee <HAL_QSPI_IRQHandler+0x366>
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00a      	beq.n	800acee <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2210      	movs	r2, #16
 800acde:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f83d 	bl	800ad60 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800ace6:	e002      	b.n	800acee <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ace8:	bf00      	nop
 800acea:	e000      	b.n	800acee <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800acec:	bf00      	nop
}
 800acee:	bf00      	nop
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	0800ad91 	.word	0x0800ad91

0800acfc <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b08      	cmp	r3, #8
 800adb4:	d114      	bne.n	800ade0 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2202      	movs	r2, #2
 800adbc:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800adcc:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f042 0202 	orr.w	r2, r2, #2
 800addc:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800adde:	e006      	b.n	800adee <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7ff ff87 	bl	800acfc <HAL_QSPI_ErrorCallback>
}
 800adee:	bf00      	nop
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b084      	sub	sp, #16
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	603b      	str	r3, [r7, #0]
 800ae02:	4613      	mov	r3, r2
 800ae04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae06:	e01a      	b.n	800ae3e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0e:	d016      	beq.n	800ae3e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae10:	f7fb fea2 	bl	8006b58 <HAL_GetTick>
 800ae14:	4602      	mov	r2, r0
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d302      	bcc.n	800ae26 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10b      	bne.n	800ae3e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2204      	movs	r2, #4
 800ae2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae32:	f043 0201 	orr.w	r2, r3, #1
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e00e      	b.n	800ae5c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	4013      	ands	r3, r2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	bf14      	ite	ne
 800ae4c:	2301      	movne	r3, #1
 800ae4e:	2300      	moveq	r3, #0
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	461a      	mov	r2, r3
 800ae54:	79fb      	ldrb	r3, [r7, #7]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d1d6      	bne.n	800ae08 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e306      	b.n	800b484 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d075      	beq.n	800af6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae82:	4b97      	ldr	r3, [pc, #604]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f003 030c 	and.w	r3, r3, #12
 800ae8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae8c:	4b94      	ldr	r3, [pc, #592]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	f003 0303 	and.w	r3, r3, #3
 800ae94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	2b0c      	cmp	r3, #12
 800ae9a:	d102      	bne.n	800aea2 <HAL_RCC_OscConfig+0x3e>
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d002      	beq.n	800aea8 <HAL_RCC_OscConfig+0x44>
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d10b      	bne.n	800aec0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aea8:	4b8d      	ldr	r3, [pc, #564]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d05b      	beq.n	800af6c <HAL_RCC_OscConfig+0x108>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d157      	bne.n	800af6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e2e1      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec8:	d106      	bne.n	800aed8 <HAL_RCC_OscConfig+0x74>
 800aeca:	4b85      	ldr	r3, [pc, #532]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a84      	ldr	r2, [pc, #528]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aed4:	6013      	str	r3, [r2, #0]
 800aed6:	e01d      	b.n	800af14 <HAL_RCC_OscConfig+0xb0>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aee0:	d10c      	bne.n	800aefc <HAL_RCC_OscConfig+0x98>
 800aee2:	4b7f      	ldr	r3, [pc, #508]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a7e      	ldr	r2, [pc, #504]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	4b7c      	ldr	r3, [pc, #496]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a7b      	ldr	r2, [pc, #492]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	e00b      	b.n	800af14 <HAL_RCC_OscConfig+0xb0>
 800aefc:	4b78      	ldr	r3, [pc, #480]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a77      	ldr	r2, [pc, #476]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800af02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	4b75      	ldr	r3, [pc, #468]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a74      	ldr	r2, [pc, #464]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800af0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d013      	beq.n	800af44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af1c:	f7fb fe1c 	bl	8006b58 <HAL_GetTick>
 800af20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af22:	e008      	b.n	800af36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af24:	f7fb fe18 	bl	8006b58 <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	2b64      	cmp	r3, #100	; 0x64
 800af30:	d901      	bls.n	800af36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e2a6      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af36:	4b6a      	ldr	r3, [pc, #424]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0f0      	beq.n	800af24 <HAL_RCC_OscConfig+0xc0>
 800af42:	e014      	b.n	800af6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af44:	f7fb fe08 	bl	8006b58 <HAL_GetTick>
 800af48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af4a:	e008      	b.n	800af5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af4c:	f7fb fe04 	bl	8006b58 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	2b64      	cmp	r3, #100	; 0x64
 800af58:	d901      	bls.n	800af5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e292      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af5e:	4b60      	ldr	r3, [pc, #384]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1f0      	bne.n	800af4c <HAL_RCC_OscConfig+0xe8>
 800af6a:	e000      	b.n	800af6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d075      	beq.n	800b066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af7a:	4b59      	ldr	r3, [pc, #356]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f003 030c 	and.w	r3, r3, #12
 800af82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af84:	4b56      	ldr	r3, [pc, #344]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f003 0303 	and.w	r3, r3, #3
 800af8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	2b0c      	cmp	r3, #12
 800af92:	d102      	bne.n	800af9a <HAL_RCC_OscConfig+0x136>
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d002      	beq.n	800afa0 <HAL_RCC_OscConfig+0x13c>
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	d11f      	bne.n	800afe0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afa0:	4b4f      	ldr	r3, [pc, #316]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d005      	beq.n	800afb8 <HAL_RCC_OscConfig+0x154>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e265      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afb8:	4b49      	ldr	r3, [pc, #292]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	061b      	lsls	r3, r3, #24
 800afc6:	4946      	ldr	r1, [pc, #280]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800afcc:	4b45      	ldr	r3, [pc, #276]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fb fd75 	bl	8006ac0 <HAL_InitTick>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d043      	beq.n	800b064 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e251      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d023      	beq.n	800b030 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800afe8:	4b3d      	ldr	r3, [pc, #244]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a3c      	ldr	r2, [pc, #240]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800afee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff4:	f7fb fdb0 	bl	8006b58 <HAL_GetTick>
 800aff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800affa:	e008      	b.n	800b00e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800affc:	f7fb fdac 	bl	8006b58 <HAL_GetTick>
 800b000:	4602      	mov	r2, r0
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	2b02      	cmp	r3, #2
 800b008:	d901      	bls.n	800b00e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e23a      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b00e:	4b34      	ldr	r3, [pc, #208]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0f0      	beq.n	800affc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01a:	4b31      	ldr	r3, [pc, #196]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	061b      	lsls	r3, r3, #24
 800b028:	492d      	ldr	r1, [pc, #180]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	604b      	str	r3, [r1, #4]
 800b02e:	e01a      	b.n	800b066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b030:	4b2b      	ldr	r3, [pc, #172]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a2a      	ldr	r2, [pc, #168]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b03a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b03c:	f7fb fd8c 	bl	8006b58 <HAL_GetTick>
 800b040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b042:	e008      	b.n	800b056 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b044:	f7fb fd88 	bl	8006b58 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d901      	bls.n	800b056 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e216      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b056:	4b22      	ldr	r3, [pc, #136]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1f0      	bne.n	800b044 <HAL_RCC_OscConfig+0x1e0>
 800b062:	e000      	b.n	800b066 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d041      	beq.n	800b0f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d01c      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b07a:	4b19      	ldr	r3, [pc, #100]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b07c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b080:	4a17      	ldr	r2, [pc, #92]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b08a:	f7fb fd65 	bl	8006b58 <HAL_GetTick>
 800b08e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b090:	e008      	b.n	800b0a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b092:	f7fb fd61 	bl	8006b58 <HAL_GetTick>
 800b096:	4602      	mov	r2, r0
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d901      	bls.n	800b0a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e1ef      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0a4:	4b0e      	ldr	r3, [pc, #56]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b0a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0aa:	f003 0302 	and.w	r3, r3, #2
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0ef      	beq.n	800b092 <HAL_RCC_OscConfig+0x22e>
 800b0b2:	e020      	b.n	800b0f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0b4:	4b0a      	ldr	r3, [pc, #40]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0ba:	4a09      	ldr	r2, [pc, #36]	; (800b0e0 <HAL_RCC_OscConfig+0x27c>)
 800b0bc:	f023 0301 	bic.w	r3, r3, #1
 800b0c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0c4:	f7fb fd48 	bl	8006b58 <HAL_GetTick>
 800b0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0ca:	e00d      	b.n	800b0e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0cc:	f7fb fd44 	bl	8006b58 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d906      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e1d2      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
 800b0de:	bf00      	nop
 800b0e0:	40021000 	.word	0x40021000
 800b0e4:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0e8:	4b8c      	ldr	r3, [pc, #560]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b0ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1ea      	bne.n	800b0cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 0304 	and.w	r3, r3, #4
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 80a6 	beq.w	800b250 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b104:	2300      	movs	r3, #0
 800b106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b108:	4b84      	ldr	r3, [pc, #528]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <HAL_RCC_OscConfig+0x2b4>
 800b114:	2301      	movs	r3, #1
 800b116:	e000      	b.n	800b11a <HAL_RCC_OscConfig+0x2b6>
 800b118:	2300      	movs	r3, #0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00d      	beq.n	800b13a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b11e:	4b7f      	ldr	r3, [pc, #508]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b122:	4a7e      	ldr	r2, [pc, #504]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b128:	6593      	str	r3, [r2, #88]	; 0x58
 800b12a:	4b7c      	ldr	r3, [pc, #496]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b136:	2301      	movs	r3, #1
 800b138:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b13a:	4b79      	ldr	r3, [pc, #484]	; (800b320 <HAL_RCC_OscConfig+0x4bc>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b142:	2b00      	cmp	r3, #0
 800b144:	d118      	bne.n	800b178 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b146:	4b76      	ldr	r3, [pc, #472]	; (800b320 <HAL_RCC_OscConfig+0x4bc>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a75      	ldr	r2, [pc, #468]	; (800b320 <HAL_RCC_OscConfig+0x4bc>)
 800b14c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b152:	f7fb fd01 	bl	8006b58 <HAL_GetTick>
 800b156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b158:	e008      	b.n	800b16c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b15a:	f7fb fcfd 	bl	8006b58 <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d901      	bls.n	800b16c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e18b      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b16c:	4b6c      	ldr	r3, [pc, #432]	; (800b320 <HAL_RCC_OscConfig+0x4bc>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b174:	2b00      	cmp	r3, #0
 800b176:	d0f0      	beq.n	800b15a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d108      	bne.n	800b192 <HAL_RCC_OscConfig+0x32e>
 800b180:	4b66      	ldr	r3, [pc, #408]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b186:	4a65      	ldr	r2, [pc, #404]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b188:	f043 0301 	orr.w	r3, r3, #1
 800b18c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b190:	e024      	b.n	800b1dc <HAL_RCC_OscConfig+0x378>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	2b05      	cmp	r3, #5
 800b198:	d110      	bne.n	800b1bc <HAL_RCC_OscConfig+0x358>
 800b19a:	4b60      	ldr	r3, [pc, #384]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a0:	4a5e      	ldr	r2, [pc, #376]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b1a2:	f043 0304 	orr.w	r3, r3, #4
 800b1a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1aa:	4b5c      	ldr	r3, [pc, #368]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b0:	4a5a      	ldr	r2, [pc, #360]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1ba:	e00f      	b.n	800b1dc <HAL_RCC_OscConfig+0x378>
 800b1bc:	4b57      	ldr	r3, [pc, #348]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c2:	4a56      	ldr	r2, [pc, #344]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b1c4:	f023 0301 	bic.w	r3, r3, #1
 800b1c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1cc:	4b53      	ldr	r3, [pc, #332]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1d2:	4a52      	ldr	r2, [pc, #328]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b1d4:	f023 0304 	bic.w	r3, r3, #4
 800b1d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d016      	beq.n	800b212 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1e4:	f7fb fcb8 	bl	8006b58 <HAL_GetTick>
 800b1e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1ea:	e00a      	b.n	800b202 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1ec:	f7fb fcb4 	bl	8006b58 <HAL_GetTick>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d901      	bls.n	800b202 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e140      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b202:	4b46      	ldr	r3, [pc, #280]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0ed      	beq.n	800b1ec <HAL_RCC_OscConfig+0x388>
 800b210:	e015      	b.n	800b23e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b212:	f7fb fca1 	bl	8006b58 <HAL_GetTick>
 800b216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b218:	e00a      	b.n	800b230 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b21a:	f7fb fc9d 	bl	8006b58 <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	f241 3288 	movw	r2, #5000	; 0x1388
 800b228:	4293      	cmp	r3, r2
 800b22a:	d901      	bls.n	800b230 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e129      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b230:	4b3a      	ldr	r3, [pc, #232]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b236:	f003 0302 	and.w	r3, r3, #2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1ed      	bne.n	800b21a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b23e:	7ffb      	ldrb	r3, [r7, #31]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d105      	bne.n	800b250 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b244:	4b35      	ldr	r3, [pc, #212]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b248:	4a34      	ldr	r2, [pc, #208]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b24a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b24e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 0320 	and.w	r3, r3, #32
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d03c      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d01c      	beq.n	800b29e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b264:	4b2d      	ldr	r3, [pc, #180]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b26a:	4a2c      	ldr	r2, [pc, #176]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b26c:	f043 0301 	orr.w	r3, r3, #1
 800b270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b274:	f7fb fc70 	bl	8006b58 <HAL_GetTick>
 800b278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b27c:	f7fb fc6c 	bl	8006b58 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e0fa      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b28e:	4b23      	ldr	r3, [pc, #140]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b294:	f003 0302 	and.w	r3, r3, #2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d0ef      	beq.n	800b27c <HAL_RCC_OscConfig+0x418>
 800b29c:	e01b      	b.n	800b2d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b29e:	4b1f      	ldr	r3, [pc, #124]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b2a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2a4:	4a1d      	ldr	r2, [pc, #116]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b2a6:	f023 0301 	bic.w	r3, r3, #1
 800b2aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ae:	f7fb fc53 	bl	8006b58 <HAL_GetTick>
 800b2b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2b4:	e008      	b.n	800b2c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2b6:	f7fb fc4f 	bl	8006b58 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d901      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e0dd      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2c8:	4b14      	ldr	r3, [pc, #80]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b2ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1ef      	bne.n	800b2b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 80d1 	beq.w	800b482 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b2e0:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f003 030c 	and.w	r3, r3, #12
 800b2e8:	2b0c      	cmp	r3, #12
 800b2ea:	f000 808b 	beq.w	800b404 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d15e      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2f6:	4b09      	ldr	r3, [pc, #36]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a08      	ldr	r2, [pc, #32]	; (800b31c <HAL_RCC_OscConfig+0x4b8>)
 800b2fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b302:	f7fb fc29 	bl	8006b58 <HAL_GetTick>
 800b306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b308:	e00c      	b.n	800b324 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b30a:	f7fb fc25 	bl	8006b58 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	2b02      	cmp	r3, #2
 800b316:	d905      	bls.n	800b324 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e0b3      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
 800b31c:	40021000 	.word	0x40021000
 800b320:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b324:	4b59      	ldr	r3, [pc, #356]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1ec      	bne.n	800b30a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b330:	4b56      	ldr	r3, [pc, #344]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b332:	68da      	ldr	r2, [r3, #12]
 800b334:	4b56      	ldr	r3, [pc, #344]	; (800b490 <HAL_RCC_OscConfig+0x62c>)
 800b336:	4013      	ands	r3, r2
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	6a11      	ldr	r1, [r2, #32]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b340:	3a01      	subs	r2, #1
 800b342:	0112      	lsls	r2, r2, #4
 800b344:	4311      	orrs	r1, r2
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b34a:	0212      	lsls	r2, r2, #8
 800b34c:	4311      	orrs	r1, r2
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b352:	0852      	lsrs	r2, r2, #1
 800b354:	3a01      	subs	r2, #1
 800b356:	0552      	lsls	r2, r2, #21
 800b358:	4311      	orrs	r1, r2
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b35e:	0852      	lsrs	r2, r2, #1
 800b360:	3a01      	subs	r2, #1
 800b362:	0652      	lsls	r2, r2, #25
 800b364:	4311      	orrs	r1, r2
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b36a:	06d2      	lsls	r2, r2, #27
 800b36c:	430a      	orrs	r2, r1
 800b36e:	4947      	ldr	r1, [pc, #284]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b370:	4313      	orrs	r3, r2
 800b372:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b374:	4b45      	ldr	r3, [pc, #276]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a44      	ldr	r2, [pc, #272]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b37a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b37e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b380:	4b42      	ldr	r3, [pc, #264]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	4a41      	ldr	r2, [pc, #260]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b38a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b38c:	f7fb fbe4 	bl	8006b58 <HAL_GetTick>
 800b390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b392:	e008      	b.n	800b3a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b394:	f7fb fbe0 	bl	8006b58 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d901      	bls.n	800b3a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e06e      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3a6:	4b39      	ldr	r3, [pc, #228]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0f0      	beq.n	800b394 <HAL_RCC_OscConfig+0x530>
 800b3b2:	e066      	b.n	800b482 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3b4:	4b35      	ldr	r3, [pc, #212]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a34      	ldr	r2, [pc, #208]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b3c0:	4b32      	ldr	r3, [pc, #200]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	4a31      	ldr	r2, [pc, #196]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b3cc:	4b2f      	ldr	r3, [pc, #188]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	4a2e      	ldr	r2, [pc, #184]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b3d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3dc:	f7fb fbbc 	bl	8006b58 <HAL_GetTick>
 800b3e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3e2:	e008      	b.n	800b3f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3e4:	f7fb fbb8 	bl	8006b58 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d901      	bls.n	800b3f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e046      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3f6:	4b25      	ldr	r3, [pc, #148]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1f0      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x580>
 800b402:	e03e      	b.n	800b482 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d101      	bne.n	800b410 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e039      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b410:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <HAL_RCC_OscConfig+0x628>)
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f003 0203 	and.w	r2, r3, #3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	429a      	cmp	r2, r3
 800b422:	d12c      	bne.n	800b47e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	3b01      	subs	r3, #1
 800b430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b432:	429a      	cmp	r2, r3
 800b434:	d123      	bne.n	800b47e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b440:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b442:	429a      	cmp	r2, r3
 800b444:	d11b      	bne.n	800b47e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b452:	429a      	cmp	r2, r3
 800b454:	d113      	bne.n	800b47e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	085b      	lsrs	r3, r3, #1
 800b462:	3b01      	subs	r3, #1
 800b464:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b466:	429a      	cmp	r2, r3
 800b468:	d109      	bne.n	800b47e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b474:	085b      	lsrs	r3, r3, #1
 800b476:	3b01      	subs	r3, #1
 800b478:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d001      	beq.n	800b482 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e000      	b.n	800b484 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3720      	adds	r7, #32
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	40021000 	.word	0x40021000
 800b490:	019f800c 	.word	0x019f800c

0800b494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e11e      	b.n	800b6ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4ac:	4b91      	ldr	r3, [pc, #580]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 030f 	and.w	r3, r3, #15
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d910      	bls.n	800b4dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ba:	4b8e      	ldr	r3, [pc, #568]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f023 020f 	bic.w	r2, r3, #15
 800b4c2:	498c      	ldr	r1, [pc, #560]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ca:	4b8a      	ldr	r3, [pc, #552]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 030f 	and.w	r3, r3, #15
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d001      	beq.n	800b4dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e106      	b.n	800b6ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d073      	beq.n	800b5d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d129      	bne.n	800b544 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4f0:	4b81      	ldr	r3, [pc, #516]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e0f4      	b.n	800b6ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b500:	f000 f972 	bl	800b7e8 <RCC_GetSysClockFreqFromPLLSource>
 800b504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	4a7c      	ldr	r2, [pc, #496]	; (800b6fc <HAL_RCC_ClockConfig+0x268>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d93f      	bls.n	800b58e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b50e:	4b7a      	ldr	r3, [pc, #488]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d009      	beq.n	800b52e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b522:	2b00      	cmp	r3, #0
 800b524:	d033      	beq.n	800b58e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d12f      	bne.n	800b58e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b52e:	4b72      	ldr	r3, [pc, #456]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b536:	4a70      	ldr	r2, [pc, #448]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b53c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b53e:	2380      	movs	r3, #128	; 0x80
 800b540:	617b      	str	r3, [r7, #20]
 800b542:	e024      	b.n	800b58e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d107      	bne.n	800b55c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b54c:	4b6a      	ldr	r3, [pc, #424]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d109      	bne.n	800b56c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e0c6      	b.n	800b6ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b55c:	4b66      	ldr	r3, [pc, #408]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	e0be      	b.n	800b6ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b56c:	f000 f8ce 	bl	800b70c <HAL_RCC_GetSysClockFreq>
 800b570:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	4a61      	ldr	r2, [pc, #388]	; (800b6fc <HAL_RCC_ClockConfig+0x268>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d909      	bls.n	800b58e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b57a:	4b5f      	ldr	r3, [pc, #380]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b582:	4a5d      	ldr	r2, [pc, #372]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b588:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b58a:	2380      	movs	r3, #128	; 0x80
 800b58c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b58e:	4b5a      	ldr	r3, [pc, #360]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f023 0203 	bic.w	r2, r3, #3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	4957      	ldr	r1, [pc, #348]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5a0:	f7fb fada 	bl	8006b58 <HAL_GetTick>
 800b5a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5a6:	e00a      	b.n	800b5be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5a8:	f7fb fad6 	bl	8006b58 <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d901      	bls.n	800b5be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e095      	b.n	800b6ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5be:	4b4e      	ldr	r3, [pc, #312]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f003 020c 	and.w	r2, r3, #12
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d1eb      	bne.n	800b5a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d023      	beq.n	800b624 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d005      	beq.n	800b5f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b5e8:	4b43      	ldr	r3, [pc, #268]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	4a42      	ldr	r2, [pc, #264]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b5ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b5f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 0308 	and.w	r3, r3, #8
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d007      	beq.n	800b610 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b600:	4b3d      	ldr	r3, [pc, #244]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b608:	4a3b      	ldr	r2, [pc, #236]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b60a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b60e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b610:	4b39      	ldr	r3, [pc, #228]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	4936      	ldr	r1, [pc, #216]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	608b      	str	r3, [r1, #8]
 800b622:	e008      	b.n	800b636 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	2b80      	cmp	r3, #128	; 0x80
 800b628:	d105      	bne.n	800b636 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b62a:	4b33      	ldr	r3, [pc, #204]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	4a32      	ldr	r2, [pc, #200]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b634:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b636:	4b2f      	ldr	r3, [pc, #188]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 030f 	and.w	r3, r3, #15
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d21d      	bcs.n	800b680 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b644:	4b2b      	ldr	r3, [pc, #172]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f023 020f 	bic.w	r2, r3, #15
 800b64c:	4929      	ldr	r1, [pc, #164]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	4313      	orrs	r3, r2
 800b652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b654:	f7fb fa80 	bl	8006b58 <HAL_GetTick>
 800b658:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b65a:	e00a      	b.n	800b672 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b65c:	f7fb fa7c 	bl	8006b58 <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	f241 3288 	movw	r2, #5000	; 0x1388
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d901      	bls.n	800b672 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e03b      	b.n	800b6ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b672:	4b20      	ldr	r3, [pc, #128]	; (800b6f4 <HAL_RCC_ClockConfig+0x260>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f003 030f 	and.w	r3, r3, #15
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d1ed      	bne.n	800b65c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d008      	beq.n	800b69e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b68c:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	4917      	ldr	r1, [pc, #92]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b69a:	4313      	orrs	r3, r2
 800b69c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0308 	and.w	r3, r3, #8
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d009      	beq.n	800b6be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b6aa:	4b13      	ldr	r3, [pc, #76]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	490f      	ldr	r1, [pc, #60]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b6be:	f000 f825 	bl	800b70c <HAL_RCC_GetSysClockFreq>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4b0c      	ldr	r3, [pc, #48]	; (800b6f8 <HAL_RCC_ClockConfig+0x264>)
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	091b      	lsrs	r3, r3, #4
 800b6ca:	f003 030f 	and.w	r3, r3, #15
 800b6ce:	490c      	ldr	r1, [pc, #48]	; (800b700 <HAL_RCC_ClockConfig+0x26c>)
 800b6d0:	5ccb      	ldrb	r3, [r1, r3]
 800b6d2:	f003 031f 	and.w	r3, r3, #31
 800b6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6da:	4a0a      	ldr	r2, [pc, #40]	; (800b704 <HAL_RCC_ClockConfig+0x270>)
 800b6dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b6de:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <HAL_RCC_ClockConfig+0x274>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fb f9ec 	bl	8006ac0 <HAL_InitTick>
 800b6e8:	4603      	mov	r3, r0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	40022000 	.word	0x40022000
 800b6f8:	40021000 	.word	0x40021000
 800b6fc:	04c4b400 	.word	0x04c4b400
 800b700:	080297c8 	.word	0x080297c8
 800b704:	20000018 	.word	0x20000018
 800b708:	2000001c 	.word	0x2000001c

0800b70c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b712:	4b2c      	ldr	r3, [pc, #176]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f003 030c 	and.w	r3, r3, #12
 800b71a:	2b04      	cmp	r3, #4
 800b71c:	d102      	bne.n	800b724 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b71e:	4b2a      	ldr	r3, [pc, #168]	; (800b7c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b720:	613b      	str	r3, [r7, #16]
 800b722:	e047      	b.n	800b7b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b724:	4b27      	ldr	r3, [pc, #156]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	f003 030c 	and.w	r3, r3, #12
 800b72c:	2b08      	cmp	r3, #8
 800b72e:	d102      	bne.n	800b736 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b730:	4b26      	ldr	r3, [pc, #152]	; (800b7cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800b732:	613b      	str	r3, [r7, #16]
 800b734:	e03e      	b.n	800b7b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b736:	4b23      	ldr	r3, [pc, #140]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f003 030c 	and.w	r3, r3, #12
 800b73e:	2b0c      	cmp	r3, #12
 800b740:	d136      	bne.n	800b7b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b742:	4b20      	ldr	r3, [pc, #128]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f003 0303 	and.w	r3, r3, #3
 800b74a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b74c:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	091b      	lsrs	r3, r3, #4
 800b752:	f003 030f 	and.w	r3, r3, #15
 800b756:	3301      	adds	r3, #1
 800b758:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	d10c      	bne.n	800b77a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b760:	4a1a      	ldr	r2, [pc, #104]	; (800b7cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	fbb2 f3f3 	udiv	r3, r2, r3
 800b768:	4a16      	ldr	r2, [pc, #88]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b76a:	68d2      	ldr	r2, [r2, #12]
 800b76c:	0a12      	lsrs	r2, r2, #8
 800b76e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b772:	fb02 f303 	mul.w	r3, r2, r3
 800b776:	617b      	str	r3, [r7, #20]
      break;
 800b778:	e00c      	b.n	800b794 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b77a:	4a13      	ldr	r2, [pc, #76]	; (800b7c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b782:	4a10      	ldr	r2, [pc, #64]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b784:	68d2      	ldr	r2, [r2, #12]
 800b786:	0a12      	lsrs	r2, r2, #8
 800b788:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b78c:	fb02 f303 	mul.w	r3, r2, r3
 800b790:	617b      	str	r3, [r7, #20]
      break;
 800b792:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b794:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	0e5b      	lsrs	r3, r3, #25
 800b79a:	f003 0303 	and.w	r3, r3, #3
 800b79e:	3301      	adds	r3, #1
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ac:	613b      	str	r3, [r7, #16]
 800b7ae:	e001      	b.n	800b7b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b7b4:	693b      	ldr	r3, [r7, #16]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	371c      	adds	r7, #28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	40021000 	.word	0x40021000
 800b7c8:	00f42400 	.word	0x00f42400
 800b7cc:	016e3600 	.word	0x016e3600

0800b7d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7d4:	4b03      	ldr	r3, [pc, #12]	; (800b7e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	20000018 	.word	0x20000018

0800b7e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b7ee:	4b1e      	ldr	r3, [pc, #120]	; (800b868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	f003 0303 	and.w	r3, r3, #3
 800b7f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b7f8:	4b1b      	ldr	r3, [pc, #108]	; (800b868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	091b      	lsrs	r3, r3, #4
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d10c      	bne.n	800b826 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b80c:	4a17      	ldr	r2, [pc, #92]	; (800b86c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	fbb2 f3f3 	udiv	r3, r2, r3
 800b814:	4a14      	ldr	r2, [pc, #80]	; (800b868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b816:	68d2      	ldr	r2, [r2, #12]
 800b818:	0a12      	lsrs	r2, r2, #8
 800b81a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b81e:	fb02 f303 	mul.w	r3, r2, r3
 800b822:	617b      	str	r3, [r7, #20]
    break;
 800b824:	e00c      	b.n	800b840 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b826:	4a12      	ldr	r2, [pc, #72]	; (800b870 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82e:	4a0e      	ldr	r2, [pc, #56]	; (800b868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b830:	68d2      	ldr	r2, [r2, #12]
 800b832:	0a12      	lsrs	r2, r2, #8
 800b834:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b838:	fb02 f303 	mul.w	r3, r2, r3
 800b83c:	617b      	str	r3, [r7, #20]
    break;
 800b83e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b840:	4b09      	ldr	r3, [pc, #36]	; (800b868 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	0e5b      	lsrs	r3, r3, #25
 800b846:	f003 0303 	and.w	r3, r3, #3
 800b84a:	3301      	adds	r3, #1
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	fbb2 f3f3 	udiv	r3, r2, r3
 800b858:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b85a:	687b      	ldr	r3, [r7, #4]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	371c      	adds	r7, #28
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	40021000 	.word	0x40021000
 800b86c:	016e3600 	.word	0x016e3600
 800b870:	00f42400 	.word	0x00f42400

0800b874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b87c:	2300      	movs	r3, #0
 800b87e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b880:	2300      	movs	r3, #0
 800b882:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8098 	beq.w	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b892:	2300      	movs	r3, #0
 800b894:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b896:	4b43      	ldr	r3, [pc, #268]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b89a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10d      	bne.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8a2:	4b40      	ldr	r3, [pc, #256]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a6:	4a3f      	ldr	r2, [pc, #252]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b8ae:	4b3d      	ldr	r3, [pc, #244]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8b6:	60bb      	str	r3, [r7, #8]
 800b8b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8be:	4b3a      	ldr	r3, [pc, #232]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a39      	ldr	r2, [pc, #228]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b8c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8ca:	f7fb f945 	bl	8006b58 <HAL_GetTick>
 800b8ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8d0:	e009      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8d2:	f7fb f941 	bl	8006b58 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d902      	bls.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	74fb      	strb	r3, [r7, #19]
        break;
 800b8e4:	e005      	b.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8e6:	4b30      	ldr	r3, [pc, #192]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0ef      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b8f2:	7cfb      	ldrb	r3, [r7, #19]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d159      	bne.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b8f8:	4b2a      	ldr	r3, [pc, #168]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b902:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d01e      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	429a      	cmp	r2, r3
 800b912:	d019      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b914:	4b23      	ldr	r3, [pc, #140]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b91a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b91e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b920:	4b20      	ldr	r3, [pc, #128]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b926:	4a1f      	ldr	r2, [pc, #124]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b92c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b936:	4a1b      	ldr	r2, [pc, #108]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b93c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b940:	4a18      	ldr	r2, [pc, #96]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d016      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b952:	f7fb f901 	bl	8006b58 <HAL_GetTick>
 800b956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b958:	e00b      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b95a:	f7fb f8fd 	bl	8006b58 <HAL_GetTick>
 800b95e:	4602      	mov	r2, r0
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	f241 3288 	movw	r2, #5000	; 0x1388
 800b968:	4293      	cmp	r3, r2
 800b96a:	d902      	bls.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	74fb      	strb	r3, [r7, #19]
            break;
 800b970:	e006      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b972:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0ec      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b980:	7cfb      	ldrb	r3, [r7, #19]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d10b      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b986:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b98c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b994:	4903      	ldr	r1, [pc, #12]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b996:	4313      	orrs	r3, r2
 800b998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b99c:	e008      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b99e:	7cfb      	ldrb	r3, [r7, #19]
 800b9a0:	74bb      	strb	r3, [r7, #18]
 800b9a2:	e005      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b9a4:	40021000 	.word	0x40021000
 800b9a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ac:	7cfb      	ldrb	r3, [r7, #19]
 800b9ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b9b0:	7c7b      	ldrb	r3, [r7, #17]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d105      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9b6:	4ba7      	ldr	r3, [pc, #668]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ba:	4aa6      	ldr	r2, [pc, #664]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b9ce:	4ba1      	ldr	r3, [pc, #644]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d4:	f023 0203 	bic.w	r2, r3, #3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	499d      	ldr	r1, [pc, #628]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0302 	and.w	r3, r3, #2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b9f0:	4b98      	ldr	r3, [pc, #608]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f6:	f023 020c 	bic.w	r2, r3, #12
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	4995      	ldr	r1, [pc, #596]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0304 	and.w	r3, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba12:	4b90      	ldr	r3, [pc, #576]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	498c      	ldr	r1, [pc, #560]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba22:	4313      	orrs	r3, r2
 800ba24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0308 	and.w	r3, r3, #8
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ba34:	4b87      	ldr	r3, [pc, #540]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	4984      	ldr	r1, [pc, #528]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 0310 	and.w	r3, r3, #16
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ba56:	4b7f      	ldr	r3, [pc, #508]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	497b      	ldr	r1, [pc, #492]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba66:	4313      	orrs	r3, r2
 800ba68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f003 0320 	and.w	r3, r3, #32
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba78:	4b76      	ldr	r3, [pc, #472]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	4973      	ldr	r1, [pc, #460]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ba9a:	4b6e      	ldr	r3, [pc, #440]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	496a      	ldr	r1, [pc, #424]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00a      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800babc:	4b65      	ldr	r3, [pc, #404]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800babe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	4962      	ldr	r1, [pc, #392]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00a      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bade:	4b5d      	ldr	r3, [pc, #372]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	4959      	ldr	r1, [pc, #356]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baee:	4313      	orrs	r3, r2
 800baf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00a      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb00:	4b54      	ldr	r3, [pc, #336]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb06:	f023 0203 	bic.w	r2, r3, #3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0e:	4951      	ldr	r1, [pc, #324]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb22:	4b4c      	ldr	r3, [pc, #304]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	4948      	ldr	r1, [pc, #288]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d015      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb44:	4b43      	ldr	r3, [pc, #268]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb52:	4940      	ldr	r1, [pc, #256]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb54:	4313      	orrs	r3, r2
 800bb56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb62:	d105      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb64:	4b3b      	ldr	r3, [pc, #236]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	4a3a      	ldr	r2, [pc, #232]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d015      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bb7c:	4b35      	ldr	r3, [pc, #212]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8a:	4932      	ldr	r1, [pc, #200]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb9a:	d105      	bne.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb9c:	4b2d      	ldr	r3, [pc, #180]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	4a2c      	ldr	r2, [pc, #176]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bba6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d015      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bbb4:	4b27      	ldr	r3, [pc, #156]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	4924      	ldr	r1, [pc, #144]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbd2:	d105      	bne.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbd4:	4b1f      	ldr	r3, [pc, #124]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	4a1e      	ldr	r2, [pc, #120]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d015      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bbec:	4b19      	ldr	r3, [pc, #100]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfa:	4916      	ldr	r1, [pc, #88]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc0a:	d105      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc0c:	4b11      	ldr	r3, [pc, #68]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	4a10      	ldr	r2, [pc, #64]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d019      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc24:	4b0b      	ldr	r3, [pc, #44]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc32:	4908      	ldr	r1, [pc, #32]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc34:	4313      	orrs	r3, r2
 800bc36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc42:	d109      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc44:	4b03      	ldr	r3, [pc, #12]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	4a02      	ldr	r2, [pc, #8]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc4e:	60d3      	str	r3, [r2, #12]
 800bc50:	e002      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bc52:	bf00      	nop
 800bc54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d015      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bc64:	4b29      	ldr	r3, [pc, #164]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc72:	4926      	ldr	r1, [pc, #152]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc74:	4313      	orrs	r3, r2
 800bc76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc82:	d105      	bne.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bc84:	4b21      	ldr	r3, [pc, #132]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	4a20      	ldr	r2, [pc, #128]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d015      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bc9c:	4b1b      	ldr	r3, [pc, #108]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcaa:	4918      	ldr	r1, [pc, #96]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcac:	4313      	orrs	r3, r2
 800bcae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcba:	d105      	bne.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bcbc:	4b13      	ldr	r3, [pc, #76]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	4a12      	ldr	r2, [pc, #72]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d015      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bcd4:	4b0d      	ldr	r3, [pc, #52]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bce2:	490a      	ldr	r1, [pc, #40]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bce4:	4313      	orrs	r3, r2
 800bce6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcf2:	d105      	bne.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcf4:	4b05      	ldr	r3, [pc, #20]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	4a04      	ldr	r2, [pc, #16]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bd00:	7cbb      	ldrb	r3, [r7, #18]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	40021000 	.word	0x40021000

0800bd10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d101      	bne.n	800bd22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e09d      	b.n	800be5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d108      	bne.n	800bd3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd32:	d009      	beq.n	800bd48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	61da      	str	r2, [r3, #28]
 800bd3a:	e005      	b.n	800bd48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7fa fb42 	bl	80063ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd88:	d902      	bls.n	800bd90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	e002      	b.n	800bd96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bd9e:	d007      	beq.n	800bdb0 <HAL_SPI_Init+0xa0>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bda8:	d002      	beq.n	800bdb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	f003 0302 	and.w	r3, r3, #2
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdde:	431a      	orrs	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	69db      	ldr	r3, [r3, #28]
 800bde4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bde8:	431a      	orrs	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf2:	ea42 0103 	orr.w	r1, r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	430a      	orrs	r2, r1
 800be04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	0c1b      	lsrs	r3, r3, #16
 800be0c:	f003 0204 	and.w	r2, r3, #4
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	f003 0310 	and.w	r3, r3, #16
 800be18:	431a      	orrs	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1e:	f003 0308 	and.w	r3, r3, #8
 800be22:	431a      	orrs	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800be2c:	ea42 0103 	orr.w	r1, r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	69da      	ldr	r2, [r3, #28]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b08a      	sub	sp, #40	; 0x28
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	60b9      	str	r1, [r7, #8]
 800be70:	607a      	str	r2, [r7, #4]
 800be72:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be74:	2301      	movs	r3, #1
 800be76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be84:	2b01      	cmp	r3, #1
 800be86:	d101      	bne.n	800be8c <HAL_SPI_TransmitReceive+0x26>
 800be88:	2302      	movs	r3, #2
 800be8a:	e1fb      	b.n	800c284 <HAL_SPI_TransmitReceive+0x41e>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2201      	movs	r2, #1
 800be90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be94:	f7fa fe60 	bl	8006b58 <HAL_GetTick>
 800be98:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bea0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bea8:	887b      	ldrh	r3, [r7, #2]
 800beaa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800beac:	887b      	ldrh	r3, [r7, #2]
 800beae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800beb0:	7efb      	ldrb	r3, [r7, #27]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d00e      	beq.n	800bed4 <HAL_SPI_TransmitReceive+0x6e>
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bebc:	d106      	bne.n	800becc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <HAL_SPI_TransmitReceive+0x66>
 800bec6:	7efb      	ldrb	r3, [r7, #27]
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d003      	beq.n	800bed4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800becc:	2302      	movs	r3, #2
 800bece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bed2:	e1cd      	b.n	800c270 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d005      	beq.n	800bee6 <HAL_SPI_TransmitReceive+0x80>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <HAL_SPI_TransmitReceive+0x80>
 800bee0:	887b      	ldrh	r3, [r7, #2]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d103      	bne.n	800beee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800beec:	e1c0      	b.n	800c270 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d003      	beq.n	800bf02 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2205      	movs	r2, #5
 800befe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	887a      	ldrh	r2, [r7, #2]
 800bf12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	887a      	ldrh	r2, [r7, #2]
 800bf1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	887a      	ldrh	r2, [r7, #2]
 800bf28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	887a      	ldrh	r2, [r7, #2]
 800bf2e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf44:	d802      	bhi.n	800bf4c <HAL_SPI_TransmitReceive+0xe6>
 800bf46:	8a3b      	ldrh	r3, [r7, #16]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d908      	bls.n	800bf5e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf5a:	605a      	str	r2, [r3, #4]
 800bf5c:	e007      	b.n	800bf6e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf6c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf78:	2b40      	cmp	r3, #64	; 0x40
 800bf7a:	d007      	beq.n	800bf8c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf94:	d97c      	bls.n	800c090 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <HAL_SPI_TransmitReceive+0x13e>
 800bf9e:	8a7b      	ldrh	r3, [r7, #18]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d169      	bne.n	800c078 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa8:	881a      	ldrh	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb4:	1c9a      	adds	r2, r3, #2
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfc8:	e056      	b.n	800c078 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d11b      	bne.n	800c010 <HAL_SPI_TransmitReceive+0x1aa>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d016      	beq.n	800c010 <HAL_SPI_TransmitReceive+0x1aa>
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d113      	bne.n	800c010 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	881a      	ldrh	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff8:	1c9a      	adds	r2, r3, #2
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c002:	b29b      	uxth	r3, r3
 800c004:	3b01      	subs	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d11c      	bne.n	800c058 <HAL_SPI_TransmitReceive+0x1f2>
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c024:	b29b      	uxth	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d016      	beq.n	800c058 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68da      	ldr	r2, [r3, #12]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c034:	b292      	uxth	r2, r2
 800c036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03c:	1c9a      	adds	r2, r3, #2
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c048:	b29b      	uxth	r3, r3
 800c04a:	3b01      	subs	r3, #1
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c054:	2301      	movs	r3, #1
 800c056:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c058:	f7fa fd7e 	bl	8006b58 <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c064:	429a      	cmp	r2, r3
 800c066:	d807      	bhi.n	800c078 <HAL_SPI_TransmitReceive+0x212>
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d003      	beq.n	800c078 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c076:	e0fb      	b.n	800c270 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1a3      	bne.n	800bfca <HAL_SPI_TransmitReceive+0x164>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c088:	b29b      	uxth	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d19d      	bne.n	800bfca <HAL_SPI_TransmitReceive+0x164>
 800c08e:	e0df      	b.n	800c250 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d003      	beq.n	800c0a0 <HAL_SPI_TransmitReceive+0x23a>
 800c098:	8a7b      	ldrh	r3, [r7, #18]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	f040 80cb 	bne.w	800c236 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d912      	bls.n	800c0d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ae:	881a      	ldrh	r2, [r3, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ba:	1c9a      	adds	r2, r3, #2
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	3b02      	subs	r3, #2
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0ce:	e0b2      	b.n	800c236 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	330c      	adds	r3, #12
 800c0da:	7812      	ldrb	r2, [r2, #0]
 800c0dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0f6:	e09e      	b.n	800c236 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	2b02      	cmp	r3, #2
 800c104:	d134      	bne.n	800c170 <HAL_SPI_TransmitReceive+0x30a>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d02f      	beq.n	800c170 <HAL_SPI_TransmitReceive+0x30a>
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	2b01      	cmp	r3, #1
 800c114:	d12c      	bne.n	800c170 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d912      	bls.n	800c146 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c124:	881a      	ldrh	r2, [r3, #0]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c130:	1c9a      	adds	r2, r3, #2
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	3b02      	subs	r3, #2
 800c13e:	b29a      	uxth	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c144:	e012      	b.n	800c16c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	330c      	adds	r3, #12
 800c150:	7812      	ldrb	r2, [r2, #0]
 800c152:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c162:	b29b      	uxth	r3, r3
 800c164:	3b01      	subs	r3, #1
 800c166:	b29a      	uxth	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c16c:	2300      	movs	r3, #0
 800c16e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d148      	bne.n	800c210 <HAL_SPI_TransmitReceive+0x3aa>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c184:	b29b      	uxth	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d042      	beq.n	800c210 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c190:	b29b      	uxth	r3, r3
 800c192:	2b01      	cmp	r3, #1
 800c194:	d923      	bls.n	800c1de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68da      	ldr	r2, [r3, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a0:	b292      	uxth	r2, r2
 800c1a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a8:	1c9a      	adds	r2, r3, #2
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	3b02      	subs	r3, #2
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d81f      	bhi.n	800c20c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c1da:	605a      	str	r2, [r3, #4]
 800c1dc:	e016      	b.n	800c20c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f103 020c 	add.w	r2, r3, #12
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	7812      	ldrb	r2, [r2, #0]
 800c1ec:	b2d2      	uxtb	r2, r2
 800c1ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c200:	b29b      	uxth	r3, r3
 800c202:	3b01      	subs	r3, #1
 800c204:	b29a      	uxth	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c20c:	2301      	movs	r3, #1
 800c20e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c210:	f7fa fca2 	bl	8006b58 <HAL_GetTick>
 800c214:	4602      	mov	r2, r0
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d803      	bhi.n	800c228 <HAL_SPI_TransmitReceive+0x3c2>
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c226:	d102      	bne.n	800c22e <HAL_SPI_TransmitReceive+0x3c8>
 800c228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d103      	bne.n	800c236 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c234:	e01c      	b.n	800c270 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f af5b 	bne.w	800c0f8 <HAL_SPI_TransmitReceive+0x292>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c248:	b29b      	uxth	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f47f af54 	bne.w	800c0f8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f000 f937 	bl	800c4c8 <SPI_EndRxTxTransaction>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d006      	beq.n	800c26e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2220      	movs	r2, #32
 800c26a:	661a      	str	r2, [r3, #96]	; 0x60
 800c26c:	e000      	b.n	800c270 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c26e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c284:	4618      	mov	r0, r3
 800c286:	3728      	adds	r7, #40	; 0x28
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	603b      	str	r3, [r7, #0]
 800c298:	4613      	mov	r3, r2
 800c29a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c29c:	f7fa fc5c 	bl	8006b58 <HAL_GetTick>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	1a9b      	subs	r3, r3, r2
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c2ac:	f7fa fc54 	bl	8006b58 <HAL_GetTick>
 800c2b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c2b2:	4b39      	ldr	r3, [pc, #228]	; (800c398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	015b      	lsls	r3, r3, #5
 800c2b8:	0d1b      	lsrs	r3, r3, #20
 800c2ba:	69fa      	ldr	r2, [r7, #28]
 800c2bc:	fb02 f303 	mul.w	r3, r2, r3
 800c2c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2c2:	e054      	b.n	800c36e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ca:	d050      	beq.n	800c36e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c2cc:	f7fa fc44 	bl	8006b58 <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	69fa      	ldr	r2, [r7, #28]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d902      	bls.n	800c2e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d13d      	bne.n	800c35e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2fa:	d111      	bne.n	800c320 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c304:	d004      	beq.n	800c310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c30e:	d107      	bne.n	800c320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c31e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c328:	d10f      	bne.n	800c34a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c338:	601a      	str	r2, [r3, #0]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e017      	b.n	800c38e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689a      	ldr	r2, [r3, #8]
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	4013      	ands	r3, r2
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	bf0c      	ite	eq
 800c37e:	2301      	moveq	r3, #1
 800c380:	2300      	movne	r3, #0
 800c382:	b2db      	uxtb	r3, r3
 800c384:	461a      	mov	r2, r3
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d19b      	bne.n	800c2c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3720      	adds	r7, #32
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20000018 	.word	0x20000018

0800c39c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08a      	sub	sp, #40	; 0x28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c3ae:	f7fa fbd3 	bl	8006b58 <HAL_GetTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	1a9b      	subs	r3, r3, r2
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c3be:	f7fa fbcb 	bl	8006b58 <HAL_GetTick>
 800c3c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c3cc:	4b3d      	ldr	r3, [pc, #244]	; (800c4c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	00da      	lsls	r2, r3, #3
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	0d1b      	lsrs	r3, r3, #20
 800c3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3de:	fb02 f303 	mul.w	r3, r2, r3
 800c3e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c3e4:	e060      	b.n	800c4a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c3ec:	d107      	bne.n	800c3fe <SPI_WaitFifoStateUntilTimeout+0x62>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d104      	bne.n	800c3fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c404:	d050      	beq.n	800c4a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c406:	f7fa fba7 	bl	8006b58 <HAL_GetTick>
 800c40a:	4602      	mov	r2, r0
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c412:	429a      	cmp	r2, r3
 800c414:	d902      	bls.n	800c41c <SPI_WaitFifoStateUntilTimeout+0x80>
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d13d      	bne.n	800c498 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c42a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c434:	d111      	bne.n	800c45a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c43e:	d004      	beq.n	800c44a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c448:	d107      	bne.n	800c45a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c458:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c462:	d10f      	bne.n	800c484 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c482:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e010      	b.n	800c4ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d196      	bne.n	800c3e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3728      	adds	r7, #40	; 0x28
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20000018 	.word	0x20000018

0800c4c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af02      	add	r7, sp, #8
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7ff ff5b 	bl	800c39c <SPI_WaitFifoStateUntilTimeout>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d007      	beq.n	800c4fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4f0:	f043 0220 	orr.w	r2, r3, #32
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e027      	b.n	800c54c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2200      	movs	r2, #0
 800c504:	2180      	movs	r1, #128	; 0x80
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff fec0 	bl	800c28c <SPI_WaitFlagStateUntilTimeout>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d007      	beq.n	800c522 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c516:	f043 0220 	orr.w	r2, r3, #32
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e014      	b.n	800c54c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2200      	movs	r2, #0
 800c52a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f7ff ff34 	bl	800c39c <SPI_WaitFifoStateUntilTimeout>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d007      	beq.n	800c54a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c53e:	f043 0220 	orr.w	r2, r3, #32
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e000      	b.n	800c54c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e038      	b.n	800c5dc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7f5 f99a 	bl	80018b8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3308      	adds	r3, #8
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f001 fb3c 	bl	800dc0c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6818      	ldr	r0, [r3, #0]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	461a      	mov	r2, r3
 800c59e:	68b9      	ldr	r1, [r7, #8]
 800c5a0:	f001 fc02 	bl	800dda8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6858      	ldr	r0, [r3, #4]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	689a      	ldr	r2, [r3, #8]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b0:	6879      	ldr	r1, [r7, #4]
 800c5b2:	f001 fc4b 	bl	800de4c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	6892      	ldr	r2, [r2, #8]
 800c5be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	6892      	ldr	r2, [r2, #8]
 800c5ca:	f041 0101 	orr.w	r1, r1, #1
 800c5ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e049      	b.n	800c68a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7fa f9ca 	bl	80069a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3304      	adds	r3, #4
 800c620:	4619      	mov	r1, r3
 800c622:	4610      	mov	r0, r2
 800c624:	f000 fd82 	bl	800d12c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d001      	beq.n	800c6ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e04c      	b.n	800c746 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a26      	ldr	r2, [pc, #152]	; (800c754 <HAL_TIM_Base_Start+0xc0>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d022      	beq.n	800c704 <HAL_TIM_Base_Start+0x70>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6c6:	d01d      	beq.n	800c704 <HAL_TIM_Base_Start+0x70>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a22      	ldr	r2, [pc, #136]	; (800c758 <HAL_TIM_Base_Start+0xc4>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d018      	beq.n	800c704 <HAL_TIM_Base_Start+0x70>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a21      	ldr	r2, [pc, #132]	; (800c75c <HAL_TIM_Base_Start+0xc8>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d013      	beq.n	800c704 <HAL_TIM_Base_Start+0x70>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a1f      	ldr	r2, [pc, #124]	; (800c760 <HAL_TIM_Base_Start+0xcc>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d00e      	beq.n	800c704 <HAL_TIM_Base_Start+0x70>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a1e      	ldr	r2, [pc, #120]	; (800c764 <HAL_TIM_Base_Start+0xd0>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d009      	beq.n	800c704 <HAL_TIM_Base_Start+0x70>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1c      	ldr	r2, [pc, #112]	; (800c768 <HAL_TIM_Base_Start+0xd4>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d004      	beq.n	800c704 <HAL_TIM_Base_Start+0x70>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a1b      	ldr	r2, [pc, #108]	; (800c76c <HAL_TIM_Base_Start+0xd8>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d115      	bne.n	800c730 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	689a      	ldr	r2, [r3, #8]
 800c70a:	4b19      	ldr	r3, [pc, #100]	; (800c770 <HAL_TIM_Base_Start+0xdc>)
 800c70c:	4013      	ands	r3, r2
 800c70e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2b06      	cmp	r3, #6
 800c714:	d015      	beq.n	800c742 <HAL_TIM_Base_Start+0xae>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c71c:	d011      	beq.n	800c742 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0201 	orr.w	r2, r2, #1
 800c72c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c72e:	e008      	b.n	800c742 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f042 0201 	orr.w	r2, r2, #1
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	e000      	b.n	800c744 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	40012c00 	.word	0x40012c00
 800c758:	40000400 	.word	0x40000400
 800c75c:	40000800 	.word	0x40000800
 800c760:	40000c00 	.word	0x40000c00
 800c764:	40013400 	.word	0x40013400
 800c768:	40014000 	.word	0x40014000
 800c76c:	40015000 	.word	0x40015000
 800c770:	00010007 	.word	0x00010007

0800c774 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	6a1a      	ldr	r2, [r3, #32]
 800c782:	f241 1311 	movw	r3, #4369	; 0x1111
 800c786:	4013      	ands	r3, r2
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10f      	bne.n	800c7ac <HAL_TIM_Base_Stop+0x38>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6a1a      	ldr	r2, [r3, #32]
 800c792:	f244 4344 	movw	r3, #17476	; 0x4444
 800c796:	4013      	ands	r3, r2
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d107      	bne.n	800c7ac <HAL_TIM_Base_Stop+0x38>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f022 0201 	bic.w	r2, r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e049      	b.n	800c868 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d106      	bne.n	800c7ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f841 	bl	800c870 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2202      	movs	r2, #2
 800c7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	4619      	mov	r1, r3
 800c800:	4610      	mov	r0, r2
 800c802:	f000 fc93 	bl	800d12c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c894:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c89c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8ac:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d108      	bne.n	800c8c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8b4:	7bbb      	ldrb	r3, [r7, #14]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d105      	bne.n	800c8c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8ba:	7b7b      	ldrb	r3, [r7, #13]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d102      	bne.n	800c8c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8c0:	7b3b      	ldrb	r3, [r7, #12]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d001      	beq.n	800c8ca <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e059      	b.n	800c97e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f042 0202 	orr.w	r2, r2, #2
 800c8f8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f042 0204 	orr.w	r2, r2, #4
 800c908:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2201      	movs	r2, #1
 800c910:	2100      	movs	r1, #0
 800c912:	4618      	mov	r0, r3
 800c914:	f001 f878 	bl	800da08 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2201      	movs	r2, #1
 800c91e:	2104      	movs	r1, #4
 800c920:	4618      	mov	r0, r3
 800c922:	f001 f871 	bl	800da08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a17      	ldr	r2, [pc, #92]	; (800c988 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d018      	beq.n	800c962 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a15      	ldr	r2, [pc, #84]	; (800c98c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d013      	beq.n	800c962 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a14      	ldr	r2, [pc, #80]	; (800c990 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d00e      	beq.n	800c962 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a12      	ldr	r2, [pc, #72]	; (800c994 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d009      	beq.n	800c962 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a11      	ldr	r2, [pc, #68]	; (800c998 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d004      	beq.n	800c962 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a0f      	ldr	r2, [pc, #60]	; (800c99c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d101      	bne.n	800c966 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800c962:	2301      	movs	r3, #1
 800c964:	e000      	b.n	800c968 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800c966:	2300      	movs	r3, #0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d007      	beq.n	800c97c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c97a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	40012c00 	.word	0x40012c00
 800c98c:	40013400 	.word	0x40013400
 800c990:	40014000 	.word	0x40014000
 800c994:	40014400 	.word	0x40014400
 800c998:	40014800 	.word	0x40014800
 800c99c:	40015000 	.word	0x40015000

0800c9a0 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68da      	ldr	r2, [r3, #12]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f022 0202 	bic.w	r2, r2, #2
 800c9b8:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68da      	ldr	r2, [r3, #12]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f022 0204 	bic.w	r2, r2, #4
 800c9c8:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f001 f818 	bl	800da08 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	2104      	movs	r1, #4
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f001 f811 	bl	800da08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a33      	ldr	r2, [pc, #204]	; (800cab8 <HAL_TIM_OnePulse_Stop_IT+0x118>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d018      	beq.n	800ca22 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a31      	ldr	r2, [pc, #196]	; (800cabc <HAL_TIM_OnePulse_Stop_IT+0x11c>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d013      	beq.n	800ca22 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a30      	ldr	r2, [pc, #192]	; (800cac0 <HAL_TIM_OnePulse_Stop_IT+0x120>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d00e      	beq.n	800ca22 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a2e      	ldr	r2, [pc, #184]	; (800cac4 <HAL_TIM_OnePulse_Stop_IT+0x124>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d009      	beq.n	800ca22 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a2d      	ldr	r2, [pc, #180]	; (800cac8 <HAL_TIM_OnePulse_Stop_IT+0x128>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d004      	beq.n	800ca22 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a2b      	ldr	r2, [pc, #172]	; (800cacc <HAL_TIM_OnePulse_Stop_IT+0x12c>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d101      	bne.n	800ca26 <HAL_TIM_OnePulse_Stop_IT+0x86>
 800ca22:	2301      	movs	r3, #1
 800ca24:	e000      	b.n	800ca28 <HAL_TIM_OnePulse_Stop_IT+0x88>
 800ca26:	2300      	movs	r3, #0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d017      	beq.n	800ca5c <HAL_TIM_OnePulse_Stop_IT+0xbc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6a1a      	ldr	r2, [r3, #32]
 800ca32:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca36:	4013      	ands	r3, r2
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10f      	bne.n	800ca5c <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6a1a      	ldr	r2, [r3, #32]
 800ca42:	f244 4344 	movw	r3, #17476	; 0x4444
 800ca46:	4013      	ands	r3, r2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d107      	bne.n	800ca5c <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6a1a      	ldr	r2, [r3, #32]
 800ca62:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca66:	4013      	ands	r3, r2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10f      	bne.n	800ca8c <HAL_TIM_OnePulse_Stop_IT+0xec>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6a1a      	ldr	r2, [r3, #32]
 800ca72:	f244 4344 	movw	r3, #17476	; 0x4444
 800ca76:	4013      	ands	r3, r2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d107      	bne.n	800ca8c <HAL_TIM_OnePulse_Stop_IT+0xec>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f022 0201 	bic.w	r2, r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	40012c00 	.word	0x40012c00
 800cabc:	40013400 	.word	0x40013400
 800cac0:	40014000 	.word	0x40014000
 800cac4:	40014400 	.word	0x40014400
 800cac8:	40014800 	.word	0x40014800
 800cacc:	40015000 	.word	0x40015000

0800cad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	f003 0302 	and.w	r3, r3, #2
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d122      	bne.n	800cb2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f003 0302 	and.w	r3, r3, #2
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d11b      	bne.n	800cb2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f06f 0202 	mvn.w	r2, #2
 800cafc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	f003 0303 	and.w	r3, r3, #3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d003      	beq.n	800cb1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 faec 	bl	800d0f0 <HAL_TIM_IC_CaptureCallback>
 800cb18:	e005      	b.n	800cb26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7f8 fe48 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 faef 	bl	800d104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	f003 0304 	and.w	r3, r3, #4
 800cb36:	2b04      	cmp	r3, #4
 800cb38:	d122      	bne.n	800cb80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	f003 0304 	and.w	r3, r3, #4
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d11b      	bne.n	800cb80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f06f 0204 	mvn.w	r2, #4
 800cb50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2202      	movs	r2, #2
 800cb56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d003      	beq.n	800cb6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fac2 	bl	800d0f0 <HAL_TIM_IC_CaptureCallback>
 800cb6c:	e005      	b.n	800cb7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7f8 fe1e 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fac5 	bl	800d104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	f003 0308 	and.w	r3, r3, #8
 800cb8a:	2b08      	cmp	r3, #8
 800cb8c:	d122      	bne.n	800cbd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f003 0308 	and.w	r3, r3, #8
 800cb98:	2b08      	cmp	r3, #8
 800cb9a:	d11b      	bne.n	800cbd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f06f 0208 	mvn.w	r2, #8
 800cba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2204      	movs	r2, #4
 800cbaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	f003 0303 	and.w	r3, r3, #3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fa98 	bl	800d0f0 <HAL_TIM_IC_CaptureCallback>
 800cbc0:	e005      	b.n	800cbce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7f8 fdf4 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fa9b 	bl	800d104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	f003 0310 	and.w	r3, r3, #16
 800cbde:	2b10      	cmp	r3, #16
 800cbe0:	d122      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f003 0310 	and.w	r3, r3, #16
 800cbec:	2b10      	cmp	r3, #16
 800cbee:	d11b      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f06f 0210 	mvn.w	r2, #16
 800cbf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2208      	movs	r2, #8
 800cbfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	69db      	ldr	r3, [r3, #28]
 800cc06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fa6e 	bl	800d0f0 <HAL_TIM_IC_CaptureCallback>
 800cc14:	e005      	b.n	800cc22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7f8 fdca 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fa71 	bl	800d104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d10e      	bne.n	800cc54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d107      	bne.n	800cc54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f06f 0201 	mvn.w	r2, #1
 800cc4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fa44 	bl	800d0dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc5e:	2b80      	cmp	r3, #128	; 0x80
 800cc60:	d10e      	bne.n	800cc80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc6c:	2b80      	cmp	r3, #128	; 0x80
 800cc6e:	d107      	bne.n	800cc80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 ff8a 	bl	800db94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc8e:	d10e      	bne.n	800ccae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc9a:	2b80      	cmp	r3, #128	; 0x80
 800cc9c:	d107      	bne.n	800ccae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 ff7d 	bl	800dba8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb8:	2b40      	cmp	r3, #64	; 0x40
 800ccba:	d10e      	bne.n	800ccda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc6:	2b40      	cmp	r3, #64	; 0x40
 800ccc8:	d107      	bne.n	800ccda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ccd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fa1f 	bl	800d118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	f003 0320 	and.w	r3, r3, #32
 800cce4:	2b20      	cmp	r3, #32
 800cce6:	d10e      	bne.n	800cd06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	f003 0320 	and.w	r3, r3, #32
 800ccf2:	2b20      	cmp	r3, #32
 800ccf4:	d107      	bne.n	800cd06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f06f 0220 	mvn.w	r2, #32
 800ccfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 ff3d 	bl	800db80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	691b      	ldr	r3, [r3, #16]
 800cd0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd14:	d10f      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd24:	d107      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 ff43 	bl	800dbbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd44:	d10f      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd54:	d107      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cd5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 ff35 	bl	800dbd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd74:	d10f      	bne.n	800cd96 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd84:	d107      	bne.n	800cd96 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 ff27 	bl	800dbe4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cda0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cda4:	d10f      	bne.n	800cdc6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdb4:	d107      	bne.n	800cdc6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cdbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 ff19 	bl	800dbf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdc6:	bf00      	nop
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d101      	bne.n	800cdee <HAL_TIM_OC_ConfigChannel+0x1e>
 800cdea:	2302      	movs	r3, #2
 800cdec:	e066      	b.n	800cebc <HAL_TIM_OC_ConfigChannel+0xec>
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b14      	cmp	r3, #20
 800cdfa:	d857      	bhi.n	800ceac <HAL_TIM_OC_ConfigChannel+0xdc>
 800cdfc:	a201      	add	r2, pc, #4	; (adr r2, 800ce04 <HAL_TIM_OC_ConfigChannel+0x34>)
 800cdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce02:	bf00      	nop
 800ce04:	0800ce59 	.word	0x0800ce59
 800ce08:	0800cead 	.word	0x0800cead
 800ce0c:	0800cead 	.word	0x0800cead
 800ce10:	0800cead 	.word	0x0800cead
 800ce14:	0800ce67 	.word	0x0800ce67
 800ce18:	0800cead 	.word	0x0800cead
 800ce1c:	0800cead 	.word	0x0800cead
 800ce20:	0800cead 	.word	0x0800cead
 800ce24:	0800ce75 	.word	0x0800ce75
 800ce28:	0800cead 	.word	0x0800cead
 800ce2c:	0800cead 	.word	0x0800cead
 800ce30:	0800cead 	.word	0x0800cead
 800ce34:	0800ce83 	.word	0x0800ce83
 800ce38:	0800cead 	.word	0x0800cead
 800ce3c:	0800cead 	.word	0x0800cead
 800ce40:	0800cead 	.word	0x0800cead
 800ce44:	0800ce91 	.word	0x0800ce91
 800ce48:	0800cead 	.word	0x0800cead
 800ce4c:	0800cead 	.word	0x0800cead
 800ce50:	0800cead 	.word	0x0800cead
 800ce54:	0800ce9f 	.word	0x0800ce9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68b9      	ldr	r1, [r7, #8]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 fa0c 	bl	800d27c <TIM_OC1_SetConfig>
      break;
 800ce64:	e025      	b.n	800ceb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68b9      	ldr	r1, [r7, #8]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 fa9f 	bl	800d3b0 <TIM_OC2_SetConfig>
      break;
 800ce72:	e01e      	b.n	800ceb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68b9      	ldr	r1, [r7, #8]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 fb2c 	bl	800d4d8 <TIM_OC3_SetConfig>
      break;
 800ce80:	e017      	b.n	800ceb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68b9      	ldr	r1, [r7, #8]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fbb7 	bl	800d5fc <TIM_OC4_SetConfig>
      break;
 800ce8e:	e010      	b.n	800ceb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68b9      	ldr	r1, [r7, #8]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fc44 	bl	800d724 <TIM_OC5_SetConfig>
      break;
 800ce9c:	e009      	b.n	800ceb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 fca7 	bl	800d7f8 <TIM_OC6_SetConfig>
      break;
 800ceaa:	e002      	b.n	800ceb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	75fb      	strb	r3, [r7, #23]
      break;
 800ceb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d101      	bne.n	800cee0 <HAL_TIM_ConfigClockSource+0x1c>
 800cedc:	2302      	movs	r3, #2
 800cede:	e0ee      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x1fa>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2202      	movs	r2, #2
 800ceec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cefe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cf02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a6b      	ldr	r2, [pc, #428]	; (800d0c8 <HAL_TIM_ConfigClockSource+0x204>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	f000 80b9 	beq.w	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cf20:	4a69      	ldr	r2, [pc, #420]	; (800d0c8 <HAL_TIM_ConfigClockSource+0x204>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	f200 80be 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf28:	4a68      	ldr	r2, [pc, #416]	; (800d0cc <HAL_TIM_ConfigClockSource+0x208>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	f000 80b1 	beq.w	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cf30:	4a66      	ldr	r2, [pc, #408]	; (800d0cc <HAL_TIM_ConfigClockSource+0x208>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	f200 80b6 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf38:	4a65      	ldr	r2, [pc, #404]	; (800d0d0 <HAL_TIM_ConfigClockSource+0x20c>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	f000 80a9 	beq.w	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cf40:	4a63      	ldr	r2, [pc, #396]	; (800d0d0 <HAL_TIM_ConfigClockSource+0x20c>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	f200 80ae 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf48:	4a62      	ldr	r2, [pc, #392]	; (800d0d4 <HAL_TIM_ConfigClockSource+0x210>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	f000 80a1 	beq.w	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cf50:	4a60      	ldr	r2, [pc, #384]	; (800d0d4 <HAL_TIM_ConfigClockSource+0x210>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	f200 80a6 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf58:	4a5f      	ldr	r2, [pc, #380]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x214>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	f000 8099 	beq.w	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cf60:	4a5d      	ldr	r2, [pc, #372]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x214>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	f200 809e 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf6c:	f000 8091 	beq.w	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cf70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf74:	f200 8096 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf7c:	f000 8089 	beq.w	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cf80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf84:	f200 808e 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf8c:	d03e      	beq.n	800d00c <HAL_TIM_ConfigClockSource+0x148>
 800cf8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf92:	f200 8087 	bhi.w	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cf96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf9a:	f000 8086 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1e6>
 800cf9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfa2:	d87f      	bhi.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfa4:	2b70      	cmp	r3, #112	; 0x70
 800cfa6:	d01a      	beq.n	800cfde <HAL_TIM_ConfigClockSource+0x11a>
 800cfa8:	2b70      	cmp	r3, #112	; 0x70
 800cfaa:	d87b      	bhi.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfac:	2b60      	cmp	r3, #96	; 0x60
 800cfae:	d050      	beq.n	800d052 <HAL_TIM_ConfigClockSource+0x18e>
 800cfb0:	2b60      	cmp	r3, #96	; 0x60
 800cfb2:	d877      	bhi.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfb4:	2b50      	cmp	r3, #80	; 0x50
 800cfb6:	d03c      	beq.n	800d032 <HAL_TIM_ConfigClockSource+0x16e>
 800cfb8:	2b50      	cmp	r3, #80	; 0x50
 800cfba:	d873      	bhi.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfbc:	2b40      	cmp	r3, #64	; 0x40
 800cfbe:	d058      	beq.n	800d072 <HAL_TIM_ConfigClockSource+0x1ae>
 800cfc0:	2b40      	cmp	r3, #64	; 0x40
 800cfc2:	d86f      	bhi.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfc4:	2b30      	cmp	r3, #48	; 0x30
 800cfc6:	d064      	beq.n	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfc8:	2b30      	cmp	r3, #48	; 0x30
 800cfca:	d86b      	bhi.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfcc:	2b20      	cmp	r3, #32
 800cfce:	d060      	beq.n	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfd0:	2b20      	cmp	r3, #32
 800cfd2:	d867      	bhi.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d05c      	beq.n	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfd8:	2b10      	cmp	r3, #16
 800cfda:	d05a      	beq.n	800d092 <HAL_TIM_ConfigClockSource+0x1ce>
 800cfdc:	e062      	b.n	800d0a4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	6899      	ldr	r1, [r3, #8]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	685a      	ldr	r2, [r3, #4]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	f000 fceb 	bl	800d9c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	609a      	str	r2, [r3, #8]
      break;
 800d00a:	e04f      	b.n	800d0ac <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6818      	ldr	r0, [r3, #0]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	6899      	ldr	r1, [r3, #8]
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	685a      	ldr	r2, [r3, #4]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	f000 fcd4 	bl	800d9c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689a      	ldr	r2, [r3, #8]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d02e:	609a      	str	r2, [r3, #8]
      break;
 800d030:	e03c      	b.n	800d0ac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6818      	ldr	r0, [r3, #0]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	6859      	ldr	r1, [r3, #4]
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	461a      	mov	r2, r3
 800d040:	f000 fc46 	bl	800d8d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2150      	movs	r1, #80	; 0x50
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 fc9f 	bl	800d98e <TIM_ITRx_SetConfig>
      break;
 800d050:	e02c      	b.n	800d0ac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6818      	ldr	r0, [r3, #0]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	6859      	ldr	r1, [r3, #4]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	461a      	mov	r2, r3
 800d060:	f000 fc65 	bl	800d92e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2160      	movs	r1, #96	; 0x60
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 fc8f 	bl	800d98e <TIM_ITRx_SetConfig>
      break;
 800d070:	e01c      	b.n	800d0ac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6818      	ldr	r0, [r3, #0]
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	6859      	ldr	r1, [r3, #4]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	461a      	mov	r2, r3
 800d080:	f000 fc26 	bl	800d8d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2140      	movs	r1, #64	; 0x40
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 fc7f 	bl	800d98e <TIM_ITRx_SetConfig>
      break;
 800d090:	e00c      	b.n	800d0ac <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4619      	mov	r1, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	f000 fc76 	bl	800d98e <TIM_ITRx_SetConfig>
      break;
 800d0a2:	e003      	b.n	800d0ac <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	73fb      	strb	r3, [r7, #15]
      break;
 800d0a8:	e000      	b.n	800d0ac <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800d0aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	00100070 	.word	0x00100070
 800d0cc:	00100050 	.word	0x00100050
 800d0d0:	00100040 	.word	0x00100040
 800d0d4:	00100030 	.word	0x00100030
 800d0d8:	00100020 	.word	0x00100020

0800d0dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d0e4:	bf00      	nop
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d120:	bf00      	nop
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a46      	ldr	r2, [pc, #280]	; (800d258 <TIM_Base_SetConfig+0x12c>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d017      	beq.n	800d174 <TIM_Base_SetConfig+0x48>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d14a:	d013      	beq.n	800d174 <TIM_Base_SetConfig+0x48>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a43      	ldr	r2, [pc, #268]	; (800d25c <TIM_Base_SetConfig+0x130>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d00f      	beq.n	800d174 <TIM_Base_SetConfig+0x48>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a42      	ldr	r2, [pc, #264]	; (800d260 <TIM_Base_SetConfig+0x134>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d00b      	beq.n	800d174 <TIM_Base_SetConfig+0x48>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4a41      	ldr	r2, [pc, #260]	; (800d264 <TIM_Base_SetConfig+0x138>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d007      	beq.n	800d174 <TIM_Base_SetConfig+0x48>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a40      	ldr	r2, [pc, #256]	; (800d268 <TIM_Base_SetConfig+0x13c>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d003      	beq.n	800d174 <TIM_Base_SetConfig+0x48>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a3f      	ldr	r2, [pc, #252]	; (800d26c <TIM_Base_SetConfig+0x140>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d108      	bne.n	800d186 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d17a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	4313      	orrs	r3, r2
 800d184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4a33      	ldr	r2, [pc, #204]	; (800d258 <TIM_Base_SetConfig+0x12c>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d023      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d194:	d01f      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a30      	ldr	r2, [pc, #192]	; (800d25c <TIM_Base_SetConfig+0x130>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d01b      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a2f      	ldr	r2, [pc, #188]	; (800d260 <TIM_Base_SetConfig+0x134>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d017      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a2e      	ldr	r2, [pc, #184]	; (800d264 <TIM_Base_SetConfig+0x138>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d013      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a2d      	ldr	r2, [pc, #180]	; (800d268 <TIM_Base_SetConfig+0x13c>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d00f      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a2d      	ldr	r2, [pc, #180]	; (800d270 <TIM_Base_SetConfig+0x144>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d00b      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a2c      	ldr	r2, [pc, #176]	; (800d274 <TIM_Base_SetConfig+0x148>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d007      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a2b      	ldr	r2, [pc, #172]	; (800d278 <TIM_Base_SetConfig+0x14c>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d003      	beq.n	800d1d6 <TIM_Base_SetConfig+0xaa>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a26      	ldr	r2, [pc, #152]	; (800d26c <TIM_Base_SetConfig+0x140>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d108      	bne.n	800d1e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	689a      	ldr	r2, [r3, #8]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a12      	ldr	r2, [pc, #72]	; (800d258 <TIM_Base_SetConfig+0x12c>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d013      	beq.n	800d23c <TIM_Base_SetConfig+0x110>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a14      	ldr	r2, [pc, #80]	; (800d268 <TIM_Base_SetConfig+0x13c>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d00f      	beq.n	800d23c <TIM_Base_SetConfig+0x110>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a14      	ldr	r2, [pc, #80]	; (800d270 <TIM_Base_SetConfig+0x144>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d00b      	beq.n	800d23c <TIM_Base_SetConfig+0x110>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a13      	ldr	r2, [pc, #76]	; (800d274 <TIM_Base_SetConfig+0x148>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d007      	beq.n	800d23c <TIM_Base_SetConfig+0x110>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a12      	ldr	r2, [pc, #72]	; (800d278 <TIM_Base_SetConfig+0x14c>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d003      	beq.n	800d23c <TIM_Base_SetConfig+0x110>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a0d      	ldr	r2, [pc, #52]	; (800d26c <TIM_Base_SetConfig+0x140>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d103      	bne.n	800d244 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	691a      	ldr	r2, [r3, #16]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	615a      	str	r2, [r3, #20]
}
 800d24a:	bf00      	nop
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	40012c00 	.word	0x40012c00
 800d25c:	40000400 	.word	0x40000400
 800d260:	40000800 	.word	0x40000800
 800d264:	40000c00 	.word	0x40000c00
 800d268:	40013400 	.word	0x40013400
 800d26c:	40015000 	.word	0x40015000
 800d270:	40014000 	.word	0x40014000
 800d274:	40014400 	.word	0x40014400
 800d278:	40014800 	.word	0x40014800

0800d27c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b087      	sub	sp, #28
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	f023 0201 	bic.w	r2, r3, #1
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a1b      	ldr	r3, [r3, #32]
 800d296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	f023 0302 	bic.w	r3, r3, #2
 800d2c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	697a      	ldr	r2, [r7, #20]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a30      	ldr	r2, [pc, #192]	; (800d398 <TIM_OC1_SetConfig+0x11c>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d013      	beq.n	800d304 <TIM_OC1_SetConfig+0x88>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a2f      	ldr	r2, [pc, #188]	; (800d39c <TIM_OC1_SetConfig+0x120>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d00f      	beq.n	800d304 <TIM_OC1_SetConfig+0x88>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a2e      	ldr	r2, [pc, #184]	; (800d3a0 <TIM_OC1_SetConfig+0x124>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d00b      	beq.n	800d304 <TIM_OC1_SetConfig+0x88>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a2d      	ldr	r2, [pc, #180]	; (800d3a4 <TIM_OC1_SetConfig+0x128>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d007      	beq.n	800d304 <TIM_OC1_SetConfig+0x88>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a2c      	ldr	r2, [pc, #176]	; (800d3a8 <TIM_OC1_SetConfig+0x12c>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d003      	beq.n	800d304 <TIM_OC1_SetConfig+0x88>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a2b      	ldr	r2, [pc, #172]	; (800d3ac <TIM_OC1_SetConfig+0x130>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d10c      	bne.n	800d31e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	f023 0308 	bic.w	r3, r3, #8
 800d30a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	4313      	orrs	r3, r2
 800d314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f023 0304 	bic.w	r3, r3, #4
 800d31c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a1d      	ldr	r2, [pc, #116]	; (800d398 <TIM_OC1_SetConfig+0x11c>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d013      	beq.n	800d34e <TIM_OC1_SetConfig+0xd2>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a1c      	ldr	r2, [pc, #112]	; (800d39c <TIM_OC1_SetConfig+0x120>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d00f      	beq.n	800d34e <TIM_OC1_SetConfig+0xd2>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a1b      	ldr	r2, [pc, #108]	; (800d3a0 <TIM_OC1_SetConfig+0x124>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d00b      	beq.n	800d34e <TIM_OC1_SetConfig+0xd2>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a1a      	ldr	r2, [pc, #104]	; (800d3a4 <TIM_OC1_SetConfig+0x128>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d007      	beq.n	800d34e <TIM_OC1_SetConfig+0xd2>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a19      	ldr	r2, [pc, #100]	; (800d3a8 <TIM_OC1_SetConfig+0x12c>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d003      	beq.n	800d34e <TIM_OC1_SetConfig+0xd2>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a18      	ldr	r2, [pc, #96]	; (800d3ac <TIM_OC1_SetConfig+0x130>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d111      	bne.n	800d372 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d35c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	695b      	ldr	r3, [r3, #20]
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	4313      	orrs	r3, r2
 800d366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	4313      	orrs	r3, r2
 800d370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	621a      	str	r2, [r3, #32]
}
 800d38c:	bf00      	nop
 800d38e:	371c      	adds	r7, #28
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	40012c00 	.word	0x40012c00
 800d39c:	40013400 	.word	0x40013400
 800d3a0:	40014000 	.word	0x40014000
 800d3a4:	40014400 	.word	0x40014400
 800d3a8:	40014800 	.word	0x40014800
 800d3ac:	40015000 	.word	0x40015000

0800d3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b087      	sub	sp, #28
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a1b      	ldr	r3, [r3, #32]
 800d3be:	f023 0210 	bic.w	r2, r3, #16
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	021b      	lsls	r3, r3, #8
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f023 0320 	bic.w	r3, r3, #32
 800d3fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	011b      	lsls	r3, r3, #4
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	4313      	orrs	r3, r2
 800d40a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a2c      	ldr	r2, [pc, #176]	; (800d4c0 <TIM_OC2_SetConfig+0x110>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d007      	beq.n	800d424 <TIM_OC2_SetConfig+0x74>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a2b      	ldr	r2, [pc, #172]	; (800d4c4 <TIM_OC2_SetConfig+0x114>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d003      	beq.n	800d424 <TIM_OC2_SetConfig+0x74>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a2a      	ldr	r2, [pc, #168]	; (800d4c8 <TIM_OC2_SetConfig+0x118>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d10d      	bne.n	800d440 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d42a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	011b      	lsls	r3, r3, #4
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	4313      	orrs	r3, r2
 800d436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d43e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a1f      	ldr	r2, [pc, #124]	; (800d4c0 <TIM_OC2_SetConfig+0x110>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d013      	beq.n	800d470 <TIM_OC2_SetConfig+0xc0>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a1e      	ldr	r2, [pc, #120]	; (800d4c4 <TIM_OC2_SetConfig+0x114>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d00f      	beq.n	800d470 <TIM_OC2_SetConfig+0xc0>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a1e      	ldr	r2, [pc, #120]	; (800d4cc <TIM_OC2_SetConfig+0x11c>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d00b      	beq.n	800d470 <TIM_OC2_SetConfig+0xc0>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a1d      	ldr	r2, [pc, #116]	; (800d4d0 <TIM_OC2_SetConfig+0x120>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d007      	beq.n	800d470 <TIM_OC2_SetConfig+0xc0>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a1c      	ldr	r2, [pc, #112]	; (800d4d4 <TIM_OC2_SetConfig+0x124>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d003      	beq.n	800d470 <TIM_OC2_SetConfig+0xc0>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a17      	ldr	r2, [pc, #92]	; (800d4c8 <TIM_OC2_SetConfig+0x118>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d113      	bne.n	800d498 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d47e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	695b      	ldr	r3, [r3, #20]
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	4313      	orrs	r3, r2
 800d48a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	699b      	ldr	r3, [r3, #24]
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	4313      	orrs	r3, r2
 800d496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	621a      	str	r2, [r3, #32]
}
 800d4b2:	bf00      	nop
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	40012c00 	.word	0x40012c00
 800d4c4:	40013400 	.word	0x40013400
 800d4c8:	40015000 	.word	0x40015000
 800d4cc:	40014000 	.word	0x40014000
 800d4d0:	40014400 	.word	0x40014400
 800d4d4:	40014800 	.word	0x40014800

0800d4d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	69db      	ldr	r3, [r3, #28]
 800d4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f023 0303 	bic.w	r3, r3, #3
 800d512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	021b      	lsls	r3, r3, #8
 800d52c:	697a      	ldr	r2, [r7, #20]
 800d52e:	4313      	orrs	r3, r2
 800d530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a2b      	ldr	r2, [pc, #172]	; (800d5e4 <TIM_OC3_SetConfig+0x10c>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d007      	beq.n	800d54a <TIM_OC3_SetConfig+0x72>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a2a      	ldr	r2, [pc, #168]	; (800d5e8 <TIM_OC3_SetConfig+0x110>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d003      	beq.n	800d54a <TIM_OC3_SetConfig+0x72>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a29      	ldr	r2, [pc, #164]	; (800d5ec <TIM_OC3_SetConfig+0x114>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d10d      	bne.n	800d566 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	021b      	lsls	r3, r3, #8
 800d558:	697a      	ldr	r2, [r7, #20]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a1e      	ldr	r2, [pc, #120]	; (800d5e4 <TIM_OC3_SetConfig+0x10c>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d013      	beq.n	800d596 <TIM_OC3_SetConfig+0xbe>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a1d      	ldr	r2, [pc, #116]	; (800d5e8 <TIM_OC3_SetConfig+0x110>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d00f      	beq.n	800d596 <TIM_OC3_SetConfig+0xbe>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4a1d      	ldr	r2, [pc, #116]	; (800d5f0 <TIM_OC3_SetConfig+0x118>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d00b      	beq.n	800d596 <TIM_OC3_SetConfig+0xbe>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a1c      	ldr	r2, [pc, #112]	; (800d5f4 <TIM_OC3_SetConfig+0x11c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d007      	beq.n	800d596 <TIM_OC3_SetConfig+0xbe>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4a1b      	ldr	r2, [pc, #108]	; (800d5f8 <TIM_OC3_SetConfig+0x120>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d003      	beq.n	800d596 <TIM_OC3_SetConfig+0xbe>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a16      	ldr	r2, [pc, #88]	; (800d5ec <TIM_OC3_SetConfig+0x114>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d113      	bne.n	800d5be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d59c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d5a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	695b      	ldr	r3, [r3, #20]
 800d5aa:	011b      	lsls	r3, r3, #4
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	011b      	lsls	r3, r3, #4
 800d5b8:	693a      	ldr	r2, [r7, #16]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	685a      	ldr	r2, [r3, #4]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	621a      	str	r2, [r3, #32]
}
 800d5d8:	bf00      	nop
 800d5da:	371c      	adds	r7, #28
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr
 800d5e4:	40012c00 	.word	0x40012c00
 800d5e8:	40013400 	.word	0x40013400
 800d5ec:	40015000 	.word	0x40015000
 800d5f0:	40014000 	.word	0x40014000
 800d5f4:	40014400 	.word	0x40014400
 800d5f8:	40014800 	.word	0x40014800

0800d5fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b087      	sub	sp, #28
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a1b      	ldr	r3, [r3, #32]
 800d616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	69db      	ldr	r3, [r3, #28]
 800d622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d62a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d62e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	021b      	lsls	r3, r3, #8
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	4313      	orrs	r3, r2
 800d642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d64a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	031b      	lsls	r3, r3, #12
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	4313      	orrs	r3, r2
 800d656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a2c      	ldr	r2, [pc, #176]	; (800d70c <TIM_OC4_SetConfig+0x110>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d007      	beq.n	800d670 <TIM_OC4_SetConfig+0x74>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a2b      	ldr	r2, [pc, #172]	; (800d710 <TIM_OC4_SetConfig+0x114>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d003      	beq.n	800d670 <TIM_OC4_SetConfig+0x74>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a2a      	ldr	r2, [pc, #168]	; (800d714 <TIM_OC4_SetConfig+0x118>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d10d      	bne.n	800d68c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	031b      	lsls	r3, r3, #12
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	4313      	orrs	r3, r2
 800d682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d68a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a1f      	ldr	r2, [pc, #124]	; (800d70c <TIM_OC4_SetConfig+0x110>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d013      	beq.n	800d6bc <TIM_OC4_SetConfig+0xc0>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4a1e      	ldr	r2, [pc, #120]	; (800d710 <TIM_OC4_SetConfig+0x114>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d00f      	beq.n	800d6bc <TIM_OC4_SetConfig+0xc0>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a1e      	ldr	r2, [pc, #120]	; (800d718 <TIM_OC4_SetConfig+0x11c>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d00b      	beq.n	800d6bc <TIM_OC4_SetConfig+0xc0>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a1d      	ldr	r2, [pc, #116]	; (800d71c <TIM_OC4_SetConfig+0x120>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d007      	beq.n	800d6bc <TIM_OC4_SetConfig+0xc0>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a1c      	ldr	r2, [pc, #112]	; (800d720 <TIM_OC4_SetConfig+0x124>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d003      	beq.n	800d6bc <TIM_OC4_SetConfig+0xc0>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a17      	ldr	r2, [pc, #92]	; (800d714 <TIM_OC4_SetConfig+0x118>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d113      	bne.n	800d6e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	019b      	lsls	r3, r3, #6
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	699b      	ldr	r3, [r3, #24]
 800d6dc:	019b      	lsls	r3, r3, #6
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	697a      	ldr	r2, [r7, #20]
 800d6fc:	621a      	str	r2, [r3, #32]
}
 800d6fe:	bf00      	nop
 800d700:	371c      	adds	r7, #28
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	40012c00 	.word	0x40012c00
 800d710:	40013400 	.word	0x40013400
 800d714:	40015000 	.word	0x40015000
 800d718:	40014000 	.word	0x40014000
 800d71c:	40014400 	.word	0x40014400
 800d720:	40014800 	.word	0x40014800

0800d724 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d724:	b480      	push	{r7}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a1b      	ldr	r3, [r3, #32]
 800d73e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	4313      	orrs	r3, r2
 800d760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d768:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	041b      	lsls	r3, r3, #16
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	4313      	orrs	r3, r2
 800d774:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a19      	ldr	r2, [pc, #100]	; (800d7e0 <TIM_OC5_SetConfig+0xbc>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d013      	beq.n	800d7a6 <TIM_OC5_SetConfig+0x82>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a18      	ldr	r2, [pc, #96]	; (800d7e4 <TIM_OC5_SetConfig+0xc0>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d00f      	beq.n	800d7a6 <TIM_OC5_SetConfig+0x82>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4a17      	ldr	r2, [pc, #92]	; (800d7e8 <TIM_OC5_SetConfig+0xc4>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d00b      	beq.n	800d7a6 <TIM_OC5_SetConfig+0x82>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a16      	ldr	r2, [pc, #88]	; (800d7ec <TIM_OC5_SetConfig+0xc8>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d007      	beq.n	800d7a6 <TIM_OC5_SetConfig+0x82>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a15      	ldr	r2, [pc, #84]	; (800d7f0 <TIM_OC5_SetConfig+0xcc>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d003      	beq.n	800d7a6 <TIM_OC5_SetConfig+0x82>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a14      	ldr	r2, [pc, #80]	; (800d7f4 <TIM_OC5_SetConfig+0xd0>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d109      	bne.n	800d7ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	695b      	ldr	r3, [r3, #20]
 800d7b2:	021b      	lsls	r3, r3, #8
 800d7b4:	697a      	ldr	r2, [r7, #20]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	693a      	ldr	r2, [r7, #16]
 800d7d2:	621a      	str	r2, [r3, #32]
}
 800d7d4:	bf00      	nop
 800d7d6:	371c      	adds	r7, #28
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	40012c00 	.word	0x40012c00
 800d7e4:	40013400 	.word	0x40013400
 800d7e8:	40014000 	.word	0x40014000
 800d7ec:	40014400 	.word	0x40014400
 800d7f0:	40014800 	.word	0x40014800
 800d7f4:	40015000 	.word	0x40015000

0800d7f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b087      	sub	sp, #28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	021b      	lsls	r3, r3, #8
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	4313      	orrs	r3, r2
 800d836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d83e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	689b      	ldr	r3, [r3, #8]
 800d844:	051b      	lsls	r3, r3, #20
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	4313      	orrs	r3, r2
 800d84a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a1a      	ldr	r2, [pc, #104]	; (800d8b8 <TIM_OC6_SetConfig+0xc0>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d013      	beq.n	800d87c <TIM_OC6_SetConfig+0x84>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a19      	ldr	r2, [pc, #100]	; (800d8bc <TIM_OC6_SetConfig+0xc4>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d00f      	beq.n	800d87c <TIM_OC6_SetConfig+0x84>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a18      	ldr	r2, [pc, #96]	; (800d8c0 <TIM_OC6_SetConfig+0xc8>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d00b      	beq.n	800d87c <TIM_OC6_SetConfig+0x84>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a17      	ldr	r2, [pc, #92]	; (800d8c4 <TIM_OC6_SetConfig+0xcc>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d007      	beq.n	800d87c <TIM_OC6_SetConfig+0x84>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a16      	ldr	r2, [pc, #88]	; (800d8c8 <TIM_OC6_SetConfig+0xd0>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d003      	beq.n	800d87c <TIM_OC6_SetConfig+0x84>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a15      	ldr	r2, [pc, #84]	; (800d8cc <TIM_OC6_SetConfig+0xd4>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d109      	bne.n	800d890 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	029b      	lsls	r3, r3, #10
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	685a      	ldr	r2, [r3, #4]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	621a      	str	r2, [r3, #32]
}
 800d8aa:	bf00      	nop
 800d8ac:	371c      	adds	r7, #28
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	40012c00 	.word	0x40012c00
 800d8bc:	40013400 	.word	0x40013400
 800d8c0:	40014000 	.word	0x40014000
 800d8c4:	40014400 	.word	0x40014400
 800d8c8:	40014800 	.word	0x40014800
 800d8cc:	40015000 	.word	0x40015000

0800d8d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6a1b      	ldr	r3, [r3, #32]
 800d8e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	f023 0201 	bic.w	r2, r3, #1
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	4313      	orrs	r3, r2
 800d904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f023 030a 	bic.w	r3, r3, #10
 800d90c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	4313      	orrs	r3, r2
 800d914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	621a      	str	r2, [r3, #32]
}
 800d922:	bf00      	nop
 800d924:	371c      	adds	r7, #28
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d92e:	b480      	push	{r7}
 800d930:	b087      	sub	sp, #28
 800d932:	af00      	add	r7, sp, #0
 800d934:	60f8      	str	r0, [r7, #12]
 800d936:	60b9      	str	r1, [r7, #8]
 800d938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	f023 0210 	bic.w	r2, r3, #16
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6a1b      	ldr	r3, [r3, #32]
 800d950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	031b      	lsls	r3, r3, #12
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	4313      	orrs	r3, r2
 800d962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d96a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	011b      	lsls	r3, r3, #4
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	4313      	orrs	r3, r2
 800d974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	621a      	str	r2, [r3, #32]
}
 800d982:	bf00      	nop
 800d984:	371c      	adds	r7, #28
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr

0800d98e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d98e:	b480      	push	{r7}
 800d990:	b085      	sub	sp, #20
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
 800d996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d9a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	f043 0307 	orr.w	r3, r3, #7
 800d9b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	609a      	str	r2, [r3, #8]
}
 800d9bc:	bf00      	nop
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
 800d9d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	021a      	lsls	r2, r3, #8
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	697a      	ldr	r2, [r7, #20]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	609a      	str	r2, [r3, #8]
}
 800d9fc:	bf00      	nop
 800d9fe:	371c      	adds	r7, #28
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da08:	b480      	push	{r7}
 800da0a:	b087      	sub	sp, #28
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	f003 031f 	and.w	r3, r3, #31
 800da1a:	2201      	movs	r2, #1
 800da1c:	fa02 f303 	lsl.w	r3, r2, r3
 800da20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6a1a      	ldr	r2, [r3, #32]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	43db      	mvns	r3, r3
 800da2a:	401a      	ands	r2, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6a1a      	ldr	r2, [r3, #32]
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f003 031f 	and.w	r3, r3, #31
 800da3a:	6879      	ldr	r1, [r7, #4]
 800da3c:	fa01 f303 	lsl.w	r3, r1, r3
 800da40:	431a      	orrs	r2, r3
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	621a      	str	r2, [r3, #32]
}
 800da46:	bf00      	nop
 800da48:	371c      	adds	r7, #28
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
	...

0800da54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da64:	2b01      	cmp	r3, #1
 800da66:	d101      	bne.n	800da6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da68:	2302      	movs	r3, #2
 800da6a:	e074      	b.n	800db56 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a34      	ldr	r2, [pc, #208]	; (800db64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d009      	beq.n	800daaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a33      	ldr	r2, [pc, #204]	; (800db68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d004      	beq.n	800daaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a31      	ldr	r2, [pc, #196]	; (800db6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d108      	bne.n	800dabc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dab0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	4313      	orrs	r3, r2
 800daba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800dac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	4313      	orrs	r3, r2
 800dad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a21      	ldr	r2, [pc, #132]	; (800db64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d022      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daec:	d01d      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a1f      	ldr	r2, [pc, #124]	; (800db70 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d018      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a1d      	ldr	r2, [pc, #116]	; (800db74 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d013      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a1c      	ldr	r2, [pc, #112]	; (800db78 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d00e      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a15      	ldr	r2, [pc, #84]	; (800db68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d009      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a18      	ldr	r2, [pc, #96]	; (800db7c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d004      	beq.n	800db2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a11      	ldr	r2, [pc, #68]	; (800db6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d10c      	bne.n	800db44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	68ba      	ldr	r2, [r7, #8]
 800db38:	4313      	orrs	r3, r2
 800db3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	40012c00 	.word	0x40012c00
 800db68:	40013400 	.word	0x40013400
 800db6c:	40015000 	.word	0x40015000
 800db70:	40000400 	.word	0x40000400
 800db74:	40000800 	.word	0x40000800
 800db78:	40000c00 	.word	0x40000c00
 800db7c:	40014000 	.word	0x40014000

0800db80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db9c:	bf00      	nop
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbb0:	bf00      	nop
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dbd8:	bf00      	nop
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dc00:	bf00      	nop
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b087      	sub	sp, #28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	6812      	ldr	r2, [r2, #0]
 800dc24:	f023 0101 	bic.w	r1, r3, #1
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	2b08      	cmp	r3, #8
 800dc34:	d102      	bne.n	800dc3c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800dc36:	2340      	movs	r3, #64	; 0x40
 800dc38:	617b      	str	r3, [r7, #20]
 800dc3a:	e001      	b.n	800dc40 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800dc4c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800dc52:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800dc58:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800dc5e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800dc64:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800dc6a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800dc70:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800dc76:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800dc7c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800dc82:	4313      	orrs	r3, r2
 800dc84:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc9e:	693a      	ldr	r2, [r7, #16]
 800dca0:	4313      	orrs	r3, r2
 800dca2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800dcae:	4b3d      	ldr	r3, [pc, #244]	; (800dda4 <FMC_NORSRAM_Init+0x198>)
 800dcb0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcb8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dcc0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800dcc8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800dcd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	43db      	mvns	r3, r3
 800dce0:	ea02 0103 	and.w	r1, r2, r3
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	4319      	orrs	r1, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcfa:	d10c      	bne.n	800dd16 <FMC_NORSRAM_Init+0x10a>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d008      	beq.n	800dd16 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd10:	431a      	orrs	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd26:	431a      	orrs	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d12f      	bne.n	800dd96 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a1b      	ldr	r3, [r3, #32]
 800dd3a:	0c1b      	lsrs	r3, r3, #16
 800dd3c:	041b      	lsls	r3, r3, #16
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800dd42:	431a      	orrs	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b04      	cmp	r3, #4
 800dd4e:	d014      	beq.n	800dd7a <FMC_NORSRAM_Init+0x16e>
 800dd50:	2b04      	cmp	r3, #4
 800dd52:	d819      	bhi.n	800dd88 <FMC_NORSRAM_Init+0x17c>
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <FMC_NORSRAM_Init+0x152>
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	d007      	beq.n	800dd6c <FMC_NORSRAM_Init+0x160>
 800dd5c:	e014      	b.n	800dd88 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	621a      	str	r2, [r3, #32]
        break;
 800dd6a:	e014      	b.n	800dd96 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a1b      	ldr	r3, [r3, #32]
 800dd70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	621a      	str	r2, [r3, #32]
        break;
 800dd78:	e00d      	b.n	800dd96 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a1b      	ldr	r3, [r3, #32]
 800dd7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	621a      	str	r2, [r3, #32]
        break;
 800dd86:	e006      	b.n	800dd96 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a1b      	ldr	r3, [r3, #32]
 800dd8c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	621a      	str	r2, [r3, #32]
        break;
 800dd94:	bf00      	nop
    }
  }

  return HAL_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	371c      	adds	r7, #28
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	0008fb7f 	.word	0x0008fb7f

0800dda8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b087      	sub	sp, #28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	011b      	lsls	r3, r3, #4
 800ddc8:	431a      	orrs	r2, r3
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	021b      	lsls	r3, r3, #8
 800ddd0:	431a      	orrs	r2, r3
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	079b      	lsls	r3, r3, #30
 800ddd8:	431a      	orrs	r2, r3
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	691b      	ldr	r3, [r3, #16]
 800ddde:	041b      	lsls	r3, r3, #16
 800dde0:	431a      	orrs	r2, r3
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	3b01      	subs	r3, #1
 800dde8:	051b      	lsls	r3, r3, #20
 800ddea:	431a      	orrs	r2, r3
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	3b02      	subs	r3, #2
 800ddf2:	061b      	lsls	r3, r3, #24
 800ddf4:	ea42 0103 	orr.w	r1, r2, r3
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	3201      	adds	r2, #1
 800de00:	4319      	orrs	r1, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de14:	d113      	bne.n	800de3e <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800de1e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	695b      	ldr	r3, [r3, #20]
 800de24:	3b01      	subs	r3, #1
 800de26:	051b      	lsls	r3, r3, #20
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	431a      	orrs	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	371c      	adds	r7, #28
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de60:	d121      	bne.n	800dea6 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de6a:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	6819      	ldr	r1, [r3, #0]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	011b      	lsls	r3, r3, #4
 800de78:	4319      	orrs	r1, r3
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	021b      	lsls	r3, r3, #8
 800de80:	4319      	orrs	r1, r3
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	079b      	lsls	r3, r3, #30
 800de88:	4319      	orrs	r1, r3
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	4319      	orrs	r1, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	041b      	lsls	r3, r3, #16
 800de96:	430b      	orrs	r3, r1
 800de98:	ea42 0103 	orr.w	r1, r2, r3
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800dea4:	e005      	b.n	800deb2 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800deae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <setpixel>:
#include "framebuf.h"

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

void setpixel(const tFramebuf *fb, unsigned int x, unsigned int y, uint32_t col) {
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	603b      	str	r3, [r7, #0]
	((uint16_t *)fb->buf)[x + y * fb->stride] = col;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	891b      	ldrh	r3, [r3, #8]
 800ded6:	4619      	mov	r1, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	fb03 f101 	mul.w	r1, r3, r1
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	440b      	add	r3, r1
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	4413      	add	r3, r2
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	b292      	uxth	r2, r2
 800deea:	801a      	strh	r2, [r3, #0]
}
 800deec:	bf00      	nop
 800deee:	3714      	adds	r7, #20
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <setpixel_checked>:

void setpixel_checked(const tFramebuf *fb, int x, int y, int col, int mask) {
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	603b      	str	r3, [r7, #0]
    if (mask && 0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d017      	beq.n	800df3c <setpixel_checked+0x44>
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	db14      	blt.n	800df3c <setpixel_checked+0x44>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	889b      	ldrh	r3, [r3, #4]
 800df16:	461a      	mov	r2, r3
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	4293      	cmp	r3, r2
 800df1c:	da0e      	bge.n	800df3c <setpixel_checked+0x44>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2b00      	cmp	r3, #0
 800df22:	db0b      	blt.n	800df3c <setpixel_checked+0x44>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	88db      	ldrh	r3, [r3, #6]
 800df28:	461a      	mov	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	da05      	bge.n	800df3c <setpixel_checked+0x44>
        setpixel(fb, x, y, col);
 800df30:	68b9      	ldr	r1, [r7, #8]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	68f8      	ldr	r0, [r7, #12]
 800df38:	f7ff ffc2 	bl	800dec0 <setpixel>
    }
}
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <fill_rect>:

uint32_t getpixel(const tFramebuf *fb, unsigned int x, unsigned int y) {
	return ((uint16_t *)fb->buf)[x + y * fb->stride];
}

void fill_rect(const tFramebuf *fb, int x, int y, int w, int h, uint32_t col) {
 800df44:	b480      	push	{r7}
 800df46:	b089      	sub	sp, #36	; 0x24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	603b      	str	r3, [r7, #0]
    if (h < 1 || w < 1 || x + w <= 0 || y + h <= 0 || y >= fb->height || x >= fb->width) {
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	2b00      	cmp	r3, #0
 800df56:	dd66      	ble.n	800e026 <fill_rect+0xe2>
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dd63      	ble.n	800e026 <fill_rect+0xe2>
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	4413      	add	r3, r2
 800df64:	2b00      	cmp	r3, #0
 800df66:	dd5e      	ble.n	800e026 <fill_rect+0xe2>
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6c:	4413      	add	r3, r2
 800df6e:	2b00      	cmp	r3, #0
 800df70:	dd59      	ble.n	800e026 <fill_rect+0xe2>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	88db      	ldrh	r3, [r3, #6]
 800df76:	461a      	mov	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4293      	cmp	r3, r2
 800df7c:	da53      	bge.n	800e026 <fill_rect+0xe2>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	889b      	ldrh	r3, [r3, #4]
 800df82:	461a      	mov	r2, r3
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	4293      	cmp	r3, r2
 800df88:	da4d      	bge.n	800e026 <fill_rect+0xe2>
        // No operation needed.
        return;
    }

    // clip to the framebuffer
    int xend = MIN(fb->width, x + w);
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	4413      	add	r3, r2
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	8892      	ldrh	r2, [r2, #4]
 800df94:	4293      	cmp	r3, r2
 800df96:	bfa8      	it	ge
 800df98:	4613      	movge	r3, r2
 800df9a:	617b      	str	r3, [r7, #20]
    int yend = MIN(fb->height, y + h);
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	4413      	add	r3, r2
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	88d2      	ldrh	r2, [r2, #6]
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	bfa8      	it	ge
 800dfaa:	4613      	movge	r3, r2
 800dfac:	613b      	str	r3, [r7, #16]
    x = MAX(x, 0);
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dfb4:	60bb      	str	r3, [r7, #8]
    y = MAX(y, 0);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dfbc:	607b      	str	r3, [r7, #4]

    w = xend - x;
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	603b      	str	r3, [r7, #0]
    h = yend - y;
 800dfc6:	693a      	ldr	r2, [r7, #16]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	1ad3      	subs	r3, r2, r3
 800dfcc:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *b = &((uint16_t *)fb->buf)[x + y * fb->stride];
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	891b      	ldrh	r3, [r3, #8]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	fb03 f101 	mul.w	r1, r3, r1
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	440b      	add	r3, r1
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	4413      	add	r3, r2
 800dfe6:	61fb      	str	r3, [r7, #28]
    while (h--){
 800dfe8:	e017      	b.n	800e01a <fill_rect+0xd6>
    	for (unsigned int ww = w; ww; --ww) {
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	61bb      	str	r3, [r7, #24]
 800dfee:	e008      	b.n	800e002 <fill_rect+0xbe>
            *b++ = col;
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	1c9a      	adds	r2, r3, #2
 800dff4:	61fa      	str	r2, [r7, #28]
 800dff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dff8:	b292      	uxth	r2, r2
 800dffa:	801a      	strh	r2, [r3, #0]
    	for (unsigned int ww = w; ww; --ww) {
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	3b01      	subs	r3, #1
 800e000:	61bb      	str	r3, [r7, #24]
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1f3      	bne.n	800dff0 <fill_rect+0xac>
        }
        b += fb->stride - w;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	891b      	ldrh	r3, [r3, #8]
 800e00c:	461a      	mov	r2, r3
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	69fa      	ldr	r2, [r7, #28]
 800e016:	4413      	add	r3, r2
 800e018:	61fb      	str	r3, [r7, #28]
    while (h--){
 800e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01c:	1e5a      	subs	r2, r3, #1
 800e01e:	62ba      	str	r2, [r7, #40]	; 0x28
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1e2      	bne.n	800dfea <fill_rect+0xa6>
 800e024:	e000      	b.n	800e028 <fill_rect+0xe4>
        return;
 800e026:	bf00      	nop
    }
}
 800e028:	3724      	adds	r7, #36	; 0x24
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <framebuf_init>:

void framebuf_init(tFramebuf *fb, uint16_t width, uint16_t height, char *buf ) {
 800e032:	b480      	push	{r7}
 800e034:	b085      	sub	sp, #20
 800e036:	af00      	add	r7, sp, #0
 800e038:	60f8      	str	r0, [r7, #12]
 800e03a:	607b      	str	r3, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	817b      	strh	r3, [r7, #10]
 800e040:	4613      	mov	r3, r2
 800e042:	813b      	strh	r3, [r7, #8]
    fb->width = width;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	897a      	ldrh	r2, [r7, #10]
 800e048:	809a      	strh	r2, [r3, #4]
    fb->height = height;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	893a      	ldrh	r2, [r7, #8]
 800e04e:	80da      	strh	r2, [r3, #6]
	fb->buf = buf;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	601a      	str	r2, [r3, #0]
	fb->stride = fb->width;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	889a      	ldrh	r2, [r3, #4]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	811a      	strh	r2, [r3, #8]
}
 800e05e:	bf00      	nop
 800e060:	3714      	adds	r7, #20
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <framebuf_fill>:

void framebuf_fill( const tFramebuf *fb, uint32_t col ) {
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b084      	sub	sp, #16
 800e06e:	af02      	add	r7, sp, #8
 800e070:	6078      	str	r0, [r7, #4]
 800e072:	6039      	str	r1, [r7, #0]
    fill_rect( fb, 0, 0, fb->width, fb->height, col);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	889b      	ldrh	r3, [r3, #4]
 800e078:	4619      	mov	r1, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	88db      	ldrh	r3, [r3, #6]
 800e07e:	461a      	mov	r2, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	9301      	str	r3, [sp, #4]
 800e084:	9200      	str	r2, [sp, #0]
 800e086:	460b      	mov	r3, r1
 800e088:	2200      	movs	r2, #0
 800e08a:	2100      	movs	r1, #0
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff ff59 	bl	800df44 <fill_rect>
}
 800e092:	bf00      	nop
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <framebuf_fill_rect>:

void framebuf_fill_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b086      	sub	sp, #24
 800e09e:	af02      	add	r7, sp, #8
 800e0a0:	60f8      	str	r0, [r7, #12]
 800e0a2:	60b9      	str	r1, [r7, #8]
 800e0a4:	607a      	str	r2, [r7, #4]
 800e0a6:	603b      	str	r3, [r7, #0]
    fill_rect( fb, x, y, w, h, col );
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	9301      	str	r3, [sp, #4]
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	68b9      	ldr	r1, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff ff44 	bl	800df44 <fill_rect>
}
 800e0bc:	bf00      	nop
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <framebuf_pixel>:

void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	607a      	str	r2, [r7, #4]
 800e0d0:	603b      	str	r3, [r7, #0]
    if (0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	db14      	blt.n	800e102 <framebuf_pixel+0x3e>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	889b      	ldrh	r3, [r3, #4]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	da0e      	bge.n	800e102 <framebuf_pixel+0x3e>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	db0b      	blt.n	800e102 <framebuf_pixel+0x3e>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	88db      	ldrh	r3, [r3, #6]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	da05      	bge.n	800e102 <framebuf_pixel+0x3e>
		setpixel( fb, x, y,  col );
 800e0f6:	68b9      	ldr	r1, [r7, #8]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f7ff fedf 	bl	800dec0 <setpixel>
    }
}
 800e102:	bf00      	nop
 800e104:	3710      	adds	r7, #16
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <framebuf_hline>:

void framebuf_hline( const tFramebuf *fb, int x, int y, int w, uint32_t col ) {
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b086      	sub	sp, #24
 800e10e:	af02      	add	r7, sp, #8
 800e110:	60f8      	str	r0, [r7, #12]
 800e112:	60b9      	str	r1, [r7, #8]
 800e114:	607a      	str	r2, [r7, #4]
 800e116:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, w, 1, col );
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	2301      	movs	r3, #1
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	68b9      	ldr	r1, [r7, #8]
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f7ff ff0c 	bl	800df44 <fill_rect>
}
 800e12c:	bf00      	nop
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <framebuf_vline>:

void framebuf_vline( const tFramebuf *fb, int x, int y, int h, uint32_t col ) {
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af02      	add	r7, sp, #8
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
 800e140:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, 1, h, col );
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	9301      	str	r3, [sp, #4]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	2301      	movs	r3, #1
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	68b9      	ldr	r1, [r7, #8]
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f7ff fef7 	bl	800df44 <fill_rect>
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <line>:
	fill_rect( fb, x, y + h - 1, w, 1, col );
	fill_rect( fb, x, y, 1, h, col );
	fill_rect( fb, x + w - 1, y, 1, h, col );
}

void line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800e15e:	b580      	push	{r7, lr}
 800e160:	b08c      	sub	sp, #48	; 0x30
 800e162:	af00      	add	r7, sp, #0
 800e164:	60f8      	str	r0, [r7, #12]
 800e166:	60b9      	str	r1, [r7, #8]
 800e168:	607a      	str	r2, [r7, #4]
 800e16a:	603b      	str	r3, [r7, #0]
	int dx = x2 - x1;
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	62fb      	str	r3, [r7, #44]	; 0x2c
	int sx;
    if (dx > 0) {
 800e174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e176:	2b00      	cmp	r3, #0
 800e178:	dd02      	ble.n	800e180 <line+0x22>
        sx = 1;
 800e17a:	2301      	movs	r3, #1
 800e17c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e17e:	e005      	b.n	800e18c <line+0x2e>
    } else {
        dx = -dx;
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	425b      	negs	r3, r3
 800e184:	62fb      	str	r3, [r7, #44]	; 0x2c
        sx = -1;
 800e186:	f04f 33ff 	mov.w	r3, #4294967295
 800e18a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    int dy = y2 - y1;
 800e18c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
    int sy;
    if (dy > 0) {
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	2b00      	cmp	r3, #0
 800e198:	dd02      	ble.n	800e1a0 <line+0x42>
        sy = 1;
 800e19a:	2301      	movs	r3, #1
 800e19c:	623b      	str	r3, [r7, #32]
 800e19e:	e005      	b.n	800e1ac <line+0x4e>
    } else {
        dy = -dy;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	425b      	negs	r3, r3
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24
        sy = -1;
 800e1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1aa:	623b      	str	r3, [r7, #32]
    }

    int steep;
    if (dy > dx) {
 800e1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	dd14      	ble.n	800e1de <line+0x80>
        int temp;
        temp = x1;
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	613b      	str	r3, [r7, #16]
        x1 = y1;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	60bb      	str	r3, [r7, #8]
        y1 = temp;
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	607b      	str	r3, [r7, #4]
        temp = dx;
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	613b      	str	r3, [r7, #16]
        dx = dy;
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        dy = temp;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	627b      	str	r3, [r7, #36]	; 0x24
        temp = sx;
 800e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ce:	613b      	str	r3, [r7, #16]
        sx = sy;
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	62bb      	str	r3, [r7, #40]	; 0x28
        sy = temp;
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	623b      	str	r3, [r7, #32]
        steep = 1;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	61fb      	str	r3, [r7, #28]
 800e1dc:	e001      	b.n	800e1e2 <line+0x84>
    } else {
        steep = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	61fb      	str	r3, [r7, #28]
    }

    int e = 2 * dy - dx;
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	005a      	lsls	r2, r3, #1
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	617b      	str	r3, [r7, #20]
 800e1f0:	e04c      	b.n	800e28c <line+0x12e>
        if (steep) {
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d018      	beq.n	800e22a <line+0xcc>
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	db37      	blt.n	800e26e <line+0x110>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	889b      	ldrh	r3, [r3, #4]
 800e202:	461a      	mov	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4293      	cmp	r3, r2
 800e208:	da31      	bge.n	800e26e <line+0x110>
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	db2e      	blt.n	800e26e <line+0x110>
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	88db      	ldrh	r3, [r3, #6]
 800e214:	461a      	mov	r2, r3
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	4293      	cmp	r3, r2
 800e21a:	da28      	bge.n	800e26e <line+0x110>
                setpixel(fb, y1, x1, col);
 800e21c:	6879      	ldr	r1, [r7, #4]
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f7ff fe4c 	bl	800dec0 <setpixel>
 800e228:	e021      	b.n	800e26e <line+0x110>
            }
        } else {
            if (0 <= x1 && x1 < fb->width && 0 <= y1 && y1 < fb->height) {
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	db1e      	blt.n	800e26e <line+0x110>
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	889b      	ldrh	r3, [r3, #4]
 800e234:	461a      	mov	r2, r3
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	4293      	cmp	r3, r2
 800e23a:	da18      	bge.n	800e26e <line+0x110>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	db15      	blt.n	800e26e <line+0x110>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	88db      	ldrh	r3, [r3, #6]
 800e246:	461a      	mov	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4293      	cmp	r3, r2
 800e24c:	da0f      	bge.n	800e26e <line+0x110>
                setpixel(fb, x1, y1, col);
 800e24e:	68b9      	ldr	r1, [r7, #8]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7ff fe33 	bl	800dec0 <setpixel>
            }
        }
        while (e >= 0) {
 800e25a:	e008      	b.n	800e26e <line+0x110>
            y1 += sy;
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	4413      	add	r3, r2
 800e262:	607b      	str	r3, [r7, #4]
            e -= 2 * dx;
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	69ba      	ldr	r2, [r7, #24]
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	61bb      	str	r3, [r7, #24]
        while (e >= 0) {
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	2b00      	cmp	r3, #0
 800e272:	daf3      	bge.n	800e25c <line+0xfe>
        }
        x1 += sx;
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	4413      	add	r3, r2
 800e27a:	60bb      	str	r3, [r7, #8]
        e += 2 * dy;
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	69ba      	ldr	r2, [r7, #24]
 800e282:	4413      	add	r3, r2
 800e284:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	3301      	adds	r3, #1
 800e28a:	617b      	str	r3, [r7, #20]
 800e28c:	697a      	ldr	r2, [r7, #20]
 800e28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e290:	429a      	cmp	r2, r3
 800e292:	dbae      	blt.n	800e1f2 <line+0x94>
    }

    if (0 <= x2 && x2 < fb->width && 0 <= y2 && y2 < fb->height) {
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	db14      	blt.n	800e2c4 <line+0x166>
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	889b      	ldrh	r3, [r3, #4]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	da0e      	bge.n	800e2c4 <line+0x166>
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	db0b      	blt.n	800e2c4 <line+0x166>
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	88db      	ldrh	r3, [r3, #6]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	da05      	bge.n	800e2c4 <line+0x166>
        setpixel(fb, x2, y2, col);
 800e2b8:	6839      	ldr	r1, [r7, #0]
 800e2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f7ff fdfe 	bl	800dec0 <setpixel>
    }
}
 800e2c4:	bf00      	nop
 800e2c6:	3730      	adds	r7, #48	; 0x30
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <framebuf_line>:

void framebuf_line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af02      	add	r7, sp, #8
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
 800e2d8:	603b      	str	r3, [r7, #0]
    line( fb, x1, y1, x2, y2, col );
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	68b9      	ldr	r1, [r7, #8]
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f7ff ff38 	bl	800e15e <line>
}
 800e2ee:	bf00      	nop
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <framebuf_circle>:
        }
    }
}
*/

void framebuf_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b088      	sub	sp, #32
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	60f8      	str	r0, [r7, #12]
 800e2fe:	60b9      	str	r1, [r7, #8]
 800e300:	607a      	str	r2, [r7, #4]
 800e302:	603b      	str	r3, [r7, #0]
    int x = 0;
 800e304:	2300      	movs	r3, #0
 800e306:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	f1c3 0303 	rsb	r3, r3, #3
 800e314:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e316:	e067      	b.n	800e3e8 <framebuf_circle+0xf2>
        framebuf_pixel(fb, xc + x, yc + y, col);
 800e318:	68ba      	ldr	r2, [r7, #8]
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	18d1      	adds	r1, r2, r3
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	441a      	add	r2, r3
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f7ff fecc 	bl	800e0c4 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc + y, col);
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	1ad1      	subs	r1, r2, r3
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	441a      	add	r2, r3
 800e338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f7ff fec2 	bl	800e0c4 <framebuf_pixel>
        framebuf_pixel(fb, xc + x, yc - y, col);
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	18d1      	adds	r1, r2, r3
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	1ad2      	subs	r2, r2, r3
 800e34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f7ff feb8 	bl	800e0c4 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc - y, col);
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	1ad1      	subs	r1, r2, r3
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	1ad2      	subs	r2, r2, r3
 800e360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f7ff feae 	bl	800e0c4 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc + x, col);
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	18d1      	adds	r1, r2, r3
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	441a      	add	r2, r3
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f7ff fea4 	bl	800e0c4 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc + x, col);
 800e37c:	68ba      	ldr	r2, [r7, #8]
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	1ad1      	subs	r1, r2, r3
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	441a      	add	r2, r3
 800e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f7ff fe9a 	bl	800e0c4 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc - x, col);
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	18d1      	adds	r1, r2, r3
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	1ad2      	subs	r2, r2, r3
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f7ff fe90 	bl	800e0c4 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc - x, col);
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	1ad1      	subs	r1, r2, r3
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	1ad2      	subs	r2, r2, r3
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff fe86 	bl	800e0c4 <framebuf_pixel>

        if (d < 0) {
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	da06      	bge.n	800e3cc <framebuf_circle+0xd6>
            d = d + 4 * x + 6;
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	009a      	lsls	r2, r3, #2
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	3306      	adds	r3, #6
 800e3c8:	617b      	str	r3, [r7, #20]
 800e3ca:	e00a      	b.n	800e3e2 <framebuf_circle+0xec>
        } else {
            d = d + 4 * (x - y) + 10;
 800e3cc:	69fa      	ldr	r2, [r7, #28]
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	009a      	lsls	r2, r3, #2
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	330a      	adds	r3, #10
 800e3da:	617b      	str	r3, [r7, #20]
            y--;
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e3e8:	69fa      	ldr	r2, [r7, #28]
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	dd93      	ble.n	800e318 <framebuf_circle+0x22>
    }
}
 800e3f0:	bf00      	nop
 800e3f2:	bf00      	nop
 800e3f4:	3720      	adds	r7, #32
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <framebuf_circle_quadrant>:
#define QUADRANT_0   0x01
#define QUADRANT_90  0x02
#define QUADRANT_180 0x04
#define QUADRANT_270 0x08
void framebuf_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b088      	sub	sp, #32
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	60f8      	str	r0, [r7, #12]
 800e402:	60b9      	str	r1, [r7, #8]
 800e404:	607a      	str	r2, [r7, #4]
 800e406:	603b      	str	r3, [r7, #0]
    int x = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	f1c3 0303 	rsb	r3, r3, #3
 800e418:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e41a:	e07f      	b.n	800e51c <framebuf_circle_quadrant+0x122>
        if (quadrant & QUADRANT_0) {
 800e41c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e420:	f003 0301 	and.w	r3, r3, #1
 800e424:	2b00      	cmp	r3, #0
 800e426:	d013      	beq.n	800e450 <framebuf_circle_quadrant+0x56>
            framebuf_pixel(fb, xc + x, yc + y, col);
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	18d1      	adds	r1, r2, r3
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	441a      	add	r2, r3
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f7ff fe44 	bl	800e0c4 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc + x, col);
 800e43c:	68ba      	ldr	r2, [r7, #8]
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	18d1      	adds	r1, r2, r3
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	441a      	add	r2, r3
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f7ff fe3a 	bl	800e0c4 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_90) {
 800e450:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e454:	f003 0302 	and.w	r3, r3, #2
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d013      	beq.n	800e484 <framebuf_circle_quadrant+0x8a>
            framebuf_pixel(fb, xc - x, yc + y, col);
 800e45c:	68ba      	ldr	r2, [r7, #8]
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	1ad1      	subs	r1, r2, r3
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	441a      	add	r2, r3
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff fe2a 	bl	800e0c4 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc + x, col);
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	1ad1      	subs	r1, r2, r3
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	441a      	add	r2, r3
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7ff fe20 	bl	800e0c4 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_180) {
 800e484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e488:	f003 0304 	and.w	r3, r3, #4
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d013      	beq.n	800e4b8 <framebuf_circle_quadrant+0xbe>
            framebuf_pixel(fb, xc - x, yc - y, col);
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	1ad1      	subs	r1, r2, r3
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	1ad2      	subs	r2, r2, r3
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f7ff fe10 	bl	800e0c4 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc - x, col);
 800e4a4:	68ba      	ldr	r2, [r7, #8]
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	1ad1      	subs	r1, r2, r3
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	1ad2      	subs	r2, r2, r3
 800e4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7ff fe06 	bl	800e0c4 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_270) {
 800e4b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e4bc:	f003 0308 	and.w	r3, r3, #8
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d013      	beq.n	800e4ec <framebuf_circle_quadrant+0xf2>
            framebuf_pixel(fb, xc + x, yc - y, col);
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	18d1      	adds	r1, r2, r3
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7ff fdf6 	bl	800e0c4 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc - x, col);
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	18d1      	adds	r1, r2, r3
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	1ad2      	subs	r2, r2, r3
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f7ff fdec 	bl	800e0c4 <framebuf_pixel>
        }

        if (d < 0) {
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	da06      	bge.n	800e500 <framebuf_circle_quadrant+0x106>
            d = d + 4 * x + 6;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	009a      	lsls	r2, r3, #2
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	3306      	adds	r3, #6
 800e4fc:	617b      	str	r3, [r7, #20]
 800e4fe:	e00a      	b.n	800e516 <framebuf_circle_quadrant+0x11c>
        } else {
            d = d + 4 * (x - y) + 10;
 800e500:	69fa      	ldr	r2, [r7, #28]
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	009a      	lsls	r2, r3, #2
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	4413      	add	r3, r2
 800e50c:	330a      	adds	r3, #10
 800e50e:	617b      	str	r3, [r7, #20]
            y--;
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	3b01      	subs	r3, #1
 800e514:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	3301      	adds	r3, #1
 800e51a:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e51c:	69fa      	ldr	r2, [r7, #28]
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	429a      	cmp	r2, r3
 800e522:	f77f af7b 	ble.w	800e41c <framebuf_circle_quadrant+0x22>
    }
}
 800e526:	bf00      	nop
 800e528:	bf00      	nop
 800e52a:	3720      	adds	r7, #32
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <framebuf_fill_circle>:

void framebuf_fill_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800e530:	b580      	push	{r7, lr}
 800e532:	b08a      	sub	sp, #40	; 0x28
 800e534:	af02      	add	r7, sp, #8
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	1ad1      	subs	r1, r2, r3
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	005a      	lsls	r2, r3, #1
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	4613      	mov	r3, r2
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f7ff fdda 	bl	800e10a <framebuf_hline>

    int x = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	005b      	lsls	r3, r3, #1
 800e562:	f1c3 0303 	rsb	r3, r3, #3
 800e566:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e568:	e055      	b.n	800e616 <framebuf_fill_circle+0xe6>
        if (y > 0) {
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	dd1b      	ble.n	800e5a8 <framebuf_fill_circle+0x78>
            framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800e570:	68ba      	ldr	r2, [r7, #8]
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	1ad1      	subs	r1, r2, r3
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	1ad2      	subs	r2, r2, r3
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	0058      	lsls	r0, r3, #1
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	4603      	mov	r3, r0
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f7ff fdbf 	bl	800e10a <framebuf_hline>
            framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800e58c:	68ba      	ldr	r2, [r7, #8]
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	1ad1      	subs	r1, r2, r3
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	441a      	add	r2, r3
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	0058      	lsls	r0, r3, #1
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7ff fdb1 	bl	800e10a <framebuf_hline>
        }

        if (x > 0) {
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	dd1b      	ble.n	800e5e6 <framebuf_fill_circle+0xb6>
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	1ad1      	subs	r1, r2, r3
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	1ad2      	subs	r2, r2, r3
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	0058      	lsls	r0, r3, #1
 800e5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f7ff fda0 	bl	800e10a <framebuf_hline>
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	1ad1      	subs	r1, r2, r3
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	441a      	add	r2, r3
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	0058      	lsls	r0, r3, #1
 800e5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	4603      	mov	r3, r0
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7ff fd92 	bl	800e10a <framebuf_hline>
        }

        if (d < 0) {
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	da06      	bge.n	800e5fa <framebuf_fill_circle+0xca>
            d = d + 4 * x + 6;
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	009a      	lsls	r2, r3, #2
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	3306      	adds	r3, #6
 800e5f6:	617b      	str	r3, [r7, #20]
 800e5f8:	e00a      	b.n	800e610 <framebuf_fill_circle+0xe0>
        } else {
            d = d + 4 * (x - y) + 10;
 800e5fa:	69fa      	ldr	r2, [r7, #28]
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	009a      	lsls	r2, r3, #2
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	4413      	add	r3, r2
 800e606:	330a      	adds	r3, #10
 800e608:	617b      	str	r3, [r7, #20]
            y--;
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	3301      	adds	r3, #1
 800e614:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e616:	69fa      	ldr	r2, [r7, #28]
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	dda5      	ble.n	800e56a <framebuf_fill_circle+0x3a>
    }
}
 800e61e:	bf00      	nop
 800e620:	bf00      	nop
 800e622:	3720      	adds	r7, #32
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <framebuf_fill_circle_quadrant>:

void framebuf_fill_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800e628:	b580      	push	{r7, lr}
 800e62a:	b08a      	sub	sp, #40	; 0x28
 800e62c:	af02      	add	r7, sp, #8
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
 800e634:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	1ad1      	subs	r1, r2, r3
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	005a      	lsls	r2, r3, #1
 800e640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	4613      	mov	r3, r2
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f7ff fd5e 	bl	800e10a <framebuf_hline>

    int x = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	005b      	lsls	r3, r3, #1
 800e65a:	f1c3 0303 	rsb	r3, r3, #3
 800e65e:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e660:	e0ab      	b.n	800e7ba <framebuf_fill_circle_quadrant+0x192>
        if (quadrant & QUADRANT_0) {
 800e662:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d01e      	beq.n	800e6ac <framebuf_fill_circle_quadrant+0x84>
            if (y > 0) {
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dd1b      	ble.n	800e6ac <framebuf_fill_circle_quadrant+0x84>
                framebuf_hline(fb, xc + x, yc - y, 2 * x, col);
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	18d1      	adds	r1, r2, r3
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	1ad2      	subs	r2, r2, r3
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	0058      	lsls	r0, r3, #1
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	4603      	mov	r3, r0
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f7ff fd3d 	bl	800e10a <framebuf_hline>
                framebuf_hline(fb, xc + x, yc + y, 2 * x, col);
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	18d1      	adds	r1, r2, r3
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	441a      	add	r2, r3
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	0058      	lsls	r0, r3, #1
 800e6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f7ff fd2f 	bl	800e10a <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_90) {
 800e6ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e6b0:	f003 0302 	and.w	r3, r3, #2
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d01e      	beq.n	800e6f6 <framebuf_fill_circle_quadrant+0xce>
            if (x > 0) {
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	dd1b      	ble.n	800e6f6 <framebuf_fill_circle_quadrant+0xce>
                framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800e6be:	68ba      	ldr	r2, [r7, #8]
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	1ad1      	subs	r1, r2, r3
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	1ad2      	subs	r2, r2, r3
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	0058      	lsls	r0, r3, #1
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f7ff fd18 	bl	800e10a <framebuf_hline>
                framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	1ad1      	subs	r1, r2, r3
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	441a      	add	r2, r3
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	0058      	lsls	r0, r3, #1
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7ff fd0a 	bl	800e10a <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_180) {
 800e6f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e6fa:	f003 0304 	and.w	r3, r3, #4
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d01e      	beq.n	800e740 <framebuf_fill_circle_quadrant+0x118>
            if (y > 0) {
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	2b00      	cmp	r3, #0
 800e706:	dd1b      	ble.n	800e740 <framebuf_fill_circle_quadrant+0x118>
                framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	1ad1      	subs	r1, r2, r3
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	1ad2      	subs	r2, r2, r3
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	0058      	lsls	r0, r3, #1
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	4603      	mov	r3, r0
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f7ff fcf3 	bl	800e10a <framebuf_hline>
                framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	1ad1      	subs	r1, r2, r3
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	441a      	add	r2, r3
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	0058      	lsls	r0, r3, #1
 800e734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	4603      	mov	r3, r0
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f7ff fce5 	bl	800e10a <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_270) {
 800e740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e744:	f003 0308 	and.w	r3, r3, #8
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d01e      	beq.n	800e78a <framebuf_fill_circle_quadrant+0x162>
            if (x > 0) {
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	dd1b      	ble.n	800e78a <framebuf_fill_circle_quadrant+0x162>
                framebuf_hline(fb, xc + y, yc - x, 2 * y, col);
 800e752:	68ba      	ldr	r2, [r7, #8]
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	18d1      	adds	r1, r2, r3
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	1ad2      	subs	r2, r2, r3
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	0058      	lsls	r0, r3, #1
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	4603      	mov	r3, r0
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff fcce 	bl	800e10a <framebuf_hline>
                framebuf_hline(fb, xc + y, yc + x, 2 * y, col);
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	18d1      	adds	r1, r2, r3
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	441a      	add	r2, r3
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	0058      	lsls	r0, r3, #1
 800e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	4603      	mov	r3, r0
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f7ff fcc0 	bl	800e10a <framebuf_hline>
            }
        }

        if (d < 0) {
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	da06      	bge.n	800e79e <framebuf_fill_circle_quadrant+0x176>
            d = d + 4 * x + 6;
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	009a      	lsls	r2, r3, #2
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	4413      	add	r3, r2
 800e798:	3306      	adds	r3, #6
 800e79a:	617b      	str	r3, [r7, #20]
 800e79c:	e00a      	b.n	800e7b4 <framebuf_fill_circle_quadrant+0x18c>
        } else {
            d = d + 4 * (x - y) + 10;
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	009a      	lsls	r2, r3, #2
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	330a      	adds	r3, #10
 800e7ac:	617b      	str	r3, [r7, #20]
            y--;
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e7ba:	69fa      	ldr	r2, [r7, #28]
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	f77f af4f 	ble.w	800e662 <framebuf_fill_circle_quadrant+0x3a>
    }
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop
 800e7c8:	3720      	adds	r7, #32
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <nk_buffer_init_fixed>:
    b->grow_factor = 2.0f;
    b->pool = *a;
}
NK_API void
nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
    NK_ASSERT(b);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d105      	bne.n	800e7ee <nk_buffer_init_fixed+0x1e>
 800e7e2:	4b1b      	ldr	r3, [pc, #108]	; (800e850 <nk_buffer_init_fixed+0x80>)
 800e7e4:	4a1b      	ldr	r2, [pc, #108]	; (800e854 <nk_buffer_init_fixed+0x84>)
 800e7e6:	2136      	movs	r1, #54	; 0x36
 800e7e8:	481b      	ldr	r0, [pc, #108]	; (800e858 <nk_buffer_init_fixed+0x88>)
 800e7ea:	f016 f975 	bl	8024ad8 <__assert_func>
    NK_ASSERT(m);
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d105      	bne.n	800e800 <nk_buffer_init_fixed+0x30>
 800e7f4:	4b19      	ldr	r3, [pc, #100]	; (800e85c <nk_buffer_init_fixed+0x8c>)
 800e7f6:	4a17      	ldr	r2, [pc, #92]	; (800e854 <nk_buffer_init_fixed+0x84>)
 800e7f8:	2137      	movs	r1, #55	; 0x37
 800e7fa:	4817      	ldr	r0, [pc, #92]	; (800e858 <nk_buffer_init_fixed+0x88>)
 800e7fc:	f016 f96c 	bl	8024ad8 <__assert_func>
    NK_ASSERT(size);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d105      	bne.n	800e812 <nk_buffer_init_fixed+0x42>
 800e806:	4b16      	ldr	r3, [pc, #88]	; (800e860 <nk_buffer_init_fixed+0x90>)
 800e808:	4a12      	ldr	r2, [pc, #72]	; (800e854 <nk_buffer_init_fixed+0x84>)
 800e80a:	2138      	movs	r1, #56	; 0x38
 800e80c:	4812      	ldr	r0, [pc, #72]	; (800e858 <nk_buffer_init_fixed+0x88>)
 800e80e:	f016 f963 	bl	8024ad8 <__assert_func>
    if (!b || !m || !size) return;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d016      	beq.n	800e846 <nk_buffer_init_fixed+0x76>
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d013      	beq.n	800e846 <nk_buffer_init_fixed+0x76>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d010      	beq.n	800e846 <nk_buffer_init_fixed+0x76>

    nk_zero(b, sizeof(*b));
 800e824:	213c      	movs	r1, #60	; 0x3c
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f013 ff2c 	bl	8022684 <nk_zero>
    b->type = NK_BUFFER_FIXED;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	771a      	strb	r2, [r3, #28]
    b->memory.ptr = m;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	621a      	str	r2, [r3, #32]
    b->memory.size = size;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	625a      	str	r2, [r3, #36]	; 0x24
    b->size = size;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	639a      	str	r2, [r3, #56]	; 0x38
 800e844:	e000      	b.n	800e848 <nk_buffer_init_fixed+0x78>
    if (!b || !m || !size) return;
 800e846:	bf00      	nop
}
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	08028564 	.word	0x08028564
 800e854:	0802a470 	.word	0x0802a470
 800e858:	08028568 	.word	0x08028568
 800e85c:	08028598 	.word	0x08028598
 800e860:	0802859c 	.word	0x0802859c

0800e864 <nk_buffer_align>:
NK_LIB void*
nk_buffer_align(void *unaligned,
    nk_size align, nk_size *alignment,
    enum nk_buffer_allocation_type type)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	70fb      	strb	r3, [r7, #3]
    void *memory = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
    switch (type) {
 800e876:	78fb      	ldrb	r3, [r7, #3]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d018      	beq.n	800e8ae <nk_buffer_align+0x4a>
    default:
    case NK_BUFFER_MAX:
    case NK_BUFFER_FRONT:
        if (align) {
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00f      	beq.n	800e8a2 <nk_buffer_align+0x3e>
            memory = NK_ALIGN_PTR(unaligned, align);
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	3b01      	subs	r3, #1
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	4413      	add	r3, r2
 800e88a:	461a      	mov	r2, r3
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	425b      	negs	r3, r3
 800e890:	4013      	ands	r3, r2
 800e892:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800e894:	697a      	ldr	r2, [r7, #20]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	461a      	mov	r2, r3
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e8a0:	e01a      	b.n	800e8d8 <nk_buffer_align+0x74>
            memory = unaligned;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]
        break;
 800e8ac:	e014      	b.n	800e8d8 <nk_buffer_align+0x74>
    case NK_BUFFER_BACK:
        if (align) {
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00b      	beq.n	800e8cc <nk_buffer_align+0x68>
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	425a      	negs	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);
 800e8be:	68fa      	ldr	r2, [r7, #12]
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e8ca:	e004      	b.n	800e8d6 <nk_buffer_align+0x72>
            memory = unaligned;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
        break;
 800e8d6:	bf00      	nop
    }
    return memory;
 800e8d8:	697b      	ldr	r3, [r7, #20]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
	...

0800e8e8 <nk_buffer_realloc>:
NK_LIB void*
nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08a      	sub	sp, #40	; 0x28
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
    void *temp;
    nk_size buffer_size;

    NK_ASSERT(b);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d105      	bne.n	800e906 <nk_buffer_realloc+0x1e>
 800e8fa:	4b3c      	ldr	r3, [pc, #240]	; (800e9ec <nk_buffer_realloc+0x104>)
 800e8fc:	4a3c      	ldr	r2, [pc, #240]	; (800e9f0 <nk_buffer_realloc+0x108>)
 800e8fe:	2165      	movs	r1, #101	; 0x65
 800e900:	483c      	ldr	r0, [pc, #240]	; (800e9f4 <nk_buffer_realloc+0x10c>)
 800e902:	f016 f8e9 	bl	8024ad8 <__assert_func>
    NK_ASSERT(size);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d105      	bne.n	800e918 <nk_buffer_realloc+0x30>
 800e90c:	4b3a      	ldr	r3, [pc, #232]	; (800e9f8 <nk_buffer_realloc+0x110>)
 800e90e:	4a38      	ldr	r2, [pc, #224]	; (800e9f0 <nk_buffer_realloc+0x108>)
 800e910:	2166      	movs	r1, #102	; 0x66
 800e912:	4838      	ldr	r0, [pc, #224]	; (800e9f4 <nk_buffer_realloc+0x10c>)
 800e914:	f016 f8e0 	bl	8024ad8 <__assert_func>
    if (!b || !size || !b->pool.alloc || !b->pool.free)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00a      	beq.n	800e934 <nk_buffer_realloc+0x4c>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d007      	beq.n	800e934 <nk_buffer_realloc+0x4c>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	695b      	ldr	r3, [r3, #20]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d003      	beq.n	800e934 <nk_buffer_realloc+0x4c>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	699b      	ldr	r3, [r3, #24]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d101      	bne.n	800e938 <nk_buffer_realloc+0x50>
        return 0;
 800e934:	2300      	movs	r3, #0
 800e936:	e054      	b.n	800e9e2 <nk_buffer_realloc+0xfa>

    buffer_size = b->memory.size;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93c:	627b      	str	r3, [r7, #36]	; 0x24
    temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	695b      	ldr	r3, [r3, #20]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	6a11      	ldr	r1, [r2, #32]
 800e946:	68f8      	ldr	r0, [r7, #12]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	6900      	ldr	r0, [r0, #16]
 800e94c:	4798      	blx	r3
 800e94e:	6238      	str	r0, [r7, #32]
    NK_ASSERT(temp);
 800e950:	6a3b      	ldr	r3, [r7, #32]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d105      	bne.n	800e962 <nk_buffer_realloc+0x7a>
 800e956:	4b29      	ldr	r3, [pc, #164]	; (800e9fc <nk_buffer_realloc+0x114>)
 800e958:	4a25      	ldr	r2, [pc, #148]	; (800e9f0 <nk_buffer_realloc+0x108>)
 800e95a:	216c      	movs	r1, #108	; 0x6c
 800e95c:	4825      	ldr	r0, [pc, #148]	; (800e9f4 <nk_buffer_realloc+0x10c>)
 800e95e:	f016 f8bb 	bl	8024ad8 <__assert_func>
    if (!temp) return 0;
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d101      	bne.n	800e96c <nk_buffer_realloc+0x84>
 800e968:	2300      	movs	r3, #0
 800e96a:	e03a      	b.n	800e9e2 <nk_buffer_realloc+0xfa>

    *size = capacity;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	601a      	str	r2, [r3, #0]
    if (temp != b->memory.ptr) {
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6a1b      	ldr	r3, [r3, #32]
 800e976:	6a3a      	ldr	r2, [r7, #32]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d00d      	beq.n	800e998 <nk_buffer_realloc+0xb0>
        NK_MEMCPY(temp, b->memory.ptr, buffer_size);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e982:	4619      	mov	r1, r3
 800e984:	6a38      	ldr	r0, [r7, #32]
 800e986:	f013 fd2d 	bl	80223e4 <nk_memcopy>
        b->pool.free(b->pool.userdata, b->memory.ptr);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	699b      	ldr	r3, [r3, #24]
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	6a11      	ldr	r1, [r2, #32]
 800e992:	68fa      	ldr	r2, [r7, #12]
 800e994:	6910      	ldr	r0, [r2, #16]
 800e996:	4798      	blx	r3
    }

    if (b->size == buffer_size) {
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d104      	bne.n	800e9ac <nk_buffer_realloc+0xc4>
        /* no back buffer so just set correct size */
        b->size = capacity;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	639a      	str	r2, [r3, #56]	; 0x38
        return temp;
 800e9a8:	6a3b      	ldr	r3, [r7, #32]
 800e9aa:	e01a      	b.n	800e9e2 <nk_buffer_realloc+0xfa>
    } else {
        /* copy back buffer to the end of the new buffer */
        void *dst, *src;
        nk_size back_size;
        back_size = buffer_size - b->size;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	61fb      	str	r3, [r7, #28]
        dst = nk_ptr_add(void, temp, capacity - back_size);
 800e9b6:	68ba      	ldr	r2, [r7, #8]
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	6a3a      	ldr	r2, [r7, #32]
 800e9be:	4413      	add	r3, r2
 800e9c0:	61bb      	str	r3, [r7, #24]
        src = nk_ptr_add(void, temp, b->size);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c6:	6a3a      	ldr	r2, [r7, #32]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	617b      	str	r3, [r7, #20]
        NK_MEMCPY(dst, src, back_size);
 800e9cc:	69fa      	ldr	r2, [r7, #28]
 800e9ce:	6979      	ldr	r1, [r7, #20]
 800e9d0:	69b8      	ldr	r0, [r7, #24]
 800e9d2:	f013 fd07 	bl	80223e4 <nk_memcopy>
        b->size = capacity - back_size;
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	1ad2      	subs	r2, r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return temp;
 800e9e0:	6a3b      	ldr	r3, [r7, #32]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3728      	adds	r7, #40	; 0x28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	08028564 	.word	0x08028564
 800e9f0:	0802a488 	.word	0x0802a488
 800e9f4:	08028568 	.word	0x08028568
 800e9f8:	0802859c 	.word	0x0802859c
 800e9fc:	080285a4 	.word	0x080285a4

0800ea00 <nk_buffer_alloc>:
NK_LIB void*
nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,
    nk_size size, nk_size align)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b08a      	sub	sp, #40	; 0x28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	607a      	str	r2, [r7, #4]
 800ea0a:	603b      	str	r3, [r7, #0]
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	72fb      	strb	r3, [r7, #11]
    int full;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d105      	bne.n	800ea22 <nk_buffer_alloc+0x22>
 800ea16:	4b7a      	ldr	r3, [pc, #488]	; (800ec00 <nk_buffer_alloc+0x200>)
 800ea18:	4a7a      	ldr	r2, [pc, #488]	; (800ec04 <nk_buffer_alloc+0x204>)
 800ea1a:	218e      	movs	r1, #142	; 0x8e
 800ea1c:	487a      	ldr	r0, [pc, #488]	; (800ec08 <nk_buffer_alloc+0x208>)
 800ea1e:	f016 f85b 	bl	8024ad8 <__assert_func>
    NK_ASSERT(size);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d105      	bne.n	800ea34 <nk_buffer_alloc+0x34>
 800ea28:	4b78      	ldr	r3, [pc, #480]	; (800ec0c <nk_buffer_alloc+0x20c>)
 800ea2a:	4a76      	ldr	r2, [pc, #472]	; (800ec04 <nk_buffer_alloc+0x204>)
 800ea2c:	218f      	movs	r1, #143	; 0x8f
 800ea2e:	4876      	ldr	r0, [pc, #472]	; (800ec08 <nk_buffer_alloc+0x208>)
 800ea30:	f016 f852 	bl	8024ad8 <__assert_func>
    if (!b || !size) return 0;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <nk_buffer_alloc+0x40>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d101      	bne.n	800ea44 <nk_buffer_alloc+0x44>
 800ea40:	2300      	movs	r3, #0
 800ea42:	e0d9      	b.n	800ebf8 <nk_buffer_alloc+0x1f8>
    b->needed += size;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	441a      	add	r2, r3
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* calculate total size with needed alignment + size */
    if (type == NK_BUFFER_FRONT)
 800ea50:	7afb      	ldrb	r3, [r7, #11]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <nk_buffer_alloc+0x64>
        unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6a1a      	ldr	r2, [r3, #32]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5e:	4413      	add	r3, r2
 800ea60:	623b      	str	r3, [r7, #32]
 800ea62:	e007      	b.n	800ea74 <nk_buffer_alloc+0x74>
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6a1a      	ldr	r2, [r3, #32]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	1acb      	subs	r3, r1, r3
 800ea70:	4413      	add	r3, r2
 800ea72:	623b      	str	r3, [r7, #32]
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 800ea74:	7afb      	ldrb	r3, [r7, #11]
 800ea76:	f107 0214 	add.w	r2, r7, #20
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6a38      	ldr	r0, [r7, #32]
 800ea7e:	f7ff fef1 	bl	800e864 <nk_buffer_align>
 800ea82:	61f8      	str	r0, [r7, #28]

    /* check if buffer has enough memory*/
    if (type == NK_BUFFER_FRONT)
 800ea84:	7afb      	ldrb	r3, [r7, #11]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10e      	bne.n	800eaa8 <nk_buffer_alloc+0xa8>
        full = ((b->allocated + size + alignment) > b->size);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	441a      	add	r2, r3
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	441a      	add	r2, r3
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	bf8c      	ite	hi
 800ea9e:	2301      	movhi	r3, #1
 800eaa0:	2300      	movls	r3, #0
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	627b      	str	r3, [r7, #36]	; 0x24
 800eaa6:	e012      	b.n	800eace <nk_buffer_alloc+0xce>
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaac:	6979      	ldr	r1, [r7, #20]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4419      	add	r1, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab6:	428b      	cmp	r3, r1
 800eab8:	bf28      	it	cs
 800eaba:	460b      	movcs	r3, r1
 800eabc:	1ad2      	subs	r2, r2, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	429a      	cmp	r2, r3
 800eac4:	bf94      	ite	ls
 800eac6:	2301      	movls	r3, #1
 800eac8:	2300      	movhi	r3, #0
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	627b      	str	r3, [r7, #36]	; 0x24

    if (full) {
 800eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d071      	beq.n	800ebb8 <nk_buffer_alloc+0x1b8>
        nk_size capacity;
        if (b->type != NK_BUFFER_DYNAMIC)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	7f1b      	ldrb	r3, [r3, #28]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d001      	beq.n	800eae0 <nk_buffer_alloc+0xe0>
            return 0;
 800eadc:	2300      	movs	r3, #0
 800eade:	e08b      	b.n	800ebf8 <nk_buffer_alloc+0x1f8>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	695b      	ldr	r3, [r3, #20]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d003      	beq.n	800eaf0 <nk_buffer_alloc+0xf0>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d105      	bne.n	800eafc <nk_buffer_alloc+0xfc>
 800eaf0:	4b47      	ldr	r3, [pc, #284]	; (800ec10 <nk_buffer_alloc+0x210>)
 800eaf2:	4a44      	ldr	r2, [pc, #272]	; (800ec04 <nk_buffer_alloc+0x204>)
 800eaf4:	21a2      	movs	r1, #162	; 0xa2
 800eaf6:	4844      	ldr	r0, [pc, #272]	; (800ec08 <nk_buffer_alloc+0x208>)
 800eaf8:	f015 ffee 	bl	8024ad8 <__assert_func>
        if (b->type != NK_BUFFER_DYNAMIC || !b->pool.alloc || !b->pool.free)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	7f1b      	ldrb	r3, [r3, #28]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d107      	bne.n	800eb14 <nk_buffer_alloc+0x114>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	695b      	ldr	r3, [r3, #20]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d003      	beq.n	800eb14 <nk_buffer_alloc+0x114>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	699b      	ldr	r3, [r3, #24]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <nk_buffer_alloc+0x118>
            return 0;
 800eb14:	2300      	movs	r3, #0
 800eb16:	e06f      	b.n	800ebf8 <nk_buffer_alloc+0x1f8>

        /* buffer is full so allocate bigger buffer if dynamic */
        capacity = (nk_size)((float)b->memory.size * b->grow_factor);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1c:	ee07 3a90 	vmov	s15, r3
 800eb20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800eb2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb32:	ee17 3a90 	vmov	r3, s15
 800eb36:	61bb      	str	r3, [r7, #24]
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4413      	add	r3, r2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f007 fd81 	bl	8016648 <nk_round_up_pow2>
 800eb46:	4602      	mov	r2, r0
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d208      	bcs.n	800eb60 <nk_buffer_alloc+0x160>
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4413      	add	r3, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f007 fd76 	bl	8016648 <nk_round_up_pow2>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	e000      	b.n	800eb62 <nk_buffer_alloc+0x162>
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	61bb      	str	r3, [r7, #24]
        b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	3324      	adds	r3, #36	; 0x24
 800eb68:	461a      	mov	r2, r3
 800eb6a:	69b9      	ldr	r1, [r7, #24]
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f7ff febb 	bl	800e8e8 <nk_buffer_realloc>
 800eb72:	4602      	mov	r2, r0
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	621a      	str	r2, [r3, #32]
        if (!b->memory.ptr) return 0;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6a1b      	ldr	r3, [r3, #32]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <nk_buffer_alloc+0x184>
 800eb80:	2300      	movs	r3, #0
 800eb82:	e039      	b.n	800ebf8 <nk_buffer_alloc+0x1f8>

        /* align newly allocated pointer */
        if (type == NK_BUFFER_FRONT)
 800eb84:	7afb      	ldrb	r3, [r7, #11]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <nk_buffer_alloc+0x198>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6a1a      	ldr	r2, [r3, #32]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb92:	4413      	add	r3, r2
 800eb94:	623b      	str	r3, [r7, #32]
 800eb96:	e007      	b.n	800eba8 <nk_buffer_alloc+0x1a8>
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6a1a      	ldr	r2, [r3, #32]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	1acb      	subs	r3, r1, r3
 800eba4:	4413      	add	r3, r2
 800eba6:	623b      	str	r3, [r7, #32]
        memory = nk_buffer_align(unaligned, align, &alignment, type);
 800eba8:	7afb      	ldrb	r3, [r7, #11]
 800ebaa:	f107 0214 	add.w	r2, r7, #20
 800ebae:	6839      	ldr	r1, [r7, #0]
 800ebb0:	6a38      	ldr	r0, [r7, #32]
 800ebb2:	f7ff fe57 	bl	800e864 <nk_buffer_align>
 800ebb6:	61f8      	str	r0, [r7, #28]
    }
    if (type == NK_BUFFER_FRONT)
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d108      	bne.n	800ebd0 <nk_buffer_alloc+0x1d0>
        b->allocated += size + alignment;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc2:	6979      	ldr	r1, [r7, #20]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	440b      	add	r3, r1
 800ebc8:	441a      	add	r2, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	62da      	str	r2, [r3, #44]	; 0x2c
 800ebce:	e007      	b.n	800ebe0 <nk_buffer_alloc+0x1e0>
    else b->size -= (size + alignment);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebd4:	6979      	ldr	r1, [r7, #20]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	440b      	add	r3, r1
 800ebda:	1ad2      	subs	r2, r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	639a      	str	r2, [r3, #56]	; 0x38
    b->needed += alignment;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	441a      	add	r2, r3
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	631a      	str	r2, [r3, #48]	; 0x30
    b->calls++;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	635a      	str	r2, [r3, #52]	; 0x34
    return memory;
 800ebf6:	69fb      	ldr	r3, [r7, #28]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3728      	adds	r7, #40	; 0x28
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	08028564 	.word	0x08028564
 800ec04:	0802a49c 	.word	0x0802a49c
 800ec08:	08028568 	.word	0x08028568
 800ec0c:	0802859c 	.word	0x0802859c
 800ec10:	080285ac 	.word	0x080285ac

0800ec14 <nk_buffer_reset>:
        buffer->marker[type].offset = buffer->size;
    else buffer->marker[type].offset = buffer->allocated;
}
NK_API void
nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(buffer);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d105      	bne.n	800ec32 <nk_buffer_reset+0x1e>
 800ec26:	4b2c      	ldr	r3, [pc, #176]	; (800ecd8 <nk_buffer_reset+0xc4>)
 800ec28:	4a2c      	ldr	r2, [pc, #176]	; (800ecdc <nk_buffer_reset+0xc8>)
 800ec2a:	21ce      	movs	r1, #206	; 0xce
 800ec2c:	482c      	ldr	r0, [pc, #176]	; (800ece0 <nk_buffer_reset+0xcc>)
 800ec2e:	f015 ff53 	bl	8024ad8 <__assert_func>
    if (!buffer) return;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d04b      	beq.n	800ecd0 <nk_buffer_reset+0xbc>
    if (type == NK_BUFFER_BACK) {
 800ec38:	78fb      	ldrb	r3, [r7, #3]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d124      	bne.n	800ec88 <nk_buffer_reset+0x74>
        /* reset back buffer either back to marker or empty */
        buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec42:	78fb      	ldrb	r3, [r7, #3]
 800ec44:	6879      	ldr	r1, [r7, #4]
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	440b      	add	r3, r1
 800ec4a:	6859      	ldr	r1, [r3, #4]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec50:	1acb      	subs	r3, r1, r3
 800ec52:	441a      	add	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800ec58:	78fa      	ldrb	r2, [r7, #3]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d007      	beq.n	800ec74 <nk_buffer_reset+0x60>
            buffer->size = buffer->marker[type].offset;
 800ec64:	78fb      	ldrb	r3, [r7, #3]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	00db      	lsls	r3, r3, #3
 800ec6a:	4413      	add	r3, r2
 800ec6c:	685a      	ldr	r2, [r3, #4]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	639a      	str	r2, [r3, #56]	; 0x38
 800ec72:	e003      	b.n	800ec7c <nk_buffer_reset+0x68>
        else buffer->size = buffer->memory.size;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	639a      	str	r2, [r3, #56]	; 0x38
        buffer->marker[type].active = nk_false;
 800ec7c:	78fa      	ldrb	r2, [r7, #3]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2100      	movs	r1, #0
 800ec82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800ec86:	e024      	b.n	800ecd2 <nk_buffer_reset+0xbe>
    } else {
        /* reset front buffer either back to back marker or empty */
        buffer->needed -= (buffer->allocated - buffer->marker[type].offset);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	6879      	ldr	r1, [r7, #4]
 800ec90:	00db      	lsls	r3, r3, #3
 800ec92:	440b      	add	r3, r1
 800ec94:	6859      	ldr	r1, [r3, #4]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9a:	1acb      	subs	r3, r1, r3
 800ec9c:	441a      	add	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800eca2:	78fa      	ldrb	r2, [r7, #3]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d007      	beq.n	800ecbe <nk_buffer_reset+0xaa>
            buffer->allocated = buffer->marker[type].offset;
 800ecae:	78fb      	ldrb	r3, [r7, #3]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	00db      	lsls	r3, r3, #3
 800ecb4:	4413      	add	r3, r2
 800ecb6:	685a      	ldr	r2, [r3, #4]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	62da      	str	r2, [r3, #44]	; 0x2c
 800ecbc:	e002      	b.n	800ecc4 <nk_buffer_reset+0xb0>
        else buffer->allocated = 0;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	62da      	str	r2, [r3, #44]	; 0x2c
        buffer->marker[type].active = nk_false;
 800ecc4:	78fa      	ldrb	r2, [r7, #3]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2100      	movs	r1, #0
 800ecca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800ecce:	e000      	b.n	800ecd2 <nk_buffer_reset+0xbe>
    if (!buffer) return;
 800ecd0:	bf00      	nop
    }
}
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	080285cc 	.word	0x080285cc
 800ecdc:	0802a4ac 	.word	0x0802a4ac
 800ece0:	08028568 	.word	0x08028568

0800ece4 <nk_buffer_clear>:
NK_API void
nk_buffer_clear(struct nk_buffer *b)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d105      	bne.n	800ecfe <nk_buffer_clear+0x1a>
 800ecf2:	4b0d      	ldr	r3, [pc, #52]	; (800ed28 <nk_buffer_clear+0x44>)
 800ecf4:	4a0d      	ldr	r2, [pc, #52]	; (800ed2c <nk_buffer_clear+0x48>)
 800ecf6:	21e3      	movs	r1, #227	; 0xe3
 800ecf8:	480d      	ldr	r0, [pc, #52]	; (800ed30 <nk_buffer_clear+0x4c>)
 800ecfa:	f015 feed 	bl	8024ad8 <__assert_func>
    if (!b) return;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00d      	beq.n	800ed20 <nk_buffer_clear+0x3c>
    b->allocated = 0;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	62da      	str	r2, [r3, #44]	; 0x2c
    b->size = b->memory.size;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	639a      	str	r2, [r3, #56]	; 0x38
    b->calls = 0;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	635a      	str	r2, [r3, #52]	; 0x34
    b->needed = 0;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	631a      	str	r2, [r3, #48]	; 0x30
 800ed1e:	e000      	b.n	800ed22 <nk_buffer_clear+0x3e>
    if (!b) return;
 800ed20:	bf00      	nop
}
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	08028564 	.word	0x08028564
 800ed2c:	0802a4bc 	.word	0x0802a4bc
 800ed30:	08028568 	.word	0x08028568

0800ed34 <nk_draw_symbol>:
 * ===============================================================*/
NK_LIB void
nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,
    struct nk_rect content, struct nk_color background, struct nk_color foreground,
    float border_width, const struct nk_user_font *font)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b0a0      	sub	sp, #128	; 0x80
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	6278      	str	r0, [r7, #36]	; 0x24
 800ed3c:	eeb0 6a40 	vmov.f32	s12, s0
 800ed40:	eef0 6a60 	vmov.f32	s13, s1
 800ed44:	eeb0 7a41 	vmov.f32	s14, s2
 800ed48:	eef0 7a61 	vmov.f32	s15, s3
 800ed4c:	60fa      	str	r2, [r7, #12]
 800ed4e:	60bb      	str	r3, [r7, #8]
 800ed50:	ed87 2a01 	vstr	s4, [r7, #4]
 800ed54:	460b      	mov	r3, r1
 800ed56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed5a:	ed87 6a04 	vstr	s12, [r7, #16]
 800ed5e:	edc7 6a05 	vstr	s13, [r7, #20]
 800ed62:	ed87 7a06 	vstr	s14, [r7, #24]
 800ed66:	edc7 7a07 	vstr	s15, [r7, #28]
    switch (type) {
 800ed6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	2b0b      	cmp	r3, #11
 800ed72:	f200 815e 	bhi.w	800f032 <nk_draw_symbol+0x2fe>
 800ed76:	a201      	add	r2, pc, #4	; (adr r2, 800ed7c <nk_draw_symbol+0x48>)
 800ed78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7c:	0800edad 	.word	0x0800edad
 800ed80:	0800edad 	.word	0x0800edad
 800ed84:	0800ee35 	.word	0x0800ee35
 800ed88:	0800ee35 	.word	0x0800ee35
 800ed8c:	0800ee35 	.word	0x0800ee35
 800ed90:	0800ee35 	.word	0x0800ee35
 800ed94:	0800ef97 	.word	0x0800ef97
 800ed98:	0800ef97 	.word	0x0800ef97
 800ed9c:	0800ef97 	.word	0x0800ef97
 800eda0:	0800ef97 	.word	0x0800ef97
 800eda4:	0800edad 	.word	0x0800edad
 800eda8:	0800edad 	.word	0x0800edad
    case NK_SYMBOL_X:
    case NK_SYMBOL_UNDERSCORE:
    case NK_SYMBOL_PLUS:
    case NK_SYMBOL_MINUS: {
        /* single character text symbol */
        const char *X = (type == NK_SYMBOL_X) ? "x":
 800edac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d00d      	beq.n	800edd0 <nk_draw_symbol+0x9c>
 800edb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d007      	beq.n	800edcc <nk_draw_symbol+0x98>
 800edbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edc0:	2b0b      	cmp	r3, #11
 800edc2:	d101      	bne.n	800edc8 <nk_draw_symbol+0x94>
 800edc4:	4b9e      	ldr	r3, [pc, #632]	; (800f040 <nk_draw_symbol+0x30c>)
 800edc6:	e004      	b.n	800edd2 <nk_draw_symbol+0x9e>
 800edc8:	4b9e      	ldr	r3, [pc, #632]	; (800f044 <nk_draw_symbol+0x310>)
 800edca:	e002      	b.n	800edd2 <nk_draw_symbol+0x9e>
 800edcc:	4b9e      	ldr	r3, [pc, #632]	; (800f048 <nk_draw_symbol+0x314>)
 800edce:	e000      	b.n	800edd2 <nk_draw_symbol+0x9e>
 800edd0:	4b9e      	ldr	r3, [pc, #632]	; (800f04c <nk_draw_symbol+0x318>)
 800edd2:	673b      	str	r3, [r7, #112]	; 0x70
            (type == NK_SYMBOL_UNDERSCORE) ? "_":
            (type == NK_SYMBOL_PLUS) ? "+": "-";
        struct nk_text text;
        text.padding = nk_vec2(0,0);
 800edd4:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800f050 <nk_draw_symbol+0x31c>
 800edd8:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800f050 <nk_draw_symbol+0x31c>
 800eddc:	f007 fdd8 	bl	8016990 <nk_vec2>
 800ede0:	eeb0 7a40 	vmov.f32	s14, s0
 800ede4:	eef0 7a60 	vmov.f32	s15, s1
 800ede8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800edec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        text.background = background;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	64bb      	str	r3, [r7, #72]	; 0x48
        text.text = foreground;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	64fb      	str	r3, [r7, #76]	; 0x4c
        nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);
 800edf8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800edfc:	ed97 6a04 	vldr	s12, [r7, #16]
 800ee00:	edd7 6a05 	vldr	s13, [r7, #20]
 800ee04:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee08:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	2312      	movs	r3, #18
 800ee14:	9300      	str	r3, [sp, #0]
 800ee16:	4613      	mov	r3, r2
 800ee18:	2201      	movs	r2, #1
 800ee1a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ee1c:	eeb0 0a46 	vmov.f32	s0, s12
 800ee20:	eef0 0a66 	vmov.f32	s1, s13
 800ee24:	eeb0 1a47 	vmov.f32	s2, s14
 800ee28:	eef0 1a67 	vmov.f32	s3, s15
 800ee2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee2e:	f010 fb9d 	bl	801f56c <nk_widget_text>
    } break;
 800ee32:	e101      	b.n	800f038 <nk_draw_symbol+0x304>
    case NK_SYMBOL_CIRCLE_SOLID:
    case NK_SYMBOL_CIRCLE_OUTLINE:
    case NK_SYMBOL_RECT_SOLID:
    case NK_SYMBOL_RECT_OUTLINE: {
        /* simple empty/filled shapes */
        if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {
 800ee34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee38:	2b05      	cmp	r3, #5
 800ee3a:	d003      	beq.n	800ee44 <nk_draw_symbol+0x110>
 800ee3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee40:	2b06      	cmp	r3, #6
 800ee42:	d155      	bne.n	800eef0 <nk_draw_symbol+0x1bc>
            nk_fill_rect(out, content,  0, foreground);
 800ee44:	ed97 6a04 	vldr	s12, [r7, #16]
 800ee48:	edd7 6a05 	vldr	s13, [r7, #20]
 800ee4c:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee50:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee54:	68b9      	ldr	r1, [r7, #8]
 800ee56:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800f050 <nk_draw_symbol+0x31c>
 800ee5a:	eeb0 0a46 	vmov.f32	s0, s12
 800ee5e:	eef0 0a66 	vmov.f32	s1, s13
 800ee62:	eeb0 1a47 	vmov.f32	s2, s14
 800ee66:	eef0 1a67 	vmov.f32	s3, s15
 800ee6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee6c:	f002 fe18 	bl	8011aa0 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800ee70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee74:	2b06      	cmp	r3, #6
 800ee76:	f040 808d 	bne.w	800ef94 <nk_draw_symbol+0x260>
                nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);
 800ee7a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ee7e:	edd7 6a05 	vldr	s13, [r7, #20]
 800ee82:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee86:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee8a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee8e:	eeb0 0a46 	vmov.f32	s0, s12
 800ee92:	eef0 0a66 	vmov.f32	s1, s13
 800ee96:	eeb0 1a47 	vmov.f32	s2, s14
 800ee9a:	eef0 1a67 	vmov.f32	s3, s15
 800ee9e:	f007 fcf7 	bl	8016890 <nk_shrink_rect>
 800eea2:	eeb0 6a40 	vmov.f32	s12, s0
 800eea6:	eef0 6a60 	vmov.f32	s13, s1
 800eeaa:	eeb0 7a41 	vmov.f32	s14, s2
 800eeae:	eef0 7a61 	vmov.f32	s15, s3
 800eeb2:	ed87 6a14 	vstr	s12, [r7, #80]	; 0x50
 800eeb6:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 800eeba:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 800eebe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800eec2:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800eec6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800eeca:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800eece:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800eed2:	68f9      	ldr	r1, [r7, #12]
 800eed4:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800f050 <nk_draw_symbol+0x31c>
 800eed8:	eeb0 0a46 	vmov.f32	s0, s12
 800eedc:	eef0 0a66 	vmov.f32	s1, s13
 800eee0:	eeb0 1a47 	vmov.f32	s2, s14
 800eee4:	eef0 1a67 	vmov.f32	s3, s15
 800eee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeea:	f002 fdd9 	bl	8011aa0 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800eeee:	e051      	b.n	800ef94 <nk_draw_symbol+0x260>
        } else {
            nk_fill_circle(out, content, foreground);
 800eef0:	ed97 6a04 	vldr	s12, [r7, #16]
 800eef4:	edd7 6a05 	vldr	s13, [r7, #20]
 800eef8:	ed97 7a06 	vldr	s14, [r7, #24]
 800eefc:	edd7 7a07 	vldr	s15, [r7, #28]
 800ef00:	68b9      	ldr	r1, [r7, #8]
 800ef02:	eeb0 0a46 	vmov.f32	s0, s12
 800ef06:	eef0 0a66 	vmov.f32	s1, s13
 800ef0a:	eeb0 1a47 	vmov.f32	s2, s14
 800ef0e:	eef0 1a67 	vmov.f32	s3, s15
 800ef12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef14:	f002 feba 	bl	8011c8c <nk_fill_circle>
            if (type == NK_SYMBOL_CIRCLE_OUTLINE)
 800ef18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	f040 808a 	bne.w	800f036 <nk_draw_symbol+0x302>
                nk_fill_circle(out, nk_shrink_rect(content, 1), background);
 800ef22:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef26:	edd7 6a05 	vldr	s13, [r7, #20]
 800ef2a:	ed97 7a06 	vldr	s14, [r7, #24]
 800ef2e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ef32:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800ef36:	eeb0 0a46 	vmov.f32	s0, s12
 800ef3a:	eef0 0a66 	vmov.f32	s1, s13
 800ef3e:	eeb0 1a47 	vmov.f32	s2, s14
 800ef42:	eef0 1a67 	vmov.f32	s3, s15
 800ef46:	f007 fca3 	bl	8016890 <nk_shrink_rect>
 800ef4a:	eeb0 6a40 	vmov.f32	s12, s0
 800ef4e:	eef0 6a60 	vmov.f32	s13, s1
 800ef52:	eeb0 7a41 	vmov.f32	s14, s2
 800ef56:	eef0 7a61 	vmov.f32	s15, s3
 800ef5a:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 800ef5e:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 800ef62:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 800ef66:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800ef6a:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800ef6e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800ef72:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800ef76:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ef7a:	68f9      	ldr	r1, [r7, #12]
 800ef7c:	eeb0 0a46 	vmov.f32	s0, s12
 800ef80:	eef0 0a66 	vmov.f32	s1, s13
 800ef84:	eeb0 1a47 	vmov.f32	s2, s14
 800ef88:	eef0 1a67 	vmov.f32	s3, s15
 800ef8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef8e:	f002 fe7d 	bl	8011c8c <nk_fill_circle>
        }
    } break;
 800ef92:	e050      	b.n	800f036 <nk_draw_symbol+0x302>
 800ef94:	e04f      	b.n	800f036 <nk_draw_symbol+0x302>
    case NK_SYMBOL_TRIANGLE_DOWN:
    case NK_SYMBOL_TRIANGLE_LEFT:
    case NK_SYMBOL_TRIANGLE_RIGHT: {
        enum nk_heading heading;
        struct nk_vec2 points[3];
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 800ef96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef9a:	2b0a      	cmp	r3, #10
 800ef9c:	d00d      	beq.n	800efba <nk_draw_symbol+0x286>
 800ef9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efa2:	2b09      	cmp	r3, #9
 800efa4:	d007      	beq.n	800efb6 <nk_draw_symbol+0x282>
 800efa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efaa:	2b07      	cmp	r3, #7
 800efac:	d101      	bne.n	800efb2 <nk_draw_symbol+0x27e>
 800efae:	2300      	movs	r3, #0
 800efb0:	e004      	b.n	800efbc <nk_draw_symbol+0x288>
 800efb2:	2302      	movs	r3, #2
 800efb4:	e002      	b.n	800efbc <nk_draw_symbol+0x288>
 800efb6:	2303      	movs	r3, #3
 800efb8:	e000      	b.n	800efbc <nk_draw_symbol+0x288>
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            (type == NK_SYMBOL_TRIANGLE_LEFT) ? NK_LEFT:
            (type == NK_SYMBOL_TRIANGLE_UP) ? NK_UP: NK_DOWN;
        nk_triangle_from_direction(points, content, 0, 0, heading);
 800efc0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800efc4:	ed97 6a04 	vldr	s12, [r7, #16]
 800efc8:	edd7 6a05 	vldr	s13, [r7, #20]
 800efcc:	ed97 7a06 	vldr	s14, [r7, #24]
 800efd0:	edd7 7a07 	vldr	s15, [r7, #28]
 800efd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efd8:	4611      	mov	r1, r2
 800efda:	eddf 2a1d 	vldr	s5, [pc, #116]	; 800f050 <nk_draw_symbol+0x31c>
 800efde:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 800f050 <nk_draw_symbol+0x31c>
 800efe2:	eeb0 0a46 	vmov.f32	s0, s12
 800efe6:	eef0 0a66 	vmov.f32	s1, s13
 800efea:	eeb0 1a47 	vmov.f32	s2, s14
 800efee:	eef0 1a67 	vmov.f32	s3, s15
 800eff2:	4618      	mov	r0, r3
 800eff4:	f007 fd9e 	bl	8016b34 <nk_triangle_from_direction>
        nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
 800eff8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800effc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f000:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800f004:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800f008:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800f00c:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800f010:	68b9      	ldr	r1, [r7, #8]
 800f012:	eef0 2a45 	vmov.f32	s5, s10
 800f016:	eeb0 2a65 	vmov.f32	s4, s11
 800f01a:	eef0 1a46 	vmov.f32	s3, s12
 800f01e:	eeb0 1a66 	vmov.f32	s2, s13
 800f022:	eef0 0a47 	vmov.f32	s1, s14
 800f026:	eeb0 0a67 	vmov.f32	s0, s15
 800f02a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f02c:	f002 ff18 	bl	8011e60 <nk_fill_triangle>
            points[2].x, points[2].y, foreground);
    } break;
 800f030:	e002      	b.n	800f038 <nk_draw_symbol+0x304>
    default:
    case NK_SYMBOL_NONE:
    case NK_SYMBOL_MAX: break;
 800f032:	bf00      	nop
 800f034:	e000      	b.n	800f038 <nk_draw_symbol+0x304>
    } break;
 800f036:	bf00      	nop
    }
}
 800f038:	bf00      	nop
 800f03a:	3778      	adds	r7, #120	; 0x78
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	080285e8 	.word	0x080285e8
 800f044:	080285ec 	.word	0x080285ec
 800f048:	080285f0 	.word	0x080285f0
 800f04c:	080285f4 	.word	0x080285f4
 800f050:	00000000 	.word	0x00000000

0800f054 <nk_button_behavior>:
NK_LIB nk_bool
nk_button_behavior(nk_flags *state, struct nk_rect r,
    const struct nk_input *i, enum nk_button_behavior behavior)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08a      	sub	sp, #40	; 0x28
 800f058:	af00      	add	r7, sp, #0
 800f05a:	61f8      	str	r0, [r7, #28]
 800f05c:	eeb0 6a40 	vmov.f32	s12, s0
 800f060:	eef0 6a60 	vmov.f32	s13, s1
 800f064:	eeb0 7a41 	vmov.f32	s14, s2
 800f068:	eef0 7a61 	vmov.f32	s15, s3
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	4613      	mov	r3, r2
 800f070:	ed87 6a03 	vstr	s12, [r7, #12]
 800f074:	edc7 6a04 	vstr	s13, [r7, #16]
 800f078:	ed87 7a05 	vstr	s14, [r7, #20]
 800f07c:	edc7 7a06 	vstr	s15, [r7, #24]
 800f080:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800f082:	2300      	movs	r3, #0
 800f084:	627b      	str	r3, [r7, #36]	; 0x24
    nk_widget_state_reset(state);
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 0302 	and.w	r3, r3, #2
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d003      	beq.n	800f09a <nk_button_behavior+0x46>
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	2206      	movs	r2, #6
 800f096:	601a      	str	r2, [r3, #0]
 800f098:	e002      	b.n	800f0a0 <nk_button_behavior+0x4c>
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	2204      	movs	r2, #4
 800f09e:	601a      	str	r2, [r3, #0]
    if (!i) return 0;
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d101      	bne.n	800f0aa <nk_button_behavior+0x56>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	e088      	b.n	800f1bc <nk_button_behavior+0x168>
    if (nk_input_is_mouse_hovering_rect(i, r)) {
 800f0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0ae:	edd7 6a04 	vldr	s13, [r7, #16]
 800f0b2:	ed97 7a05 	vldr	s14, [r7, #20]
 800f0b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f0ba:	eeb0 0a46 	vmov.f32	s0, s12
 800f0be:	eef0 0a66 	vmov.f32	s1, s13
 800f0c2:	eeb0 1a47 	vmov.f32	s2, s14
 800f0c6:	eef0 1a67 	vmov.f32	s3, s15
 800f0ca:	68b8      	ldr	r0, [r7, #8]
 800f0cc:	f006 f9cc 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d032      	beq.n	800f13c <nk_button_behavior+0xe8>
        *state = NK_WIDGET_STATE_HOVERED;
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	2212      	movs	r2, #18
 800f0da:	601a      	str	r2, [r3, #0]
        if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))
 800f0dc:	2100      	movs	r1, #0
 800f0de:	68b8      	ldr	r0, [r7, #8]
 800f0e0:	f006 fa66 	bl	80155b0 <nk_input_is_mouse_down>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d002      	beq.n	800f0f0 <nk_button_behavior+0x9c>
            *state = NK_WIDGET_STATE_ACTIVE;
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	2222      	movs	r2, #34	; 0x22
 800f0ee:	601a      	str	r2, [r3, #0]
        if (nk_input_has_mouse_click_in_button_rect(i, NK_BUTTON_LEFT, r)) {
 800f0f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0f4:	edd7 6a04 	vldr	s13, [r7, #16]
 800f0f8:	ed97 7a05 	vldr	s14, [r7, #20]
 800f0fc:	edd7 7a06 	vldr	s15, [r7, #24]
 800f100:	eeb0 0a46 	vmov.f32	s0, s12
 800f104:	eef0 0a66 	vmov.f32	s1, s13
 800f108:	eeb0 1a47 	vmov.f32	s2, s14
 800f10c:	eef0 1a67 	vmov.f32	s3, s15
 800f110:	2100      	movs	r1, #0
 800f112:	68b8      	ldr	r0, [r7, #8]
 800f114:	f006 f89f 	bl	8015256 <nk_input_has_mouse_click_in_button_rect>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00e      	beq.n	800f13c <nk_button_behavior+0xe8>
            ret = (behavior != NK_BUTTON_DEFAULT) ?
                nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d005      	beq.n	800f130 <nk_button_behavior+0xdc>
 800f124:	2100      	movs	r1, #0
 800f126:	68b8      	ldr	r0, [r7, #8]
 800f128:	f006 fa42 	bl	80155b0 <nk_input_is_mouse_down>
 800f12c:	4603      	mov	r3, r0
 800f12e:	e004      	b.n	800f13a <nk_button_behavior+0xe6>
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
                nk_input_is_mouse_released(i, NK_BUTTON_LEFT);
#else
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
 800f130:	2100      	movs	r1, #0
 800f132:	68b8      	ldr	r0, [r7, #8]
 800f134:	f006 fa54 	bl	80155e0 <nk_input_is_mouse_pressed>
 800f138:	4603      	mov	r3, r0
            ret = (behavior != NK_BUTTON_DEFAULT) ?
 800f13a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f003 0310 	and.w	r3, r3, #16
 800f144:	2b00      	cmp	r3, #0
 800f146:	d01c      	beq.n	800f182 <nk_button_behavior+0x12e>
 800f148:	ed97 6a03 	vldr	s12, [r7, #12]
 800f14c:	edd7 6a04 	vldr	s13, [r7, #16]
 800f150:	ed97 7a05 	vldr	s14, [r7, #20]
 800f154:	edd7 7a06 	vldr	s15, [r7, #24]
 800f158:	eeb0 0a46 	vmov.f32	s0, s12
 800f15c:	eef0 0a66 	vmov.f32	s1, s13
 800f160:	eeb0 1a47 	vmov.f32	s2, s14
 800f164:	eef0 1a67 	vmov.f32	s3, s15
 800f168:	68b8      	ldr	r0, [r7, #8]
 800f16a:	f006 f9cf 	bl	801550c <nk_input_is_mouse_prev_hovering_rect>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <nk_button_behavior+0x12e>
        *state |= NK_WIDGET_STATE_ENTERED;
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f043 0208 	orr.w	r2, r3, #8
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	601a      	str	r2, [r3, #0]
 800f180:	e01b      	b.n	800f1ba <nk_button_behavior+0x166>
    else if (nk_input_is_mouse_prev_hovering_rect(i, r))
 800f182:	ed97 6a03 	vldr	s12, [r7, #12]
 800f186:	edd7 6a04 	vldr	s13, [r7, #16]
 800f18a:	ed97 7a05 	vldr	s14, [r7, #20]
 800f18e:	edd7 7a06 	vldr	s15, [r7, #24]
 800f192:	eeb0 0a46 	vmov.f32	s0, s12
 800f196:	eef0 0a66 	vmov.f32	s1, s13
 800f19a:	eeb0 1a47 	vmov.f32	s2, s14
 800f19e:	eef0 1a67 	vmov.f32	s3, s15
 800f1a2:	68b8      	ldr	r0, [r7, #8]
 800f1a4:	f006 f9b2 	bl	801550c <nk_input_is_mouse_prev_hovering_rect>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d005      	beq.n	800f1ba <nk_button_behavior+0x166>
        *state |= NK_WIDGET_STATE_LEFT;
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	601a      	str	r2, [r3, #0]
    return ret;
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3728      	adds	r7, #40	; 0x28
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <nk_draw_button>:
NK_LIB const struct nk_style_item*
nk_draw_button(struct nk_command_buffer *out,
    const struct nk_rect *bounds, nk_flags state,
    const struct nk_style_button *style)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    if (state & NK_WIDGET_STATE_HOVER)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f003 0310 	and.w	r3, r3, #16
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d003      	beq.n	800f1e4 <nk_draw_button+0x20>
        background = &style->hover;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	331c      	adds	r3, #28
 800f1e0:	617b      	str	r3, [r7, #20]
 800f1e2:	e00a      	b.n	800f1fa <nk_draw_button+0x36>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f003 0320 	and.w	r3, r3, #32
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <nk_draw_button+0x32>
        background = &style->active;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	3338      	adds	r3, #56	; 0x38
 800f1f2:	617b      	str	r3, [r7, #20]
 800f1f4:	e001      	b.n	800f1fa <nk_draw_button+0x36>
    else background = &style->normal;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	617b      	str	r3, [r7, #20]

    switch(background->type) {
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d01e      	beq.n	800f240 <nk_draw_button+0x7c>
 800f202:	2b02      	cmp	r3, #2
 800f204:	dc71      	bgt.n	800f2ea <nk_draw_button+0x126>
 800f206:	2b00      	cmp	r3, #0
 800f208:	d033      	beq.n	800f272 <nk_draw_button+0xae>
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d16d      	bne.n	800f2ea <nk_draw_button+0x126>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	1d19      	adds	r1, r3, #4
 800f212:	4a38      	ldr	r2, [pc, #224]	; (800f2f4 <nk_draw_button+0x130>)
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	ed93 6a00 	vldr	s12, [r3]
 800f21a:	edd3 6a01 	vldr	s13, [r3, #4]
 800f21e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f222:	edd3 7a03 	vldr	s15, [r3, #12]
 800f226:	6812      	ldr	r2, [r2, #0]
 800f228:	eeb0 0a46 	vmov.f32	s0, s12
 800f22c:	eef0 0a66 	vmov.f32	s1, s13
 800f230:	eeb0 1a47 	vmov.f32	s2, s14
 800f234:	eef0 1a67 	vmov.f32	s3, s15
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f002 ff8b 	bl	8012154 <nk_draw_image>
            break;
 800f23e:	e054      	b.n	800f2ea <nk_draw_button+0x126>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	1d19      	adds	r1, r3, #4
 800f244:	4a2b      	ldr	r2, [pc, #172]	; (800f2f4 <nk_draw_button+0x130>)
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	ed93 6a00 	vldr	s12, [r3]
 800f24c:	edd3 6a01 	vldr	s13, [r3, #4]
 800f250:	ed93 7a02 	vldr	s14, [r3, #8]
 800f254:	edd3 7a03 	vldr	s15, [r3, #12]
 800f258:	6812      	ldr	r2, [r2, #0]
 800f25a:	eeb0 0a46 	vmov.f32	s0, s12
 800f25e:	eef0 0a66 	vmov.f32	s1, s13
 800f262:	eeb0 1a47 	vmov.f32	s2, s14
 800f266:	eef0 1a67 	vmov.f32	s3, s15
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f003 f864 	bl	8012338 <nk_draw_nine_slice>
            break;
 800f270:	e03b      	b.n	800f2ea <nk_draw_button+0x126>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	ed93 6a00 	vldr	s12, [r3]
 800f280:	edd3 6a01 	vldr	s13, [r3, #4]
 800f284:	ed93 7a02 	vldr	s14, [r3, #8]
 800f288:	edd3 7a03 	vldr	s15, [r3, #12]
 800f28c:	6851      	ldr	r1, [r2, #4]
 800f28e:	eeb0 2a65 	vmov.f32	s4, s11
 800f292:	eeb0 0a46 	vmov.f32	s0, s12
 800f296:	eef0 0a66 	vmov.f32	s1, s13
 800f29a:	eeb0 1a47 	vmov.f32	s2, s14
 800f29e:	eef0 1a67 	vmov.f32	s3, s15
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f002 fbfc 	bl	8011aa0 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	ed93 6a00 	vldr	s12, [r3]
 800f2bc:	edd3 6a01 	vldr	s13, [r3, #4]
 800f2c0:	ed93 7a02 	vldr	s14, [r3, #8]
 800f2c4:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2c8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f2ca:	eef0 2a45 	vmov.f32	s5, s10
 800f2ce:	eeb0 2a65 	vmov.f32	s4, s11
 800f2d2:	eeb0 0a46 	vmov.f32	s0, s12
 800f2d6:	eef0 0a66 	vmov.f32	s1, s13
 800f2da:	eeb0 1a47 	vmov.f32	s2, s14
 800f2de:	eef0 1a67 	vmov.f32	s3, s15
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f002 fad4 	bl	8011890 <nk_stroke_rect>
            break;
 800f2e8:	bf00      	nop
    }
    return background;
 800f2ea:	697b      	ldr	r3, [r7, #20]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3718      	adds	r7, #24
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	0802a4cc 	.word	0x0802a4cc

0800f2f8 <nk_do_button>:
NK_LIB nk_bool
nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,
    const struct nk_style_button *style, const struct nk_input *in,
    enum nk_button_behavior behavior, struct nk_rect *content)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b08c      	sub	sp, #48	; 0x30
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	61f8      	str	r0, [r7, #28]
 800f300:	61b9      	str	r1, [r7, #24]
 800f302:	eeb0 6a40 	vmov.f32	s12, s0
 800f306:	eef0 6a60 	vmov.f32	s13, s1
 800f30a:	eeb0 7a41 	vmov.f32	s14, s2
 800f30e:	eef0 7a61 	vmov.f32	s15, s3
 800f312:	607a      	str	r2, [r7, #4]
 800f314:	603b      	str	r3, [r7, #0]
 800f316:	ed87 6a02 	vstr	s12, [r7, #8]
 800f31a:	edc7 6a03 	vstr	s13, [r7, #12]
 800f31e:	ed87 7a04 	vstr	s14, [r7, #16]
 800f322:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect bounds;
    NK_ASSERT(style);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d105      	bne.n	800f338 <nk_do_button+0x40>
 800f32c:	4b5d      	ldr	r3, [pc, #372]	; (800f4a4 <nk_do_button+0x1ac>)
 800f32e:	4a5e      	ldr	r2, [pc, #376]	; (800f4a8 <nk_do_button+0x1b0>)
 800f330:	2179      	movs	r1, #121	; 0x79
 800f332:	485e      	ldr	r0, [pc, #376]	; (800f4ac <nk_do_button+0x1b4>)
 800f334:	f015 fbd0 	bl	8024ad8 <__assert_func>
    NK_ASSERT(state);
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <nk_do_button+0x52>
 800f33e:	4b5c      	ldr	r3, [pc, #368]	; (800f4b0 <nk_do_button+0x1b8>)
 800f340:	4a59      	ldr	r2, [pc, #356]	; (800f4a8 <nk_do_button+0x1b0>)
 800f342:	217a      	movs	r1, #122	; 0x7a
 800f344:	4859      	ldr	r0, [pc, #356]	; (800f4ac <nk_do_button+0x1b4>)
 800f346:	f015 fbc7 	bl	8024ad8 <__assert_func>
    NK_ASSERT(out);
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d105      	bne.n	800f35c <nk_do_button+0x64>
 800f350:	4b58      	ldr	r3, [pc, #352]	; (800f4b4 <nk_do_button+0x1bc>)
 800f352:	4a55      	ldr	r2, [pc, #340]	; (800f4a8 <nk_do_button+0x1b0>)
 800f354:	217b      	movs	r1, #123	; 0x7b
 800f356:	4855      	ldr	r0, [pc, #340]	; (800f4ac <nk_do_button+0x1b4>)
 800f358:	f015 fbbe 	bl	8024ad8 <__assert_func>
    if (!out || !style)
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d002      	beq.n	800f368 <nk_do_button+0x70>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d101      	bne.n	800f36c <nk_do_button+0x74>
        return nk_false;
 800f368:	2300      	movs	r3, #0
 800f36a:	e097      	b.n	800f49c <nk_do_button+0x1a4>

    /* calculate button content space */
    content->x = r.x + style->padding.x + style->border + style->rounding;
 800f36c:	ed97 7a02 	vldr	s14, [r7, #8]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800f376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f380:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f38a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f390:	edc3 7a00 	vstr	s15, [r3]
    content->y = r.y + style->padding.y + style->border + style->rounding;
 800f394:	ed97 7a03 	vldr	s14, [r7, #12]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800f39e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f3a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f3b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b8:	edc3 7a01 	vstr	s15, [r3, #4]
    content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);
 800f3bc:	ed97 7a04 	vldr	s14, [r7, #16]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800f3c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f3d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f3da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3e8:	edc3 7a02 	vstr	s15, [r3, #8]
    content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);
 800f3ec:	ed97 7a05 	vldr	s14, [r7, #20]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800f3f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f400:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f40a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f412:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f418:	edc3 7a03 	vstr	s15, [r3, #12]

    /* execute button behavior */
    bounds.x = r.x - style->touch_padding.x;
 800f41c:	ed97 7a02 	vldr	s14, [r7, #8]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f42a:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.y = r.y - style->touch_padding.y;
 800f42e:	ed97 7a03 	vldr	s14, [r7, #12]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f43c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = r.w + 2 * style->touch_padding.x;
 800f440:	ed97 7a04 	vldr	s14, [r7, #16]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f44a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f452:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    bounds.h = r.h + 2 * style->touch_padding.y;
 800f456:	ed97 7a05 	vldr	s14, [r7, #20]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f460:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f464:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f468:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return nk_button_behavior(state, bounds, in, behavior);
 800f46c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f470:	ed97 6a08 	vldr	s12, [r7, #32]
 800f474:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f478:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f47c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f480:	461a      	mov	r2, r3
 800f482:	6839      	ldr	r1, [r7, #0]
 800f484:	eeb0 0a46 	vmov.f32	s0, s12
 800f488:	eef0 0a66 	vmov.f32	s1, s13
 800f48c:	eeb0 1a47 	vmov.f32	s2, s14
 800f490:	eef0 1a67 	vmov.f32	s3, s15
 800f494:	69f8      	ldr	r0, [r7, #28]
 800f496:	f7ff fddd 	bl	800f054 <nk_button_behavior>
 800f49a:	4603      	mov	r3, r0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3730      	adds	r7, #48	; 0x30
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	080285f8 	.word	0x080285f8
 800f4a8:	0802a4d0 	.word	0x0802a4d0
 800f4ac:	08028600 	.word	0x08028600
 800f4b0:	0802861c 	.word	0x0802861c
 800f4b4:	08028624 	.word	0x08028624

0800f4b8 <nk_draw_button_text>:
NK_LIB void
nk_draw_button_text(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content, nk_flags state,
    const struct nk_style_button *style, const char *txt, int len,
    nk_flags text_alignment, const struct nk_user_font *font)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b08c      	sub	sp, #48	; 0x30
 800f4bc:	af02      	add	r7, sp, #8
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
 800f4c4:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;
    background = nk_draw_button(out, bounds, state, style);
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	68b9      	ldr	r1, [r7, #8]
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f7ff fe79 	bl	800f1c4 <nk_draw_button>
 800f4d2:	6278      	str	r0, [r7, #36]	; 0x24

    /* select correct colors/images */
    if (background->type == NK_STYLE_ITEM_COLOR)
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d103      	bne.n	800f4e4 <nk_draw_button_text+0x2c>
        text.background = background->data.color;
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	61fb      	str	r3, [r7, #28]
 800f4e2:	e002      	b.n	800f4ea <nk_draw_button_text+0x32>
    else text.background = style->text_background;
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4e8:	61fb      	str	r3, [r7, #28]
    if (state & NK_WIDGET_STATE_HOVER)
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	f003 0310 	and.w	r3, r3, #16
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d003      	beq.n	800f4fc <nk_draw_button_text+0x44>
        text.text = style->text_hover;
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4f8:	623b      	str	r3, [r7, #32]
 800f4fa:	e00b      	b.n	800f514 <nk_draw_button_text+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	f003 0320 	and.w	r3, r3, #32
 800f502:	2b00      	cmp	r3, #0
 800f504:	d003      	beq.n	800f50e <nk_draw_button_text+0x56>
        text.text = style->text_active;
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f50a:	623b      	str	r3, [r7, #32]
 800f50c:	e002      	b.n	800f514 <nk_draw_button_text+0x5c>
    else text.text = style->text_normal;
 800f50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f512:	623b      	str	r3, [r7, #32]

    text.padding = nk_vec2(0,0);
 800f514:	eddf 0a17 	vldr	s1, [pc, #92]	; 800f574 <nk_draw_button_text+0xbc>
 800f518:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800f574 <nk_draw_button_text+0xbc>
 800f51c:	f007 fa38 	bl	8016990 <nk_vec2>
 800f520:	eeb0 7a40 	vmov.f32	s14, s0
 800f524:	eef0 7a60 	vmov.f32	s15, s1
 800f528:	ed87 7a05 	vstr	s14, [r7, #20]
 800f52c:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *content, txt, len, &text, text_alignment, font);
 800f530:	f107 0214 	add.w	r2, r7, #20
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	ed93 6a00 	vldr	s12, [r3]
 800f53a:	edd3 6a01 	vldr	s13, [r3, #4]
 800f53e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f542:	edd3 7a03 	vldr	s15, [r3, #12]
 800f546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f548:	9301      	str	r3, [sp, #4]
 800f54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	4613      	mov	r3, r2
 800f550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f554:	eeb0 0a46 	vmov.f32	s0, s12
 800f558:	eef0 0a66 	vmov.f32	s1, s13
 800f55c:	eeb0 1a47 	vmov.f32	s2, s14
 800f560:	eef0 1a67 	vmov.f32	s3, s15
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f010 f801 	bl	801f56c <nk_widget_text>
}
 800f56a:	bf00      	nop
 800f56c:	3728      	adds	r7, #40	; 0x28
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	00000000 	.word	0x00000000

0800f578 <nk_do_button_text>:
nk_do_button_text(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    const char *string, int len, nk_flags align, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b094      	sub	sp, #80	; 0x50
 800f57c:	af06      	add	r7, sp, #24
 800f57e:	61f8      	str	r0, [r7, #28]
 800f580:	61b9      	str	r1, [r7, #24]
 800f582:	eeb0 6a40 	vmov.f32	s12, s0
 800f586:	eef0 6a60 	vmov.f32	s13, s1
 800f58a:	eeb0 7a41 	vmov.f32	s14, s2
 800f58e:	eef0 7a61 	vmov.f32	s15, s3
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	603b      	str	r3, [r7, #0]
 800f596:	ed87 6a02 	vstr	s12, [r7, #8]
 800f59a:	edc7 6a03 	vstr	s13, [r7, #12]
 800f59e:	ed87 7a04 	vstr	s14, [r7, #16]
 800f5a2:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect content;
    int ret = nk_false;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	637b      	str	r3, [r7, #52]	; 0x34

    NK_ASSERT(state);
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d105      	bne.n	800f5bc <nk_do_button_text+0x44>
 800f5b0:	4b43      	ldr	r3, [pc, #268]	; (800f6c0 <nk_do_button_text+0x148>)
 800f5b2:	4a44      	ldr	r2, [pc, #272]	; (800f6c4 <nk_do_button_text+0x14c>)
 800f5b4:	21ad      	movs	r1, #173	; 0xad
 800f5b6:	4844      	ldr	r0, [pc, #272]	; (800f6c8 <nk_do_button_text+0x150>)
 800f5b8:	f015 fa8e 	bl	8024ad8 <__assert_func>
    NK_ASSERT(style);
 800f5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d105      	bne.n	800f5ce <nk_do_button_text+0x56>
 800f5c2:	4b42      	ldr	r3, [pc, #264]	; (800f6cc <nk_do_button_text+0x154>)
 800f5c4:	4a3f      	ldr	r2, [pc, #252]	; (800f6c4 <nk_do_button_text+0x14c>)
 800f5c6:	21ae      	movs	r1, #174	; 0xae
 800f5c8:	483f      	ldr	r0, [pc, #252]	; (800f6c8 <nk_do_button_text+0x150>)
 800f5ca:	f015 fa85 	bl	8024ad8 <__assert_func>
    NK_ASSERT(out);
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d105      	bne.n	800f5e0 <nk_do_button_text+0x68>
 800f5d4:	4b3e      	ldr	r3, [pc, #248]	; (800f6d0 <nk_do_button_text+0x158>)
 800f5d6:	4a3b      	ldr	r2, [pc, #236]	; (800f6c4 <nk_do_button_text+0x14c>)
 800f5d8:	21af      	movs	r1, #175	; 0xaf
 800f5da:	483b      	ldr	r0, [pc, #236]	; (800f6c8 <nk_do_button_text+0x150>)
 800f5dc:	f015 fa7c 	bl	8024ad8 <__assert_func>
    NK_ASSERT(string);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d105      	bne.n	800f5f2 <nk_do_button_text+0x7a>
 800f5e6:	4b3b      	ldr	r3, [pc, #236]	; (800f6d4 <nk_do_button_text+0x15c>)
 800f5e8:	4a36      	ldr	r2, [pc, #216]	; (800f6c4 <nk_do_button_text+0x14c>)
 800f5ea:	21b0      	movs	r1, #176	; 0xb0
 800f5ec:	4836      	ldr	r0, [pc, #216]	; (800f6c8 <nk_do_button_text+0x150>)
 800f5ee:	f015 fa73 	bl	8024ad8 <__assert_func>
    NK_ASSERT(font);
 800f5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d105      	bne.n	800f604 <nk_do_button_text+0x8c>
 800f5f8:	4b37      	ldr	r3, [pc, #220]	; (800f6d8 <nk_do_button_text+0x160>)
 800f5fa:	4a32      	ldr	r2, [pc, #200]	; (800f6c4 <nk_do_button_text+0x14c>)
 800f5fc:	21b1      	movs	r1, #177	; 0xb1
 800f5fe:	4832      	ldr	r0, [pc, #200]	; (800f6c8 <nk_do_button_text+0x150>)
 800f600:	f015 fa6a 	bl	8024ad8 <__assert_func>
    if (!out || !style || !font || !string)
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d008      	beq.n	800f61c <nk_do_button_text+0xa4>
 800f60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d005      	beq.n	800f61c <nk_do_button_text+0xa4>
 800f610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f612:	2b00      	cmp	r3, #0
 800f614:	d002      	beq.n	800f61c <nk_do_button_text+0xa4>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d101      	bne.n	800f620 <nk_do_button_text+0xa8>
        return nk_false;
 800f61c:	2300      	movs	r3, #0
 800f61e:	e04b      	b.n	800f6b8 <nk_do_button_text+0x140>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800f620:	ed97 6a02 	vldr	s12, [r7, #8]
 800f624:	edd7 6a03 	vldr	s13, [r7, #12]
 800f628:	ed97 7a04 	vldr	s14, [r7, #16]
 800f62c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f634:	9301      	str	r3, [sp, #4]
 800f636:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f63e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f640:	eeb0 0a46 	vmov.f32	s0, s12
 800f644:	eef0 0a66 	vmov.f32	s1, s13
 800f648:	eeb0 1a47 	vmov.f32	s2, s14
 800f64c:	eef0 1a67 	vmov.f32	s3, s15
 800f650:	69b9      	ldr	r1, [r7, #24]
 800f652:	69f8      	ldr	r0, [r7, #28]
 800f654:	f7ff fe50 	bl	800f2f8 <nk_do_button>
 800f658:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800f65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f660:	2b00      	cmp	r3, #0
 800f662:	d007      	beq.n	800f674 <nk_do_button_text+0xfc>
 800f664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f66a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f66c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f670:	69b8      	ldr	r0, [r7, #24]
 800f672:	4798      	blx	r3
    nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	6818      	ldr	r0, [r3, #0]
 800f678:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f67c:	f107 0108 	add.w	r1, r7, #8
 800f680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f682:	9304      	str	r3, [sp, #16]
 800f684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f686:	9303      	str	r3, [sp, #12]
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	9302      	str	r3, [sp, #8]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	9301      	str	r3, [sp, #4]
 800f690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	4603      	mov	r3, r0
 800f696:	69b8      	ldr	r0, [r7, #24]
 800f698:	f7ff ff0e 	bl	800f4b8 <nk_draw_button_text>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800f69c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d007      	beq.n	800f6b6 <nk_do_button_text+0x13e>
 800f6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6ae:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f6b2:	69b8      	ldr	r0, [r7, #24]
 800f6b4:	4798      	blx	r3
    return ret;
 800f6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3738      	adds	r7, #56	; 0x38
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	0802861c 	.word	0x0802861c
 800f6c4:	0802a4e0 	.word	0x0802a4e0
 800f6c8:	08028600 	.word	0x08028600
 800f6cc:	080285f8 	.word	0x080285f8
 800f6d0:	08028624 	.word	0x08028624
 800f6d4:	08028628 	.word	0x08028628
 800f6d8:	08028630 	.word	0x08028630

0800f6dc <nk_draw_button_symbol>:
NK_LIB void
nk_draw_button_symbol(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content,
    nk_flags state, const struct nk_style_button *style,
    enum nk_symbol_type type, const struct nk_user_font *font)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08a      	sub	sp, #40	; 0x28
 800f6e0:	af02      	add	r7, sp, #8
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
 800f6e8:	603b      	str	r3, [r7, #0]
    struct nk_color sym, bg;
    const struct nk_style_item *background;

    /* select correct colors/images */
    background = nk_draw_button(out, bounds, state, style);
 800f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	68b9      	ldr	r1, [r7, #8]
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	f7ff fd67 	bl	800f1c4 <nk_draw_button>
 800f6f6:	61f8      	str	r0, [r7, #28]
    if (background->type == NK_STYLE_ITEM_COLOR)
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d103      	bne.n	800f708 <nk_draw_button_symbol+0x2c>
        bg = background->data.color;
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	617b      	str	r3, [r7, #20]
 800f706:	e002      	b.n	800f70e <nk_draw_button_symbol+0x32>
    else bg = style->text_background;
 800f708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f70c:	617b      	str	r3, [r7, #20]

    if (state & NK_WIDGET_STATE_HOVER)
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	f003 0310 	and.w	r3, r3, #16
 800f714:	2b00      	cmp	r3, #0
 800f716:	d003      	beq.n	800f720 <nk_draw_button_symbol+0x44>
        sym = style->text_hover;
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f71c:	61bb      	str	r3, [r7, #24]
 800f71e:	e00b      	b.n	800f738 <nk_draw_button_symbol+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	f003 0320 	and.w	r3, r3, #32
 800f726:	2b00      	cmp	r3, #0
 800f728:	d003      	beq.n	800f732 <nk_draw_button_symbol+0x56>
        sym = style->text_active;
 800f72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f72e:	61bb      	str	r3, [r7, #24]
 800f730:	e002      	b.n	800f738 <nk_draw_button_symbol+0x5c>
    else sym = style->text_normal;
 800f732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f736:	61bb      	str	r3, [r7, #24]
    nk_draw_symbol(out, type, *content, bg, sym, 1, font);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	ed93 6a00 	vldr	s12, [r3]
 800f73e:	edd3 6a01 	vldr	s13, [r3, #4]
 800f742:	ed93 7a02 	vldr	s14, [r3, #8]
 800f746:	edd3 7a03 	vldr	s15, [r3, #12]
 800f74a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800f74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	eeb0 0a46 	vmov.f32	s0, s12
 800f75e:	eef0 0a66 	vmov.f32	s1, s13
 800f762:	eeb0 1a47 	vmov.f32	s2, s14
 800f766:	eef0 1a67 	vmov.f32	s3, s15
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f7ff fae2 	bl	800ed34 <nk_draw_symbol>
}
 800f770:	bf00      	nop
 800f772:	3720      	adds	r7, #32
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <nk_do_button_symbol>:
nk_do_button_symbol(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    enum nk_symbol_type symbol, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b092      	sub	sp, #72	; 0x48
 800f77c:	af04      	add	r7, sp, #16
 800f77e:	61f8      	str	r0, [r7, #28]
 800f780:	61b9      	str	r1, [r7, #24]
 800f782:	eeb0 6a40 	vmov.f32	s12, s0
 800f786:	eef0 6a60 	vmov.f32	s13, s1
 800f78a:	eeb0 7a41 	vmov.f32	s14, s2
 800f78e:	eef0 7a61 	vmov.f32	s15, s3
 800f792:	4611      	mov	r1, r2
 800f794:	461a      	mov	r2, r3
 800f796:	ed87 6a02 	vstr	s12, [r7, #8]
 800f79a:	edc7 6a03 	vstr	s13, [r7, #12]
 800f79e:	ed87 7a04 	vstr	s14, [r7, #16]
 800f7a2:	edc7 7a05 	vstr	s15, [r7, #20]
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	71fb      	strb	r3, [r7, #7]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	71bb      	strb	r3, [r7, #6]
    int ret;
    struct nk_rect content;

    NK_ASSERT(state);
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d105      	bne.n	800f7c0 <nk_do_button_symbol+0x48>
 800f7b4:	4b3c      	ldr	r3, [pc, #240]	; (800f8a8 <nk_do_button_symbol+0x130>)
 800f7b6:	4a3d      	ldr	r2, [pc, #244]	; (800f8ac <nk_do_button_symbol+0x134>)
 800f7b8:	21db      	movs	r1, #219	; 0xdb
 800f7ba:	483d      	ldr	r0, [pc, #244]	; (800f8b0 <nk_do_button_symbol+0x138>)
 800f7bc:	f015 f98c 	bl	8024ad8 <__assert_func>
    NK_ASSERT(style);
 800f7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d105      	bne.n	800f7d2 <nk_do_button_symbol+0x5a>
 800f7c6:	4b3b      	ldr	r3, [pc, #236]	; (800f8b4 <nk_do_button_symbol+0x13c>)
 800f7c8:	4a38      	ldr	r2, [pc, #224]	; (800f8ac <nk_do_button_symbol+0x134>)
 800f7ca:	21dc      	movs	r1, #220	; 0xdc
 800f7cc:	4838      	ldr	r0, [pc, #224]	; (800f8b0 <nk_do_button_symbol+0x138>)
 800f7ce:	f015 f983 	bl	8024ad8 <__assert_func>
    NK_ASSERT(font);
 800f7d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d105      	bne.n	800f7e4 <nk_do_button_symbol+0x6c>
 800f7d8:	4b37      	ldr	r3, [pc, #220]	; (800f8b8 <nk_do_button_symbol+0x140>)
 800f7da:	4a34      	ldr	r2, [pc, #208]	; (800f8ac <nk_do_button_symbol+0x134>)
 800f7dc:	21dd      	movs	r1, #221	; 0xdd
 800f7de:	4834      	ldr	r0, [pc, #208]	; (800f8b0 <nk_do_button_symbol+0x138>)
 800f7e0:	f015 f97a 	bl	8024ad8 <__assert_func>
    NK_ASSERT(out);
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d105      	bne.n	800f7f6 <nk_do_button_symbol+0x7e>
 800f7ea:	4b34      	ldr	r3, [pc, #208]	; (800f8bc <nk_do_button_symbol+0x144>)
 800f7ec:	4a2f      	ldr	r2, [pc, #188]	; (800f8ac <nk_do_button_symbol+0x134>)
 800f7ee:	21de      	movs	r1, #222	; 0xde
 800f7f0:	482f      	ldr	r0, [pc, #188]	; (800f8b0 <nk_do_button_symbol+0x138>)
 800f7f2:	f015 f971 	bl	8024ad8 <__assert_func>
    if (!out || !style || !font || !state)
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d008      	beq.n	800f80e <nk_do_button_symbol+0x96>
 800f7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d005      	beq.n	800f80e <nk_do_button_symbol+0x96>
 800f802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f804:	2b00      	cmp	r3, #0
 800f806:	d002      	beq.n	800f80e <nk_do_button_symbol+0x96>
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d101      	bne.n	800f812 <nk_do_button_symbol+0x9a>
        return nk_false;
 800f80e:	2300      	movs	r3, #0
 800f810:	e046      	b.n	800f8a0 <nk_do_button_symbol+0x128>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800f812:	ed97 6a02 	vldr	s12, [r7, #8]
 800f816:	edd7 6a03 	vldr	s13, [r7, #12]
 800f81a:	ed97 7a04 	vldr	s14, [r7, #16]
 800f81e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f826:	9301      	str	r3, [sp, #4]
 800f828:	79bb      	ldrb	r3, [r7, #6]
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f82e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f830:	eeb0 0a46 	vmov.f32	s0, s12
 800f834:	eef0 0a66 	vmov.f32	s1, s13
 800f838:	eeb0 1a47 	vmov.f32	s2, s14
 800f83c:	eef0 1a67 	vmov.f32	s3, s15
 800f840:	69b9      	ldr	r1, [r7, #24]
 800f842:	69f8      	ldr	r0, [r7, #28]
 800f844:	f7ff fd58 	bl	800f2f8 <nk_do_button>
 800f848:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800f84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f850:	2b00      	cmp	r3, #0
 800f852:	d007      	beq.n	800f864 <nk_do_button_symbol+0xec>
 800f854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f85a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f85c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f860:	69b8      	ldr	r0, [r7, #24]
 800f862:	4798      	blx	r3
    nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	6818      	ldr	r0, [r3, #0]
 800f868:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f86c:	f107 0108 	add.w	r1, r7, #8
 800f870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f872:	9302      	str	r3, [sp, #8]
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	9301      	str	r3, [sp, #4]
 800f878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	4603      	mov	r3, r0
 800f87e:	69b8      	ldr	r0, [r7, #24]
 800f880:	f7ff ff2c 	bl	800f6dc <nk_draw_button_symbol>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800f884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d007      	beq.n	800f89e <nk_do_button_symbol+0x126>
 800f88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f896:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f89a:	69b8      	ldr	r0, [r7, #24]
 800f89c:	4798      	blx	r3
    return ret;
 800f89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3738      	adds	r7, #56	; 0x38
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	0802861c 	.word	0x0802861c
 800f8ac:	0802a4f4 	.word	0x0802a4f4
 800f8b0:	08028600 	.word	0x08028600
 800f8b4:	080285f8 	.word	0x080285f8
 800f8b8:	08028630 	.word	0x08028630
 800f8bc:	08028624 	.word	0x08028624

0800f8c0 <nk_button_set_behavior>:
    if (style->draw_end) style->draw_end(out, style->userdata);
    return ret;
}
NK_API void
nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <nk_button_set_behavior+0x20>
 800f8d2:	4b0b      	ldr	r3, [pc, #44]	; (800f900 <nk_button_set_behavior+0x40>)
 800f8d4:	4a0b      	ldr	r2, [pc, #44]	; (800f904 <nk_button_set_behavior+0x44>)
 800f8d6:	f240 118b 	movw	r1, #395	; 0x18b
 800f8da:	480b      	ldr	r0, [pc, #44]	; (800f908 <nk_button_set_behavior+0x48>)
 800f8dc:	f015 f8fc 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d007      	beq.n	800f8f6 <nk_button_set_behavior+0x36>
    ctx->button_behavior = behavior;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	78fb      	ldrb	r3, [r7, #3]
 800f8f0:	f882 3ad8 	strb.w	r3, [r2, #2776]	; 0xad8
 800f8f4:	e000      	b.n	800f8f8 <nk_button_set_behavior+0x38>
    if (!ctx) return;
 800f8f6:	bf00      	nop
}
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	08028638 	.word	0x08028638
 800f904:	0802a508 	.word	0x0802a508
 800f908:	08028600 	.word	0x08028600

0800f90c <nk_button_text_styled>:
    return 1;
}
NK_API nk_bool
nk_button_text_styled(struct nk_context *ctx,
    const struct nk_style_button *style, const char *title, int len)
{
 800f90c:	b590      	push	{r4, r7, lr}
 800f90e:	b093      	sub	sp, #76	; 0x4c
 800f910:	af06      	add	r7, sp, #24
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
 800f918:	603b      	str	r3, [r7, #0]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d106      	bne.n	800f92e <nk_button_text_styled+0x22>
 800f920:	4b4f      	ldr	r3, [pc, #316]	; (800fa60 <nk_button_text_styled+0x154>)
 800f922:	4a50      	ldr	r2, [pc, #320]	; (800fa64 <nk_button_text_styled+0x158>)
 800f924:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f928:	484f      	ldr	r0, [pc, #316]	; (800fa68 <nk_button_text_styled+0x15c>)
 800f92a:	f015 f8d5 	bl	8024ad8 <__assert_func>
    NK_ASSERT(style);
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d106      	bne.n	800f942 <nk_button_text_styled+0x36>
 800f934:	4b4d      	ldr	r3, [pc, #308]	; (800fa6c <nk_button_text_styled+0x160>)
 800f936:	4a4b      	ldr	r2, [pc, #300]	; (800fa64 <nk_button_text_styled+0x158>)
 800f938:	f240 11c1 	movw	r1, #449	; 0x1c1
 800f93c:	484a      	ldr	r0, [pc, #296]	; (800fa68 <nk_button_text_styled+0x15c>)
 800f93e:	f015 f8cb 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f948:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d106      	bne.n	800f95e <nk_button_text_styled+0x52>
 800f950:	4b47      	ldr	r3, [pc, #284]	; (800fa70 <nk_button_text_styled+0x164>)
 800f952:	4a44      	ldr	r2, [pc, #272]	; (800fa64 <nk_button_text_styled+0x158>)
 800f954:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800f958:	4843      	ldr	r0, [pc, #268]	; (800fa68 <nk_button_text_styled+0x15c>)
 800f95a:	f015 f8bd 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f964:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d106      	bne.n	800f97e <nk_button_text_styled+0x72>
 800f970:	4b40      	ldr	r3, [pc, #256]	; (800fa74 <nk_button_text_styled+0x168>)
 800f972:	4a3c      	ldr	r2, [pc, #240]	; (800fa64 <nk_button_text_styled+0x158>)
 800f974:	f240 11c3 	movw	r1, #451	; 0x1c3
 800f978:	483b      	ldr	r0, [pc, #236]	; (800fa68 <nk_button_text_styled+0x15c>)
 800f97a:	f015 f8ad 	bl	8024ad8 <__assert_func>
    if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d012      	beq.n	800f9aa <nk_button_text_styled+0x9e>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00f      	beq.n	800f9aa <nk_button_text_styled+0x9e>
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f990:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f994:	2b00      	cmp	r3, #0
 800f996:	d008      	beq.n	800f9aa <nk_button_text_styled+0x9e>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f99e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d101      	bne.n	800f9ae <nk_button_text_styled+0xa2>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	e054      	b.n	800fa58 <nk_button_text_styled+0x14c>

    win = ctx->current;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9b4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800f9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9c0:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800f9c2:	f107 0310 	add.w	r3, r7, #16
 800f9c6:	68f9      	ldr	r1, [r7, #12]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f013 fd9f 	bl	802350c <nk_widget>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!state) return 0;
 800f9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d101      	bne.n	800f9e0 <nk_button_text_styled+0xd4>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	e03b      	b.n	800fa58 <nk_button_text_styled+0x14c>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800f9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9e4:	2b02      	cmp	r3, #2
 800f9e6:	d007      	beq.n	800f9f8 <nk_button_text_styled+0xec>
 800f9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <nk_button_text_styled+0xec>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	e000      	b.n	800f9fa <nk_button_text_styled+0xee>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	623b      	str	r3, [r7, #32]
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800fa02:	3014      	adds	r0, #20
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	f103 0464 	add.w	r4, r3, #100	; 0x64
                    title, len, style->text_alignment, ctx->button_behavior,
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800fa0e:	68fa      	ldr	r2, [r7, #12]
 800fa10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa14:	f892 2ad8 	ldrb.w	r2, [r2, #2776]	; 0xad8
 800fa18:	68f9      	ldr	r1, [r7, #12]
 800fa1a:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 800fa1e:	ed97 6a04 	vldr	s12, [r7, #16]
 800fa22:	edd7 6a05 	vldr	s13, [r7, #20]
 800fa26:	ed97 7a06 	vldr	s14, [r7, #24]
 800fa2a:	edd7 7a07 	vldr	s15, [r7, #28]
 800fa2e:	9104      	str	r1, [sp, #16]
 800fa30:	6a39      	ldr	r1, [r7, #32]
 800fa32:	9103      	str	r1, [sp, #12]
 800fa34:	68b9      	ldr	r1, [r7, #8]
 800fa36:	9102      	str	r1, [sp, #8]
 800fa38:	9201      	str	r2, [sp, #4]
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	eeb0 0a46 	vmov.f32	s0, s12
 800fa44:	eef0 0a66 	vmov.f32	s1, s13
 800fa48:	eeb0 1a47 	vmov.f32	s2, s14
 800fa4c:	eef0 1a67 	vmov.f32	s3, s15
 800fa50:	4621      	mov	r1, r4
 800fa52:	f7ff fd91 	bl	800f578 <nk_do_button_text>
 800fa56:	4603      	mov	r3, r0
                    style, in, ctx->style.font);
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3734      	adds	r7, #52	; 0x34
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd90      	pop	{r4, r7, pc}
 800fa60:	08028638 	.word	0x08028638
 800fa64:	0802a520 	.word	0x0802a520
 800fa68:	08028600 	.word	0x08028600
 800fa6c:	080285f8 	.word	0x080285f8
 800fa70:	080286b4 	.word	0x080286b4
 800fa74:	080286c4 	.word	0x080286c4

0800fa78 <nk_button_text>:
NK_API nk_bool
nk_button_text(struct nk_context *ctx, const char *title, int len)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]
    NK_ASSERT(ctx);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d106      	bne.n	800fa98 <nk_button_text+0x20>
 800fa8a:	4b0c      	ldr	r3, [pc, #48]	; (800fabc <nk_button_text+0x44>)
 800fa8c:	4a0c      	ldr	r2, [pc, #48]	; (800fac0 <nk_button_text+0x48>)
 800fa8e:	f240 11d3 	movw	r1, #467	; 0x1d3
 800fa92:	480c      	ldr	r0, [pc, #48]	; (800fac4 <nk_button_text+0x4c>)
 800fa94:	f015 f820 	bl	8024ad8 <__assert_func>
    if (!ctx) return 0;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d101      	bne.n	800faa2 <nk_button_text+0x2a>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	e008      	b.n	800fab4 <nk_button_text+0x3c>
    return nk_button_text_styled(ctx, &ctx->style.button, title, len);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f7ff ff2d 	bl	800f90c <nk_button_text_styled>
 800fab2:	4603      	mov	r3, r0
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3710      	adds	r7, #16
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	08028638 	.word	0x08028638
 800fac0:	0802a538 	.word	0x0802a538
 800fac4:	08028600 	.word	0x08028600

0800fac8 <nk_button_label>:
    const struct nk_style_button *style, const char *title)
{
    return nk_button_text_styled(ctx, style, title, nk_strlen(title));
}
NK_API nk_bool nk_button_label(struct nk_context *ctx, const char *title)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
    return nk_button_text(ctx, title, nk_strlen(title));
 800fad2:	6838      	ldr	r0, [r7, #0]
 800fad4:	f012 fdf4 	bl	80226c0 <nk_strlen>
 800fad8:	4603      	mov	r3, r0
 800fada:	461a      	mov	r2, r3
 800fadc:	6839      	ldr	r1, [r7, #0]
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff ffca 	bl	800fa78 <nk_button_text>
 800fae4:	4603      	mov	r3, r0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
	...

0800faf0 <nk_button_symbol_styled>:
    return ret;
}
NK_API nk_bool
nk_button_symbol_styled(struct nk_context *ctx,
    const struct nk_style_button *style, enum nk_symbol_type symbol)
{
 800faf0:	b590      	push	{r4, r7, lr}
 800faf2:	b091      	sub	sp, #68	; 0x44
 800faf4:	af04      	add	r7, sp, #16
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	4613      	mov	r3, r2
 800fafc:	71fb      	strb	r3, [r7, #7]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d106      	bne.n	800fb12 <nk_button_symbol_styled+0x22>
 800fb04:	4b46      	ldr	r3, [pc, #280]	; (800fc20 <nk_button_symbol_styled+0x130>)
 800fb06:	4a47      	ldr	r2, [pc, #284]	; (800fc24 <nk_button_symbol_styled+0x134>)
 800fb08:	f240 210e 	movw	r1, #526	; 0x20e
 800fb0c:	4846      	ldr	r0, [pc, #280]	; (800fc28 <nk_button_symbol_styled+0x138>)
 800fb0e:	f014 ffe3 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb18:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d106      	bne.n	800fb2e <nk_button_symbol_styled+0x3e>
 800fb20:	4b42      	ldr	r3, [pc, #264]	; (800fc2c <nk_button_symbol_styled+0x13c>)
 800fb22:	4a40      	ldr	r2, [pc, #256]	; (800fc24 <nk_button_symbol_styled+0x134>)
 800fb24:	f240 210f 	movw	r1, #527	; 0x20f
 800fb28:	483f      	ldr	r0, [pc, #252]	; (800fc28 <nk_button_symbol_styled+0x138>)
 800fb2a:	f014 ffd5 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb34:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d106      	bne.n	800fb4e <nk_button_symbol_styled+0x5e>
 800fb40:	4b3b      	ldr	r3, [pc, #236]	; (800fc30 <nk_button_symbol_styled+0x140>)
 800fb42:	4a38      	ldr	r2, [pc, #224]	; (800fc24 <nk_button_symbol_styled+0x134>)
 800fb44:	f44f 7104 	mov.w	r1, #528	; 0x210
 800fb48:	4837      	ldr	r0, [pc, #220]	; (800fc28 <nk_button_symbol_styled+0x138>)
 800fb4a:	f014 ffc5 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00f      	beq.n	800fb74 <nk_button_symbol_styled+0x84>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb5a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d008      	beq.n	800fb74 <nk_button_symbol_styled+0x84>
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb68:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d101      	bne.n	800fb78 <nk_button_symbol_styled+0x88>
        return 0;
 800fb74:	2300      	movs	r3, #0
 800fb76:	e04f      	b.n	800fc18 <nk_button_symbol_styled+0x128>

    win = ctx->current;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb7e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb82:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb8a:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800fb8c:	f107 0310 	add.w	r3, r7, #16
 800fb90:	68f9      	ldr	r1, [r7, #12]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f013 fcba 	bl	802350c <nk_widget>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return 0;
 800fb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d101      	bne.n	800fbaa <nk_button_symbol_styled+0xba>
 800fba6:	2300      	movs	r3, #0
 800fba8:	e036      	b.n	800fc18 <nk_button_symbol_styled+0x128>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800fbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	d007      	beq.n	800fbc2 <nk_button_symbol_styled+0xd2>
 800fbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d101      	bne.n	800fbc2 <nk_button_symbol_styled+0xd2>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	e000      	b.n	800fbc4 <nk_button_symbol_styled+0xd4>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	623b      	str	r3, [r7, #32]
    return nk_do_button_symbol(&ctx->last_widget_state, &win->buffer, bounds,
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800fbcc:	3014      	adds	r0, #20
 800fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd0:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbda:	f893 4ad8 	ldrb.w	r4, [r3, #2776]	; 0xad8
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800fbe4:	79fa      	ldrb	r2, [r7, #7]
 800fbe6:	ed97 6a04 	vldr	s12, [r7, #16]
 800fbea:	edd7 6a05 	vldr	s13, [r7, #20]
 800fbee:	ed97 7a06 	vldr	s14, [r7, #24]
 800fbf2:	edd7 7a07 	vldr	s15, [r7, #28]
 800fbf6:	9302      	str	r3, [sp, #8]
 800fbf8:	6a3b      	ldr	r3, [r7, #32]
 800fbfa:	9301      	str	r3, [sp, #4]
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	4623      	mov	r3, r4
 800fc02:	eeb0 0a46 	vmov.f32	s0, s12
 800fc06:	eef0 0a66 	vmov.f32	s1, s13
 800fc0a:	eeb0 1a47 	vmov.f32	s2, s14
 800fc0e:	eef0 1a67 	vmov.f32	s3, s15
 800fc12:	f7ff fdb1 	bl	800f778 <nk_do_button_symbol>
 800fc16:	4603      	mov	r3, r0
            symbol, ctx->button_behavior, style, in, ctx->style.font);
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3734      	adds	r7, #52	; 0x34
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd90      	pop	{r4, r7, pc}
 800fc20:	08028638 	.word	0x08028638
 800fc24:	0802a548 	.word	0x0802a548
 800fc28:	08028600 	.word	0x08028600
 800fc2c:	080286b4 	.word	0x080286b4
 800fc30:	080286c4 	.word	0x080286c4

0800fc34 <nk_button_symbol>:
NK_API nk_bool
nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d106      	bne.n	800fc54 <nk_button_symbol+0x20>
 800fc46:	4b0c      	ldr	r3, [pc, #48]	; (800fc78 <nk_button_symbol+0x44>)
 800fc48:	4a0c      	ldr	r2, [pc, #48]	; (800fc7c <nk_button_symbol+0x48>)
 800fc4a:	f240 211f 	movw	r1, #543	; 0x21f
 800fc4e:	480c      	ldr	r0, [pc, #48]	; (800fc80 <nk_button_symbol+0x4c>)
 800fc50:	f014 ff42 	bl	8024ad8 <__assert_func>
    if (!ctx) return 0;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <nk_button_symbol+0x2a>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	e008      	b.n	800fc70 <nk_button_symbol+0x3c>
    return nk_button_symbol_styled(ctx, &ctx->style.button, symbol);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800fc64:	78fa      	ldrb	r2, [r7, #3]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff ff41 	bl	800faf0 <nk_button_symbol_styled>
 800fc6e:	4603      	mov	r3, r0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	08028638 	.word	0x08028638
 800fc7c:	0802a560 	.word	0x0802a560
 800fc80:	08028600 	.word	0x08028600

0800fc84 <nk_rgba>:
    }
    return i;
}
NK_API struct nk_color
nk_rgba(int r, int g, int b, int a)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b087      	sub	sp, #28
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	607a      	str	r2, [r7, #4]
 800fc90:	603b      	str	r3, [r7, #0]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	db07      	blt.n	800fca8 <nk_rgba+0x24>
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2bfe      	cmp	r3, #254	; 0xfe
 800fc9c:	dc02      	bgt.n	800fca4 <nk_rgba+0x20>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	e002      	b.n	800fcaa <nk_rgba+0x26>
 800fca4:	23ff      	movs	r3, #255	; 0xff
 800fca6:	e000      	b.n	800fcaa <nk_rgba+0x26>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	db07      	blt.n	800fcc2 <nk_rgba+0x3e>
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	2bfe      	cmp	r3, #254	; 0xfe
 800fcb6:	dc02      	bgt.n	800fcbe <nk_rgba+0x3a>
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	e002      	b.n	800fcc4 <nk_rgba+0x40>
 800fcbe:	23ff      	movs	r3, #255	; 0xff
 800fcc0:	e000      	b.n	800fcc4 <nk_rgba+0x40>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	db07      	blt.n	800fcdc <nk_rgba+0x58>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2bfe      	cmp	r3, #254	; 0xfe
 800fcd0:	dc02      	bgt.n	800fcd8 <nk_rgba+0x54>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	e002      	b.n	800fcde <nk_rgba+0x5a>
 800fcd8:	23ff      	movs	r3, #255	; 0xff
 800fcda:	e000      	b.n	800fcde <nk_rgba+0x5a>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	db07      	blt.n	800fcf6 <nk_rgba+0x72>
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	2bfe      	cmp	r3, #254	; 0xfe
 800fcea:	dc02      	bgt.n	800fcf2 <nk_rgba+0x6e>
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	e002      	b.n	800fcf8 <nk_rgba+0x74>
 800fcf2:	23ff      	movs	r3, #255	; 0xff
 800fcf4:	e000      	b.n	800fcf8 <nk_rgba+0x74>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	74fb      	strb	r3, [r7, #19]
    return ret;
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	617b      	str	r3, [r7, #20]
 800fcfe:	2300      	movs	r3, #0
 800fd00:	7d3a      	ldrb	r2, [r7, #20]
 800fd02:	f362 0307 	bfi	r3, r2, #0, #8
 800fd06:	7d7a      	ldrb	r2, [r7, #21]
 800fd08:	f362 230f 	bfi	r3, r2, #8, #8
 800fd0c:	7dba      	ldrb	r2, [r7, #22]
 800fd0e:	f362 4317 	bfi	r3, r2, #16, #8
 800fd12:	7dfa      	ldrb	r2, [r7, #23]
 800fd14:	f362 631f 	bfi	r3, r2, #24, #8
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	371c      	adds	r7, #28
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <nk_rgb>:
{
    return nk_rgba(c[0], c[1], c[2], c[3]);
}
NK_API struct nk_color
nk_rgb(int r, int g, int b)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	db07      	blt.n	800fd46 <nk_rgb+0x22>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2bfe      	cmp	r3, #254	; 0xfe
 800fd3a:	dc02      	bgt.n	800fd42 <nk_rgb+0x1e>
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	e002      	b.n	800fd48 <nk_rgb+0x24>
 800fd42:	23ff      	movs	r3, #255	; 0xff
 800fd44:	e000      	b.n	800fd48 <nk_rgb+0x24>
 800fd46:	2300      	movs	r3, #0
 800fd48:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	db07      	blt.n	800fd60 <nk_rgb+0x3c>
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	2bfe      	cmp	r3, #254	; 0xfe
 800fd54:	dc02      	bgt.n	800fd5c <nk_rgb+0x38>
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	e002      	b.n	800fd62 <nk_rgb+0x3e>
 800fd5c:	23ff      	movs	r3, #255	; 0xff
 800fd5e:	e000      	b.n	800fd62 <nk_rgb+0x3e>
 800fd60:	2300      	movs	r3, #0
 800fd62:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	db07      	blt.n	800fd7a <nk_rgb+0x56>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2bfe      	cmp	r3, #254	; 0xfe
 800fd6e:	dc02      	bgt.n	800fd76 <nk_rgb+0x52>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	e002      	b.n	800fd7c <nk_rgb+0x58>
 800fd76:	23ff      	movs	r3, #255	; 0xff
 800fd78:	e000      	b.n	800fd7c <nk_rgb+0x58>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)255;
 800fd7e:	23ff      	movs	r3, #255	; 0xff
 800fd80:	74fb      	strb	r3, [r7, #19]
    return ret;
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	617b      	str	r3, [r7, #20]
 800fd86:	2300      	movs	r3, #0
 800fd88:	7d3a      	ldrb	r2, [r7, #20]
 800fd8a:	f362 0307 	bfi	r3, r2, #0, #8
 800fd8e:	7d7a      	ldrb	r2, [r7, #21]
 800fd90:	f362 230f 	bfi	r3, r2, #8, #8
 800fd94:	7dba      	ldrb	r2, [r7, #22]
 800fd96:	f362 4317 	bfi	r3, r2, #16, #8
 800fd9a:	7dfa      	ldrb	r2, [r7, #23]
 800fd9c:	f362 631f 	bfi	r3, r2, #24, #8
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	371c      	adds	r7, #28
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <nk_combo_begin>:
 *
 * ===============================================================*/
NK_INTERN nk_bool
nk_combo_begin(struct nk_context *ctx, struct nk_window *win,
    struct nk_vec2 size, nk_bool is_clicked, struct nk_rect header)
{
 800fdac:	b590      	push	{r4, r7, lr}
 800fdae:	b097      	sub	sp, #92	; 0x5c
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6278      	str	r0, [r7, #36]	; 0x24
 800fdb4:	6239      	str	r1, [r7, #32]
 800fdb6:	eeb0 5a40 	vmov.f32	s10, s0
 800fdba:	eef0 5a60 	vmov.f32	s11, s1
 800fdbe:	617a      	str	r2, [r7, #20]
 800fdc0:	eeb0 6a41 	vmov.f32	s12, s2
 800fdc4:	eef0 6a61 	vmov.f32	s13, s3
 800fdc8:	eeb0 7a42 	vmov.f32	s14, s4
 800fdcc:	eef0 7a62 	vmov.f32	s15, s5
 800fdd0:	ed87 5a06 	vstr	s10, [r7, #24]
 800fdd4:	edc7 5a07 	vstr	s11, [r7, #28]
 800fdd8:	ed87 6a01 	vstr	s12, [r7, #4]
 800fddc:	edc7 6a02 	vstr	s13, [r7, #8]
 800fde0:	ed87 7a03 	vstr	s14, [r7, #12]
 800fde4:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *popup;
    int is_open = 0;
 800fde8:	2300      	movs	r3, #0
 800fdea:	657b      	str	r3, [r7, #84]	; 0x54
    int is_active = 0;
 800fdec:	2300      	movs	r3, #0
 800fdee:	653b      	str	r3, [r7, #80]	; 0x50
    struct nk_rect body;
    nk_hash hash;

    NK_ASSERT(ctx);
 800fdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d105      	bne.n	800fe02 <nk_combo_begin+0x56>
 800fdf6:	4b75      	ldr	r3, [pc, #468]	; (800ffcc <nk_combo_begin+0x220>)
 800fdf8:	4a75      	ldr	r2, [pc, #468]	; (800ffd0 <nk_combo_begin+0x224>)
 800fdfa:	2113      	movs	r1, #19
 800fdfc:	4875      	ldr	r0, [pc, #468]	; (800ffd4 <nk_combo_begin+0x228>)
 800fdfe:	f014 fe6b 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe08:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d105      	bne.n	800fe1c <nk_combo_begin+0x70>
 800fe10:	4b71      	ldr	r3, [pc, #452]	; (800ffd8 <nk_combo_begin+0x22c>)
 800fe12:	4a6f      	ldr	r2, [pc, #444]	; (800ffd0 <nk_combo_begin+0x224>)
 800fe14:	2114      	movs	r1, #20
 800fe16:	486f      	ldr	r0, [pc, #444]	; (800ffd4 <nk_combo_begin+0x228>)
 800fe18:	f014 fe5e 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe22:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d105      	bne.n	800fe3a <nk_combo_begin+0x8e>
 800fe2e:	4b6b      	ldr	r3, [pc, #428]	; (800ffdc <nk_combo_begin+0x230>)
 800fe30:	4a67      	ldr	r2, [pc, #412]	; (800ffd0 <nk_combo_begin+0x224>)
 800fe32:	2115      	movs	r1, #21
 800fe34:	4867      	ldr	r0, [pc, #412]	; (800ffd4 <nk_combo_begin+0x228>)
 800fe36:	f014 fe4f 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00f      	beq.n	800fe60 <nk_combo_begin+0xb4>
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe46:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d008      	beq.n	800fe60 <nk_combo_begin+0xb4>
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe54:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d101      	bne.n	800fe64 <nk_combo_begin+0xb8>
        return 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e0af      	b.n	800ffc4 <nk_combo_begin+0x218>

    popup = win->popup.win;
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800fe6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    body.x = header.x;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	62bb      	str	r3, [r7, #40]	; 0x28
    body.w = size.x;
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	633b      	str	r3, [r7, #48]	; 0x30
    body.y = header.y + header.h-ctx->style.window.combo_border;
 800fe74:	ed97 7a02 	vldr	s14, [r7, #8]
 800fe78:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe86:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 800fe8a:	edd3 7a00 	vldr	s15, [r3]
 800fe8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe92:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    body.h = size.y;
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	637b      	str	r3, [r7, #52]	; 0x34

    hash = win->popup.combo_count++;
 800fe9a:	6a3b      	ldr	r3, [r7, #32]
 800fe9c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fea0:	1c59      	adds	r1, r3, #1
 800fea2:	6a3a      	ldr	r2, [r7, #32]
 800fea4:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 800fea8:	64bb      	str	r3, [r7, #72]	; 0x48
    is_open = (popup) ? nk_true:nk_false;
 800feaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feac:	2b00      	cmp	r3, #0
 800feae:	bf14      	ite	ne
 800feb0:	2301      	movne	r3, #1
 800feb2:	2300      	moveq	r3, #0
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	657b      	str	r3, [r7, #84]	; 0x54
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 800feb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00c      	beq.n	800fed8 <nk_combo_begin+0x12c>
 800febe:	6a3b      	ldr	r3, [r7, #32]
 800fec0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d106      	bne.n	800fed8 <nk_combo_begin+0x12c>
 800feca:	6a3b      	ldr	r3, [r7, #32]
 800fecc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fed0:	2b20      	cmp	r3, #32
 800fed2:	d101      	bne.n	800fed8 <nk_combo_begin+0x12c>
 800fed4:	2301      	movs	r3, #1
 800fed6:	e000      	b.n	800feda <nk_combo_begin+0x12e>
 800fed8:	2300      	movs	r3, #0
 800feda:	653b      	str	r3, [r7, #80]	; 0x50
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d005      	beq.n	800feee <nk_combo_begin+0x142>
 800fee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d002      	beq.n	800feee <nk_combo_begin+0x142>
 800fee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00e      	beq.n	800ff0c <nk_combo_begin+0x160>
 800feee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d002      	beq.n	800fefa <nk_combo_begin+0x14e>
 800fef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d008      	beq.n	800ff0c <nk_combo_begin+0x160>
 800fefa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d107      	bne.n	800ff10 <nk_combo_begin+0x164>
        (!is_open && !is_active && !is_clicked)) return 0;
 800ff00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d104      	bne.n	800ff10 <nk_combo_begin+0x164>
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <nk_combo_begin+0x164>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	e059      	b.n	800ffc4 <nk_combo_begin+0x218>
    if (!nk_nonblock_begin(ctx, 0, body,
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d01d      	beq.n	800ff52 <nk_combo_begin+0x1a6>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800ff16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d01a      	beq.n	800ff52 <nk_combo_begin+0x1a6>
 800ff1c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ffe0 <nk_combo_begin+0x234>
 800ff20:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ffe0 <nk_combo_begin+0x234>
 800ff24:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800ffe0 <nk_combo_begin+0x234>
 800ff28:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ffe0 <nk_combo_begin+0x234>
 800ff2c:	f006 fc7e 	bl	801682c <nk_rect>
 800ff30:	eeb0 6a40 	vmov.f32	s12, s0
 800ff34:	eef0 6a60 	vmov.f32	s13, s1
 800ff38:	eeb0 7a41 	vmov.f32	s14, s2
 800ff3c:	eef0 7a61 	vmov.f32	s15, s3
 800ff40:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 800ff44:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800ff48:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800ff4c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    if (!nk_nonblock_begin(ctx, 0, body,
 800ff50:	e005      	b.n	800ff5e <nk_combo_begin+0x1b2>
 800ff52:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800ff56:	1d3b      	adds	r3, r7, #4
 800ff58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ff5e:	ed97 4a0e 	vldr	s8, [r7, #56]	; 0x38
 800ff62:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800ff66:	ed97 5a10 	vldr	s10, [r7, #64]	; 0x40
 800ff6a:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 800ff6e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ff72:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ff76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ff7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ff7e:	2220      	movs	r2, #32
 800ff80:	eeb0 2a44 	vmov.f32	s4, s8
 800ff84:	eef0 2a64 	vmov.f32	s5, s9
 800ff88:	eeb0 3a45 	vmov.f32	s6, s10
 800ff8c:	eef0 3a65 	vmov.f32	s7, s11
 800ff90:	eeb0 0a46 	vmov.f32	s0, s12
 800ff94:	eef0 0a66 	vmov.f32	s1, s13
 800ff98:	eeb0 1a47 	vmov.f32	s2, s14
 800ff9c:	eef0 1a67 	vmov.f32	s3, s15
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffa4:	f009 fc54 	bl	8019850 <nk_nonblock_begin>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d101      	bne.n	800ffb2 <nk_combo_begin+0x206>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	e008      	b.n	800ffc4 <nk_combo_begin+0x218>

    win->popup.type = NK_PANEL_COMBO;
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	2220      	movs	r2, #32
 800ffb6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    win->popup.name = hash;
 800ffba:	6a3b      	ldr	r3, [r7, #32]
 800ffbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffbe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    return 1;
 800ffc2:	2301      	movs	r3, #1
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	375c      	adds	r7, #92	; 0x5c
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd90      	pop	{r4, r7, pc}
 800ffcc:	080286dc 	.word	0x080286dc
 800ffd0:	0802a578 	.word	0x0802a578
 800ffd4:	080286e0 	.word	0x080286e0
 800ffd8:	080286fc 	.word	0x080286fc
 800ffdc:	0802870c 	.word	0x0802870c
 800ffe0:	00000000 	.word	0x00000000

0800ffe4 <nk_combo_begin_text>:
NK_API nk_bool
nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,
    struct nk_vec2 size)
{
 800ffe4:	b5b0      	push	{r4, r5, r7, lr}
 800ffe6:	b0a6      	sub	sp, #152	; 0x98
 800ffe8:	af04      	add	r7, sp, #16
 800ffea:	6178      	str	r0, [r7, #20]
 800ffec:	6139      	str	r1, [r7, #16]
 800ffee:	60fa      	str	r2, [r7, #12]
 800fff0:	eeb0 7a40 	vmov.f32	s14, s0
 800fff4:	eef0 7a60 	vmov.f32	s15, s1
 800fff8:	ed87 7a01 	vstr	s14, [r7, #4]
 800fffc:	edc7 7a02 	vstr	s15, [r7, #8]
    const struct nk_input *in;
    struct nk_window *win;
    struct nk_style *style;

    enum nk_widget_layout_states s;
    int is_clicked = nk_false;
 8010000:	2300      	movs	r3, #0
 8010002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    struct nk_rect header;
    const struct nk_style_item *background;
    struct nk_text text;

    NK_ASSERT(ctx);
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d105      	bne.n	8010018 <nk_combo_begin_text+0x34>
 801000c:	4bc3      	ldr	r3, [pc, #780]	; (801031c <nk_combo_begin_text+0x338>)
 801000e:	4ac4      	ldr	r2, [pc, #784]	; (8010320 <nk_combo_begin_text+0x33c>)
 8010010:	2139      	movs	r1, #57	; 0x39
 8010012:	48c4      	ldr	r0, [pc, #784]	; (8010324 <nk_combo_begin_text+0x340>)
 8010014:	f014 fd60 	bl	8024ad8 <__assert_func>
    NK_ASSERT(selected);
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d105      	bne.n	801002a <nk_combo_begin_text+0x46>
 801001e:	4bc2      	ldr	r3, [pc, #776]	; (8010328 <nk_combo_begin_text+0x344>)
 8010020:	4abf      	ldr	r2, [pc, #764]	; (8010320 <nk_combo_begin_text+0x33c>)
 8010022:	213a      	movs	r1, #58	; 0x3a
 8010024:	48bf      	ldr	r0, [pc, #764]	; (8010324 <nk_combo_begin_text+0x340>)
 8010026:	f014 fd57 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010030:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010034:	2b00      	cmp	r3, #0
 8010036:	d105      	bne.n	8010044 <nk_combo_begin_text+0x60>
 8010038:	4bbc      	ldr	r3, [pc, #752]	; (801032c <nk_combo_begin_text+0x348>)
 801003a:	4ab9      	ldr	r2, [pc, #740]	; (8010320 <nk_combo_begin_text+0x33c>)
 801003c:	213b      	movs	r1, #59	; 0x3b
 801003e:	48b9      	ldr	r0, [pc, #740]	; (8010324 <nk_combo_begin_text+0x340>)
 8010040:	f014 fd4a 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801004a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801004e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010052:	2b00      	cmp	r3, #0
 8010054:	d105      	bne.n	8010062 <nk_combo_begin_text+0x7e>
 8010056:	4bb6      	ldr	r3, [pc, #728]	; (8010330 <nk_combo_begin_text+0x34c>)
 8010058:	4ab1      	ldr	r2, [pc, #708]	; (8010320 <nk_combo_begin_text+0x33c>)
 801005a:	213c      	movs	r1, #60	; 0x3c
 801005c:	48b1      	ldr	r0, [pc, #708]	; (8010324 <nk_combo_begin_text+0x340>)
 801005e:	f014 fd3b 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !selected)
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d012      	beq.n	801008e <nk_combo_begin_text+0xaa>
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801006e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00b      	beq.n	801008e <nk_combo_begin_text+0xaa>
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801007c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010084:	2b00      	cmp	r3, #0
 8010086:	d002      	beq.n	801008e <nk_combo_begin_text+0xaa>
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d101      	bne.n	8010092 <nk_combo_begin_text+0xae>
        return 0;
 801008e:	2300      	movs	r3, #0
 8010090:	e28f      	b.n	80105b2 <nk_combo_begin_text+0x5ce>

    win = ctx->current;
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010098:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801009c:	67bb      	str	r3, [r7, #120]	; 0x78
    style = &ctx->style;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80100a4:	677b      	str	r3, [r7, #116]	; 0x74
    s = nk_widget(&header, ctx);
 80100a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80100aa:	6979      	ldr	r1, [r7, #20]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f013 fa2d 	bl	802350c <nk_widget>
 80100b2:	4603      	mov	r3, r0
 80100b4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if (s == NK_WIDGET_INVALID)
 80100b8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <nk_combo_begin_text+0xe0>
        return 0;
 80100c0:	2300      	movs	r3, #0
 80100c2:	e276      	b.n	80105b2 <nk_combo_begin_text+0x5ce>

    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 80100c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d105      	bne.n	80100e0 <nk_combo_begin_text+0xfc>
 80100d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d001      	beq.n	80100e0 <nk_combo_begin_text+0xfc>
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	e000      	b.n	80100e2 <nk_combo_begin_text+0xfe>
 80100e0:	2300      	movs	r3, #0
 80100e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	f503 53d6 	add.w	r3, r3, #6848	; 0x1ac0
 80100ea:	3314      	adds	r3, #20
 80100ec:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80100f0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80100f4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80100f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80100fc:	2200      	movs	r2, #0
 80100fe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010100:	eeb0 0a46 	vmov.f32	s0, s12
 8010104:	eef0 0a66 	vmov.f32	s1, s13
 8010108:	eeb0 1a47 	vmov.f32	s2, s14
 801010c:	eef0 1a67 	vmov.f32	s3, s15
 8010110:	4618      	mov	r0, r3
 8010112:	f7fe ff9f 	bl	800f054 <nk_button_behavior>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d002      	beq.n	8010122 <nk_combo_begin_text+0x13e>
        is_clicked = nk_true;
 801011c:	2301      	movs	r3, #1
 801011e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* draw combo box header background and border */
    if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010128:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 801012c:	f003 0320 	and.w	r3, r3, #32
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00c      	beq.n	801014e <nk_combo_begin_text+0x16a>
        background = &style->combo.active;
 8010134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010136:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 801013a:	3318      	adds	r3, #24
 801013c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_active;
 8010140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010146:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801014a:	657b      	str	r3, [r7, #84]	; 0x54
 801014c:	e020      	b.n	8010190 <nk_combo_begin_text+0x1ac>
    } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010154:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8010158:	f003 0310 	and.w	r3, r3, #16
 801015c:	2b00      	cmp	r3, #0
 801015e:	d00c      	beq.n	801017a <nk_combo_begin_text+0x196>
        background = &style->combo.hover;
 8010160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010162:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8010166:	331c      	adds	r3, #28
 8010168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_hover;
 801016c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801016e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010172:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 8010176:	657b      	str	r3, [r7, #84]	; 0x54
 8010178:	e00a      	b.n	8010190 <nk_combo_begin_text+0x1ac>
    } else {
        background = &style->combo.normal;
 801017a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801017c:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8010180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_normal;
 8010184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801018a:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 801018e:	657b      	str	r3, [r7, #84]	; 0x54
    }

    switch(background->type) {
 8010190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b02      	cmp	r3, #2
 8010198:	d02b      	beq.n	80101f2 <nk_combo_begin_text+0x20e>
 801019a:	2b02      	cmp	r3, #2
 801019c:	f300 80a1 	bgt.w	80102e2 <nk_combo_begin_text+0x2fe>
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d04a      	beq.n	801023a <nk_combo_begin_text+0x256>
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	f040 809c 	bne.w	80102e2 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 80101aa:	2300      	movs	r3, #0
 80101ac:	2200      	movs	r2, #0
 80101ae:	2100      	movs	r1, #0
 80101b0:	2000      	movs	r0, #0
 80101b2:	f7ff fd67 	bl	800fc84 <nk_rgba>
 80101b6:	4603      	mov	r3, r0
 80101b8:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 80101ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101bc:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80101c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101c4:	3304      	adds	r3, #4
 80101c6:	4a5b      	ldr	r2, [pc, #364]	; (8010334 <nk_combo_begin_text+0x350>)
 80101c8:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80101cc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80101d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80101d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80101d8:	6812      	ldr	r2, [r2, #0]
 80101da:	4619      	mov	r1, r3
 80101dc:	eeb0 0a46 	vmov.f32	s0, s12
 80101e0:	eef0 0a66 	vmov.f32	s1, s13
 80101e4:	eeb0 1a47 	vmov.f32	s2, s14
 80101e8:	eef0 1a67 	vmov.f32	s3, s15
 80101ec:	f001 ffb2 	bl	8012154 <nk_draw_image>
            break;
 80101f0:	e077      	b.n	80102e2 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 80101f2:	2300      	movs	r3, #0
 80101f4:	2200      	movs	r2, #0
 80101f6:	2100      	movs	r1, #0
 80101f8:	2000      	movs	r0, #0
 80101fa:	f7ff fd43 	bl	800fc84 <nk_rgba>
 80101fe:	4603      	mov	r3, r0
 8010200:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 8010202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010204:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8010208:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801020c:	3304      	adds	r3, #4
 801020e:	4a49      	ldr	r2, [pc, #292]	; (8010334 <nk_combo_begin_text+0x350>)
 8010210:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8010214:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010218:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801021c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010220:	6812      	ldr	r2, [r2, #0]
 8010222:	4619      	mov	r1, r3
 8010224:	eeb0 0a46 	vmov.f32	s0, s12
 8010228:	eef0 0a66 	vmov.f32	s1, s13
 801022c:	eeb0 1a47 	vmov.f32	s2, s14
 8010230:	eef0 1a67 	vmov.f32	s3, s15
 8010234:	f002 f880 	bl	8012338 <nk_draw_nine_slice>
            break;
 8010238:	e053      	b.n	80102e2 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 801023a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	653b      	str	r3, [r7, #80]	; 0x50
            nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);
 8010242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010244:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8010248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801024a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801024e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8010252:	edd3 5a00 	vldr	s11, [r3]
 8010256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801025a:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 801025e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010262:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010266:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801026a:	6859      	ldr	r1, [r3, #4]
 801026c:	eeb0 2a65 	vmov.f32	s4, s11
 8010270:	eeb0 0a46 	vmov.f32	s0, s12
 8010274:	eef0 0a66 	vmov.f32	s1, s13
 8010278:	eeb0 1a47 	vmov.f32	s2, s14
 801027c:	eef0 1a67 	vmov.f32	s3, s15
 8010280:	4610      	mov	r0, r2
 8010282:	f001 fc0d 	bl	8011aa0 <nk_fill_rect>
            nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);
 8010286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010288:	f103 0264 	add.w	r2, r3, #100	; 0x64
 801028c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801028e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010292:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8010296:	edd3 5a00 	vldr	s11, [r3]
 801029a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801029c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102a0:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80102a4:	ed93 5a00 	vldr	s10, [r3]
 80102a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102ae:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80102b2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80102b6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80102ba:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80102be:	f8d3 15d4 	ldr.w	r1, [r3, #1492]	; 0x5d4
 80102c2:	eef0 2a45 	vmov.f32	s5, s10
 80102c6:	eeb0 2a65 	vmov.f32	s4, s11
 80102ca:	eeb0 0a46 	vmov.f32	s0, s12
 80102ce:	eef0 0a66 	vmov.f32	s1, s13
 80102d2:	eeb0 1a47 	vmov.f32	s2, s14
 80102d6:	eef0 1a67 	vmov.f32	s3, s15
 80102da:	4610      	mov	r0, r2
 80102dc:	f001 fad8 	bl	8011890 <nk_stroke_rect>
            break;
 80102e0:	bf00      	nop
        struct nk_rect button;
        struct nk_rect content;
        int draw_button_symbol;

        enum nk_symbol_type sym;
        if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102e8:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 80102ec:	f003 0310 	and.w	r3, r3, #16
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d007      	beq.n	8010304 <nk_combo_begin_text+0x320>
            sym = style->combo.sym_hover;
 80102f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102fa:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 80102fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010302:	e022      	b.n	801034a <nk_combo_begin_text+0x366>
        else if (is_clicked)
 8010304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010308:	2b00      	cmp	r3, #0
 801030a:	d017      	beq.n	801033c <nk_combo_begin_text+0x358>
            sym = style->combo.sym_active;
 801030c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801030e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010312:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8010316:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801031a:	e016      	b.n	801034a <nk_combo_begin_text+0x366>
 801031c:	080286dc 	.word	0x080286dc
 8010320:	0802a588 	.word	0x0802a588
 8010324:	080286e0 	.word	0x080286e0
 8010328:	08028724 	.word	0x08028724
 801032c:	080286fc 	.word	0x080286fc
 8010330:	0802870c 	.word	0x0802870c
 8010334:	0802a574 	.word	0x0802a574
 8010338:	00000000 	.word	0x00000000
        else
            sym = style->combo.sym_normal;
 801033c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801033e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010342:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 8010346:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* represents whether or not the combo's button symbol should be drawn */
        draw_button_symbol = sym != NK_SYMBOL_NONE;
 801034a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801034e:	2b00      	cmp	r3, #0
 8010350:	bf14      	ite	ne
 8010352:	2301      	movne	r3, #1
 8010354:	2300      	moveq	r3, #0
 8010356:	b2db      	uxtb	r3, r3
 8010358:	66bb      	str	r3, [r7, #104]	; 0x68

        /* calculate button */
        button.w = header.h - 2 * style->combo.button_padding.y;
 801035a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801035e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010364:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8010368:	edd3 7a00 	vldr	s15, [r3]
 801036c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010374:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;
 8010378:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801037c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010384:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010388:	ee37 7a67 	vsub.f32	s14, s14, s15
 801038c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801038e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010392:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 8010396:	edd3 7a00 	vldr	s15, [r3]
 801039a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801039e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        button.y = header.y + style->combo.button_padding.y;
 80103a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80103a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103ac:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80103b0:	edd3 7a00 	vldr	s15, [r3]
 80103b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        button.h = button.w;
 80103bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103be:	637b      	str	r3, [r7, #52]	; 0x34

        content.x = button.x + style->combo.button.padding.x;
 80103c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80103c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103ca:	f203 6364 	addw	r3, r3, #1636	; 0x664
 80103ce:	edd3 7a00 	vldr	s15, [r3]
 80103d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103d6:	edc7 7a06 	vstr	s15, [r7, #24]
        content.y = button.y + style->combo.button.padding.y;
 80103da:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80103de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103e4:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80103e8:	edd3 7a00 	vldr	s15, [r3]
 80103ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103f0:	edc7 7a07 	vstr	s15, [r7, #28]
        content.w = button.w - 2 * style->combo.button.padding.x;
 80103f4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80103f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103fe:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8010402:	edd3 7a00 	vldr	s15, [r3]
 8010406:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801040a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801040e:	edc7 7a08 	vstr	s15, [r7, #32]
        content.h = button.h - 2 * style->combo.button.padding.y;
 8010412:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8010416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801041c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8010420:	edd3 7a00 	vldr	s15, [r3]
 8010424:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010428:	ee77 7a67 	vsub.f32	s15, s14, s15
 801042c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        /* draw selected label */
        text.padding = nk_vec2(0,0);
 8010430:	ed5f 0a3f 	vldr	s1, [pc, #-252]	; 8010338 <nk_combo_begin_text+0x354>
 8010434:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 8010338 <nk_combo_begin_text+0x354>
 8010438:	f006 faaa 	bl	8016990 <nk_vec2>
 801043c:	eeb0 7a40 	vmov.f32	s14, s0
 8010440:	eef0 7a60 	vmov.f32	s15, s1
 8010444:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8010448:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        label.x = header.x + style->combo.content_padding.x;
 801044c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010456:	f203 6394 	addw	r3, r3, #1684	; 0x694
 801045a:	edd3 7a00 	vldr	s15, [r3]
 801045e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010462:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.y = header.y + style->combo.content_padding.y;
 8010466:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801046a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801046c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010470:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8010474:	edd3 7a00 	vldr	s15, [r3]
 8010478:	ee77 7a27 	vadd.f32	s15, s14, s15
 801047c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.h = header.h - 2 * style->combo.content_padding.y;
 8010480:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8010484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801048a:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 801048e:	edd3 7a00 	vldr	s15, [r3]
 8010492:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010496:	ee77 7a67 	vsub.f32	s15, s14, s15
 801049a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        if (draw_button_symbol)
 801049e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d01a      	beq.n	80104da <nk_combo_begin_text+0x4f6>
            label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;
 80104a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80104a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104ae:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80104b2:	edd3 6a00 	vldr	s13, [r3]
 80104b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104bc:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80104c0:	edd3 7a00 	vldr	s15, [r3]
 80104c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80104d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80104d8:	e00e      	b.n	80104f8 <nk_combo_begin_text+0x514>
        else
            label.w = header.w - 2 * style->combo.content_padding.x;
 80104da:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80104de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104e4:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80104e8:	edd3 7a00 	vldr	s15, [r3]
 80104ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80104f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104f4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        nk_widget_text(&win->buffer, label, selected, len, &text,
 80104f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104fa:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8010504:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010508:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801050c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8010510:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010514:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010518:	9301      	str	r3, [sp, #4]
 801051a:	2311      	movs	r3, #17
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	4613      	mov	r3, r2
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	6939      	ldr	r1, [r7, #16]
 8010524:	eeb0 0a46 	vmov.f32	s0, s12
 8010528:	eef0 0a66 	vmov.f32	s1, s13
 801052c:	eeb0 1a47 	vmov.f32	s2, s14
 8010530:	eef0 1a67 	vmov.f32	s3, s15
 8010534:	f00f f81a 	bl	801f56c <nk_widget_text>
            NK_TEXT_LEFT, ctx->style.font);

        /* draw open/close button */
        if (draw_button_symbol)
 8010538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801053a:	2b00      	cmp	r3, #0
 801053c:	d01a      	beq.n	8010574 <nk_combo_begin_text+0x590>
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 801053e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010540:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801054a:	f8d3 5ad4 	ldr.w	r5, [r3, #2772]	; 0xad4
                &ctx->style.combo.button, sym, style->font);
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 8010554:	3318      	adds	r3, #24
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 8010556:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010558:	6812      	ldr	r2, [r2, #0]
 801055a:	f107 0418 	add.w	r4, r7, #24
 801055e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010562:	9202      	str	r2, [sp, #8]
 8010564:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8010568:	9201      	str	r2, [sp, #4]
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	462b      	mov	r3, r5
 801056e:	4622      	mov	r2, r4
 8010570:	f7ff f8b4 	bl	800f6dc <nk_draw_button_symbol>
    }
    return nk_combo_begin(ctx, win, size, is_clicked, header);
 8010574:	ed97 5a16 	vldr	s10, [r7, #88]	; 0x58
 8010578:	edd7 5a17 	vldr	s11, [r7, #92]	; 0x5c
 801057c:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8010580:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8010584:	ed97 7a01 	vldr	s14, [r7, #4]
 8010588:	edd7 7a02 	vldr	s15, [r7, #8]
 801058c:	eeb0 1a45 	vmov.f32	s2, s10
 8010590:	eef0 1a65 	vmov.f32	s3, s11
 8010594:	eeb0 2a46 	vmov.f32	s4, s12
 8010598:	eef0 2a66 	vmov.f32	s5, s13
 801059c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80105a0:	eeb0 0a47 	vmov.f32	s0, s14
 80105a4:	eef0 0a67 	vmov.f32	s1, s15
 80105a8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80105aa:	6978      	ldr	r0, [r7, #20]
 80105ac:	f7ff fbfe 	bl	800fdac <nk_combo_begin>
 80105b0:	4603      	mov	r3, r0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3788      	adds	r7, #136	; 0x88
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bdb0      	pop	{r4, r5, r7, pc}
 80105ba:	bf00      	nop

080105bc <nk_combo_begin_label>:
NK_API nk_bool
nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	eeb0 7a40 	vmov.f32	s14, s0
 80105ca:	eef0 7a60 	vmov.f32	s15, s1
 80105ce:	ed87 7a00 	vstr	s14, [r7]
 80105d2:	edc7 7a01 	vstr	s15, [r7, #4]
    return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);
 80105d6:	68b8      	ldr	r0, [r7, #8]
 80105d8:	f012 f872 	bl	80226c0 <nk_strlen>
 80105dc:	4603      	mov	r3, r0
 80105de:	ed97 7a00 	vldr	s14, [r7]
 80105e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80105e6:	eeb0 0a47 	vmov.f32	s0, s14
 80105ea:	eef0 0a67 	vmov.f32	s1, s15
 80105ee:	461a      	mov	r2, r3
 80105f0:	68b9      	ldr	r1, [r7, #8]
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f7ff fcf6 	bl	800ffe4 <nk_combo_begin_text>
 80105f8:	4603      	mov	r3, r0
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <nk_combo_item_label>:
{
    return nk_contextual_item_text(ctx, text, len, align);
}
NK_API nk_bool
nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b084      	sub	sp, #16
 8010606:	af00      	add	r7, sp, #0
 8010608:	60f8      	str	r0, [r7, #12]
 801060a:	60b9      	str	r1, [r7, #8]
 801060c:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_label(ctx, label, align);
 801060e:	687a      	ldr	r2, [r7, #4]
 8010610:	68b9      	ldr	r1, [r7, #8]
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f000 feaa 	bl	801136c <nk_contextual_item_label>
 8010618:	4603      	mov	r3, r0
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <nk_combo_end>:
    const char *label, nk_flags alignment)
{
    return nk_contextual_item_symbol_label(ctx, sym, label, alignment);
}
NK_API void nk_combo_end(struct nk_context *ctx)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b082      	sub	sp, #8
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
    nk_contextual_end(ctx);
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 ff00 	bl	8011430 <nk_contextual_end>
}
 8010630:	bf00      	nop
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <nk_combo>:
    nk_contextual_close(ctx);
}
NK_API int
nk_combo(struct nk_context *ctx, const char **items, int count,
    int selected, int item_height, struct nk_vec2 size)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b08c      	sub	sp, #48	; 0x30
 801063c:	af00      	add	r7, sp, #0
 801063e:	6178      	str	r0, [r7, #20]
 8010640:	6139      	str	r1, [r7, #16]
 8010642:	60fa      	str	r2, [r7, #12]
 8010644:	60bb      	str	r3, [r7, #8]
 8010646:	eeb0 7a40 	vmov.f32	s14, s0
 801064a:	eef0 7a60 	vmov.f32	s15, s1
 801064e:	ed87 7a00 	vstr	s14, [r7]
 8010652:	edc7 7a01 	vstr	s15, [r7, #4]
    int i = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	62fb      	str	r3, [r7, #44]	; 0x2c
    int max_height;
    struct nk_vec2 item_spacing;
    struct nk_vec2 window_padding;

    NK_ASSERT(ctx);
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d106      	bne.n	801066e <nk_combo+0x36>
 8010660:	4b61      	ldr	r3, [pc, #388]	; (80107e8 <nk_combo+0x1b0>)
 8010662:	4a62      	ldr	r2, [pc, #392]	; (80107ec <nk_combo+0x1b4>)
 8010664:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8010668:	4861      	ldr	r0, [pc, #388]	; (80107f0 <nk_combo+0x1b8>)
 801066a:	f014 fa35 	bl	8024ad8 <__assert_func>
    NK_ASSERT(items);
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d106      	bne.n	8010682 <nk_combo+0x4a>
 8010674:	4b5f      	ldr	r3, [pc, #380]	; (80107f4 <nk_combo+0x1bc>)
 8010676:	4a5d      	ldr	r2, [pc, #372]	; (80107ec <nk_combo+0x1b4>)
 8010678:	f240 21c1 	movw	r1, #705	; 0x2c1
 801067c:	485c      	ldr	r0, [pc, #368]	; (80107f0 <nk_combo+0x1b8>)
 801067e:	f014 fa2b 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010688:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801068c:	2b00      	cmp	r3, #0
 801068e:	d106      	bne.n	801069e <nk_combo+0x66>
 8010690:	4b59      	ldr	r3, [pc, #356]	; (80107f8 <nk_combo+0x1c0>)
 8010692:	4a56      	ldr	r2, [pc, #344]	; (80107ec <nk_combo+0x1b4>)
 8010694:	f240 21c2 	movw	r1, #706	; 0x2c2
 8010698:	4855      	ldr	r0, [pc, #340]	; (80107f0 <nk_combo+0x1b8>)
 801069a:	f014 fa1d 	bl	8024ad8 <__assert_func>
    if (!ctx || !items ||!count)
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d005      	beq.n	80106b0 <nk_combo+0x78>
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d002      	beq.n	80106b0 <nk_combo+0x78>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d101      	bne.n	80106b4 <nk_combo+0x7c>
        return selected;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	e094      	b.n	80107de <nk_combo+0x1a6>

    item_spacing = ctx->style.window.spacing;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106ba:	461a      	mov	r2, r3
 80106bc:	f107 0320 	add.w	r3, r7, #32
 80106c0:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 80106c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106c8:	e883 0003 	stmia.w	r3, {r0, r1}
    window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80106d8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80106dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	4619      	mov	r1, r3
 80106e4:	4610      	mov	r0, r2
 80106e6:	f006 fd0d 	bl	8017104 <nk_panel_get_padding>
 80106ea:	eeb0 7a40 	vmov.f32	s14, s0
 80106ee:	eef0 7a60 	vmov.f32	s15, s1
 80106f2:	ed87 7a06 	vstr	s14, [r7, #24]
 80106f6:	edc7 7a07 	vstr	s15, [r7, #28]
    max_height = count * item_height + count * (int)item_spacing.y;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106fe:	fb03 f202 	mul.w	r2, r3, r2
 8010702:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801070a:	ee17 1a90 	vmov	r1, s15
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	fb01 f303 	mul.w	r3, r1, r3
 8010714:	4413      	add	r3, r2
 8010716:	62bb      	str	r3, [r7, #40]	; 0x28
    max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;
 8010718:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801071c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010720:	ee17 2a90 	vmov	r2, s15
 8010724:	edd7 7a07 	vldr	s15, [r7, #28]
 8010728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801072c:	ee17 3a90 	vmov	r3, s15
 8010730:	4413      	add	r3, r2
 8010732:	005b      	lsls	r3, r3, #1
 8010734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010736:	4413      	add	r3, r2
 8010738:	62bb      	str	r3, [r7, #40]	; 0x28
    size.y = NK_MIN(size.y, (float)max_height);
 801073a:	ed97 7a01 	vldr	s14, [r7, #4]
 801073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010740:	ee07 3a90 	vmov	s15, r3
 8010744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010750:	d502      	bpl.n	8010758 <nk_combo+0x120>
 8010752:	edd7 7a01 	vldr	s15, [r7, #4]
 8010756:	e004      	b.n	8010762 <nk_combo+0x12a>
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	ee07 3a90 	vmov	s15, r3
 801075e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010762:	edc7 7a01 	vstr	s15, [r7, #4]
    if (nk_combo_begin_label(ctx, items[selected], size)) {
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	693a      	ldr	r2, [r7, #16]
 801076c:	4413      	add	r3, r2
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	ed97 7a00 	vldr	s14, [r7]
 8010774:	edd7 7a01 	vldr	s15, [r7, #4]
 8010778:	eeb0 0a47 	vmov.f32	s0, s14
 801077c:	eef0 0a67 	vmov.f32	s1, s15
 8010780:	4619      	mov	r1, r3
 8010782:	6978      	ldr	r0, [r7, #20]
 8010784:	f7ff ff1a 	bl	80105bc <nk_combo_begin_label>
 8010788:	4603      	mov	r3, r0
 801078a:	2b00      	cmp	r3, #0
 801078c:	d026      	beq.n	80107dc <nk_combo+0x1a4>
        nk_layout_row_dynamic(ctx, (float)item_height, 1);
 801078e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010790:	ee07 3a90 	vmov	s15, r3
 8010794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010798:	2101      	movs	r1, #1
 801079a:	eeb0 0a67 	vmov.f32	s0, s15
 801079e:	6978      	ldr	r0, [r7, #20]
 80107a0:	f005 fa14 	bl	8015bcc <nk_layout_row_dynamic>
        for (i = 0; i < count; ++i) {
 80107a4:	2300      	movs	r3, #0
 80107a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107a8:	e011      	b.n	80107ce <nk_combo+0x196>
            if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	693a      	ldr	r2, [r7, #16]
 80107b0:	4413      	add	r3, r2
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2211      	movs	r2, #17
 80107b6:	4619      	mov	r1, r3
 80107b8:	6978      	ldr	r0, [r7, #20]
 80107ba:	f7ff ff22 	bl	8010602 <nk_combo_item_label>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d001      	beq.n	80107c8 <nk_combo+0x190>
                selected = i;
 80107c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c6:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < count; ++i) {
 80107c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ca:	3301      	adds	r3, #1
 80107cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	dbe9      	blt.n	80107aa <nk_combo+0x172>
        }
        nk_combo_end(ctx);
 80107d6:	6978      	ldr	r0, [r7, #20]
 80107d8:	f7ff ff23 	bl	8010622 <nk_combo_end>
    }
    return selected;
 80107dc:	68bb      	ldr	r3, [r7, #8]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3730      	adds	r7, #48	; 0x30
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	080286dc 	.word	0x080286dc
 80107ec:	0802a59c 	.word	0x0802a59c
 80107f0:	080286e0 	.word	0x080286e0
 80107f4:	08028730 	.word	0x08028730
 80107f8:	080286fc 	.word	0x080286fc

080107fc <nk_setup>:
 *                          CONTEXT
 *
 * ===============================================================*/
NK_INTERN void
nk_setup(struct nk_context *ctx, const struct nk_user_font *font)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d105      	bne.n	8010818 <nk_setup+0x1c>
 801080c:	4b11      	ldr	r3, [pc, #68]	; (8010854 <nk_setup+0x58>)
 801080e:	4a12      	ldr	r2, [pc, #72]	; (8010858 <nk_setup+0x5c>)
 8010810:	210c      	movs	r1, #12
 8010812:	4812      	ldr	r0, [pc, #72]	; (801085c <nk_setup+0x60>)
 8010814:	f014 f960 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d016      	beq.n	801084c <nk_setup+0x50>
    nk_zero_struct(*ctx);
 801081e:	f243 6168 	movw	r1, #13928	; 0x3668
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f011 ff2e 	bl	8022684 <nk_zero>
    nk_style_default(ctx);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f00c fc75 	bl	801d118 <nk_style_default>
    ctx->seq = 1;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010834:	461a      	mov	r2, r3
 8010836:	2301      	movs	r3, #1
 8010838:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
    if (font) ctx->style.font = font;
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d005      	beq.n	801084e <nk_setup+0x52>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	683a      	ldr	r2, [r7, #0]
 8010846:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 801084a:	e000      	b.n	801084e <nk_setup+0x52>
    if (!ctx) return;
 801084c:	bf00      	nop
#ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
    nk_draw_list_init(&ctx->draw_list);
#endif
}
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	08028764 	.word	0x08028764
 8010858:	0802a5bc 	.word	0x0802a5bc
 801085c:	08028768 	.word	0x08028768

08010860 <nk_init_custom>:
    return 1;
}
NK_API nk_bool
nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,
    struct nk_buffer *pool, const struct nk_user_font *font)
{
 8010860:	b5b0      	push	{r4, r5, r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	60b9      	str	r1, [r7, #8]
 801086a:	607a      	str	r2, [r7, #4]
 801086c:	603b      	str	r3, [r7, #0]
    NK_ASSERT(cmds);
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d105      	bne.n	8010880 <nk_init_custom+0x20>
 8010874:	4b2a      	ldr	r3, [pc, #168]	; (8010920 <nk_init_custom+0xc0>)
 8010876:	4a2b      	ldr	r2, [pc, #172]	; (8010924 <nk_init_custom+0xc4>)
 8010878:	2130      	movs	r1, #48	; 0x30
 801087a:	482b      	ldr	r0, [pc, #172]	; (8010928 <nk_init_custom+0xc8>)
 801087c:	f014 f92c 	bl	8024ad8 <__assert_func>
    NK_ASSERT(pool);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d105      	bne.n	8010892 <nk_init_custom+0x32>
 8010886:	4b29      	ldr	r3, [pc, #164]	; (801092c <nk_init_custom+0xcc>)
 8010888:	4a26      	ldr	r2, [pc, #152]	; (8010924 <nk_init_custom+0xc4>)
 801088a:	2131      	movs	r1, #49	; 0x31
 801088c:	4826      	ldr	r0, [pc, #152]	; (8010928 <nk_init_custom+0xc8>)
 801088e:	f014 f923 	bl	8024ad8 <__assert_func>
    if (!cmds || !pool) return 0;
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <nk_init_custom+0x3e>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d101      	bne.n	80108a2 <nk_init_custom+0x42>
 801089e:	2300      	movs	r3, #0
 80108a0:	e039      	b.n	8010916 <nk_init_custom+0xb6>

    nk_setup(ctx, font);
 80108a2:	6839      	ldr	r1, [r7, #0]
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f7ff ffa9 	bl	80107fc <nk_setup>
    ctx->memory = *cmds;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108b0:	461a      	mov	r2, r3
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	f602 248c 	addw	r4, r2, #2700	; 0xa8c
 80108b8:	461d      	mov	r5, r3
 80108ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80108ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (pool->type == NK_BUFFER_FIXED) {
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	7f1b      	ldrb	r3, [r3, #28]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d10b      	bne.n	80108ee <nk_init_custom+0x8e>
        /* take memory from buffer and alloc fixed pool */
        nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 80108dc:	3324      	adds	r3, #36	; 0x24
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	6a11      	ldr	r1, [r2, #32]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80108e6:	4618      	mov	r0, r3
 80108e8:	f008 fd5e 	bl	80193a8 <nk_pool_init_fixed>
 80108ec:	e00b      	b.n	8010906 <nk_init_custom+0xa6>
    } else {
        /* create dynamic pool from buffer allocator */
        struct nk_allocator *alloc = &pool->pool;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	3310      	adds	r3, #16
 80108f2:	617b      	str	r3, [r7, #20]
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 80108fa:	3324      	adds	r3, #36	; 0x24
 80108fc:	2210      	movs	r2, #16
 80108fe:	6979      	ldr	r1, [r7, #20]
 8010900:	4618      	mov	r0, r3
 8010902:	f008 fd25 	bl	8019350 <nk_pool_init>
    }
    ctx->use_pool = nk_true;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801090c:	461a      	mov	r2, r3
 801090e:	2301      	movs	r3, #1
 8010910:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
    return 1;
 8010914:	2301      	movs	r3, #1
}
 8010916:	4618      	mov	r0, r3
 8010918:	3718      	adds	r7, #24
 801091a:	46bd      	mov	sp, r7
 801091c:	bdb0      	pop	{r4, r5, r7, pc}
 801091e:	bf00      	nop
 8010920:	08028790 	.word	0x08028790
 8010924:	0802a5c8 	.word	0x0802a5c8
 8010928:	08028768 	.word	0x08028768
 801092c:	08028798 	.word	0x08028798

08010930 <nk_clear>:
    ctx->freelist = 0;
    ctx->count = 0;
}
NK_API void
nk_clear(struct nk_context *ctx)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b086      	sub	sp, #24
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    struct nk_window *next;
    NK_ASSERT(ctx);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d105      	bne.n	801094a <nk_clear+0x1a>
 801093e:	4b96      	ldr	r3, [pc, #600]	; (8010b98 <nk_clear+0x268>)
 8010940:	4a96      	ldr	r2, [pc, #600]	; (8010b9c <nk_clear+0x26c>)
 8010942:	2172      	movs	r1, #114	; 0x72
 8010944:	4896      	ldr	r0, [pc, #600]	; (8010ba0 <nk_clear+0x270>)
 8010946:	f014 f8c7 	bl	8024ad8 <__assert_func>

    if (!ctx) return;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	f000 811e 	beq.w	8010b8e <nk_clear+0x25e>
    if (ctx->use_pool)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010958:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 801095c:	2b00      	cmp	r3, #0
 801095e:	d007      	beq.n	8010970 <nk_clear+0x40>
        nk_buffer_clear(&ctx->memory);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8010966:	330c      	adds	r3, #12
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe f9bb 	bl	800ece4 <nk_buffer_clear>
 801096e:	e007      	b.n	8010980 <nk_clear+0x50>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8010976:	330c      	adds	r3, #12
 8010978:	2100      	movs	r1, #0
 801097a:	4618      	mov	r0, r3
 801097c:	f7fe f94a 	bl	800ec14 <nk_buffer_reset>

    ctx->build = 0;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010986:	461a      	mov	r2, r3
 8010988:	2300      	movs	r3, #0
 801098a:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    ctx->memory.calls = 0;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010994:	461a      	mov	r2, r3
 8010996:	2300      	movs	r3, #0
 8010998:	f8c2 3ac0 	str.w	r3, [r2, #2752]	; 0xac0
    ctx->last_widget_state = 0;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109a2:	461a      	mov	r2, r3
 80109a4:	2300      	movs	r3, #0
 80109a6:	f8c2 3ad4 	str.w	r3, [r2, #2772]	; 0xad4
    ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80109bc:	3334      	adds	r3, #52	; 0x34
 80109be:	2228      	movs	r2, #40	; 0x28
 80109c0:	2100      	movs	r1, #0
 80109c2:	4618      	mov	r0, r3
 80109c4:	f011 fded 	bl	80225a2 <nk_memset>

    /* garbage collector */
    iter = ctx->begin;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109ce:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 80109d2:	617b      	str	r3, [r7, #20]
    while (iter) {
 80109d4:	e0cb      	b.n	8010b6e <nk_clear+0x23e>
        /* make sure valid minimized windows do not get removed */
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d013      	beq.n	8010a0a <nk_clear+0xda>
            !(iter->flags & NK_WINDOW_CLOSED) &&
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d10d      	bne.n	8010a0a <nk_clear+0xda>
            iter->seq == ctx->seq) {
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109f8:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
            !(iter->flags & NK_WINDOW_CLOSED) &&
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d104      	bne.n	8010a0a <nk_clear+0xda>
            iter = iter->next;
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010a06:	617b      	str	r3, [r7, #20]
            continue;
 8010a08:	e0b1      	b.n	8010b6e <nk_clear+0x23e>
        }
        /* remove hotness from hidden or closed windows*/
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d105      	bne.n	8010a22 <nk_clear+0xf2>
            (iter->flags & NK_WINDOW_CLOSED)) &&
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d03a      	beq.n	8010a98 <nk_clear+0x168>
            iter == ctx->active) {
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a28:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
            (iter->flags & NK_WINDOW_CLOSED)) &&
 8010a2c:	697a      	ldr	r2, [r7, #20]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d132      	bne.n	8010a98 <nk_clear+0x168>
            ctx->active = iter->prev;
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010a3e:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = iter->prev;
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010a4e:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (!ctx->end)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a58:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d106      	bne.n	8010a6e <nk_clear+0x13e>
                ctx->begin = 0;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a66:	461a      	mov	r2, r3
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (ctx->active)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a74:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d00d      	beq.n	8010a98 <nk_clear+0x168>
                ctx->active->flags &= ~(unsigned)NK_WINDOW_ROM;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a82:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a8e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010a96:	649a      	str	r2, [r3, #72]	; 0x48
        }
        /* free unused popup windows */
        if (iter->popup.win && iter->popup.win->seq != ctx->seq) {
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d015      	beq.n	8010ace <nk_clear+0x19e>
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010ab0:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d00a      	beq.n	8010ace <nk_clear+0x19e>
            nk_free_window(ctx, iter->popup.win);
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010abe:	4619      	mov	r1, r3
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f012 ff44 	bl	802394e <nk_free_window>
            iter->popup.win = 0;
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        }
        /* remove unused window state tables */
        {struct nk_table *n, *it = iter->tables;
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010ad4:	613b      	str	r3, [r7, #16]
        while (it) {
 8010ad6:	e025      	b.n	8010b24 <nk_clear+0x1f4>
            n = it->next;
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8010ade:	60bb      	str	r3, [r7, #8]
            if (it->seq != ctx->seq) {
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010aea:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d016      	beq.n	8010b20 <nk_clear+0x1f0>
                nk_remove_table(iter, it);
 8010af2:	6939      	ldr	r1, [r7, #16]
 8010af4:	6978      	ldr	r0, [r7, #20]
 8010af6:	f00e fc4a 	bl	801f38e <nk_remove_table>
                nk_zero(it, sizeof(union nk_page_data));
 8010afa:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8010afe:	6938      	ldr	r0, [r7, #16]
 8010b00:	f011 fdc0 	bl	8022684 <nk_zero>
                nk_free_table(ctx, it);
 8010b04:	6939      	ldr	r1, [r7, #16]
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f00e fbef 	bl	801f2ea <nk_free_table>
                if (it == iter->tables)
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010b12:	693a      	ldr	r2, [r7, #16]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d103      	bne.n	8010b20 <nk_clear+0x1f0>
                    iter->tables = n;
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
            } it = n;
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	613b      	str	r3, [r7, #16]
        while (it) {
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d1d6      	bne.n	8010ad8 <nk_clear+0x1a8>
        }}
        /* window itself is not used anymore so free */
        if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b34:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d105      	bne.n	8010b48 <nk_clear+0x218>
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d00e      	beq.n	8010b66 <nk_clear+0x236>
            next = iter->next;
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010b4e:	60fb      	str	r3, [r7, #12]
            nk_remove_window(ctx, iter);
 8010b50:	6979      	ldr	r1, [r7, #20]
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f013 f87c 	bl	8023c50 <nk_remove_window>
            nk_free_window(ctx, iter);
 8010b58:	6979      	ldr	r1, [r7, #20]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f012 fef7 	bl	802394e <nk_free_window>
            iter = next;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	617b      	str	r3, [r7, #20]
 8010b64:	e003      	b.n	8010b6e <nk_clear+0x23e>
        } else iter = iter->next;
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010b6c:	617b      	str	r3, [r7, #20]
    while (iter) {
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	f47f af30 	bne.w	80109d6 <nk_clear+0xa6>
    }
    ctx->seq++;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b7c:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010b80:	3301      	adds	r3, #1
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010b88:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
 8010b8c:	e000      	b.n	8010b90 <nk_clear+0x260>
    if (!ctx) return;
 8010b8e:	bf00      	nop
}
 8010b90:	3718      	adds	r7, #24
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	08028764 	.word	0x08028764
 8010b9c:	0802a5d8 	.word	0x0802a5d8
 8010ba0:	08028768 	.word	0x08028768

08010ba4 <nk_start_buffer>:
NK_LIB void
nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 8010ba4:	b590      	push	{r4, r7, lr}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d105      	bne.n	8010bc0 <nk_start_buffer+0x1c>
 8010bb4:	4b17      	ldr	r3, [pc, #92]	; (8010c14 <nk_start_buffer+0x70>)
 8010bb6:	4a18      	ldr	r2, [pc, #96]	; (8010c18 <nk_start_buffer+0x74>)
 8010bb8:	21b2      	movs	r1, #178	; 0xb2
 8010bba:	4818      	ldr	r0, [pc, #96]	; (8010c1c <nk_start_buffer+0x78>)
 8010bbc:	f013 ff8c 	bl	8024ad8 <__assert_func>
    NK_ASSERT(buffer);
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d105      	bne.n	8010bd2 <nk_start_buffer+0x2e>
 8010bc6:	4b16      	ldr	r3, [pc, #88]	; (8010c20 <nk_start_buffer+0x7c>)
 8010bc8:	4a13      	ldr	r2, [pc, #76]	; (8010c18 <nk_start_buffer+0x74>)
 8010bca:	21b3      	movs	r1, #179	; 0xb3
 8010bcc:	4813      	ldr	r0, [pc, #76]	; (8010c1c <nk_start_buffer+0x78>)
 8010bce:	f013 ff83 	bl	8024ad8 <__assert_func>
    if (!ctx || !buffer) return;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d019      	beq.n	8010c0c <nk_start_buffer+0x68>
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d016      	beq.n	8010c0c <nk_start_buffer+0x68>
    buffer->begin = ctx->memory.allocated;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010be4:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	61da      	str	r2, [r3, #28]
    buffer->end = buffer->begin;
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	69da      	ldr	r2, [r3, #28]
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	621a      	str	r2, [r3, #32]
    buffer->last = buffer->begin;
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	69da      	ldr	r2, [r3, #28]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	625a      	str	r2, [r3, #36]	; 0x24
    buffer->clip = nk_null_rect;
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	4a09      	ldr	r2, [pc, #36]	; (8010c24 <nk_start_buffer+0x80>)
 8010c00:	1d1c      	adds	r4, r3, #4
 8010c02:	4613      	mov	r3, r2
 8010c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010c0a:	e000      	b.n	8010c0e <nk_start_buffer+0x6a>
    if (!ctx || !buffer) return;
 8010c0c:	bf00      	nop
}
 8010c0e:	370c      	adds	r7, #12
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd90      	pop	{r4, r7, pc}
 8010c14:	08028764 	.word	0x08028764
 8010c18:	0802a5e4 	.word	0x0802a5e4
 8010c1c:	08028768 	.word	0x08028768
 8010c20:	080287a8 	.word	0x080287a8
 8010c24:	0802a5a8 	.word	0x0802a5a8

08010c28 <nk_start>:
NK_LIB void
nk_start(struct nk_context *ctx, struct nk_window *win)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d105      	bne.n	8010c44 <nk_start+0x1c>
 8010c38:	4b0c      	ldr	r3, [pc, #48]	; (8010c6c <nk_start+0x44>)
 8010c3a:	4a0d      	ldr	r2, [pc, #52]	; (8010c70 <nk_start+0x48>)
 8010c3c:	21bd      	movs	r1, #189	; 0xbd
 8010c3e:	480d      	ldr	r0, [pc, #52]	; (8010c74 <nk_start+0x4c>)
 8010c40:	f013 ff4a 	bl	8024ad8 <__assert_func>
    NK_ASSERT(win);
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d105      	bne.n	8010c56 <nk_start+0x2e>
 8010c4a:	4b0b      	ldr	r3, [pc, #44]	; (8010c78 <nk_start+0x50>)
 8010c4c:	4a08      	ldr	r2, [pc, #32]	; (8010c70 <nk_start+0x48>)
 8010c4e:	21be      	movs	r1, #190	; 0xbe
 8010c50:	4808      	ldr	r0, [pc, #32]	; (8010c74 <nk_start+0x4c>)
 8010c52:	f013 ff41 	bl	8024ad8 <__assert_func>
    nk_start_buffer(ctx, &win->buffer);
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	3364      	adds	r3, #100	; 0x64
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff ffa1 	bl	8010ba4 <nk_start_buffer>
}
 8010c62:	bf00      	nop
 8010c64:	3708      	adds	r7, #8
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	08028764 	.word	0x08028764
 8010c70:	0802a5f4 	.word	0x0802a5f4
 8010c74:	08028768 	.word	0x08028768
 8010c78:	080287b0 	.word	0x080287b0

08010c7c <nk_start_popup>:
NK_LIB void
nk_start_popup(struct nk_context *ctx, struct nk_window *win)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d105      	bne.n	8010c98 <nk_start_popup+0x1c>
 8010c8c:	4b19      	ldr	r3, [pc, #100]	; (8010cf4 <nk_start_popup+0x78>)
 8010c8e:	4a1a      	ldr	r2, [pc, #104]	; (8010cf8 <nk_start_popup+0x7c>)
 8010c90:	21c5      	movs	r1, #197	; 0xc5
 8010c92:	481a      	ldr	r0, [pc, #104]	; (8010cfc <nk_start_popup+0x80>)
 8010c94:	f013 ff20 	bl	8024ad8 <__assert_func>
    NK_ASSERT(win);
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d105      	bne.n	8010caa <nk_start_popup+0x2e>
 8010c9e:	4b18      	ldr	r3, [pc, #96]	; (8010d00 <nk_start_popup+0x84>)
 8010ca0:	4a15      	ldr	r2, [pc, #84]	; (8010cf8 <nk_start_popup+0x7c>)
 8010ca2:	21c6      	movs	r1, #198	; 0xc6
 8010ca4:	4815      	ldr	r0, [pc, #84]	; (8010cfc <nk_start_popup+0x80>)
 8010ca6:	f013 ff17 	bl	8024ad8 <__assert_func>
    if (!ctx || !win) return;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d01d      	beq.n	8010cec <nk_start_popup+0x70>
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d01a      	beq.n	8010cec <nk_start_popup+0x70>

    /* save buffer fill state for popup */
    buf = &win->popup.buf;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010cbc:	60fb      	str	r3, [r7, #12]
    buf->begin = win->buffer.end;
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	601a      	str	r2, [r3, #0]
    buf->end = win->buffer.end;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	60da      	str	r2, [r3, #12]
    buf->parent = win->buffer.last;
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	605a      	str	r2, [r3, #4]
    buf->last = buf->begin;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	609a      	str	r2, [r3, #8]
    buf->active = nk_true;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	611a      	str	r2, [r3, #16]
 8010cea:	e000      	b.n	8010cee <nk_start_popup+0x72>
    if (!ctx || !win) return;
 8010cec:	bf00      	nop
}
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	08028764 	.word	0x08028764
 8010cf8:	0802a600 	.word	0x0802a600
 8010cfc:	08028768 	.word	0x08028768
 8010d00:	080287b0 	.word	0x080287b0

08010d04 <nk_finish_popup>:
NK_LIB void
nk_finish_popup(struct nk_context *ctx, struct nk_window *win)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d105      	bne.n	8010d20 <nk_finish_popup+0x1c>
 8010d14:	4b13      	ldr	r3, [pc, #76]	; (8010d64 <nk_finish_popup+0x60>)
 8010d16:	4a14      	ldr	r2, [pc, #80]	; (8010d68 <nk_finish_popup+0x64>)
 8010d18:	21d5      	movs	r1, #213	; 0xd5
 8010d1a:	4814      	ldr	r0, [pc, #80]	; (8010d6c <nk_finish_popup+0x68>)
 8010d1c:	f013 fedc 	bl	8024ad8 <__assert_func>
    NK_ASSERT(win);
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d105      	bne.n	8010d32 <nk_finish_popup+0x2e>
 8010d26:	4b12      	ldr	r3, [pc, #72]	; (8010d70 <nk_finish_popup+0x6c>)
 8010d28:	4a0f      	ldr	r2, [pc, #60]	; (8010d68 <nk_finish_popup+0x64>)
 8010d2a:	21d6      	movs	r1, #214	; 0xd6
 8010d2c:	480f      	ldr	r0, [pc, #60]	; (8010d6c <nk_finish_popup+0x68>)
 8010d2e:	f013 fed3 	bl	8024ad8 <__assert_func>
    if (!ctx || !win) return;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d011      	beq.n	8010d5c <nk_finish_popup+0x58>
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00e      	beq.n	8010d5c <nk_finish_popup+0x58>

    buf = &win->popup.buf;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010d44:	60fb      	str	r3, [r7, #12]
    buf->last = win->buffer.last;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	609a      	str	r2, [r3, #8]
    buf->end = win->buffer.end;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	60da      	str	r2, [r3, #12]
 8010d5a:	e000      	b.n	8010d5e <nk_finish_popup+0x5a>
    if (!ctx || !win) return;
 8010d5c:	bf00      	nop
}
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	08028764 	.word	0x08028764
 8010d68:	0802a610 	.word	0x0802a610
 8010d6c:	08028768 	.word	0x08028768
 8010d70:	080287b0 	.word	0x080287b0

08010d74 <nk_finish_buffer>:
NK_LIB void
nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d105      	bne.n	8010d90 <nk_finish_buffer+0x1c>
 8010d84:	4b10      	ldr	r3, [pc, #64]	; (8010dc8 <nk_finish_buffer+0x54>)
 8010d86:	4a11      	ldr	r2, [pc, #68]	; (8010dcc <nk_finish_buffer+0x58>)
 8010d88:	21e0      	movs	r1, #224	; 0xe0
 8010d8a:	4811      	ldr	r0, [pc, #68]	; (8010dd0 <nk_finish_buffer+0x5c>)
 8010d8c:	f013 fea4 	bl	8024ad8 <__assert_func>
    NK_ASSERT(buffer);
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d105      	bne.n	8010da2 <nk_finish_buffer+0x2e>
 8010d96:	4b0f      	ldr	r3, [pc, #60]	; (8010dd4 <nk_finish_buffer+0x60>)
 8010d98:	4a0c      	ldr	r2, [pc, #48]	; (8010dcc <nk_finish_buffer+0x58>)
 8010d9a:	21e1      	movs	r1, #225	; 0xe1
 8010d9c:	480c      	ldr	r0, [pc, #48]	; (8010dd0 <nk_finish_buffer+0x5c>)
 8010d9e:	f013 fe9b 	bl	8024ad8 <__assert_func>
    if (!ctx || !buffer) return;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d00a      	beq.n	8010dbe <nk_finish_buffer+0x4a>
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d007      	beq.n	8010dbe <nk_finish_buffer+0x4a>
    buffer->end = ctx->memory.allocated;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010db4:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	621a      	str	r2, [r3, #32]
 8010dbc:	e000      	b.n	8010dc0 <nk_finish_buffer+0x4c>
    if (!ctx || !buffer) return;
 8010dbe:	bf00      	nop
}
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	08028764 	.word	0x08028764
 8010dcc:	0802a620 	.word	0x0802a620
 8010dd0:	08028768 	.word	0x08028768
 8010dd4:	080287a8 	.word	0x080287a8

08010dd8 <nk_finish>:
NK_LIB void
nk_finish(struct nk_context *ctx, struct nk_window *win)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    struct nk_command *parent_last;
    void *memory;

    NK_ASSERT(ctx);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d105      	bne.n	8010df4 <nk_finish+0x1c>
 8010de8:	4b1c      	ldr	r3, [pc, #112]	; (8010e5c <nk_finish+0x84>)
 8010dea:	4a1d      	ldr	r2, [pc, #116]	; (8010e60 <nk_finish+0x88>)
 8010dec:	21ec      	movs	r1, #236	; 0xec
 8010dee:	481d      	ldr	r0, [pc, #116]	; (8010e64 <nk_finish+0x8c>)
 8010df0:	f013 fe72 	bl	8024ad8 <__assert_func>
    NK_ASSERT(win);
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d105      	bne.n	8010e06 <nk_finish+0x2e>
 8010dfa:	4b1b      	ldr	r3, [pc, #108]	; (8010e68 <nk_finish+0x90>)
 8010dfc:	4a18      	ldr	r2, [pc, #96]	; (8010e60 <nk_finish+0x88>)
 8010dfe:	21ed      	movs	r1, #237	; 0xed
 8010e00:	4818      	ldr	r0, [pc, #96]	; (8010e64 <nk_finish+0x8c>)
 8010e02:	f013 fe69 	bl	8024ad8 <__assert_func>
    if (!ctx || !win) return;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d021      	beq.n	8010e50 <nk_finish+0x78>
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d01e      	beq.n	8010e50 <nk_finish+0x78>
    nk_finish_buffer(ctx, &win->buffer);
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	3364      	adds	r3, #100	; 0x64
 8010e16:	4619      	mov	r1, r3
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff ffab 	bl	8010d74 <nk_finish_buffer>
    if (!win->popup.buf.active) return;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d015      	beq.n	8010e54 <nk_finish+0x7c>

    buf = &win->popup.buf;
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010e2e:	617b      	str	r3, [r7, #20]
    memory = ctx->memory.memory.ptr;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e36:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010e3a:	613b      	str	r3, [r7, #16]
    parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	693a      	ldr	r2, [r7, #16]
 8010e42:	4413      	add	r3, r2
 8010e44:	60fb      	str	r3, [r7, #12]
    parent_last->next = buf->end;
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	68da      	ldr	r2, [r3, #12]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	605a      	str	r2, [r3, #4]
 8010e4e:	e002      	b.n	8010e56 <nk_finish+0x7e>
    if (!ctx || !win) return;
 8010e50:	bf00      	nop
 8010e52:	e000      	b.n	8010e56 <nk_finish+0x7e>
    if (!win->popup.buf.active) return;
 8010e54:	bf00      	nop
}
 8010e56:	3718      	adds	r7, #24
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	08028764 	.word	0x08028764
 8010e60:	0802a634 	.word	0x0802a634
 8010e64:	08028768 	.word	0x08028768
 8010e68:	080287b0 	.word	0x080287b0

08010e6c <nk_build>:
NK_LIB void
nk_build(struct nk_context *ctx)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b08e      	sub	sp, #56	; 0x38
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
    struct nk_window *it = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command *cmd = 0;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	633b      	str	r3, [r7, #48]	; 0x30
    nk_byte *buffer = 0;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* draw cursor overlay */
    if (!ctx->style.cursor_active)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d105      	bne.n	8010e96 <nk_build+0x2a>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d05d      	beq.n	8010f5c <nk_build+0xf0>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d158      	bne.n	8010f5c <nk_build+0xf0>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d053      	beq.n	8010f5c <nk_build+0xf0>
        struct nk_rect mouse_bounds;
        const struct nk_cursor *cursor = ctx->style.cursor_active;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010eba:	627b      	str	r3, [r7, #36]	; 0x24
        nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010ec2:	3334      	adds	r3, #52	; 0x34
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	f502 51d4 	add.w	r1, r2, #6784	; 0x1a80
 8010eca:	310c      	adds	r1, #12
 8010ecc:	2200      	movs	r2, #0
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f000 fb94 	bl	80115fc <nk_command_buffer_init>
        nk_start_buffer(ctx, &ctx->overlay);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010eda:	3334      	adds	r3, #52	; 0x34
 8010edc:	4619      	mov	r1, r3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7ff fe60 	bl	8010ba4 <nk_start_buffer>

        mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	edd3 7a06 	vldr	s15, [r3, #24]
 8010ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ef4:	edc7 7a03 	vstr	s15, [r7, #12]
        mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8010efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f00:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f08:	edc7 7a04 	vstr	s15, [r7, #16]
        mouse_bounds.w = cursor->size.x;
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0e:	691b      	ldr	r3, [r3, #16]
 8010f10:	617b      	str	r3, [r7, #20]
        mouse_bounds.h = cursor->size.y;
 8010f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f14:	695b      	ldr	r3, [r3, #20]
 8010f16:	61bb      	str	r3, [r7, #24]

        nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010f1e:	3334      	adds	r3, #52	; 0x34
 8010f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f22:	4a62      	ldr	r2, [pc, #392]	; (80110ac <nk_build+0x240>)
 8010f24:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f28:	edd7 6a04 	vldr	s13, [r7, #16]
 8010f2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f34:	6812      	ldr	r2, [r2, #0]
 8010f36:	eeb0 0a46 	vmov.f32	s0, s12
 8010f3a:	eef0 0a66 	vmov.f32	s1, s13
 8010f3e:	eeb0 1a47 	vmov.f32	s2, s14
 8010f42:	eef0 1a67 	vmov.f32	s3, s15
 8010f46:	4618      	mov	r0, r3
 8010f48:	f001 f904 	bl	8012154 <nk_draw_image>
        nk_finish_buffer(ctx, &ctx->overlay);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010f52:	3334      	adds	r3, #52	; 0x34
 8010f54:	4619      	mov	r1, r3
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f7ff ff0c 	bl	8010d74 <nk_finish_buffer>
    }
    /* build one big draw command list out of all window buffers */
    it = ctx->begin;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010f62:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010f66:	637b      	str	r3, [r7, #52]	; 0x34
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f6e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010f72:	62bb      	str	r3, [r7, #40]	; 0x28
    while (it != 0) {
 8010f74:	e04d      	b.n	8011012 <nk_build+0x1a6>
        struct nk_window *next = it->next;
 8010f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f78:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 8010f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d03c      	beq.n	8011008 <nk_build+0x19c>
 8010f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d136      	bne.n	8011008 <nk_build+0x19c>
            it->seq != ctx->seq)
 8010f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010fa4:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d12d      	bne.n	8011008 <nk_build+0x19c>
            goto cont;

        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
 8010fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fb4:	4413      	add	r3, r2
 8010fb6:	633b      	str	r3, [r7, #48]	; 0x30
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010fb8:	e003      	b.n	8010fc2 <nk_build+0x156>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
            next = next->next; /* skip empty command buffers */
 8010fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d016      	beq.n	8010ff6 <nk_build+0x18a>
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d0f0      	beq.n	8010fba <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8010fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1ea      	bne.n	8010fba <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8010fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010fee:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d1e1      	bne.n	8010fba <nk_build+0x14e>

        if (next) cmd->next = next->buffer.begin;
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d007      	beq.n	801100c <nk_build+0x1a0>
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8011002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011004:	605a      	str	r2, [r3, #4]
 8011006:	e002      	b.n	801100e <nk_build+0x1a2>
            goto cont;
 8011008:	bf00      	nop
 801100a:	e000      	b.n	801100e <nk_build+0x1a2>
        cont: it = next;
 801100c:	bf00      	nop
 801100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011010:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8011012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011014:	2b00      	cmp	r3, #0
 8011016:	d1ae      	bne.n	8010f76 <nk_build+0x10a>
    }
    /* append all popup draw commands into lists */
    it = ctx->begin;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801101e:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8011022:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8011024:	e01c      	b.n	8011060 <nk_build+0x1f4>
        struct nk_window *next = it->next;
 8011026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011028:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801102c:	623b      	str	r3, [r7, #32]
        struct nk_popup_buffer *buf;
        if (!it->popup.buf.active)
 801102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011030:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8011034:	2b00      	cmp	r3, #0
 8011036:	d010      	beq.n	801105a <nk_build+0x1ee>
            goto skip;

        buf = &it->popup.buf;
 8011038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801103e:	61fb      	str	r3, [r7, #28]
        cmd->next = buf->begin;
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	605a      	str	r2, [r3, #4]
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801104e:	4413      	add	r3, r2
 8011050:	633b      	str	r3, [r7, #48]	; 0x30
        buf->active = nk_false;
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	2200      	movs	r2, #0
 8011056:	611a      	str	r2, [r3, #16]
 8011058:	e000      	b.n	801105c <nk_build+0x1f0>
            goto skip;
 801105a:	bf00      	nop
        skip: it = next;
 801105c:	6a3b      	ldr	r3, [r7, #32]
 801105e:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8011060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1df      	bne.n	8011026 <nk_build+0x1ba>
    }
    if (cmd) {
 8011066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011068:	2b00      	cmp	r3, #0
 801106a:	d01a      	beq.n	80110a2 <nk_build+0x236>
        /* append overlay commands */
        if (ctx->overlay.end != ctx->overlay.begin)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011072:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801107c:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 8011080:	429a      	cmp	r2, r3
 8011082:	d007      	beq.n	8011094 <nk_build+0x228>
            cmd->next = ctx->overlay.begin;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801108a:	f8d3 2610 	ldr.w	r2, [r3, #1552]	; 0x610
 801108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011090:	605a      	str	r2, [r3, #4]
        else cmd->next = ctx->memory.allocated;
    }
}
 8011092:	e006      	b.n	80110a2 <nk_build+0x236>
        else cmd->next = ctx->memory.allocated;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801109a:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 801109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a0:	605a      	str	r2, [r3, #4]
}
 80110a2:	bf00      	nop
 80110a4:	3738      	adds	r7, #56	; 0x38
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	0802a5b8 	.word	0x0802a5b8

080110b0 <nk__begin>:
NK_API const struct nk_command*
nk__begin(struct nk_context *ctx)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    nk_byte *buffer;
    NK_ASSERT(ctx);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d106      	bne.n	80110cc <nk__begin+0x1c>
 80110be:	4b2f      	ldr	r3, [pc, #188]	; (801117c <nk__begin+0xcc>)
 80110c0:	4a2f      	ldr	r2, [pc, #188]	; (8011180 <nk__begin+0xd0>)
 80110c2:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80110c6:	482f      	ldr	r0, [pc, #188]	; (8011184 <nk__begin+0xd4>)
 80110c8:	f013 fd06 	bl	8024ad8 <__assert_func>
    if (!ctx) return 0;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d101      	bne.n	80110d6 <nk__begin+0x26>
 80110d2:	2300      	movs	r3, #0
 80110d4:	e04e      	b.n	8011174 <nk__begin+0xc4>
    if (!ctx->count) return 0;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80110dc:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d101      	bne.n	80110e8 <nk__begin+0x38>
 80110e4:	2300      	movs	r3, #0
 80110e6:	e045      	b.n	8011174 <nk__begin+0xc4>

    buffer = (nk_byte*)ctx->memory.memory.ptr;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110ee:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80110f2:	60bb      	str	r3, [r7, #8]
    if (!ctx->build) {
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80110fa:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d109      	bne.n	8011116 <nk__begin+0x66>
        nk_build(ctx);
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7ff feb2 	bl	8010e6c <nk_build>
        ctx->build = nk_true;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801110e:	461a      	mov	r2, r3
 8011110:	2301      	movs	r3, #1
 8011112:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    }
    iter = ctx->begin;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801111c:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8011120:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 8011122:	e003      	b.n	801112c <nk__begin+0x7c>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
        iter = iter->next;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801112a:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d016      	beq.n	8011160 <nk__begin+0xb0>
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801113e:	429a      	cmp	r2, r3
 8011140:	d0f0      	beq.n	8011124 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 801114a:	2b00      	cmp	r3, #0
 801114c:	d1ea      	bne.n	8011124 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011158:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 801115c:	429a      	cmp	r2, r3
 801115e:	d1e1      	bne.n	8011124 <nk__begin+0x74>
    if (!iter) return 0;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d101      	bne.n	801116a <nk__begin+0xba>
 8011166:	2300      	movs	r3, #0
 8011168:	e004      	b.n	8011174 <nk__begin+0xc4>
    return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011170:	68ba      	ldr	r2, [r7, #8]
 8011172:	4413      	add	r3, r2
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	08028764 	.word	0x08028764
 8011180:	0802a640 	.word	0x0802a640
 8011184:	08028768 	.word	0x08028768

08011188 <nk__next>:

NK_API const struct nk_command*
nk__next(struct nk_context *ctx, const struct nk_command *cmd)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
    nk_byte *buffer;
    const struct nk_command *next;
    NK_ASSERT(ctx);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d106      	bne.n	80111a6 <nk__next+0x1e>
 8011198:	4b18      	ldr	r3, [pc, #96]	; (80111fc <nk__next+0x74>)
 801119a:	4a19      	ldr	r2, [pc, #100]	; (8011200 <nk__next+0x78>)
 801119c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80111a0:	4818      	ldr	r0, [pc, #96]	; (8011204 <nk__next+0x7c>)
 80111a2:	f013 fc99 	bl	8024ad8 <__assert_func>
    if (!ctx || !cmd || !ctx->count) return 0;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d009      	beq.n	80111c0 <nk__next+0x38>
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d006      	beq.n	80111c0 <nk__next+0x38>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80111b8:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d101      	bne.n	80111c4 <nk__next+0x3c>
 80111c0:	2300      	movs	r3, #0
 80111c2:	e016      	b.n	80111f2 <nk__next+0x6a>
    if (cmd->next >= ctx->memory.allocated) return 0;
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	685a      	ldr	r2, [r3, #4]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111ce:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d301      	bcc.n	80111da <nk__next+0x52>
 80111d6:	2300      	movs	r3, #0
 80111d8:	e00b      	b.n	80111f2 <nk__next+0x6a>
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111e0:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80111e4:	60fb      	str	r3, [r7, #12]
    next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	4413      	add	r3, r2
 80111ee:	60bb      	str	r3, [r7, #8]
    return next;
 80111f0:	68bb      	ldr	r3, [r7, #8]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3710      	adds	r7, #16
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	08028764 	.word	0x08028764
 8011200:	0802a64c 	.word	0x0802a64c
 8011204:	08028768 	.word	0x08028768

08011208 <nk_contextual_item_text>:
    return ret;
}
NK_API nk_bool
nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,
    nk_flags alignment)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b092      	sub	sp, #72	; 0x48
 801120c:	af06      	add	r7, sp, #24
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
 8011214:	603b      	str	r3, [r7, #0]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d105      	bne.n	8011228 <nk_contextual_item_text+0x20>
 801121c:	4b4e      	ldr	r3, [pc, #312]	; (8011358 <nk_contextual_item_text+0x150>)
 801121e:	4a4f      	ldr	r2, [pc, #316]	; (801135c <nk_contextual_item_text+0x154>)
 8011220:	214f      	movs	r1, #79	; 0x4f
 8011222:	484f      	ldr	r0, [pc, #316]	; (8011360 <nk_contextual_item_text+0x158>)
 8011224:	f013 fc58 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801122e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011232:	2b00      	cmp	r3, #0
 8011234:	d105      	bne.n	8011242 <nk_contextual_item_text+0x3a>
 8011236:	4b4b      	ldr	r3, [pc, #300]	; (8011364 <nk_contextual_item_text+0x15c>)
 8011238:	4a48      	ldr	r2, [pc, #288]	; (801135c <nk_contextual_item_text+0x154>)
 801123a:	2150      	movs	r1, #80	; 0x50
 801123c:	4848      	ldr	r0, [pc, #288]	; (8011360 <nk_contextual_item_text+0x158>)
 801123e:	f013 fc4b 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011248:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801124c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011250:	2b00      	cmp	r3, #0
 8011252:	d105      	bne.n	8011260 <nk_contextual_item_text+0x58>
 8011254:	4b44      	ldr	r3, [pc, #272]	; (8011368 <nk_contextual_item_text+0x160>)
 8011256:	4a41      	ldr	r2, [pc, #260]	; (801135c <nk_contextual_item_text+0x154>)
 8011258:	2151      	movs	r1, #81	; 0x51
 801125a:	4841      	ldr	r0, [pc, #260]	; (8011360 <nk_contextual_item_text+0x158>)
 801125c:	f013 fc3c 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d00f      	beq.n	8011286 <nk_contextual_item_text+0x7e>
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801126c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011270:	2b00      	cmp	r3, #0
 8011272:	d008      	beq.n	8011286 <nk_contextual_item_text+0x7e>
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801127a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <nk_contextual_item_text+0x82>
        return 0;
 8011286:	2300      	movs	r3, #0
 8011288:	e061      	b.n	801134e <nk_contextual_item_text+0x146>

    win = ctx->current;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011290:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011294:	62fb      	str	r3, [r7, #44]	; 0x2c
    style = &ctx->style;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801129c:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);
 801129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a0:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80112a4:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80112a8:	f107 0310 	add.w	r3, r7, #16
 80112ac:	eeb0 0a47 	vmov.f32	s0, s14
 80112b0:	eef0 0a67 	vmov.f32	s1, s15
 80112b4:	68f9      	ldr	r1, [r7, #12]
 80112b6:	4618      	mov	r0, r3
 80112b8:	f012 fad4 	bl	8023864 <nk_widget_fitting>
 80112bc:	4603      	mov	r3, r0
 80112be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return nk_false;
 80112c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d101      	bne.n	80112ce <nk_contextual_item_text+0xc6>
 80112ca:	2300      	movs	r3, #0
 80112cc:	e03f      	b.n	801134e <nk_contextual_item_text+0x146>

    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 80112ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d009      	beq.n	80112ea <nk_contextual_item_text+0xe2>
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d101      	bne.n	80112ea <nk_contextual_item_text+0xe2>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	e000      	b.n	80112ec <nk_contextual_item_text+0xe4>
 80112ea:	2300      	movs	r3, #0
 80112ec:	623b      	str	r3, [r7, #32]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 80112f4:	3014      	adds	r0, #20
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80112fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fe:	33d0      	adds	r3, #208	; 0xd0
        text, len, alignment, NK_BUTTON_DEFAULT, &style->contextual_button, in, style->font)) {
 8011300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011302:	6812      	ldr	r2, [r2, #0]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8011304:	ed97 6a04 	vldr	s12, [r7, #16]
 8011308:	edd7 6a05 	vldr	s13, [r7, #20]
 801130c:	ed97 7a06 	vldr	s14, [r7, #24]
 8011310:	edd7 7a07 	vldr	s15, [r7, #28]
 8011314:	9204      	str	r2, [sp, #16]
 8011316:	6a3a      	ldr	r2, [r7, #32]
 8011318:	9203      	str	r2, [sp, #12]
 801131a:	9302      	str	r3, [sp, #8]
 801131c:	2300      	movs	r3, #0
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	68ba      	ldr	r2, [r7, #8]
 8011328:	eeb0 0a46 	vmov.f32	s0, s12
 801132c:	eef0 0a66 	vmov.f32	s1, s13
 8011330:	eeb0 1a47 	vmov.f32	s2, s14
 8011334:	eef0 1a67 	vmov.f32	s3, s15
 8011338:	f7fe f91e 	bl	800f578 <nk_do_button_text>
 801133c:	4603      	mov	r3, r0
 801133e:	2b00      	cmp	r3, #0
 8011340:	d004      	beq.n	801134c <nk_contextual_item_text+0x144>
        nk_contextual_close(ctx);
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	f000 f826 	bl	8011394 <nk_contextual_close>
        return nk_true;
 8011348:	2301      	movs	r3, #1
 801134a:	e000      	b.n	801134e <nk_contextual_item_text+0x146>
    }
    return nk_false;
 801134c:	2300      	movs	r3, #0
}
 801134e:	4618      	mov	r0, r3
 8011350:	3730      	adds	r7, #48	; 0x30
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	080287b4 	.word	0x080287b4
 801135c:	0802a658 	.word	0x0802a658
 8011360:	080287b8 	.word	0x080287b8
 8011364:	080287d8 	.word	0x080287d8
 8011368:	080287e8 	.word	0x080287e8

0801136c <nk_contextual_item_label>:
NK_API nk_bool
nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_text(ctx, label, nk_strlen(label), align);
 8011378:	68b8      	ldr	r0, [r7, #8]
 801137a:	f011 f9a1 	bl	80226c0 <nk_strlen>
 801137e:	4602      	mov	r2, r0
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	68b9      	ldr	r1, [r7, #8]
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f7ff ff3f 	bl	8011208 <nk_contextual_item_text>
 801138a:	4603      	mov	r3, r0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <nk_contextual_close>:
{
    return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);
}
NK_API void
nk_contextual_close(struct nk_context *ctx)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d105      	bne.n	80113ae <nk_contextual_close+0x1a>
 80113a2:	4b1e      	ldr	r3, [pc, #120]	; (801141c <nk_contextual_close+0x88>)
 80113a4:	4a1e      	ldr	r2, [pc, #120]	; (8011420 <nk_contextual_close+0x8c>)
 80113a6:	21b2      	movs	r1, #178	; 0xb2
 80113a8:	481e      	ldr	r0, [pc, #120]	; (8011424 <nk_contextual_close+0x90>)
 80113aa:	f013 fb95 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80113b4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d105      	bne.n	80113c8 <nk_contextual_close+0x34>
 80113bc:	4b1a      	ldr	r3, [pc, #104]	; (8011428 <nk_contextual_close+0x94>)
 80113be:	4a18      	ldr	r2, [pc, #96]	; (8011420 <nk_contextual_close+0x8c>)
 80113c0:	21b3      	movs	r1, #179	; 0xb3
 80113c2:	4818      	ldr	r0, [pc, #96]	; (8011424 <nk_contextual_close+0x90>)
 80113c4:	f013 fb88 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80113ce:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80113d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d105      	bne.n	80113e6 <nk_contextual_close+0x52>
 80113da:	4b14      	ldr	r3, [pc, #80]	; (801142c <nk_contextual_close+0x98>)
 80113dc:	4a10      	ldr	r2, [pc, #64]	; (8011420 <nk_contextual_close+0x8c>)
 80113de:	21b4      	movs	r1, #180	; 0xb4
 80113e0:	4810      	ldr	r0, [pc, #64]	; (8011424 <nk_contextual_close+0x90>)
 80113e2:	f013 fb79 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d013      	beq.n	8011414 <nk_contextual_close+0x80>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80113f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d00c      	beq.n	8011414 <nk_contextual_close+0x80>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011400:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011408:	2b00      	cmp	r3, #0
 801140a:	d003      	beq.n	8011414 <nk_contextual_close+0x80>
    nk_popup_close(ctx);
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f008 fbcd 	bl	8019bac <nk_popup_close>
 8011412:	e000      	b.n	8011416 <nk_contextual_close+0x82>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 8011414:	bf00      	nop
}
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	080287b4 	.word	0x080287b4
 8011420:	0802a670 	.word	0x0802a670
 8011424:	080287b8 	.word	0x080287b8
 8011428:	080287d8 	.word	0x080287d8
 801142c:	080287e8 	.word	0x080287e8

08011430 <nk_contextual_end>:
NK_API void
nk_contextual_end(struct nk_context *ctx)
{
 8011430:	b590      	push	{r4, r7, lr}
 8011432:	b08d      	sub	sp, #52	; 0x34
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    struct nk_panel *panel;
    NK_ASSERT(ctx);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d105      	bne.n	801144a <nk_contextual_end+0x1a>
 801143e:	4b69      	ldr	r3, [pc, #420]	; (80115e4 <nk_contextual_end+0x1b4>)
 8011440:	4a69      	ldr	r2, [pc, #420]	; (80115e8 <nk_contextual_end+0x1b8>)
 8011442:	21bd      	movs	r1, #189	; 0xbd
 8011444:	4869      	ldr	r0, [pc, #420]	; (80115ec <nk_contextual_end+0x1bc>)
 8011446:	f013 fb47 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011450:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011454:	2b00      	cmp	r3, #0
 8011456:	d105      	bne.n	8011464 <nk_contextual_end+0x34>
 8011458:	4b65      	ldr	r3, [pc, #404]	; (80115f0 <nk_contextual_end+0x1c0>)
 801145a:	4a63      	ldr	r2, [pc, #396]	; (80115e8 <nk_contextual_end+0x1b8>)
 801145c:	21be      	movs	r1, #190	; 0xbe
 801145e:	4863      	ldr	r0, [pc, #396]	; (80115ec <nk_contextual_end+0x1bc>)
 8011460:	f013 fb3a 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current) return;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	f000 80b8 	beq.w	80115dc <nk_contextual_end+0x1ac>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011472:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011476:	2b00      	cmp	r3, #0
 8011478:	f000 80b0 	beq.w	80115dc <nk_contextual_end+0x1ac>

    popup = ctx->current;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011482:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011486:	62fb      	str	r3, [r7, #44]	; 0x2c
    panel = popup->layout;
 8011488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801148e:	62bb      	str	r3, [r7, #40]	; 0x28
    NK_ASSERT(popup->parent);
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8011496:	2b00      	cmp	r3, #0
 8011498:	d105      	bne.n	80114a6 <nk_contextual_end+0x76>
 801149a:	4b56      	ldr	r3, [pc, #344]	; (80115f4 <nk_contextual_end+0x1c4>)
 801149c:	4a52      	ldr	r2, [pc, #328]	; (80115e8 <nk_contextual_end+0x1b8>)
 801149e:	21c3      	movs	r1, #195	; 0xc3
 80114a0:	4852      	ldr	r0, [pc, #328]	; (80115ec <nk_contextual_end+0x1bc>)
 80114a2:	f013 fb19 	bl	8024ad8 <__assert_func>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 80114a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d105      	bne.n	80114be <nk_contextual_end+0x8e>
 80114b2:	4b51      	ldr	r3, [pc, #324]	; (80115f8 <nk_contextual_end+0x1c8>)
 80114b4:	4a4c      	ldr	r2, [pc, #304]	; (80115e8 <nk_contextual_end+0x1b8>)
 80114b6:	21c4      	movs	r1, #196	; 0xc4
 80114b8:	484c      	ldr	r0, [pc, #304]	; (80115ec <nk_contextual_end+0x1bc>)
 80114ba:	f013 fb0d 	bl	8024ad8 <__assert_func>
    if (panel->flags & NK_WINDOW_DYNAMIC) {
 80114be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d07b      	beq.n	80115c2 <nk_contextual_end+0x192>
        /* Close behavior
        This is a bit of a hack solution since we do not know before we end our popup
        how big it will be. We therefore do not directly know when a
        click outside the non-blocking popup must close it at that direct frame.
        Instead it will be closed in the next frame.*/
        struct nk_rect body = {0,0,0,0};
 80114ca:	f107 0310 	add.w	r3, r7, #16
 80114ce:	2200      	movs	r2, #0
 80114d0:	601a      	str	r2, [r3, #0]
 80114d2:	605a      	str	r2, [r3, #4]
 80114d4:	609a      	str	r2, [r3, #8]
 80114d6:	60da      	str	r2, [r3, #12]
        if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {
 80114d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114da:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80114de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80114e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80114ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f6:	d53d      	bpl.n	8011574 <nk_contextual_end+0x144>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80114fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	4619      	mov	r1, r3
 8011504:	4610      	mov	r0, r2
 8011506:	f005 fdfd 	bl	8017104 <nk_panel_get_padding>
 801150a:	eeb0 7a40 	vmov.f32	s14, s0
 801150e:	eef0 7a60 	vmov.f32	s15, s1
 8011512:	ed87 7a02 	vstr	s14, [r7, #8]
 8011516:	edc7 7a03 	vstr	s15, [r7, #12]
            body = panel->bounds;
 801151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151c:	f107 0410 	add.w	r4, r7, #16
 8011520:	3308      	adds	r3, #8
 8011522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
 8011528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011530:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8011534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801153e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011542:	edd7 7a03 	vldr	s15, [r7, #12]
 8011546:	ee37 7a27 	vadd.f32	s14, s14, s15
 801154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8011550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011554:	edc7 7a05 	vstr	s15, [r7, #20]
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
 8011558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155a:	ed93 7a03 	vldr	s14, [r3, #12]
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	edd3 7a05 	vldr	s15, [r3, #20]
 8011564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011568:	edd7 7a05 	vldr	s15, [r7, #20]
 801156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011570:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2100      	movs	r1, #0
 8011578:	4618      	mov	r0, r3
 801157a:	f004 f831 	bl	80155e0 <nk_input_is_mouse_pressed>
 801157e:	6278      	str	r0, [r7, #36]	; 0x24
        int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	ed97 6a04 	vldr	s12, [r7, #16]
 8011586:	edd7 6a05 	vldr	s13, [r7, #20]
 801158a:	ed97 7a06 	vldr	s14, [r7, #24]
 801158e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011592:	eeb0 0a46 	vmov.f32	s0, s12
 8011596:	eef0 0a66 	vmov.f32	s1, s13
 801159a:	eeb0 1a47 	vmov.f32	s2, s14
 801159e:	eef0 1a67 	vmov.f32	s3, s15
 80115a2:	4618      	mov	r0, r3
 80115a4:	f003 ff60 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 80115a8:	6238      	str	r0, [r7, #32]
        if (pressed && in_body)
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d008      	beq.n	80115c2 <nk_contextual_end+0x192>
 80115b0:	6a3b      	ldr	r3, [r7, #32]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d005      	beq.n	80115c2 <nk_contextual_end+0x192>
            popup->flags |= NK_WINDOW_HIDDEN;
 80115b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80115be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c0:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    if (popup->flags & NK_WINDOW_HIDDEN)
 80115c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d002      	beq.n	80115d4 <nk_contextual_end+0x1a4>
        popup->seq = 0;
 80115ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d0:	2200      	movs	r2, #0
 80115d2:	601a      	str	r2, [r3, #0]
    nk_popup_end(ctx);
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f008 fb35 	bl	8019c44 <nk_popup_end>
    return;
 80115da:	e000      	b.n	80115de <nk_contextual_end+0x1ae>
    if (!ctx || !ctx->current) return;
 80115dc:	bf00      	nop
}
 80115de:	3734      	adds	r7, #52	; 0x34
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd90      	pop	{r4, r7, pc}
 80115e4:	080287b4 	.word	0x080287b4
 80115e8:	0802a684 	.word	0x0802a684
 80115ec:	080287b8 	.word	0x080287b8
 80115f0:	080287d8 	.word	0x080287d8
 80115f4:	08028800 	.word	0x08028800
 80115f8:	08028810 	.word	0x08028810

080115fc <nk_command_buffer_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_command_buffer_init(struct nk_command_buffer *cb,
    struct nk_buffer *b, enum nk_command_clipping clip)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	60f8      	str	r0, [r7, #12]
 8011604:	60b9      	str	r1, [r7, #8]
 8011606:	4613      	mov	r3, r2
 8011608:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(cb);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d105      	bne.n	801161c <nk_command_buffer_init+0x20>
 8011610:	4b15      	ldr	r3, [pc, #84]	; (8011668 <nk_command_buffer_init+0x6c>)
 8011612:	4a16      	ldr	r2, [pc, #88]	; (801166c <nk_command_buffer_init+0x70>)
 8011614:	210d      	movs	r1, #13
 8011616:	4816      	ldr	r0, [pc, #88]	; (8011670 <nk_command_buffer_init+0x74>)
 8011618:	f013 fa5e 	bl	8024ad8 <__assert_func>
    NK_ASSERT(b);
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d105      	bne.n	801162e <nk_command_buffer_init+0x32>
 8011622:	4b14      	ldr	r3, [pc, #80]	; (8011674 <nk_command_buffer_init+0x78>)
 8011624:	4a11      	ldr	r2, [pc, #68]	; (801166c <nk_command_buffer_init+0x70>)
 8011626:	210e      	movs	r1, #14
 8011628:	4811      	ldr	r0, [pc, #68]	; (8011670 <nk_command_buffer_init+0x74>)
 801162a:	f013 fa55 	bl	8024ad8 <__assert_func>
    if (!cb || !b) return;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d015      	beq.n	8011660 <nk_command_buffer_init+0x64>
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d012      	beq.n	8011660 <nk_command_buffer_init+0x64>
    cb->base = b;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	68ba      	ldr	r2, [r7, #8]
 801163e:	601a      	str	r2, [r3, #0]
    cb->use_clipping = (int)clip;
 8011640:	79fa      	ldrb	r2, [r7, #7]
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	615a      	str	r2, [r3, #20]
    cb->begin = b->allocated;
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	61da      	str	r2, [r3, #28]
    cb->end = b->allocated;
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	621a      	str	r2, [r3, #32]
    cb->last = b->allocated;
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	625a      	str	r2, [r3, #36]	; 0x24
 801165e:	e000      	b.n	8011662 <nk_command_buffer_init+0x66>
    if (!cb || !b) return;
 8011660:	bf00      	nop
}
 8011662:	3710      	adds	r7, #16
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	08028834 	.word	0x08028834
 801166c:	0802a6a8 	.word	0x0802a6a8
 8011670:	08028838 	.word	0x08028838
 8011674:	08028854 	.word	0x08028854

08011678 <nk_command_buffer_reset>:
NK_LIB void
nk_command_buffer_reset(struct nk_command_buffer *b)
{
 8011678:	b590      	push	{r4, r7, lr}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d105      	bne.n	8011692 <nk_command_buffer_reset+0x1a>
 8011686:	4b0f      	ldr	r3, [pc, #60]	; (80116c4 <nk_command_buffer_reset+0x4c>)
 8011688:	4a0f      	ldr	r2, [pc, #60]	; (80116c8 <nk_command_buffer_reset+0x50>)
 801168a:	2119      	movs	r1, #25
 801168c:	480f      	ldr	r0, [pc, #60]	; (80116cc <nk_command_buffer_reset+0x54>)
 801168e:	f013 fa23 	bl	8024ad8 <__assert_func>
    if (!b) return;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d010      	beq.n	80116ba <nk_command_buffer_reset+0x42>
    b->begin = 0;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	61da      	str	r2, [r3, #28]
    b->end = 0;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2200      	movs	r2, #0
 80116a2:	621a      	str	r2, [r3, #32]
    b->last = 0;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2200      	movs	r2, #0
 80116a8:	625a      	str	r2, [r3, #36]	; 0x24
    b->clip = nk_null_rect;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4a08      	ldr	r2, [pc, #32]	; (80116d0 <nk_command_buffer_reset+0x58>)
 80116ae:	1d1c      	adds	r4, r3, #4
 80116b0:	4613      	mov	r3, r2
 80116b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80116b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80116b8:	e000      	b.n	80116bc <nk_command_buffer_reset+0x44>
    if (!b) return;
 80116ba:	bf00      	nop
#ifdef NK_INCLUDE_COMMAND_USERDATA
    b->userdata.ptr = 0;
#endif
}
 80116bc:	370c      	adds	r7, #12
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd90      	pop	{r4, r7, pc}
 80116c2:	bf00      	nop
 80116c4:	08028854 	.word	0x08028854
 80116c8:	0802a6c0 	.word	0x0802a6c0
 80116cc:	08028838 	.word	0x08028838
 80116d0:	0802a698 	.word	0x0802a698

080116d4 <nk_command_buffer_push>:
NK_LIB void*
nk_command_buffer_push(struct nk_command_buffer* b,
    enum nk_command_type t, nk_size size)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b088      	sub	sp, #32
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	460b      	mov	r3, r1
 80116de:	607a      	str	r2, [r7, #4]
 80116e0:	72fb      	strb	r3, [r7, #11]
    struct nk_command *cmd;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d105      	bne.n	80116f4 <nk_command_buffer_push+0x20>
 80116e8:	4b28      	ldr	r3, [pc, #160]	; (801178c <nk_command_buffer_push+0xb8>)
 80116ea:	4a29      	ldr	r2, [pc, #164]	; (8011790 <nk_command_buffer_push+0xbc>)
 80116ec:	212d      	movs	r1, #45	; 0x2d
 80116ee:	4829      	ldr	r0, [pc, #164]	; (8011794 <nk_command_buffer_push+0xc0>)
 80116f0:	f013 f9f2 	bl	8024ad8 <__assert_func>
    NK_ASSERT(b->base);
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d105      	bne.n	8011708 <nk_command_buffer_push+0x34>
 80116fc:	4b26      	ldr	r3, [pc, #152]	; (8011798 <nk_command_buffer_push+0xc4>)
 80116fe:	4a24      	ldr	r2, [pc, #144]	; (8011790 <nk_command_buffer_push+0xbc>)
 8011700:	212e      	movs	r1, #46	; 0x2e
 8011702:	4824      	ldr	r0, [pc, #144]	; (8011794 <nk_command_buffer_push+0xc0>)
 8011704:	f013 f9e8 	bl	8024ad8 <__assert_func>
    if (!b) return 0;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d101      	bne.n	8011712 <nk_command_buffer_push+0x3e>
 801170e:	2300      	movs	r3, #0
 8011710:	e037      	b.n	8011782 <nk_command_buffer_push+0xae>
    cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	6818      	ldr	r0, [r3, #0]
 8011716:	4b21      	ldr	r3, [pc, #132]	; (801179c <nk_command_buffer_push+0xc8>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	2100      	movs	r1, #0
 801171e:	f7fd f96f 	bl	800ea00 <nk_buffer_alloc>
 8011722:	61f8      	str	r0, [r7, #28]
    if (!cmd) return 0;
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d101      	bne.n	801172e <nk_command_buffer_push+0x5a>
 801172a:	2300      	movs	r3, #0
 801172c:	e029      	b.n	8011782 <nk_command_buffer_push+0xae>

    /* make sure the offset to the next command is aligned */
    b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	6a1b      	ldr	r3, [r3, #32]
 8011734:	69fa      	ldr	r2, [r7, #28]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	461a      	mov	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	625a      	str	r2, [r3, #36]	; 0x24
    unaligned = (nk_byte*)cmd + size;
 801173e:	69fa      	ldr	r2, [r7, #28]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4413      	add	r3, r2
 8011744:	61bb      	str	r3, [r7, #24]
    memory = NK_ALIGN_PTR(unaligned, align);
 8011746:	4b15      	ldr	r3, [pc, #84]	; (801179c <nk_command_buffer_push+0xc8>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	3b01      	subs	r3, #1
 801174c:	69ba      	ldr	r2, [r7, #24]
 801174e:	4413      	add	r3, r2
 8011750:	461a      	mov	r2, r3
 8011752:	4b12      	ldr	r3, [pc, #72]	; (801179c <nk_command_buffer_push+0xc8>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	425b      	negs	r3, r3
 8011758:	4013      	ands	r3, r2
 801175a:	617b      	str	r3, [r7, #20]
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 801175c:	697a      	ldr	r2, [r7, #20]
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	1ad3      	subs	r3, r2, r3
 8011762:	613b      	str	r3, [r7, #16]
#ifdef NK_ZERO_COMMAND_MEMORY
    NK_MEMSET(cmd, 0, size + alignment);
#endif

    cmd->type = t;
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	7afa      	ldrb	r2, [r7, #11]
 8011768:	701a      	strb	r2, [r3, #0]
    cmd->next = b->base->allocated + alignment;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	441a      	add	r2, r3
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	605a      	str	r2, [r3, #4]
#ifdef NK_INCLUDE_COMMAND_USERDATA
    cmd->userdata = b->userdata;
#endif
    b->end = cmd->next;
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	621a      	str	r2, [r3, #32]
    return cmd;
 8011780:	69fb      	ldr	r3, [r7, #28]
}
 8011782:	4618      	mov	r0, r3
 8011784:	3720      	adds	r7, #32
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	08028854 	.word	0x08028854
 8011790:	0802a6d8 	.word	0x0802a6d8
 8011794:	08028838 	.word	0x08028838
 8011798:	08028858 	.word	0x08028858
 801179c:	0802a6f0 	.word	0x0802a6f0

080117a0 <nk_push_scissor>:
NK_API void
nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b088      	sub	sp, #32
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6178      	str	r0, [r7, #20]
 80117a8:	eeb0 6a40 	vmov.f32	s12, s0
 80117ac:	eef0 6a60 	vmov.f32	s13, s1
 80117b0:	eeb0 7a41 	vmov.f32	s14, s2
 80117b4:	eef0 7a61 	vmov.f32	s15, s3
 80117b8:	ed87 6a01 	vstr	s12, [r7, #4]
 80117bc:	edc7 6a02 	vstr	s13, [r7, #8]
 80117c0:	ed87 7a03 	vstr	s14, [r7, #12]
 80117c4:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_scissor *cmd;
    NK_ASSERT(b);
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d105      	bne.n	80117da <nk_push_scissor+0x3a>
 80117ce:	4b2d      	ldr	r3, [pc, #180]	; (8011884 <nk_push_scissor+0xe4>)
 80117d0:	4a2d      	ldr	r2, [pc, #180]	; (8011888 <nk_push_scissor+0xe8>)
 80117d2:	2148      	movs	r1, #72	; 0x48
 80117d4:	482d      	ldr	r0, [pc, #180]	; (801188c <nk_push_scissor+0xec>)
 80117d6:	f013 f97f 	bl	8024ad8 <__assert_func>
    if (!b) return;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d04b      	beq.n	8011878 <nk_push_scissor+0xd8>

    b->clip.x = r.x;
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	605a      	str	r2, [r3, #4]
    b->clip.y = r.y;
 80117e6:	68ba      	ldr	r2, [r7, #8]
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	609a      	str	r2, [r3, #8]
    b->clip.w = r.w;
 80117ec:	68fa      	ldr	r2, [r7, #12]
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	60da      	str	r2, [r3, #12]
    b->clip.h = r.h;
 80117f2:	693a      	ldr	r2, [r7, #16]
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	611a      	str	r2, [r3, #16]
    cmd = (struct nk_command_scissor*)
        nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));
 80117f8:	2210      	movs	r2, #16
 80117fa:	2101      	movs	r1, #1
 80117fc:	6978      	ldr	r0, [r7, #20]
 80117fe:	f7ff ff69 	bl	80116d4 <nk_command_buffer_push>
 8011802:	61f8      	str	r0, [r7, #28]

    if (!cmd) return;
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d038      	beq.n	801187c <nk_push_scissor+0xdc>
    cmd->x = (short)r.x;
 801180a:	edd7 7a01 	vldr	s15, [r7, #4]
 801180e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011812:	ee17 3a90 	vmov	r3, s15
 8011816:	b21a      	sxth	r2, r3
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 801181c:	edd7 7a02 	vldr	s15, [r7, #8]
 8011820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011824:	ee17 3a90 	vmov	r3, s15
 8011828:	b21a      	sxth	r2, r3
 801182a:	69fb      	ldr	r3, [r7, #28]
 801182c:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 801182e:	edd7 7a03 	vldr	s15, [r7, #12]
 8011832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183a:	dd07      	ble.n	801184c <nk_push_scissor+0xac>
 801183c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011844:	ee17 3a90 	vmov	r3, s15
 8011848:	b29a      	uxth	r2, r3
 801184a:	e000      	b.n	801184e <nk_push_scissor+0xae>
 801184c:	2200      	movs	r2, #0
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 8011852:	edd7 7a04 	vldr	s15, [r7, #16]
 8011856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185e:	dd07      	ble.n	8011870 <nk_push_scissor+0xd0>
 8011860:	edd7 7a04 	vldr	s15, [r7, #16]
 8011864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011868:	ee17 3a90 	vmov	r3, s15
 801186c:	b29a      	uxth	r2, r3
 801186e:	e000      	b.n	8011872 <nk_push_scissor+0xd2>
 8011870:	2200      	movs	r2, #0
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	81da      	strh	r2, [r3, #14]
 8011876:	e002      	b.n	801187e <nk_push_scissor+0xde>
    if (!b) return;
 8011878:	bf00      	nop
 801187a:	e000      	b.n	801187e <nk_push_scissor+0xde>
    if (!cmd) return;
 801187c:	bf00      	nop
}
 801187e:	3720      	adds	r7, #32
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	08028854 	.word	0x08028854
 8011888:	0802a6f4 	.word	0x0802a6f4
 801188c:	08028838 	.word	0x08028838

08011890 <nk_stroke_rect>:
    cmd->color = col;
}
NK_API void
nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, float line_thickness, struct nk_color c)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b08a      	sub	sp, #40	; 0x28
 8011894:	af00      	add	r7, sp, #0
 8011896:	61f8      	str	r0, [r7, #28]
 8011898:	eeb0 6a40 	vmov.f32	s12, s0
 801189c:	eef0 6a60 	vmov.f32	s13, s1
 80118a0:	eeb0 7a41 	vmov.f32	s14, s2
 80118a4:	eef0 7a61 	vmov.f32	s15, s3
 80118a8:	ed87 2a02 	vstr	s4, [r7, #8]
 80118ac:	edc7 2a01 	vstr	s5, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
 80118b2:	ed87 6a03 	vstr	s12, [r7, #12]
 80118b6:	edc7 6a04 	vstr	s13, [r7, #16]
 80118ba:	ed87 7a05 	vstr	s14, [r7, #20]
 80118be:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect *cmd;
    NK_ASSERT(b);
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d105      	bne.n	80118d4 <nk_stroke_rect+0x44>
 80118c8:	4b72      	ldr	r3, [pc, #456]	; (8011a94 <nk_stroke_rect+0x204>)
 80118ca:	4a73      	ldr	r2, [pc, #460]	; (8011a98 <nk_stroke_rect+0x208>)
 80118cc:	2185      	movs	r1, #133	; 0x85
 80118ce:	4873      	ldr	r0, [pc, #460]	; (8011a9c <nk_stroke_rect+0x20c>)
 80118d0:	f013 f902 	bl	8024ad8 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f000 80d4 	beq.w	8011a84 <nk_stroke_rect+0x1f4>
 80118dc:	78fb      	ldrb	r3, [r7, #3]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f000 80d0 	beq.w	8011a84 <nk_stroke_rect+0x1f4>
 80118e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80118e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80118ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f0:	f000 80c8 	beq.w	8011a84 <nk_stroke_rect+0x1f4>
 80118f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80118f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80118fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011900:	f000 80c0 	beq.w	8011a84 <nk_stroke_rect+0x1f4>
 8011904:	edd7 7a01 	vldr	s15, [r7, #4]
 8011908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011910:	f240 80b8 	bls.w	8011a84 <nk_stroke_rect+0x1f4>
    if (b->use_clipping) {
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	695b      	ldr	r3, [r3, #20]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d05e      	beq.n	80119da <nk_stroke_rect+0x14a>
        const struct nk_rect *clip = &b->clip;
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	3304      	adds	r3, #4
 8011920:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8011922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011924:	ed93 7a00 	vldr	s14, [r3]
 8011928:	edd7 6a03 	vldr	s13, [r7, #12]
 801192c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193c:	bf4c      	ite	mi
 801193e:	2301      	movmi	r3, #1
 8011940:	2300      	movpl	r3, #0
 8011942:	b2db      	uxtb	r3, r3
 8011944:	f083 0301 	eor.w	r3, r3, #1
 8011948:	b2db      	uxtb	r3, r3
 801194a:	2b00      	cmp	r3, #0
 801194c:	f040 809c 	bne.w	8011a88 <nk_stroke_rect+0x1f8>
 8011950:	ed97 7a03 	vldr	s14, [r7, #12]
 8011954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011956:	edd3 6a00 	vldr	s13, [r3]
 801195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196c:	bf4c      	ite	mi
 801196e:	2301      	movmi	r3, #1
 8011970:	2300      	movpl	r3, #0
 8011972:	b2db      	uxtb	r3, r3
 8011974:	f083 0301 	eor.w	r3, r3, #1
 8011978:	b2db      	uxtb	r3, r3
 801197a:	2b00      	cmp	r3, #0
 801197c:	f040 8084 	bne.w	8011a88 <nk_stroke_rect+0x1f8>
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	ed93 7a01 	vldr	s14, [r3, #4]
 8011986:	edd7 6a04 	vldr	s13, [r7, #16]
 801198a:	edd7 7a06 	vldr	s15, [r7, #24]
 801198e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199a:	bf4c      	ite	mi
 801199c:	2301      	movmi	r3, #1
 801199e:	2300      	movpl	r3, #0
 80119a0:	b2db      	uxtb	r3, r3
 80119a2:	f083 0301 	eor.w	r3, r3, #1
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d16d      	bne.n	8011a88 <nk_stroke_rect+0x1f8>
 80119ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80119bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c8:	bf4c      	ite	mi
 80119ca:	2301      	movmi	r3, #1
 80119cc:	2300      	movpl	r3, #0
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	f083 0301 	eor.w	r3, r3, #1
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d156      	bne.n	8011a88 <nk_stroke_rect+0x1f8>
            clip->x, clip->y, clip->w, clip->h)) return;
    }
    cmd = (struct nk_command_rect*)
        nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));
 80119da:	2218      	movs	r2, #24
 80119dc:	2104      	movs	r1, #4
 80119de:	69f8      	ldr	r0, [r7, #28]
 80119e0:	f7ff fe78 	bl	80116d4 <nk_command_buffer_push>
 80119e4:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d04f      	beq.n	8011a8c <nk_stroke_rect+0x1fc>
    cmd->rounding = (unsigned short)rounding;
 80119ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80119f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80119f4:	ee17 3a90 	vmov	r3, s15
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	6a3b      	ldr	r3, [r7, #32]
 80119fc:	811a      	strh	r2, [r3, #8]
    cmd->line_thickness = (unsigned short)line_thickness;
 80119fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8011a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a06:	ee17 3a90 	vmov	r3, s15
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	6a3b      	ldr	r3, [r7, #32]
 8011a0e:	815a      	strh	r2, [r3, #10]
    cmd->x = (short)rect.x;
 8011a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8011a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a18:	ee17 3a90 	vmov	r3, s15
 8011a1c:	b21a      	sxth	r2, r3
 8011a1e:	6a3b      	ldr	r3, [r7, #32]
 8011a20:	819a      	strh	r2, [r3, #12]
    cmd->y = (short)rect.y;
 8011a22:	edd7 7a04 	vldr	s15, [r7, #16]
 8011a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a2a:	ee17 3a90 	vmov	r3, s15
 8011a2e:	b21a      	sxth	r2, r3
 8011a30:	6a3b      	ldr	r3, [r7, #32]
 8011a32:	81da      	strh	r2, [r3, #14]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011a34:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a40:	dd07      	ble.n	8011a52 <nk_stroke_rect+0x1c2>
 8011a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a4a:	ee17 3a90 	vmov	r3, s15
 8011a4e:	b29a      	uxth	r2, r3
 8011a50:	e000      	b.n	8011a54 <nk_stroke_rect+0x1c4>
 8011a52:	2200      	movs	r2, #0
 8011a54:	6a3b      	ldr	r3, [r7, #32]
 8011a56:	821a      	strh	r2, [r3, #16]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8011a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a64:	dd07      	ble.n	8011a76 <nk_stroke_rect+0x1e6>
 8011a66:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a6e:	ee17 3a90 	vmov	r3, s15
 8011a72:	b29a      	uxth	r2, r3
 8011a74:	e000      	b.n	8011a78 <nk_stroke_rect+0x1e8>
 8011a76:	2200      	movs	r2, #0
 8011a78:	6a3b      	ldr	r3, [r7, #32]
 8011a7a:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 8011a7c:	6a3b      	ldr	r3, [r7, #32]
 8011a7e:	683a      	ldr	r2, [r7, #0]
 8011a80:	615a      	str	r2, [r3, #20]
 8011a82:	e004      	b.n	8011a8e <nk_stroke_rect+0x1fe>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 8011a84:	bf00      	nop
 8011a86:	e002      	b.n	8011a8e <nk_stroke_rect+0x1fe>
            clip->x, clip->y, clip->w, clip->h)) return;
 8011a88:	bf00      	nop
 8011a8a:	e000      	b.n	8011a8e <nk_stroke_rect+0x1fe>
    if (!cmd) return;
 8011a8c:	bf00      	nop
}
 8011a8e:	3728      	adds	r7, #40	; 0x28
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	08028854 	.word	0x08028854
 8011a98:	0802a704 	.word	0x0802a704
 8011a9c:	08028838 	.word	0x08028838

08011aa0 <nk_fill_rect>:
NK_API void
nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, struct nk_color c)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b08a      	sub	sp, #40	; 0x28
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	61f8      	str	r0, [r7, #28]
 8011aa8:	eeb0 6a40 	vmov.f32	s12, s0
 8011aac:	eef0 6a60 	vmov.f32	s13, s1
 8011ab0:	eeb0 7a41 	vmov.f32	s14, s2
 8011ab4:	eef0 7a61 	vmov.f32	s15, s3
 8011ab8:	ed87 2a02 	vstr	s4, [r7, #8]
 8011abc:	6079      	str	r1, [r7, #4]
 8011abe:	ed87 6a03 	vstr	s12, [r7, #12]
 8011ac2:	edc7 6a04 	vstr	s13, [r7, #16]
 8011ac6:	ed87 7a05 	vstr	s14, [r7, #20]
 8011aca:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect_filled *cmd;
    NK_ASSERT(b);
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d105      	bne.n	8011ae0 <nk_fill_rect+0x40>
 8011ad4:	4b6a      	ldr	r3, [pc, #424]	; (8011c80 <nk_fill_rect+0x1e0>)
 8011ad6:	4a6b      	ldr	r2, [pc, #428]	; (8011c84 <nk_fill_rect+0x1e4>)
 8011ad8:	219c      	movs	r1, #156	; 0x9c
 8011ada:	486b      	ldr	r0, [pc, #428]	; (8011c88 <nk_fill_rect+0x1e8>)
 8011adc:	f012 fffc 	bl	8024ad8 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	f000 80c4 	beq.w	8011c70 <nk_fill_rect+0x1d0>
 8011ae8:	79fb      	ldrb	r3, [r7, #7]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f000 80c0 	beq.w	8011c70 <nk_fill_rect+0x1d0>
 8011af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8011af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afc:	f000 80b8 	beq.w	8011c70 <nk_fill_rect+0x1d0>
 8011b00:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b0c:	f000 80b0 	beq.w	8011c70 <nk_fill_rect+0x1d0>
    if (b->use_clipping) {
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	695b      	ldr	r3, [r3, #20]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d05d      	beq.n	8011bd4 <nk_fill_rect+0x134>
        const struct nk_rect *clip = &b->clip;
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	ed93 7a00 	vldr	s14, [r3]
 8011b24:	edd7 6a03 	vldr	s13, [r7, #12]
 8011b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b38:	bf4c      	ite	mi
 8011b3a:	2301      	movmi	r3, #1
 8011b3c:	2300      	movpl	r3, #0
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	f083 0301 	eor.w	r3, r3, #1
 8011b44:	b2db      	uxtb	r3, r3
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	f040 8094 	bne.w	8011c74 <nk_fill_rect+0x1d4>
 8011b4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	edd3 6a00 	vldr	s13, [r3]
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	edd3 7a02 	vldr	s15, [r3, #8]
 8011b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b68:	bf4c      	ite	mi
 8011b6a:	2301      	movmi	r3, #1
 8011b6c:	2300      	movpl	r3, #0
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	f083 0301 	eor.w	r3, r3, #1
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d17c      	bne.n	8011c74 <nk_fill_rect+0x1d4>
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b80:	edd7 6a04 	vldr	s13, [r7, #16]
 8011b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b94:	bf4c      	ite	mi
 8011b96:	2301      	movmi	r3, #1
 8011b98:	2300      	movpl	r3, #0
 8011b9a:	b2db      	uxtb	r3, r3
 8011b9c:	f083 0301 	eor.w	r3, r3, #1
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d166      	bne.n	8011c74 <nk_fill_rect+0x1d4>
 8011ba6:	ed97 7a04 	vldr	s14, [r7, #16]
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	edd3 6a01 	vldr	s13, [r3, #4]
 8011bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8011bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc2:	bf4c      	ite	mi
 8011bc4:	2301      	movmi	r3, #1
 8011bc6:	2300      	movpl	r3, #0
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	f083 0301 	eor.w	r3, r3, #1
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d14f      	bne.n	8011c74 <nk_fill_rect+0x1d4>
            clip->x, clip->y, clip->w, clip->h)) return;
    }

    cmd = (struct nk_command_rect_filled*)
        nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));
 8011bd4:	2218      	movs	r2, #24
 8011bd6:	2105      	movs	r1, #5
 8011bd8:	69f8      	ldr	r0, [r7, #28]
 8011bda:	f7ff fd7b 	bl	80116d4 <nk_command_buffer_push>
 8011bde:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8011be0:	6a3b      	ldr	r3, [r7, #32]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d048      	beq.n	8011c78 <nk_fill_rect+0x1d8>
    cmd->rounding = (unsigned short)rounding;
 8011be6:	edd7 7a02 	vldr	s15, [r7, #8]
 8011bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011bee:	ee17 3a90 	vmov	r3, s15
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	6a3b      	ldr	r3, [r7, #32]
 8011bf6:	811a      	strh	r2, [r3, #8]
    cmd->x = (short)rect.x;
 8011bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8011bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c00:	ee17 3a90 	vmov	r3, s15
 8011c04:	b21a      	sxth	r2, r3
 8011c06:	6a3b      	ldr	r3, [r7, #32]
 8011c08:	815a      	strh	r2, [r3, #10]
    cmd->y = (short)rect.y;
 8011c0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8011c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c12:	ee17 3a90 	vmov	r3, s15
 8011c16:	b21a      	sxth	r2, r3
 8011c18:	6a3b      	ldr	r3, [r7, #32]
 8011c1a:	819a      	strh	r2, [r3, #12]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011c1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c28:	dd07      	ble.n	8011c3a <nk_fill_rect+0x19a>
 8011c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c32:	ee17 3a90 	vmov	r3, s15
 8011c36:	b29a      	uxth	r2, r3
 8011c38:	e000      	b.n	8011c3c <nk_fill_rect+0x19c>
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	6a3b      	ldr	r3, [r7, #32]
 8011c3e:	81da      	strh	r2, [r3, #14]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8011c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4c:	dd07      	ble.n	8011c5e <nk_fill_rect+0x1be>
 8011c4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c56:	ee17 3a90 	vmov	r3, s15
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	e000      	b.n	8011c60 <nk_fill_rect+0x1c0>
 8011c5e:	2200      	movs	r2, #0
 8011c60:	6a3b      	ldr	r3, [r7, #32]
 8011c62:	821a      	strh	r2, [r3, #16]
    cmd->color = c;
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	3312      	adds	r3, #18
 8011c68:	1d3a      	adds	r2, r7, #4
 8011c6a:	6810      	ldr	r0, [r2, #0]
 8011c6c:	6018      	str	r0, [r3, #0]
 8011c6e:	e004      	b.n	8011c7a <nk_fill_rect+0x1da>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8011c70:	bf00      	nop
 8011c72:	e002      	b.n	8011c7a <nk_fill_rect+0x1da>
            clip->x, clip->y, clip->w, clip->h)) return;
 8011c74:	bf00      	nop
 8011c76:	e000      	b.n	8011c7a <nk_fill_rect+0x1da>
    if (!cmd) return;
 8011c78:	bf00      	nop
}
 8011c7a:	3728      	adds	r7, #40	; 0x28
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	08028854 	.word	0x08028854
 8011c84:	0802a714 	.word	0x0802a714
 8011c88:	08028838 	.word	0x08028838

08011c8c <nk_fill_circle>:
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
    cmd->color = c;
}
NK_API void
nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b088      	sub	sp, #32
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6178      	str	r0, [r7, #20]
 8011c94:	eeb0 6a40 	vmov.f32	s12, s0
 8011c98:	eef0 6a60 	vmov.f32	s13, s1
 8011c9c:	eeb0 7a41 	vmov.f32	s14, s2
 8011ca0:	eef0 7a61 	vmov.f32	s15, s3
 8011ca4:	6039      	str	r1, [r7, #0]
 8011ca6:	ed87 6a01 	vstr	s12, [r7, #4]
 8011caa:	edc7 6a02 	vstr	s13, [r7, #8]
 8011cae:	ed87 7a03 	vstr	s14, [r7, #12]
 8011cb2:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_circle_filled *cmd;
    NK_ASSERT(b);
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d105      	bne.n	8011cc8 <nk_fill_circle+0x3c>
 8011cbc:	4b65      	ldr	r3, [pc, #404]	; (8011e54 <nk_fill_circle+0x1c8>)
 8011cbe:	4a66      	ldr	r2, [pc, #408]	; (8011e58 <nk_fill_circle+0x1cc>)
 8011cc0:	21e2      	movs	r1, #226	; 0xe2
 8011cc2:	4866      	ldr	r0, [pc, #408]	; (8011e5c <nk_fill_circle+0x1d0>)
 8011cc4:	f012 ff08 	bl	8024ad8 <__assert_func>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	f000 80b9 	beq.w	8011e42 <nk_fill_circle+0x1b6>
 8011cd0:	78fb      	ldrb	r3, [r7, #3]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	f000 80b5 	beq.w	8011e42 <nk_fill_circle+0x1b6>
 8011cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8011cdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	f000 80ad 	beq.w	8011e42 <nk_fill_circle+0x1b6>
 8011ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8011cec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf4:	f000 80a5 	beq.w	8011e42 <nk_fill_circle+0x1b6>
    if (b->use_clipping) {
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	695b      	ldr	r3, [r3, #20]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d05d      	beq.n	8011dbc <nk_fill_circle+0x130>
        const struct nk_rect *clip = &b->clip;
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	3304      	adds	r3, #4
 8011d04:	61fb      	str	r3, [r7, #28]
        if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	ed93 7a00 	vldr	s14, [r3]
 8011d0c:	edd7 6a01 	vldr	s13, [r7, #4]
 8011d10:	edd7 7a03 	vldr	s15, [r7, #12]
 8011d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d20:	bf4c      	ite	mi
 8011d22:	2301      	movmi	r3, #1
 8011d24:	2300      	movpl	r3, #0
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	f083 0301 	eor.w	r3, r3, #1
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f040 8089 	bne.w	8011e46 <nk_fill_circle+0x1ba>
 8011d34:	ed97 7a01 	vldr	s14, [r7, #4]
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	edd3 6a00 	vldr	s13, [r3]
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	edd3 7a02 	vldr	s15, [r3, #8]
 8011d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d50:	bf4c      	ite	mi
 8011d52:	2301      	movmi	r3, #1
 8011d54:	2300      	movpl	r3, #0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f083 0301 	eor.w	r3, r3, #1
 8011d5c:	b2db      	uxtb	r3, r3
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d171      	bne.n	8011e46 <nk_fill_circle+0x1ba>
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	ed93 7a01 	vldr	s14, [r3, #4]
 8011d68:	edd7 6a02 	vldr	s13, [r7, #8]
 8011d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7c:	bf4c      	ite	mi
 8011d7e:	2301      	movmi	r3, #1
 8011d80:	2300      	movpl	r3, #0
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	f083 0301 	eor.w	r3, r3, #1
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d15b      	bne.n	8011e46 <nk_fill_circle+0x1ba>
 8011d8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	edd3 6a01 	vldr	s13, [r3, #4]
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8011d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011daa:	bf4c      	ite	mi
 8011dac:	2301      	movmi	r3, #1
 8011dae:	2300      	movpl	r3, #0
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	f083 0301 	eor.w	r3, r3, #1
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d144      	bne.n	8011e46 <nk_fill_circle+0x1ba>
            return;
    }

    cmd = (struct nk_command_circle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));
 8011dbc:	2214      	movs	r2, #20
 8011dbe:	2108      	movs	r1, #8
 8011dc0:	6978      	ldr	r0, [r7, #20]
 8011dc2:	f7ff fc87 	bl	80116d4 <nk_command_buffer_push>
 8011dc6:	61b8      	str	r0, [r7, #24]
    if (!cmd) return;
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d03d      	beq.n	8011e4a <nk_fill_circle+0x1be>
    cmd->x = (short)r.x;
 8011dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8011dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dd6:	ee17 3a90 	vmov	r3, s15
 8011dda:	b21a      	sxth	r2, r3
 8011ddc:	69bb      	ldr	r3, [r7, #24]
 8011dde:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8011de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8011de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011de8:	ee17 3a90 	vmov	r3, s15
 8011dec:	b21a      	sxth	r2, r3
 8011dee:	69bb      	ldr	r3, [r7, #24]
 8011df0:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(r.w, 0);
 8011df2:	edd7 7a03 	vldr	s15, [r7, #12]
 8011df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfe:	d501      	bpl.n	8011e04 <nk_fill_circle+0x178>
 8011e00:	2200      	movs	r2, #0
 8011e02:	e006      	b.n	8011e12 <nk_fill_circle+0x186>
 8011e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8011e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e0c:	ee17 3a90 	vmov	r3, s15
 8011e10:	b29a      	uxth	r2, r3
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
 8011e16:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e22:	d501      	bpl.n	8011e28 <nk_fill_circle+0x19c>
 8011e24:	2200      	movs	r2, #0
 8011e26:	e006      	b.n	8011e36 <nk_fill_circle+0x1aa>
 8011e28:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e30:	ee17 3a90 	vmov	r3, s15
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	69bb      	ldr	r3, [r7, #24]
 8011e38:	81da      	strh	r2, [r3, #14]
    cmd->color = c;
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	683a      	ldr	r2, [r7, #0]
 8011e3e:	611a      	str	r2, [r3, #16]
 8011e40:	e004      	b.n	8011e4c <nk_fill_circle+0x1c0>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8011e42:	bf00      	nop
 8011e44:	e002      	b.n	8011e4c <nk_fill_circle+0x1c0>
            return;
 8011e46:	bf00      	nop
 8011e48:	e000      	b.n	8011e4c <nk_fill_circle+0x1c0>
    if (!cmd) return;
 8011e4a:	bf00      	nop
}
 8011e4c:	3720      	adds	r7, #32
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	08028854 	.word	0x08028854
 8011e58:	0802a724 	.word	0x0802a724
 8011e5c:	08028838 	.word	0x08028838

08011e60 <nk_fill_triangle>:
    cmd->color = c;
}
NK_API void
nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,
    float y1, float x2, float y2, struct nk_color c)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b08a      	sub	sp, #40	; 0x28
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	61f8      	str	r0, [r7, #28]
 8011e68:	ed87 0a06 	vstr	s0, [r7, #24]
 8011e6c:	edc7 0a05 	vstr	s1, [r7, #20]
 8011e70:	ed87 1a04 	vstr	s2, [r7, #16]
 8011e74:	edc7 1a03 	vstr	s3, [r7, #12]
 8011e78:	ed87 2a02 	vstr	s4, [r7, #8]
 8011e7c:	edc7 2a01 	vstr	s5, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
    struct nk_command_triangle_filled *cmd;
    NK_ASSERT(b);
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d106      	bne.n	8011e96 <nk_fill_triangle+0x36>
 8011e88:	4baf      	ldr	r3, [pc, #700]	; (8012148 <nk_fill_triangle+0x2e8>)
 8011e8a:	4ab0      	ldr	r2, [pc, #704]	; (801214c <nk_fill_triangle+0x2ec>)
 8011e8c:	f240 1135 	movw	r1, #309	; 0x135
 8011e90:	48af      	ldr	r0, [pc, #700]	; (8012150 <nk_fill_triangle+0x2f0>)
 8011e92:	f012 fe21 	bl	8024ad8 <__assert_func>
    if (!b || c.a == 0) return;
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 814b 	beq.w	8012134 <nk_fill_triangle+0x2d4>
 8011e9e:	78fb      	ldrb	r3, [r7, #3]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f000 8147 	beq.w	8012134 <nk_fill_triangle+0x2d4>
    if (!b) return;
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f000 8145 	beq.w	8012138 <nk_fill_triangle+0x2d8>
    if (b->use_clipping) {
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	695b      	ldr	r3, [r3, #20]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f000 80fb 	beq.w	80120ae <nk_fill_triangle+0x24e>
        const struct nk_rect *clip = &b->clip;
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	3304      	adds	r3, #4
 8011ebc:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec0:	edd3 7a00 	vldr	s15, [r3]
 8011ec4:	ed97 7a06 	vldr	s14, [r7, #24]
 8011ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed0:	bfac      	ite	ge
 8011ed2:	2301      	movge	r3, #1
 8011ed4:	2300      	movlt	r3, #0
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	f083 0301 	eor.w	r3, r3, #1
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d140      	bne.n	8011f64 <nk_fill_triangle+0x104>
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee4:	ed93 7a00 	vldr	s14, [r3]
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eea:	edd3 7a02 	vldr	s15, [r3, #8]
 8011eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ef2:	ed97 7a06 	vldr	s14, [r7, #24]
 8011ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efe:	bf4c      	ite	mi
 8011f00:	2301      	movmi	r3, #1
 8011f02:	2300      	movpl	r3, #0
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	f083 0301 	eor.w	r3, r3, #1
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d129      	bne.n	8011f64 <nk_fill_triangle+0x104>
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f16:	ed97 7a05 	vldr	s14, [r7, #20]
 8011f1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f22:	bfac      	ite	ge
 8011f24:	2301      	movge	r3, #1
 8011f26:	2300      	movlt	r3, #0
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	f083 0301 	eor.w	r3, r3, #1
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d117      	bne.n	8011f64 <nk_fill_triangle+0x104>
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f36:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f44:	ed97 7a05 	vldr	s14, [r7, #20]
 8011f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f50:	bf4c      	ite	mi
 8011f52:	2301      	movmi	r3, #1
 8011f54:	2300      	movpl	r3, #0
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	f083 0301 	eor.w	r3, r3, #1
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	f000 80a5 	beq.w	80120ae <nk_fill_triangle+0x24e>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8011f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f66:	edd3 7a00 	vldr	s15, [r3]
 8011f6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8011f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f76:	bfac      	ite	ge
 8011f78:	2301      	movge	r3, #1
 8011f7a:	2300      	movlt	r3, #0
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	f083 0301 	eor.w	r3, r3, #1
 8011f82:	b2db      	uxtb	r3, r3
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d13f      	bne.n	8012008 <nk_fill_triangle+0x1a8>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8011f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8a:	ed93 7a00 	vldr	s14, [r3]
 8011f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f90:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f98:	ed97 7a04 	vldr	s14, [r7, #16]
 8011f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa4:	bf4c      	ite	mi
 8011fa6:	2301      	movmi	r3, #1
 8011fa8:	2300      	movpl	r3, #0
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	f083 0301 	eor.w	r3, r3, #1
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d128      	bne.n	8012008 <nk_fill_triangle+0x1a8>
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8011fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc8:	bfac      	ite	ge
 8011fca:	2301      	movge	r3, #1
 8011fcc:	2300      	movlt	r3, #0
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	f083 0301 	eor.w	r3, r3, #1
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d116      	bne.n	8012008 <nk_fill_triangle+0x1a8>
 8011fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8011fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe2:	edd3 7a03 	vldr	s15, [r3, #12]
 8011fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fea:	ed97 7a03 	vldr	s14, [r7, #12]
 8011fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff6:	bf4c      	ite	mi
 8011ff8:	2301      	movmi	r3, #1
 8011ffa:	2300      	movpl	r3, #0
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	f083 0301 	eor.w	r3, r3, #1
 8012002:	b2db      	uxtb	r3, r3
 8012004:	2b00      	cmp	r3, #0
 8012006:	d052      	beq.n	80120ae <nk_fill_triangle+0x24e>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	edd3 7a00 	vldr	s15, [r3]
 801200e:	ed97 7a02 	vldr	s14, [r7, #8]
 8012012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201a:	bfac      	ite	ge
 801201c:	2301      	movge	r3, #1
 801201e:	2300      	movlt	r3, #0
 8012020:	b2db      	uxtb	r3, r3
 8012022:	f083 0301 	eor.w	r3, r3, #1
 8012026:	b2db      	uxtb	r3, r3
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8012028:	2b00      	cmp	r3, #0
 801202a:	f040 8087 	bne.w	801213c <nk_fill_triangle+0x2dc>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 801202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012030:	ed93 7a00 	vldr	s14, [r3]
 8012034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012036:	edd3 7a02 	vldr	s15, [r3, #8]
 801203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801203e:	ed97 7a02 	vldr	s14, [r7, #8]
 8012042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204a:	bf4c      	ite	mi
 801204c:	2301      	movmi	r3, #1
 801204e:	2300      	movpl	r3, #0
 8012050:	b2db      	uxtb	r3, r3
 8012052:	f083 0301 	eor.w	r3, r3, #1
 8012056:	b2db      	uxtb	r3, r3
 8012058:	2b00      	cmp	r3, #0
 801205a:	d16f      	bne.n	801213c <nk_fill_triangle+0x2dc>
 801205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012062:	ed97 7a01 	vldr	s14, [r7, #4]
 8012066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206e:	bfac      	ite	ge
 8012070:	2301      	movge	r3, #1
 8012072:	2300      	movlt	r3, #0
 8012074:	b2db      	uxtb	r3, r3
 8012076:	f083 0301 	eor.w	r3, r3, #1
 801207a:	b2db      	uxtb	r3, r3
 801207c:	2b00      	cmp	r3, #0
 801207e:	d15d      	bne.n	801213c <nk_fill_triangle+0x2dc>
 8012080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012082:	ed93 7a01 	vldr	s14, [r3, #4]
 8012086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012088:	edd3 7a03 	vldr	s15, [r3, #12]
 801208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012090:	ed97 7a01 	vldr	s14, [r7, #4]
 8012094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209c:	bf4c      	ite	mi
 801209e:	2301      	movmi	r3, #1
 80120a0:	2300      	movpl	r3, #0
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	f083 0301 	eor.w	r3, r3, #1
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d146      	bne.n	801213c <nk_fill_triangle+0x2dc>
            return;
    }

    cmd = (struct nk_command_triangle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));
 80120ae:	2218      	movs	r2, #24
 80120b0:	210c      	movs	r1, #12
 80120b2:	69f8      	ldr	r0, [r7, #28]
 80120b4:	f7ff fb0e 	bl	80116d4 <nk_command_buffer_push>
 80120b8:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 80120ba:	6a3b      	ldr	r3, [r7, #32]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d03f      	beq.n	8012140 <nk_fill_triangle+0x2e0>
    cmd->a.x = (short)x0;
 80120c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80120c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120c8:	ee17 3a90 	vmov	r3, s15
 80120cc:	b21a      	sxth	r2, r3
 80120ce:	6a3b      	ldr	r3, [r7, #32]
 80120d0:	811a      	strh	r2, [r3, #8]
    cmd->a.y = (short)y0;
 80120d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80120d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120da:	ee17 3a90 	vmov	r3, s15
 80120de:	b21a      	sxth	r2, r3
 80120e0:	6a3b      	ldr	r3, [r7, #32]
 80120e2:	815a      	strh	r2, [r3, #10]
    cmd->b.x = (short)x1;
 80120e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80120e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120ec:	ee17 3a90 	vmov	r3, s15
 80120f0:	b21a      	sxth	r2, r3
 80120f2:	6a3b      	ldr	r3, [r7, #32]
 80120f4:	819a      	strh	r2, [r3, #12]
    cmd->b.y = (short)y1;
 80120f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80120fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120fe:	ee17 3a90 	vmov	r3, s15
 8012102:	b21a      	sxth	r2, r3
 8012104:	6a3b      	ldr	r3, [r7, #32]
 8012106:	81da      	strh	r2, [r3, #14]
    cmd->c.x = (short)x2;
 8012108:	edd7 7a02 	vldr	s15, [r7, #8]
 801210c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012110:	ee17 3a90 	vmov	r3, s15
 8012114:	b21a      	sxth	r2, r3
 8012116:	6a3b      	ldr	r3, [r7, #32]
 8012118:	821a      	strh	r2, [r3, #16]
    cmd->c.y = (short)y2;
 801211a:	edd7 7a01 	vldr	s15, [r7, #4]
 801211e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012122:	ee17 3a90 	vmov	r3, s15
 8012126:	b21a      	sxth	r2, r3
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 801212c:	6a3b      	ldr	r3, [r7, #32]
 801212e:	683a      	ldr	r2, [r7, #0]
 8012130:	615a      	str	r2, [r3, #20]
 8012132:	e006      	b.n	8012142 <nk_fill_triangle+0x2e2>
    if (!b || c.a == 0) return;
 8012134:	bf00      	nop
 8012136:	e004      	b.n	8012142 <nk_fill_triangle+0x2e2>
    if (!b) return;
 8012138:	bf00      	nop
 801213a:	e002      	b.n	8012142 <nk_fill_triangle+0x2e2>
            return;
 801213c:	bf00      	nop
 801213e:	e000      	b.n	8012142 <nk_fill_triangle+0x2e2>
    if (!cmd) return;
 8012140:	bf00      	nop
}
 8012142:	3728      	adds	r7, #40	; 0x28
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	08028854 	.word	0x08028854
 801214c:	0802a734 	.word	0x0802a734
 8012150:	08028838 	.word	0x08028838

08012154 <nk_draw_image>:
    }
}
NK_API void
nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_image *img, struct nk_color col)
{
 8012154:	b590      	push	{r4, r7, lr}
 8012156:	b08b      	sub	sp, #44	; 0x2c
 8012158:	af00      	add	r7, sp, #0
 801215a:	61f8      	str	r0, [r7, #28]
 801215c:	eeb0 6a40 	vmov.f32	s12, s0
 8012160:	eef0 6a60 	vmov.f32	s13, s1
 8012164:	eeb0 7a41 	vmov.f32	s14, s2
 8012168:	eef0 7a61 	vmov.f32	s15, s3
 801216c:	60b9      	str	r1, [r7, #8]
 801216e:	607a      	str	r2, [r7, #4]
 8012170:	ed87 6a03 	vstr	s12, [r7, #12]
 8012174:	edc7 6a04 	vstr	s13, [r7, #16]
 8012178:	ed87 7a05 	vstr	s14, [r7, #20]
 801217c:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_image *cmd;
    NK_ASSERT(b);
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d106      	bne.n	8012194 <nk_draw_image+0x40>
 8012186:	4b69      	ldr	r3, [pc, #420]	; (801232c <nk_draw_image+0x1d8>)
 8012188:	4a69      	ldr	r2, [pc, #420]	; (8012330 <nk_draw_image+0x1dc>)
 801218a:	f240 118f 	movw	r1, #399	; 0x18f
 801218e:	4869      	ldr	r0, [pc, #420]	; (8012334 <nk_draw_image+0x1e0>)
 8012190:	f012 fca2 	bl	8024ad8 <__assert_func>
    if (!b) return;
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	2b00      	cmp	r3, #0
 8012198:	f000 80bf 	beq.w	801231a <nk_draw_image+0x1c6>
    if (b->use_clipping) {
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	695b      	ldr	r3, [r3, #20]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d06f      	beq.n	8012284 <nk_draw_image+0x130>
        const struct nk_rect *c = &b->clip;
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	3304      	adds	r3, #4
 80121a8:	627b      	str	r3, [r7, #36]	; 0x24
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80121b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80121b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b8:	f000 80b1 	beq.w	801231e <nk_draw_image+0x1ca>
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	edd3 7a03 	vldr	s15, [r3, #12]
 80121c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80121c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ca:	f000 80a8 	beq.w	801231e <nk_draw_image+0x1ca>
 80121ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d0:	ed93 7a00 	vldr	s14, [r3]
 80121d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80121d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80121dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80121e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e8:	bf4c      	ite	mi
 80121ea:	2301      	movmi	r3, #1
 80121ec:	2300      	movpl	r3, #0
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	f083 0301 	eor.w	r3, r3, #1
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f040 8091 	bne.w	801231e <nk_draw_image+0x1ca>
 80121fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8012200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012202:	edd3 6a00 	vldr	s13, [r3]
 8012206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012208:	edd3 7a02 	vldr	s15, [r3, #8]
 801220c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012218:	bf4c      	ite	mi
 801221a:	2301      	movmi	r3, #1
 801221c:	2300      	movpl	r3, #0
 801221e:	b2db      	uxtb	r3, r3
 8012220:	f083 0301 	eor.w	r3, r3, #1
 8012224:	b2db      	uxtb	r3, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	d179      	bne.n	801231e <nk_draw_image+0x1ca>
 801222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012230:	edd7 6a04 	vldr	s13, [r7, #16]
 8012234:	edd7 7a06 	vldr	s15, [r7, #24]
 8012238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801223c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012244:	bf4c      	ite	mi
 8012246:	2301      	movmi	r3, #1
 8012248:	2300      	movpl	r3, #0
 801224a:	b2db      	uxtb	r3, r3
 801224c:	f083 0301 	eor.w	r3, r3, #1
 8012250:	b2db      	uxtb	r3, r3
 8012252:	2b00      	cmp	r3, #0
 8012254:	d163      	bne.n	801231e <nk_draw_image+0x1ca>
 8012256:	ed97 7a04 	vldr	s14, [r7, #16]
 801225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	edd3 7a03 	vldr	s15, [r3, #12]
 8012266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801226a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012272:	bf4c      	ite	mi
 8012274:	2301      	movmi	r3, #1
 8012276:	2300      	movpl	r3, #0
 8012278:	b2db      	uxtb	r3, r3
 801227a:	f083 0301 	eor.w	r3, r3, #1
 801227e:	b2db      	uxtb	r3, r3
 8012280:	2b00      	cmp	r3, #0
 8012282:	d14c      	bne.n	801231e <nk_draw_image+0x1ca>
            return;
    }

    cmd = (struct nk_command_image*)
        nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));
 8012284:	2224      	movs	r2, #36	; 0x24
 8012286:	2111      	movs	r1, #17
 8012288:	69f8      	ldr	r0, [r7, #28]
 801228a:	f7ff fa23 	bl	80116d4 <nk_command_buffer_push>
 801228e:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8012290:	6a3b      	ldr	r3, [r7, #32]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d045      	beq.n	8012322 <nk_draw_image+0x1ce>
    cmd->x = (short)r.x;
 8012296:	edd7 7a03 	vldr	s15, [r7, #12]
 801229a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801229e:	ee17 3a90 	vmov	r3, s15
 80122a2:	b21a      	sxth	r2, r3
 80122a4:	6a3b      	ldr	r3, [r7, #32]
 80122a6:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 80122a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80122ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122b0:	ee17 3a90 	vmov	r3, s15
 80122b4:	b21a      	sxth	r2, r3
 80122b6:	6a3b      	ldr	r3, [r7, #32]
 80122b8:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 80122ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80122be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c6:	dd07      	ble.n	80122d8 <nk_draw_image+0x184>
 80122c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80122cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122d0:	ee17 3a90 	vmov	r3, s15
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	e000      	b.n	80122da <nk_draw_image+0x186>
 80122d8:	2200      	movs	r2, #0
 80122da:	6a3b      	ldr	r3, [r7, #32]
 80122dc:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 80122de:	edd7 7a06 	vldr	s15, [r7, #24]
 80122e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ea:	dd07      	ble.n	80122fc <nk_draw_image+0x1a8>
 80122ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80122f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122f4:	ee17 3a90 	vmov	r3, s15
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	e000      	b.n	80122fe <nk_draw_image+0x1aa>
 80122fc:	2200      	movs	r2, #0
 80122fe:	6a3b      	ldr	r3, [r7, #32]
 8012300:	81da      	strh	r2, [r3, #14]
    cmd->img = *img;
 8012302:	6a3b      	ldr	r3, [r7, #32]
 8012304:	68ba      	ldr	r2, [r7, #8]
 8012306:	f103 0410 	add.w	r4, r3, #16
 801230a:	4613      	mov	r3, r2
 801230c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801230e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cmd->col = col;
 8012312:	6a3b      	ldr	r3, [r7, #32]
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	621a      	str	r2, [r3, #32]
 8012318:	e004      	b.n	8012324 <nk_draw_image+0x1d0>
    if (!b) return;
 801231a:	bf00      	nop
 801231c:	e002      	b.n	8012324 <nk_draw_image+0x1d0>
            return;
 801231e:	bf00      	nop
 8012320:	e000      	b.n	8012324 <nk_draw_image+0x1d0>
    if (!cmd) return;
 8012322:	bf00      	nop
}
 8012324:	372c      	adds	r7, #44	; 0x2c
 8012326:	46bd      	mov	sp, r7
 8012328:	bd90      	pop	{r4, r7, pc}
 801232a:	bf00      	nop
 801232c:	08028854 	.word	0x08028854
 8012330:	0802a748 	.word	0x0802a748
 8012334:	08028838 	.word	0x08028838

08012338 <nk_draw_nine_slice>:
NK_API void
nk_draw_nine_slice(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_nine_slice *slc, struct nk_color col)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b0b4      	sub	sp, #208	; 0xd0
 801233c:	af00      	add	r7, sp, #0
 801233e:	61f8      	str	r0, [r7, #28]
 8012340:	eeb0 6a40 	vmov.f32	s12, s0
 8012344:	eef0 6a60 	vmov.f32	s13, s1
 8012348:	eeb0 7a41 	vmov.f32	s14, s2
 801234c:	eef0 7a61 	vmov.f32	s15, s3
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	ed87 6a03 	vstr	s12, [r7, #12]
 8012358:	edc7 6a04 	vstr	s13, [r7, #16]
 801235c:	ed87 7a05 	vstr	s14, [r7, #20]
 8012360:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_image img;
    const struct nk_image *slcimg = (const struct nk_image*)slc;
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    nk_ushort rgnX, rgnY, rgnW, rgnH;
    rgnX = slcimg->region[0];
 801236a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801236e:	891b      	ldrh	r3, [r3, #8]
 8012370:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    rgnY = slcimg->region[1];
 8012374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012378:	895b      	ldrh	r3, [r3, #10]
 801237a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    rgnW = slcimg->region[2];
 801237e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012382:	899b      	ldrh	r3, [r3, #12]
 8012384:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    rgnH = slcimg->region[3];
 8012388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801238c:	89db      	ldrh	r3, [r3, #14]
 801238e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

    /* top-left */
    img.handle = slcimg->handle;
 8012392:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	627b      	str	r3, [r7, #36]	; 0x24
    img.w = slcimg->w;
 801239a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801239e:	889b      	ldrh	r3, [r3, #4]
 80123a0:	853b      	strh	r3, [r7, #40]	; 0x28
    img.h = slcimg->h;
 80123a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123a6:	88db      	ldrh	r3, [r3, #6]
 80123a8:	857b      	strh	r3, [r7, #42]	; 0x2a
    img.region[0] = rgnX;
 80123aa:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80123ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
    img.region[1] = rgnY;
 80123b0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80123b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    img.region[2] = slc->l;
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	8a1b      	ldrh	r3, [r3, #16]
 80123ba:	863b      	strh	r3, [r7, #48]	; 0x30
    img.region[3] = slc->t;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	8a5b      	ldrh	r3, [r3, #18]
 80123c0:	867b      	strh	r3, [r7, #50]	; 0x32

    nk_draw_image(b,
 80123c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80123c6:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 80123ce:	ee06 3a90 	vmov	s13, r3
 80123d2:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 80123da:	ee06 3a10 	vmov	s12, r3
 80123de:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80123e2:	eef0 1a46 	vmov.f32	s3, s12
 80123e6:	eeb0 1a66 	vmov.f32	s2, s13
 80123ea:	eef0 0a47 	vmov.f32	s1, s14
 80123ee:	eeb0 0a67 	vmov.f32	s0, s15
 80123f2:	f004 fa1b 	bl	801682c <nk_rect>
 80123f6:	eeb0 6a40 	vmov.f32	s12, s0
 80123fa:	eef0 6a60 	vmov.f32	s13, s1
 80123fe:	eeb0 7a41 	vmov.f32	s14, s2
 8012402:	eef0 7a61 	vmov.f32	s15, s3
 8012406:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 801240a:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 801240e:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8012412:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8012416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801241a:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 801241e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8012422:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012426:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	4619      	mov	r1, r3
 801242e:	eeb0 0a46 	vmov.f32	s0, s12
 8012432:	eef0 0a66 	vmov.f32	s1, s13
 8012436:	eeb0 1a47 	vmov.f32	s2, s14
 801243a:	eef0 1a67 	vmov.f32	s3, s15
 801243e:	69f8      	ldr	r0, [r7, #28]
 8012440:	f7ff fe88 	bl	8012154 <nk_draw_image>
        &img, col);

#define IMG_RGN(x, y, w, h) img.region[0] = (nk_ushort)(x); img.region[1] = (nk_ushort)(y); img.region[2] = (nk_ushort)(w); img.region[3] = (nk_ushort)(h);

    /* top-center */
    IMG_RGN(rgnX + slc->l, rgnY, rgnW - slc->l - slc->r, slc->t);
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	8a1a      	ldrh	r2, [r3, #16]
 8012448:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801244c:	4413      	add	r3, r2
 801244e:	b29b      	uxth	r3, r3
 8012450:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012452:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012456:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	8a1b      	ldrh	r3, [r3, #16]
 801245c:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	b29a      	uxth	r2, r3
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	8a9b      	ldrh	r3, [r3, #20]
 8012468:	1ad3      	subs	r3, r2, r3
 801246a:	b29b      	uxth	r3, r3
 801246c:	863b      	strh	r3, [r7, #48]	; 0x30
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	8a5b      	ldrh	r3, [r3, #18]
 8012472:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8012474:	ed97 7a03 	vldr	s14, [r7, #12]
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	8a1b      	ldrh	r3, [r3, #16]
 801247c:	ee07 3a90 	vmov	s15, r3
 8012480:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012484:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012488:	ed97 6a04 	vldr	s12, [r7, #16]
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 801248c:	ed97 7a05 	vldr	s14, [r7, #20]
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	8a1b      	ldrh	r3, [r3, #16]
 8012494:	ee07 3a90 	vmov	s15, r3
 8012498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801249c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	8a9b      	ldrh	r3, [r3, #20]
 80124a4:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80124a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124ac:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 80124b4:	ee07 3a10 	vmov	s14, r3
 80124b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80124bc:	eef0 1a47 	vmov.f32	s3, s14
 80124c0:	eeb0 1a67 	vmov.f32	s2, s15
 80124c4:	eef0 0a46 	vmov.f32	s1, s12
 80124c8:	eeb0 0a66 	vmov.f32	s0, s13
 80124cc:	f004 f9ae 	bl	801682c <nk_rect>
 80124d0:	eeb0 6a40 	vmov.f32	s12, s0
 80124d4:	eef0 6a60 	vmov.f32	s13, s1
 80124d8:	eeb0 7a41 	vmov.f32	s14, s2
 80124dc:	eef0 7a61 	vmov.f32	s15, s3
 80124e0:	ed87 6a11 	vstr	s12, [r7, #68]	; 0x44
 80124e4:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 80124e8:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 80124ec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80124f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124f4:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80124f8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80124fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012500:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	4619      	mov	r1, r3
 8012508:	eeb0 0a46 	vmov.f32	s0, s12
 801250c:	eef0 0a66 	vmov.f32	s1, s13
 8012510:	eeb0 1a47 	vmov.f32	s2, s14
 8012514:	eef0 1a67 	vmov.f32	s3, s15
 8012518:	69f8      	ldr	r0, [r7, #28]
 801251a:	f7ff fe1b 	bl	8012154 <nk_draw_image>
        &img, col);

    /* top-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY, slc->r, slc->t);
 801251e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8012522:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8012526:	4413      	add	r3, r2
 8012528:	b29a      	uxth	r2, r3
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	8a9b      	ldrh	r3, [r3, #20]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	b29b      	uxth	r3, r3
 8012532:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012534:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012538:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	8a9b      	ldrh	r3, [r3, #20]
 801253e:	863b      	strh	r3, [r7, #48]	; 0x30
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	8a5b      	ldrh	r3, [r3, #18]
 8012544:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8012546:	ed97 7a03 	vldr	s14, [r7, #12]
 801254a:	edd7 7a05 	vldr	s15, [r7, #20]
 801254e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	8a9b      	ldrh	r3, [r3, #20]
 8012556:	ee07 3a90 	vmov	s15, r3
 801255a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801255e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012562:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 801256a:	ee06 3a90 	vmov	s13, r3
 801256e:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8012576:	ee06 3a10 	vmov	s12, r3
 801257a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801257e:	eef0 1a46 	vmov.f32	s3, s12
 8012582:	eeb0 1a66 	vmov.f32	s2, s13
 8012586:	eef0 0a47 	vmov.f32	s1, s14
 801258a:	eeb0 0a67 	vmov.f32	s0, s15
 801258e:	f004 f94d 	bl	801682c <nk_rect>
 8012592:	eeb0 6a40 	vmov.f32	s12, s0
 8012596:	eef0 6a60 	vmov.f32	s13, s1
 801259a:	eeb0 7a41 	vmov.f32	s14, s2
 801259e:	eef0 7a61 	vmov.f32	s15, s3
 80125a2:	ed87 6a15 	vstr	s12, [r7, #84]	; 0x54
 80125a6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80125aa:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80125ae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80125b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125b6:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80125ba:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80125be:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80125c2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	4619      	mov	r1, r3
 80125ca:	eeb0 0a46 	vmov.f32	s0, s12
 80125ce:	eef0 0a66 	vmov.f32	s1, s13
 80125d2:	eeb0 1a47 	vmov.f32	s2, s14
 80125d6:	eef0 1a67 	vmov.f32	s3, s15
 80125da:	69f8      	ldr	r0, [r7, #28]
 80125dc:	f7ff fdba 	bl	8012154 <nk_draw_image>
        &img, col);

    /* center-left */
    IMG_RGN(rgnX, rgnY + slc->t, slc->l, rgnH - slc->t - slc->b);
 80125e0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80125e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	8a5a      	ldrh	r2, [r3, #18]
 80125ea:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80125ee:	4413      	add	r3, r2
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	8a1b      	ldrh	r3, [r3, #16]
 80125f8:	863b      	strh	r3, [r7, #48]	; 0x30
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	8a5b      	ldrh	r3, [r3, #18]
 80125fe:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8012602:	1ad3      	subs	r3, r2, r3
 8012604:	b29a      	uxth	r2, r3
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	8adb      	ldrh	r3, [r3, #22]
 801260a:	1ad3      	subs	r3, r2, r3
 801260c:	b29b      	uxth	r3, r3
 801260e:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8012610:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8012614:	ed97 7a04 	vldr	s14, [r7, #16]
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	8a5b      	ldrh	r3, [r3, #18]
 801261c:	ee07 3a90 	vmov	s15, r3
 8012620:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012624:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 801262c:	ee07 3a90 	vmov	s15, r3
 8012630:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8012634:	ed97 7a06 	vldr	s14, [r7, #24]
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	8a5b      	ldrh	r3, [r3, #18]
 801263c:	ee07 3a90 	vmov	s15, r3
 8012640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	8adb      	ldrh	r3, [r3, #22]
 801264c:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012658:	eef0 1a67 	vmov.f32	s3, s15
 801265c:	eeb0 1a65 	vmov.f32	s2, s11
 8012660:	eef0 0a46 	vmov.f32	s1, s12
 8012664:	eeb0 0a66 	vmov.f32	s0, s13
 8012668:	f004 f8e0 	bl	801682c <nk_rect>
 801266c:	eeb0 6a40 	vmov.f32	s12, s0
 8012670:	eef0 6a60 	vmov.f32	s13, s1
 8012674:	eeb0 7a41 	vmov.f32	s14, s2
 8012678:	eef0 7a61 	vmov.f32	s15, s3
 801267c:	ed87 6a19 	vstr	s12, [r7, #100]	; 0x64
 8012680:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8012684:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8012688:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801268c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012690:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8012694:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8012698:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801269c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	4619      	mov	r1, r3
 80126a4:	eeb0 0a46 	vmov.f32	s0, s12
 80126a8:	eef0 0a66 	vmov.f32	s1, s13
 80126ac:	eeb0 1a47 	vmov.f32	s2, s14
 80126b0:	eef0 1a67 	vmov.f32	s3, s15
 80126b4:	69f8      	ldr	r0, [r7, #28]
 80126b6:	f7ff fd4d 	bl	8012154 <nk_draw_image>
        &img, col);

    /* center */
    IMG_RGN(rgnX + slc->l, rgnY + slc->t, rgnW - slc->l - slc->r, rgnH - slc->t - slc->b);
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	8a1a      	ldrh	r2, [r3, #16]
 80126be:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80126c2:	4413      	add	r3, r2
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	8a5a      	ldrh	r2, [r3, #18]
 80126cc:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80126d0:	4413      	add	r3, r2
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	8a1b      	ldrh	r3, [r3, #16]
 80126da:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	8a9b      	ldrh	r3, [r3, #20]
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	863b      	strh	r3, [r7, #48]	; 0x30
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	8a5b      	ldrh	r3, [r3, #18]
 80126f0:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80126f4:	1ad3      	subs	r3, r2, r3
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	8adb      	ldrh	r3, [r3, #22]
 80126fc:	1ad3      	subs	r3, r2, r3
 80126fe:	b29b      	uxth	r3, r3
 8012700:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012702:	ed97 7a03 	vldr	s14, [r7, #12]
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	8a1b      	ldrh	r3, [r3, #16]
 801270a:	ee07 3a90 	vmov	s15, r3
 801270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012712:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012716:	ed97 7a04 	vldr	s14, [r7, #16]
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	8a5b      	ldrh	r3, [r3, #18]
 801271e:	ee07 3a90 	vmov	s15, r3
 8012722:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012726:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801272a:	ed97 7a05 	vldr	s14, [r7, #20]
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	8a1b      	ldrh	r3, [r3, #16]
 8012732:	ee07 3a90 	vmov	s15, r3
 8012736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801273a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	8a9b      	ldrh	r3, [r3, #20]
 8012742:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801274a:	ee77 5a67 	vsub.f32	s11, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801274e:	ed97 7a06 	vldr	s14, [r7, #24]
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	8a5b      	ldrh	r3, [r3, #18]
 8012756:	ee07 3a90 	vmov	s15, r3
 801275a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	8adb      	ldrh	r3, [r3, #22]
 8012766:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801276a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801276e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012772:	eef0 1a67 	vmov.f32	s3, s15
 8012776:	eeb0 1a65 	vmov.f32	s2, s11
 801277a:	eef0 0a46 	vmov.f32	s1, s12
 801277e:	eeb0 0a66 	vmov.f32	s0, s13
 8012782:	f004 f853 	bl	801682c <nk_rect>
 8012786:	eeb0 6a40 	vmov.f32	s12, s0
 801278a:	eef0 6a60 	vmov.f32	s13, s1
 801278e:	eeb0 7a41 	vmov.f32	s14, s2
 8012792:	eef0 7a61 	vmov.f32	s15, s3
 8012796:	ed87 6a1d 	vstr	s12, [r7, #116]	; 0x74
 801279a:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 801279e:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 80127a2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 80127a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127aa:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 80127ae:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80127b2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80127b6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	4619      	mov	r1, r3
 80127be:	eeb0 0a46 	vmov.f32	s0, s12
 80127c2:	eef0 0a66 	vmov.f32	s1, s13
 80127c6:	eeb0 1a47 	vmov.f32	s2, s14
 80127ca:	eef0 1a67 	vmov.f32	s3, s15
 80127ce:	69f8      	ldr	r0, [r7, #28]
 80127d0:	f7ff fcc0 	bl	8012154 <nk_draw_image>
        &img, col);

    /* center-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + slc->t, slc->r, rgnH - slc->t - slc->b);
 80127d4:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80127d8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80127dc:	4413      	add	r3, r2
 80127de:	b29a      	uxth	r2, r3
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	8a9b      	ldrh	r3, [r3, #20]
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	8a5a      	ldrh	r2, [r3, #18]
 80127ee:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80127f2:	4413      	add	r3, r2
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	8a9b      	ldrh	r3, [r3, #20]
 80127fc:	863b      	strh	r3, [r7, #48]	; 0x30
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	8a5b      	ldrh	r3, [r3, #18]
 8012802:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8012806:	1ad3      	subs	r3, r2, r3
 8012808:	b29a      	uxth	r2, r3
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	8adb      	ldrh	r3, [r3, #22]
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	b29b      	uxth	r3, r3
 8012812:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012814:	ed97 7a03 	vldr	s14, [r7, #12]
 8012818:	edd7 7a05 	vldr	s15, [r7, #20]
 801281c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	8a9b      	ldrh	r3, [r3, #20]
 8012824:	ee07 3a90 	vmov	s15, r3
 8012828:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801282c:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012830:	ed97 7a04 	vldr	s14, [r7, #16]
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	8a5b      	ldrh	r3, [r3, #18]
 8012838:	ee07 3a90 	vmov	s15, r3
 801283c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012840:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8012848:	ee07 3a90 	vmov	s15, r3
 801284c:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012850:	ed97 7a06 	vldr	s14, [r7, #24]
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	8a5b      	ldrh	r3, [r3, #18]
 8012858:	ee07 3a90 	vmov	s15, r3
 801285c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	8adb      	ldrh	r3, [r3, #22]
 8012868:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801286c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012874:	eef0 1a67 	vmov.f32	s3, s15
 8012878:	eeb0 1a65 	vmov.f32	s2, s11
 801287c:	eef0 0a46 	vmov.f32	s1, s12
 8012880:	eeb0 0a66 	vmov.f32	s0, s13
 8012884:	f003 ffd2 	bl	801682c <nk_rect>
 8012888:	eeb0 6a40 	vmov.f32	s12, s0
 801288c:	eef0 6a60 	vmov.f32	s13, s1
 8012890:	eeb0 7a41 	vmov.f32	s14, s2
 8012894:	eef0 7a61 	vmov.f32	s15, s3
 8012898:	ed87 6a21 	vstr	s12, [r7, #132]	; 0x84
 801289c:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 80128a0:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 80128a4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 80128a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80128ac:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 80128b0:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80128b4:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80128b8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	4619      	mov	r1, r3
 80128c0:	eeb0 0a46 	vmov.f32	s0, s12
 80128c4:	eef0 0a66 	vmov.f32	s1, s13
 80128c8:	eeb0 1a47 	vmov.f32	s2, s14
 80128cc:	eef0 1a67 	vmov.f32	s3, s15
 80128d0:	69f8      	ldr	r0, [r7, #28]
 80128d2:	f7ff fc3f 	bl	8012154 <nk_draw_image>
        &img, col);

    /* bottom-left */
    IMG_RGN(rgnX, rgnY + rgnH - slc->b, slc->l, slc->b);
 80128d6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80128da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80128dc:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80128e0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80128e4:	4413      	add	r3, r2
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	8adb      	ldrh	r3, [r3, #22]
 80128ec:	1ad3      	subs	r3, r2, r3
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	8a1b      	ldrh	r3, [r3, #16]
 80128f6:	863b      	strh	r3, [r7, #48]	; 0x30
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	8adb      	ldrh	r3, [r3, #22]
 80128fc:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 80128fe:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8012902:	ed97 7a04 	vldr	s14, [r7, #16]
 8012906:	edd7 7a06 	vldr	s15, [r7, #24]
 801290a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	8adb      	ldrh	r3, [r3, #22]
 8012912:	ee07 3a90 	vmov	s15, r3
 8012916:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801291a:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 8012922:	ee07 3a10 	vmov	s14, r3
 8012926:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 801292e:	ee06 3a10 	vmov	s12, r3
 8012932:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012936:	eef0 1a46 	vmov.f32	s3, s12
 801293a:	eeb0 1a47 	vmov.f32	s2, s14
 801293e:	eef0 0a67 	vmov.f32	s1, s15
 8012942:	eeb0 0a66 	vmov.f32	s0, s13
 8012946:	f003 ff71 	bl	801682c <nk_rect>
 801294a:	eeb0 6a40 	vmov.f32	s12, s0
 801294e:	eef0 6a60 	vmov.f32	s13, s1
 8012952:	eeb0 7a41 	vmov.f32	s14, s2
 8012956:	eef0 7a61 	vmov.f32	s15, s3
 801295a:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 801295e:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 8012962:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8012966:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 801296a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801296e:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8012972:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8012976:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 801297a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	4619      	mov	r1, r3
 8012982:	eeb0 0a46 	vmov.f32	s0, s12
 8012986:	eef0 0a66 	vmov.f32	s1, s13
 801298a:	eeb0 1a47 	vmov.f32	s2, s14
 801298e:	eef0 1a67 	vmov.f32	s3, s15
 8012992:	69f8      	ldr	r0, [r7, #28]
 8012994:	f7ff fbde 	bl	8012154 <nk_draw_image>
        &img, col);

    /* bottom-center */
    IMG_RGN(rgnX + slc->l, rgnY + rgnH - slc->b, rgnW - slc->l - slc->r, slc->b);
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	8a1a      	ldrh	r2, [r3, #16]
 801299c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80129a0:	4413      	add	r3, r2
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80129a6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80129aa:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80129ae:	4413      	add	r3, r2
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	8adb      	ldrh	r3, [r3, #22]
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	8a1b      	ldrh	r3, [r3, #16]
 80129c0:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80129c4:	1ad3      	subs	r3, r2, r3
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	8a9b      	ldrh	r3, [r3, #20]
 80129cc:	1ad3      	subs	r3, r2, r3
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	863b      	strh	r3, [r7, #48]	; 0x30
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	8adb      	ldrh	r3, [r3, #22]
 80129d6:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 80129d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	8a1b      	ldrh	r3, [r3, #16]
 80129e0:	ee07 3a90 	vmov	s15, r3
 80129e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80129e8:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 80129ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80129f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80129f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	8adb      	ldrh	r3, [r3, #22]
 80129fc:	ee07 3a90 	vmov	s15, r3
 8012a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012a04:	ee37 6a67 	vsub.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a08:	ed97 7a05 	vldr	s14, [r7, #20]
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	8a1b      	ldrh	r3, [r3, #16]
 8012a10:	ee07 3a90 	vmov	s15, r3
 8012a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	8a9b      	ldrh	r3, [r3, #20]
 8012a20:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a28:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012a30:	ee07 3a10 	vmov	s14, r3
 8012a34:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012a38:	eef0 1a47 	vmov.f32	s3, s14
 8012a3c:	eeb0 1a67 	vmov.f32	s2, s15
 8012a40:	eef0 0a46 	vmov.f32	s1, s12
 8012a44:	eeb0 0a66 	vmov.f32	s0, s13
 8012a48:	f003 fef0 	bl	801682c <nk_rect>
 8012a4c:	eeb0 6a40 	vmov.f32	s12, s0
 8012a50:	eef0 6a60 	vmov.f32	s13, s1
 8012a54:	eeb0 7a41 	vmov.f32	s14, s2
 8012a58:	eef0 7a61 	vmov.f32	s15, s3
 8012a5c:	ed87 6a29 	vstr	s12, [r7, #164]	; 0xa4
 8012a60:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 8012a64:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 8012a68:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8012a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a70:	ed97 6a29 	vldr	s12, [r7, #164]	; 0xa4
 8012a74:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8012a78:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8012a7c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	4619      	mov	r1, r3
 8012a84:	eeb0 0a46 	vmov.f32	s0, s12
 8012a88:	eef0 0a66 	vmov.f32	s1, s13
 8012a8c:	eeb0 1a47 	vmov.f32	s2, s14
 8012a90:	eef0 1a67 	vmov.f32	s3, s15
 8012a94:	69f8      	ldr	r0, [r7, #28]
 8012a96:	f7ff fb5d 	bl	8012154 <nk_draw_image>
        &img, col);

    /* bottom-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + rgnH - slc->b, slc->r, slc->b);
 8012a9a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8012a9e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8012aa2:	4413      	add	r3, r2
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	8a9b      	ldrh	r3, [r3, #20]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012ab0:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8012ab4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8012ab8:	4413      	add	r3, r2
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	8adb      	ldrh	r3, [r3, #22]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	8a9b      	ldrh	r3, [r3, #20]
 8012aca:	863b      	strh	r3, [r7, #48]	; 0x30
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	8adb      	ldrh	r3, [r3, #22]
 8012ad0:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012ad2:	ed97 7a03 	vldr	s14, [r7, #12]
 8012ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8012ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	8a9b      	ldrh	r3, [r3, #20]
 8012ae2:	ee07 3a90 	vmov	s15, r3
 8012ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012aea:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012aee:	ed97 7a04 	vldr	s14, [r7, #16]
 8012af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8012af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	8adb      	ldrh	r3, [r3, #22]
 8012afe:	ee07 3a90 	vmov	s15, r3
 8012b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012b06:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8012b0e:	ee07 3a10 	vmov	s14, r3
 8012b12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012b1a:	ee06 3a10 	vmov	s12, r3
 8012b1e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012b22:	eef0 1a46 	vmov.f32	s3, s12
 8012b26:	eeb0 1a47 	vmov.f32	s2, s14
 8012b2a:	eef0 0a67 	vmov.f32	s1, s15
 8012b2e:	eeb0 0a66 	vmov.f32	s0, s13
 8012b32:	f003 fe7b 	bl	801682c <nk_rect>
 8012b36:	eeb0 6a40 	vmov.f32	s12, s0
 8012b3a:	eef0 6a60 	vmov.f32	s13, s1
 8012b3e:	eeb0 7a41 	vmov.f32	s14, s2
 8012b42:	eef0 7a61 	vmov.f32	s15, s3
 8012b46:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 8012b4a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8012b4e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8012b52:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8012b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b5a:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8012b5e:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8012b62:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8012b66:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	eeb0 0a46 	vmov.f32	s0, s12
 8012b72:	eef0 0a66 	vmov.f32	s1, s13
 8012b76:	eeb0 1a47 	vmov.f32	s2, s14
 8012b7a:	eef0 1a67 	vmov.f32	s3, s15
 8012b7e:	69f8      	ldr	r0, [r7, #28]
 8012b80:	f7ff fae8 	bl	8012154 <nk_draw_image>
        &img, col);

#undef IMG_RGN
}
 8012b84:	bf00      	nop
 8012b86:	37d0      	adds	r7, #208	; 0xd0
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <nk_draw_text>:
}
NK_API void
nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,
    const char *string, int length, const struct nk_user_font *font,
    struct nk_color bg, struct nk_color fg)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b092      	sub	sp, #72	; 0x48
 8012b90:	af04      	add	r7, sp, #16
 8012b92:	61f8      	str	r0, [r7, #28]
 8012b94:	eeb0 6a40 	vmov.f32	s12, s0
 8012b98:	eef0 6a60 	vmov.f32	s13, s1
 8012b9c:	eeb0 7a41 	vmov.f32	s14, s2
 8012ba0:	eef0 7a61 	vmov.f32	s15, s3
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	607a      	str	r2, [r7, #4]
 8012ba8:	603b      	str	r3, [r7, #0]
 8012baa:	ed87 6a03 	vstr	s12, [r7, #12]
 8012bae:	edc7 6a04 	vstr	s13, [r7, #16]
 8012bb2:	ed87 7a05 	vstr	s14, [r7, #20]
 8012bb6:	edc7 7a06 	vstr	s15, [r7, #24]
    float text_width = 0;
 8012bba:	f04f 0300 	mov.w	r3, #0
 8012bbe:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command_text *cmd;

    NK_ASSERT(b);
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d106      	bne.n	8012bd4 <nk_draw_text+0x48>
 8012bc6:	4b93      	ldr	r3, [pc, #588]	; (8012e14 <nk_draw_text+0x288>)
 8012bc8:	4a93      	ldr	r2, [pc, #588]	; (8012e18 <nk_draw_text+0x28c>)
 8012bca:	f240 210d 	movw	r1, #525	; 0x20d
 8012bce:	4893      	ldr	r0, [pc, #588]	; (8012e1c <nk_draw_text+0x290>)
 8012bd0:	f011 ff82 	bl	8024ad8 <__assert_func>
    NK_ASSERT(font);
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d106      	bne.n	8012be8 <nk_draw_text+0x5c>
 8012bda:	4b91      	ldr	r3, [pc, #580]	; (8012e20 <nk_draw_text+0x294>)
 8012bdc:	4a8e      	ldr	r2, [pc, #568]	; (8012e18 <nk_draw_text+0x28c>)
 8012bde:	f240 210e 	movw	r1, #526	; 0x20e
 8012be2:	488e      	ldr	r0, [pc, #568]	; (8012e1c <nk_draw_text+0x290>)
 8012be4:	f011 ff78 	bl	8024ad8 <__assert_func>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	f000 8107 	beq.w	8012dfe <nk_draw_text+0x272>
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 8103 	beq.w	8012dfe <nk_draw_text+0x272>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f000 80ff 	beq.w	8012dfe <nk_draw_text+0x272>
 8012c00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d104      	bne.n	8012c12 <nk_draw_text+0x86>
 8012c08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f000 80f6 	beq.w	8012dfe <nk_draw_text+0x272>
    if (b->use_clipping) {
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	695b      	ldr	r3, [r3, #20]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d072      	beq.n	8012d00 <nk_draw_text+0x174>
        const struct nk_rect *c = &b->clip;
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	633b      	str	r3, [r7, #48]	; 0x30
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 8012c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c22:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2e:	f000 80e8 	beq.w	8012e02 <nk_draw_text+0x276>
 8012c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8012c38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c40:	f000 80df 	beq.w	8012e02 <nk_draw_text+0x276>
 8012c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c46:	ed93 7a00 	vldr	s14, [r3]
 8012c4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8012c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5e:	bf4c      	ite	mi
 8012c60:	2301      	movmi	r3, #1
 8012c62:	2300      	movpl	r3, #0
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	f083 0301 	eor.w	r3, r3, #1
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	f040 80c8 	bne.w	8012e02 <nk_draw_text+0x276>
 8012c72:	ed97 7a03 	vldr	s14, [r7, #12]
 8012c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c78:	edd3 6a00 	vldr	s13, [r3]
 8012c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c8e:	bf4c      	ite	mi
 8012c90:	2301      	movmi	r3, #1
 8012c92:	2300      	movpl	r3, #0
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	f083 0301 	eor.w	r3, r3, #1
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	f040 80b0 	bne.w	8012e02 <nk_draw_text+0x276>
 8012ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca4:	ed93 7a01 	vldr	s14, [r3, #4]
 8012ca8:	edd7 6a04 	vldr	s13, [r7, #16]
 8012cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8012cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbc:	bf4c      	ite	mi
 8012cbe:	2301      	movmi	r3, #1
 8012cc0:	2300      	movpl	r3, #0
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	f083 0301 	eor.w	r3, r3, #1
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f040 8099 	bne.w	8012e02 <nk_draw_text+0x276>
 8012cd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8012cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd6:	edd3 6a01 	vldr	s13, [r3, #4]
 8012cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8012ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cec:	bf4c      	ite	mi
 8012cee:	2301      	movmi	r3, #1
 8012cf0:	2300      	movpl	r3, #0
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	f083 0301 	eor.w	r3, r3, #1
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	f040 8081 	bne.w	8012e02 <nk_draw_text+0x276>
            return;
    }

    /* make sure text fits inside bounds */
    text_width = font->width(font->userdata, font->height, string, length);
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	689b      	ldr	r3, [r3, #8]
 8012d04:	683a      	ldr	r2, [r7, #0]
 8012d06:	edd2 7a01 	vldr	s15, [r2, #4]
 8012d0a:	6838      	ldr	r0, [r7, #0]
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	68b9      	ldr	r1, [r7, #8]
 8012d10:	eeb0 0a67 	vmov.f32	s0, s15
 8012d14:	6800      	ldr	r0, [r0, #0]
 8012d16:	4798      	blx	r3
 8012d18:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    if (text_width > r.w){
 8012d1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012d20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2c:	dd17      	ble.n	8012d5e <nk_draw_text+0x1d2>
        int glyphs = 0;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	62bb      	str	r3, [r7, #40]	; 0x28
        float txt_width = (float)text_width;
 8012d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d34:	627b      	str	r3, [r7, #36]	; 0x24
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
 8012d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8012d3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d3e:	2300      	movs	r3, #0
 8012d40:	9302      	str	r3, [sp, #8]
 8012d42:	2300      	movs	r3, #0
 8012d44:	9301      	str	r3, [sp, #4]
 8012d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	4613      	mov	r3, r2
 8012d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8012d52:	687a      	ldr	r2, [r7, #4]
 8012d54:	68b9      	ldr	r1, [r7, #8]
 8012d56:	6838      	ldr	r0, [r7, #0]
 8012d58:	f010 f9f8 	bl	802314c <nk_text_clamp>
 8012d5c:	6078      	str	r0, [r7, #4]
    }

    if (!length) return;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d050      	beq.n	8012e06 <nk_draw_text+0x27a>
    cmd = (struct nk_command_text*)
        nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	3329      	adds	r3, #41	; 0x29
 8012d68:	461a      	mov	r2, r3
 8012d6a:	2110      	movs	r1, #16
 8012d6c:	69f8      	ldr	r0, [r7, #28]
 8012d6e:	f7fe fcb1 	bl	80116d4 <nk_command_buffer_push>
 8012d72:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (!cmd) return;
 8012d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d047      	beq.n	8012e0a <nk_draw_text+0x27e>
    cmd->x = (short)r.x;
 8012d7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8012d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d82:	ee17 3a90 	vmov	r3, s15
 8012d86:	b21a      	sxth	r2, r3
 8012d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8a:	829a      	strh	r2, [r3, #20]
    cmd->y = (short)r.y;
 8012d8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8012d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d94:	ee17 3a90 	vmov	r3, s15
 8012d98:	b21a      	sxth	r2, r3
 8012d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d9c:	82da      	strh	r2, [r3, #22]
    cmd->w = (unsigned short)r.w;
 8012d9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012da6:	ee17 3a90 	vmov	r3, s15
 8012daa:	b29a      	uxth	r2, r3
 8012dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dae:	831a      	strh	r2, [r3, #24]
    cmd->h = (unsigned short)r.h;
 8012db0:	edd7 7a06 	vldr	s15, [r7, #24]
 8012db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012db8:	ee17 3a90 	vmov	r3, s15
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc0:	835a      	strh	r2, [r3, #26]
    cmd->background = bg;
 8012dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012dc6:	60da      	str	r2, [r3, #12]
    cmd->foreground = fg;
 8012dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dcc:	611a      	str	r2, [r3, #16]
    cmd->font = font;
 8012dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd0:	683a      	ldr	r2, [r7, #0]
 8012dd2:	609a      	str	r2, [r3, #8]
    cmd->length = length;
 8012dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd6:	687a      	ldr	r2, [r7, #4]
 8012dd8:	621a      	str	r2, [r3, #32]
    cmd->height = font->height;
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	685a      	ldr	r2, [r3, #4]
 8012dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de0:	61da      	str	r2, [r3, #28]
    NK_MEMCPY(cmd->string, string, (nk_size)length);
 8012de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de4:	3324      	adds	r3, #36	; 0x24
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	68b9      	ldr	r1, [r7, #8]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f00f fafa 	bl	80223e4 <nk_memcopy>
    cmd->string[length] = '\0';
 8012df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	4413      	add	r3, r2
 8012df6:	3324      	adds	r3, #36	; 0x24
 8012df8:	2200      	movs	r2, #0
 8012dfa:	701a      	strb	r2, [r3, #0]
 8012dfc:	e006      	b.n	8012e0c <nk_draw_text+0x280>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8012dfe:	bf00      	nop
 8012e00:	e004      	b.n	8012e0c <nk_draw_text+0x280>
            return;
 8012e02:	bf00      	nop
 8012e04:	e002      	b.n	8012e0c <nk_draw_text+0x280>
    if (!length) return;
 8012e06:	bf00      	nop
 8012e08:	e000      	b.n	8012e0c <nk_draw_text+0x280>
    if (!cmd) return;
 8012e0a:	bf00      	nop
}
 8012e0c:	3738      	adds	r7, #56	; 0x38
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	08028854 	.word	0x08028854
 8012e18:	0802a758 	.word	0x0802a758
 8012e1c:	08028838 	.word	0x08028838
 8012e20:	08028860 	.word	0x08028860

08012e24 <nk_filter_float>:
    if (unicode > 128) return nk_false;
    else return nk_true;
}
NK_API nk_bool
nk_filter_float(const struct nk_text_edit *box, nk_rune unicode)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
    NK_UNUSED(box);
    if ((unicode < '0' || unicode > '9') && unicode != '.' && unicode != '-')
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	2b2f      	cmp	r3, #47	; 0x2f
 8012e32:	d902      	bls.n	8012e3a <nk_filter_float+0x16>
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	2b39      	cmp	r3, #57	; 0x39
 8012e38:	d907      	bls.n	8012e4a <nk_filter_float+0x26>
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8012e3e:	d004      	beq.n	8012e4a <nk_filter_float+0x26>
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	2b2d      	cmp	r3, #45	; 0x2d
 8012e44:	d001      	beq.n	8012e4a <nk_filter_float+0x26>
        return nk_false;
 8012e46:	2300      	movs	r3, #0
 8012e48:	e000      	b.n	8012e4c <nk_filter_float+0x28>
    else return nk_true;
 8012e4a:	2301      	movs	r3, #1
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	370c      	adds	r7, #12
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <nk_filter_decimal>:
NK_API nk_bool
nk_filter_decimal(const struct nk_text_edit *box, nk_rune unicode)
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
    NK_UNUSED(box);
    if ((unicode < '0' || unicode > '9') && unicode != '-')
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	2b2f      	cmp	r3, #47	; 0x2f
 8012e66:	d902      	bls.n	8012e6e <nk_filter_decimal+0x16>
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	2b39      	cmp	r3, #57	; 0x39
 8012e6c:	d904      	bls.n	8012e78 <nk_filter_decimal+0x20>
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	2b2d      	cmp	r3, #45	; 0x2d
 8012e72:	d001      	beq.n	8012e78 <nk_filter_decimal+0x20>
        return nk_false;
 8012e74:	2300      	movs	r3, #0
 8012e76:	e000      	b.n	8012e7a <nk_filter_decimal+0x22>
    else return nk_true;
 8012e78:	2301      	movs	r3, #1
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr
	...

08012e88 <nk_edit_draw_text>:
nk_edit_draw_text(struct nk_command_buffer *out,
    const struct nk_style_edit *style, float pos_x, float pos_y,
    float x_offset, const char *text, int byte_len, float row_height,
    const struct nk_user_font *font, struct nk_color background,
    struct nk_color foreground, nk_bool is_selected)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b09e      	sub	sp, #120	; 0x78
 8012e8c:	af02      	add	r7, sp, #8
 8012e8e:	61f8      	str	r0, [r7, #28]
 8012e90:	61b9      	str	r1, [r7, #24]
 8012e92:	ed87 0a05 	vstr	s0, [r7, #20]
 8012e96:	edc7 0a04 	vstr	s1, [r7, #16]
 8012e9a:	ed87 1a03 	vstr	s2, [r7, #12]
 8012e9e:	60ba      	str	r2, [r7, #8]
 8012ea0:	607b      	str	r3, [r7, #4]
 8012ea2:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(out);
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d105      	bne.n	8012eb8 <nk_edit_draw_text+0x30>
 8012eac:	4b73      	ldr	r3, [pc, #460]	; (801307c <nk_edit_draw_text+0x1f4>)
 8012eae:	4a74      	ldr	r2, [pc, #464]	; (8013080 <nk_edit_draw_text+0x1f8>)
 8012eb0:	214e      	movs	r1, #78	; 0x4e
 8012eb2:	4874      	ldr	r0, [pc, #464]	; (8013084 <nk_edit_draw_text+0x1fc>)
 8012eb4:	f011 fe10 	bl	8024ad8 <__assert_func>
    NK_ASSERT(font);
 8012eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d105      	bne.n	8012eca <nk_edit_draw_text+0x42>
 8012ebe:	4b72      	ldr	r3, [pc, #456]	; (8013088 <nk_edit_draw_text+0x200>)
 8012ec0:	4a6f      	ldr	r2, [pc, #444]	; (8013080 <nk_edit_draw_text+0x1f8>)
 8012ec2:	214f      	movs	r1, #79	; 0x4f
 8012ec4:	486f      	ldr	r0, [pc, #444]	; (8013084 <nk_edit_draw_text+0x1fc>)
 8012ec6:	f011 fe07 	bl	8024ad8 <__assert_func>
    NK_ASSERT(style);
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d105      	bne.n	8012edc <nk_edit_draw_text+0x54>
 8012ed0:	4b6e      	ldr	r3, [pc, #440]	; (801308c <nk_edit_draw_text+0x204>)
 8012ed2:	4a6b      	ldr	r2, [pc, #428]	; (8013080 <nk_edit_draw_text+0x1f8>)
 8012ed4:	2150      	movs	r1, #80	; 0x50
 8012ed6:	486b      	ldr	r0, [pc, #428]	; (8013084 <nk_edit_draw_text+0x1fc>)
 8012ed8:	f011 fdfe 	bl	8024ad8 <__assert_func>
    if (!text || !byte_len || !out || !style) return;
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	f000 8164 	beq.w	80131ac <nk_edit_draw_text+0x324>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	f000 8160 	beq.w	80131ac <nk_edit_draw_text+0x324>
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f000 815c 	beq.w	80131ac <nk_edit_draw_text+0x324>
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f000 8158 	beq.w	80131ac <nk_edit_draw_text+0x324>

    {int glyph_len = 0;
 8012efc:	2300      	movs	r3, #0
 8012efe:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_rune unicode = 0;
 8012f00:	2300      	movs	r3, #0
 8012f02:	653b      	str	r3, [r7, #80]	; 0x50
    int text_len = 0;
 8012f04:	2300      	movs	r3, #0
 8012f06:	66bb      	str	r3, [r7, #104]	; 0x68
    float line_width = 0;
 8012f08:	f04f 0300 	mov.w	r3, #0
 8012f0c:	667b      	str	r3, [r7, #100]	; 0x64
    float glyph_width;
    const char *line = text;
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	663b      	str	r3, [r7, #96]	; 0x60
    float line_offset = 0;
 8012f12:	f04f 0300 	mov.w	r3, #0
 8012f16:	65fb      	str	r3, [r7, #92]	; 0x5c
    int line_count = 0;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	65bb      	str	r3, [r7, #88]	; 0x58

    struct nk_text txt;
    txt.padding = nk_vec2(0,0);
 8012f1c:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8013090 <nk_edit_draw_text+0x208>
 8012f20:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8013090 <nk_edit_draw_text+0x208>
 8012f24:	f003 fd34 	bl	8016990 <nk_vec2>
 8012f28:	eeb0 7a40 	vmov.f32	s14, s0
 8012f2c:	eef0 7a60 	vmov.f32	s15, s1
 8012f30:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8012f34:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    txt.background = background;
 8012f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f3a:	64bb      	str	r3, [r7, #72]	; 0x48
    txt.text = foreground;
 8012f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012f40:	64fb      	str	r3, [r7, #76]	; 0x4c

    glyph_len = nk_utf_decode(text+text_len, &unicode, byte_len-text_len);
 8012f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f44:	68ba      	ldr	r2, [r7, #8]
 8012f46:	18d0      	adds	r0, r2, r3
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f4c:	1ad2      	subs	r2, r2, r3
 8012f4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012f52:	4619      	mov	r1, r3
 8012f54:	f00f f91c 	bl	8022190 <nk_utf_decode>
 8012f58:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (!glyph_len) return;
 8012f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	f000 8127 	beq.w	80131b0 <nk_edit_draw_text+0x328>
    while ((text_len < byte_len) && glyph_len)
 8012f62:	e0c0      	b.n	80130e6 <nk_edit_draw_text+0x25e>
    {
        if (unicode == '\n') {
 8012f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f66:	2b0a      	cmp	r3, #10
 8012f68:	d175      	bne.n	8013056 <nk_edit_draw_text+0x1ce>
            /* new line separator so draw previous line */
            struct nk_rect label;
            label.y = pos_y + line_offset;
 8012f6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8012f6e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8012f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            label.h = row_height;
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
            label.w = line_width;
 8012f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f80:	63bb      	str	r3, [r7, #56]	; 0x38
            label.x = pos_x;
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	633b      	str	r3, [r7, #48]	; 0x30
            if (!line_count)
 8012f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d107      	bne.n	8012f9c <nk_edit_draw_text+0x114>
                label.x += x_offset;
 8012f8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8012f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8012f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f98:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            if (is_selected) /* selection needs to draw different background color */
 8012f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d015      	beq.n	8012fd0 <nk_edit_draw_text+0x148>
                nk_fill_rect(out, label, 0, background);
 8012fa4:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8012fa8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8012fac:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012fb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012fb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012fb6:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8013090 <nk_edit_draw_text+0x208>
 8012fba:	eeb0 0a46 	vmov.f32	s0, s12
 8012fbe:	eef0 0a66 	vmov.f32	s1, s13
 8012fc2:	eeb0 1a47 	vmov.f32	s2, s14
 8012fc6:	eef0 1a67 	vmov.f32	s3, s15
 8012fca:	69f8      	ldr	r0, [r7, #28]
 8012fcc:	f7fe fd68 	bl	8011aa0 <nk_fill_rect>
            nk_widget_text(out, label, line, (int)((text + text_len) - line),
 8012fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fd2:	68ba      	ldr	r2, [r7, #8]
 8012fd4:	441a      	add	r2, r3
 8012fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012fd8:	1ad2      	subs	r2, r2, r3
 8012fda:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012fde:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8012fe2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8012fe6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012fea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ff0:	9301      	str	r3, [sp, #4]
 8012ff2:	2312      	movs	r3, #18
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012ffa:	eeb0 0a46 	vmov.f32	s0, s12
 8012ffe:	eef0 0a66 	vmov.f32	s1, s13
 8013002:	eeb0 1a47 	vmov.f32	s2, s14
 8013006:	eef0 1a67 	vmov.f32	s3, s15
 801300a:	69f8      	ldr	r0, [r7, #28]
 801300c:	f00c faae 	bl	801f56c <nk_widget_text>
                &txt, NK_TEXT_CENTERED, font);

            text_len++;
 8013010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013012:	3301      	adds	r3, #1
 8013014:	66bb      	str	r3, [r7, #104]	; 0x68
            line_count++;
 8013016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013018:	3301      	adds	r3, #1
 801301a:	65bb      	str	r3, [r7, #88]	; 0x58
            line_width = 0;
 801301c:	f04f 0300 	mov.w	r3, #0
 8013020:	667b      	str	r3, [r7, #100]	; 0x64
            line = text + text_len;
 8013022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013024:	68ba      	ldr	r2, [r7, #8]
 8013026:	4413      	add	r3, r2
 8013028:	663b      	str	r3, [r7, #96]	; 0x60
            line_offset += row_height;
 801302a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801302e:	edd7 7a00 	vldr	s15, [r7]
 8013032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013036:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            glyph_len = nk_utf_decode(text + text_len, &unicode, (int)(byte_len-text_len));
 801303a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	18d0      	adds	r0, r2, r3
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013044:	1ad2      	subs	r2, r2, r3
 8013046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801304a:	4619      	mov	r1, r3
 801304c:	f00f f8a0 	bl	8022190 <nk_utf_decode>
 8013050:	66f8      	str	r0, [r7, #108]	; 0x6c
            continue;
 8013052:	bf00      	nop
 8013054:	e047      	b.n	80130e6 <nk_edit_draw_text+0x25e>
        }
        if (unicode == '\r') {
 8013056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013058:	2b0d      	cmp	r3, #13
 801305a:	d11b      	bne.n	8013094 <nk_edit_draw_text+0x20c>
            text_len++;
 801305c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801305e:	3301      	adds	r3, #1
 8013060:	66bb      	str	r3, [r7, #104]	; 0x68
            glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);
 8013062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013064:	68ba      	ldr	r2, [r7, #8]
 8013066:	18d0      	adds	r0, r2, r3
 8013068:	687a      	ldr	r2, [r7, #4]
 801306a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801306c:	1ad2      	subs	r2, r2, r3
 801306e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013072:	4619      	mov	r1, r3
 8013074:	f00f f88c 	bl	8022190 <nk_utf_decode>
 8013078:	66f8      	str	r0, [r7, #108]	; 0x6c
            continue;
 801307a:	e034      	b.n	80130e6 <nk_edit_draw_text+0x25e>
 801307c:	08028868 	.word	0x08028868
 8013080:	0802a76c 	.word	0x0802a76c
 8013084:	0802886c 	.word	0x0802886c
 8013088:	08028888 	.word	0x08028888
 801308c:	08028890 	.word	0x08028890
 8013090:	00000000 	.word	0x00000000
        }
        glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);
 8013094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013096:	689b      	ldr	r3, [r3, #8]
 8013098:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801309a:	edd2 7a01 	vldr	s15, [r2, #4]
 801309e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130a0:	68b9      	ldr	r1, [r7, #8]
 80130a2:	4411      	add	r1, r2
 80130a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80130a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80130a8:	eeb0 0a67 	vmov.f32	s0, s15
 80130ac:	6800      	ldr	r0, [r0, #0]
 80130ae:	4798      	blx	r3
 80130b0:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        line_width += (float)glyph_width;
 80130b4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80130b8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80130bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130c0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        text_len += glyph_len;
 80130c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130c8:	4413      	add	r3, r2
 80130ca:	66bb      	str	r3, [r7, #104]	; 0x68
        glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);
 80130cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130ce:	68ba      	ldr	r2, [r7, #8]
 80130d0:	18d0      	adds	r0, r2, r3
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130d6:	1ad2      	subs	r2, r2, r3
 80130d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80130dc:	4619      	mov	r1, r3
 80130de:	f00f f857 	bl	8022190 <nk_utf_decode>
 80130e2:	66f8      	str	r0, [r7, #108]	; 0x6c
        continue;
 80130e4:	bf00      	nop
    while ((text_len < byte_len) && glyph_len)
 80130e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	da03      	bge.n	80130f6 <nk_edit_draw_text+0x26e>
 80130ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f47f af37 	bne.w	8012f64 <nk_edit_draw_text+0xdc>
    }
    if (line_width > 0) {
 80130f6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80130fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013102:	dd56      	ble.n	80131b2 <nk_edit_draw_text+0x32a>
        /* draw last line */
        struct nk_rect label;
        label.y = pos_y + line_offset;
 8013104:	ed97 7a04 	vldr	s14, [r7, #16]
 8013108:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013110:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.h = row_height;
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	62fb      	str	r3, [r7, #44]	; 0x2c
        label.w = line_width;
 8013118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801311a:	62bb      	str	r3, [r7, #40]	; 0x28
        label.x = pos_x;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	623b      	str	r3, [r7, #32]
        if (!line_count)
 8013120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013122:	2b00      	cmp	r3, #0
 8013124:	d107      	bne.n	8013136 <nk_edit_draw_text+0x2ae>
            label.x += x_offset;
 8013126:	ed97 7a08 	vldr	s14, [r7, #32]
 801312a:	edd7 7a03 	vldr	s15, [r7, #12]
 801312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013132:	edc7 7a08 	vstr	s15, [r7, #32]

        if (is_selected)
 8013136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801313a:	2b00      	cmp	r3, #0
 801313c:	d015      	beq.n	801316a <nk_edit_draw_text+0x2e2>
            nk_fill_rect(out, label, 0, background);
 801313e:	ed97 6a08 	vldr	s12, [r7, #32]
 8013142:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8013146:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801314a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801314e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013150:	ed1f 2a31 	vldr	s4, [pc, #-196]	; 8013090 <nk_edit_draw_text+0x208>
 8013154:	eeb0 0a46 	vmov.f32	s0, s12
 8013158:	eef0 0a66 	vmov.f32	s1, s13
 801315c:	eeb0 1a47 	vmov.f32	s2, s14
 8013160:	eef0 1a67 	vmov.f32	s3, s15
 8013164:	69f8      	ldr	r0, [r7, #28]
 8013166:	f7fe fc9b 	bl	8011aa0 <nk_fill_rect>
        nk_widget_text(out, label, line, (int)((text + text_len) - line),
 801316a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801316c:	68ba      	ldr	r2, [r7, #8]
 801316e:	441a      	add	r2, r3
 8013170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013172:	1ad2      	subs	r2, r2, r3
 8013174:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013178:	ed97 6a08 	vldr	s12, [r7, #32]
 801317c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8013180:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8013184:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801318a:	9301      	str	r3, [sp, #4]
 801318c:	2311      	movs	r3, #17
 801318e:	9300      	str	r3, [sp, #0]
 8013190:	460b      	mov	r3, r1
 8013192:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013194:	eeb0 0a46 	vmov.f32	s0, s12
 8013198:	eef0 0a66 	vmov.f32	s1, s13
 801319c:	eeb0 1a47 	vmov.f32	s2, s14
 80131a0:	eef0 1a67 	vmov.f32	s3, s15
 80131a4:	69f8      	ldr	r0, [r7, #28]
 80131a6:	f00c f9e1 	bl	801f56c <nk_widget_text>
 80131aa:	e002      	b.n	80131b2 <nk_edit_draw_text+0x32a>
    if (!text || !byte_len || !out || !style) return;
 80131ac:	bf00      	nop
 80131ae:	e000      	b.n	80131b2 <nk_edit_draw_text+0x32a>
    if (!glyph_len) return;
 80131b0:	bf00      	nop
            &txt, NK_TEXT_LEFT, font);
    }}
}
 80131b2:	3770      	adds	r7, #112	; 0x70
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <nk_do_edit>:
NK_LIB nk_flags
nk_do_edit(nk_flags *state, struct nk_command_buffer *out,
    struct nk_rect bounds, nk_flags flags, nk_plugin_filter filter,
    struct nk_text_edit *edit, const struct nk_style_edit *style,
    struct nk_input *in, const struct nk_user_font *font)
{
 80131b8:	b590      	push	{r4, r7, lr}
 80131ba:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80131be:	af04      	add	r7, sp, #16
 80131c0:	f507 7400 	add.w	r4, r7, #512	; 0x200
 80131c4:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 80131c8:	6020      	str	r0, [r4, #0]
 80131ca:	f507 7000 	add.w	r0, r7, #512	; 0x200
 80131ce:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 80131d2:	6001      	str	r1, [r0, #0]
 80131d4:	eeb0 6a40 	vmov.f32	s12, s0
 80131d8:	eef0 6a60 	vmov.f32	s13, s1
 80131dc:	eeb0 7a41 	vmov.f32	s14, s2
 80131e0:	eef0 7a61 	vmov.f32	s15, s3
 80131e4:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80131e8:	f5a1 71fc 	sub.w	r1, r1, #504	; 0x1f8
 80131ec:	f507 7000 	add.w	r0, r7, #512	; 0x200
 80131f0:	f5a0 70fe 	sub.w	r0, r0, #508	; 0x1fc
 80131f4:	6002      	str	r2, [r0, #0]
 80131f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80131fa:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80131fe:	6013      	str	r3, [r2, #0]
 8013200:	ed81 6a00 	vstr	s12, [r1]
 8013204:	edc1 6a01 	vstr	s13, [r1, #4]
 8013208:	ed81 7a02 	vstr	s14, [r1, #8]
 801320c:	edc1 7a03 	vstr	s15, [r1, #12]
    struct nk_rect area;
    nk_flags ret = 0;
 8013210:	2300      	movs	r3, #0
 8013212:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    float row_height;
    char prev_state = 0;
 8013216:	2300      	movs	r3, #0
 8013218:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    char is_hovered = 0;
 801321c:	2300      	movs	r3, #0
 801321e:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
    char select_all = 0;
 8013222:	2300      	movs	r3, #0
 8013224:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
    char cursor_follow = 0;
 8013228:	2300      	movs	r3, #0
 801322a:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
    struct nk_rect old_clip;
    struct nk_rect clip;

    NK_ASSERT(state);
 801322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013232:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d105      	bne.n	8013248 <nk_do_edit+0x90>
 801323c:	4bb7      	ldr	r3, [pc, #732]	; (801351c <nk_do_edit+0x364>)
 801323e:	4ab8      	ldr	r2, [pc, #736]	; (8013520 <nk_do_edit+0x368>)
 8013240:	21a7      	movs	r1, #167	; 0xa7
 8013242:	48b8      	ldr	r0, [pc, #736]	; (8013524 <nk_do_edit+0x36c>)
 8013244:	f011 fc48 	bl	8024ad8 <__assert_func>
    NK_ASSERT(out);
 8013248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801324c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d105      	bne.n	8013262 <nk_do_edit+0xaa>
 8013256:	4bb4      	ldr	r3, [pc, #720]	; (8013528 <nk_do_edit+0x370>)
 8013258:	4ab1      	ldr	r2, [pc, #708]	; (8013520 <nk_do_edit+0x368>)
 801325a:	21a8      	movs	r1, #168	; 0xa8
 801325c:	48b1      	ldr	r0, [pc, #708]	; (8013524 <nk_do_edit+0x36c>)
 801325e:	f011 fc3b 	bl	8024ad8 <__assert_func>
    NK_ASSERT(style);
 8013262:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013266:	2b00      	cmp	r3, #0
 8013268:	d105      	bne.n	8013276 <nk_do_edit+0xbe>
 801326a:	4bb0      	ldr	r3, [pc, #704]	; (801352c <nk_do_edit+0x374>)
 801326c:	4aac      	ldr	r2, [pc, #688]	; (8013520 <nk_do_edit+0x368>)
 801326e:	21a9      	movs	r1, #169	; 0xa9
 8013270:	48ac      	ldr	r0, [pc, #688]	; (8013524 <nk_do_edit+0x36c>)
 8013272:	f011 fc31 	bl	8024ad8 <__assert_func>
    if (!state || !out || !style)
 8013276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801327a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00a      	beq.n	801329a <nk_do_edit+0xe2>
 8013284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013288:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d003      	beq.n	801329a <nk_do_edit+0xe2>
 8013292:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013296:	2b00      	cmp	r3, #0
 8013298:	d103      	bne.n	80132a2 <nk_do_edit+0xea>
        return ret;
 801329a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801329e:	f001 be10 	b.w	8014ec2 <nk_do_edit+0x1d0a>

    /* visible text area calculation */
    area.x = bounds.x + style->padding.x + style->border;
 80132a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80132a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80132aa:	ed93 7a00 	vldr	s14, [r3]
 80132ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132b2:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 80132b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132be:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80132c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132c6:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
    area.y = bounds.y + style->padding.y + style->border;
 80132ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80132ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80132d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80132d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132da:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 80132de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132e6:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80132ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132ee:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
    area.w = bounds.w - (2.0f * style->padding.x + 2 * style->border);
 80132f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80132f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80132fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80132fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013302:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8013306:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801330a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801330e:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8013312:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801331a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801331e:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    area.h = bounds.h - (2.0f * style->padding.y + 2 * style->border);
 8013322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013326:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801332a:	ed93 7a03 	vldr	s14, [r3, #12]
 801332e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013332:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 8013336:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801333a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801333e:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8013342:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801334a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801334e:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
    if (flags & NK_EDIT_MULTILINE)
 8013352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013360:	2b00      	cmp	r3, #0
 8013362:	d019      	beq.n	8013398 <nk_do_edit+0x1e0>
        area.w = NK_MAX(0, area.w - style->scrollbar_size.x);
 8013364:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013368:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801336c:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8013370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337c:	dd08      	ble.n	8013390 <nk_do_edit+0x1d8>
 801337e:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013382:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013386:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 801338a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801338e:	e001      	b.n	8013394 <nk_do_edit+0x1dc>
 8013390:	eddf 7a67 	vldr	s15, [pc, #412]	; 8013530 <nk_do_edit+0x378>
 8013394:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    row_height = (flags & NK_EDIT_MULTILINE)? font->height + style->row_padding: area.h;
 8013398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801339c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d00a      	beq.n	80133c0 <nk_do_edit+0x208>
 80133aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80133ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80133b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80133b6:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 80133ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133be:	e001      	b.n	80133c4 <nk_do_edit+0x20c>
 80133c0:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80133c4:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8

    /* calculate clipping rectangle */
    old_clip = out->clip;
 80133c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80133d6:	3304      	adds	r3, #4
 80133d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &old_clip, area.x, area.y, area.x + area.w, area.y + area.h);
 80133de:	edd7 6a4a 	vldr	s13, [r7, #296]	; 0x128
 80133e2:	ed97 6a4b 	vldr	s12, [r7, #300]	; 0x12c
 80133e6:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80133ea:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 80133ee:	ee77 5a27 	vadd.f32	s11, s14, s15
 80133f2:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 80133f6:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80133fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133fe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8013402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013406:	eef0 1a67 	vmov.f32	s3, s15
 801340a:	eeb0 1a65 	vmov.f32	s2, s11
 801340e:	eef0 0a46 	vmov.f32	s1, s12
 8013412:	eeb0 0a66 	vmov.f32	s0, s13
 8013416:	4611      	mov	r1, r2
 8013418:	4618      	mov	r0, r3
 801341a:	f003 fadb 	bl	80169d4 <nk_unify>

    /* update edit state */
    prev_state = (char)edit->active;
 801341e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013422:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013426:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    is_hovered = (char)nk_input_is_mouse_hovering_rect(in, bounds);
 801342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801342e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013432:	ed93 6a00 	vldr	s12, [r3]
 8013436:	edd3 6a01 	vldr	s13, [r3, #4]
 801343a:	ed93 7a02 	vldr	s14, [r3, #8]
 801343e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013442:	eeb0 0a46 	vmov.f32	s0, s12
 8013446:	eef0 0a66 	vmov.f32	s1, s13
 801344a:	eeb0 1a47 	vmov.f32	s2, s14
 801344e:	eef0 1a67 	vmov.f32	s3, s15
 8013452:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013456:	f002 f807 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 801345a:	4603      	mov	r3, r0
 801345c:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
    if (in && in->mouse.buttons[NK_BUTTON_LEFT].clicked && in->mouse.buttons[NK_BUTTON_LEFT].down) {
 8013460:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013464:	2b00      	cmp	r3, #0
 8013466:	d06b      	beq.n	8013540 <nk_do_edit+0x388>
 8013468:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801346c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013470:	2b00      	cmp	r3, #0
 8013472:	d065      	beq.n	8013540 <nk_do_edit+0x388>
 8013474:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013478:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801347c:	2b00      	cmp	r3, #0
 801347e:	d05f      	beq.n	8013540 <nk_do_edit+0x388>
        edit->active = NK_INBOX(in->mouse.pos.x, in->mouse.pos.y,
 8013480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013484:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013488:	ed93 7a00 	vldr	s14, [r3]
 801348c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013490:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8013494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349c:	d84a      	bhi.n	8013534 <nk_do_edit+0x37c>
 801349e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80134a2:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80134a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134ae:	edd3 6a00 	vldr	s13, [r3]
 80134b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80134be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80134c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ca:	d533      	bpl.n	8013534 <nk_do_edit+0x37c>
 80134cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80134d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80134dc:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80134e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e8:	d824      	bhi.n	8013534 <nk_do_edit+0x37c>
 80134ea:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80134ee:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80134f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80134fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013502:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013506:	edd3 7a03 	vldr	s15, [r3, #12]
 801350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801350e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013516:	d50d      	bpl.n	8013534 <nk_do_edit+0x37c>
 8013518:	2301      	movs	r3, #1
 801351a:	e00c      	b.n	8013536 <nk_do_edit+0x37e>
 801351c:	08028898 	.word	0x08028898
 8013520:	0802a780 	.word	0x0802a780
 8013524:	0802886c 	.word	0x0802886c
 8013528:	08028868 	.word	0x08028868
 801352c:	08028890 	.word	0x08028890
 8013530:	00000000 	.word	0x00000000
 8013534:	2300      	movs	r3, #0
 8013536:	b2da      	uxtb	r2, r3
 8013538:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801353c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                bounds.x, bounds.y, bounds.w, bounds.h);
    }

    /* (de)activate text editor */
    if (!prev_state && edit->active) {
 8013540:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8013544:	2b00      	cmp	r3, #0
 8013546:	d150      	bne.n	80135ea <nk_do_edit+0x432>
 8013548:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801354c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013550:	2b00      	cmp	r3, #0
 8013552:	d04a      	beq.n	80135ea <nk_do_edit+0x432>
        const enum nk_text_edit_type type = (flags & NK_EDIT_MULTILINE) ?
            NK_TEXT_EDIT_MULTI_LINE: NK_TEXT_EDIT_SINGLE_LINE;
 8013554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	0a9b      	lsrs	r3, r3, #10
 8013560:	b2db      	uxtb	r3, r3
        const enum nk_text_edit_type type = (flags & NK_EDIT_MULTILINE) ?
 8013562:	f003 0301 	and.w	r3, r3, #1
 8013566:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
        /* keep scroll position when re-activating edit widget */
        struct nk_vec2 oldscrollbar = edit->scrollbar;
 801356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801356e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8013572:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013576:	3350      	adds	r3, #80	; 0x50
 8013578:	e893 0003 	ldmia.w	r3, {r0, r1}
 801357c:	e882 0003 	stmia.w	r2, {r0, r1}
        nk_textedit_clear_state(edit, type, filter);
 8013580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013584:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8013588:	f897 11b7 	ldrb.w	r1, [r7, #439]	; 0x1b7
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013592:	f00e f885 	bl	80216a0 <nk_textedit_clear_state>
        edit->scrollbar = oldscrollbar;
 8013596:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801359a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801359e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80135a2:	3350      	adds	r3, #80	; 0x50
 80135a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135a8:	e883 0003 	stmia.w	r3, {r0, r1}
        if (flags & NK_EDIT_AUTO_SELECT)
 80135ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80135b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f003 0302 	and.w	r3, r3, #2
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d002      	beq.n	80135c4 <nk_do_edit+0x40c>
            select_all = nk_true;
 80135be:	2301      	movs	r3, #1
 80135c0:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
        if (flags & NK_EDIT_GOTO_END_ON_ACTIVATE) {
 80135c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80135c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d015      	beq.n	8013602 <nk_do_edit+0x44a>
            edit->cursor = edit->string.len;
 80135d6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80135dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135e0:	659a      	str	r2, [r3, #88]	; 0x58
            in = 0;
 80135e2:	2300      	movs	r3, #0
 80135e4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    if (!prev_state && edit->active) {
 80135e8:	e00b      	b.n	8013602 <nk_do_edit+0x44a>
        }
    } else if (!edit->active) edit->mode = NK_TEXT_EDIT_MODE_VIEW;
 80135ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135ee:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d106      	bne.n	8013604 <nk_do_edit+0x44c>
 80135f6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135fa:	2200      	movs	r2, #0
 80135fc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013600:	e000      	b.n	8013604 <nk_do_edit+0x44c>
    if (!prev_state && edit->active) {
 8013602:	bf00      	nop
    if (flags & NK_EDIT_READ_ONLY)
 8013604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013608:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f003 0301 	and.w	r3, r3, #1
 8013612:	2b00      	cmp	r3, #0
 8013614:	d005      	beq.n	8013622 <nk_do_edit+0x46a>
        edit->mode = NK_TEXT_EDIT_MODE_VIEW;
 8013616:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801361a:	2200      	movs	r2, #0
 801361c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013620:	e00d      	b.n	801363e <nk_do_edit+0x486>
    else if (flags & NK_EDIT_ALWAYS_INSERT_MODE)
 8013622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013630:	2b00      	cmp	r3, #0
 8013632:	d004      	beq.n	801363e <nk_do_edit+0x486>
        edit->mode = NK_TEXT_EDIT_MODE_INSERT;
 8013634:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013638:	2201      	movs	r2, #1
 801363a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;
 801363e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013642:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <nk_do_edit+0x496>
 801364a:	2301      	movs	r3, #1
 801364c:	e000      	b.n	8013650 <nk_do_edit+0x498>
 801364e:	2302      	movs	r3, #2
 8013650:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    if (prev_state != edit->active)
 8013654:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013658:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801365c:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 8013660:	429a      	cmp	r2, r3
 8013662:	d00d      	beq.n	8013680 <nk_do_edit+0x4c8>
        ret |= (edit->active) ? NK_EDIT_ACTIVATED: NK_EDIT_DEACTIVATED;
 8013664:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013668:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801366c:	2b00      	cmp	r3, #0
 801366e:	d001      	beq.n	8013674 <nk_do_edit+0x4bc>
 8013670:	2304      	movs	r3, #4
 8013672:	e000      	b.n	8013676 <nk_do_edit+0x4be>
 8013674:	2308      	movs	r3, #8
 8013676:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801367a:	4313      	orrs	r3, r2
 801367c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    /* handle user input */
    if (edit->active && in)
 8013680:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013684:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013688:	2b00      	cmp	r3, #0
 801368a:	f000 820a 	beq.w	8013aa2 <nk_do_edit+0x8ea>
 801368e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 8205 	beq.w	8013aa2 <nk_do_edit+0x8ea>
    {
        int shift_mod = in->keyboard.keys[NK_KEY_SHIFT].down;
 8013698:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801369c:	689b      	ldr	r3, [r3, #8]
 801369e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        const float mouse_x = (in->mouse.pos.x - area.x) + edit->scrollbar.x;
 80136a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80136a6:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80136aa:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 80136ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80136b6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80136ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136be:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
        const float mouse_y = (in->mouse.pos.y - area.y) + edit->scrollbar.y;
 80136c2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80136c6:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80136ca:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 80136ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136d2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80136d6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80136da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136de:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8

        /* mouse click handler */
        is_hovered = (char)nk_input_is_mouse_hovering_rect(in, area);
 80136e2:	ed97 6a4a 	vldr	s12, [r7, #296]	; 0x128
 80136e6:	edd7 6a4b 	vldr	s13, [r7, #300]	; 0x12c
 80136ea:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 80136ee:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80136f2:	eeb0 0a46 	vmov.f32	s0, s12
 80136f6:	eef0 0a66 	vmov.f32	s1, s13
 80136fa:	eeb0 1a47 	vmov.f32	s2, s14
 80136fe:	eef0 1a67 	vmov.f32	s3, s15
 8013702:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013706:	f001 feaf 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 801370a:	4603      	mov	r3, r0
 801370c:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        if (select_all) {
 8013710:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 8013714:	2b00      	cmp	r3, #0
 8013716:	d004      	beq.n	8013722 <nk_do_edit+0x56a>
            nk_textedit_select_all(edit);
 8013718:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801371c:	f00e f820 	bl	8021760 <nk_textedit_select_all>
 8013720:	e06f      	b.n	8013802 <nk_do_edit+0x64a>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 8013722:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8013726:	2b00      	cmp	r3, #0
 8013728:	d018      	beq.n	801375c <nk_do_edit+0x5a4>
 801372a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801372e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013732:	2b00      	cmp	r3, #0
 8013734:	d012      	beq.n	801375c <nk_do_edit+0x5a4>
            in->mouse.buttons[NK_BUTTON_LEFT].clicked) {
 8013736:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801373a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 801373e:	2b00      	cmp	r3, #0
 8013740:	d00c      	beq.n	801375c <nk_do_edit+0x5a4>
            nk_textedit_click(edit, mouse_x, mouse_y, font, row_height);
 8013742:	ed97 1a6e 	vldr	s2, [r7, #440]	; 0x1b8
 8013746:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 801374a:	edd7 0a6a 	vldr	s1, [r7, #424]	; 0x1a8
 801374e:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 8013752:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013756:	f00c fb5a 	bl	801fe0e <nk_textedit_click>
 801375a:	e052      	b.n	8013802 <nk_do_edit+0x64a>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 801375c:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8013760:	2b00      	cmp	r3, #0
 8013762:	d027      	beq.n	80137b4 <nk_do_edit+0x5fc>
 8013764:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013768:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801376c:	2b00      	cmp	r3, #0
 801376e:	d021      	beq.n	80137b4 <nk_do_edit+0x5fc>
            (in->mouse.delta.x != 0.0f || in->mouse.delta.y != 0.0f)) {
 8013770:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013774:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 8013778:	eef5 7a40 	vcmp.f32	s15, #0.0
 801377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013780:	d108      	bne.n	8013794 <nk_do_edit+0x5dc>
            (in->mouse.delta.x != 0.0f || in->mouse.delta.y != 0.0f)) {
 8013782:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013786:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801378a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013792:	d00f      	beq.n	80137b4 <nk_do_edit+0x5fc>
            nk_textedit_drag(edit, mouse_x, mouse_y, font, row_height);
 8013794:	ed97 1a6e 	vldr	s2, [r7, #440]	; 0x1b8
 8013798:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 801379c:	edd7 0a6a 	vldr	s1, [r7, #424]	; 0x1a8
 80137a0:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 80137a4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80137a8:	f00c fb59 	bl	801fe5e <nk_textedit_drag>
            cursor_follow = nk_true;
 80137ac:	2301      	movs	r3, #1
 80137ae:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
 80137b2:	e026      	b.n	8013802 <nk_do_edit+0x64a>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_RIGHT].clicked &&
 80137b4:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d022      	beq.n	8013802 <nk_do_edit+0x64a>
 80137bc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80137c0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d01c      	beq.n	8013802 <nk_do_edit+0x64a>
            in->mouse.buttons[NK_BUTTON_RIGHT].down) {
 80137c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80137cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_RIGHT].clicked &&
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d016      	beq.n	8013802 <nk_do_edit+0x64a>
            nk_textedit_key(edit, NK_KEY_TEXT_WORD_LEFT, nk_false, font, row_height);
 80137d4:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 80137d8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80137dc:	2200      	movs	r2, #0
 80137de:	2118      	movs	r1, #24
 80137e0:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80137e4:	f00c fea0 	bl	8020528 <nk_textedit_key>
            nk_textedit_key(edit, NK_KEY_TEXT_WORD_RIGHT, nk_true, font, row_height);
 80137e8:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 80137ec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80137f0:	2201      	movs	r2, #1
 80137f2:	2119      	movs	r1, #25
 80137f4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80137f8:	f00c fe96 	bl	8020528 <nk_textedit_key>
            cursor_follow = nk_true;
 80137fc:	2301      	movs	r3, #1
 80137fe:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
        }

        {int i; /* keyboard input */
        int old_mode = edit->mode;
 8013802:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013806:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801380a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        for (i = 0; i < NK_KEY_MAX; ++i) {
 801380e:	2300      	movs	r3, #0
 8013810:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8013814:	e029      	b.n	801386a <nk_do_edit+0x6b2>
            if (i == NK_KEY_ENTER || i == NK_KEY_TAB) continue; /* special case */
 8013816:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801381a:	2b04      	cmp	r3, #4
 801381c:	d01f      	beq.n	801385e <nk_do_edit+0x6a6>
 801381e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013822:	2b05      	cmp	r3, #5
 8013824:	d01b      	beq.n	801385e <nk_do_edit+0x6a6>
            if (nk_input_is_key_pressed(in, (enum nk_keys)i)) {
 8013826:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801382a:	b2db      	uxtb	r3, r3
 801382c:	4619      	mov	r1, r3
 801382e:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013832:	f001 fef8 	bl	8015626 <nk_input_is_key_pressed>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d011      	beq.n	8013860 <nk_do_edit+0x6a8>
                nk_textedit_key(edit, (enum nk_keys)i, shift_mod, font, row_height);
 801383c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013840:	b2d9      	uxtb	r1, r3
 8013842:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 8013846:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801384a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 801384e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013852:	f00c fe69 	bl	8020528 <nk_textedit_key>
                cursor_follow = nk_true;
 8013856:	2301      	movs	r3, #1
 8013858:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
 801385c:	e000      	b.n	8013860 <nk_do_edit+0x6a8>
            if (i == NK_KEY_ENTER || i == NK_KEY_TAB) continue; /* special case */
 801385e:	bf00      	nop
        for (i = 0; i < NK_KEY_MAX; ++i) {
 8013860:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013864:	3301      	adds	r3, #1
 8013866:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801386a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801386e:	2b1d      	cmp	r3, #29
 8013870:	ddd1      	ble.n	8013816 <nk_do_edit+0x65e>
            }
        }
        if (old_mode != edit->mode) {
 8013872:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013876:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801387a:	461a      	mov	r2, r3
 801387c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013880:	4293      	cmp	r3, r2
 8013882:	d004      	beq.n	801388e <nk_do_edit+0x6d6>
            in->keyboard.text_len = 0;
 8013884:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013888:	2200      	movs	r2, #0
 801388a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        }}

        /* text input */
        edit->filter = filter;
 801388e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8013896:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 801389a:	6812      	ldr	r2, [r2, #0]
 801389c:	64da      	str	r2, [r3, #76]	; 0x4c
        if (in->keyboard.text_len) {
 801389e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d014      	beq.n	80138d4 <nk_do_edit+0x71c>
            nk_textedit_text(edit, in->keyboard.text, in->keyboard.text_len);
 80138aa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138b2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80138ba:	461a      	mov	r2, r3
 80138bc:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80138c0:	f00c fd5a 	bl	8020378 <nk_textedit_text>
            cursor_follow = nk_true;
 80138c4:	2301      	movs	r3, #1
 80138c6:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
            in->keyboard.text_len = 0;
 80138ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138ce:	2200      	movs	r2, #0
 80138d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        }

        /* enter key handler */
        if (nk_input_is_key_pressed(in, NK_KEY_ENTER)) {
 80138d4:	2104      	movs	r1, #4
 80138d6:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80138da:	f001 fea4 	bl	8015626 <nk_input_is_key_pressed>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d02c      	beq.n	801393e <nk_do_edit+0x786>
            cursor_follow = nk_true;
 80138e4:	2301      	movs	r3, #1
 80138e6:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
            if (flags & NK_EDIT_CTRL_ENTER_NEWLINE && shift_mod)
 80138ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80138ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00a      	beq.n	8013912 <nk_do_edit+0x75a>
 80138fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d006      	beq.n	8013912 <nk_do_edit+0x75a>
                nk_textedit_text(edit, "\n", 1);
 8013904:	2201      	movs	r2, #1
 8013906:	49c5      	ldr	r1, [pc, #788]	; (8013c1c <nk_do_edit+0xa64>)
 8013908:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801390c:	f00c fd34 	bl	8020378 <nk_textedit_text>
 8013910:	e015      	b.n	801393e <nk_do_edit+0x786>
            else if (flags & NK_EDIT_SIG_ENTER)
 8013912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	f003 0304 	and.w	r3, r3, #4
 8013920:	2b00      	cmp	r3, #0
 8013922:	d006      	beq.n	8013932 <nk_do_edit+0x77a>
                ret |= NK_EDIT_COMMITED;
 8013924:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013928:	f043 0310 	orr.w	r3, r3, #16
 801392c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8013930:	e005      	b.n	801393e <nk_do_edit+0x786>
            else nk_textedit_text(edit, "\n", 1);
 8013932:	2201      	movs	r2, #1
 8013934:	49b9      	ldr	r1, [pc, #740]	; (8013c1c <nk_do_edit+0xa64>)
 8013936:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801393a:	f00c fd1d 	bl	8020378 <nk_textedit_text>
        }

        /* cut & copy handler */
        {int copy= nk_input_is_key_pressed(in, NK_KEY_COPY);
 801393e:	2107      	movs	r1, #7
 8013940:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013944:	f001 fe6f 	bl	8015626 <nk_input_is_key_pressed>
 8013948:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
        int cut = nk_input_is_key_pressed(in, NK_KEY_CUT);
 801394c:	2108      	movs	r1, #8
 801394e:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013952:	f001 fe68 	bl	8015626 <nk_input_is_key_pressed>
 8013956:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
        if ((copy || cut) && (flags & NK_EDIT_CLIPBOARD))
 801395a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d103      	bne.n	801396a <nk_do_edit+0x7b2>
 8013962:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013966:	2b00      	cmp	r3, #0
 8013968:	d059      	beq.n	8013a1e <nk_do_edit+0x866>
 801396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801396e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013978:	2b00      	cmp	r3, #0
 801397a:	d050      	beq.n	8013a1e <nk_do_edit+0x866>
        {
            int glyph_len;
            nk_rune unicode;
            const char *text;
            int b = edit->select_start;
 801397c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013982:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
            int e = edit->select_end;
 8013986:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801398a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801398c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

            int begin = NK_MIN(b, e);
 8013990:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013994:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013998:	4293      	cmp	r3, r2
 801399a:	bfa8      	it	ge
 801399c:	4613      	movge	r3, r2
 801399e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            int end = NK_MAX(b, e);
 80139a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80139a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80139aa:	4293      	cmp	r3, r2
 80139ac:	bfb8      	it	lt
 80139ae:	4613      	movlt	r3, r2
 80139b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            text = nk_str_at_const(&edit->string, begin, &unicode, &glyph_len);
 80139b4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80139b8:	f103 000c 	add.w	r0, r3, #12
 80139bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80139c0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80139c4:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80139c8:	f009 fa98 	bl	801cefc <nk_str_at_const>
 80139cc:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
            if (edit->clip.copy)
 80139d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80139d4:	689b      	ldr	r3, [r3, #8]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d00d      	beq.n	80139f6 <nk_do_edit+0x83e>
                edit->clip.copy(edit->clip.userdata, text, end - begin);
 80139da:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80139e4:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80139e8:	1a8a      	subs	r2, r1, r2
 80139ea:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80139ee:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 80139f2:	6800      	ldr	r0, [r0, #0]
 80139f4:	4798      	blx	r3
            if (cut && !(flags & NK_EDIT_READ_ONLY)){
 80139f6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d00f      	beq.n	8013a1e <nk_do_edit+0x866>
 80139fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f003 0301 	and.w	r3, r3, #1
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d106      	bne.n	8013a1e <nk_do_edit+0x866>
                nk_textedit_cut(edit);
 8013a10:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013a14:	f00c fc91 	bl	802033a <nk_textedit_cut>
                cursor_follow = nk_true;
 8013a18:	2301      	movs	r3, #1
 8013a1a:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
            }
        }}

        /* paste handler */
        {int paste = nk_input_is_key_pressed(in, NK_KEY_PASTE);
 8013a1e:	2109      	movs	r1, #9
 8013a20:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013a24:	f001 fdff 	bl	8015626 <nk_input_is_key_pressed>
 8013a28:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
        if (paste && (flags & NK_EDIT_CLIPBOARD) && edit->clip.paste) {
 8013a2c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d019      	beq.n	8013a68 <nk_do_edit+0x8b0>
 8013a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d010      	beq.n	8013a68 <nk_do_edit+0x8b0>
 8013a46:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d00b      	beq.n	8013a68 <nk_do_edit+0x8b0>
            edit->clip.paste(edit->clip.userdata, edit);
 8013a50:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8013a5a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8013a5e:	6810      	ldr	r0, [r2, #0]
 8013a60:	4798      	blx	r3
            cursor_follow = nk_true;
 8013a62:	2301      	movs	r3, #1
 8013a64:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
        }}

        /* tab handler */
        {int tab = nk_input_is_key_pressed(in, NK_KEY_TAB);
 8013a68:	2105      	movs	r1, #5
 8013a6a:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013a6e:	f001 fdda 	bl	8015626 <nk_input_is_key_pressed>
 8013a72:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
        if (tab && (flags & NK_EDIT_ALLOW_TAB)) {
 8013a76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d011      	beq.n	8013aa2 <nk_do_edit+0x8ea>
 8013a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f003 0308 	and.w	r3, r3, #8
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d008      	beq.n	8013aa2 <nk_do_edit+0x8ea>
            nk_textedit_text(edit, "    ", 4);
 8013a90:	2204      	movs	r2, #4
 8013a92:	4963      	ldr	r1, [pc, #396]	; (8013c20 <nk_do_edit+0xa68>)
 8013a94:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013a98:	f00c fc6e 	bl	8020378 <nk_textedit_text>
            cursor_follow = nk_true;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
        }}
    }

    /* set widget state */
    if (edit->active)
 8013aa2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013aa6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d007      	beq.n	8013abe <nk_do_edit+0x906>
        *state = NK_WIDGET_STATE_ACTIVE;
 8013aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ab2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2222      	movs	r2, #34	; 0x22
 8013aba:	601a      	str	r2, [r3, #0]
 8013abc:	e018      	b.n	8013af0 <nk_do_edit+0x938>
    else nk_widget_state_reset(state);
 8013abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ac2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f003 0302 	and.w	r3, r3, #2
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d007      	beq.n	8013ae2 <nk_do_edit+0x92a>
 8013ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ad6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	2206      	movs	r2, #6
 8013ade:	601a      	str	r2, [r3, #0]
 8013ae0:	e006      	b.n	8013af0 <nk_do_edit+0x938>
 8013ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ae6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2204      	movs	r2, #4
 8013aee:	601a      	str	r2, [r3, #0]

    if (is_hovered)
 8013af0:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d00d      	beq.n	8013b14 <nk_do_edit+0x95c>
        *state |= NK_WIDGET_STATE_HOVERED;
 8013af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013afc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	f043 0212 	orr.w	r2, r3, #18
 8013b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013b0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	601a      	str	r2, [r3, #0]

    /* DRAW EDIT */
    {const char *text = nk_str_get_const(&edit->string);
 8013b14:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013b18:	330c      	adds	r3, #12
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f009 fa84 	bl	801d028 <nk_str_get_const>
 8013b20:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    int len = nk_str_len_char(&edit->string);
 8013b24:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013b28:	330c      	adds	r3, #12
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f009 facc 	bl	801d0c8 <nk_str_len_char>
 8013b30:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    {/* select background colors/images  */
    const struct nk_style_item *background;
    if (*state & NK_WIDGET_STATE_ACTIVED)
 8013b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013b38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	f003 0320 	and.w	r3, r3, #32
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d005      	beq.n	8013b54 <nk_do_edit+0x99c>
        background = &style->active;
 8013b48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013b4c:	3338      	adds	r3, #56	; 0x38
 8013b4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8013b52:	e013      	b.n	8013b7c <nk_do_edit+0x9c4>
    else if (*state & NK_WIDGET_STATE_HOVER)
 8013b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013b58:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f003 0310 	and.w	r3, r3, #16
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d005      	beq.n	8013b74 <nk_do_edit+0x9bc>
        background = &style->hover;
 8013b68:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013b6c:	331c      	adds	r3, #28
 8013b6e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8013b72:	e003      	b.n	8013b7c <nk_do_edit+0x9c4>
    else background = &style->normal;
 8013b74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013b78:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

    /* draw background frame */
    switch(background->type) {
 8013b7c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	2b02      	cmp	r3, #2
 8013b84:	d028      	beq.n	8013bd8 <nk_do_edit+0xa20>
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	f300 809f 	bgt.w	8013cca <nk_do_edit+0xb12>
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d04d      	beq.n	8013c2c <nk_do_edit+0xa74>
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	f040 809a 	bne.w	8013cca <nk_do_edit+0xb12>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, bounds, &background->data.image, nk_white);
 8013b96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013b9a:	1d19      	adds	r1, r3, #4
 8013b9c:	4a21      	ldr	r2, [pc, #132]	; (8013c24 <nk_do_edit+0xa6c>)
 8013b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ba2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013ba6:	ed93 6a00 	vldr	s12, [r3]
 8013baa:	edd3 6a01 	vldr	s13, [r3, #4]
 8013bae:	ed93 7a02 	vldr	s14, [r3, #8]
 8013bb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8013bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013bba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013bbe:	6812      	ldr	r2, [r2, #0]
 8013bc0:	eeb0 0a46 	vmov.f32	s0, s12
 8013bc4:	eef0 0a66 	vmov.f32	s1, s13
 8013bc8:	eeb0 1a47 	vmov.f32	s2, s14
 8013bcc:	eef0 1a67 	vmov.f32	s3, s15
 8013bd0:	6818      	ldr	r0, [r3, #0]
 8013bd2:	f7fe fabf 	bl	8012154 <nk_draw_image>
            break;
 8013bd6:	e078      	b.n	8013cca <nk_do_edit+0xb12>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, bounds, &background->data.slice, nk_white);
 8013bd8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013bdc:	1d19      	adds	r1, r3, #4
 8013bde:	4a11      	ldr	r2, [pc, #68]	; (8013c24 <nk_do_edit+0xa6c>)
 8013be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013be4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013be8:	ed93 6a00 	vldr	s12, [r3]
 8013bec:	edd3 6a01 	vldr	s13, [r3, #4]
 8013bf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8013bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8013bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013bfc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013c00:	6812      	ldr	r2, [r2, #0]
 8013c02:	eeb0 0a46 	vmov.f32	s0, s12
 8013c06:	eef0 0a66 	vmov.f32	s1, s13
 8013c0a:	eeb0 1a47 	vmov.f32	s2, s14
 8013c0e:	eef0 1a67 	vmov.f32	s3, s15
 8013c12:	6818      	ldr	r0, [r3, #0]
 8013c14:	f7fe fb90 	bl	8012338 <nk_draw_nine_slice>
            break;
 8013c18:	e057      	b.n	8013cca <nk_do_edit+0xb12>
 8013c1a:	bf00      	nop
 8013c1c:	080288a0 	.word	0x080288a0
 8013c20:	080288a4 	.word	0x080288a4
 8013c24:	0802a768 	.word	0x0802a768
 8013c28:	00000000 	.word	0x00000000
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, bounds, style->rounding, background->data.color);
 8013c2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013c30:	edd3 5aa5 	vldr	s11, [r3, #660]	; 0x294
 8013c34:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8013c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013c3c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013c40:	ed93 6a00 	vldr	s12, [r3]
 8013c44:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c48:	ed93 7a02 	vldr	s14, [r3, #8]
 8013c4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013c54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013c58:	6851      	ldr	r1, [r2, #4]
 8013c5a:	eeb0 2a65 	vmov.f32	s4, s11
 8013c5e:	eeb0 0a46 	vmov.f32	s0, s12
 8013c62:	eef0 0a66 	vmov.f32	s1, s13
 8013c66:	eeb0 1a47 	vmov.f32	s2, s14
 8013c6a:	eef0 1a67 	vmov.f32	s3, s15
 8013c6e:	6818      	ldr	r0, [r3, #0]
 8013c70:	f7fd ff16 	bl	8011aa0 <nk_fill_rect>
            nk_stroke_rect(out, bounds, style->rounding, style->border, style->border_color);
 8013c74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013c78:	edd3 5aa5 	vldr	s11, [r3, #660]	; 0x294
 8013c7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013c80:	ed93 5aa4 	vldr	s10, [r3, #656]	; 0x290
 8013c84:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8013c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013c8c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013c90:	ed93 6a00 	vldr	s12, [r3]
 8013c94:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c98:	ed93 7a02 	vldr	s14, [r3, #8]
 8013c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ca4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013ca8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8013caa:	eef0 2a45 	vmov.f32	s5, s10
 8013cae:	eeb0 2a65 	vmov.f32	s4, s11
 8013cb2:	eeb0 0a46 	vmov.f32	s0, s12
 8013cb6:	eef0 0a66 	vmov.f32	s1, s13
 8013cba:	eeb0 1a47 	vmov.f32	s2, s14
 8013cbe:	eef0 1a67 	vmov.f32	s3, s15
 8013cc2:	6818      	ldr	r0, [r3, #0]
 8013cc4:	f7fd fde4 	bl	8011890 <nk_stroke_rect>
            break;
 8013cc8:	bf00      	nop
    }}


    area.w = NK_MAX(0, area.w - style->cursor_size);
 8013cca:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013cce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013cd2:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8013cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce2:	dd08      	ble.n	8013cf6 <nk_do_edit+0xb3e>
 8013ce4:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013ce8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013cec:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8013cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cf4:	e001      	b.n	8013cfa <nk_do_edit+0xb42>
 8013cf6:	ed5f 7a34 	vldr	s15, [pc, #-208]	; 8013c28 <nk_do_edit+0xa70>
 8013cfa:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    if (edit->active)
 8013cfe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013d02:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	f001 800c 	beq.w	8014d24 <nk_do_edit+0x1b6c>
    {
        int total_lines = 1;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        struct nk_vec2 text_size = nk_vec2(0,0);
 8013d12:	ed5f 0a3b 	vldr	s1, [pc, #-236]	; 8013c28 <nk_do_edit+0xa70>
 8013d16:	ed1f 0a3c 	vldr	s0, [pc, #-240]	; 8013c28 <nk_do_edit+0xa70>
 8013d1a:	f002 fe39 	bl	8016990 <nk_vec2>
 8013d1e:	eeb0 7a40 	vmov.f32	s14, s0
 8013d22:	eef0 7a60 	vmov.f32	s15, s1
 8013d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013d2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013d2e:	ed83 7a00 	vstr	s14, [r3]
 8013d32:	edc3 7a01 	vstr	s15, [r3, #4]

        /* text pointer positions */
        const char *cursor_ptr = 0;
 8013d36:	2300      	movs	r3, #0
 8013d38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        const char *select_begin_ptr = 0;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        const char *select_end_ptr = 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

        /* 2D pixel positions */
        struct nk_vec2 cursor_pos = nk_vec2(0,0);
 8013d48:	ed5f 0a49 	vldr	s1, [pc, #-292]	; 8013c28 <nk_do_edit+0xa70>
 8013d4c:	ed1f 0a4a 	vldr	s0, [pc, #-296]	; 8013c28 <nk_do_edit+0xa70>
 8013d50:	f002 fe1e 	bl	8016990 <nk_vec2>
 8013d54:	eeb0 7a40 	vmov.f32	s14, s0
 8013d58:	eef0 7a60 	vmov.f32	s15, s1
 8013d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013d60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013d64:	ed83 7a00 	vstr	s14, [r3]
 8013d68:	edc3 7a01 	vstr	s15, [r3, #4]
        struct nk_vec2 selection_offset_start = nk_vec2(0,0);
 8013d6c:	ed5f 0a52 	vldr	s1, [pc, #-328]	; 8013c28 <nk_do_edit+0xa70>
 8013d70:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 8013c28 <nk_do_edit+0xa70>
 8013d74:	f002 fe0c 	bl	8016990 <nk_vec2>
 8013d78:	eeb0 7a40 	vmov.f32	s14, s0
 8013d7c:	eef0 7a60 	vmov.f32	s15, s1
 8013d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013d84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013d88:	ed83 7a00 	vstr	s14, [r3]
 8013d8c:	edc3 7a01 	vstr	s15, [r3, #4]
        struct nk_vec2 selection_offset_end = nk_vec2(0,0);
 8013d90:	ed5f 0a5b 	vldr	s1, [pc, #-364]	; 8013c28 <nk_do_edit+0xa70>
 8013d94:	ed1f 0a5c 	vldr	s0, [pc, #-368]	; 8013c28 <nk_do_edit+0xa70>
 8013d98:	f002 fdfa 	bl	8016990 <nk_vec2>
 8013d9c:	eeb0 7a40 	vmov.f32	s14, s0
 8013da0:	eef0 7a60 	vmov.f32	s15, s1
 8013da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013da8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013dac:	ed83 7a00 	vstr	s14, [r3]
 8013db0:	edc3 7a01 	vstr	s15, [r3, #4]

        int selection_begin = NK_MIN(edit->select_start, edit->select_end);
 8013db4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013dba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	bfa8      	it	ge
 8013dc4:	4613      	movge	r3, r2
 8013dc6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        int selection_end = NK_MAX(edit->select_start, edit->select_end);
 8013dca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013dd0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	bfb8      	it	lt
 8013dda:	4613      	movlt	r3, r2
 8013ddc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

        /* calculate total line count + total space + cursor/selection position */
        float line_width = 0.0f;
 8013de0:	f04f 0300 	mov.w	r3, #0
 8013de4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        if (text && len)
 8013de8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	f000 8225 	beq.w	801423c <nk_do_edit+0x1084>
 8013df2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	f000 8220 	beq.w	801423c <nk_do_edit+0x1084>
        {
            /* utf8 encoding */
            float glyph_width;
            int glyph_len = 0;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            nk_rune unicode = 0;
 8013e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	601a      	str	r2, [r3, #0]
            int text_len = 0;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            int glyphs = 0;
 8013e14:	2300      	movs	r3, #0
 8013e16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
            int row_begin = 0;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

            glyph_len = nk_utf_decode(text, &unicode, len);
 8013e20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013e24:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8013e28:	4619      	mov	r1, r3
 8013e2a:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8013e2e:	f00e f9af 	bl	8022190 <nk_utf_decode>
 8013e32:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
            glyph_width = font->width(font->userdata, font->height, text, glyph_len);
 8013e36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013e3a:	689b      	ldr	r3, [r3, #8]
 8013e3c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8013e40:	edd2 7a01 	vldr	s15, [r2, #4]
 8013e44:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013e48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013e4c:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8013e50:	eeb0 0a67 	vmov.f32	s0, s15
 8013e54:	6800      	ldr	r0, [r0, #0]
 8013e56:	4798      	blx	r3
 8013e58:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
            line_width = 0;
 8013e5c:	f04f 0300 	mov.w	r3, #0
 8013e60:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            /* iterate all lines */
            while ((text_len < len) && glyph_len)
 8013e64:	e1ac      	b.n	80141c0 <nk_do_edit+0x1008>
            {
                /* set cursor 2D position and line */
                if (!cursor_ptr && glyphs == edit->cursor)
 8013e66:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d14f      	bne.n	8013f0e <nk_do_edit+0xd56>
 8013e6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e74:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d148      	bne.n	8013f0e <nk_do_edit+0xd56>
                    struct nk_vec2 out_offset;
                    struct nk_vec2 row_size;
                    const char *remaining;

                    /* calculate 2d position */
                    cursor_pos.y = (float)(total_lines-1) * row_height;
 8013e7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013e80:	3b01      	subs	r3, #1
 8013e82:	ee07 3a90 	vmov	s15, r3
 8013e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013e8a:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8013e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013e96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013e9a:	edc3 7a01 	vstr	s15, [r3, #4]
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 8013e9e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013ea2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013ea6:	18d1      	adds	r1, r2, r3
 8013ea8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013eac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013eb0:	1ad2      	subs	r2, r2, r3
 8013eb2:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	9302      	str	r3, [sp, #8]
 8013eba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013ebe:	9301      	str	r3, [sp, #4]
 8013ec0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8013ec4:	9300      	str	r3, [sp, #0]
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 8013ecc:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013ed0:	f00f f9e0 	bl	8023294 <nk_text_calculate_text_bounds>
 8013ed4:	eeb0 7a40 	vmov.f32	s14, s0
 8013ed8:	eef0 7a60 	vmov.f32	s15, s1
 8013edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ee0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013ee4:	ed83 7a00 	vstr	s14, [r3]
 8013ee8:	edc3 7a01 	vstr	s15, [r3, #4]
                                text_len-row_begin, row_height, &remaining,
                                &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);
                    cursor_pos.x = row_size.x;
 8013eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ef0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013ef4:	681a      	ldr	r2, [r3, #0]
 8013ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013efa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013efe:	601a      	str	r2, [r3, #0]
                    cursor_ptr = text + text_len;
 8013f00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013f04:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013f08:	4413      	add	r3, r2
 8013f0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                }

                /* set start selection 2D position and line */
                if (!select_begin_ptr && edit->select_start != edit->select_end &&
 8013f0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d15d      	bne.n	8013fd2 <nk_do_edit+0xe1a>
 8013f16:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013f1c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d055      	beq.n	8013fd2 <nk_do_edit+0xe1a>
 8013f26:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013f2a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d14f      	bne.n	8013fd2 <nk_do_edit+0xe1a>
                    struct nk_vec2 out_offset;
                    struct nk_vec2 row_size;
                    const char *remaining;

                    /* calculate 2d position */
                    selection_offset_start.y = (float)(NK_MAX(total_lines-1,0)) * row_height;
 8013f32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	dd07      	ble.n	8013f4a <nk_do_edit+0xd92>
 8013f3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013f3e:	3b01      	subs	r3, #1
 8013f40:	ee07 3a90 	vmov	s15, r3
 8013f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f48:	e001      	b.n	8013f4e <nk_do_edit+0xd96>
 8013f4a:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 8013c28 <nk_do_edit+0xa70>
 8013f4e:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 8013f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013f5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013f5e:	edc3 7a01 	vstr	s15, [r3, #4]
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 8013f62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013f66:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013f6a:	18d1      	adds	r1, r2, r3
 8013f6c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013f70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013f74:	1ad2      	subs	r2, r2, r3
 8013f76:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	9302      	str	r3, [sp, #8]
 8013f7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013f82:	9301      	str	r3, [sp, #4]
 8013f84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 8013f90:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013f94:	f00f f97e 	bl	8023294 <nk_text_calculate_text_bounds>
 8013f98:	eeb0 7a40 	vmov.f32	s14, s0
 8013f9c:	eef0 7a60 	vmov.f32	s15, s1
 8013fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013fa4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013fa8:	ed83 7a00 	vstr	s14, [r3]
 8013fac:	edc3 7a01 	vstr	s15, [r3, #4]
                                text_len-row_begin, row_height, &remaining,
                                &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);
                    selection_offset_start.x = row_size.x;
 8013fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013fb4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013fb8:	681a      	ldr	r2, [r3, #0]
 8013fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013fbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013fc2:	601a      	str	r2, [r3, #0]
                    select_begin_ptr = text + text_len;
 8013fc4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013fc8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013fcc:	4413      	add	r3, r2
 8013fce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                }

                /* set end selection 2D position and line */
                if (!select_end_ptr && edit->select_start != edit->select_end &&
 8013fd2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d156      	bne.n	8014088 <nk_do_edit+0xed0>
 8013fda:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013fde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013fe0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d04e      	beq.n	8014088 <nk_do_edit+0xed0>
 8013fea:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013fee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d148      	bne.n	8014088 <nk_do_edit+0xed0>
                    struct nk_vec2 out_offset;
                    struct nk_vec2 row_size;
                    const char *remaining;

                    /* calculate 2d position */
                    selection_offset_end.y = (float)(total_lines-1) * row_height;
 8013ff6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013ffa:	3b01      	subs	r3, #1
 8013ffc:	ee07 3a90 	vmov	s15, r3
 8014000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014004:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8014008:	ee67 7a27 	vmul.f32	s15, s14, s15
 801400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014010:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014014:	edc3 7a01 	vstr	s15, [r3, #4]
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 8014018:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801401c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8014020:	18d1      	adds	r1, r2, r3
 8014022:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014026:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801402a:	1ad2      	subs	r2, r2, r3
 801402c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8014030:	2301      	movs	r3, #1
 8014032:	9302      	str	r3, [sp, #8]
 8014034:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014038:	9301      	str	r3, [sp, #4]
 801403a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801403e:	9300      	str	r3, [sp, #0]
 8014040:	4603      	mov	r3, r0
 8014042:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 8014046:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 801404a:	f00f f923 	bl	8023294 <nk_text_calculate_text_bounds>
 801404e:	eeb0 7a40 	vmov.f32	s14, s0
 8014052:	eef0 7a60 	vmov.f32	s15, s1
 8014056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801405a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801405e:	ed83 7a00 	vstr	s14, [r3]
 8014062:	edc3 7a01 	vstr	s15, [r3, #4]
                                text_len-row_begin, row_height, &remaining,
                                &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);
                    selection_offset_end.x = row_size.x;
 8014066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801406a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014074:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014078:	601a      	str	r2, [r3, #0]
                    select_end_ptr = text + text_len;
 801407a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801407e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8014082:	4413      	add	r3, r2
 8014084:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                }
                if (unicode == '\n') {
 8014088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801408c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b0a      	cmp	r3, #10
 8014094:	d158      	bne.n	8014148 <nk_do_edit+0xf90>
                    text_size.x = NK_MAX(text_size.x, line_width);
 8014096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801409a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801409e:	edd3 7a00 	vldr	s15, [r3]
 80140a2:	ed97 7a77 	vldr	s14, [r7, #476]	; 0x1dc
 80140a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ae:	dd02      	ble.n	80140b6 <nk_do_edit+0xefe>
 80140b0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80140b4:	e004      	b.n	80140c0 <nk_do_edit+0xf08>
 80140b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80140ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80140c4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80140c8:	6013      	str	r3, [r2, #0]
                    total_lines++;
 80140ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80140ce:	3301      	adds	r3, #1
 80140d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    line_width = 0;
 80140d4:	f04f 0300 	mov.w	r3, #0
 80140d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
                    text_len++;
 80140dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80140e0:	3301      	adds	r3, #1
 80140e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                    glyphs++;
 80140e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80140ea:	3301      	adds	r3, #1
 80140ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
                    row_begin = text_len;
 80140f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80140f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                    glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);
 80140f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80140fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8014100:	18d0      	adds	r0, r2, r3
 8014102:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8014106:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801410a:	1ad2      	subs	r2, r2, r3
 801410c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014110:	4619      	mov	r1, r3
 8014112:	f00e f83d 	bl	8022190 <nk_utf_decode>
 8014116:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
                    glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);
 801411a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801411e:	689b      	ldr	r3, [r3, #8]
 8014120:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8014124:	edd2 7a01 	vldr	s15, [r2, #4]
 8014128:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801412c:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8014130:	4411      	add	r1, r2
 8014132:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8014136:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801413a:	eeb0 0a67 	vmov.f32	s0, s15
 801413e:	6800      	ldr	r0, [r0, #0]
 8014140:	4798      	blx	r3
 8014142:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
                    continue;
 8014146:	e03b      	b.n	80141c0 <nk_do_edit+0x1008>
                }

                glyphs++;
 8014148:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801414c:	3301      	adds	r3, #1
 801414e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
                text_len += glyph_len;
 8014152:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014156:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801415a:	4413      	add	r3, r2
 801415c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                line_width += (float)glyph_width;
 8014160:	ed97 7a77 	vldr	s14, [r7, #476]	; 0x1dc
 8014164:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8014168:	ee77 7a27 	vadd.f32	s15, s14, s15
 801416c:	edc7 7a77 	vstr	s15, [r7, #476]	; 0x1dc

                glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);
 8014170:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014174:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8014178:	18d0      	adds	r0, r2, r3
 801417a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 801417e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014182:	1ad2      	subs	r2, r2, r3
 8014184:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014188:	4619      	mov	r1, r3
 801418a:	f00e f801 	bl	8022190 <nk_utf_decode>
 801418e:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
                glyph_width = font->width(font->userdata, font->height,
 8014192:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014196:	689b      	ldr	r3, [r3, #8]
 8014198:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801419c:	edd2 7a01 	vldr	s15, [r2, #4]
 80141a0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80141a4:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 80141a8:	4411      	add	r1, r2
 80141aa:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80141ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80141b2:	eeb0 0a67 	vmov.f32	s0, s15
 80141b6:	6800      	ldr	r0, [r0, #0]
 80141b8:	4798      	blx	r3
 80141ba:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
                    text+text_len, glyph_len);
                continue;
 80141be:	bf00      	nop
            while ((text_len < len) && glyph_len)
 80141c0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80141c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80141c8:	429a      	cmp	r2, r3
 80141ca:	da04      	bge.n	80141d6 <nk_do_edit+0x101e>
 80141cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	f47f ae48 	bne.w	8013e66 <nk_do_edit+0xcae>
            }
            text_size.y = (float)total_lines * row_height;
 80141d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80141da:	ee07 3a90 	vmov	s15, r3
 80141de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80141e2:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80141e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80141ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80141f2:	edc3 7a01 	vstr	s15, [r3, #4]

            /* handle case when cursor is at end of text buffer */
            if (!cursor_ptr && edit->cursor == edit->string.len) {
 80141f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d11e      	bne.n	801423c <nk_do_edit+0x1084>
 80141fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014202:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014204:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801420a:	429a      	cmp	r2, r3
 801420c:	d116      	bne.n	801423c <nk_do_edit+0x1084>
                cursor_pos.x = line_width;
 801420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014212:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014216:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801421a:	601a      	str	r2, [r3, #0]
                cursor_pos.y = text_size.y - row_height;
 801421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014220:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014224:	ed93 7a01 	vldr	s14, [r3, #4]
 8014228:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 801422c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014234:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014238:	edc3 7a01 	vstr	s15, [r3, #4]
            }
        }
        {
            /* scrollbar */
            if (cursor_follow)
 801423c:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8014240:	2b00      	cmp	r3, #0
 8014242:	f000 80e6 	beq.w	8014412 <nk_do_edit+0x125a>
            {
                /* update scrollbar to follow cursor */
                if (!(flags & NK_EDIT_NO_HORIZONTAL_SCROLL)) {
 8014246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801424a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014254:	2b00      	cmp	r3, #0
 8014256:	d17a      	bne.n	801434e <nk_do_edit+0x1196>
                    /* horizontal scroll */
                    const float scroll_increment = area.w * 0.25f;
 8014258:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 801425c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8014260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014264:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
                    if (cursor_pos.x < edit->scrollbar.x)
 8014268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801426c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014270:	ed93 7a00 	vldr	s14, [r3]
 8014274:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014278:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801427c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014284:	d523      	bpl.n	80142ce <nk_do_edit+0x1116>
                        edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x - scroll_increment);
 8014286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801428a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801428e:	ed93 7a00 	vldr	s14, [r3]
 8014292:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8014296:	ee77 7a67 	vsub.f32	s15, s14, s15
 801429a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a2:	dd0e      	ble.n	80142c2 <nk_do_edit+0x110a>
 80142a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80142a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80142ac:	ed93 7a00 	vldr	s14, [r3]
 80142b0:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80142b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142c0:	e001      	b.n	80142c6 <nk_do_edit+0x110e>
 80142c2:	eddf 7acc 	vldr	s15, [pc, #816]	; 80145f4 <nk_do_edit+0x143c>
 80142c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80142ca:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
                    if (cursor_pos.x >= edit->scrollbar.x + area.w)
 80142ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80142d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80142d6:	ed93 7a00 	vldr	s14, [r3]
 80142da:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80142de:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80142e2:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 80142e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80142ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f2:	db31      	blt.n	8014358 <nk_do_edit+0x11a0>
                        edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x - area.w + scroll_increment);
 80142f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80142f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80142fc:	ed93 7a00 	vldr	s14, [r3]
 8014300:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8014304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014308:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 801430c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014318:	dd12      	ble.n	8014340 <nk_do_edit+0x1188>
 801431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801431e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014322:	ed93 7a00 	vldr	s14, [r3]
 8014326:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 801432a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801432e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8014332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801433a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801433e:	e001      	b.n	8014344 <nk_do_edit+0x118c>
 8014340:	eddf 7aac 	vldr	s15, [pc, #688]	; 80145f4 <nk_do_edit+0x143c>
 8014344:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014348:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 801434c:	e004      	b.n	8014358 <nk_do_edit+0x11a0>
                } else edit->scrollbar.x = 0;
 801434e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014352:	f04f 0200 	mov.w	r2, #0
 8014356:	651a      	str	r2, [r3, #80]	; 0x50

                if (flags & NK_EDIT_MULTILINE) {
 8014358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801435c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014366:	2b00      	cmp	r3, #0
 8014368:	d04e      	beq.n	8014408 <nk_do_edit+0x1250>
                    /* vertical scroll */
                    if (cursor_pos.y < edit->scrollbar.y)
 801436a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801436e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014372:	ed93 7a01 	vldr	s14, [r3, #4]
 8014376:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801437a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801437e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014386:	d51f      	bpl.n	80143c8 <nk_do_edit+0x1210>
                        edit->scrollbar.y = NK_MAX(0.0f, cursor_pos.y - row_height);
 8014388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801438c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014390:	ed93 7a01 	vldr	s14, [r3, #4]
 8014394:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8014398:	ee77 7a67 	vsub.f32	s15, s14, s15
 801439c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a4:	dd0a      	ble.n	80143bc <nk_do_edit+0x1204>
 80143a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80143aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80143ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80143b2:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80143b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143ba:	e001      	b.n	80143c0 <nk_do_edit+0x1208>
 80143bc:	eddf 7a8d 	vldr	s15, [pc, #564]	; 80145f4 <nk_do_edit+0x143c>
 80143c0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80143c4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                    if (cursor_pos.y >= edit->scrollbar.y + row_height)
 80143c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80143cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80143d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80143d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80143d8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80143dc:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80143e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ec:	db11      	blt.n	8014412 <nk_do_edit+0x125a>
                        edit->scrollbar.y = edit->scrollbar.y + row_height;
 80143ee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80143f2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80143f6:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80143fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014402:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8014406:	e004      	b.n	8014412 <nk_do_edit+0x125a>
                } else edit->scrollbar.y = 0;
 8014408:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801440c:	f04f 0200 	mov.w	r2, #0
 8014410:	655a      	str	r2, [r3, #84]	; 0x54
            }

            /* scrollbar widget */
            if (flags & NK_EDIT_MULTILINE)
 8014412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014420:	2b00      	cmp	r3, #0
 8014422:	f000 808e 	beq.w	8014542 <nk_do_edit+0x138a>
                float scroll_target;
                float scroll_offset;
                float scroll_step;
                float scroll_inc;

                scroll = area;
 8014426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801442a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801442e:	461c      	mov	r4, r3
 8014430:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8014434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                scroll.x = (bounds.x + bounds.w - style->border) - style->scrollbar_size.x;
 801443a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801443e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8014442:	ed93 7a00 	vldr	s14, [r3]
 8014446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801444a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801444e:	edd3 7a02 	vldr	s15, [r3, #8]
 8014452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014456:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801445a:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 801445e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014462:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014466:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 801446a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801446e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014472:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8014476:	edc3 7a00 	vstr	s15, [r3]
                scroll.w = style->scrollbar_size.x;
 801447a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801447e:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 8014482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014486:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801448a:	609a      	str	r2, [r3, #8]

                scroll_offset = edit->scrollbar.y;
 801448c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014492:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
                scroll_step = scroll.h * 0.10f;
 8014496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801449a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801449e:	edd3 7a03 	vldr	s15, [r3, #12]
 80144a2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80145ec <nk_do_edit+0x1434>
 80144a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144aa:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
                scroll_inc = scroll.h * 0.01f;
 80144ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80144b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80144ba:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80145f0 <nk_do_edit+0x1438>
 80144be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144c2:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
                scroll_target = text_size.y;
 80144c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                edit->scrollbar.y = nk_do_scrollbarv(&ws, out, scroll, 0,
 80144d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80144d8:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80144dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80144e4:	ed93 6a00 	vldr	s12, [r3]
 80144e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80144ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80144f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80144f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144f8:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 80144fc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8014500:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014504:	9301      	str	r3, [sp, #4]
 8014506:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801450a:	9300      	str	r3, [sp, #0]
 801450c:	4613      	mov	r3, r2
 801450e:	edd7 3a56 	vldr	s7, [r7, #344]	; 0x158
 8014512:	ed97 3a57 	vldr	s6, [r7, #348]	; 0x15c
 8014516:	edd7 2a55 	vldr	s5, [r7, #340]	; 0x154
 801451a:	ed97 2a58 	vldr	s4, [r7, #352]	; 0x160
 801451e:	2200      	movs	r2, #0
 8014520:	eeb0 0a46 	vmov.f32	s0, s12
 8014524:	eef0 0a66 	vmov.f32	s1, s13
 8014528:	eeb0 1a47 	vmov.f32	s2, s14
 801452c:	eef0 1a67 	vmov.f32	s3, s15
 8014530:	6809      	ldr	r1, [r1, #0]
 8014532:	f007 fc29 	bl	801bd88 <nk_do_scrollbarv>
 8014536:	eef0 7a40 	vmov.f32	s15, s0
 801453a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801453e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
        struct nk_color sel_background_color;
        struct nk_color sel_text_color;
        struct nk_color cursor_color;
        struct nk_color cursor_text_color;
        const struct nk_style_item *background;
        nk_push_scissor(out, clip);
 8014542:	ed97 6a42 	vldr	s12, [r7, #264]	; 0x108
 8014546:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
 801454a:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 801454e:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8014552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014556:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801455a:	eeb0 0a46 	vmov.f32	s0, s12
 801455e:	eef0 0a66 	vmov.f32	s1, s13
 8014562:	eeb0 1a47 	vmov.f32	s2, s14
 8014566:	eef0 1a67 	vmov.f32	s3, s15
 801456a:	6818      	ldr	r0, [r3, #0]
 801456c:	f7fd f918 	bl	80117a0 <nk_push_scissor>

        /* select correct colors to draw */
        if (*state & NK_WIDGET_STATE_ACTIVED) {
 8014570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014574:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	f003 0320 	and.w	r3, r3, #32
 8014580:	2b00      	cmp	r3, #0
 8014582:	d039      	beq.n	80145f8 <nk_do_edit+0x1440>
            background = &style->active;
 8014584:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014588:	3338      	adds	r3, #56	; 0x38
 801458a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
            text_color = style->text_active;
 801458e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014592:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014596:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801459a:	f8d2 227c 	ldr.w	r2, [r2, #636]	; 0x27c
 801459e:	601a      	str	r2, [r3, #0]
            sel_text_color = style->selected_text_hover;
 80145a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80145a8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145ac:	f8d2 228c 	ldr.w	r2, [r2, #652]	; 0x28c
 80145b0:	601a      	str	r2, [r3, #0]
            sel_background_color = style->selected_hover;
 80145b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80145ba:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145be:	f8d2 2284 	ldr.w	r2, [r2, #644]	; 0x284
 80145c2:	601a      	str	r2, [r3, #0]
            cursor_color = style->cursor_hover;
 80145c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80145cc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145d0:	f8d2 2268 	ldr.w	r2, [r2, #616]	; 0x268
 80145d4:	601a      	str	r2, [r3, #0]
            cursor_text_color = style->cursor_text_hover;
 80145d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145da:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80145de:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145e2:	f8d2 2270 	ldr.w	r2, [r2, #624]	; 0x270
 80145e6:	601a      	str	r2, [r3, #0]
 80145e8:	e074      	b.n	80146d4 <nk_do_edit+0x151c>
 80145ea:	bf00      	nop
 80145ec:	3dcccccd 	.word	0x3dcccccd
 80145f0:	3c23d70a 	.word	0x3c23d70a
 80145f4:	00000000 	.word	0x00000000
        } else if (*state & NK_WIDGET_STATE_HOVER) {
 80145f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	f003 0310 	and.w	r3, r3, #16
 8014608:	2b00      	cmp	r3, #0
 801460a:	d032      	beq.n	8014672 <nk_do_edit+0x14ba>
            background = &style->hover;
 801460c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014610:	331c      	adds	r3, #28
 8014612:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
            text_color = style->text_hover;
 8014616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801461a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801461e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014622:	f8d2 2278 	ldr.w	r2, [r2, #632]	; 0x278
 8014626:	601a      	str	r2, [r3, #0]
            sel_text_color = style->selected_text_hover;
 8014628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801462c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8014630:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014634:	f8d2 228c 	ldr.w	r2, [r2, #652]	; 0x28c
 8014638:	601a      	str	r2, [r3, #0]
            sel_background_color = style->selected_hover;
 801463a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801463e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8014642:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014646:	f8d2 2284 	ldr.w	r2, [r2, #644]	; 0x284
 801464a:	601a      	str	r2, [r3, #0]
            cursor_text_color = style->cursor_text_hover;
 801464c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014650:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8014654:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014658:	f8d2 2270 	ldr.w	r2, [r2, #624]	; 0x270
 801465c:	601a      	str	r2, [r3, #0]
            cursor_color = style->cursor_hover;
 801465e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014662:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8014666:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801466a:	f8d2 2268 	ldr.w	r2, [r2, #616]	; 0x268
 801466e:	601a      	str	r2, [r3, #0]
 8014670:	e030      	b.n	80146d4 <nk_do_edit+0x151c>
        } else {
            background = &style->normal;
 8014672:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014676:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
            text_color = style->text_normal;
 801467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801467e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014682:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014686:	f8d2 2274 	ldr.w	r2, [r2, #628]	; 0x274
 801468a:	601a      	str	r2, [r3, #0]
            sel_text_color = style->selected_text_normal;
 801468c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014690:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8014694:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014698:	f8d2 2288 	ldr.w	r2, [r2, #648]	; 0x288
 801469c:	601a      	str	r2, [r3, #0]
            sel_background_color = style->selected_normal;
 801469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80146a6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80146aa:	f8d2 2280 	ldr.w	r2, [r2, #640]	; 0x280
 80146ae:	601a      	str	r2, [r3, #0]
            cursor_color = style->cursor_normal;
 80146b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80146b8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80146bc:	f8d2 2264 	ldr.w	r2, [r2, #612]	; 0x264
 80146c0:	601a      	str	r2, [r3, #0]
            cursor_text_color = style->cursor_text_normal;
 80146c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146c6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80146ca:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80146ce:	f8d2 226c 	ldr.w	r2, [r2, #620]	; 0x26c
 80146d2:	601a      	str	r2, [r3, #0]
        }
        if (background->type == NK_STYLE_ITEM_IMAGE)
 80146d4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d10c      	bne.n	80146f8 <nk_do_edit+0x1540>
            background_color = nk_rgba(0,0,0,0);
 80146de:	2300      	movs	r3, #0
 80146e0:	2200      	movs	r2, #0
 80146e2:	2100      	movs	r1, #0
 80146e4:	2000      	movs	r0, #0
 80146e6:	f7fb facd 	bl	800fc84 <nk_rgba>
 80146ea:	4602      	mov	r2, r0
 80146ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80146f4:	601a      	str	r2, [r3, #0]
 80146f6:	e007      	b.n	8014708 <nk_do_edit+0x1550>
        else
            background_color = background->data.color;
 80146f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8014700:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8014704:	6852      	ldr	r2, [r2, #4]
 8014706:	601a      	str	r2, [r3, #0]


        if (edit->select_start == edit->select_end) {
 8014708:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801470c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801470e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014714:	429a      	cmp	r2, r3
 8014716:	d146      	bne.n	80147a6 <nk_do_edit+0x15ee>
            /* no selection so just draw the complete text */
            const char *begin = nk_str_get_const(&edit->string);
 8014718:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801471c:	330c      	adds	r3, #12
 801471e:	4618      	mov	r0, r3
 8014720:	f008 fc82 	bl	801d028 <nk_str_get_const>
 8014724:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
            int l = nk_str_len_char(&edit->string);
 8014728:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801472c:	330c      	adds	r3, #12
 801472e:	4618      	mov	r0, r3
 8014730:	f008 fcca 	bl	801d0c8 <nk_str_len_char>
 8014734:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
            nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014738:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 801473c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014740:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014744:	ee77 6a67 	vsub.f32	s13, s14, s15
                area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
 8014748:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 801474c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014750:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
            nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801475c:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014760:	2300      	movs	r3, #0
 8014762:	9303      	str	r3, [sp, #12]
 8014764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014768:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	9302      	str	r3, [sp, #8]
 8014770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014774:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	9301      	str	r3, [sp, #4]
 801477c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014780:	9300      	str	r3, [sp, #0]
 8014782:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 8014786:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801478a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801478e:	ed1f 1a67 	vldr	s2, [pc, #-412]	; 80145f4 <nk_do_edit+0x143c>
 8014792:	eef0 0a67 	vmov.f32	s1, s15
 8014796:	eeb0 0a66 	vmov.f32	s0, s13
 801479a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 801479e:	6800      	ldr	r0, [r0, #0]
 80147a0:	f7fe fb72 	bl	8012e88 <nk_edit_draw_text>
 80147a4:	e14e      	b.n	8014a44 <nk_do_edit+0x188c>
                background_color, text_color, nk_false);
        } else {
            /* edit has selection so draw 1-3 text chunks */
            if (edit->select_start != edit->select_end && selection_begin > 0){
 80147a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80147ac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d050      	beq.n	8014858 <nk_do_edit+0x16a0>
 80147b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	dd4c      	ble.n	8014858 <nk_do_edit+0x16a0>
                /* draw unselected text before selection */
                const char *begin = nk_str_get_const(&edit->string);
 80147be:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147c2:	330c      	adds	r3, #12
 80147c4:	4618      	mov	r0, r3
 80147c6:	f008 fc2f 	bl	801d028 <nk_str_get_const>
 80147ca:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
                NK_ASSERT(select_begin_ptr);
 80147ce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d106      	bne.n	80147e4 <nk_do_edit+0x162c>
 80147d6:	4b72      	ldr	r3, [pc, #456]	; (80149a0 <nk_do_edit+0x17e8>)
 80147d8:	4a72      	ldr	r2, [pc, #456]	; (80149a4 <nk_do_edit+0x17ec>)
 80147da:	f240 2133 	movw	r1, #563	; 0x233
 80147de:	4872      	ldr	r0, [pc, #456]	; (80149a8 <nk_do_edit+0x17f0>)
 80147e0:	f010 f97a 	bl	8024ad8 <__assert_func>
                nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 80147e4:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80147e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147ec:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80147f0:	ee77 6a67 	vsub.f32	s13, s14, s15
                    area.y - edit->scrollbar.y, 0, begin, (int)(select_begin_ptr - begin),
 80147f4:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 80147f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147fc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
                nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014804:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8014808:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801480c:	1ad2      	subs	r2, r2, r3
 801480e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014812:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014816:	2300      	movs	r3, #0
 8014818:	9303      	str	r3, [sp, #12]
 801481a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801481e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	9302      	str	r3, [sp, #8]
 8014826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801482a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	9301      	str	r3, [sp, #4]
 8014832:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014836:	9300      	str	r3, [sp, #0]
 8014838:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 801483c:	4613      	mov	r3, r2
 801483e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8014842:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 80149b0 <nk_do_edit+0x17f8>
 8014846:	eef0 0a67 	vmov.f32	s1, s15
 801484a:	eeb0 0a66 	vmov.f32	s0, s13
 801484e:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8014852:	6800      	ldr	r0, [r0, #0]
 8014854:	f7fe fb18 	bl	8012e88 <nk_edit_draw_text>
                    row_height, font, background_color, text_color, nk_false);
            }
            if (edit->select_start != edit->select_end) {
 8014858:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801485c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801485e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014864:	429a      	cmp	r2, r3
 8014866:	d06b      	beq.n	8014940 <nk_do_edit+0x1788>
                /* draw selected text */
                NK_ASSERT(select_begin_ptr);
 8014868:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801486c:	2b00      	cmp	r3, #0
 801486e:	d106      	bne.n	801487e <nk_do_edit+0x16c6>
 8014870:	4b4b      	ldr	r3, [pc, #300]	; (80149a0 <nk_do_edit+0x17e8>)
 8014872:	4a4c      	ldr	r2, [pc, #304]	; (80149a4 <nk_do_edit+0x17ec>)
 8014874:	f240 213a 	movw	r1, #570	; 0x23a
 8014878:	484b      	ldr	r0, [pc, #300]	; (80149a8 <nk_do_edit+0x17f0>)
 801487a:	f010 f92d 	bl	8024ad8 <__assert_func>
                if (!select_end_ptr) {
 801487e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8014882:	2b00      	cmp	r3, #0
 8014884:	d114      	bne.n	80148b0 <nk_do_edit+0x16f8>
                    const char *begin = nk_str_get_const(&edit->string);
 8014886:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801488a:	330c      	adds	r3, #12
 801488c:	4618      	mov	r0, r3
 801488e:	f008 fbcb 	bl	801d028 <nk_str_get_const>
 8014892:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
                    select_end_ptr = begin + nk_str_len_char(&edit->string);
 8014896:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801489a:	330c      	adds	r3, #12
 801489c:	4618      	mov	r0, r3
 801489e:	f008 fc13 	bl	801d0c8 <nk_str_len_char>
 80148a2:	4603      	mov	r3, r0
 80148a4:	461a      	mov	r2, r3
 80148a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80148aa:	4413      	add	r3, r2
 80148ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                }
                nk_edit_draw_text(out, style,
                    area.x - edit->scrollbar.x,
 80148b0:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80148b4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80148b8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
                nk_edit_draw_text(out, style,
 80148bc:	ee77 6a67 	vsub.f32	s13, s14, s15
                    area.y + selection_offset_start.y - edit->scrollbar.y,
 80148c0:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 80148c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80148c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80148cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80148d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80148d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
                nk_edit_draw_text(out, style,
 80148dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80148e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80148e8:	ed93 7a00 	vldr	s14, [r3]
 80148ec:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80148f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80148f4:	1ad2      	subs	r2, r2, r3
 80148f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80148fa:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80148fe:	2301      	movs	r3, #1
 8014900:	9303      	str	r3, [sp, #12]
 8014902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014906:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	9302      	str	r3, [sp, #8]
 801490e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014912:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	9301      	str	r3, [sp, #4]
 801491a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 8014924:	4613      	mov	r3, r2
 8014926:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801492a:	eeb0 1a47 	vmov.f32	s2, s14
 801492e:	eef0 0a67 	vmov.f32	s1, s15
 8014932:	eeb0 0a66 	vmov.f32	s0, s13
 8014936:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 801493a:	6800      	ldr	r0, [r0, #0]
 801493c:	f7fe faa4 	bl	8012e88 <nk_edit_draw_text>
                    selection_offset_start.x,
                    select_begin_ptr, (int)(select_end_ptr - select_begin_ptr),
                    row_height, font, sel_background_color, sel_text_color, nk_true);
            }
            if ((edit->select_start != edit->select_end &&
 8014940:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014946:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801494c:	429a      	cmp	r2, r3
 801494e:	d079      	beq.n	8014a44 <nk_do_edit+0x188c>
                selection_end < edit->string.len))
 8014950:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            if ((edit->select_start != edit->select_end &&
 8014956:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 801495a:	429a      	cmp	r2, r3
 801495c:	da72      	bge.n	8014a44 <nk_do_edit+0x188c>
            {
                /* draw unselected text after selected text */
                const char *begin = select_end_ptr;
 801495e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8014962:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                const char *end = nk_str_get_const(&edit->string) +
 8014966:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801496a:	330c      	adds	r3, #12
 801496c:	4618      	mov	r0, r3
 801496e:	f008 fb5b 	bl	801d028 <nk_str_get_const>
 8014972:	4604      	mov	r4, r0
                                    nk_str_len_char(&edit->string);
 8014974:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014978:	330c      	adds	r3, #12
 801497a:	4618      	mov	r0, r3
 801497c:	f008 fba4 	bl	801d0c8 <nk_str_len_char>
 8014980:	4603      	mov	r3, r0
                const char *end = nk_str_get_const(&edit->string) +
 8014982:	4423      	add	r3, r4
 8014984:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                NK_ASSERT(select_end_ptr);
 8014988:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d111      	bne.n	80149b4 <nk_do_edit+0x17fc>
 8014990:	4b06      	ldr	r3, [pc, #24]	; (80149ac <nk_do_edit+0x17f4>)
 8014992:	4a04      	ldr	r2, [pc, #16]	; (80149a4 <nk_do_edit+0x17ec>)
 8014994:	f240 214d 	movw	r1, #589	; 0x24d
 8014998:	4803      	ldr	r0, [pc, #12]	; (80149a8 <nk_do_edit+0x17f0>)
 801499a:	f010 f89d 	bl	8024ad8 <__assert_func>
 801499e:	bf00      	nop
 80149a0:	080288ac 	.word	0x080288ac
 80149a4:	0802a780 	.word	0x0802a780
 80149a8:	0802886c 	.word	0x0802886c
 80149ac:	080288c0 	.word	0x080288c0
 80149b0:	00000000 	.word	0x00000000
                nk_edit_draw_text(out, style,
                    area.x - edit->scrollbar.x,
 80149b4:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80149b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80149bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
                nk_edit_draw_text(out, style,
 80149c0:	ee77 6a67 	vsub.f32	s13, s14, s15
                    area.y + selection_offset_end.y - edit->scrollbar.y,
 80149c4:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 80149c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80149cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80149d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80149d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80149d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80149dc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
                nk_edit_draw_text(out, style,
 80149e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80149e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80149ec:	ed93 7a00 	vldr	s14, [r3]
 80149f0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80149f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80149f8:	1ad2      	subs	r2, r2, r3
 80149fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80149fe:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014a02:	2301      	movs	r3, #1
 8014a04:	9303      	str	r3, [sp, #12]
 8014a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	9302      	str	r3, [sp, #8]
 8014a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	9301      	str	r3, [sp, #4]
 8014a1e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 8014a28:	4613      	mov	r3, r2
 8014a2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014a2e:	eeb0 1a47 	vmov.f32	s2, s14
 8014a32:	eef0 0a67 	vmov.f32	s1, s15
 8014a36:	eeb0 0a66 	vmov.f32	s0, s13
 8014a3a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8014a3e:	6800      	ldr	r0, [r0, #0]
 8014a40:	f7fe fa22 	bl	8012e88 <nk_edit_draw_text>
                    background_color, text_color, nk_true);
            }
        }

        /* cursor */
        if (edit->select_start == edit->select_end)
 8014a44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014a4a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a50:	429a      	cmp	r2, r3
 8014a52:	f040 821d 	bne.w	8014e90 <nk_do_edit+0x1cd8>
        {
            if (edit->cursor >= nk_str_len(&edit->string) ||
 8014a56:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a5a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8014a5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a60:	330c      	adds	r3, #12
 8014a62:	4618      	mov	r0, r3
 8014a64:	f008 fb08 	bl	801d078 <nk_str_len>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	429c      	cmp	r4, r3
 8014a6c:	da09      	bge.n	8014a82 <nk_do_edit+0x18ca>
 8014a6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	f000 8085 	beq.w	8014b82 <nk_do_edit+0x19ca>
                (cursor_ptr && *cursor_ptr == '\n')) {
 8014a78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	2b0a      	cmp	r3, #10
 8014a80:	d17f      	bne.n	8014b82 <nk_do_edit+0x19ca>
                /* draw cursor at end of line */
                struct nk_rect cursor;
                cursor.w = style->cursor_size;
 8014a82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014a86:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 8014a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014a92:	609a      	str	r2, [r3, #8]
                cursor.h = font->height;
 8014a94:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014a98:	685a      	ldr	r2, [r3, #4]
 8014a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014aa2:	60da      	str	r2, [r3, #12]
                cursor.x = area.x + cursor_pos.x - edit->scrollbar.x;
 8014aa4:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014aac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014ab0:	edd3 7a00 	vldr	s15, [r3]
 8014ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ab8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014abc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ac8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014acc:	edc3 7a00 	vstr	s15, [r3]
                cursor.y = area.y + cursor_pos.y + row_height/2.0f - cursor.h/2.0f;
 8014ad0:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ad8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014adc:	edd3 7a01 	vldr	s15, [r3, #4]
 8014ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ae4:	edd7 6a6e 	vldr	s13, [r7, #440]	; 0x1b8
 8014ae8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014aec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8014af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014af8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014afc:	edd3 6a03 	vldr	s13, [r3, #12]
 8014b00:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014b04:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8014b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b14:	edc3 7a01 	vstr	s15, [r3, #4]
                cursor.y -= edit->scrollbar.y;
 8014b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b1c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b20:	ed93 7a01 	vldr	s14, [r3, #4]
 8014b24:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014b28:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8014b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b38:	edc3 7a01 	vstr	s15, [r3, #4]
                nk_fill_rect(out, cursor, 0, cursor_color);
 8014b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b40:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8014b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b48:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b4c:	ed93 6a00 	vldr	s12, [r3]
 8014b50:	edd3 6a01 	vldr	s13, [r3, #4]
 8014b54:	ed93 7a02 	vldr	s14, [r3, #8]
 8014b58:	edd3 7a03 	vldr	s15, [r3, #12]
 8014b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b60:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014b64:	6811      	ldr	r1, [r2, #0]
 8014b66:	ed1f 2a6e 	vldr	s4, [pc, #-440]	; 80149b0 <nk_do_edit+0x17f8>
 8014b6a:	eeb0 0a46 	vmov.f32	s0, s12
 8014b6e:	eef0 0a66 	vmov.f32	s1, s13
 8014b72:	eeb0 1a47 	vmov.f32	s2, s14
 8014b76:	eef0 1a67 	vmov.f32	s3, s15
 8014b7a:	6818      	ldr	r0, [r3, #0]
 8014b7c:	f7fc ff90 	bl	8011aa0 <nk_fill_rect>
                (cursor_ptr && *cursor_ptr == '\n')) {
 8014b80:	e186      	b.n	8014e90 <nk_do_edit+0x1cd8>
                int glyph_len;
                struct nk_rect label;
                struct nk_text txt;

                nk_rune unicode;
                NK_ASSERT(cursor_ptr);
 8014b82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d106      	bne.n	8014b98 <nk_do_edit+0x19e0>
 8014b8a:	4bd0      	ldr	r3, [pc, #832]	; (8014ecc <nk_do_edit+0x1d14>)
 8014b8c:	4ad0      	ldr	r2, [pc, #832]	; (8014ed0 <nk_do_edit+0x1d18>)
 8014b8e:	f240 216b 	movw	r1, #619	; 0x26b
 8014b92:	48d0      	ldr	r0, [pc, #832]	; (8014ed4 <nk_do_edit+0x1d1c>)
 8014b94:	f00f ffa0 	bl	8024ad8 <__assert_func>
                glyph_len = nk_utf_decode(cursor_ptr, &unicode, 4);
 8014b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014b9c:	2204      	movs	r2, #4
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8014ba4:	f00d faf4 	bl	8022190 <nk_utf_decode>
 8014ba8:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138

                label.x = area.x + cursor_pos.x - edit->scrollbar.x;
 8014bac:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014bb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014bb8:	edd3 7a00 	vldr	s15, [r3]
 8014bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bc0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014bc4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014bd0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014bd4:	edc3 7a00 	vstr	s15, [r3]
                label.y = area.y + cursor_pos.y - edit->scrollbar.y;
 8014bd8:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014be0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014be4:	edd3 7a01 	vldr	s15, [r3, #4]
 8014be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014bf0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8014bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014bfc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014c00:	edc3 7a01 	vstr	s15, [r3, #4]
                label.w = font->width(font->userdata, font->height, cursor_ptr, glyph_len);
 8014c04:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8014c0e:	edd2 7a01 	vldr	s15, [r2, #4]
 8014c12:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8014c16:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8014c1a:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8014c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8014c22:	6800      	ldr	r0, [r0, #0]
 8014c24:	4798      	blx	r3
 8014c26:	eef0 7a40 	vmov.f32	s15, s0
 8014c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c2e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014c32:	edc3 7a02 	vstr	s15, [r3, #8]
                label.h = row_height;
 8014c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014c3e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8014c42:	60da      	str	r2, [r3, #12]

                txt.padding = nk_vec2(0,0);
 8014c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c48:	f5a3 74e8 	sub.w	r4, r3, #464	; 0x1d0
 8014c4c:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8014ed8 <nk_do_edit+0x1d20>
 8014c50:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8014ed8 <nk_do_edit+0x1d20>
 8014c54:	f001 fe9c 	bl	8016990 <nk_vec2>
 8014c58:	eeb0 7a40 	vmov.f32	s14, s0
 8014c5c:	eef0 7a60 	vmov.f32	s15, s1
 8014c60:	ed84 7a00 	vstr	s14, [r4]
 8014c64:	edc4 7a01 	vstr	s15, [r4, #4]
                txt.background = cursor_color;;
 8014c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8014c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8014c74:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8014c78:	6812      	ldr	r2, [r2, #0]
 8014c7a:	609a      	str	r2, [r3, #8]
                txt.text = cursor_text_color;
 8014c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8014c84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8014c88:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8014c8c:	6812      	ldr	r2, [r2, #0]
 8014c8e:	60da      	str	r2, [r3, #12]
                nk_fill_rect(out, label, 0, cursor_color);
 8014c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c94:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8014c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014ca0:	ed93 6a00 	vldr	s12, [r3]
 8014ca4:	edd3 6a01 	vldr	s13, [r3, #4]
 8014ca8:	ed93 7a02 	vldr	s14, [r3, #8]
 8014cac:	edd3 7a03 	vldr	s15, [r3, #12]
 8014cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014cb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014cb8:	6811      	ldr	r1, [r2, #0]
 8014cba:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8014ed8 <nk_do_edit+0x1d20>
 8014cbe:	eeb0 0a46 	vmov.f32	s0, s12
 8014cc2:	eef0 0a66 	vmov.f32	s1, s13
 8014cc6:	eeb0 1a47 	vmov.f32	s2, s14
 8014cca:	eef0 1a67 	vmov.f32	s3, s15
 8014cce:	6818      	ldr	r0, [r3, #0]
 8014cd0:	f7fc fee6 	bl	8011aa0 <nk_fill_rect>
                nk_widget_text(out, label, cursor_ptr, glyph_len, &txt, NK_TEXT_LEFT, font);
 8014cd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014cdc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014ce0:	ed93 6a00 	vldr	s12, [r3]
 8014ce4:	edd3 6a01 	vldr	s13, [r3, #4]
 8014ce8:	ed93 7a02 	vldr	s14, [r3, #8]
 8014cec:	edd3 7a03 	vldr	s15, [r3, #12]
 8014cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014cf4:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014cf8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014cfc:	9301      	str	r3, [sp, #4]
 8014cfe:	2311      	movs	r3, #17
 8014d00:	9300      	str	r3, [sp, #0]
 8014d02:	4613      	mov	r3, r2
 8014d04:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8014d08:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8014d0c:	eeb0 0a46 	vmov.f32	s0, s12
 8014d10:	eef0 0a66 	vmov.f32	s1, s13
 8014d14:	eeb0 1a47 	vmov.f32	s2, s14
 8014d18:	eef0 1a67 	vmov.f32	s3, s15
 8014d1c:	6800      	ldr	r0, [r0, #0]
 8014d1e:	f00a fc25 	bl	801f56c <nk_widget_text>
 8014d22:	e0b5      	b.n	8014e90 <nk_do_edit+0x1cd8>
            }
        }}
    } else {
        /* not active so just draw text */
        int l = nk_str_len_char(&edit->string);
 8014d24:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d28:	330c      	adds	r3, #12
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f008 f9cc 	bl	801d0c8 <nk_str_len_char>
 8014d30:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        const char *begin = nk_str_get_const(&edit->string);
 8014d34:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d38:	330c      	adds	r3, #12
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f008 f974 	bl	801d028 <nk_str_get_const>
 8014d40:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

        const struct nk_style_item *background;
        struct nk_color background_color;
        struct nk_color text_color;
        nk_push_scissor(out, clip);
 8014d44:	ed97 6a42 	vldr	s12, [r7, #264]	; 0x108
 8014d48:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
 8014d4c:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8014d50:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8014d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014d58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014d5c:	eeb0 0a46 	vmov.f32	s0, s12
 8014d60:	eef0 0a66 	vmov.f32	s1, s13
 8014d64:	eeb0 1a47 	vmov.f32	s2, s14
 8014d68:	eef0 1a67 	vmov.f32	s3, s15
 8014d6c:	6818      	ldr	r0, [r3, #0]
 8014d6e:	f7fc fd17 	bl	80117a0 <nk_push_scissor>
        if (*state & NK_WIDGET_STATE_ACTIVED) {
 8014d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014d76:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	f003 0320 	and.w	r3, r3, #32
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d00e      	beq.n	8014da4 <nk_do_edit+0x1bec>
            background = &style->active;
 8014d86:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014d8a:	3338      	adds	r3, #56	; 0x38
 8014d8c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            text_color = style->text_active;
 8014d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014d94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014d98:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014d9c:	f8d2 227c 	ldr.w	r2, [r2, #636]	; 0x27c
 8014da0:	601a      	str	r2, [r3, #0]
 8014da2:	e025      	b.n	8014df0 <nk_do_edit+0x1c38>
        } else if (*state & NK_WIDGET_STATE_HOVER) {
 8014da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014da8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	f003 0310 	and.w	r3, r3, #16
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d00e      	beq.n	8014dd6 <nk_do_edit+0x1c1e>
            background = &style->hover;
 8014db8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014dbc:	331c      	adds	r3, #28
 8014dbe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            text_color = style->text_hover;
 8014dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014dc6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014dca:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014dce:	f8d2 2278 	ldr.w	r2, [r2, #632]	; 0x278
 8014dd2:	601a      	str	r2, [r3, #0]
 8014dd4:	e00c      	b.n	8014df0 <nk_do_edit+0x1c38>
        } else {
            background = &style->normal;
 8014dd6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014dda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            text_color = style->text_normal;
 8014dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014de2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014de6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014dea:	f8d2 2274 	ldr.w	r2, [r2, #628]	; 0x274
 8014dee:	601a      	str	r2, [r3, #0]
        }
        if (background->type == NK_STYLE_ITEM_IMAGE)
 8014df0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d10c      	bne.n	8014e14 <nk_do_edit+0x1c5c>
            background_color = nk_rgba(0,0,0,0);
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	2100      	movs	r1, #0
 8014e00:	2000      	movs	r0, #0
 8014e02:	f7fa ff3f 	bl	800fc84 <nk_rgba>
 8014e06:	4602      	mov	r2, r0
 8014e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8014e10:	601a      	str	r2, [r3, #0]
 8014e12:	e007      	b.n	8014e24 <nk_do_edit+0x1c6c>
        else
            background_color = background->data.color;
 8014e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e18:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8014e1c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8014e20:	6852      	ldr	r2, [r2, #4]
 8014e22:	601a      	str	r2, [r3, #0]
        nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014e24:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014e28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014e2c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014e30:	ee77 6a67 	vsub.f32	s13, s14, s15
            area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
 8014e34:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014e38:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014e3c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
        nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e48:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	9303      	str	r3, [sp, #12]
 8014e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e54:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	9302      	str	r3, [sp, #8]
 8014e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	9301      	str	r3, [sp, #4]
 8014e68:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 8014e72:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014e76:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8014e7a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8014ed8 <nk_do_edit+0x1d20>
 8014e7e:	eef0 0a67 	vmov.f32	s1, s15
 8014e82:	eeb0 0a66 	vmov.f32	s0, s13
 8014e86:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8014e8a:	6800      	ldr	r0, [r0, #0]
 8014e8c:	f7fd fffc 	bl	8012e88 <nk_edit_draw_text>
            background_color, text_color, nk_false);
    }
    nk_push_scissor(out, old_clip);}
 8014e90:	ed97 6a46 	vldr	s12, [r7, #280]	; 0x118
 8014e94:	edd7 6a47 	vldr	s13, [r7, #284]	; 0x11c
 8014e98:	ed97 7a48 	vldr	s14, [r7, #288]	; 0x120
 8014e9c:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8014ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ea4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014ea8:	eeb0 0a46 	vmov.f32	s0, s12
 8014eac:	eef0 0a66 	vmov.f32	s1, s13
 8014eb0:	eeb0 1a47 	vmov.f32	s2, s14
 8014eb4:	eef0 1a67 	vmov.f32	s3, s15
 8014eb8:	6818      	ldr	r0, [r3, #0]
 8014eba:	f7fc fc71 	bl	80117a0 <nk_push_scissor>
    return ret;
 8014ebe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd90      	pop	{r4, r7, pc}
 8014ecc:	080288d0 	.word	0x080288d0
 8014ed0:	0802a780 	.word	0x0802a780
 8014ed4:	0802886c 	.word	0x0802886c
 8014ed8:	00000000 	.word	0x00000000

08014edc <nk_handle_ptr>:
 *                          IMAGE
 *
 * ===============================================================*/
NK_API nk_handle
nk_handle_ptr(void *ptr)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b085      	sub	sp, #20
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
    nk_handle handle = {0};
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	60fb      	str	r3, [r7, #12]
    handle.ptr = ptr;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	60fb      	str	r3, [r7, #12]
    return handle;
 8014eec:	68fb      	ldr	r3, [r7, #12]
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3714      	adds	r7, #20
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef8:	4770      	bx	lr
	...

08014efc <nk_input_begin>:
 *                          INPUT
 *
 * ===============================================================*/
NK_API void
nk_input_begin(struct nk_context *ctx)
{
 8014efc:	b590      	push	{r4, r7, lr}
 8014efe:	b085      	sub	sp, #20
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
    int i;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d105      	bne.n	8014f16 <nk_input_begin+0x1a>
 8014f0a:	4b2c      	ldr	r3, [pc, #176]	; (8014fbc <nk_input_begin+0xc0>)
 8014f0c:	4a2c      	ldr	r2, [pc, #176]	; (8014fc0 <nk_input_begin+0xc4>)
 8014f0e:	210e      	movs	r1, #14
 8014f10:	482c      	ldr	r0, [pc, #176]	; (8014fc4 <nk_input_begin+0xc8>)
 8014f12:	f00f fde1 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d04b      	beq.n	8014fb4 <nk_input_begin+0xb8>
    in = &ctx->input;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8014f20:	2300      	movs	r3, #0
 8014f22:	60fb      	str	r3, [r7, #12]
 8014f24:	e00a      	b.n	8014f3c <nk_input_begin+0x40>
        in->mouse.buttons[i].clicked = 0;
 8014f26:	68ba      	ldr	r2, [r7, #8]
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	3310      	adds	r3, #16
 8014f2c:	011b      	lsls	r3, r3, #4
 8014f2e:	4413      	add	r3, r2
 8014f30:	3308      	adds	r3, #8
 8014f32:	2200      	movs	r2, #0
 8014f34:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	3301      	adds	r3, #1
 8014f3a:	60fb      	str	r3, [r7, #12]
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2b03      	cmp	r3, #3
 8014f40:	ddf1      	ble.n	8014f26 <nk_input_begin+0x2a>

    in->keyboard.text_len = 0;
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	2200      	movs	r2, #0
 8014f46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    in->mouse.scroll_delta = nk_vec2(0,0);
 8014f4a:	68bc      	ldr	r4, [r7, #8]
 8014f4c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8014fc8 <nk_input_begin+0xcc>
 8014f50:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8014fc8 <nk_input_begin+0xcc>
 8014f54:	f001 fd1c 	bl	8016990 <nk_vec2>
 8014f58:	eeb0 7a40 	vmov.f32	s14, s0
 8014f5c:	eef0 7a60 	vmov.f32	s15, s1
 8014f60:	ed84 7a57 	vstr	s14, [r4, #348]	; 0x15c
 8014f64:	edc4 7a58 	vstr	s15, [r4, #352]	; 0x160
    in->mouse.prev.x = in->mouse.pos.x;
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    in->mouse.prev.y = in->mouse.pos.y;
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    in->mouse.delta.x = 0;
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	f04f 0200 	mov.w	r2, #0
 8014f86:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    in->mouse.delta.y = 0;
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	f04f 0200 	mov.w	r2, #0
 8014f90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    for (i = 0; i < NK_KEY_MAX; i++)
 8014f94:	2300      	movs	r3, #0
 8014f96:	60fb      	str	r3, [r7, #12]
 8014f98:	e008      	b.n	8014fac <nk_input_begin+0xb0>
        in->keyboard.keys[i].clicked = 0;
 8014f9a:	68ba      	ldr	r2, [r7, #8]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	00db      	lsls	r3, r3, #3
 8014fa0:	4413      	add	r3, r2
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NK_KEY_MAX; i++)
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	60fb      	str	r3, [r7, #12]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2b1d      	cmp	r3, #29
 8014fb0:	ddf3      	ble.n	8014f9a <nk_input_begin+0x9e>
 8014fb2:	e000      	b.n	8014fb6 <nk_input_begin+0xba>
    if (!ctx) return;
 8014fb4:	bf00      	nop
}
 8014fb6:	3714      	adds	r7, #20
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd90      	pop	{r4, r7, pc}
 8014fbc:	0802891c 	.word	0x0802891c
 8014fc0:	0802a78c 	.word	0x0802a78c
 8014fc4:	08028920 	.word	0x08028920
 8014fc8:	00000000 	.word	0x00000000

08014fcc <nk_input_end>:
NK_API void
nk_input_end(struct nk_context *ctx)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d105      	bne.n	8014fe6 <nk_input_end+0x1a>
 8014fda:	4b15      	ldr	r3, [pc, #84]	; (8015030 <nk_input_end+0x64>)
 8014fdc:	4a15      	ldr	r2, [pc, #84]	; (8015034 <nk_input_end+0x68>)
 8014fde:	2121      	movs	r1, #33	; 0x21
 8014fe0:	4815      	ldr	r0, [pc, #84]	; (8015038 <nk_input_end+0x6c>)
 8014fe2:	f00f fd79 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d01c      	beq.n	8015026 <nk_input_end+0x5a>
    in = &ctx->input;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	60fb      	str	r3, [r7, #12]
    if (in->mouse.grab)
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d003      	beq.n	8015002 <nk_input_end+0x36>
        in->mouse.grab = 0;
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    if (in->mouse.ungrab) {
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8015008:	2b00      	cmp	r3, #0
 801500a:	d00d      	beq.n	8015028 <nk_input_end+0x5c>
        in->mouse.grabbed = 0;
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	2200      	movs	r2, #0
 8015010:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        in->mouse.ungrab = 0;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2200      	movs	r2, #0
 8015018:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        in->mouse.grab = 0;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2200      	movs	r2, #0
 8015020:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 8015024:	e000      	b.n	8015028 <nk_input_end+0x5c>
    if (!ctx) return;
 8015026:	bf00      	nop
    }
}
 8015028:	3710      	adds	r7, #16
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	0802891c 	.word	0x0802891c
 8015034:	0802a79c 	.word	0x0802a79c
 8015038:	08028920 	.word	0x08028920

0801503c <nk_input_motion>:
NK_API void
nk_input_motion(struct nk_context *ctx, int x, int y)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	af00      	add	r7, sp, #0
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	607a      	str	r2, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d105      	bne.n	801505a <nk_input_motion+0x1e>
 801504e:	4b1b      	ldr	r3, [pc, #108]	; (80150bc <nk_input_motion+0x80>)
 8015050:	4a1b      	ldr	r2, [pc, #108]	; (80150c0 <nk_input_motion+0x84>)
 8015052:	2130      	movs	r1, #48	; 0x30
 8015054:	481b      	ldr	r0, [pc, #108]	; (80150c4 <nk_input_motion+0x88>)
 8015056:	f00f fd3f 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d028      	beq.n	80150b2 <nk_input_motion+0x76>
    in = &ctx->input;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	617b      	str	r3, [r7, #20]
    in->mouse.pos.x = (float)x;
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	ee07 3a90 	vmov	s15, r3
 801506a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
    in->mouse.pos.y = (float)y;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	ee07 3a90 	vmov	s15, r3
 801507a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
    in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8015090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
    in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80150a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
 80150b0:	e000      	b.n	80150b4 <nk_input_motion+0x78>
    if (!ctx) return;
 80150b2:	bf00      	nop
}
 80150b4:	3718      	adds	r7, #24
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	0802891c 	.word	0x0802891c
 80150c0:	0802a7ac 	.word	0x0802a7ac
 80150c4:	08028920 	.word	0x08028920

080150c8 <nk_input_button>:
#endif
    in->keyboard.keys[key].down = down;
}
NK_API void
nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, nk_bool down)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	607a      	str	r2, [r7, #4]
 80150d2:	603b      	str	r3, [r7, #0]
 80150d4:	460b      	mov	r3, r1
 80150d6:	72fb      	strb	r3, [r7, #11]
    struct nk_mouse_button *btn;
    struct nk_input *in;
    NK_ASSERT(ctx);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d105      	bne.n	80150ea <nk_input_button+0x22>
 80150de:	4b1d      	ldr	r3, [pc, #116]	; (8015154 <nk_input_button+0x8c>)
 80150e0:	4a1d      	ldr	r2, [pc, #116]	; (8015158 <nk_input_button+0x90>)
 80150e2:	214c      	movs	r1, #76	; 0x4c
 80150e4:	481d      	ldr	r0, [pc, #116]	; (801515c <nk_input_button+0x94>)
 80150e6:	f00f fcf7 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d02b      	beq.n	8015148 <nk_input_button+0x80>
    in = &ctx->input;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	617b      	str	r3, [r7, #20]
    if (in->mouse.buttons[id].down == down) return;
 80150f4:	7afb      	ldrb	r3, [r7, #11]
 80150f6:	697a      	ldr	r2, [r7, #20]
 80150f8:	3310      	adds	r3, #16
 80150fa:	011b      	lsls	r3, r3, #4
 80150fc:	4413      	add	r3, r2
 80150fe:	3304      	adds	r3, #4
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	6a3a      	ldr	r2, [r7, #32]
 8015104:	429a      	cmp	r2, r3
 8015106:	d021      	beq.n	801514c <nk_input_button+0x84>

    btn = &in->mouse.buttons[id];
 8015108:	7afb      	ldrb	r3, [r7, #11]
 801510a:	3310      	adds	r3, #16
 801510c:	011b      	lsls	r3, r3, #4
 801510e:	697a      	ldr	r2, [r7, #20]
 8015110:	4413      	add	r3, r2
 8015112:	3304      	adds	r3, #4
 8015114:	613b      	str	r3, [r7, #16]
    btn->clicked_pos.x = (float)x;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	ee07 3a90 	vmov	s15, r3
 801511c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	edc3 7a02 	vstr	s15, [r3, #8]
    btn->clicked_pos.y = (float)y;
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	ee07 3a90 	vmov	s15, r3
 801512c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	edc3 7a03 	vstr	s15, [r3, #12]
    btn->down = down;
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	6a3a      	ldr	r2, [r7, #32]
 801513a:	601a      	str	r2, [r3, #0]
    btn->clicked++;
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	1c5a      	adds	r2, r3, #1
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	605a      	str	r2, [r3, #4]
 8015146:	e002      	b.n	801514e <nk_input_button+0x86>
    if (!ctx) return;
 8015148:	bf00      	nop
 801514a:	e000      	b.n	801514e <nk_input_button+0x86>
    if (in->mouse.buttons[id].down == down) return;
 801514c:	bf00      	nop
    {
        in->mouse.down_pos.x = btn->clicked_pos.x;
        in->mouse.down_pos.y = btn->clicked_pos.y;
    }
#endif
}
 801514e:	3718      	adds	r7, #24
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	0802891c 	.word	0x0802891c
 8015158:	0802a7bc 	.word	0x0802a7bc
 801515c:	08028920 	.word	0x08028920

08015160 <nk_input_has_mouse_click_in_rect>:
    return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 8015160:	b480      	push	{r7}
 8015162:	b089      	sub	sp, #36	; 0x24
 8015164:	af00      	add	r7, sp, #0
 8015166:	6178      	str	r0, [r7, #20]
 8015168:	460b      	mov	r3, r1
 801516a:	eeb0 6a40 	vmov.f32	s12, s0
 801516e:	eef0 6a60 	vmov.f32	s13, s1
 8015172:	eeb0 7a41 	vmov.f32	s14, s2
 8015176:	eef0 7a61 	vmov.f32	s15, s3
 801517a:	74fb      	strb	r3, [r7, #19]
 801517c:	ed87 6a00 	vstr	s12, [r7]
 8015180:	edc7 6a01 	vstr	s13, [r7, #4]
 8015184:	ed87 7a02 	vstr	s14, [r7, #8]
 8015188:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d101      	bne.n	8015196 <nk_input_has_mouse_click_in_rect+0x36>
 8015192:	2300      	movs	r3, #0
 8015194:	e059      	b.n	801524a <nk_input_has_mouse_click_in_rect+0xea>
    btn = &i->mouse.buttons[id];
 8015196:	7cfb      	ldrb	r3, [r7, #19]
 8015198:	3310      	adds	r3, #16
 801519a:	011b      	lsls	r3, r3, #4
 801519c:	697a      	ldr	r2, [r7, #20]
 801519e:	4413      	add	r3, r2
 80151a0:	3304      	adds	r3, #4
 80151a2:	61fb      	str	r3, [r7, #28]
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 80151a4:	ed97 7a00 	vldr	s14, [r7]
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80151ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151b6:	bf94      	ite	ls
 80151b8:	2301      	movls	r3, #1
 80151ba:	2300      	movhi	r3, #0
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	f083 0301 	eor.w	r3, r3, #1
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d13d      	bne.n	8015244 <nk_input_has_mouse_click_in_rect+0xe4>
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80151ce:	edd7 6a00 	vldr	s13, [r7]
 80151d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80151d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80151da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e2:	bf4c      	ite	mi
 80151e4:	2301      	movmi	r3, #1
 80151e6:	2300      	movpl	r3, #0
 80151e8:	b2db      	uxtb	r3, r3
 80151ea:	f083 0301 	eor.w	r3, r3, #1
 80151ee:	b2db      	uxtb	r3, r3
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d127      	bne.n	8015244 <nk_input_has_mouse_click_in_rect+0xe4>
 80151f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80151fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015206:	bf94      	ite	ls
 8015208:	2301      	movls	r3, #1
 801520a:	2300      	movhi	r3, #0
 801520c:	b2db      	uxtb	r3, r3
 801520e:	f083 0301 	eor.w	r3, r3, #1
 8015212:	b2db      	uxtb	r3, r3
 8015214:	2b00      	cmp	r3, #0
 8015216:	d115      	bne.n	8015244 <nk_input_has_mouse_click_in_rect+0xe4>
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	ed93 7a03 	vldr	s14, [r3, #12]
 801521e:	edd7 6a01 	vldr	s13, [r7, #4]
 8015222:	edd7 7a03 	vldr	s15, [r7, #12]
 8015226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801522a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015232:	bf4c      	ite	mi
 8015234:	2301      	movmi	r3, #1
 8015236:	2300      	movpl	r3, #0
 8015238:	b2db      	uxtb	r3, r3
 801523a:	f083 0301 	eor.w	r3, r3, #1
 801523e:	b2db      	uxtb	r3, r3
 8015240:	2b00      	cmp	r3, #0
 8015242:	d001      	beq.n	8015248 <nk_input_has_mouse_click_in_rect+0xe8>
        return nk_false;
 8015244:	2300      	movs	r3, #0
 8015246:	e000      	b.n	801524a <nk_input_has_mouse_click_in_rect+0xea>
    return nk_true;
 8015248:	2301      	movs	r3, #1
}
 801524a:	4618      	mov	r0, r3
 801524c:	3724      	adds	r7, #36	; 0x24
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr

08015256 <nk_input_has_mouse_click_in_button_rect>:
NK_API nk_bool
nk_input_has_mouse_click_in_button_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 8015256:	b480      	push	{r7}
 8015258:	b089      	sub	sp, #36	; 0x24
 801525a:	af00      	add	r7, sp, #0
 801525c:	6178      	str	r0, [r7, #20]
 801525e:	460b      	mov	r3, r1
 8015260:	eeb0 6a40 	vmov.f32	s12, s0
 8015264:	eef0 6a60 	vmov.f32	s13, s1
 8015268:	eeb0 7a41 	vmov.f32	s14, s2
 801526c:	eef0 7a61 	vmov.f32	s15, s3
 8015270:	74fb      	strb	r3, [r7, #19]
 8015272:	ed87 6a00 	vstr	s12, [r7]
 8015276:	edc7 6a01 	vstr	s13, [r7, #4]
 801527a:	ed87 7a02 	vstr	s14, [r7, #8]
 801527e:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d101      	bne.n	801528c <nk_input_has_mouse_click_in_button_rect+0x36>
 8015288:	2300      	movs	r3, #0
 801528a:	e059      	b.n	8015340 <nk_input_has_mouse_click_in_button_rect+0xea>
    btn = &i->mouse.buttons[id];
 801528c:	7cfb      	ldrb	r3, [r7, #19]
 801528e:	3310      	adds	r3, #16
 8015290:	011b      	lsls	r3, r3, #4
 8015292:	697a      	ldr	r2, [r7, #20]
 8015294:	4413      	add	r3, r2
 8015296:	3304      	adds	r3, #4
 8015298:	61fb      	str	r3, [r7, #28]
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h)
        || !NK_INBOX(i->mouse.down_pos.x,i->mouse.down_pos.y,b.x,b.y,b.w,b.h))
#else
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 801529a:	ed97 7a00 	vldr	s14, [r7]
 801529e:	69fb      	ldr	r3, [r7, #28]
 80152a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80152a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ac:	bf94      	ite	ls
 80152ae:	2301      	movls	r3, #1
 80152b0:	2300      	movhi	r3, #0
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	f083 0301 	eor.w	r3, r3, #1
 80152b8:	b2db      	uxtb	r3, r3
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d13d      	bne.n	801533a <nk_input_has_mouse_click_in_button_rect+0xe4>
 80152be:	69fb      	ldr	r3, [r7, #28]
 80152c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80152c4:	edd7 6a00 	vldr	s13, [r7]
 80152c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80152cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80152d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d8:	bf4c      	ite	mi
 80152da:	2301      	movmi	r3, #1
 80152dc:	2300      	movpl	r3, #0
 80152de:	b2db      	uxtb	r3, r3
 80152e0:	f083 0301 	eor.w	r3, r3, #1
 80152e4:	b2db      	uxtb	r3, r3
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d127      	bne.n	801533a <nk_input_has_mouse_click_in_button_rect+0xe4>
 80152ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80152f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152fc:	bf94      	ite	ls
 80152fe:	2301      	movls	r3, #1
 8015300:	2300      	movhi	r3, #0
 8015302:	b2db      	uxtb	r3, r3
 8015304:	f083 0301 	eor.w	r3, r3, #1
 8015308:	b2db      	uxtb	r3, r3
 801530a:	2b00      	cmp	r3, #0
 801530c:	d115      	bne.n	801533a <nk_input_has_mouse_click_in_button_rect+0xe4>
 801530e:	69fb      	ldr	r3, [r7, #28]
 8015310:	ed93 7a03 	vldr	s14, [r3, #12]
 8015314:	edd7 6a01 	vldr	s13, [r7, #4]
 8015318:	edd7 7a03 	vldr	s15, [r7, #12]
 801531c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015328:	bf4c      	ite	mi
 801532a:	2301      	movmi	r3, #1
 801532c:	2300      	movpl	r3, #0
 801532e:	b2db      	uxtb	r3, r3
 8015330:	f083 0301 	eor.w	r3, r3, #1
 8015334:	b2db      	uxtb	r3, r3
 8015336:	2b00      	cmp	r3, #0
 8015338:	d001      	beq.n	801533e <nk_input_has_mouse_click_in_button_rect+0xe8>
#endif
        return nk_false;
 801533a:	2300      	movs	r3, #0
 801533c:	e000      	b.n	8015340 <nk_input_has_mouse_click_in_button_rect+0xea>
    return nk_true;
 801533e:	2301      	movs	r3, #1
}
 8015340:	4618      	mov	r0, r3
 8015342:	3724      	adds	r7, #36	; 0x24
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr

0801534c <nk_input_has_mouse_click_down_in_rect>:
NK_API nk_bool
nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b08a      	sub	sp, #40	; 0x28
 8015350:	af00      	add	r7, sp, #0
 8015352:	61f8      	str	r0, [r7, #28]
 8015354:	460b      	mov	r3, r1
 8015356:	eeb0 6a40 	vmov.f32	s12, s0
 801535a:	eef0 6a60 	vmov.f32	s13, s1
 801535e:	eeb0 7a41 	vmov.f32	s14, s2
 8015362:	eef0 7a61 	vmov.f32	s15, s3
 8015366:	607a      	str	r2, [r7, #4]
 8015368:	76fb      	strb	r3, [r7, #27]
 801536a:	ed87 6a02 	vstr	s12, [r7, #8]
 801536e:	edc7 6a03 	vstr	s13, [r7, #12]
 8015372:	ed87 7a04 	vstr	s14, [r7, #16]
 8015376:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d101      	bne.n	8015384 <nk_input_has_mouse_click_down_in_rect+0x38>
 8015380:	2300      	movs	r3, #0
 8015382:	e026      	b.n	80153d2 <nk_input_has_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 8015384:	7efb      	ldrb	r3, [r7, #27]
 8015386:	3310      	adds	r3, #16
 8015388:	011b      	lsls	r3, r3, #4
 801538a:	69fa      	ldr	r2, [r7, #28]
 801538c:	4413      	add	r3, r2
 801538e:	3304      	adds	r3, #4
 8015390:	627b      	str	r3, [r7, #36]	; 0x24
    return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);
 8015392:	ed97 6a02 	vldr	s12, [r7, #8]
 8015396:	edd7 6a03 	vldr	s13, [r7, #12]
 801539a:	ed97 7a04 	vldr	s14, [r7, #16]
 801539e:	edd7 7a05 	vldr	s15, [r7, #20]
 80153a2:	7efb      	ldrb	r3, [r7, #27]
 80153a4:	eeb0 0a46 	vmov.f32	s0, s12
 80153a8:	eef0 0a66 	vmov.f32	s1, s13
 80153ac:	eeb0 1a47 	vmov.f32	s2, s14
 80153b0:	eef0 1a67 	vmov.f32	s3, s15
 80153b4:	4619      	mov	r1, r3
 80153b6:	69f8      	ldr	r0, [r7, #28]
 80153b8:	f7ff fed2 	bl	8015160 <nk_input_has_mouse_click_in_rect>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d006      	beq.n	80153d0 <nk_input_has_mouse_click_down_in_rect+0x84>
 80153c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	687a      	ldr	r2, [r7, #4]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d101      	bne.n	80153d0 <nk_input_has_mouse_click_down_in_rect+0x84>
 80153cc:	2301      	movs	r3, #1
 80153ce:	e000      	b.n	80153d2 <nk_input_has_mouse_click_down_in_rect+0x86>
 80153d0:	2300      	movs	r3, #0
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3728      	adds	r7, #40	; 0x28
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}

080153da <nk_input_is_mouse_click_down_in_rect>:
            btn->clicked) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_is_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 80153da:	b580      	push	{r7, lr}
 80153dc:	b08a      	sub	sp, #40	; 0x28
 80153de:	af00      	add	r7, sp, #0
 80153e0:	61f8      	str	r0, [r7, #28]
 80153e2:	460b      	mov	r3, r1
 80153e4:	eeb0 6a40 	vmov.f32	s12, s0
 80153e8:	eef0 6a60 	vmov.f32	s13, s1
 80153ec:	eeb0 7a41 	vmov.f32	s14, s2
 80153f0:	eef0 7a61 	vmov.f32	s15, s3
 80153f4:	607a      	str	r2, [r7, #4]
 80153f6:	76fb      	strb	r3, [r7, #27]
 80153f8:	ed87 6a02 	vstr	s12, [r7, #8]
 80153fc:	edc7 6a03 	vstr	s13, [r7, #12]
 8015400:	ed87 7a04 	vstr	s14, [r7, #16]
 8015404:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d101      	bne.n	8015412 <nk_input_is_mouse_click_down_in_rect+0x38>
 801540e:	2300      	movs	r3, #0
 8015410:	e026      	b.n	8015460 <nk_input_is_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 8015412:	7efb      	ldrb	r3, [r7, #27]
 8015414:	3310      	adds	r3, #16
 8015416:	011b      	lsls	r3, r3, #4
 8015418:	69fa      	ldr	r2, [r7, #28]
 801541a:	4413      	add	r3, r2
 801541c:	3304      	adds	r3, #4
 801541e:	627b      	str	r3, [r7, #36]	; 0x24
    return (nk_input_has_mouse_click_down_in_rect(i, id, b, down) &&
 8015420:	ed97 6a02 	vldr	s12, [r7, #8]
 8015424:	edd7 6a03 	vldr	s13, [r7, #12]
 8015428:	ed97 7a04 	vldr	s14, [r7, #16]
 801542c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015430:	7efb      	ldrb	r3, [r7, #27]
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	eeb0 0a46 	vmov.f32	s0, s12
 8015438:	eef0 0a66 	vmov.f32	s1, s13
 801543c:	eeb0 1a47 	vmov.f32	s2, s14
 8015440:	eef0 1a67 	vmov.f32	s3, s15
 8015444:	4619      	mov	r1, r3
 8015446:	69f8      	ldr	r0, [r7, #28]
 8015448:	f7ff ff80 	bl	801534c <nk_input_has_mouse_click_down_in_rect>
 801544c:	4603      	mov	r3, r0
            btn->clicked) ? nk_true : nk_false;
 801544e:	2b00      	cmp	r3, #0
 8015450:	d005      	beq.n	801545e <nk_input_is_mouse_click_down_in_rect+0x84>
 8015452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d001      	beq.n	801545e <nk_input_is_mouse_click_down_in_rect+0x84>
 801545a:	2301      	movs	r3, #1
 801545c:	e000      	b.n	8015460 <nk_input_is_mouse_click_down_in_rect+0x86>
 801545e:	2300      	movs	r3, #0
}
 8015460:	4618      	mov	r0, r3
 8015462:	3728      	adds	r7, #40	; 0x28
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <nk_input_is_mouse_hovering_rect>:
        down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);
    return down;
}
NK_API nk_bool
nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8015468:	b480      	push	{r7}
 801546a:	b087      	sub	sp, #28
 801546c:	af00      	add	r7, sp, #0
 801546e:	6178      	str	r0, [r7, #20]
 8015470:	eeb0 6a40 	vmov.f32	s12, s0
 8015474:	eef0 6a60 	vmov.f32	s13, s1
 8015478:	eeb0 7a41 	vmov.f32	s14, s2
 801547c:	eef0 7a61 	vmov.f32	s15, s3
 8015480:	ed87 6a01 	vstr	s12, [r7, #4]
 8015484:	edc7 6a02 	vstr	s13, [r7, #8]
 8015488:	ed87 7a03 	vstr	s14, [r7, #12]
 801548c:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d101      	bne.n	801549a <nk_input_is_mouse_hovering_rect+0x32>
 8015496:	2300      	movs	r3, #0
 8015498:	e032      	b.n	8015500 <nk_input_is_mouse_hovering_rect+0x98>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 801549a:	ed97 7a01 	vldr	s14, [r7, #4]
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80154a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ac:	d827      	bhi.n	80154fe <nk_input_is_mouse_hovering_rect+0x96>
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80154b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80154b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80154bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c8:	d519      	bpl.n	80154fe <nk_input_is_mouse_hovering_rect+0x96>
 80154ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80154d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154dc:	d80f      	bhi.n	80154fe <nk_input_is_mouse_hovering_rect+0x96>
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80154e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80154e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80154ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f8:	d501      	bpl.n	80154fe <nk_input_is_mouse_hovering_rect+0x96>
 80154fa:	2301      	movs	r3, #1
 80154fc:	e000      	b.n	8015500 <nk_input_is_mouse_hovering_rect+0x98>
 80154fe:	2300      	movs	r3, #0
}
 8015500:	4618      	mov	r0, r3
 8015502:	371c      	adds	r7, #28
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr

0801550c <nk_input_is_mouse_prev_hovering_rect>:
NK_API nk_bool
nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 801550c:	b480      	push	{r7}
 801550e:	b087      	sub	sp, #28
 8015510:	af00      	add	r7, sp, #0
 8015512:	6178      	str	r0, [r7, #20]
 8015514:	eeb0 6a40 	vmov.f32	s12, s0
 8015518:	eef0 6a60 	vmov.f32	s13, s1
 801551c:	eeb0 7a41 	vmov.f32	s14, s2
 8015520:	eef0 7a61 	vmov.f32	s15, s3
 8015524:	ed87 6a01 	vstr	s12, [r7, #4]
 8015528:	edc7 6a02 	vstr	s13, [r7, #8]
 801552c:	ed87 7a03 	vstr	s14, [r7, #12]
 8015530:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d101      	bne.n	801553e <nk_input_is_mouse_prev_hovering_rect+0x32>
 801553a:	2300      	movs	r3, #0
 801553c:	e032      	b.n	80155a4 <nk_input_is_mouse_prev_hovering_rect+0x98>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 801553e:	ed97 7a01 	vldr	s14, [r7, #4]
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8015548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801554c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015550:	d827      	bhi.n	80155a2 <nk_input_is_mouse_prev_hovering_rect+0x96>
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8015558:	edd7 6a01 	vldr	s13, [r7, #4]
 801555c:	edd7 7a03 	vldr	s15, [r7, #12]
 8015560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556c:	d519      	bpl.n	80155a2 <nk_input_is_mouse_prev_hovering_rect+0x96>
 801556e:	ed97 7a02 	vldr	s14, [r7, #8]
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8015578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015580:	d80f      	bhi.n	80155a2 <nk_input_is_mouse_prev_hovering_rect+0x96>
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8015588:	edd7 6a02 	vldr	s13, [r7, #8]
 801558c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801559c:	d501      	bpl.n	80155a2 <nk_input_is_mouse_prev_hovering_rect+0x96>
 801559e:	2301      	movs	r3, #1
 80155a0:	e000      	b.n	80155a4 <nk_input_is_mouse_prev_hovering_rect+0x98>
 80155a2:	2300      	movs	r3, #0
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	371c      	adds	r7, #28
 80155a8:	46bd      	mov	sp, r7
 80155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ae:	4770      	bx	lr

080155b0 <nk_input_is_mouse_down>:
    if (!nk_input_is_mouse_hovering_rect(i, rect)) return nk_false;
    return nk_input_is_mouse_click_in_rect(i, id, rect);
}
NK_API nk_bool
nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)
{
 80155b0:	b480      	push	{r7}
 80155b2:	b083      	sub	sp, #12
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	460b      	mov	r3, r1
 80155ba:	70fb      	strb	r3, [r7, #3]
    if (!i) return nk_false;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d101      	bne.n	80155c6 <nk_input_is_mouse_down+0x16>
 80155c2:	2300      	movs	r3, #0
 80155c4:	e006      	b.n	80155d4 <nk_input_is_mouse_down+0x24>
    return i->mouse.buttons[id].down;
 80155c6:	78fb      	ldrb	r3, [r7, #3]
 80155c8:	687a      	ldr	r2, [r7, #4]
 80155ca:	3310      	adds	r3, #16
 80155cc:	011b      	lsls	r3, r3, #4
 80155ce:	4413      	add	r3, r2
 80155d0:	3304      	adds	r3, #4
 80155d2:	681b      	ldr	r3, [r3, #0]
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	370c      	adds	r7, #12
 80155d8:	46bd      	mov	sp, r7
 80155da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155de:	4770      	bx	lr

080155e0 <nk_input_is_mouse_pressed>:
NK_API nk_bool
nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	460b      	mov	r3, r1
 80155ea:	70fb      	strb	r3, [r7, #3]
    const struct nk_mouse_button *b;
    if (!i) return nk_false;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d101      	bne.n	80155f6 <nk_input_is_mouse_pressed+0x16>
 80155f2:	2300      	movs	r3, #0
 80155f4:	e011      	b.n	801561a <nk_input_is_mouse_pressed+0x3a>
    b = &i->mouse.buttons[id];
 80155f6:	78fb      	ldrb	r3, [r7, #3]
 80155f8:	3310      	adds	r3, #16
 80155fa:	011b      	lsls	r3, r3, #4
 80155fc:	687a      	ldr	r2, [r7, #4]
 80155fe:	4413      	add	r3, r2
 8015600:	3304      	adds	r3, #4
 8015602:	60fb      	str	r3, [r7, #12]
    if (b->down && b->clicked)
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d005      	beq.n	8015618 <nk_input_is_mouse_pressed+0x38>
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d001      	beq.n	8015618 <nk_input_is_mouse_pressed+0x38>
        return nk_true;
 8015614:	2301      	movs	r3, #1
 8015616:	e000      	b.n	801561a <nk_input_is_mouse_pressed+0x3a>
    return nk_false;
 8015618:	2300      	movs	r3, #0
}
 801561a:	4618      	mov	r0, r3
 801561c:	3714      	adds	r7, #20
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr

08015626 <nk_input_is_key_pressed>:
    if (!i) return nk_false;
    return (!i->mouse.buttons[id].down && i->mouse.buttons[id].clicked);
}
NK_API nk_bool
nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)
{
 8015626:	b480      	push	{r7}
 8015628:	b085      	sub	sp, #20
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
 801562e:	460b      	mov	r3, r1
 8015630:	70fb      	strb	r3, [r7, #3]
    const struct nk_key *k;
    if (!i) return nk_false;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d101      	bne.n	801563c <nk_input_is_key_pressed+0x16>
 8015638:	2300      	movs	r3, #0
 801563a:	e017      	b.n	801566c <nk_input_is_key_pressed+0x46>
    k = &i->keyboard.keys[key];
 801563c:	78fb      	ldrb	r3, [r7, #3]
 801563e:	00db      	lsls	r3, r3, #3
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	4413      	add	r3, r2
 8015644:	60fb      	str	r3, [r7, #12]
    if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d003      	beq.n	8015656 <nk_input_is_key_pressed+0x30>
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d107      	bne.n	8015666 <nk_input_is_key_pressed+0x40>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d105      	bne.n	801566a <nk_input_is_key_pressed+0x44>
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	2b01      	cmp	r3, #1
 8015664:	d901      	bls.n	801566a <nk_input_is_key_pressed+0x44>
        return nk_true;
 8015666:	2301      	movs	r3, #1
 8015668:	e000      	b.n	801566c <nk_input_is_key_pressed+0x46>
    return nk_false;
 801566a:	2300      	movs	r3, #0
}
 801566c:	4618      	mov	r0, r3
 801566e:	3714      	adds	r7, #20
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr

08015678 <nk_layout_set_min_row_height>:
 *                          LAYOUT
 *
 * ===============================================================*/
NK_API void
nk_layout_set_min_row_height(struct nk_context *ctx, float height)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	ed87 0a00 	vstr	s0, [r7]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d105      	bne.n	8015696 <nk_layout_set_min_row_height+0x1e>
 801568a:	4b23      	ldr	r3, [pc, #140]	; (8015718 <nk_layout_set_min_row_height+0xa0>)
 801568c:	4a23      	ldr	r2, [pc, #140]	; (801571c <nk_layout_set_min_row_height+0xa4>)
 801568e:	210f      	movs	r1, #15
 8015690:	4823      	ldr	r0, [pc, #140]	; (8015720 <nk_layout_set_min_row_height+0xa8>)
 8015692:	f00f fa21 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801569c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d105      	bne.n	80156b0 <nk_layout_set_min_row_height+0x38>
 80156a4:	4b1f      	ldr	r3, [pc, #124]	; (8015724 <nk_layout_set_min_row_height+0xac>)
 80156a6:	4a1d      	ldr	r2, [pc, #116]	; (801571c <nk_layout_set_min_row_height+0xa4>)
 80156a8:	2110      	movs	r1, #16
 80156aa:	481d      	ldr	r0, [pc, #116]	; (8015720 <nk_layout_set_min_row_height+0xa8>)
 80156ac:	f00f fa14 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156b6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d105      	bne.n	80156ce <nk_layout_set_min_row_height+0x56>
 80156c2:	4b19      	ldr	r3, [pc, #100]	; (8015728 <nk_layout_set_min_row_height+0xb0>)
 80156c4:	4a15      	ldr	r2, [pc, #84]	; (801571c <nk_layout_set_min_row_height+0xa4>)
 80156c6:	2111      	movs	r1, #17
 80156c8:	4815      	ldr	r0, [pc, #84]	; (8015720 <nk_layout_set_min_row_height+0xa8>)
 80156ca:	f00f fa05 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d01d      	beq.n	8015710 <nk_layout_set_min_row_height+0x98>
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156da:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d016      	beq.n	8015710 <nk_layout_set_min_row_height+0x98>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156e8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d00d      	beq.n	8015710 <nk_layout_set_min_row_height+0x98>
        return;

    win = ctx->current;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156fe:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015706:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = height;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	671a      	str	r2, [r3, #112]	; 0x70
 801570e:	e000      	b.n	8015712 <nk_layout_set_min_row_height+0x9a>
        return;
 8015710:	bf00      	nop
}
 8015712:	3710      	adds	r7, #16
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}
 8015718:	0802893c 	.word	0x0802893c
 801571c:	0802a7cc 	.word	0x0802a7cc
 8015720:	08028940 	.word	0x08028940
 8015724:	0802895c 	.word	0x0802895c
 8015728:	0802896c 	.word	0x0802896c

0801572c <nk_layout_reset_min_row_height>:
NK_API void
nk_layout_reset_min_row_height(struct nk_context *ctx)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b084      	sub	sp, #16
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d105      	bne.n	8015746 <nk_layout_reset_min_row_height+0x1a>
 801573a:	4b34      	ldr	r3, [pc, #208]	; (801580c <nk_layout_reset_min_row_height+0xe0>)
 801573c:	4a34      	ldr	r2, [pc, #208]	; (8015810 <nk_layout_reset_min_row_height+0xe4>)
 801573e:	211f      	movs	r1, #31
 8015740:	4834      	ldr	r0, [pc, #208]	; (8015814 <nk_layout_reset_min_row_height+0xe8>)
 8015742:	f00f f9c9 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801574c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015750:	2b00      	cmp	r3, #0
 8015752:	d105      	bne.n	8015760 <nk_layout_reset_min_row_height+0x34>
 8015754:	4b30      	ldr	r3, [pc, #192]	; (8015818 <nk_layout_reset_min_row_height+0xec>)
 8015756:	4a2e      	ldr	r2, [pc, #184]	; (8015810 <nk_layout_reset_min_row_height+0xe4>)
 8015758:	2120      	movs	r1, #32
 801575a:	482e      	ldr	r0, [pc, #184]	; (8015814 <nk_layout_reset_min_row_height+0xe8>)
 801575c:	f00f f9bc 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015766:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801576a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801576e:	2b00      	cmp	r3, #0
 8015770:	d105      	bne.n	801577e <nk_layout_reset_min_row_height+0x52>
 8015772:	4b2a      	ldr	r3, [pc, #168]	; (801581c <nk_layout_reset_min_row_height+0xf0>)
 8015774:	4a26      	ldr	r2, [pc, #152]	; (8015810 <nk_layout_reset_min_row_height+0xe4>)
 8015776:	2121      	movs	r1, #33	; 0x21
 8015778:	4826      	ldr	r0, [pc, #152]	; (8015814 <nk_layout_reset_min_row_height+0xe8>)
 801577a:	f00f f9ad 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d03e      	beq.n	8015802 <nk_layout_reset_min_row_height+0xd6>
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801578a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801578e:	2b00      	cmp	r3, #0
 8015790:	d037      	beq.n	8015802 <nk_layout_reset_min_row_height+0xd6>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015798:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801579c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d02e      	beq.n	8015802 <nk_layout_reset_min_row_height+0xd6>
        return;

    win = ctx->current;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80157aa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80157ae:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157b6:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = ctx->style.font->height;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80157be:	685a      	ldr	r2, [r3, #4]
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	671a      	str	r2, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.text.padding.y*2;
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 80157d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80157d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.window.min_row_height_padding*2;
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80157ea:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 80157ee:	edd3 7a00 	vldr	s15, [r3]
 80157f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80157f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8015800:	e000      	b.n	8015804 <nk_layout_reset_min_row_height+0xd8>
        return;
 8015802:	bf00      	nop
}
 8015804:	3710      	adds	r7, #16
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	0802893c 	.word	0x0802893c
 8015810:	0802a7ec 	.word	0x0802a7ec
 8015814:	08028940 	.word	0x08028940
 8015818:	0802895c 	.word	0x0802895c
 801581c:	0802896c 	.word	0x0802896c

08015820 <nk_layout_row_calculate_usable_space>:
NK_LIB float
nk_layout_row_calculate_usable_space(const struct nk_style *style, enum nk_panel_type type,
    float total_space, int columns)
{
 8015820:	b480      	push	{r7}
 8015822:	b089      	sub	sp, #36	; 0x24
 8015824:	af00      	add	r7, sp, #0
 8015826:	60f8      	str	r0, [r7, #12]
 8015828:	460b      	mov	r3, r1
 801582a:	ed87 0a01 	vstr	s0, [r7, #4]
 801582e:	603a      	str	r2, [r7, #0]
 8015830:	72fb      	strb	r3, [r7, #11]

    struct nk_vec2 spacing;

    NK_UNUSED(type);

    spacing = style->window.spacing;
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015838:	461a      	mov	r2, r3
 801583a:	f107 0310 	add.w	r3, r7, #16
 801583e:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8015842:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015846:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate the usable panel space */
    panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	dd06      	ble.n	801585e <nk_layout_row_calculate_usable_space+0x3e>
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	3b01      	subs	r3, #1
 8015854:	ee07 3a90 	vmov	s15, r3
 8015858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801585c:	e001      	b.n	8015862 <nk_layout_row_calculate_usable_space+0x42>
 801585e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015894 <nk_layout_row_calculate_usable_space+0x74>
 8015862:	ed97 7a04 	vldr	s14, [r7, #16]
 8015866:	ee67 7a87 	vmul.f32	s15, s15, s14
 801586a:	edc7 7a07 	vstr	s15, [r7, #28]
    panel_space  = total_space - panel_spacing;
 801586e:	ed97 7a01 	vldr	s14, [r7, #4]
 8015872:	edd7 7a07 	vldr	s15, [r7, #28]
 8015876:	ee77 7a67 	vsub.f32	s15, s14, s15
 801587a:	edc7 7a06 	vstr	s15, [r7, #24]
    return panel_space;
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	ee07 3a90 	vmov	s15, r3
}
 8015884:	eeb0 0a67 	vmov.f32	s0, s15
 8015888:	3724      	adds	r7, #36	; 0x24
 801588a:	46bd      	mov	sp, r7
 801588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015890:	4770      	bx	lr
 8015892:	bf00      	nop
 8015894:	00000000 	.word	0x00000000

08015898 <nk_panel_layout>:
NK_LIB void
nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,
    float height, int cols)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b08e      	sub	sp, #56	; 0x38
 801589c:	af00      	add	r7, sp, #0
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80158a6:	603a      	str	r2, [r7, #0]
    struct nk_command_buffer *out;

    struct nk_vec2 item_spacing;
    struct nk_color color;

    NK_ASSERT(ctx);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d105      	bne.n	80158ba <nk_panel_layout+0x22>
 80158ae:	4b78      	ldr	r3, [pc, #480]	; (8015a90 <nk_panel_layout+0x1f8>)
 80158b0:	4a78      	ldr	r2, [pc, #480]	; (8015a94 <nk_panel_layout+0x1fc>)
 80158b2:	2148      	movs	r1, #72	; 0x48
 80158b4:	4878      	ldr	r0, [pc, #480]	; (8015a98 <nk_panel_layout+0x200>)
 80158b6:	f00f f90f 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158c0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d105      	bne.n	80158d4 <nk_panel_layout+0x3c>
 80158c8:	4b74      	ldr	r3, [pc, #464]	; (8015a9c <nk_panel_layout+0x204>)
 80158ca:	4a72      	ldr	r2, [pc, #456]	; (8015a94 <nk_panel_layout+0x1fc>)
 80158cc:	2149      	movs	r1, #73	; 0x49
 80158ce:	4872      	ldr	r0, [pc, #456]	; (8015a98 <nk_panel_layout+0x200>)
 80158d0:	f00f f902 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158da:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80158de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d105      	bne.n	80158f2 <nk_panel_layout+0x5a>
 80158e6:	4b6e      	ldr	r3, [pc, #440]	; (8015aa0 <nk_panel_layout+0x208>)
 80158e8:	4a6a      	ldr	r2, [pc, #424]	; (8015a94 <nk_panel_layout+0x1fc>)
 80158ea:	214a      	movs	r1, #74	; 0x4a
 80158ec:	486a      	ldr	r0, [pc, #424]	; (8015a98 <nk_panel_layout+0x200>)
 80158ee:	f00f f8f3 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	f000 80c6 	beq.w	8015a86 <nk_panel_layout+0x1ee>
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015900:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015904:	2b00      	cmp	r3, #0
 8015906:	f000 80be 	beq.w	8015a86 <nk_panel_layout+0x1ee>
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015910:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015918:	2b00      	cmp	r3, #0
 801591a:	f000 80b4 	beq.w	8015a86 <nk_panel_layout+0x1ee>
        return;

    /* prefetch some configuration data */
    layout = win->layout;
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015924:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801592c:	633b      	str	r3, [r7, #48]	; 0x30
    out = &win->buffer;
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	3364      	adds	r3, #100	; 0x64
 8015932:	62fb      	str	r3, [r7, #44]	; 0x2c
    color = style->window.background;
 8015934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801593a:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801593e:	623b      	str	r3, [r7, #32]
    item_spacing = style->window.spacing;
 8015940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015946:	461a      	mov	r2, r3
 8015948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801594c:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8015950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015954:	e883 0003 	stmia.w	r3, {r0, r1}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 8015958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015960:	2b00      	cmp	r3, #0
 8015962:	d005      	beq.n	8015970 <nk_panel_layout+0xd8>
 8015964:	4b4f      	ldr	r3, [pc, #316]	; (8015aa4 <nk_panel_layout+0x20c>)
 8015966:	4a4b      	ldr	r2, [pc, #300]	; (8015a94 <nk_panel_layout+0x1fc>)
 8015968:	215a      	movs	r1, #90	; 0x5a
 801596a:	484b      	ldr	r0, [pc, #300]	; (8015a98 <nk_panel_layout+0x200>)
 801596c:	f00f f8b4 	bl	8024ad8 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 8015970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015978:	2b00      	cmp	r3, #0
 801597a:	d005      	beq.n	8015988 <nk_panel_layout+0xf0>
 801597c:	4b4a      	ldr	r3, [pc, #296]	; (8015aa8 <nk_panel_layout+0x210>)
 801597e:	4a45      	ldr	r2, [pc, #276]	; (8015a94 <nk_panel_layout+0x1fc>)
 8015980:	215b      	movs	r1, #91	; 0x5b
 8015982:	4845      	ldr	r0, [pc, #276]	; (8015a98 <nk_panel_layout+0x200>)
 8015984:	f00f f8a8 	bl	8024ad8 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 8015988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015990:	2b00      	cmp	r3, #0
 8015992:	d005      	beq.n	80159a0 <nk_panel_layout+0x108>
 8015994:	4b45      	ldr	r3, [pc, #276]	; (8015aac <nk_panel_layout+0x214>)
 8015996:	4a3f      	ldr	r2, [pc, #252]	; (8015a94 <nk_panel_layout+0x1fc>)
 8015998:	215c      	movs	r1, #92	; 0x5c
 801599a:	483f      	ldr	r0, [pc, #252]	; (8015a98 <nk_panel_layout+0x200>)
 801599c:	f00f f89c 	bl	8024ad8 <__assert_func>

    /* update the current row and set the current row layout */
    layout->row.index = 0;
 80159a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159a2:	2200      	movs	r2, #0
 80159a4:	669a      	str	r2, [r3, #104]	; 0x68
    layout->at_y += layout->row.height;
 80159a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159a8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80159ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159ae:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80159b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    layout->row.columns = cols;
 80159bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159be:	683a      	ldr	r2, [r7, #0]
 80159c0:	675a      	str	r2, [r3, #116]	; 0x74
    if (height == 0.0f)
 80159c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80159c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80159ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ce:	d117      	bne.n	8015a00 <nk_panel_layout+0x168>
        layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;
 80159d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159d2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80159d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80159da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159e2:	d503      	bpl.n	80159ec <nk_panel_layout+0x154>
 80159e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159e6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80159ea:	e001      	b.n	80159f0 <nk_panel_layout+0x158>
 80159ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80159f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80159f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80159f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159fa:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 80159fe:	e008      	b.n	8015a12 <nk_panel_layout+0x17a>
    else layout->row.height = height + item_spacing.y;
 8015a00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8015a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a0e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    layout->row.item_offset = 0;
 8015a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a14:	f04f 0200 	mov.w	r2, #0
 8015a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (layout->flags & NK_WINDOW_DYNAMIC) {
 8015a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a1e:	685b      	ldr	r3, [r3, #4]
 8015a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d02f      	beq.n	8015a88 <nk_panel_layout+0x1f0>
        /* draw background for dynamic panels */
        struct nk_rect background;
        background.x = win->bounds.x;
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a2c:	613b      	str	r3, [r7, #16]
        background.w = win->bounds.w;
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a32:	61bb      	str	r3, [r7, #24]
        background.y = layout->at_y - 1.0f;
 8015a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a36:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8015a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a42:	edc7 7a05 	vstr	s15, [r7, #20]
        background.h = layout->row.height + 1.0f;
 8015a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a48:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8015a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a54:	edc7 7a07 	vstr	s15, [r7, #28]
        nk_fill_rect(out, background, 0, color);
 8015a58:	ed97 6a04 	vldr	s12, [r7, #16]
 8015a5c:	edd7 6a05 	vldr	s13, [r7, #20]
 8015a60:	ed97 7a06 	vldr	s14, [r7, #24]
 8015a64:	edd7 7a07 	vldr	s15, [r7, #28]
 8015a68:	6a39      	ldr	r1, [r7, #32]
 8015a6a:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8015ab0 <nk_panel_layout+0x218>
 8015a6e:	eeb0 0a46 	vmov.f32	s0, s12
 8015a72:	eef0 0a66 	vmov.f32	s1, s13
 8015a76:	eeb0 1a47 	vmov.f32	s2, s14
 8015a7a:	eef0 1a67 	vmov.f32	s3, s15
 8015a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a80:	f7fc f80e 	bl	8011aa0 <nk_fill_rect>
 8015a84:	e000      	b.n	8015a88 <nk_panel_layout+0x1f0>
        return;
 8015a86:	bf00      	nop
    }
}
 8015a88:	3738      	adds	r7, #56	; 0x38
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	0802893c 	.word	0x0802893c
 8015a94:	0802a80c 	.word	0x0802a80c
 8015a98:	08028940 	.word	0x08028940
 8015a9c:	0802895c 	.word	0x0802895c
 8015aa0:	0802896c 	.word	0x0802896c
 8015aa4:	08028984 	.word	0x08028984
 8015aa8:	080289ac 	.word	0x080289ac
 8015aac:	080289d0 	.word	0x080289d0
 8015ab0:	00000000 	.word	0x00000000

08015ab4 <nk_row_layout>:
NK_LIB void
nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, int width)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b088      	sub	sp, #32
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6178      	str	r0, [r7, #20]
 8015abc:	ed87 0a03 	vstr	s0, [r7, #12]
 8015ac0:	60ba      	str	r2, [r7, #8]
 8015ac2:	607b      	str	r3, [r7, #4]
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	74fb      	strb	r3, [r7, #19]
    /* update the current row and set the current row layout */
    struct nk_window *win;
    NK_ASSERT(ctx);
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d105      	bne.n	8015ada <nk_row_layout+0x26>
 8015ace:	4b3a      	ldr	r3, [pc, #232]	; (8015bb8 <nk_row_layout+0x104>)
 8015ad0:	4a3a      	ldr	r2, [pc, #232]	; (8015bbc <nk_row_layout+0x108>)
 8015ad2:	2177      	movs	r1, #119	; 0x77
 8015ad4:	483a      	ldr	r0, [pc, #232]	; (8015bc0 <nk_row_layout+0x10c>)
 8015ad6:	f00e ffff 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015ae0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d105      	bne.n	8015af4 <nk_row_layout+0x40>
 8015ae8:	4b36      	ldr	r3, [pc, #216]	; (8015bc4 <nk_row_layout+0x110>)
 8015aea:	4a34      	ldr	r2, [pc, #208]	; (8015bbc <nk_row_layout+0x108>)
 8015aec:	2178      	movs	r1, #120	; 0x78
 8015aee:	4834      	ldr	r0, [pc, #208]	; (8015bc0 <nk_row_layout+0x10c>)
 8015af0:	f00e fff2 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015afa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d105      	bne.n	8015b12 <nk_row_layout+0x5e>
 8015b06:	4b30      	ldr	r3, [pc, #192]	; (8015bc8 <nk_row_layout+0x114>)
 8015b08:	4a2c      	ldr	r2, [pc, #176]	; (8015bbc <nk_row_layout+0x108>)
 8015b0a:	2179      	movs	r1, #121	; 0x79
 8015b0c:	482c      	ldr	r0, [pc, #176]	; (8015bc0 <nk_row_layout+0x10c>)
 8015b0e:	f00e ffe3 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d04a      	beq.n	8015bae <nk_row_layout+0xfa>
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b1e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d043      	beq.n	8015bae <nk_row_layout+0xfa>
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b2c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d03a      	beq.n	8015bae <nk_row_layout+0xfa>
        return;

    win = ctx->current;
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b3e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015b42:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8015b44:	68ba      	ldr	r2, [r7, #8]
 8015b46:	ed97 0a03 	vldr	s0, [r7, #12]
 8015b4a:	69f9      	ldr	r1, [r7, #28]
 8015b4c:	6978      	ldr	r0, [r7, #20]
 8015b4e:	f7ff fea3 	bl	8015898 <nk_panel_layout>
    if (fmt == NK_DYNAMIC)
 8015b52:	7cfb      	ldrb	r3, [r7, #19]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d106      	bne.n	8015b66 <nk_row_layout+0xb2>
        win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;
 8015b58:	69fb      	ldr	r3, [r7, #28]
 8015b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b5e:	2200      	movs	r2, #0
 8015b60:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8015b64:	e005      	b.n	8015b72 <nk_row_layout+0xbe>
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;
 8015b66:	69fb      	ldr	r3, [r7, #28]
 8015b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b6c:	2204      	movs	r2, #4
 8015b6e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    win->layout->row.ratio = 0;
 8015b72:	69fb      	ldr	r3, [r7, #28]
 8015b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b78:	2200      	movs	r2, #0
 8015b7a:	679a      	str	r2, [r3, #120]	; 0x78
    win->layout->row.filled = 0;
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b82:	f04f 0200 	mov.w	r2, #0
 8015b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    win->layout->row.item_offset = 0;
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b90:	f04f 0200 	mov.w	r2, #0
 8015b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    win->layout->row.item_width = (float)width;
 8015b98:	69fb      	ldr	r3, [r7, #28]
 8015b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b9e:	687a      	ldr	r2, [r7, #4]
 8015ba0:	ee07 2a90 	vmov	s15, r2
 8015ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ba8:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8015bac:	e000      	b.n	8015bb0 <nk_row_layout+0xfc>
        return;
 8015bae:	bf00      	nop
}
 8015bb0:	3720      	adds	r7, #32
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	0802893c 	.word	0x0802893c
 8015bbc:	0802a81c 	.word	0x0802a81c
 8015bc0:	08028940 	.word	0x08028940
 8015bc4:	0802895c 	.word	0x0802895c
 8015bc8:	0802896c 	.word	0x0802896c

08015bcc <nk_layout_row_dynamic>:
    win = ctx->current;
    return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);
}
NK_API void
nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b084      	sub	sp, #16
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	60f8      	str	r0, [r7, #12]
 8015bd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8015bd8:	6079      	str	r1, [r7, #4]
    nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);
 8015bda:	2300      	movs	r3, #0
 8015bdc:	687a      	ldr	r2, [r7, #4]
 8015bde:	ed97 0a02 	vldr	s0, [r7, #8]
 8015be2:	2100      	movs	r1, #0
 8015be4:	68f8      	ldr	r0, [r7, #12]
 8015be6:	f7ff ff65 	bl	8015ab4 <nk_row_layout>
}
 8015bea:	bf00      	nop
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
	...

08015bf4 <nk_layout_row>:
    layout->row.item_offset = 0;
}
NK_API void
nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, const float *ratio)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08c      	sub	sp, #48	; 0x30
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6178      	str	r0, [r7, #20]
 8015bfc:	ed87 0a03 	vstr	s0, [r7, #12]
 8015c00:	60ba      	str	r2, [r7, #8]
 8015c02:	607b      	str	r3, [r7, #4]
 8015c04:	460b      	mov	r3, r1
 8015c06:	74fb      	strb	r3, [r7, #19]
    int i;
    int n_undef = 0;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d105      	bne.n	8015c1e <nk_layout_row+0x2a>
 8015c12:	4b73      	ldr	r3, [pc, #460]	; (8015de0 <nk_layout_row+0x1ec>)
 8015c14:	4a73      	ldr	r2, [pc, #460]	; (8015de4 <nk_layout_row+0x1f0>)
 8015c16:	21ed      	movs	r1, #237	; 0xed
 8015c18:	4873      	ldr	r0, [pc, #460]	; (8015de8 <nk_layout_row+0x1f4>)
 8015c1a:	f00e ff5d 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8015c1e:	697b      	ldr	r3, [r7, #20]
 8015c20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c24:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d105      	bne.n	8015c38 <nk_layout_row+0x44>
 8015c2c:	4b6f      	ldr	r3, [pc, #444]	; (8015dec <nk_layout_row+0x1f8>)
 8015c2e:	4a6d      	ldr	r2, [pc, #436]	; (8015de4 <nk_layout_row+0x1f0>)
 8015c30:	21ee      	movs	r1, #238	; 0xee
 8015c32:	486d      	ldr	r0, [pc, #436]	; (8015de8 <nk_layout_row+0x1f4>)
 8015c34:	f00e ff50 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c3e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d105      	bne.n	8015c56 <nk_layout_row+0x62>
 8015c4a:	4b69      	ldr	r3, [pc, #420]	; (8015df0 <nk_layout_row+0x1fc>)
 8015c4c:	4a65      	ldr	r2, [pc, #404]	; (8015de4 <nk_layout_row+0x1f0>)
 8015c4e:	21ef      	movs	r1, #239	; 0xef
 8015c50:	4865      	ldr	r0, [pc, #404]	; (8015de8 <nk_layout_row+0x1f4>)
 8015c52:	f00e ff41 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f000 80bd 	beq.w	8015dd8 <nk_layout_row+0x1e4>
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c64:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	f000 80b5 	beq.w	8015dd8 <nk_layout_row+0x1e4>
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c74:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	f000 80ab 	beq.w	8015dd8 <nk_layout_row+0x1e4>
        return;

    win = ctx->current;
 8015c82:	697b      	ldr	r3, [r7, #20]
 8015c84:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c88:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c8c:	623b      	str	r3, [r7, #32]
    layout = win->layout;
 8015c8e:	6a3b      	ldr	r3, [r7, #32]
 8015c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c94:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8015c96:	68ba      	ldr	r2, [r7, #8]
 8015c98:	ed97 0a03 	vldr	s0, [r7, #12]
 8015c9c:	6a39      	ldr	r1, [r7, #32]
 8015c9e:	6978      	ldr	r0, [r7, #20]
 8015ca0:	f7ff fdfa 	bl	8015898 <nk_panel_layout>
    if (fmt == NK_DYNAMIC) {
 8015ca4:	7cfb      	ldrb	r3, [r7, #19]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d17b      	bne.n	8015da2 <nk_layout_row+0x1ae>
        /* calculate width of undefined widget ratios */
        float r = 0;
 8015caa:	f04f 0300 	mov.w	r3, #0
 8015cae:	627b      	str	r3, [r7, #36]	; 0x24
        layout->row.ratio = ratio;
 8015cb0:	69fb      	ldr	r3, [r7, #28]
 8015cb2:	687a      	ldr	r2, [r7, #4]
 8015cb4:	679a      	str	r2, [r3, #120]	; 0x78
        for (i = 0; i < cols; ++i) {
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cba:	e01d      	b.n	8015cf8 <nk_layout_row+0x104>
            if (ratio[i] < 0.0f)
 8015cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cbe:	009b      	lsls	r3, r3, #2
 8015cc0:	687a      	ldr	r2, [r7, #4]
 8015cc2:	4413      	add	r3, r2
 8015cc4:	edd3 7a00 	vldr	s15, [r3]
 8015cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd0:	d503      	bpl.n	8015cda <nk_layout_row+0xe6>
                n_undef++;
 8015cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cd8:	e00b      	b.n	8015cf2 <nk_layout_row+0xfe>
            else r += ratio[i];
 8015cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cdc:	009b      	lsls	r3, r3, #2
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	edd3 7a00 	vldr	s15, [r3]
 8015ce6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (i = 0; i < cols; ++i) {
 8015cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	dbdd      	blt.n	8015cbc <nk_layout_row+0xc8>
        }
        r = NK_SATURATE(1.0f - r);
 8015d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d18:	dc0a      	bgt.n	8015d30 <nk_layout_row+0x13c>
 8015d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d2e:	dd16      	ble.n	8015d5e <nk_layout_row+0x16a>
 8015d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d48:	dd02      	ble.n	8015d50 <nk_layout_row+0x15c>
 8015d4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d4e:	e008      	b.n	8015d62 <nk_layout_row+0x16e>
 8015d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d5c:	e001      	b.n	8015d62 <nk_layout_row+0x16e>
 8015d5e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8015df4 <nk_layout_row+0x200>
 8015d62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        layout->row.type = NK_LAYOUT_DYNAMIC;
 8015d66:	69fb      	ldr	r3, [r7, #28]
 8015d68:	2203      	movs	r2, #3
 8015d6a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 8015d6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d7a:	dd0c      	ble.n	8015d96 <nk_layout_row+0x1a2>
 8015d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	dd09      	ble.n	8015d96 <nk_layout_row+0x1a2>
 8015d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d84:	ee07 3a90 	vmov	s15, r3
 8015d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015d8c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8015d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015d94:	e001      	b.n	8015d9a <nk_layout_row+0x1a6>
 8015d96:	eddf 7a17 	vldr	s15, [pc, #92]	; 8015df4 <nk_layout_row+0x200>
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8015da0:	e00f      	b.n	8015dc2 <nk_layout_row+0x1ce>
    } else {
        layout->row.ratio = ratio;
 8015da2:	69fb      	ldr	r3, [r7, #28]
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	679a      	str	r2, [r3, #120]	; 0x78
        layout->row.type = NK_LAYOUT_STATIC;
 8015da8:	69fb      	ldr	r3, [r7, #28]
 8015daa:	2207      	movs	r2, #7
 8015dac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = 0;
 8015db0:	69fb      	ldr	r3, [r7, #28]
 8015db2:	f04f 0200 	mov.w	r2, #0
 8015db6:	67da      	str	r2, [r3, #124]	; 0x7c
        layout->row.item_offset = 0;
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	f04f 0200 	mov.w	r2, #0
 8015dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }
    layout->row.item_offset = 0;
 8015dc2:	69fb      	ldr	r3, [r7, #28]
 8015dc4:	f04f 0200 	mov.w	r2, #0
 8015dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    layout->row.filled = 0;
 8015dcc:	69fb      	ldr	r3, [r7, #28]
 8015dce:	f04f 0200 	mov.w	r2, #0
 8015dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8015dd6:	e000      	b.n	8015dda <nk_layout_row+0x1e6>
        return;
 8015dd8:	bf00      	nop
}
 8015dda:	3730      	adds	r7, #48	; 0x30
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}
 8015de0:	0802893c 	.word	0x0802893c
 8015de4:	0802a82c 	.word	0x0802a82c
 8015de8:	08028940 	.word	0x08028940
 8015dec:	0802895c 	.word	0x0802895c
 8015df0:	0802896c 	.word	0x0802896c
 8015df4:	00000000 	.word	0x00000000

08015df8 <nk_panel_alloc_row>:
    ret.y += -layout->at_y + (float)*layout->offset_y;
    return ret;
}
NK_LIB void
nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b086      	sub	sp, #24
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	6039      	str	r1, [r7, #0]
    struct nk_panel *layout = win->layout;
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015e08:	617b      	str	r3, [r7, #20]
    struct nk_vec2 spacing = ctx->style.window.spacing;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e10:	461a      	mov	r2, r3
 8015e12:	f107 0308 	add.w	r3, r7, #8
 8015e16:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 8015e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e1e:	e883 0003 	stmia.w	r3, {r0, r1}
    const float row_height = layout->row.height - spacing.y;
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8015e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8015e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e30:	edc7 7a04 	vstr	s15, [r7, #16]
    nk_panel_layout(ctx, win, row_height, layout->row.columns);
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e38:	461a      	mov	r2, r3
 8015e3a:	ed97 0a04 	vldr	s0, [r7, #16]
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f7ff fd29 	bl	8015898 <nk_panel_layout>
}
 8015e46:	bf00      	nop
 8015e48:	3718      	adds	r7, #24
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
	...

08015e50 <nk_layout_widget_space>:
NK_LIB void
nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,
    struct nk_window *win, int modify)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b092      	sub	sp, #72	; 0x48
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	60f8      	str	r0, [r7, #12]
 8015e58:	60b9      	str	r1, [r7, #8]
 8015e5a:	607a      	str	r2, [r7, #4]
 8015e5c:	603b      	str	r3, [r7, #0]
    struct nk_panel *layout;
    const struct nk_style *style;

    struct nk_vec2 spacing;

    float item_offset = 0;
 8015e5e:	f04f 0300 	mov.w	r3, #0
 8015e62:	647b      	str	r3, [r7, #68]	; 0x44
    float item_width = 0;
 8015e64:	f04f 0300 	mov.w	r3, #0
 8015e68:	643b      	str	r3, [r7, #64]	; 0x40
    float item_spacing = 0;
 8015e6a:	f04f 0300 	mov.w	r3, #0
 8015e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    float panel_space = 0;
 8015e70:	f04f 0300 	mov.w	r3, #0
 8015e74:	63bb      	str	r3, [r7, #56]	; 0x38

    NK_ASSERT(ctx);
 8015e76:	68bb      	ldr	r3, [r7, #8]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d106      	bne.n	8015e8a <nk_layout_widget_space+0x3a>
 8015e7c:	4bc4      	ldr	r3, [pc, #784]	; (8016190 <nk_layout_widget_space+0x340>)
 8015e7e:	4ac5      	ldr	r2, [pc, #788]	; (8016194 <nk_layout_widget_space+0x344>)
 8015e80:	f240 214d 	movw	r1, #589	; 0x24d
 8015e84:	48c4      	ldr	r0, [pc, #784]	; (8016198 <nk_layout_widget_space+0x348>)
 8015e86:	f00e fe27 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015e90:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d106      	bne.n	8015ea6 <nk_layout_widget_space+0x56>
 8015e98:	4bc0      	ldr	r3, [pc, #768]	; (801619c <nk_layout_widget_space+0x34c>)
 8015e9a:	4abe      	ldr	r2, [pc, #760]	; (8016194 <nk_layout_widget_space+0x344>)
 8015e9c:	f240 214e 	movw	r1, #590	; 0x24e
 8015ea0:	48bd      	ldr	r0, [pc, #756]	; (8016198 <nk_layout_widget_space+0x348>)
 8015ea2:	f00e fe19 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015eac:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d106      	bne.n	8015ec6 <nk_layout_widget_space+0x76>
 8015eb8:	4bb9      	ldr	r3, [pc, #740]	; (80161a0 <nk_layout_widget_space+0x350>)
 8015eba:	4ab6      	ldr	r2, [pc, #728]	; (8016194 <nk_layout_widget_space+0x344>)
 8015ebc:	f240 214f 	movw	r1, #591	; 0x24f
 8015ec0:	48b5      	ldr	r0, [pc, #724]	; (8016198 <nk_layout_widget_space+0x348>)
 8015ec2:	f00e fe09 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	f000 8340 	beq.w	801654e <nk_layout_widget_space+0x6fe>
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015ed4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	f000 8338 	beq.w	801654e <nk_layout_widget_space+0x6fe>
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015ee4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	f000 832e 	beq.w	801654e <nk_layout_widget_space+0x6fe>
        return;

    win = ctx->current;
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015ef8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015efc:	607b      	str	r3, [r7, #4]
    layout = win->layout;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f04:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8015f0c:	633b      	str	r3, [r7, #48]	; 0x30
    NK_ASSERT(bounds);
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d106      	bne.n	8015f22 <nk_layout_widget_space+0xd2>
 8015f14:	4ba3      	ldr	r3, [pc, #652]	; (80161a4 <nk_layout_widget_space+0x354>)
 8015f16:	4a9f      	ldr	r2, [pc, #636]	; (8016194 <nk_layout_widget_space+0x344>)
 8015f18:	f240 2156 	movw	r1, #598	; 0x256
 8015f1c:	489e      	ldr	r0, [pc, #632]	; (8016198 <nk_layout_widget_space+0x348>)
 8015f1e:	f00e fddb 	bl	8024ad8 <__assert_func>

    spacing = style->window.spacing;
 8015f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f28:	461a      	mov	r2, r3
 8015f2a:	f107 0314 	add.w	r3, r7, #20
 8015f2e:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8015f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f36:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8015f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f42:	7819      	ldrb	r1, [r3, #0]
 8015f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f46:	edd3 7a04 	vldr	s15, [r3, #16]
 8015f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f4e:	461a      	mov	r2, r3
 8015f50:	eeb0 0a67 	vmov.f32	s0, s15
 8015f54:	f7ff fc64 	bl	8015820 <nk_layout_row_calculate_usable_space>
 8015f58:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                                            layout->bounds.w, layout->row.columns);

    #define NK_FRAC(x) (x - (float)(int)x) /* will be used to remove fookin gaps */
    /* calculate the width of one item inside the current layout space */
    switch (layout->row.type) {
 8015f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f5e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8015f62:	2b08      	cmp	r3, #8
 8015f64:	f200 828b 	bhi.w	801647e <nk_layout_widget_space+0x62e>
 8015f68:	a201      	add	r2, pc, #4	; (adr r2, 8015f70 <nk_layout_widget_space+0x120>)
 8015f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f6e:	bf00      	nop
 8015f70:	08015f95 	.word	0x08015f95
 8015f74:	08016017 	.word	0x08016017
 8015f78:	08016099 	.word	0x08016099
 8015f7c:	0801617b 	.word	0x0801617b
 8015f80:	0801625f 	.word	0x0801625f
 8015f84:	08016297 	.word	0x08016297
 8015f88:	080162db 	.word	0x080162db
 8015f8c:	08016395 	.word	0x08016395
 8015f90:	080163e1 	.word	0x080163e1
    case NK_LAYOUT_DYNAMIC_FIXED: {
        /* scaling fixed size widgets item width */
        float w = NK_MAX(1.0f,panel_space) / (float)layout->row.columns;
 8015f94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa4:	dd02      	ble.n	8015fac <nk_layout_widget_space+0x15c>
 8015fa6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015faa:	e001      	b.n	8015fb0 <nk_layout_widget_space+0x160>
 8015fac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fb4:	ee07 3a10 	vmov	s14, r3
 8015fb8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015fbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015fc0:	ed87 7a07 	vstr	s14, [r7, #28]
        item_offset = (float)layout->row.index * w;
 8015fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fc8:	ee07 3a90 	vmov	s15, r3
 8015fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8015fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fd8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8015fdc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fe8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8015fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ff0:	ed97 7a07 	vldr	s14, [r7, #28]
 8015ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ff8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 8015ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016000:	ee07 3a90 	vmov	s15, r3
 8016004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016008:	edd7 7a05 	vldr	s15, [r7, #20]
 801600c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016010:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8016014:	e243      	b.n	801649e <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_DYNAMIC_ROW: {
        /* scaling single ratio widget width */
        float w = layout->row.item_width * panel_space;
 8016016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016018:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 801601c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016024:	edc7 7a08 	vstr	s15, [r7, #32]
        item_offset = layout->row.item_offset;
 8016028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801602a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801602e:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8016030:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8016034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801603c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016044:	ed97 7a08 	vldr	s14, [r7, #32]
 8016048:	ee77 7a27 	vadd.f32	s15, s14, s15
 801604c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = 0;
 8016050:	f04f 0300 	mov.w	r3, #0
 8016054:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (modify) {
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	f000 8217 	beq.w	801648c <nk_layout_widget_space+0x63c>
            layout->row.item_offset += w + spacing.x;
 801605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016060:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8016064:	edd7 6a05 	vldr	s13, [r7, #20]
 8016068:	edd7 7a08 	vldr	s15, [r7, #32]
 801606c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016076:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += layout->row.item_width;
 801607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801607c:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8016080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016082:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8016086:	ee77 7a27 	vadd.f32	s15, s14, s15
 801608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801608c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            layout->row.index = 0;
 8016090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016092:	2200      	movs	r2, #0
 8016094:	669a      	str	r2, [r3, #104]	; 0x68
        }
    } break;
 8016096:	e1f9      	b.n	801648c <nk_layout_widget_space+0x63c>
    case NK_LAYOUT_DYNAMIC_FREE: {
        /* panel width depended free widget placing */
        bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);
 8016098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801609a:	ed93 7a08 	vldr	s14, [r3, #32]
 801609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160a0:	edd3 6a04 	vldr	s13, [r3, #16]
 80160a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160a6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80160aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80160ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	edc3 7a00 	vstr	s15, [r3]
        bounds->x -= (float)*layout->offset_x;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	ed93 7a00 	vldr	s14, [r3]
 80160be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160c0:	699b      	ldr	r3, [r3, #24]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	ee07 3a90 	vmov	s15, r3
 80160c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);
 80160d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80160dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160de:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80160e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160e4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80160e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80160ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80160fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160fe:	69db      	ldr	r3, [r3, #28]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	ee07 3a90 	vmov	s15, r3
 8016106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801610a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->w = layout->bounds.w  * layout->row.item.w + NK_FRAC(bounds->x);
 8016114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016116:	ed93 7a04 	vldr	s14, [r3, #16]
 801611a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801611c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8016120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	edd3 6a00 	vldr	s13, [r3]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	edd3 7a00 	vldr	s15, [r3]
 8016130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016138:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801613c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	edc3 7a02 	vstr	s15, [r3, #8]
        bounds->h = layout->row.height * layout->row.item.h + NK_FRAC(bounds->y);
 8016146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016148:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 801614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801614e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8016152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	edd3 6a01 	vldr	s13, [r3, #4]
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	edd3 7a01 	vldr	s15, [r3, #4]
 8016162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801616a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801616e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 8016178:	e1ea      	b.n	8016550 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_DYNAMIC: {
        /* scaling arrays of panel width ratios for every widget */
        float ratio, w;
        NK_ASSERT(layout->row.ratio);
 801617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801617c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801617e:	2b00      	cmp	r3, #0
 8016180:	d114      	bne.n	80161ac <nk_layout_widget_space+0x35c>
 8016182:	4b09      	ldr	r3, [pc, #36]	; (80161a8 <nk_layout_widget_space+0x358>)
 8016184:	4a03      	ldr	r2, [pc, #12]	; (8016194 <nk_layout_widget_space+0x344>)
 8016186:	f44f 7120 	mov.w	r1, #640	; 0x280
 801618a:	4803      	ldr	r0, [pc, #12]	; (8016198 <nk_layout_widget_space+0x348>)
 801618c:	f00e fca4 	bl	8024ad8 <__assert_func>
 8016190:	0802893c 	.word	0x0802893c
 8016194:	0802a83c 	.word	0x0802a83c
 8016198:	08028940 	.word	0x08028940
 801619c:	0802895c 	.word	0x0802895c
 80161a0:	0802896c 	.word	0x0802896c
 80161a4:	08028a9c 	.word	0x08028a9c
 80161a8:	08028aa4 	.word	0x08028aa4
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 80161ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80161b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	4413      	add	r3, r2
 80161b8:	edd3 7a00 	vldr	s15, [r3]
            layout->row.item_width : layout->row.ratio[layout->row.index];
 80161bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80161c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c4:	d502      	bpl.n	80161cc <nk_layout_widget_space+0x37c>
 80161c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80161ca:	e006      	b.n	80161da <nk_layout_widget_space+0x38a>
 80161cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80161d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161d4:	009b      	lsls	r3, r3, #2
 80161d6:	4413      	add	r3, r2
 80161d8:	681b      	ldr	r3, [r3, #0]
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 80161da:	62bb      	str	r3, [r7, #40]	; 0x28

        w = (ratio * panel_space);
 80161dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80161e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80161e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        item_spacing = (float)layout->row.index * spacing.x;
 80161ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161f0:	ee07 3a90 	vmov	s15, r3
 80161f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80161f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80161fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016200:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_offset = layout->row.item_offset;
 8016204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801620a:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 801620c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8016210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016218:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801621c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016220:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016228:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

        if (modify) {
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	2b00      	cmp	r3, #0
 8016230:	f000 812e 	beq.w	8016490 <nk_layout_widget_space+0x640>
            layout->row.item_offset += w;
 8016234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016236:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801623a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801623e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016244:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += ratio;
 8016248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801624a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 801624e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016258:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
        }
    } break;
 801625c:	e118      	b.n	8016490 <nk_layout_widget_space+0x640>
    case NK_LAYOUT_STATIC_FIXED: {
        /* non-scaling fixed widgets item width */
        item_width = layout->row.item_width;
 801625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016262:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = (float)layout->row.index * item_width;
 8016264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016268:	ee07 3a90 	vmov	s15, r3
 801626c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016270:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8016274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016278:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 801627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801627e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016280:	ee07 3a90 	vmov	s15, r3
 8016284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016288:	edd7 7a05 	vldr	s15, [r7, #20]
 801628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016290:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8016294:	e103      	b.n	801649e <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_STATIC_ROW: {
        /* scaling single ratio widget width */
        item_width = layout->row.item_width;
 8016296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801629a:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 801629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801629e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80162a2:	647b      	str	r3, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 80162a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162a8:	ee07 3a90 	vmov	s15, r3
 80162ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80162b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162b8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += item_width;
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	f000 80e8 	beq.w	8016494 <nk_layout_widget_space+0x644>
 80162c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162c6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80162ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80162ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162d4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 80162d8:	e0dc      	b.n	8016494 <nk_layout_widget_space+0x644>
    case NK_LAYOUT_STATIC_FREE: {
        /* free widget placing */
        bounds->x = layout->at_x + layout->row.item.x;
 80162da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80162e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162e2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80162e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	edc3 7a00 	vstr	s15, [r3]
        bounds->w = layout->row.item.w;
 80162f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162f2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	609a      	str	r2, [r3, #8]
        if (((bounds->x + bounds->w) > layout->max_x) && modify)
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	ed93 7a00 	vldr	s14, [r3]
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	edd3 7a02 	vldr	s15, [r3, #8]
 8016306:	ee37 7a27 	vadd.f32	s14, s14, s15
 801630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801630c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8016310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016318:	dd0d      	ble.n	8016336 <nk_layout_widget_space+0x4e6>
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00a      	beq.n	8016336 <nk_layout_widget_space+0x4e6>
            layout->max_x = (bounds->x + bounds->w);
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	ed93 7a00 	vldr	s14, [r3]
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	edd3 7a02 	vldr	s15, [r3, #8]
 801632c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016332:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        bounds->x -= (float)*layout->offset_x;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	ed93 7a00 	vldr	s14, [r3]
 801633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801633e:	699b      	ldr	r3, [r3, #24]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	ee07 3a90 	vmov	s15, r3
 8016346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801634a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + layout->row.item.y;
 8016354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016356:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801635c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8016360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	ed93 7a01 	vldr	s14, [r3, #4]
 8016370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016372:	69db      	ldr	r3, [r3, #28]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	ee07 3a90 	vmov	s15, r3
 801637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801637e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->h = layout->row.item.h;
 8016388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801638a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	60da      	str	r2, [r3, #12]
        return;
 8016392:	e0dd      	b.n	8016550 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_STATIC: {
        /* non-scaling array of panel pixel width for every widget */
        item_spacing = (float)layout->row.index * spacing.x;
 8016394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016398:	ee07 3a90 	vmov	s15, r3
 801639c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80163a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80163a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80163a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_width = layout->row.ratio[layout->row.index];
 80163ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80163b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163b4:	009b      	lsls	r3, r3, #2
 80163b6:	4413      	add	r3, r2
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 80163bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80163c2:	647b      	str	r3, [r7, #68]	; 0x44
        if (modify) layout->row.item_offset += item_width;
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d066      	beq.n	8016498 <nk_layout_widget_space+0x648>
 80163ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163cc:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80163d0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80163d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163da:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 80163de:	e05b      	b.n	8016498 <nk_layout_widget_space+0x648>
    case NK_LAYOUT_TEMPLATE: {
        /* stretchy row layout with combined dynamic/static widget width*/
        float w;
        NK_ASSERT(layout->row.index < layout->row.columns);
 80163e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80163e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163e8:	429a      	cmp	r2, r3
 80163ea:	db06      	blt.n	80163fa <nk_layout_widget_space+0x5aa>
 80163ec:	4b5a      	ldr	r3, [pc, #360]	; (8016558 <nk_layout_widget_space+0x708>)
 80163ee:	4a5b      	ldr	r2, [pc, #364]	; (801655c <nk_layout_widget_space+0x70c>)
 80163f0:	f240 21b1 	movw	r1, #689	; 0x2b1
 80163f4:	485a      	ldr	r0, [pc, #360]	; (8016560 <nk_layout_widget_space+0x710>)
 80163f6:	f00e fb6f 	bl	8024ad8 <__assert_func>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 80163fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163fe:	2b0f      	cmp	r3, #15
 8016400:	dd06      	ble.n	8016410 <nk_layout_widget_space+0x5c0>
 8016402:	4b58      	ldr	r3, [pc, #352]	; (8016564 <nk_layout_widget_space+0x714>)
 8016404:	4a55      	ldr	r2, [pc, #340]	; (801655c <nk_layout_widget_space+0x70c>)
 8016406:	f240 21b2 	movw	r1, #690	; 0x2b2
 801640a:	4855      	ldr	r0, [pc, #340]	; (8016560 <nk_layout_widget_space+0x710>)
 801640c:	f00e fb64 	bl	8024ad8 <__assert_func>
        w = layout->row.templates[layout->row.index];
 8016410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016416:	3326      	adds	r3, #38	; 0x26
 8016418:	009b      	lsls	r3, r3, #2
 801641a:	4413      	add	r3, r2
 801641c:	3308      	adds	r3, #8
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	62fb      	str	r3, [r7, #44]	; 0x2c
        item_offset = layout->row.item_offset;
 8016422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016428:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 801642a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801642e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016436:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801643a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801643e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016446:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 801644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801644c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801644e:	ee07 3a90 	vmov	s15, r3
 8016452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016456:	edd7 7a05 	vldr	s15, [r7, #20]
 801645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801645e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += w;
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d019      	beq.n	801649c <nk_layout_widget_space+0x64c>
 8016468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801646a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801646e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016478:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 801647c:	e00e      	b.n	801649c <nk_layout_widget_space+0x64c>
    #undef NK_FRAC
    default: NK_ASSERT(0); break;
 801647e:	4b3a      	ldr	r3, [pc, #232]	; (8016568 <nk_layout_widget_space+0x718>)
 8016480:	4a36      	ldr	r2, [pc, #216]	; (801655c <nk_layout_widget_space+0x70c>)
 8016482:	f240 21ba 	movw	r1, #698	; 0x2ba
 8016486:	4836      	ldr	r0, [pc, #216]	; (8016560 <nk_layout_widget_space+0x710>)
 8016488:	f00e fb26 	bl	8024ad8 <__assert_func>
    } break;
 801648c:	bf00      	nop
 801648e:	e006      	b.n	801649e <nk_layout_widget_space+0x64e>
    } break;
 8016490:	bf00      	nop
 8016492:	e004      	b.n	801649e <nk_layout_widget_space+0x64e>
    } break;
 8016494:	bf00      	nop
 8016496:	e002      	b.n	801649e <nk_layout_widget_space+0x64e>
    } break;
 8016498:	bf00      	nop
 801649a:	e000      	b.n	801649e <nk_layout_widget_space+0x64e>
    } break;
 801649c:	bf00      	nop
    };

    /* set the bounds of the newly allocated widget */
    bounds->w = item_width;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80164a2:	609a      	str	r2, [r3, #8]
    bounds->h = layout->row.height - spacing.y;
 80164a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a6:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80164aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80164ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	edc3 7a03 	vstr	s15, [r3, #12]
    bounds->y = layout->at_y - (float)*layout->offset_y;
 80164b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80164be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164c0:	69db      	ldr	r3, [r3, #28]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	ee07 3a90 	vmov	s15, r3
 80164c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80164cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->x = layout->at_x + item_offset + item_spacing;
 80164d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164d8:	ed93 7a08 	vldr	s14, [r3, #32]
 80164dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80164e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80164e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80164e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	edc3 7a00 	vstr	s15, [r3]
    if (((bounds->x + bounds->w) > layout->max_x) && modify)
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	ed93 7a00 	vldr	s14, [r3]
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80164fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016504:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8016508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801650c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016510:	dd0d      	ble.n	801652e <nk_layout_widget_space+0x6de>
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d00a      	beq.n	801652e <nk_layout_widget_space+0x6de>
        layout->max_x = bounds->x + bounds->w;
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	ed93 7a00 	vldr	s14, [r3]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	edd3 7a02 	vldr	s15, [r3, #8]
 8016524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801652a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    bounds->x -= (float)*layout->offset_x;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	ed93 7a00 	vldr	s14, [r3]
 8016534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016536:	699b      	ldr	r3, [r3, #24]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	ee07 3a90 	vmov	s15, r3
 801653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	edc3 7a00 	vstr	s15, [r3]
 801654c:	e000      	b.n	8016550 <nk_layout_widget_space+0x700>
        return;
 801654e:	bf00      	nop
}
 8016550:	3748      	adds	r7, #72	; 0x48
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	08028ab8 	.word	0x08028ab8
 801655c:	0802a83c 	.word	0x0802a83c
 8016560:	08028940 	.word	0x08028940
 8016564:	08028ae0 	.word	0x08028ae0
 8016568:	08028af8 	.word	0x08028af8

0801656c <nk_panel_alloc_space>:
NK_LIB void
nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b084      	sub	sp, #16
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	6039      	str	r1, [r7, #0]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d106      	bne.n	801658a <nk_panel_alloc_space+0x1e>
 801657c:	4b2d      	ldr	r3, [pc, #180]	; (8016634 <nk_panel_alloc_space+0xc8>)
 801657e:	4a2e      	ldr	r2, [pc, #184]	; (8016638 <nk_panel_alloc_space+0xcc>)
 8016580:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8016584:	482d      	ldr	r0, [pc, #180]	; (801663c <nk_panel_alloc_space+0xd0>)
 8016586:	f00e faa7 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 801658a:	683b      	ldr	r3, [r7, #0]
 801658c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016590:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016594:	2b00      	cmp	r3, #0
 8016596:	d106      	bne.n	80165a6 <nk_panel_alloc_space+0x3a>
 8016598:	4b29      	ldr	r3, [pc, #164]	; (8016640 <nk_panel_alloc_space+0xd4>)
 801659a:	4a27      	ldr	r2, [pc, #156]	; (8016638 <nk_panel_alloc_space+0xcc>)
 801659c:	f240 21cd 	movw	r1, #717	; 0x2cd
 80165a0:	4826      	ldr	r0, [pc, #152]	; (801663c <nk_panel_alloc_space+0xd0>)
 80165a2:	f00e fa99 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165ac:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d106      	bne.n	80165c6 <nk_panel_alloc_space+0x5a>
 80165b8:	4b22      	ldr	r3, [pc, #136]	; (8016644 <nk_panel_alloc_space+0xd8>)
 80165ba:	4a1f      	ldr	r2, [pc, #124]	; (8016638 <nk_panel_alloc_space+0xcc>)
 80165bc:	f240 21ce 	movw	r1, #718	; 0x2ce
 80165c0:	481e      	ldr	r0, [pc, #120]	; (801663c <nk_panel_alloc_space+0xd0>)
 80165c2:	f00e fa89 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d02f      	beq.n	801662c <nk_panel_alloc_space+0xc0>
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165d2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d028      	beq.n	801662c <nk_panel_alloc_space+0xc0>
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165e0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d01f      	beq.n	801662c <nk_panel_alloc_space+0xc0>
        return;

    /* check if the end of the row has been hit and begin new row if so */
    win = ctx->current;
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165f6:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165fe:	60bb      	str	r3, [r7, #8]
    if (layout->row.index >= layout->row.columns)
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016608:	429a      	cmp	r2, r3
 801660a:	db03      	blt.n	8016614 <nk_panel_alloc_space+0xa8>
        nk_panel_alloc_row(ctx, win);
 801660c:	68f9      	ldr	r1, [r7, #12]
 801660e:	6838      	ldr	r0, [r7, #0]
 8016610:	f7ff fbf2 	bl	8015df8 <nk_panel_alloc_row>

    /* calculate widget position and size */
    nk_layout_widget_space(bounds, ctx, win, nk_true);
 8016614:	2301      	movs	r3, #1
 8016616:	68fa      	ldr	r2, [r7, #12]
 8016618:	6839      	ldr	r1, [r7, #0]
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7ff fc18 	bl	8015e50 <nk_layout_widget_space>
    layout->row.index++;
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016624:	1c5a      	adds	r2, r3, #1
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	669a      	str	r2, [r3, #104]	; 0x68
 801662a:	e000      	b.n	801662e <nk_panel_alloc_space+0xc2>
        return;
 801662c:	bf00      	nop
}
 801662e:	3710      	adds	r7, #16
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}
 8016634:	0802893c 	.word	0x0802893c
 8016638:	0802a854 	.word	0x0802a854
 801663c:	08028940 	.word	0x08028940
 8016640:	0802895c 	.word	0x0802895c
 8016644:	0802896c 	.word	0x0802896c

08016648 <nk_round_up_pow2>:
    return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*(a7 + x*a8)))))));
}
#endif
NK_LIB nk_uint
nk_round_up_pow2(nk_uint v)
{
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
    v--;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	3b01      	subs	r3, #1
 8016654:	607b      	str	r3, [r7, #4]
    v |= v >> 1;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	085b      	lsrs	r3, r3, #1
 801665a:	687a      	ldr	r2, [r7, #4]
 801665c:	4313      	orrs	r3, r2
 801665e:	607b      	str	r3, [r7, #4]
    v |= v >> 2;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	089b      	lsrs	r3, r3, #2
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	4313      	orrs	r3, r2
 8016668:	607b      	str	r3, [r7, #4]
    v |= v >> 4;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	091b      	lsrs	r3, r3, #4
 801666e:	687a      	ldr	r2, [r7, #4]
 8016670:	4313      	orrs	r3, r2
 8016672:	607b      	str	r3, [r7, #4]
    v |= v >> 8;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	0a1b      	lsrs	r3, r3, #8
 8016678:	687a      	ldr	r2, [r7, #4]
 801667a:	4313      	orrs	r3, r2
 801667c:	607b      	str	r3, [r7, #4]
    v |= v >> 16;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	0c1b      	lsrs	r3, r3, #16
 8016682:	687a      	ldr	r2, [r7, #4]
 8016684:	4313      	orrs	r3, r2
 8016686:	607b      	str	r3, [r7, #4]
    v++;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	3301      	adds	r3, #1
 801668c:	607b      	str	r3, [r7, #4]
    return v;
 801668e:	687b      	ldr	r3, [r7, #4]
}
 8016690:	4618      	mov	r0, r3
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr

0801669c <nk_pow>:
NK_LIB double
nk_pow(double x, int n)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b088      	sub	sp, #32
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	ed87 0b02 	vstr	d0, [r7, #8]
 80166a6:	6078      	str	r0, [r7, #4]
    /*  check the sign of n */
    double r = 1;
 80166a8:	f04f 0200 	mov.w	r2, #0
 80166ac:	4b24      	ldr	r3, [pc, #144]	; (8016740 <nk_pow+0xa4>)
 80166ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int plus = n >= 0;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	43db      	mvns	r3, r3
 80166b6:	0fdb      	lsrs	r3, r3, #31
 80166b8:	b2db      	uxtb	r3, r3
 80166ba:	617b      	str	r3, [r7, #20]
    n = (plus) ? n : -n;
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d102      	bne.n	80166c8 <nk_pow+0x2c>
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	425b      	negs	r3, r3
 80166c6:	e000      	b.n	80166ca <nk_pow+0x2e>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	607b      	str	r3, [r7, #4]
    while (n > 0) {
 80166cc:	e01d      	b.n	801670a <nk_pow+0x6e>
        if ((n & 1) == 1)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f003 0301 	and.w	r3, r3, #1
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d009      	beq.n	80166ec <nk_pow+0x50>
            r *= x;
 80166d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80166dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80166e0:	f7e9 ffb2 	bl	8000648 <__aeabi_dmul>
 80166e4:	4602      	mov	r2, r0
 80166e6:	460b      	mov	r3, r1
 80166e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        n /= 2;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	0fda      	lsrs	r2, r3, #31
 80166f0:	4413      	add	r3, r2
 80166f2:	105b      	asrs	r3, r3, #1
 80166f4:	607b      	str	r3, [r7, #4]
        x *= x;
 80166f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80166fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80166fe:	f7e9 ffa3 	bl	8000648 <__aeabi_dmul>
 8016702:	4602      	mov	r2, r0
 8016704:	460b      	mov	r3, r1
 8016706:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while (n > 0) {
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	2b00      	cmp	r3, #0
 801670e:	dcde      	bgt.n	80166ce <nk_pow+0x32>
    }
    return plus ? r : 1.0 / r;
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d109      	bne.n	801672a <nk_pow+0x8e>
 8016716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801671a:	f04f 0000 	mov.w	r0, #0
 801671e:	4908      	ldr	r1, [pc, #32]	; (8016740 <nk_pow+0xa4>)
 8016720:	f7ea f8bc 	bl	800089c <__aeabi_ddiv>
 8016724:	4602      	mov	r2, r0
 8016726:	460b      	mov	r3, r1
 8016728:	e001      	b.n	801672e <nk_pow+0x92>
 801672a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801672e:	ec43 2b17 	vmov	d7, r2, r3
}
 8016732:	eeb0 0a47 	vmov.f32	s0, s14
 8016736:	eef0 0a67 	vmov.f32	s1, s15
 801673a:	3720      	adds	r7, #32
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}
 8016740:	3ff00000 	.word	0x3ff00000

08016744 <nk_ifloord>:
NK_LIB int
nk_ifloord(double x)
{
 8016744:	b5b0      	push	{r4, r5, r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	ed87 0b00 	vstr	d0, [r7]
    x = (double)((int)x - ((x < 0.0) ? 1 : 0));
 801674e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016752:	f7ea fa29 	bl	8000ba8 <__aeabi_d2iz>
 8016756:	4604      	mov	r4, r0
 8016758:	2301      	movs	r3, #1
 801675a:	461d      	mov	r5, r3
 801675c:	f04f 0200 	mov.w	r2, #0
 8016760:	f04f 0300 	mov.w	r3, #0
 8016764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016768:	f7ea f9e0 	bl	8000b2c <__aeabi_dcmplt>
 801676c:	4603      	mov	r3, r0
 801676e:	2b00      	cmp	r3, #0
 8016770:	d101      	bne.n	8016776 <nk_ifloord+0x32>
 8016772:	2300      	movs	r3, #0
 8016774:	461d      	mov	r5, r3
 8016776:	b2eb      	uxtb	r3, r5
 8016778:	1ae3      	subs	r3, r4, r3
 801677a:	4618      	mov	r0, r3
 801677c:	f7e9 fefa 	bl	8000574 <__aeabi_i2d>
 8016780:	4602      	mov	r2, r0
 8016782:	460b      	mov	r3, r1
 8016784:	e9c7 2300 	strd	r2, r3, [r7]
    return (int)x;
 8016788:	e9d7 0100 	ldrd	r0, r1, [r7]
 801678c:	f7ea fa0c 	bl	8000ba8 <__aeabi_d2iz>
 8016790:	4603      	mov	r3, r0
}
 8016792:	4618      	mov	r0, r3
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801679c <nk_log10>:
        return (r > 0.0f) ? t+1: t;
    }
}
NK_LIB int
nk_log10(double n)
{
 801679c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801679e:	b087      	sub	sp, #28
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	ed87 0b00 	vstr	d0, [r7]
    int neg;
    int ret;
    int exp = 0;
 80167a6:	2300      	movs	r3, #0
 80167a8:	613b      	str	r3, [r7, #16]

    neg = (n < 0) ? 1 : 0;
 80167aa:	2301      	movs	r3, #1
 80167ac:	461e      	mov	r6, r3
 80167ae:	f04f 0200 	mov.w	r2, #0
 80167b2:	f04f 0300 	mov.w	r3, #0
 80167b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80167ba:	f7ea f9b7 	bl	8000b2c <__aeabi_dcmplt>
 80167be:	4603      	mov	r3, r0
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d101      	bne.n	80167c8 <nk_log10+0x2c>
 80167c4:	2300      	movs	r3, #0
 80167c6:	461e      	mov	r6, r3
 80167c8:	b2f3      	uxtb	r3, r6
 80167ca:	60fb      	str	r3, [r7, #12]
    ret = (neg) ? (int)-n : (int)n;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d009      	beq.n	80167e6 <nk_log10+0x4a>
 80167d2:	683c      	ldr	r4, [r7, #0]
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80167da:	4620      	mov	r0, r4
 80167dc:	4629      	mov	r1, r5
 80167de:	f7ea f9e3 	bl	8000ba8 <__aeabi_d2iz>
 80167e2:	4603      	mov	r3, r0
 80167e4:	e004      	b.n	80167f0 <nk_log10+0x54>
 80167e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80167ea:	f7ea f9dd 	bl	8000ba8 <__aeabi_d2iz>
 80167ee:	4603      	mov	r3, r0
 80167f0:	617b      	str	r3, [r7, #20]
    while ((ret / 10) > 0) {
 80167f2:	e00a      	b.n	801680a <nk_log10+0x6e>
        ret /= 10;
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	4a0c      	ldr	r2, [pc, #48]	; (8016828 <nk_log10+0x8c>)
 80167f8:	fb82 1203 	smull	r1, r2, r2, r3
 80167fc:	1092      	asrs	r2, r2, #2
 80167fe:	17db      	asrs	r3, r3, #31
 8016800:	1ad3      	subs	r3, r2, r3
 8016802:	617b      	str	r3, [r7, #20]
        exp++;
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	3301      	adds	r3, #1
 8016808:	613b      	str	r3, [r7, #16]
    while ((ret / 10) > 0) {
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	2b09      	cmp	r3, #9
 801680e:	dcf1      	bgt.n	80167f4 <nk_log10+0x58>
    }
    if (neg) exp = -exp;
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d002      	beq.n	801681c <nk_log10+0x80>
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	425b      	negs	r3, r3
 801681a:	613b      	str	r3, [r7, #16]
    return exp;
 801681c:	693b      	ldr	r3, [r7, #16]
}
 801681e:	4618      	mov	r0, r3
 8016820:	371c      	adds	r7, #28
 8016822:	46bd      	mov	sp, r7
 8016824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016826:	bf00      	nop
 8016828:	66666667 	.word	0x66666667

0801682c <nk_rect>:
{
    return nk_null_rect;
}
NK_API struct nk_rect
nk_rect(float x, float y, float w, float h)
{
 801682c:	b490      	push	{r4, r7}
 801682e:	b090      	sub	sp, #64	; 0x40
 8016830:	af00      	add	r7, sp, #0
 8016832:	ed87 0a07 	vstr	s0, [r7, #28]
 8016836:	edc7 0a06 	vstr	s1, [r7, #24]
 801683a:	ed87 1a05 	vstr	s2, [r7, #20]
 801683e:	edc7 1a04 	vstr	s3, [r7, #16]
    struct nk_rect r;
    r.x = x; r.y = y;
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	623b      	str	r3, [r7, #32]
 8016846:	69bb      	ldr	r3, [r7, #24]
 8016848:	627b      	str	r3, [r7, #36]	; 0x24
    r.w = w; r.h = h;
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	62bb      	str	r3, [r7, #40]	; 0x28
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 8016852:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8016856:	f107 0320 	add.w	r3, r7, #32
 801685a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801685c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016868:	ee06 0a10 	vmov	s12, r0
 801686c:	ee06 1a90 	vmov	s13, r1
 8016870:	ee07 2a10 	vmov	s14, r2
 8016874:	ee07 3a90 	vmov	s15, r3
}
 8016878:	eeb0 0a46 	vmov.f32	s0, s12
 801687c:	eef0 0a66 	vmov.f32	s1, s13
 8016880:	eeb0 1a47 	vmov.f32	s2, s14
 8016884:	eef0 1a67 	vmov.f32	s3, s15
 8016888:	3740      	adds	r7, #64	; 0x40
 801688a:	46bd      	mov	sp, r7
 801688c:	bc90      	pop	{r4, r7}
 801688e:	4770      	bx	lr

08016890 <nk_shrink_rect>:
    ret.x = r.w; ret.y = r.h;
    return ret;
}
NK_LIB struct nk_rect
nk_shrink_rect(struct nk_rect r, float amount)
{
 8016890:	b490      	push	{r4, r7}
 8016892:	b092      	sub	sp, #72	; 0x48
 8016894:	af00      	add	r7, sp, #0
 8016896:	eeb0 6a40 	vmov.f32	s12, s0
 801689a:	eef0 6a60 	vmov.f32	s13, s1
 801689e:	eeb0 7a41 	vmov.f32	s14, s2
 80168a2:	eef0 7a61 	vmov.f32	s15, s3
 80168a6:	ed87 2a05 	vstr	s4, [r7, #20]
 80168aa:	ed87 6a06 	vstr	s12, [r7, #24]
 80168ae:	edc7 6a07 	vstr	s13, [r7, #28]
 80168b2:	ed87 7a08 	vstr	s14, [r7, #32]
 80168b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    struct nk_rect res;
    r.w = NK_MAX(r.w, 2 * amount);
 80168ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80168be:	edd7 7a05 	vldr	s15, [r7, #20]
 80168c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80168c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ce:	d504      	bpl.n	80168da <nk_shrink_rect+0x4a>
 80168d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80168d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80168d8:	e001      	b.n	80168de <nk_shrink_rect+0x4e>
 80168da:	edd7 7a08 	vldr	s15, [r7, #32]
 80168de:	edc7 7a08 	vstr	s15, [r7, #32]
    r.h = NK_MAX(r.h, 2 * amount);
 80168e2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80168e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80168ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80168ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f6:	d504      	bpl.n	8016902 <nk_shrink_rect+0x72>
 80168f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80168fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016900:	e001      	b.n	8016906 <nk_shrink_rect+0x76>
 8016902:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016906:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    res.x = r.x + amount;
 801690a:	ed97 7a06 	vldr	s14, [r7, #24]
 801690e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016916:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    res.y = r.y + amount;
 801691a:	ed97 7a07 	vldr	s14, [r7, #28]
 801691e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016926:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    res.w = r.w - 2 * amount;
 801692a:	ed97 7a08 	vldr	s14, [r7, #32]
 801692e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016932:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016936:	ee77 7a67 	vsub.f32	s15, s14, s15
 801693a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    res.h = r.h - 2 * amount;
 801693e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016942:	edd7 7a05 	vldr	s15, [r7, #20]
 8016946:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801694a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801694e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return res;
 8016952:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8016956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801695a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801695c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016962:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016968:	ee06 0a10 	vmov	s12, r0
 801696c:	ee06 1a90 	vmov	s13, r1
 8016970:	ee07 2a10 	vmov	s14, r2
 8016974:	ee07 3a90 	vmov	s15, r3
}
 8016978:	eeb0 0a46 	vmov.f32	s0, s12
 801697c:	eef0 0a66 	vmov.f32	s1, s13
 8016980:	eeb0 1a47 	vmov.f32	s2, s14
 8016984:	eef0 1a67 	vmov.f32	s3, s15
 8016988:	3748      	adds	r7, #72	; 0x48
 801698a:	46bd      	mov	sp, r7
 801698c:	bc90      	pop	{r4, r7}
 801698e:	4770      	bx	lr

08016990 <nk_vec2>:
    r.h -= 2 * pad.y;
    return r;
}
NK_API struct nk_vec2
nk_vec2(float x, float y)
{
 8016990:	b480      	push	{r7}
 8016992:	b089      	sub	sp, #36	; 0x24
 8016994:	af00      	add	r7, sp, #0
 8016996:	ed87 0a03 	vstr	s0, [r7, #12]
 801699a:	edc7 0a02 	vstr	s1, [r7, #8]
    struct nk_vec2 ret;
    ret.x = x; ret.y = y;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	613b      	str	r3, [r7, #16]
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	617b      	str	r3, [r7, #20]
    return ret;
 80169a6:	f107 0318 	add.w	r3, r7, #24
 80169aa:	f107 0210 	add.w	r2, r7, #16
 80169ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80169b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80169b6:	69ba      	ldr	r2, [r7, #24]
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	ee07 2a10 	vmov	s14, r2
 80169be:	ee07 3a90 	vmov	s15, r3
}
 80169c2:	eeb0 0a47 	vmov.f32	s0, s14
 80169c6:	eef0 0a67 	vmov.f32	s1, s15
 80169ca:	3724      	adds	r7, #36	; 0x24
 80169cc:	46bd      	mov	sp, r7
 80169ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d2:	4770      	bx	lr

080169d4 <nk_unify>:
    return nk_vec2i(v[0], v[1]);
}
NK_LIB void
nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,
    float x1, float y1)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b086      	sub	sp, #24
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6178      	str	r0, [r7, #20]
 80169dc:	6139      	str	r1, [r7, #16]
 80169de:	ed87 0a03 	vstr	s0, [r7, #12]
 80169e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80169e6:	ed87 1a01 	vstr	s2, [r7, #4]
 80169ea:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(a);
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d106      	bne.n	8016a02 <nk_unify+0x2e>
 80169f4:	4b4b      	ldr	r3, [pc, #300]	; (8016b24 <nk_unify+0x150>)
 80169f6:	4a4c      	ldr	r2, [pc, #304]	; (8016b28 <nk_unify+0x154>)
 80169f8:	f240 1101 	movw	r1, #257	; 0x101
 80169fc:	484b      	ldr	r0, [pc, #300]	; (8016b2c <nk_unify+0x158>)
 80169fe:	f00e f86b 	bl	8024ad8 <__assert_func>
    NK_ASSERT(clip);
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d106      	bne.n	8016a16 <nk_unify+0x42>
 8016a08:	4b49      	ldr	r3, [pc, #292]	; (8016b30 <nk_unify+0x15c>)
 8016a0a:	4a47      	ldr	r2, [pc, #284]	; (8016b28 <nk_unify+0x154>)
 8016a0c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8016a10:	4846      	ldr	r0, [pc, #280]	; (8016b2c <nk_unify+0x158>)
 8016a12:	f00e f861 	bl	8024ad8 <__assert_func>
    clip->x = NK_MAX(a->x, x0);
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	edd3 7a00 	vldr	s15, [r3]
 8016a1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8016a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a28:	dd01      	ble.n	8016a2e <nk_unify+0x5a>
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	e001      	b.n	8016a32 <nk_unify+0x5e>
 8016a2e:	693b      	ldr	r3, [r7, #16]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	697a      	ldr	r2, [r7, #20]
 8016a34:	6013      	str	r3, [r2, #0]
    clip->y = NK_MAX(a->y, y0);
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8016a3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8016a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a48:	dd01      	ble.n	8016a4e <nk_unify+0x7a>
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	e001      	b.n	8016a52 <nk_unify+0x7e>
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	697a      	ldr	r2, [r7, #20]
 8016a54:	6053      	str	r3, [r2, #4]
    clip->w = NK_MIN(a->x + a->w, x1) - clip->x;
 8016a56:	693b      	ldr	r3, [r7, #16]
 8016a58:	ed93 7a00 	vldr	s14, [r3]
 8016a5c:	693b      	ldr	r3, [r7, #16]
 8016a5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8016a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a66:	ed97 7a01 	vldr	s14, [r7, #4]
 8016a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a72:	dd08      	ble.n	8016a86 <nk_unify+0xb2>
 8016a74:	693b      	ldr	r3, [r7, #16]
 8016a76:	ed93 7a00 	vldr	s14, [r3]
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8016a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a84:	e001      	b.n	8016a8a <nk_unify+0xb6>
 8016a86:	edd7 7a01 	vldr	s15, [r7, #4]
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	ed93 7a00 	vldr	s14, [r3]
 8016a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	edc3 7a02 	vstr	s15, [r3, #8]
    clip->h = NK_MIN(a->y + a->h, y1) - clip->y;
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8016aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016aaa:	ed97 7a00 	vldr	s14, [r7]
 8016aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab6:	dd08      	ble.n	8016aca <nk_unify+0xf6>
 8016ab8:	693b      	ldr	r3, [r7, #16]
 8016aba:	ed93 7a01 	vldr	s14, [r3, #4]
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	edd3 7a03 	vldr	s15, [r3, #12]
 8016ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ac8:	e001      	b.n	8016ace <nk_unify+0xfa>
 8016aca:	edd7 7a00 	vldr	s15, [r7]
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	ed93 7a01 	vldr	s14, [r3, #4]
 8016ad4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	edc3 7a03 	vstr	s15, [r3, #12]
    clip->w = NK_MAX(0, clip->w);
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	edd3 7a02 	vldr	s15, [r3, #8]
 8016ae4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aec:	dd02      	ble.n	8016af4 <nk_unify+0x120>
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	689b      	ldr	r3, [r3, #8]
 8016af2:	e001      	b.n	8016af8 <nk_unify+0x124>
 8016af4:	f04f 0300 	mov.w	r3, #0
 8016af8:	697a      	ldr	r2, [r7, #20]
 8016afa:	6093      	str	r3, [r2, #8]
    clip->h = NK_MAX(0, clip->h);
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8016b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b0a:	dd02      	ble.n	8016b12 <nk_unify+0x13e>
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	68db      	ldr	r3, [r3, #12]
 8016b10:	e001      	b.n	8016b16 <nk_unify+0x142>
 8016b12:	f04f 0300 	mov.w	r3, #0
 8016b16:	697a      	ldr	r2, [r7, #20]
 8016b18:	60d3      	str	r3, [r2, #12]
}
 8016b1a:	bf00      	nop
 8016b1c:	3718      	adds	r7, #24
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}
 8016b22:	bf00      	nop
 8016b24:	08028afc 	.word	0x08028afc
 8016b28:	0802a86c 	.word	0x0802a86c
 8016b2c:	08028b00 	.word	0x08028b00
 8016b30:	08028b1c 	.word	0x08028b1c

08016b34 <nk_triangle_from_direction>:

NK_API void
nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,
    float pad_x, float pad_y, enum nk_heading direction)
{
 8016b34:	b590      	push	{r4, r7, lr}
 8016b36:	b08b      	sub	sp, #44	; 0x2c
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	61f8      	str	r0, [r7, #28]
 8016b3c:	eeb0 6a40 	vmov.f32	s12, s0
 8016b40:	eef0 6a60 	vmov.f32	s13, s1
 8016b44:	eeb0 7a41 	vmov.f32	s14, s2
 8016b48:	eef0 7a61 	vmov.f32	s15, s3
 8016b4c:	ed87 2a02 	vstr	s4, [r7, #8]
 8016b50:	edc7 2a01 	vstr	s5, [r7, #4]
 8016b54:	460b      	mov	r3, r1
 8016b56:	ed87 6a03 	vstr	s12, [r7, #12]
 8016b5a:	edc7 6a04 	vstr	s13, [r7, #16]
 8016b5e:	ed87 7a05 	vstr	s14, [r7, #20]
 8016b62:	edc7 7a06 	vstr	s15, [r7, #24]
 8016b66:	70fb      	strb	r3, [r7, #3]
    float w_half, h_half;
    NK_ASSERT(result);
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d106      	bne.n	8016b7c <nk_triangle_from_direction+0x48>
 8016b6e:	4bcf      	ldr	r3, [pc, #828]	; (8016eac <nk_triangle_from_direction+0x378>)
 8016b70:	4acf      	ldr	r2, [pc, #828]	; (8016eb0 <nk_triangle_from_direction+0x37c>)
 8016b72:	f44f 7188 	mov.w	r1, #272	; 0x110
 8016b76:	48cf      	ldr	r0, [pc, #828]	; (8016eb4 <nk_triangle_from_direction+0x380>)
 8016b78:	f00d ffae 	bl	8024ad8 <__assert_func>

    r.w = NK_MAX(2 * pad_x, r.w);
 8016b7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8016b80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8016b84:	edd7 7a05 	vldr	s15, [r7, #20]
 8016b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b90:	d502      	bpl.n	8016b98 <nk_triangle_from_direction+0x64>
 8016b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8016b96:	e003      	b.n	8016ba0 <nk_triangle_from_direction+0x6c>
 8016b98:	edd7 7a02 	vldr	s15, [r7, #8]
 8016b9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016ba0:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = NK_MAX(2 * pad_y, r.h);
 8016ba4:	edd7 7a01 	vldr	s15, [r7, #4]
 8016ba8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8016bac:	edd7 7a06 	vldr	s15, [r7, #24]
 8016bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb8:	d502      	bpl.n	8016bc0 <nk_triangle_from_direction+0x8c>
 8016bba:	edd7 7a06 	vldr	s15, [r7, #24]
 8016bbe:	e003      	b.n	8016bc8 <nk_triangle_from_direction+0x94>
 8016bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8016bc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016bc8:	edc7 7a06 	vstr	s15, [r7, #24]
    r.w = r.w - 2 * pad_x;
 8016bcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8016bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8016bd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016bdc:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = r.h - 2 * pad_y;
 8016be0:	ed97 7a06 	vldr	s14, [r7, #24]
 8016be4:	edd7 7a01 	vldr	s15, [r7, #4]
 8016be8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016bf0:	edc7 7a06 	vstr	s15, [r7, #24]

    r.x = r.x + pad_x;
 8016bf4:	ed97 7a03 	vldr	s14, [r7, #12]
 8016bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8016bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c00:	edc7 7a03 	vstr	s15, [r7, #12]
    r.y = r.y + pad_y;
 8016c04:	ed97 7a04 	vldr	s14, [r7, #16]
 8016c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8016c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c10:	edc7 7a04 	vstr	s15, [r7, #16]

    w_half = r.w / 2.0f;
 8016c14:	ed97 7a05 	vldr	s14, [r7, #20]
 8016c18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016c20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    h_half = r.h / 2.0f;
 8016c24:	ed97 7a06 	vldr	s14, [r7, #24]
 8016c28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016c30:	edc7 7a08 	vstr	s15, [r7, #32]

    if (direction == NK_UP) {
 8016c34:	78fb      	ldrb	r3, [r7, #3]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d14d      	bne.n	8016cd6 <nk_triangle_from_direction+0x1a2>
        result[0] = nk_vec2(r.x + w_half, r.y);
 8016c3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8016c3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c46:	ed97 7a04 	vldr	s14, [r7, #16]
 8016c4a:	eef0 0a47 	vmov.f32	s1, s14
 8016c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8016c52:	f7ff fe9d 	bl	8016990 <nk_vec2>
 8016c56:	eeb0 7a40 	vmov.f32	s14, s0
 8016c5a:	eef0 7a60 	vmov.f32	s15, s1
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	ed83 7a00 	vstr	s14, [r3]
 8016c64:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 8016c68:	ed97 7a03 	vldr	s14, [r7, #12]
 8016c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8016c70:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016c74:	ed97 7a04 	vldr	s14, [r7, #16]
 8016c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8016c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c80:	69fb      	ldr	r3, [r7, #28]
 8016c82:	f103 0408 	add.w	r4, r3, #8
 8016c86:	eef0 0a67 	vmov.f32	s1, s15
 8016c8a:	eeb0 0a66 	vmov.f32	s0, s13
 8016c8e:	f7ff fe7f 	bl	8016990 <nk_vec2>
 8016c92:	eeb0 7a40 	vmov.f32	s14, s0
 8016c96:	eef0 7a60 	vmov.f32	s15, s1
 8016c9a:	ed84 7a00 	vstr	s14, [r4]
 8016c9e:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8016ca2:	edd7 6a03 	vldr	s13, [r7, #12]
 8016ca6:	ed97 7a04 	vldr	s14, [r7, #16]
 8016caa:	edd7 7a06 	vldr	s15, [r7, #24]
 8016cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016cb2:	69fb      	ldr	r3, [r7, #28]
 8016cb4:	f103 0410 	add.w	r4, r3, #16
 8016cb8:	eef0 0a67 	vmov.f32	s1, s15
 8016cbc:	eeb0 0a66 	vmov.f32	s0, s13
 8016cc0:	f7ff fe66 	bl	8016990 <nk_vec2>
 8016cc4:	eeb0 7a40 	vmov.f32	s14, s0
 8016cc8:	eef0 7a60 	vmov.f32	s15, s1
 8016ccc:	ed84 7a00 	vstr	s14, [r4]
 8016cd0:	edc4 7a01 	vstr	s15, [r4, #4]
    } else {
        result[0] = nk_vec2(r.x, r.y + h_half);
        result[1] = nk_vec2(r.x + r.w, r.y);
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
    }
}
 8016cd4:	e0e6      	b.n	8016ea4 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_RIGHT) {
 8016cd6:	78fb      	ldrb	r3, [r7, #3]
 8016cd8:	2b01      	cmp	r3, #1
 8016cda:	d149      	bne.n	8016d70 <nk_triangle_from_direction+0x23c>
        result[0] = nk_vec2(r.x, r.y);
 8016cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8016ce0:	ed97 7a04 	vldr	s14, [r7, #16]
 8016ce4:	eef0 0a47 	vmov.f32	s1, s14
 8016ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8016cec:	f7ff fe50 	bl	8016990 <nk_vec2>
 8016cf0:	eeb0 7a40 	vmov.f32	s14, s0
 8016cf4:	eef0 7a60 	vmov.f32	s15, s1
 8016cf8:	69fb      	ldr	r3, [r7, #28]
 8016cfa:	ed83 7a00 	vstr	s14, [r3]
 8016cfe:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
 8016d02:	ed97 7a03 	vldr	s14, [r7, #12]
 8016d06:	edd7 7a05 	vldr	s15, [r7, #20]
 8016d0a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016d0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8016d12:	edd7 7a08 	vldr	s15, [r7, #32]
 8016d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	f103 0408 	add.w	r4, r3, #8
 8016d20:	eef0 0a67 	vmov.f32	s1, s15
 8016d24:	eeb0 0a66 	vmov.f32	s0, s13
 8016d28:	f7ff fe32 	bl	8016990 <nk_vec2>
 8016d2c:	eeb0 7a40 	vmov.f32	s14, s0
 8016d30:	eef0 7a60 	vmov.f32	s15, s1
 8016d34:	ed84 7a00 	vstr	s14, [r4]
 8016d38:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8016d3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8016d40:	ed97 7a04 	vldr	s14, [r7, #16]
 8016d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8016d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d4c:	69fb      	ldr	r3, [r7, #28]
 8016d4e:	f103 0410 	add.w	r4, r3, #16
 8016d52:	eef0 0a67 	vmov.f32	s1, s15
 8016d56:	eeb0 0a66 	vmov.f32	s0, s13
 8016d5a:	f7ff fe19 	bl	8016990 <nk_vec2>
 8016d5e:	eeb0 7a40 	vmov.f32	s14, s0
 8016d62:	eef0 7a60 	vmov.f32	s15, s1
 8016d66:	ed84 7a00 	vstr	s14, [r4]
 8016d6a:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8016d6e:	e099      	b.n	8016ea4 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_DOWN) {
 8016d70:	78fb      	ldrb	r3, [r7, #3]
 8016d72:	2b02      	cmp	r3, #2
 8016d74:	d149      	bne.n	8016e0a <nk_triangle_from_direction+0x2d6>
        result[0] = nk_vec2(r.x, r.y);
 8016d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8016d7e:	eef0 0a47 	vmov.f32	s1, s14
 8016d82:	eeb0 0a67 	vmov.f32	s0, s15
 8016d86:	f7ff fe03 	bl	8016990 <nk_vec2>
 8016d8a:	eeb0 7a40 	vmov.f32	s14, s0
 8016d8e:	eef0 7a60 	vmov.f32	s15, s1
 8016d92:	69fb      	ldr	r3, [r7, #28]
 8016d94:	ed83 7a00 	vstr	s14, [r3]
 8016d98:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8016d9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8016da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8016da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016da8:	ed97 7a04 	vldr	s14, [r7, #16]
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	f103 0408 	add.w	r4, r3, #8
 8016db2:	eef0 0a47 	vmov.f32	s1, s14
 8016db6:	eeb0 0a67 	vmov.f32	s0, s15
 8016dba:	f7ff fde9 	bl	8016990 <nk_vec2>
 8016dbe:	eeb0 7a40 	vmov.f32	s14, s0
 8016dc2:	eef0 7a60 	vmov.f32	s15, s1
 8016dc6:	ed84 7a00 	vstr	s14, [r4]
 8016dca:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + w_half, r.y + r.h);
 8016dce:	ed97 7a03 	vldr	s14, [r7, #12]
 8016dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016dd6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016dda:	ed97 7a04 	vldr	s14, [r7, #16]
 8016dde:	edd7 7a06 	vldr	s15, [r7, #24]
 8016de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016de6:	69fb      	ldr	r3, [r7, #28]
 8016de8:	f103 0410 	add.w	r4, r3, #16
 8016dec:	eef0 0a67 	vmov.f32	s1, s15
 8016df0:	eeb0 0a66 	vmov.f32	s0, s13
 8016df4:	f7ff fdcc 	bl	8016990 <nk_vec2>
 8016df8:	eeb0 7a40 	vmov.f32	s14, s0
 8016dfc:	eef0 7a60 	vmov.f32	s15, s1
 8016e00:	ed84 7a00 	vstr	s14, [r4]
 8016e04:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8016e08:	e04c      	b.n	8016ea4 <nk_triangle_from_direction+0x370>
        result[0] = nk_vec2(r.x, r.y + h_half);
 8016e0a:	edd7 6a03 	vldr	s13, [r7, #12]
 8016e0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8016e12:	edd7 7a08 	vldr	s15, [r7, #32]
 8016e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e1a:	eef0 0a67 	vmov.f32	s1, s15
 8016e1e:	eeb0 0a66 	vmov.f32	s0, s13
 8016e22:	f7ff fdb5 	bl	8016990 <nk_vec2>
 8016e26:	eeb0 7a40 	vmov.f32	s14, s0
 8016e2a:	eef0 7a60 	vmov.f32	s15, s1
 8016e2e:	69fb      	ldr	r3, [r7, #28]
 8016e30:	ed83 7a00 	vstr	s14, [r3]
 8016e34:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8016e38:	ed97 7a03 	vldr	s14, [r7, #12]
 8016e3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8016e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e44:	ed97 7a04 	vldr	s14, [r7, #16]
 8016e48:	69fb      	ldr	r3, [r7, #28]
 8016e4a:	f103 0408 	add.w	r4, r3, #8
 8016e4e:	eef0 0a47 	vmov.f32	s1, s14
 8016e52:	eeb0 0a67 	vmov.f32	s0, s15
 8016e56:	f7ff fd9b 	bl	8016990 <nk_vec2>
 8016e5a:	eeb0 7a40 	vmov.f32	s14, s0
 8016e5e:	eef0 7a60 	vmov.f32	s15, s1
 8016e62:	ed84 7a00 	vstr	s14, [r4]
 8016e66:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
 8016e6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8016e6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016e72:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016e76:	ed97 7a04 	vldr	s14, [r7, #16]
 8016e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8016e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e82:	69fb      	ldr	r3, [r7, #28]
 8016e84:	f103 0410 	add.w	r4, r3, #16
 8016e88:	eef0 0a67 	vmov.f32	s1, s15
 8016e8c:	eeb0 0a66 	vmov.f32	s0, s13
 8016e90:	f7ff fd7e 	bl	8016990 <nk_vec2>
 8016e94:	eeb0 7a40 	vmov.f32	s14, s0
 8016e98:	eef0 7a60 	vmov.f32	s15, s1
 8016e9c:	ed84 7a00 	vstr	s14, [r4]
 8016ea0:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8016ea4:	bf00      	nop
 8016ea6:	372c      	adds	r7, #44	; 0x2c
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd90      	pop	{r4, r7, pc}
 8016eac:	08028b24 	.word	0x08028b24
 8016eb0:	0802a878 	.word	0x0802a878
 8016eb4:	08028b00 	.word	0x08028b00

08016eb8 <nk_create_page_element>:
 *                          PAGE ELEMENT
 *
 * ===============================================================*/
NK_LIB struct nk_page_element*
nk_create_page_element(struct nk_context *ctx)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    if (ctx->freelist) {
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016ec6:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d00e      	beq.n	8016eec <nk_create_page_element+0x34>
        /* unlink page element from free list */
        elem = ctx->freelist;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016ed4:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8016ed8:	60fb      	str	r3, [r7, #12]
        ctx->freelist = elem->next;
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8016ee6:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
 8016eea:	e036      	b.n	8016f5a <nk_create_page_element+0xa2>
    } else if (ctx->use_pool) {
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016ef2:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d015      	beq.n	8016f26 <nk_create_page_element+0x6e>
        /* allocate page element from memory pool */
        elem = nk_pool_alloc(&ctx->pool);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8016f00:	3324      	adds	r3, #36	; 0x24
 8016f02:	4618      	mov	r0, r3
 8016f04:	f002 fa88 	bl	8019418 <nk_pool_alloc>
 8016f08:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d105      	bne.n	8016f1c <nk_create_page_element+0x64>
 8016f10:	4b1b      	ldr	r3, [pc, #108]	; (8016f80 <nk_create_page_element+0xc8>)
 8016f12:	4a1c      	ldr	r2, [pc, #112]	; (8016f84 <nk_create_page_element+0xcc>)
 8016f14:	2114      	movs	r1, #20
 8016f16:	481c      	ldr	r0, [pc, #112]	; (8016f88 <nk_create_page_element+0xd0>)
 8016f18:	f00d fdde 	bl	8024ad8 <__assert_func>
        if (!elem) return 0;
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d11b      	bne.n	8016f5a <nk_create_page_element+0xa2>
 8016f22:	2300      	movs	r3, #0
 8016f24:	e027      	b.n	8016f76 <nk_create_page_element+0xbe>
    } else {
        /* allocate new page element from back of fixed size memory buffer */
        NK_STORAGE const nk_size size = sizeof(struct nk_page_element);
        NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f503 50d4 	add.w	r0, r3, #6784	; 0x1a80
 8016f2c:	300c      	adds	r0, #12
 8016f2e:	4b17      	ldr	r3, [pc, #92]	; (8016f8c <nk_create_page_element+0xd4>)
 8016f30:	681a      	ldr	r2, [r3, #0]
 8016f32:	4b17      	ldr	r3, [pc, #92]	; (8016f90 <nk_create_page_element+0xd8>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2101      	movs	r1, #1
 8016f38:	f7f7 fd62 	bl	800ea00 <nk_buffer_alloc>
 8016f3c:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d105      	bne.n	8016f50 <nk_create_page_element+0x98>
 8016f44:	4b0e      	ldr	r3, [pc, #56]	; (8016f80 <nk_create_page_element+0xc8>)
 8016f46:	4a0f      	ldr	r2, [pc, #60]	; (8016f84 <nk_create_page_element+0xcc>)
 8016f48:	211b      	movs	r1, #27
 8016f4a:	480f      	ldr	r0, [pc, #60]	; (8016f88 <nk_create_page_element+0xd0>)
 8016f4c:	f00d fdc4 	bl	8024ad8 <__assert_func>
        if (!elem) return 0;
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d101      	bne.n	8016f5a <nk_create_page_element+0xa2>
 8016f56:	2300      	movs	r3, #0
 8016f58:	e00d      	b.n	8016f76 <nk_create_page_element+0xbe>
    }
    nk_zero_struct(*elem);
 8016f5a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016f5e:	68f8      	ldr	r0, [r7, #12]
 8016f60:	f00b fb90 	bl	8022684 <nk_zero>
    elem->next = 0;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	2200      	movs	r2, #0
 8016f68:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    elem->prev = 0;
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    return elem;
 8016f74:	68fb      	ldr	r3, [r7, #12]
}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3710      	adds	r7, #16
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	bf00      	nop
 8016f80:	08028b2c 	.word	0x08028b2c
 8016f84:	0802a894 	.word	0x0802a894
 8016f88:	08028b34 	.word	0x08028b34
 8016f8c:	0802a8ac 	.word	0x0802a8ac
 8016f90:	0802a8b0 	.word	0x0802a8b0

08016f94 <nk_link_page_element_into_freelist>:
NK_LIB void
nk_link_page_element_into_freelist(struct nk_context *ctx,
    struct nk_page_element *elem)
{
 8016f94:	b480      	push	{r7}
 8016f96:	b083      	sub	sp, #12
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
    /* link table into freelist */
    if (!ctx->freelist) {
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fa4:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d107      	bne.n	8016fbc <nk_link_page_element_into_freelist+0x28>
        ctx->freelist = elem;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
    } else {
        elem->next = ctx->freelist;
        ctx->freelist = elem;
    }
}
 8016fba:	e00e      	b.n	8016fda <nk_link_page_element_into_freelist+0x46>
        elem->next = ctx->freelist;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fc2:	f8d3 265c 	ldr.w	r2, [r3, #1628]	; 0x65c
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        ctx->freelist = elem;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
}
 8016fda:	bf00      	nop
 8016fdc:	370c      	adds	r7, #12
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe4:	4770      	bx	lr

08016fe6 <nk_free_page_element>:
NK_LIB void
nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)
{
 8016fe6:	b580      	push	{r7, lr}
 8016fe8:	b084      	sub	sp, #16
 8016fea:	af00      	add	r7, sp, #0
 8016fec:	6078      	str	r0, [r7, #4]
 8016fee:	6039      	str	r1, [r7, #0]
    /* we have a pool so just add to free list */
    if (ctx->use_pool) {
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016ff6:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d004      	beq.n	8017008 <nk_free_page_element+0x22>
        nk_link_page_element_into_freelist(ctx, elem);
 8016ffe:	6839      	ldr	r1, [r7, #0]
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f7ff ffc7 	bl	8016f94 <nk_link_page_element_into_freelist>
        return;
 8017006:	e024      	b.n	8017052 <nk_free_page_element+0x6c>
    }
    /* if possible remove last element from back of fixed memory buffer */
    {void *elem_end = (void*)(elem + 1);
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801700e:	60fb      	str	r3, [r7, #12]
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017016:	f8d3 2aac 	ldr.w	r2, [r3, #2732]	; 0xaac
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017020:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8017024:	4413      	add	r3, r2
 8017026:	60bb      	str	r3, [r7, #8]
    if (elem_end == buffer_end)
 8017028:	68fa      	ldr	r2, [r7, #12]
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	429a      	cmp	r2, r3
 801702e:	d10c      	bne.n	801704a <nk_free_page_element+0x64>
        ctx->memory.size -= sizeof(struct nk_page_element);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017036:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 801703a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017044:	f8c2 3ac4 	str.w	r3, [r2, #2756]	; 0xac4
 8017048:	e003      	b.n	8017052 <nk_free_page_element+0x6c>
    else nk_link_page_element_into_freelist(ctx, elem);}
 801704a:	6839      	ldr	r1, [r7, #0]
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f7ff ffa1 	bl	8016f94 <nk_link_page_element_into_freelist>
}
 8017052:	3710      	adds	r7, #16
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}

08017058 <nk_create_panel>:
 *                              PANEL
 *
 * ===============================================================*/
NK_LIB void*
nk_create_panel(struct nk_context *ctx)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	f7ff ff29 	bl	8016eb8 <nk_create_page_element>
 8017066:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d101      	bne.n	8017072 <nk_create_panel+0x1a>
 801706e:	2300      	movs	r3, #0
 8017070:	e005      	b.n	801707e <nk_create_panel+0x26>
    nk_zero_struct(*elem);
 8017072:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8017076:	68f8      	ldr	r0, [r7, #12]
 8017078:	f00b fb04 	bl	8022684 <nk_zero>
    return &elem->data.pan;
 801707c:	68fb      	ldr	r3, [r7, #12]
}
 801707e:	4618      	mov	r0, r3
 8017080:	3710      	adds	r7, #16
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}

08017086 <nk_free_panel>:
NK_LIB void
nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)
{
 8017086:	b580      	push	{r7, lr}
 8017088:	b084      	sub	sp, #16
 801708a:	af00      	add	r7, sp, #0
 801708c:	6078      	str	r0, [r7, #4]
 801708e:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 8017098:	68b9      	ldr	r1, [r7, #8]
 801709a:	6878      	ldr	r0, [r7, #4]
 801709c:	f7ff ffa3 	bl	8016fe6 <nk_free_page_element>
}
 80170a0:	bf00      	nop
 80170a2:	3710      	adds	r7, #16
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}

080170a8 <nk_panel_has_header>:
NK_LIB nk_bool
nk_panel_has_header(nk_flags flags, const char *title)
{
 80170a8:	b480      	push	{r7}
 80170aa:	b085      	sub	sp, #20
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
 80170b0:	6039      	str	r1, [r7, #0]
    nk_bool active = 0;
 80170b2:	2300      	movs	r3, #0
 80170b4:	60fb      	str	r3, [r7, #12]
    active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f003 0318 	and.w	r3, r3, #24
 80170bc:	60fb      	str	r3, [r7, #12]
    active = active || (flags & NK_WINDOW_TITLE);
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d104      	bne.n	80170ce <nk_panel_has_header+0x26>
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d001      	beq.n	80170d2 <nk_panel_has_header+0x2a>
 80170ce:	2301      	movs	r3, #1
 80170d0:	e000      	b.n	80170d4 <nk_panel_has_header+0x2c>
 80170d2:	2300      	movs	r3, #0
 80170d4:	60fb      	str	r3, [r7, #12]
    active = active && !(flags & NK_WINDOW_HIDDEN) && title;
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d009      	beq.n	80170f0 <nk_panel_has_header+0x48>
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d104      	bne.n	80170f0 <nk_panel_has_header+0x48>
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d001      	beq.n	80170f0 <nk_panel_has_header+0x48>
 80170ec:	2301      	movs	r3, #1
 80170ee:	e000      	b.n	80170f2 <nk_panel_has_header+0x4a>
 80170f0:	2300      	movs	r3, #0
 80170f2:	60fb      	str	r3, [r7, #12]
    return active;
 80170f4:	68fb      	ldr	r3, [r7, #12]
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3714      	adds	r7, #20
 80170fa:	46bd      	mov	sp, r7
 80170fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017100:	4770      	bx	lr
	...

08017104 <nk_panel_get_padding>:
NK_LIB struct nk_vec2
nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)
{
 8017104:	b480      	push	{r7}
 8017106:	b087      	sub	sp, #28
 8017108:	af00      	add	r7, sp, #0
 801710a:	60f8      	str	r0, [r7, #12]
 801710c:	460b      	mov	r3, r1
 801710e:	72fb      	strb	r3, [r7, #11]
    switch (type) {
 8017110:	7afb      	ldrb	r3, [r7, #11]
 8017112:	2b80      	cmp	r3, #128	; 0x80
 8017114:	f000 809a 	beq.w	801724c <nk_panel_get_padding+0x148>
 8017118:	2b80      	cmp	r3, #128	; 0x80
 801711a:	dc49      	bgt.n	80171b0 <nk_panel_get_padding+0xac>
 801711c:	2b20      	cmp	r3, #32
 801711e:	dc45      	bgt.n	80171ac <nk_panel_get_padding+0xa8>
 8017120:	2b02      	cmp	r3, #2
 8017122:	db45      	blt.n	80171b0 <nk_panel_get_padding+0xac>
 8017124:	3b02      	subs	r3, #2
 8017126:	2b1e      	cmp	r3, #30
 8017128:	d842      	bhi.n	80171b0 <nk_panel_get_padding+0xac>
 801712a:	a201      	add	r2, pc, #4	; (adr r2, 8017130 <nk_panel_get_padding+0x2c>)
 801712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017130:	080171cb 	.word	0x080171cb
 8017134:	080171b1 	.word	0x080171b1
 8017138:	080171e5 	.word	0x080171e5
 801713c:	080171b1 	.word	0x080171b1
 8017140:	080171b1 	.word	0x080171b1
 8017144:	080171b1 	.word	0x080171b1
 8017148:	080171b1 	.word	0x080171b1
 801714c:	080171b1 	.word	0x080171b1
 8017150:	080171b1 	.word	0x080171b1
 8017154:	080171b1 	.word	0x080171b1
 8017158:	080171b1 	.word	0x080171b1
 801715c:	080171b1 	.word	0x080171b1
 8017160:	080171b1 	.word	0x080171b1
 8017164:	080171b1 	.word	0x080171b1
 8017168:	080171ff 	.word	0x080171ff
 801716c:	080171b1 	.word	0x080171b1
 8017170:	080171b1 	.word	0x080171b1
 8017174:	080171b1 	.word	0x080171b1
 8017178:	080171b1 	.word	0x080171b1
 801717c:	080171b1 	.word	0x080171b1
 8017180:	080171b1 	.word	0x080171b1
 8017184:	080171b1 	.word	0x080171b1
 8017188:	080171b1 	.word	0x080171b1
 801718c:	080171b1 	.word	0x080171b1
 8017190:	080171b1 	.word	0x080171b1
 8017194:	080171b1 	.word	0x080171b1
 8017198:	080171b1 	.word	0x080171b1
 801719c:	080171b1 	.word	0x080171b1
 80171a0:	080171b1 	.word	0x080171b1
 80171a4:	080171b1 	.word	0x080171b1
 80171a8:	08017219 	.word	0x08017219
 80171ac:	2b40      	cmp	r3, #64	; 0x40
 80171ae:	d040      	beq.n	8017232 <nk_panel_get_padding+0x12e>
    default:
    case NK_PANEL_WINDOW: return style->window.padding;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171b6:	461a      	mov	r2, r3
 80171b8:	f107 0310 	add.w	r3, r7, #16
 80171bc:	f602 02ec 	addw	r2, r2, #2284	; 0x8ec
 80171c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80171c8:	e04c      	b.n	8017264 <nk_panel_get_padding+0x160>
    case NK_PANEL_GROUP: return style->window.group_padding;
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171d0:	461a      	mov	r2, r3
 80171d2:	f107 0310 	add.w	r3, r7, #16
 80171d6:	f602 02f4 	addw	r2, r2, #2292	; 0x8f4
 80171da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171de:	e883 0003 	stmia.w	r3, {r0, r1}
 80171e2:	e03f      	b.n	8017264 <nk_panel_get_padding+0x160>
    case NK_PANEL_POPUP: return style->window.popup_padding;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171ea:	461a      	mov	r2, r3
 80171ec:	f107 0310 	add.w	r3, r7, #16
 80171f0:	f602 02fc 	addw	r2, r2, #2300	; 0x8fc
 80171f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80171fc:	e032      	b.n	8017264 <nk_panel_get_padding+0x160>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017204:	461a      	mov	r2, r3
 8017206:	f107 0310 	add.w	r3, r7, #16
 801720a:	f602 120c 	addw	r2, r2, #2316	; 0x90c
 801720e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017212:	e883 0003 	stmia.w	r3, {r0, r1}
 8017216:	e025      	b.n	8017264 <nk_panel_get_padding+0x160>
    case NK_PANEL_COMBO: return style->window.combo_padding;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801721e:	461a      	mov	r2, r3
 8017220:	f107 0310 	add.w	r3, r7, #16
 8017224:	f602 1204 	addw	r2, r2, #2308	; 0x904
 8017228:	e892 0003 	ldmia.w	r2, {r0, r1}
 801722c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017230:	e018      	b.n	8017264 <nk_panel_get_padding+0x160>
    case NK_PANEL_MENU: return style->window.menu_padding;
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017238:	461a      	mov	r2, r3
 801723a:	f107 0310 	add.w	r3, r7, #16
 801723e:	f602 1214 	addw	r2, r2, #2324	; 0x914
 8017242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017246:	e883 0003 	stmia.w	r3, {r0, r1}
 801724a:	e00b      	b.n	8017264 <nk_panel_get_padding+0x160>
    case NK_PANEL_TOOLTIP: return style->window.menu_padding;}
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017252:	461a      	mov	r2, r3
 8017254:	f107 0310 	add.w	r3, r7, #16
 8017258:	f602 1214 	addw	r2, r2, #2324	; 0x914
 801725c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017260:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8017264:	693a      	ldr	r2, [r7, #16]
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	ee07 2a10 	vmov	s14, r2
 801726c:	ee07 3a90 	vmov	s15, r3
 8017270:	eeb0 0a47 	vmov.f32	s0, s14
 8017274:	eef0 0a67 	vmov.f32	s1, s15
 8017278:	371c      	adds	r7, #28
 801727a:	46bd      	mov	sp, r7
 801727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop

08017284 <nk_panel_get_border>:
NK_LIB float
nk_panel_get_border(const struct nk_style *style, nk_flags flags,
    enum nk_panel_type type)
{
 8017284:	b480      	push	{r7}
 8017286:	b085      	sub	sp, #20
 8017288:	af00      	add	r7, sp, #0
 801728a:	60f8      	str	r0, [r7, #12]
 801728c:	60b9      	str	r1, [r7, #8]
 801728e:	4613      	mov	r3, r2
 8017290:	71fb      	strb	r3, [r7, #7]
    if (flags & NK_WINDOW_BORDER) {
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	f003 0301 	and.w	r3, r3, #1
 8017298:	2b00      	cmp	r3, #0
 801729a:	f000 8080 	beq.w	801739e <nk_panel_get_border+0x11a>
        switch (type) {
 801729e:	79fb      	ldrb	r3, [r7, #7]
 80172a0:	2b80      	cmp	r3, #128	; 0x80
 80172a2:	d075      	beq.n	8017390 <nk_panel_get_border+0x10c>
 80172a4:	2b80      	cmp	r3, #128	; 0x80
 80172a6:	dc49      	bgt.n	801733c <nk_panel_get_border+0xb8>
 80172a8:	2b20      	cmp	r3, #32
 80172aa:	dc45      	bgt.n	8017338 <nk_panel_get_border+0xb4>
 80172ac:	2b02      	cmp	r3, #2
 80172ae:	db45      	blt.n	801733c <nk_panel_get_border+0xb8>
 80172b0:	3b02      	subs	r3, #2
 80172b2:	2b1e      	cmp	r3, #30
 80172b4:	d842      	bhi.n	801733c <nk_panel_get_border+0xb8>
 80172b6:	a201      	add	r2, pc, #4	; (adr r2, 80172bc <nk_panel_get_border+0x38>)
 80172b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172bc:	0801734b 	.word	0x0801734b
 80172c0:	0801733d 	.word	0x0801733d
 80172c4:	08017359 	.word	0x08017359
 80172c8:	0801733d 	.word	0x0801733d
 80172cc:	0801733d 	.word	0x0801733d
 80172d0:	0801733d 	.word	0x0801733d
 80172d4:	0801733d 	.word	0x0801733d
 80172d8:	0801733d 	.word	0x0801733d
 80172dc:	0801733d 	.word	0x0801733d
 80172e0:	0801733d 	.word	0x0801733d
 80172e4:	0801733d 	.word	0x0801733d
 80172e8:	0801733d 	.word	0x0801733d
 80172ec:	0801733d 	.word	0x0801733d
 80172f0:	0801733d 	.word	0x0801733d
 80172f4:	08017367 	.word	0x08017367
 80172f8:	0801733d 	.word	0x0801733d
 80172fc:	0801733d 	.word	0x0801733d
 8017300:	0801733d 	.word	0x0801733d
 8017304:	0801733d 	.word	0x0801733d
 8017308:	0801733d 	.word	0x0801733d
 801730c:	0801733d 	.word	0x0801733d
 8017310:	0801733d 	.word	0x0801733d
 8017314:	0801733d 	.word	0x0801733d
 8017318:	0801733d 	.word	0x0801733d
 801731c:	0801733d 	.word	0x0801733d
 8017320:	0801733d 	.word	0x0801733d
 8017324:	0801733d 	.word	0x0801733d
 8017328:	0801733d 	.word	0x0801733d
 801732c:	0801733d 	.word	0x0801733d
 8017330:	0801733d 	.word	0x0801733d
 8017334:	08017375 	.word	0x08017375
 8017338:	2b40      	cmp	r3, #64	; 0x40
 801733a:	d022      	beq.n	8017382 <nk_panel_get_border+0xfe>
        default:
        case NK_PANEL_WINDOW: return style->window.border;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017342:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	e02b      	b.n	80173a2 <nk_panel_get_border+0x11e>
        case NK_PANEL_GROUP: return style->window.group_border;
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017350:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	e024      	b.n	80173a2 <nk_panel_get_border+0x11e>
        case NK_PANEL_POPUP: return style->window.popup_border;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801735e:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	e01d      	b.n	80173a2 <nk_panel_get_border+0x11e>
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801736c:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	e016      	b.n	80173a2 <nk_panel_get_border+0x11e>
        case NK_PANEL_COMBO: return style->window.combo_border;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801737a:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	e00f      	b.n	80173a2 <nk_panel_get_border+0x11e>
        case NK_PANEL_MENU: return style->window.menu_border;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017388:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	e008      	b.n	80173a2 <nk_panel_get_border+0x11e>
        case NK_PANEL_TOOLTIP: return style->window.menu_border;
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017396:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	e001      	b.n	80173a2 <nk_panel_get_border+0x11e>
    }} else return 0;
 801739e:	f04f 0300 	mov.w	r3, #0
}
 80173a2:	ee07 3a90 	vmov	s15, r3
 80173a6:	eeb0 0a67 	vmov.f32	s0, s15
 80173aa:	3714      	adds	r7, #20
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <nk_panel_get_border_color>:
NK_LIB struct nk_color
nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)
{
 80173b4:	b480      	push	{r7}
 80173b6:	b085      	sub	sp, #20
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	460b      	mov	r3, r1
 80173be:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 80173c0:	78fb      	ldrb	r3, [r7, #3]
 80173c2:	2b80      	cmp	r3, #128	; 0x80
 80173c4:	d076      	beq.n	80174b4 <nk_panel_get_border_color+0x100>
 80173c6:	2b80      	cmp	r3, #128	; 0x80
 80173c8:	dc4a      	bgt.n	8017460 <nk_panel_get_border_color+0xac>
 80173ca:	2b20      	cmp	r3, #32
 80173cc:	dc46      	bgt.n	801745c <nk_panel_get_border_color+0xa8>
 80173ce:	2b02      	cmp	r3, #2
 80173d0:	db46      	blt.n	8017460 <nk_panel_get_border_color+0xac>
 80173d2:	3b02      	subs	r3, #2
 80173d4:	2b1e      	cmp	r3, #30
 80173d6:	d843      	bhi.n	8017460 <nk_panel_get_border_color+0xac>
 80173d8:	a201      	add	r2, pc, #4	; (adr r2, 80173e0 <nk_panel_get_border_color+0x2c>)
 80173da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173de:	bf00      	nop
 80173e0:	0801746f 	.word	0x0801746f
 80173e4:	08017461 	.word	0x08017461
 80173e8:	0801747d 	.word	0x0801747d
 80173ec:	08017461 	.word	0x08017461
 80173f0:	08017461 	.word	0x08017461
 80173f4:	08017461 	.word	0x08017461
 80173f8:	08017461 	.word	0x08017461
 80173fc:	08017461 	.word	0x08017461
 8017400:	08017461 	.word	0x08017461
 8017404:	08017461 	.word	0x08017461
 8017408:	08017461 	.word	0x08017461
 801740c:	08017461 	.word	0x08017461
 8017410:	08017461 	.word	0x08017461
 8017414:	08017461 	.word	0x08017461
 8017418:	0801748b 	.word	0x0801748b
 801741c:	08017461 	.word	0x08017461
 8017420:	08017461 	.word	0x08017461
 8017424:	08017461 	.word	0x08017461
 8017428:	08017461 	.word	0x08017461
 801742c:	08017461 	.word	0x08017461
 8017430:	08017461 	.word	0x08017461
 8017434:	08017461 	.word	0x08017461
 8017438:	08017461 	.word	0x08017461
 801743c:	08017461 	.word	0x08017461
 8017440:	08017461 	.word	0x08017461
 8017444:	08017461 	.word	0x08017461
 8017448:	08017461 	.word	0x08017461
 801744c:	08017461 	.word	0x08017461
 8017450:	08017461 	.word	0x08017461
 8017454:	08017461 	.word	0x08017461
 8017458:	08017499 	.word	0x08017499
 801745c:	2b40      	cmp	r3, #64	; 0x40
 801745e:	d022      	beq.n	80174a6 <nk_panel_get_border_color+0xf2>
    default:
    case NK_PANEL_WINDOW: return style->window.border_color;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017466:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 801746a:	60fb      	str	r3, [r7, #12]
 801746c:	e028      	b.n	80174c0 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_GROUP: return style->window.group_border_color;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017474:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8017478:	60fb      	str	r3, [r7, #12]
 801747a:	e021      	b.n	80174c0 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_POPUP: return style->window.popup_border_color;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017482:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 8017486:	60fb      	str	r3, [r7, #12]
 8017488:	e01a      	b.n	80174c0 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017490:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8017494:	60fb      	str	r3, [r7, #12]
 8017496:	e013      	b.n	80174c0 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_COMBO: return style->window.combo_border_color;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801749e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 80174a2:	60fb      	str	r3, [r7, #12]
 80174a4:	e00c      	b.n	80174c0 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_MENU: return style->window.menu_border_color;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174ac:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 80174b0:	60fb      	str	r3, [r7, #12]
 80174b2:	e005      	b.n	80174c0 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_TOOLTIP: return style->window.menu_border_color;}
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174ba:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 80174be:	60fb      	str	r3, [r7, #12]
}
 80174c0:	2300      	movs	r3, #0
 80174c2:	7b3a      	ldrb	r2, [r7, #12]
 80174c4:	f362 0307 	bfi	r3, r2, #0, #8
 80174c8:	7b7a      	ldrb	r2, [r7, #13]
 80174ca:	f362 230f 	bfi	r3, r2, #8, #8
 80174ce:	7bba      	ldrb	r2, [r7, #14]
 80174d0:	f362 4317 	bfi	r3, r2, #16, #8
 80174d4:	7bfa      	ldrb	r2, [r7, #15]
 80174d6:	f362 631f 	bfi	r3, r2, #24, #8
 80174da:	4618      	mov	r0, r3
 80174dc:	3714      	adds	r7, #20
 80174de:	46bd      	mov	sp, r7
 80174e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e4:	4770      	bx	lr
 80174e6:	bf00      	nop

080174e8 <nk_panel_is_sub>:
NK_LIB nk_bool
nk_panel_is_sub(enum nk_panel_type type)
{
 80174e8:	b480      	push	{r7}
 80174ea:	b083      	sub	sp, #12
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	4603      	mov	r3, r0
 80174f0:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_SUB)?1:0;
 80174f2:	79fb      	ldrb	r3, [r7, #7]
 80174f4:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	bf14      	ite	ne
 80174fc:	2301      	movne	r3, #1
 80174fe:	2300      	moveq	r3, #0
 8017500:	b2db      	uxtb	r3, r3
}
 8017502:	4618      	mov	r0, r3
 8017504:	370c      	adds	r7, #12
 8017506:	46bd      	mov	sp, r7
 8017508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750c:	4770      	bx	lr

0801750e <nk_panel_is_nonblock>:
NK_LIB nk_bool
nk_panel_is_nonblock(enum nk_panel_type type)
{
 801750e:	b480      	push	{r7}
 8017510:	b083      	sub	sp, #12
 8017512:	af00      	add	r7, sp, #0
 8017514:	4603      	mov	r3, r0
 8017516:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_NONBLOCK)?1:0;
 8017518:	79fb      	ldrb	r3, [r7, #7]
 801751a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801751e:	2b00      	cmp	r3, #0
 8017520:	bf14      	ite	ne
 8017522:	2301      	movne	r3, #1
 8017524:	2300      	moveq	r3, #0
 8017526:	b2db      	uxtb	r3, r3
}
 8017528:	4618      	mov	r0, r3
 801752a:	370c      	adds	r7, #12
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr

08017534 <nk_panel_begin>:
NK_LIB nk_bool
nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)
{
 8017534:	b590      	push	{r4, r7, lr}
 8017536:	b0b7      	sub	sp, #220	; 0xdc
 8017538:	af04      	add	r7, sp, #16
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	60b9      	str	r1, [r7, #8]
 801753e:	4613      	mov	r3, r2
 8017540:	71fb      	strb	r3, [r7, #7]
    const struct nk_user_font *font;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d105      	bne.n	8017554 <nk_panel_begin+0x20>
 8017548:	4b7e      	ldr	r3, [pc, #504]	; (8017744 <nk_panel_begin+0x210>)
 801754a:	4a7f      	ldr	r2, [pc, #508]	; (8017748 <nk_panel_begin+0x214>)
 801754c:	2163      	movs	r1, #99	; 0x63
 801754e:	487f      	ldr	r0, [pc, #508]	; (801774c <nk_panel_begin+0x218>)
 8017550:	f00d fac2 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801755a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801755e:	2b00      	cmp	r3, #0
 8017560:	d105      	bne.n	801756e <nk_panel_begin+0x3a>
 8017562:	4b7b      	ldr	r3, [pc, #492]	; (8017750 <nk_panel_begin+0x21c>)
 8017564:	4a78      	ldr	r2, [pc, #480]	; (8017748 <nk_panel_begin+0x214>)
 8017566:	2164      	movs	r1, #100	; 0x64
 8017568:	4878      	ldr	r0, [pc, #480]	; (801774c <nk_panel_begin+0x218>)
 801756a:	f00d fab5 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017574:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801757c:	2b00      	cmp	r3, #0
 801757e:	d105      	bne.n	801758c <nk_panel_begin+0x58>
 8017580:	4b74      	ldr	r3, [pc, #464]	; (8017754 <nk_panel_begin+0x220>)
 8017582:	4a71      	ldr	r2, [pc, #452]	; (8017748 <nk_panel_begin+0x214>)
 8017584:	2165      	movs	r1, #101	; 0x65
 8017586:	4871      	ldr	r0, [pc, #452]	; (801774c <nk_panel_begin+0x218>)
 8017588:	f00d faa6 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return 0;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d00f      	beq.n	80175b2 <nk_panel_begin+0x7e>
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017598:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801759c:	2b00      	cmp	r3, #0
 801759e:	d008      	beq.n	80175b2 <nk_panel_begin+0x7e>
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175a6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d102      	bne.n	80175b8 <nk_panel_begin+0x84>
 80175b2:	2300      	movs	r3, #0
 80175b4:	f000 bef7 	b.w	80183a6 <nk_panel_begin+0xe72>
    nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175be:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175c6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80175ca:	4618      	mov	r0, r3
 80175cc:	f00b f85a 	bl	8022684 <nk_zero>
    if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175d6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80175dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d109      	bne.n	80175f8 <nk_panel_begin+0xc4>
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175ea:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80175f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d017      	beq.n	8017628 <nk_panel_begin+0xf4>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175fe:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017606:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801760a:	4618      	mov	r0, r3
 801760c:	f00b f83a 	bl	8022684 <nk_zero>
        ctx->current->layout->type = panel_type;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017616:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801761a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801761e:	79fa      	ldrb	r2, [r7, #7]
 8017620:	701a      	strb	r2, [r3, #0]
        return 0;
 8017622:	2300      	movs	r3, #0
 8017624:	f000 bebf 	b.w	80183a6 <nk_panel_begin+0xe72>
    }
    /* pull state into local stack */
    style = &ctx->style;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801762e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    font = style->font;
 8017632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    win = ctx->current;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017642:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017646:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    layout = win->layout;
 801764a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801764e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    out = &win->buffer;
 8017656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801765a:	3364      	adds	r3, #100	; 0x64
 801765c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;
 8017660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801766a:	2b00      	cmp	r3, #0
 801766c:	d101      	bne.n	8017672 <nk_panel_begin+0x13e>
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	e000      	b.n	8017674 <nk_panel_begin+0x140>
 8017672:	2300      	movs	r3, #0
 8017674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#ifdef NK_INCLUDE_COMMAND_USERDATA
    win->buffer.userdata = ctx->userdata;
#endif
    /* pull style configuration into local stack */
    scrollbar_size = style->window.scrollbar_size;
 8017678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801767c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017680:	461a      	mov	r2, r3
 8017682:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017686:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 801768a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801768e:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, panel_type);
 8017692:	79fb      	ldrb	r3, [r7, #7]
 8017694:	4619      	mov	r1, r3
 8017696:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801769a:	f7ff fd33 	bl	8017104 <nk_panel_get_padding>
 801769e:	eeb0 7a40 	vmov.f32	s14, s0
 80176a2:	eef0 7a60 	vmov.f32	s15, s1
 80176a6:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 80176aa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

    /* window movement */
    if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {
 80176ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176b4:	f003 0302 	and.w	r3, r3, #2
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	f000 80bf 	beq.w	801783c <nk_panel_begin+0x308>
 80176be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	f040 80b7 	bne.w	801783c <nk_panel_begin+0x308>
        unsigned int left_mouse_clicked;
        int left_mouse_click_in_cursor;

        /* calculate draggable window space */
        struct nk_rect header;
        header.x = win->bounds.x;
 80176ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176d4:	67bb      	str	r3, [r7, #120]	; 0x78
        header.y = win->bounds.y;
 80176d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176dc:	67fb      	str	r3, [r7, #124]	; 0x7c
        header.w = win->bounds.w;
 80176de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (nk_panel_has_header(win->flags, title)) {
 80176e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176ee:	68b9      	ldr	r1, [r7, #8]
 80176f0:	4618      	mov	r0, r3
 80176f2:	f7ff fcd9 	bl	80170a8 <nk_panel_has_header>
 80176f6:	4603      	mov	r3, r0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d02d      	beq.n	8017758 <nk_panel_begin+0x224>
            header.h = font->height + 2.0f * style->window.header.padding.y;
 80176fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8017700:	ed93 7a01 	vldr	s14, [r3, #4]
 8017704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801770c:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017710:	edd3 7a00 	vldr	s15, [r3]
 8017714:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017718:	ee77 7a27 	vadd.f32	s15, s14, s15
 801771c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            header.h += 2.0f * style->window.header.label_padding.y;
 8017720:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8017724:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801772c:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8017730:	edd3 7a00 	vldr	s15, [r3]
 8017734:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017738:	ee77 7a27 	vadd.f32	s15, s14, s15
 801773c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8017740:	e00e      	b.n	8017760 <nk_panel_begin+0x22c>
 8017742:	bf00      	nop
 8017744:	08028b58 	.word	0x08028b58
 8017748:	0802a8c8 	.word	0x0802a8c8
 801774c:	08028b5c 	.word	0x08028b5c
 8017750:	08028b78 	.word	0x08028b78
 8017754:	08028b88 	.word	0x08028b88
        } else header.h = panel_padding.y;
 8017758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801775c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* window movement by dragging */
        left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8017760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017764:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8017768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 801776c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017770:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8017778:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 801777c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017780:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8017784:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8017788:	2201      	movs	r2, #1
 801778a:	eeb0 0a46 	vmov.f32	s0, s12
 801778e:	eef0 0a66 	vmov.f32	s1, s13
 8017792:	eeb0 1a47 	vmov.f32	s2, s14
 8017796:	eef0 1a67 	vmov.f32	s3, s15
 801779a:	2100      	movs	r1, #0
 801779c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80177a0:	f7fd fdd4 	bl	801534c <nk_input_has_mouse_click_down_in_rect>
 80177a4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
            NK_BUTTON_LEFT, header, nk_true);
        if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 80177a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d045      	beq.n	801783c <nk_panel_begin+0x308>
 80177b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d041      	beq.n	801783c <nk_panel_begin+0x308>
 80177b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d13d      	bne.n	801783c <nk_panel_begin+0x308>
            win->bounds.x = win->bounds.x + in->mouse.delta.x;
 80177c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80177c4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80177c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177cc:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80177d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80177d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80177d8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            win->bounds.y = win->bounds.y + in->mouse.delta.y;
 80177dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80177e0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80177e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177e8:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80177ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80177f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80177f4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;
 80177f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177fc:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8017800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017804:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8017808:	ee77 7a27 	vadd.f32	s15, s14, s15
 801780c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017810:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;
 8017814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017818:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 801781c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017820:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8017824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801782c:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        }
    }

    /* setup panel */
    layout->type = panel_type;
 801783c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017840:	79fa      	ldrb	r2, [r7, #7]
 8017842:	701a      	strb	r2, [r3, #0]
    layout->flags = win->flags;
 8017844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801784a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801784e:	605a      	str	r2, [r3, #4]
    layout->bounds = win->bounds;
 8017850:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017858:	f102 0408 	add.w	r4, r2, #8
 801785c:	334c      	adds	r3, #76	; 0x4c
 801785e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    layout->bounds.x += panel_padding.x;
 8017864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017868:	ed93 7a02 	vldr	s14, [r3, #8]
 801786c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8017870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017874:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017878:	edc3 7a02 	vstr	s15, [r3, #8]
    layout->bounds.w -= 2*panel_padding.x;
 801787c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017880:	ed93 7a04 	vldr	s14, [r3, #16]
 8017884:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8017888:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801788c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017894:	edc3 7a04 	vstr	s15, [r3, #16]
    if (win->flags & NK_WINDOW_BORDER) {
 8017898:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801789e:	f003 0301 	and.w	r3, r3, #1
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d03b      	beq.n	801791e <nk_panel_begin+0x3ea>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
 80178a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80178aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80178ac:	79fa      	ldrb	r2, [r7, #7]
 80178ae:	4619      	mov	r1, r3
 80178b0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80178b4:	f7ff fce6 	bl	8017284 <nk_panel_get_border>
 80178b8:	eef0 7a40 	vmov.f32	s15, s0
 80178bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80178c0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
 80178c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80178c8:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 80178cc:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80178d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80178d4:	ed93 6a02 	vldr	s12, [r3, #8]
 80178d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80178dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80178e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80178e4:	eeb0 2a65 	vmov.f32	s4, s11
 80178e8:	eeb0 0a46 	vmov.f32	s0, s12
 80178ec:	eef0 0a66 	vmov.f32	s1, s13
 80178f0:	eeb0 1a47 	vmov.f32	s2, s14
 80178f4:	eef0 1a67 	vmov.f32	s3, s15
 80178f8:	f7fe ffca 	bl	8016890 <nk_shrink_rect>
 80178fc:	eeb0 6a40 	vmov.f32	s12, s0
 8017900:	eef0 6a60 	vmov.f32	s13, s1
 8017904:	eeb0 7a41 	vmov.f32	s14, s2
 8017908:	eef0 7a61 	vmov.f32	s15, s3
 801790c:	ed84 6a02 	vstr	s12, [r4, #8]
 8017910:	edc4 6a03 	vstr	s13, [r4, #12]
 8017914:	ed84 7a04 	vstr	s14, [r4, #16]
 8017918:	edc4 7a05 	vstr	s15, [r4, #20]
 801791c:	e004      	b.n	8017928 <nk_panel_begin+0x3f4>
    } else layout->border = 0;
 801791e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017922:	f04f 0200 	mov.w	r2, #0
 8017926:	635a      	str	r2, [r3, #52]	; 0x34
    layout->at_y = layout->bounds.y;
 8017928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801792c:	68da      	ldr	r2, [r3, #12]
 801792e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017932:	625a      	str	r2, [r3, #36]	; 0x24
    layout->at_x = layout->bounds.x;
 8017934:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017938:	689a      	ldr	r2, [r3, #8]
 801793a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801793e:	621a      	str	r2, [r3, #32]
    layout->max_x = 0;
 8017940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017944:	f04f 0200 	mov.w	r2, #0
 8017948:	629a      	str	r2, [r3, #40]	; 0x28
    layout->header_height = 0;
 801794a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801794e:	f04f 0200 	mov.w	r2, #0
 8017952:	631a      	str	r2, [r3, #48]	; 0x30
    layout->footer_height = 0;
 8017954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017958:	f04f 0200 	mov.w	r2, #0
 801795c:	62da      	str	r2, [r3, #44]	; 0x2c
    nk_layout_reset_min_row_height(ctx);
 801795e:	68f8      	ldr	r0, [r7, #12]
 8017960:	f7fd fee4 	bl	801572c <nk_layout_reset_min_row_height>
    layout->row.index = 0;
 8017964:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017968:	2200      	movs	r2, #0
 801796a:	669a      	str	r2, [r3, #104]	; 0x68
    layout->row.columns = 0;
 801796c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017970:	2200      	movs	r2, #0
 8017972:	675a      	str	r2, [r3, #116]	; 0x74
    layout->row.ratio = 0;
 8017974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017978:	2200      	movs	r2, #0
 801797a:	679a      	str	r2, [r3, #120]	; 0x78
    layout->row.item_width = 0;
 801797c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017980:	f04f 0200 	mov.w	r2, #0
 8017984:	67da      	str	r2, [r3, #124]	; 0x7c
    layout->row.tree_depth = 0;
 8017986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801798a:	2200      	movs	r2, #0
 801798c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    layout->row.height = panel_padding.y;
 8017990:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017998:	66da      	str	r2, [r3, #108]	; 0x6c
    layout->has_scrolling = nk_true;
 801799a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801799e:	2201      	movs	r2, #1
 80179a0:	639a      	str	r2, [r3, #56]	; 0x38
    if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))
 80179a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80179a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179a8:	f003 0320 	and.w	r3, r3, #32
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d10b      	bne.n	80179c8 <nk_panel_begin+0x494>
        layout->bounds.w -= scrollbar_size.x;
 80179b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80179b8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80179bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80179c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179c4:	edc3 7a04 	vstr	s15, [r3, #16]
    if (!nk_panel_is_nonblock(panel_type)) {
 80179c8:	79fb      	ldrb	r3, [r7, #7]
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7ff fd9f 	bl	801750e <nk_panel_is_nonblock>
 80179d0:	4603      	mov	r3, r0
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d125      	bne.n	8017a22 <nk_panel_begin+0x4ee>
        layout->footer_height = 0;
 80179d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179da:	f04f 0200 	mov.w	r2, #0
 80179de:	62da      	str	r2, [r3, #44]	; 0x2c
        if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)
 80179e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80179e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179e6:	f003 0320 	and.w	r3, r3, #32
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d006      	beq.n	80179fc <nk_panel_begin+0x4c8>
 80179ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80179f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179f4:	f003 0304 	and.w	r3, r3, #4
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d004      	beq.n	8017a06 <nk_panel_begin+0x4d2>
            layout->footer_height = scrollbar_size.y;
 80179fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017a00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a04:	62da      	str	r2, [r3, #44]	; 0x2c
        layout->bounds.h -= layout->footer_height;
 8017a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a0a:	ed93 7a05 	vldr	s14, [r3, #20]
 8017a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a12:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8017a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a1e:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    /* panel header */
    if (nk_panel_has_header(win->flags, title))
 8017a22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a28:	68b9      	ldr	r1, [r7, #8]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f7ff fb3c 	bl	80170a8 <nk_panel_has_header>
 8017a30:	4603      	mov	r3, r0
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	f000 83bc 	beq.w	80181b0 <nk_panel_begin+0xc7c>
    {
        struct nk_text text;
        struct nk_rect header;
        const struct nk_style_item *background = 0;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /* calculate header bounds */
        header.x = win->bounds.x;
 8017a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a44:	65bb      	str	r3, [r7, #88]	; 0x58
        header.y = win->bounds.y;
 8017a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
        header.w = win->bounds.w;
 8017a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017a54:	663b      	str	r3, [r7, #96]	; 0x60
        header.h = font->height + 2.0f * style->window.header.padding.y;
 8017a56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8017a5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8017a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a66:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017a6a:	edd3 7a00 	vldr	s15, [r3]
 8017a6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a76:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        header.h += (2.0f * style->window.header.label_padding.y);
 8017a7a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8017a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a86:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8017a8a:	edd3 7a00 	vldr	s15, [r3]
 8017a8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a96:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        /* shrink panel by header */
        layout->header_height = header.h;
 8017a9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017aa0:	631a      	str	r2, [r3, #48]	; 0x30
        layout->bounds.y += header.h;
 8017aa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017aa6:	ed93 7a03 	vldr	s14, [r3, #12]
 8017aaa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ab6:	edc3 7a03 	vstr	s15, [r3, #12]
        layout->bounds.h -= header.h;
 8017aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017abe:	ed93 7a05 	vldr	s14, [r3, #20]
 8017ac2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017aca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ace:	edc3 7a05 	vstr	s15, [r3, #20]
        layout->at_y += header.h;
 8017ad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ad6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8017ada:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ae6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        /* select correct header background and text color */
        if (ctx->active == win) {
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017af0:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8017af4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d112      	bne.n	8017b22 <nk_panel_begin+0x5ee>
            background = &style->window.header.active;
 8017afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b00:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8017b04:	3304      	adds	r3, #4
 8017b06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_active;
 8017b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b12:	461a      	mov	r2, r3
 8017b14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017b18:	f602 023b 	addw	r2, r2, #2107	; 0x83b
 8017b1c:	6810      	ldr	r0, [r2, #0]
 8017b1e:	6018      	str	r0, [r3, #0]
 8017b20:	e03b      	b.n	8017b9a <nk_panel_begin+0x666>
        } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017b28:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017b2c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017b30:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017b34:	eeb0 0a46 	vmov.f32	s0, s12
 8017b38:	eef0 0a66 	vmov.f32	s1, s13
 8017b3c:	eeb0 1a47 	vmov.f32	s2, s14
 8017b40:	eef0 1a67 	vmov.f32	s3, s15
 8017b44:	4618      	mov	r0, r3
 8017b46:	f7fd fc8f 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d012      	beq.n	8017b76 <nk_panel_begin+0x642>
            background = &style->window.header.hover;
 8017b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b54:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8017b58:	3308      	adds	r3, #8
 8017b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_hover;
 8017b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b66:	461a      	mov	r2, r3
 8017b68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017b6c:	f602 0237 	addw	r2, r2, #2103	; 0x837
 8017b70:	6810      	ldr	r0, [r2, #0]
 8017b72:	6018      	str	r0, [r3, #0]
 8017b74:	e011      	b.n	8017b9a <nk_panel_begin+0x666>
        } else {
            background = &style->window.header.normal;
 8017b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b7a:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 8017b7e:	330c      	adds	r3, #12
 8017b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_normal;
 8017b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017b92:	f602 0233 	addw	r2, r2, #2099	; 0x833
 8017b96:	6810      	ldr	r0, [r2, #0]
 8017b98:	6018      	str	r0, [r3, #0]
        }

        /* draw header background */
        header.h += 1.0f;
 8017b9a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017ba6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        switch(background->type) {
 8017baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017bae:	781b      	ldrb	r3, [r3, #0]
 8017bb0:	2b02      	cmp	r3, #2
 8017bb2:	d02a      	beq.n	8017c0a <nk_panel_begin+0x6d6>
 8017bb4:	2b02      	cmp	r3, #2
 8017bb6:	dc6b      	bgt.n	8017c90 <nk_panel_begin+0x75c>
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d04b      	beq.n	8017c54 <nk_panel_begin+0x720>
 8017bbc:	2b01      	cmp	r3, #1
 8017bbe:	d167      	bne.n	8017c90 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_IMAGE:
                text.background = nk_rgba(0,0,0,0);
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	2000      	movs	r0, #0
 8017bc8:	f7f8 f85c 	bl	800fc84 <nk_rgba>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 8017bd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017bd4:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8017bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017bdc:	3304      	adds	r3, #4
 8017bde:	4ad9      	ldr	r2, [pc, #868]	; (8017f44 <nk_panel_begin+0xa10>)
 8017be0:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017be4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017be8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017bec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017bf0:	6812      	ldr	r2, [r2, #0]
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	eeb0 0a46 	vmov.f32	s0, s12
 8017bf8:	eef0 0a66 	vmov.f32	s1, s13
 8017bfc:	eeb0 1a47 	vmov.f32	s2, s14
 8017c00:	eef0 1a67 	vmov.f32	s3, s15
 8017c04:	f7fa faa6 	bl	8012154 <nk_draw_image>
                break;
 8017c08:	e042      	b.n	8017c90 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_NINE_SLICE:
                text.background = nk_rgba(0, 0, 0, 0);
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	2100      	movs	r1, #0
 8017c10:	2000      	movs	r0, #0
 8017c12:	f7f8 f837 	bl	800fc84 <nk_rgba>
 8017c16:	4603      	mov	r3, r0
 8017c18:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 8017c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017c1e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8017c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017c26:	3304      	adds	r3, #4
 8017c28:	4ac6      	ldr	r2, [pc, #792]	; (8017f44 <nk_panel_begin+0xa10>)
 8017c2a:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017c2e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017c32:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017c36:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017c3a:	6812      	ldr	r2, [r2, #0]
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	eeb0 0a46 	vmov.f32	s0, s12
 8017c42:	eef0 0a66 	vmov.f32	s1, s13
 8017c46:	eeb0 1a47 	vmov.f32	s2, s14
 8017c4a:	eef0 1a67 	vmov.f32	s3, s15
 8017c4e:	f7fa fb73 	bl	8012338 <nk_draw_nine_slice>
                break;
 8017c52:	e01d      	b.n	8017c90 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_COLOR:
                text.background = background->data.color;
 8017c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017c58:	685b      	ldr	r3, [r3, #4]
 8017c5a:	673b      	str	r3, [r7, #112]	; 0x70
                nk_fill_rect(out, header, 0, background->data.color);
 8017c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017c60:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017c64:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017c68:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017c6c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017c70:	6859      	ldr	r1, [r3, #4]
 8017c72:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 8017f48 <nk_panel_begin+0xa14>
 8017c76:	eeb0 0a46 	vmov.f32	s0, s12
 8017c7a:	eef0 0a66 	vmov.f32	s1, s13
 8017c7e:	eeb0 1a47 	vmov.f32	s2, s14
 8017c82:	eef0 1a67 	vmov.f32	s3, s15
 8017c86:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8017c8a:	f7f9 ff09 	bl	8011aa0 <nk_fill_rect>
                break;
 8017c8e:	bf00      	nop
        }

        /* window close button */
        {struct nk_rect button;
        button.y = header.y + style->window.header.padding.y;
 8017c90:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8017c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017c9c:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017ca0:	edd3 7a00 	vldr	s15, [r3]
 8017ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ca8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        button.h = header.h - 2 * style->window.header.padding.y;
 8017cac:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8017cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017cb8:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017cbc:	edd3 7a00 	vldr	s15, [r3]
 8017cc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017cc8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        button.w = button.h;
 8017ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017cce:	653b      	str	r3, [r7, #80]	; 0x50
        if (win->flags & NK_WINDOW_CLOSABLE) {
 8017cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cd6:	f003 0308 	and.w	r3, r3, #8
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	f000 80ad 	beq.w	8017e3a <nk_panel_begin+0x906>
            nk_flags ws = 0;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	647b      	str	r3, [r7, #68]	; 0x44
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8017ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017cec:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8017cf0:	2b01      	cmp	r3, #1
 8017cf2:	d132      	bne.n	8017d5a <nk_panel_begin+0x826>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
 8017cf4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017cf8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8017cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d00:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d0c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017d10:	edd3 7a00 	vldr	s15, [r3]
 8017d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d1c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8017d20:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017d24:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d30:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017d34:	edd3 7a00 	vldr	s15, [r3]
 8017d38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017d3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d44:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017d48:	edd3 7a00 	vldr	s15, [r3]
 8017d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d54:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8017d58:	e029      	b.n	8017dae <nk_panel_begin+0x87a>
            } else {
                button.x = header.x + style->window.header.padding.x;
 8017d5a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8017d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d66:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017d6a:	edd3 7a00 	vldr	s15, [r3]
 8017d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d72:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8017d76:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8017d7a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d86:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017d8a:	edd3 7a00 	vldr	s15, [r3]
 8017d8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d9a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017d9e:	edd3 7a00 	vldr	s15, [r3]
 8017da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017daa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }

            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8017dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017db2:	f103 0164 	add.w	r1, r3, #100	; 0x64
                style->window.header.close_symbol, NK_BUTTON_DEFAULT,
 8017db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017dbe:	f893 4830 	ldrb.w	r4, [r3, #2096]	; 0x830
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8017dc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017dc6:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017dca:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017dce:	6812      	ldr	r2, [r2, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8017dd0:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8017dd4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8017dd8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8017ddc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8017de0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8017de4:	9202      	str	r2, [sp, #8]
 8017de6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017dea:	9201      	str	r2, [sp, #4]
 8017dec:	9300      	str	r3, [sp, #0]
 8017dee:	2300      	movs	r3, #0
 8017df0:	4622      	mov	r2, r4
 8017df2:	eeb0 0a46 	vmov.f32	s0, s12
 8017df6:	eef0 0a66 	vmov.f32	s1, s13
 8017dfa:	eeb0 1a47 	vmov.f32	s2, s14
 8017dfe:	eef0 1a67 	vmov.f32	s3, s15
 8017e02:	f7f7 fcb9 	bl	800f778 <nk_do_button_symbol>
 8017e06:	4603      	mov	r3, r0
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d016      	beq.n	8017e3a <nk_panel_begin+0x906>
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d10f      	bne.n	8017e3a <nk_panel_begin+0x906>
            {
                layout->flags |= NK_WINDOW_HIDDEN;
 8017e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e1e:	685b      	ldr	r3, [r3, #4]
 8017e20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8017e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e28:	605a      	str	r2, [r3, #4]
                layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;
 8017e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e2e:	685b      	ldr	r3, [r3, #4]
 8017e30:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8017e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e38:	605a      	str	r2, [r3, #4]
            }
        }

        /* window minimize button */
        if (win->flags & NK_WINDOW_MINIMIZABLE) {
 8017e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e40:	f003 0310 	and.w	r3, r3, #16
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f000 80c9 	beq.w	8017fdc <nk_panel_begin+0xaa8>
            nk_flags ws = 0;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	643b      	str	r3, [r7, #64]	; 0x40
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8017e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017e56:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	d141      	bne.n	8017ee2 <nk_panel_begin+0x9ae>
                button.x = (header.w + header.x) - button.w;
 8017e5e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017e62:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8017e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e6a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8017e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e72:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                if (!(win->flags & NK_WINDOW_CLOSABLE)) {
 8017e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e7c:	f003 0308 	and.w	r3, r3, #8
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d11b      	bne.n	8017ebc <nk_panel_begin+0x988>
                    button.x -= style->window.header.padding.x;
 8017e84:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017e90:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017e94:	edd3 7a00 	vldr	s15, [r3]
 8017e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    header.w -= style->window.header.padding.x;
 8017ea0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017eac:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017eb0:	edd3 7a00 	vldr	s15, [r3]
 8017eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017eb8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
                }
                header.w -= button.w + style->window.header.spacing.x;
 8017ebc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017ec0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ecc:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017ed0:	edd3 7a00 	vldr	s15, [r3]
 8017ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017edc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8017ee0:	e01d      	b.n	8017f1e <nk_panel_begin+0x9ea>
            } else {
                button.x = header.x;
 8017ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017ee4:	64bb      	str	r3, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8017ee6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8017eea:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017eee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ef6:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017efa:	edd3 7a00 	vldr	s15, [r3]
 8017efe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f0a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017f0e:	edd3 7a00 	vldr	s15, [r3]
 8017f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f1a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8017f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017f22:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8017f26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d00b      	beq.n	8017f4c <nk_panel_begin+0xa18>
 8017f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f3c:	f893 2832 	ldrb.w	r2, [r3, #2098]	; 0x832
 8017f40:	e00a      	b.n	8017f58 <nk_panel_begin+0xa24>
 8017f42:	bf00      	nop
 8017f44:	0802a8c4 	.word	0x0802a8c4
 8017f48:	00000000 	.word	0x00000000
 8017f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f54:	f893 2831 	ldrb.w	r2, [r3, #2097]	; 0x831
 8017f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f5c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8017f60:	3318      	adds	r3, #24
                style->window.header.maximize_symbol: style->window.header.minimize_symbol,
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017f62:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8017f66:	6809      	ldr	r1, [r1, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8017f68:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8017f6c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8017f70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8017f74:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8017f78:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017f7c:	9102      	str	r1, [sp, #8]
 8017f7e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017f82:	9101      	str	r1, [sp, #4]
 8017f84:	9300      	str	r3, [sp, #0]
 8017f86:	2300      	movs	r3, #0
 8017f88:	eeb0 0a46 	vmov.f32	s0, s12
 8017f8c:	eef0 0a66 	vmov.f32	s1, s13
 8017f90:	eeb0 1a47 	vmov.f32	s2, s14
 8017f94:	eef0 1a67 	vmov.f32	s3, s15
 8017f98:	4621      	mov	r1, r4
 8017f9a:	f7f7 fbed 	bl	800f778 <nk_do_button_symbol>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d01b      	beq.n	8017fdc <nk_panel_begin+0xaa8>
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d114      	bne.n	8017fdc <nk_panel_begin+0xaa8>
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8017fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d005      	beq.n	8017fcc <nk_panel_begin+0xa98>
 8017fc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017fc4:	685b      	ldr	r3, [r3, #4]
 8017fc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8017fca:	e004      	b.n	8017fd6 <nk_panel_begin+0xaa2>
                    layout->flags | NK_WINDOW_MINIMIZED;
 8017fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017fd0:	685b      	ldr	r3, [r3, #4]
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8017fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8017fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017fda:	6053      	str	r3, [r2, #4]
        }}

        {/* window header title */
        int text_len = nk_strlen(title);
 8017fdc:	68b8      	ldr	r0, [r7, #8]
 8017fde:	f00a fb6f 	bl	80226c0 <nk_strlen>
 8017fe2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        struct nk_rect label = {0,0,0,0};
 8017fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017fea:	2200      	movs	r2, #0
 8017fec:	601a      	str	r2, [r3, #0]
 8017fee:	605a      	str	r2, [r3, #4]
 8017ff0:	609a      	str	r2, [r3, #8]
 8017ff2:	60da      	str	r2, [r3, #12]
        float t = font->width(font->userdata, font->height, title, text_len);
 8017ff4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8017ff8:	689b      	ldr	r3, [r3, #8]
 8017ffa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8017ffe:	edd2 7a01 	vldr	s15, [r2, #4]
 8018002:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8018006:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801800a:	68b9      	ldr	r1, [r7, #8]
 801800c:	eeb0 0a67 	vmov.f32	s0, s15
 8018010:	6800      	ldr	r0, [r0, #0]
 8018012:	4798      	blx	r3
 8018014:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        text.padding = nk_vec2(0,0);
 8018018:	ed5f 0a35 	vldr	s1, [pc, #-212]	; 8017f48 <nk_panel_begin+0xa14>
 801801c:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 8017f48 <nk_panel_begin+0xa14>
 8018020:	f7fe fcb6 	bl	8016990 <nk_vec2>
 8018024:	eeb0 7a40 	vmov.f32	s14, s0
 8018028:	eef0 7a60 	vmov.f32	s15, s1
 801802c:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8018030:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        label.x = header.x + style->window.header.padding.x;
 8018034:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8018038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801803c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018040:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8018044:	edd3 7a00 	vldr	s15, [r3]
 8018048:	ee77 7a27 	vadd.f32	s15, s14, s15
 801804c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.x += style->window.header.label_padding.x;
 8018050:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8018054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801805c:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8018060:	edd3 7a00 	vldr	s15, [r3]
 8018064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018068:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.y = header.y + style->window.header.label_padding.y;
 801806c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8018070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018078:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801807c:	edd3 7a00 	vldr	s15, [r3]
 8018080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018084:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        label.h = font->height + 2 * style->window.header.label_padding.y;
 8018088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801808c:	ed93 7a01 	vldr	s14, [r3, #4]
 8018090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018098:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801809c:	edd3 7a00 	vldr	s15, [r3]
 80180a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80180a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.w = t + 2 * style->window.header.spacing.x;
 80180ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80180b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80180b4:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80180b8:	edd3 7a00 	vldr	s15, [r3]
 80180bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80180c0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80180c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180c8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 80180cc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80180d0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80180d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80180d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80180dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80180e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80180e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80180e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ec:	d50a      	bpl.n	8018104 <nk_panel_begin+0xbd0>
 80180ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80180f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fa:	bf4c      	ite	mi
 80180fc:	2301      	movmi	r3, #1
 80180fe:	2300      	movpl	r3, #0
 8018100:	b2db      	uxtb	r3, r3
 8018102:	e011      	b.n	8018128 <nk_panel_begin+0xbf4>
 8018104:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8018108:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801810c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018110:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018118:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801811c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018120:	bf4c      	ite	mi
 8018122:	2301      	movmi	r3, #1
 8018124:	2300      	movpl	r3, #0
 8018126:	b2db      	uxtb	r3, r3
 8018128:	2b00      	cmp	r3, #0
 801812a:	d002      	beq.n	8018132 <nk_panel_begin+0xbfe>
 801812c:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 8017f48 <nk_panel_begin+0xa14>
 8018130:	e01d      	b.n	801816e <nk_panel_begin+0xc3a>
 8018132:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8018136:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801813a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801813e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8018142:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018146:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801814a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801814e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018152:	d502      	bpl.n	801815a <nk_panel_begin+0xc26>
 8018154:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018158:	e009      	b.n	801816e <nk_panel_begin+0xc3a>
 801815a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801815e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018166:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801816a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801816e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_widget_text(out, label, (const char*)title, text_len, &text, NK_TEXT_LEFT, font);}
 8018172:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8018176:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801817a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801817e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8018182:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801818a:	9301      	str	r3, [sp, #4]
 801818c:	2311      	movs	r3, #17
 801818e:	9300      	str	r3, [sp, #0]
 8018190:	4613      	mov	r3, r2
 8018192:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018196:	68b9      	ldr	r1, [r7, #8]
 8018198:	eeb0 0a46 	vmov.f32	s0, s12
 801819c:	eef0 0a66 	vmov.f32	s1, s13
 80181a0:	eeb0 1a47 	vmov.f32	s2, s14
 80181a4:	eef0 1a67 	vmov.f32	s3, s15
 80181a8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80181ac:	f007 f9de 	bl	801f56c <nk_widget_text>
    }

    /* draw window background */
    if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {
 80181b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	f040 808d 	bne.w	80182da <nk_panel_begin+0xda6>
 80181c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181c4:	685b      	ldr	r3, [r3, #4]
 80181c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	f040 8085 	bne.w	80182da <nk_panel_begin+0xda6>
        struct nk_rect body;
        body.x = win->bounds.x;
 80181d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80181d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181d6:	623b      	str	r3, [r7, #32]
        body.w = win->bounds.w;
 80181d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80181dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181de:	62bb      	str	r3, [r7, #40]	; 0x28
        body.y = (win->bounds.y + layout->header_height);
 80181e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80181e4:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80181e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80181f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80181f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        body.h = (win->bounds.h - layout->header_height);
 80181f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80181fc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8018200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018204:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8018208:	ee77 7a67 	vsub.f32	s15, s14, s15
 801820c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        switch(style->window.fixed_background.type) {
 8018210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018218:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 801821c:	2b02      	cmp	r3, #2
 801821e:	d022      	beq.n	8018266 <nk_panel_begin+0xd32>
 8018220:	2b02      	cmp	r3, #2
 8018222:	dc5a      	bgt.n	80182da <nk_panel_begin+0xda6>
 8018224:	2b00      	cmp	r3, #0
 8018226:	d03b      	beq.n	80182a0 <nk_panel_begin+0xd6c>
 8018228:	2b01      	cmp	r3, #1
 801822a:	d156      	bne.n	80182da <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);
 801822c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018230:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8018234:	331c      	adds	r3, #28
 8018236:	4a5e      	ldr	r2, [pc, #376]	; (80183b0 <nk_panel_begin+0xe7c>)
 8018238:	ed97 6a08 	vldr	s12, [r7, #32]
 801823c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8018240:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018244:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018248:	6812      	ldr	r2, [r2, #0]
 801824a:	4619      	mov	r1, r3
 801824c:	eeb0 0a46 	vmov.f32	s0, s12
 8018250:	eef0 0a66 	vmov.f32	s1, s13
 8018254:	eeb0 1a47 	vmov.f32	s2, s14
 8018258:	eef0 1a67 	vmov.f32	s3, s15
 801825c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8018260:	f7f9 ff78 	bl	8012154 <nk_draw_image>
                break;
 8018264:	e039      	b.n	80182da <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, body, &style->window.fixed_background.data.slice, nk_white);
 8018266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801826a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801826e:	331c      	adds	r3, #28
 8018270:	4a4f      	ldr	r2, [pc, #316]	; (80183b0 <nk_panel_begin+0xe7c>)
 8018272:	ed97 6a08 	vldr	s12, [r7, #32]
 8018276:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801827a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801827e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018282:	6812      	ldr	r2, [r2, #0]
 8018284:	4619      	mov	r1, r3
 8018286:	eeb0 0a46 	vmov.f32	s0, s12
 801828a:	eef0 0a66 	vmov.f32	s1, s13
 801828e:	eeb0 1a47 	vmov.f32	s2, s14
 8018292:	eef0 1a67 	vmov.f32	s3, s15
 8018296:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801829a:	f7fa f84d 	bl	8012338 <nk_draw_nine_slice>
                break;
 801829e:	e01c      	b.n	80182da <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);
 80182a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80182a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80182a8:	ed97 6a08 	vldr	s12, [r7, #32]
 80182ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80182b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80182b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80182b8:	f8d3 185c 	ldr.w	r1, [r3, #2140]	; 0x85c
 80182bc:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80183b4 <nk_panel_begin+0xe80>
 80182c0:	eeb0 0a46 	vmov.f32	s0, s12
 80182c4:	eef0 0a66 	vmov.f32	s1, s13
 80182c8:	eeb0 1a47 	vmov.f32	s2, s14
 80182cc:	eef0 1a67 	vmov.f32	s3, s15
 80182d0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80182d4:	f7f9 fbe4 	bl	8011aa0 <nk_fill_rect>
                break;
 80182d8:	bf00      	nop
        }
    }

    /* set clipping rectangle */
    {struct nk_rect clip;
    layout->clip = layout->bounds;
 80182da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80182de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80182e2:	f102 043c 	add.w	r4, r2, #60	; 0x3c
 80182e6:	3308      	adds	r3, #8
 80182e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80182ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 80182ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80182f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80182f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80182fa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80182fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018302:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 8018306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801830a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801830e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018312:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 8018316:	ee77 5a27 	vadd.f32	s11, s14, s15
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 801831a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801831e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8018322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018326:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 801832a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801832e:	f107 0310 	add.w	r3, r7, #16
 8018332:	eef0 1a67 	vmov.f32	s3, s15
 8018336:	eeb0 1a65 	vmov.f32	s2, s11
 801833a:	eef0 0a46 	vmov.f32	s1, s12
 801833e:	eeb0 0a66 	vmov.f32	s0, s13
 8018342:	4611      	mov	r1, r2
 8018344:	4618      	mov	r0, r3
 8018346:	f7fe fb45 	bl	80169d4 <nk_unify>
    nk_push_scissor(out, clip);
 801834a:	ed97 6a04 	vldr	s12, [r7, #16]
 801834e:	edd7 6a05 	vldr	s13, [r7, #20]
 8018352:	ed97 7a06 	vldr	s14, [r7, #24]
 8018356:	edd7 7a07 	vldr	s15, [r7, #28]
 801835a:	eeb0 0a46 	vmov.f32	s0, s12
 801835e:	eef0 0a66 	vmov.f32	s1, s13
 8018362:	eeb0 1a47 	vmov.f32	s2, s14
 8018366:	eef0 1a67 	vmov.f32	s3, s15
 801836a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801836e:	f7f9 fa17 	bl	80117a0 <nk_push_scissor>
    layout->clip = clip;}
 8018372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018376:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801837a:	f107 0310 	add.w	r3, r7, #16
 801837e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);
 8018384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801838e:	2b00      	cmp	r3, #0
 8018390:	d108      	bne.n	80183a4 <nk_panel_begin+0xe70>
 8018392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018396:	685b      	ldr	r3, [r3, #4]
 8018398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801839c:	2b00      	cmp	r3, #0
 801839e:	d101      	bne.n	80183a4 <nk_panel_begin+0xe70>
 80183a0:	2301      	movs	r3, #1
 80183a2:	e000      	b.n	80183a6 <nk_panel_begin+0xe72>
 80183a4:	2300      	movs	r3, #0
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	37cc      	adds	r7, #204	; 0xcc
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd90      	pop	{r4, r7, pc}
 80183ae:	bf00      	nop
 80183b0:	0802a8c4 	.word	0x0802a8c4
 80183b4:	00000000 	.word	0x00000000

080183b8 <nk_panel_end>:
NK_LIB void
nk_panel_end(struct nk_context *ctx)
{
 80183b8:	b590      	push	{r4, r7, lr}
 80183ba:	b0b3      	sub	sp, #204	; 0xcc
 80183bc:	af02      	add	r7, sp, #8
 80183be:	6078      	str	r0, [r7, #4]
    struct nk_command_buffer *out;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d106      	bne.n	80183d4 <nk_panel_end+0x1c>
 80183c6:	4b31      	ldr	r3, [pc, #196]	; (801848c <nk_panel_end+0xd4>)
 80183c8:	4a31      	ldr	r2, [pc, #196]	; (8018490 <nk_panel_end+0xd8>)
 80183ca:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80183ce:	4831      	ldr	r0, [pc, #196]	; (8018494 <nk_panel_end+0xdc>)
 80183d0:	f00c fb82 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80183da:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <nk_panel_end+0x38>
 80183e2:	4b2d      	ldr	r3, [pc, #180]	; (8018498 <nk_panel_end+0xe0>)
 80183e4:	4a2a      	ldr	r2, [pc, #168]	; (8018490 <nk_panel_end+0xd8>)
 80183e6:	f240 1153 	movw	r1, #339	; 0x153
 80183ea:	482a      	ldr	r0, [pc, #168]	; (8018494 <nk_panel_end+0xdc>)
 80183ec:	f00c fb74 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80183f6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80183fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d106      	bne.n	8018410 <nk_panel_end+0x58>
 8018402:	4b26      	ldr	r3, [pc, #152]	; (801849c <nk_panel_end+0xe4>)
 8018404:	4a22      	ldr	r2, [pc, #136]	; (8018490 <nk_panel_end+0xd8>)
 8018406:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801840a:	4822      	ldr	r0, [pc, #136]	; (8018494 <nk_panel_end+0xdc>)
 801840c:	f00c fb64 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2b00      	cmp	r3, #0
 8018414:	f000 8792 	beq.w	801933c <nk_panel_end+0xf84>
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801841e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8018422:	2b00      	cmp	r3, #0
 8018424:	f000 878a 	beq.w	801933c <nk_panel_end+0xf84>
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801842e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8018432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018436:	2b00      	cmp	r3, #0
 8018438:	f000 8780 	beq.w	801933c <nk_panel_end+0xf84>
        return;

    window = ctx->current;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018442:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8018446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    layout = window->layout;
 801844a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801844e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    style = &ctx->style;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801845c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    out = &window->buffer;
 8018460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018464:	3364      	adds	r3, #100	; 0x64
 8018466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;
 801846a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801846e:	685b      	ldr	r3, [r3, #4]
 8018470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018474:	2b00      	cmp	r3, #0
 8018476:	d113      	bne.n	80184a0 <nk_panel_end+0xe8>
 8018478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801847c:	685b      	ldr	r3, [r3, #4]
 801847e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018482:	2b00      	cmp	r3, #0
 8018484:	d10c      	bne.n	80184a0 <nk_panel_end+0xe8>
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	e00b      	b.n	80184a2 <nk_panel_end+0xea>
 801848a:	bf00      	nop
 801848c:	08028b58 	.word	0x08028b58
 8018490:	0802a8d8 	.word	0x0802a8d8
 8018494:	08028b5c 	.word	0x08028b5c
 8018498:	08028b78 	.word	0x08028b78
 801849c:	08028b88 	.word	0x08028b88
 80184a0:	2300      	movs	r3, #0
 80184a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (!nk_panel_is_sub(layout->type))
 80184a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80184aa:	781b      	ldrb	r3, [r3, #0]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7ff f81b 	bl	80174e8 <nk_panel_is_sub>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d114      	bne.n	80184e2 <nk_panel_end+0x12a>
        nk_push_scissor(out, nk_null_rect);
 80184b8:	4bcb      	ldr	r3, [pc, #812]	; (80187e8 <nk_panel_end+0x430>)
 80184ba:	ed93 6a00 	vldr	s12, [r3]
 80184be:	edd3 6a01 	vldr	s13, [r3, #4]
 80184c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80184c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80184ca:	eeb0 0a46 	vmov.f32	s0, s12
 80184ce:	eef0 0a66 	vmov.f32	s1, s13
 80184d2:	eeb0 1a47 	vmov.f32	s2, s14
 80184d6:	eef0 1a67 	vmov.f32	s3, s15
 80184da:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80184de:	f7f9 f95f 	bl	80117a0 <nk_push_scissor>

    /* cache configuration data */
    scrollbar_size = style->window.scrollbar_size;
 80184e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80184e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80184ea:	461a      	mov	r2, r3
 80184ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80184f0:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 80184f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80184f8:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, layout->type);
 80184fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	4619      	mov	r1, r3
 8018504:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8018508:	f7fe fdfc 	bl	8017104 <nk_panel_get_padding>
 801850c:	eeb0 7a40 	vmov.f32	s14, s0
 8018510:	eef0 7a60 	vmov.f32	s15, s1
 8018514:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8018518:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* update the current cursor Y-position to point over the last added widget */
    layout->at_y += layout->row.height;
 801851c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018520:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8018524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018528:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 801852c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018530:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018534:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    /* dynamic panels */
    if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))
 8018538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801853c:	685b      	ldr	r3, [r3, #4]
 801853e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018542:	2b00      	cmp	r3, #0
 8018544:	f000 8111 	beq.w	801876a <nk_panel_end+0x3b2>
 8018548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018552:	2b00      	cmp	r3, #0
 8018554:	f040 8109 	bne.w	801876a <nk_panel_end+0x3b2>
    {
        /* update panel height to fit dynamic growth */
        struct nk_rect empty_space;
        if (layout->at_y < (layout->bounds.y + layout->bounds.h))
 8018558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801855c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8018560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018564:	edd3 6a03 	vldr	s13, [r3, #12]
 8018568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801856c:	edd3 7a05 	vldr	s15, [r3, #20]
 8018570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801857c:	d50d      	bpl.n	801859a <nk_panel_end+0x1e2>
            layout->bounds.h = layout->at_y - layout->bounds.y;
 801857e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018582:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8018586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801858a:	edd3 7a03 	vldr	s15, [r3, #12]
 801858e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018596:	edc3 7a05 	vstr	s15, [r3, #20]

        /* fill top empty space */
        empty_space.x = window->bounds.x;
 801859a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801859e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185a0:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 80185a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80185a6:	68db      	ldr	r3, [r3, #12]
 80185a8:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.h = panel_padding.y;
 80185aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80185ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        empty_space.w = window->bounds.w;
 80185ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80185b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185b4:	65bb      	str	r3, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80185b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80185ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80185be:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80185c2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80185c6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80185ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80185ce:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80185d2:	ed9f 2a86 	vldr	s4, [pc, #536]	; 80187ec <nk_panel_end+0x434>
 80185d6:	eeb0 0a46 	vmov.f32	s0, s12
 80185da:	eef0 0a66 	vmov.f32	s1, s13
 80185de:	eeb0 1a47 	vmov.f32	s2, s14
 80185e2:	eef0 1a67 	vmov.f32	s3, s15
 80185e6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80185ea:	f7f9 fa59 	bl	8011aa0 <nk_fill_rect>

        /* fill left empty space */
        empty_space.x = window->bounds.x;
 80185ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80185f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185f4:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 80185f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80185fa:	68db      	ldr	r3, [r3, #12]
 80185fc:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 80185fe:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8018602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018606:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801860a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801860e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 8018612:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018616:	695b      	ldr	r3, [r3, #20]
 8018618:	65fb      	str	r3, [r7, #92]	; 0x5c
        nk_fill_rect(out, empty_space, 0, style->window.background);
 801861a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801861e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018622:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8018626:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 801862a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801862e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8018632:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8018636:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 80187ec <nk_panel_end+0x434>
 801863a:	eeb0 0a46 	vmov.f32	s0, s12
 801863e:	eef0 0a66 	vmov.f32	s1, s13
 8018642:	eeb0 1a47 	vmov.f32	s2, s14
 8018646:	eef0 1a67 	vmov.f32	s3, s15
 801864a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801864e:	f7f9 fa27 	bl	8011aa0 <nk_fill_rect>

        /* fill right empty space */
        empty_space.x = layout->bounds.x + layout->bounds.w;
 8018652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018656:	ed93 7a02 	vldr	s14, [r3, #8]
 801865a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801865e:	edd3 7a04 	vldr	s15, [r3, #16]
 8018662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018666:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 801866a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801866e:	68db      	ldr	r3, [r3, #12]
 8018670:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 8018672:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8018676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801867a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801867e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018682:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 8018686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801868a:	695b      	ldr	r3, [r3, #20]
 801868c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))
 801868e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018692:	69db      	ldr	r3, [r3, #28]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d10e      	bne.n	80186b8 <nk_panel_end+0x300>
 801869a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801869e:	685b      	ldr	r3, [r3, #4]
 80186a0:	f003 0320 	and.w	r3, r3, #32
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d107      	bne.n	80186b8 <nk_panel_end+0x300>
            empty_space.w += scrollbar_size.x;
 80186a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80186ac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80186b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186b4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80186b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80186bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80186c0:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80186c4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80186c8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80186cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80186d0:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80186d4:	ed9f 2a45 	vldr	s4, [pc, #276]	; 80187ec <nk_panel_end+0x434>
 80186d8:	eeb0 0a46 	vmov.f32	s0, s12
 80186dc:	eef0 0a66 	vmov.f32	s1, s13
 80186e0:	eeb0 1a47 	vmov.f32	s2, s14
 80186e4:	eef0 1a67 	vmov.f32	s3, s15
 80186e8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80186ec:	f7f9 f9d8 	bl	8011aa0 <nk_fill_rect>

        /* fill bottom empty space */
        if (layout->footer_height > 0) {
 80186f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80186f4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80186f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80186fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018700:	dd33      	ble.n	801876a <nk_panel_end+0x3b2>
            empty_space.x = window->bounds.x;
 8018702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018708:	653b      	str	r3, [r7, #80]	; 0x50
            empty_space.y = layout->bounds.y + layout->bounds.h;
 801870a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801870e:	ed93 7a03 	vldr	s14, [r3, #12]
 8018712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018716:	edd3 7a05 	vldr	s15, [r3, #20]
 801871a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801871e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            empty_space.w = window->bounds.w;
 8018722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018728:	65bb      	str	r3, [r7, #88]	; 0x58
            empty_space.h = layout->footer_height;
 801872a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018730:	65fb      	str	r3, [r7, #92]	; 0x5c
            nk_fill_rect(out, empty_space, 0, style->window.background);
 8018732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801873a:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 801873e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8018742:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8018746:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801874a:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 801874e:	ed9f 2a27 	vldr	s4, [pc, #156]	; 80187ec <nk_panel_end+0x434>
 8018752:	eeb0 0a46 	vmov.f32	s0, s12
 8018756:	eef0 0a66 	vmov.f32	s1, s13
 801875a:	eeb0 1a47 	vmov.f32	s2, s14
 801875e:	eef0 1a67 	vmov.f32	s3, s15
 8018762:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018766:	f7f9 f99b 	bl	8011aa0 <nk_fill_rect>
        }
    }

    /* scrollbars */
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 801876a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801876e:	685b      	ldr	r3, [r3, #4]
 8018770:	f003 0320 	and.w	r3, r3, #32
 8018774:	2b00      	cmp	r3, #0
 8018776:	f040 8232 	bne.w	8018bde <nk_panel_end+0x826>
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 801877a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8018784:	2b00      	cmp	r3, #0
 8018786:	f040 822a 	bne.w	8018bde <nk_panel_end+0x826>
        window->scrollbar_hiding_timer < NK_SCROLLBAR_HIDING_TIMEOUT)
 801878a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801878e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 8018792:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8018796:	eef4 7ac7 	vcmpe.f32	s15, s14
 801879a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879e:	f140 821e 	bpl.w	8018bde <nk_panel_end+0x826>
        float scroll_offset;
        float scroll_step;
        float scroll_inc;

        /* mouse wheel scrolling */
        if (nk_panel_is_sub(layout->type))
 80187a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80187a6:	781b      	ldrb	r3, [r3, #0]
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7fe fe9d 	bl	80174e8 <nk_panel_is_sub>
 80187ae:	4603      	mov	r3, r0
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	f000 80cb 	beq.w	801894c <nk_panel_end+0x594>
        {
            /* sub-window mouse wheel scrolling */
            struct nk_window *root_window = window;
 80187b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80187ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            struct nk_panel *root_panel = window->layout;
 80187be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80187c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80187c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 80187ca:	e005      	b.n	80187d8 <nk_panel_end+0x420>
                root_panel = root_panel->parent;
 80187cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80187d0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80187d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 80187d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80187dc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d1f3      	bne.n	80187cc <nk_panel_end+0x414>
            while (root_window->parent)
 80187e4:	e012      	b.n	801880c <nk_panel_end+0x454>
 80187e6:	bf00      	nop
 80187e8:	0802a8b4 	.word	0x0802a8b4
 80187ec:	00000000 	.word	0x00000000
 80187f0:	3dcccccd 	.word	0x3dcccccd
 80187f4:	3c23d70a 	.word	0x3c23d70a
 80187f8:	3d4ccccd 	.word	0x3d4ccccd
 80187fc:	3ba3d70a 	.word	0x3ba3d70a
                root_window = root_window->parent;
 8018800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018804:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8018808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while (root_window->parent)
 801880c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018810:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8018814:	2b00      	cmp	r3, #0
 8018816:	d1f3      	bne.n	8018800 <nk_panel_end+0x448>

            /* only allow scrolling if parent window is active */
            scroll_has_scrolling = 0;
 8018818:	2300      	movs	r3, #0
 801881a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if ((root_window == ctx->active) && layout->has_scrolling) {
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018824:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8018828:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801882c:	429a      	cmp	r2, r3
 801882e:	f040 80d2 	bne.w	80189d6 <nk_panel_end+0x61e>
 8018832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018838:	2b00      	cmp	r3, #0
 801883a:	f000 80cc 	beq.w	80189d6 <nk_panel_end+0x61e>
                /* and panel is being hovered and inside clip rect*/
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 801883e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018842:	ed93 6a02 	vldr	s12, [r3, #8]
 8018846:	edd3 6a03 	vldr	s13, [r3, #12]
 801884a:	ed93 7a04 	vldr	s14, [r3, #16]
 801884e:	edd3 7a05 	vldr	s15, [r3, #20]
 8018852:	eeb0 0a46 	vmov.f32	s0, s12
 8018856:	eef0 0a66 	vmov.f32	s1, s13
 801885a:	eeb0 1a47 	vmov.f32	s2, s14
 801885e:	eef0 1a67 	vmov.f32	s3, s15
 8018862:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8018866:	f7fc fdff 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 801886a:	4603      	mov	r3, r0
 801886c:	2b00      	cmp	r3, #0
 801886e:	f000 80b2 	beq.w	80189d6 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 8018872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018876:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801887a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801887e:	edd3 6a02 	vldr	s13, [r3, #8]
 8018882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018886:	edd3 7a04 	vldr	s15, [r3, #16]
 801888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 801888e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018896:	f140 809e 	bpl.w	80189d6 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 801889a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801889e:	ed93 7a02 	vldr	s14, [r3, #8]
 80188a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188a6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80188aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80188b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80188b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188be:	f140 808a 	bpl.w	80189d6 <nk_panel_end+0x61e>
 80188c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188c6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80188ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80188d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80188da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80188de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e6:	d576      	bpl.n	80189d6 <nk_panel_end+0x61e>
 80188e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80188f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188f4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80188f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188fc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8018900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890c:	d563      	bpl.n	80189d6 <nk_panel_end+0x61e>
                        root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))
                {
                    /* deactivate all parent scrolling */
                    root_panel = window->layout;
 801890e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 801891a:	e009      	b.n	8018930 <nk_panel_end+0x578>
                        root_panel->has_scrolling = nk_false;
 801891c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018920:	2200      	movs	r2, #0
 8018922:	639a      	str	r2, [r3, #56]	; 0x38
                        root_panel = root_panel->parent;
 8018924:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018928:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 801892c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 8018930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018934:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8018938:	2b00      	cmp	r3, #0
 801893a:	d1ef      	bne.n	801891c <nk_panel_end+0x564>
                    }
                    root_panel->has_scrolling = nk_false;
 801893c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018940:	2200      	movs	r2, #0
 8018942:	639a      	str	r2, [r3, #56]	; 0x38
                    scroll_has_scrolling = nk_true;
 8018944:	2301      	movs	r3, #1
 8018946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801894a:	e044      	b.n	80189d6 <nk_panel_end+0x61e>
                }
            }
        } else if (!nk_panel_is_sub(layout->type)) {
 801894c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018950:	781b      	ldrb	r3, [r3, #0]
 8018952:	4618      	mov	r0, r3
 8018954:	f7fe fdc8 	bl	80174e8 <nk_panel_is_sub>
 8018958:	4603      	mov	r3, r0
 801895a:	2b00      	cmp	r3, #0
 801895c:	d138      	bne.n	80189d0 <nk_panel_end+0x618>
            /* window mouse wheel scrolling */
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018964:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8018968:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801896c:	429a      	cmp	r2, r3
 801896e:	d106      	bne.n	801897e <nk_panel_end+0x5c6>
 8018970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018976:	2b00      	cmp	r3, #0
 8018978:	d001      	beq.n	801897e <nk_panel_end+0x5c6>
 801897a:	2301      	movs	r3, #1
 801897c:	e000      	b.n	8018980 <nk_panel_end+0x5c8>
 801897e:	2300      	movs	r3, #0
 8018980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 8018984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018988:	2b00      	cmp	r3, #0
 801898a:	d01b      	beq.n	80189c4 <nk_panel_end+0x60c>
 801898c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018990:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8018994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801899c:	dc08      	bgt.n	80189b0 <nk_panel_end+0x5f8>
 801899e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80189a2:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 80189a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80189aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ae:	dd09      	ble.n	80189c4 <nk_panel_end+0x60c>
 80189b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d005      	beq.n	80189c4 <nk_panel_end+0x60c>
                window->scrolled = nk_true;
 80189b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80189bc:	2201      	movs	r2, #1
 80189be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80189c2:	e008      	b.n	80189d6 <nk_panel_end+0x61e>
            else window->scrolled = nk_false;
 80189c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80189c8:	2200      	movs	r2, #0
 80189ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80189ce:	e002      	b.n	80189d6 <nk_panel_end+0x61e>
        } else scroll_has_scrolling = nk_false;
 80189d0:	2300      	movs	r3, #0
 80189d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        {
            /* vertical scrollbar */
            nk_flags state = 0;
 80189d6:	2300      	movs	r3, #0
 80189d8:	63fb      	str	r3, [r7, #60]	; 0x3c
            scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 80189da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80189de:	ed93 7a02 	vldr	s14, [r3, #8]
 80189e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80189e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80189ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80189ee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80189f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y;
 80189fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80189fe:	68db      	ldr	r3, [r3, #12]
 8018a00:	647b      	str	r3, [r7, #68]	; 0x44
            scroll.w = scrollbar_size.x;
 8018a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a04:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = layout->bounds.h;
 8018a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a0a:	695b      	ldr	r3, [r3, #20]
 8018a0c:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_y;
 8018a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a12:	69db      	ldr	r3, [r3, #28]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	ee07 3a90 	vmov	s15, r3
 8018a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018a1e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_step = scroll.h * 0.10f;
 8018a22:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018a26:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 80187f0 <nk_panel_end+0x438>
 8018a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a2e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = scroll.h * 0.01f;
 8018a32:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018a36:	ed1f 7a91 	vldr	s14, [pc, #-580]	; 80187f4 <nk_panel_end+0x43c>
 8018a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a3e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_target = (float)(int)(layout->at_y - scroll.y);
 8018a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a46:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8018a4a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8018a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a5a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollv, in, style->font);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8018a64:	3318      	adds	r3, #24
 8018a66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018a6a:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
 8018a6c:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8018a70:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8018a74:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8018a78:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018a7c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8018a80:	9201      	str	r2, [sp, #4]
 8018a82:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018a86:	9200      	str	r2, [sp, #0]
 8018a88:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 8018a8c:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8018a90:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8018a94:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8018a98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018a9c:	eeb0 0a46 	vmov.f32	s0, s12
 8018aa0:	eef0 0a66 	vmov.f32	s1, s13
 8018aa4:	eeb0 1a47 	vmov.f32	s2, s14
 8018aa8:	eef0 1a67 	vmov.f32	s3, s15
 8018aac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8018ab0:	f003 f96a 	bl	801bd88 <nk_do_scrollbarv>
 8018ab4:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_y = (nk_uint)scroll_offset;
 8018ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018abc:	69db      	ldr	r3, [r3, #28]
 8018abe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8018ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018ac6:	ee17 2a90 	vmov	r2, s15
 8018aca:	601a      	str	r2, [r3, #0]
            if (in && scroll_has_scrolling)
 8018acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d009      	beq.n	8018ae8 <nk_panel_end+0x730>
 8018ad4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d005      	beq.n	8018ae8 <nk_panel_end+0x730>
                in->mouse.scroll_delta.y = 0;
 8018adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ae0:	f04f 0200 	mov.w	r2, #0
 8018ae4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        }
        {
            /* horizontal scrollbar */
            nk_flags state = 0;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	63bb      	str	r3, [r7, #56]	; 0x38
            scroll.x = layout->bounds.x;
 8018aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018af0:	689b      	ldr	r3, [r3, #8]
 8018af2:	643b      	str	r3, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y + layout->bounds.h;
 8018af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018af8:	ed93 7a03 	vldr	s14, [r3, #12]
 8018afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b00:	edd3 7a05 	vldr	s15, [r3, #20]
 8018b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b08:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            scroll.w = layout->bounds.w;
 8018b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b10:	691b      	ldr	r3, [r3, #16]
 8018b12:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = scrollbar_size.y;
 8018b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b16:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_x;
 8018b18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b1c:	699b      	ldr	r3, [r3, #24]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	ee07 3a90 	vmov	s15, r3
 8018b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018b28:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 8018b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b30:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8018b34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8018b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b44:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_step = layout->max_x * 0.05f;
 8018b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b4c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8018b50:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 80187f8 <nk_panel_end+0x440>
 8018b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b58:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = layout->max_x * 0.005f;
 8018b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b60:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8018b64:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 80187fc <nk_panel_end+0x444>
 8018b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b6c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollh, in, style->font);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8018b76:	330c      	adds	r3, #12
 8018b78:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018b7c:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 8018b7e:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8018b82:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8018b86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8018b8a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018b8e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8018b92:	9201      	str	r2, [sp, #4]
 8018b94:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018b98:	9200      	str	r2, [sp, #0]
 8018b9a:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 8018b9e:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8018ba2:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8018ba6:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8018baa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018bae:	eeb0 0a46 	vmov.f32	s0, s12
 8018bb2:	eef0 0a66 	vmov.f32	s1, s13
 8018bb6:	eeb0 1a47 	vmov.f32	s2, s14
 8018bba:	eef0 1a67 	vmov.f32	s3, s15
 8018bbe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8018bc2:	f003 fb7f 	bl	801c2c4 <nk_do_scrollbarh>
 8018bc6:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_x = (nk_uint)scroll_offset;
 8018bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018bce:	699b      	ldr	r3, [r3, #24]
 8018bd0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8018bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018bd8:	ee17 2a90 	vmov	r2, s15
 8018bdc:	601a      	str	r2, [r3, #0]
        }
    }

    /* hide scroll if no user input */
    if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {
 8018bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d051      	beq.n	8018c90 <nk_panel_end+0x8d8>
        int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8018bf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bfa:	d10f      	bne.n	8018c1c <nk_panel_end+0x864>
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8018c02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c0a:	d107      	bne.n	8018c1c <nk_panel_end+0x864>
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8018c12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c1a:	d001      	beq.n	8018c20 <nk_panel_end+0x868>
 8018c1c:	2301      	movs	r3, #1
 8018c1e:	e000      	b.n	8018c22 <nk_panel_end+0x86a>
 8018c20:	2300      	movs	r3, #0
 8018c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int is_window_hovered = nk_window_is_hovered(ctx);
 8018c26:	6878      	ldr	r0, [r7, #4]
 8018c28:	f00b fd9c 	bl	8024764 <nk_window_is_hovered>
 8018c2c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018c36:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8018c3a:	f003 0302 	and.w	r3, r3, #2
 8018c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 8018c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d103      	bne.n	8018c52 <nk_panel_end+0x89a>
 8018c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d107      	bne.n	8018c62 <nk_panel_end+0x8aa>
 8018c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d113      	bne.n	8018c82 <nk_panel_end+0x8ca>
 8018c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d10f      	bne.n	8018c82 <nk_panel_end+0x8ca>
            window->scrollbar_hiding_timer += ctx->delta_time_seconds;
 8018c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018c66:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018c70:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8018c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018c7c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8018c80:	e00c      	b.n	8018c9c <nk_panel_end+0x8e4>
        else window->scrollbar_hiding_timer = 0;
 8018c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018c86:	f04f 0200 	mov.w	r2, #0
 8018c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8018c8e:	e005      	b.n	8018c9c <nk_panel_end+0x8e4>
    } else window->scrollbar_hiding_timer = 0;
 8018c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018c94:	f04f 0200 	mov.w	r2, #0
 8018c98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* window border */
    if (layout->flags & NK_WINDOW_BORDER)
 8018c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	f003 0301 	and.w	r3, r3, #1
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d078      	beq.n	8018d9c <nk_panel_end+0x9e4>
    {
        struct nk_color border_color = nk_panel_get_border_color(style, layout->type);
 8018caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018cae:	781b      	ldrb	r3, [r3, #0]
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8018cb6:	f7fe fb7d 	bl	80173b4 <nk_panel_get_border_color>
 8018cba:	4603      	mov	r3, r0
 8018cbc:	637b      	str	r3, [r7, #52]	; 0x34
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8018cbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018cc2:	685b      	ldr	r3, [r3, #4]
 8018cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            ? (style->window.border + window->bounds.y + layout->header_height)
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d014      	beq.n	8018cf6 <nk_panel_end+0x93e>
            ? (style->window.border + window->bounds.y + layout->header_height)
 8018ccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018cd4:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8018cd8:	ed93 7a00 	vldr	s14, [r3]
 8018cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018ce0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8018ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018ce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018cec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8018cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018cf4:	e021      	b.n	8018d3a <nk_panel_end+0x982>
 8018cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018cfa:	685b      	ldr	r3, [r3, #4]
 8018cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
                : (window->bounds.y + window->bounds.h));
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d010      	beq.n	8018d26 <nk_panel_end+0x96e>
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
 8018d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d08:	ed93 7a03 	vldr	s14, [r3, #12]
 8018d0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d10:	edd3 7a05 	vldr	s15, [r3, #20]
 8018d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                : (window->bounds.y + window->bounds.h));
 8018d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d24:	e009      	b.n	8018d3a <nk_panel_end+0x982>
 8018d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d2a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8018d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d32:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8018d36:	ee77 7a27 	vadd.f32	s15, s14, s15
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8018d3a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        struct nk_rect b = window->bounds;
 8018d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d42:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8018d46:	334c      	adds	r3, #76	; 0x4c
 8018d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018d4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        b.h = padding_y - window->bounds.y;
 8018d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d52:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8018d56:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8018d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d5e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        nk_stroke_rect(out, b, 0, layout->border, border_color);
 8018d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d66:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 8018d6a:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8018d6e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8018d72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018d76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018d7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018d7c:	eef0 2a65 	vmov.f32	s5, s11
 8018d80:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8018efc <nk_panel_end+0xb44>
 8018d84:	eeb0 0a46 	vmov.f32	s0, s12
 8018d88:	eef0 0a66 	vmov.f32	s1, s13
 8018d8c:	eeb0 1a47 	vmov.f32	s2, s14
 8018d90:	eef0 1a67 	vmov.f32	s3, s15
 8018d94:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018d98:	f7f8 fd7a 	bl	8011890 <nk_stroke_rect>
    }

    /* scaler */
    if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))
 8018d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018da0:	685b      	ldr	r3, [r3, #4]
 8018da2:	f003 0304 	and.w	r3, r3, #4
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	f000 81e1 	beq.w	801916e <nk_panel_end+0xdb6>
 8018dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	f000 81dc 	beq.w	801916e <nk_panel_end+0xdb6>
 8018db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	f040 81d4 	bne.w	801916e <nk_panel_end+0xdb6>
    {
        /* calculate scaler bounds */
        struct nk_rect scaler;
        scaler.w = scrollbar_size.x;
 8018dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018dc8:	61fb      	str	r3, [r7, #28]
        scaler.h = scrollbar_size.y;
 8018dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018dcc:	623b      	str	r3, [r7, #32]
        scaler.y = layout->bounds.y + layout->bounds.h;
 8018dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018dd2:	ed93 7a03 	vldr	s14, [r3, #12]
 8018dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018dda:	edd3 7a05 	vldr	s15, [r3, #20]
 8018dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018de2:	edc7 7a06 	vstr	s15, [r7, #24]
        if (layout->flags & NK_WINDOW_SCALE_LEFT)
 8018de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018dea:	685b      	ldr	r3, [r3, #4]
 8018dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d00e      	beq.n	8018e12 <nk_panel_end+0xa5a>
            scaler.x = layout->bounds.x - panel_padding.x * 0.5f;
 8018df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018df8:	ed93 7a02 	vldr	s14, [r3, #8]
 8018dfc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018e00:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018e0c:	edc7 7a05 	vstr	s15, [r7, #20]
 8018e10:	e00f      	b.n	8018e32 <nk_panel_end+0xa7a>
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 8018e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e16:	ed93 7a02 	vldr	s14, [r3, #8]
 8018e1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8018e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e26:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e2e:	edc7 7a05 	vstr	s15, [r7, #20]
        if (layout->flags & NK_WINDOW_NO_SCROLLBAR)
 8018e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e36:	685b      	ldr	r3, [r3, #4]
 8018e38:	f003 0320 	and.w	r3, r3, #32
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d007      	beq.n	8018e50 <nk_panel_end+0xa98>
            scaler.x -= scaler.w;
 8018e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8018e44:	edd7 7a07 	vldr	s15, [r7, #28]
 8018e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018e4c:	edc7 7a05 	vstr	s15, [r7, #20]

        /* draw scaler */
        {const struct nk_style_item *item = &style->window.scaler;
 8018e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e54:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8018e58:	3314      	adds	r3, #20
 8018e5a:	67bb      	str	r3, [r7, #120]	; 0x78
        if (item->type == NK_STYLE_ITEM_IMAGE)
 8018e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018e5e:	781b      	ldrb	r3, [r3, #0]
 8018e60:	2b01      	cmp	r3, #1
 8018e62:	d119      	bne.n	8018e98 <nk_panel_end+0xae0>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
 8018e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018e66:	3304      	adds	r3, #4
 8018e68:	4a25      	ldr	r2, [pc, #148]	; (8018f00 <nk_panel_end+0xb48>)
 8018e6a:	ed97 6a05 	vldr	s12, [r7, #20]
 8018e6e:	edd7 6a06 	vldr	s13, [r7, #24]
 8018e72:	ed97 7a07 	vldr	s14, [r7, #28]
 8018e76:	edd7 7a08 	vldr	s15, [r7, #32]
 8018e7a:	6812      	ldr	r2, [r2, #0]
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	eeb0 0a46 	vmov.f32	s0, s12
 8018e82:	eef0 0a66 	vmov.f32	s1, s13
 8018e86:	eeb0 1a47 	vmov.f32	s2, s14
 8018e8a:	eef0 1a67 	vmov.f32	s3, s15
 8018e8e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018e92:	f7f9 f95f 	bl	8012154 <nk_draw_image>
 8018e96:	e063      	b.n	8018f60 <nk_panel_end+0xba8>
        else {
            if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8018e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d02e      	beq.n	8018f04 <nk_panel_end+0xb4c>
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018ea6:	edd7 6a05 	vldr	s13, [r7, #20]
 8018eaa:	ed97 6a06 	vldr	s12, [r7, #24]
 8018eae:	edd7 5a05 	vldr	s11, [r7, #20]
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8018eb2:	ed97 7a06 	vldr	s14, [r7, #24]
 8018eb6:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018eba:	ee37 5a27 	vadd.f32	s10, s14, s15
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8018ebe:	ed97 7a05 	vldr	s14, [r7, #20]
 8018ec2:	edd7 7a07 	vldr	s15, [r7, #28]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018ec6:	ee77 4a27 	vadd.f32	s9, s14, s15
                    scaler.y + scaler.h, item->data.color);
 8018eca:	ed97 7a06 	vldr	s14, [r7, #24]
 8018ece:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018ed8:	6859      	ldr	r1, [r3, #4]
 8018eda:	eef0 2a67 	vmov.f32	s5, s15
 8018ede:	eeb0 2a64 	vmov.f32	s4, s9
 8018ee2:	eef0 1a45 	vmov.f32	s3, s10
 8018ee6:	eeb0 1a65 	vmov.f32	s2, s11
 8018eea:	eef0 0a46 	vmov.f32	s1, s12
 8018eee:	eeb0 0a66 	vmov.f32	s0, s13
 8018ef2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018ef6:	f7f8 ffb3 	bl	8011e60 <nk_fill_triangle>
 8018efa:	e031      	b.n	8018f60 <nk_panel_end+0xba8>
 8018efc:	00000000 	.word	0x00000000
 8018f00:	0802a8c4 	.word	0x0802a8c4
            } else {
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8018f04:	ed97 7a05 	vldr	s14, [r7, #20]
 8018f08:	edd7 7a07 	vldr	s15, [r7, #28]
 8018f0c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8018f10:	ed97 6a06 	vldr	s12, [r7, #24]
 8018f14:	ed97 7a05 	vldr	s14, [r7, #20]
 8018f18:	edd7 7a07 	vldr	s15, [r7, #28]
 8018f1c:	ee77 5a27 	vadd.f32	s11, s14, s15
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8018f20:	ed97 7a06 	vldr	s14, [r7, #24]
 8018f24:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8018f28:	ee37 5a27 	vadd.f32	s10, s14, s15
 8018f2c:	edd7 4a05 	vldr	s9, [r7, #20]
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8018f30:	ed97 7a06 	vldr	s14, [r7, #24]
 8018f34:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8018f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018f3e:	6859      	ldr	r1, [r3, #4]
 8018f40:	eef0 2a67 	vmov.f32	s5, s15
 8018f44:	eeb0 2a64 	vmov.f32	s4, s9
 8018f48:	eef0 1a45 	vmov.f32	s3, s10
 8018f4c:	eeb0 1a65 	vmov.f32	s2, s11
 8018f50:	eef0 0a46 	vmov.f32	s1, s12
 8018f54:	eeb0 0a66 	vmov.f32	s0, s13
 8018f58:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018f5c:	f7f8 ff80 	bl	8011e60 <nk_fill_triangle>
            }
        }}

        /* do window scaling */
        if (!(window->flags & NK_WINDOW_ROM)) {
 8018f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f040 80ff 	bne.w	801916e <nk_panel_end+0xdb6>
            struct nk_vec2 window_size = style->window.min_size;
 8018f70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018f78:	461a      	mov	r2, r3
 8018f7a:	f107 030c 	add.w	r3, r7, #12
 8018f7e:	f602 02e4 	addw	r2, r2, #2276	; 0x8e4
 8018f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f86:	e883 0003 	stmia.w	r3, {r0, r1}
            int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8018f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018f8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8018f92:	677b      	str	r3, [r7, #116]	; 0x74
            int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
 8018f94:	ed97 6a05 	vldr	s12, [r7, #20]
 8018f98:	edd7 6a06 	vldr	s13, [r7, #24]
 8018f9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8018fa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8018fa4:	2201      	movs	r2, #1
 8018fa6:	eeb0 0a46 	vmov.f32	s0, s12
 8018faa:	eef0 0a66 	vmov.f32	s1, s13
 8018fae:	eeb0 1a47 	vmov.f32	s2, s14
 8018fb2:	eef0 1a67 	vmov.f32	s3, s15
 8018fb6:	2100      	movs	r1, #0
 8018fb8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8018fbc:	f7fc f9c6 	bl	801534c <nk_input_has_mouse_click_down_in_rect>
 8018fc0:	6738      	str	r0, [r7, #112]	; 0x70
                    NK_BUTTON_LEFT, scaler, nk_true);

            if (left_mouse_down && left_mouse_click_in_scaler) {
 8018fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	f000 80d2 	beq.w	801916e <nk_panel_end+0xdb6>
 8018fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	f000 80ce 	beq.w	801916e <nk_panel_end+0xdb6>
                float delta_x = in->mouse.delta.x;
 8018fd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018fd6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8018fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8018fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018fe2:	685b      	ldr	r3, [r3, #4]
 8018fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d013      	beq.n	8019014 <nk_panel_end+0xc5c>
                    delta_x = -delta_x;
 8018fec:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8018ff0:	eef1 7a67 	vneg.f32	s15, s15
 8018ff4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
                    window->bounds.x += in->mouse.delta.x;
 8018ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018ffc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8019000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019004:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8019008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801900c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019010:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
                }
                /* dragging in x-direction  */
                if (window->bounds.w + delta_x >= window_size.x) {
 8019014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019018:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 801901c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8019020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019024:	edd7 7a03 	vldr	s15, [r7, #12]
 8019028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019030:	db2e      	blt.n	8019090 <nk_panel_end+0xcd8>
                    if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {
 8019032:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8019036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801903a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801903e:	d411      	bmi.n	8019064 <nk_panel_end+0xcac>
 8019040:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8019044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801904c:	dd20      	ble.n	8019090 <nk_panel_end+0xcd8>
 801904e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019052:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8019056:	edd7 7a05 	vldr	s15, [r7, #20]
 801905a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801905e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019062:	db15      	blt.n	8019090 <nk_panel_end+0xcd8>
                        window->bounds.w = window->bounds.w + delta_x;
 8019064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019068:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 801906c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8019070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019078:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                        scaler.x += in->mouse.delta.x;
 801907c:	ed97 7a05 	vldr	s14, [r7, #20]
 8019080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019084:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8019088:	ee77 7a27 	vadd.f32	s15, s14, s15
 801908c:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                /* dragging in y-direction (only possible if static window) */
                if (!(layout->flags & NK_WINDOW_DYNAMIC)) {
 8019090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801909a:	2b00      	cmp	r3, #0
 801909c:	d145      	bne.n	801912a <nk_panel_end+0xd72>
                    if (window_size.y < window->bounds.h + in->mouse.delta.y) {
 801909e:	ed97 7a04 	vldr	s14, [r7, #16]
 80190a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80190a6:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80190aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190ae:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80190b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80190b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80190ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190be:	d534      	bpl.n	801912a <nk_panel_end+0xd72>
                        if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {
 80190c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190c4:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80190c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80190cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190d0:	d413      	bmi.n	80190fa <nk_panel_end+0xd42>
 80190d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190d6:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80190da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80190de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190e2:	dd22      	ble.n	801912a <nk_panel_end+0xd72>
 80190e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190e8:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80190ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80190f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80190f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190f8:	db17      	blt.n	801912a <nk_panel_end+0xd72>
                            window->bounds.h = window->bounds.h + in->mouse.delta.y;
 80190fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80190fe:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8019102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019106:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801910a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801910e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019112:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                            scaler.y += in->mouse.delta.y;
 8019116:	ed97 7a06 	vldr	s14, [r7, #24]
 801911a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801911e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8019122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019126:	edc7 7a06 	vstr	s15, [r7, #24]
                        }
                    }
                }
                ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
 8019136:	ed97 7a05 	vldr	s14, [r7, #20]
 801913a:	edd7 6a07 	vldr	s13, [r7, #28]
 801913e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019142:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8019146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801914a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801914e:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
 8019152:	ed97 7a06 	vldr	s14, [r7, #24]
 8019156:	edd7 6a08 	vldr	s13, [r7, #32]
 801915a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801915e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8019162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019166:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801916a:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            }
        }
    }
    if (!nk_panel_is_sub(layout->type)) {
 801916e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019172:	781b      	ldrb	r3, [r3, #0]
 8019174:	4618      	mov	r0, r3
 8019176:	f7fe f9b7 	bl	80174e8 <nk_panel_is_sub>
 801917a:	4603      	mov	r3, r0
 801917c:	2b00      	cmp	r3, #0
 801917e:	d112      	bne.n	80191a6 <nk_panel_end+0xdee>
        /* window is hidden so clear command buffer  */
        if (layout->flags & NK_WINDOW_HIDDEN)
 8019180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019184:	685b      	ldr	r3, [r3, #4]
 8019186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801918a:	2b00      	cmp	r3, #0
 801918c:	d006      	beq.n	801919c <nk_panel_end+0xde4>
            nk_command_buffer_reset(&window->buffer);
 801918e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019192:	3364      	adds	r3, #100	; 0x64
 8019194:	4618      	mov	r0, r3
 8019196:	f7f8 fa6f 	bl	8011678 <nk_command_buffer_reset>
 801919a:	e004      	b.n	80191a6 <nk_panel_end+0xdee>
        /* window is visible and not tab */
        else nk_finish(ctx, window);
 801919c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80191a0:	6878      	ldr	r0, [r7, #4]
 80191a2:	f7f7 fe19 	bl	8010dd8 <nk_finish>
    }

    /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
    if (layout->flags & NK_WINDOW_REMOVE_ROM) {
 80191a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191aa:	685b      	ldr	r3, [r3, #4]
 80191ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d00f      	beq.n	80191d4 <nk_panel_end+0xe1c>
        layout->flags &= ~(nk_flags)NK_WINDOW_ROM;
 80191b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191b8:	685b      	ldr	r3, [r3, #4]
 80191ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80191be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191c2:	605a      	str	r2, [r3, #4]
        layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 80191c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80191ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191d2:	605a      	str	r2, [r3, #4]
    }
    window->flags = layout->flags;
 80191d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191d8:	685a      	ldr	r2, [r3, #4]
 80191da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80191de:	649a      	str	r2, [r3, #72]	; 0x48

    /* property garbage collector */
    if (window->property.active && window->property.old != window->property.seq &&
 80191e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80191e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d01b      	beq.n	8019224 <nk_panel_end+0xe6c>
 80191ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80191f0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80191f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80191f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d011      	beq.n	8019224 <nk_panel_end+0xe6c>
        window->property.active == window->property.prev) {
 8019200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019204:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8019208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801920c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    if (window->property.active && window->property.old != window->property.seq &&
 8019210:	429a      	cmp	r2, r3
 8019212:	d107      	bne.n	8019224 <nk_panel_end+0xe6c>
        nk_zero(&window->property, sizeof(window->property));
 8019214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019218:	3394      	adds	r3, #148	; 0x94
 801921a:	2168      	movs	r1, #104	; 0x68
 801921c:	4618      	mov	r0, r3
 801921e:	f009 fa31 	bl	8022684 <nk_zero>
 8019222:	e014      	b.n	801924e <nk_panel_end+0xe96>
    } else {
        window->property.old = window->property.seq;
 8019224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019228:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801922c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019230:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        window->property.prev = window->property.active;
 8019234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019238:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801923c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019240:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        window->property.seq = 0;
 8019244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019248:	2200      	movs	r2, #0
 801924a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    }
    /* edit garbage collector */
    if (window->edit.active && window->edit.old != window->edit.seq &&
 801924e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019252:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8019256:	2b00      	cmp	r3, #0
 8019258:	d01c      	beq.n	8019294 <nk_panel_end+0xedc>
 801925a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801925e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8019262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019266:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 801926a:	429a      	cmp	r2, r3
 801926c:	d012      	beq.n	8019294 <nk_panel_end+0xedc>
       window->edit.active == window->edit.prev) {
 801926e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019272:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8019276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801927a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    if (window->edit.active && window->edit.old != window->edit.seq &&
 801927e:	429a      	cmp	r2, r3
 8019280:	d108      	bne.n	8019294 <nk_panel_end+0xedc>
        nk_zero(&window->edit, sizeof(window->edit));
 8019282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019286:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801928a:	212c      	movs	r1, #44	; 0x2c
 801928c:	4618      	mov	r0, r3
 801928e:	f009 f9f9 	bl	8022684 <nk_zero>
 8019292:	e014      	b.n	80192be <nk_panel_end+0xf06>
    } else {
        window->edit.old = window->edit.seq;
 8019294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019298:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 801929c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192a0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        window->edit.prev = window->edit.active;
 80192a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192a8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80192ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192b0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        window->edit.seq = 0;
 80192b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192b8:	2200      	movs	r2, #0
 80192ba:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    }
    /* contextual garbage collector */
    if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {
 80192be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d019      	beq.n	80192fe <nk_panel_end+0xf46>
 80192ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192ce:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80192d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192d6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80192da:	429a      	cmp	r2, r3
 80192dc:	d00f      	beq.n	80192fe <nk_panel_end+0xf46>
        window->popup.con_count = 0;
 80192de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192e2:	2200      	movs	r2, #0
 80192e4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        window->popup.con_old = 0;
 80192e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192ec:	2200      	movs	r2, #0
 80192ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.active_con = 0;
 80192f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192f6:	2200      	movs	r2, #0
 80192f8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80192fc:	e00c      	b.n	8019318 <nk_panel_end+0xf60>
    } else {
        window->popup.con_old = window->popup.con_count;
 80192fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019302:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8019306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801930a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.con_count = 0;
 801930e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019312:	2200      	movs	r2, #0
 8019314:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
    window->popup.combo_count = 0;
 8019318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801931c:	2200      	movs	r2, #0
 801931e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
    NK_ASSERT(!layout->row.tree_depth);
 8019322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801932a:	2b00      	cmp	r3, #0
 801932c:	d007      	beq.n	801933e <nk_panel_end+0xf86>
 801932e:	4b05      	ldr	r3, [pc, #20]	; (8019344 <nk_panel_end+0xf8c>)
 8019330:	4a05      	ldr	r2, [pc, #20]	; (8019348 <nk_panel_end+0xf90>)
 8019332:	f240 216b 	movw	r1, #619	; 0x26b
 8019336:	4805      	ldr	r0, [pc, #20]	; (801934c <nk_panel_end+0xf94>)
 8019338:	f00b fbce 	bl	8024ad8 <__assert_func>
        return;
 801933c:	bf00      	nop
}
 801933e:	37c4      	adds	r7, #196	; 0xc4
 8019340:	46bd      	mov	sp, r7
 8019342:	bd90      	pop	{r4, r7, pc}
 8019344:	08028ba0 	.word	0x08028ba0
 8019348:	0802a8d8 	.word	0x0802a8d8
 801934c:	08028b5c 	.word	0x08028b5c

08019350 <nk_pool_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,
    unsigned int capacity)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b084      	sub	sp, #16
 8019354:	af00      	add	r7, sp, #0
 8019356:	60f8      	str	r0, [r7, #12]
 8019358:	60b9      	str	r1, [r7, #8]
 801935a:	607a      	str	r2, [r7, #4]
    NK_ASSERT(capacity >= 1);
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d105      	bne.n	801936e <nk_pool_init+0x1e>
 8019362:	4b0e      	ldr	r3, [pc, #56]	; (801939c <nk_pool_init+0x4c>)
 8019364:	4a0e      	ldr	r2, [pc, #56]	; (80193a0 <nk_pool_init+0x50>)
 8019366:	210d      	movs	r1, #13
 8019368:	480e      	ldr	r0, [pc, #56]	; (80193a4 <nk_pool_init+0x54>)
 801936a:	f00b fbb5 	bl	8024ad8 <__assert_func>
    nk_zero(pool, sizeof(*pool));
 801936e:	2128      	movs	r1, #40	; 0x28
 8019370:	68f8      	ldr	r0, [r7, #12]
 8019372:	f009 f987 	bl	8022684 <nk_zero>
    pool->alloc = *alloc;
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	68ba      	ldr	r2, [r7, #8]
 801937a:	ca07      	ldmia	r2, {r0, r1, r2}
 801937c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pool->capacity = capacity;
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	687a      	ldr	r2, [r7, #4]
 8019384:	61da      	str	r2, [r3, #28]
    pool->type = NK_BUFFER_DYNAMIC;
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	2201      	movs	r2, #1
 801938a:	731a      	strb	r2, [r3, #12]
    pool->pages = 0;
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	2200      	movs	r2, #0
 8019390:	615a      	str	r2, [r3, #20]
}
 8019392:	bf00      	nop
 8019394:	3710      	adds	r7, #16
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	08028bb8 	.word	0x08028bb8
 80193a0:	0802a8e8 	.word	0x0802a8e8
 80193a4:	08028bc8 	.word	0x08028bc8

080193a8 <nk_pool_init_fixed>:
        iter = next;
    }
}
NK_LIB void
nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b084      	sub	sp, #16
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	60f8      	str	r0, [r7, #12]
 80193b0:	60b9      	str	r1, [r7, #8]
 80193b2:	607a      	str	r2, [r7, #4]
    nk_zero(pool, sizeof(*pool));
 80193b4:	2128      	movs	r1, #40	; 0x28
 80193b6:	68f8      	ldr	r0, [r7, #12]
 80193b8:	f009 f964 	bl	8022684 <nk_zero>
    NK_ASSERT(size >= sizeof(struct nk_page));
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80193c2:	d205      	bcs.n	80193d0 <nk_pool_init_fixed+0x28>
 80193c4:	4b10      	ldr	r3, [pc, #64]	; (8019408 <nk_pool_init_fixed+0x60>)
 80193c6:	4a11      	ldr	r2, [pc, #68]	; (801940c <nk_pool_init_fixed+0x64>)
 80193c8:	2125      	movs	r1, #37	; 0x25
 80193ca:	4811      	ldr	r0, [pc, #68]	; (8019410 <nk_pool_init_fixed+0x68>)
 80193cc:	f00b fb84 	bl	8024ad8 <__assert_func>
    if (size < sizeof(struct nk_page)) return;
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80193d6:	d313      	bcc.n	8019400 <nk_pool_init_fixed+0x58>
    /* first nk_page_element is embedded in nk_page, additional elements follow in adjacent space */
    pool->capacity = (unsigned)(1 + (size - sizeof(struct nk_page)) / sizeof(struct nk_page_element));
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80193de:	091b      	lsrs	r3, r3, #4
 80193e0:	4a0c      	ldr	r2, [pc, #48]	; (8019414 <nk_pool_init_fixed+0x6c>)
 80193e2:	fba2 2303 	umull	r2, r3, r2, r3
 80193e6:	1c5a      	adds	r2, r3, #1
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	61da      	str	r2, [r3, #28]
    pool->pages = (struct nk_page*)memory;
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	68ba      	ldr	r2, [r7, #8]
 80193f0:	615a      	str	r2, [r3, #20]
    pool->type = NK_BUFFER_FIXED;
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	2200      	movs	r2, #0
 80193f6:	731a      	strb	r2, [r3, #12]
    pool->size = size;
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	687a      	ldr	r2, [r7, #4]
 80193fc:	621a      	str	r2, [r3, #32]
 80193fe:	e000      	b.n	8019402 <nk_pool_init_fixed+0x5a>
    if (size < sizeof(struct nk_page)) return;
 8019400:	bf00      	nop
}
 8019402:	3710      	adds	r7, #16
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}
 8019408:	08028be4 	.word	0x08028be4
 801940c:	0802a8f8 	.word	0x0802a8f8
 8019410:	08028bc8 	.word	0x08028bc8
 8019414:	097b425f 	.word	0x097b425f

08019418 <nk_pool_alloc>:
NK_LIB struct nk_page_element*
nk_pool_alloc(struct nk_pool *pool)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
    if (!pool->pages || pool->pages->size >= pool->capacity) {
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	695b      	ldr	r3, [r3, #20]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d006      	beq.n	8019436 <nk_pool_alloc+0x1e>
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	695b      	ldr	r3, [r3, #20]
 801942c:	681a      	ldr	r2, [r3, #0]
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	69db      	ldr	r3, [r3, #28]
 8019432:	429a      	cmp	r2, r3
 8019434:	d342      	bcc.n	80194bc <nk_pool_alloc+0xa4>
        /* allocate new page */
        struct nk_page *page;
        if (pool->type == NK_BUFFER_FIXED) {
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	7b1b      	ldrb	r3, [r3, #12]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d11e      	bne.n	801947c <nk_pool_alloc+0x64>
            NK_ASSERT(pool->pages);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	695b      	ldr	r3, [r3, #20]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d105      	bne.n	8019452 <nk_pool_alloc+0x3a>
 8019446:	4b26      	ldr	r3, [pc, #152]	; (80194e0 <nk_pool_alloc+0xc8>)
 8019448:	4a26      	ldr	r2, [pc, #152]	; (80194e4 <nk_pool_alloc+0xcc>)
 801944a:	2134      	movs	r1, #52	; 0x34
 801944c:	4826      	ldr	r0, [pc, #152]	; (80194e8 <nk_pool_alloc+0xd0>)
 801944e:	f00b fb43 	bl	8024ad8 <__assert_func>
            if (!pool->pages) return 0;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	695b      	ldr	r3, [r3, #20]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d101      	bne.n	801945e <nk_pool_alloc+0x46>
 801945a:	2300      	movs	r3, #0
 801945c:	e03b      	b.n	80194d6 <nk_pool_alloc+0xbe>
            NK_ASSERT(pool->pages->size < pool->capacity);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	695b      	ldr	r3, [r3, #20]
 8019462:	681a      	ldr	r2, [r3, #0]
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	69db      	ldr	r3, [r3, #28]
 8019468:	429a      	cmp	r2, r3
 801946a:	d305      	bcc.n	8019478 <nk_pool_alloc+0x60>
 801946c:	4b1f      	ldr	r3, [pc, #124]	; (80194ec <nk_pool_alloc+0xd4>)
 801946e:	4a1d      	ldr	r2, [pc, #116]	; (80194e4 <nk_pool_alloc+0xcc>)
 8019470:	2136      	movs	r1, #54	; 0x36
 8019472:	481d      	ldr	r0, [pc, #116]	; (80194e8 <nk_pool_alloc+0xd0>)
 8019474:	f00b fb30 	bl	8024ad8 <__assert_func>
            return 0;
 8019478:	2300      	movs	r3, #0
 801947a:	e02c      	b.n	80194d6 <nk_pool_alloc+0xbe>
        } else {
            nk_size size = sizeof(struct nk_page);
 801947c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8019480:	60fb      	str	r3, [r7, #12]
            size += (pool->capacity - 1) * sizeof(struct nk_page_element);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	69db      	ldr	r3, [r3, #28]
 8019486:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 801948a:	fb03 f202 	mul.w	r2, r3, r2
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	4413      	add	r3, r2
 8019492:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8019496:	60fb      	str	r3, [r7, #12]
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	6878      	ldr	r0, [r7, #4]
 801949e:	68fa      	ldr	r2, [r7, #12]
 80194a0:	2100      	movs	r1, #0
 80194a2:	6800      	ldr	r0, [r0, #0]
 80194a4:	4798      	blx	r3
 80194a6:	60b8      	str	r0, [r7, #8]
            page->next = pool->pages;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	695a      	ldr	r2, [r3, #20]
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	605a      	str	r2, [r3, #4]
            pool->pages = page;
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	68ba      	ldr	r2, [r7, #8]
 80194b4:	615a      	str	r2, [r3, #20]
            page->size = 0;
 80194b6:	68bb      	ldr	r3, [r7, #8]
 80194b8:	2200      	movs	r2, #0
 80194ba:	601a      	str	r2, [r3, #0]
        }
    } return &pool->pages->win[pool->pages->size++];
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	6959      	ldr	r1, [r3, #20]
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	695a      	ldr	r2, [r3, #20]
 80194c4:	6813      	ldr	r3, [r2, #0]
 80194c6:	1c58      	adds	r0, r3, #1
 80194c8:	6010      	str	r0, [r2, #0]
 80194ca:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80194ce:	fb02 f303 	mul.w	r3, r2, r3
 80194d2:	3308      	adds	r3, #8
 80194d4:	440b      	add	r3, r1
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	3710      	adds	r7, #16
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	08028c04 	.word	0x08028c04
 80194e4:	0802a90c 	.word	0x0802a90c
 80194e8:	08028bc8 	.word	0x08028bc8
 80194ec:	08028c10 	.word	0x08028c10

080194f0 <nk_popup_begin>:
 *
 * ===============================================================*/
NK_API nk_bool
nk_popup_begin(struct nk_context *ctx, enum nk_popup_type type,
    const char *title, nk_flags flags, struct nk_rect rect)
{
 80194f0:	b5b0      	push	{r4, r5, r7, lr}
 80194f2:	b090      	sub	sp, #64	; 0x40
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	61f8      	str	r0, [r7, #28]
 80194f8:	617a      	str	r2, [r7, #20]
 80194fa:	613b      	str	r3, [r7, #16]
 80194fc:	eeb0 6a40 	vmov.f32	s12, s0
 8019500:	eef0 6a60 	vmov.f32	s13, s1
 8019504:	eeb0 7a41 	vmov.f32	s14, s2
 8019508:	eef0 7a61 	vmov.f32	s15, s3
 801950c:	460b      	mov	r3, r1
 801950e:	76fb      	strb	r3, [r7, #27]
 8019510:	ed87 6a00 	vstr	s12, [r7]
 8019514:	edc7 6a01 	vstr	s13, [r7, #4]
 8019518:	ed87 7a02 	vstr	s14, [r7, #8]
 801951c:	edc7 7a03 	vstr	s15, [r7, #12]

    int title_len;
    nk_hash title_hash;
    nk_size allocated;

    NK_ASSERT(ctx);
 8019520:	69fb      	ldr	r3, [r7, #28]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d105      	bne.n	8019532 <nk_popup_begin+0x42>
 8019526:	4ba8      	ldr	r3, [pc, #672]	; (80197c8 <nk_popup_begin+0x2d8>)
 8019528:	4aa8      	ldr	r2, [pc, #672]	; (80197cc <nk_popup_begin+0x2dc>)
 801952a:	2115      	movs	r1, #21
 801952c:	48a8      	ldr	r0, [pc, #672]	; (80197d0 <nk_popup_begin+0x2e0>)
 801952e:	f00b fad3 	bl	8024ad8 <__assert_func>
    NK_ASSERT(title);
 8019532:	697b      	ldr	r3, [r7, #20]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d105      	bne.n	8019544 <nk_popup_begin+0x54>
 8019538:	4ba6      	ldr	r3, [pc, #664]	; (80197d4 <nk_popup_begin+0x2e4>)
 801953a:	4aa4      	ldr	r2, [pc, #656]	; (80197cc <nk_popup_begin+0x2dc>)
 801953c:	2116      	movs	r1, #22
 801953e:	48a4      	ldr	r0, [pc, #656]	; (80197d0 <nk_popup_begin+0x2e0>)
 8019540:	f00b faca 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8019544:	69fb      	ldr	r3, [r7, #28]
 8019546:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801954a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801954e:	2b00      	cmp	r3, #0
 8019550:	d105      	bne.n	801955e <nk_popup_begin+0x6e>
 8019552:	4ba1      	ldr	r3, [pc, #644]	; (80197d8 <nk_popup_begin+0x2e8>)
 8019554:	4a9d      	ldr	r2, [pc, #628]	; (80197cc <nk_popup_begin+0x2dc>)
 8019556:	2117      	movs	r1, #23
 8019558:	489d      	ldr	r0, [pc, #628]	; (80197d0 <nk_popup_begin+0x2e0>)
 801955a:	f00b fabd 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801955e:	69fb      	ldr	r3, [r7, #28]
 8019560:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019564:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801956c:	2b00      	cmp	r3, #0
 801956e:	d105      	bne.n	801957c <nk_popup_begin+0x8c>
 8019570:	4b9a      	ldr	r3, [pc, #616]	; (80197dc <nk_popup_begin+0x2ec>)
 8019572:	4a96      	ldr	r2, [pc, #600]	; (80197cc <nk_popup_begin+0x2dc>)
 8019574:	2118      	movs	r1, #24
 8019576:	4896      	ldr	r0, [pc, #600]	; (80197d0 <nk_popup_begin+0x2e0>)
 8019578:	f00b faae 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801957c:	69fb      	ldr	r3, [r7, #28]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d00f      	beq.n	80195a2 <nk_popup_begin+0xb2>
 8019582:	69fb      	ldr	r3, [r7, #28]
 8019584:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019588:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801958c:	2b00      	cmp	r3, #0
 801958e:	d008      	beq.n	80195a2 <nk_popup_begin+0xb2>
 8019590:	69fb      	ldr	r3, [r7, #28]
 8019592:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019596:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801959a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d101      	bne.n	80195a6 <nk_popup_begin+0xb6>
        return 0;
 80195a2:	2300      	movs	r3, #0
 80195a4:	e14f      	b.n	8019846 <nk_popup_begin+0x356>

    win = ctx->current;
 80195a6:	69fb      	ldr	r3, [r7, #28]
 80195a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80195ac:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80195b0:	633b      	str	r3, [r7, #48]	; 0x30
    panel = win->layout;
 80195b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80195b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP) && "popups are not allowed to have popups");
 80195ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d005      	beq.n	80195d2 <nk_popup_begin+0xe2>
 80195c6:	4b86      	ldr	r3, [pc, #536]	; (80197e0 <nk_popup_begin+0x2f0>)
 80195c8:	4a80      	ldr	r2, [pc, #512]	; (80197cc <nk_popup_begin+0x2dc>)
 80195ca:	211e      	movs	r1, #30
 80195cc:	4880      	ldr	r0, [pc, #512]	; (80197d0 <nk_popup_begin+0x2e0>)
 80195ce:	f00b fa83 	bl	8024ad8 <__assert_func>
    (void)panel;
    title_len = (int)nk_strlen(title);
 80195d2:	6978      	ldr	r0, [r7, #20]
 80195d4:	f009 f874 	bl	80226c0 <nk_strlen>
 80195d8:	62b8      	str	r0, [r7, #40]	; 0x28
    title_hash = nk_murmur_hash(title, (int)title_len, NK_PANEL_POPUP);
 80195da:	2204      	movs	r2, #4
 80195dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80195de:	6978      	ldr	r0, [r7, #20]
 80195e0:	f009 fce6 	bl	8022fb0 <nk_murmur_hash>
 80195e4:	6278      	str	r0, [r7, #36]	; 0x24

    popup = win->popup.win;
 80195e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80195ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!popup) {
 80195ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d113      	bne.n	801961c <nk_popup_begin+0x12c>
        popup = (struct nk_window*)nk_create_window(ctx);
 80195f4:	69f8      	ldr	r0, [r7, #28]
 80195f6:	f00a f991 	bl	802391c <nk_create_window>
 80195fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        popup->parent = win;
 80195fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019600:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 8019604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019608:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.active = 0;
 801960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801960e:	2200      	movs	r2, #0
 8019610:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        win->popup.type = NK_PANEL_POPUP;
 8019614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019616:	2204      	movs	r2, #4
 8019618:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    /* make sure we have correct popup */
    if (win->popup.name != title_hash) {
 801961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801961e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8019622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019624:	429a      	cmp	r2, r3
 8019626:	d018      	beq.n	801965a <nk_popup_begin+0x16a>
        if (!win->popup.active) {
 8019628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801962a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801962e:	2b00      	cmp	r3, #0
 8019630:	d111      	bne.n	8019656 <nk_popup_begin+0x166>
            nk_zero(popup, sizeof(*popup));
 8019632:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8019636:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019638:	f009 f824 	bl	8022684 <nk_zero>
            win->popup.name = title_hash;
 801963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801963e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019640:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            win->popup.active = 1;
 8019644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019646:	2201      	movs	r2, #1
 8019648:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
            win->popup.type = NK_PANEL_POPUP;
 801964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801964e:	2204      	movs	r2, #4
 8019650:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8019654:	e001      	b.n	801965a <nk_popup_begin+0x16a>
        } else return 0;
 8019656:	2300      	movs	r3, #0
 8019658:	e0f5      	b.n	8019846 <nk_popup_begin+0x356>
    }

    /* popup position is local to window */
    ctx->current = popup;
 801965a:	69fb      	ldr	r3, [r7, #28]
 801965c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019660:	461a      	mov	r2, r3
 8019662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019664:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    rect.x += win->layout->clip.x;
 8019668:	ed97 7a00 	vldr	s14, [r7]
 801966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801966e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019672:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8019676:	ee77 7a27 	vadd.f32	s15, s14, s15
 801967a:	edc7 7a00 	vstr	s15, [r7]
    rect.y += win->layout->clip.y;
 801967e:	ed97 7a01 	vldr	s14, [r7, #4]
 8019682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019688:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 801968c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019690:	edc7 7a01 	vstr	s15, [r7, #4]

    /* setup popup data */
    popup->parent = win;
 8019694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019698:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->bounds = rect;
 801969c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801969e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80196a2:	463b      	mov	r3, r7
 80196a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80196a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->seq = ctx->seq;
 80196aa:	69fb      	ldr	r3, [r7, #28]
 80196ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80196b0:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 80196b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196b6:	601a      	str	r2, [r3, #0]
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 80196b8:	69f8      	ldr	r0, [r7, #28]
 80196ba:	f7fd fccd 	bl	8017058 <nk_create_panel>
 80196be:	4602      	mov	r2, r0
 80196c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 80196c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196c8:	693a      	ldr	r2, [r7, #16]
 80196ca:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 80196cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80196d0:	f043 0201 	orr.w	r2, r3, #1
 80196d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196d6:	649a      	str	r2, [r3, #72]	; 0x48
    if (type == NK_POPUP_DYNAMIC)
 80196d8:	7efb      	ldrb	r3, [r7, #27]
 80196da:	2b01      	cmp	r3, #1
 80196dc:	d105      	bne.n	80196ea <nk_popup_begin+0x1fa>
        popup->flags |= NK_WINDOW_DYNAMIC;
 80196de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80196e2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80196e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196e8:	649a      	str	r2, [r3, #72]	; 0x48

    popup->buffer = win->buffer;
 80196ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80196ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ee:	f102 0464 	add.w	r4, r2, #100	; 0x64
 80196f2:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80196f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80196fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80196fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019702:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_start_popup(ctx, win);
 8019706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019708:	69f8      	ldr	r0, [r7, #28]
 801970a:	f7f7 fab7 	bl	8010c7c <nk_start_popup>
    allocated = ctx->memory.allocated;
 801970e:	69fb      	ldr	r3, [r7, #28]
 8019710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019714:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 8019718:	623b      	str	r3, [r7, #32]
    nk_push_scissor(&popup->buffer, nk_null_rect);
 801971a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801971c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019720:	4b30      	ldr	r3, [pc, #192]	; (80197e4 <nk_popup_begin+0x2f4>)
 8019722:	ed93 6a00 	vldr	s12, [r3]
 8019726:	edd3 6a01 	vldr	s13, [r3, #4]
 801972a:	ed93 7a02 	vldr	s14, [r3, #8]
 801972e:	edd3 7a03 	vldr	s15, [r3, #12]
 8019732:	eeb0 0a46 	vmov.f32	s0, s12
 8019736:	eef0 0a66 	vmov.f32	s1, s13
 801973a:	eeb0 1a47 	vmov.f32	s2, s14
 801973e:	eef0 1a67 	vmov.f32	s3, s15
 8019742:	4610      	mov	r0, r2
 8019744:	f7f8 f82c 	bl	80117a0 <nk_push_scissor>

    if (nk_panel_begin(ctx, title, NK_PANEL_POPUP)) {
 8019748:	2204      	movs	r2, #4
 801974a:	6979      	ldr	r1, [r7, #20]
 801974c:	69f8      	ldr	r0, [r7, #28]
 801974e:	f7fd fef1 	bl	8017534 <nk_panel_begin>
 8019752:	4603      	mov	r3, r0
 8019754:	2b00      	cmp	r3, #0
 8019756:	d031      	beq.n	80197bc <nk_popup_begin+0x2cc>
        /* popup is running therefore invalidate parent panels */
        struct nk_panel *root;
        root = win->layout;
 8019758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801975a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801975e:	63bb      	str	r3, [r7, #56]	; 0x38
        while (root) {
 8019760:	e00f      	b.n	8019782 <nk_popup_begin+0x292>
            root->flags |= NK_WINDOW_ROM;
 8019762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019764:	685b      	ldr	r3, [r3, #4]
 8019766:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976c:	605a      	str	r2, [r3, #4]
            root->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 801976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019770:	685b      	ldr	r3, [r3, #4]
 8019772:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8019776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019778:	605a      	str	r2, [r3, #4]
            root = root->parent;
 801977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019780:	63bb      	str	r3, [r7, #56]	; 0x38
        while (root) {
 8019782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019784:	2b00      	cmp	r3, #0
 8019786:	d1ec      	bne.n	8019762 <nk_popup_begin+0x272>
        }
        win->popup.active = 1;
 8019788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801978a:	2201      	movs	r2, #1
 801978c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        popup->layout->offset_x = &popup->scrollbar.x;
 8019790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019798:	325c      	adds	r2, #92	; 0x5c
 801979a:	619a      	str	r2, [r3, #24]
        popup->layout->offset_y = &popup->scrollbar.y;
 801979c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801979e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80197a4:	3260      	adds	r2, #96	; 0x60
 80197a6:	61da      	str	r2, [r3, #28]
        popup->layout->parent = win->layout;
 80197a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197b0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80197b4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        return 1;
 80197b8:	2301      	movs	r3, #1
 80197ba:	e044      	b.n	8019846 <nk_popup_begin+0x356>
    } else {
        /* popup was closed/is invalid so cleanup */
        struct nk_panel *root;
        root = win->layout;
 80197bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197c2:	637b      	str	r3, [r7, #52]	; 0x34
        while (root) {
 80197c4:	e01a      	b.n	80197fc <nk_popup_begin+0x30c>
 80197c6:	bf00      	nop
 80197c8:	08028c34 	.word	0x08028c34
 80197cc:	0802a92c 	.word	0x0802a92c
 80197d0:	08028c38 	.word	0x08028c38
 80197d4:	08028c54 	.word	0x08028c54
 80197d8:	08028c5c 	.word	0x08028c5c
 80197dc:	08028c6c 	.word	0x08028c6c
 80197e0:	08028c84 	.word	0x08028c84
 80197e4:	0802a91c 	.word	0x0802a91c
            root->flags |= NK_WINDOW_REMOVE_ROM;
 80197e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80197f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197f2:	605a      	str	r2, [r3, #4]
            root = root->parent;
 80197f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197f6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80197fa:	637b      	str	r3, [r7, #52]	; 0x34
        while (root) {
 80197fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d1f2      	bne.n	80197e8 <nk_popup_begin+0x2f8>
        }
        win->popup.buf.active = 0;
 8019802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019804:	2200      	movs	r2, #0
 8019806:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        win->popup.active = 0;
 801980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801980c:	2200      	movs	r2, #0
 801980e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        ctx->memory.allocated = allocated;
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019818:	461a      	mov	r2, r3
 801981a:	6a3b      	ldr	r3, [r7, #32]
 801981c:	f8c2 3ab8 	str.w	r3, [r2, #2744]	; 0xab8
        ctx->current = win;
 8019820:	69fb      	ldr	r3, [r7, #28]
 8019822:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019826:	461a      	mov	r2, r3
 8019828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801982a:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        nk_free_panel(ctx, popup->layout);
 801982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019834:	4619      	mov	r1, r3
 8019836:	69f8      	ldr	r0, [r7, #28]
 8019838:	f7fd fc25 	bl	8017086 <nk_free_panel>
        popup->layout = 0;
 801983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801983e:	2200      	movs	r2, #0
 8019840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 8019844:	2300      	movs	r3, #0
    }
}
 8019846:	4618      	mov	r0, r3
 8019848:	3740      	adds	r7, #64	; 0x40
 801984a:	46bd      	mov	sp, r7
 801984c:	bdb0      	pop	{r4, r5, r7, pc}
 801984e:	bf00      	nop

08019850 <nk_nonblock_begin>:
NK_LIB nk_bool
nk_nonblock_begin(struct nk_context *ctx,
    nk_flags flags, struct nk_rect body, struct nk_rect header,
    enum nk_panel_type panel_type)
{
 8019850:	b5b0      	push	{r4, r5, r7, lr}
 8019852:	b096      	sub	sp, #88	; 0x58
 8019854:	af00      	add	r7, sp, #0
 8019856:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019858:	62b9      	str	r1, [r7, #40]	; 0x28
 801985a:	eeb0 4a40 	vmov.f32	s8, s0
 801985e:	eef0 4a60 	vmov.f32	s9, s1
 8019862:	eeb0 5a41 	vmov.f32	s10, s2
 8019866:	eef0 5a61 	vmov.f32	s11, s3
 801986a:	eeb0 6a42 	vmov.f32	s12, s4
 801986e:	eef0 6a62 	vmov.f32	s13, s5
 8019872:	eeb0 7a43 	vmov.f32	s14, s6
 8019876:	eef0 7a63 	vmov.f32	s15, s7
 801987a:	4613      	mov	r3, r2
 801987c:	ed87 4a06 	vstr	s8, [r7, #24]
 8019880:	edc7 4a07 	vstr	s9, [r7, #28]
 8019884:	ed87 5a08 	vstr	s10, [r7, #32]
 8019888:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 801988c:	ed87 6a02 	vstr	s12, [r7, #8]
 8019890:	edc7 6a03 	vstr	s13, [r7, #12]
 8019894:	ed87 7a04 	vstr	s14, [r7, #16]
 8019898:	edc7 7a05 	vstr	s15, [r7, #20]
 801989c:	71fb      	strb	r3, [r7, #7]
    struct nk_window *popup;
    struct nk_window *win;
    struct nk_panel *panel;
    int is_active = nk_true;
 801989e:	2301      	movs	r3, #1
 80198a0:	653b      	str	r3, [r7, #80]	; 0x50

    NK_ASSERT(ctx);
 80198a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d105      	bne.n	80198b4 <nk_nonblock_begin+0x64>
 80198a8:	4baf      	ldr	r3, [pc, #700]	; (8019b68 <nk_nonblock_begin+0x318>)
 80198aa:	4ab0      	ldr	r2, [pc, #704]	; (8019b6c <nk_nonblock_begin+0x31c>)
 80198ac:	2173      	movs	r1, #115	; 0x73
 80198ae:	48b0      	ldr	r0, [pc, #704]	; (8019b70 <nk_nonblock_begin+0x320>)
 80198b0:	f00b f912 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 80198b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80198ba:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d105      	bne.n	80198ce <nk_nonblock_begin+0x7e>
 80198c2:	4bac      	ldr	r3, [pc, #688]	; (8019b74 <nk_nonblock_begin+0x324>)
 80198c4:	4aa9      	ldr	r2, [pc, #676]	; (8019b6c <nk_nonblock_begin+0x31c>)
 80198c6:	2174      	movs	r1, #116	; 0x74
 80198c8:	48a9      	ldr	r0, [pc, #676]	; (8019b70 <nk_nonblock_begin+0x320>)
 80198ca:	f00b f905 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80198ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80198d4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80198d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d105      	bne.n	80198ec <nk_nonblock_begin+0x9c>
 80198e0:	4ba5      	ldr	r3, [pc, #660]	; (8019b78 <nk_nonblock_begin+0x328>)
 80198e2:	4aa2      	ldr	r2, [pc, #648]	; (8019b6c <nk_nonblock_begin+0x31c>)
 80198e4:	2175      	movs	r1, #117	; 0x75
 80198e6:	48a2      	ldr	r0, [pc, #648]	; (8019b70 <nk_nonblock_begin+0x320>)
 80198e8:	f00b f8f6 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80198ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d00f      	beq.n	8019912 <nk_nonblock_begin+0xc2>
 80198f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80198f8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d008      	beq.n	8019912 <nk_nonblock_begin+0xc2>
 8019900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019902:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019906:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801990a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801990e:	2b00      	cmp	r3, #0
 8019910:	d101      	bne.n	8019916 <nk_nonblock_begin+0xc6>
        return 0;
 8019912:	2300      	movs	r3, #0
 8019914:	e146      	b.n	8019ba4 <nk_nonblock_begin+0x354>

    /* popups cannot have popups */
    win = ctx->current;
 8019916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019918:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801991c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019920:	647b      	str	r3, [r7, #68]	; 0x44
    panel = win->layout;
 8019922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019928:	643b      	str	r3, [r7, #64]	; 0x40
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 801992a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801992c:	781b      	ldrb	r3, [r3, #0]
 801992e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8019932:	2b00      	cmp	r3, #0
 8019934:	d005      	beq.n	8019942 <nk_nonblock_begin+0xf2>
 8019936:	4b91      	ldr	r3, [pc, #580]	; (8019b7c <nk_nonblock_begin+0x32c>)
 8019938:	4a8c      	ldr	r2, [pc, #560]	; (8019b6c <nk_nonblock_begin+0x31c>)
 801993a:	217c      	movs	r1, #124	; 0x7c
 801993c:	488c      	ldr	r0, [pc, #560]	; (8019b70 <nk_nonblock_begin+0x320>)
 801993e:	f00b f8cb 	bl	8024ad8 <__assert_func>
    (void)panel;
    popup = win->popup.win;
 8019942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019944:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8019948:	657b      	str	r3, [r7, #84]	; 0x54
    if (!popup) {
 801994a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801994c:	2b00      	cmp	r3, #0
 801994e:	d11b      	bne.n	8019988 <nk_nonblock_begin+0x138>
        /* create window for nonblocking popup */
        popup = (struct nk_window*)nk_create_window(ctx);
 8019950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019952:	f009 ffe3 	bl	802391c <nk_create_window>
 8019956:	6578      	str	r0, [r7, #84]	; 0x54
        popup->parent = win;
 8019958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801995a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801995c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 8019960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019962:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019964:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.type = panel_type;
 8019968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801996a:	79fa      	ldrb	r2, [r7, #7]
 801996c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);
 8019970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019972:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8019976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019978:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801997c:	330c      	adds	r3, #12
 801997e:	2201      	movs	r2, #1
 8019980:	4619      	mov	r1, r3
 8019982:	f7f7 fe3b 	bl	80115fc <nk_command_buffer_init>
 8019986:	e03a      	b.n	80199fe <nk_nonblock_begin+0x1ae>
        /* close the popup if user pressed outside or in the header */
        int pressed, in_body, in_header;
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
        pressed = nk_input_is_mouse_released(&ctx->input, NK_BUTTON_LEFT);
#else
        pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 8019988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801998a:	2100      	movs	r1, #0
 801998c:	4618      	mov	r0, r3
 801998e:	f7fb fe27 	bl	80155e0 <nk_input_is_mouse_pressed>
 8019992:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
        in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8019994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019996:	ed97 6a06 	vldr	s12, [r7, #24]
 801999a:	edd7 6a07 	vldr	s13, [r7, #28]
 801999e:	ed97 7a08 	vldr	s14, [r7, #32]
 80199a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80199a6:	eeb0 0a46 	vmov.f32	s0, s12
 80199aa:	eef0 0a66 	vmov.f32	s1, s13
 80199ae:	eeb0 1a47 	vmov.f32	s2, s14
 80199b2:	eef0 1a67 	vmov.f32	s3, s15
 80199b6:	4618      	mov	r0, r3
 80199b8:	f7fb fd56 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 80199bc:	63b8      	str	r0, [r7, #56]	; 0x38
        in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);
 80199be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80199c4:	edd7 6a03 	vldr	s13, [r7, #12]
 80199c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80199cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80199d0:	eeb0 0a46 	vmov.f32	s0, s12
 80199d4:	eef0 0a66 	vmov.f32	s1, s13
 80199d8:	eeb0 1a47 	vmov.f32	s2, s14
 80199dc:	eef0 1a67 	vmov.f32	s3, s15
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7fb fd41 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 80199e6:	6378      	str	r0, [r7, #52]	; 0x34
        if (pressed && (!in_body || in_header))
 80199e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d007      	beq.n	80199fe <nk_nonblock_begin+0x1ae>
 80199ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d002      	beq.n	80199fa <nk_nonblock_begin+0x1aa>
 80199f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d001      	beq.n	80199fe <nk_nonblock_begin+0x1ae>
            is_active = nk_false;
 80199fa:	2300      	movs	r3, #0
 80199fc:	653b      	str	r3, [r7, #80]	; 0x50
    }
    win->popup.header = header;
 80199fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a00:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8019a04:	f107 0308 	add.w	r3, r7, #8
 8019a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (!is_active) {
 8019a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d113      	bne.n	8019a3c <nk_nonblock_begin+0x1ec>
        /* remove read only mode from all parent panels */
        struct nk_panel *root = win->layout;
 8019a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 8019a1c:	e009      	b.n	8019a32 <nk_nonblock_begin+0x1e2>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8019a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a20:	685b      	ldr	r3, [r3, #4]
 8019a22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a28:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8019a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a2c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019a30:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 8019a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d1f2      	bne.n	8019a1e <nk_nonblock_begin+0x1ce>
        }
        return is_active;
 8019a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a3a:	e0b3      	b.n	8019ba4 <nk_nonblock_begin+0x354>
    }
    popup->bounds = body;
 8019a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a3e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8019a42:	f107 0318 	add.w	r3, r7, #24
 8019a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->parent = win;
 8019a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019a50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 8019a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019a56:	f7fd faff 	bl	8017058 <nk_create_panel>
 8019a5a:	4602      	mov	r2, r0
 8019a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 8019a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a66:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 8019a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a6c:	f043 0201 	orr.w	r2, r3, #1
 8019a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a72:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_DYNAMIC;
 8019a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a78:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a7e:	649a      	str	r2, [r3, #72]	; 0x48
    popup->seq = ctx->seq;
 8019a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019a86:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8019a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a8c:	601a      	str	r2, [r3, #0]
    win->popup.active = 1;
 8019a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a90:	2201      	movs	r2, #1
 8019a92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NK_ASSERT(popup->layout);
 8019a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d105      	bne.n	8019aac <nk_nonblock_begin+0x25c>
 8019aa0:	4b37      	ldr	r3, [pc, #220]	; (8019b80 <nk_nonblock_begin+0x330>)
 8019aa2:	4a32      	ldr	r2, [pc, #200]	; (8019b6c <nk_nonblock_begin+0x31c>)
 8019aa4:	21a6      	movs	r1, #166	; 0xa6
 8019aa6:	4832      	ldr	r0, [pc, #200]	; (8019b70 <nk_nonblock_begin+0x320>)
 8019aa8:	f00b f816 	bl	8024ad8 <__assert_func>

    nk_start_popup(ctx, win);
 8019aac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019ab0:	f7f7 f8e4 	bl	8010c7c <nk_start_popup>
    popup->buffer = win->buffer;
 8019ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ab8:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8019abc:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8019ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ac8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019acc:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8019ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ad2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019ad6:	4b2b      	ldr	r3, [pc, #172]	; (8019b84 <nk_nonblock_begin+0x334>)
 8019ad8:	ed93 6a00 	vldr	s12, [r3]
 8019adc:	edd3 6a01 	vldr	s13, [r3, #4]
 8019ae0:	ed93 7a02 	vldr	s14, [r3, #8]
 8019ae4:	edd3 7a03 	vldr	s15, [r3, #12]
 8019ae8:	eeb0 0a46 	vmov.f32	s0, s12
 8019aec:	eef0 0a66 	vmov.f32	s1, s13
 8019af0:	eeb0 1a47 	vmov.f32	s2, s14
 8019af4:	eef0 1a67 	vmov.f32	s3, s15
 8019af8:	4610      	mov	r0, r2
 8019afa:	f7f7 fe51 	bl	80117a0 <nk_push_scissor>
    ctx->current = popup;
 8019afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019b04:	461a      	mov	r2, r3
 8019b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b08:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658

    nk_panel_begin(ctx, 0, panel_type);
 8019b0c:	79fb      	ldrb	r3, [r7, #7]
 8019b0e:	461a      	mov	r2, r3
 8019b10:	2100      	movs	r1, #0
 8019b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019b14:	f7fd fd0e 	bl	8017534 <nk_panel_begin>
    win->buffer = popup->buffer;
 8019b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b1c:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8019b20:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8019b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019b30:	e884 0003 	stmia.w	r4, {r0, r1}
    popup->layout->parent = win->layout;
 8019b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019b3c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8019b40:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    popup->layout->offset_x = &popup->scrollbar.x;
 8019b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019b4c:	325c      	adds	r2, #92	; 0x5c
 8019b4e:	619a      	str	r2, [r3, #24]
    popup->layout->offset_y = &popup->scrollbar.y;
 8019b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019b58:	3260      	adds	r2, #96	; 0x60
 8019b5a:	61da      	str	r2, [r3, #28]

    /* set read only mode to all parent panels */
    {struct nk_panel *root;
    root = win->layout;
 8019b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b62:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8019b64:	e01a      	b.n	8019b9c <nk_nonblock_begin+0x34c>
 8019b66:	bf00      	nop
 8019b68:	08028c34 	.word	0x08028c34
 8019b6c:	0802a93c 	.word	0x0802a93c
 8019b70:	08028c38 	.word	0x08028c38
 8019b74:	08028c5c 	.word	0x08028c5c
 8019b78:	08028c6c 	.word	0x08028c6c
 8019b7c:	08028cd4 	.word	0x08028cd4
 8019b80:	08028cf8 	.word	0x08028cf8
 8019b84:	0802a91c 	.word	0x0802a91c
        root->flags |= NK_WINDOW_ROM;
 8019b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b92:	605a      	str	r2, [r3, #4]
        root = root->parent;
 8019b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b96:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019b9a:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8019b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d1f2      	bne.n	8019b88 <nk_nonblock_begin+0x338>
    }}
    return is_active;
 8019ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3758      	adds	r7, #88	; 0x58
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bdb0      	pop	{r4, r5, r7, pc}

08019bac <nk_popup_close>:
NK_API void
nk_popup_close(struct nk_context *ctx)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b084      	sub	sp, #16
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    NK_ASSERT(ctx);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d105      	bne.n	8019bc6 <nk_popup_close+0x1a>
 8019bba:	4b1d      	ldr	r3, [pc, #116]	; (8019c30 <nk_popup_close+0x84>)
 8019bbc:	4a1d      	ldr	r2, [pc, #116]	; (8019c34 <nk_popup_close+0x88>)
 8019bbe:	21c0      	movs	r1, #192	; 0xc0
 8019bc0:	481d      	ldr	r0, [pc, #116]	; (8019c38 <nk_popup_close+0x8c>)
 8019bc2:	f00a ff89 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current) return;
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d02c      	beq.n	8019c26 <nk_popup_close+0x7a>
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019bd2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d025      	beq.n	8019c26 <nk_popup_close+0x7a>

    popup = ctx->current;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019be0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019be4:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(popup->parent);
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d105      	bne.n	8019bfc <nk_popup_close+0x50>
 8019bf0:	4b12      	ldr	r3, [pc, #72]	; (8019c3c <nk_popup_close+0x90>)
 8019bf2:	4a10      	ldr	r2, [pc, #64]	; (8019c34 <nk_popup_close+0x88>)
 8019bf4:	21c4      	movs	r1, #196	; 0xc4
 8019bf6:	4810      	ldr	r0, [pc, #64]	; (8019c38 <nk_popup_close+0x8c>)
 8019bf8:	f00a ff6e 	bl	8024ad8 <__assert_func>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019c02:	781b      	ldrb	r3, [r3, #0]
 8019c04:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d105      	bne.n	8019c18 <nk_popup_close+0x6c>
 8019c0c:	4b0c      	ldr	r3, [pc, #48]	; (8019c40 <nk_popup_close+0x94>)
 8019c0e:	4a09      	ldr	r2, [pc, #36]	; (8019c34 <nk_popup_close+0x88>)
 8019c10:	21c5      	movs	r1, #197	; 0xc5
 8019c12:	4809      	ldr	r0, [pc, #36]	; (8019c38 <nk_popup_close+0x8c>)
 8019c14:	f00a ff60 	bl	8024ad8 <__assert_func>
    popup->flags |= NK_WINDOW_HIDDEN;
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	649a      	str	r2, [r3, #72]	; 0x48
 8019c24:	e000      	b.n	8019c28 <nk_popup_close+0x7c>
    if (!ctx || !ctx->current) return;
 8019c26:	bf00      	nop
}
 8019c28:	3710      	adds	r7, #16
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	bd80      	pop	{r7, pc}
 8019c2e:	bf00      	nop
 8019c30:	08028c34 	.word	0x08028c34
 8019c34:	0802a950 	.word	0x0802a950
 8019c38:	08028c38 	.word	0x08028c38
 8019c3c:	08028d08 	.word	0x08028d08
 8019c40:	08028d18 	.word	0x08028d18

08019c44 <nk_popup_end>:
NK_API void
nk_popup_end(struct nk_context *ctx)
{
 8019c44:	b5b0      	push	{r4, r5, r7, lr}
 8019c46:	b086      	sub	sp, #24
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_window *popup;

    NK_ASSERT(ctx);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d105      	bne.n	8019c5e <nk_popup_end+0x1a>
 8019c52:	4b5a      	ldr	r3, [pc, #360]	; (8019dbc <nk_popup_end+0x178>)
 8019c54:	4a5a      	ldr	r2, [pc, #360]	; (8019dc0 <nk_popup_end+0x17c>)
 8019c56:	21ce      	movs	r1, #206	; 0xce
 8019c58:	485a      	ldr	r0, [pc, #360]	; (8019dc4 <nk_popup_end+0x180>)
 8019c5a:	f00a ff3d 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019c64:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d105      	bne.n	8019c78 <nk_popup_end+0x34>
 8019c6c:	4b56      	ldr	r3, [pc, #344]	; (8019dc8 <nk_popup_end+0x184>)
 8019c6e:	4a54      	ldr	r2, [pc, #336]	; (8019dc0 <nk_popup_end+0x17c>)
 8019c70:	21cf      	movs	r1, #207	; 0xcf
 8019c72:	4854      	ldr	r0, [pc, #336]	; (8019dc4 <nk_popup_end+0x180>)
 8019c74:	f00a ff30 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019c7e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d105      	bne.n	8019c96 <nk_popup_end+0x52>
 8019c8a:	4b50      	ldr	r3, [pc, #320]	; (8019dcc <nk_popup_end+0x188>)
 8019c8c:	4a4c      	ldr	r2, [pc, #304]	; (8019dc0 <nk_popup_end+0x17c>)
 8019c8e:	21d0      	movs	r1, #208	; 0xd0
 8019c90:	484c      	ldr	r0, [pc, #304]	; (8019dc4 <nk_popup_end+0x180>)
 8019c92:	f00a ff21 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	f000 8089 	beq.w	8019db0 <nk_popup_end+0x16c>
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019ca4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	f000 8081 	beq.w	8019db0 <nk_popup_end+0x16c>
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019cb4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d077      	beq.n	8019db0 <nk_popup_end+0x16c>
        return;

    popup = ctx->current;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019cc6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019cca:	613b      	str	r3, [r7, #16]
    if (!popup->parent) return;
 8019ccc:	693b      	ldr	r3, [r7, #16]
 8019cce:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d06e      	beq.n	8019db4 <nk_popup_end+0x170>
    win = popup->parent;
 8019cd6:	693b      	ldr	r3, [r7, #16]
 8019cd8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019cdc:	60fb      	str	r3, [r7, #12]
    if (popup->flags & NK_WINDOW_HIDDEN) {
 8019cde:	693b      	ldr	r3, [r7, #16]
 8019ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d015      	beq.n	8019d16 <nk_popup_end+0xd2>
        struct nk_panel *root;
        root = win->layout;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019cf0:	617b      	str	r3, [r7, #20]
        while (root) {
 8019cf2:	e009      	b.n	8019d08 <nk_popup_end+0xc4>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019cfc:	697b      	ldr	r3, [r7, #20]
 8019cfe:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8019d00:	697b      	ldr	r3, [r7, #20]
 8019d02:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019d06:	617b      	str	r3, [r7, #20]
        while (root) {
 8019d08:	697b      	ldr	r3, [r7, #20]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d1f2      	bne.n	8019cf4 <nk_popup_end+0xb0>
        }
        win->popup.active = 0;
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	2200      	movs	r2, #0
 8019d12:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    }
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8019d16:	693b      	ldr	r3, [r7, #16]
 8019d18:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019d1c:	4b2c      	ldr	r3, [pc, #176]	; (8019dd0 <nk_popup_end+0x18c>)
 8019d1e:	ed93 6a00 	vldr	s12, [r3]
 8019d22:	edd3 6a01 	vldr	s13, [r3, #4]
 8019d26:	ed93 7a02 	vldr	s14, [r3, #8]
 8019d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8019d2e:	eeb0 0a46 	vmov.f32	s0, s12
 8019d32:	eef0 0a66 	vmov.f32	s1, s13
 8019d36:	eeb0 1a47 	vmov.f32	s2, s14
 8019d3a:	eef0 1a67 	vmov.f32	s3, s15
 8019d3e:	4610      	mov	r0, r2
 8019d40:	f7f7 fd2e 	bl	80117a0 <nk_push_scissor>
    nk_end(ctx);
 8019d44:	6878      	ldr	r0, [r7, #4]
 8019d46:	f00a fca3 	bl	8024690 <nk_end>

    win->buffer = popup->buffer;
 8019d4a:	68fa      	ldr	r2, [r7, #12]
 8019d4c:	693b      	ldr	r3, [r7, #16]
 8019d4e:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8019d52:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8019d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019d62:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_finish_popup(ctx, win);
 8019d66:	68f9      	ldr	r1, [r7, #12]
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f7f6 ffcb 	bl	8010d04 <nk_finish_popup>
    ctx->current = win;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019d74:	461a      	mov	r2, r3
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    nk_push_scissor(&win->buffer, win->layout->clip);
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019d88:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8019d8c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8019d90:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8019d94:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8019d98:	eeb0 0a46 	vmov.f32	s0, s12
 8019d9c:	eef0 0a66 	vmov.f32	s1, s13
 8019da0:	eeb0 1a47 	vmov.f32	s2, s14
 8019da4:	eef0 1a67 	vmov.f32	s3, s15
 8019da8:	4610      	mov	r0, r2
 8019daa:	f7f7 fcf9 	bl	80117a0 <nk_push_scissor>
 8019dae:	e002      	b.n	8019db6 <nk_popup_end+0x172>
        return;
 8019db0:	bf00      	nop
 8019db2:	e000      	b.n	8019db6 <nk_popup_end+0x172>
    if (!popup->parent) return;
 8019db4:	bf00      	nop
}
 8019db6:	3718      	adds	r7, #24
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bdb0      	pop	{r4, r5, r7, pc}
 8019dbc:	08028c34 	.word	0x08028c34
 8019dc0:	0802a960 	.word	0x0802a960
 8019dc4:	08028c38 	.word	0x08028c38
 8019dc8:	08028c5c 	.word	0x08028c5c
 8019dcc:	08028c6c 	.word	0x08028c6c
 8019dd0:	0802a91c 	.word	0x0802a91c

08019dd4 <nk_drag_behavior>:
 * ===============================================================*/
NK_LIB void
nk_drag_behavior(nk_flags *state, const struct nk_input *in,
    struct nk_rect drag, struct nk_property_variant *variant,
    float inc_per_pixel)
{
 8019dd4:	b5b0      	push	{r4, r5, r7, lr}
 8019dd6:	b08c      	sub	sp, #48	; 0x30
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	61f8      	str	r0, [r7, #28]
 8019ddc:	61b9      	str	r1, [r7, #24]
 8019dde:	eeb0 6a40 	vmov.f32	s12, s0
 8019de2:	eef0 6a60 	vmov.f32	s13, s1
 8019de6:	eeb0 7a41 	vmov.f32	s14, s2
 8019dea:	eef0 7a61 	vmov.f32	s15, s3
 8019dee:	607a      	str	r2, [r7, #4]
 8019df0:	ed87 2a00 	vstr	s4, [r7]
 8019df4:	ed87 6a02 	vstr	s12, [r7, #8]
 8019df8:	edc7 6a03 	vstr	s13, [r7, #12]
 8019dfc:	ed87 7a04 	vstr	s14, [r7, #16]
 8019e00:	edc7 7a05 	vstr	s15, [r7, #20]
    int left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;
 8019e04:	69bb      	ldr	r3, [r7, #24]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d006      	beq.n	8019e18 <nk_drag_behavior+0x44>
 8019e0a:	69bb      	ldr	r3, [r7, #24]
 8019e0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d001      	beq.n	8019e18 <nk_drag_behavior+0x44>
 8019e14:	2301      	movs	r3, #1
 8019e16:	e000      	b.n	8019e1a <nk_drag_behavior+0x46>
 8019e18:	2300      	movs	r3, #0
 8019e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int left_mouse_click_in_cursor = in &&
 8019e1c:	69bb      	ldr	r3, [r7, #24]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d019      	beq.n	8019e56 <nk_drag_behavior+0x82>
        nk_input_has_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, drag, nk_true);
 8019e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8019e26:	edd7 6a03 	vldr	s13, [r7, #12]
 8019e2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8019e2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e32:	2201      	movs	r2, #1
 8019e34:	eeb0 0a46 	vmov.f32	s0, s12
 8019e38:	eef0 0a66 	vmov.f32	s1, s13
 8019e3c:	eeb0 1a47 	vmov.f32	s2, s14
 8019e40:	eef0 1a67 	vmov.f32	s3, s15
 8019e44:	2100      	movs	r1, #0
 8019e46:	69b8      	ldr	r0, [r7, #24]
 8019e48:	f7fb fa80 	bl	801534c <nk_input_has_mouse_click_down_in_rect>
 8019e4c:	4603      	mov	r3, r0
    int left_mouse_click_in_cursor = in &&
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d001      	beq.n	8019e56 <nk_drag_behavior+0x82>
 8019e52:	2301      	movs	r3, #1
 8019e54:	e000      	b.n	8019e58 <nk_drag_behavior+0x84>
 8019e56:	2300      	movs	r3, #0
 8019e58:	62bb      	str	r3, [r7, #40]	; 0x28

    nk_widget_state_reset(state);
 8019e5a:	69fb      	ldr	r3, [r7, #28]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	f003 0302 	and.w	r3, r3, #2
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d003      	beq.n	8019e6e <nk_drag_behavior+0x9a>
 8019e66:	69fb      	ldr	r3, [r7, #28]
 8019e68:	2206      	movs	r2, #6
 8019e6a:	601a      	str	r2, [r3, #0]
 8019e6c:	e002      	b.n	8019e74 <nk_drag_behavior+0xa0>
 8019e6e:	69fb      	ldr	r3, [r7, #28]
 8019e70:	2204      	movs	r2, #4
 8019e72:	601a      	str	r2, [r3, #0]
    if (nk_input_is_mouse_hovering_rect(in, drag))
 8019e74:	ed97 6a02 	vldr	s12, [r7, #8]
 8019e78:	edd7 6a03 	vldr	s13, [r7, #12]
 8019e7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8019e80:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e84:	eeb0 0a46 	vmov.f32	s0, s12
 8019e88:	eef0 0a66 	vmov.f32	s1, s13
 8019e8c:	eeb0 1a47 	vmov.f32	s2, s14
 8019e90:	eef0 1a67 	vmov.f32	s3, s15
 8019e94:	69b8      	ldr	r0, [r7, #24]
 8019e96:	f7fb fae7 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d002      	beq.n	8019ea6 <nk_drag_behavior+0xd2>
        *state = NK_WIDGET_STATE_HOVERED;
 8019ea0:	69fb      	ldr	r3, [r7, #28]
 8019ea2:	2212      	movs	r2, #18
 8019ea4:	601a      	str	r2, [r3, #0]

    if (left_mouse_down && left_mouse_click_in_cursor) {
 8019ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	f000 80b9 	beq.w	801a020 <nk_drag_behavior+0x24c>
 8019eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	f000 80b5 	beq.w	801a020 <nk_drag_behavior+0x24c>
        float delta, pixels;
        pixels = in->mouse.delta.x;
 8019eb6:	69bb      	ldr	r3, [r7, #24]
 8019eb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8019ebc:	627b      	str	r3, [r7, #36]	; 0x24
        delta = pixels * inc_per_pixel;
 8019ebe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019ec2:	edd7 7a00 	vldr	s15, [r7]
 8019ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019eca:	edc7 7a08 	vstr	s15, [r7, #32]
        switch (variant->kind) {
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	781b      	ldrb	r3, [r3, #0]
 8019ed2:	2b02      	cmp	r3, #2
 8019ed4:	d05b      	beq.n	8019f8e <nk_drag_behavior+0x1ba>
 8019ed6:	2b02      	cmp	r3, #2
 8019ed8:	f300 809e 	bgt.w	801a018 <nk_drag_behavior+0x244>
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d002      	beq.n	8019ee6 <nk_drag_behavior+0x112>
 8019ee0:	2b01      	cmp	r3, #1
 8019ee2:	d01a      	beq.n	8019f1a <nk_drag_behavior+0x146>
        default: break;
 8019ee4:	e098      	b.n	801a018 <nk_drag_behavior+0x244>
        case NK_PROPERTY_INT:
            variant->value.i = variant->value.i + (int)delta;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	689b      	ldr	r3, [r3, #8]
 8019eea:	edd7 7a08 	vldr	s15, [r7, #32]
 8019eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ef2:	ee17 2a90 	vmov	r2, s15
 8019ef6:	441a      	add	r2, r3
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	609a      	str	r2, [r3, #8]
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	699a      	ldr	r2, [r3, #24]
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	689b      	ldr	r3, [r3, #8]
 8019f04:	429a      	cmp	r2, r3
 8019f06:	bfa8      	it	ge
 8019f08:	461a      	movge	r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	691b      	ldr	r3, [r3, #16]
 8019f0e:	429a      	cmp	r2, r3
 8019f10:	bfb8      	it	lt
 8019f12:	461a      	movlt	r2, r3
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	609a      	str	r2, [r3, #8]
            break;
 8019f18:	e07f      	b.n	801a01a <nk_drag_behavior+0x246>
        case NK_PROPERTY_FLOAT:
            variant->value.f = variant->value.f + (float)delta;
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8019f20:	edd7 7a08 	vldr	s15, [r7, #32]
 8019f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	edc3 7a02 	vstr	s15, [r3, #8]
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	ed93 7a02 	vldr	s14, [r3, #8]
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	edd3 7a06 	vldr	s15, [r3, #24]
 8019f3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f42:	d503      	bpl.n	8019f4c <nk_drag_behavior+0x178>
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	edd3 7a02 	vldr	s15, [r3, #8]
 8019f4a:	e002      	b.n	8019f52 <nk_drag_behavior+0x17e>
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	ed93 7a04 	vldr	s14, [r3, #16]
 8019f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f60:	d502      	bpl.n	8019f68 <nk_drag_behavior+0x194>
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	691b      	ldr	r3, [r3, #16]
 8019f66:	e00f      	b.n	8019f88 <nk_drag_behavior+0x1b4>
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	edd3 7a06 	vldr	s15, [r3, #24]
 8019f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f7c:	d502      	bpl.n	8019f84 <nk_drag_behavior+0x1b0>
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	689b      	ldr	r3, [r3, #8]
 8019f82:	e001      	b.n	8019f88 <nk_drag_behavior+0x1b4>
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	699b      	ldr	r3, [r3, #24]
 8019f88:	687a      	ldr	r2, [r7, #4]
 8019f8a:	6093      	str	r3, [r2, #8]
            break;
 8019f8c:	e045      	b.n	801a01a <nk_drag_behavior+0x246>
        case NK_PROPERTY_DOUBLE:
            variant->value.d = variant->value.d + (double)delta;
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8019f94:	6a38      	ldr	r0, [r7, #32]
 8019f96:	f7e6 faff 	bl	8000598 <__aeabi_f2d>
 8019f9a:	4602      	mov	r2, r0
 8019f9c:	460b      	mov	r3, r1
 8019f9e:	4620      	mov	r0, r4
 8019fa0:	4629      	mov	r1, r5
 8019fa2:	f7e6 f99b 	bl	80002dc <__adddf3>
 8019fa6:	4602      	mov	r2, r0
 8019fa8:	460b      	mov	r3, r1
 8019faa:	6879      	ldr	r1, [r7, #4]
 8019fac:	e9c1 2302 	strd	r2, r3, [r1, #8]
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8019fbc:	f7e6 fdb6 	bl	8000b2c <__aeabi_dcmplt>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d003      	beq.n	8019fce <nk_drag_behavior+0x1fa>
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8019fcc:	e002      	b.n	8019fd4 <nk_drag_behavior+0x200>
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019fda:	f7e6 fda7 	bl	8000b2c <__aeabi_dcmplt>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d003      	beq.n	8019fec <nk_drag_behavior+0x218>
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019fea:	e011      	b.n	801a010 <nk_drag_behavior+0x23c>
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8019ff8:	f7e6 fd98 	bl	8000b2c <__aeabi_dcmplt>
 8019ffc:	4603      	mov	r3, r0
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d003      	beq.n	801a00a <nk_drag_behavior+0x236>
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a008:	e002      	b.n	801a010 <nk_drag_behavior+0x23c>
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a010:	6879      	ldr	r1, [r7, #4]
 801a012:	e9c1 2302 	strd	r2, r3, [r1, #8]
            break;
 801a016:	e000      	b.n	801a01a <nk_drag_behavior+0x246>
        default: break;
 801a018:	bf00      	nop
        }
        *state = NK_WIDGET_STATE_ACTIVE;
 801a01a:	69fb      	ldr	r3, [r7, #28]
 801a01c:	2222      	movs	r2, #34	; 0x22
 801a01e:	601a      	str	r2, [r3, #0]
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, drag))
 801a020:	69fb      	ldr	r3, [r7, #28]
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	f003 0310 	and.w	r3, r3, #16
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d01c      	beq.n	801a066 <nk_drag_behavior+0x292>
 801a02c:	ed97 6a02 	vldr	s12, [r7, #8]
 801a030:	edd7 6a03 	vldr	s13, [r7, #12]
 801a034:	ed97 7a04 	vldr	s14, [r7, #16]
 801a038:	edd7 7a05 	vldr	s15, [r7, #20]
 801a03c:	eeb0 0a46 	vmov.f32	s0, s12
 801a040:	eef0 0a66 	vmov.f32	s1, s13
 801a044:	eeb0 1a47 	vmov.f32	s2, s14
 801a048:	eef0 1a67 	vmov.f32	s3, s15
 801a04c:	69b8      	ldr	r0, [r7, #24]
 801a04e:	f7fb fa5d 	bl	801550c <nk_input_is_mouse_prev_hovering_rect>
 801a052:	4603      	mov	r3, r0
 801a054:	2b00      	cmp	r3, #0
 801a056:	d106      	bne.n	801a066 <nk_drag_behavior+0x292>
        *state |= NK_WIDGET_STATE_ENTERED;
 801a058:	69fb      	ldr	r3, [r7, #28]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f043 0208 	orr.w	r2, r3, #8
 801a060:	69fb      	ldr	r3, [r7, #28]
 801a062:	601a      	str	r2, [r3, #0]
    else if (nk_input_is_mouse_prev_hovering_rect(in, drag))
        *state |= NK_WIDGET_STATE_LEFT;
}
 801a064:	e01b      	b.n	801a09e <nk_drag_behavior+0x2ca>
    else if (nk_input_is_mouse_prev_hovering_rect(in, drag))
 801a066:	ed97 6a02 	vldr	s12, [r7, #8]
 801a06a:	edd7 6a03 	vldr	s13, [r7, #12]
 801a06e:	ed97 7a04 	vldr	s14, [r7, #16]
 801a072:	edd7 7a05 	vldr	s15, [r7, #20]
 801a076:	eeb0 0a46 	vmov.f32	s0, s12
 801a07a:	eef0 0a66 	vmov.f32	s1, s13
 801a07e:	eeb0 1a47 	vmov.f32	s2, s14
 801a082:	eef0 1a67 	vmov.f32	s3, s15
 801a086:	69b8      	ldr	r0, [r7, #24]
 801a088:	f7fb fa40 	bl	801550c <nk_input_is_mouse_prev_hovering_rect>
 801a08c:	4603      	mov	r3, r0
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d005      	beq.n	801a09e <nk_drag_behavior+0x2ca>
        *state |= NK_WIDGET_STATE_LEFT;
 801a092:	69fb      	ldr	r3, [r7, #28]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a09a:	69fb      	ldr	r3, [r7, #28]
 801a09c:	601a      	str	r2, [r3, #0]
}
 801a09e:	bf00      	nop
 801a0a0:	3730      	adds	r7, #48	; 0x30
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	bdb0      	pop	{r4, r5, r7, pc}

0801a0a6 <nk_property_behavior>:
NK_LIB void
nk_property_behavior(nk_flags *ws, const struct nk_input *in,
    struct nk_rect property,  struct nk_rect label, struct nk_rect edit,
    struct nk_rect empty, int *state, struct nk_property_variant *variant,
    float inc_per_pixel)
{
 801a0a6:	b580      	push	{r7, lr}
 801a0a8:	b094      	sub	sp, #80	; 0x50
 801a0aa:	af00      	add	r7, sp, #0
 801a0ac:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a0ae:	64b9      	str	r1, [r7, #72]	; 0x48
 801a0b0:	607a      	str	r2, [r7, #4]
 801a0b2:	603b      	str	r3, [r7, #0]
 801a0b4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 801a0b8:	edc7 0a0f 	vstr	s1, [r7, #60]	; 0x3c
 801a0bc:	ed87 1a10 	vstr	s2, [r7, #64]	; 0x40
 801a0c0:	edc7 1a11 	vstr	s3, [r7, #68]	; 0x44
 801a0c4:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 801a0c8:	edc7 2a0b 	vstr	s5, [r7, #44]	; 0x2c
 801a0cc:	ed87 3a0c 	vstr	s6, [r7, #48]	; 0x30
 801a0d0:	edc7 3a0d 	vstr	s7, [r7, #52]	; 0x34
 801a0d4:	ed87 4a06 	vstr	s8, [r7, #24]
 801a0d8:	edc7 4a07 	vstr	s9, [r7, #28]
 801a0dc:	ed87 5a08 	vstr	s10, [r7, #32]
 801a0e0:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 801a0e4:	ed87 6a02 	vstr	s12, [r7, #8]
 801a0e8:	edc7 6a03 	vstr	s13, [r7, #12]
 801a0ec:	ed87 7a04 	vstr	s14, [r7, #16]
 801a0f0:	edc7 7a05 	vstr	s15, [r7, #20]
    nk_widget_state_reset(ws);
 801a0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	f003 0302 	and.w	r3, r3, #2
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d003      	beq.n	801a108 <nk_property_behavior+0x62>
 801a100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a102:	2206      	movs	r2, #6
 801a104:	601a      	str	r2, [r3, #0]
 801a106:	e002      	b.n	801a10e <nk_property_behavior+0x68>
 801a108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a10a:	2204      	movs	r2, #4
 801a10c:	601a      	str	r2, [r3, #0]
    if (in && *state == NK_PROPERTY_DEFAULT) {
 801a10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a110:	2b00      	cmp	r3, #0
 801a112:	d056      	beq.n	801a1c2 <nk_property_behavior+0x11c>
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d152      	bne.n	801a1c2 <nk_property_behavior+0x11c>
        if (nk_button_behavior(ws, edit, in, NK_BUTTON_DEFAULT))
 801a11c:	ed97 6a06 	vldr	s12, [r7, #24]
 801a120:	edd7 6a07 	vldr	s13, [r7, #28]
 801a124:	ed97 7a08 	vldr	s14, [r7, #32]
 801a128:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801a12c:	2200      	movs	r2, #0
 801a12e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a130:	eeb0 0a46 	vmov.f32	s0, s12
 801a134:	eef0 0a66 	vmov.f32	s1, s13
 801a138:	eeb0 1a47 	vmov.f32	s2, s14
 801a13c:	eef0 1a67 	vmov.f32	s3, s15
 801a140:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a142:	f7f4 ff87 	bl	800f054 <nk_button_behavior>
 801a146:	4603      	mov	r3, r0
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d003      	beq.n	801a154 <nk_property_behavior+0xae>
            *state = NK_PROPERTY_EDIT;
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	2201      	movs	r2, #1
 801a150:	601a      	str	r2, [r3, #0]
 801a152:	e036      	b.n	801a1c2 <nk_property_behavior+0x11c>
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, label, nk_true))
 801a154:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 801a158:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 801a15c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a160:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801a164:	2201      	movs	r2, #1
 801a166:	eeb0 0a46 	vmov.f32	s0, s12
 801a16a:	eef0 0a66 	vmov.f32	s1, s13
 801a16e:	eeb0 1a47 	vmov.f32	s2, s14
 801a172:	eef0 1a67 	vmov.f32	s3, s15
 801a176:	2100      	movs	r1, #0
 801a178:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a17a:	f7fb f92e 	bl	80153da <nk_input_is_mouse_click_down_in_rect>
 801a17e:	4603      	mov	r3, r0
 801a180:	2b00      	cmp	r3, #0
 801a182:	d003      	beq.n	801a18c <nk_property_behavior+0xe6>
            *state = NK_PROPERTY_DRAG;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2202      	movs	r2, #2
 801a188:	601a      	str	r2, [r3, #0]
 801a18a:	e01a      	b.n	801a1c2 <nk_property_behavior+0x11c>
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, empty, nk_true))
 801a18c:	ed97 6a02 	vldr	s12, [r7, #8]
 801a190:	edd7 6a03 	vldr	s13, [r7, #12]
 801a194:	ed97 7a04 	vldr	s14, [r7, #16]
 801a198:	edd7 7a05 	vldr	s15, [r7, #20]
 801a19c:	2201      	movs	r2, #1
 801a19e:	eeb0 0a46 	vmov.f32	s0, s12
 801a1a2:	eef0 0a66 	vmov.f32	s1, s13
 801a1a6:	eeb0 1a47 	vmov.f32	s2, s14
 801a1aa:	eef0 1a67 	vmov.f32	s3, s15
 801a1ae:	2100      	movs	r1, #0
 801a1b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a1b2:	f7fb f912 	bl	80153da <nk_input_is_mouse_click_down_in_rect>
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d002      	beq.n	801a1c2 <nk_property_behavior+0x11c>
            *state = NK_PROPERTY_DRAG;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2202      	movs	r2, #2
 801a1c0:	601a      	str	r2, [r3, #0]
    }
    if (*state == NK_PROPERTY_DRAG) {
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	2b02      	cmp	r3, #2
 801a1c8:	d11f      	bne.n	801a20a <nk_property_behavior+0x164>
        nk_drag_behavior(ws, in, property, variant, inc_per_pixel);
 801a1ca:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801a1ce:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801a1d2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801a1d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a1da:	ed97 2a16 	vldr	s4, [r7, #88]	; 0x58
 801a1de:	683a      	ldr	r2, [r7, #0]
 801a1e0:	eeb0 0a46 	vmov.f32	s0, s12
 801a1e4:	eef0 0a66 	vmov.f32	s1, s13
 801a1e8:	eeb0 1a47 	vmov.f32	s2, s14
 801a1ec:	eef0 1a67 	vmov.f32	s3, s15
 801a1f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a1f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a1f4:	f7ff fdee 	bl	8019dd4 <nk_drag_behavior>
        if (!(*ws & NK_WIDGET_STATE_ACTIVED)) *state = NK_PROPERTY_DEFAULT;
 801a1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	f003 0320 	and.w	r3, r3, #32
 801a200:	2b00      	cmp	r3, #0
 801a202:	d102      	bne.n	801a20a <nk_property_behavior+0x164>
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	601a      	str	r2, [r3, #0]
    }
}
 801a20a:	bf00      	nop
 801a20c:	3750      	adds	r7, #80	; 0x50
 801a20e:	46bd      	mov	sp, r7
 801a210:	bd80      	pop	{r7, pc}
	...

0801a214 <nk_draw_property>:
NK_LIB void
nk_draw_property(struct nk_command_buffer *out, const struct nk_style_property *style,
    const struct nk_rect *bounds, const struct nk_rect *label, nk_flags state,
    const char *name, int len, const struct nk_user_font *font)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b08c      	sub	sp, #48	; 0x30
 801a218:	af02      	add	r7, sp, #8
 801a21a:	60f8      	str	r0, [r7, #12]
 801a21c:	60b9      	str	r1, [r7, #8]
 801a21e:	607a      	str	r2, [r7, #4]
 801a220:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;

    /* select correct background and text color */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 801a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a224:	f003 0320 	and.w	r3, r3, #32
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d006      	beq.n	801a23a <nk_draw_property+0x26>
        background = &style->active;
 801a22c:	68bb      	ldr	r3, [r7, #8]
 801a22e:	3338      	adds	r3, #56	; 0x38
 801a230:	627b      	str	r3, [r7, #36]	; 0x24
        text.text = style->label_active;
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a236:	623b      	str	r3, [r7, #32]
 801a238:	e010      	b.n	801a25c <nk_draw_property+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 801a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a23c:	f003 0310 	and.w	r3, r3, #16
 801a240:	2b00      	cmp	r3, #0
 801a242:	d006      	beq.n	801a252 <nk_draw_property+0x3e>
        background = &style->hover;
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	331c      	adds	r3, #28
 801a248:	627b      	str	r3, [r7, #36]	; 0x24
        text.text = style->label_hover;
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a24e:	623b      	str	r3, [r7, #32]
 801a250:	e004      	b.n	801a25c <nk_draw_property+0x48>
    } else {
        background = &style->normal;
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	627b      	str	r3, [r7, #36]	; 0x24
        text.text = style->label_normal;
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a25a:	623b      	str	r3, [r7, #32]
    }

    /* draw background */
    switch(background->type) {
 801a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a25e:	781b      	ldrb	r3, [r3, #0]
 801a260:	2b02      	cmp	r3, #2
 801a262:	d028      	beq.n	801a2b6 <nk_draw_property+0xa2>
 801a264:	2b02      	cmp	r3, #2
 801a266:	f300 8086 	bgt.w	801a376 <nk_draw_property+0x162>
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d044      	beq.n	801a2f8 <nk_draw_property+0xe4>
 801a26e:	2b01      	cmp	r3, #1
 801a270:	f040 8081 	bne.w	801a376 <nk_draw_property+0x162>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 801a274:	2300      	movs	r3, #0
 801a276:	2200      	movs	r2, #0
 801a278:	2100      	movs	r1, #0
 801a27a:	2000      	movs	r0, #0
 801a27c:	f7f5 fd02 	bl	800fc84 <nk_rgba>
 801a280:	4603      	mov	r3, r0
 801a282:	61fb      	str	r3, [r7, #28]
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 801a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a286:	1d19      	adds	r1, r3, #4
 801a288:	4a52      	ldr	r2, [pc, #328]	; (801a3d4 <nk_draw_property+0x1c0>)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	ed93 6a00 	vldr	s12, [r3]
 801a290:	edd3 6a01 	vldr	s13, [r3, #4]
 801a294:	ed93 7a02 	vldr	s14, [r3, #8]
 801a298:	edd3 7a03 	vldr	s15, [r3, #12]
 801a29c:	6812      	ldr	r2, [r2, #0]
 801a29e:	eeb0 0a46 	vmov.f32	s0, s12
 801a2a2:	eef0 0a66 	vmov.f32	s1, s13
 801a2a6:	eeb0 1a47 	vmov.f32	s2, s14
 801a2aa:	eef0 1a67 	vmov.f32	s3, s15
 801a2ae:	68f8      	ldr	r0, [r7, #12]
 801a2b0:	f7f7 ff50 	bl	8012154 <nk_draw_image>
            break;
 801a2b4:	e05f      	b.n	801a376 <nk_draw_property+0x162>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	2100      	movs	r1, #0
 801a2bc:	2000      	movs	r0, #0
 801a2be:	f7f5 fce1 	bl	800fc84 <nk_rgba>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	61fb      	str	r3, [r7, #28]
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2c8:	1d19      	adds	r1, r3, #4
 801a2ca:	4a42      	ldr	r2, [pc, #264]	; (801a3d4 <nk_draw_property+0x1c0>)
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	ed93 6a00 	vldr	s12, [r3]
 801a2d2:	edd3 6a01 	vldr	s13, [r3, #4]
 801a2d6:	ed93 7a02 	vldr	s14, [r3, #8]
 801a2da:	edd3 7a03 	vldr	s15, [r3, #12]
 801a2de:	6812      	ldr	r2, [r2, #0]
 801a2e0:	eeb0 0a46 	vmov.f32	s0, s12
 801a2e4:	eef0 0a66 	vmov.f32	s1, s13
 801a2e8:	eeb0 1a47 	vmov.f32	s2, s14
 801a2ec:	eef0 1a67 	vmov.f32	s3, s15
 801a2f0:	68f8      	ldr	r0, [r7, #12]
 801a2f2:	f7f8 f821 	bl	8012338 <nk_draw_nine_slice>
            break;
 801a2f6:	e03e      	b.n	801a376 <nk_draw_property+0x162>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 801a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2fa:	685b      	ldr	r3, [r3, #4]
 801a2fc:	61fb      	str	r3, [r7, #28]
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 801a2fe:	68bb      	ldr	r3, [r7, #8]
 801a300:	edd3 5a1b 	vldr	s11, [r3, #108]	; 0x6c
 801a304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	ed93 6a00 	vldr	s12, [r3]
 801a30c:	edd3 6a01 	vldr	s13, [r3, #4]
 801a310:	ed93 7a02 	vldr	s14, [r3, #8]
 801a314:	edd3 7a03 	vldr	s15, [r3, #12]
 801a318:	6851      	ldr	r1, [r2, #4]
 801a31a:	eeb0 2a65 	vmov.f32	s4, s11
 801a31e:	eeb0 0a46 	vmov.f32	s0, s12
 801a322:	eef0 0a66 	vmov.f32	s1, s13
 801a326:	eeb0 1a47 	vmov.f32	s2, s14
 801a32a:	eef0 1a67 	vmov.f32	s3, s15
 801a32e:	68f8      	ldr	r0, [r7, #12]
 801a330:	f7f7 fbb6 	bl	8011aa0 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, background->data.color);
 801a334:	68bb      	ldr	r3, [r7, #8]
 801a336:	edd3 5a1b 	vldr	s11, [r3, #108]	; 0x6c
 801a33a:	68bb      	ldr	r3, [r7, #8]
 801a33c:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 801a340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	ed93 6a00 	vldr	s12, [r3]
 801a348:	edd3 6a01 	vldr	s13, [r3, #4]
 801a34c:	ed93 7a02 	vldr	s14, [r3, #8]
 801a350:	edd3 7a03 	vldr	s15, [r3, #12]
 801a354:	6851      	ldr	r1, [r2, #4]
 801a356:	eef0 2a45 	vmov.f32	s5, s10
 801a35a:	eeb0 2a65 	vmov.f32	s4, s11
 801a35e:	eeb0 0a46 	vmov.f32	s0, s12
 801a362:	eef0 0a66 	vmov.f32	s1, s13
 801a366:	eeb0 1a47 	vmov.f32	s2, s14
 801a36a:	eef0 1a67 	vmov.f32	s3, s15
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f7f7 fa8e 	bl	8011890 <nk_stroke_rect>
            break;
 801a374:	bf00      	nop
    }

    /* draw label */
    text.padding = nk_vec2(0,0);
 801a376:	eddf 0a18 	vldr	s1, [pc, #96]	; 801a3d8 <nk_draw_property+0x1c4>
 801a37a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801a3d8 <nk_draw_property+0x1c4>
 801a37e:	f7fc fb07 	bl	8016990 <nk_vec2>
 801a382:	eeb0 7a40 	vmov.f32	s14, s0
 801a386:	eef0 7a60 	vmov.f32	s15, s1
 801a38a:	ed87 7a05 	vstr	s14, [r7, #20]
 801a38e:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *label, name, len, &text, NK_TEXT_CENTERED, font);
 801a392:	f107 0214 	add.w	r2, r7, #20
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	ed93 6a00 	vldr	s12, [r3]
 801a39c:	edd3 6a01 	vldr	s13, [r3, #4]
 801a3a0:	ed93 7a02 	vldr	s14, [r3, #8]
 801a3a4:	edd3 7a03 	vldr	s15, [r3, #12]
 801a3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a3aa:	9301      	str	r3, [sp, #4]
 801a3ac:	2312      	movs	r3, #18
 801a3ae:	9300      	str	r3, [sp, #0]
 801a3b0:	4613      	mov	r3, r2
 801a3b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a3b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a3b6:	eeb0 0a46 	vmov.f32	s0, s12
 801a3ba:	eef0 0a66 	vmov.f32	s1, s13
 801a3be:	eeb0 1a47 	vmov.f32	s2, s14
 801a3c2:	eef0 1a67 	vmov.f32	s3, s15
 801a3c6:	68f8      	ldr	r0, [r7, #12]
 801a3c8:	f005 f8d0 	bl	801f56c <nk_widget_text>
}
 801a3cc:	bf00      	nop
 801a3ce:	3728      	adds	r7, #40	; 0x28
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	bd80      	pop	{r7, pc}
 801a3d4:	0802a970 	.word	0x0802a970
 801a3d8:	00000000 	.word	0x00000000

0801a3dc <nk_do_property>:
    int *state, int *cursor, int *select_begin, int *select_end,
    const struct nk_style_property *style,
    enum nk_property_filter filter, struct nk_input *in,
    const struct nk_user_font *font, struct nk_text_edit *text_edit,
    enum nk_button_behavior behavior)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b0bc      	sub	sp, #240	; 0xf0
 801a3e0:	af04      	add	r7, sp, #16
 801a3e2:	6278      	str	r0, [r7, #36]	; 0x24
 801a3e4:	6239      	str	r1, [r7, #32]
 801a3e6:	eeb0 6a40 	vmov.f32	s12, s0
 801a3ea:	eef0 6a60 	vmov.f32	s13, s1
 801a3ee:	eeb0 7a41 	vmov.f32	s14, s2
 801a3f2:	eef0 7a61 	vmov.f32	s15, s3
 801a3f6:	60fa      	str	r2, [r7, #12]
 801a3f8:	60bb      	str	r3, [r7, #8]
 801a3fa:	ed87 2a01 	vstr	s4, [r7, #4]
 801a3fe:	ed87 6a04 	vstr	s12, [r7, #16]
 801a402:	edc7 6a05 	vstr	s13, [r7, #20]
 801a406:	ed87 7a06 	vstr	s14, [r7, #24]
 801a40a:	edc7 7a07 	vstr	s15, [r7, #28]
    const nk_plugin_filter filters[] = {
 801a40e:	4ab0      	ldr	r2, [pc, #704]	; (801a6d0 <nk_do_property+0x2f4>)
 801a410:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801a414:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a418:	e883 0003 	stmia.w	r3, {r0, r1}
        nk_filter_decimal,
        nk_filter_float
    };
    nk_bool active, old;
    int num_len = 0, name_len;
 801a41c:	2300      	movs	r3, #0
 801a41e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    char string[NK_MAX_NUMBER_BUFFER];
    float size;

    char *dst = 0;
 801a422:	2300      	movs	r3, #0
 801a424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    struct nk_rect label;
    struct nk_rect edit;
    struct nk_rect empty;

    /* left decrement button */
    left.h = font->height/2;
 801a428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a42c:	ed93 7a01 	vldr	s14, [r3, #4]
 801a430:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801a438:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    left.w = left.h;
 801a43c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a43e:	677b      	str	r3, [r7, #116]	; 0x74
    left.x = property.x + style->border + style->padding.x;
 801a440:	ed97 7a04 	vldr	s14, [r7, #16]
 801a444:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a448:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a44c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a450:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a454:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a458:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a45c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    left.y = property.y + style->border + property.h/2.0f - left.h/2;
 801a460:	ed97 7a05 	vldr	s14, [r7, #20]
 801a464:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a468:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a46c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a470:	edd7 6a07 	vldr	s13, [r7, #28]
 801a474:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801a478:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a47c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a480:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 801a484:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801a488:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a48c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a490:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    /* text label */
    name_len = nk_strlen(name);
 801a494:	68f8      	ldr	r0, [r7, #12]
 801a496:	f008 f913 	bl	80226c0 <nk_strlen>
 801a49a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    size = font->width(font->userdata, font->height, name, name_len);
 801a49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a4a2:	689b      	ldr	r3, [r3, #8]
 801a4a4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a4a8:	edd2 7a01 	vldr	s15, [r2, #4]
 801a4ac:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801a4b0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801a4b4:	68f9      	ldr	r1, [r7, #12]
 801a4b6:	eeb0 0a67 	vmov.f32	s0, s15
 801a4ba:	6800      	ldr	r0, [r0, #0]
 801a4bc:	4798      	blx	r3
 801a4be:	ed87 0a36 	vstr	s0, [r7, #216]	; 0xd8
    label.x = left.x + left.w + style->padding.x;
 801a4c2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801a4c6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801a4ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a4ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a4d2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a4d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a4da:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    label.w = (float)size + 2 * style->padding.x;
 801a4de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a4e2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a4e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801a4ea:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 801a4ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a4f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    label.y = property.y + style->border + style->padding.y;
 801a4f6:	ed97 7a05 	vldr	s14, [r7, #20]
 801a4fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a4fe:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a502:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a506:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a50a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 801a50e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a512:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.h = property.h - (2 * style->border + 2 * style->padding.y);
 801a516:	ed97 7a07 	vldr	s14, [r7, #28]
 801a51a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a51e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a522:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801a526:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a52a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 801a52e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a536:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a53a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

    /* right increment button */
    right.y = left.y;
 801a53e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a540:	663b      	str	r3, [r7, #96]	; 0x60
    right.w = left.w;
 801a542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a544:	667b      	str	r3, [r7, #100]	; 0x64
    right.h = left.h;
 801a546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a548:	66bb      	str	r3, [r7, #104]	; 0x68
    right.x = property.x + property.w - (right.w + style->padding.x);
 801a54a:	ed97 7a04 	vldr	s14, [r7, #16]
 801a54e:	edd7 7a06 	vldr	s15, [r7, #24]
 801a552:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a556:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801a55a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a55e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a566:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a56a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    /* edit */
    if (*state == NK_PROPERTY_EDIT) {
 801a56e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	2b01      	cmp	r3, #1
 801a576:	d126      	bne.n	801a5c6 <nk_do_property+0x1ea>
        size = font->width(font->userdata, font->height, buffer, *len);
 801a578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a57c:	689b      	ldr	r3, [r3, #8]
 801a57e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a582:	edd2 7a01 	vldr	s15, [r2, #4]
 801a586:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a58a:	6812      	ldr	r2, [r2, #0]
 801a58c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801a590:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801a594:	eeb0 0a67 	vmov.f32	s0, s15
 801a598:	6800      	ldr	r0, [r0, #0]
 801a59a:	4798      	blx	r3
 801a59c:	ed87 0a36 	vstr	s0, [r7, #216]	; 0xd8
        size += style->edit.cursor_size;
 801a5a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a5a4:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 801a5a8:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 801a5ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5b0:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
        length = len;
 801a5b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a5b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        dst = buffer;
 801a5bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801a5c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801a5c4:	e063      	b.n	801a68e <nk_do_property+0x2b2>
    } else {
        switch (variant->kind) {
 801a5c6:	68bb      	ldr	r3, [r7, #8]
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	2b02      	cmp	r3, #2
 801a5cc:	d02d      	beq.n	801a62a <nk_do_property+0x24e>
 801a5ce:	2b02      	cmp	r3, #2
 801a5d0:	dc41      	bgt.n	801a656 <nk_do_property+0x27a>
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d002      	beq.n	801a5dc <nk_do_property+0x200>
 801a5d6:	2b01      	cmp	r3, #1
 801a5d8:	d011      	beq.n	801a5fe <nk_do_property+0x222>
        default: break;
 801a5da:	e03c      	b.n	801a656 <nk_do_property+0x27a>
        case NK_PROPERTY_INT:
            nk_itoa(string, variant->value.i);
 801a5dc:	68bb      	ldr	r3, [r7, #8]
 801a5de:	689a      	ldr	r2, [r3, #8]
 801a5e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a5e4:	4611      	mov	r1, r2
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	f008 faf8 	bl	8022bdc <nk_itoa>
            num_len = nk_strlen(string);
 801a5ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f008 f865 	bl	80226c0 <nk_strlen>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            break;
 801a5fc:	e02c      	b.n	801a658 <nk_do_property+0x27c>
        case NK_PROPERTY_FLOAT:
            NK_DTOA(string, (double)variant->value.f);
 801a5fe:	68bb      	ldr	r3, [r7, #8]
 801a600:	689b      	ldr	r3, [r3, #8]
 801a602:	4618      	mov	r0, r3
 801a604:	f7e5 ffc8 	bl	8000598 <__aeabi_f2d>
 801a608:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a60c:	ec41 0b10 	vmov	d0, r0, r1
 801a610:	4618      	mov	r0, r3
 801a612:	f008 fb45 	bl	8022ca0 <nk_dtoa>
            num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);
 801a616:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a61a:	2102      	movs	r1, #2
 801a61c:	4618      	mov	r0, r3
 801a61e:	f008 fa73 	bl	8022b08 <nk_string_float_limit>
 801a622:	4603      	mov	r3, r0
 801a624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            break;
 801a628:	e016      	b.n	801a658 <nk_do_property+0x27c>
        case NK_PROPERTY_DOUBLE:
            NK_DTOA(string, variant->value.d);
 801a62a:	68bb      	ldr	r3, [r7, #8]
 801a62c:	ed93 7b02 	vldr	d7, [r3, #8]
 801a630:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a634:	eeb0 0a47 	vmov.f32	s0, s14
 801a638:	eef0 0a67 	vmov.f32	s1, s15
 801a63c:	4618      	mov	r0, r3
 801a63e:	f008 fb2f 	bl	8022ca0 <nk_dtoa>
            num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);
 801a642:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a646:	2102      	movs	r1, #2
 801a648:	4618      	mov	r0, r3
 801a64a:	f008 fa5d 	bl	8022b08 <nk_string_float_limit>
 801a64e:	4603      	mov	r3, r0
 801a650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            break;
 801a654:	e000      	b.n	801a658 <nk_do_property+0x27c>
        default: break;
 801a656:	bf00      	nop
        }
        size = font->width(font->userdata, font->height, string, num_len);
 801a658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a65c:	689b      	ldr	r3, [r3, #8]
 801a65e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a662:	edd2 7a01 	vldr	s15, [r2, #4]
 801a666:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801a66a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801a66e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801a672:	eeb0 0a67 	vmov.f32	s0, s15
 801a676:	6800      	ldr	r0, [r0, #0]
 801a678:	4798      	blx	r3
 801a67a:	ed87 0a36 	vstr	s0, [r7, #216]	; 0xd8
        dst = string;
 801a67e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        length = &num_len;
 801a686:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801a68a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    }

    edit.w =  (float)size + 2 * style->padding.x;
 801a68e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a692:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a696:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801a69a:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 801a69e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a6a2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    edit.w = NK_MIN(edit.w, right.x - (label.x + label.w));
 801a6a6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801a6aa:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801a6ae:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 801a6b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a6b6:	ee76 7a27 	vadd.f32	s15, s12, s15
 801a6ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a6be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c6:	d505      	bpl.n	801a6d4 <nk_do_property+0x2f8>
 801a6c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a6cc:	e00c      	b.n	801a6e8 <nk_do_property+0x30c>
 801a6ce:	bf00      	nop
 801a6d0:	08028d44 	.word	0x08028d44
 801a6d4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801a6d8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a6dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a6e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a6e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a6e8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    edit.x = right.x - (edit.w + style->padding.x);
 801a6ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801a6f0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801a6f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a6f8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a6fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a700:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a704:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    edit.y = property.y + style->border;
 801a708:	ed97 7a05 	vldr	s14, [r7, #20]
 801a70c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a710:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a714:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a718:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    edit.h = property.h - (2 * style->border);
 801a71c:	ed97 7a07 	vldr	s14, [r7, #28]
 801a720:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a724:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a728:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a72c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a730:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* empty left space activator */
    empty.w = edit.x - (label.x + label.w);
 801a734:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801a738:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a73c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a744:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a748:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    empty.x = label.x + label.w;
 801a74c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801a750:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a754:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a758:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    empty.y = property.y;
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	633b      	str	r3, [r7, #48]	; 0x30
    empty.h = property.h;
 801a760:	69fb      	ldr	r3, [r7, #28]
 801a762:	63bb      	str	r3, [r7, #56]	; 0x38

    /* update property */
    old = (*state == NK_PROPERTY_EDIT);
 801a764:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	2b01      	cmp	r3, #1
 801a76c:	bf0c      	ite	eq
 801a76e:	2301      	moveq	r3, #1
 801a770:	2300      	movne	r3, #0
 801a772:	b2db      	uxtb	r3, r3
 801a774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    nk_property_behavior(ws, in, property, label, edit, empty, state, variant, inc_per_pixel);
 801a778:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 801a77c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801a780:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a784:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a788:	ed97 4a0f 	vldr	s8, [r7, #60]	; 0x3c
 801a78c:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 801a790:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 801a794:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 801a798:	ed97 2a13 	vldr	s4, [r7, #76]	; 0x4c
 801a79c:	edd7 2a14 	vldr	s5, [r7, #80]	; 0x50
 801a7a0:	ed97 3a15 	vldr	s6, [r7, #84]	; 0x54
 801a7a4:	edd7 3a16 	vldr	s7, [r7, #88]	; 0x58
 801a7a8:	ed97 0a04 	vldr	s0, [r7, #16]
 801a7ac:	edd7 0a05 	vldr	s1, [r7, #20]
 801a7b0:	ed97 1a06 	vldr	s2, [r7, #24]
 801a7b4:	edd7 1a07 	vldr	s3, [r7, #28]
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	9300      	str	r3, [sp, #0]
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801a7c2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801a7c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a7c8:	f7ff fc6d 	bl	801a0a6 <nk_property_behavior>

    /* draw property */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 801a7cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a7d0:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d009      	beq.n	801a7ec <nk_do_property+0x410>
 801a7d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a7dc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 801a7e0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a7e4:	f8d2 1458 	ldr.w	r1, [r2, #1112]	; 0x458
 801a7e8:	6a38      	ldr	r0, [r7, #32]
 801a7ea:	4798      	blx	r3
    nk_draw_property(out, style, &property, &label, *ws, name, name_len, font);
 801a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801a7f4:	f107 0110 	add.w	r1, r7, #16
 801a7f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a7fc:	9203      	str	r2, [sp, #12]
 801a7fe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801a802:	9202      	str	r2, [sp, #8]
 801a804:	68fa      	ldr	r2, [r7, #12]
 801a806:	9201      	str	r2, [sp, #4]
 801a808:	9300      	str	r3, [sp, #0]
 801a80a:	4603      	mov	r3, r0
 801a80c:	460a      	mov	r2, r1
 801a80e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801a812:	6a38      	ldr	r0, [r7, #32]
 801a814:	f7ff fcfe 	bl	801a214 <nk_draw_property>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801a818:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a81c:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 801a820:	2b00      	cmp	r3, #0
 801a822:	d009      	beq.n	801a838 <nk_do_property+0x45c>
 801a824:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a828:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 801a82c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a830:	f8d2 1458 	ldr.w	r1, [r2, #1112]	; 0x458
 801a834:	6a38      	ldr	r0, [r7, #32]
 801a836:	4798      	blx	r3

    /* execute right button  */
    if (nk_do_button_symbol(ws, out, left, style->sym_left, behavior, &style->dec_button, in, font)) {
 801a838:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a83c:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 801a840:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a844:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 801a848:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 801a84c:	ed97 6a1b 	vldr	s12, [r7, #108]	; 0x6c
 801a850:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 801a854:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801a858:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801a85c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a860:	9202      	str	r2, [sp, #8]
 801a862:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801a866:	9201      	str	r2, [sp, #4]
 801a868:	9300      	str	r3, [sp, #0]
 801a86a:	4603      	mov	r3, r0
 801a86c:	460a      	mov	r2, r1
 801a86e:	eeb0 0a46 	vmov.f32	s0, s12
 801a872:	eef0 0a66 	vmov.f32	s1, s13
 801a876:	eeb0 1a47 	vmov.f32	s2, s14
 801a87a:	eef0 1a67 	vmov.f32	s3, s15
 801a87e:	6a39      	ldr	r1, [r7, #32]
 801a880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a882:	f7f4 ff79 	bl	800f778 <nk_do_button_symbol>
 801a886:	4603      	mov	r3, r0
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f000 80bd 	beq.w	801aa08 <nk_do_property+0x62c>
        switch (variant->kind) {
 801a88e:	68bb      	ldr	r3, [r7, #8]
 801a890:	781b      	ldrb	r3, [r3, #0]
 801a892:	2b02      	cmp	r3, #2
 801a894:	d061      	beq.n	801a95a <nk_do_property+0x57e>
 801a896:	2b02      	cmp	r3, #2
 801a898:	f300 80b5 	bgt.w	801aa06 <nk_do_property+0x62a>
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d002      	beq.n	801a8a6 <nk_do_property+0x4ca>
 801a8a0:	2b01      	cmp	r3, #1
 801a8a2:	d012      	beq.n	801a8ca <nk_do_property+0x4ee>
        default: break;
 801a8a4:	e0af      	b.n	801aa06 <nk_do_property+0x62a>
        case NK_PROPERTY_INT:
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i - variant->step.i, variant->max_value.i); break;
 801a8a6:	68bb      	ldr	r3, [r7, #8]
 801a8a8:	699a      	ldr	r2, [r3, #24]
 801a8aa:	68bb      	ldr	r3, [r7, #8]
 801a8ac:	6899      	ldr	r1, [r3, #8]
 801a8ae:	68bb      	ldr	r3, [r7, #8]
 801a8b0:	6a1b      	ldr	r3, [r3, #32]
 801a8b2:	1acb      	subs	r3, r1, r3
 801a8b4:	429a      	cmp	r2, r3
 801a8b6:	bfa8      	it	ge
 801a8b8:	461a      	movge	r2, r3
 801a8ba:	68bb      	ldr	r3, [r7, #8]
 801a8bc:	691b      	ldr	r3, [r3, #16]
 801a8be:	429a      	cmp	r2, r3
 801a8c0:	bfb8      	it	lt
 801a8c2:	461a      	movlt	r2, r3
 801a8c4:	68bb      	ldr	r3, [r7, #8]
 801a8c6:	609a      	str	r2, [r3, #8]
 801a8c8:	e09e      	b.n	801aa08 <nk_do_property+0x62c>
        case NK_PROPERTY_FLOAT:
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f - variant->step.f, variant->max_value.f); break;
 801a8ca:	68bb      	ldr	r3, [r7, #8]
 801a8cc:	ed93 7a02 	vldr	s14, [r3, #8]
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	edd3 7a08 	vldr	s15, [r3, #32]
 801a8d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	edd3 7a06 	vldr	s15, [r3, #24]
 801a8e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e8:	d508      	bpl.n	801a8fc <nk_do_property+0x520>
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	ed93 7a02 	vldr	s14, [r3, #8]
 801a8f0:	68bb      	ldr	r3, [r7, #8]
 801a8f2:	edd3 7a08 	vldr	s15, [r3, #32]
 801a8f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a8fa:	e002      	b.n	801a902 <nk_do_property+0x526>
 801a8fc:	68bb      	ldr	r3, [r7, #8]
 801a8fe:	edd3 7a06 	vldr	s15, [r3, #24]
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	ed93 7a04 	vldr	s14, [r3, #16]
 801a908:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a910:	d503      	bpl.n	801a91a <nk_do_property+0x53e>
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	edd3 7a04 	vldr	s15, [r3, #16]
 801a918:	e01b      	b.n	801a952 <nk_do_property+0x576>
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	ed93 7a02 	vldr	s14, [r3, #8]
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	edd3 7a08 	vldr	s15, [r3, #32]
 801a926:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	edd3 7a06 	vldr	s15, [r3, #24]
 801a930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a938:	d508      	bpl.n	801a94c <nk_do_property+0x570>
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	ed93 7a02 	vldr	s14, [r3, #8]
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	edd3 7a08 	vldr	s15, [r3, #32]
 801a946:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a94a:	e002      	b.n	801a952 <nk_do_property+0x576>
 801a94c:	68bb      	ldr	r3, [r7, #8]
 801a94e:	edd3 7a06 	vldr	s15, [r3, #24]
 801a952:	68bb      	ldr	r3, [r7, #8]
 801a954:	edc3 7a02 	vstr	s15, [r3, #8]
 801a958:	e056      	b.n	801aa08 <nk_do_property+0x62c>
        case NK_PROPERTY_DOUBLE:
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d - variant->step.d, variant->max_value.d); break;
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a966:	f7e5 fcb7 	bl	80002d8 <__aeabi_dsub>
 801a96a:	4602      	mov	r2, r0
 801a96c:	460b      	mov	r3, r1
 801a96e:	4610      	mov	r0, r2
 801a970:	4619      	mov	r1, r3
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a978:	f7e6 f8d8 	bl	8000b2c <__aeabi_dcmplt>
 801a97c:	4603      	mov	r3, r0
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d00c      	beq.n	801a99c <nk_do_property+0x5c0>
 801a982:	68bb      	ldr	r3, [r7, #8]
 801a984:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a98e:	f7e5 fca3 	bl	80002d8 <__aeabi_dsub>
 801a992:	4602      	mov	r2, r0
 801a994:	460b      	mov	r3, r1
 801a996:	4610      	mov	r0, r2
 801a998:	4619      	mov	r1, r3
 801a99a:	e002      	b.n	801a9a2 <nk_do_property+0x5c6>
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801a9a2:	68bb      	ldr	r3, [r7, #8]
 801a9a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a9a8:	f7e6 f8c0 	bl	8000b2c <__aeabi_dcmplt>
 801a9ac:	4603      	mov	r3, r0
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d003      	beq.n	801a9ba <nk_do_property+0x5de>
 801a9b2:	68bb      	ldr	r3, [r7, #8]
 801a9b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a9b8:	e021      	b.n	801a9fe <nk_do_property+0x622>
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a9c6:	f7e5 fc87 	bl	80002d8 <__aeabi_dsub>
 801a9ca:	4602      	mov	r2, r0
 801a9cc:	460b      	mov	r3, r1
 801a9ce:	4610      	mov	r0, r2
 801a9d0:	4619      	mov	r1, r3
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a9d8:	f7e6 f8a8 	bl	8000b2c <__aeabi_dcmplt>
 801a9dc:	4603      	mov	r3, r0
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d00a      	beq.n	801a9f8 <nk_do_property+0x61c>
 801a9e2:	68bb      	ldr	r3, [r7, #8]
 801a9e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a9ee:	f7e5 fc73 	bl	80002d8 <__aeabi_dsub>
 801a9f2:	4602      	mov	r2, r0
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	e002      	b.n	801a9fe <nk_do_property+0x622>
 801a9f8:	68bb      	ldr	r3, [r7, #8]
 801a9fa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a9fe:	68b9      	ldr	r1, [r7, #8]
 801aa00:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801aa04:	e000      	b.n	801aa08 <nk_do_property+0x62c>
        default: break;
 801aa06:	bf00      	nop
        }
    }
    /* execute left button  */
    if (nk_do_button_symbol(ws, out, right, style->sym_right, behavior, &style->inc_button, in, font)) {
 801aa08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801aa0c:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 801aa10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801aa14:	f503 734a 	add.w	r3, r3, #808	; 0x328
 801aa18:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 801aa1c:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 801aa20:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801aa24:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801aa28:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801aa2c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801aa30:	9202      	str	r2, [sp, #8]
 801aa32:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801aa36:	9201      	str	r2, [sp, #4]
 801aa38:	9300      	str	r3, [sp, #0]
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	460a      	mov	r2, r1
 801aa3e:	eeb0 0a46 	vmov.f32	s0, s12
 801aa42:	eef0 0a66 	vmov.f32	s1, s13
 801aa46:	eeb0 1a47 	vmov.f32	s2, s14
 801aa4a:	eef0 1a67 	vmov.f32	s3, s15
 801aa4e:	6a39      	ldr	r1, [r7, #32]
 801aa50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aa52:	f7f4 fe91 	bl	800f778 <nk_do_button_symbol>
 801aa56:	4603      	mov	r3, r0
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	f000 80bd 	beq.w	801abd8 <nk_do_property+0x7fc>
        switch (variant->kind) {
 801aa5e:	68bb      	ldr	r3, [r7, #8]
 801aa60:	781b      	ldrb	r3, [r3, #0]
 801aa62:	2b02      	cmp	r3, #2
 801aa64:	d061      	beq.n	801ab2a <nk_do_property+0x74e>
 801aa66:	2b02      	cmp	r3, #2
 801aa68:	f300 80b5 	bgt.w	801abd6 <nk_do_property+0x7fa>
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d002      	beq.n	801aa76 <nk_do_property+0x69a>
 801aa70:	2b01      	cmp	r3, #1
 801aa72:	d012      	beq.n	801aa9a <nk_do_property+0x6be>
        default: break;
 801aa74:	e0af      	b.n	801abd6 <nk_do_property+0x7fa>
        case NK_PROPERTY_INT:
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i + variant->step.i, variant->max_value.i); break;
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	699a      	ldr	r2, [r3, #24]
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	6899      	ldr	r1, [r3, #8]
 801aa7e:	68bb      	ldr	r3, [r7, #8]
 801aa80:	6a1b      	ldr	r3, [r3, #32]
 801aa82:	440b      	add	r3, r1
 801aa84:	429a      	cmp	r2, r3
 801aa86:	bfa8      	it	ge
 801aa88:	461a      	movge	r2, r3
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	691b      	ldr	r3, [r3, #16]
 801aa8e:	429a      	cmp	r2, r3
 801aa90:	bfb8      	it	lt
 801aa92:	461a      	movlt	r2, r3
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	609a      	str	r2, [r3, #8]
 801aa98:	e09e      	b.n	801abd8 <nk_do_property+0x7fc>
        case NK_PROPERTY_FLOAT:
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f + variant->step.f, variant->max_value.f); break;
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	ed93 7a02 	vldr	s14, [r3, #8]
 801aaa0:	68bb      	ldr	r3, [r7, #8]
 801aaa2:	edd3 7a08 	vldr	s15, [r3, #32]
 801aaa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	edd3 7a06 	vldr	s15, [r3, #24]
 801aab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aab8:	d508      	bpl.n	801aacc <nk_do_property+0x6f0>
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	ed93 7a02 	vldr	s14, [r3, #8]
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	edd3 7a08 	vldr	s15, [r3, #32]
 801aac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aaca:	e002      	b.n	801aad2 <nk_do_property+0x6f6>
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	edd3 7a06 	vldr	s15, [r3, #24]
 801aad2:	68bb      	ldr	r3, [r7, #8]
 801aad4:	ed93 7a04 	vldr	s14, [r3, #16]
 801aad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae0:	d503      	bpl.n	801aaea <nk_do_property+0x70e>
 801aae2:	68bb      	ldr	r3, [r7, #8]
 801aae4:	edd3 7a04 	vldr	s15, [r3, #16]
 801aae8:	e01b      	b.n	801ab22 <nk_do_property+0x746>
 801aaea:	68bb      	ldr	r3, [r7, #8]
 801aaec:	ed93 7a02 	vldr	s14, [r3, #8]
 801aaf0:	68bb      	ldr	r3, [r7, #8]
 801aaf2:	edd3 7a08 	vldr	s15, [r3, #32]
 801aaf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aafa:	68bb      	ldr	r3, [r7, #8]
 801aafc:	edd3 7a06 	vldr	s15, [r3, #24]
 801ab00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ab04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab08:	d508      	bpl.n	801ab1c <nk_do_property+0x740>
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	ed93 7a02 	vldr	s14, [r3, #8]
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	edd3 7a08 	vldr	s15, [r3, #32]
 801ab16:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab1a:	e002      	b.n	801ab22 <nk_do_property+0x746>
 801ab1c:	68bb      	ldr	r3, [r7, #8]
 801ab1e:	edd3 7a06 	vldr	s15, [r3, #24]
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	edc3 7a02 	vstr	s15, [r3, #8]
 801ab28:	e056      	b.n	801abd8 <nk_do_property+0x7fc>
        case NK_PROPERTY_DOUBLE:
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d + variant->step.d, variant->max_value.d); break;
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab36:	f7e5 fbd1 	bl	80002dc <__adddf3>
 801ab3a:	4602      	mov	r2, r0
 801ab3c:	460b      	mov	r3, r1
 801ab3e:	4610      	mov	r0, r2
 801ab40:	4619      	mov	r1, r3
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801ab48:	f7e5 fff0 	bl	8000b2c <__aeabi_dcmplt>
 801ab4c:	4603      	mov	r3, r0
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d00c      	beq.n	801ab6c <nk_do_property+0x790>
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab5e:	f7e5 fbbd 	bl	80002dc <__adddf3>
 801ab62:	4602      	mov	r2, r0
 801ab64:	460b      	mov	r3, r1
 801ab66:	4610      	mov	r0, r2
 801ab68:	4619      	mov	r1, r3
 801ab6a:	e002      	b.n	801ab72 <nk_do_property+0x796>
 801ab6c:	68bb      	ldr	r3, [r7, #8]
 801ab6e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801ab72:	68bb      	ldr	r3, [r7, #8]
 801ab74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ab78:	f7e5 ffd8 	bl	8000b2c <__aeabi_dcmplt>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d003      	beq.n	801ab8a <nk_do_property+0x7ae>
 801ab82:	68bb      	ldr	r3, [r7, #8]
 801ab84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ab88:	e021      	b.n	801abce <nk_do_property+0x7f2>
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801ab90:	68bb      	ldr	r3, [r7, #8]
 801ab92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab96:	f7e5 fba1 	bl	80002dc <__adddf3>
 801ab9a:	4602      	mov	r2, r0
 801ab9c:	460b      	mov	r3, r1
 801ab9e:	4610      	mov	r0, r2
 801aba0:	4619      	mov	r1, r3
 801aba2:	68bb      	ldr	r3, [r7, #8]
 801aba4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801aba8:	f7e5 ffc0 	bl	8000b2c <__aeabi_dcmplt>
 801abac:	4603      	mov	r3, r0
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d00a      	beq.n	801abc8 <nk_do_property+0x7ec>
 801abb2:	68bb      	ldr	r3, [r7, #8]
 801abb4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801abbe:	f7e5 fb8d 	bl	80002dc <__adddf3>
 801abc2:	4602      	mov	r2, r0
 801abc4:	460b      	mov	r3, r1
 801abc6:	e002      	b.n	801abce <nk_do_property+0x7f2>
 801abc8:	68bb      	ldr	r3, [r7, #8]
 801abca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801abce:	68b9      	ldr	r1, [r7, #8]
 801abd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801abd4:	e000      	b.n	801abd8 <nk_do_property+0x7fc>
        default: break;
 801abd6:	bf00      	nop
        }
    }
    if (old != NK_PROPERTY_EDIT && (*state == NK_PROPERTY_EDIT)) {
 801abd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801abdc:	2b01      	cmp	r3, #1
 801abde:	d02c      	beq.n	801ac3a <nk_do_property+0x85e>
 801abe0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	2b01      	cmp	r3, #1
 801abe8:	d127      	bne.n	801ac3a <nk_do_property+0x85e>
        /* property has been activated so setup buffer */
        NK_MEMCPY(buffer, dst, (nk_size)*length);
 801abea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	461a      	mov	r2, r3
 801abf2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801abf6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801abfa:	f007 fbf3 	bl	80223e4 <nk_memcopy>
        *cursor = nk_utf_len(buffer, *length);
 801abfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	4619      	mov	r1, r3
 801ac06:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ac0a:	f007 fb9f 	bl	802234c <nk_utf_len>
 801ac0e:	4602      	mov	r2, r0
 801ac10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ac14:	601a      	str	r2, [r3, #0]
        *len = *length;
 801ac16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac1a:	681a      	ldr	r2, [r3, #0]
 801ac1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ac20:	601a      	str	r2, [r3, #0]
        length = len;
 801ac22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ac26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        dst = buffer;
 801ac2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801ac2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        active = 0;
 801ac32:	2300      	movs	r3, #0
 801ac34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801ac38:	e009      	b.n	801ac4e <nk_do_property+0x872>
    } else active = (*state == NK_PROPERTY_EDIT);
 801ac3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	2b01      	cmp	r3, #1
 801ac42:	bf0c      	ite	eq
 801ac44:	2301      	moveq	r3, #1
 801ac46:	2300      	movne	r3, #0
 801ac48:	b2db      	uxtb	r3, r3
 801ac4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /* execute and run text edit field */
    nk_textedit_clear_state(text_edit, NK_TEXT_EDIT_SINGLE_LINE, filters[filter]);
 801ac4e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 801ac52:	009b      	lsls	r3, r3, #2
 801ac54:	33e0      	adds	r3, #224	; 0xe0
 801ac56:	443b      	add	r3, r7
 801ac58:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801ac5c:	461a      	mov	r2, r3
 801ac5e:	2100      	movs	r1, #0
 801ac60:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801ac64:	f006 fd1c 	bl	80216a0 <nk_textedit_clear_state>
    text_edit->active = (unsigned char)active;
 801ac68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ac6c:	b2da      	uxtb	r2, r3
 801ac6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac72:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    text_edit->string.len = *length;
 801ac76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac7a:	681a      	ldr	r2, [r3, #0]
 801ac7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac80:	649a      	str	r2, [r3, #72]	; 0x48
    text_edit->cursor = NK_CLAMP(0, *cursor, *length);
 801ac82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	4293      	cmp	r3, r2
 801ac90:	bfa8      	it	ge
 801ac92:	4613      	movge	r3, r2
 801ac94:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ac98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac9c:	659a      	str	r2, [r3, #88]	; 0x58
    text_edit->select_start = NK_CLAMP(0,*select_begin, *length);
 801ac9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801aca2:	681a      	ldr	r2, [r3, #0]
 801aca4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	4293      	cmp	r3, r2
 801acac:	bfa8      	it	ge
 801acae:	4613      	movge	r3, r2
 801acb0:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801acb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acb8:	65da      	str	r2, [r3, #92]	; 0x5c
    text_edit->select_end = NK_CLAMP(0,*select_end, *length);
 801acba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801acbe:	681a      	ldr	r2, [r3, #0]
 801acc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	4293      	cmp	r3, r2
 801acc8:	bfa8      	it	ge
 801acca:	4613      	movge	r3, r2
 801accc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801acd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acd4:	661a      	str	r2, [r3, #96]	; 0x60
    text_edit->string.buffer.allocated = (nk_size)*length;
 801acd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	461a      	mov	r2, r3
 801acde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ace2:	639a      	str	r2, [r3, #56]	; 0x38
    text_edit->string.buffer.memory.size = NK_MAX_NUMBER_BUFFER;
 801ace4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ace8:	2240      	movs	r2, #64	; 0x40
 801acea:	631a      	str	r2, [r3, #48]	; 0x30
    text_edit->string.buffer.memory.ptr = dst;
 801acec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acf0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801acf4:	62da      	str	r2, [r3, #44]	; 0x2c
    text_edit->string.buffer.size = NK_MAX_NUMBER_BUFFER;
 801acf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acfa:	2240      	movs	r2, #64	; 0x40
 801acfc:	645a      	str	r2, [r3, #68]	; 0x44
    text_edit->mode = NK_TEXT_EDIT_MODE_INSERT;
 801acfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad02:	2201      	movs	r2, #1
 801ad04:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
 801ad08:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
        filters[filter], text_edit, &style->edit, (*state == NK_PROPERTY_EDIT) ? in: 0, font);
 801ad0c:	009b      	lsls	r3, r3, #2
 801ad0e:	33e0      	adds	r3, #224	; 0xe0
 801ad10:	443b      	add	r3, r7
 801ad12:	f853 0c20 	ldr.w	r0, [r3, #-32]
    nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
 801ad16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801ad1a:	f103 0278 	add.w	r2, r3, #120	; 0x78
        filters[filter], text_edit, &style->edit, (*state == NK_PROPERTY_EDIT) ? in: 0, font);
 801ad1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ad22:	681b      	ldr	r3, [r3, #0]
    nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
 801ad24:	2b01      	cmp	r3, #1
 801ad26:	d102      	bne.n	801ad2e <nk_do_property+0x952>
 801ad28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ad2c:	e000      	b.n	801ad30 <nk_do_property+0x954>
 801ad2e:	2300      	movs	r3, #0
 801ad30:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 801ad34:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801ad38:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801ad3c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801ad40:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801ad44:	9103      	str	r1, [sp, #12]
 801ad46:	9302      	str	r3, [sp, #8]
 801ad48:	9201      	str	r2, [sp, #4]
 801ad4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad4e:	9300      	str	r3, [sp, #0]
 801ad50:	4603      	mov	r3, r0
 801ad52:	f240 2262 	movw	r2, #610	; 0x262
 801ad56:	eeb0 0a46 	vmov.f32	s0, s12
 801ad5a:	eef0 0a66 	vmov.f32	s1, s13
 801ad5e:	eeb0 1a47 	vmov.f32	s2, s14
 801ad62:	eef0 1a67 	vmov.f32	s3, s15
 801ad66:	6a39      	ldr	r1, [r7, #32]
 801ad68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad6a:	f7f8 fa25 	bl	80131b8 <nk_do_edit>

    *length = text_edit->string.len;
 801ad6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ad74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ad78:	601a      	str	r2, [r3, #0]
    *cursor = text_edit->cursor;
 801ad7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ad80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ad84:	601a      	str	r2, [r3, #0]
    *select_begin = text_edit->select_start;
 801ad86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ad8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ad90:	601a      	str	r2, [r3, #0]
    *select_end = text_edit->select_end;
 801ad92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ad98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ad9c:	601a      	str	r2, [r3, #0]
    if (text_edit->active && nk_input_is_key_pressed(in, NK_KEY_ENTER))
 801ad9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ada2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d00c      	beq.n	801adc4 <nk_do_property+0x9e8>
 801adaa:	2104      	movs	r1, #4
 801adac:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801adb0:	f7fa fc39 	bl	8015626 <nk_input_is_key_pressed>
 801adb4:	4603      	mov	r3, r0
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d004      	beq.n	801adc4 <nk_do_property+0x9e8>
        text_edit->active = nk_false;
 801adba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801adbe:	2200      	movs	r2, #0
 801adc0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    if (active && !text_edit->active) {
 801adc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801adc8:	2b00      	cmp	r3, #0
 801adca:	f000 80bc 	beq.w	801af46 <nk_do_property+0xb6a>
 801adce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801add2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801add6:	2b00      	cmp	r3, #0
 801add8:	f040 80b5 	bne.w	801af46 <nk_do_property+0xb6a>
        /* property is now not active so convert edit text to value*/
        *state = NK_PROPERTY_DEFAULT;
 801addc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ade0:	2200      	movs	r2, #0
 801ade2:	601a      	str	r2, [r3, #0]
        buffer[*len] = '\0';
 801ade4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	461a      	mov	r2, r3
 801adec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801adf0:	4413      	add	r3, r2
 801adf2:	2200      	movs	r2, #0
 801adf4:	701a      	strb	r2, [r3, #0]
        switch (variant->kind) {
 801adf6:	68bb      	ldr	r3, [r7, #8]
 801adf8:	781b      	ldrb	r3, [r3, #0]
 801adfa:	2b02      	cmp	r3, #2
 801adfc:	d05d      	beq.n	801aeba <nk_do_property+0xade>
 801adfe:	2b02      	cmp	r3, #2
 801ae00:	f300 80a0 	bgt.w	801af44 <nk_do_property+0xb68>
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d002      	beq.n	801ae0e <nk_do_property+0xa32>
 801ae08:	2b01      	cmp	r3, #1
 801ae0a:	d017      	beq.n	801ae3c <nk_do_property+0xa60>
        default: break;
 801ae0c:	e09a      	b.n	801af44 <nk_do_property+0xb68>
        case NK_PROPERTY_INT:
            variant->value.i = nk_strtoi(buffer, 0);
 801ae0e:	2100      	movs	r1, #0
 801ae10:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ae14:	f007 fc7a 	bl	802270c <nk_strtoi>
 801ae18:	4602      	mov	r2, r0
 801ae1a:	68bb      	ldr	r3, [r7, #8]
 801ae1c:	609a      	str	r2, [r3, #8]
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	699a      	ldr	r2, [r3, #24]
 801ae22:	68bb      	ldr	r3, [r7, #8]
 801ae24:	689b      	ldr	r3, [r3, #8]
 801ae26:	429a      	cmp	r2, r3
 801ae28:	bfa8      	it	ge
 801ae2a:	461a      	movge	r2, r3
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	691b      	ldr	r3, [r3, #16]
 801ae30:	429a      	cmp	r2, r3
 801ae32:	bfb8      	it	lt
 801ae34:	461a      	movlt	r2, r3
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	609a      	str	r2, [r3, #8]
            break;
 801ae3a:	e084      	b.n	801af46 <nk_do_property+0xb6a>
        case NK_PROPERTY_FLOAT:
            nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);
 801ae3c:	2102      	movs	r1, #2
 801ae3e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ae42:	f007 fe61 	bl	8022b08 <nk_string_float_limit>
            variant->value.f = nk_strtof(buffer, 0);
 801ae46:	2100      	movs	r1, #0
 801ae48:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ae4c:	f007 fde8 	bl	8022a20 <nk_strtof>
 801ae50:	eef0 7a40 	vmov.f32	s15, s0
 801ae54:	68bb      	ldr	r3, [r7, #8]
 801ae56:	edc3 7a02 	vstr	s15, [r3, #8]
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	ed93 7a02 	vldr	s14, [r3, #8]
 801ae60:	68bb      	ldr	r3, [r7, #8]
 801ae62:	edd3 7a06 	vldr	s15, [r3, #24]
 801ae66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae6e:	d503      	bpl.n	801ae78 <nk_do_property+0xa9c>
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	edd3 7a02 	vldr	s15, [r3, #8]
 801ae76:	e002      	b.n	801ae7e <nk_do_property+0xaa2>
 801ae78:	68bb      	ldr	r3, [r7, #8]
 801ae7a:	edd3 7a06 	vldr	s15, [r3, #24]
 801ae7e:	68bb      	ldr	r3, [r7, #8]
 801ae80:	ed93 7a04 	vldr	s14, [r3, #16]
 801ae84:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ae88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae8c:	d502      	bpl.n	801ae94 <nk_do_property+0xab8>
 801ae8e:	68bb      	ldr	r3, [r7, #8]
 801ae90:	691b      	ldr	r3, [r3, #16]
 801ae92:	e00f      	b.n	801aeb4 <nk_do_property+0xad8>
 801ae94:	68bb      	ldr	r3, [r7, #8]
 801ae96:	ed93 7a02 	vldr	s14, [r3, #8]
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	edd3 7a06 	vldr	s15, [r3, #24]
 801aea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea8:	d502      	bpl.n	801aeb0 <nk_do_property+0xad4>
 801aeaa:	68bb      	ldr	r3, [r7, #8]
 801aeac:	689b      	ldr	r3, [r3, #8]
 801aeae:	e001      	b.n	801aeb4 <nk_do_property+0xad8>
 801aeb0:	68bb      	ldr	r3, [r7, #8]
 801aeb2:	699b      	ldr	r3, [r3, #24]
 801aeb4:	68ba      	ldr	r2, [r7, #8]
 801aeb6:	6093      	str	r3, [r2, #8]
            break;
 801aeb8:	e045      	b.n	801af46 <nk_do_property+0xb6a>
        case NK_PROPERTY_DOUBLE:
            nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);
 801aeba:	2102      	movs	r1, #2
 801aebc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801aec0:	f007 fe22 	bl	8022b08 <nk_string_float_limit>
            variant->value.d = nk_strtod(buffer, 0);
 801aec4:	2100      	movs	r1, #0
 801aec6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801aeca:	f007 fc79 	bl	80227c0 <nk_strtod>
 801aece:	eeb0 7a40 	vmov.f32	s14, s0
 801aed2:	eef0 7a60 	vmov.f32	s15, s1
 801aed6:	68bb      	ldr	r3, [r7, #8]
 801aed8:	ed83 7b02 	vstr	d7, [r3, #8]
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
 801aedc:	68bb      	ldr	r3, [r7, #8]
 801aede:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801aee2:	68bb      	ldr	r3, [r7, #8]
 801aee4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801aee8:	f7e5 fe20 	bl	8000b2c <__aeabi_dcmplt>
 801aeec:	4603      	mov	r3, r0
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d003      	beq.n	801aefa <nk_do_property+0xb1e>
 801aef2:	68bb      	ldr	r3, [r7, #8]
 801aef4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801aef8:	e002      	b.n	801af00 <nk_do_property+0xb24>
 801aefa:	68bb      	ldr	r3, [r7, #8]
 801aefc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801af00:	68bb      	ldr	r3, [r7, #8]
 801af02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af06:	f7e5 fe11 	bl	8000b2c <__aeabi_dcmplt>
 801af0a:	4603      	mov	r3, r0
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d003      	beq.n	801af18 <nk_do_property+0xb3c>
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af16:	e011      	b.n	801af3c <nk_do_property+0xb60>
 801af18:	68bb      	ldr	r3, [r7, #8]
 801af1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801af1e:	68bb      	ldr	r3, [r7, #8]
 801af20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801af24:	f7e5 fe02 	bl	8000b2c <__aeabi_dcmplt>
 801af28:	4603      	mov	r3, r0
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d003      	beq.n	801af36 <nk_do_property+0xb5a>
 801af2e:	68bb      	ldr	r3, [r7, #8]
 801af30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801af34:	e002      	b.n	801af3c <nk_do_property+0xb60>
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801af3c:	68b9      	ldr	r1, [r7, #8]
 801af3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            break;
 801af42:	e000      	b.n	801af46 <nk_do_property+0xb6a>
        default: break;
 801af44:	bf00      	nop
        }
    }
}
 801af46:	bf00      	nop
 801af48:	37e0      	adds	r7, #224	; 0xe0
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}
 801af4e:	bf00      	nop

0801af50 <nk_property_variant_int>:
NK_LIB struct nk_property_variant
nk_property_variant_int(int value, int min_value, int max_value, int step)
{
 801af50:	b4b0      	push	{r4, r5, r7}
 801af52:	b08f      	sub	sp, #60	; 0x3c
 801af54:	af00      	add	r7, sp, #0
 801af56:	60f8      	str	r0, [r7, #12]
 801af58:	60b9      	str	r1, [r7, #8]
 801af5a:	607a      	str	r2, [r7, #4]
 801af5c:	603b      	str	r3, [r7, #0]
    struct nk_property_variant result;
    result.kind = NK_PROPERTY_INT;
 801af5e:	2300      	movs	r3, #0
 801af60:	743b      	strb	r3, [r7, #16]
    result.value.i = value;
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	61bb      	str	r3, [r7, #24]
    result.min_value.i = min_value;
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	623b      	str	r3, [r7, #32]
    result.max_value.i = max_value;
 801af6a:	683b      	ldr	r3, [r7, #0]
 801af6c:	62bb      	str	r3, [r7, #40]	; 0x28
    result.step.i = step;
 801af6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801af70:	633b      	str	r3, [r7, #48]	; 0x30
    return result;
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	461d      	mov	r5, r3
 801af76:	f107 0410 	add.w	r4, r7, #16
 801af7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af82:	e894 0003 	ldmia.w	r4, {r0, r1}
 801af86:	e885 0003 	stmia.w	r5, {r0, r1}
}
 801af8a:	68f8      	ldr	r0, [r7, #12]
 801af8c:	373c      	adds	r7, #60	; 0x3c
 801af8e:	46bd      	mov	sp, r7
 801af90:	bcb0      	pop	{r4, r5, r7}
 801af92:	4770      	bx	lr

0801af94 <nk_property>:
    return result;
}
NK_LIB void
nk_property(struct nk_context *ctx, const char *name, struct nk_property_variant *variant,
    float inc_per_pixel, const enum nk_property_filter filter)
{
 801af94:	b5b0      	push	{r4, r5, r7, lr}
 801af96:	b0b8      	sub	sp, #224	; 0xe0
 801af98:	af0c      	add	r7, sp, #48	; 0x30
 801af9a:	6178      	str	r0, [r7, #20]
 801af9c:	6139      	str	r1, [r7, #16]
 801af9e:	60fa      	str	r2, [r7, #12]
 801afa0:	ed87 0a02 	vstr	s0, [r7, #8]
 801afa4:	71fb      	strb	r3, [r7, #7]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states s;

    int *state = 0;
 801afa6:	2300      	movs	r3, #0
 801afa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    nk_hash hash = 0;
 801afac:	2300      	movs	r3, #0
 801afae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    char *buffer = 0;
 801afb2:	2300      	movs	r3, #0
 801afb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int *len = 0;
 801afb8:	2300      	movs	r3, #0
 801afba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int *cursor = 0;
 801afbe:	2300      	movs	r3, #0
 801afc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int *select_begin = 0;
 801afc4:	2300      	movs	r3, #0
 801afc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int *select_end = 0;
 801afca:	2300      	movs	r3, #0
 801afcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int old_state;

    char dummy_buffer[NK_MAX_NUMBER_BUFFER];
    int dummy_state = NK_PROPERTY_DEFAULT;
 801afd0:	2300      	movs	r3, #0
 801afd2:	62bb      	str	r3, [r7, #40]	; 0x28
    int dummy_length = 0;
 801afd4:	2300      	movs	r3, #0
 801afd6:	627b      	str	r3, [r7, #36]	; 0x24
    int dummy_cursor = 0;
 801afd8:	2300      	movs	r3, #0
 801afda:	623b      	str	r3, [r7, #32]
    int dummy_select_begin = 0;
 801afdc:	2300      	movs	r3, #0
 801afde:	61fb      	str	r3, [r7, #28]
    int dummy_select_end = 0;
 801afe0:	2300      	movs	r3, #0
 801afe2:	61bb      	str	r3, [r7, #24]

    NK_ASSERT(ctx);
 801afe4:	697b      	ldr	r3, [r7, #20]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d106      	bne.n	801aff8 <nk_property+0x64>
 801afea:	4b76      	ldr	r3, [pc, #472]	; (801b1c4 <nk_property+0x230>)
 801afec:	4a76      	ldr	r2, [pc, #472]	; (801b1c8 <nk_property+0x234>)
 801afee:	f240 115b 	movw	r1, #347	; 0x15b
 801aff2:	4876      	ldr	r0, [pc, #472]	; (801b1cc <nk_property+0x238>)
 801aff4:	f009 fd70 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 801aff8:	697b      	ldr	r3, [r7, #20]
 801affa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801affe:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b002:	2b00      	cmp	r3, #0
 801b004:	d106      	bne.n	801b014 <nk_property+0x80>
 801b006:	4b72      	ldr	r3, [pc, #456]	; (801b1d0 <nk_property+0x23c>)
 801b008:	4a6f      	ldr	r2, [pc, #444]	; (801b1c8 <nk_property+0x234>)
 801b00a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801b00e:	486f      	ldr	r0, [pc, #444]	; (801b1cc <nk_property+0x238>)
 801b010:	f009 fd62 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b014:	697b      	ldr	r3, [r7, #20]
 801b016:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b01a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b022:	2b00      	cmp	r3, #0
 801b024:	d106      	bne.n	801b034 <nk_property+0xa0>
 801b026:	4b6b      	ldr	r3, [pc, #428]	; (801b1d4 <nk_property+0x240>)
 801b028:	4a67      	ldr	r2, [pc, #412]	; (801b1c8 <nk_property+0x234>)
 801b02a:	f240 115d 	movw	r1, #349	; 0x15d
 801b02e:	4867      	ldr	r0, [pc, #412]	; (801b1cc <nk_property+0x238>)
 801b030:	f009 fd52 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b034:	697b      	ldr	r3, [r7, #20]
 801b036:	2b00      	cmp	r3, #0
 801b038:	f000 8197 	beq.w	801b36a <nk_property+0x3d6>
 801b03c:	697b      	ldr	r3, [r7, #20]
 801b03e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b042:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b046:	2b00      	cmp	r3, #0
 801b048:	f000 818f 	beq.w	801b36a <nk_property+0x3d6>
 801b04c:	697b      	ldr	r3, [r7, #20]
 801b04e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b052:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	f000 8185 	beq.w	801b36a <nk_property+0x3d6>
        return;

    win = ctx->current;
 801b060:	697b      	ldr	r3, [r7, #20]
 801b062:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b066:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b06a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    layout = win->layout;
 801b06e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    style = &ctx->style;
 801b07a:	697b      	ldr	r3, [r7, #20]
 801b07c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801b080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    s = nk_widget(&bounds, ctx);
 801b084:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b088:	6979      	ldr	r1, [r7, #20]
 801b08a:	4618      	mov	r0, r3
 801b08c:	f008 fa3e 	bl	802350c <nk_widget>
 801b090:	4603      	mov	r3, r0
 801b092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (!s) return;
 801b096:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	f000 8167 	beq.w	801b36e <nk_property+0x3da>

    /* calculate hash from name */
    if (name[0] == '#') {
 801b0a0:	693b      	ldr	r3, [r7, #16]
 801b0a2:	781b      	ldrb	r3, [r3, #0]
 801b0a4:	2b23      	cmp	r3, #35	; 0x23
 801b0a6:	d116      	bne.n	801b0d6 <nk_property+0x142>
        hash = nk_murmur_hash(name, (int)nk_strlen(name), win->property.seq++);
 801b0a8:	6938      	ldr	r0, [r7, #16]
 801b0aa:	f007 fb09 	bl	80226c0 <nk_strlen>
 801b0ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b0b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801b0b6:	1c59      	adds	r1, r3, #1
 801b0b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b0bc:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 801b0c0:	461a      	mov	r2, r3
 801b0c2:	4601      	mov	r1, r0
 801b0c4:	6938      	ldr	r0, [r7, #16]
 801b0c6:	f007 ff73 	bl	8022fb0 <nk_murmur_hash>
 801b0ca:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        name++; /* special number hash */
 801b0ce:	693b      	ldr	r3, [r7, #16]
 801b0d0:	3301      	adds	r3, #1
 801b0d2:	613b      	str	r3, [r7, #16]
 801b0d4:	e00a      	b.n	801b0ec <nk_property+0x158>
    } else hash = nk_murmur_hash(name, (int)nk_strlen(name), 42);
 801b0d6:	6938      	ldr	r0, [r7, #16]
 801b0d8:	f007 faf2 	bl	80226c0 <nk_strlen>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	222a      	movs	r2, #42	; 0x2a
 801b0e0:	4619      	mov	r1, r3
 801b0e2:	6938      	ldr	r0, [r7, #16]
 801b0e4:	f007 ff64 	bl	8022fb0 <nk_murmur_hash>
 801b0e8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

    /* check if property is currently hot item */
    if (win->property.active && hash == win->property.name) {
 801b0ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d026      	beq.n	801b146 <nk_property+0x1b2>
 801b0f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b0fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801b100:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b104:	429a      	cmp	r2, r3
 801b106:	d11e      	bne.n	801b146 <nk_property+0x1b2>
        buffer = win->property.buffer;
 801b108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b10c:	339c      	adds	r3, #156	; 0x9c
 801b10e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        len = &win->property.length;
 801b112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b116:	33dc      	adds	r3, #220	; 0xdc
 801b118:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        cursor = &win->property.cursor;
 801b11c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b120:	33e0      	adds	r3, #224	; 0xe0
 801b122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        state = &win->property.state;
 801b126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b12a:	33f8      	adds	r3, #248	; 0xf8
 801b12c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        select_begin = &win->property.select_start;
 801b130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b134:	33e4      	adds	r3, #228	; 0xe4
 801b136:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        select_end = &win->property.select_end;
 801b13a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b13e:	33e8      	adds	r3, #232	; 0xe8
 801b140:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b144:	e017      	b.n	801b176 <nk_property+0x1e2>
    } else {
        buffer = dummy_buffer;
 801b146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b14a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        len = &dummy_length;
 801b14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        cursor = &dummy_cursor;
 801b156:	f107 0320 	add.w	r3, r7, #32
 801b15a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        state = &dummy_state;
 801b15e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        select_begin =  &dummy_select_begin;
 801b166:	f107 031c 	add.w	r3, r7, #28
 801b16a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        select_end = &dummy_select_end;
 801b16e:	f107 0318 	add.w	r3, r7, #24
 801b172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    /* execute property widget */
    old_state = *state;
 801b176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    ctx->text_edit.clip = ctx->clip;
 801b180:	697b      	ldr	r3, [r7, #20]
 801b182:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801b186:	4619      	mov	r1, r3
 801b188:	697b      	ldr	r3, [r7, #20]
 801b18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b18e:	461a      	mov	r2, r3
 801b190:	f501 739e 	add.w	r3, r1, #316	; 0x13c
 801b194:	f602 22c8 	addw	r2, r2, #2760	; 0xac8
 801b198:	ca07      	ldmia	r2, {r0, r1, r2}
 801b19a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
        layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801b19e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801b1a2:	2b02      	cmp	r3, #2
 801b1a4:	d105      	bne.n	801b1b2 <nk_property+0x21e>
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 801b1a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b1aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d012      	beq.n	801b1d8 <nk_property+0x244>
        layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801b1b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b1b6:	685b      	ldr	r3, [r3, #4]
 801b1b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d10b      	bne.n	801b1d8 <nk_property+0x244>
        layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801b1c0:	697b      	ldr	r3, [r7, #20]
 801b1c2:	e00a      	b.n	801b1da <nk_property+0x246>
 801b1c4:	08028d4c 	.word	0x08028d4c
 801b1c8:	0802a974 	.word	0x0802a974
 801b1cc:	08028d50 	.word	0x08028d50
 801b1d0:	08028d70 	.word	0x08028d70
 801b1d4:	08028d80 	.word	0x08028d80
 801b1d8:	2300      	movs	r3, #0
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 801b1da:	67fb      	str	r3, [r7, #124]	; 0x7c
    nk_do_property(&ctx->last_widget_state, &win->buffer, bounds, name,
 801b1dc:	697b      	ldr	r3, [r7, #20]
 801b1de:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 801b1e2:	3014      	adds	r0, #20
 801b1e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b1e8:	f103 0564 	add.w	r5, r3, #100	; 0x64
 801b1ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b1f0:	f503 62ef 	add.w	r2, r3, #1912	; 0x778
        variant, inc_per_pixel, buffer, len, state, cursor, select_begin,
        select_end, &style->property, filter, in, style->font, &ctx->text_edit,
 801b1f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b1f8:	6819      	ldr	r1, [r3, #0]
    nk_do_property(&ctx->last_widget_state, &win->buffer, bounds, name,
 801b1fa:	697b      	ldr	r3, [r7, #20]
 801b1fc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801b200:	333c      	adds	r3, #60	; 0x3c
 801b202:	697c      	ldr	r4, [r7, #20]
 801b204:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801b208:	f894 4ad8 	ldrb.w	r4, [r4, #2776]	; 0xad8
 801b20c:	ed97 6a1b 	vldr	s12, [r7, #108]	; 0x6c
 801b210:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 801b214:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801b218:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801b21c:	940b      	str	r4, [sp, #44]	; 0x2c
 801b21e:	930a      	str	r3, [sp, #40]	; 0x28
 801b220:	9109      	str	r1, [sp, #36]	; 0x24
 801b222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b224:	9308      	str	r3, [sp, #32]
 801b226:	79fb      	ldrb	r3, [r7, #7]
 801b228:	9307      	str	r3, [sp, #28]
 801b22a:	9206      	str	r2, [sp, #24]
 801b22c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b230:	9305      	str	r3, [sp, #20]
 801b232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b236:	9304      	str	r3, [sp, #16]
 801b238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b23c:	9303      	str	r3, [sp, #12]
 801b23e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b242:	9302      	str	r3, [sp, #8]
 801b244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b248:	9301      	str	r3, [sp, #4]
 801b24a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b24e:	9300      	str	r3, [sp, #0]
 801b250:	ed97 2a02 	vldr	s4, [r7, #8]
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	693a      	ldr	r2, [r7, #16]
 801b258:	eeb0 0a46 	vmov.f32	s0, s12
 801b25c:	eef0 0a66 	vmov.f32	s1, s13
 801b260:	eeb0 1a47 	vmov.f32	s2, s14
 801b264:	eef0 1a67 	vmov.f32	s3, s15
 801b268:	4629      	mov	r1, r5
 801b26a:	f7ff f8b7 	bl	801a3dc <nk_do_property>
        ctx->button_behavior);

    if (in && *state != NK_PROPERTY_DEFAULT && !win->property.active) {
 801b26e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b270:	2b00      	cmp	r3, #0
 801b272:	d051      	beq.n	801b318 <nk_property+0x384>
 801b274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d04c      	beq.n	801b318 <nk_property+0x384>
 801b27e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b286:	2b00      	cmp	r3, #0
 801b288:	d146      	bne.n	801b318 <nk_property+0x384>
        /* current property is now hot */
        win->property.active = 1;
 801b28a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b28e:	2201      	movs	r2, #1
 801b290:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        NK_MEMCPY(win->property.buffer, buffer, (nk_size)*len);
 801b294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b298:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 801b29c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	461a      	mov	r2, r3
 801b2a4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b2a8:	f007 f89c 	bl	80223e4 <nk_memcopy>
        win->property.length = *len;
 801b2ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b2b0:	681a      	ldr	r2, [r3, #0]
 801b2b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        win->property.cursor = *cursor;
 801b2ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b2be:	681a      	ldr	r2, [r3, #0]
 801b2c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        win->property.state = *state;
 801b2c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b2cc:	681a      	ldr	r2, [r3, #0]
 801b2ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2d2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        win->property.name = hash;
 801b2d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b2de:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        win->property.select_start = *select_begin;
 801b2e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b2e6:	681a      	ldr	r2, [r3, #0]
 801b2e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2ec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        win->property.select_end = *select_end;
 801b2f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b2f4:	681a      	ldr	r2, [r3, #0]
 801b2f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2fa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        if (*state == NK_PROPERTY_DRAG) {
 801b2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	2b02      	cmp	r3, #2
 801b306:	d107      	bne.n	801b318 <nk_property+0x384>
            ctx->input.mouse.grab = nk_true;
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	2201      	movs	r2, #1
 801b30c:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
            ctx->input.mouse.grabbed = nk_true;
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	2201      	movs	r2, #1
 801b314:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        }
    }
    /* check if previously active property is now inactive */
    if (*state == NK_PROPERTY_DEFAULT && old_state != NK_PROPERTY_DEFAULT) {
 801b318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d126      	bne.n	801b370 <nk_property+0x3dc>
 801b322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b326:	2b00      	cmp	r3, #0
 801b328:	d022      	beq.n	801b370 <nk_property+0x3dc>
        if (old_state == NK_PROPERTY_DRAG) {
 801b32a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b32e:	2b02      	cmp	r3, #2
 801b330:	d10b      	bne.n	801b34a <nk_property+0x3b6>
            ctx->input.mouse.grab = nk_false;
 801b332:	697b      	ldr	r3, [r7, #20]
 801b334:	2200      	movs	r2, #0
 801b336:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
            ctx->input.mouse.grabbed = nk_false;
 801b33a:	697b      	ldr	r3, [r7, #20]
 801b33c:	2200      	movs	r2, #0
 801b33e:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
            ctx->input.mouse.ungrab = nk_true;
 801b342:	697b      	ldr	r3, [r7, #20]
 801b344:	2201      	movs	r2, #1
 801b346:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        }
        win->property.select_start = 0;
 801b34a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b34e:	2200      	movs	r2, #0
 801b350:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        win->property.select_end = 0;
 801b354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b358:	2200      	movs	r2, #0
 801b35a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        win->property.active = 0;
 801b35e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b362:	2200      	movs	r2, #0
 801b364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 801b368:	e002      	b.n	801b370 <nk_property+0x3dc>
        return;
 801b36a:	bf00      	nop
 801b36c:	e000      	b.n	801b370 <nk_property+0x3dc>
    if (!s) return;
 801b36e:	bf00      	nop
    }
}
 801b370:	37b0      	adds	r7, #176	; 0xb0
 801b372:	46bd      	mov	sp, r7
 801b374:	bdb0      	pop	{r4, r5, r7, pc}
 801b376:	bf00      	nop

0801b378 <nk_property_int>:
NK_API void
nk_property_int(struct nk_context *ctx, const char *name,
    int min, int *val, int max, int step, float inc_per_pixel)
{
 801b378:	b5b0      	push	{r4, r5, r7, lr}
 801b37a:	b09c      	sub	sp, #112	; 0x70
 801b37c:	af02      	add	r7, sp, #8
 801b37e:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b380:	63b9      	str	r1, [r7, #56]	; 0x38
 801b382:	637a      	str	r2, [r7, #52]	; 0x34
 801b384:	633b      	str	r3, [r7, #48]	; 0x30
 801b386:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    struct nk_property_variant variant;
    NK_ASSERT(ctx);
 801b38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d106      	bne.n	801b39e <nk_property_int+0x26>
 801b390:	4b27      	ldr	r3, [pc, #156]	; (801b430 <nk_property_int+0xb8>)
 801b392:	4a28      	ldr	r2, [pc, #160]	; (801b434 <nk_property_int+0xbc>)
 801b394:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 801b398:	4827      	ldr	r0, [pc, #156]	; (801b438 <nk_property_int+0xc0>)
 801b39a:	f009 fb9d 	bl	8024ad8 <__assert_func>
    NK_ASSERT(name);
 801b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d106      	bne.n	801b3b2 <nk_property_int+0x3a>
 801b3a4:	4b25      	ldr	r3, [pc, #148]	; (801b43c <nk_property_int+0xc4>)
 801b3a6:	4a23      	ldr	r2, [pc, #140]	; (801b434 <nk_property_int+0xbc>)
 801b3a8:	f240 11a9 	movw	r1, #425	; 0x1a9
 801b3ac:	4822      	ldr	r0, [pc, #136]	; (801b438 <nk_property_int+0xc0>)
 801b3ae:	f009 fb93 	bl	8024ad8 <__assert_func>
    NK_ASSERT(val);
 801b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d106      	bne.n	801b3c6 <nk_property_int+0x4e>
 801b3b8:	4b21      	ldr	r3, [pc, #132]	; (801b440 <nk_property_int+0xc8>)
 801b3ba:	4a1e      	ldr	r2, [pc, #120]	; (801b434 <nk_property_int+0xbc>)
 801b3bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b3c0:	481d      	ldr	r0, [pc, #116]	; (801b438 <nk_property_int+0xc0>)
 801b3c2:	f009 fb89 	bl	8024ad8 <__assert_func>

    if (!ctx || !ctx->current || !name || !val) return;
 801b3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d02d      	beq.n	801b428 <nk_property_int+0xb0>
 801b3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b3d2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d026      	beq.n	801b428 <nk_property_int+0xb0>
 801b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d023      	beq.n	801b428 <nk_property_int+0xb0>
 801b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d020      	beq.n	801b428 <nk_property_int+0xb0>
    variant = nk_property_variant_int(*val, min, max, step);
 801b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3e8:	6819      	ldr	r1, [r3, #0]
 801b3ea:	4638      	mov	r0, r7
 801b3ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b3ee:	9300      	str	r3, [sp, #0]
 801b3f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b3f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b3f4:	f7ff fdac 	bl	801af50 <nk_property_variant_int>
 801b3f8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801b3fc:	463d      	mov	r5, r7
 801b3fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b406:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b40a:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_INT);
 801b40e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b412:	2300      	movs	r3, #0
 801b414:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 801b418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b41a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b41c:	f7ff fdba 	bl	801af94 <nk_property>
    *val = variant.value.i;
 801b420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b424:	601a      	str	r2, [r3, #0]
 801b426:	e000      	b.n	801b42a <nk_property_int+0xb2>
    if (!ctx || !ctx->current || !name || !val) return;
 801b428:	bf00      	nop
}
 801b42a:	3768      	adds	r7, #104	; 0x68
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bdb0      	pop	{r4, r5, r7, pc}
 801b430:	08028d4c 	.word	0x08028d4c
 801b434:	0802a980 	.word	0x0802a980
 801b438:	08028d50 	.word	0x08028d50
 801b43c:	08028d98 	.word	0x08028d98
 801b440:	08028da0 	.word	0x08028da0

0801b444 <nk_scrollbar_behavior>:
nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,
    int has_scrolling, const struct nk_rect *scroll,
    const struct nk_rect *cursor, const struct nk_rect *empty0,
    const struct nk_rect *empty1, float scroll_offset,
    float target, float scroll_step, enum nk_orientation o)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b092      	sub	sp, #72	; 0x48
 801b448:	af00      	add	r7, sp, #0
 801b44a:	61f8      	str	r0, [r7, #28]
 801b44c:	61b9      	str	r1, [r7, #24]
 801b44e:	617a      	str	r2, [r7, #20]
 801b450:	613b      	str	r3, [r7, #16]
 801b452:	ed87 0a03 	vstr	s0, [r7, #12]
 801b456:	edc7 0a02 	vstr	s1, [r7, #8]
 801b45a:	ed87 1a01 	vstr	s2, [r7, #4]
    nk_flags ws = 0;
 801b45e:	2300      	movs	r3, #0
 801b460:	627b      	str	r3, [r7, #36]	; 0x24
    int left_mouse_down;
    unsigned int left_mouse_clicked;
    int left_mouse_click_in_cursor;
    float scroll_delta;

    nk_widget_state_reset(state);
 801b462:	69fb      	ldr	r3, [r7, #28]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	f003 0302 	and.w	r3, r3, #2
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d003      	beq.n	801b476 <nk_scrollbar_behavior+0x32>
 801b46e:	69fb      	ldr	r3, [r7, #28]
 801b470:	2206      	movs	r2, #6
 801b472:	601a      	str	r2, [r3, #0]
 801b474:	e002      	b.n	801b47c <nk_scrollbar_behavior+0x38>
 801b476:	69fb      	ldr	r3, [r7, #28]
 801b478:	2204      	movs	r2, #4
 801b47a:	601a      	str	r2, [r3, #0]
    if (!in) return scroll_offset;
 801b47c:	69bb      	ldr	r3, [r7, #24]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d101      	bne.n	801b486 <nk_scrollbar_behavior+0x42>
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	e35c      	b.n	801bb40 <nk_scrollbar_behavior+0x6fc>

    left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 801b486:	69bb      	ldr	r3, [r7, #24]
 801b488:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801b48c:	647b      	str	r3, [r7, #68]	; 0x44
    left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 801b48e:	69bb      	ldr	r3, [r7, #24]
 801b490:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b494:	643b      	str	r3, [r7, #64]	; 0x40
    left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 801b496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b498:	ed93 6a00 	vldr	s12, [r3]
 801b49c:	edd3 6a01 	vldr	s13, [r3, #4]
 801b4a0:	ed93 7a02 	vldr	s14, [r3, #8]
 801b4a4:	edd3 7a03 	vldr	s15, [r3, #12]
 801b4a8:	2201      	movs	r2, #1
 801b4aa:	eeb0 0a46 	vmov.f32	s0, s12
 801b4ae:	eef0 0a66 	vmov.f32	s1, s13
 801b4b2:	eeb0 1a47 	vmov.f32	s2, s14
 801b4b6:	eef0 1a67 	vmov.f32	s3, s15
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	69b8      	ldr	r0, [r7, #24]
 801b4be:	f7f9 ff45 	bl	801534c <nk_input_has_mouse_click_down_in_rect>
 801b4c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        NK_BUTTON_LEFT, *cursor, nk_true);
    if (nk_input_is_mouse_hovering_rect(in, *scroll))
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	ed93 6a00 	vldr	s12, [r3]
 801b4ca:	edd3 6a01 	vldr	s13, [r3, #4]
 801b4ce:	ed93 7a02 	vldr	s14, [r3, #8]
 801b4d2:	edd3 7a03 	vldr	s15, [r3, #12]
 801b4d6:	eeb0 0a46 	vmov.f32	s0, s12
 801b4da:	eef0 0a66 	vmov.f32	s1, s13
 801b4de:	eeb0 1a47 	vmov.f32	s2, s14
 801b4e2:	eef0 1a67 	vmov.f32	s3, s15
 801b4e6:	69b8      	ldr	r0, [r7, #24]
 801b4e8:	f7f9 ffbe 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d002      	beq.n	801b4f8 <nk_scrollbar_behavior+0xb4>
        *state = NK_WIDGET_STATE_HOVERED;
 801b4f2:	69fb      	ldr	r3, [r7, #28]
 801b4f4:	2212      	movs	r2, #18
 801b4f6:	601a      	str	r2, [r3, #0]

    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 801b4f8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d103      	bne.n	801b508 <nk_scrollbar_behavior+0xc4>
 801b500:	69bb      	ldr	r3, [r7, #24]
 801b502:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801b506:	e002      	b.n	801b50e <nk_scrollbar_behavior+0xca>
 801b508:	69bb      	ldr	r3, [r7, #24]
 801b50a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 801b50e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 801b510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b512:	2b00      	cmp	r3, #0
 801b514:	f000 8122 	beq.w	801b75c <nk_scrollbar_behavior+0x318>
 801b518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	f000 811e 	beq.w	801b75c <nk_scrollbar_behavior+0x318>
 801b520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b522:	2b00      	cmp	r3, #0
 801b524:	f040 811a 	bne.w	801b75c <nk_scrollbar_behavior+0x318>
        /* update cursor by mouse dragging */
        float pixel, delta;
        *state = NK_WIDGET_STATE_ACTIVE;
 801b528:	69fb      	ldr	r3, [r7, #28]
 801b52a:	2222      	movs	r2, #34	; 0x22
 801b52c:	601a      	str	r2, [r3, #0]
        if (o == NK_VERTICAL) {
 801b52e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b532:	2b00      	cmp	r3, #0
 801b534:	f040 8089 	bne.w	801b64a <nk_scrollbar_behavior+0x206>
            float cursor_y;
            pixel = in->mouse.delta.y;
 801b538:	69bb      	ldr	r3, [r7, #24]
 801b53a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 801b53e:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->h) * target;
 801b540:	693b      	ldr	r3, [r7, #16]
 801b542:	ed93 7a03 	vldr	s14, [r3, #12]
 801b546:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801b54a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b54e:	ed97 7a02 	vldr	s14, [r7, #8]
 801b552:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b556:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 801b55a:	ed97 7a03 	vldr	s14, [r7, #12]
 801b55e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b562:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b566:	693b      	ldr	r3, [r7, #16]
 801b568:	edd3 7a03 	vldr	s15, [r3, #12]
 801b56c:	edd7 6a02 	vldr	s13, [r7, #8]
 801b570:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b57c:	d50e      	bpl.n	801b59c <nk_scrollbar_behavior+0x158>
 801b57e:	ed97 7a03 	vldr	s14, [r7, #12]
 801b582:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b586:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b58a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b592:	bf4c      	ite	mi
 801b594:	2301      	movmi	r3, #1
 801b596:	2300      	movpl	r3, #0
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	e00e      	b.n	801b5ba <nk_scrollbar_behavior+0x176>
 801b59c:	693b      	ldr	r3, [r7, #16]
 801b59e:	edd3 7a03 	vldr	s15, [r3, #12]
 801b5a2:	ed97 7a02 	vldr	s14, [r7, #8]
 801b5a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b5aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5b2:	bf4c      	ite	mi
 801b5b4:	2301      	movmi	r3, #1
 801b5b6:	2300      	movpl	r3, #0
 801b5b8:	b2db      	uxtb	r3, r3
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d002      	beq.n	801b5c4 <nk_scrollbar_behavior+0x180>
 801b5be:	eddf 7acd 	vldr	s15, [pc, #820]	; 801b8f4 <nk_scrollbar_behavior+0x4b0>
 801b5c2:	e01f      	b.n	801b604 <nk_scrollbar_behavior+0x1c0>
 801b5c4:	ed97 7a03 	vldr	s14, [r7, #12]
 801b5c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b5cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b5d0:	693b      	ldr	r3, [r7, #16]
 801b5d2:	edd3 7a03 	vldr	s15, [r3, #12]
 801b5d6:	edd7 6a02 	vldr	s13, [r7, #8]
 801b5da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b5de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5e6:	d506      	bpl.n	801b5f6 <nk_scrollbar_behavior+0x1b2>
 801b5e8:	ed97 7a03 	vldr	s14, [r7, #12]
 801b5ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b5f4:	e006      	b.n	801b604 <nk_scrollbar_behavior+0x1c0>
 801b5f6:	693b      	ldr	r3, [r7, #16]
 801b5f8:	edd3 7a03 	vldr	s15, [r3, #12]
 801b5fc:	ed97 7a02 	vldr	s14, [r7, #8]
 801b600:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b604:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	ed93 7a01 	vldr	s14, [r3, #4]
 801b60e:	ed97 6a03 	vldr	s12, [r7, #12]
 801b612:	edd7 7a02 	vldr	s15, [r7, #8]
 801b616:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801b61a:	693b      	ldr	r3, [r7, #16]
 801b61c:	edd3 7a03 	vldr	s15, [r3, #12]
 801b620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b624:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b628:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;
 801b62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b62e:	edd3 7a03 	vldr	s15, [r3, #12]
 801b632:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b636:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b63a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801b63e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b642:	69bb      	ldr	r3, [r7, #24]
 801b644:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 801b648:	e238      	b.n	801babc <nk_scrollbar_behavior+0x678>
        } else {
            float cursor_x;
            pixel = in->mouse.delta.x;
 801b64a:	69bb      	ldr	r3, [r7, #24]
 801b64c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801b650:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->w) * target;
 801b652:	693b      	ldr	r3, [r7, #16]
 801b654:	ed93 7a02 	vldr	s14, [r3, #8]
 801b658:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801b65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b660:	ed97 7a02 	vldr	s14, [r7, #8]
 801b664:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b668:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 801b66c:	ed97 7a03 	vldr	s14, [r7, #12]
 801b670:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b674:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b678:	693b      	ldr	r3, [r7, #16]
 801b67a:	edd3 7a02 	vldr	s15, [r3, #8]
 801b67e:	edd7 6a02 	vldr	s13, [r7, #8]
 801b682:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b68e:	d50e      	bpl.n	801b6ae <nk_scrollbar_behavior+0x26a>
 801b690:	ed97 7a03 	vldr	s14, [r7, #12]
 801b694:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b698:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b69c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6a4:	bf4c      	ite	mi
 801b6a6:	2301      	movmi	r3, #1
 801b6a8:	2300      	movpl	r3, #0
 801b6aa:	b2db      	uxtb	r3, r3
 801b6ac:	e00e      	b.n	801b6cc <nk_scrollbar_behavior+0x288>
 801b6ae:	693b      	ldr	r3, [r7, #16]
 801b6b0:	edd3 7a02 	vldr	s15, [r3, #8]
 801b6b4:	ed97 7a02 	vldr	s14, [r7, #8]
 801b6b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b6bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c4:	bf4c      	ite	mi
 801b6c6:	2301      	movmi	r3, #1
 801b6c8:	2300      	movpl	r3, #0
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d002      	beq.n	801b6d6 <nk_scrollbar_behavior+0x292>
 801b6d0:	eddf 7a88 	vldr	s15, [pc, #544]	; 801b8f4 <nk_scrollbar_behavior+0x4b0>
 801b6d4:	e01f      	b.n	801b716 <nk_scrollbar_behavior+0x2d2>
 801b6d6:	ed97 7a03 	vldr	s14, [r7, #12]
 801b6da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b6de:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b6e2:	693b      	ldr	r3, [r7, #16]
 801b6e4:	edd3 7a02 	vldr	s15, [r3, #8]
 801b6e8:	edd7 6a02 	vldr	s13, [r7, #8]
 801b6ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b6f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f8:	d506      	bpl.n	801b708 <nk_scrollbar_behavior+0x2c4>
 801b6fa:	ed97 7a03 	vldr	s14, [r7, #12]
 801b6fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b702:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b706:	e006      	b.n	801b716 <nk_scrollbar_behavior+0x2d2>
 801b708:	693b      	ldr	r3, [r7, #16]
 801b70a:	edd3 7a02 	vldr	s15, [r3, #8]
 801b70e:	ed97 7a02 	vldr	s14, [r7, #8]
 801b712:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b716:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);
 801b71a:	693b      	ldr	r3, [r7, #16]
 801b71c:	ed93 7a00 	vldr	s14, [r3]
 801b720:	ed97 6a03 	vldr	s12, [r7, #12]
 801b724:	edd7 7a02 	vldr	s15, [r7, #8]
 801b728:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801b72c:	693b      	ldr	r3, [r7, #16]
 801b72e:	edd3 7a02 	vldr	s15, [r3, #8]
 801b732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b736:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b73a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;
 801b73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b740:	edd3 7a02 	vldr	s15, [r3, #8]
 801b744:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b74c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b750:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b754:	69bb      	ldr	r3, [r7, #24]
 801b756:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 801b75a:	e1af      	b.n	801babc <nk_scrollbar_behavior+0x678>
        }
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 801b75c:	211d      	movs	r1, #29
 801b75e:	69b8      	ldr	r0, [r7, #24]
 801b760:	f7f9 ff61 	bl	8015626 <nk_input_is_key_pressed>
 801b764:	4603      	mov	r3, r0
 801b766:	2b00      	cmp	r3, #0
 801b768:	d006      	beq.n	801b778 <nk_scrollbar_behavior+0x334>
 801b76a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d102      	bne.n	801b778 <nk_scrollbar_behavior+0x334>
 801b772:	697b      	ldr	r3, [r7, #20]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d11a      	bne.n	801b7ae <nk_scrollbar_behavior+0x36a>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 801b778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b77a:	ed93 6a00 	vldr	s12, [r3]
 801b77e:	edd3 6a01 	vldr	s13, [r3, #4]
 801b782:	ed93 7a02 	vldr	s14, [r3, #8]
 801b786:	edd3 7a03 	vldr	s15, [r3, #12]
 801b78a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b78e:	2200      	movs	r2, #0
 801b790:	69b9      	ldr	r1, [r7, #24]
 801b792:	eeb0 0a46 	vmov.f32	s0, s12
 801b796:	eef0 0a66 	vmov.f32	s1, s13
 801b79a:	eeb0 1a47 	vmov.f32	s2, s14
 801b79e:	eef0 1a67 	vmov.f32	s3, s15
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	f7f3 fc56 	bl	800f054 <nk_button_behavior>
 801b7a8:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d035      	beq.n	801b81a <nk_scrollbar_behavior+0x3d6>
        /* scroll page up by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 801b7ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d118      	bne.n	801b7e8 <nk_scrollbar_behavior+0x3a4>
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 801b7b6:	693b      	ldr	r3, [r7, #16]
 801b7b8:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7bc:	ed97 7a03 	vldr	s14, [r7, #12]
 801b7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b7c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7cc:	dd07      	ble.n	801b7de <nk_scrollbar_behavior+0x39a>
 801b7ce:	693b      	ldr	r3, [r7, #16]
 801b7d0:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7d4:	ed97 7a03 	vldr	s14, [r7, #12]
 801b7d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b7dc:	e001      	b.n	801b7e2 <nk_scrollbar_behavior+0x39e>
 801b7de:	eddf 7a45 	vldr	s15, [pc, #276]	; 801b8f4 <nk_scrollbar_behavior+0x4b0>
 801b7e2:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b7e6:	e169      	b.n	801babc <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);
 801b7e8:	693b      	ldr	r3, [r7, #16]
 801b7ea:	edd3 7a02 	vldr	s15, [r3, #8]
 801b7ee:	ed97 7a03 	vldr	s14, [r7, #12]
 801b7f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b7f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7fe:	dd07      	ble.n	801b810 <nk_scrollbar_behavior+0x3cc>
 801b800:	693b      	ldr	r3, [r7, #16]
 801b802:	edd3 7a02 	vldr	s15, [r3, #8]
 801b806:	ed97 7a03 	vldr	s14, [r7, #12]
 801b80a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b80e:	e001      	b.n	801b814 <nk_scrollbar_behavior+0x3d0>
 801b810:	eddf 7a38 	vldr	s15, [pc, #224]	; 801b8f4 <nk_scrollbar_behavior+0x4b0>
 801b814:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b818:	e150      	b.n	801babc <nk_scrollbar_behavior+0x678>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 801b81a:	211c      	movs	r1, #28
 801b81c:	69b8      	ldr	r0, [r7, #24]
 801b81e:	f7f9 ff02 	bl	8015626 <nk_input_is_key_pressed>
 801b822:	4603      	mov	r3, r0
 801b824:	2b00      	cmp	r3, #0
 801b826:	d006      	beq.n	801b836 <nk_scrollbar_behavior+0x3f2>
 801b828:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d102      	bne.n	801b836 <nk_scrollbar_behavior+0x3f2>
 801b830:	697b      	ldr	r3, [r7, #20]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d11a      	bne.n	801b86c <nk_scrollbar_behavior+0x428>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 801b836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b838:	ed93 6a00 	vldr	s12, [r3]
 801b83c:	edd3 6a01 	vldr	s13, [r3, #4]
 801b840:	ed93 7a02 	vldr	s14, [r3, #8]
 801b844:	edd3 7a03 	vldr	s15, [r3, #12]
 801b848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b84c:	2200      	movs	r2, #0
 801b84e:	69b9      	ldr	r1, [r7, #24]
 801b850:	eeb0 0a46 	vmov.f32	s0, s12
 801b854:	eef0 0a66 	vmov.f32	s1, s13
 801b858:	eeb0 1a47 	vmov.f32	s2, s14
 801b85c:	eef0 1a67 	vmov.f32	s3, s15
 801b860:	4618      	mov	r0, r3
 801b862:	f7f3 fbf7 	bl	800f054 <nk_button_behavior>
 801b866:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d04f      	beq.n	801b90c <nk_scrollbar_behavior+0x4c8>
        /* scroll page down by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 801b86c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b870:	2b00      	cmp	r3, #0
 801b872:	d124      	bne.n	801b8be <nk_scrollbar_behavior+0x47a>
            scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);
 801b874:	693b      	ldr	r3, [r7, #16]
 801b876:	ed93 7a03 	vldr	s14, [r3, #12]
 801b87a:	edd7 7a03 	vldr	s15, [r7, #12]
 801b87e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b882:	693b      	ldr	r3, [r7, #16]
 801b884:	edd3 7a03 	vldr	s15, [r3, #12]
 801b888:	edd7 6a02 	vldr	s13, [r7, #8]
 801b88c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b898:	d507      	bpl.n	801b8aa <nk_scrollbar_behavior+0x466>
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	ed93 7a03 	vldr	s14, [r3, #12]
 801b8a0:	edd7 7a03 	vldr	s15, [r7, #12]
 801b8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b8a8:	e006      	b.n	801b8b8 <nk_scrollbar_behavior+0x474>
 801b8aa:	693b      	ldr	r3, [r7, #16]
 801b8ac:	edd3 7a03 	vldr	s15, [r3, #12]
 801b8b0:	ed97 7a02 	vldr	s14, [r7, #8]
 801b8b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b8b8:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b8bc:	e0fe      	b.n	801babc <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);
 801b8be:	693b      	ldr	r3, [r7, #16]
 801b8c0:	ed93 7a02 	vldr	s14, [r3, #8]
 801b8c4:	edd7 7a03 	vldr	s15, [r7, #12]
 801b8c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b8cc:	693b      	ldr	r3, [r7, #16]
 801b8ce:	edd3 7a02 	vldr	s15, [r3, #8]
 801b8d2:	edd7 6a02 	vldr	s13, [r7, #8]
 801b8d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b8da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8e2:	d509      	bpl.n	801b8f8 <nk_scrollbar_behavior+0x4b4>
 801b8e4:	693b      	ldr	r3, [r7, #16]
 801b8e6:	ed93 7a02 	vldr	s14, [r3, #8]
 801b8ea:	edd7 7a03 	vldr	s15, [r7, #12]
 801b8ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b8f2:	e008      	b.n	801b906 <nk_scrollbar_behavior+0x4c2>
 801b8f4:	00000000 	.word	0x00000000
 801b8f8:	693b      	ldr	r3, [r7, #16]
 801b8fa:	edd3 7a02 	vldr	s15, [r3, #8]
 801b8fe:	ed97 7a02 	vldr	s14, [r7, #8]
 801b902:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b906:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b90a:	e0d7      	b.n	801babc <nk_scrollbar_behavior+0x678>
    } else if (has_scrolling) {
 801b90c:	697b      	ldr	r3, [r7, #20]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	f000 80d4 	beq.w	801babc <nk_scrollbar_behavior+0x678>
        if ((scroll_delta < 0 || (scroll_delta > 0))) {
 801b914:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b920:	d407      	bmi.n	801b932 <nk_scrollbar_behavior+0x4ee>
 801b922:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b92e:	f340 80a2 	ble.w	801ba76 <nk_scrollbar_behavior+0x632>
            /* update cursor by mouse scrolling */
            scroll_offset = scroll_offset + scroll_step * (-scroll_delta);
 801b932:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b936:	eeb1 7a67 	vneg.f32	s14, s15
 801b93a:	edd7 7a01 	vldr	s15, [r7, #4]
 801b93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b942:	ed97 7a03 	vldr	s14, [r7, #12]
 801b946:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b94a:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 801b94e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b952:	2b00      	cmp	r3, #0
 801b954:	d147      	bne.n	801b9e6 <nk_scrollbar_behavior+0x5a2>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 801b956:	693b      	ldr	r3, [r7, #16]
 801b958:	edd3 7a03 	vldr	s15, [r3, #12]
 801b95c:	ed97 7a02 	vldr	s14, [r7, #8]
 801b960:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b964:	ed97 7a03 	vldr	s14, [r7, #12]
 801b968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b970:	d50a      	bpl.n	801b988 <nk_scrollbar_behavior+0x544>
 801b972:	edd7 7a03 	vldr	s15, [r7, #12]
 801b976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b97e:	bf4c      	ite	mi
 801b980:	2301      	movmi	r3, #1
 801b982:	2300      	movpl	r3, #0
 801b984:	b2db      	uxtb	r3, r3
 801b986:	e00e      	b.n	801b9a6 <nk_scrollbar_behavior+0x562>
 801b988:	693b      	ldr	r3, [r7, #16]
 801b98a:	edd3 7a03 	vldr	s15, [r3, #12]
 801b98e:	ed97 7a02 	vldr	s14, [r7, #8]
 801b992:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b99e:	bf4c      	ite	mi
 801b9a0:	2301      	movmi	r3, #1
 801b9a2:	2300      	movpl	r3, #0
 801b9a4:	b2db      	uxtb	r3, r3
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d002      	beq.n	801b9b0 <nk_scrollbar_behavior+0x56c>
 801b9aa:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 801b8f4 <nk_scrollbar_behavior+0x4b0>
 801b9ae:	e017      	b.n	801b9e0 <nk_scrollbar_behavior+0x59c>
 801b9b0:	693b      	ldr	r3, [r7, #16]
 801b9b2:	edd3 7a03 	vldr	s15, [r3, #12]
 801b9b6:	ed97 7a02 	vldr	s14, [r7, #8]
 801b9ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b9be:	ed97 7a03 	vldr	s14, [r7, #12]
 801b9c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ca:	d502      	bpl.n	801b9d2 <nk_scrollbar_behavior+0x58e>
 801b9cc:	edd7 7a03 	vldr	s15, [r7, #12]
 801b9d0:	e006      	b.n	801b9e0 <nk_scrollbar_behavior+0x59c>
 801b9d2:	693b      	ldr	r3, [r7, #16]
 801b9d4:	edd3 7a03 	vldr	s15, [r3, #12]
 801b9d8:	ed97 7a02 	vldr	s14, [r7, #8]
 801b9dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b9e0:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 801b9e4:	e06a      	b.n	801babc <nk_scrollbar_behavior+0x678>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 801b9e6:	693b      	ldr	r3, [r7, #16]
 801b9e8:	edd3 7a02 	vldr	s15, [r3, #8]
 801b9ec:	ed97 7a02 	vldr	s14, [r7, #8]
 801b9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b9f4:	ed97 7a03 	vldr	s14, [r7, #12]
 801b9f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba00:	d50a      	bpl.n	801ba18 <nk_scrollbar_behavior+0x5d4>
 801ba02:	edd7 7a03 	vldr	s15, [r7, #12]
 801ba06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba0e:	bf4c      	ite	mi
 801ba10:	2301      	movmi	r3, #1
 801ba12:	2300      	movpl	r3, #0
 801ba14:	b2db      	uxtb	r3, r3
 801ba16:	e00e      	b.n	801ba36 <nk_scrollbar_behavior+0x5f2>
 801ba18:	693b      	ldr	r3, [r7, #16]
 801ba1a:	edd3 7a02 	vldr	s15, [r3, #8]
 801ba1e:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba22:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba2e:	bf4c      	ite	mi
 801ba30:	2301      	movmi	r3, #1
 801ba32:	2300      	movpl	r3, #0
 801ba34:	b2db      	uxtb	r3, r3
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d002      	beq.n	801ba40 <nk_scrollbar_behavior+0x5fc>
 801ba3a:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 801b8f4 <nk_scrollbar_behavior+0x4b0>
 801ba3e:	e017      	b.n	801ba70 <nk_scrollbar_behavior+0x62c>
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	edd3 7a02 	vldr	s15, [r3, #8]
 801ba46:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba4e:	ed97 7a03 	vldr	s14, [r7, #12]
 801ba52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ba56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba5a:	d502      	bpl.n	801ba62 <nk_scrollbar_behavior+0x61e>
 801ba5c:	edd7 7a03 	vldr	s15, [r7, #12]
 801ba60:	e006      	b.n	801ba70 <nk_scrollbar_behavior+0x62c>
 801ba62:	693b      	ldr	r3, [r7, #16]
 801ba64:	edd3 7a02 	vldr	s15, [r3, #8]
 801ba68:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba70:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 801ba74:	e022      	b.n	801babc <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {
 801ba76:	211a      	movs	r1, #26
 801ba78:	69b8      	ldr	r0, [r7, #24]
 801ba7a:	f7f9 fdd4 	bl	8015626 <nk_input_is_key_pressed>
 801ba7e:	4603      	mov	r3, r0
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d007      	beq.n	801ba94 <nk_scrollbar_behavior+0x650>
            /* update cursor to the beginning  */
            if (o == NK_VERTICAL) scroll_offset = 0;
 801ba84:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d117      	bne.n	801babc <nk_scrollbar_behavior+0x678>
 801ba8c:	f04f 0300 	mov.w	r3, #0
 801ba90:	60fb      	str	r3, [r7, #12]
 801ba92:	e013      	b.n	801babc <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
 801ba94:	211b      	movs	r1, #27
 801ba96:	69b8      	ldr	r0, [r7, #24]
 801ba98:	f7f9 fdc5 	bl	8015626 <nk_input_is_key_pressed>
 801ba9c:	4603      	mov	r3, r0
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d00c      	beq.n	801babc <nk_scrollbar_behavior+0x678>
            /* update cursor to the end */
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
 801baa2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d108      	bne.n	801babc <nk_scrollbar_behavior+0x678>
 801baaa:	693b      	ldr	r3, [r7, #16]
 801baac:	edd3 7a03 	vldr	s15, [r3, #12]
 801bab0:	ed97 7a02 	vldr	s14, [r7, #8]
 801bab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bab8:	edc7 7a03 	vstr	s15, [r7, #12]
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 801babc:	69fb      	ldr	r3, [r7, #28]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	f003 0310 	and.w	r3, r3, #16
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d01d      	beq.n	801bb04 <nk_scrollbar_behavior+0x6c0>
 801bac8:	693b      	ldr	r3, [r7, #16]
 801baca:	ed93 6a00 	vldr	s12, [r3]
 801bace:	edd3 6a01 	vldr	s13, [r3, #4]
 801bad2:	ed93 7a02 	vldr	s14, [r3, #8]
 801bad6:	edd3 7a03 	vldr	s15, [r3, #12]
 801bada:	eeb0 0a46 	vmov.f32	s0, s12
 801bade:	eef0 0a66 	vmov.f32	s1, s13
 801bae2:	eeb0 1a47 	vmov.f32	s2, s14
 801bae6:	eef0 1a67 	vmov.f32	s3, s15
 801baea:	69b8      	ldr	r0, [r7, #24]
 801baec:	f7f9 fd0e 	bl	801550c <nk_input_is_mouse_prev_hovering_rect>
 801baf0:	4603      	mov	r3, r0
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d106      	bne.n	801bb04 <nk_scrollbar_behavior+0x6c0>
        *state |= NK_WIDGET_STATE_ENTERED;
 801baf6:	69fb      	ldr	r3, [r7, #28]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	f043 0208 	orr.w	r2, r3, #8
 801bafe:	69fb      	ldr	r3, [r7, #28]
 801bb00:	601a      	str	r2, [r3, #0]
 801bb02:	e01c      	b.n	801bb3e <nk_scrollbar_behavior+0x6fa>
    else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 801bb04:	693b      	ldr	r3, [r7, #16]
 801bb06:	ed93 6a00 	vldr	s12, [r3]
 801bb0a:	edd3 6a01 	vldr	s13, [r3, #4]
 801bb0e:	ed93 7a02 	vldr	s14, [r3, #8]
 801bb12:	edd3 7a03 	vldr	s15, [r3, #12]
 801bb16:	eeb0 0a46 	vmov.f32	s0, s12
 801bb1a:	eef0 0a66 	vmov.f32	s1, s13
 801bb1e:	eeb0 1a47 	vmov.f32	s2, s14
 801bb22:	eef0 1a67 	vmov.f32	s3, s15
 801bb26:	69b8      	ldr	r0, [r7, #24]
 801bb28:	f7f9 fcf0 	bl	801550c <nk_input_is_mouse_prev_hovering_rect>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d005      	beq.n	801bb3e <nk_scrollbar_behavior+0x6fa>
        *state |= NK_WIDGET_STATE_LEFT;
 801bb32:	69fb      	ldr	r3, [r7, #28]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801bb3a:	69fb      	ldr	r3, [r7, #28]
 801bb3c:	601a      	str	r2, [r3, #0]
    return scroll_offset;
 801bb3e:	68fb      	ldr	r3, [r7, #12]
}
 801bb40:	ee07 3a90 	vmov	s15, r3
 801bb44:	eeb0 0a67 	vmov.f32	s0, s15
 801bb48:	3748      	adds	r7, #72	; 0x48
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bd80      	pop	{r7, pc}
 801bb4e:	bf00      	nop

0801bb50 <nk_draw_scrollbar>:
NK_LIB void
nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_scrollbar *style, const struct nk_rect *bounds,
    const struct nk_rect *scroll)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b086      	sub	sp, #24
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	607a      	str	r2, [r7, #4]
 801bb5c:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;

    /* select correct colors/images to draw */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	f003 0320 	and.w	r3, r3, #32
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d006      	beq.n	801bb76 <nk_draw_scrollbar+0x26>
        background = &style->active;
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	3338      	adds	r3, #56	; 0x38
 801bb6c:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_active;
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	3390      	adds	r3, #144	; 0x90
 801bb72:	613b      	str	r3, [r7, #16]
 801bb74:	e010      	b.n	801bb98 <nk_draw_scrollbar+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 801bb76:	68bb      	ldr	r3, [r7, #8]
 801bb78:	f003 0310 	and.w	r3, r3, #16
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d006      	beq.n	801bb8e <nk_draw_scrollbar+0x3e>
        background = &style->hover;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	331c      	adds	r3, #28
 801bb84:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_hover;
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	3374      	adds	r3, #116	; 0x74
 801bb8a:	613b      	str	r3, [r7, #16]
 801bb8c:	e004      	b.n	801bb98 <nk_draw_scrollbar+0x48>
    } else {
        background = &style->normal;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_normal;
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	3358      	adds	r3, #88	; 0x58
 801bb96:	613b      	str	r3, [r7, #16]
    }

    /* draw background */
    switch (background->type) {
 801bb98:	697b      	ldr	r3, [r7, #20]
 801bb9a:	781b      	ldrb	r3, [r3, #0]
 801bb9c:	2b02      	cmp	r3, #2
 801bb9e:	d01e      	beq.n	801bbde <nk_draw_scrollbar+0x8e>
 801bba0:	2b02      	cmp	r3, #2
 801bba2:	dc71      	bgt.n	801bc88 <nk_draw_scrollbar+0x138>
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d033      	beq.n	801bc10 <nk_draw_scrollbar+0xc0>
 801bba8:	2b01      	cmp	r3, #1
 801bbaa:	d16d      	bne.n	801bc88 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	1d19      	adds	r1, r3, #4
 801bbb0:	4a74      	ldr	r2, [pc, #464]	; (801bd84 <nk_draw_scrollbar+0x234>)
 801bbb2:	683b      	ldr	r3, [r7, #0]
 801bbb4:	ed93 6a00 	vldr	s12, [r3]
 801bbb8:	edd3 6a01 	vldr	s13, [r3, #4]
 801bbbc:	ed93 7a02 	vldr	s14, [r3, #8]
 801bbc0:	edd3 7a03 	vldr	s15, [r3, #12]
 801bbc4:	6812      	ldr	r2, [r2, #0]
 801bbc6:	eeb0 0a46 	vmov.f32	s0, s12
 801bbca:	eef0 0a66 	vmov.f32	s1, s13
 801bbce:	eeb0 1a47 	vmov.f32	s2, s14
 801bbd2:	eef0 1a67 	vmov.f32	s3, s15
 801bbd6:	68f8      	ldr	r0, [r7, #12]
 801bbd8:	f7f6 fabc 	bl	8012154 <nk_draw_image>
            break;
 801bbdc:	e054      	b.n	801bc88 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	1d19      	adds	r1, r3, #4
 801bbe2:	4a68      	ldr	r2, [pc, #416]	; (801bd84 <nk_draw_scrollbar+0x234>)
 801bbe4:	683b      	ldr	r3, [r7, #0]
 801bbe6:	ed93 6a00 	vldr	s12, [r3]
 801bbea:	edd3 6a01 	vldr	s13, [r3, #4]
 801bbee:	ed93 7a02 	vldr	s14, [r3, #8]
 801bbf2:	edd3 7a03 	vldr	s15, [r3, #12]
 801bbf6:	6812      	ldr	r2, [r2, #0]
 801bbf8:	eeb0 0a46 	vmov.f32	s0, s12
 801bbfc:	eef0 0a66 	vmov.f32	s1, s13
 801bc00:	eeb0 1a47 	vmov.f32	s2, s14
 801bc04:	eef0 1a67 	vmov.f32	s3, s15
 801bc08:	68f8      	ldr	r0, [r7, #12]
 801bc0a:	f7f6 fb95 	bl	8012338 <nk_draw_nine_slice>
            break;
 801bc0e:	e03b      	b.n	801bc88 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 801bc16:	697a      	ldr	r2, [r7, #20]
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	ed93 6a00 	vldr	s12, [r3]
 801bc1e:	edd3 6a01 	vldr	s13, [r3, #4]
 801bc22:	ed93 7a02 	vldr	s14, [r3, #8]
 801bc26:	edd3 7a03 	vldr	s15, [r3, #12]
 801bc2a:	6851      	ldr	r1, [r2, #4]
 801bc2c:	eeb0 2a65 	vmov.f32	s4, s11
 801bc30:	eeb0 0a46 	vmov.f32	s0, s12
 801bc34:	eef0 0a66 	vmov.f32	s1, s13
 801bc38:	eeb0 1a47 	vmov.f32	s2, s14
 801bc3c:	eef0 1a67 	vmov.f32	s3, s15
 801bc40:	68f8      	ldr	r0, [r7, #12]
 801bc42:	f7f5 ff2d 	bl	8011aa0 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
 801bc52:	687a      	ldr	r2, [r7, #4]
 801bc54:	683b      	ldr	r3, [r7, #0]
 801bc56:	ed93 6a00 	vldr	s12, [r3]
 801bc5a:	edd3 6a01 	vldr	s13, [r3, #4]
 801bc5e:	ed93 7a02 	vldr	s14, [r3, #8]
 801bc62:	edd3 7a03 	vldr	s15, [r3, #12]
 801bc66:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801bc68:	eef0 2a45 	vmov.f32	s5, s10
 801bc6c:	eeb0 2a65 	vmov.f32	s4, s11
 801bc70:	eeb0 0a46 	vmov.f32	s0, s12
 801bc74:	eef0 0a66 	vmov.f32	s1, s13
 801bc78:	eeb0 1a47 	vmov.f32	s2, s14
 801bc7c:	eef0 1a67 	vmov.f32	s3, s15
 801bc80:	68f8      	ldr	r0, [r7, #12]
 801bc82:	f7f5 fe05 	bl	8011890 <nk_stroke_rect>
            break;
 801bc86:	bf00      	nop
    }

    /* draw cursor */
    switch (cursor->type) {
 801bc88:	693b      	ldr	r3, [r7, #16]
 801bc8a:	781b      	ldrb	r3, [r3, #0]
 801bc8c:	2b02      	cmp	r3, #2
 801bc8e:	d01e      	beq.n	801bcce <nk_draw_scrollbar+0x17e>
 801bc90:	2b02      	cmp	r3, #2
 801bc92:	dc72      	bgt.n	801bd7a <nk_draw_scrollbar+0x22a>
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d033      	beq.n	801bd00 <nk_draw_scrollbar+0x1b0>
 801bc98:	2b01      	cmp	r3, #1
 801bc9a:	d16e      	bne.n	801bd7a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *scroll, &cursor->data.image, nk_white);
 801bc9c:	693b      	ldr	r3, [r7, #16]
 801bc9e:	1d19      	adds	r1, r3, #4
 801bca0:	4a38      	ldr	r2, [pc, #224]	; (801bd84 <nk_draw_scrollbar+0x234>)
 801bca2:	6a3b      	ldr	r3, [r7, #32]
 801bca4:	ed93 6a00 	vldr	s12, [r3]
 801bca8:	edd3 6a01 	vldr	s13, [r3, #4]
 801bcac:	ed93 7a02 	vldr	s14, [r3, #8]
 801bcb0:	edd3 7a03 	vldr	s15, [r3, #12]
 801bcb4:	6812      	ldr	r2, [r2, #0]
 801bcb6:	eeb0 0a46 	vmov.f32	s0, s12
 801bcba:	eef0 0a66 	vmov.f32	s1, s13
 801bcbe:	eeb0 1a47 	vmov.f32	s2, s14
 801bcc2:	eef0 1a67 	vmov.f32	s3, s15
 801bcc6:	68f8      	ldr	r0, [r7, #12]
 801bcc8:	f7f6 fa44 	bl	8012154 <nk_draw_image>
            break;
 801bccc:	e055      	b.n	801bd7a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *scroll, &cursor->data.slice, nk_white);
 801bcce:	693b      	ldr	r3, [r7, #16]
 801bcd0:	1d19      	adds	r1, r3, #4
 801bcd2:	4a2c      	ldr	r2, [pc, #176]	; (801bd84 <nk_draw_scrollbar+0x234>)
 801bcd4:	6a3b      	ldr	r3, [r7, #32]
 801bcd6:	ed93 6a00 	vldr	s12, [r3]
 801bcda:	edd3 6a01 	vldr	s13, [r3, #4]
 801bcde:	ed93 7a02 	vldr	s14, [r3, #8]
 801bce2:	edd3 7a03 	vldr	s15, [r3, #12]
 801bce6:	6812      	ldr	r2, [r2, #0]
 801bce8:	eeb0 0a46 	vmov.f32	s0, s12
 801bcec:	eef0 0a66 	vmov.f32	s1, s13
 801bcf0:	eeb0 1a47 	vmov.f32	s2, s14
 801bcf4:	eef0 1a67 	vmov.f32	s3, s15
 801bcf8:	68f8      	ldr	r0, [r7, #12]
 801bcfa:	f7f6 fb1d 	bl	8012338 <nk_draw_nine_slice>
            break;
 801bcfe:	e03c      	b.n	801bd7a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 801bd06:	693a      	ldr	r2, [r7, #16]
 801bd08:	6a3b      	ldr	r3, [r7, #32]
 801bd0a:	ed93 6a00 	vldr	s12, [r3]
 801bd0e:	edd3 6a01 	vldr	s13, [r3, #4]
 801bd12:	ed93 7a02 	vldr	s14, [r3, #8]
 801bd16:	edd3 7a03 	vldr	s15, [r3, #12]
 801bd1a:	6851      	ldr	r1, [r2, #4]
 801bd1c:	eeb0 2a65 	vmov.f32	s4, s11
 801bd20:	eeb0 0a46 	vmov.f32	s0, s12
 801bd24:	eef0 0a66 	vmov.f32	s1, s13
 801bd28:	eeb0 1a47 	vmov.f32	s2, s14
 801bd2c:	eef0 1a67 	vmov.f32	s3, s15
 801bd30:	68f8      	ldr	r0, [r7, #12]
 801bd32:	f7f5 feb5 	bl	8011aa0 <nk_fill_rect>
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	ed93 5a2e 	vldr	s10, [r3, #184]	; 0xb8
 801bd42:	687a      	ldr	r2, [r7, #4]
 801bd44:	6a3b      	ldr	r3, [r7, #32]
 801bd46:	ed93 6a00 	vldr	s12, [r3]
 801bd4a:	edd3 6a01 	vldr	s13, [r3, #4]
 801bd4e:	ed93 7a02 	vldr	s14, [r3, #8]
 801bd52:	edd3 7a03 	vldr	s15, [r3, #12]
 801bd56:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 801bd5a:	eef0 2a45 	vmov.f32	s5, s10
 801bd5e:	eeb0 2a65 	vmov.f32	s4, s11
 801bd62:	eeb0 0a46 	vmov.f32	s0, s12
 801bd66:	eef0 0a66 	vmov.f32	s1, s13
 801bd6a:	eeb0 1a47 	vmov.f32	s2, s14
 801bd6e:	eef0 1a67 	vmov.f32	s3, s15
 801bd72:	68f8      	ldr	r0, [r7, #12]
 801bd74:	f7f5 fd8c 	bl	8011890 <nk_stroke_rect>
            break;
 801bd78:	bf00      	nop
    }
}
 801bd7a:	bf00      	nop
 801bd7c:	3718      	adds	r7, #24
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd80      	pop	{r7, pc}
 801bd82:	bf00      	nop
 801bd84:	0802a990 	.word	0x0802a990

0801bd88 <nk_do_scrollbarv>:
nk_do_scrollbarv(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b0a6      	sub	sp, #152	; 0x98
 801bd8c:	af04      	add	r7, sp, #16
 801bd8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 801bd90:	62b9      	str	r1, [r7, #40]	; 0x28
 801bd92:	eeb0 6a40 	vmov.f32	s12, s0
 801bd96:	eef0 6a60 	vmov.f32	s13, s1
 801bd9a:	eeb0 7a41 	vmov.f32	s14, s2
 801bd9e:	eef0 7a61 	vmov.f32	s15, s3
 801bda2:	617a      	str	r2, [r7, #20]
 801bda4:	ed87 2a04 	vstr	s4, [r7, #16]
 801bda8:	edc7 2a03 	vstr	s5, [r7, #12]
 801bdac:	ed87 3a02 	vstr	s6, [r7, #8]
 801bdb0:	edc7 3a01 	vstr	s7, [r7, #4]
 801bdb4:	603b      	str	r3, [r7, #0]
 801bdb6:	ed87 6a06 	vstr	s12, [r7, #24]
 801bdba:	edc7 6a07 	vstr	s13, [r7, #28]
 801bdbe:	ed87 7a08 	vstr	s14, [r7, #32]
 801bdc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 801bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d105      	bne.n	801bdd8 <nk_do_scrollbarv+0x50>
 801bdcc:	4bb6      	ldr	r3, [pc, #728]	; (801c0a8 <nk_do_scrollbarv+0x320>)
 801bdce:	4ab7      	ldr	r2, [pc, #732]	; (801c0ac <nk_do_scrollbarv+0x324>)
 801bdd0:	2195      	movs	r1, #149	; 0x95
 801bdd2:	48b7      	ldr	r0, [pc, #732]	; (801c0b0 <nk_do_scrollbarv+0x328>)
 801bdd4:	f008 fe80 	bl	8024ad8 <__assert_func>
    NK_ASSERT(style);
 801bdd8:	683b      	ldr	r3, [r7, #0]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d105      	bne.n	801bdea <nk_do_scrollbarv+0x62>
 801bdde:	4bb5      	ldr	r3, [pc, #724]	; (801c0b4 <nk_do_scrollbarv+0x32c>)
 801bde0:	4ab2      	ldr	r2, [pc, #712]	; (801c0ac <nk_do_scrollbarv+0x324>)
 801bde2:	2196      	movs	r1, #150	; 0x96
 801bde4:	48b2      	ldr	r0, [pc, #712]	; (801c0b0 <nk_do_scrollbarv+0x328>)
 801bde6:	f008 fe77 	bl	8024ad8 <__assert_func>
    NK_ASSERT(state);
 801bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d105      	bne.n	801bdfc <nk_do_scrollbarv+0x74>
 801bdf0:	4bb1      	ldr	r3, [pc, #708]	; (801c0b8 <nk_do_scrollbarv+0x330>)
 801bdf2:	4aae      	ldr	r2, [pc, #696]	; (801c0ac <nk_do_scrollbarv+0x324>)
 801bdf4:	2197      	movs	r1, #151	; 0x97
 801bdf6:	48ae      	ldr	r0, [pc, #696]	; (801c0b0 <nk_do_scrollbarv+0x328>)
 801bdf8:	f008 fe6e 	bl	8024ad8 <__assert_func>
    if (!out || !style) return 0;
 801bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d002      	beq.n	801be08 <nk_do_scrollbarv+0x80>
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d102      	bne.n	801be0e <nk_do_scrollbarv+0x86>
 801be08:	f04f 0300 	mov.w	r3, #0
 801be0c:	e253      	b.n	801c2b6 <nk_do_scrollbarv+0x52e>

    scroll.w = NK_MAX(scroll.w, 1);
 801be0e:	edd7 7a08 	vldr	s15, [r7, #32]
 801be12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be16:	eef4 7ac7 	vcmpe.f32	s15, s14
 801be1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be1e:	d502      	bpl.n	801be26 <nk_do_scrollbarv+0x9e>
 801be20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801be24:	e000      	b.n	801be28 <nk_do_scrollbarv+0xa0>
 801be26:	6a3b      	ldr	r3, [r7, #32]
 801be28:	623b      	str	r3, [r7, #32]
    scroll.h = NK_MAX(scroll.h, 0);
 801be2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801be2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be36:	d502      	bpl.n	801be3e <nk_do_scrollbarv+0xb6>
 801be38:	f04f 0300 	mov.w	r3, #0
 801be3c:	e000      	b.n	801be40 <nk_do_scrollbarv+0xb8>
 801be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be40:	627b      	str	r3, [r7, #36]	; 0x24
    if (target <= scroll.h) return 0;
 801be42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801be46:	ed97 7a03 	vldr	s14, [r7, #12]
 801be4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be52:	d802      	bhi.n	801be5a <nk_do_scrollbarv+0xd2>
 801be54:	f04f 0300 	mov.w	r3, #0
 801be58:	e22d      	b.n	801c2b6 <nk_do_scrollbarv+0x52e>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 801be5a:	683b      	ldr	r3, [r7, #0]
 801be5c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801be60:	2b00      	cmp	r3, #0
 801be62:	f000 80a4 	beq.w	801bfae <nk_do_scrollbarv+0x226>
        nk_flags ws;
        float scroll_h;
        struct nk_rect button;

        button.x = scroll.x;
 801be66:	69bb      	ldr	r3, [r7, #24]
 801be68:	633b      	str	r3, [r7, #48]	; 0x30
        button.w = scroll.w;
 801be6a:	6a3b      	ldr	r3, [r7, #32]
 801be6c:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.w;
 801be6e:	6a3b      	ldr	r3, [r7, #32]
 801be70:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_h = NK_MAX(scroll.h - 2 * button.h,0);
 801be72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801be76:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801be7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801be7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801be82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be8a:	d502      	bpl.n	801be92 <nk_do_scrollbarv+0x10a>
 801be8c:	eddf 7a8b 	vldr	s15, [pc, #556]	; 801c0bc <nk_do_scrollbarv+0x334>
 801be90:	e007      	b.n	801bea2 <nk_do_scrollbarv+0x11a>
 801be92:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801be96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801be9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801be9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bea2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 801bea6:	ed97 7a02 	vldr	s14, [r7, #8]
 801beaa:	edd7 7a01 	vldr	s15, [r7, #4]
 801beae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801beb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beb6:	d501      	bpl.n	801bebc <nk_do_scrollbarv+0x134>
 801beb8:	68bb      	ldr	r3, [r7, #8]
 801beba:	e000      	b.n	801bebe <nk_do_scrollbarv+0x136>
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.y = scroll.y;
 801bec2:	69fb      	ldr	r3, [r7, #28]
 801bec4:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 801bec6:	683b      	ldr	r3, [r7, #0]
 801bec8:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801becc:	683b      	ldr	r3, [r7, #0]
 801bece:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801bed2:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801bed6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801beda:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801bede:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801bee2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801bee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801beea:	9202      	str	r2, [sp, #8]
 801beec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801bef0:	9201      	str	r2, [sp, #4]
 801bef2:	9300      	str	r3, [sp, #0]
 801bef4:	2301      	movs	r3, #1
 801bef6:	460a      	mov	r2, r1
 801bef8:	eeb0 0a46 	vmov.f32	s0, s12
 801befc:	eef0 0a66 	vmov.f32	s1, s13
 801bf00:	eeb0 1a47 	vmov.f32	s2, s14
 801bf04:	eef0 1a67 	vmov.f32	s3, s15
 801bf08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bf0a:	f7f3 fc35 	bl	800f778 <nk_do_button_symbol>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d007      	beq.n	801bf24 <nk_do_scrollbarv+0x19c>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 801bf14:	ed97 7a04 	vldr	s14, [r7, #16]
 801bf18:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801bf1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bf20:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.y = scroll.y + scroll.h - button.h;
 801bf24:	ed97 7a07 	vldr	s14, [r7, #28]
 801bf28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bf2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bf30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801bf34:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bf38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 801bf3c:	683b      	ldr	r3, [r7, #0]
 801bf3e:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 801bf42:	683b      	ldr	r3, [r7, #0]
 801bf44:	33cc      	adds	r3, #204	; 0xcc
 801bf46:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801bf4a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801bf4e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801bf52:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801bf56:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801bf5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bf5e:	9202      	str	r2, [sp, #8]
 801bf60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801bf64:	9201      	str	r2, [sp, #4]
 801bf66:	9300      	str	r3, [sp, #0]
 801bf68:	2301      	movs	r3, #1
 801bf6a:	460a      	mov	r2, r1
 801bf6c:	eeb0 0a46 	vmov.f32	s0, s12
 801bf70:	eef0 0a66 	vmov.f32	s1, s13
 801bf74:	eeb0 1a47 	vmov.f32	s2, s14
 801bf78:	eef0 1a67 	vmov.f32	s3, s15
 801bf7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bf7e:	f7f3 fbfb 	bl	800f778 <nk_do_button_symbol>
 801bf82:	4603      	mov	r3, r0
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d007      	beq.n	801bf98 <nk_do_scrollbarv+0x210>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 801bf88:	ed97 7a04 	vldr	s14, [r7, #16]
 801bf8c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801bf90:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bf94:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.y = scroll.y + button.h;
 801bf98:	ed97 7a07 	vldr	s14, [r7, #28]
 801bf9c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801bfa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bfa4:	edc7 7a07 	vstr	s15, [r7, #28]
        scroll.h = scroll_h;
 801bfa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bfac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.h);
 801bfae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bfb2:	ed97 7a02 	vldr	s14, [r7, #8]
 801bfb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfbe:	d501      	bpl.n	801bfc4 <nk_do_scrollbarv+0x23c>
 801bfc0:	68bb      	ldr	r3, [r7, #8]
 801bfc2:	e000      	b.n	801bfc6 <nk_do_scrollbarv+0x23e>
 801bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 801bfca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bfce:	ed97 7a03 	vldr	s14, [r7, #12]
 801bfd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bfd6:	ed97 7a04 	vldr	s14, [r7, #16]
 801bfda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfe2:	d50a      	bpl.n	801bffa <nk_do_scrollbarv+0x272>
 801bfe4:	edd7 7a04 	vldr	s15, [r7, #16]
 801bfe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bff0:	bf4c      	ite	mi
 801bff2:	2301      	movmi	r3, #1
 801bff4:	2300      	movpl	r3, #0
 801bff6:	b2db      	uxtb	r3, r3
 801bff8:	e00d      	b.n	801c016 <nk_do_scrollbarv+0x28e>
 801bffa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bffe:	ed97 7a03 	vldr	s14, [r7, #12]
 801c002:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c00e:	bf4c      	ite	mi
 801c010:	2301      	movmi	r3, #1
 801c012:	2300      	movpl	r3, #0
 801c014:	b2db      	uxtb	r3, r3
 801c016:	2b00      	cmp	r3, #0
 801c018:	d002      	beq.n	801c020 <nk_do_scrollbarv+0x298>
 801c01a:	eddf 7a28 	vldr	s15, [pc, #160]	; 801c0bc <nk_do_scrollbarv+0x334>
 801c01e:	e015      	b.n	801c04c <nk_do_scrollbarv+0x2c4>
 801c020:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c024:	ed97 7a03 	vldr	s14, [r7, #12]
 801c028:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c02c:	ed97 7a04 	vldr	s14, [r7, #16]
 801c030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c038:	d502      	bpl.n	801c040 <nk_do_scrollbarv+0x2b8>
 801c03a:	edd7 7a04 	vldr	s15, [r7, #16]
 801c03e:	e005      	b.n	801c04c <nk_do_scrollbarv+0x2c4>
 801c040:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c044:	ed97 7a03 	vldr	s14, [r7, #12]
 801c048:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c04c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.h / target;
 801c050:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801c054:	ed97 7a03 	vldr	s14, [r7, #12]
 801c058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c05c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 801c060:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c064:	ed97 7a03 	vldr	s14, [r7, #12]
 801c068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c06c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate scrollbar cursor bounds */
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 801c070:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801c074:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801c078:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c07c:	683b      	ldr	r3, [r7, #0]
 801c07e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c082:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c08c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c094:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0a0:	d50e      	bpl.n	801c0c0 <nk_do_scrollbarv+0x338>
 801c0a2:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c0bc <nk_do_scrollbarv+0x334>
 801c0a6:	e01f      	b.n	801c0e8 <nk_do_scrollbarv+0x360>
 801c0a8:	08028da4 	.word	0x08028da4
 801c0ac:	0802a994 	.word	0x0802a994
 801c0b0:	08028da8 	.word	0x08028da8
 801c0b4:	08028dc8 	.word	0x08028dc8
 801c0b8:	08028dd0 	.word	0x08028dd0
 801c0bc:	00000000 	.word	0x00000000
 801c0c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801c0c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801c0c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c0cc:	683b      	ldr	r3, [r7, #0]
 801c0ce:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c0d2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c0dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c0e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c0e8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;
 801c0ec:	ed97 7a07 	vldr	s14, [r7, #28]
 801c0f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801c0f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c0f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c0fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c106:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c10a:	683b      	ldr	r3, [r7, #0]
 801c10c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c110:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c114:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);
 801c118:	ed97 7a08 	vldr	s14, [r7, #32]
 801c11c:	683b      	ldr	r3, [r7, #0]
 801c11e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c122:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c126:	683b      	ldr	r3, [r7, #0]
 801c128:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c12c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c134:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c138:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    cursor.x = scroll.x + style->border + style->padding.x;
 801c13c:	ed97 7a06 	vldr	s14, [r7, #24]
 801c140:	683b      	ldr	r3, [r7, #0]
 801c142:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c146:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c14a:	683b      	ldr	r3, [r7, #0]
 801c14c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c150:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c154:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    /* calculate empty space around cursor */
    empty_north.x = scroll.x;
 801c158:	69bb      	ldr	r3, [r7, #24]
 801c15a:	667b      	str	r3, [r7, #100]	; 0x64
    empty_north.y = scroll.y;
 801c15c:	69fb      	ldr	r3, [r7, #28]
 801c15e:	66bb      	str	r3, [r7, #104]	; 0x68
    empty_north.w = scroll.w;
 801c160:	6a3b      	ldr	r3, [r7, #32]
 801c162:	66fb      	str	r3, [r7, #108]	; 0x6c
    empty_north.h = NK_MAX(cursor.y - scroll.y, 0);
 801c164:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801c168:	edd7 7a07 	vldr	s15, [r7, #28]
 801c16c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c178:	d502      	bpl.n	801c180 <nk_do_scrollbarv+0x3f8>
 801c17a:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 801c0bc <nk_do_scrollbarv+0x334>
 801c17e:	e005      	b.n	801c18c <nk_do_scrollbarv+0x404>
 801c180:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801c184:	edd7 7a07 	vldr	s15, [r7, #28]
 801c188:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c18c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    empty_south.x = scroll.x;
 801c190:	69bb      	ldr	r3, [r7, #24]
 801c192:	657b      	str	r3, [r7, #84]	; 0x54
    empty_south.y = cursor.y + cursor.h;
 801c194:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801c198:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801c19c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c1a0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    empty_south.w = scroll.w;
 801c1a4:	6a3b      	ldr	r3, [r7, #32]
 801c1a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);
 801c1a8:	ed97 7a07 	vldr	s14, [r7, #28]
 801c1ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c1b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c1b4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801c1b8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801c1bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c1c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1cc:	d502      	bpl.n	801c1d4 <nk_do_scrollbarv+0x44c>
 801c1ce:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 801c0bc <nk_do_scrollbarv+0x334>
 801c1d2:	e00d      	b.n	801c1f0 <nk_do_scrollbarv+0x468>
 801c1d4:	ed97 7a07 	vldr	s14, [r7, #28]
 801c1d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c1dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c1e0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801c1e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801c1e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c1f0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 801c1f4:	f107 0218 	add.w	r2, r7, #24
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	9303      	str	r3, [sp, #12]
 801c1fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c200:	9302      	str	r3, [sp, #8]
 801c202:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c206:	9301      	str	r3, [sp, #4]
 801c208:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c20c:	9300      	str	r3, [sp, #0]
 801c20e:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 801c212:	edd7 0a03 	vldr	s1, [r7, #12]
 801c216:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801c21a:	4613      	mov	r3, r2
 801c21c:	697a      	ldr	r2, [r7, #20]
 801c21e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c224:	f7ff f90e 	bl	801b444 <nk_scrollbar_behavior>
 801c228:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);
    scroll_off = scroll_offset / target;
 801c22c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c230:	ed97 7a03 	vldr	s14, [r7, #12]
 801c234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c238:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;
 801c23c:	ed97 7a07 	vldr	s14, [r7, #28]
 801c240:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801c244:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c24c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c250:	683b      	ldr	r3, [r7, #0]
 801c252:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 801c256:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c25a:	683b      	ldr	r3, [r7, #0]
 801c25c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c260:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c264:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 801c268:	683b      	ldr	r3, [r7, #0]
 801c26a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d007      	beq.n	801c282 <nk_do_scrollbarv+0x4fa>
 801c272:	683b      	ldr	r3, [r7, #0]
 801c274:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c278:	683a      	ldr	r2, [r7, #0]
 801c27a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c27e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c280:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 801c282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c284:	6819      	ldr	r1, [r3, #0]
 801c286:	f107 0218 	add.w	r2, r7, #24
 801c28a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c28e:	9300      	str	r3, [sp, #0]
 801c290:	4613      	mov	r3, r2
 801c292:	683a      	ldr	r2, [r7, #0]
 801c294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c296:	f7ff fc5b 	bl	801bb50 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801c29a:	683b      	ldr	r3, [r7, #0]
 801c29c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d007      	beq.n	801c2b4 <nk_do_scrollbarv+0x52c>
 801c2a4:	683b      	ldr	r3, [r7, #0]
 801c2a6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c2aa:	683a      	ldr	r2, [r7, #0]
 801c2ac:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c2b2:	4798      	blx	r3
    return scroll_offset;
 801c2b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 801c2b6:	ee07 3a90 	vmov	s15, r3
 801c2ba:	eeb0 0a67 	vmov.f32	s0, s15
 801c2be:	3788      	adds	r7, #136	; 0x88
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bd80      	pop	{r7, pc}

0801c2c4 <nk_do_scrollbarh>:
nk_do_scrollbarh(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 801c2c4:	b580      	push	{r7, lr}
 801c2c6:	b0a6      	sub	sp, #152	; 0x98
 801c2c8:	af04      	add	r7, sp, #16
 801c2ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c2cc:	62b9      	str	r1, [r7, #40]	; 0x28
 801c2ce:	eeb0 6a40 	vmov.f32	s12, s0
 801c2d2:	eef0 6a60 	vmov.f32	s13, s1
 801c2d6:	eeb0 7a41 	vmov.f32	s14, s2
 801c2da:	eef0 7a61 	vmov.f32	s15, s3
 801c2de:	617a      	str	r2, [r7, #20]
 801c2e0:	ed87 2a04 	vstr	s4, [r7, #16]
 801c2e4:	edc7 2a03 	vstr	s5, [r7, #12]
 801c2e8:	ed87 3a02 	vstr	s6, [r7, #8]
 801c2ec:	edc7 3a01 	vstr	s7, [r7, #4]
 801c2f0:	603b      	str	r3, [r7, #0]
 801c2f2:	ed87 6a06 	vstr	s12, [r7, #24]
 801c2f6:	edc7 6a07 	vstr	s13, [r7, #28]
 801c2fa:	ed87 7a08 	vstr	s14, [r7, #32]
 801c2fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 801c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c304:	2b00      	cmp	r3, #0
 801c306:	d105      	bne.n	801c314 <nk_do_scrollbarh+0x50>
 801c308:	4b94      	ldr	r3, [pc, #592]	; (801c55c <nk_do_scrollbarh+0x298>)
 801c30a:	4a95      	ldr	r2, [pc, #596]	; (801c560 <nk_do_scrollbarh+0x29c>)
 801c30c:	21ee      	movs	r1, #238	; 0xee
 801c30e:	4895      	ldr	r0, [pc, #596]	; (801c564 <nk_do_scrollbarh+0x2a0>)
 801c310:	f008 fbe2 	bl	8024ad8 <__assert_func>
    NK_ASSERT(style);
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d105      	bne.n	801c326 <nk_do_scrollbarh+0x62>
 801c31a:	4b93      	ldr	r3, [pc, #588]	; (801c568 <nk_do_scrollbarh+0x2a4>)
 801c31c:	4a90      	ldr	r2, [pc, #576]	; (801c560 <nk_do_scrollbarh+0x29c>)
 801c31e:	21ef      	movs	r1, #239	; 0xef
 801c320:	4890      	ldr	r0, [pc, #576]	; (801c564 <nk_do_scrollbarh+0x2a0>)
 801c322:	f008 fbd9 	bl	8024ad8 <__assert_func>
    if (!out || !style) return 0;
 801c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d002      	beq.n	801c332 <nk_do_scrollbarh+0x6e>
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d102      	bne.n	801c338 <nk_do_scrollbarh+0x74>
 801c332:	f04f 0300 	mov.w	r3, #0
 801c336:	e200      	b.n	801c73a <nk_do_scrollbarh+0x476>

    /* scrollbar background */
    scroll.h = NK_MAX(scroll.h, 1);
 801c338:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c33c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c340:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c348:	d502      	bpl.n	801c350 <nk_do_scrollbarh+0x8c>
 801c34a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c34e:	e000      	b.n	801c352 <nk_do_scrollbarh+0x8e>
 801c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c352:	627b      	str	r3, [r7, #36]	; 0x24
    scroll.w = NK_MAX(scroll.w, 2 * scroll.h);
 801c354:	ed97 7a08 	vldr	s14, [r7, #32]
 801c358:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c35c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c368:	d504      	bpl.n	801c374 <nk_do_scrollbarh+0xb0>
 801c36a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c36e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c372:	e001      	b.n	801c378 <nk_do_scrollbarh+0xb4>
 801c374:	edd7 7a08 	vldr	s15, [r7, #32]
 801c378:	edc7 7a08 	vstr	s15, [r7, #32]
    if (target <= scroll.w) return 0;
 801c37c:	edd7 7a08 	vldr	s15, [r7, #32]
 801c380:	ed97 7a03 	vldr	s14, [r7, #12]
 801c384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c38c:	d802      	bhi.n	801c394 <nk_do_scrollbarh+0xd0>
 801c38e:	f04f 0300 	mov.w	r3, #0
 801c392:	e1d2      	b.n	801c73a <nk_do_scrollbarh+0x476>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 801c394:	683b      	ldr	r3, [r7, #0]
 801c396:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	f000 8094 	beq.w	801c4c8 <nk_do_scrollbarh+0x204>
        nk_flags ws;
        float scroll_w;
        struct nk_rect button;
        button.y = scroll.y;
 801c3a0:	69fb      	ldr	r3, [r7, #28]
 801c3a2:	637b      	str	r3, [r7, #52]	; 0x34
        button.w = scroll.h;
 801c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3a6:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.h;
 801c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3aa:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_w = scroll.w - 2 * button.w;
 801c3ac:	ed97 7a08 	vldr	s14, [r7, #32]
 801c3b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c3b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c3b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c3bc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 801c3c0:	ed97 7a02 	vldr	s14, [r7, #8]
 801c3c4:	edd7 7a01 	vldr	s15, [r7, #4]
 801c3c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3d0:	d501      	bpl.n	801c3d6 <nk_do_scrollbarh+0x112>
 801c3d2:	68bb      	ldr	r3, [r7, #8]
 801c3d4:	e000      	b.n	801c3d8 <nk_do_scrollbarh+0x114>
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.x = scroll.x;
 801c3dc:	69bb      	ldr	r3, [r7, #24]
 801c3de:	633b      	str	r3, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 801c3e0:	683b      	ldr	r3, [r7, #0]
 801c3e2:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801c3e6:	683b      	ldr	r3, [r7, #0]
 801c3e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801c3ec:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801c3f0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801c3f4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801c3f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801c3fc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801c400:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c404:	9202      	str	r2, [sp, #8]
 801c406:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c40a:	9201      	str	r2, [sp, #4]
 801c40c:	9300      	str	r3, [sp, #0]
 801c40e:	2301      	movs	r3, #1
 801c410:	460a      	mov	r2, r1
 801c412:	eeb0 0a46 	vmov.f32	s0, s12
 801c416:	eef0 0a66 	vmov.f32	s1, s13
 801c41a:	eeb0 1a47 	vmov.f32	s2, s14
 801c41e:	eef0 1a67 	vmov.f32	s3, s15
 801c422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c424:	f7f3 f9a8 	bl	800f778 <nk_do_button_symbol>
 801c428:	4603      	mov	r3, r0
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d007      	beq.n	801c43e <nk_do_scrollbarh+0x17a>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 801c42e:	ed97 7a04 	vldr	s14, [r7, #16]
 801c432:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801c436:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c43a:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = scroll.x + scroll.w - button.w;
 801c43e:	ed97 7a06 	vldr	s14, [r7, #24]
 801c442:	edd7 7a08 	vldr	s15, [r7, #32]
 801c446:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c44a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c44e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c452:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 801c456:	683b      	ldr	r3, [r7, #0]
 801c458:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 801c45c:	683b      	ldr	r3, [r7, #0]
 801c45e:	33cc      	adds	r3, #204	; 0xcc
 801c460:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801c464:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801c468:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801c46c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801c470:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801c474:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c478:	9202      	str	r2, [sp, #8]
 801c47a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c47e:	9201      	str	r2, [sp, #4]
 801c480:	9300      	str	r3, [sp, #0]
 801c482:	2301      	movs	r3, #1
 801c484:	460a      	mov	r2, r1
 801c486:	eeb0 0a46 	vmov.f32	s0, s12
 801c48a:	eef0 0a66 	vmov.f32	s1, s13
 801c48e:	eeb0 1a47 	vmov.f32	s2, s14
 801c492:	eef0 1a67 	vmov.f32	s3, s15
 801c496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c498:	f7f3 f96e 	bl	800f778 <nk_do_button_symbol>
 801c49c:	4603      	mov	r3, r0
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d007      	beq.n	801c4b2 <nk_do_scrollbarh+0x1ee>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 801c4a2:	ed97 7a04 	vldr	s14, [r7, #16]
 801c4a6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801c4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c4ae:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.x = scroll.x + button.w;
 801c4b2:	ed97 7a06 	vldr	s14, [r7, #24]
 801c4b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c4ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c4be:	edc7 7a06 	vstr	s15, [r7, #24]
        scroll.w = scroll_w;
 801c4c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c4c6:	623b      	str	r3, [r7, #32]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.w);
 801c4c8:	edd7 7a08 	vldr	s15, [r7, #32]
 801c4cc:	ed97 7a02 	vldr	s14, [r7, #8]
 801c4d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4d8:	d501      	bpl.n	801c4de <nk_do_scrollbarh+0x21a>
 801c4da:	68bb      	ldr	r3, [r7, #8]
 801c4dc:	e000      	b.n	801c4e0 <nk_do_scrollbarh+0x21c>
 801c4de:	6a3b      	ldr	r3, [r7, #32]
 801c4e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 801c4e4:	edd7 7a08 	vldr	s15, [r7, #32]
 801c4e8:	ed97 7a03 	vldr	s14, [r7, #12]
 801c4ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c4f0:	ed97 7a04 	vldr	s14, [r7, #16]
 801c4f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4fc:	d50a      	bpl.n	801c514 <nk_do_scrollbarh+0x250>
 801c4fe:	edd7 7a04 	vldr	s15, [r7, #16]
 801c502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c50a:	bf4c      	ite	mi
 801c50c:	2301      	movmi	r3, #1
 801c50e:	2300      	movpl	r3, #0
 801c510:	b2db      	uxtb	r3, r3
 801c512:	e00d      	b.n	801c530 <nk_do_scrollbarh+0x26c>
 801c514:	edd7 7a08 	vldr	s15, [r7, #32]
 801c518:	ed97 7a03 	vldr	s14, [r7, #12]
 801c51c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c528:	bf4c      	ite	mi
 801c52a:	2301      	movmi	r3, #1
 801c52c:	2300      	movpl	r3, #0
 801c52e:	b2db      	uxtb	r3, r3
 801c530:	2b00      	cmp	r3, #0
 801c532:	d002      	beq.n	801c53a <nk_do_scrollbarh+0x276>
 801c534:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c56c <nk_do_scrollbarh+0x2a8>
 801c538:	e020      	b.n	801c57c <nk_do_scrollbarh+0x2b8>
 801c53a:	edd7 7a08 	vldr	s15, [r7, #32]
 801c53e:	ed97 7a03 	vldr	s14, [r7, #12]
 801c542:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c546:	ed97 7a04 	vldr	s14, [r7, #16]
 801c54a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c552:	d50d      	bpl.n	801c570 <nk_do_scrollbarh+0x2ac>
 801c554:	edd7 7a04 	vldr	s15, [r7, #16]
 801c558:	e010      	b.n	801c57c <nk_do_scrollbarh+0x2b8>
 801c55a:	bf00      	nop
 801c55c:	08028da4 	.word	0x08028da4
 801c560:	0802a9a8 	.word	0x0802a9a8
 801c564:	08028da8 	.word	0x08028da8
 801c568:	08028dc8 	.word	0x08028dc8
 801c56c:	00000000 	.word	0x00000000
 801c570:	edd7 7a08 	vldr	s15, [r7, #32]
 801c574:	ed97 7a03 	vldr	s14, [r7, #12]
 801c578:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c57c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.w / target;
 801c580:	edd7 6a08 	vldr	s13, [r7, #32]
 801c584:	ed97 7a03 	vldr	s14, [r7, #12]
 801c588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c58c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 801c590:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c594:	ed97 7a03 	vldr	s14, [r7, #12]
 801c598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c59c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate cursor bounds */
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 801c5a0:	ed97 7a08 	vldr	s14, [r7, #32]
 801c5a4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801c5a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c5ac:	683b      	ldr	r3, [r7, #0]
 801c5ae:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c5b2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c5b6:	683b      	ldr	r3, [r7, #0]
 801c5b8:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c5bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c5c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c5c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c5c8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 801c5cc:	ed97 7a06 	vldr	s14, [r7, #24]
 801c5d0:	edd7 6a08 	vldr	s13, [r7, #32]
 801c5d4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c5d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c5dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c5e0:	683b      	ldr	r3, [r7, #0]
 801c5e2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c5e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c5ea:	683b      	ldr	r3, [r7, #0]
 801c5ec:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c5f4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);
 801c5f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801c5fc:	683b      	ldr	r3, [r7, #0]
 801c5fe:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c602:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c60c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c614:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c618:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    cursor.y = scroll.y + style->border + style->padding.y;
 801c61c:	ed97 7a07 	vldr	s14, [r7, #28]
 801c620:	683b      	ldr	r3, [r7, #0]
 801c622:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c626:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c62a:	683b      	ldr	r3, [r7, #0]
 801c62c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c630:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c634:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate empty space around cursor */
    empty_west.x = scroll.x;
 801c638:	69bb      	ldr	r3, [r7, #24]
 801c63a:	657b      	str	r3, [r7, #84]	; 0x54
    empty_west.y = scroll.y;
 801c63c:	69fb      	ldr	r3, [r7, #28]
 801c63e:	65bb      	str	r3, [r7, #88]	; 0x58
    empty_west.w = cursor.x - scroll.x;
 801c640:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801c644:	edd7 7a06 	vldr	s15, [r7, #24]
 801c648:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c64c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    empty_west.h = scroll.h;
 801c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c652:	663b      	str	r3, [r7, #96]	; 0x60

    empty_east.x = cursor.x + cursor.w;
 801c654:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801c658:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801c65c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c660:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    empty_east.y = scroll.y;
 801c664:	69fb      	ldr	r3, [r7, #28]
 801c666:	64bb      	str	r3, [r7, #72]	; 0x48
    empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);
 801c668:	ed97 7a06 	vldr	s14, [r7, #24]
 801c66c:	edd7 7a08 	vldr	s15, [r7, #32]
 801c670:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c674:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801c678:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801c67c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c680:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c684:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    empty_east.h = scroll.h;
 801c688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c68a:	653b      	str	r3, [r7, #80]	; 0x50

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 801c68c:	f107 0218 	add.w	r2, r7, #24
 801c690:	2301      	movs	r3, #1
 801c692:	9303      	str	r3, [sp, #12]
 801c694:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c698:	9302      	str	r3, [sp, #8]
 801c69a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c69e:	9301      	str	r3, [sp, #4]
 801c6a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c6a4:	9300      	str	r3, [sp, #0]
 801c6a6:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 801c6aa:	edd7 0a03 	vldr	s1, [r7, #12]
 801c6ae:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801c6b2:	4613      	mov	r3, r2
 801c6b4:	697a      	ldr	r2, [r7, #20]
 801c6b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c6ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c6bc:	f7fe fec2 	bl	801b444 <nk_scrollbar_behavior>
 801c6c0:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);
    scroll_off = scroll_offset / target;
 801c6c4:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c6c8:	ed97 7a03 	vldr	s14, [r7, #12]
 801c6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c6d0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.x = scroll.x + (scroll_off * scroll.w);
 801c6d4:	ed97 7a06 	vldr	s14, [r7, #24]
 801c6d8:	edd7 6a08 	vldr	s13, [r7, #32]
 801c6dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c6e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c6e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c6e8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 801c6ec:	683b      	ldr	r3, [r7, #0]
 801c6ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d007      	beq.n	801c706 <nk_do_scrollbarh+0x442>
 801c6f6:	683b      	ldr	r3, [r7, #0]
 801c6f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c6fc:	683a      	ldr	r2, [r7, #0]
 801c6fe:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c704:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 801c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c708:	6819      	ldr	r1, [r3, #0]
 801c70a:	f107 0218 	add.w	r2, r7, #24
 801c70e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c712:	9300      	str	r3, [sp, #0]
 801c714:	4613      	mov	r3, r2
 801c716:	683a      	ldr	r2, [r7, #0]
 801c718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c71a:	f7ff fa19 	bl	801bb50 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801c71e:	683b      	ldr	r3, [r7, #0]
 801c720:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c724:	2b00      	cmp	r3, #0
 801c726:	d007      	beq.n	801c738 <nk_do_scrollbarh+0x474>
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c72e:	683a      	ldr	r2, [r7, #0]
 801c730:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c736:	4798      	blx	r3
    return scroll_offset;
 801c738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 801c73a:	ee07 3a90 	vmov	s15, r3
 801c73e:	eeb0 0a67 	vmov.f32	s0, s15
 801c742:	3788      	adds	r7, #136	; 0x88
 801c744:	46bd      	mov	sp, r7
 801c746:	bd80      	pop	{r7, pc}

0801c748 <nk_str_append_text_char>:
    nk_buffer_init_fixed(&str->buffer, memory, size);
    str->len = 0;
}
NK_API int
nk_str_append_text_char(struct nk_str *s, const char *str, int len)
{
 801c748:	b580      	push	{r7, lr}
 801c74a:	b086      	sub	sp, #24
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	60f8      	str	r0, [r7, #12]
 801c750:	60b9      	str	r1, [r7, #8]
 801c752:	607a      	str	r2, [r7, #4]
    char *mem;
    NK_ASSERT(s);
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d105      	bne.n	801c766 <nk_str_append_text_char+0x1e>
 801c75a:	4b1d      	ldr	r3, [pc, #116]	; (801c7d0 <nk_str_append_text_char+0x88>)
 801c75c:	4a1d      	ldr	r2, [pc, #116]	; (801c7d4 <nk_str_append_text_char+0x8c>)
 801c75e:	2126      	movs	r1, #38	; 0x26
 801c760:	481d      	ldr	r0, [pc, #116]	; (801c7d8 <nk_str_append_text_char+0x90>)
 801c762:	f008 f9b9 	bl	8024ad8 <__assert_func>
    NK_ASSERT(str);
 801c766:	68bb      	ldr	r3, [r7, #8]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d105      	bne.n	801c778 <nk_str_append_text_char+0x30>
 801c76c:	4b1b      	ldr	r3, [pc, #108]	; (801c7dc <nk_str_append_text_char+0x94>)
 801c76e:	4a19      	ldr	r2, [pc, #100]	; (801c7d4 <nk_str_append_text_char+0x8c>)
 801c770:	2127      	movs	r1, #39	; 0x27
 801c772:	4819      	ldr	r0, [pc, #100]	; (801c7d8 <nk_str_append_text_char+0x90>)
 801c774:	f008 f9b0 	bl	8024ad8 <__assert_func>
    if (!s || !str || !len) return 0;
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d005      	beq.n	801c78a <nk_str_append_text_char+0x42>
 801c77e:	68bb      	ldr	r3, [r7, #8]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d002      	beq.n	801c78a <nk_str_append_text_char+0x42>
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d101      	bne.n	801c78e <nk_str_append_text_char+0x46>
 801c78a:	2300      	movs	r3, #0
 801c78c:	e01c      	b.n	801c7c8 <nk_str_append_text_char+0x80>
    mem = (char*)nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);
 801c78e:	68f8      	ldr	r0, [r7, #12]
 801c790:	687a      	ldr	r2, [r7, #4]
 801c792:	2300      	movs	r3, #0
 801c794:	2100      	movs	r1, #0
 801c796:	f7f2 f933 	bl	800ea00 <nk_buffer_alloc>
 801c79a:	6178      	str	r0, [r7, #20]
    if (!mem) return 0;
 801c79c:	697b      	ldr	r3, [r7, #20]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d101      	bne.n	801c7a6 <nk_str_append_text_char+0x5e>
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	e010      	b.n	801c7c8 <nk_str_append_text_char+0x80>
    NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	461a      	mov	r2, r3
 801c7aa:	68b9      	ldr	r1, [r7, #8]
 801c7ac:	6978      	ldr	r0, [r7, #20]
 801c7ae:	f005 fe19 	bl	80223e4 <nk_memcopy>
    s->len += nk_utf_len(str, len);
 801c7b2:	6879      	ldr	r1, [r7, #4]
 801c7b4:	68b8      	ldr	r0, [r7, #8]
 801c7b6:	f005 fdc9 	bl	802234c <nk_utf_len>
 801c7ba:	4602      	mov	r2, r0
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c7c0:	441a      	add	r2, r3
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	63da      	str	r2, [r3, #60]	; 0x3c
    return len;
 801c7c6:	687b      	ldr	r3, [r7, #4]
}
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	3718      	adds	r7, #24
 801c7cc:	46bd      	mov	sp, r7
 801c7ce:	bd80      	pop	{r7, pc}
 801c7d0:	08028dd8 	.word	0x08028dd8
 801c7d4:	0802a9bc 	.word	0x0802a9bc
 801c7d8:	08028ddc 	.word	0x08028ddc
 801c7dc:	08028df8 	.word	0x08028df8

0801c7e0 <nk_str_insert_at_char>:
    }
    return i;
}
NK_API int
nk_str_insert_at_char(struct nk_str *s, int pos, const char *str, int len)
{
 801c7e0:	b580      	push	{r7, lr}
 801c7e2:	b08a      	sub	sp, #40	; 0x28
 801c7e4:	af00      	add	r7, sp, #0
 801c7e6:	60f8      	str	r0, [r7, #12]
 801c7e8:	60b9      	str	r1, [r7, #8]
 801c7ea:	607a      	str	r2, [r7, #4]
 801c7ec:	603b      	str	r3, [r7, #0]
    void *mem;
    char *src;
    char *dst;

    int copylen;
    NK_ASSERT(s);
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d105      	bne.n	801c800 <nk_str_insert_at_char+0x20>
 801c7f4:	4b55      	ldr	r3, [pc, #340]	; (801c94c <nk_str_insert_at_char+0x16c>)
 801c7f6:	4a56      	ldr	r2, [pc, #344]	; (801c950 <nk_str_insert_at_char+0x170>)
 801c7f8:	217a      	movs	r1, #122	; 0x7a
 801c7fa:	4856      	ldr	r0, [pc, #344]	; (801c954 <nk_str_insert_at_char+0x174>)
 801c7fc:	f008 f96c 	bl	8024ad8 <__assert_func>
    NK_ASSERT(str);
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d105      	bne.n	801c812 <nk_str_insert_at_char+0x32>
 801c806:	4b54      	ldr	r3, [pc, #336]	; (801c958 <nk_str_insert_at_char+0x178>)
 801c808:	4a51      	ldr	r2, [pc, #324]	; (801c950 <nk_str_insert_at_char+0x170>)
 801c80a:	217b      	movs	r1, #123	; 0x7b
 801c80c:	4851      	ldr	r0, [pc, #324]	; (801c954 <nk_str_insert_at_char+0x174>)
 801c80e:	f008 f963 	bl	8024ad8 <__assert_func>
    NK_ASSERT(len >= 0);
 801c812:	683b      	ldr	r3, [r7, #0]
 801c814:	2b00      	cmp	r3, #0
 801c816:	da05      	bge.n	801c824 <nk_str_insert_at_char+0x44>
 801c818:	4b50      	ldr	r3, [pc, #320]	; (801c95c <nk_str_insert_at_char+0x17c>)
 801c81a:	4a4d      	ldr	r2, [pc, #308]	; (801c950 <nk_str_insert_at_char+0x170>)
 801c81c:	217c      	movs	r1, #124	; 0x7c
 801c81e:	484d      	ldr	r0, [pc, #308]	; (801c954 <nk_str_insert_at_char+0x174>)
 801c820:	f008 f95a 	bl	8024ad8 <__assert_func>
    if (!s || !str || !len || (nk_size)pos > s->buffer.allocated) return 0;
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d00a      	beq.n	801c840 <nk_str_insert_at_char+0x60>
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d007      	beq.n	801c840 <nk_str_insert_at_char+0x60>
 801c830:	683b      	ldr	r3, [r7, #0]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d004      	beq.n	801c840 <nk_str_insert_at_char+0x60>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c83a:	68bb      	ldr	r3, [r7, #8]
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d201      	bcs.n	801c844 <nk_str_insert_at_char+0x64>
 801c840:	2300      	movs	r3, #0
 801c842:	e07e      	b.n	801c942 <nk_str_insert_at_char+0x162>
    if ((s->buffer.allocated + (nk_size)len >= s->buffer.memory.size) &&
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c848:	683b      	ldr	r3, [r7, #0]
 801c84a:	441a      	add	r2, r3
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c850:	429a      	cmp	r2, r3
 801c852:	d305      	bcc.n	801c860 <nk_str_insert_at_char+0x80>
        (s->buffer.type == NK_BUFFER_FIXED)) return 0;
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	7f1b      	ldrb	r3, [r3, #28]
    if ((s->buffer.allocated + (nk_size)len >= s->buffer.memory.size) &&
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d101      	bne.n	801c860 <nk_str_insert_at_char+0x80>
        (s->buffer.type == NK_BUFFER_FIXED)) return 0;
 801c85c:	2300      	movs	r3, #0
 801c85e:	e070      	b.n	801c942 <nk_str_insert_at_char+0x162>

    copylen = (int)s->buffer.allocated - pos;
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c864:	461a      	mov	r2, r3
 801c866:	68bb      	ldr	r3, [r7, #8]
 801c868:	1ad3      	subs	r3, r2, r3
 801c86a:	61bb      	str	r3, [r7, #24]
    if (!copylen) {
 801c86c:	69bb      	ldr	r3, [r7, #24]
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d106      	bne.n	801c880 <nk_str_insert_at_char+0xa0>
        nk_str_append_text_char(s, str, len);
 801c872:	683a      	ldr	r2, [r7, #0]
 801c874:	6879      	ldr	r1, [r7, #4]
 801c876:	68f8      	ldr	r0, [r7, #12]
 801c878:	f7ff ff66 	bl	801c748 <nk_str_append_text_char>
        return 1;
 801c87c:	2301      	movs	r3, #1
 801c87e:	e060      	b.n	801c942 <nk_str_insert_at_char+0x162>
    }
    mem = nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);
 801c880:	68f8      	ldr	r0, [r7, #12]
 801c882:	683a      	ldr	r2, [r7, #0]
 801c884:	2300      	movs	r3, #0
 801c886:	2100      	movs	r1, #0
 801c888:	f7f2 f8ba 	bl	800ea00 <nk_buffer_alloc>
 801c88c:	6178      	str	r0, [r7, #20]
    if (!mem) return 0;
 801c88e:	697b      	ldr	r3, [r7, #20]
 801c890:	2b00      	cmp	r3, #0
 801c892:	d101      	bne.n	801c898 <nk_str_insert_at_char+0xb8>
 801c894:	2300      	movs	r3, #0
 801c896:	e054      	b.n	801c942 <nk_str_insert_at_char+0x162>

    /* memmove */
    NK_ASSERT(((int)pos + (int)len + ((int)copylen - 1)) >= 0);
 801c898:	68ba      	ldr	r2, [r7, #8]
 801c89a:	683b      	ldr	r3, [r7, #0]
 801c89c:	441a      	add	r2, r3
 801c89e:	69bb      	ldr	r3, [r7, #24]
 801c8a0:	3b01      	subs	r3, #1
 801c8a2:	4413      	add	r3, r2
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	da05      	bge.n	801c8b4 <nk_str_insert_at_char+0xd4>
 801c8a8:	4b2d      	ldr	r3, [pc, #180]	; (801c960 <nk_str_insert_at_char+0x180>)
 801c8aa:	4a29      	ldr	r2, [pc, #164]	; (801c950 <nk_str_insert_at_char+0x170>)
 801c8ac:	218a      	movs	r1, #138	; 0x8a
 801c8ae:	4829      	ldr	r0, [pc, #164]	; (801c954 <nk_str_insert_at_char+0x174>)
 801c8b0:	f008 f912 	bl	8024ad8 <__assert_func>
    NK_ASSERT(((int)pos + ((int)copylen - 1)) >= 0);
 801c8b4:	69bb      	ldr	r3, [r7, #24]
 801c8b6:	1e5a      	subs	r2, r3, #1
 801c8b8:	68bb      	ldr	r3, [r7, #8]
 801c8ba:	4413      	add	r3, r2
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	da05      	bge.n	801c8cc <nk_str_insert_at_char+0xec>
 801c8c0:	4b28      	ldr	r3, [pc, #160]	; (801c964 <nk_str_insert_at_char+0x184>)
 801c8c2:	4a23      	ldr	r2, [pc, #140]	; (801c950 <nk_str_insert_at_char+0x170>)
 801c8c4:	218b      	movs	r1, #139	; 0x8b
 801c8c6:	4823      	ldr	r0, [pc, #140]	; (801c954 <nk_str_insert_at_char+0x174>)
 801c8c8:	f008 f906 	bl	8024ad8 <__assert_func>
    dst = nk_ptr_add(char, s->buffer.memory.ptr, pos + len + (copylen - 1));
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	6a1b      	ldr	r3, [r3, #32]
 801c8d0:	68b9      	ldr	r1, [r7, #8]
 801c8d2:	683a      	ldr	r2, [r7, #0]
 801c8d4:	4411      	add	r1, r2
 801c8d6:	69ba      	ldr	r2, [r7, #24]
 801c8d8:	3a01      	subs	r2, #1
 801c8da:	440a      	add	r2, r1
 801c8dc:	4413      	add	r3, r2
 801c8de:	61fb      	str	r3, [r7, #28]
    src = nk_ptr_add(char, s->buffer.memory.ptr, pos + (copylen-1));
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	6a1b      	ldr	r3, [r3, #32]
 801c8e4:	69ba      	ldr	r2, [r7, #24]
 801c8e6:	1e51      	subs	r1, r2, #1
 801c8e8:	68ba      	ldr	r2, [r7, #8]
 801c8ea:	440a      	add	r2, r1
 801c8ec:	4413      	add	r3, r2
 801c8ee:	623b      	str	r3, [r7, #32]
    for (i = 0; i < copylen; ++i) *dst-- = *src--;
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	627b      	str	r3, [r7, #36]	; 0x24
 801c8f4:	e00a      	b.n	801c90c <nk_str_insert_at_char+0x12c>
 801c8f6:	6a3a      	ldr	r2, [r7, #32]
 801c8f8:	1e53      	subs	r3, r2, #1
 801c8fa:	623b      	str	r3, [r7, #32]
 801c8fc:	69fb      	ldr	r3, [r7, #28]
 801c8fe:	1e59      	subs	r1, r3, #1
 801c900:	61f9      	str	r1, [r7, #28]
 801c902:	7812      	ldrb	r2, [r2, #0]
 801c904:	701a      	strb	r2, [r3, #0]
 801c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c908:	3301      	adds	r3, #1
 801c90a:	627b      	str	r3, [r7, #36]	; 0x24
 801c90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c90e:	69bb      	ldr	r3, [r7, #24]
 801c910:	429a      	cmp	r2, r3
 801c912:	dbf0      	blt.n	801c8f6 <nk_str_insert_at_char+0x116>
    mem = nk_ptr_add(void, s->buffer.memory.ptr, pos);
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	6a1a      	ldr	r2, [r3, #32]
 801c918:	68bb      	ldr	r3, [r7, #8]
 801c91a:	4413      	add	r3, r2
 801c91c:	617b      	str	r3, [r7, #20]
    NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));
 801c91e:	683b      	ldr	r3, [r7, #0]
 801c920:	461a      	mov	r2, r3
 801c922:	6879      	ldr	r1, [r7, #4]
 801c924:	6978      	ldr	r0, [r7, #20]
 801c926:	f005 fd5d 	bl	80223e4 <nk_memcopy>
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	6a1a      	ldr	r2, [r3, #32]
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c932:	4619      	mov	r1, r3
 801c934:	4610      	mov	r0, r2
 801c936:	f005 fd09 	bl	802234c <nk_utf_len>
 801c93a:	4602      	mov	r2, r0
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	63da      	str	r2, [r3, #60]	; 0x3c
    return 1;
 801c940:	2301      	movs	r3, #1
}
 801c942:	4618      	mov	r0, r3
 801c944:	3728      	adds	r7, #40	; 0x28
 801c946:	46bd      	mov	sp, r7
 801c948:	bd80      	pop	{r7, pc}
 801c94a:	bf00      	nop
 801c94c:	08028dd8 	.word	0x08028dd8
 801c950:	0802a9d4 	.word	0x0802a9d4
 801c954:	08028ddc 	.word	0x08028ddc
 801c958:	08028df8 	.word	0x08028df8
 801c95c:	08028dfc 	.word	0x08028dfc
 801c960:	08028e08 	.word	0x08028e08
 801c964:	08028e38 	.word	0x08028e38

0801c968 <nk_str_insert_at_rune>:
NK_API int
nk_str_insert_at_rune(struct nk_str *str, int pos, const char *cstr, int len)
{
 801c968:	b580      	push	{r7, lr}
 801c96a:	b088      	sub	sp, #32
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	60f8      	str	r0, [r7, #12]
 801c970:	60b9      	str	r1, [r7, #8]
 801c972:	607a      	str	r2, [r7, #4]
 801c974:	603b      	str	r3, [r7, #0]
    int glyph_len;
    nk_rune unicode;
    const char *begin;
    const char *buffer;

    NK_ASSERT(str);
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d105      	bne.n	801c988 <nk_str_insert_at_rune+0x20>
 801c97c:	4b26      	ldr	r3, [pc, #152]	; (801ca18 <nk_str_insert_at_rune+0xb0>)
 801c97e:	4a27      	ldr	r2, [pc, #156]	; (801ca1c <nk_str_insert_at_rune+0xb4>)
 801c980:	219c      	movs	r1, #156	; 0x9c
 801c982:	4827      	ldr	r0, [pc, #156]	; (801ca20 <nk_str_insert_at_rune+0xb8>)
 801c984:	f008 f8a8 	bl	8024ad8 <__assert_func>
    NK_ASSERT(cstr);
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d105      	bne.n	801c99a <nk_str_insert_at_rune+0x32>
 801c98e:	4b25      	ldr	r3, [pc, #148]	; (801ca24 <nk_str_insert_at_rune+0xbc>)
 801c990:	4a22      	ldr	r2, [pc, #136]	; (801ca1c <nk_str_insert_at_rune+0xb4>)
 801c992:	219d      	movs	r1, #157	; 0x9d
 801c994:	4822      	ldr	r0, [pc, #136]	; (801ca20 <nk_str_insert_at_rune+0xb8>)
 801c996:	f008 f89f 	bl	8024ad8 <__assert_func>
    NK_ASSERT(len);
 801c99a:	683b      	ldr	r3, [r7, #0]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d105      	bne.n	801c9ac <nk_str_insert_at_rune+0x44>
 801c9a0:	4b21      	ldr	r3, [pc, #132]	; (801ca28 <nk_str_insert_at_rune+0xc0>)
 801c9a2:	4a1e      	ldr	r2, [pc, #120]	; (801ca1c <nk_str_insert_at_rune+0xb4>)
 801c9a4:	219e      	movs	r1, #158	; 0x9e
 801c9a6:	481e      	ldr	r0, [pc, #120]	; (801ca20 <nk_str_insert_at_rune+0xb8>)
 801c9a8:	f008 f896 	bl	8024ad8 <__assert_func>
    if (!str || !cstr || !len) return 0;
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d005      	beq.n	801c9be <nk_str_insert_at_rune+0x56>
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d002      	beq.n	801c9be <nk_str_insert_at_rune+0x56>
 801c9b8:	683b      	ldr	r3, [r7, #0]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d101      	bne.n	801c9c2 <nk_str_insert_at_rune+0x5a>
 801c9be:	2300      	movs	r3, #0
 801c9c0:	e025      	b.n	801ca0e <nk_str_insert_at_rune+0xa6>
    begin = nk_str_at_rune(str, pos, &unicode, &glyph_len);
 801c9c2:	f107 0314 	add.w	r3, r7, #20
 801c9c6:	f107 0210 	add.w	r2, r7, #16
 801c9ca:	68b9      	ldr	r1, [r7, #8]
 801c9cc:	68f8      	ldr	r0, [r7, #12]
 801c9ce:	f000 fa13 	bl	801cdf8 <nk_str_at_rune>
 801c9d2:	61f8      	str	r0, [r7, #28]
    if (!str->len)
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d106      	bne.n	801c9ea <nk_str_insert_at_rune+0x82>
        return nk_str_append_text_char(str, cstr, len);
 801c9dc:	683a      	ldr	r2, [r7, #0]
 801c9de:	6879      	ldr	r1, [r7, #4]
 801c9e0:	68f8      	ldr	r0, [r7, #12]
 801c9e2:	f7ff feb1 	bl	801c748 <nk_str_append_text_char>
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	e011      	b.n	801ca0e <nk_str_insert_at_rune+0xa6>
    buffer = nk_str_get_const(str);
 801c9ea:	68f8      	ldr	r0, [r7, #12]
 801c9ec:	f000 fb1c 	bl	801d028 <nk_str_get_const>
 801c9f0:	61b8      	str	r0, [r7, #24]
    if (!begin) return 0;
 801c9f2:	69fb      	ldr	r3, [r7, #28]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d101      	bne.n	801c9fc <nk_str_insert_at_rune+0x94>
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	e008      	b.n	801ca0e <nk_str_insert_at_rune+0xa6>
    return nk_str_insert_at_char(str, (int)(begin - buffer), cstr, len);
 801c9fc:	69fa      	ldr	r2, [r7, #28]
 801c9fe:	69bb      	ldr	r3, [r7, #24]
 801ca00:	1ad1      	subs	r1, r2, r3
 801ca02:	683b      	ldr	r3, [r7, #0]
 801ca04:	687a      	ldr	r2, [r7, #4]
 801ca06:	68f8      	ldr	r0, [r7, #12]
 801ca08:	f7ff feea 	bl	801c7e0 <nk_str_insert_at_char>
 801ca0c:	4603      	mov	r3, r0
}
 801ca0e:	4618      	mov	r0, r3
 801ca10:	3720      	adds	r7, #32
 801ca12:	46bd      	mov	sp, r7
 801ca14:	bd80      	pop	{r7, pc}
 801ca16:	bf00      	nop
 801ca18:	08028df8 	.word	0x08028df8
 801ca1c:	0802a9ec 	.word	0x0802a9ec
 801ca20:	08028ddc 	.word	0x08028ddc
 801ca24:	08028e60 	.word	0x08028e60
 801ca28:	08028e68 	.word	0x08028e68

0801ca2c <nk_str_insert_text_utf8>:
{
    return nk_str_insert_text_utf8(str, pos, text, nk_strlen(text));
}
NK_API int
nk_str_insert_text_utf8(struct nk_str *str, int pos, const char *text, int len)
{
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b088      	sub	sp, #32
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	60f8      	str	r0, [r7, #12]
 801ca34:	60b9      	str	r1, [r7, #8]
 801ca36:	607a      	str	r2, [r7, #4]
 801ca38:	603b      	str	r3, [r7, #0]
    int i = 0;
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	61fb      	str	r3, [r7, #28]
    int byte_len = 0;
 801ca3e:	2300      	movs	r3, #0
 801ca40:	61bb      	str	r3, [r7, #24]
    nk_rune unicode;

    NK_ASSERT(str);
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d105      	bne.n	801ca54 <nk_str_insert_text_utf8+0x28>
 801ca48:	4b1d      	ldr	r3, [pc, #116]	; (801cac0 <nk_str_insert_text_utf8+0x94>)
 801ca4a:	4a1e      	ldr	r2, [pc, #120]	; (801cac4 <nk_str_insert_text_utf8+0x98>)
 801ca4c:	21b8      	movs	r1, #184	; 0xb8
 801ca4e:	481e      	ldr	r0, [pc, #120]	; (801cac8 <nk_str_insert_text_utf8+0x9c>)
 801ca50:	f008 f842 	bl	8024ad8 <__assert_func>
    NK_ASSERT(text);
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d105      	bne.n	801ca66 <nk_str_insert_text_utf8+0x3a>
 801ca5a:	4b1c      	ldr	r3, [pc, #112]	; (801cacc <nk_str_insert_text_utf8+0xa0>)
 801ca5c:	4a19      	ldr	r2, [pc, #100]	; (801cac4 <nk_str_insert_text_utf8+0x98>)
 801ca5e:	21b9      	movs	r1, #185	; 0xb9
 801ca60:	4819      	ldr	r0, [pc, #100]	; (801cac8 <nk_str_insert_text_utf8+0x9c>)
 801ca62:	f008 f839 	bl	8024ad8 <__assert_func>
    if (!str || !text || !len) return 0;
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d005      	beq.n	801ca78 <nk_str_insert_text_utf8+0x4c>
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d002      	beq.n	801ca78 <nk_str_insert_text_utf8+0x4c>
 801ca72:	683b      	ldr	r3, [r7, #0]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d101      	bne.n	801ca7c <nk_str_insert_text_utf8+0x50>
 801ca78:	2300      	movs	r3, #0
 801ca7a:	e01d      	b.n	801cab8 <nk_str_insert_text_utf8+0x8c>
    for (i = 0; i < len; ++i)
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	61fb      	str	r3, [r7, #28]
 801ca80:	e00f      	b.n	801caa2 <nk_str_insert_text_utf8+0x76>
        byte_len += nk_utf_decode(text+byte_len, &unicode, 4);
 801ca82:	69bb      	ldr	r3, [r7, #24]
 801ca84:	687a      	ldr	r2, [r7, #4]
 801ca86:	4413      	add	r3, r2
 801ca88:	f107 0114 	add.w	r1, r7, #20
 801ca8c:	2204      	movs	r2, #4
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f005 fb7e 	bl	8022190 <nk_utf_decode>
 801ca94:	4602      	mov	r2, r0
 801ca96:	69bb      	ldr	r3, [r7, #24]
 801ca98:	4413      	add	r3, r2
 801ca9a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; ++i)
 801ca9c:	69fb      	ldr	r3, [r7, #28]
 801ca9e:	3301      	adds	r3, #1
 801caa0:	61fb      	str	r3, [r7, #28]
 801caa2:	69fa      	ldr	r2, [r7, #28]
 801caa4:	683b      	ldr	r3, [r7, #0]
 801caa6:	429a      	cmp	r2, r3
 801caa8:	dbeb      	blt.n	801ca82 <nk_str_insert_text_utf8+0x56>
    nk_str_insert_at_rune(str, pos, text, byte_len);
 801caaa:	69bb      	ldr	r3, [r7, #24]
 801caac:	687a      	ldr	r2, [r7, #4]
 801caae:	68b9      	ldr	r1, [r7, #8]
 801cab0:	68f8      	ldr	r0, [r7, #12]
 801cab2:	f7ff ff59 	bl	801c968 <nk_str_insert_at_rune>
    return len;
 801cab6:	683b      	ldr	r3, [r7, #0]
}
 801cab8:	4618      	mov	r0, r3
 801caba:	3720      	adds	r7, #32
 801cabc:	46bd      	mov	sp, r7
 801cabe:	bd80      	pop	{r7, pc}
 801cac0:	08028df8 	.word	0x08028df8
 801cac4:	0802aa04 	.word	0x0802aa04
 801cac8:	08028ddc 	.word	0x08028ddc
 801cacc:	08028e6c 	.word	0x08028e6c

0801cad0 <nk_str_insert_text_runes>:
    nk_str_insert_at_rune(str, pos, text, byte_len);
    return num_runes;
}
NK_API int
nk_str_insert_text_runes(struct nk_str *str, int pos, const nk_rune *runes, int len)
{
 801cad0:	b580      	push	{r7, lr}
 801cad2:	b088      	sub	sp, #32
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	60f8      	str	r0, [r7, #12]
 801cad8:	60b9      	str	r1, [r7, #8]
 801cada:	607a      	str	r2, [r7, #4]
 801cadc:	603b      	str	r3, [r7, #0]
    int i = 0;
 801cade:	2300      	movs	r3, #0
 801cae0:	61fb      	str	r3, [r7, #28]
    int byte_len = 0;
 801cae2:	2300      	movs	r3, #0
 801cae4:	61bb      	str	r3, [r7, #24]
    nk_glyph glyph;

    NK_ASSERT(str);
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d105      	bne.n	801caf8 <nk_str_insert_text_runes+0x28>
 801caec:	4b1c      	ldr	r3, [pc, #112]	; (801cb60 <nk_str_insert_text_runes+0x90>)
 801caee:	4a1d      	ldr	r2, [pc, #116]	; (801cb64 <nk_str_insert_text_runes+0x94>)
 801caf0:	21d9      	movs	r1, #217	; 0xd9
 801caf2:	481d      	ldr	r0, [pc, #116]	; (801cb68 <nk_str_insert_text_runes+0x98>)
 801caf4:	f007 fff0 	bl	8024ad8 <__assert_func>
    if (!str || !runes || !len) return 0;
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d005      	beq.n	801cb0a <nk_str_insert_text_runes+0x3a>
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d002      	beq.n	801cb0a <nk_str_insert_text_runes+0x3a>
 801cb04:	683b      	ldr	r3, [r7, #0]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d101      	bne.n	801cb0e <nk_str_insert_text_runes+0x3e>
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	e024      	b.n	801cb58 <nk_str_insert_text_runes+0x88>
    for (i = 0; i < len; ++i) {
 801cb0e:	2300      	movs	r3, #0
 801cb10:	61fb      	str	r3, [r7, #28]
 801cb12:	e01a      	b.n	801cb4a <nk_str_insert_text_runes+0x7a>
        byte_len = nk_utf_encode(runes[i], glyph, NK_UTF_SIZE);
 801cb14:	69fb      	ldr	r3, [r7, #28]
 801cb16:	009b      	lsls	r3, r3, #2
 801cb18:	687a      	ldr	r2, [r7, #4]
 801cb1a:	4413      	add	r3, r2
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	f107 0114 	add.w	r1, r7, #20
 801cb22:	2204      	movs	r2, #4
 801cb24:	4618      	mov	r0, r3
 801cb26:	f005 fbd3 	bl	80222d0 <nk_utf_encode>
 801cb2a:	61b8      	str	r0, [r7, #24]
        if (!byte_len) break;
 801cb2c:	69bb      	ldr	r3, [r7, #24]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d010      	beq.n	801cb54 <nk_str_insert_text_runes+0x84>
        nk_str_insert_at_rune(str, pos+i, glyph, byte_len);
 801cb32:	68ba      	ldr	r2, [r7, #8]
 801cb34:	69fb      	ldr	r3, [r7, #28]
 801cb36:	18d1      	adds	r1, r2, r3
 801cb38:	f107 0214 	add.w	r2, r7, #20
 801cb3c:	69bb      	ldr	r3, [r7, #24]
 801cb3e:	68f8      	ldr	r0, [r7, #12]
 801cb40:	f7ff ff12 	bl	801c968 <nk_str_insert_at_rune>
    for (i = 0; i < len; ++i) {
 801cb44:	69fb      	ldr	r3, [r7, #28]
 801cb46:	3301      	adds	r3, #1
 801cb48:	61fb      	str	r3, [r7, #28]
 801cb4a:	69fa      	ldr	r2, [r7, #28]
 801cb4c:	683b      	ldr	r3, [r7, #0]
 801cb4e:	429a      	cmp	r2, r3
 801cb50:	dbe0      	blt.n	801cb14 <nk_str_insert_text_runes+0x44>
 801cb52:	e000      	b.n	801cb56 <nk_str_insert_text_runes+0x86>
        if (!byte_len) break;
 801cb54:	bf00      	nop
    }
    return len;
 801cb56:	683b      	ldr	r3, [r7, #0]
}
 801cb58:	4618      	mov	r0, r3
 801cb5a:	3720      	adds	r7, #32
 801cb5c:	46bd      	mov	sp, r7
 801cb5e:	bd80      	pop	{r7, pc}
 801cb60:	08028df8 	.word	0x08028df8
 801cb64:	0802aa1c 	.word	0x0802aa1c
 801cb68:	08028ddc 	.word	0x08028ddc

0801cb6c <nk_str_remove_chars>:
    }
    return i;
}
NK_API void
nk_str_remove_chars(struct nk_str *s, int len)
{
 801cb6c:	b580      	push	{r7, lr}
 801cb6e:	b082      	sub	sp, #8
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	6078      	str	r0, [r7, #4]
 801cb74:	6039      	str	r1, [r7, #0]
    NK_ASSERT(s);
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d105      	bne.n	801cb88 <nk_str_remove_chars+0x1c>
 801cb7c:	4b1e      	ldr	r3, [pc, #120]	; (801cbf8 <nk_str_remove_chars+0x8c>)
 801cb7e:	4a1f      	ldr	r2, [pc, #124]	; (801cbfc <nk_str_remove_chars+0x90>)
 801cb80:	21f4      	movs	r1, #244	; 0xf4
 801cb82:	481f      	ldr	r0, [pc, #124]	; (801cc00 <nk_str_remove_chars+0x94>)
 801cb84:	f007 ffa8 	bl	8024ad8 <__assert_func>
    NK_ASSERT(len >= 0);
 801cb88:	683b      	ldr	r3, [r7, #0]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	da05      	bge.n	801cb9a <nk_str_remove_chars+0x2e>
 801cb8e:	4b1d      	ldr	r3, [pc, #116]	; (801cc04 <nk_str_remove_chars+0x98>)
 801cb90:	4a1a      	ldr	r2, [pc, #104]	; (801cbfc <nk_str_remove_chars+0x90>)
 801cb92:	21f5      	movs	r1, #245	; 0xf5
 801cb94:	481a      	ldr	r0, [pc, #104]	; (801cc00 <nk_str_remove_chars+0x94>)
 801cb96:	f007 ff9f 	bl	8024ad8 <__assert_func>
    if (!s || len < 0 || (nk_size)len > s->buffer.allocated) return;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d026      	beq.n	801cbee <nk_str_remove_chars+0x82>
 801cba0:	683b      	ldr	r3, [r7, #0]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	db23      	blt.n	801cbee <nk_str_remove_chars+0x82>
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cbaa:	683b      	ldr	r3, [r7, #0]
 801cbac:	429a      	cmp	r2, r3
 801cbae:	d31e      	bcc.n	801cbee <nk_str_remove_chars+0x82>
    NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbb4:	461a      	mov	r2, r3
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	1ad3      	subs	r3, r2, r3
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	da05      	bge.n	801cbca <nk_str_remove_chars+0x5e>
 801cbbe:	4b12      	ldr	r3, [pc, #72]	; (801cc08 <nk_str_remove_chars+0x9c>)
 801cbc0:	4a0e      	ldr	r2, [pc, #56]	; (801cbfc <nk_str_remove_chars+0x90>)
 801cbc2:	21f7      	movs	r1, #247	; 0xf7
 801cbc4:	480e      	ldr	r0, [pc, #56]	; (801cc00 <nk_str_remove_chars+0x94>)
 801cbc6:	f007 ff87 	bl	8024ad8 <__assert_func>
    s->buffer.allocated -= (nk_size)len;
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cbce:	683b      	ldr	r3, [r7, #0]
 801cbd0:	1ad2      	subs	r2, r2, r3
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	62da      	str	r2, [r3, #44]	; 0x2c
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	6a1a      	ldr	r2, [r3, #32]
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbde:	4619      	mov	r1, r3
 801cbe0:	4610      	mov	r0, r2
 801cbe2:	f005 fbb3 	bl	802234c <nk_utf_len>
 801cbe6:	4602      	mov	r2, r0
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	63da      	str	r2, [r3, #60]	; 0x3c
 801cbec:	e000      	b.n	801cbf0 <nk_str_remove_chars+0x84>
    if (!s || len < 0 || (nk_size)len > s->buffer.allocated) return;
 801cbee:	bf00      	nop
}
 801cbf0:	3708      	adds	r7, #8
 801cbf2:	46bd      	mov	sp, r7
 801cbf4:	bd80      	pop	{r7, pc}
 801cbf6:	bf00      	nop
 801cbf8:	08028dd8 	.word	0x08028dd8
 801cbfc:	0802aa38 	.word	0x0802aa38
 801cc00:	08028ddc 	.word	0x08028ddc
 801cc04:	08028dfc 	.word	0x08028dfc
 801cc08:	08028e74 	.word	0x08028e74

0801cc0c <nk_str_delete_chars>:
    end = (const char*)str->buffer.memory.ptr + str->buffer.allocated;
    nk_str_remove_chars(str, (int)(end-begin)+1);
}
NK_API void
nk_str_delete_chars(struct nk_str *s, int pos, int len)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b086      	sub	sp, #24
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	60f8      	str	r0, [r7, #12]
 801cc14:	60b9      	str	r1, [r7, #8]
 801cc16:	607a      	str	r2, [r7, #4]
    NK_ASSERT(s);
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d106      	bne.n	801cc2c <nk_str_delete_chars+0x20>
 801cc1e:	4b31      	ldr	r3, [pc, #196]	; (801cce4 <nk_str_delete_chars+0xd8>)
 801cc20:	4a31      	ldr	r2, [pc, #196]	; (801cce8 <nk_str_delete_chars+0xdc>)
 801cc22:	f240 1113 	movw	r1, #275	; 0x113
 801cc26:	4831      	ldr	r0, [pc, #196]	; (801ccec <nk_str_delete_chars+0xe0>)
 801cc28:	f007 ff56 	bl	8024ad8 <__assert_func>
    if (!s || !len || (nk_size)pos > s->buffer.allocated ||
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d053      	beq.n	801ccda <nk_str_delete_chars+0xce>
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d050      	beq.n	801ccda <nk_str_delete_chars+0xce>
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cc3c:	68bb      	ldr	r3, [r7, #8]
 801cc3e:	429a      	cmp	r2, r3
 801cc40:	d34b      	bcc.n	801ccda <nk_str_delete_chars+0xce>
        (nk_size)(pos + len) > s->buffer.allocated) return;
 801cc42:	68ba      	ldr	r2, [r7, #8]
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	4413      	add	r3, r2
 801cc48:	461a      	mov	r2, r3
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if (!s || !len || (nk_size)pos > s->buffer.allocated ||
 801cc4e:	429a      	cmp	r2, r3
 801cc50:	d843      	bhi.n	801ccda <nk_str_delete_chars+0xce>

    if ((nk_size)(pos + len) < s->buffer.allocated) {
 801cc52:	68ba      	ldr	r2, [r7, #8]
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	4413      	add	r3, r2
 801cc58:	461a      	mov	r2, r3
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	d22b      	bcs.n	801ccba <nk_str_delete_chars+0xae>
        /* memmove */
        char *dst = nk_ptr_add(char, s->buffer.memory.ptr, pos);
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	6a1a      	ldr	r2, [r3, #32]
 801cc66:	68bb      	ldr	r3, [r7, #8]
 801cc68:	4413      	add	r3, r2
 801cc6a:	617b      	str	r3, [r7, #20]
        char *src = nk_ptr_add(char, s->buffer.memory.ptr, pos + len);
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	6a1b      	ldr	r3, [r3, #32]
 801cc70:	68b9      	ldr	r1, [r7, #8]
 801cc72:	687a      	ldr	r2, [r7, #4]
 801cc74:	440a      	add	r2, r1
 801cc76:	4413      	add	r3, r2
 801cc78:	613b      	str	r3, [r7, #16]
        NK_MEMCPY(dst, src, s->buffer.allocated - (nk_size)(pos + len));
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc7e:	68b9      	ldr	r1, [r7, #8]
 801cc80:	687a      	ldr	r2, [r7, #4]
 801cc82:	440a      	add	r2, r1
 801cc84:	1a9b      	subs	r3, r3, r2
 801cc86:	461a      	mov	r2, r3
 801cc88:	6939      	ldr	r1, [r7, #16]
 801cc8a:	6978      	ldr	r0, [r7, #20]
 801cc8c:	f005 fbaa 	bl	80223e4 <nk_memcopy>
        NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc94:	461a      	mov	r2, r3
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	1ad3      	subs	r3, r2, r3
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	da06      	bge.n	801ccac <nk_str_delete_chars+0xa0>
 801cc9e:	4b14      	ldr	r3, [pc, #80]	; (801ccf0 <nk_str_delete_chars+0xe4>)
 801cca0:	4a11      	ldr	r2, [pc, #68]	; (801cce8 <nk_str_delete_chars+0xdc>)
 801cca2:	f44f 718e 	mov.w	r1, #284	; 0x11c
 801cca6:	4811      	ldr	r0, [pc, #68]	; (801ccec <nk_str_delete_chars+0xe0>)
 801cca8:	f007 ff16 	bl	8024ad8 <__assert_func>
        s->buffer.allocated -= (nk_size)len;
 801ccac:	68fb      	ldr	r3, [r7, #12]
 801ccae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	1ad2      	subs	r2, r2, r3
 801ccb4:	68fb      	ldr	r3, [r7, #12]
 801ccb6:	62da      	str	r2, [r3, #44]	; 0x2c
 801ccb8:	e003      	b.n	801ccc2 <nk_str_delete_chars+0xb6>
    } else nk_str_remove_chars(s, len);
 801ccba:	6879      	ldr	r1, [r7, #4]
 801ccbc:	68f8      	ldr	r0, [r7, #12]
 801ccbe:	f7ff ff55 	bl	801cb6c <nk_str_remove_chars>
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	6a1a      	ldr	r2, [r3, #32]
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccca:	4619      	mov	r1, r3
 801cccc:	4610      	mov	r0, r2
 801ccce:	f005 fb3d 	bl	802234c <nk_utf_len>
 801ccd2:	4602      	mov	r2, r0
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	63da      	str	r2, [r3, #60]	; 0x3c
 801ccd8:	e000      	b.n	801ccdc <nk_str_delete_chars+0xd0>
        (nk_size)(pos + len) > s->buffer.allocated) return;
 801ccda:	bf00      	nop
}
 801ccdc:	3718      	adds	r7, #24
 801ccde:	46bd      	mov	sp, r7
 801cce0:	bd80      	pop	{r7, pc}
 801cce2:	bf00      	nop
 801cce4:	08028dd8 	.word	0x08028dd8
 801cce8:	0802aa4c 	.word	0x0802aa4c
 801ccec:	08028ddc 	.word	0x08028ddc
 801ccf0:	08028e74 	.word	0x08028e74

0801ccf4 <nk_str_delete_runes>:
NK_API void
nk_str_delete_runes(struct nk_str *s, int pos, int len)
{
 801ccf4:	b580      	push	{r7, lr}
 801ccf6:	b08a      	sub	sp, #40	; 0x28
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	60f8      	str	r0, [r7, #12]
 801ccfc:	60b9      	str	r1, [r7, #8]
 801ccfe:	607a      	str	r2, [r7, #4]
    nk_rune unicode;
    char *begin;
    char *end;
    int unused;

    NK_ASSERT(s);
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d106      	bne.n	801cd14 <nk_str_delete_runes+0x20>
 801cd06:	4b38      	ldr	r3, [pc, #224]	; (801cde8 <nk_str_delete_runes+0xf4>)
 801cd08:	4a38      	ldr	r2, [pc, #224]	; (801cdec <nk_str_delete_runes+0xf8>)
 801cd0a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 801cd0e:	4838      	ldr	r0, [pc, #224]	; (801cdf0 <nk_str_delete_runes+0xfc>)
 801cd10:	f007 fee2 	bl	8024ad8 <__assert_func>
    NK_ASSERT(s->len >= pos + len);
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd18:	68b9      	ldr	r1, [r7, #8]
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	440b      	add	r3, r1
 801cd1e:	429a      	cmp	r2, r3
 801cd20:	da06      	bge.n	801cd30 <nk_str_delete_runes+0x3c>
 801cd22:	4b34      	ldr	r3, [pc, #208]	; (801cdf4 <nk_str_delete_runes+0x100>)
 801cd24:	4a31      	ldr	r2, [pc, #196]	; (801cdec <nk_str_delete_runes+0xf8>)
 801cd26:	f240 112b 	movw	r1, #299	; 0x12b
 801cd2a:	4831      	ldr	r0, [pc, #196]	; (801cdf0 <nk_str_delete_runes+0xfc>)
 801cd2c:	f007 fed4 	bl	8024ad8 <__assert_func>
    if (s->len < pos + len)
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd34:	68b9      	ldr	r1, [r7, #8]
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	440b      	add	r3, r1
 801cd3a:	429a      	cmp	r2, r3
 801cd3c:	da1c      	bge.n	801cd78 <nk_str_delete_runes+0x84>
        len = NK_CLAMP(0, (s->len - pos), s->len);
 801cd3e:	68bb      	ldr	r3, [r7, #8]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	dd06      	ble.n	801cd52 <nk_str_delete_runes+0x5e>
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd48:	68bb      	ldr	r3, [r7, #8]
 801cd4a:	1ad3      	subs	r3, r2, r3
 801cd4c:	0fdb      	lsrs	r3, r3, #31
 801cd4e:	b2db      	uxtb	r3, r3
 801cd50:	e003      	b.n	801cd5a <nk_str_delete_runes+0x66>
 801cd52:	68fb      	ldr	r3, [r7, #12]
 801cd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd56:	0fdb      	lsrs	r3, r3, #31
 801cd58:	b2db      	uxtb	r3, r3
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d001      	beq.n	801cd62 <nk_str_delete_runes+0x6e>
 801cd5e:	2300      	movs	r3, #0
 801cd60:	e009      	b.n	801cd76 <nk_str_delete_runes+0x82>
 801cd62:	68bb      	ldr	r3, [r7, #8]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	dd04      	ble.n	801cd72 <nk_str_delete_runes+0x7e>
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd6c:	68bb      	ldr	r3, [r7, #8]
 801cd6e:	1ad3      	subs	r3, r2, r3
 801cd70:	e001      	b.n	801cd76 <nk_str_delete_runes+0x82>
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd76:	607b      	str	r3, [r7, #4]
    if (!len) return;
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d02b      	beq.n	801cdd6 <nk_str_delete_runes+0xe2>

    temp = (char *)s->buffer.memory.ptr;
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	6a1b      	ldr	r3, [r3, #32]
 801cd82:	627b      	str	r3, [r7, #36]	; 0x24
    begin = nk_str_at_rune(s, pos, &unicode, &unused);
 801cd84:	f107 0314 	add.w	r3, r7, #20
 801cd88:	f107 0218 	add.w	r2, r7, #24
 801cd8c:	68b9      	ldr	r1, [r7, #8]
 801cd8e:	68f8      	ldr	r0, [r7, #12]
 801cd90:	f000 f832 	bl	801cdf8 <nk_str_at_rune>
 801cd94:	6238      	str	r0, [r7, #32]
    if (!begin) return;
 801cd96:	6a3b      	ldr	r3, [r7, #32]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d01e      	beq.n	801cdda <nk_str_delete_runes+0xe6>
    s->buffer.memory.ptr = begin;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	6a3a      	ldr	r2, [r7, #32]
 801cda0:	621a      	str	r2, [r3, #32]
    end = nk_str_at_rune(s, len, &unicode, &unused);
 801cda2:	f107 0314 	add.w	r3, r7, #20
 801cda6:	f107 0218 	add.w	r2, r7, #24
 801cdaa:	6879      	ldr	r1, [r7, #4]
 801cdac:	68f8      	ldr	r0, [r7, #12]
 801cdae:	f000 f823 	bl	801cdf8 <nk_str_at_rune>
 801cdb2:	61f8      	str	r0, [r7, #28]
    s->buffer.memory.ptr = temp;
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cdb8:	621a      	str	r2, [r3, #32]
    if (!end) return;
 801cdba:	69fb      	ldr	r3, [r7, #28]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d00e      	beq.n	801cdde <nk_str_delete_runes+0xea>
    nk_str_delete_chars(s, (int)(begin - temp), (int)(end - begin));
 801cdc0:	6a3a      	ldr	r2, [r7, #32]
 801cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc4:	1ad1      	subs	r1, r2, r3
 801cdc6:	69fa      	ldr	r2, [r7, #28]
 801cdc8:	6a3b      	ldr	r3, [r7, #32]
 801cdca:	1ad3      	subs	r3, r2, r3
 801cdcc:	461a      	mov	r2, r3
 801cdce:	68f8      	ldr	r0, [r7, #12]
 801cdd0:	f7ff ff1c 	bl	801cc0c <nk_str_delete_chars>
 801cdd4:	e004      	b.n	801cde0 <nk_str_delete_runes+0xec>
    if (!len) return;
 801cdd6:	bf00      	nop
 801cdd8:	e002      	b.n	801cde0 <nk_str_delete_runes+0xec>
    if (!begin) return;
 801cdda:	bf00      	nop
 801cddc:	e000      	b.n	801cde0 <nk_str_delete_runes+0xec>
    if (!end) return;
 801cdde:	bf00      	nop
}
 801cde0:	3728      	adds	r7, #40	; 0x28
 801cde2:	46bd      	mov	sp, r7
 801cde4:	bd80      	pop	{r7, pc}
 801cde6:	bf00      	nop
 801cde8:	08028dd8 	.word	0x08028dd8
 801cdec:	0802aa60 	.word	0x0802aa60
 801cdf0:	08028ddc 	.word	0x08028ddc
 801cdf4:	08028ea0 	.word	0x08028ea0

0801cdf8 <nk_str_at_rune>:
    if (!s || pos > (int)s->buffer.allocated) return 0;
    return nk_ptr_add(char, s->buffer.memory.ptr, pos);
}
NK_API char*
nk_str_at_rune(struct nk_str *str, int pos, nk_rune *unicode, int *len)
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b08a      	sub	sp, #40	; 0x28
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	60f8      	str	r0, [r7, #12]
 801ce00:	60b9      	str	r1, [r7, #8]
 801ce02:	607a      	str	r2, [r7, #4]
 801ce04:	603b      	str	r3, [r7, #0]
    int i = 0;
 801ce06:	2300      	movs	r3, #0
 801ce08:	627b      	str	r3, [r7, #36]	; 0x24
    int src_len = 0;
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	623b      	str	r3, [r7, #32]
    int glyph_len = 0;
 801ce0e:	2300      	movs	r3, #0
 801ce10:	61fb      	str	r3, [r7, #28]
    char *text;
    int text_len;

    NK_ASSERT(str);
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d106      	bne.n	801ce26 <nk_str_at_rune+0x2e>
 801ce18:	4b33      	ldr	r3, [pc, #204]	; (801cee8 <nk_str_at_rune+0xf0>)
 801ce1a:	4a34      	ldr	r2, [pc, #208]	; (801ceec <nk_str_at_rune+0xf4>)
 801ce1c:	f240 1149 	movw	r1, #329	; 0x149
 801ce20:	4833      	ldr	r0, [pc, #204]	; (801cef0 <nk_str_at_rune+0xf8>)
 801ce22:	f007 fe59 	bl	8024ad8 <__assert_func>
    NK_ASSERT(unicode);
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d106      	bne.n	801ce3a <nk_str_at_rune+0x42>
 801ce2c:	4b31      	ldr	r3, [pc, #196]	; (801cef4 <nk_str_at_rune+0xfc>)
 801ce2e:	4a2f      	ldr	r2, [pc, #188]	; (801ceec <nk_str_at_rune+0xf4>)
 801ce30:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801ce34:	482e      	ldr	r0, [pc, #184]	; (801cef0 <nk_str_at_rune+0xf8>)
 801ce36:	f007 fe4f 	bl	8024ad8 <__assert_func>
    NK_ASSERT(len);
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d106      	bne.n	801ce4e <nk_str_at_rune+0x56>
 801ce40:	4b2d      	ldr	r3, [pc, #180]	; (801cef8 <nk_str_at_rune+0x100>)
 801ce42:	4a2a      	ldr	r2, [pc, #168]	; (801ceec <nk_str_at_rune+0xf4>)
 801ce44:	f240 114b 	movw	r1, #331	; 0x14b
 801ce48:	4829      	ldr	r0, [pc, #164]	; (801cef0 <nk_str_at_rune+0xf8>)
 801ce4a:	f007 fe45 	bl	8024ad8 <__assert_func>

    if (!str || !unicode || !len) return 0;
 801ce4e:	68fb      	ldr	r3, [r7, #12]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d005      	beq.n	801ce60 <nk_str_at_rune+0x68>
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d002      	beq.n	801ce60 <nk_str_at_rune+0x68>
 801ce5a:	683b      	ldr	r3, [r7, #0]
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d101      	bne.n	801ce64 <nk_str_at_rune+0x6c>
 801ce60:	2300      	movs	r3, #0
 801ce62:	e03d      	b.n	801cee0 <nk_str_at_rune+0xe8>
    if (pos < 0) {
 801ce64:	68bb      	ldr	r3, [r7, #8]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	da07      	bge.n	801ce7a <nk_str_at_rune+0x82>
        *unicode = 0;
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	601a      	str	r2, [r3, #0]
        *len = 0;
 801ce70:	683b      	ldr	r3, [r7, #0]
 801ce72:	2200      	movs	r2, #0
 801ce74:	601a      	str	r2, [r3, #0]
        return 0;
 801ce76:	2300      	movs	r3, #0
 801ce78:	e032      	b.n	801cee0 <nk_str_at_rune+0xe8>
    }

    text = (char*)str->buffer.memory.ptr;
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	6a1b      	ldr	r3, [r3, #32]
 801ce7e:	61bb      	str	r3, [r7, #24]
    text_len = (int)str->buffer.allocated;
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce84:	617b      	str	r3, [r7, #20]
    glyph_len = nk_utf_decode(text, unicode, text_len);
 801ce86:	697a      	ldr	r2, [r7, #20]
 801ce88:	6879      	ldr	r1, [r7, #4]
 801ce8a:	69b8      	ldr	r0, [r7, #24]
 801ce8c:	f005 f980 	bl	8022190 <nk_utf_decode>
 801ce90:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801ce92:	e019      	b.n	801cec8 <nk_str_at_rune+0xd0>
        if (i == pos) {
 801ce94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	429a      	cmp	r2, r3
 801ce9a:	d103      	bne.n	801cea4 <nk_str_at_rune+0xac>
            *len = glyph_len;
 801ce9c:	683b      	ldr	r3, [r7, #0]
 801ce9e:	69fa      	ldr	r2, [r7, #28]
 801cea0:	601a      	str	r2, [r3, #0]
            break;
 801cea2:	e014      	b.n	801cece <nk_str_at_rune+0xd6>
        }

        i++;
 801cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cea6:	3301      	adds	r3, #1
 801cea8:	627b      	str	r3, [r7, #36]	; 0x24
        src_len = src_len + glyph_len;
 801ceaa:	6a3a      	ldr	r2, [r7, #32]
 801ceac:	69fb      	ldr	r3, [r7, #28]
 801ceae:	4413      	add	r3, r2
 801ceb0:	623b      	str	r3, [r7, #32]
        glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);
 801ceb2:	6a3b      	ldr	r3, [r7, #32]
 801ceb4:	69ba      	ldr	r2, [r7, #24]
 801ceb6:	18d0      	adds	r0, r2, r3
 801ceb8:	697a      	ldr	r2, [r7, #20]
 801ceba:	6a3b      	ldr	r3, [r7, #32]
 801cebc:	1ad3      	subs	r3, r2, r3
 801cebe:	461a      	mov	r2, r3
 801cec0:	6879      	ldr	r1, [r7, #4]
 801cec2:	f005 f965 	bl	8022190 <nk_utf_decode>
 801cec6:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801cec8:	69fb      	ldr	r3, [r7, #28]
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d1e2      	bne.n	801ce94 <nk_str_at_rune+0x9c>
    }
    if (i != pos) return 0;
 801cece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ced0:	68bb      	ldr	r3, [r7, #8]
 801ced2:	429a      	cmp	r2, r3
 801ced4:	d001      	beq.n	801ceda <nk_str_at_rune+0xe2>
 801ced6:	2300      	movs	r3, #0
 801ced8:	e002      	b.n	801cee0 <nk_str_at_rune+0xe8>
    return text + src_len;
 801ceda:	6a3b      	ldr	r3, [r7, #32]
 801cedc:	69ba      	ldr	r2, [r7, #24]
 801cede:	4413      	add	r3, r2
}
 801cee0:	4618      	mov	r0, r3
 801cee2:	3728      	adds	r7, #40	; 0x28
 801cee4:	46bd      	mov	sp, r7
 801cee6:	bd80      	pop	{r7, pc}
 801cee8:	08028df8 	.word	0x08028df8
 801ceec:	0802aa74 	.word	0x0802aa74
 801cef0:	08028ddc 	.word	0x08028ddc
 801cef4:	08028eb4 	.word	0x08028eb4
 801cef8:	08028e68 	.word	0x08028e68

0801cefc <nk_str_at_const>:
    if (!s || pos > (int)s->buffer.allocated) return 0;
    return nk_ptr_add(char, s->buffer.memory.ptr, pos);
}
NK_API const char*
nk_str_at_const(const struct nk_str *str, int pos, nk_rune *unicode, int *len)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b08a      	sub	sp, #40	; 0x28
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	60f8      	str	r0, [r7, #12]
 801cf04:	60b9      	str	r1, [r7, #8]
 801cf06:	607a      	str	r2, [r7, #4]
 801cf08:	603b      	str	r3, [r7, #0]
    int i = 0;
 801cf0a:	2300      	movs	r3, #0
 801cf0c:	627b      	str	r3, [r7, #36]	; 0x24
    int src_len = 0;
 801cf0e:	2300      	movs	r3, #0
 801cf10:	623b      	str	r3, [r7, #32]
    int glyph_len = 0;
 801cf12:	2300      	movs	r3, #0
 801cf14:	61fb      	str	r3, [r7, #28]
    char *text;
    int text_len;

    NK_ASSERT(str);
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d106      	bne.n	801cf2a <nk_str_at_const+0x2e>
 801cf1c:	4b33      	ldr	r3, [pc, #204]	; (801cfec <nk_str_at_const+0xf0>)
 801cf1e:	4a34      	ldr	r2, [pc, #208]	; (801cff0 <nk_str_at_const+0xf4>)
 801cf20:	f44f 71ba 	mov.w	r1, #372	; 0x174
 801cf24:	4833      	ldr	r0, [pc, #204]	; (801cff4 <nk_str_at_const+0xf8>)
 801cf26:	f007 fdd7 	bl	8024ad8 <__assert_func>
    NK_ASSERT(unicode);
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d106      	bne.n	801cf3e <nk_str_at_const+0x42>
 801cf30:	4b31      	ldr	r3, [pc, #196]	; (801cff8 <nk_str_at_const+0xfc>)
 801cf32:	4a2f      	ldr	r2, [pc, #188]	; (801cff0 <nk_str_at_const+0xf4>)
 801cf34:	f240 1175 	movw	r1, #373	; 0x175
 801cf38:	482e      	ldr	r0, [pc, #184]	; (801cff4 <nk_str_at_const+0xf8>)
 801cf3a:	f007 fdcd 	bl	8024ad8 <__assert_func>
    NK_ASSERT(len);
 801cf3e:	683b      	ldr	r3, [r7, #0]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d106      	bne.n	801cf52 <nk_str_at_const+0x56>
 801cf44:	4b2d      	ldr	r3, [pc, #180]	; (801cffc <nk_str_at_const+0x100>)
 801cf46:	4a2a      	ldr	r2, [pc, #168]	; (801cff0 <nk_str_at_const+0xf4>)
 801cf48:	f44f 71bb 	mov.w	r1, #374	; 0x176
 801cf4c:	4829      	ldr	r0, [pc, #164]	; (801cff4 <nk_str_at_const+0xf8>)
 801cf4e:	f007 fdc3 	bl	8024ad8 <__assert_func>

    if (!str || !unicode || !len) return 0;
 801cf52:	68fb      	ldr	r3, [r7, #12]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d005      	beq.n	801cf64 <nk_str_at_const+0x68>
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d002      	beq.n	801cf64 <nk_str_at_const+0x68>
 801cf5e:	683b      	ldr	r3, [r7, #0]
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	d101      	bne.n	801cf68 <nk_str_at_const+0x6c>
 801cf64:	2300      	movs	r3, #0
 801cf66:	e03d      	b.n	801cfe4 <nk_str_at_const+0xe8>
    if (pos < 0) {
 801cf68:	68bb      	ldr	r3, [r7, #8]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	da07      	bge.n	801cf7e <nk_str_at_const+0x82>
        *unicode = 0;
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	2200      	movs	r2, #0
 801cf72:	601a      	str	r2, [r3, #0]
        *len = 0;
 801cf74:	683b      	ldr	r3, [r7, #0]
 801cf76:	2200      	movs	r2, #0
 801cf78:	601a      	str	r2, [r3, #0]
        return 0;
 801cf7a:	2300      	movs	r3, #0
 801cf7c:	e032      	b.n	801cfe4 <nk_str_at_const+0xe8>
    }

    text = (char*)str->buffer.memory.ptr;
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	6a1b      	ldr	r3, [r3, #32]
 801cf82:	61bb      	str	r3, [r7, #24]
    text_len = (int)str->buffer.allocated;
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf88:	617b      	str	r3, [r7, #20]
    glyph_len = nk_utf_decode(text, unicode, text_len);
 801cf8a:	697a      	ldr	r2, [r7, #20]
 801cf8c:	6879      	ldr	r1, [r7, #4]
 801cf8e:	69b8      	ldr	r0, [r7, #24]
 801cf90:	f005 f8fe 	bl	8022190 <nk_utf_decode>
 801cf94:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801cf96:	e019      	b.n	801cfcc <nk_str_at_const+0xd0>
        if (i == pos) {
 801cf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf9a:	68bb      	ldr	r3, [r7, #8]
 801cf9c:	429a      	cmp	r2, r3
 801cf9e:	d103      	bne.n	801cfa8 <nk_str_at_const+0xac>
            *len = glyph_len;
 801cfa0:	683b      	ldr	r3, [r7, #0]
 801cfa2:	69fa      	ldr	r2, [r7, #28]
 801cfa4:	601a      	str	r2, [r3, #0]
            break;
 801cfa6:	e014      	b.n	801cfd2 <nk_str_at_const+0xd6>
        }

        i++;
 801cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfaa:	3301      	adds	r3, #1
 801cfac:	627b      	str	r3, [r7, #36]	; 0x24
        src_len = src_len + glyph_len;
 801cfae:	6a3a      	ldr	r2, [r7, #32]
 801cfb0:	69fb      	ldr	r3, [r7, #28]
 801cfb2:	4413      	add	r3, r2
 801cfb4:	623b      	str	r3, [r7, #32]
        glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);
 801cfb6:	6a3b      	ldr	r3, [r7, #32]
 801cfb8:	69ba      	ldr	r2, [r7, #24]
 801cfba:	18d0      	adds	r0, r2, r3
 801cfbc:	697a      	ldr	r2, [r7, #20]
 801cfbe:	6a3b      	ldr	r3, [r7, #32]
 801cfc0:	1ad3      	subs	r3, r2, r3
 801cfc2:	461a      	mov	r2, r3
 801cfc4:	6879      	ldr	r1, [r7, #4]
 801cfc6:	f005 f8e3 	bl	8022190 <nk_utf_decode>
 801cfca:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801cfcc:	69fb      	ldr	r3, [r7, #28]
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d1e2      	bne.n	801cf98 <nk_str_at_const+0x9c>
    }
    if (i != pos) return 0;
 801cfd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cfd4:	68bb      	ldr	r3, [r7, #8]
 801cfd6:	429a      	cmp	r2, r3
 801cfd8:	d001      	beq.n	801cfde <nk_str_at_const+0xe2>
 801cfda:	2300      	movs	r3, #0
 801cfdc:	e002      	b.n	801cfe4 <nk_str_at_const+0xe8>
    return text + src_len;
 801cfde:	6a3b      	ldr	r3, [r7, #32]
 801cfe0:	69ba      	ldr	r2, [r7, #24]
 801cfe2:	4413      	add	r3, r2
}
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	3728      	adds	r7, #40	; 0x28
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	bd80      	pop	{r7, pc}
 801cfec:	08028df8 	.word	0x08028df8
 801cff0:	0802aa84 	.word	0x0802aa84
 801cff4:	08028ddc 	.word	0x08028ddc
 801cff8:	08028eb4 	.word	0x08028eb4
 801cffc:	08028e68 	.word	0x08028e68

0801d000 <nk_str_rune_at>:
NK_API nk_rune
nk_str_rune_at(const struct nk_str *str, int pos)
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b084      	sub	sp, #16
 801d004:	af00      	add	r7, sp, #0
 801d006:	6078      	str	r0, [r7, #4]
 801d008:	6039      	str	r1, [r7, #0]
    int len;
    nk_rune unicode = 0;
 801d00a:	2300      	movs	r3, #0
 801d00c:	60bb      	str	r3, [r7, #8]
    nk_str_at_const(str, pos, &unicode, &len);
 801d00e:	f107 030c 	add.w	r3, r7, #12
 801d012:	f107 0208 	add.w	r2, r7, #8
 801d016:	6839      	ldr	r1, [r7, #0]
 801d018:	6878      	ldr	r0, [r7, #4]
 801d01a:	f7ff ff6f 	bl	801cefc <nk_str_at_const>
    return unicode;
 801d01e:	68bb      	ldr	r3, [r7, #8]
}
 801d020:	4618      	mov	r0, r3
 801d022:	3710      	adds	r7, #16
 801d024:	46bd      	mov	sp, r7
 801d026:	bd80      	pop	{r7, pc}

0801d028 <nk_str_get_const>:
    if (!s || !s->len || !s->buffer.allocated) return 0;
    return (char*)s->buffer.memory.ptr;
}
NK_API const char*
nk_str_get_const(const struct nk_str *s)
{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b082      	sub	sp, #8
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(s);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d106      	bne.n	801d044 <nk_str_get_const+0x1c>
 801d036:	4b0d      	ldr	r3, [pc, #52]	; (801d06c <nk_str_get_const+0x44>)
 801d038:	4a0d      	ldr	r2, [pc, #52]	; (801d070 <nk_str_get_const+0x48>)
 801d03a:	f240 11a1 	movw	r1, #417	; 0x1a1
 801d03e:	480d      	ldr	r0, [pc, #52]	; (801d074 <nk_str_get_const+0x4c>)
 801d040:	f007 fd4a 	bl	8024ad8 <__assert_func>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	2b00      	cmp	r3, #0
 801d048:	d007      	beq.n	801d05a <nk_str_get_const+0x32>
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d003      	beq.n	801d05a <nk_str_get_const+0x32>
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d056:	2b00      	cmp	r3, #0
 801d058:	d101      	bne.n	801d05e <nk_str_get_const+0x36>
 801d05a:	2300      	movs	r3, #0
 801d05c:	e001      	b.n	801d062 <nk_str_get_const+0x3a>
    return (const char*)s->buffer.memory.ptr;
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	6a1b      	ldr	r3, [r3, #32]
}
 801d062:	4618      	mov	r0, r3
 801d064:	3708      	adds	r7, #8
 801d066:	46bd      	mov	sp, r7
 801d068:	bd80      	pop	{r7, pc}
 801d06a:	bf00      	nop
 801d06c:	08028dd8 	.word	0x08028dd8
 801d070:	0802aa94 	.word	0x0802aa94
 801d074:	08028ddc 	.word	0x08028ddc

0801d078 <nk_str_len>:
NK_API int
nk_str_len(struct nk_str *s)
{
 801d078:	b580      	push	{r7, lr}
 801d07a:	b082      	sub	sp, #8
 801d07c:	af00      	add	r7, sp, #0
 801d07e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(s);
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d106      	bne.n	801d094 <nk_str_len+0x1c>
 801d086:	4b0d      	ldr	r3, [pc, #52]	; (801d0bc <nk_str_len+0x44>)
 801d088:	4a0d      	ldr	r2, [pc, #52]	; (801d0c0 <nk_str_len+0x48>)
 801d08a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 801d08e:	480d      	ldr	r0, [pc, #52]	; (801d0c4 <nk_str_len+0x4c>)
 801d090:	f007 fd22 	bl	8024ad8 <__assert_func>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	2b00      	cmp	r3, #0
 801d098:	d007      	beq.n	801d0aa <nk_str_len+0x32>
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d003      	beq.n	801d0aa <nk_str_len+0x32>
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d101      	bne.n	801d0ae <nk_str_len+0x36>
 801d0aa:	2300      	movs	r3, #0
 801d0ac:	e001      	b.n	801d0b2 <nk_str_len+0x3a>
    return s->len;
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	3708      	adds	r7, #8
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bd80      	pop	{r7, pc}
 801d0ba:	bf00      	nop
 801d0bc:	08028dd8 	.word	0x08028dd8
 801d0c0:	0802aaa8 	.word	0x0802aaa8
 801d0c4:	08028ddc 	.word	0x08028ddc

0801d0c8 <nk_str_len_char>:
NK_API int
nk_str_len_char(struct nk_str *s)
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b082      	sub	sp, #8
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	6078      	str	r0, [r7, #4]
    NK_ASSERT(s);
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d106      	bne.n	801d0e4 <nk_str_len_char+0x1c>
 801d0d6:	4b0d      	ldr	r3, [pc, #52]	; (801d10c <nk_str_len_char+0x44>)
 801d0d8:	4a0d      	ldr	r2, [pc, #52]	; (801d110 <nk_str_len_char+0x48>)
 801d0da:	f240 11af 	movw	r1, #431	; 0x1af
 801d0de:	480d      	ldr	r0, [pc, #52]	; (801d114 <nk_str_len_char+0x4c>)
 801d0e0:	f007 fcfa 	bl	8024ad8 <__assert_func>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d007      	beq.n	801d0fa <nk_str_len_char+0x32>
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d003      	beq.n	801d0fa <nk_str_len_char+0x32>
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	d101      	bne.n	801d0fe <nk_str_len_char+0x36>
 801d0fa:	2300      	movs	r3, #0
 801d0fc:	e001      	b.n	801d102 <nk_str_len_char+0x3a>
    return (int)s->buffer.allocated;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801d102:	4618      	mov	r0, r3
 801d104:	3708      	adds	r7, #8
 801d106:	46bd      	mov	sp, r7
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	bf00      	nop
 801d10c:	08028dd8 	.word	0x08028dd8
 801d110:	0802aab4 	.word	0x0802aab4
 801d114:	08028ddc 	.word	0x08028ddc

0801d118 <nk_style_default>:
/* ===============================================================
 *
 *                              STYLE
 *
 * ===============================================================*/
NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}
 801d118:	b580      	push	{r7, lr}
 801d11a:	b082      	sub	sp, #8
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]
 801d120:	2100      	movs	r1, #0
 801d122:	6878      	ldr	r0, [r7, #4]
 801d124:	f000 f838 	bl	801d198 <nk_style_from_table>
 801d128:	bf00      	nop
 801d12a:	3708      	adds	r7, #8
 801d12c:	46bd      	mov	sp, r7
 801d12e:	bd80      	pop	{r7, pc}

0801d130 <nk_style_item_color>:
{
    return nk_color_names[c];
}
NK_API struct nk_style_item
nk_style_item_color(struct nk_color col)
{
 801d130:	b4b0      	push	{r4, r5, r7}
 801d132:	b08b      	sub	sp, #44	; 0x2c
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
 801d138:	6039      	str	r1, [r7, #0]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 801d13a:	2300      	movs	r3, #0
 801d13c:	733b      	strb	r3, [r7, #12]
    i.data.color = col;
 801d13e:	683b      	ldr	r3, [r7, #0]
 801d140:	613b      	str	r3, [r7, #16]
    return i;
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	461d      	mov	r5, r3
 801d146:	f107 040c 	add.w	r4, r7, #12
 801d14a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d14c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d14e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d152:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801d156:	6878      	ldr	r0, [r7, #4]
 801d158:	372c      	adds	r7, #44	; 0x2c
 801d15a:	46bd      	mov	sp, r7
 801d15c:	bcb0      	pop	{r4, r5, r7}
 801d15e:	4770      	bx	lr

0801d160 <nk_style_item_hide>:
    i.data.slice = slice;
    return i;
}
NK_API struct nk_style_item
nk_style_item_hide(void)
{
 801d160:	b5b0      	push	{r4, r5, r7, lr}
 801d162:	b08a      	sub	sp, #40	; 0x28
 801d164:	af00      	add	r7, sp, #0
 801d166:	6078      	str	r0, [r7, #4]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 801d168:	2300      	movs	r3, #0
 801d16a:	733b      	strb	r3, [r7, #12]
    i.data.color = nk_rgba(0,0,0,0);
 801d16c:	2300      	movs	r3, #0
 801d16e:	2200      	movs	r2, #0
 801d170:	2100      	movs	r1, #0
 801d172:	2000      	movs	r0, #0
 801d174:	f7f2 fd86 	bl	800fc84 <nk_rgba>
 801d178:	4603      	mov	r3, r0
 801d17a:	613b      	str	r3, [r7, #16]
    return i;
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	461d      	mov	r5, r3
 801d180:	f107 040c 	add.w	r4, r7, #12
 801d184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d188:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d18c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801d190:	6878      	ldr	r0, [r7, #4]
 801d192:	3728      	adds	r7, #40	; 0x28
 801d194:	46bd      	mov	sp, r7
 801d196:	bdb0      	pop	{r4, r5, r7, pc}

0801d198 <nk_style_from_table>:
NK_API void
nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)
{
 801d198:	b5b0      	push	{r4, r5, r7, lr}
 801d19a:	b09e      	sub	sp, #120	; 0x78
 801d19c:	af00      	add	r7, sp, #0
 801d19e:	6278      	str	r0, [r7, #36]	; 0x24
 801d1a0:	6239      	str	r1, [r7, #32]
    struct nk_style_combo *combo;
    struct nk_style_chart *chart;
    struct nk_style_tab *tab;
    struct nk_style_window *win;

    NK_ASSERT(ctx);
 801d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d105      	bne.n	801d1b4 <nk_style_from_table+0x1c>
 801d1a8:	4b09      	ldr	r3, [pc, #36]	; (801d1d0 <nk_style_from_table+0x38>)
 801d1aa:	4a0a      	ldr	r2, [pc, #40]	; (801d1d4 <nk_style_from_table+0x3c>)
 801d1ac:	216b      	movs	r1, #107	; 0x6b
 801d1ae:	480a      	ldr	r0, [pc, #40]	; (801d1d8 <nk_style_from_table+0x40>)
 801d1b0:	f007 fc92 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 801d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	f002 8079 	beq.w	801f2ae <nk_style_from_table+0x2116>
    style = &ctx->style;
 801d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801d1c2:	677b      	str	r3, [r7, #116]	; 0x74
    table = (!table) ? nk_default_color_style: table;
 801d1c4:	6a3b      	ldr	r3, [r7, #32]
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d008      	beq.n	801d1dc <nk_style_from_table+0x44>
 801d1ca:	6a3b      	ldr	r3, [r7, #32]
 801d1cc:	e007      	b.n	801d1de <nk_style_from_table+0x46>
 801d1ce:	bf00      	nop
 801d1d0:	08029128 	.word	0x08029128
 801d1d4:	0802ab34 	.word	0x0802ab34
 801d1d8:	0802912c 	.word	0x0802912c
 801d1dc:	4bc6      	ldr	r3, [pc, #792]	; (801d4f8 <nk_style_from_table+0x360>)
 801d1de:	623b      	str	r3, [r7, #32]

    /* default text */
    text = &style->text;
 801d1e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1e2:	332c      	adds	r3, #44	; 0x2c
 801d1e4:	673b      	str	r3, [r7, #112]	; 0x70
    text->color = table[NK_COLOR_TEXT];
 801d1e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1e8:	6a3a      	ldr	r2, [r7, #32]
 801d1ea:	6810      	ldr	r0, [r2, #0]
 801d1ec:	6018      	str	r0, [r3, #0]
    text->padding = nk_vec2(0,0);
 801d1ee:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 801d1f0:	eddf 0ac2 	vldr	s1, [pc, #776]	; 801d4fc <nk_style_from_table+0x364>
 801d1f4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801d4fc <nk_style_from_table+0x364>
 801d1f8:	f7f9 fbca 	bl	8016990 <nk_vec2>
 801d1fc:	eeb0 7a40 	vmov.f32	s14, s0
 801d200:	eef0 7a60 	vmov.f32	s15, s1
 801d204:	ed84 7a01 	vstr	s14, [r4, #4]
 801d208:	edc4 7a02 	vstr	s15, [r4, #8]

    /* default button */
    button = &style->button;
 801d20c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d20e:	3338      	adds	r3, #56	; 0x38
 801d210:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801d212:	2198      	movs	r1, #152	; 0x98
 801d214:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d216:	f005 fa35 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);
 801d21a:	6a3b      	ldr	r3, [r7, #32]
 801d21c:	3310      	adds	r3, #16
 801d21e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d220:	463a      	mov	r2, r7
 801d222:	6819      	ldr	r1, [r3, #0]
 801d224:	460b      	mov	r3, r1
 801d226:	4619      	mov	r1, r3
 801d228:	4610      	mov	r0, r2
 801d22a:	f7ff ff81 	bl	801d130 <nk_style_item_color>
 801d22e:	4625      	mov	r5, r4
 801d230:	463c      	mov	r4, r7
 801d232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d236:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d23a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 801d23e:	6a3b      	ldr	r3, [r7, #32]
 801d240:	3314      	adds	r3, #20
 801d242:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d244:	463a      	mov	r2, r7
 801d246:	6819      	ldr	r1, [r3, #0]
 801d248:	460b      	mov	r3, r1
 801d24a:	4619      	mov	r1, r3
 801d24c:	4610      	mov	r0, r2
 801d24e:	f7ff ff6f 	bl	801d130 <nk_style_item_color>
 801d252:	341c      	adds	r4, #28
 801d254:	463d      	mov	r5, r7
 801d256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d25a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d25e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 801d262:	6a3b      	ldr	r3, [r7, #32]
 801d264:	3318      	adds	r3, #24
 801d266:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d268:	463a      	mov	r2, r7
 801d26a:	6819      	ldr	r1, [r3, #0]
 801d26c:	460b      	mov	r3, r1
 801d26e:	4619      	mov	r1, r3
 801d270:	4610      	mov	r0, r2
 801d272:	f7ff ff5d 	bl	801d130 <nk_style_item_color>
 801d276:	3438      	adds	r4, #56	; 0x38
 801d278:	463d      	mov	r5, r7
 801d27a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d27c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d27e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_BORDER];
 801d286:	6a3b      	ldr	r3, [r7, #32]
 801d288:	f103 020c 	add.w	r2, r3, #12
 801d28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d28e:	3354      	adds	r3, #84	; 0x54
 801d290:	6810      	ldr	r0, [r2, #0]
 801d292:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_BUTTON];
 801d294:	6a3b      	ldr	r3, [r7, #32]
 801d296:	f103 0210 	add.w	r2, r3, #16
 801d29a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d29c:	3358      	adds	r3, #88	; 0x58
 801d29e:	6810      	ldr	r0, [r2, #0]
 801d2a0:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801d2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2a4:	6a3a      	ldr	r2, [r7, #32]
 801d2a6:	335c      	adds	r3, #92	; 0x5c
 801d2a8:	6810      	ldr	r0, [r2, #0]
 801d2aa:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801d2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2ae:	6a3a      	ldr	r2, [r7, #32]
 801d2b0:	3360      	adds	r3, #96	; 0x60
 801d2b2:	6810      	ldr	r0, [r2, #0]
 801d2b4:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801d2b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2b8:	6a3a      	ldr	r2, [r7, #32]
 801d2ba:	3364      	adds	r3, #100	; 0x64
 801d2bc:	6810      	ldr	r0, [r2, #0]
 801d2be:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801d2c0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d2c2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d2c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d2ca:	f7f9 fb61 	bl	8016990 <nk_vec2>
 801d2ce:	eeb0 7a40 	vmov.f32	s14, s0
 801d2d2:	eef0 7a60 	vmov.f32	s15, s1
 801d2d6:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801d2da:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->image_padding   = nk_vec2(0.0f,0.0f);
 801d2de:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d2e0:	eddf 0a86 	vldr	s1, [pc, #536]	; 801d4fc <nk_style_from_table+0x364>
 801d2e4:	ed9f 0a85 	vldr	s0, [pc, #532]	; 801d4fc <nk_style_from_table+0x364>
 801d2e8:	f7f9 fb52 	bl	8016990 <nk_vec2>
 801d2ec:	eeb0 7a40 	vmov.f32	s14, s0
 801d2f0:	eef0 7a60 	vmov.f32	s15, s1
 801d2f4:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801d2f8:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
    button->touch_padding   = nk_vec2(0.0f, 0.0f);
 801d2fc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d2fe:	eddf 0a7f 	vldr	s1, [pc, #508]	; 801d4fc <nk_style_from_table+0x364>
 801d302:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 801d4fc <nk_style_from_table+0x364>
 801d306:	f7f9 fb43 	bl	8016990 <nk_vec2>
 801d30a:	eeb0 7a40 	vmov.f32	s14, s0
 801d30e:	eef0 7a60 	vmov.f32	s15, s1
 801d312:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801d316:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801d31a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d31c:	2000      	movs	r0, #0
 801d31e:	f7f7 fddd 	bl	8014edc <nk_handle_ptr>
 801d322:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801d326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d328:	2212      	movs	r2, #18
 801d32a:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 801d32c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d32e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801d332:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 4.0f;
 801d334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d336:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801d33a:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801d33c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d33e:	2200      	movs	r2, #0
 801d340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801d344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d346:	2200      	movs	r2, #0
 801d348:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* contextual button */
    button = &style->contextual_button;
 801d34c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d34e:	33d0      	adds	r3, #208	; 0xd0
 801d350:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801d352:	2198      	movs	r1, #152	; 0x98
 801d354:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d356:	f005 f995 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d35a:	6a3b      	ldr	r3, [r7, #32]
 801d35c:	3304      	adds	r3, #4
 801d35e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d360:	463a      	mov	r2, r7
 801d362:	6819      	ldr	r1, [r3, #0]
 801d364:	460b      	mov	r3, r1
 801d366:	4619      	mov	r1, r3
 801d368:	4610      	mov	r0, r2
 801d36a:	f7ff fee1 	bl	801d130 <nk_style_item_color>
 801d36e:	4625      	mov	r5, r4
 801d370:	463c      	mov	r4, r7
 801d372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d376:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d37a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 801d37e:	6a3b      	ldr	r3, [r7, #32]
 801d380:	3314      	adds	r3, #20
 801d382:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d384:	463a      	mov	r2, r7
 801d386:	6819      	ldr	r1, [r3, #0]
 801d388:	460b      	mov	r3, r1
 801d38a:	4619      	mov	r1, r3
 801d38c:	4610      	mov	r0, r2
 801d38e:	f7ff fecf 	bl	801d130 <nk_style_item_color>
 801d392:	341c      	adds	r4, #28
 801d394:	463d      	mov	r5, r7
 801d396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d39a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d39e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 801d3a2:	6a3b      	ldr	r3, [r7, #32]
 801d3a4:	3318      	adds	r3, #24
 801d3a6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d3a8:	463a      	mov	r2, r7
 801d3aa:	6819      	ldr	r1, [r3, #0]
 801d3ac:	460b      	mov	r3, r1
 801d3ae:	4619      	mov	r1, r3
 801d3b0:	4610      	mov	r0, r2
 801d3b2:	f7ff febd 	bl	801d130 <nk_style_item_color>
 801d3b6:	3438      	adds	r4, #56	; 0x38
 801d3b8:	463d      	mov	r5, r7
 801d3ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d3bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d3be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d3c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 801d3c6:	6a3b      	ldr	r3, [r7, #32]
 801d3c8:	1d1a      	adds	r2, r3, #4
 801d3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3cc:	3354      	adds	r3, #84	; 0x54
 801d3ce:	6810      	ldr	r0, [r2, #0]
 801d3d0:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 801d3d2:	6a3b      	ldr	r3, [r7, #32]
 801d3d4:	1d1a      	adds	r2, r3, #4
 801d3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3d8:	3358      	adds	r3, #88	; 0x58
 801d3da:	6810      	ldr	r0, [r2, #0]
 801d3dc:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801d3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3e0:	6a3a      	ldr	r2, [r7, #32]
 801d3e2:	335c      	adds	r3, #92	; 0x5c
 801d3e4:	6810      	ldr	r0, [r2, #0]
 801d3e6:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801d3e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3ea:	6a3a      	ldr	r2, [r7, #32]
 801d3ec:	3360      	adds	r3, #96	; 0x60
 801d3ee:	6810      	ldr	r0, [r2, #0]
 801d3f0:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801d3f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3f4:	6a3a      	ldr	r2, [r7, #32]
 801d3f6:	3364      	adds	r3, #100	; 0x64
 801d3f8:	6810      	ldr	r0, [r2, #0]
 801d3fa:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801d3fc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d3fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d402:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d406:	f7f9 fac3 	bl	8016990 <nk_vec2>
 801d40a:	eeb0 7a40 	vmov.f32	s14, s0
 801d40e:	eef0 7a60 	vmov.f32	s15, s1
 801d412:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801d416:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801d41a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d41c:	eddf 0a37 	vldr	s1, [pc, #220]	; 801d4fc <nk_style_from_table+0x364>
 801d420:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801d4fc <nk_style_from_table+0x364>
 801d424:	f7f9 fab4 	bl	8016990 <nk_vec2>
 801d428:	eeb0 7a40 	vmov.f32	s14, s0
 801d42c:	eef0 7a60 	vmov.f32	s15, s1
 801d430:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801d434:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801d438:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d43a:	2000      	movs	r0, #0
 801d43c:	f7f7 fd4e 	bl	8014edc <nk_handle_ptr>
 801d440:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801d444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d446:	2212      	movs	r2, #18
 801d448:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801d44a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d44c:	f04f 0200 	mov.w	r2, #0
 801d450:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801d452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d454:	f04f 0200 	mov.w	r2, #0
 801d458:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801d45a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d45c:	2200      	movs	r2, #0
 801d45e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801d462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d464:	2200      	movs	r2, #0
 801d466:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* menu button */
    button = &style->menu_button;
 801d46a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d46c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801d470:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801d472:	2198      	movs	r1, #152	; 0x98
 801d474:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d476:	f005 f905 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d47a:	6a3b      	ldr	r3, [r7, #32]
 801d47c:	3304      	adds	r3, #4
 801d47e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d480:	463a      	mov	r2, r7
 801d482:	6819      	ldr	r1, [r3, #0]
 801d484:	460b      	mov	r3, r1
 801d486:	4619      	mov	r1, r3
 801d488:	4610      	mov	r0, r2
 801d48a:	f7ff fe51 	bl	801d130 <nk_style_item_color>
 801d48e:	4625      	mov	r5, r4
 801d490:	463c      	mov	r4, r7
 801d492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d496:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d49a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d49e:	6a3b      	ldr	r3, [r7, #32]
 801d4a0:	3304      	adds	r3, #4
 801d4a2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d4a4:	463a      	mov	r2, r7
 801d4a6:	6819      	ldr	r1, [r3, #0]
 801d4a8:	460b      	mov	r3, r1
 801d4aa:	4619      	mov	r1, r3
 801d4ac:	4610      	mov	r0, r2
 801d4ae:	f7ff fe3f 	bl	801d130 <nk_style_item_color>
 801d4b2:	341c      	adds	r4, #28
 801d4b4:	463d      	mov	r5, r7
 801d4b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d4b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d4ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d4be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d4c2:	6a3b      	ldr	r3, [r7, #32]
 801d4c4:	3304      	adds	r3, #4
 801d4c6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d4c8:	463a      	mov	r2, r7
 801d4ca:	6819      	ldr	r1, [r3, #0]
 801d4cc:	460b      	mov	r3, r1
 801d4ce:	4619      	mov	r1, r3
 801d4d0:	4610      	mov	r0, r2
 801d4d2:	f7ff fe2d 	bl	801d130 <nk_style_item_color>
 801d4d6:	3438      	adds	r4, #56	; 0x38
 801d4d8:	463d      	mov	r5, r7
 801d4da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d4de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d4e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 801d4e6:	6a3b      	ldr	r3, [r7, #32]
 801d4e8:	1d1a      	adds	r2, r3, #4
 801d4ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d4ec:	3354      	adds	r3, #84	; 0x54
 801d4ee:	6810      	ldr	r0, [r2, #0]
 801d4f0:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 801d4f2:	6a3b      	ldr	r3, [r7, #32]
 801d4f4:	1d1a      	adds	r2, r3, #4
 801d4f6:	e003      	b.n	801d500 <nk_style_from_table+0x368>
 801d4f8:	0802aac4 	.word	0x0802aac4
 801d4fc:	00000000 	.word	0x00000000
 801d500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d502:	3358      	adds	r3, #88	; 0x58
 801d504:	6810      	ldr	r0, [r2, #0]
 801d506:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801d508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d50a:	6a3a      	ldr	r2, [r7, #32]
 801d50c:	335c      	adds	r3, #92	; 0x5c
 801d50e:	6810      	ldr	r0, [r2, #0]
 801d510:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801d512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d514:	6a3a      	ldr	r2, [r7, #32]
 801d516:	3360      	adds	r3, #96	; 0x60
 801d518:	6810      	ldr	r0, [r2, #0]
 801d51a:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801d51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d51e:	6a3a      	ldr	r2, [r7, #32]
 801d520:	3364      	adds	r3, #100	; 0x64
 801d522:	6810      	ldr	r0, [r2, #0]
 801d524:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801d526:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d528:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d52c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d530:	f7f9 fa2e 	bl	8016990 <nk_vec2>
 801d534:	eeb0 7a40 	vmov.f32	s14, s0
 801d538:	eef0 7a60 	vmov.f32	s15, s1
 801d53c:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801d540:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801d544:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d546:	ed5f 0a13 	vldr	s1, [pc, #-76]	; 801d4fc <nk_style_from_table+0x364>
 801d54a:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 801d4fc <nk_style_from_table+0x364>
 801d54e:	f7f9 fa1f 	bl	8016990 <nk_vec2>
 801d552:	eeb0 7a40 	vmov.f32	s14, s0
 801d556:	eef0 7a60 	vmov.f32	s15, s1
 801d55a:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801d55e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801d562:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d564:	2000      	movs	r0, #0
 801d566:	f7f7 fcb9 	bl	8014edc <nk_handle_ptr>
 801d56a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801d56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d570:	2212      	movs	r2, #18
 801d572:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801d574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d576:	f04f 0200 	mov.w	r2, #0
 801d57a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 1.0f;
 801d57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d57e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801d582:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801d584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d586:	2200      	movs	r2, #0
 801d588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801d58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d58e:	2200      	movs	r2, #0
 801d590:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* checkbox toggle */
    toggle = &style->checkbox;
 801d594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d596:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801d59a:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 801d59c:	21c8      	movs	r1, #200	; 0xc8
 801d59e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d5a0:	f005 f870 	bl	8022684 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 801d5a4:	6a3b      	ldr	r3, [r7, #32]
 801d5a6:	331c      	adds	r3, #28
 801d5a8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d5aa:	463a      	mov	r2, r7
 801d5ac:	6819      	ldr	r1, [r3, #0]
 801d5ae:	460b      	mov	r3, r1
 801d5b0:	4619      	mov	r1, r3
 801d5b2:	4610      	mov	r0, r2
 801d5b4:	f7ff fdbc 	bl	801d130 <nk_style_item_color>
 801d5b8:	4625      	mov	r5, r4
 801d5ba:	463c      	mov	r4, r7
 801d5bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d5be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d5c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d5c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d5c8:	6a3b      	ldr	r3, [r7, #32]
 801d5ca:	3320      	adds	r3, #32
 801d5cc:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d5ce:	463a      	mov	r2, r7
 801d5d0:	6819      	ldr	r1, [r3, #0]
 801d5d2:	460b      	mov	r3, r1
 801d5d4:	4619      	mov	r1, r3
 801d5d6:	4610      	mov	r0, r2
 801d5d8:	f7ff fdaa 	bl	801d130 <nk_style_item_color>
 801d5dc:	341c      	adds	r4, #28
 801d5de:	463d      	mov	r5, r7
 801d5e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d5e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d5e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d5e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d5ec:	6a3b      	ldr	r3, [r7, #32]
 801d5ee:	3320      	adds	r3, #32
 801d5f0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d5f2:	463a      	mov	r2, r7
 801d5f4:	6819      	ldr	r1, [r3, #0]
 801d5f6:	460b      	mov	r3, r1
 801d5f8:	4619      	mov	r1, r3
 801d5fa:	4610      	mov	r0, r2
 801d5fc:	f7ff fd98 	bl	801d130 <nk_style_item_color>
 801d600:	3438      	adds	r4, #56	; 0x38
 801d602:	463d      	mov	r5, r7
 801d604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d60c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d610:	6a3b      	ldr	r3, [r7, #32]
 801d612:	3324      	adds	r3, #36	; 0x24
 801d614:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d616:	463a      	mov	r2, r7
 801d618:	6819      	ldr	r1, [r3, #0]
 801d61a:	460b      	mov	r3, r1
 801d61c:	4619      	mov	r1, r3
 801d61e:	4610      	mov	r0, r2
 801d620:	f7ff fd86 	bl	801d130 <nk_style_item_color>
 801d624:	3458      	adds	r4, #88	; 0x58
 801d626:	463d      	mov	r5, r7
 801d628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d62a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d62c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d634:	6a3b      	ldr	r3, [r7, #32]
 801d636:	3324      	adds	r3, #36	; 0x24
 801d638:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d63a:	463a      	mov	r2, r7
 801d63c:	6819      	ldr	r1, [r3, #0]
 801d63e:	460b      	mov	r3, r1
 801d640:	4619      	mov	r1, r3
 801d642:	4610      	mov	r0, r2
 801d644:	f7ff fd74 	bl	801d130 <nk_style_item_color>
 801d648:	3474      	adds	r4, #116	; 0x74
 801d64a:	463d      	mov	r5, r7
 801d64c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d64e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 801d658:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d65a:	2000      	movs	r0, #0
 801d65c:	f7f7 fc3e 	bl	8014edc <nk_handle_ptr>
 801d660:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 801d664:	6a3b      	ldr	r3, [r7, #32]
 801d666:	1d1a      	adds	r2, r3, #4
 801d668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d66a:	339c      	adds	r3, #156	; 0x9c
 801d66c:	6810      	ldr	r0, [r2, #0]
 801d66e:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 801d670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d672:	6a3a      	ldr	r2, [r7, #32]
 801d674:	3390      	adds	r3, #144	; 0x90
 801d676:	6810      	ldr	r0, [r2, #0]
 801d678:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 801d67a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d67c:	6a3a      	ldr	r2, [r7, #32]
 801d67e:	3394      	adds	r3, #148	; 0x94
 801d680:	6810      	ldr	r0, [r2, #0]
 801d682:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 801d684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d686:	6a3a      	ldr	r2, [r7, #32]
 801d688:	3398      	adds	r3, #152	; 0x98
 801d68a:	6810      	ldr	r0, [r2, #0]
 801d68c:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(2.0f, 2.0f);
 801d68e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d690:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d694:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d698:	f7f9 f97a 	bl	8016990 <nk_vec2>
 801d69c:	eeb0 7a40 	vmov.f32	s14, s0
 801d6a0:	eef0 7a60 	vmov.f32	s15, s1
 801d6a4:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 801d6a8:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 801d6ac:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d6ae:	ed5f 0a6d 	vldr	s1, [pc, #-436]	; 801d4fc <nk_style_from_table+0x364>
 801d6b2:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 801d4fc <nk_style_from_table+0x364>
 801d6b6:	f7f9 f96b 	bl	8016990 <nk_vec2>
 801d6ba:	eeb0 7a40 	vmov.f32	s14, s0
 801d6be:	eef0 7a60 	vmov.f32	s15, s1
 801d6c2:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 801d6c6:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 801d6ca:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d6cc:	2300      	movs	r3, #0
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	2100      	movs	r1, #0
 801d6d2:	2000      	movs	r0, #0
 801d6d4:	f7f2 fad6 	bl	800fc84 <nk_rgba>
 801d6d8:	4603      	mov	r3, r0
 801d6da:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 801d6dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d6de:	f04f 0200 	mov.w	r2, #0
 801d6e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 801d6e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d6e8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801d6ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* option toggle */
    toggle = &style->option;
 801d6f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d6f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d6f6:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 801d6f8:	21c8      	movs	r1, #200	; 0xc8
 801d6fa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d6fc:	f004 ffc2 	bl	8022684 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 801d700:	6a3b      	ldr	r3, [r7, #32]
 801d702:	331c      	adds	r3, #28
 801d704:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d706:	463a      	mov	r2, r7
 801d708:	6819      	ldr	r1, [r3, #0]
 801d70a:	460b      	mov	r3, r1
 801d70c:	4619      	mov	r1, r3
 801d70e:	4610      	mov	r0, r2
 801d710:	f7ff fd0e 	bl	801d130 <nk_style_item_color>
 801d714:	4625      	mov	r5, r4
 801d716:	463c      	mov	r4, r7
 801d718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d71a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d71c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d720:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d724:	6a3b      	ldr	r3, [r7, #32]
 801d726:	3320      	adds	r3, #32
 801d728:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d72a:	463a      	mov	r2, r7
 801d72c:	6819      	ldr	r1, [r3, #0]
 801d72e:	460b      	mov	r3, r1
 801d730:	4619      	mov	r1, r3
 801d732:	4610      	mov	r0, r2
 801d734:	f7ff fcfc 	bl	801d130 <nk_style_item_color>
 801d738:	341c      	adds	r4, #28
 801d73a:	463d      	mov	r5, r7
 801d73c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d73e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d740:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d748:	6a3b      	ldr	r3, [r7, #32]
 801d74a:	3320      	adds	r3, #32
 801d74c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d74e:	463a      	mov	r2, r7
 801d750:	6819      	ldr	r1, [r3, #0]
 801d752:	460b      	mov	r3, r1
 801d754:	4619      	mov	r1, r3
 801d756:	4610      	mov	r0, r2
 801d758:	f7ff fcea 	bl	801d130 <nk_style_item_color>
 801d75c:	3438      	adds	r4, #56	; 0x38
 801d75e:	463d      	mov	r5, r7
 801d760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d764:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d76c:	6a3b      	ldr	r3, [r7, #32]
 801d76e:	3324      	adds	r3, #36	; 0x24
 801d770:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d772:	463a      	mov	r2, r7
 801d774:	6819      	ldr	r1, [r3, #0]
 801d776:	460b      	mov	r3, r1
 801d778:	4619      	mov	r1, r3
 801d77a:	4610      	mov	r0, r2
 801d77c:	f7ff fcd8 	bl	801d130 <nk_style_item_color>
 801d780:	3458      	adds	r4, #88	; 0x58
 801d782:	463d      	mov	r5, r7
 801d784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d788:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d78c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d790:	6a3b      	ldr	r3, [r7, #32]
 801d792:	3324      	adds	r3, #36	; 0x24
 801d794:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d796:	463a      	mov	r2, r7
 801d798:	6819      	ldr	r1, [r3, #0]
 801d79a:	460b      	mov	r3, r1
 801d79c:	4619      	mov	r1, r3
 801d79e:	4610      	mov	r0, r2
 801d7a0:	f7ff fcc6 	bl	801d130 <nk_style_item_color>
 801d7a4:	3474      	adds	r4, #116	; 0x74
 801d7a6:	463d      	mov	r5, r7
 801d7a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d7aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d7b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 801d7b4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d7b6:	2000      	movs	r0, #0
 801d7b8:	f7f7 fb90 	bl	8014edc <nk_handle_ptr>
 801d7bc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 801d7c0:	6a3b      	ldr	r3, [r7, #32]
 801d7c2:	1d1a      	adds	r2, r3, #4
 801d7c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7c6:	339c      	adds	r3, #156	; 0x9c
 801d7c8:	6810      	ldr	r0, [r2, #0]
 801d7ca:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 801d7cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7ce:	6a3a      	ldr	r2, [r7, #32]
 801d7d0:	3390      	adds	r3, #144	; 0x90
 801d7d2:	6810      	ldr	r0, [r2, #0]
 801d7d4:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 801d7d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7d8:	6a3a      	ldr	r2, [r7, #32]
 801d7da:	3394      	adds	r3, #148	; 0x94
 801d7dc:	6810      	ldr	r0, [r2, #0]
 801d7de:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 801d7e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7e2:	6a3a      	ldr	r2, [r7, #32]
 801d7e4:	3398      	adds	r3, #152	; 0x98
 801d7e6:	6810      	ldr	r0, [r2, #0]
 801d7e8:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(3.0f, 3.0f);
 801d7ea:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d7ec:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 801d7f0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 801d7f4:	f7f9 f8cc 	bl	8016990 <nk_vec2>
 801d7f8:	eeb0 7a40 	vmov.f32	s14, s0
 801d7fc:	eef0 7a60 	vmov.f32	s15, s1
 801d800:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 801d804:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 801d808:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d80a:	ed5f 0ac4 	vldr	s1, [pc, #-784]	; 801d4fc <nk_style_from_table+0x364>
 801d80e:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 801d4fc <nk_style_from_table+0x364>
 801d812:	f7f9 f8bd 	bl	8016990 <nk_vec2>
 801d816:	eeb0 7a40 	vmov.f32	s14, s0
 801d81a:	eef0 7a60 	vmov.f32	s15, s1
 801d81e:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 801d822:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 801d826:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d828:	2300      	movs	r3, #0
 801d82a:	2200      	movs	r2, #0
 801d82c:	2100      	movs	r1, #0
 801d82e:	2000      	movs	r0, #0
 801d830:	f7f2 fa28 	bl	800fc84 <nk_rgba>
 801d834:	4603      	mov	r3, r0
 801d836:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 801d838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d83a:	f04f 0200 	mov.w	r2, #0
 801d83e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 801d842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d844:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801d848:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* selectable */
    select = &style->selectable;
 801d84c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d84e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 801d852:	667b      	str	r3, [r7, #100]	; 0x64
    nk_zero_struct(*select);
 801d854:	21f0      	movs	r1, #240	; 0xf0
 801d856:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d858:	f004 ff14 	bl	8022684 <nk_zero>
    select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);
 801d85c:	6a3b      	ldr	r3, [r7, #32]
 801d85e:	3328      	adds	r3, #40	; 0x28
 801d860:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d862:	463a      	mov	r2, r7
 801d864:	6819      	ldr	r1, [r3, #0]
 801d866:	460b      	mov	r3, r1
 801d868:	4619      	mov	r1, r3
 801d86a:	4610      	mov	r0, r2
 801d86c:	f7ff fc60 	bl	801d130 <nk_style_item_color>
 801d870:	4625      	mov	r5, r4
 801d872:	463c      	mov	r4, r7
 801d874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d878:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d87c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);
 801d880:	6a3b      	ldr	r3, [r7, #32]
 801d882:	3328      	adds	r3, #40	; 0x28
 801d884:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d886:	463a      	mov	r2, r7
 801d888:	6819      	ldr	r1, [r3, #0]
 801d88a:	460b      	mov	r3, r1
 801d88c:	4619      	mov	r1, r3
 801d88e:	4610      	mov	r0, r2
 801d890:	f7ff fc4e 	bl	801d130 <nk_style_item_color>
 801d894:	341c      	adds	r4, #28
 801d896:	463d      	mov	r5, r7
 801d898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d89c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d8a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);
 801d8a4:	6a3b      	ldr	r3, [r7, #32]
 801d8a6:	3328      	adds	r3, #40	; 0x28
 801d8a8:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d8aa:	463a      	mov	r2, r7
 801d8ac:	6819      	ldr	r1, [r3, #0]
 801d8ae:	460b      	mov	r3, r1
 801d8b0:	4619      	mov	r1, r3
 801d8b2:	4610      	mov	r0, r2
 801d8b4:	f7ff fc3c 	bl	801d130 <nk_style_item_color>
 801d8b8:	3438      	adds	r4, #56	; 0x38
 801d8ba:	463d      	mov	r5, r7
 801d8bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d8c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 801d8c8:	6a3b      	ldr	r3, [r7, #32]
 801d8ca:	332c      	adds	r3, #44	; 0x2c
 801d8cc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d8ce:	463a      	mov	r2, r7
 801d8d0:	6819      	ldr	r1, [r3, #0]
 801d8d2:	460b      	mov	r3, r1
 801d8d4:	4619      	mov	r1, r3
 801d8d6:	4610      	mov	r0, r2
 801d8d8:	f7ff fc2a 	bl	801d130 <nk_style_item_color>
 801d8dc:	3454      	adds	r4, #84	; 0x54
 801d8de:	463d      	mov	r5, r7
 801d8e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d8e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 801d8ec:	6a3b      	ldr	r3, [r7, #32]
 801d8ee:	332c      	adds	r3, #44	; 0x2c
 801d8f0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d8f2:	463a      	mov	r2, r7
 801d8f4:	6819      	ldr	r1, [r3, #0]
 801d8f6:	460b      	mov	r3, r1
 801d8f8:	4619      	mov	r1, r3
 801d8fa:	4610      	mov	r0, r2
 801d8fc:	f7ff fc18 	bl	801d130 <nk_style_item_color>
 801d900:	3470      	adds	r4, #112	; 0x70
 801d902:	463d      	mov	r5, r7
 801d904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d90c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 801d910:	6a3b      	ldr	r3, [r7, #32]
 801d912:	332c      	adds	r3, #44	; 0x2c
 801d914:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d916:	463a      	mov	r2, r7
 801d918:	6819      	ldr	r1, [r3, #0]
 801d91a:	460b      	mov	r3, r1
 801d91c:	4619      	mov	r1, r3
 801d91e:	4610      	mov	r0, r2
 801d920:	f7ff fc06 	bl	801d130 <nk_style_item_color>
 801d924:	348c      	adds	r4, #140	; 0x8c
 801d926:	463d      	mov	r5, r7
 801d928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d92a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d92c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->text_normal     = table[NK_COLOR_TEXT];
 801d934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d936:	6a3a      	ldr	r2, [r7, #32]
 801d938:	33a8      	adds	r3, #168	; 0xa8
 801d93a:	6810      	ldr	r0, [r2, #0]
 801d93c:	6018      	str	r0, [r3, #0]
    select->text_hover      = table[NK_COLOR_TEXT];
 801d93e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d940:	6a3a      	ldr	r2, [r7, #32]
 801d942:	33ac      	adds	r3, #172	; 0xac
 801d944:	6810      	ldr	r0, [r2, #0]
 801d946:	6018      	str	r0, [r3, #0]
    select->text_pressed    = table[NK_COLOR_TEXT];
 801d948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d94a:	6a3a      	ldr	r2, [r7, #32]
 801d94c:	33b0      	adds	r3, #176	; 0xb0
 801d94e:	6810      	ldr	r0, [r2, #0]
 801d950:	6018      	str	r0, [r3, #0]
    select->text_normal_active  = table[NK_COLOR_TEXT];
 801d952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d954:	6a3a      	ldr	r2, [r7, #32]
 801d956:	33b4      	adds	r3, #180	; 0xb4
 801d958:	6810      	ldr	r0, [r2, #0]
 801d95a:	6018      	str	r0, [r3, #0]
    select->text_hover_active   = table[NK_COLOR_TEXT];
 801d95c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d95e:	6a3a      	ldr	r2, [r7, #32]
 801d960:	33b8      	adds	r3, #184	; 0xb8
 801d962:	6810      	ldr	r0, [r2, #0]
 801d964:	6018      	str	r0, [r3, #0]
    select->text_pressed_active = table[NK_COLOR_TEXT];
 801d966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d968:	6a3a      	ldr	r2, [r7, #32]
 801d96a:	33bc      	adds	r3, #188	; 0xbc
 801d96c:	6810      	ldr	r0, [r2, #0]
 801d96e:	6018      	str	r0, [r3, #0]
    select->padding         = nk_vec2(2.0f,2.0f);
 801d970:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d972:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d976:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d97a:	f7f9 f809 	bl	8016990 <nk_vec2>
 801d97e:	eeb0 7a40 	vmov.f32	s14, s0
 801d982:	eef0 7a60 	vmov.f32	s15, s1
 801d986:	ed84 7a33 	vstr	s14, [r4, #204]	; 0xcc
 801d98a:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    select->image_padding   = nk_vec2(2.0f,2.0f);
 801d98e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d990:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d994:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d998:	f7f8 fffa 	bl	8016990 <nk_vec2>
 801d99c:	eeb0 7a40 	vmov.f32	s14, s0
 801d9a0:	eef0 7a60 	vmov.f32	s15, s1
 801d9a4:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 801d9a8:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
    select->touch_padding   = nk_vec2(0,0);
 801d9ac:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d9ae:	eddf 0ad0 	vldr	s1, [pc, #832]	; 801dcf0 <nk_style_from_table+0xb58>
 801d9b2:	ed9f 0acf 	vldr	s0, [pc, #828]	; 801dcf0 <nk_style_from_table+0xb58>
 801d9b6:	f7f8 ffeb 	bl	8016990 <nk_vec2>
 801d9ba:	eeb0 7a40 	vmov.f32	s14, s0
 801d9be:	eef0 7a60 	vmov.f32	s15, s1
 801d9c2:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
 801d9c6:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
    select->userdata        = nk_handle_ptr(0);
 801d9ca:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d9cc:	2000      	movs	r0, #0
 801d9ce:	f7f7 fa85 	bl	8014edc <nk_handle_ptr>
 801d9d2:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    select->rounding        = 0.0f;
 801d9d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d9d8:	f04f 0200 	mov.w	r2, #0
 801d9dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    select->draw_begin      = 0;
 801d9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d9e2:	2200      	movs	r2, #0
 801d9e4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    select->draw_end        = 0;
 801d9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d9ea:	2200      	movs	r2, #0
 801d9ec:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    /* slider */
    slider = &style->slider;
 801d9f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9f2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801d9f6:	663b      	str	r3, [r7, #96]	; 0x60
    nk_zero_struct(*slider);
 801d9f8:	f44f 7109 	mov.w	r1, #548	; 0x224
 801d9fc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d9fe:	f004 fe41 	bl	8022684 <nk_zero>
    slider->normal          = nk_style_item_hide();
 801da02:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801da04:	463b      	mov	r3, r7
 801da06:	4618      	mov	r0, r3
 801da08:	f7ff fbaa 	bl	801d160 <nk_style_item_hide>
 801da0c:	4625      	mov	r5, r4
 801da0e:	463c      	mov	r4, r7
 801da10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801da12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801da14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801da18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    slider->hover           = nk_style_item_hide();
 801da1c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801da1e:	463b      	mov	r3, r7
 801da20:	4618      	mov	r0, r3
 801da22:	f7ff fb9d 	bl	801d160 <nk_style_item_hide>
 801da26:	341c      	adds	r4, #28
 801da28:	463d      	mov	r5, r7
 801da2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801da2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801da2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801da32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->active          = nk_style_item_hide();
 801da36:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801da38:	463b      	mov	r3, r7
 801da3a:	4618      	mov	r0, r3
 801da3c:	f7ff fb90 	bl	801d160 <nk_style_item_hide>
 801da40:	3438      	adds	r4, #56	; 0x38
 801da42:	463d      	mov	r5, r7
 801da44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801da46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801da48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801da4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->bar_normal      = table[NK_COLOR_SLIDER];
 801da50:	6a3b      	ldr	r3, [r7, #32]
 801da52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801da56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da58:	3358      	adds	r3, #88	; 0x58
 801da5a:	6810      	ldr	r0, [r2, #0]
 801da5c:	6018      	str	r0, [r3, #0]
    slider->bar_hover       = table[NK_COLOR_SLIDER];
 801da5e:	6a3b      	ldr	r3, [r7, #32]
 801da60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801da64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da66:	335c      	adds	r3, #92	; 0x5c
 801da68:	6810      	ldr	r0, [r2, #0]
 801da6a:	6018      	str	r0, [r3, #0]
    slider->bar_active      = table[NK_COLOR_SLIDER];
 801da6c:	6a3b      	ldr	r3, [r7, #32]
 801da6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801da72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da74:	3360      	adds	r3, #96	; 0x60
 801da76:	6810      	ldr	r0, [r2, #0]
 801da78:	6018      	str	r0, [r3, #0]
    slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];
 801da7a:	6a3b      	ldr	r3, [r7, #32]
 801da7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801da80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da82:	3364      	adds	r3, #100	; 0x64
 801da84:	6810      	ldr	r0, [r2, #0]
 801da86:	6018      	str	r0, [r3, #0]
    slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 801da88:	6a3b      	ldr	r3, [r7, #32]
 801da8a:	3334      	adds	r3, #52	; 0x34
 801da8c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801da8e:	463a      	mov	r2, r7
 801da90:	6819      	ldr	r1, [r3, #0]
 801da92:	460b      	mov	r3, r1
 801da94:	4619      	mov	r1, r3
 801da96:	4610      	mov	r0, r2
 801da98:	f7ff fb4a 	bl	801d130 <nk_style_item_color>
 801da9c:	3468      	adds	r4, #104	; 0x68
 801da9e:	463d      	mov	r5, r7
 801daa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801daa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801daa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801daa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 801daac:	6a3b      	ldr	r3, [r7, #32]
 801daae:	3338      	adds	r3, #56	; 0x38
 801dab0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801dab2:	463a      	mov	r2, r7
 801dab4:	6819      	ldr	r1, [r3, #0]
 801dab6:	460b      	mov	r3, r1
 801dab8:	4619      	mov	r1, r3
 801daba:	4610      	mov	r0, r2
 801dabc:	f7ff fb38 	bl	801d130 <nk_style_item_color>
 801dac0:	3484      	adds	r4, #132	; 0x84
 801dac2:	463d      	mov	r5, r7
 801dac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dac8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dacc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 801dad0:	6a3b      	ldr	r3, [r7, #32]
 801dad2:	333c      	adds	r3, #60	; 0x3c
 801dad4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801dad6:	463a      	mov	r2, r7
 801dad8:	6819      	ldr	r1, [r3, #0]
 801dada:	460b      	mov	r3, r1
 801dadc:	4619      	mov	r1, r3
 801dade:	4610      	mov	r0, r2
 801dae0:	f7ff fb26 	bl	801d130 <nk_style_item_color>
 801dae4:	34a0      	adds	r4, #160	; 0xa0
 801dae6:	463d      	mov	r5, r7
 801dae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801daea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801daec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801daf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;
 801daf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801daf6:	220a      	movs	r2, #10
 801daf8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;
 801dafc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801dafe:	2209      	movs	r2, #9
 801db00:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
    slider->cursor_size     = nk_vec2(16,16);
 801db04:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db06:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 801db0a:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 801db0e:	f7f8 ff3f 	bl	8016990 <nk_vec2>
 801db12:	eeb0 7a40 	vmov.f32	s14, s0
 801db16:	eef0 7a60 	vmov.f32	s15, s1
 801db1a:	ed84 7a36 	vstr	s14, [r4, #216]	; 0xd8
 801db1e:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
    slider->padding         = nk_vec2(2,2);
 801db22:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db24:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801db28:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801db2c:	f7f8 ff30 	bl	8016990 <nk_vec2>
 801db30:	eeb0 7a40 	vmov.f32	s14, s0
 801db34:	eef0 7a60 	vmov.f32	s15, s1
 801db38:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
 801db3c:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
    slider->spacing         = nk_vec2(2,2);
 801db40:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801db46:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801db4a:	f7f8 ff21 	bl	8016990 <nk_vec2>
 801db4e:	eeb0 7a40 	vmov.f32	s14, s0
 801db52:	eef0 7a60 	vmov.f32	s15, s1
 801db56:	ed84 7a34 	vstr	s14, [r4, #208]	; 0xd0
 801db5a:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
    slider->userdata        = nk_handle_ptr(0);
 801db5e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db60:	2000      	movs	r0, #0
 801db62:	f7f7 f9bb 	bl	8014edc <nk_handle_ptr>
 801db66:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    slider->show_buttons    = nk_false;
 801db6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db6c:	2200      	movs	r2, #0
 801db6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    slider->bar_height      = 8;
 801db72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db74:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801db78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    slider->rounding        = 0;
 801db7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db7e:	f04f 0200 	mov.w	r2, #0
 801db82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    slider->draw_begin      = 0;
 801db86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db88:	2200      	movs	r2, #0
 801db8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    slider->draw_end        = 0;
 801db8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db90:	2200      	movs	r2, #0
 801db92:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    /* slider buttons */
    button = &style->slider.inc_button;
 801db96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db98:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801db9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 801db9e:	2228      	movs	r2, #40	; 0x28
 801dba0:	2128      	movs	r1, #40	; 0x28
 801dba2:	2028      	movs	r0, #40	; 0x28
 801dba4:	f7f2 f8be 	bl	800fd24 <nk_rgb>
 801dba8:	4603      	mov	r3, r0
 801dbaa:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbac:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dbae:	463b      	mov	r3, r7
 801dbb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dbb2:	4618      	mov	r0, r3
 801dbb4:	f7ff fabc 	bl	801d130 <nk_style_item_color>
 801dbb8:	4625      	mov	r5, r4
 801dbba:	463c      	mov	r4, r7
 801dbbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801dbbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801dbc0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801dbc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 801dbc8:	222a      	movs	r2, #42	; 0x2a
 801dbca:	212a      	movs	r1, #42	; 0x2a
 801dbcc:	202a      	movs	r0, #42	; 0x2a
 801dbce:	f7f2 f8a9 	bl	800fd24 <nk_rgb>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dbd6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dbd8:	463b      	mov	r3, r7
 801dbda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dbdc:	4618      	mov	r0, r3
 801dbde:	f7ff faa7 	bl	801d130 <nk_style_item_color>
 801dbe2:	341c      	adds	r4, #28
 801dbe4:	463d      	mov	r5, r7
 801dbe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dbe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dbea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dbee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 801dbf2:	222c      	movs	r2, #44	; 0x2c
 801dbf4:	212c      	movs	r1, #44	; 0x2c
 801dbf6:	202c      	movs	r0, #44	; 0x2c
 801dbf8:	f7f2 f894 	bl	800fd24 <nk_rgb>
 801dbfc:	4603      	mov	r3, r0
 801dbfe:	633b      	str	r3, [r7, #48]	; 0x30
 801dc00:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc02:	463b      	mov	r3, r7
 801dc04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc06:	4618      	mov	r0, r3
 801dc08:	f7ff fa92 	bl	801d130 <nk_style_item_color>
 801dc0c:	3438      	adds	r4, #56	; 0x38
 801dc0e:	463d      	mov	r5, r7
 801dc10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dc12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dc14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dc18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 801dc1c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc1e:	2241      	movs	r2, #65	; 0x41
 801dc20:	2141      	movs	r1, #65	; 0x41
 801dc22:	2041      	movs	r0, #65	; 0x41
 801dc24:	f7f2 f87e 	bl	800fd24 <nk_rgb>
 801dc28:	4603      	mov	r3, r0
 801dc2a:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 801dc2c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc2e:	2228      	movs	r2, #40	; 0x28
 801dc30:	2128      	movs	r1, #40	; 0x28
 801dc32:	2028      	movs	r0, #40	; 0x28
 801dc34:	f7f2 f876 	bl	800fd24 <nk_rgb>
 801dc38:	4603      	mov	r3, r0
 801dc3a:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 801dc3c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc3e:	22af      	movs	r2, #175	; 0xaf
 801dc40:	21af      	movs	r1, #175	; 0xaf
 801dc42:	20af      	movs	r0, #175	; 0xaf
 801dc44:	f7f2 f86e 	bl	800fd24 <nk_rgb>
 801dc48:	4603      	mov	r3, r0
 801dc4a:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 801dc4c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc4e:	22af      	movs	r2, #175	; 0xaf
 801dc50:	21af      	movs	r1, #175	; 0xaf
 801dc52:	20af      	movs	r0, #175	; 0xaf
 801dc54:	f7f2 f866 	bl	800fd24 <nk_rgb>
 801dc58:	4603      	mov	r3, r0
 801dc5a:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 801dc5c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc5e:	22af      	movs	r2, #175	; 0xaf
 801dc60:	21af      	movs	r1, #175	; 0xaf
 801dc62:	20af      	movs	r0, #175	; 0xaf
 801dc64:	f7f2 f85e 	bl	800fd24 <nk_rgb>
 801dc68:	4603      	mov	r3, r0
 801dc6a:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(8.0f,8.0f);
 801dc6c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc6e:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801dc72:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801dc76:	f7f8 fe8b 	bl	8016990 <nk_vec2>
 801dc7a:	eeb0 7a40 	vmov.f32	s14, s0
 801dc7e:	eef0 7a60 	vmov.f32	s15, s1
 801dc82:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801dc86:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801dc8a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc8c:	eddf 0a18 	vldr	s1, [pc, #96]	; 801dcf0 <nk_style_from_table+0xb58>
 801dc90:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801dcf0 <nk_style_from_table+0xb58>
 801dc94:	f7f8 fe7c 	bl	8016990 <nk_vec2>
 801dc98:	eeb0 7a40 	vmov.f32	s14, s0
 801dc9c:	eef0 7a60 	vmov.f32	s15, s1
 801dca0:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801dca4:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801dca8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dcaa:	2000      	movs	r0, #0
 801dcac:	f7f7 f916 	bl	8014edc <nk_handle_ptr>
 801dcb0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801dcb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcb6:	2212      	movs	r2, #18
 801dcb8:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 801dcba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801dcc0:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801dcc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcc4:	f04f 0200 	mov.w	r2, #0
 801dcc8:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801dcca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dccc:	2200      	movs	r2, #0
 801dcce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801dcd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->slider.dec_button = style->slider.inc_button;
 801dcda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801dcdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dcde:	f202 50fc 	addw	r0, r2, #1532	; 0x5fc
 801dce2:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801dce6:	2298      	movs	r2, #152	; 0x98
 801dce8:	4619      	mov	r1, r3
 801dcea:	f007 fd1d 	bl	8025728 <memcpy>
 801dcee:	e003      	b.n	801dcf8 <nk_style_from_table+0xb60>
	...

    /* progressbar */
    prog = &style->progress;
 801dcf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dcfa:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 801dcfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    nk_zero_struct(*prog);
 801dd00:	21d4      	movs	r1, #212	; 0xd4
 801dd02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801dd04:	f004 fcbe 	bl	8022684 <nk_zero>
    prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 801dd08:	6a3b      	ldr	r3, [r7, #32]
 801dd0a:	3330      	adds	r3, #48	; 0x30
 801dd0c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd0e:	463a      	mov	r2, r7
 801dd10:	6819      	ldr	r1, [r3, #0]
 801dd12:	460b      	mov	r3, r1
 801dd14:	4619      	mov	r1, r3
 801dd16:	4610      	mov	r0, r2
 801dd18:	f7ff fa0a 	bl	801d130 <nk_style_item_color>
 801dd1c:	4625      	mov	r5, r4
 801dd1e:	463c      	mov	r4, r7
 801dd20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801dd22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801dd24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801dd28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);
 801dd2c:	6a3b      	ldr	r3, [r7, #32]
 801dd2e:	3330      	adds	r3, #48	; 0x30
 801dd30:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd32:	463a      	mov	r2, r7
 801dd34:	6819      	ldr	r1, [r3, #0]
 801dd36:	460b      	mov	r3, r1
 801dd38:	4619      	mov	r1, r3
 801dd3a:	4610      	mov	r0, r2
 801dd3c:	f7ff f9f8 	bl	801d130 <nk_style_item_color>
 801dd40:	341c      	adds	r4, #28
 801dd42:	463d      	mov	r5, r7
 801dd44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dd46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dd48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dd4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 801dd50:	6a3b      	ldr	r3, [r7, #32]
 801dd52:	3330      	adds	r3, #48	; 0x30
 801dd54:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd56:	463a      	mov	r2, r7
 801dd58:	6819      	ldr	r1, [r3, #0]
 801dd5a:	460b      	mov	r3, r1
 801dd5c:	4619      	mov	r1, r3
 801dd5e:	4610      	mov	r0, r2
 801dd60:	f7ff f9e6 	bl	801d130 <nk_style_item_color>
 801dd64:	3438      	adds	r4, #56	; 0x38
 801dd66:	463d      	mov	r5, r7
 801dd68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dd6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dd6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dd70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 801dd74:	6a3b      	ldr	r3, [r7, #32]
 801dd76:	3334      	adds	r3, #52	; 0x34
 801dd78:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd7a:	463a      	mov	r2, r7
 801dd7c:	6819      	ldr	r1, [r3, #0]
 801dd7e:	460b      	mov	r3, r1
 801dd80:	4619      	mov	r1, r3
 801dd82:	4610      	mov	r0, r2
 801dd84:	f7ff f9d4 	bl	801d130 <nk_style_item_color>
 801dd88:	3458      	adds	r4, #88	; 0x58
 801dd8a:	463d      	mov	r5, r7
 801dd8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dd8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dd90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dd94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 801dd98:	6a3b      	ldr	r3, [r7, #32]
 801dd9a:	3338      	adds	r3, #56	; 0x38
 801dd9c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd9e:	463a      	mov	r2, r7
 801dda0:	6819      	ldr	r1, [r3, #0]
 801dda2:	460b      	mov	r3, r1
 801dda4:	4619      	mov	r1, r3
 801dda6:	4610      	mov	r0, r2
 801dda8:	f7ff f9c2 	bl	801d130 <nk_style_item_color>
 801ddac:	3474      	adds	r4, #116	; 0x74
 801ddae:	463d      	mov	r5, r7
 801ddb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ddb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ddb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ddb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 801ddbc:	6a3b      	ldr	r3, [r7, #32]
 801ddbe:	333c      	adds	r3, #60	; 0x3c
 801ddc0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801ddc2:	463a      	mov	r2, r7
 801ddc4:	6819      	ldr	r1, [r3, #0]
 801ddc6:	460b      	mov	r3, r1
 801ddc8:	4619      	mov	r1, r3
 801ddca:	4610      	mov	r0, r2
 801ddcc:	f7ff f9b0 	bl	801d130 <nk_style_item_color>
 801ddd0:	3490      	adds	r4, #144	; 0x90
 801ddd2:	463d      	mov	r5, r7
 801ddd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ddd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ddd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dddc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->border_color      = nk_rgba(0,0,0,0);
 801dde0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dde2:	2300      	movs	r3, #0
 801dde4:	2200      	movs	r2, #0
 801dde6:	2100      	movs	r1, #0
 801dde8:	2000      	movs	r0, #0
 801ddea:	f7f1 ff4b 	bl	800fc84 <nk_rgba>
 801ddee:	4603      	mov	r3, r0
 801ddf0:	6563      	str	r3, [r4, #84]	; 0x54
    prog->cursor_border_color = nk_rgba(0,0,0,0);
 801ddf2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	2200      	movs	r2, #0
 801ddf8:	2100      	movs	r1, #0
 801ddfa:	2000      	movs	r0, #0
 801ddfc:	f7f1 ff42 	bl	800fc84 <nk_rgba>
 801de00:	4603      	mov	r3, r0
 801de02:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    prog->userdata          = nk_handle_ptr(0);
 801de06:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801de08:	2000      	movs	r0, #0
 801de0a:	f7f7 f867 	bl	8014edc <nk_handle_ptr>
 801de0e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    prog->padding           = nk_vec2(4,4);
 801de12:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801de14:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801de18:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801de1c:	f7f8 fdb8 	bl	8016990 <nk_vec2>
 801de20:	eeb0 7a40 	vmov.f32	s14, s0
 801de24:	eef0 7a60 	vmov.f32	s15, s1
 801de28:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 801de2c:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    prog->rounding          = 0;
 801de30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de32:	f04f 0200 	mov.w	r2, #0
 801de36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    prog->border            = 0;
 801de3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de3c:	f04f 0200 	mov.w	r2, #0
 801de40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    prog->cursor_rounding   = 0;
 801de44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de46:	f04f 0200 	mov.w	r2, #0
 801de4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    prog->cursor_border     = 0;
 801de4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de50:	f04f 0200 	mov.w	r2, #0
 801de54:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    prog->draw_begin        = 0;
 801de58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de5a:	2200      	movs	r2, #0
 801de5c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    prog->draw_end          = 0;
 801de60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de62:	2200      	movs	r2, #0
 801de64:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* scrollbars */
    scroll = &style->scrollh;
 801de68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801de6a:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 801de6e:	65bb      	str	r3, [r7, #88]	; 0x58
    nk_zero_struct(*scroll);
 801de70:	f44f 7103 	mov.w	r1, #524	; 0x20c
 801de74:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801de76:	f004 fc05 	bl	8022684 <nk_zero>
    scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801de7a:	6a3b      	ldr	r3, [r7, #32]
 801de7c:	335c      	adds	r3, #92	; 0x5c
 801de7e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801de80:	463a      	mov	r2, r7
 801de82:	6819      	ldr	r1, [r3, #0]
 801de84:	460b      	mov	r3, r1
 801de86:	4619      	mov	r1, r3
 801de88:	4610      	mov	r0, r2
 801de8a:	f7ff f951 	bl	801d130 <nk_style_item_color>
 801de8e:	4625      	mov	r5, r4
 801de90:	463c      	mov	r4, r7
 801de92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801de94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801de96:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801de9a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801de9e:	6a3b      	ldr	r3, [r7, #32]
 801dea0:	335c      	adds	r3, #92	; 0x5c
 801dea2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801dea4:	463a      	mov	r2, r7
 801dea6:	6819      	ldr	r1, [r3, #0]
 801dea8:	460b      	mov	r3, r1
 801deaa:	4619      	mov	r1, r3
 801deac:	4610      	mov	r0, r2
 801deae:	f7ff f93f 	bl	801d130 <nk_style_item_color>
 801deb2:	341c      	adds	r4, #28
 801deb4:	463d      	mov	r5, r7
 801deb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801deb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801deba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801debe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801dec2:	6a3b      	ldr	r3, [r7, #32]
 801dec4:	335c      	adds	r3, #92	; 0x5c
 801dec6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801dec8:	463a      	mov	r2, r7
 801deca:	6819      	ldr	r1, [r3, #0]
 801decc:	460b      	mov	r3, r1
 801dece:	4619      	mov	r1, r3
 801ded0:	4610      	mov	r0, r2
 801ded2:	f7ff f92d 	bl	801d130 <nk_style_item_color>
 801ded6:	3438      	adds	r4, #56	; 0x38
 801ded8:	463d      	mov	r5, r7
 801deda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dedc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);
 801dee6:	6a3b      	ldr	r3, [r7, #32]
 801dee8:	3360      	adds	r3, #96	; 0x60
 801deea:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801deec:	463a      	mov	r2, r7
 801deee:	6819      	ldr	r1, [r3, #0]
 801def0:	460b      	mov	r3, r1
 801def2:	4619      	mov	r1, r3
 801def4:	4610      	mov	r0, r2
 801def6:	f7ff f91b 	bl	801d130 <nk_style_item_color>
 801defa:	3458      	adds	r4, #88	; 0x58
 801defc:	463d      	mov	r5, r7
 801defe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801df00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801df06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);
 801df0a:	6a3b      	ldr	r3, [r7, #32]
 801df0c:	3364      	adds	r3, #100	; 0x64
 801df0e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df10:	463a      	mov	r2, r7
 801df12:	6819      	ldr	r1, [r3, #0]
 801df14:	460b      	mov	r3, r1
 801df16:	4619      	mov	r1, r3
 801df18:	4610      	mov	r0, r2
 801df1a:	f7ff f909 	bl	801d130 <nk_style_item_color>
 801df1e:	3474      	adds	r4, #116	; 0x74
 801df20:	463d      	mov	r5, r7
 801df22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801df24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801df2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);
 801df2e:	6a3b      	ldr	r3, [r7, #32]
 801df30:	3368      	adds	r3, #104	; 0x68
 801df32:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df34:	463a      	mov	r2, r7
 801df36:	6819      	ldr	r1, [r3, #0]
 801df38:	460b      	mov	r3, r1
 801df3a:	4619      	mov	r1, r3
 801df3c:	4610      	mov	r0, r2
 801df3e:	f7ff f8f7 	bl	801d130 <nk_style_item_color>
 801df42:	3490      	adds	r4, #144	; 0x90
 801df44:	463d      	mov	r5, r7
 801df46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801df48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801df4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 801df52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df54:	2203      	movs	r2, #3
 801df56:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 801df5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df5c:	2203      	movs	r2, #3
 801df5e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    scroll->userdata        = nk_handle_ptr(0);
 801df62:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df64:	2000      	movs	r0, #0
 801df66:	f7f6 ffb9 	bl	8014edc <nk_handle_ptr>
 801df6a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    scroll->border_color    = table[NK_COLOR_SCROLLBAR];
 801df6e:	6a3b      	ldr	r3, [r7, #32]
 801df70:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801df74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df76:	3354      	adds	r3, #84	; 0x54
 801df78:	6810      	ldr	r0, [r2, #0]
 801df7a:	6018      	str	r0, [r3, #0]
    scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];
 801df7c:	6a3b      	ldr	r3, [r7, #32]
 801df7e:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801df82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df84:	33ac      	adds	r3, #172	; 0xac
 801df86:	6810      	ldr	r0, [r2, #0]
 801df88:	6018      	str	r0, [r3, #0]
    scroll->padding         = nk_vec2(0,0);
 801df8a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df8c:	ed5f 0aa7 	vldr	s1, [pc, #-668]	; 801dcf4 <nk_style_from_table+0xb5c>
 801df90:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 801dcf4 <nk_style_from_table+0xb5c>
 801df94:	f7f8 fcfc 	bl	8016990 <nk_vec2>
 801df98:	eeb0 7a40 	vmov.f32	s14, s0
 801df9c:	eef0 7a60 	vmov.f32	s15, s1
 801dfa0:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 801dfa4:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    scroll->show_buttons    = nk_false;
 801dfa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfaa:	2200      	movs	r2, #0
 801dfac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    scroll->border          = 0;
 801dfb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfb2:	f04f 0200 	mov.w	r2, #0
 801dfb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    scroll->rounding        = 0;
 801dfba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfbc:	f04f 0200 	mov.w	r2, #0
 801dfc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    scroll->border_cursor   = 0;
 801dfc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfc6:	f04f 0200 	mov.w	r2, #0
 801dfca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    scroll->rounding_cursor = 0;
 801dfce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfd0:	f04f 0200 	mov.w	r2, #0
 801dfd4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    scroll->draw_begin      = 0;
 801dfd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfda:	2200      	movs	r2, #0
 801dfdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    scroll->draw_end        = 0;
 801dfe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfe2:	2200      	movs	r2, #0
 801dfe4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    style->scrollv = style->scrollh;
 801dfe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801dfee:	461a      	mov	r2, r3
 801dff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dff2:	f102 00d0 	add.w	r0, r2, #208	; 0xd0
 801dff6:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 801dffa:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801dffe:	4619      	mov	r1, r3
 801e000:	f007 fb92 	bl	8025728 <memcpy>

    /* scrollbars buttons */
    button = &style->scrollh.inc_button;
 801e004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e006:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e00a:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 801e00c:	2228      	movs	r2, #40	; 0x28
 801e00e:	2128      	movs	r1, #40	; 0x28
 801e010:	2028      	movs	r0, #40	; 0x28
 801e012:	f7f1 fe87 	bl	800fd24 <nk_rgb>
 801e016:	4603      	mov	r3, r0
 801e018:	637b      	str	r3, [r7, #52]	; 0x34
 801e01a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e01c:	463b      	mov	r3, r7
 801e01e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e020:	4618      	mov	r0, r3
 801e022:	f7ff f885 	bl	801d130 <nk_style_item_color>
 801e026:	4625      	mov	r5, r4
 801e028:	463c      	mov	r4, r7
 801e02a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e02c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e02e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e032:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 801e036:	222a      	movs	r2, #42	; 0x2a
 801e038:	212a      	movs	r1, #42	; 0x2a
 801e03a:	202a      	movs	r0, #42	; 0x2a
 801e03c:	f7f1 fe72 	bl	800fd24 <nk_rgb>
 801e040:	4603      	mov	r3, r0
 801e042:	63bb      	str	r3, [r7, #56]	; 0x38
 801e044:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e046:	463b      	mov	r3, r7
 801e048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e04a:	4618      	mov	r0, r3
 801e04c:	f7ff f870 	bl	801d130 <nk_style_item_color>
 801e050:	341c      	adds	r4, #28
 801e052:	463d      	mov	r5, r7
 801e054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e05c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 801e060:	222c      	movs	r2, #44	; 0x2c
 801e062:	212c      	movs	r1, #44	; 0x2c
 801e064:	202c      	movs	r0, #44	; 0x2c
 801e066:	f7f1 fe5d 	bl	800fd24 <nk_rgb>
 801e06a:	4603      	mov	r3, r0
 801e06c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e06e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e070:	463b      	mov	r3, r7
 801e072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e074:	4618      	mov	r0, r3
 801e076:	f7ff f85b 	bl	801d130 <nk_style_item_color>
 801e07a:	3438      	adds	r4, #56	; 0x38
 801e07c:	463d      	mov	r5, r7
 801e07e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 801e08a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e08c:	2241      	movs	r2, #65	; 0x41
 801e08e:	2141      	movs	r1, #65	; 0x41
 801e090:	2041      	movs	r0, #65	; 0x41
 801e092:	f7f1 fe47 	bl	800fd24 <nk_rgb>
 801e096:	4603      	mov	r3, r0
 801e098:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 801e09a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e09c:	2228      	movs	r2, #40	; 0x28
 801e09e:	2128      	movs	r1, #40	; 0x28
 801e0a0:	2028      	movs	r0, #40	; 0x28
 801e0a2:	f7f1 fe3f 	bl	800fd24 <nk_rgb>
 801e0a6:	4603      	mov	r3, r0
 801e0a8:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 801e0aa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0ac:	22af      	movs	r2, #175	; 0xaf
 801e0ae:	21af      	movs	r1, #175	; 0xaf
 801e0b0:	20af      	movs	r0, #175	; 0xaf
 801e0b2:	f7f1 fe37 	bl	800fd24 <nk_rgb>
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 801e0ba:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0bc:	22af      	movs	r2, #175	; 0xaf
 801e0be:	21af      	movs	r1, #175	; 0xaf
 801e0c0:	20af      	movs	r0, #175	; 0xaf
 801e0c2:	f7f1 fe2f 	bl	800fd24 <nk_rgb>
 801e0c6:	4603      	mov	r3, r0
 801e0c8:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 801e0ca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0cc:	22af      	movs	r2, #175	; 0xaf
 801e0ce:	21af      	movs	r1, #175	; 0xaf
 801e0d0:	20af      	movs	r0, #175	; 0xaf
 801e0d2:	f7f1 fe27 	bl	800fd24 <nk_rgb>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(4.0f,4.0f);
 801e0da:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0dc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e0e0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e0e4:	f7f8 fc54 	bl	8016990 <nk_vec2>
 801e0e8:	eeb0 7a40 	vmov.f32	s14, s0
 801e0ec:	eef0 7a60 	vmov.f32	s15, s1
 801e0f0:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801e0f4:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801e0f8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0fa:	eddf 0ac9 	vldr	s1, [pc, #804]	; 801e420 <nk_style_from_table+0x1288>
 801e0fe:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 801e420 <nk_style_from_table+0x1288>
 801e102:	f7f8 fc45 	bl	8016990 <nk_vec2>
 801e106:	eeb0 7a40 	vmov.f32	s14, s0
 801e10a:	eef0 7a60 	vmov.f32	s15, s1
 801e10e:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801e112:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801e116:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e118:	2000      	movs	r0, #0
 801e11a:	f7f6 fedf 	bl	8014edc <nk_handle_ptr>
 801e11e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801e122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e124:	2212      	movs	r2, #18
 801e126:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 801e128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e12a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e12e:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801e130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e132:	f04f 0200 	mov.w	r2, #0
 801e136:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801e138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e13a:	2200      	movs	r2, #0
 801e13c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801e140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e142:	2200      	movs	r2, #0
 801e144:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->scrollh.dec_button = style->scrollh.inc_button;
 801e148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e14e:	461a      	mov	r2, r3
 801e150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e152:	f102 0028 	add.w	r0, r2, #40	; 0x28
 801e156:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e15a:	2298      	movs	r2, #152	; 0x98
 801e15c:	4619      	mov	r1, r3
 801e15e:	f007 fae3 	bl	8025728 <memcpy>
    style->scrollv.inc_button = style->scrollh.inc_button;
 801e162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e168:	461a      	mov	r2, r3
 801e16a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e16c:	f502 70ce 	add.w	r0, r2, #412	; 0x19c
 801e170:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e174:	2298      	movs	r2, #152	; 0x98
 801e176:	4619      	mov	r1, r3
 801e178:	f007 fad6 	bl	8025728 <memcpy>
    style->scrollv.dec_button = style->scrollh.inc_button;
 801e17c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e182:	461a      	mov	r2, r3
 801e184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e186:	f502 700d 	add.w	r0, r2, #564	; 0x234
 801e18a:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e18e:	2298      	movs	r2, #152	; 0x98
 801e190:	4619      	mov	r1, r3
 801e192:	f007 fac9 	bl	8025728 <memcpy>

    /* edit */
    edit = &style->edit;
 801e196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e198:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 801e19c:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 801e19e:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 801e1a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e1a4:	f004 fa6e 	bl	8022684 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);
 801e1a8:	6a3b      	ldr	r3, [r7, #32]
 801e1aa:	3344      	adds	r3, #68	; 0x44
 801e1ac:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e1ae:	463a      	mov	r2, r7
 801e1b0:	6819      	ldr	r1, [r3, #0]
 801e1b2:	460b      	mov	r3, r1
 801e1b4:	4619      	mov	r1, r3
 801e1b6:	4610      	mov	r0, r2
 801e1b8:	f7fe ffba 	bl	801d130 <nk_style_item_color>
 801e1bc:	4625      	mov	r5, r4
 801e1be:	463c      	mov	r4, r7
 801e1c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e1c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e1c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e1c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);
 801e1cc:	6a3b      	ldr	r3, [r7, #32]
 801e1ce:	3344      	adds	r3, #68	; 0x44
 801e1d0:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e1d2:	463a      	mov	r2, r7
 801e1d4:	6819      	ldr	r1, [r3, #0]
 801e1d6:	460b      	mov	r3, r1
 801e1d8:	4619      	mov	r1, r3
 801e1da:	4610      	mov	r0, r2
 801e1dc:	f7fe ffa8 	bl	801d130 <nk_style_item_color>
 801e1e0:	341c      	adds	r4, #28
 801e1e2:	463d      	mov	r5, r7
 801e1e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e1e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e1e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e1ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);
 801e1f0:	6a3b      	ldr	r3, [r7, #32]
 801e1f2:	3344      	adds	r3, #68	; 0x44
 801e1f4:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e1f6:	463a      	mov	r2, r7
 801e1f8:	6819      	ldr	r1, [r3, #0]
 801e1fa:	460b      	mov	r3, r1
 801e1fc:	4619      	mov	r1, r3
 801e1fe:	4610      	mov	r0, r2
 801e200:	f7fe ff96 	bl	801d130 <nk_style_item_color>
 801e204:	3438      	adds	r4, #56	; 0x38
 801e206:	463d      	mov	r5, r7
 801e208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e20a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e20c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 801e214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e216:	6a3a      	ldr	r2, [r7, #32]
 801e218:	f503 7319 	add.w	r3, r3, #612	; 0x264
 801e21c:	6810      	ldr	r0, [r2, #0]
 801e21e:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 801e220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e222:	6a3a      	ldr	r2, [r7, #32]
 801e224:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801e228:	6810      	ldr	r0, [r2, #0]
 801e22a:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 801e22c:	6a3b      	ldr	r3, [r7, #32]
 801e22e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e234:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 801e238:	6810      	ldr	r0, [r2, #0]
 801e23a:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 801e23c:	6a3b      	ldr	r3, [r7, #32]
 801e23e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e244:	f503 731c 	add.w	r3, r3, #624	; 0x270
 801e248:	6810      	ldr	r0, [r2, #0]
 801e24a:	6018      	str	r0, [r3, #0]
    edit->border_color      = table[NK_COLOR_BORDER];
 801e24c:	6a3b      	ldr	r3, [r7, #32]
 801e24e:	f103 020c 	add.w	r2, r3, #12
 801e252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e254:	3354      	adds	r3, #84	; 0x54
 801e256:	6810      	ldr	r0, [r2, #0]
 801e258:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 801e25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e25c:	6a3a      	ldr	r2, [r7, #32]
 801e25e:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801e262:	6810      	ldr	r0, [r2, #0]
 801e264:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 801e266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e268:	6a3a      	ldr	r2, [r7, #32]
 801e26a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801e26e:	6810      	ldr	r0, [r2, #0]
 801e270:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 801e272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e274:	6a3a      	ldr	r2, [r7, #32]
 801e276:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801e27a:	6810      	ldr	r0, [r2, #0]
 801e27c:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801e27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e280:	6a3a      	ldr	r2, [r7, #32]
 801e282:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801e286:	6810      	ldr	r0, [r2, #0]
 801e288:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 801e28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e28c:	6a3a      	ldr	r2, [r7, #32]
 801e28e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801e292:	6810      	ldr	r0, [r2, #0]
 801e294:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 801e296:	6a3b      	ldr	r3, [r7, #32]
 801e298:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e29c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e29e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801e2a2:	6810      	ldr	r0, [r2, #0]
 801e2a4:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801e2a6:	6a3b      	ldr	r3, [r7, #32]
 801e2a8:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e2ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e2ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801e2b2:	6810      	ldr	r0, [r2, #0]
 801e2b4:	6018      	str	r0, [r3, #0]
    edit->scrollbar_size    = nk_vec2(10,10);
 801e2b6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e2b8:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 801e2bc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801e2c0:	f7f8 fb66 	bl	8016990 <nk_vec2>
 801e2c4:	eeb0 7a40 	vmov.f32	s14, s0
 801e2c8:	eef0 7a60 	vmov.f32	s15, s1
 801e2cc:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 801e2d0:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    edit->scrollbar         = style->scrollv;
 801e2d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e2d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e2d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e2dc:	3358      	adds	r3, #88	; 0x58
 801e2de:	f102 01d0 	add.w	r1, r2, #208	; 0xd0
 801e2e2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801e2e6:	4618      	mov	r0, r3
 801e2e8:	f007 fa1e 	bl	8025728 <memcpy>
    edit->padding           = nk_vec2(4,4);
 801e2ec:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e2ee:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e2f2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e2f6:	f7f8 fb4b 	bl	8016990 <nk_vec2>
 801e2fa:	eeb0 7a40 	vmov.f32	s14, s0
 801e2fe:	eef0 7a60 	vmov.f32	s15, s1
 801e302:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 801e306:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->row_padding       = 2;
 801e30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e30c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801e310:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    edit->cursor_size       = 4;
 801e314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e316:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801e31a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 1;
 801e31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e320:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e324:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 801e328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e32a:	f04f 0200 	mov.w	r2, #0
 801e32e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* property */
    property = &style->property;
 801e332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e334:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 801e338:	653b      	str	r3, [r7, #80]	; 0x50
    nk_zero_struct(*property);
 801e33a:	f240 4164 	movw	r1, #1124	; 0x464
 801e33e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e340:	f004 f9a0 	bl	8022684 <nk_zero>
    property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e344:	6a3b      	ldr	r3, [r7, #32]
 801e346:	3340      	adds	r3, #64	; 0x40
 801e348:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e34a:	463a      	mov	r2, r7
 801e34c:	6819      	ldr	r1, [r3, #0]
 801e34e:	460b      	mov	r3, r1
 801e350:	4619      	mov	r1, r3
 801e352:	4610      	mov	r0, r2
 801e354:	f7fe feec 	bl	801d130 <nk_style_item_color>
 801e358:	4625      	mov	r5, r4
 801e35a:	463c      	mov	r4, r7
 801e35c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e35e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e360:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e364:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e368:	6a3b      	ldr	r3, [r7, #32]
 801e36a:	3340      	adds	r3, #64	; 0x40
 801e36c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e36e:	463a      	mov	r2, r7
 801e370:	6819      	ldr	r1, [r3, #0]
 801e372:	460b      	mov	r3, r1
 801e374:	4619      	mov	r1, r3
 801e376:	4610      	mov	r0, r2
 801e378:	f7fe feda 	bl	801d130 <nk_style_item_color>
 801e37c:	341c      	adds	r4, #28
 801e37e:	463d      	mov	r5, r7
 801e380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e38c:	6a3b      	ldr	r3, [r7, #32]
 801e38e:	3340      	adds	r3, #64	; 0x40
 801e390:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e392:	463a      	mov	r2, r7
 801e394:	6819      	ldr	r1, [r3, #0]
 801e396:	460b      	mov	r3, r1
 801e398:	4619      	mov	r1, r3
 801e39a:	4610      	mov	r0, r2
 801e39c:	f7fe fec8 	bl	801d130 <nk_style_item_color>
 801e3a0:	3438      	adds	r4, #56	; 0x38
 801e3a2:	463d      	mov	r5, r7
 801e3a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e3a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e3a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e3ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->border_color  = table[NK_COLOR_BORDER];
 801e3b0:	6a3b      	ldr	r3, [r7, #32]
 801e3b2:	f103 020c 	add.w	r2, r3, #12
 801e3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3b8:	3354      	adds	r3, #84	; 0x54
 801e3ba:	6810      	ldr	r0, [r2, #0]
 801e3bc:	6018      	str	r0, [r3, #0]
    property->label_normal  = table[NK_COLOR_TEXT];
 801e3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3c0:	6a3a      	ldr	r2, [r7, #32]
 801e3c2:	3358      	adds	r3, #88	; 0x58
 801e3c4:	6810      	ldr	r0, [r2, #0]
 801e3c6:	6018      	str	r0, [r3, #0]
    property->label_hover   = table[NK_COLOR_TEXT];
 801e3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3ca:	6a3a      	ldr	r2, [r7, #32]
 801e3cc:	335c      	adds	r3, #92	; 0x5c
 801e3ce:	6810      	ldr	r0, [r2, #0]
 801e3d0:	6018      	str	r0, [r3, #0]
    property->label_active  = table[NK_COLOR_TEXT];
 801e3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3d4:	6a3a      	ldr	r2, [r7, #32]
 801e3d6:	3360      	adds	r3, #96	; 0x60
 801e3d8:	6810      	ldr	r0, [r2, #0]
 801e3da:	6018      	str	r0, [r3, #0]
    property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;
 801e3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3de:	2209      	movs	r2, #9
 801e3e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;
 801e3e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3e6:	220a      	movs	r2, #10
 801e3e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    property->userdata      = nk_handle_ptr(0);
 801e3ec:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e3ee:	2000      	movs	r0, #0
 801e3f0:	f7f6 fd74 	bl	8014edc <nk_handle_ptr>
 801e3f4:	f8c4 0458 	str.w	r0, [r4, #1112]	; 0x458
    property->padding       = nk_vec2(4,4);
 801e3f8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e3fa:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e3fe:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e402:	f7f8 fac5 	bl	8016990 <nk_vec2>
 801e406:	eeb0 7a40 	vmov.f32	s14, s0
 801e40a:	eef0 7a60 	vmov.f32	s15, s1
 801e40e:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 801e412:	edc4 7a1d 	vstr	s15, [r4, #116]	; 0x74
    property->border        = 1;
 801e416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e418:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e41c:	e002      	b.n	801e424 <nk_style_from_table+0x128c>
 801e41e:	bf00      	nop
 801e420:	00000000 	.word	0x00000000
 801e424:	669a      	str	r2, [r3, #104]	; 0x68
    property->rounding      = 10;
 801e426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e428:	4ac3      	ldr	r2, [pc, #780]	; (801e738 <nk_style_from_table+0x15a0>)
 801e42a:	66da      	str	r2, [r3, #108]	; 0x6c
    property->draw_begin    = 0;
 801e42c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e42e:	2200      	movs	r2, #0
 801e430:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
    property->draw_end      = 0;
 801e434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e436:	2200      	movs	r2, #0
 801e438:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460

    /* property buttons */
    button = &style->property.dec_button;
 801e43c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e43e:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 801e442:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801e444:	2198      	movs	r1, #152	; 0x98
 801e446:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801e448:	f004 f91c 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e44c:	6a3b      	ldr	r3, [r7, #32]
 801e44e:	3340      	adds	r3, #64	; 0x40
 801e450:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e452:	463a      	mov	r2, r7
 801e454:	6819      	ldr	r1, [r3, #0]
 801e456:	460b      	mov	r3, r1
 801e458:	4619      	mov	r1, r3
 801e45a:	4610      	mov	r0, r2
 801e45c:	f7fe fe68 	bl	801d130 <nk_style_item_color>
 801e460:	4625      	mov	r5, r4
 801e462:	463c      	mov	r4, r7
 801e464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e468:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e46c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e470:	6a3b      	ldr	r3, [r7, #32]
 801e472:	3340      	adds	r3, #64	; 0x40
 801e474:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e476:	463a      	mov	r2, r7
 801e478:	6819      	ldr	r1, [r3, #0]
 801e47a:	460b      	mov	r3, r1
 801e47c:	4619      	mov	r1, r3
 801e47e:	4610      	mov	r0, r2
 801e480:	f7fe fe56 	bl	801d130 <nk_style_item_color>
 801e484:	341c      	adds	r4, #28
 801e486:	463d      	mov	r5, r7
 801e488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e48a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e48c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e494:	6a3b      	ldr	r3, [r7, #32]
 801e496:	3340      	adds	r3, #64	; 0x40
 801e498:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e49a:	463a      	mov	r2, r7
 801e49c:	6819      	ldr	r1, [r3, #0]
 801e49e:	460b      	mov	r3, r1
 801e4a0:	4619      	mov	r1, r3
 801e4a2:	4610      	mov	r0, r2
 801e4a4:	f7fe fe44 	bl	801d130 <nk_style_item_color>
 801e4a8:	3438      	adds	r4, #56	; 0x38
 801e4aa:	463d      	mov	r5, r7
 801e4ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e4b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e4b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801e4b8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e4ba:	2300      	movs	r3, #0
 801e4bc:	2200      	movs	r2, #0
 801e4be:	2100      	movs	r1, #0
 801e4c0:	2000      	movs	r0, #0
 801e4c2:	f7f1 fbdf 	bl	800fc84 <nk_rgba>
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_PROPERTY];
 801e4ca:	6a3b      	ldr	r3, [r7, #32]
 801e4cc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801e4d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4d2:	3358      	adds	r3, #88	; 0x58
 801e4d4:	6810      	ldr	r0, [r2, #0]
 801e4d6:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801e4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4da:	6a3a      	ldr	r2, [r7, #32]
 801e4dc:	335c      	adds	r3, #92	; 0x5c
 801e4de:	6810      	ldr	r0, [r2, #0]
 801e4e0:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801e4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4e4:	6a3a      	ldr	r2, [r7, #32]
 801e4e6:	3360      	adds	r3, #96	; 0x60
 801e4e8:	6810      	ldr	r0, [r2, #0]
 801e4ea:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801e4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4ee:	6a3a      	ldr	r2, [r7, #32]
 801e4f0:	3364      	adds	r3, #100	; 0x64
 801e4f2:	6810      	ldr	r0, [r2, #0]
 801e4f4:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801e4f6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e4f8:	eddf 0a90 	vldr	s1, [pc, #576]	; 801e73c <nk_style_from_table+0x15a4>
 801e4fc:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 801e73c <nk_style_from_table+0x15a4>
 801e500:	f7f8 fa46 	bl	8016990 <nk_vec2>
 801e504:	eeb0 7a40 	vmov.f32	s14, s0
 801e508:	eef0 7a60 	vmov.f32	s15, s1
 801e50c:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801e510:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801e514:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e516:	eddf 0a89 	vldr	s1, [pc, #548]	; 801e73c <nk_style_from_table+0x15a4>
 801e51a:	ed9f 0a88 	vldr	s0, [pc, #544]	; 801e73c <nk_style_from_table+0x15a4>
 801e51e:	f7f8 fa37 	bl	8016990 <nk_vec2>
 801e522:	eeb0 7a40 	vmov.f32	s14, s0
 801e526:	eef0 7a60 	vmov.f32	s15, s1
 801e52a:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801e52e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801e532:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e534:	2000      	movs	r0, #0
 801e536:	f7f6 fcd1 	bl	8014edc <nk_handle_ptr>
 801e53a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801e53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e540:	2212      	movs	r2, #18
 801e542:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801e544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e546:	f04f 0200 	mov.w	r2, #0
 801e54a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801e54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e54e:	f04f 0200 	mov.w	r2, #0
 801e552:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801e554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e556:	2200      	movs	r2, #0
 801e558:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801e55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e55e:	2200      	movs	r2, #0
 801e560:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->property.inc_button = style->property.dec_button;
 801e564:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e568:	f502 602a 	add.w	r0, r2, #2720	; 0xaa0
 801e56c:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 801e570:	2298      	movs	r2, #152	; 0x98
 801e572:	4619      	mov	r1, r3
 801e574:	f007 f8d8 	bl	8025728 <memcpy>

    /* property edit */
    edit = &style->property.edit;
 801e578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e57a:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 801e57e:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 801e580:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 801e584:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e586:	f004 f87d 	bl	8022684 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e58a:	6a3b      	ldr	r3, [r7, #32]
 801e58c:	3340      	adds	r3, #64	; 0x40
 801e58e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e590:	463a      	mov	r2, r7
 801e592:	6819      	ldr	r1, [r3, #0]
 801e594:	460b      	mov	r3, r1
 801e596:	4619      	mov	r1, r3
 801e598:	4610      	mov	r0, r2
 801e59a:	f7fe fdc9 	bl	801d130 <nk_style_item_color>
 801e59e:	4625      	mov	r5, r4
 801e5a0:	463c      	mov	r4, r7
 801e5a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e5a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e5a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e5aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e5ae:	6a3b      	ldr	r3, [r7, #32]
 801e5b0:	3340      	adds	r3, #64	; 0x40
 801e5b2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e5b4:	463a      	mov	r2, r7
 801e5b6:	6819      	ldr	r1, [r3, #0]
 801e5b8:	460b      	mov	r3, r1
 801e5ba:	4619      	mov	r1, r3
 801e5bc:	4610      	mov	r0, r2
 801e5be:	f7fe fdb7 	bl	801d130 <nk_style_item_color>
 801e5c2:	341c      	adds	r4, #28
 801e5c4:	463d      	mov	r5, r7
 801e5c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e5c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e5ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e5ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e5d2:	6a3b      	ldr	r3, [r7, #32]
 801e5d4:	3340      	adds	r3, #64	; 0x40
 801e5d6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e5d8:	463a      	mov	r2, r7
 801e5da:	6819      	ldr	r1, [r3, #0]
 801e5dc:	460b      	mov	r3, r1
 801e5de:	4619      	mov	r1, r3
 801e5e0:	4610      	mov	r0, r2
 801e5e2:	f7fe fda5 	bl	801d130 <nk_style_item_color>
 801e5e6:	3438      	adds	r4, #56	; 0x38
 801e5e8:	463d      	mov	r5, r7
 801e5ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e5ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e5ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e5f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->border_color      = nk_rgba(0,0,0,0);
 801e5f6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	2200      	movs	r2, #0
 801e5fc:	2100      	movs	r1, #0
 801e5fe:	2000      	movs	r0, #0
 801e600:	f7f1 fb40 	bl	800fc84 <nk_rgba>
 801e604:	4603      	mov	r3, r0
 801e606:	6563      	str	r3, [r4, #84]	; 0x54
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 801e608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e60a:	6a3a      	ldr	r2, [r7, #32]
 801e60c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 801e610:	6810      	ldr	r0, [r2, #0]
 801e612:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 801e614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e616:	6a3a      	ldr	r2, [r7, #32]
 801e618:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801e61c:	6810      	ldr	r0, [r2, #0]
 801e61e:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 801e620:	6a3b      	ldr	r3, [r7, #32]
 801e622:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e628:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 801e62c:	6810      	ldr	r0, [r2, #0]
 801e62e:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 801e630:	6a3b      	ldr	r3, [r7, #32]
 801e632:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e638:	f503 731c 	add.w	r3, r3, #624	; 0x270
 801e63c:	6810      	ldr	r0, [r2, #0]
 801e63e:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 801e640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e642:	6a3a      	ldr	r2, [r7, #32]
 801e644:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801e648:	6810      	ldr	r0, [r2, #0]
 801e64a:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 801e64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e64e:	6a3a      	ldr	r2, [r7, #32]
 801e650:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801e654:	6810      	ldr	r0, [r2, #0]
 801e656:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 801e658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e65a:	6a3a      	ldr	r2, [r7, #32]
 801e65c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801e660:	6810      	ldr	r0, [r2, #0]
 801e662:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801e664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e666:	6a3a      	ldr	r2, [r7, #32]
 801e668:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801e66c:	6810      	ldr	r0, [r2, #0]
 801e66e:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 801e670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e672:	6a3a      	ldr	r2, [r7, #32]
 801e674:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801e678:	6810      	ldr	r0, [r2, #0]
 801e67a:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 801e67c:	6a3b      	ldr	r3, [r7, #32]
 801e67e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e684:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801e688:	6810      	ldr	r0, [r2, #0]
 801e68a:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801e68c:	6a3b      	ldr	r3, [r7, #32]
 801e68e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e694:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801e698:	6810      	ldr	r0, [r2, #0]
 801e69a:	6018      	str	r0, [r3, #0]
    edit->padding           = nk_vec2(0,0);
 801e69c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e69e:	eddf 0a27 	vldr	s1, [pc, #156]	; 801e73c <nk_style_from_table+0x15a4>
 801e6a2:	ed9f 0a26 	vldr	s0, [pc, #152]	; 801e73c <nk_style_from_table+0x15a4>
 801e6a6:	f7f8 f973 	bl	8016990 <nk_vec2>
 801e6aa:	eeb0 7a40 	vmov.f32	s14, s0
 801e6ae:	eef0 7a60 	vmov.f32	s15, s1
 801e6b2:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 801e6b6:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->cursor_size       = 8;
 801e6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6bc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801e6c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 0;
 801e6c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6c6:	f04f 0200 	mov.w	r2, #0
 801e6ca:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 801e6ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6d0:	f04f 0200 	mov.w	r2, #0
 801e6d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* chart */
    chart = &style->chart;
 801e6d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e6da:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 801e6de:	64fb      	str	r3, [r7, #76]	; 0x4c
    nk_zero_struct(*chart);
 801e6e0:	2138      	movs	r1, #56	; 0x38
 801e6e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e6e4:	f003 ffce 	bl	8022684 <nk_zero>
    chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);
 801e6e8:	6a3b      	ldr	r3, [r7, #32]
 801e6ea:	3350      	adds	r3, #80	; 0x50
 801e6ec:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e6ee:	463a      	mov	r2, r7
 801e6f0:	6819      	ldr	r1, [r3, #0]
 801e6f2:	460b      	mov	r3, r1
 801e6f4:	4619      	mov	r1, r3
 801e6f6:	4610      	mov	r0, r2
 801e6f8:	f7fe fd1a 	bl	801d130 <nk_style_item_color>
 801e6fc:	4625      	mov	r5, r4
 801e6fe:	463c      	mov	r4, r7
 801e700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e704:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e708:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    chart->border_color     = table[NK_COLOR_BORDER];
 801e70c:	6a3b      	ldr	r3, [r7, #32]
 801e70e:	f103 020c 	add.w	r2, r3, #12
 801e712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e714:	331c      	adds	r3, #28
 801e716:	6810      	ldr	r0, [r2, #0]
 801e718:	6018      	str	r0, [r3, #0]
    chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];
 801e71a:	6a3b      	ldr	r3, [r7, #32]
 801e71c:	f103 0258 	add.w	r2, r3, #88	; 0x58
 801e720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e722:	3320      	adds	r3, #32
 801e724:	6810      	ldr	r0, [r2, #0]
 801e726:	6018      	str	r0, [r3, #0]
    chart->color            = table[NK_COLOR_CHART_COLOR];
 801e728:	6a3b      	ldr	r3, [r7, #32]
 801e72a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801e72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e730:	3324      	adds	r3, #36	; 0x24
 801e732:	6810      	ldr	r0, [r2, #0]
 801e734:	6018      	str	r0, [r3, #0]
 801e736:	e003      	b.n	801e740 <nk_style_from_table+0x15a8>
 801e738:	41200000 	.word	0x41200000
 801e73c:	00000000 	.word	0x00000000
    chart->padding          = nk_vec2(4,4);
 801e740:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e742:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e746:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e74a:	f7f8 f921 	bl	8016990 <nk_vec2>
 801e74e:	eeb0 7a40 	vmov.f32	s14, s0
 801e752:	eef0 7a60 	vmov.f32	s15, s1
 801e756:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
 801e75a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    chart->border           = 0;
 801e75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e760:	f04f 0200 	mov.w	r2, #0
 801e764:	629a      	str	r2, [r3, #40]	; 0x28
    chart->rounding         = 0;
 801e766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e768:	f04f 0200 	mov.w	r2, #0
 801e76c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* combo */
    combo = &style->combo;
 801e76e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e770:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 801e774:	64bb      	str	r3, [r7, #72]	; 0x48
    combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e776:	6a3b      	ldr	r3, [r7, #32]
 801e778:	334c      	adds	r3, #76	; 0x4c
 801e77a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e77c:	463a      	mov	r2, r7
 801e77e:	6819      	ldr	r1, [r3, #0]
 801e780:	460b      	mov	r3, r1
 801e782:	4619      	mov	r1, r3
 801e784:	4610      	mov	r0, r2
 801e786:	f7fe fcd3 	bl	801d130 <nk_style_item_color>
 801e78a:	4625      	mov	r5, r4
 801e78c:	463c      	mov	r4, r7
 801e78e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e792:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e796:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e79a:	6a3b      	ldr	r3, [r7, #32]
 801e79c:	334c      	adds	r3, #76	; 0x4c
 801e79e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e7a0:	463a      	mov	r2, r7
 801e7a2:	6819      	ldr	r1, [r3, #0]
 801e7a4:	460b      	mov	r3, r1
 801e7a6:	4619      	mov	r1, r3
 801e7a8:	4610      	mov	r0, r2
 801e7aa:	f7fe fcc1 	bl	801d130 <nk_style_item_color>
 801e7ae:	341c      	adds	r4, #28
 801e7b0:	463d      	mov	r5, r7
 801e7b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e7b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e7b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e7ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e7be:	6a3b      	ldr	r3, [r7, #32]
 801e7c0:	334c      	adds	r3, #76	; 0x4c
 801e7c2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e7c4:	463a      	mov	r2, r7
 801e7c6:	6819      	ldr	r1, [r3, #0]
 801e7c8:	460b      	mov	r3, r1
 801e7ca:	4619      	mov	r1, r3
 801e7cc:	4610      	mov	r0, r2
 801e7ce:	f7fe fcaf 	bl	801d130 <nk_style_item_color>
 801e7d2:	3438      	adds	r4, #56	; 0x38
 801e7d4:	463d      	mov	r5, r7
 801e7d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e7d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e7da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e7de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->border_color     = table[NK_COLOR_BORDER];
 801e7e2:	6a3b      	ldr	r3, [r7, #32]
 801e7e4:	f103 020c 	add.w	r2, r3, #12
 801e7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e7ea:	3354      	adds	r3, #84	; 0x54
 801e7ec:	6810      	ldr	r0, [r2, #0]
 801e7ee:	6018      	str	r0, [r3, #0]
    combo->label_normal     = table[NK_COLOR_TEXT];
 801e7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e7f2:	6a3a      	ldr	r2, [r7, #32]
 801e7f4:	3358      	adds	r3, #88	; 0x58
 801e7f6:	6810      	ldr	r0, [r2, #0]
 801e7f8:	6018      	str	r0, [r3, #0]
    combo->label_hover      = table[NK_COLOR_TEXT];
 801e7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e7fc:	6a3a      	ldr	r2, [r7, #32]
 801e7fe:	335c      	adds	r3, #92	; 0x5c
 801e800:	6810      	ldr	r0, [r2, #0]
 801e802:	6018      	str	r0, [r3, #0]
    combo->label_active     = table[NK_COLOR_TEXT];
 801e804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e806:	6a3a      	ldr	r2, [r7, #32]
 801e808:	3360      	adds	r3, #96	; 0x60
 801e80a:	6810      	ldr	r0, [r2, #0]
 801e80c:	6018      	str	r0, [r3, #0]
    combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;
 801e80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e810:	2208      	movs	r2, #8
 801e812:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;
 801e816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e818:	2208      	movs	r2, #8
 801e81a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;
 801e81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e820:	2208      	movs	r2, #8
 801e822:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    combo->content_padding  = nk_vec2(4,4);
 801e826:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e828:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e82c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e830:	f7f8 f8ae 	bl	8016990 <nk_vec2>
 801e834:	eeb0 7a40 	vmov.f32	s14, s0
 801e838:	eef0 7a60 	vmov.f32	s15, s1
 801e83c:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 801e840:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
    combo->button_padding   = nk_vec2(0,4);
 801e844:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e846:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e84a:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 801e73c <nk_style_from_table+0x15a4>
 801e84e:	f7f8 f89f 	bl	8016990 <nk_vec2>
 801e852:	eeb0 7a40 	vmov.f32	s14, s0
 801e856:	eef0 7a60 	vmov.f32	s15, s1
 801e85a:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 801e85e:	edc4 7a48 	vstr	s15, [r4, #288]	; 0x120
    combo->spacing          = nk_vec2(4,0);
 801e862:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e864:	ed5f 0a4b 	vldr	s1, [pc, #-300]	; 801e73c <nk_style_from_table+0x15a4>
 801e868:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e86c:	f7f8 f890 	bl	8016990 <nk_vec2>
 801e870:	eeb0 7a40 	vmov.f32	s14, s0
 801e874:	eef0 7a60 	vmov.f32	s15, s1
 801e878:	ed84 7a49 	vstr	s14, [r4, #292]	; 0x124
 801e87c:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
    combo->border           = 1;
 801e880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e882:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e886:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    combo->rounding         = 0;
 801e88a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e88c:	f04f 0200 	mov.w	r2, #0
 801e890:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    /* combo button */
    button = &style->combo.button;
 801e894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e896:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 801e89a:	3310      	adds	r3, #16
 801e89c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801e89e:	2198      	movs	r1, #152	; 0x98
 801e8a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801e8a2:	f003 feef 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e8a6:	6a3b      	ldr	r3, [r7, #32]
 801e8a8:	334c      	adds	r3, #76	; 0x4c
 801e8aa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e8ac:	463a      	mov	r2, r7
 801e8ae:	6819      	ldr	r1, [r3, #0]
 801e8b0:	460b      	mov	r3, r1
 801e8b2:	4619      	mov	r1, r3
 801e8b4:	4610      	mov	r0, r2
 801e8b6:	f7fe fc3b 	bl	801d130 <nk_style_item_color>
 801e8ba:	4625      	mov	r5, r4
 801e8bc:	463c      	mov	r4, r7
 801e8be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e8c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e8c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e8c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e8ca:	6a3b      	ldr	r3, [r7, #32]
 801e8cc:	334c      	adds	r3, #76	; 0x4c
 801e8ce:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e8d0:	463a      	mov	r2, r7
 801e8d2:	6819      	ldr	r1, [r3, #0]
 801e8d4:	460b      	mov	r3, r1
 801e8d6:	4619      	mov	r1, r3
 801e8d8:	4610      	mov	r0, r2
 801e8da:	f7fe fc29 	bl	801d130 <nk_style_item_color>
 801e8de:	341c      	adds	r4, #28
 801e8e0:	463d      	mov	r5, r7
 801e8e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e8e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e8e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e8ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e8ee:	6a3b      	ldr	r3, [r7, #32]
 801e8f0:	334c      	adds	r3, #76	; 0x4c
 801e8f2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e8f4:	463a      	mov	r2, r7
 801e8f6:	6819      	ldr	r1, [r3, #0]
 801e8f8:	460b      	mov	r3, r1
 801e8fa:	4619      	mov	r1, r3
 801e8fc:	4610      	mov	r0, r2
 801e8fe:	f7fe fc17 	bl	801d130 <nk_style_item_color>
 801e902:	3438      	adds	r4, #56	; 0x38
 801e904:	463d      	mov	r5, r7
 801e906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e90a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e90e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801e912:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e914:	2300      	movs	r3, #0
 801e916:	2200      	movs	r2, #0
 801e918:	2100      	movs	r1, #0
 801e91a:	2000      	movs	r0, #0
 801e91c:	f7f1 f9b2 	bl	800fc84 <nk_rgba>
 801e920:	4603      	mov	r3, r0
 801e922:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_COMBO];
 801e924:	6a3b      	ldr	r3, [r7, #32]
 801e926:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801e92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e92c:	3358      	adds	r3, #88	; 0x58
 801e92e:	6810      	ldr	r0, [r2, #0]
 801e930:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801e932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e934:	6a3a      	ldr	r2, [r7, #32]
 801e936:	335c      	adds	r3, #92	; 0x5c
 801e938:	6810      	ldr	r0, [r2, #0]
 801e93a:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801e93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e93e:	6a3a      	ldr	r2, [r7, #32]
 801e940:	3360      	adds	r3, #96	; 0x60
 801e942:	6810      	ldr	r0, [r2, #0]
 801e944:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801e946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e948:	6a3a      	ldr	r2, [r7, #32]
 801e94a:	3364      	adds	r3, #100	; 0x64
 801e94c:	6810      	ldr	r0, [r2, #0]
 801e94e:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801e950:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e952:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801e956:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801e95a:	f7f8 f819 	bl	8016990 <nk_vec2>
 801e95e:	eeb0 7a40 	vmov.f32	s14, s0
 801e962:	eef0 7a60 	vmov.f32	s15, s1
 801e966:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801e96a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801e96e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e970:	ed5f 0a8e 	vldr	s1, [pc, #-568]	; 801e73c <nk_style_from_table+0x15a4>
 801e974:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 801e73c <nk_style_from_table+0x15a4>
 801e978:	f7f8 f80a 	bl	8016990 <nk_vec2>
 801e97c:	eeb0 7a40 	vmov.f32	s14, s0
 801e980:	eef0 7a60 	vmov.f32	s15, s1
 801e984:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801e988:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801e98c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e98e:	2000      	movs	r0, #0
 801e990:	f7f6 faa4 	bl	8014edc <nk_handle_ptr>
 801e994:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801e998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e99a:	2212      	movs	r2, #18
 801e99c:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801e99e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9a0:	f04f 0200 	mov.w	r2, #0
 801e9a4:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801e9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9a8:	f04f 0200 	mov.w	r2, #0
 801e9ac:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801e9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9b0:	2200      	movs	r2, #0
 801e9b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801e9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9b8:	2200      	movs	r2, #0
 801e9ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* tab */
    tab = &style->tab;
 801e9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9c0:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801e9c4:	331c      	adds	r3, #28
 801e9c6:	647b      	str	r3, [r7, #68]	; 0x44
    tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801e9c8:	6a3b      	ldr	r3, [r7, #32]
 801e9ca:	336c      	adds	r3, #108	; 0x6c
 801e9cc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801e9ce:	463a      	mov	r2, r7
 801e9d0:	6819      	ldr	r1, [r3, #0]
 801e9d2:	460b      	mov	r3, r1
 801e9d4:	4619      	mov	r1, r3
 801e9d6:	4610      	mov	r0, r2
 801e9d8:	f7fe fbaa 	bl	801d130 <nk_style_item_color>
 801e9dc:	4625      	mov	r5, r4
 801e9de:	463c      	mov	r4, r7
 801e9e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e9e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e9e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e9e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    tab->border_color       = table[NK_COLOR_BORDER];
 801e9ec:	6a3b      	ldr	r3, [r7, #32]
 801e9ee:	f103 020c 	add.w	r2, r3, #12
 801e9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e9f4:	331c      	adds	r3, #28
 801e9f6:	6810      	ldr	r0, [r2, #0]
 801e9f8:	6018      	str	r0, [r3, #0]
    tab->text               = table[NK_COLOR_TEXT];
 801e9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e9fc:	6a3a      	ldr	r2, [r7, #32]
 801e9fe:	3320      	adds	r3, #32
 801ea00:	6810      	ldr	r0, [r2, #0]
 801ea02:	6018      	str	r0, [r3, #0]
    tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;
 801ea04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea06:	220a      	movs	r2, #10
 801ea08:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;
 801ea0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea0e:	2208      	movs	r2, #8
 801ea10:	f883 2285 	strb.w	r2, [r3, #645]	; 0x285
    tab->padding            = nk_vec2(4,4);
 801ea14:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801ea16:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801ea1a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801ea1e:	f7f7 ffb7 	bl	8016990 <nk_vec2>
 801ea22:	eeb0 7a40 	vmov.f32	s14, s0
 801ea26:	eef0 7a60 	vmov.f32	s15, s1
 801ea2a:	ed84 7aa5 	vstr	s14, [r4, #660]	; 0x294
 801ea2e:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
    tab->spacing            = nk_vec2(4,4);
 801ea32:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801ea34:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801ea38:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801ea3c:	f7f7 ffa8 	bl	8016990 <nk_vec2>
 801ea40:	eeb0 7a40 	vmov.f32	s14, s0
 801ea44:	eef0 7a60 	vmov.f32	s15, s1
 801ea48:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 801ea4c:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    tab->indent             = 10.0f;
 801ea50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea52:	4aca      	ldr	r2, [pc, #808]	; (801ed7c <nk_style_from_table+0x1be4>)
 801ea54:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    tab->border             = 1;
 801ea58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801ea5e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    tab->rounding           = 0;
 801ea62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea64:	f04f 0200 	mov.w	r2, #0
 801ea68:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

    /* tab button */
    button = &style->tab.tab_minimize_button;
 801ea6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ea6e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801ea72:	3318      	adds	r3, #24
 801ea74:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ea76:	2198      	movs	r1, #152	; 0x98
 801ea78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ea7a:	f003 fe03 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801ea7e:	6a3b      	ldr	r3, [r7, #32]
 801ea80:	336c      	adds	r3, #108	; 0x6c
 801ea82:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ea84:	463a      	mov	r2, r7
 801ea86:	6819      	ldr	r1, [r3, #0]
 801ea88:	460b      	mov	r3, r1
 801ea8a:	4619      	mov	r1, r3
 801ea8c:	4610      	mov	r0, r2
 801ea8e:	f7fe fb4f 	bl	801d130 <nk_style_item_color>
 801ea92:	4625      	mov	r5, r4
 801ea94:	463c      	mov	r4, r7
 801ea96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ea98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ea9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ea9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801eaa2:	6a3b      	ldr	r3, [r7, #32]
 801eaa4:	336c      	adds	r3, #108	; 0x6c
 801eaa6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eaa8:	463a      	mov	r2, r7
 801eaaa:	6819      	ldr	r1, [r3, #0]
 801eaac:	460b      	mov	r3, r1
 801eaae:	4619      	mov	r1, r3
 801eab0:	4610      	mov	r0, r2
 801eab2:	f7fe fb3d 	bl	801d130 <nk_style_item_color>
 801eab6:	341c      	adds	r4, #28
 801eab8:	463d      	mov	r5, r7
 801eaba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801eabc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801eabe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801eac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801eac6:	6a3b      	ldr	r3, [r7, #32]
 801eac8:	336c      	adds	r3, #108	; 0x6c
 801eaca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eacc:	463a      	mov	r2, r7
 801eace:	6819      	ldr	r1, [r3, #0]
 801ead0:	460b      	mov	r3, r1
 801ead2:	4619      	mov	r1, r3
 801ead4:	4610      	mov	r0, r2
 801ead6:	f7fe fb2b 	bl	801d130 <nk_style_item_color>
 801eada:	3438      	adds	r4, #56	; 0x38
 801eadc:	463d      	mov	r5, r7
 801eade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801eae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801eae2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801eae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801eaea:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eaec:	2300      	movs	r3, #0
 801eaee:	2200      	movs	r2, #0
 801eaf0:	2100      	movs	r1, #0
 801eaf2:	2000      	movs	r0, #0
 801eaf4:	f7f1 f8c6 	bl	800fc84 <nk_rgba>
 801eaf8:	4603      	mov	r3, r0
 801eafa:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801eafc:	6a3b      	ldr	r3, [r7, #32]
 801eafe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801eb02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb04:	3358      	adds	r3, #88	; 0x58
 801eb06:	6810      	ldr	r0, [r2, #0]
 801eb08:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801eb0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb0c:	6a3a      	ldr	r2, [r7, #32]
 801eb0e:	335c      	adds	r3, #92	; 0x5c
 801eb10:	6810      	ldr	r0, [r2, #0]
 801eb12:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801eb14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb16:	6a3a      	ldr	r2, [r7, #32]
 801eb18:	3360      	adds	r3, #96	; 0x60
 801eb1a:	6810      	ldr	r0, [r2, #0]
 801eb1c:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801eb1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb20:	6a3a      	ldr	r2, [r7, #32]
 801eb22:	3364      	adds	r3, #100	; 0x64
 801eb24:	6810      	ldr	r0, [r2, #0]
 801eb26:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801eb28:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eb2a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801eb2e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801eb32:	f7f7 ff2d 	bl	8016990 <nk_vec2>
 801eb36:	eeb0 7a40 	vmov.f32	s14, s0
 801eb3a:	eef0 7a60 	vmov.f32	s15, s1
 801eb3e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801eb42:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801eb46:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eb48:	eddf 0a8d 	vldr	s1, [pc, #564]	; 801ed80 <nk_style_from_table+0x1be8>
 801eb4c:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801ed80 <nk_style_from_table+0x1be8>
 801eb50:	f7f7 ff1e 	bl	8016990 <nk_vec2>
 801eb54:	eeb0 7a40 	vmov.f32	s14, s0
 801eb58:	eef0 7a60 	vmov.f32	s15, s1
 801eb5c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801eb60:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801eb64:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eb66:	2000      	movs	r0, #0
 801eb68:	f7f6 f9b8 	bl	8014edc <nk_handle_ptr>
 801eb6c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801eb70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb72:	2212      	movs	r2, #18
 801eb74:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801eb76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb78:	f04f 0200 	mov.w	r2, #0
 801eb7c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801eb7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb80:	f04f 0200 	mov.w	r2, #0
 801eb84:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801eb86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb88:	2200      	movs	r2, #0
 801eb8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801eb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb90:	2200      	movs	r2, #0
 801eb92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.tab_maximize_button =*button;
 801eb96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801eb9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801eb9e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801eba2:	4611      	mov	r1, r2
 801eba4:	2298      	movs	r2, #152	; 0x98
 801eba6:	4618      	mov	r0, r3
 801eba8:	f006 fdbe 	bl	8025728 <memcpy>

    /* node button */
    button = &style->tab.node_minimize_button;
 801ebac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ebae:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801ebb2:	3308      	adds	r3, #8
 801ebb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ebb6:	2198      	movs	r1, #152	; 0x98
 801ebb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ebba:	f003 fd63 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801ebbe:	6a3b      	ldr	r3, [r7, #32]
 801ebc0:	3304      	adds	r3, #4
 801ebc2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ebc4:	463a      	mov	r2, r7
 801ebc6:	6819      	ldr	r1, [r3, #0]
 801ebc8:	460b      	mov	r3, r1
 801ebca:	4619      	mov	r1, r3
 801ebcc:	4610      	mov	r0, r2
 801ebce:	f7fe faaf 	bl	801d130 <nk_style_item_color>
 801ebd2:	4625      	mov	r5, r4
 801ebd4:	463c      	mov	r4, r7
 801ebd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ebd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ebda:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ebde:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801ebe2:	6a3b      	ldr	r3, [r7, #32]
 801ebe4:	3304      	adds	r3, #4
 801ebe6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ebe8:	463a      	mov	r2, r7
 801ebea:	6819      	ldr	r1, [r3, #0]
 801ebec:	460b      	mov	r3, r1
 801ebee:	4619      	mov	r1, r3
 801ebf0:	4610      	mov	r0, r2
 801ebf2:	f7fe fa9d 	bl	801d130 <nk_style_item_color>
 801ebf6:	341c      	adds	r4, #28
 801ebf8:	463d      	mov	r5, r7
 801ebfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ebfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ebfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ec02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801ec06:	6a3b      	ldr	r3, [r7, #32]
 801ec08:	3304      	adds	r3, #4
 801ec0a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec0c:	463a      	mov	r2, r7
 801ec0e:	6819      	ldr	r1, [r3, #0]
 801ec10:	460b      	mov	r3, r1
 801ec12:	4619      	mov	r1, r3
 801ec14:	4610      	mov	r0, r2
 801ec16:	f7fe fa8b 	bl	801d130 <nk_style_item_color>
 801ec1a:	3438      	adds	r4, #56	; 0x38
 801ec1c:	463d      	mov	r5, r7
 801ec1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ec20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ec22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ec26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801ec2a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	2200      	movs	r2, #0
 801ec30:	2100      	movs	r1, #0
 801ec32:	2000      	movs	r0, #0
 801ec34:	f7f1 f826 	bl	800fc84 <nk_rgba>
 801ec38:	4603      	mov	r3, r0
 801ec3a:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801ec3c:	6a3b      	ldr	r3, [r7, #32]
 801ec3e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801ec42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec44:	3358      	adds	r3, #88	; 0x58
 801ec46:	6810      	ldr	r0, [r2, #0]
 801ec48:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801ec4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec4c:	6a3a      	ldr	r2, [r7, #32]
 801ec4e:	335c      	adds	r3, #92	; 0x5c
 801ec50:	6810      	ldr	r0, [r2, #0]
 801ec52:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801ec54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec56:	6a3a      	ldr	r2, [r7, #32]
 801ec58:	3360      	adds	r3, #96	; 0x60
 801ec5a:	6810      	ldr	r0, [r2, #0]
 801ec5c:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801ec5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec60:	6a3a      	ldr	r2, [r7, #32]
 801ec62:	3364      	adds	r3, #100	; 0x64
 801ec64:	6810      	ldr	r0, [r2, #0]
 801ec66:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801ec68:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec6a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801ec6e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801ec72:	f7f7 fe8d 	bl	8016990 <nk_vec2>
 801ec76:	eeb0 7a40 	vmov.f32	s14, s0
 801ec7a:	eef0 7a60 	vmov.f32	s15, s1
 801ec7e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801ec82:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801ec86:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec88:	eddf 0a3d 	vldr	s1, [pc, #244]	; 801ed80 <nk_style_from_table+0x1be8>
 801ec8c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801ed80 <nk_style_from_table+0x1be8>
 801ec90:	f7f7 fe7e 	bl	8016990 <nk_vec2>
 801ec94:	eeb0 7a40 	vmov.f32	s14, s0
 801ec98:	eef0 7a60 	vmov.f32	s15, s1
 801ec9c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801eca0:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801eca4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eca6:	2000      	movs	r0, #0
 801eca8:	f7f6 f918 	bl	8014edc <nk_handle_ptr>
 801ecac:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801ecb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecb2:	2212      	movs	r2, #18
 801ecb4:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801ecb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecb8:	f04f 0200 	mov.w	r2, #0
 801ecbc:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801ecbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecc0:	f04f 0200 	mov.w	r2, #0
 801ecc4:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801ecc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecc8:	2200      	movs	r2, #0
 801ecca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801ecce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecd0:	2200      	movs	r2, #0
 801ecd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.node_maximize_button =*button;
 801ecd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ecd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ecdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ecde:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 801ece2:	4611      	mov	r1, r2
 801ece4:	2298      	movs	r2, #152	; 0x98
 801ece6:	4618      	mov	r0, r3
 801ece8:	f006 fd1e 	bl	8025728 <memcpy>

    /* window header */
    win = &style->window;
 801ecec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ecee:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 801ecf2:	330c      	adds	r3, #12
 801ecf4:	643b      	str	r3, [r7, #64]	; 0x40
    win->header.align = NK_HEADER_RIGHT;
 801ecf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ecf8:	2201      	movs	r2, #1
 801ecfa:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
    win->header.close_symbol = NK_SYMBOL_X;
 801ecfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed00:	2201      	movs	r2, #1
 801ed02:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    win->header.minimize_symbol = NK_SYMBOL_MINUS;
 801ed06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed08:	220c      	movs	r2, #12
 801ed0a:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
    win->header.maximize_symbol = NK_SYMBOL_PLUS;
 801ed0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed10:	220b      	movs	r2, #11
 801ed12:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ed16:	6a3b      	ldr	r3, [r7, #32]
 801ed18:	3308      	adds	r3, #8
 801ed1a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ed1c:	463a      	mov	r2, r7
 801ed1e:	6819      	ldr	r1, [r3, #0]
 801ed20:	460b      	mov	r3, r1
 801ed22:	4619      	mov	r1, r3
 801ed24:	4610      	mov	r0, r2
 801ed26:	f7fe fa03 	bl	801d130 <nk_style_item_color>
 801ed2a:	4625      	mov	r5, r4
 801ed2c:	463c      	mov	r4, r7
 801ed2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ed30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ed32:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ed36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ed3a:	6a3b      	ldr	r3, [r7, #32]
 801ed3c:	3308      	adds	r3, #8
 801ed3e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ed40:	463a      	mov	r2, r7
 801ed42:	6819      	ldr	r1, [r3, #0]
 801ed44:	460b      	mov	r3, r1
 801ed46:	4619      	mov	r1, r3
 801ed48:	4610      	mov	r0, r2
 801ed4a:	f7fe f9f1 	bl	801d130 <nk_style_item_color>
 801ed4e:	341c      	adds	r4, #28
 801ed50:	463d      	mov	r5, r7
 801ed52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ed54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ed56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ed5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ed5e:	6a3b      	ldr	r3, [r7, #32]
 801ed60:	3308      	adds	r3, #8
 801ed62:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ed64:	463a      	mov	r2, r7
 801ed66:	6819      	ldr	r1, [r3, #0]
 801ed68:	460b      	mov	r3, r1
 801ed6a:	4619      	mov	r1, r3
 801ed6c:	4610      	mov	r0, r2
 801ed6e:	f7fe f9df 	bl	801d130 <nk_style_item_color>
 801ed72:	3438      	adds	r4, #56	; 0x38
 801ed74:	463d      	mov	r5, r7
 801ed76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ed78:	e004      	b.n	801ed84 <nk_style_from_table+0x1bec>
 801ed7a:	bf00      	nop
 801ed7c:	41200000 	.word	0x41200000
 801ed80:	00000000 	.word	0x00000000
 801ed84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ed86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ed8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.label_normal = table[NK_COLOR_TEXT];
 801ed8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed90:	6a3a      	ldr	r2, [r7, #32]
 801ed92:	f203 1387 	addw	r3, r3, #391	; 0x187
 801ed96:	6812      	ldr	r2, [r2, #0]
 801ed98:	601a      	str	r2, [r3, #0]
    win->header.label_hover = table[NK_COLOR_TEXT];
 801ed9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed9c:	6a3a      	ldr	r2, [r7, #32]
 801ed9e:	f203 138b 	addw	r3, r3, #395	; 0x18b
 801eda2:	6812      	ldr	r2, [r2, #0]
 801eda4:	601a      	str	r2, [r3, #0]
    win->header.label_active = table[NK_COLOR_TEXT];
 801eda6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eda8:	6a3a      	ldr	r2, [r7, #32]
 801edaa:	f203 138f 	addw	r3, r3, #399	; 0x18f
 801edae:	6812      	ldr	r2, [r2, #0]
 801edb0:	601a      	str	r2, [r3, #0]
    win->header.label_padding = nk_vec2(4,4);
 801edb2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801edb4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801edb8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801edbc:	f7f7 fde8 	bl	8016990 <nk_vec2>
 801edc0:	eeb0 7a40 	vmov.f32	s14, s0
 801edc4:	eef0 7a60 	vmov.f32	s15, s1
 801edc8:	ed84 7a67 	vstr	s14, [r4, #412]	; 0x19c
 801edcc:	edc4 7a68 	vstr	s15, [r4, #416]	; 0x1a0
    win->header.padding = nk_vec2(4,4);
 801edd0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801edd2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801edd6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801edda:	f7f7 fdd9 	bl	8016990 <nk_vec2>
 801edde:	eeb0 7a40 	vmov.f32	s14, s0
 801ede2:	eef0 7a60 	vmov.f32	s15, s1
 801ede6:	ed84 7a65 	vstr	s14, [r4, #404]	; 0x194
 801edea:	edc4 7a66 	vstr	s15, [r4, #408]	; 0x198
    win->header.spacing = nk_vec2(0,0);
 801edee:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801edf0:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801ed80 <nk_style_from_table+0x1be8>
 801edf4:	ed1f 0a1e 	vldr	s0, [pc, #-120]	; 801ed80 <nk_style_from_table+0x1be8>
 801edf8:	f7f7 fdca 	bl	8016990 <nk_vec2>
 801edfc:	eeb0 7a40 	vmov.f32	s14, s0
 801ee00:	eef0 7a60 	vmov.f32	s15, s1
 801ee04:	ed84 7a69 	vstr	s14, [r4, #420]	; 0x1a4
 801ee08:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8

    /* window header close button */
    button = &style->window.header.close_button;
 801ee0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ee0e:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 801ee12:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ee14:	2198      	movs	r1, #152	; 0x98
 801ee16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ee18:	f003 fc34 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ee1c:	6a3b      	ldr	r3, [r7, #32]
 801ee1e:	3308      	adds	r3, #8
 801ee20:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ee22:	463a      	mov	r2, r7
 801ee24:	6819      	ldr	r1, [r3, #0]
 801ee26:	460b      	mov	r3, r1
 801ee28:	4619      	mov	r1, r3
 801ee2a:	4610      	mov	r0, r2
 801ee2c:	f7fe f980 	bl	801d130 <nk_style_item_color>
 801ee30:	4625      	mov	r5, r4
 801ee32:	463c      	mov	r4, r7
 801ee34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ee36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ee38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ee3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ee40:	6a3b      	ldr	r3, [r7, #32]
 801ee42:	3308      	adds	r3, #8
 801ee44:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ee46:	463a      	mov	r2, r7
 801ee48:	6819      	ldr	r1, [r3, #0]
 801ee4a:	460b      	mov	r3, r1
 801ee4c:	4619      	mov	r1, r3
 801ee4e:	4610      	mov	r0, r2
 801ee50:	f7fe f96e 	bl	801d130 <nk_style_item_color>
 801ee54:	341c      	adds	r4, #28
 801ee56:	463d      	mov	r5, r7
 801ee58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ee5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ee5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ee60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ee64:	6a3b      	ldr	r3, [r7, #32]
 801ee66:	3308      	adds	r3, #8
 801ee68:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ee6a:	463a      	mov	r2, r7
 801ee6c:	6819      	ldr	r1, [r3, #0]
 801ee6e:	460b      	mov	r3, r1
 801ee70:	4619      	mov	r1, r3
 801ee72:	4610      	mov	r0, r2
 801ee74:	f7fe f95c 	bl	801d130 <nk_style_item_color>
 801ee78:	3438      	adds	r4, #56	; 0x38
 801ee7a:	463d      	mov	r5, r7
 801ee7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ee7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ee80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ee84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801ee88:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	2200      	movs	r2, #0
 801ee8e:	2100      	movs	r1, #0
 801ee90:	2000      	movs	r0, #0
 801ee92:	f7f0 fef7 	bl	800fc84 <nk_rgba>
 801ee96:	4603      	mov	r3, r0
 801ee98:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801ee9a:	6a3b      	ldr	r3, [r7, #32]
 801ee9c:	f103 0208 	add.w	r2, r3, #8
 801eea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eea2:	3358      	adds	r3, #88	; 0x58
 801eea4:	6810      	ldr	r0, [r2, #0]
 801eea6:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801eea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eeaa:	6a3a      	ldr	r2, [r7, #32]
 801eeac:	335c      	adds	r3, #92	; 0x5c
 801eeae:	6810      	ldr	r0, [r2, #0]
 801eeb0:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801eeb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eeb4:	6a3a      	ldr	r2, [r7, #32]
 801eeb6:	3360      	adds	r3, #96	; 0x60
 801eeb8:	6810      	ldr	r0, [r2, #0]
 801eeba:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801eebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eebe:	6a3a      	ldr	r2, [r7, #32]
 801eec0:	3364      	adds	r3, #100	; 0x64
 801eec2:	6810      	ldr	r0, [r2, #0]
 801eec4:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801eec6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eec8:	ed5f 0a53 	vldr	s1, [pc, #-332]	; 801ed80 <nk_style_from_table+0x1be8>
 801eecc:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 801ed80 <nk_style_from_table+0x1be8>
 801eed0:	f7f7 fd5e 	bl	8016990 <nk_vec2>
 801eed4:	eeb0 7a40 	vmov.f32	s14, s0
 801eed8:	eef0 7a60 	vmov.f32	s15, s1
 801eedc:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801eee0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801eee4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eee6:	ed5f 0a5a 	vldr	s1, [pc, #-360]	; 801ed80 <nk_style_from_table+0x1be8>
 801eeea:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 801ed80 <nk_style_from_table+0x1be8>
 801eeee:	f7f7 fd4f 	bl	8016990 <nk_vec2>
 801eef2:	eeb0 7a40 	vmov.f32	s14, s0
 801eef6:	eef0 7a60 	vmov.f32	s15, s1
 801eefa:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801eefe:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801ef02:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ef04:	2000      	movs	r0, #0
 801ef06:	f7f5 ffe9 	bl	8014edc <nk_handle_ptr>
 801ef0a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801ef0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef10:	2212      	movs	r2, #18
 801ef12:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801ef14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef16:	f04f 0200 	mov.w	r2, #0
 801ef1a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801ef1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef1e:	f04f 0200 	mov.w	r2, #0
 801ef22:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801ef24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef26:	2200      	movs	r2, #0
 801ef28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801ef2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef2e:	2200      	movs	r2, #0
 801ef30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window header minimize button */
    button = &style->window.header.minimize_button;
 801ef34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ef36:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 801ef3a:	3318      	adds	r3, #24
 801ef3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ef3e:	2198      	movs	r1, #152	; 0x98
 801ef40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ef42:	f003 fb9f 	bl	8022684 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ef46:	6a3b      	ldr	r3, [r7, #32]
 801ef48:	3308      	adds	r3, #8
 801ef4a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ef4c:	463a      	mov	r2, r7
 801ef4e:	6819      	ldr	r1, [r3, #0]
 801ef50:	460b      	mov	r3, r1
 801ef52:	4619      	mov	r1, r3
 801ef54:	4610      	mov	r0, r2
 801ef56:	f7fe f8eb 	bl	801d130 <nk_style_item_color>
 801ef5a:	4625      	mov	r5, r4
 801ef5c:	463c      	mov	r4, r7
 801ef5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ef60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ef62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ef66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ef6a:	6a3b      	ldr	r3, [r7, #32]
 801ef6c:	3308      	adds	r3, #8
 801ef6e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ef70:	463a      	mov	r2, r7
 801ef72:	6819      	ldr	r1, [r3, #0]
 801ef74:	460b      	mov	r3, r1
 801ef76:	4619      	mov	r1, r3
 801ef78:	4610      	mov	r0, r2
 801ef7a:	f7fe f8d9 	bl	801d130 <nk_style_item_color>
 801ef7e:	341c      	adds	r4, #28
 801ef80:	463d      	mov	r5, r7
 801ef82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ef84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ef86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ef8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ef8e:	6a3b      	ldr	r3, [r7, #32]
 801ef90:	3308      	adds	r3, #8
 801ef92:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ef94:	463a      	mov	r2, r7
 801ef96:	6819      	ldr	r1, [r3, #0]
 801ef98:	460b      	mov	r3, r1
 801ef9a:	4619      	mov	r1, r3
 801ef9c:	4610      	mov	r0, r2
 801ef9e:	f7fe f8c7 	bl	801d130 <nk_style_item_color>
 801efa2:	3438      	adds	r4, #56	; 0x38
 801efa4:	463d      	mov	r5, r7
 801efa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801efa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801efaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801efae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801efb2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801efb4:	2300      	movs	r3, #0
 801efb6:	2200      	movs	r2, #0
 801efb8:	2100      	movs	r1, #0
 801efba:	2000      	movs	r0, #0
 801efbc:	f7f0 fe62 	bl	800fc84 <nk_rgba>
 801efc0:	4603      	mov	r3, r0
 801efc2:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801efc4:	6a3b      	ldr	r3, [r7, #32]
 801efc6:	f103 0208 	add.w	r2, r3, #8
 801efca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efcc:	3358      	adds	r3, #88	; 0x58
 801efce:	6810      	ldr	r0, [r2, #0]
 801efd0:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801efd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efd4:	6a3a      	ldr	r2, [r7, #32]
 801efd6:	335c      	adds	r3, #92	; 0x5c
 801efd8:	6810      	ldr	r0, [r2, #0]
 801efda:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801efdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efde:	6a3a      	ldr	r2, [r7, #32]
 801efe0:	3360      	adds	r3, #96	; 0x60
 801efe2:	6810      	ldr	r0, [r2, #0]
 801efe4:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801efe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efe8:	6a3a      	ldr	r2, [r7, #32]
 801efea:	3364      	adds	r3, #100	; 0x64
 801efec:	6810      	ldr	r0, [r2, #0]
 801efee:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801eff0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eff2:	ed5f 0a9d 	vldr	s1, [pc, #-628]	; 801ed80 <nk_style_from_table+0x1be8>
 801eff6:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 801ed80 <nk_style_from_table+0x1be8>
 801effa:	f7f7 fcc9 	bl	8016990 <nk_vec2>
 801effe:	eeb0 7a40 	vmov.f32	s14, s0
 801f002:	eef0 7a60 	vmov.f32	s15, s1
 801f006:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801f00a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801f00e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801f010:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 801ed80 <nk_style_from_table+0x1be8>
 801f014:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 801ed80 <nk_style_from_table+0x1be8>
 801f018:	f7f7 fcba 	bl	8016990 <nk_vec2>
 801f01c:	eeb0 7a40 	vmov.f32	s14, s0
 801f020:	eef0 7a60 	vmov.f32	s15, s1
 801f024:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801f028:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801f02c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801f02e:	2000      	movs	r0, #0
 801f030:	f7f5 ff54 	bl	8014edc <nk_handle_ptr>
 801f034:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801f038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f03a:	2212      	movs	r2, #18
 801f03c:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801f03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f040:	f04f 0200 	mov.w	r2, #0
 801f044:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801f046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f048:	f04f 0200 	mov.w	r2, #0
 801f04c:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801f04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f050:	2200      	movs	r2, #0
 801f052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801f056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f058:	2200      	movs	r2, #0
 801f05a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window */
    win->background = table[NK_COLOR_WINDOW];
 801f05e:	6a3b      	ldr	r3, [r7, #32]
 801f060:	1d1a      	adds	r2, r3, #4
 801f062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f064:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801f068:	6810      	ldr	r0, [r2, #0]
 801f06a:	6018      	str	r0, [r3, #0]
    win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801f06c:	6a3b      	ldr	r3, [r7, #32]
 801f06e:	3304      	adds	r3, #4
 801f070:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f072:	463a      	mov	r2, r7
 801f074:	6819      	ldr	r1, [r3, #0]
 801f076:	460b      	mov	r3, r1
 801f078:	4619      	mov	r1, r3
 801f07a:	4610      	mov	r0, r2
 801f07c:	f7fe f858 	bl	801d130 <nk_style_item_color>
 801f080:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
 801f084:	463d      	mov	r5, r7
 801f086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f08a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801f08e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->border_color = table[NK_COLOR_BORDER];
 801f092:	6a3b      	ldr	r3, [r7, #32]
 801f094:	f103 020c 	add.w	r2, r3, #12
 801f098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f09a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801f09e:	6810      	ldr	r0, [r2, #0]
 801f0a0:	6018      	str	r0, [r3, #0]
    win->popup_border_color = table[NK_COLOR_BORDER];
 801f0a2:	6a3b      	ldr	r3, [r7, #32]
 801f0a4:	f103 020c 	add.w	r2, r3, #12
 801f0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0aa:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 801f0ae:	6810      	ldr	r0, [r2, #0]
 801f0b0:	6018      	str	r0, [r3, #0]
    win->combo_border_color = table[NK_COLOR_BORDER];
 801f0b2:	6a3b      	ldr	r3, [r7, #32]
 801f0b4:	f103 020c 	add.w	r2, r3, #12
 801f0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0ba:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801f0be:	6810      	ldr	r0, [r2, #0]
 801f0c0:	6018      	str	r0, [r3, #0]
    win->contextual_border_color = table[NK_COLOR_BORDER];
 801f0c2:	6a3b      	ldr	r3, [r7, #32]
 801f0c4:	f103 020c 	add.w	r2, r3, #12
 801f0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0ca:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801f0ce:	6810      	ldr	r0, [r2, #0]
 801f0d0:	6018      	str	r0, [r3, #0]
    win->menu_border_color = table[NK_COLOR_BORDER];
 801f0d2:	6a3b      	ldr	r3, [r7, #32]
 801f0d4:	f103 020c 	add.w	r2, r3, #12
 801f0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0da:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801f0de:	6810      	ldr	r0, [r2, #0]
 801f0e0:	6018      	str	r0, [r3, #0]
    win->group_border_color = table[NK_COLOR_BORDER];
 801f0e2:	6a3b      	ldr	r3, [r7, #32]
 801f0e4:	f103 020c 	add.w	r2, r3, #12
 801f0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0ea:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801f0ee:	6810      	ldr	r0, [r2, #0]
 801f0f0:	6018      	str	r0, [r3, #0]
    win->tooltip_border_color = table[NK_COLOR_BORDER];
 801f0f2:	6a3b      	ldr	r3, [r7, #32]
 801f0f4:	f103 020c 	add.w	r2, r3, #12
 801f0f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801f0fe:	6810      	ldr	r0, [r2, #0]
 801f100:	6018      	str	r0, [r3, #0]
    win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);
 801f102:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f104:	463a      	mov	r2, r7
 801f106:	6a3b      	ldr	r3, [r7, #32]
 801f108:	6819      	ldr	r1, [r3, #0]
 801f10a:	460b      	mov	r3, r1
 801f10c:	4619      	mov	r1, r3
 801f10e:	4610      	mov	r0, r2
 801f110:	f7fe f80e 	bl	801d130 <nk_style_item_color>
 801f114:	f504 74f4 	add.w	r4, r4, #488	; 0x1e8
 801f118:	463d      	mov	r5, r7
 801f11a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f11c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f11e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801f122:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    win->rounding = 0.0f;
 801f126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f128:	f04f 0200 	mov.w	r2, #0
 801f12c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    win->spacing = nk_vec2(4,4);
 801f130:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f132:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f136:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f13a:	f7f7 fc29 	bl	8016990 <nk_vec2>
 801f13e:	eeb0 7a40 	vmov.f32	s14, s0
 801f142:	eef0 7a60 	vmov.f32	s15, s1
 801f146:	ed84 7a8a 	vstr	s14, [r4, #552]	; 0x228
 801f14a:	edc4 7a8b 	vstr	s15, [r4, #556]	; 0x22c
    win->scrollbar_size = nk_vec2(20,20);
 801f14e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f150:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 801f154:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801f158:	f7f7 fc1a 	bl	8016990 <nk_vec2>
 801f15c:	eeb0 7a40 	vmov.f32	s14, s0
 801f160:	eef0 7a60 	vmov.f32	s15, s1
 801f164:	ed84 7a8c 	vstr	s14, [r4, #560]	; 0x230
 801f168:	edc4 7a8d 	vstr	s15, [r4, #564]	; 0x234
    win->min_size = nk_vec2(64,64);
 801f16c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f16e:	eddf 0a52 	vldr	s1, [pc, #328]	; 801f2b8 <nk_style_from_table+0x2120>
 801f172:	ed9f 0a51 	vldr	s0, [pc, #324]	; 801f2b8 <nk_style_from_table+0x2120>
 801f176:	f7f7 fc0b 	bl	8016990 <nk_vec2>
 801f17a:	eeb0 7a40 	vmov.f32	s14, s0
 801f17e:	eef0 7a60 	vmov.f32	s15, s1
 801f182:	ed84 7a8e 	vstr	s14, [r4, #568]	; 0x238
 801f186:	edc4 7a8f 	vstr	s15, [r4, #572]	; 0x23c

    win->combo_border = 1.0f;
 801f18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f18c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f190:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    win->contextual_border = 1.0f;
 801f194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f196:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f19a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    win->menu_border = 1.0f;
 801f19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    win->group_border = 1.0f;
 801f1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    win->tooltip_border = 1.0f;
 801f1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    win->popup_border = 1.0f;
 801f1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    win->border = 2.0f;
 801f1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f1cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    win->min_row_height_padding = 8;
 801f1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1d2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801f1d6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    win->padding = nk_vec2(4,4);
 801f1da:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f1dc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f1e0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f1e4:	f7f7 fbd4 	bl	8016990 <nk_vec2>
 801f1e8:	eeb0 7a40 	vmov.f32	s14, s0
 801f1ec:	eef0 7a60 	vmov.f32	s15, s1
 801f1f0:	ed84 7a90 	vstr	s14, [r4, #576]	; 0x240
 801f1f4:	edc4 7a91 	vstr	s15, [r4, #580]	; 0x244
    win->group_padding = nk_vec2(4,4);
 801f1f8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f1fa:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f1fe:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f202:	f7f7 fbc5 	bl	8016990 <nk_vec2>
 801f206:	eeb0 7a40 	vmov.f32	s14, s0
 801f20a:	eef0 7a60 	vmov.f32	s15, s1
 801f20e:	ed84 7a92 	vstr	s14, [r4, #584]	; 0x248
 801f212:	edc4 7a93 	vstr	s15, [r4, #588]	; 0x24c
    win->popup_padding = nk_vec2(4,4);
 801f216:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f218:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f21c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f220:	f7f7 fbb6 	bl	8016990 <nk_vec2>
 801f224:	eeb0 7a40 	vmov.f32	s14, s0
 801f228:	eef0 7a60 	vmov.f32	s15, s1
 801f22c:	ed84 7a94 	vstr	s14, [r4, #592]	; 0x250
 801f230:	edc4 7a95 	vstr	s15, [r4, #596]	; 0x254
    win->combo_padding = nk_vec2(4,4);
 801f234:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f236:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f23a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f23e:	f7f7 fba7 	bl	8016990 <nk_vec2>
 801f242:	eeb0 7a40 	vmov.f32	s14, s0
 801f246:	eef0 7a60 	vmov.f32	s15, s1
 801f24a:	ed84 7a96 	vstr	s14, [r4, #600]	; 0x258
 801f24e:	edc4 7a97 	vstr	s15, [r4, #604]	; 0x25c
    win->contextual_padding = nk_vec2(4,4);
 801f252:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f254:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f258:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f25c:	f7f7 fb98 	bl	8016990 <nk_vec2>
 801f260:	eeb0 7a40 	vmov.f32	s14, s0
 801f264:	eef0 7a60 	vmov.f32	s15, s1
 801f268:	ed84 7a98 	vstr	s14, [r4, #608]	; 0x260
 801f26c:	edc4 7a99 	vstr	s15, [r4, #612]	; 0x264
    win->menu_padding = nk_vec2(4,4);
 801f270:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f272:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f276:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f27a:	f7f7 fb89 	bl	8016990 <nk_vec2>
 801f27e:	eeb0 7a40 	vmov.f32	s14, s0
 801f282:	eef0 7a60 	vmov.f32	s15, s1
 801f286:	ed84 7a9a 	vstr	s14, [r4, #616]	; 0x268
 801f28a:	edc4 7a9b 	vstr	s15, [r4, #620]	; 0x26c
    win->tooltip_padding = nk_vec2(4,4);
 801f28e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f290:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f294:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f298:	f7f7 fb7a 	bl	8016990 <nk_vec2>
 801f29c:	eeb0 7a40 	vmov.f32	s14, s0
 801f2a0:	eef0 7a60 	vmov.f32	s15, s1
 801f2a4:	ed84 7a9c 	vstr	s14, [r4, #624]	; 0x270
 801f2a8:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
 801f2ac:	e000      	b.n	801f2b0 <nk_style_from_table+0x2118>
    if (!ctx) return;
 801f2ae:	bf00      	nop
}
 801f2b0:	3778      	adds	r7, #120	; 0x78
 801f2b2:	46bd      	mov	sp, r7
 801f2b4:	bdb0      	pop	{r4, r5, r7, pc}
 801f2b6:	bf00      	nop
 801f2b8:	42800000 	.word	0x42800000

0801f2bc <nk_create_table>:
 *                              TABLE
 *
 * ===============================================================*/
NK_LIB struct nk_table*
nk_create_table(struct nk_context *ctx)
{
 801f2bc:	b580      	push	{r7, lr}
 801f2be:	b084      	sub	sp, #16
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801f2c4:	6878      	ldr	r0, [r7, #4]
 801f2c6:	f7f7 fdf7 	bl	8016eb8 <nk_create_page_element>
 801f2ca:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801f2cc:	68fb      	ldr	r3, [r7, #12]
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d101      	bne.n	801f2d6 <nk_create_table+0x1a>
 801f2d2:	2300      	movs	r3, #0
 801f2d4:	e005      	b.n	801f2e2 <nk_create_table+0x26>
    nk_zero_struct(*elem);
 801f2d6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801f2da:	68f8      	ldr	r0, [r7, #12]
 801f2dc:	f003 f9d2 	bl	8022684 <nk_zero>
    return &elem->data.tbl;
 801f2e0:	68fb      	ldr	r3, [r7, #12]
}
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	3710      	adds	r7, #16
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}

0801f2ea <nk_free_table>:
NK_LIB void
nk_free_table(struct nk_context *ctx, struct nk_table *tbl)
{
 801f2ea:	b580      	push	{r7, lr}
 801f2ec:	b084      	sub	sp, #16
 801f2ee:	af00      	add	r7, sp, #0
 801f2f0:	6078      	str	r0, [r7, #4]
 801f2f2:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);
 801f2f4:	683b      	ldr	r3, [r7, #0]
 801f2f6:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 801f2fc:	68b9      	ldr	r1, [r7, #8]
 801f2fe:	6878      	ldr	r0, [r7, #4]
 801f300:	f7f7 fe71 	bl	8016fe6 <nk_free_page_element>
}
 801f304:	bf00      	nop
 801f306:	3710      	adds	r7, #16
 801f308:	46bd      	mov	sp, r7
 801f30a:	bd80      	pop	{r7, pc}

0801f30c <nk_push_table>:
NK_LIB void
nk_push_table(struct nk_window *win, struct nk_table *tbl)
{
 801f30c:	b480      	push	{r7}
 801f30e:	b083      	sub	sp, #12
 801f310:	af00      	add	r7, sp, #0
 801f312:	6078      	str	r0, [r7, #4]
 801f314:	6039      	str	r1, [r7, #0]
    if (!win->tables) {
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d113      	bne.n	801f348 <nk_push_table+0x3c>
        win->tables = tbl;
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	683a      	ldr	r2, [r7, #0]
 801f324:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        tbl->next = 0;
 801f328:	683b      	ldr	r3, [r7, #0]
 801f32a:	2200      	movs	r2, #0
 801f32c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        tbl->prev = 0;
 801f330:	683b      	ldr	r3, [r7, #0]
 801f332:	2200      	movs	r2, #0
 801f334:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
        tbl->size = 0;
 801f338:	683b      	ldr	r3, [r7, #0]
 801f33a:	2200      	movs	r2, #0
 801f33c:	605a      	str	r2, [r3, #4]
        win->table_count = 1;
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	2201      	movs	r2, #1
 801f342:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        return;
 801f346:	e01d      	b.n	801f384 <nk_push_table+0x78>
    }
    win->tables->prev = tbl;
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f34e:	683a      	ldr	r2, [r7, #0]
 801f350:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->next = win->tables;
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801f35a:	683b      	ldr	r3, [r7, #0]
 801f35c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801f360:	683b      	ldr	r3, [r7, #0]
 801f362:	2200      	movs	r2, #0
 801f364:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->size = 0;
 801f368:	683b      	ldr	r3, [r7, #0]
 801f36a:	2200      	movs	r2, #0
 801f36c:	605a      	str	r2, [r3, #4]
    win->tables = tbl;
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	683a      	ldr	r2, [r7, #0]
 801f372:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    win->table_count++;
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 801f37c:	1c5a      	adds	r2, r3, #1
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
}
 801f384:	370c      	adds	r7, #12
 801f386:	46bd      	mov	sp, r7
 801f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f38c:	4770      	bx	lr

0801f38e <nk_remove_table>:
NK_LIB void
nk_remove_table(struct nk_window *win, struct nk_table *tbl)
{
 801f38e:	b480      	push	{r7}
 801f390:	b083      	sub	sp, #12
 801f392:	af00      	add	r7, sp, #0
 801f394:	6078      	str	r0, [r7, #4]
 801f396:	6039      	str	r1, [r7, #0]
    if (win->tables == tbl)
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f39e:	683a      	ldr	r2, [r7, #0]
 801f3a0:	429a      	cmp	r2, r3
 801f3a2:	d105      	bne.n	801f3b0 <nk_remove_table+0x22>
        win->tables = tbl->next;
 801f3a4:	683b      	ldr	r3, [r7, #0]
 801f3a6:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    if (tbl->next)
 801f3b0:	683b      	ldr	r3, [r7, #0]
 801f3b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	d007      	beq.n	801f3ca <nk_remove_table+0x3c>
        tbl->next->prev = tbl->prev;
 801f3ba:	683b      	ldr	r3, [r7, #0]
 801f3bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801f3c0:	683a      	ldr	r2, [r7, #0]
 801f3c2:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 801f3c6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    if (tbl->prev)
 801f3ca:	683b      	ldr	r3, [r7, #0]
 801f3cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d007      	beq.n	801f3e4 <nk_remove_table+0x56>
        tbl->prev->next = tbl->next;
 801f3d4:	683b      	ldr	r3, [r7, #0]
 801f3d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801f3da:	683a      	ldr	r2, [r7, #0]
 801f3dc:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 801f3e0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->next = 0;
 801f3e4:	683b      	ldr	r3, [r7, #0]
 801f3e6:	2200      	movs	r2, #0
 801f3e8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801f3ec:	683b      	ldr	r3, [r7, #0]
 801f3ee:	2200      	movs	r2, #0
 801f3f0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 801f3f4:	bf00      	nop
 801f3f6:	370c      	adds	r7, #12
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3fe:	4770      	bx	lr

0801f400 <nk_add_value>:
NK_LIB nk_uint*
nk_add_value(struct nk_context *ctx, struct nk_window *win,
            nk_hash name, nk_uint value)
{
 801f400:	b580      	push	{r7, lr}
 801f402:	b086      	sub	sp, #24
 801f404:	af00      	add	r7, sp, #0
 801f406:	60f8      	str	r0, [r7, #12]
 801f408:	60b9      	str	r1, [r7, #8]
 801f40a:	607a      	str	r2, [r7, #4]
 801f40c:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801f40e:	68fb      	ldr	r3, [r7, #12]
 801f410:	2b00      	cmp	r3, #0
 801f412:	d105      	bne.n	801f420 <nk_add_value+0x20>
 801f414:	4b32      	ldr	r3, [pc, #200]	; (801f4e0 <nk_add_value+0xe0>)
 801f416:	4a33      	ldr	r2, [pc, #204]	; (801f4e4 <nk_add_value+0xe4>)
 801f418:	213b      	movs	r1, #59	; 0x3b
 801f41a:	4833      	ldr	r0, [pc, #204]	; (801f4e8 <nk_add_value+0xe8>)
 801f41c:	f005 fb5c 	bl	8024ad8 <__assert_func>
    NK_ASSERT(win);
 801f420:	68bb      	ldr	r3, [r7, #8]
 801f422:	2b00      	cmp	r3, #0
 801f424:	d105      	bne.n	801f432 <nk_add_value+0x32>
 801f426:	4b31      	ldr	r3, [pc, #196]	; (801f4ec <nk_add_value+0xec>)
 801f428:	4a2e      	ldr	r2, [pc, #184]	; (801f4e4 <nk_add_value+0xe4>)
 801f42a:	213c      	movs	r1, #60	; 0x3c
 801f42c:	482e      	ldr	r0, [pc, #184]	; (801f4e8 <nk_add_value+0xe8>)
 801f42e:	f005 fb53 	bl	8024ad8 <__assert_func>
    if (!win || !ctx) return 0;
 801f432:	68bb      	ldr	r3, [r7, #8]
 801f434:	2b00      	cmp	r3, #0
 801f436:	d002      	beq.n	801f43e <nk_add_value+0x3e>
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d101      	bne.n	801f442 <nk_add_value+0x42>
 801f43e:	2300      	movs	r3, #0
 801f440:	e04a      	b.n	801f4d8 <nk_add_value+0xd8>
    if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {
 801f442:	68bb      	ldr	r3, [r7, #8]
 801f444:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d005      	beq.n	801f458 <nk_add_value+0x58>
 801f44c:	68bb      	ldr	r3, [r7, #8]
 801f44e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f452:	685b      	ldr	r3, [r3, #4]
 801f454:	2b32      	cmp	r3, #50	; 0x32
 801f456:	d915      	bls.n	801f484 <nk_add_value+0x84>
        struct nk_table *tbl = nk_create_table(ctx);
 801f458:	68f8      	ldr	r0, [r7, #12]
 801f45a:	f7ff ff2f 	bl	801f2bc <nk_create_table>
 801f45e:	6178      	str	r0, [r7, #20]
        NK_ASSERT(tbl);
 801f460:	697b      	ldr	r3, [r7, #20]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d105      	bne.n	801f472 <nk_add_value+0x72>
 801f466:	4b22      	ldr	r3, [pc, #136]	; (801f4f0 <nk_add_value+0xf0>)
 801f468:	4a1e      	ldr	r2, [pc, #120]	; (801f4e4 <nk_add_value+0xe4>)
 801f46a:	2140      	movs	r1, #64	; 0x40
 801f46c:	481e      	ldr	r0, [pc, #120]	; (801f4e8 <nk_add_value+0xe8>)
 801f46e:	f005 fb33 	bl	8024ad8 <__assert_func>
        if (!tbl) return 0;
 801f472:	697b      	ldr	r3, [r7, #20]
 801f474:	2b00      	cmp	r3, #0
 801f476:	d101      	bne.n	801f47c <nk_add_value+0x7c>
 801f478:	2300      	movs	r3, #0
 801f47a:	e02d      	b.n	801f4d8 <nk_add_value+0xd8>
        nk_push_table(win, tbl);
 801f47c:	6979      	ldr	r1, [r7, #20]
 801f47e:	68b8      	ldr	r0, [r7, #8]
 801f480:	f7ff ff44 	bl	801f30c <nk_push_table>
    }
    win->tables->seq = win->seq;
 801f484:	68bb      	ldr	r3, [r7, #8]
 801f486:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f48a:	68ba      	ldr	r2, [r7, #8]
 801f48c:	6812      	ldr	r2, [r2, #0]
 801f48e:	601a      	str	r2, [r3, #0]
    win->tables->keys[win->tables->size] = name;
 801f490:	68bb      	ldr	r3, [r7, #8]
 801f492:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f496:	68ba      	ldr	r2, [r7, #8]
 801f498:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 801f49c:	6852      	ldr	r2, [r2, #4]
 801f49e:	3202      	adds	r2, #2
 801f4a0:	6879      	ldr	r1, [r7, #4]
 801f4a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    win->tables->values[win->tables->size] = value;
 801f4a6:	68bb      	ldr	r3, [r7, #8]
 801f4a8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801f4ac:	68bb      	ldr	r3, [r7, #8]
 801f4ae:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f4b2:	685b      	ldr	r3, [r3, #4]
 801f4b4:	3334      	adds	r3, #52	; 0x34
 801f4b6:	009b      	lsls	r3, r3, #2
 801f4b8:	4413      	add	r3, r2
 801f4ba:	683a      	ldr	r2, [r7, #0]
 801f4bc:	605a      	str	r2, [r3, #4]
    return &win->tables->values[win->tables->size++];
 801f4be:	68bb      	ldr	r3, [r7, #8]
 801f4c0:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 801f4c4:	68bb      	ldr	r3, [r7, #8]
 801f4c6:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801f4ca:	6853      	ldr	r3, [r2, #4]
 801f4cc:	1c58      	adds	r0, r3, #1
 801f4ce:	6050      	str	r0, [r2, #4]
 801f4d0:	3334      	adds	r3, #52	; 0x34
 801f4d2:	009b      	lsls	r3, r3, #2
 801f4d4:	440b      	add	r3, r1
 801f4d6:	3304      	adds	r3, #4
}
 801f4d8:	4618      	mov	r0, r3
 801f4da:	3718      	adds	r7, #24
 801f4dc:	46bd      	mov	sp, r7
 801f4de:	bd80      	pop	{r7, pc}
 801f4e0:	08029228 	.word	0x08029228
 801f4e4:	0802ab48 	.word	0x0802ab48
 801f4e8:	0802922c 	.word	0x0802922c
 801f4ec:	08029248 	.word	0x08029248
 801f4f0:	0802924c 	.word	0x0802924c

0801f4f4 <nk_find_value>:
NK_LIB nk_uint*
nk_find_value(struct nk_window *win, nk_hash name)
{
 801f4f4:	b480      	push	{r7}
 801f4f6:	b087      	sub	sp, #28
 801f4f8:	af00      	add	r7, sp, #0
 801f4fa:	6078      	str	r0, [r7, #4]
 801f4fc:	6039      	str	r1, [r7, #0]
    struct nk_table *iter = win->tables;
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f504:	617b      	str	r3, [r7, #20]
    while (iter) {
 801f506:	e027      	b.n	801f558 <nk_find_value+0x64>
        unsigned int i = 0;
 801f508:	2300      	movs	r3, #0
 801f50a:	613b      	str	r3, [r7, #16]
        unsigned int size = iter->size;
 801f50c:	697b      	ldr	r3, [r7, #20]
 801f50e:	685b      	ldr	r3, [r3, #4]
 801f510:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < size; ++i) {
 801f512:	2300      	movs	r3, #0
 801f514:	613b      	str	r3, [r7, #16]
 801f516:	e015      	b.n	801f544 <nk_find_value+0x50>
            if (iter->keys[i] == name) {
 801f518:	697b      	ldr	r3, [r7, #20]
 801f51a:	693a      	ldr	r2, [r7, #16]
 801f51c:	3202      	adds	r2, #2
 801f51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f522:	683a      	ldr	r2, [r7, #0]
 801f524:	429a      	cmp	r2, r3
 801f526:	d10a      	bne.n	801f53e <nk_find_value+0x4a>
                iter->seq = win->seq;
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	681a      	ldr	r2, [r3, #0]
 801f52c:	697b      	ldr	r3, [r7, #20]
 801f52e:	601a      	str	r2, [r3, #0]
                return &iter->values[i];
 801f530:	693b      	ldr	r3, [r7, #16]
 801f532:	3334      	adds	r3, #52	; 0x34
 801f534:	009b      	lsls	r3, r3, #2
 801f536:	697a      	ldr	r2, [r7, #20]
 801f538:	4413      	add	r3, r2
 801f53a:	3304      	adds	r3, #4
 801f53c:	e010      	b.n	801f560 <nk_find_value+0x6c>
        for (i = 0; i < size; ++i) {
 801f53e:	693b      	ldr	r3, [r7, #16]
 801f540:	3301      	adds	r3, #1
 801f542:	613b      	str	r3, [r7, #16]
 801f544:	693a      	ldr	r2, [r7, #16]
 801f546:	68fb      	ldr	r3, [r7, #12]
 801f548:	429a      	cmp	r2, r3
 801f54a:	d3e5      	bcc.n	801f518 <nk_find_value+0x24>
            }
        } size = NK_VALUE_PAGE_CAPACITY;
 801f54c:	2333      	movs	r3, #51	; 0x33
 801f54e:	60fb      	str	r3, [r7, #12]
        iter = iter->next;
 801f550:	697b      	ldr	r3, [r7, #20]
 801f552:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801f556:	617b      	str	r3, [r7, #20]
    while (iter) {
 801f558:	697b      	ldr	r3, [r7, #20]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d1d4      	bne.n	801f508 <nk_find_value+0x14>
    }
    return 0;
 801f55e:	2300      	movs	r3, #0
}
 801f560:	4618      	mov	r0, r3
 801f562:	371c      	adds	r7, #28
 801f564:	46bd      	mov	sp, r7
 801f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f56a:	4770      	bx	lr

0801f56c <nk_widget_text>:
 * ===============================================================*/
NK_LIB void
nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,
    const char *string, int len, const struct nk_text *t,
    nk_flags a, const struct nk_user_font *f)
{
 801f56c:	b580      	push	{r7, lr}
 801f56e:	b090      	sub	sp, #64	; 0x40
 801f570:	af02      	add	r7, sp, #8
 801f572:	61f8      	str	r0, [r7, #28]
 801f574:	eeb0 6a40 	vmov.f32	s12, s0
 801f578:	eef0 6a60 	vmov.f32	s13, s1
 801f57c:	eeb0 7a41 	vmov.f32	s14, s2
 801f580:	eef0 7a61 	vmov.f32	s15, s3
 801f584:	60b9      	str	r1, [r7, #8]
 801f586:	607a      	str	r2, [r7, #4]
 801f588:	603b      	str	r3, [r7, #0]
 801f58a:	ed87 6a03 	vstr	s12, [r7, #12]
 801f58e:	edc7 6a04 	vstr	s13, [r7, #16]
 801f592:	ed87 7a05 	vstr	s14, [r7, #20]
 801f596:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_rect label;
    float text_width;

    NK_ASSERT(o);
 801f59a:	69fb      	ldr	r3, [r7, #28]
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	d105      	bne.n	801f5ac <nk_widget_text+0x40>
 801f5a0:	4bb0      	ldr	r3, [pc, #704]	; (801f864 <nk_widget_text+0x2f8>)
 801f5a2:	4ab1      	ldr	r2, [pc, #708]	; (801f868 <nk_widget_text+0x2fc>)
 801f5a4:	2111      	movs	r1, #17
 801f5a6:	48b1      	ldr	r0, [pc, #708]	; (801f86c <nk_widget_text+0x300>)
 801f5a8:	f005 fa96 	bl	8024ad8 <__assert_func>
    NK_ASSERT(t);
 801f5ac:	683b      	ldr	r3, [r7, #0]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d105      	bne.n	801f5be <nk_widget_text+0x52>
 801f5b2:	4baf      	ldr	r3, [pc, #700]	; (801f870 <nk_widget_text+0x304>)
 801f5b4:	4aac      	ldr	r2, [pc, #688]	; (801f868 <nk_widget_text+0x2fc>)
 801f5b6:	2112      	movs	r1, #18
 801f5b8:	48ac      	ldr	r0, [pc, #688]	; (801f86c <nk_widget_text+0x300>)
 801f5ba:	f005 fa8d 	bl	8024ad8 <__assert_func>
    if (!o || !t) return;
 801f5be:	69fb      	ldr	r3, [r7, #28]
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	f000 81f4 	beq.w	801f9ae <nk_widget_text+0x442>
 801f5c6:	683b      	ldr	r3, [r7, #0]
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	f000 81f0 	beq.w	801f9ae <nk_widget_text+0x442>

    b.h = NK_MAX(b.h, 2 * t->padding.y);
 801f5ce:	ed97 7a06 	vldr	s14, [r7, #24]
 801f5d2:	683b      	ldr	r3, [r7, #0]
 801f5d4:	edd3 7a01 	vldr	s15, [r3, #4]
 801f5d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f5dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5e4:	d505      	bpl.n	801f5f2 <nk_widget_text+0x86>
 801f5e6:	683b      	ldr	r3, [r7, #0]
 801f5e8:	edd3 7a01 	vldr	s15, [r3, #4]
 801f5ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f5f0:	e001      	b.n	801f5f6 <nk_widget_text+0x8a>
 801f5f2:	edd7 7a06 	vldr	s15, [r7, #24]
 801f5f6:	edc7 7a06 	vstr	s15, [r7, #24]
    label.x = 0; label.w = 0;
 801f5fa:	f04f 0300 	mov.w	r3, #0
 801f5fe:	627b      	str	r3, [r7, #36]	; 0x24
 801f600:	f04f 0300 	mov.w	r3, #0
 801f604:	62fb      	str	r3, [r7, #44]	; 0x2c
    label.y = b.y + t->padding.y;
 801f606:	ed97 7a04 	vldr	s14, [r7, #16]
 801f60a:	683b      	ldr	r3, [r7, #0]
 801f60c:	edd3 7a01 	vldr	s15, [r3, #4]
 801f610:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f614:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);
 801f618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f61a:	ed93 7a01 	vldr	s14, [r3, #4]
 801f61e:	edd7 6a06 	vldr	s13, [r7, #24]
 801f622:	683b      	ldr	r3, [r7, #0]
 801f624:	edd3 7a01 	vldr	s15, [r3, #4]
 801f628:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f62c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f638:	d503      	bpl.n	801f642 <nk_widget_text+0xd6>
 801f63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f63c:	edd3 7a01 	vldr	s15, [r3, #4]
 801f640:	e008      	b.n	801f654 <nk_widget_text+0xe8>
 801f642:	ed97 7a06 	vldr	s14, [r7, #24]
 801f646:	683b      	ldr	r3, [r7, #0]
 801f648:	edd3 7a01 	vldr	s15, [r3, #4]
 801f64c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f650:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f654:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    text_width = f->width(f->userdata, f->height, (const char*)string, len);
 801f658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f65a:	689b      	ldr	r3, [r3, #8]
 801f65c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f65e:	edd2 7a01 	vldr	s15, [r2, #4]
 801f662:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f664:	687a      	ldr	r2, [r7, #4]
 801f666:	68b9      	ldr	r1, [r7, #8]
 801f668:	eeb0 0a67 	vmov.f32	s0, s15
 801f66c:	6800      	ldr	r0, [r0, #0]
 801f66e:	4798      	blx	r3
 801f670:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    text_width += (2.0f * t->padding.x);
 801f674:	683b      	ldr	r3, [r7, #0]
 801f676:	edd3 7a00 	vldr	s15, [r3]
 801f67a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f67e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801f682:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f686:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* align in x-axis */
    if (a & NK_TEXT_ALIGN_LEFT) {
 801f68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f68c:	f003 0301 	and.w	r3, r3, #1
 801f690:	2b00      	cmp	r3, #0
 801f692:	d025      	beq.n	801f6e0 <nk_widget_text+0x174>
        label.x = b.x + t->padding.x;
 801f694:	ed97 7a03 	vldr	s14, [r7, #12]
 801f698:	683b      	ldr	r3, [r7, #0]
 801f69a:	edd3 7a00 	vldr	s15, [r3]
 801f69e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f6a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 801f6a6:	ed97 7a05 	vldr	s14, [r7, #20]
 801f6aa:	683b      	ldr	r3, [r7, #0]
 801f6ac:	edd3 7a00 	vldr	s15, [r3]
 801f6b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f6b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f6b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6c0:	dd09      	ble.n	801f6d6 <nk_widget_text+0x16a>
 801f6c2:	ed97 7a05 	vldr	s14, [r7, #20]
 801f6c6:	683b      	ldr	r3, [r7, #0]
 801f6c8:	edd3 7a00 	vldr	s15, [r3]
 801f6cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f6d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f6d4:	e001      	b.n	801f6da <nk_widget_text+0x16e>
 801f6d6:	eddf 7a67 	vldr	s15, [pc, #412]	; 801f874 <nk_widget_text+0x308>
 801f6da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801f6de:	e0df      	b.n	801f8a0 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_CENTERED) {
 801f6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f6e2:	f003 0302 	and.w	r3, r3, #2
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	f000 8086 	beq.w	801f7f8 <nk_widget_text+0x28c>
        label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);
 801f6ec:	683b      	ldr	r3, [r7, #0]
 801f6ee:	edd3 7a00 	vldr	s15, [r3]
 801f6f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801f6f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f6fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f6fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f702:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f70a:	dd09      	ble.n	801f720 <nk_widget_text+0x1b4>
 801f70c:	683b      	ldr	r3, [r7, #0]
 801f70e:	edd3 7a00 	vldr	s15, [r3]
 801f712:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801f716:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f71a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f71e:	e001      	b.n	801f724 <nk_widget_text+0x1b8>
 801f720:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f724:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);
 801f728:	ed97 7a03 	vldr	s14, [r7, #12]
 801f72c:	683b      	ldr	r3, [r7, #0]
 801f72e:	edd3 7a00 	vldr	s15, [r3]
 801f732:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f736:	edd7 6a05 	vldr	s13, [r7, #20]
 801f73a:	683b      	ldr	r3, [r7, #0]
 801f73c:	edd3 7a00 	vldr	s15, [r3]
 801f740:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f744:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801f748:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f74c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801f750:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f754:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801f758:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f75c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.x = NK_MAX(b.x + t->padding.x, label.x);
 801f760:	ed97 7a03 	vldr	s14, [r7, #12]
 801f764:	683b      	ldr	r3, [r7, #0]
 801f766:	edd3 7a00 	vldr	s15, [r3]
 801f76a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f76e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f77a:	d502      	bpl.n	801f782 <nk_widget_text+0x216>
 801f77c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f780:	e006      	b.n	801f790 <nk_widget_text+0x224>
 801f782:	ed97 7a03 	vldr	s14, [r7, #12]
 801f786:	683b      	ldr	r3, [r7, #0]
 801f788:	edd3 7a00 	vldr	s15, [r3]
 801f78c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f790:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MIN(b.x + b.w, label.x + label.w);
 801f794:	ed97 7a03 	vldr	s14, [r7, #12]
 801f798:	edd7 7a05 	vldr	s15, [r7, #20]
 801f79c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f7a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801f7a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f7a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7b4:	d506      	bpl.n	801f7c4 <nk_widget_text+0x258>
 801f7b6:	ed97 7a03 	vldr	s14, [r7, #12]
 801f7ba:	edd7 7a05 	vldr	s15, [r7, #20]
 801f7be:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f7c2:	e005      	b.n	801f7d0 <nk_widget_text+0x264>
 801f7c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801f7c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f7cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f7d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if (label.w >= label.x) label.w -= label.x;
 801f7d4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801f7d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f7dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7e4:	db5c      	blt.n	801f8a0 <nk_widget_text+0x334>
 801f7e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801f7ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f7ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f7f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801f7f6:	e053      	b.n	801f8a0 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_RIGHT) {
 801f7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f7fa:	f003 0304 	and.w	r3, r3, #4
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	f000 80d7 	beq.w	801f9b2 <nk_widget_text+0x446>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
 801f804:	ed97 7a03 	vldr	s14, [r7, #12]
 801f808:	683b      	ldr	r3, [r7, #0]
 801f80a:	edd3 7a00 	vldr	s15, [r3]
 801f80e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f812:	edd7 6a03 	vldr	s13, [r7, #12]
 801f816:	edd7 7a05 	vldr	s15, [r7, #20]
 801f81a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801f81e:	683b      	ldr	r3, [r7, #0]
 801f820:	edd3 7a00 	vldr	s15, [r3]
 801f824:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801f828:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f82c:	ee76 7a27 	vadd.f32	s15, s12, s15
 801f830:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f83c:	d51c      	bpl.n	801f878 <nk_widget_text+0x30c>
 801f83e:	ed97 7a03 	vldr	s14, [r7, #12]
 801f842:	edd7 7a05 	vldr	s15, [r7, #20]
 801f846:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f84a:	683b      	ldr	r3, [r7, #0]
 801f84c:	edd3 7a00 	vldr	s15, [r3]
 801f850:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801f854:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f85c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f860:	e011      	b.n	801f886 <nk_widget_text+0x31a>
 801f862:	bf00      	nop
 801f864:	08029250 	.word	0x08029250
 801f868:	0802ab58 	.word	0x0802ab58
 801f86c:	08029254 	.word	0x08029254
 801f870:	08029270 	.word	0x08029270
 801f874:	00000000 	.word	0x00000000
 801f878:	ed97 7a03 	vldr	s14, [r7, #12]
 801f87c:	683b      	ldr	r3, [r7, #0]
 801f87e:	edd3 7a00 	vldr	s15, [r3]
 801f882:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f886:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = (float)text_width + 2 * t->padding.x;
 801f88a:	683b      	ldr	r3, [r7, #0]
 801f88c:	edd3 7a00 	vldr	s15, [r3]
 801f890:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801f894:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f898:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f89c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    } else return;

    /* align in y-axis */
    if (a & NK_TEXT_ALIGN_MIDDLE) {
 801f8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f8a2:	f003 0310 	and.w	r3, r3, #16
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d04f      	beq.n	801f94a <nk_widget_text+0x3de>
        label.y = b.y + b.h/2.0f - (float)f->height/2.0f;
 801f8aa:	ed97 7a04 	vldr	s14, [r7, #16]
 801f8ae:	edd7 6a06 	vldr	s13, [r7, #24]
 801f8b2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f8b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801f8ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8c0:	edd3 6a01 	vldr	s13, [r3, #4]
 801f8c4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f8c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801f8cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f8d0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));
 801f8d4:	edd7 7a06 	vldr	s15, [r7, #24]
 801f8d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f8dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f8e0:	edd7 6a06 	vldr	s13, [r7, #24]
 801f8e4:	edd7 7a06 	vldr	s15, [r7, #24]
 801f8e8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801f8ec:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801f8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8f2:	edd3 5a01 	vldr	s11, [r3, #4]
 801f8f6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801f8fa:	eec5 7a85 	vdiv.f32	s15, s11, s10
 801f8fe:	ee76 7a27 	vadd.f32	s15, s12, s15
 801f902:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f90e:	d513      	bpl.n	801f938 <nk_widget_text+0x3cc>
 801f910:	ed97 7a06 	vldr	s14, [r7, #24]
 801f914:	edd7 7a06 	vldr	s15, [r7, #24]
 801f918:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f91c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801f920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f922:	ed93 6a01 	vldr	s12, [r3, #4]
 801f926:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801f92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f932:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f936:	e005      	b.n	801f944 <nk_widget_text+0x3d8>
 801f938:	ed97 7a06 	vldr	s14, [r7, #24]
 801f93c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f944:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801f948:	e014      	b.n	801f974 <nk_widget_text+0x408>
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
 801f94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f94c:	f003 0320 	and.w	r3, r3, #32
 801f950:	2b00      	cmp	r3, #0
 801f952:	d00f      	beq.n	801f974 <nk_widget_text+0x408>
        label.y = b.y + b.h - f->height;
 801f954:	ed97 7a04 	vldr	s14, [r7, #16]
 801f958:	edd7 7a06 	vldr	s15, [r7, #24]
 801f95c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f962:	edd3 7a01 	vldr	s15, [r3, #4]
 801f966:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f96a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = f->height;
 801f96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f970:	685b      	ldr	r3, [r3, #4]
 801f972:	633b      	str	r3, [r7, #48]	; 0x30
    }
    nk_draw_text(o, label, (const char*)string, len, f, t->background, t->text);
 801f974:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 801f978:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 801f97c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801f980:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801f984:	683b      	ldr	r3, [r7, #0]
 801f986:	68db      	ldr	r3, [r3, #12]
 801f988:	9301      	str	r3, [sp, #4]
 801f98a:	683b      	ldr	r3, [r7, #0]
 801f98c:	689b      	ldr	r3, [r3, #8]
 801f98e:	9300      	str	r3, [sp, #0]
 801f990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f992:	687a      	ldr	r2, [r7, #4]
 801f994:	68b9      	ldr	r1, [r7, #8]
 801f996:	eeb0 0a46 	vmov.f32	s0, s12
 801f99a:	eef0 0a66 	vmov.f32	s1, s13
 801f99e:	eeb0 1a47 	vmov.f32	s2, s14
 801f9a2:	eef0 1a67 	vmov.f32	s3, s15
 801f9a6:	69f8      	ldr	r0, [r7, #28]
 801f9a8:	f7f3 f8f0 	bl	8012b8c <nk_draw_text>
 801f9ac:	e002      	b.n	801f9b4 <nk_widget_text+0x448>
    if (!o || !t) return;
 801f9ae:	bf00      	nop
 801f9b0:	e000      	b.n	801f9b4 <nk_widget_text+0x448>
    } else return;
 801f9b2:	bf00      	nop
}
 801f9b4:	3738      	adds	r7, #56	; 0x38
 801f9b6:	46bd      	mov	sp, r7
 801f9b8:	bd80      	pop	{r7, pc}
 801f9ba:	bf00      	nop

0801f9bc <nk_text_colored>:
    }
}
NK_API void
nk_text_colored(struct nk_context *ctx, const char *str, int len,
    nk_flags alignment, struct nk_color color)
{
 801f9bc:	b580      	push	{r7, lr}
 801f9be:	b092      	sub	sp, #72	; 0x48
 801f9c0:	af02      	add	r7, sp, #8
 801f9c2:	60f8      	str	r0, [r7, #12]
 801f9c4:	60b9      	str	r1, [r7, #8]
 801f9c6:	607a      	str	r2, [r7, #4]
 801f9c8:	603b      	str	r3, [r7, #0]

    struct nk_vec2 item_padding;
    struct nk_rect bounds;
    struct nk_text text;

    NK_ASSERT(ctx);
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	d105      	bne.n	801f9dc <nk_text_colored+0x20>
 801f9d0:	4b3e      	ldr	r3, [pc, #248]	; (801facc <nk_text_colored+0x110>)
 801f9d2:	4a3f      	ldr	r2, [pc, #252]	; (801fad0 <nk_text_colored+0x114>)
 801f9d4:	2168      	movs	r1, #104	; 0x68
 801f9d6:	483f      	ldr	r0, [pc, #252]	; (801fad4 <nk_text_colored+0x118>)
 801f9d8:	f005 f87e 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 801f9dc:	68fb      	ldr	r3, [r7, #12]
 801f9de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801f9e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d105      	bne.n	801f9f6 <nk_text_colored+0x3a>
 801f9ea:	4b3b      	ldr	r3, [pc, #236]	; (801fad8 <nk_text_colored+0x11c>)
 801f9ec:	4a38      	ldr	r2, [pc, #224]	; (801fad0 <nk_text_colored+0x114>)
 801f9ee:	2169      	movs	r1, #105	; 0x69
 801f9f0:	4838      	ldr	r0, [pc, #224]	; (801fad4 <nk_text_colored+0x118>)
 801f9f2:	f005 f871 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801f9f6:	68fb      	ldr	r3, [r7, #12]
 801f9f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801f9fc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	d105      	bne.n	801fa14 <nk_text_colored+0x58>
 801fa08:	4b34      	ldr	r3, [pc, #208]	; (801fadc <nk_text_colored+0x120>)
 801fa0a:	4a31      	ldr	r2, [pc, #196]	; (801fad0 <nk_text_colored+0x114>)
 801fa0c:	216a      	movs	r1, #106	; 0x6a
 801fa0e:	4831      	ldr	r0, [pc, #196]	; (801fad4 <nk_text_colored+0x118>)
 801fa10:	f005 f862 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	d053      	beq.n	801fac2 <nk_text_colored+0x106>
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801fa20:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	d04c      	beq.n	801fac2 <nk_text_colored+0x106>
 801fa28:	68fb      	ldr	r3, [r7, #12]
 801fa2a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801fa2e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fa36:	2b00      	cmp	r3, #0
 801fa38:	d043      	beq.n	801fac2 <nk_text_colored+0x106>

    win = ctx->current;
 801fa3a:	68fb      	ldr	r3, [r7, #12]
 801fa3c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801fa40:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa44:	63fb      	str	r3, [r7, #60]	; 0x3c
    style = &ctx->style;
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801fa4c:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_panel_alloc_space(&bounds, ctx);
 801fa4e:	f107 0320 	add.w	r3, r7, #32
 801fa52:	68f9      	ldr	r1, [r7, #12]
 801fa54:	4618      	mov	r0, r3
 801fa56:	f7f6 fd89 	bl	801656c <nk_panel_alloc_space>
    item_padding = style->text.padding;
 801fa5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fa5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fa60:	3230      	adds	r2, #48	; 0x30
 801fa62:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fa66:	e883 0003 	stmia.w	r3, {r0, r1}

    text.padding.x = item_padding.x;
 801fa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa6c:	613b      	str	r3, [r7, #16]
    text.padding.y = item_padding.y;
 801fa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa70:	617b      	str	r3, [r7, #20]
    text.background = style->window.background;
 801fa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801fa78:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801fa7c:	61bb      	str	r3, [r7, #24]
    text.text = color;
 801fa7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa80:	61fb      	str	r3, [r7, #28]
    nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);
 801fa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa84:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801fa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa8a:	681b      	ldr	r3, [r3, #0]
 801fa8c:	f107 0210 	add.w	r2, r7, #16
 801fa90:	ed97 6a08 	vldr	s12, [r7, #32]
 801fa94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801fa98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801fa9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801faa0:	9301      	str	r3, [sp, #4]
 801faa2:	683b      	ldr	r3, [r7, #0]
 801faa4:	9300      	str	r3, [sp, #0]
 801faa6:	4613      	mov	r3, r2
 801faa8:	687a      	ldr	r2, [r7, #4]
 801faaa:	68b9      	ldr	r1, [r7, #8]
 801faac:	eeb0 0a46 	vmov.f32	s0, s12
 801fab0:	eef0 0a66 	vmov.f32	s1, s13
 801fab4:	eeb0 1a47 	vmov.f32	s2, s14
 801fab8:	eef0 1a67 	vmov.f32	s3, s15
 801fabc:	f7ff fd56 	bl	801f56c <nk_widget_text>
 801fac0:	e000      	b.n	801fac4 <nk_text_colored+0x108>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801fac2:	bf00      	nop
}
 801fac4:	3740      	adds	r7, #64	; 0x40
 801fac6:	46bd      	mov	sp, r7
 801fac8:	bd80      	pop	{r7, pc}
 801faca:	bf00      	nop
 801facc:	08029274 	.word	0x08029274
 801fad0:	0802ab68 	.word	0x0802ab68
 801fad4:	08029254 	.word	0x08029254
 801fad8:	08029278 	.word	0x08029278
 801fadc:	08029288 	.word	0x08029288

0801fae0 <nk_text>:
    nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);
}
#endif
NK_API void
nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)
{
 801fae0:	b580      	push	{r7, lr}
 801fae2:	b086      	sub	sp, #24
 801fae4:	af02      	add	r7, sp, #8
 801fae6:	60f8      	str	r0, [r7, #12]
 801fae8:	60b9      	str	r1, [r7, #8]
 801faea:	607a      	str	r2, [r7, #4]
 801faec:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801faee:	68fb      	ldr	r3, [r7, #12]
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	d106      	bne.n	801fb02 <nk_text+0x22>
 801faf4:	4b0c      	ldr	r3, [pc, #48]	; (801fb28 <nk_text+0x48>)
 801faf6:	4a0d      	ldr	r2, [pc, #52]	; (801fb2c <nk_text+0x4c>)
 801faf8:	f44f 7182 	mov.w	r1, #260	; 0x104
 801fafc:	480c      	ldr	r0, [pc, #48]	; (801fb30 <nk_text+0x50>)
 801fafe:	f004 ffeb 	bl	8024ad8 <__assert_func>
    if (!ctx) return;
 801fb02:	68fb      	ldr	r3, [r7, #12]
 801fb04:	2b00      	cmp	r3, #0
 801fb06:	d00a      	beq.n	801fb1e <nk_text+0x3e>
    nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);
 801fb08:	68fb      	ldr	r3, [r7, #12]
 801fb0a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801fb0e:	9300      	str	r3, [sp, #0]
 801fb10:	683b      	ldr	r3, [r7, #0]
 801fb12:	687a      	ldr	r2, [r7, #4]
 801fb14:	68b9      	ldr	r1, [r7, #8]
 801fb16:	68f8      	ldr	r0, [r7, #12]
 801fb18:	f7ff ff50 	bl	801f9bc <nk_text_colored>
 801fb1c:	e000      	b.n	801fb20 <nk_text+0x40>
    if (!ctx) return;
 801fb1e:	bf00      	nop
}
 801fb20:	3710      	adds	r7, #16
 801fb22:	46bd      	mov	sp, r7
 801fb24:	bd80      	pop	{r7, pc}
 801fb26:	bf00      	nop
 801fb28:	08029274 	.word	0x08029274
 801fb2c:	0802ab78 	.word	0x0802ab78
 801fb30:	08029254 	.word	0x08029254

0801fb34 <nk_label>:
    if (!ctx) return;
    nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);
}
NK_API void
nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)
{
 801fb34:	b580      	push	{r7, lr}
 801fb36:	b084      	sub	sp, #16
 801fb38:	af00      	add	r7, sp, #0
 801fb3a:	60f8      	str	r0, [r7, #12]
 801fb3c:	60b9      	str	r1, [r7, #8]
 801fb3e:	607a      	str	r2, [r7, #4]
    nk_text(ctx, str, nk_strlen(str), alignment);
 801fb40:	68b8      	ldr	r0, [r7, #8]
 801fb42:	f002 fdbd 	bl	80226c0 <nk_strlen>
 801fb46:	4602      	mov	r2, r0
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	68b9      	ldr	r1, [r7, #8]
 801fb4c:	68f8      	ldr	r0, [r7, #12]
 801fb4e:	f7ff ffc7 	bl	801fae0 <nk_text>
}
 801fb52:	bf00      	nop
 801fb54:	3710      	adds	r7, #16
 801fb56:	46bd      	mov	sp, r7
 801fb58:	bd80      	pop	{r7, pc}

0801fb5a <nk_textedit_get_width>:
#define NK_TEXT_HAS_SELECTION(s)   ((s)->select_start != (s)->select_end)

NK_INTERN float
nk_textedit_get_width(const struct nk_text_edit *edit, int line_start, int char_id,
    const struct nk_user_font *font)
{
 801fb5a:	b580      	push	{r7, lr}
 801fb5c:	b088      	sub	sp, #32
 801fb5e:	af00      	add	r7, sp, #0
 801fb60:	60f8      	str	r0, [r7, #12]
 801fb62:	60b9      	str	r1, [r7, #8]
 801fb64:	607a      	str	r2, [r7, #4]
 801fb66:	603b      	str	r3, [r7, #0]
    int len = 0;
 801fb68:	2300      	movs	r3, #0
 801fb6a:	61bb      	str	r3, [r7, #24]
    nk_rune unicode = 0;
 801fb6c:	2300      	movs	r3, #0
 801fb6e:	617b      	str	r3, [r7, #20]
    const char *str = nk_str_at_const(&edit->string, line_start + char_id, &unicode, &len);
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	f103 000c 	add.w	r0, r3, #12
 801fb76:	68ba      	ldr	r2, [r7, #8]
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	18d1      	adds	r1, r2, r3
 801fb7c:	f107 0318 	add.w	r3, r7, #24
 801fb80:	f107 0214 	add.w	r2, r7, #20
 801fb84:	f7fd f9ba 	bl	801cefc <nk_str_at_const>
 801fb88:	61f8      	str	r0, [r7, #28]
    return font->width(font->userdata, font->height, str, len);
 801fb8a:	683b      	ldr	r3, [r7, #0]
 801fb8c:	689b      	ldr	r3, [r3, #8]
 801fb8e:	683a      	ldr	r2, [r7, #0]
 801fb90:	edd2 7a01 	vldr	s15, [r2, #4]
 801fb94:	69ba      	ldr	r2, [r7, #24]
 801fb96:	6838      	ldr	r0, [r7, #0]
 801fb98:	69f9      	ldr	r1, [r7, #28]
 801fb9a:	eeb0 0a67 	vmov.f32	s0, s15
 801fb9e:	6800      	ldr	r0, [r0, #0]
 801fba0:	4798      	blx	r3
 801fba2:	eef0 7a40 	vmov.f32	s15, s0
}
 801fba6:	eeb0 0a67 	vmov.f32	s0, s15
 801fbaa:	3720      	adds	r7, #32
 801fbac:	46bd      	mov	sp, r7
 801fbae:	bd80      	pop	{r7, pc}

0801fbb0 <nk_textedit_layout_row>:
NK_INTERN void
nk_textedit_layout_row(struct nk_text_edit_row *r, struct nk_text_edit *edit,
    int line_start_id, float row_height, const struct nk_user_font *font)
{
 801fbb0:	b580      	push	{r7, lr}
 801fbb2:	b094      	sub	sp, #80	; 0x50
 801fbb4:	af04      	add	r7, sp, #16
 801fbb6:	6178      	str	r0, [r7, #20]
 801fbb8:	6139      	str	r1, [r7, #16]
 801fbba:	60fa      	str	r2, [r7, #12]
 801fbbc:	ed87 0a02 	vstr	s0, [r7, #8]
 801fbc0:	607b      	str	r3, [r7, #4]
    int l;
    int glyphs = 0;
 801fbc2:	2300      	movs	r3, #0
 801fbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    nk_rune unicode;
    const char *remaining;
    int len = nk_str_len_char(&edit->string);
 801fbc6:	693b      	ldr	r3, [r7, #16]
 801fbc8:	330c      	adds	r3, #12
 801fbca:	4618      	mov	r0, r3
 801fbcc:	f7fd fa7c 	bl	801d0c8 <nk_str_len_char>
 801fbd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char *end = nk_str_get_const(&edit->string) + len;
 801fbd2:	693b      	ldr	r3, [r7, #16]
 801fbd4:	330c      	adds	r3, #12
 801fbd6:	4618      	mov	r0, r3
 801fbd8:	f7fd fa26 	bl	801d028 <nk_str_get_const>
 801fbdc:	4602      	mov	r2, r0
 801fbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fbe0:	4413      	add	r3, r2
 801fbe2:	63bb      	str	r3, [r7, #56]	; 0x38
    const char *text = nk_str_at_const(&edit->string, line_start_id, &unicode, &l);
 801fbe4:	693b      	ldr	r3, [r7, #16]
 801fbe6:	f103 000c 	add.w	r0, r3, #12
 801fbea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fbee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801fbf2:	68f9      	ldr	r1, [r7, #12]
 801fbf4:	f7fd f982 	bl	801cefc <nk_str_at_const>
 801fbf8:	6378      	str	r0, [r7, #52]	; 0x34
    const struct nk_vec2 size = nk_text_calculate_text_bounds(font,
 801fbfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fbfe:	1ad2      	subs	r2, r2, r3
 801fc00:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801fc04:	2301      	movs	r3, #1
 801fc06:	9302      	str	r3, [sp, #8]
 801fc08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801fc0c:	9301      	str	r3, [sp, #4]
 801fc0e:	2300      	movs	r3, #0
 801fc10:	9300      	str	r3, [sp, #0]
 801fc12:	460b      	mov	r3, r1
 801fc14:	ed97 0a02 	vldr	s0, [r7, #8]
 801fc18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fc1a:	6878      	ldr	r0, [r7, #4]
 801fc1c:	f003 fb3a 	bl	8023294 <nk_text_calculate_text_bounds>
 801fc20:	eeb0 7a40 	vmov.f32	s14, s0
 801fc24:	eef0 7a60 	vmov.f32	s15, s1
 801fc28:	ed87 7a07 	vstr	s14, [r7, #28]
 801fc2c:	edc7 7a08 	vstr	s15, [r7, #32]
        text, (int)(end - text), row_height, &remaining, 0, &glyphs, NK_STOP_ON_NEW_LINE);

    r->x0 = 0.0f;
 801fc30:	697b      	ldr	r3, [r7, #20]
 801fc32:	f04f 0200 	mov.w	r2, #0
 801fc36:	601a      	str	r2, [r3, #0]
    r->x1 = size.x;
 801fc38:	69fa      	ldr	r2, [r7, #28]
 801fc3a:	697b      	ldr	r3, [r7, #20]
 801fc3c:	605a      	str	r2, [r3, #4]
    r->baseline_y_delta = size.y;
 801fc3e:	6a3a      	ldr	r2, [r7, #32]
 801fc40:	697b      	ldr	r3, [r7, #20]
 801fc42:	609a      	str	r2, [r3, #8]
    r->ymin = 0.0f;
 801fc44:	697b      	ldr	r3, [r7, #20]
 801fc46:	f04f 0200 	mov.w	r2, #0
 801fc4a:	60da      	str	r2, [r3, #12]
    r->ymax = size.y;
 801fc4c:	6a3a      	ldr	r2, [r7, #32]
 801fc4e:	697b      	ldr	r3, [r7, #20]
 801fc50:	611a      	str	r2, [r3, #16]
    r->num_chars = glyphs;
 801fc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fc54:	697b      	ldr	r3, [r7, #20]
 801fc56:	615a      	str	r2, [r3, #20]
}
 801fc58:	bf00      	nop
 801fc5a:	3740      	adds	r7, #64	; 0x40
 801fc5c:	46bd      	mov	sp, r7
 801fc5e:	bd80      	pop	{r7, pc}

0801fc60 <nk_textedit_locate_coord>:
NK_INTERN int
nk_textedit_locate_coord(struct nk_text_edit *edit, float x, float y,
    const struct nk_user_font *font, float row_height)
{
 801fc60:	b580      	push	{r7, lr}
 801fc62:	b092      	sub	sp, #72	; 0x48
 801fc64:	af00      	add	r7, sp, #0
 801fc66:	6178      	str	r0, [r7, #20]
 801fc68:	ed87 0a04 	vstr	s0, [r7, #16]
 801fc6c:	edc7 0a03 	vstr	s1, [r7, #12]
 801fc70:	60b9      	str	r1, [r7, #8]
 801fc72:	ed87 1a01 	vstr	s2, [r7, #4]
    struct nk_text_edit_row r;
    int n = edit->string.len;
 801fc76:	697b      	ldr	r3, [r7, #20]
 801fc78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fc7a:	63bb      	str	r3, [r7, #56]	; 0x38
    float base_y = 0, prev_x;
 801fc7c:	f04f 0300 	mov.w	r3, #0
 801fc80:	647b      	str	r3, [r7, #68]	; 0x44
    int i=0, k;
 801fc82:	2300      	movs	r3, #0
 801fc84:	63fb      	str	r3, [r7, #60]	; 0x3c

    r.x0 = r.x1 = 0;
 801fc86:	f04f 0300 	mov.w	r3, #0
 801fc8a:	61fb      	str	r3, [r7, #28]
 801fc8c:	69fb      	ldr	r3, [r7, #28]
 801fc8e:	61bb      	str	r3, [r7, #24]
    r.ymin = r.ymax = 0;
 801fc90:	f04f 0300 	mov.w	r3, #0
 801fc94:	62bb      	str	r3, [r7, #40]	; 0x28
 801fc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc98:	627b      	str	r3, [r7, #36]	; 0x24
    r.num_chars = 0;
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* search rows to find one that straddles 'y' */
    while (i < n) {
 801fc9e:	e038      	b.n	801fd12 <nk_textedit_locate_coord+0xb2>
        nk_textedit_layout_row(&r, edit, i, row_height, font);
 801fca0:	f107 0018 	add.w	r0, r7, #24
 801fca4:	68bb      	ldr	r3, [r7, #8]
 801fca6:	ed97 0a01 	vldr	s0, [r7, #4]
 801fcaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fcac:	6979      	ldr	r1, [r7, #20]
 801fcae:	f7ff ff7f 	bl	801fbb0 <nk_textedit_layout_row>
        if (r.num_chars <= 0)
 801fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	dc01      	bgt.n	801fcbc <nk_textedit_locate_coord+0x5c>
            return n;
 801fcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fcba:	e0a4      	b.n	801fe06 <nk_textedit_locate_coord+0x1a6>

        if (i==0 && y < base_y + r.ymin)
 801fcbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	d10e      	bne.n	801fce0 <nk_textedit_locate_coord+0x80>
 801fcc2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801fcc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801fcca:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fcce:	ed97 7a03 	vldr	s14, [r7, #12]
 801fcd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcda:	d501      	bpl.n	801fce0 <nk_textedit_locate_coord+0x80>
            return 0;
 801fcdc:	2300      	movs	r3, #0
 801fcde:	e092      	b.n	801fe06 <nk_textedit_locate_coord+0x1a6>

        if (y < base_y + r.ymax)
 801fce0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801fce4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801fce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fcec:	ed97 7a03 	vldr	s14, [r7, #12]
 801fcf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcf8:	d410      	bmi.n	801fd1c <nk_textedit_locate_coord+0xbc>
            break;

        i += r.num_chars;
 801fcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fcfe:	4413      	add	r3, r2
 801fd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        base_y += r.baseline_y_delta;
 801fd02:	edd7 7a08 	vldr	s15, [r7, #32]
 801fd06:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801fd0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd0e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    while (i < n) {
 801fd12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd16:	429a      	cmp	r2, r3
 801fd18:	dbc2      	blt.n	801fca0 <nk_textedit_locate_coord+0x40>
 801fd1a:	e000      	b.n	801fd1e <nk_textedit_locate_coord+0xbe>
            break;
 801fd1c:	bf00      	nop
    }

    /* below all text, return 'after' last character */
    if (i >= n)
 801fd1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd22:	429a      	cmp	r2, r3
 801fd24:	db01      	blt.n	801fd2a <nk_textedit_locate_coord+0xca>
        return n;
 801fd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd28:	e06d      	b.n	801fe06 <nk_textedit_locate_coord+0x1a6>

    /* check if it's before the beginning of the line */
    if (x < r.x0)
 801fd2a:	edd7 7a06 	vldr	s15, [r7, #24]
 801fd2e:	ed97 7a04 	vldr	s14, [r7, #16]
 801fd32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd3a:	d501      	bpl.n	801fd40 <nk_textedit_locate_coord+0xe0>
        return i;
 801fd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd3e:	e062      	b.n	801fe06 <nk_textedit_locate_coord+0x1a6>

    /* check if it's before the end of the line */
    if (x < r.x1) {
 801fd40:	edd7 7a07 	vldr	s15, [r7, #28]
 801fd44:	ed97 7a04 	vldr	s14, [r7, #16]
 801fd48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd50:	d544      	bpl.n	801fddc <nk_textedit_locate_coord+0x17c>
        /* search characters in row for one that straddles 'x' */
        k = i;
 801fd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd54:	637b      	str	r3, [r7, #52]	; 0x34
        prev_x = r.x0;
 801fd56:	69bb      	ldr	r3, [r7, #24]
 801fd58:	643b      	str	r3, [r7, #64]	; 0x40
        for (i=0; i < r.num_chars; ++i) {
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fd5e:	e039      	b.n	801fdd4 <nk_textedit_locate_coord+0x174>
            float w = nk_textedit_get_width(edit, k, i, font);
 801fd60:	68bb      	ldr	r3, [r7, #8]
 801fd62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fd66:	6978      	ldr	r0, [r7, #20]
 801fd68:	f7ff fef7 	bl	801fb5a <nk_textedit_get_width>
 801fd6c:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
            if (x < prev_x+w) {
 801fd70:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801fd74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801fd78:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd7c:	ed97 7a04 	vldr	s14, [r7, #16]
 801fd80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd88:	d519      	bpl.n	801fdbe <nk_textedit_locate_coord+0x15e>
                if (x < prev_x+w/2)
 801fd8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801fd8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801fd92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801fd96:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801fd9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd9e:	ed97 7a04 	vldr	s14, [r7, #16]
 801fda2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdaa:	d503      	bpl.n	801fdb4 <nk_textedit_locate_coord+0x154>
                    return k+i;
 801fdac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdb0:	4413      	add	r3, r2
 801fdb2:	e028      	b.n	801fe06 <nk_textedit_locate_coord+0x1a6>
                else return k+i+1;
 801fdb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdb8:	4413      	add	r3, r2
 801fdba:	3301      	adds	r3, #1
 801fdbc:	e023      	b.n	801fe06 <nk_textedit_locate_coord+0x1a6>
            }
            prev_x += w;
 801fdbe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801fdc2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801fdc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fdca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        for (i=0; i < r.num_chars; ++i) {
 801fdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdd0:	3301      	adds	r3, #1
 801fdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fdd8:	429a      	cmp	r2, r3
 801fdda:	dbc1      	blt.n	801fd60 <nk_textedit_locate_coord+0x100>
        /* shouldn't happen, but if it does, fall through to end-of-line case */
    }

    /* if the last character is a newline, return that.
     * otherwise return 'after' the last character */
    if (nk_str_rune_at(&edit->string, i+r.num_chars-1) == '\n')
 801fddc:	697b      	ldr	r3, [r7, #20]
 801fdde:	f103 000c 	add.w	r0, r3, #12
 801fde2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fde6:	4413      	add	r3, r2
 801fde8:	3b01      	subs	r3, #1
 801fdea:	4619      	mov	r1, r3
 801fdec:	f7fd f908 	bl	801d000 <nk_str_rune_at>
 801fdf0:	4603      	mov	r3, r0
 801fdf2:	2b0a      	cmp	r3, #10
 801fdf4:	d104      	bne.n	801fe00 <nk_textedit_locate_coord+0x1a0>
        return i+r.num_chars-1;
 801fdf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdfa:	4413      	add	r3, r2
 801fdfc:	3b01      	subs	r3, #1
 801fdfe:	e002      	b.n	801fe06 <nk_textedit_locate_coord+0x1a6>
    else return i+r.num_chars;
 801fe00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fe02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe04:	4413      	add	r3, r2
}
 801fe06:	4618      	mov	r0, r3
 801fe08:	3748      	adds	r7, #72	; 0x48
 801fe0a:	46bd      	mov	sp, r7
 801fe0c:	bd80      	pop	{r7, pc}

0801fe0e <nk_textedit_click>:
NK_LIB void
nk_textedit_click(struct nk_text_edit *state, float x, float y,
    const struct nk_user_font *font, float row_height)
{
 801fe0e:	b580      	push	{r7, lr}
 801fe10:	b086      	sub	sp, #24
 801fe12:	af00      	add	r7, sp, #0
 801fe14:	6178      	str	r0, [r7, #20]
 801fe16:	ed87 0a04 	vstr	s0, [r7, #16]
 801fe1a:	edc7 0a03 	vstr	s1, [r7, #12]
 801fe1e:	60b9      	str	r1, [r7, #8]
 801fe20:	ed87 1a01 	vstr	s2, [r7, #4]
    /* API click: on mouse down, move the cursor to the clicked location,
     * and reset the selection */
    state->cursor = nk_textedit_locate_coord(state, x, y, font, row_height);
 801fe24:	ed97 1a01 	vldr	s2, [r7, #4]
 801fe28:	68b9      	ldr	r1, [r7, #8]
 801fe2a:	edd7 0a03 	vldr	s1, [r7, #12]
 801fe2e:	ed97 0a04 	vldr	s0, [r7, #16]
 801fe32:	6978      	ldr	r0, [r7, #20]
 801fe34:	f7ff ff14 	bl	801fc60 <nk_textedit_locate_coord>
 801fe38:	4602      	mov	r2, r0
 801fe3a:	697b      	ldr	r3, [r7, #20]
 801fe3c:	659a      	str	r2, [r3, #88]	; 0x58
    state->select_start = state->cursor;
 801fe3e:	697b      	ldr	r3, [r7, #20]
 801fe40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fe42:	697b      	ldr	r3, [r7, #20]
 801fe44:	65da      	str	r2, [r3, #92]	; 0x5c
    state->select_end = state->cursor;
 801fe46:	697b      	ldr	r3, [r7, #20]
 801fe48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fe4a:	697b      	ldr	r3, [r7, #20]
 801fe4c:	661a      	str	r2, [r3, #96]	; 0x60
    state->has_preferred_x = 0;
 801fe4e:	697b      	ldr	r3, [r7, #20]
 801fe50:	2200      	movs	r2, #0
 801fe52:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
}
 801fe56:	bf00      	nop
 801fe58:	3718      	adds	r7, #24
 801fe5a:	46bd      	mov	sp, r7
 801fe5c:	bd80      	pop	{r7, pc}

0801fe5e <nk_textedit_drag>:
NK_LIB void
nk_textedit_drag(struct nk_text_edit *state, float x, float y,
    const struct nk_user_font *font, float row_height)
{
 801fe5e:	b580      	push	{r7, lr}
 801fe60:	b088      	sub	sp, #32
 801fe62:	af00      	add	r7, sp, #0
 801fe64:	6178      	str	r0, [r7, #20]
 801fe66:	ed87 0a04 	vstr	s0, [r7, #16]
 801fe6a:	edc7 0a03 	vstr	s1, [r7, #12]
 801fe6e:	60b9      	str	r1, [r7, #8]
 801fe70:	ed87 1a01 	vstr	s2, [r7, #4]
    /* API drag: on mouse drag, move the cursor and selection endpoint
     * to the clicked location */
    int p = nk_textedit_locate_coord(state, x, y, font, row_height);
 801fe74:	ed97 1a01 	vldr	s2, [r7, #4]
 801fe78:	68b9      	ldr	r1, [r7, #8]
 801fe7a:	edd7 0a03 	vldr	s1, [r7, #12]
 801fe7e:	ed97 0a04 	vldr	s0, [r7, #16]
 801fe82:	6978      	ldr	r0, [r7, #20]
 801fe84:	f7ff feec 	bl	801fc60 <nk_textedit_locate_coord>
 801fe88:	61f8      	str	r0, [r7, #28]
    if (state->select_start == state->select_end)
 801fe8a:	697b      	ldr	r3, [r7, #20]
 801fe8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801fe8e:	697b      	ldr	r3, [r7, #20]
 801fe90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fe92:	429a      	cmp	r2, r3
 801fe94:	d103      	bne.n	801fe9e <nk_textedit_drag+0x40>
        state->select_start = state->cursor;
 801fe96:	697b      	ldr	r3, [r7, #20]
 801fe98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fe9a:	697b      	ldr	r3, [r7, #20]
 801fe9c:	65da      	str	r2, [r3, #92]	; 0x5c
    state->cursor = state->select_end = p;
 801fe9e:	697b      	ldr	r3, [r7, #20]
 801fea0:	69fa      	ldr	r2, [r7, #28]
 801fea2:	661a      	str	r2, [r3, #96]	; 0x60
 801fea4:	697b      	ldr	r3, [r7, #20]
 801fea6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fea8:	697b      	ldr	r3, [r7, #20]
 801feaa:	659a      	str	r2, [r3, #88]	; 0x58
}
 801feac:	bf00      	nop
 801feae:	3720      	adds	r7, #32
 801feb0:	46bd      	mov	sp, r7
 801feb2:	bd80      	pop	{r7, pc}

0801feb4 <nk_textedit_find_charpos>:
NK_INTERN void
nk_textedit_find_charpos(struct nk_text_find *find, struct nk_text_edit *state,
    int n, int single_line, const struct nk_user_font *font, float row_height)
{
 801feb4:	b580      	push	{r7, lr}
 801feb6:	b090      	sub	sp, #64	; 0x40
 801feb8:	af00      	add	r7, sp, #0
 801feba:	6178      	str	r0, [r7, #20]
 801febc:	6139      	str	r1, [r7, #16]
 801febe:	60fa      	str	r2, [r7, #12]
 801fec0:	60bb      	str	r3, [r7, #8]
 801fec2:	ed87 0a01 	vstr	s0, [r7, #4]
    /* find the x/y location of a character, and remember info about the previous
     * row in case we get a move-up event (for page up, we'll have to rescan) */
    struct nk_text_edit_row r;
    int prev_start = 0;
 801fec6:	2300      	movs	r3, #0
 801fec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    int z = state->string.len;
 801feca:	693b      	ldr	r3, [r7, #16]
 801fecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fece:	637b      	str	r3, [r7, #52]	; 0x34
    int i=0, first;
 801fed0:	2300      	movs	r3, #0
 801fed2:	63bb      	str	r3, [r7, #56]	; 0x38

    nk_zero_struct(r);
 801fed4:	f107 0318 	add.w	r3, r7, #24
 801fed8:	2118      	movs	r1, #24
 801feda:	4618      	mov	r0, r3
 801fedc:	f002 fbd2 	bl	8022684 <nk_zero>
    if (n == z) {
 801fee0:	68fa      	ldr	r2, [r7, #12]
 801fee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fee4:	429a      	cmp	r2, r3
 801fee6:	d13e      	bne.n	801ff66 <nk_textedit_find_charpos+0xb2>
        /* if it's at the end, then find the last line -- simpler than trying to
        explicitly handle this case in the regular code */
        nk_textedit_layout_row(&r, state, 0, row_height, font);
 801fee8:	f107 0018 	add.w	r0, r7, #24
 801feec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801feee:	ed97 0a01 	vldr	s0, [r7, #4]
 801fef2:	2200      	movs	r2, #0
 801fef4:	6939      	ldr	r1, [r7, #16]
 801fef6:	f7ff fe5b 	bl	801fbb0 <nk_textedit_layout_row>
        if (single_line) {
 801fefa:	68bb      	ldr	r3, [r7, #8]
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d015      	beq.n	801ff2c <nk_textedit_find_charpos+0x78>
            find->first_char = 0;
 801ff00:	697b      	ldr	r3, [r7, #20]
 801ff02:	2200      	movs	r2, #0
 801ff04:	60da      	str	r2, [r3, #12]
            find->length = z;
 801ff06:	697b      	ldr	r3, [r7, #20]
 801ff08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ff0a:	611a      	str	r2, [r3, #16]
 801ff0c:	e018      	b.n	801ff40 <nk_textedit_find_charpos+0x8c>
        } else {
            while (i < z) {
                prev_start = i;
 801ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff10:	63fb      	str	r3, [r7, #60]	; 0x3c
                i += r.num_chars;
 801ff12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff16:	4413      	add	r3, r2
 801ff18:	63bb      	str	r3, [r7, #56]	; 0x38
                nk_textedit_layout_row(&r, state, i, row_height, font);
 801ff1a:	f107 0018 	add.w	r0, r7, #24
 801ff1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ff20:	ed97 0a01 	vldr	s0, [r7, #4]
 801ff24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff26:	6939      	ldr	r1, [r7, #16]
 801ff28:	f7ff fe42 	bl	801fbb0 <nk_textedit_layout_row>
            while (i < z) {
 801ff2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff30:	429a      	cmp	r2, r3
 801ff32:	dbec      	blt.n	801ff0e <nk_textedit_find_charpos+0x5a>
            }

            find->first_char = i;
 801ff34:	697b      	ldr	r3, [r7, #20]
 801ff36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff38:	60da      	str	r2, [r3, #12]
            find->length = r.num_chars;
 801ff3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff3c:	697b      	ldr	r3, [r7, #20]
 801ff3e:	611a      	str	r2, [r3, #16]
        }
        find->x = r.x1;
 801ff40:	69fa      	ldr	r2, [r7, #28]
 801ff42:	697b      	ldr	r3, [r7, #20]
 801ff44:	601a      	str	r2, [r3, #0]
        find->y = r.ymin;
 801ff46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ff48:	697b      	ldr	r3, [r7, #20]
 801ff4a:	605a      	str	r2, [r3, #4]
        find->height = r.ymax - r.ymin;
 801ff4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ff50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ff54:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ff58:	697b      	ldr	r3, [r7, #20]
 801ff5a:	edc3 7a02 	vstr	s15, [r3, #8]
        find->prev_first = prev_start;
 801ff5e:	697b      	ldr	r3, [r7, #20]
 801ff60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ff62:	615a      	str	r2, [r3, #20]
 801ff64:	e057      	b.n	8020016 <nk_textedit_find_charpos+0x162>
        return;
    }

    /* search rows to find the one that straddles character n */
    find->y = 0;
 801ff66:	697b      	ldr	r3, [r7, #20]
 801ff68:	f04f 0200 	mov.w	r2, #0
 801ff6c:	605a      	str	r2, [r3, #4]

    for(;;) {
        nk_textedit_layout_row(&r, state, i, row_height, font);
 801ff6e:	f107 0018 	add.w	r0, r7, #24
 801ff72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ff74:	ed97 0a01 	vldr	s0, [r7, #4]
 801ff78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff7a:	6939      	ldr	r1, [r7, #16]
 801ff7c:	f7ff fe18 	bl	801fbb0 <nk_textedit_layout_row>
        if (n < i + r.num_chars) break;
 801ff80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff84:	4413      	add	r3, r2
 801ff86:	68fa      	ldr	r2, [r7, #12]
 801ff88:	429a      	cmp	r2, r3
 801ff8a:	db10      	blt.n	801ffae <nk_textedit_find_charpos+0xfa>
        prev_start = i;
 801ff8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        i += r.num_chars;
 801ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff94:	4413      	add	r3, r2
 801ff96:	63bb      	str	r3, [r7, #56]	; 0x38
        find->y += r.baseline_y_delta;
 801ff98:	697b      	ldr	r3, [r7, #20]
 801ff9a:	ed93 7a01 	vldr	s14, [r3, #4]
 801ff9e:	edd7 7a08 	vldr	s15, [r7, #32]
 801ffa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ffa6:	697b      	ldr	r3, [r7, #20]
 801ffa8:	edc3 7a01 	vstr	s15, [r3, #4]
        nk_textedit_layout_row(&r, state, i, row_height, font);
 801ffac:	e7df      	b.n	801ff6e <nk_textedit_find_charpos+0xba>
        if (n < i + r.num_chars) break;
 801ffae:	bf00      	nop
    }

    find->first_char = first = i;
 801ffb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ffb2:	633b      	str	r3, [r7, #48]	; 0x30
 801ffb4:	697b      	ldr	r3, [r7, #20]
 801ffb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ffb8:	60da      	str	r2, [r3, #12]
    find->length = r.num_chars;
 801ffba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ffbc:	697b      	ldr	r3, [r7, #20]
 801ffbe:	611a      	str	r2, [r3, #16]
    find->height = r.ymax - r.ymin;
 801ffc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ffc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ffc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ffcc:	697b      	ldr	r3, [r7, #20]
 801ffce:	edc3 7a02 	vstr	s15, [r3, #8]
    find->prev_first = prev_start;
 801ffd2:	697b      	ldr	r3, [r7, #20]
 801ffd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ffd6:	615a      	str	r2, [r3, #20]

    /* now scan to find xpos */
    find->x = r.x0;
 801ffd8:	69ba      	ldr	r2, [r7, #24]
 801ffda:	697b      	ldr	r3, [r7, #20]
 801ffdc:	601a      	str	r2, [r3, #0]
    for (i=0; first+i < n; ++i)
 801ffde:	2300      	movs	r3, #0
 801ffe0:	63bb      	str	r3, [r7, #56]	; 0x38
 801ffe2:	e012      	b.n	802000a <nk_textedit_find_charpos+0x156>
        find->x += nk_textedit_get_width(state, first, i, font);
 801ffe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ffe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ffe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ffea:	6938      	ldr	r0, [r7, #16]
 801ffec:	f7ff fdb5 	bl	801fb5a <nk_textedit_get_width>
 801fff0:	eeb0 7a40 	vmov.f32	s14, s0
 801fff4:	697b      	ldr	r3, [r7, #20]
 801fff6:	edd3 7a00 	vldr	s15, [r3]
 801fffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fffe:	697b      	ldr	r3, [r7, #20]
 8020000:	edc3 7a00 	vstr	s15, [r3]
    for (i=0; first+i < n; ++i)
 8020004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020006:	3301      	adds	r3, #1
 8020008:	63bb      	str	r3, [r7, #56]	; 0x38
 802000a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802000e:	4413      	add	r3, r2
 8020010:	68fa      	ldr	r2, [r7, #12]
 8020012:	429a      	cmp	r2, r3
 8020014:	dce6      	bgt.n	801ffe4 <nk_textedit_find_charpos+0x130>
}
 8020016:	3740      	adds	r7, #64	; 0x40
 8020018:	46bd      	mov	sp, r7
 802001a:	bd80      	pop	{r7, pc}

0802001c <nk_textedit_clamp>:
NK_INTERN void
nk_textedit_clamp(struct nk_text_edit *state)
{
 802001c:	b480      	push	{r7}
 802001e:	b085      	sub	sp, #20
 8020020:	af00      	add	r7, sp, #0
 8020022:	6078      	str	r0, [r7, #4]
    /* make the selection/cursor state valid if client altered the string */
    int n = state->string.len;
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020028:	60fb      	str	r3, [r7, #12]
    if (NK_TEXT_HAS_SELECTION(state)) {
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020032:	429a      	cmp	r2, r3
 8020034:	d019      	beq.n	802006a <nk_textedit_clamp+0x4e>
        if (state->select_start > n) state->select_start = n;
 8020036:	687b      	ldr	r3, [r7, #4]
 8020038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802003a:	68fa      	ldr	r2, [r7, #12]
 802003c:	429a      	cmp	r2, r3
 802003e:	da02      	bge.n	8020046 <nk_textedit_clamp+0x2a>
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	68fa      	ldr	r2, [r7, #12]
 8020044:	65da      	str	r2, [r3, #92]	; 0x5c
        if (state->select_end   > n) state->select_end = n;
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802004a:	68fa      	ldr	r2, [r7, #12]
 802004c:	429a      	cmp	r2, r3
 802004e:	da02      	bge.n	8020056 <nk_textedit_clamp+0x3a>
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	68fa      	ldr	r2, [r7, #12]
 8020054:	661a      	str	r2, [r3, #96]	; 0x60
        /* if clamping forced them to be equal, move the cursor to match */
        if (state->select_start == state->select_end)
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802005e:	429a      	cmp	r2, r3
 8020060:	d103      	bne.n	802006a <nk_textedit_clamp+0x4e>
            state->cursor = state->select_start;
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (state->cursor > n) state->cursor = n;
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802006e:	68fa      	ldr	r2, [r7, #12]
 8020070:	429a      	cmp	r2, r3
 8020072:	da02      	bge.n	802007a <nk_textedit_clamp+0x5e>
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	68fa      	ldr	r2, [r7, #12]
 8020078:	659a      	str	r2, [r3, #88]	; 0x58
}
 802007a:	bf00      	nop
 802007c:	3714      	adds	r7, #20
 802007e:	46bd      	mov	sp, r7
 8020080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020084:	4770      	bx	lr

08020086 <nk_textedit_delete>:
NK_API void
nk_textedit_delete(struct nk_text_edit *state, int where, int len)
{
 8020086:	b580      	push	{r7, lr}
 8020088:	b084      	sub	sp, #16
 802008a:	af00      	add	r7, sp, #0
 802008c:	60f8      	str	r0, [r7, #12]
 802008e:	60b9      	str	r1, [r7, #8]
 8020090:	607a      	str	r2, [r7, #4]
    /* delete characters while updating undo */
    nk_textedit_makeundo_delete(state, where, len);
 8020092:	687a      	ldr	r2, [r7, #4]
 8020094:	68b9      	ldr	r1, [r7, #8]
 8020096:	68f8      	ldr	r0, [r7, #12]
 8020098:	f001 faa5 	bl	80215e6 <nk_textedit_makeundo_delete>
    nk_str_delete_runes(&state->string, where, len);
 802009c:	68fb      	ldr	r3, [r7, #12]
 802009e:	330c      	adds	r3, #12
 80200a0:	687a      	ldr	r2, [r7, #4]
 80200a2:	68b9      	ldr	r1, [r7, #8]
 80200a4:	4618      	mov	r0, r3
 80200a6:	f7fc fe25 	bl	801ccf4 <nk_str_delete_runes>
    state->has_preferred_x = 0;
 80200aa:	68fb      	ldr	r3, [r7, #12]
 80200ac:	2200      	movs	r2, #0
 80200ae:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
}
 80200b2:	bf00      	nop
 80200b4:	3710      	adds	r7, #16
 80200b6:	46bd      	mov	sp, r7
 80200b8:	bd80      	pop	{r7, pc}

080200ba <nk_textedit_delete_selection>:
NK_API void
nk_textedit_delete_selection(struct nk_text_edit *state)
{
 80200ba:	b580      	push	{r7, lr}
 80200bc:	b082      	sub	sp, #8
 80200be:	af00      	add	r7, sp, #0
 80200c0:	6078      	str	r0, [r7, #4]
    /* delete the section */
    nk_textedit_clamp(state);
 80200c2:	6878      	ldr	r0, [r7, #4]
 80200c4:	f7ff ffaa 	bl	802001c <nk_textedit_clamp>
    if (NK_TEXT_HAS_SELECTION(state)) {
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80200d0:	429a      	cmp	r2, r3
 80200d2:	d030      	beq.n	8020136 <nk_textedit_delete_selection+0x7c>
        if (state->select_start < state->select_end) {
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80200dc:	429a      	cmp	r2, r3
 80200de:	da13      	bge.n	8020108 <nk_textedit_delete_selection+0x4e>
            nk_textedit_delete(state, state->select_start,
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
                state->select_end - state->select_start);
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            nk_textedit_delete(state, state->select_start,
 80200ec:	1ad3      	subs	r3, r2, r3
 80200ee:	461a      	mov	r2, r3
 80200f0:	6878      	ldr	r0, [r7, #4]
 80200f2:	f7ff ffc8 	bl	8020086 <nk_textedit_delete>
            state->select_end = state->cursor = state->select_start;
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	659a      	str	r2, [r3, #88]	; 0x58
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	661a      	str	r2, [r3, #96]	; 0x60
 8020106:	e012      	b.n	802012e <nk_textedit_delete_selection+0x74>
        } else {
            nk_textedit_delete(state, state->select_end,
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	6e19      	ldr	r1, [r3, #96]	; 0x60
                state->select_start - state->select_end);
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            nk_textedit_delete(state, state->select_end,
 8020114:	1ad3      	subs	r3, r2, r3
 8020116:	461a      	mov	r2, r3
 8020118:	6878      	ldr	r0, [r7, #4]
 802011a:	f7ff ffb4 	bl	8020086 <nk_textedit_delete>
            state->select_start = state->cursor = state->select_end;
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	659a      	str	r2, [r3, #88]	; 0x58
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        state->has_preferred_x = 0;
 802012e:	687b      	ldr	r3, [r7, #4]
 8020130:	2200      	movs	r2, #0
 8020132:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    }
}
 8020136:	bf00      	nop
 8020138:	3708      	adds	r7, #8
 802013a:	46bd      	mov	sp, r7
 802013c:	bd80      	pop	{r7, pc}

0802013e <nk_textedit_sortselection>:
NK_INTERN void
nk_textedit_sortselection(struct nk_text_edit *state)
{
 802013e:	b480      	push	{r7}
 8020140:	b085      	sub	sp, #20
 8020142:	af00      	add	r7, sp, #0
 8020144:	6078      	str	r0, [r7, #4]
    /* canonicalize the selection so start <= end */
    if (state->select_end < state->select_start) {
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802014e:	429a      	cmp	r2, r3
 8020150:	da09      	bge.n	8020166 <nk_textedit_sortselection+0x28>
        int temp = state->select_end;
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020156:	60fb      	str	r3, [r7, #12]
        state->select_end = state->select_start;
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	661a      	str	r2, [r3, #96]	; 0x60
        state->select_start = temp;
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	68fa      	ldr	r2, [r7, #12]
 8020164:	65da      	str	r2, [r3, #92]	; 0x5c
    }
}
 8020166:	bf00      	nop
 8020168:	3714      	adds	r7, #20
 802016a:	46bd      	mov	sp, r7
 802016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020170:	4770      	bx	lr

08020172 <nk_textedit_move_to_first>:
NK_INTERN void
nk_textedit_move_to_first(struct nk_text_edit *state)
{
 8020172:	b580      	push	{r7, lr}
 8020174:	b082      	sub	sp, #8
 8020176:	af00      	add	r7, sp, #0
 8020178:	6078      	str	r0, [r7, #4]
    /* move cursor to first character of selection */
    if (NK_TEXT_HAS_SELECTION(state)) {
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802017e:	687b      	ldr	r3, [r7, #4]
 8020180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020182:	429a      	cmp	r2, r3
 8020184:	d00e      	beq.n	80201a4 <nk_textedit_move_to_first+0x32>
        nk_textedit_sortselection(state);
 8020186:	6878      	ldr	r0, [r7, #4]
 8020188:	f7ff ffd9 	bl	802013e <nk_textedit_sortselection>
        state->cursor = state->select_start;
 802018c:	687b      	ldr	r3, [r7, #4]
 802018e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	659a      	str	r2, [r3, #88]	; 0x58
        state->select_end = state->select_start;
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	661a      	str	r2, [r3, #96]	; 0x60
        state->has_preferred_x = 0;
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	2200      	movs	r2, #0
 80201a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    }
}
 80201a4:	bf00      	nop
 80201a6:	3708      	adds	r7, #8
 80201a8:	46bd      	mov	sp, r7
 80201aa:	bd80      	pop	{r7, pc}

080201ac <nk_textedit_move_to_last>:
NK_INTERN void
nk_textedit_move_to_last(struct nk_text_edit *state)
{
 80201ac:	b580      	push	{r7, lr}
 80201ae:	b082      	sub	sp, #8
 80201b0:	af00      	add	r7, sp, #0
 80201b2:	6078      	str	r0, [r7, #4]
    /* move cursor to last character of selection */
    if (NK_TEXT_HAS_SELECTION(state)) {
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80201bc:	429a      	cmp	r2, r3
 80201be:	d011      	beq.n	80201e4 <nk_textedit_move_to_last+0x38>
        nk_textedit_sortselection(state);
 80201c0:	6878      	ldr	r0, [r7, #4]
 80201c2:	f7ff ffbc 	bl	802013e <nk_textedit_sortselection>
        nk_textedit_clamp(state);
 80201c6:	6878      	ldr	r0, [r7, #4]
 80201c8:	f7ff ff28 	bl	802001c <nk_textedit_clamp>
        state->cursor = state->select_end;
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	659a      	str	r2, [r3, #88]	; 0x58
        state->select_start = state->select_end;
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	65da      	str	r2, [r3, #92]	; 0x5c
        state->has_preferred_x = 0;
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	2200      	movs	r2, #0
 80201e0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    }
}
 80201e4:	bf00      	nop
 80201e6:	3708      	adds	r7, #8
 80201e8:	46bd      	mov	sp, r7
 80201ea:	bd80      	pop	{r7, pc}

080201ec <nk_is_word_boundary>:
NK_INTERN int
nk_is_word_boundary( struct nk_text_edit *state, int idx)
{
 80201ec:	b580      	push	{r7, lr}
 80201ee:	b084      	sub	sp, #16
 80201f0:	af00      	add	r7, sp, #0
 80201f2:	6078      	str	r0, [r7, #4]
 80201f4:	6039      	str	r1, [r7, #0]
    int len;
    nk_rune c;
    if (idx <= 0) return 1;
 80201f6:	683b      	ldr	r3, [r7, #0]
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	dc01      	bgt.n	8020200 <nk_is_word_boundary+0x14>
 80201fc:	2301      	movs	r3, #1
 80201fe:	e036      	b.n	802026e <nk_is_word_boundary+0x82>
    if (!nk_str_at_rune(&state->string, idx, &c, &len)) return 1;
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	f103 000c 	add.w	r0, r3, #12
 8020206:	f107 030c 	add.w	r3, r7, #12
 802020a:	f107 0208 	add.w	r2, r7, #8
 802020e:	6839      	ldr	r1, [r7, #0]
 8020210:	f7fc fdf2 	bl	801cdf8 <nk_str_at_rune>
 8020214:	4603      	mov	r3, r0
 8020216:	2b00      	cmp	r3, #0
 8020218:	d101      	bne.n	802021e <nk_is_word_boundary+0x32>
 802021a:	2301      	movs	r3, #1
 802021c:	e027      	b.n	802026e <nk_is_word_boundary+0x82>
    return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
 802021e:	68bb      	ldr	r3, [r7, #8]
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 8020220:	2b20      	cmp	r3, #32
 8020222:	d021      	beq.n	8020268 <nk_is_word_boundary+0x7c>
    return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
 8020224:	68bb      	ldr	r3, [r7, #8]
 8020226:	2b09      	cmp	r3, #9
 8020228:	d01e      	beq.n	8020268 <nk_is_word_boundary+0x7c>
 802022a:	68bb      	ldr	r3, [r7, #8]
 802022c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8020230:	d01a      	beq.n	8020268 <nk_is_word_boundary+0x7c>
 8020232:	68bb      	ldr	r3, [r7, #8]
 8020234:	2b2c      	cmp	r3, #44	; 0x2c
 8020236:	d017      	beq.n	8020268 <nk_is_word_boundary+0x7c>
 8020238:	68bb      	ldr	r3, [r7, #8]
 802023a:	2b3b      	cmp	r3, #59	; 0x3b
 802023c:	d014      	beq.n	8020268 <nk_is_word_boundary+0x7c>
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 802023e:	68bb      	ldr	r3, [r7, #8]
    return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
 8020240:	2b28      	cmp	r3, #40	; 0x28
 8020242:	d011      	beq.n	8020268 <nk_is_word_boundary+0x7c>
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 8020244:	68bb      	ldr	r3, [r7, #8]
 8020246:	2b29      	cmp	r3, #41	; 0x29
 8020248:	d00e      	beq.n	8020268 <nk_is_word_boundary+0x7c>
 802024a:	68bb      	ldr	r3, [r7, #8]
 802024c:	2b7b      	cmp	r3, #123	; 0x7b
 802024e:	d00b      	beq.n	8020268 <nk_is_word_boundary+0x7c>
 8020250:	68bb      	ldr	r3, [r7, #8]
 8020252:	2b7d      	cmp	r3, #125	; 0x7d
 8020254:	d008      	beq.n	8020268 <nk_is_word_boundary+0x7c>
 8020256:	68bb      	ldr	r3, [r7, #8]
 8020258:	2b5b      	cmp	r3, #91	; 0x5b
 802025a:	d005      	beq.n	8020268 <nk_is_word_boundary+0x7c>
 802025c:	68bb      	ldr	r3, [r7, #8]
 802025e:	2b5d      	cmp	r3, #93	; 0x5d
 8020260:	d002      	beq.n	8020268 <nk_is_word_boundary+0x7c>
            c == '|');
 8020262:	68bb      	ldr	r3, [r7, #8]
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 8020264:	2b7c      	cmp	r3, #124	; 0x7c
 8020266:	d101      	bne.n	802026c <nk_is_word_boundary+0x80>
 8020268:	2301      	movs	r3, #1
 802026a:	e000      	b.n	802026e <nk_is_word_boundary+0x82>
 802026c:	2300      	movs	r3, #0
}
 802026e:	4618      	mov	r0, r3
 8020270:	3710      	adds	r7, #16
 8020272:	46bd      	mov	sp, r7
 8020274:	bd80      	pop	{r7, pc}

08020276 <nk_textedit_move_to_word_previous>:
NK_INTERN int
nk_textedit_move_to_word_previous(struct nk_text_edit *state)
{
 8020276:	b580      	push	{r7, lr}
 8020278:	b084      	sub	sp, #16
 802027a:	af00      	add	r7, sp, #0
 802027c:	6078      	str	r0, [r7, #4]
   int c = state->cursor - 1;
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020282:	3b01      	subs	r3, #1
 8020284:	60fb      	str	r3, [r7, #12]
   while( c >= 0 && !nk_is_word_boundary(state, c))
 8020286:	e002      	b.n	802028e <nk_textedit_move_to_word_previous+0x18>
      --c;
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	3b01      	subs	r3, #1
 802028c:	60fb      	str	r3, [r7, #12]
   while( c >= 0 && !nk_is_word_boundary(state, c))
 802028e:	68fb      	ldr	r3, [r7, #12]
 8020290:	2b00      	cmp	r3, #0
 8020292:	db06      	blt.n	80202a2 <nk_textedit_move_to_word_previous+0x2c>
 8020294:	68f9      	ldr	r1, [r7, #12]
 8020296:	6878      	ldr	r0, [r7, #4]
 8020298:	f7ff ffa8 	bl	80201ec <nk_is_word_boundary>
 802029c:	4603      	mov	r3, r0
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d0f2      	beq.n	8020288 <nk_textedit_move_to_word_previous+0x12>

   if( c < 0 )
 80202a2:	68fb      	ldr	r3, [r7, #12]
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	da01      	bge.n	80202ac <nk_textedit_move_to_word_previous+0x36>
      c = 0;
 80202a8:	2300      	movs	r3, #0
 80202aa:	60fb      	str	r3, [r7, #12]

   return c;
 80202ac:	68fb      	ldr	r3, [r7, #12]
}
 80202ae:	4618      	mov	r0, r3
 80202b0:	3710      	adds	r7, #16
 80202b2:	46bd      	mov	sp, r7
 80202b4:	bd80      	pop	{r7, pc}

080202b6 <nk_textedit_move_to_word_next>:
NK_INTERN int
nk_textedit_move_to_word_next(struct nk_text_edit *state)
{
 80202b6:	b580      	push	{r7, lr}
 80202b8:	b084      	sub	sp, #16
 80202ba:	af00      	add	r7, sp, #0
 80202bc:	6078      	str	r0, [r7, #4]
   const int len = state->string.len;
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80202c2:	60bb      	str	r3, [r7, #8]
   int c = state->cursor+1;
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80202c8:	3301      	adds	r3, #1
 80202ca:	60fb      	str	r3, [r7, #12]
   while( c < len && !nk_is_word_boundary(state, c))
 80202cc:	e002      	b.n	80202d4 <nk_textedit_move_to_word_next+0x1e>
      ++c;
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	3301      	adds	r3, #1
 80202d2:	60fb      	str	r3, [r7, #12]
   while( c < len && !nk_is_word_boundary(state, c))
 80202d4:	68fa      	ldr	r2, [r7, #12]
 80202d6:	68bb      	ldr	r3, [r7, #8]
 80202d8:	429a      	cmp	r2, r3
 80202da:	da06      	bge.n	80202ea <nk_textedit_move_to_word_next+0x34>
 80202dc:	68f9      	ldr	r1, [r7, #12]
 80202de:	6878      	ldr	r0, [r7, #4]
 80202e0:	f7ff ff84 	bl	80201ec <nk_is_word_boundary>
 80202e4:	4603      	mov	r3, r0
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	d0f1      	beq.n	80202ce <nk_textedit_move_to_word_next+0x18>

   if( c > len )
 80202ea:	68fa      	ldr	r2, [r7, #12]
 80202ec:	68bb      	ldr	r3, [r7, #8]
 80202ee:	429a      	cmp	r2, r3
 80202f0:	dd01      	ble.n	80202f6 <nk_textedit_move_to_word_next+0x40>
      c = len;
 80202f2:	68bb      	ldr	r3, [r7, #8]
 80202f4:	60fb      	str	r3, [r7, #12]

   return c;
 80202f6:	68fb      	ldr	r3, [r7, #12]
}
 80202f8:	4618      	mov	r0, r3
 80202fa:	3710      	adds	r7, #16
 80202fc:	46bd      	mov	sp, r7
 80202fe:	bd80      	pop	{r7, pc}

08020300 <nk_textedit_prep_selection_at_cursor>:
NK_INTERN void
nk_textedit_prep_selection_at_cursor(struct nk_text_edit *state)
{
 8020300:	b480      	push	{r7}
 8020302:	b083      	sub	sp, #12
 8020304:	af00      	add	r7, sp, #0
 8020306:	6078      	str	r0, [r7, #4]
    /* update selection and cursor to match each other */
    if (!NK_TEXT_HAS_SELECTION(state))
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020310:	429a      	cmp	r2, r3
 8020312:	d108      	bne.n	8020326 <nk_textedit_prep_selection_at_cursor+0x26>
        state->select_start = state->select_end = state->cursor;
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	661a      	str	r2, [r3, #96]	; 0x60
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	65da      	str	r2, [r3, #92]	; 0x5c
    else state->cursor = state->select_end;
}
 8020324:	e003      	b.n	802032e <nk_textedit_prep_selection_at_cursor+0x2e>
    else state->cursor = state->select_end;
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	659a      	str	r2, [r3, #88]	; 0x58
}
 802032e:	bf00      	nop
 8020330:	370c      	adds	r7, #12
 8020332:	46bd      	mov	sp, r7
 8020334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020338:	4770      	bx	lr

0802033a <nk_textedit_cut>:
NK_API nk_bool
nk_textedit_cut(struct nk_text_edit *state)
{
 802033a:	b580      	push	{r7, lr}
 802033c:	b082      	sub	sp, #8
 802033e:	af00      	add	r7, sp, #0
 8020340:	6078      	str	r0, [r7, #4]
    /* API cut: delete selection */
    if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020348:	2b00      	cmp	r3, #0
 802034a:	d101      	bne.n	8020350 <nk_textedit_cut+0x16>
        return 0;
 802034c:	2300      	movs	r3, #0
 802034e:	e00f      	b.n	8020370 <nk_textedit_cut+0x36>
    if (NK_TEXT_HAS_SELECTION(state)) {
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020358:	429a      	cmp	r2, r3
 802035a:	d008      	beq.n	802036e <nk_textedit_cut+0x34>
        nk_textedit_delete_selection(state); /* implicitly clamps */
 802035c:	6878      	ldr	r0, [r7, #4]
 802035e:	f7ff feac 	bl	80200ba <nk_textedit_delete_selection>
        state->has_preferred_x = 0;
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	2200      	movs	r2, #0
 8020366:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        return 1;
 802036a:	2301      	movs	r3, #1
 802036c:	e000      	b.n	8020370 <nk_textedit_cut+0x36>
    }
   return 0;
 802036e:	2300      	movs	r3, #0
}
 8020370:	4618      	mov	r0, r3
 8020372:	3708      	adds	r7, #8
 8020374:	46bd      	mov	sp, r7
 8020376:	bd80      	pop	{r7, pc}

08020378 <nk_textedit_text>:
        --state->undo.undo_point;
    return 0;
}
NK_API void
nk_textedit_text(struct nk_text_edit *state, const char *text, int total_len)
{
 8020378:	b580      	push	{r7, lr}
 802037a:	b088      	sub	sp, #32
 802037c:	af00      	add	r7, sp, #0
 802037e:	60f8      	str	r0, [r7, #12]
 8020380:	60b9      	str	r1, [r7, #8]
 8020382:	607a      	str	r2, [r7, #4]
    nk_rune unicode;
    int glyph_len;
    int text_len = 0;
 8020384:	2300      	movs	r3, #0
 8020386:	61bb      	str	r3, [r7, #24]

    NK_ASSERT(state);
 8020388:	68fb      	ldr	r3, [r7, #12]
 802038a:	2b00      	cmp	r3, #0
 802038c:	d106      	bne.n	802039c <nk_textedit_text+0x24>
 802038e:	4b62      	ldr	r3, [pc, #392]	; (8020518 <nk_textedit_text+0x1a0>)
 8020390:	4a62      	ldr	r2, [pc, #392]	; (802051c <nk_textedit_text+0x1a4>)
 8020392:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8020396:	4862      	ldr	r0, [pc, #392]	; (8020520 <nk_textedit_text+0x1a8>)
 8020398:	f004 fb9e 	bl	8024ad8 <__assert_func>
    NK_ASSERT(text);
 802039c:	68bb      	ldr	r3, [r7, #8]
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d106      	bne.n	80203b0 <nk_textedit_text+0x38>
 80203a2:	4b60      	ldr	r3, [pc, #384]	; (8020524 <nk_textedit_text+0x1ac>)
 80203a4:	4a5d      	ldr	r2, [pc, #372]	; (802051c <nk_textedit_text+0x1a4>)
 80203a6:	f240 116d 	movw	r1, #365	; 0x16d
 80203aa:	485d      	ldr	r0, [pc, #372]	; (8020520 <nk_textedit_text+0x1a8>)
 80203ac:	f004 fb94 	bl	8024ad8 <__assert_func>
    if (!text || !total_len || state->mode == NK_TEXT_EDIT_MODE_VIEW) return;
 80203b0:	68bb      	ldr	r3, [r7, #8]
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	f000 80ab 	beq.w	802050e <nk_textedit_text+0x196>
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	f000 80a7 	beq.w	802050e <nk_textedit_text+0x196>
 80203c0:	68fb      	ldr	r3, [r7, #12]
 80203c2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	f000 80a1 	beq.w	802050e <nk_textedit_text+0x196>

    glyph_len = nk_utf_decode(text, &unicode, total_len);
 80203cc:	f107 0314 	add.w	r3, r7, #20
 80203d0:	687a      	ldr	r2, [r7, #4]
 80203d2:	4619      	mov	r1, r3
 80203d4:	68b8      	ldr	r0, [r7, #8]
 80203d6:	f001 fedb 	bl	8022190 <nk_utf_decode>
 80203da:	61f8      	str	r0, [r7, #28]
    while ((text_len < total_len) && glyph_len)
 80203dc:	e08e      	b.n	80204fc <nk_textedit_text+0x184>
    {
        /* don't insert a backward delete, just process the event */
        if (unicode == 127) goto next;
 80203de:	697b      	ldr	r3, [r7, #20]
 80203e0:	2b7f      	cmp	r3, #127	; 0x7f
 80203e2:	d074      	beq.n	80204ce <nk_textedit_text+0x156>
        /* can't add newline in single-line mode */
        if (unicode == '\n' && state->single_line) goto next;
 80203e4:	697b      	ldr	r3, [r7, #20]
 80203e6:	2b0a      	cmp	r3, #10
 80203e8:	d104      	bne.n	80203f4 <nk_textedit_text+0x7c>
 80203ea:	68fb      	ldr	r3, [r7, #12]
 80203ec:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	d16e      	bne.n	80204d2 <nk_textedit_text+0x15a>
        /* filter incoming text */
        if (state->filter && !state->filter(state, unicode)) goto next;
 80203f4:	68fb      	ldr	r3, [r7, #12]
 80203f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d008      	beq.n	802040e <nk_textedit_text+0x96>
 80203fc:	68fb      	ldr	r3, [r7, #12]
 80203fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020400:	697a      	ldr	r2, [r7, #20]
 8020402:	4611      	mov	r1, r2
 8020404:	68f8      	ldr	r0, [r7, #12]
 8020406:	4798      	blx	r3
 8020408:	4603      	mov	r3, r0
 802040a:	2b00      	cmp	r3, #0
 802040c:	d063      	beq.n	80204d6 <nk_textedit_text+0x15e>

        if (!NK_TEXT_HAS_SELECTION(state) &&
 802040e:	68fb      	ldr	r3, [r7, #12]
 8020410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020412:	68fb      	ldr	r3, [r7, #12]
 8020414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020416:	429a      	cmp	r2, r3
 8020418:	d132      	bne.n	8020480 <nk_textedit_text+0x108>
            state->cursor < state->string.len)
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802041e:	68fb      	ldr	r3, [r7, #12]
 8020420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        if (!NK_TEXT_HAS_SELECTION(state) &&
 8020422:	429a      	cmp	r2, r3
 8020424:	da2c      	bge.n	8020480 <nk_textedit_text+0x108>
        {
            if (state->mode == NK_TEXT_EDIT_MODE_REPLACE) {
 8020426:	68fb      	ldr	r3, [r7, #12]
 8020428:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 802042c:	2b02      	cmp	r3, #2
 802042e:	d10f      	bne.n	8020450 <nk_textedit_text+0xd8>
                nk_textedit_makeundo_replace(state, state->cursor, 1, 1);
 8020430:	68fb      	ldr	r3, [r7, #12]
 8020432:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020434:	2301      	movs	r3, #1
 8020436:	2201      	movs	r2, #1
 8020438:	68f8      	ldr	r0, [r7, #12]
 802043a:	f001 f902 	bl	8021642 <nk_textedit_makeundo_replace>
                nk_str_delete_runes(&state->string, state->cursor, 1);
 802043e:	68fb      	ldr	r3, [r7, #12]
 8020440:	f103 000c 	add.w	r0, r3, #12
 8020444:	68fb      	ldr	r3, [r7, #12]
 8020446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020448:	2201      	movs	r2, #1
 802044a:	4619      	mov	r1, r3
 802044c:	f7fc fc52 	bl	801ccf4 <nk_str_delete_runes>
            }
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 8020450:	68fb      	ldr	r3, [r7, #12]
 8020452:	f103 000c 	add.w	r0, r3, #12
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	6d99      	ldr	r1, [r3, #88]	; 0x58
 802045a:	69bb      	ldr	r3, [r7, #24]
 802045c:	68ba      	ldr	r2, [r7, #8]
 802045e:	441a      	add	r2, r3
 8020460:	2301      	movs	r3, #1
 8020462:	f7fc fae3 	bl	801ca2c <nk_str_insert_text_utf8>
 8020466:	4603      	mov	r3, r0
 8020468:	2b00      	cmp	r3, #0
 802046a:	d037      	beq.n	80204dc <nk_textedit_text+0x164>
                                        text+text_len, 1))
            {
                ++state->cursor;
 802046c:	68fb      	ldr	r3, [r7, #12]
 802046e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020470:	1c5a      	adds	r2, r3, #1
 8020472:	68fb      	ldr	r3, [r7, #12]
 8020474:	659a      	str	r2, [r3, #88]	; 0x58
                state->has_preferred_x = 0;
 8020476:	68fb      	ldr	r3, [r7, #12]
 8020478:	2200      	movs	r2, #0
 802047a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 802047e:	e02d      	b.n	80204dc <nk_textedit_text+0x164>
            }
        } else {
            nk_textedit_delete_selection(state); /* implicitly clamps */
 8020480:	68f8      	ldr	r0, [r7, #12]
 8020482:	f7ff fe1a 	bl	80200ba <nk_textedit_delete_selection>
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 8020486:	68fb      	ldr	r3, [r7, #12]
 8020488:	f103 000c 	add.w	r0, r3, #12
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020490:	69bb      	ldr	r3, [r7, #24]
 8020492:	68ba      	ldr	r2, [r7, #8]
 8020494:	441a      	add	r2, r3
 8020496:	2301      	movs	r3, #1
 8020498:	f7fc fac8 	bl	801ca2c <nk_str_insert_text_utf8>
 802049c:	4603      	mov	r3, r0
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d01b      	beq.n	80204da <nk_textedit_text+0x162>
                                        text+text_len, 1))
            {
                nk_textedit_makeundo_insert(state, state->cursor, 1);
 80204a2:	68fb      	ldr	r3, [r7, #12]
 80204a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80204a6:	2201      	movs	r2, #1
 80204a8:	4619      	mov	r1, r3
 80204aa:	68f8      	ldr	r0, [r7, #12]
 80204ac:	f001 f889 	bl	80215c2 <nk_textedit_makeundo_insert>
                state->cursor = NK_MIN(state->cursor + 1, state->string.len);
 80204b0:	68fb      	ldr	r3, [r7, #12]
 80204b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80204b4:	68fb      	ldr	r3, [r7, #12]
 80204b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80204b8:	3301      	adds	r3, #1
 80204ba:	429a      	cmp	r2, r3
 80204bc:	bfa8      	it	ge
 80204be:	461a      	movge	r2, r3
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	659a      	str	r2, [r3, #88]	; 0x58
                state->has_preferred_x = 0;
 80204c4:	68fb      	ldr	r3, [r7, #12]
 80204c6:	2200      	movs	r2, #0
 80204c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80204cc:	e006      	b.n	80204dc <nk_textedit_text+0x164>
        if (unicode == 127) goto next;
 80204ce:	bf00      	nop
 80204d0:	e004      	b.n	80204dc <nk_textedit_text+0x164>
        if (unicode == '\n' && state->single_line) goto next;
 80204d2:	bf00      	nop
 80204d4:	e002      	b.n	80204dc <nk_textedit_text+0x164>
        if (state->filter && !state->filter(state, unicode)) goto next;
 80204d6:	bf00      	nop
 80204d8:	e000      	b.n	80204dc <nk_textedit_text+0x164>
            }
        }
        next:
 80204da:	bf00      	nop
        text_len += glyph_len;
 80204dc:	69ba      	ldr	r2, [r7, #24]
 80204de:	69fb      	ldr	r3, [r7, #28]
 80204e0:	4413      	add	r3, r2
 80204e2:	61bb      	str	r3, [r7, #24]
        glyph_len = nk_utf_decode(text + text_len, &unicode, total_len-text_len);
 80204e4:	69bb      	ldr	r3, [r7, #24]
 80204e6:	68ba      	ldr	r2, [r7, #8]
 80204e8:	18d0      	adds	r0, r2, r3
 80204ea:	687a      	ldr	r2, [r7, #4]
 80204ec:	69bb      	ldr	r3, [r7, #24]
 80204ee:	1ad2      	subs	r2, r2, r3
 80204f0:	f107 0314 	add.w	r3, r7, #20
 80204f4:	4619      	mov	r1, r3
 80204f6:	f001 fe4b 	bl	8022190 <nk_utf_decode>
 80204fa:	61f8      	str	r0, [r7, #28]
    while ((text_len < total_len) && glyph_len)
 80204fc:	69ba      	ldr	r2, [r7, #24]
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	429a      	cmp	r2, r3
 8020502:	da05      	bge.n	8020510 <nk_textedit_text+0x198>
 8020504:	69fb      	ldr	r3, [r7, #28]
 8020506:	2b00      	cmp	r3, #0
 8020508:	f47f af69 	bne.w	80203de <nk_textedit_text+0x66>
 802050c:	e000      	b.n	8020510 <nk_textedit_text+0x198>
    if (!text || !total_len || state->mode == NK_TEXT_EDIT_MODE_VIEW) return;
 802050e:	bf00      	nop
    }
}
 8020510:	3720      	adds	r7, #32
 8020512:	46bd      	mov	sp, r7
 8020514:	bd80      	pop	{r7, pc}
 8020516:	bf00      	nop
 8020518:	0802930c 	.word	0x0802930c
 802051c:	0802ab80 	.word	0x0802ab80
 8020520:	08029314 	.word	0x08029314
 8020524:	08029338 	.word	0x08029338

08020528 <nk_textedit_key>:
NK_LIB void
nk_textedit_key(struct nk_text_edit *state, enum nk_keys key, int shift_mod,
    const struct nk_user_font *font, float row_height)
{
 8020528:	b590      	push	{r4, r7, lr}
 802052a:	b0c5      	sub	sp, #276	; 0x114
 802052c:	af02      	add	r7, sp, #8
 802052e:	6178      	str	r0, [r7, #20]
 8020530:	60fa      	str	r2, [r7, #12]
 8020532:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020536:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 802053a:	6013      	str	r3, [r2, #0]
 802053c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020544:	ed83 0a00 	vstr	s0, [r3]
 8020548:	460b      	mov	r3, r1
 802054a:	74fb      	strb	r3, [r7, #19]
retry:
    switch (key)
 802054c:	7cfb      	ldrb	r3, [r7, #19]
 802054e:	3b03      	subs	r3, #3
 8020550:	2b16      	cmp	r3, #22
 8020552:	f200 842d 	bhi.w	8020db0 <nk_textedit_key+0x888>
 8020556:	a201      	add	r2, pc, #4	; (adr r2, 802055c <nk_textedit_key+0x34>)
 8020558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802055c:	08020a9d 	.word	0x08020a9d
 8020560:	08020db1 	.word	0x08020db1
 8020564:	08020db1 	.word	0x08020db1
 8020568:	08020ae9 	.word	0x08020ae9
 802056c:	08020db1 	.word	0x08020db1
 8020570:	08020db1 	.word	0x08020db1
 8020574:	08020db1 	.word	0x08020db1
 8020578:	0802092d 	.word	0x0802092d
 802057c:	080207b1 	.word	0x080207b1
 8020580:	08020637 	.word	0x08020637
 8020584:	0802069d 	.word	0x0802069d
 8020588:	080205eb 	.word	0x080205eb
 802058c:	08020601 	.word	0x08020601
 8020590:	08020617 	.word	0x08020617
 8020594:	08020bc5 	.word	0x08020bc5
 8020598:	08020cab 	.word	0x08020cab
 802059c:	08020b3b 	.word	0x08020b3b
 80205a0:	08020b7f 	.word	0x08020b7f
 80205a4:	080205b9 	.word	0x080205b9
 80205a8:	080205cb 	.word	0x080205cb
 80205ac:	080205db 	.word	0x080205db
 80205b0:	080206f9 	.word	0x080206f9
 80205b4:	08020755 	.word	0x08020755
    case NK_KEY_CUT:
    case NK_KEY_PASTE:
    case NK_KEY_MAX:
    default: break;
    case NK_KEY_TEXT_UNDO:
         nk_textedit_undo(state);
 80205b8:	6978      	ldr	r0, [r7, #20]
 80205ba:	f000 fe14 	bl	80211e6 <nk_textedit_undo>
         state->has_preferred_x = 0;
 80205be:	697b      	ldr	r3, [r7, #20]
 80205c0:	2200      	movs	r2, #0
 80205c2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 80205c6:	f000 bc04 	b.w	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_REDO:
        nk_textedit_redo(state);
 80205ca:	6978      	ldr	r0, [r7, #20]
 80205cc:	f000 ff21 	bl	8021412 <nk_textedit_redo>
        state->has_preferred_x = 0;
 80205d0:	697b      	ldr	r3, [r7, #20]
 80205d2:	2200      	movs	r2, #0
 80205d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        break;
 80205d8:	e3fb      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_SELECT_ALL:
        nk_textedit_select_all(state);
 80205da:	6978      	ldr	r0, [r7, #20]
 80205dc:	f001 f8c0 	bl	8021760 <nk_textedit_select_all>
        state->has_preferred_x = 0;
 80205e0:	697b      	ldr	r3, [r7, #20]
 80205e2:	2200      	movs	r2, #0
 80205e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        break;
 80205e8:	e3f3      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_INSERT_MODE:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 80205ea:	697b      	ldr	r3, [r7, #20]
 80205ec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	f040 83df 	bne.w	8020db4 <nk_textedit_key+0x88c>
            state->mode = NK_TEXT_EDIT_MODE_INSERT;
 80205f6:	697b      	ldr	r3, [r7, #20]
 80205f8:	2201      	movs	r2, #1
 80205fa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        break;
 80205fe:	e3d9      	b.n	8020db4 <nk_textedit_key+0x88c>
    case NK_KEY_TEXT_REPLACE_MODE:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020600:	697b      	ldr	r3, [r7, #20]
 8020602:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020606:	2b00      	cmp	r3, #0
 8020608:	f040 83d6 	bne.w	8020db8 <nk_textedit_key+0x890>
            state->mode = NK_TEXT_EDIT_MODE_REPLACE;
 802060c:	697b      	ldr	r3, [r7, #20]
 802060e:	2202      	movs	r2, #2
 8020610:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        break;
 8020614:	e3d0      	b.n	8020db8 <nk_textedit_key+0x890>
    case NK_KEY_TEXT_RESET_MODE:
        if (state->mode == NK_TEXT_EDIT_MODE_INSERT ||
 8020616:	697b      	ldr	r3, [r7, #20]
 8020618:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 802061c:	2b01      	cmp	r3, #1
 802061e:	d005      	beq.n	802062c <nk_textedit_key+0x104>
            state->mode == NK_TEXT_EDIT_MODE_REPLACE)
 8020620:	697b      	ldr	r3, [r7, #20]
 8020622:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
        if (state->mode == NK_TEXT_EDIT_MODE_INSERT ||
 8020626:	2b02      	cmp	r3, #2
 8020628:	f040 83c8 	bne.w	8020dbc <nk_textedit_key+0x894>
            state->mode = NK_TEXT_EDIT_MODE_VIEW;
 802062c:	697b      	ldr	r3, [r7, #20]
 802062e:	2200      	movs	r2, #0
 8020630:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        break;
 8020634:	e3c2      	b.n	8020dbc <nk_textedit_key+0x894>

    case NK_KEY_LEFT:
        if (shift_mod) {
 8020636:	68fb      	ldr	r3, [r7, #12]
 8020638:	2b00      	cmp	r3, #0
 802063a:	d017      	beq.n	802066c <nk_textedit_key+0x144>
            nk_textedit_clamp(state);
 802063c:	6978      	ldr	r0, [r7, #20]
 802063e:	f7ff fced 	bl	802001c <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8020642:	6978      	ldr	r0, [r7, #20]
 8020644:	f7ff fe5c 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            /* move selection left */
            if (state->select_end > 0)
 8020648:	697b      	ldr	r3, [r7, #20]
 802064a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802064c:	2b00      	cmp	r3, #0
 802064e:	dd04      	ble.n	802065a <nk_textedit_key+0x132>
                --state->select_end;
 8020650:	697b      	ldr	r3, [r7, #20]
 8020652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020654:	1e5a      	subs	r2, r3, #1
 8020656:	697b      	ldr	r3, [r7, #20]
 8020658:	661a      	str	r2, [r3, #96]	; 0x60
            state->cursor = state->select_end;
 802065a:	697b      	ldr	r3, [r7, #20]
 802065c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 802065e:	697b      	ldr	r3, [r7, #20]
 8020660:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020662:	697b      	ldr	r3, [r7, #20]
 8020664:	2200      	movs	r2, #0
 8020666:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            if (NK_TEXT_HAS_SELECTION(state))
                nk_textedit_move_to_first(state);
            else if (state->cursor > 0)
               --state->cursor;
            state->has_preferred_x = 0;
        } break;
 802066a:	e3b2      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 802066c:	697b      	ldr	r3, [r7, #20]
 802066e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020670:	697b      	ldr	r3, [r7, #20]
 8020672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020674:	429a      	cmp	r2, r3
 8020676:	d003      	beq.n	8020680 <nk_textedit_key+0x158>
                nk_textedit_move_to_first(state);
 8020678:	6978      	ldr	r0, [r7, #20]
 802067a:	f7ff fd7a 	bl	8020172 <nk_textedit_move_to_first>
 802067e:	e008      	b.n	8020692 <nk_textedit_key+0x16a>
            else if (state->cursor > 0)
 8020680:	697b      	ldr	r3, [r7, #20]
 8020682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020684:	2b00      	cmp	r3, #0
 8020686:	dd04      	ble.n	8020692 <nk_textedit_key+0x16a>
               --state->cursor;
 8020688:	697b      	ldr	r3, [r7, #20]
 802068a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802068c:	1e5a      	subs	r2, r3, #1
 802068e:	697b      	ldr	r3, [r7, #20]
 8020690:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020692:	697b      	ldr	r3, [r7, #20]
 8020694:	2200      	movs	r2, #0
 8020696:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        } break;
 802069a:	e39a      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_RIGHT:
        if (shift_mod) {
 802069c:	68fb      	ldr	r3, [r7, #12]
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d013      	beq.n	80206ca <nk_textedit_key+0x1a2>
            nk_textedit_prep_selection_at_cursor(state);
 80206a2:	6978      	ldr	r0, [r7, #20]
 80206a4:	f7ff fe2c 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            /* move selection right */
            ++state->select_end;
 80206a8:	697b      	ldr	r3, [r7, #20]
 80206aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80206ac:	1c5a      	adds	r2, r3, #1
 80206ae:	697b      	ldr	r3, [r7, #20]
 80206b0:	661a      	str	r2, [r3, #96]	; 0x60
            nk_textedit_clamp(state);
 80206b2:	6978      	ldr	r0, [r7, #20]
 80206b4:	f7ff fcb2 	bl	802001c <nk_textedit_clamp>
            state->cursor = state->select_end;
 80206b8:	697b      	ldr	r3, [r7, #20]
 80206ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80206bc:	697b      	ldr	r3, [r7, #20]
 80206be:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 80206c0:	697b      	ldr	r3, [r7, #20]
 80206c2:	2200      	movs	r2, #0
 80206c4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            if (NK_TEXT_HAS_SELECTION(state))
                nk_textedit_move_to_last(state);
            else ++state->cursor;
            nk_textedit_clamp(state);
            state->has_preferred_x = 0;
        } break;
 80206c8:	e383      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 80206ca:	697b      	ldr	r3, [r7, #20]
 80206cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80206ce:	697b      	ldr	r3, [r7, #20]
 80206d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80206d2:	429a      	cmp	r2, r3
 80206d4:	d003      	beq.n	80206de <nk_textedit_key+0x1b6>
                nk_textedit_move_to_last(state);
 80206d6:	6978      	ldr	r0, [r7, #20]
 80206d8:	f7ff fd68 	bl	80201ac <nk_textedit_move_to_last>
 80206dc:	e004      	b.n	80206e8 <nk_textedit_key+0x1c0>
            else ++state->cursor;
 80206de:	697b      	ldr	r3, [r7, #20]
 80206e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80206e2:	1c5a      	adds	r2, r3, #1
 80206e4:	697b      	ldr	r3, [r7, #20]
 80206e6:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_clamp(state);
 80206e8:	6978      	ldr	r0, [r7, #20]
 80206ea:	f7ff fc97 	bl	802001c <nk_textedit_clamp>
            state->has_preferred_x = 0;
 80206ee:	697b      	ldr	r3, [r7, #20]
 80206f0:	2200      	movs	r2, #0
 80206f2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        } break;
 80206f6:	e36c      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_WORD_LEFT:
        if (shift_mod) {
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d016      	beq.n	802072c <nk_textedit_key+0x204>
            if( !NK_TEXT_HAS_SELECTION( state ) )
 80206fe:	697b      	ldr	r3, [r7, #20]
 8020700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020702:	697b      	ldr	r3, [r7, #20]
 8020704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020706:	429a      	cmp	r2, r3
 8020708:	d102      	bne.n	8020710 <nk_textedit_key+0x1e8>
            nk_textedit_prep_selection_at_cursor(state);
 802070a:	6978      	ldr	r0, [r7, #20]
 802070c:	f7ff fdf8 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            state->cursor = nk_textedit_move_to_word_previous(state);
 8020710:	6978      	ldr	r0, [r7, #20]
 8020712:	f7ff fdb0 	bl	8020276 <nk_textedit_move_to_word_previous>
 8020716:	4602      	mov	r2, r0
 8020718:	697b      	ldr	r3, [r7, #20]
 802071a:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_end = state->cursor;
 802071c:	697b      	ldr	r3, [r7, #20]
 802071e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020720:	697b      	ldr	r3, [r7, #20]
 8020722:	661a      	str	r2, [r3, #96]	; 0x60
            nk_textedit_clamp(state );
 8020724:	6978      	ldr	r0, [r7, #20]
 8020726:	f7ff fc79 	bl	802001c <nk_textedit_clamp>
                nk_textedit_move_to_first(state);
            else {
                state->cursor = nk_textedit_move_to_word_previous(state);
                nk_textedit_clamp(state );
            }
        } break;
 802072a:	e352      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 802072c:	697b      	ldr	r3, [r7, #20]
 802072e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020730:	697b      	ldr	r3, [r7, #20]
 8020732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020734:	429a      	cmp	r2, r3
 8020736:	d003      	beq.n	8020740 <nk_textedit_key+0x218>
                nk_textedit_move_to_first(state);
 8020738:	6978      	ldr	r0, [r7, #20]
 802073a:	f7ff fd1a 	bl	8020172 <nk_textedit_move_to_first>
        } break;
 802073e:	e348      	b.n	8020dd2 <nk_textedit_key+0x8aa>
                state->cursor = nk_textedit_move_to_word_previous(state);
 8020740:	6978      	ldr	r0, [r7, #20]
 8020742:	f7ff fd98 	bl	8020276 <nk_textedit_move_to_word_previous>
 8020746:	4602      	mov	r2, r0
 8020748:	697b      	ldr	r3, [r7, #20]
 802074a:	659a      	str	r2, [r3, #88]	; 0x58
                nk_textedit_clamp(state );
 802074c:	6978      	ldr	r0, [r7, #20]
 802074e:	f7ff fc65 	bl	802001c <nk_textedit_clamp>
        } break;
 8020752:	e33e      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_WORD_RIGHT:
        if (shift_mod) {
 8020754:	68fb      	ldr	r3, [r7, #12]
 8020756:	2b00      	cmp	r3, #0
 8020758:	d016      	beq.n	8020788 <nk_textedit_key+0x260>
            if( !NK_TEXT_HAS_SELECTION( state ) )
 802075a:	697b      	ldr	r3, [r7, #20]
 802075c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802075e:	697b      	ldr	r3, [r7, #20]
 8020760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020762:	429a      	cmp	r2, r3
 8020764:	d102      	bne.n	802076c <nk_textedit_key+0x244>
                nk_textedit_prep_selection_at_cursor(state);
 8020766:	6978      	ldr	r0, [r7, #20]
 8020768:	f7ff fdca 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            state->cursor = nk_textedit_move_to_word_next(state);
 802076c:	6978      	ldr	r0, [r7, #20]
 802076e:	f7ff fda2 	bl	80202b6 <nk_textedit_move_to_word_next>
 8020772:	4602      	mov	r2, r0
 8020774:	697b      	ldr	r3, [r7, #20]
 8020776:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_end = state->cursor;
 8020778:	697b      	ldr	r3, [r7, #20]
 802077a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802077c:	697b      	ldr	r3, [r7, #20]
 802077e:	661a      	str	r2, [r3, #96]	; 0x60
            nk_textedit_clamp(state);
 8020780:	6978      	ldr	r0, [r7, #20]
 8020782:	f7ff fc4b 	bl	802001c <nk_textedit_clamp>
                nk_textedit_move_to_last(state);
            else {
                state->cursor = nk_textedit_move_to_word_next(state);
                nk_textedit_clamp(state );
            }
        } break;
 8020786:	e324      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 8020788:	697b      	ldr	r3, [r7, #20]
 802078a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802078c:	697b      	ldr	r3, [r7, #20]
 802078e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020790:	429a      	cmp	r2, r3
 8020792:	d003      	beq.n	802079c <nk_textedit_key+0x274>
                nk_textedit_move_to_last(state);
 8020794:	6978      	ldr	r0, [r7, #20]
 8020796:	f7ff fd09 	bl	80201ac <nk_textedit_move_to_last>
        } break;
 802079a:	e31a      	b.n	8020dd2 <nk_textedit_key+0x8aa>
                state->cursor = nk_textedit_move_to_word_next(state);
 802079c:	6978      	ldr	r0, [r7, #20]
 802079e:	f7ff fd8a 	bl	80202b6 <nk_textedit_move_to_word_next>
 80207a2:	4602      	mov	r2, r0
 80207a4:	697b      	ldr	r3, [r7, #20]
 80207a6:	659a      	str	r2, [r3, #88]	; 0x58
                nk_textedit_clamp(state );
 80207a8:	6978      	ldr	r0, [r7, #20]
 80207aa:	f7ff fc37 	bl	802001c <nk_textedit_clamp>
        } break;
 80207ae:	e310      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_DOWN: {
        struct nk_text_find find;
        struct nk_text_edit_row row;
        int i, sel = shift_mod;
 80207b0:	68fb      	ldr	r3, [r7, #12]
 80207b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        if (state->single_line) {
 80207b6:	697b      	ldr	r3, [r7, #20]
 80207b8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d002      	beq.n	80207c6 <nk_textedit_key+0x29e>
            /* on windows, up&down in single-line behave like left&right */
            key = NK_KEY_RIGHT;
 80207c0:	230d      	movs	r3, #13
 80207c2:	74fb      	strb	r3, [r7, #19]
 80207c4:	e6c2      	b.n	802054c <nk_textedit_key+0x24>
            goto retry;
        }

        if (sel)
 80207c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d003      	beq.n	80207d6 <nk_textedit_key+0x2ae>
            nk_textedit_prep_selection_at_cursor(state);
 80207ce:	6978      	ldr	r0, [r7, #20]
 80207d0:	f7ff fd96 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
 80207d4:	e008      	b.n	80207e8 <nk_textedit_key+0x2c0>
        else if (NK_TEXT_HAS_SELECTION(state))
 80207d6:	697b      	ldr	r3, [r7, #20]
 80207d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80207da:	697b      	ldr	r3, [r7, #20]
 80207dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207de:	429a      	cmp	r2, r3
 80207e0:	d002      	beq.n	80207e8 <nk_textedit_key+0x2c0>
            nk_textedit_move_to_last(state);
 80207e2:	6978      	ldr	r0, [r7, #20]
 80207e4:	f7ff fce2 	bl	80201ac <nk_textedit_move_to_last>

        /* compute current position of cursor point */
        nk_textedit_clamp(state);
 80207e8:	6978      	ldr	r0, [r7, #20]
 80207ea:	f7ff fc17 	bl	802001c <nk_textedit_clamp>
        nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 80207ee:	697b      	ldr	r3, [r7, #20]
 80207f0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80207f2:	697b      	ldr	r3, [r7, #20]
 80207f4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80207f8:	461c      	mov	r4, r3
 80207fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80207fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020802:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8020806:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802080a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 802080e:	6812      	ldr	r2, [r2, #0]
 8020810:	9200      	str	r2, [sp, #0]
 8020812:	ed93 0a00 	vldr	s0, [r3]
 8020816:	4623      	mov	r3, r4
 8020818:	460a      	mov	r2, r1
 802081a:	6979      	ldr	r1, [r7, #20]
 802081c:	f7ff fb4a 	bl	801feb4 <nk_textedit_find_charpos>
            font, row_height);

        /* now find character position down a row */
        if (find.length)
 8020820:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8020824:	2b00      	cmp	r3, #0
 8020826:	f000 82cb 	beq.w	8020dc0 <nk_textedit_key+0x898>
        {
            float x;
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 802082a:	697b      	ldr	r3, [r7, #20]
 802082c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8020830:	2b00      	cmp	r3, #0
 8020832:	d002      	beq.n	802083a <nk_textedit_key+0x312>
 8020834:	697b      	ldr	r3, [r7, #20]
 8020836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020838:	e001      	b.n	802083e <nk_textedit_key+0x316>
 802083a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802083e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            int start = find.first_char + find.length;
 8020842:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8020846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802084a:	4413      	add	r3, r2
 802084c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            state->cursor = start;
 8020850:	697b      	ldr	r3, [r7, #20]
 8020852:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8020856:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_layout_row(&row, state, state->cursor, row_height, font);
 8020858:	697b      	ldr	r3, [r7, #20]
 802085a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 802085c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020860:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8020864:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020868:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 802086c:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8020870:	681b      	ldr	r3, [r3, #0]
 8020872:	ed92 0a00 	vldr	s0, [r2]
 8020876:	460a      	mov	r2, r1
 8020878:	6979      	ldr	r1, [r7, #20]
 802087a:	f7ff f999 	bl	801fbb0 <nk_textedit_layout_row>
            x = row.x0;
 802087e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8020882:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8020886:	2300      	movs	r3, #0
 8020888:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802088c:	e028      	b.n	80208e0 <nk_textedit_key+0x3b8>
                float dx = nk_textedit_get_width(state, start, i, font);
 802088e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020892:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8020896:	681b      	ldr	r3, [r3, #0]
 8020898:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 802089c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80208a0:	6978      	ldr	r0, [r7, #20]
 80208a2:	f7ff f95a 	bl	801fb5a <nk_textedit_get_width>
 80208a6:	ed87 0a3a 	vstr	s0, [r7, #232]	; 0xe8
                x += dx;
 80208aa:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80208ae:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 80208b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80208b6:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
                if (x > goal_x)
 80208ba:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80208be:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80208c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80208c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208ca:	dc19      	bgt.n	8020900 <nk_textedit_key+0x3d8>
                    break;
                ++state->cursor;
 80208cc:	697b      	ldr	r3, [r7, #20]
 80208ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80208d0:	1c5a      	adds	r2, r3, #1
 80208d2:	697b      	ldr	r3, [r7, #20]
 80208d4:	659a      	str	r2, [r3, #88]	; 0x58
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 80208d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80208da:	3301      	adds	r3, #1
 80208dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80208e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80208e4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80208e8:	429a      	cmp	r2, r3
 80208ea:	da0a      	bge.n	8020902 <nk_textedit_key+0x3da>
 80208ec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80208f0:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80208f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80208f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208fc:	d4c7      	bmi.n	802088e <nk_textedit_key+0x366>
 80208fe:	e000      	b.n	8020902 <nk_textedit_key+0x3da>
                    break;
 8020900:	bf00      	nop
            }
            nk_textedit_clamp(state);
 8020902:	6978      	ldr	r0, [r7, #20]
 8020904:	f7ff fb8a 	bl	802001c <nk_textedit_clamp>

            state->has_preferred_x = 1;
 8020908:	697b      	ldr	r3, [r7, #20]
 802090a:	2201      	movs	r2, #1
 802090c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->preferred_x = goal_x;
 8020910:	697b      	ldr	r3, [r7, #20]
 8020912:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8020916:	66da      	str	r2, [r3, #108]	; 0x6c
            if (sel)
 8020918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802091c:	2b00      	cmp	r3, #0
 802091e:	f000 824f 	beq.w	8020dc0 <nk_textedit_key+0x898>
                state->select_end = state->cursor;
 8020922:	697b      	ldr	r3, [r7, #20]
 8020924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020926:	697b      	ldr	r3, [r7, #20]
 8020928:	661a      	str	r2, [r3, #96]	; 0x60
        }
    } break;
 802092a:	e249      	b.n	8020dc0 <nk_textedit_key+0x898>

    case NK_KEY_UP: {
        struct nk_text_find find;
        struct nk_text_edit_row row;
        int i, sel = shift_mod;
 802092c:	68fb      	ldr	r3, [r7, #12]
 802092e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

        if (state->single_line) {
 8020932:	697b      	ldr	r3, [r7, #20]
 8020934:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020938:	2b00      	cmp	r3, #0
 802093a:	d002      	beq.n	8020942 <nk_textedit_key+0x41a>
            /* on windows, up&down become left&right */
            key = NK_KEY_LEFT;
 802093c:	230c      	movs	r3, #12
 802093e:	74fb      	strb	r3, [r7, #19]
 8020940:	e604      	b.n	802054c <nk_textedit_key+0x24>
            goto retry;
        }

        if (sel)
 8020942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020946:	2b00      	cmp	r3, #0
 8020948:	d003      	beq.n	8020952 <nk_textedit_key+0x42a>
            nk_textedit_prep_selection_at_cursor(state);
 802094a:	6978      	ldr	r0, [r7, #20]
 802094c:	f7ff fcd8 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
 8020950:	e008      	b.n	8020964 <nk_textedit_key+0x43c>
        else if (NK_TEXT_HAS_SELECTION(state))
 8020952:	697b      	ldr	r3, [r7, #20]
 8020954:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020956:	697b      	ldr	r3, [r7, #20]
 8020958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802095a:	429a      	cmp	r2, r3
 802095c:	d002      	beq.n	8020964 <nk_textedit_key+0x43c>
            nk_textedit_move_to_first(state);
 802095e:	6978      	ldr	r0, [r7, #20]
 8020960:	f7ff fc07 	bl	8020172 <nk_textedit_move_to_first>

         /* compute current position of cursor point */
         nk_textedit_clamp(state);
 8020964:	6978      	ldr	r0, [r7, #20]
 8020966:	f7ff fb59 	bl	802001c <nk_textedit_clamp>
         nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 802096a:	697b      	ldr	r3, [r7, #20]
 802096c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 802096e:	697b      	ldr	r3, [r7, #20]
 8020970:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020974:	461c      	mov	r4, r3
 8020976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 802097e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8020982:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020986:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 802098a:	6812      	ldr	r2, [r2, #0]
 802098c:	9200      	str	r2, [sp, #0]
 802098e:	ed93 0a00 	vldr	s0, [r3]
 8020992:	4623      	mov	r3, r4
 8020994:	460a      	mov	r2, r1
 8020996:	6979      	ldr	r1, [r7, #20]
 8020998:	f7ff fa8c 	bl	801feb4 <nk_textedit_find_charpos>
                font, row_height);

         /* can only go up if there's a previous row */
         if (find.prev_first != find.first_char) {
 802099c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80209a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80209a4:	429a      	cmp	r2, r3
 80209a6:	f000 820d 	beq.w	8020dc4 <nk_textedit_key+0x89c>
            /* now find character position up a row */
            float x;
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 80209aa:	697b      	ldr	r3, [r7, #20]
 80209ac:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	d002      	beq.n	80209ba <nk_textedit_key+0x492>
 80209b4:	697b      	ldr	r3, [r7, #20]
 80209b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80209b8:	e001      	b.n	80209be <nk_textedit_key+0x496>
 80209ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80209be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

            state->cursor = find.prev_first;
 80209c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80209c6:	697b      	ldr	r3, [r7, #20]
 80209c8:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_layout_row(&row, state, state->cursor, row_height, font);
 80209ca:	697b      	ldr	r3, [r7, #20]
 80209cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80209ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80209d2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80209d6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80209da:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80209de:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	ed92 0a00 	vldr	s0, [r2]
 80209e8:	460a      	mov	r2, r1
 80209ea:	6979      	ldr	r1, [r7, #20]
 80209ec:	f7ff f8e0 	bl	801fbb0 <nk_textedit_layout_row>
            x = row.x0;
 80209f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80209f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 80209f6:	2300      	movs	r3, #0
 80209f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80209fc:	e028      	b.n	8020a50 <nk_textedit_key+0x528>
                float dx = nk_textedit_get_width(state, find.prev_first, i, font);
 80209fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8020a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020a06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8020a0a:	681b      	ldr	r3, [r3, #0]
 8020a0c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020a10:	6978      	ldr	r0, [r7, #20]
 8020a12:	f7ff f8a2 	bl	801fb5a <nk_textedit_get_width>
 8020a16:	ed87 0a37 	vstr	s0, [r7, #220]	; 0xdc
                x += dx;
 8020a1a:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8020a1e:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8020a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a26:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
                if (x > goal_x)
 8020a2a:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8020a2e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8020a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a3a:	dc19      	bgt.n	8020a70 <nk_textedit_key+0x548>
                    break;
                ++state->cursor;
 8020a3c:	697b      	ldr	r3, [r7, #20]
 8020a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020a40:	1c5a      	adds	r2, r3, #1
 8020a42:	697b      	ldr	r3, [r7, #20]
 8020a44:	659a      	str	r2, [r3, #88]	; 0x58
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8020a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8020a4a:	3301      	adds	r3, #1
 8020a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8020a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020a54:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020a58:	429a      	cmp	r2, r3
 8020a5a:	da0a      	bge.n	8020a72 <nk_textedit_key+0x54a>
 8020a5c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8020a60:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8020a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a6c:	d4c7      	bmi.n	80209fe <nk_textedit_key+0x4d6>
 8020a6e:	e000      	b.n	8020a72 <nk_textedit_key+0x54a>
                    break;
 8020a70:	bf00      	nop
            }
            nk_textedit_clamp(state);
 8020a72:	6978      	ldr	r0, [r7, #20]
 8020a74:	f7ff fad2 	bl	802001c <nk_textedit_clamp>

            state->has_preferred_x = 1;
 8020a78:	697b      	ldr	r3, [r7, #20]
 8020a7a:	2201      	movs	r2, #1
 8020a7c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->preferred_x = goal_x;
 8020a80:	697b      	ldr	r3, [r7, #20]
 8020a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8020a86:	66da      	str	r2, [r3, #108]	; 0x6c
            if (sel) state->select_end = state->cursor;
 8020a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	f000 8199 	beq.w	8020dc4 <nk_textedit_key+0x89c>
 8020a92:	697b      	ldr	r3, [r7, #20]
 8020a94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020a96:	697b      	ldr	r3, [r7, #20]
 8020a98:	661a      	str	r2, [r3, #96]	; 0x60
         }
      } break;
 8020a9a:	e193      	b.n	8020dc4 <nk_textedit_key+0x89c>

    case NK_KEY_DEL:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020a9c:	697b      	ldr	r3, [r7, #20]
 8020a9e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	f000 8190 	beq.w	8020dc8 <nk_textedit_key+0x8a0>
            break;
        if (NK_TEXT_HAS_SELECTION(state))
 8020aa8:	697b      	ldr	r3, [r7, #20]
 8020aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020aac:	697b      	ldr	r3, [r7, #20]
 8020aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020ab0:	429a      	cmp	r2, r3
 8020ab2:	d003      	beq.n	8020abc <nk_textedit_key+0x594>
            nk_textedit_delete_selection(state);
 8020ab4:	6978      	ldr	r0, [r7, #20]
 8020ab6:	f7ff fb00 	bl	80200ba <nk_textedit_delete_selection>
 8020aba:	e010      	b.n	8020ade <nk_textedit_key+0x5b6>
        else {
            int n = state->string.len;
 8020abc:	697b      	ldr	r3, [r7, #20]
 8020abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if (state->cursor < n)
 8020ac4:	697b      	ldr	r3, [r7, #20]
 8020ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020ac8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8020acc:	429a      	cmp	r2, r3
 8020ace:	dd06      	ble.n	8020ade <nk_textedit_key+0x5b6>
                nk_textedit_delete(state, state->cursor, 1);
 8020ad0:	697b      	ldr	r3, [r7, #20]
 8020ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020ad4:	2201      	movs	r2, #1
 8020ad6:	4619      	mov	r1, r3
 8020ad8:	6978      	ldr	r0, [r7, #20]
 8020ada:	f7ff fad4 	bl	8020086 <nk_textedit_delete>
         }
         state->has_preferred_x = 0;
 8020ade:	697b      	ldr	r3, [r7, #20]
 8020ae0:	2200      	movs	r2, #0
 8020ae2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020ae6:	e174      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_BACKSPACE:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020ae8:	697b      	ldr	r3, [r7, #20]
 8020aea:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	f000 816c 	beq.w	8020dcc <nk_textedit_key+0x8a4>
            break;
        if (NK_TEXT_HAS_SELECTION(state))
 8020af4:	697b      	ldr	r3, [r7, #20]
 8020af6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020af8:	697b      	ldr	r3, [r7, #20]
 8020afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020afc:	429a      	cmp	r2, r3
 8020afe:	d003      	beq.n	8020b08 <nk_textedit_key+0x5e0>
            nk_textedit_delete_selection(state);
 8020b00:	6978      	ldr	r0, [r7, #20]
 8020b02:	f7ff fada 	bl	80200ba <nk_textedit_delete_selection>
 8020b06:	e013      	b.n	8020b30 <nk_textedit_key+0x608>
        else {
            nk_textedit_clamp(state);
 8020b08:	6978      	ldr	r0, [r7, #20]
 8020b0a:	f7ff fa87 	bl	802001c <nk_textedit_clamp>
            if (state->cursor > 0) {
 8020b0e:	697b      	ldr	r3, [r7, #20]
 8020b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	dd0c      	ble.n	8020b30 <nk_textedit_key+0x608>
                nk_textedit_delete(state, state->cursor-1, 1);
 8020b16:	697b      	ldr	r3, [r7, #20]
 8020b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020b1a:	3b01      	subs	r3, #1
 8020b1c:	2201      	movs	r2, #1
 8020b1e:	4619      	mov	r1, r3
 8020b20:	6978      	ldr	r0, [r7, #20]
 8020b22:	f7ff fab0 	bl	8020086 <nk_textedit_delete>
                --state->cursor;
 8020b26:	697b      	ldr	r3, [r7, #20]
 8020b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020b2a:	1e5a      	subs	r2, r3, #1
 8020b2c:	697b      	ldr	r3, [r7, #20]
 8020b2e:	659a      	str	r2, [r3, #88]	; 0x58
            }
         }
         state->has_preferred_x = 0;
 8020b30:	697b      	ldr	r3, [r7, #20]
 8020b32:	2200      	movs	r2, #0
 8020b34:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020b38:	e14b      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_START:
         if (shift_mod) {
 8020b3a:	68fb      	ldr	r3, [r7, #12]
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d00e      	beq.n	8020b5e <nk_textedit_key+0x636>
            nk_textedit_prep_selection_at_cursor(state);
 8020b40:	6978      	ldr	r0, [r7, #20]
 8020b42:	f7ff fbdd 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            state->cursor = state->select_end = 0;
 8020b46:	697b      	ldr	r3, [r7, #20]
 8020b48:	2200      	movs	r2, #0
 8020b4a:	661a      	str	r2, [r3, #96]	; 0x60
 8020b4c:	697b      	ldr	r3, [r7, #20]
 8020b4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020b50:	697b      	ldr	r3, [r7, #20]
 8020b52:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020b54:	697b      	ldr	r3, [r7, #20]
 8020b56:	2200      	movs	r2, #0
 8020b58:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         } else {
            state->cursor = state->select_start = state->select_end = 0;
            state->has_preferred_x = 0;
         }
         break;
 8020b5c:	e139      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            state->cursor = state->select_start = state->select_end = 0;
 8020b5e:	697b      	ldr	r3, [r7, #20]
 8020b60:	2200      	movs	r2, #0
 8020b62:	661a      	str	r2, [r3, #96]	; 0x60
 8020b64:	697b      	ldr	r3, [r7, #20]
 8020b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020b68:	697b      	ldr	r3, [r7, #20]
 8020b6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8020b6c:	697b      	ldr	r3, [r7, #20]
 8020b6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020b70:	697b      	ldr	r3, [r7, #20]
 8020b72:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020b74:	697b      	ldr	r3, [r7, #20]
 8020b76:	2200      	movs	r2, #0
 8020b78:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020b7c:	e129      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_END:
         if (shift_mod) {
 8020b7e:	68fb      	ldr	r3, [r7, #12]
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	d00f      	beq.n	8020ba4 <nk_textedit_key+0x67c>
            nk_textedit_prep_selection_at_cursor(state);
 8020b84:	6978      	ldr	r0, [r7, #20]
 8020b86:	f7ff fbbb 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            state->cursor = state->select_end = state->string.len;
 8020b8a:	697b      	ldr	r3, [r7, #20]
 8020b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020b8e:	697b      	ldr	r3, [r7, #20]
 8020b90:	661a      	str	r2, [r3, #96]	; 0x60
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020b9a:	697b      	ldr	r3, [r7, #20]
 8020b9c:	2200      	movs	r2, #0
 8020b9e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         } else {
            state->cursor = state->string.len;
            state->select_start = state->select_end = 0;
            state->has_preferred_x = 0;
         }
         break;
 8020ba2:	e116      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            state->cursor = state->string.len;
 8020ba4:	697b      	ldr	r3, [r7, #20]
 8020ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020ba8:	697b      	ldr	r3, [r7, #20]
 8020baa:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_start = state->select_end = 0;
 8020bac:	697b      	ldr	r3, [r7, #20]
 8020bae:	2200      	movs	r2, #0
 8020bb0:	661a      	str	r2, [r3, #96]	; 0x60
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	65da      	str	r2, [r3, #92]	; 0x5c
            state->has_preferred_x = 0;
 8020bba:	697b      	ldr	r3, [r7, #20]
 8020bbc:	2200      	movs	r2, #0
 8020bbe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020bc2:	e106      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_LINE_START: {
        if (shift_mod) {
 8020bc4:	68fb      	ldr	r3, [r7, #12]
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	d039      	beq.n	8020c3e <nk_textedit_key+0x716>
            struct nk_text_find find;
           nk_textedit_clamp(state);
 8020bca:	6978      	ldr	r0, [r7, #20]
 8020bcc:	f7ff fa26 	bl	802001c <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8020bd0:	6978      	ldr	r0, [r7, #20]
 8020bd2:	f7ff fb95 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            if (state->string.len && state->cursor == state->string.len)
 8020bd6:	697b      	ldr	r3, [r7, #20]
 8020bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d00a      	beq.n	8020bf4 <nk_textedit_key+0x6cc>
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020be6:	429a      	cmp	r2, r3
 8020be8:	d104      	bne.n	8020bf4 <nk_textedit_key+0x6cc>
                --state->cursor;
 8020bea:	697b      	ldr	r3, [r7, #20]
 8020bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020bee:	1e5a      	subs	r2, r3, #1
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_find_charpos(&find, state,state->cursor, state->single_line,
 8020bf4:	697b      	ldr	r3, [r7, #20]
 8020bf6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020bf8:	697b      	ldr	r3, [r7, #20]
 8020bfa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020bfe:	461c      	mov	r4, r3
 8020c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020c08:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8020c0c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020c10:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020c14:	6812      	ldr	r2, [r2, #0]
 8020c16:	9200      	str	r2, [sp, #0]
 8020c18:	ed93 0a00 	vldr	s0, [r3]
 8020c1c:	4623      	mov	r3, r4
 8020c1e:	460a      	mov	r2, r1
 8020c20:	6979      	ldr	r1, [r7, #20]
 8020c22:	f7ff f947 	bl	801feb4 <nk_textedit_find_charpos>
                font, row_height);
            state->cursor = state->select_end = find.first_char;
 8020c26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8020c28:	697b      	ldr	r3, [r7, #20]
 8020c2a:	661a      	str	r2, [r3, #96]	; 0x60
 8020c2c:	697b      	ldr	r3, [r7, #20]
 8020c2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020c30:	697b      	ldr	r3, [r7, #20]
 8020c32:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020c34:	697b      	ldr	r3, [r7, #20]
 8020c36:	2200      	movs	r2, #0
 8020c38:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
                font, row_height);
            state->cursor = find.first_char;
            state->has_preferred_x = 0;
        }
      } break;
 8020c3c:	e0c9      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            if (state->string.len && state->cursor == state->string.len)
 8020c3e:	697b      	ldr	r3, [r7, #20]
 8020c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020c42:	2b00      	cmp	r3, #0
 8020c44:	d00a      	beq.n	8020c5c <nk_textedit_key+0x734>
 8020c46:	697b      	ldr	r3, [r7, #20]
 8020c48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020c4a:	697b      	ldr	r3, [r7, #20]
 8020c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020c4e:	429a      	cmp	r2, r3
 8020c50:	d104      	bne.n	8020c5c <nk_textedit_key+0x734>
                --state->cursor;
 8020c52:	697b      	ldr	r3, [r7, #20]
 8020c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020c56:	1e5a      	subs	r2, r3, #1
 8020c58:	697b      	ldr	r3, [r7, #20]
 8020c5a:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_clamp(state);
 8020c5c:	6978      	ldr	r0, [r7, #20]
 8020c5e:	f7ff f9dd 	bl	802001c <nk_textedit_clamp>
            nk_textedit_move_to_first(state);
 8020c62:	6978      	ldr	r0, [r7, #20]
 8020c64:	f7ff fa85 	bl	8020172 <nk_textedit_move_to_first>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020c68:	697b      	ldr	r3, [r7, #20]
 8020c6a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020c6c:	697b      	ldr	r3, [r7, #20]
 8020c6e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020c72:	461c      	mov	r4, r3
 8020c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020c7c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8020c80:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020c84:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020c88:	6812      	ldr	r2, [r2, #0]
 8020c8a:	9200      	str	r2, [sp, #0]
 8020c8c:	ed93 0a00 	vldr	s0, [r3]
 8020c90:	4623      	mov	r3, r4
 8020c92:	460a      	mov	r2, r1
 8020c94:	6979      	ldr	r1, [r7, #20]
 8020c96:	f7ff f90d 	bl	801feb4 <nk_textedit_find_charpos>
            state->cursor = find.first_char;
 8020c9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020c9c:	697b      	ldr	r3, [r7, #20]
 8020c9e:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020ca0:	697b      	ldr	r3, [r7, #20]
 8020ca2:	2200      	movs	r2, #0
 8020ca4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      } break;
 8020ca8:	e093      	b.n	8020dd2 <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_LINE_END: {
        if (shift_mod) {
 8020caa:	68fb      	ldr	r3, [r7, #12]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d041      	beq.n	8020d34 <nk_textedit_key+0x80c>
            struct nk_text_find find;
            nk_textedit_clamp(state);
 8020cb0:	6978      	ldr	r0, [r7, #20]
 8020cb2:	f7ff f9b3 	bl	802001c <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8020cb6:	6978      	ldr	r0, [r7, #20]
 8020cb8:	f7ff fb22 	bl	8020300 <nk_textedit_prep_selection_at_cursor>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020cbc:	697b      	ldr	r3, [r7, #20]
 8020cbe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020cc0:	697b      	ldr	r3, [r7, #20]
 8020cc2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020cc6:	461c      	mov	r4, r3
 8020cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020cd0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8020cd4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020cd8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020cdc:	6812      	ldr	r2, [r2, #0]
 8020cde:	9200      	str	r2, [sp, #0]
 8020ce0:	ed93 0a00 	vldr	s0, [r3]
 8020ce4:	4623      	mov	r3, r4
 8020ce6:	460a      	mov	r2, r1
 8020ce8:	6979      	ldr	r1, [r7, #20]
 8020cea:	f7ff f8e3 	bl	801feb4 <nk_textedit_find_charpos>
                font, row_height);
            state->has_preferred_x = 0;
 8020cee:	697b      	ldr	r3, [r7, #20]
 8020cf0:	2200      	movs	r2, #0
 8020cf2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->cursor = find.first_char + find.length;
 8020cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020cfa:	441a      	add	r2, r3
 8020cfc:	697b      	ldr	r3, [r7, #20]
 8020cfe:	659a      	str	r2, [r3, #88]	; 0x58
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
 8020d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	dd11      	ble.n	8020d2a <nk_textedit_key+0x802>
 8020d06:	697b      	ldr	r3, [r7, #20]
 8020d08:	f103 020c 	add.w	r2, r3, #12
 8020d0c:	697b      	ldr	r3, [r7, #20]
 8020d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d10:	3b01      	subs	r3, #1
 8020d12:	4619      	mov	r1, r3
 8020d14:	4610      	mov	r0, r2
 8020d16:	f7fc f973 	bl	801d000 <nk_str_rune_at>
 8020d1a:	4603      	mov	r3, r0
 8020d1c:	2b0a      	cmp	r3, #10
 8020d1e:	d104      	bne.n	8020d2a <nk_textedit_key+0x802>
                --state->cursor;
 8020d20:	697b      	ldr	r3, [r7, #20]
 8020d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d24:	1e5a      	subs	r2, r3, #1
 8020d26:	697b      	ldr	r3, [r7, #20]
 8020d28:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_end = state->cursor;
 8020d2a:	697b      	ldr	r3, [r7, #20]
 8020d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020d2e:	697b      	ldr	r3, [r7, #20]
 8020d30:	661a      	str	r2, [r3, #96]	; 0x60

            state->has_preferred_x = 0;
            state->cursor = find.first_char + find.length;
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
                --state->cursor;
        }} break;
 8020d32:	e04d      	b.n	8020dd0 <nk_textedit_key+0x8a8>
            nk_textedit_clamp(state);
 8020d34:	6978      	ldr	r0, [r7, #20]
 8020d36:	f7ff f971 	bl	802001c <nk_textedit_clamp>
            nk_textedit_move_to_first(state);
 8020d3a:	6978      	ldr	r0, [r7, #20]
 8020d3c:	f7ff fa19 	bl	8020172 <nk_textedit_move_to_first>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020d40:	697b      	ldr	r3, [r7, #20]
 8020d42:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020d44:	697b      	ldr	r3, [r7, #20]
 8020d46:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020d4a:	461c      	mov	r4, r3
 8020d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020d54:	f107 0018 	add.w	r0, r7, #24
 8020d58:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020d5c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020d60:	6812      	ldr	r2, [r2, #0]
 8020d62:	9200      	str	r2, [sp, #0]
 8020d64:	ed93 0a00 	vldr	s0, [r3]
 8020d68:	4623      	mov	r3, r4
 8020d6a:	460a      	mov	r2, r1
 8020d6c:	6979      	ldr	r1, [r7, #20]
 8020d6e:	f7ff f8a1 	bl	801feb4 <nk_textedit_find_charpos>
            state->has_preferred_x = 0;
 8020d72:	697b      	ldr	r3, [r7, #20]
 8020d74:	2200      	movs	r2, #0
 8020d76:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->cursor = find.first_char + find.length;
 8020d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d7e:	441a      	add	r2, r3
 8020d80:	697b      	ldr	r3, [r7, #20]
 8020d82:	659a      	str	r2, [r3, #88]	; 0x58
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
 8020d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	dd22      	ble.n	8020dd0 <nk_textedit_key+0x8a8>
 8020d8a:	697b      	ldr	r3, [r7, #20]
 8020d8c:	f103 020c 	add.w	r2, r3, #12
 8020d90:	697b      	ldr	r3, [r7, #20]
 8020d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d94:	3b01      	subs	r3, #1
 8020d96:	4619      	mov	r1, r3
 8020d98:	4610      	mov	r0, r2
 8020d9a:	f7fc f931 	bl	801d000 <nk_str_rune_at>
 8020d9e:	4603      	mov	r3, r0
 8020da0:	2b0a      	cmp	r3, #10
 8020da2:	d115      	bne.n	8020dd0 <nk_textedit_key+0x8a8>
                --state->cursor;
 8020da4:	697b      	ldr	r3, [r7, #20]
 8020da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020da8:	1e5a      	subs	r2, r3, #1
 8020daa:	697b      	ldr	r3, [r7, #20]
 8020dac:	659a      	str	r2, [r3, #88]	; 0x58
        }} break;
 8020dae:	e00f      	b.n	8020dd0 <nk_textedit_key+0x8a8>
    default: break;
 8020db0:	bf00      	nop
 8020db2:	e00e      	b.n	8020dd2 <nk_textedit_key+0x8aa>
        break;
 8020db4:	bf00      	nop
 8020db6:	e00c      	b.n	8020dd2 <nk_textedit_key+0x8aa>
        break;
 8020db8:	bf00      	nop
 8020dba:	e00a      	b.n	8020dd2 <nk_textedit_key+0x8aa>
        break;
 8020dbc:	bf00      	nop
 8020dbe:	e008      	b.n	8020dd2 <nk_textedit_key+0x8aa>
    } break;
 8020dc0:	bf00      	nop
 8020dc2:	e006      	b.n	8020dd2 <nk_textedit_key+0x8aa>
      } break;
 8020dc4:	bf00      	nop
 8020dc6:	e004      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            break;
 8020dc8:	bf00      	nop
 8020dca:	e002      	b.n	8020dd2 <nk_textedit_key+0x8aa>
            break;
 8020dcc:	bf00      	nop
 8020dce:	e000      	b.n	8020dd2 <nk_textedit_key+0x8aa>
        }} break;
 8020dd0:	bf00      	nop
    }
}
 8020dd2:	bf00      	nop
 8020dd4:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8020dd8:	46bd      	mov	sp, r7
 8020dda:	bd90      	pop	{r4, r7, pc}

08020ddc <nk_textedit_flush_redo>:
NK_INTERN void
nk_textedit_flush_redo(struct nk_text_undo_state *state)
{
 8020ddc:	b480      	push	{r7}
 8020dde:	b083      	sub	sp, #12
 8020de0:	af00      	add	r7, sp, #0
 8020de2:	6078      	str	r0, [r7, #4]
    state->redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020dea:	2263      	movs	r2, #99	; 0x63
 8020dec:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
    state->redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8020dfa:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
}
 8020dfe:	bf00      	nop
 8020e00:	370c      	adds	r7, #12
 8020e02:	46bd      	mov	sp, r7
 8020e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e08:	4770      	bx	lr

08020e0a <nk_textedit_discard_undo>:
NK_INTERN void
nk_textedit_discard_undo(struct nk_text_undo_state *state)
{
 8020e0a:	b580      	push	{r7, lr}
 8020e0c:	b084      	sub	sp, #16
 8020e0e:	af00      	add	r7, sp, #0
 8020e10:	6078      	str	r0, [r7, #4]
    /* discard the oldest entry in the undo list */
    if (state->undo_point > 0) {
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e18:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	dd7e      	ble.n	8020f1e <nk_textedit_discard_undo+0x114>
        /* if the 0th undo state has characters, clean those up */
        if (state->undo_rec[0].char_storage >= 0) {
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	db5a      	blt.n	8020ee0 <nk_textedit_discard_undo+0xd6>
            int n = state->undo_rec[0].insert_length, i;
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020e30:	60bb      	str	r3, [r7, #8]
            /* delete n characters from all other records */
            state->undo_char_point = (short)(state->undo_char_point - n);
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e38:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 8020e3c:	b29a      	uxth	r2, r3
 8020e3e:	68bb      	ldr	r3, [r7, #8]
 8020e40:	b29b      	uxth	r3, r3
 8020e42:	1ad3      	subs	r3, r2, r3
 8020e44:	b29b      	uxth	r3, r3
 8020e46:	b21a      	sxth	r2, r3
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e4e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
            NK_MEMCPY(state->undo_char, state->undo_char + n,
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	f203 40a4 	addw	r0, r3, #1188	; 0x4a4
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	f203 42a4 	addw	r2, r3, #1188	; 0x4a4
 8020e5e:	68bb      	ldr	r3, [r7, #8]
 8020e60:	009b      	lsls	r3, r3, #2
 8020e62:	18d1      	adds	r1, r2, r3
                (nk_size)state->undo_char_point*sizeof(nk_rune));
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e6a:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
            NK_MEMCPY(state->undo_char, state->undo_char + n,
 8020e6e:	009b      	lsls	r3, r3, #2
 8020e70:	461a      	mov	r2, r3
 8020e72:	f001 fab7 	bl	80223e4 <nk_memcopy>
            for (i=0; i < state->undo_point; ++i) {
 8020e76:	2300      	movs	r3, #0
 8020e78:	60fb      	str	r3, [r7, #12]
 8020e7a:	e028      	b.n	8020ece <nk_textedit_discard_undo+0xc4>
                if (state->undo_rec[i].char_storage >= 0)
 8020e7c:	6879      	ldr	r1, [r7, #4]
 8020e7e:	68fa      	ldr	r2, [r7, #12]
 8020e80:	4613      	mov	r3, r2
 8020e82:	005b      	lsls	r3, r3, #1
 8020e84:	4413      	add	r3, r2
 8020e86:	009b      	lsls	r3, r3, #2
 8020e88:	440b      	add	r3, r1
 8020e8a:	3308      	adds	r3, #8
 8020e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	db19      	blt.n	8020ec8 <nk_textedit_discard_undo+0xbe>
                state->undo_rec[i].char_storage = (short)
                    (state->undo_rec[i].char_storage - n);
 8020e94:	6879      	ldr	r1, [r7, #4]
 8020e96:	68fa      	ldr	r2, [r7, #12]
 8020e98:	4613      	mov	r3, r2
 8020e9a:	005b      	lsls	r3, r3, #1
 8020e9c:	4413      	add	r3, r2
 8020e9e:	009b      	lsls	r3, r3, #2
 8020ea0:	440b      	add	r3, r1
 8020ea2:	3308      	adds	r3, #8
 8020ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ea8:	b29a      	uxth	r2, r3
 8020eaa:	68bb      	ldr	r3, [r7, #8]
 8020eac:	b29b      	uxth	r3, r3
 8020eae:	1ad3      	subs	r3, r2, r3
 8020eb0:	b29b      	uxth	r3, r3
                state->undo_rec[i].char_storage = (short)
 8020eb2:	b218      	sxth	r0, r3
 8020eb4:	6879      	ldr	r1, [r7, #4]
 8020eb6:	68fa      	ldr	r2, [r7, #12]
 8020eb8:	4613      	mov	r3, r2
 8020eba:	005b      	lsls	r3, r3, #1
 8020ebc:	4413      	add	r3, r2
 8020ebe:	009b      	lsls	r3, r3, #2
 8020ec0:	440b      	add	r3, r1
 8020ec2:	3308      	adds	r3, #8
 8020ec4:	4602      	mov	r2, r0
 8020ec6:	801a      	strh	r2, [r3, #0]
            for (i=0; i < state->undo_point; ++i) {
 8020ec8:	68fb      	ldr	r3, [r7, #12]
 8020eca:	3301      	adds	r3, #1
 8020ecc:	60fb      	str	r3, [r7, #12]
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020ed4:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020ed8:	461a      	mov	r2, r3
 8020eda:	68fb      	ldr	r3, [r7, #12]
 8020edc:	4293      	cmp	r3, r2
 8020ede:	dbcd      	blt.n	8020e7c <nk_textedit_discard_undo+0x72>
            }
        }
        --state->undo_point;
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020ee6:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020eea:	b29b      	uxth	r3, r3
 8020eec:	3b01      	subs	r3, #1
 8020eee:	b29b      	uxth	r3, r3
 8020ef0:	b21a      	sxth	r2, r3
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020ef8:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
        NK_MEMCPY(state->undo_rec, state->undo_rec+1,
 8020efc:	6878      	ldr	r0, [r7, #4]
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	f103 010c 	add.w	r1, r3, #12
            (nk_size)((nk_size)state->undo_point * sizeof(state->undo_rec[0])));
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f0a:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020f0e:	461a      	mov	r2, r3
        NK_MEMCPY(state->undo_rec, state->undo_rec+1,
 8020f10:	4613      	mov	r3, r2
 8020f12:	005b      	lsls	r3, r3, #1
 8020f14:	4413      	add	r3, r2
 8020f16:	009b      	lsls	r3, r3, #2
 8020f18:	461a      	mov	r2, r3
 8020f1a:	f001 fa63 	bl	80223e4 <nk_memcopy>
    }
}
 8020f1e:	bf00      	nop
 8020f20:	3710      	adds	r7, #16
 8020f22:	46bd      	mov	sp, r7
 8020f24:	bd80      	pop	{r7, pc}

08020f26 <nk_textedit_discard_redo>:
NK_INTERN void
nk_textedit_discard_redo(struct nk_text_undo_state *state)
{
 8020f26:	b580      	push	{r7, lr}
 8020f28:	b086      	sub	sp, #24
 8020f2a:	af00      	add	r7, sp, #0
 8020f2c:	6078      	str	r0, [r7, #4]
/*  discard the oldest entry in the redo list--it's bad if this
    ever happens, but because undo & redo have to store the actual
    characters in different cases, the redo character buffer can
    fill up even though the undo buffer didn't */
    nk_size num;
    int k = NK_TEXTEDIT_UNDOSTATECOUNT-1;
 8020f2e:	2362      	movs	r3, #98	; 0x62
 8020f30:	613b      	str	r3, [r7, #16]
    if (state->redo_point <= k) {
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f38:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8020f3c:	461a      	mov	r2, r3
 8020f3e:	693b      	ldr	r3, [r7, #16]
 8020f40:	4293      	cmp	r3, r2
 8020f42:	f2c0 80b9 	blt.w	80210b8 <nk_textedit_discard_redo+0x192>
        /* if the k'th undo state has characters, clean those up */
        if (state->undo_rec[k].char_storage >= 0) {
 8020f46:	6879      	ldr	r1, [r7, #4]
 8020f48:	693a      	ldr	r2, [r7, #16]
 8020f4a:	4613      	mov	r3, r2
 8020f4c:	005b      	lsls	r3, r3, #1
 8020f4e:	4413      	add	r3, r2
 8020f50:	009b      	lsls	r3, r3, #2
 8020f52:	440b      	add	r3, r1
 8020f54:	3308      	adds	r3, #8
 8020f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	db72      	blt.n	8021044 <nk_textedit_discard_redo+0x11e>
            int n = state->undo_rec[k].insert_length, i;
 8020f5e:	6879      	ldr	r1, [r7, #4]
 8020f60:	693a      	ldr	r2, [r7, #16]
 8020f62:	4613      	mov	r3, r2
 8020f64:	005b      	lsls	r3, r3, #1
 8020f66:	4413      	add	r3, r2
 8020f68:	009b      	lsls	r3, r3, #2
 8020f6a:	440b      	add	r3, r1
 8020f6c:	3304      	adds	r3, #4
 8020f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f72:	60fb      	str	r3, [r7, #12]
            /* delete n characters from all other records */
            state->redo_char_point = (short)(state->redo_char_point + n);
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f7a:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020f7e:	b29a      	uxth	r2, r3
 8020f80:	68fb      	ldr	r3, [r7, #12]
 8020f82:	b29b      	uxth	r3, r3
 8020f84:	4413      	add	r3, r2
 8020f86:	b29b      	uxth	r3, r3
 8020f88:	b21a      	sxth	r2, r3
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f90:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
            num = (nk_size)(NK_TEXTEDIT_UNDOCHARCOUNT - state->redo_char_point);
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f9a:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020f9e:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8020fa2:	3303      	adds	r3, #3
 8020fa4:	60bb      	str	r3, [r7, #8]
            NK_MEMCPY(state->undo_char + state->redo_char_point,
 8020fa6:	687b      	ldr	r3, [r7, #4]
 8020fa8:	f203 42a4 	addw	r2, r3, #1188	; 0x4a4
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020fb2:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020fb6:	009b      	lsls	r3, r3, #2
 8020fb8:	18d0      	adds	r0, r2, r3
                state->undo_char + state->redo_char_point-n, num * sizeof(char));
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	f203 42a4 	addw	r2, r3, #1188	; 0x4a4
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020fc6:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020fca:	4619      	mov	r1, r3
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	1acb      	subs	r3, r1, r3
 8020fd0:	009b      	lsls	r3, r3, #2
            NK_MEMCPY(state->undo_char + state->redo_char_point,
 8020fd2:	4413      	add	r3, r2
 8020fd4:	68ba      	ldr	r2, [r7, #8]
 8020fd6:	4619      	mov	r1, r3
 8020fd8:	f001 fa04 	bl	80223e4 <nk_memcopy>
            for (i = state->redo_point; i < k; ++i) {
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020fe2:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8020fe6:	617b      	str	r3, [r7, #20]
 8020fe8:	e028      	b.n	802103c <nk_textedit_discard_redo+0x116>
                if (state->undo_rec[i].char_storage >= 0) {
 8020fea:	6879      	ldr	r1, [r7, #4]
 8020fec:	697a      	ldr	r2, [r7, #20]
 8020fee:	4613      	mov	r3, r2
 8020ff0:	005b      	lsls	r3, r3, #1
 8020ff2:	4413      	add	r3, r2
 8020ff4:	009b      	lsls	r3, r3, #2
 8020ff6:	440b      	add	r3, r1
 8020ff8:	3308      	adds	r3, #8
 8020ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	db19      	blt.n	8021036 <nk_textedit_discard_redo+0x110>
                    state->undo_rec[i].char_storage = (short)
                        (state->undo_rec[i].char_storage + n);
 8021002:	6879      	ldr	r1, [r7, #4]
 8021004:	697a      	ldr	r2, [r7, #20]
 8021006:	4613      	mov	r3, r2
 8021008:	005b      	lsls	r3, r3, #1
 802100a:	4413      	add	r3, r2
 802100c:	009b      	lsls	r3, r3, #2
 802100e:	440b      	add	r3, r1
 8021010:	3308      	adds	r3, #8
 8021012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021016:	b29a      	uxth	r2, r3
 8021018:	68fb      	ldr	r3, [r7, #12]
 802101a:	b29b      	uxth	r3, r3
 802101c:	4413      	add	r3, r2
 802101e:	b29b      	uxth	r3, r3
                    state->undo_rec[i].char_storage = (short)
 8021020:	b218      	sxth	r0, r3
 8021022:	6879      	ldr	r1, [r7, #4]
 8021024:	697a      	ldr	r2, [r7, #20]
 8021026:	4613      	mov	r3, r2
 8021028:	005b      	lsls	r3, r3, #1
 802102a:	4413      	add	r3, r2
 802102c:	009b      	lsls	r3, r3, #2
 802102e:	440b      	add	r3, r1
 8021030:	3308      	adds	r3, #8
 8021032:	4602      	mov	r2, r0
 8021034:	801a      	strh	r2, [r3, #0]
            for (i = state->redo_point; i < k; ++i) {
 8021036:	697b      	ldr	r3, [r7, #20]
 8021038:	3301      	adds	r3, #1
 802103a:	617b      	str	r3, [r7, #20]
 802103c:	697a      	ldr	r2, [r7, #20]
 802103e:	693b      	ldr	r3, [r7, #16]
 8021040:	429a      	cmp	r2, r3
 8021042:	dbd2      	blt.n	8020fea <nk_textedit_discard_redo+0xc4>
                }
            }
        }
        ++state->redo_point;
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802104a:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802104e:	b29b      	uxth	r3, r3
 8021050:	3301      	adds	r3, #1
 8021052:	b29b      	uxth	r3, r3
 8021054:	b21a      	sxth	r2, r3
 8021056:	687b      	ldr	r3, [r7, #4]
 8021058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802105c:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
        num = (nk_size)(NK_TEXTEDIT_UNDOSTATECOUNT - state->redo_point);
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021066:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802106a:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 802106e:	60bb      	str	r3, [r7, #8]
        if (num) NK_MEMCPY(state->undo_rec + state->redo_point-1,
 8021070:	68bb      	ldr	r3, [r7, #8]
 8021072:	2b00      	cmp	r3, #0
 8021074:	d020      	beq.n	80210b8 <nk_textedit_discard_redo+0x192>
 8021076:	687a      	ldr	r2, [r7, #4]
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802107e:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8021082:	4619      	mov	r1, r3
 8021084:	460b      	mov	r3, r1
 8021086:	005b      	lsls	r3, r3, #1
 8021088:	440b      	add	r3, r1
 802108a:	009b      	lsls	r3, r3, #2
 802108c:	3b0c      	subs	r3, #12
 802108e:	18d0      	adds	r0, r2, r3
            state->undo_rec + state->redo_point, num * sizeof(state->undo_rec[0]));
 8021090:	687a      	ldr	r2, [r7, #4]
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021098:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802109c:	4619      	mov	r1, r3
 802109e:	460b      	mov	r3, r1
 80210a0:	005b      	lsls	r3, r3, #1
 80210a2:	440b      	add	r3, r1
 80210a4:	009b      	lsls	r3, r3, #2
        if (num) NK_MEMCPY(state->undo_rec + state->redo_point-1,
 80210a6:	18d1      	adds	r1, r2, r3
 80210a8:	68ba      	ldr	r2, [r7, #8]
 80210aa:	4613      	mov	r3, r2
 80210ac:	005b      	lsls	r3, r3, #1
 80210ae:	4413      	add	r3, r2
 80210b0:	009b      	lsls	r3, r3, #2
 80210b2:	461a      	mov	r2, r3
 80210b4:	f001 f996 	bl	80223e4 <nk_memcopy>
    }
}
 80210b8:	bf00      	nop
 80210ba:	3718      	adds	r7, #24
 80210bc:	46bd      	mov	sp, r7
 80210be:	bd80      	pop	{r7, pc}

080210c0 <nk_textedit_create_undo_record>:
NK_INTERN struct nk_text_undo_record*
nk_textedit_create_undo_record(struct nk_text_undo_state *state, int numchars)
{
 80210c0:	b580      	push	{r7, lr}
 80210c2:	b082      	sub	sp, #8
 80210c4:	af00      	add	r7, sp, #0
 80210c6:	6078      	str	r0, [r7, #4]
 80210c8:	6039      	str	r1, [r7, #0]
    /* any time we create a new undo record, we discard redo*/
    nk_textedit_flush_redo(state);
 80210ca:	6878      	ldr	r0, [r7, #4]
 80210cc:	f7ff fe86 	bl	8020ddc <nk_textedit_flush_redo>

    /* if we have no free records, we have to make room,
     * by sliding the existing records down */
    if (state->undo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80210d6:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 80210da:	2b63      	cmp	r3, #99	; 0x63
 80210dc:	d102      	bne.n	80210e4 <nk_textedit_create_undo_record+0x24>
        nk_textedit_discard_undo(state);
 80210de:	6878      	ldr	r0, [r7, #4]
 80210e0:	f7ff fe93 	bl	8020e0a <nk_textedit_discard_undo>

    /* if the characters to store won't possibly fit in the buffer,
     * we can't undo */
    if (numchars > NK_TEXTEDIT_UNDOCHARCOUNT) {
 80210e4:	683b      	ldr	r3, [r7, #0]
 80210e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80210ea:	db10      	blt.n	802110e <nk_textedit_create_undo_record+0x4e>
        state->undo_point = 0;
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80210f2:	2200      	movs	r2, #0
 80210f4:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
        state->undo_char_point = 0;
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80210fe:	2200      	movs	r2, #0
 8021100:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
        return 0;
 8021104:	2300      	movs	r3, #0
 8021106:	e021      	b.n	802114c <nk_textedit_create_undo_record+0x8c>
    }

    /* if we don't have enough free characters in the buffer,
     * we have to make room */
    while (state->undo_char_point + numchars > NK_TEXTEDIT_UNDOCHARCOUNT)
        nk_textedit_discard_undo(state);
 8021108:	6878      	ldr	r0, [r7, #4]
 802110a:	f7ff fe7e 	bl	8020e0a <nk_textedit_discard_undo>
    while (state->undo_char_point + numchars > NK_TEXTEDIT_UNDOCHARCOUNT)
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021114:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 8021118:	461a      	mov	r2, r3
 802111a:	683b      	ldr	r3, [r7, #0]
 802111c:	4413      	add	r3, r2
 802111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021122:	daf1      	bge.n	8021108 <nk_textedit_create_undo_record+0x48>
    return &state->undo_rec[state->undo_point++];
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802112a:	f9b3 2440 	ldrsh.w	r2, [r3, #1088]	; 0x440
 802112e:	b293      	uxth	r3, r2
 8021130:	3301      	adds	r3, #1
 8021132:	b29b      	uxth	r3, r3
 8021134:	b219      	sxth	r1, r3
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802113c:	f8a3 1440 	strh.w	r1, [r3, #1088]	; 0x440
 8021140:	4613      	mov	r3, r2
 8021142:	005b      	lsls	r3, r3, #1
 8021144:	4413      	add	r3, r2
 8021146:	009b      	lsls	r3, r3, #2
 8021148:	687a      	ldr	r2, [r7, #4]
 802114a:	4413      	add	r3, r2
}
 802114c:	4618      	mov	r0, r3
 802114e:	3708      	adds	r7, #8
 8021150:	46bd      	mov	sp, r7
 8021152:	bd80      	pop	{r7, pc}

08021154 <nk_textedit_createundo>:
NK_INTERN nk_rune*
nk_textedit_createundo(struct nk_text_undo_state *state, int pos,
    int insert_len, int delete_len)
{
 8021154:	b580      	push	{r7, lr}
 8021156:	b086      	sub	sp, #24
 8021158:	af00      	add	r7, sp, #0
 802115a:	60f8      	str	r0, [r7, #12]
 802115c:	60b9      	str	r1, [r7, #8]
 802115e:	607a      	str	r2, [r7, #4]
 8021160:	603b      	str	r3, [r7, #0]
    struct nk_text_undo_record *r = nk_textedit_create_undo_record(state, insert_len);
 8021162:	6879      	ldr	r1, [r7, #4]
 8021164:	68f8      	ldr	r0, [r7, #12]
 8021166:	f7ff ffab 	bl	80210c0 <nk_textedit_create_undo_record>
 802116a:	6178      	str	r0, [r7, #20]
    if (r == 0)
 802116c:	697b      	ldr	r3, [r7, #20]
 802116e:	2b00      	cmp	r3, #0
 8021170:	d101      	bne.n	8021176 <nk_textedit_createundo+0x22>
        return 0;
 8021172:	2300      	movs	r3, #0
 8021174:	e033      	b.n	80211de <nk_textedit_createundo+0x8a>

    r->where = pos;
 8021176:	697b      	ldr	r3, [r7, #20]
 8021178:	68ba      	ldr	r2, [r7, #8]
 802117a:	601a      	str	r2, [r3, #0]
    r->insert_length = (short) insert_len;
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	b21a      	sxth	r2, r3
 8021180:	697b      	ldr	r3, [r7, #20]
 8021182:	809a      	strh	r2, [r3, #4]
    r->delete_length = (short) delete_len;
 8021184:	683b      	ldr	r3, [r7, #0]
 8021186:	b21a      	sxth	r2, r3
 8021188:	697b      	ldr	r3, [r7, #20]
 802118a:	80da      	strh	r2, [r3, #6]

    if (insert_len == 0) {
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	2b00      	cmp	r3, #0
 8021190:	d105      	bne.n	802119e <nk_textedit_createundo+0x4a>
        r->char_storage = -1;
 8021192:	697b      	ldr	r3, [r7, #20]
 8021194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021198:	811a      	strh	r2, [r3, #8]
        return 0;
 802119a:	2300      	movs	r3, #0
 802119c:	e01f      	b.n	80211de <nk_textedit_createundo+0x8a>
    } else {
        r->char_storage = state->undo_char_point;
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80211a4:	f9b3 2444 	ldrsh.w	r2, [r3, #1092]	; 0x444
 80211a8:	697b      	ldr	r3, [r7, #20]
 80211aa:	811a      	strh	r2, [r3, #8]
        state->undo_char_point = (short)(state->undo_char_point +  insert_len);
 80211ac:	68fb      	ldr	r3, [r7, #12]
 80211ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80211b2:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80211b6:	b29a      	uxth	r2, r3
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	b29b      	uxth	r3, r3
 80211bc:	4413      	add	r3, r2
 80211be:	b29b      	uxth	r3, r3
 80211c0:	b21a      	sxth	r2, r3
 80211c2:	68fb      	ldr	r3, [r7, #12]
 80211c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80211c8:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
        return &state->undo_char[r->char_storage];
 80211cc:	697b      	ldr	r3, [r7, #20]
 80211ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80211d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80211d6:	009b      	lsls	r3, r3, #2
 80211d8:	68fa      	ldr	r2, [r7, #12]
 80211da:	4413      	add	r3, r2
 80211dc:	3304      	adds	r3, #4
    }
}
 80211de:	4618      	mov	r0, r3
 80211e0:	3718      	adds	r7, #24
 80211e2:	46bd      	mov	sp, r7
 80211e4:	bd80      	pop	{r7, pc}

080211e6 <nk_textedit_undo>:
NK_API void
nk_textedit_undo(struct nk_text_edit *state)
{
 80211e6:	b590      	push	{r4, r7, lr}
 80211e8:	b089      	sub	sp, #36	; 0x24
 80211ea:	af00      	add	r7, sp, #0
 80211ec:	6078      	str	r0, [r7, #4]
    struct nk_text_undo_state *s = &state->undo;
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	3370      	adds	r3, #112	; 0x70
 80211f2:	61bb      	str	r3, [r7, #24]
    struct nk_text_undo_record u, *r;
    if (s->undo_point == 0)
 80211f4:	69bb      	ldr	r3, [r7, #24]
 80211f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80211fa:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 80211fe:	2b00      	cmp	r3, #0
 8021200:	f000 8101 	beq.w	8021406 <nk_textedit_undo+0x220>
        return;

    /* we need to do two things: apply the undo record, and create a redo record */
    u = s->undo_rec[s->undo_point-1];
 8021204:	69bb      	ldr	r3, [r7, #24]
 8021206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802120a:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 802120e:	1e5a      	subs	r2, r3, #1
 8021210:	69b9      	ldr	r1, [r7, #24]
 8021212:	4613      	mov	r3, r2
 8021214:	005b      	lsls	r3, r3, #1
 8021216:	4413      	add	r3, r2
 8021218:	009b      	lsls	r3, r3, #2
 802121a:	18ca      	adds	r2, r1, r3
 802121c:	f107 0308 	add.w	r3, r7, #8
 8021220:	ca07      	ldmia	r2, {r0, r1, r2}
 8021222:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    r = &s->undo_rec[s->redo_point-1];
 8021226:	69bb      	ldr	r3, [r7, #24]
 8021228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802122c:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8021230:	1e5a      	subs	r2, r3, #1
 8021232:	4613      	mov	r3, r2
 8021234:	005b      	lsls	r3, r3, #1
 8021236:	4413      	add	r3, r2
 8021238:	009b      	lsls	r3, r3, #2
 802123a:	69ba      	ldr	r2, [r7, #24]
 802123c:	4413      	add	r3, r2
 802123e:	617b      	str	r3, [r7, #20]
    r->char_storage = -1;
 8021240:	697b      	ldr	r3, [r7, #20]
 8021242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021246:	811a      	strh	r2, [r3, #8]

    r->insert_length = u.delete_length;
 8021248:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802124c:	697b      	ldr	r3, [r7, #20]
 802124e:	809a      	strh	r2, [r3, #4]
    r->delete_length = u.insert_length;
 8021250:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8021254:	697b      	ldr	r3, [r7, #20]
 8021256:	80da      	strh	r2, [r3, #6]
    r->where = u.where;
 8021258:	68ba      	ldr	r2, [r7, #8]
 802125a:	697b      	ldr	r3, [r7, #20]
 802125c:	601a      	str	r2, [r3, #0]

    if (u.delete_length)
 802125e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021262:	2b00      	cmp	r3, #0
 8021264:	f000 8082 	beq.w	802136c <nk_textedit_undo+0x186>
            there are three cases:
                - there's enough room to store the characters
                - characters stored for *redoing* don't leave room for redo
                - characters stored for *undoing* don't leave room for redo
            if the last is true, we have to bail */
        if (s->undo_char_point + u.delete_length >= NK_TEXTEDIT_UNDOCHARCOUNT) {
 8021268:	69bb      	ldr	r3, [r7, #24]
 802126a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802126e:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 8021272:	461a      	mov	r2, r3
 8021274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021278:	4413      	add	r3, r2
 802127a:	f240 32e6 	movw	r2, #998	; 0x3e6
 802127e:	4293      	cmp	r3, r2
 8021280:	dd0e      	ble.n	80212a0 <nk_textedit_undo+0xba>
            /* the undo records take up too much character space; there's no space
            * to store the redo characters */
            r->insert_length = 0;
 8021282:	697b      	ldr	r3, [r7, #20]
 8021284:	2200      	movs	r2, #0
 8021286:	809a      	strh	r2, [r3, #4]
 8021288:	e068      	b.n	802135c <nk_textedit_undo+0x176>
        } else {
            int i;
            /* there's definitely room to store the characters eventually */
            while (s->undo_char_point + u.delete_length > s->redo_char_point) {
                /* there's currently not enough room, so discard a redo record */
                nk_textedit_discard_redo(s);
 802128a:	69b8      	ldr	r0, [r7, #24]
 802128c:	f7ff fe4b 	bl	8020f26 <nk_textedit_discard_redo>
                /* should never happen: */
                if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 8021290:	69bb      	ldr	r3, [r7, #24]
 8021292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021296:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802129a:	2b63      	cmp	r3, #99	; 0x63
 802129c:	f000 80b5 	beq.w	802140a <nk_textedit_undo+0x224>
            while (s->undo_char_point + u.delete_length > s->redo_char_point) {
 80212a0:	69bb      	ldr	r3, [r7, #24]
 80212a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212a6:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80212aa:	461a      	mov	r2, r3
 80212ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80212b0:	4413      	add	r3, r2
 80212b2:	69ba      	ldr	r2, [r7, #24]
 80212b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80212b8:	f9b2 2446 	ldrsh.w	r2, [r2, #1094]	; 0x446
 80212bc:	4293      	cmp	r3, r2
 80212be:	dce4      	bgt.n	802128a <nk_textedit_undo+0xa4>
                    return;
            }

            r = &s->undo_rec[s->redo_point-1];
 80212c0:	69bb      	ldr	r3, [r7, #24]
 80212c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212c6:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 80212ca:	1e5a      	subs	r2, r3, #1
 80212cc:	4613      	mov	r3, r2
 80212ce:	005b      	lsls	r3, r3, #1
 80212d0:	4413      	add	r3, r2
 80212d2:	009b      	lsls	r3, r3, #2
 80212d4:	69ba      	ldr	r2, [r7, #24]
 80212d6:	4413      	add	r3, r2
 80212d8:	617b      	str	r3, [r7, #20]
            r->char_storage = (short)(s->redo_char_point - u.delete_length);
 80212da:	69bb      	ldr	r3, [r7, #24]
 80212dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212e0:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 80212e4:	b29a      	uxth	r2, r3
 80212e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80212ea:	b29b      	uxth	r3, r3
 80212ec:	1ad3      	subs	r3, r2, r3
 80212ee:	b29b      	uxth	r3, r3
 80212f0:	b21a      	sxth	r2, r3
 80212f2:	697b      	ldr	r3, [r7, #20]
 80212f4:	811a      	strh	r2, [r3, #8]
            s->redo_char_point = (short)(s->redo_char_point -  u.delete_length);
 80212f6:	69bb      	ldr	r3, [r7, #24]
 80212f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212fc:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8021300:	b29a      	uxth	r2, r3
 8021302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021306:	b29b      	uxth	r3, r3
 8021308:	1ad3      	subs	r3, r2, r3
 802130a:	b29b      	uxth	r3, r3
 802130c:	b21a      	sxth	r2, r3
 802130e:	69bb      	ldr	r3, [r7, #24]
 8021310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021314:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446

            /* now save the characters */
            for (i=0; i < u.delete_length; ++i)
 8021318:	2300      	movs	r3, #0
 802131a:	61fb      	str	r3, [r7, #28]
 802131c:	e018      	b.n	8021350 <nk_textedit_undo+0x16a>
                s->undo_char[r->char_storage + i] =
                    nk_str_rune_at(&state->string, u.where + i);
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	f103 000c 	add.w	r0, r3, #12
 8021324:	68ba      	ldr	r2, [r7, #8]
 8021326:	69fb      	ldr	r3, [r7, #28]
 8021328:	441a      	add	r2, r3
                s->undo_char[r->char_storage + i] =
 802132a:	697b      	ldr	r3, [r7, #20]
 802132c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021330:	4619      	mov	r1, r3
 8021332:	69fb      	ldr	r3, [r7, #28]
 8021334:	18cc      	adds	r4, r1, r3
                    nk_str_rune_at(&state->string, u.where + i);
 8021336:	4611      	mov	r1, r2
 8021338:	f7fb fe62 	bl	801d000 <nk_str_rune_at>
 802133c:	4601      	mov	r1, r0
                s->undo_char[r->char_storage + i] =
 802133e:	69ba      	ldr	r2, [r7, #24]
 8021340:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8021344:	009b      	lsls	r3, r3, #2
 8021346:	4413      	add	r3, r2
 8021348:	6059      	str	r1, [r3, #4]
            for (i=0; i < u.delete_length; ++i)
 802134a:	69fb      	ldr	r3, [r7, #28]
 802134c:	3301      	adds	r3, #1
 802134e:	61fb      	str	r3, [r7, #28]
 8021350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021354:	461a      	mov	r2, r3
 8021356:	69fb      	ldr	r3, [r7, #28]
 8021358:	4293      	cmp	r3, r2
 802135a:	dbe0      	blt.n	802131e <nk_textedit_undo+0x138>
        }
        /* now we can carry out the deletion */
        nk_str_delete_runes(&state->string, u.where, u.delete_length);
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	330c      	adds	r3, #12
 8021360:	68b9      	ldr	r1, [r7, #8]
 8021362:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021366:	4618      	mov	r0, r3
 8021368:	f7fb fcc4 	bl	801ccf4 <nk_str_delete_runes>
    }

    /* check type of recorded action: */
    if (u.insert_length) {
 802136c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8021370:	2b00      	cmp	r3, #0
 8021372:	d020      	beq.n	80213b6 <nk_textedit_undo+0x1d0>
        /* easy case: was a deletion, so we need to insert n characters */
        nk_str_insert_text_runes(&state->string, u.where,
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	f103 000c 	add.w	r0, r3, #12
 802137a:	68b9      	ldr	r1, [r7, #8]
            &s->undo_char[u.char_storage], u.insert_length);
 802137c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8021380:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8021384:	009b      	lsls	r3, r3, #2
 8021386:	69ba      	ldr	r2, [r7, #24]
 8021388:	4413      	add	r3, r2
 802138a:	1d1a      	adds	r2, r3, #4
 802138c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
        nk_str_insert_text_runes(&state->string, u.where,
 8021390:	f7fb fb9e 	bl	801cad0 <nk_str_insert_text_runes>
        s->undo_char_point = (short)(s->undo_char_point - u.insert_length);
 8021394:	69bb      	ldr	r3, [r7, #24]
 8021396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802139a:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 802139e:	b29a      	uxth	r2, r3
 80213a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80213a4:	b29b      	uxth	r3, r3
 80213a6:	1ad3      	subs	r3, r2, r3
 80213a8:	b29b      	uxth	r3, r3
 80213aa:	b21a      	sxth	r2, r3
 80213ac:	69bb      	ldr	r3, [r7, #24]
 80213ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213b2:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
    }
    state->cursor = (short)(u.where + u.insert_length);
 80213b6:	68bb      	ldr	r3, [r7, #8]
 80213b8:	b29a      	uxth	r2, r3
 80213ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80213be:	b29b      	uxth	r3, r3
 80213c0:	4413      	add	r3, r2
 80213c2:	b29b      	uxth	r3, r3
 80213c4:	b21b      	sxth	r3, r3
 80213c6:	461a      	mov	r2, r3
 80213c8:	687b      	ldr	r3, [r7, #4]
 80213ca:	659a      	str	r2, [r3, #88]	; 0x58

    s->undo_point--;
 80213cc:	69bb      	ldr	r3, [r7, #24]
 80213ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213d2:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 80213d6:	b29b      	uxth	r3, r3
 80213d8:	3b01      	subs	r3, #1
 80213da:	b29b      	uxth	r3, r3
 80213dc:	b21a      	sxth	r2, r3
 80213de:	69bb      	ldr	r3, [r7, #24]
 80213e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213e4:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
    s->redo_point--;
 80213e8:	69bb      	ldr	r3, [r7, #24]
 80213ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213ee:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 80213f2:	b29b      	uxth	r3, r3
 80213f4:	3b01      	subs	r3, #1
 80213f6:	b29b      	uxth	r3, r3
 80213f8:	b21a      	sxth	r2, r3
 80213fa:	69bb      	ldr	r3, [r7, #24]
 80213fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021400:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
 8021404:	e002      	b.n	802140c <nk_textedit_undo+0x226>
        return;
 8021406:	bf00      	nop
 8021408:	e000      	b.n	802140c <nk_textedit_undo+0x226>
                    return;
 802140a:	bf00      	nop
}
 802140c:	3724      	adds	r7, #36	; 0x24
 802140e:	46bd      	mov	sp, r7
 8021410:	bd90      	pop	{r4, r7, pc}

08021412 <nk_textedit_redo>:
NK_API void
nk_textedit_redo(struct nk_text_edit *state)
{
 8021412:	b590      	push	{r4, r7, lr}
 8021414:	b089      	sub	sp, #36	; 0x24
 8021416:	af00      	add	r7, sp, #0
 8021418:	6078      	str	r0, [r7, #4]
    struct nk_text_undo_state *s = &state->undo;
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	3370      	adds	r3, #112	; 0x70
 802141e:	61bb      	str	r3, [r7, #24]
    struct nk_text_undo_record *u, r;
    if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 8021420:	69bb      	ldr	r3, [r7, #24]
 8021422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021426:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802142a:	2b63      	cmp	r3, #99	; 0x63
 802142c:	f000 80c5 	beq.w	80215ba <nk_textedit_redo+0x1a8>
        return;

    /* we need to do two things: apply the redo record, and create an undo record */
    u = &s->undo_rec[s->undo_point];
 8021430:	69bb      	ldr	r3, [r7, #24]
 8021432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021436:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 802143a:	461a      	mov	r2, r3
 802143c:	4613      	mov	r3, r2
 802143e:	005b      	lsls	r3, r3, #1
 8021440:	4413      	add	r3, r2
 8021442:	009b      	lsls	r3, r3, #2
 8021444:	69ba      	ldr	r2, [r7, #24]
 8021446:	4413      	add	r3, r2
 8021448:	617b      	str	r3, [r7, #20]
    r = s->undo_rec[s->redo_point];
 802144a:	69bb      	ldr	r3, [r7, #24]
 802144c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021450:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8021454:	4619      	mov	r1, r3
 8021456:	69ba      	ldr	r2, [r7, #24]
 8021458:	460b      	mov	r3, r1
 802145a:	005b      	lsls	r3, r3, #1
 802145c:	440b      	add	r3, r1
 802145e:	009b      	lsls	r3, r3, #2
 8021460:	441a      	add	r2, r3
 8021462:	f107 0308 	add.w	r3, r7, #8
 8021466:	ca07      	ldmia	r2, {r0, r1, r2}
 8021468:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* we KNOW there must be room for the undo record, because the redo record
    was derived from an undo record */
    u->delete_length = r.insert_length;
 802146c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8021470:	697b      	ldr	r3, [r7, #20]
 8021472:	80da      	strh	r2, [r3, #6]
    u->insert_length = r.delete_length;
 8021474:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021478:	697b      	ldr	r3, [r7, #20]
 802147a:	809a      	strh	r2, [r3, #4]
    u->where = r.where;
 802147c:	68ba      	ldr	r2, [r7, #8]
 802147e:	697b      	ldr	r3, [r7, #20]
 8021480:	601a      	str	r2, [r3, #0]
    u->char_storage = -1;
 8021482:	697b      	ldr	r3, [r7, #20]
 8021484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021488:	811a      	strh	r2, [r3, #8]

    if (r.delete_length) {
 802148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d05c      	beq.n	802154c <nk_textedit_redo+0x13a>
        /* the redo record requires us to delete characters, so the undo record
        needs to store the characters */
        if (s->undo_char_point + u->insert_length > s->redo_char_point) {
 8021492:	69bb      	ldr	r3, [r7, #24]
 8021494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021498:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 802149c:	461a      	mov	r2, r3
 802149e:	697b      	ldr	r3, [r7, #20]
 80214a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80214a4:	4413      	add	r3, r2
 80214a6:	69ba      	ldr	r2, [r7, #24]
 80214a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80214ac:	f9b2 2446 	ldrsh.w	r2, [r2, #1094]	; 0x446
 80214b0:	4293      	cmp	r3, r2
 80214b2:	dd06      	ble.n	80214c2 <nk_textedit_redo+0xb0>
            u->insert_length = 0;
 80214b4:	697b      	ldr	r3, [r7, #20]
 80214b6:	2200      	movs	r2, #0
 80214b8:	809a      	strh	r2, [r3, #4]
            u->delete_length = 0;
 80214ba:	697b      	ldr	r3, [r7, #20]
 80214bc:	2200      	movs	r2, #0
 80214be:	80da      	strh	r2, [r3, #6]
 80214c0:	e03c      	b.n	802153c <nk_textedit_redo+0x12a>
        } else {
            int i;
            u->char_storage = s->undo_char_point;
 80214c2:	69bb      	ldr	r3, [r7, #24]
 80214c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80214c8:	f9b3 2444 	ldrsh.w	r2, [r3, #1092]	; 0x444
 80214cc:	697b      	ldr	r3, [r7, #20]
 80214ce:	811a      	strh	r2, [r3, #8]
            s->undo_char_point = (short)(s->undo_char_point + u->insert_length);
 80214d0:	69bb      	ldr	r3, [r7, #24]
 80214d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80214d6:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80214da:	b29a      	uxth	r2, r3
 80214dc:	697b      	ldr	r3, [r7, #20]
 80214de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80214e2:	b29b      	uxth	r3, r3
 80214e4:	4413      	add	r3, r2
 80214e6:	b29b      	uxth	r3, r3
 80214e8:	b21a      	sxth	r2, r3
 80214ea:	69bb      	ldr	r3, [r7, #24]
 80214ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80214f0:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

            /* now save the characters */
            for (i=0; i < u->insert_length; ++i) {
 80214f4:	2300      	movs	r3, #0
 80214f6:	61fb      	str	r3, [r7, #28]
 80214f8:	e019      	b.n	802152e <nk_textedit_redo+0x11c>
                s->undo_char[u->char_storage + i] =
                    nk_str_rune_at(&state->string, u->where + i);
 80214fa:	687b      	ldr	r3, [r7, #4]
 80214fc:	f103 000c 	add.w	r0, r3, #12
 8021500:	697b      	ldr	r3, [r7, #20]
 8021502:	681a      	ldr	r2, [r3, #0]
 8021504:	69fb      	ldr	r3, [r7, #28]
 8021506:	441a      	add	r2, r3
                s->undo_char[u->char_storage + i] =
 8021508:	697b      	ldr	r3, [r7, #20]
 802150a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802150e:	4619      	mov	r1, r3
 8021510:	69fb      	ldr	r3, [r7, #28]
 8021512:	18cc      	adds	r4, r1, r3
                    nk_str_rune_at(&state->string, u->where + i);
 8021514:	4611      	mov	r1, r2
 8021516:	f7fb fd73 	bl	801d000 <nk_str_rune_at>
 802151a:	4601      	mov	r1, r0
                s->undo_char[u->char_storage + i] =
 802151c:	69ba      	ldr	r2, [r7, #24]
 802151e:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8021522:	009b      	lsls	r3, r3, #2
 8021524:	4413      	add	r3, r2
 8021526:	6059      	str	r1, [r3, #4]
            for (i=0; i < u->insert_length; ++i) {
 8021528:	69fb      	ldr	r3, [r7, #28]
 802152a:	3301      	adds	r3, #1
 802152c:	61fb      	str	r3, [r7, #28]
 802152e:	697b      	ldr	r3, [r7, #20]
 8021530:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021534:	461a      	mov	r2, r3
 8021536:	69fb      	ldr	r3, [r7, #28]
 8021538:	4293      	cmp	r3, r2
 802153a:	dbde      	blt.n	80214fa <nk_textedit_redo+0xe8>
            }
        }
        nk_str_delete_runes(&state->string, r.where, r.delete_length);
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	330c      	adds	r3, #12
 8021540:	68b9      	ldr	r1, [r7, #8]
 8021542:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021546:	4618      	mov	r0, r3
 8021548:	f7fb fbd4 	bl	801ccf4 <nk_str_delete_runes>
    }

    if (r.insert_length) {
 802154c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8021550:	2b00      	cmp	r3, #0
 8021552:	d00f      	beq.n	8021574 <nk_textedit_redo+0x162>
        /* easy case: need to insert n characters */
        nk_str_insert_text_runes(&state->string, r.where,
 8021554:	687b      	ldr	r3, [r7, #4]
 8021556:	f103 000c 	add.w	r0, r3, #12
 802155a:	68b9      	ldr	r1, [r7, #8]
            &s->undo_char[r.char_storage], r.insert_length);
 802155c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8021560:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8021564:	009b      	lsls	r3, r3, #2
 8021566:	69ba      	ldr	r2, [r7, #24]
 8021568:	4413      	add	r3, r2
 802156a:	1d1a      	adds	r2, r3, #4
 802156c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
        nk_str_insert_text_runes(&state->string, r.where,
 8021570:	f7fb faae 	bl	801cad0 <nk_str_insert_text_runes>
    }
    state->cursor = r.where + r.insert_length;
 8021574:	68bb      	ldr	r3, [r7, #8]
 8021576:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 802157a:	441a      	add	r2, r3
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	659a      	str	r2, [r3, #88]	; 0x58

    s->undo_point++;
 8021580:	69bb      	ldr	r3, [r7, #24]
 8021582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021586:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 802158a:	b29b      	uxth	r3, r3
 802158c:	3301      	adds	r3, #1
 802158e:	b29b      	uxth	r3, r3
 8021590:	b21a      	sxth	r2, r3
 8021592:	69bb      	ldr	r3, [r7, #24]
 8021594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021598:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
    s->redo_point++;
 802159c:	69bb      	ldr	r3, [r7, #24]
 802159e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80215a2:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 80215a6:	b29b      	uxth	r3, r3
 80215a8:	3301      	adds	r3, #1
 80215aa:	b29b      	uxth	r3, r3
 80215ac:	b21a      	sxth	r2, r3
 80215ae:	69bb      	ldr	r3, [r7, #24]
 80215b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80215b4:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
 80215b8:	e000      	b.n	80215bc <nk_textedit_redo+0x1aa>
        return;
 80215ba:	bf00      	nop
}
 80215bc:	3724      	adds	r7, #36	; 0x24
 80215be:	46bd      	mov	sp, r7
 80215c0:	bd90      	pop	{r4, r7, pc}

080215c2 <nk_textedit_makeundo_insert>:
NK_INTERN void
nk_textedit_makeundo_insert(struct nk_text_edit *state, int where, int length)
{
 80215c2:	b580      	push	{r7, lr}
 80215c4:	b084      	sub	sp, #16
 80215c6:	af00      	add	r7, sp, #0
 80215c8:	60f8      	str	r0, [r7, #12]
 80215ca:	60b9      	str	r1, [r7, #8]
 80215cc:	607a      	str	r2, [r7, #4]
    nk_textedit_createundo(&state->undo, where, 0, length);
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	2200      	movs	r2, #0
 80215d8:	68b9      	ldr	r1, [r7, #8]
 80215da:	f7ff fdbb 	bl	8021154 <nk_textedit_createundo>
}
 80215de:	bf00      	nop
 80215e0:	3710      	adds	r7, #16
 80215e2:	46bd      	mov	sp, r7
 80215e4:	bd80      	pop	{r7, pc}

080215e6 <nk_textedit_makeundo_delete>:
NK_INTERN void
nk_textedit_makeundo_delete(struct nk_text_edit *state, int where, int length)
{
 80215e6:	b590      	push	{r4, r7, lr}
 80215e8:	b087      	sub	sp, #28
 80215ea:	af00      	add	r7, sp, #0
 80215ec:	60f8      	str	r0, [r7, #12]
 80215ee:	60b9      	str	r1, [r7, #8]
 80215f0:	607a      	str	r2, [r7, #4]
    int i;
    nk_rune *p = nk_textedit_createundo(&state->undo, where, length, 0);
 80215f2:	68fb      	ldr	r3, [r7, #12]
 80215f4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80215f8:	2300      	movs	r3, #0
 80215fa:	687a      	ldr	r2, [r7, #4]
 80215fc:	68b9      	ldr	r1, [r7, #8]
 80215fe:	f7ff fda9 	bl	8021154 <nk_textedit_createundo>
 8021602:	6138      	str	r0, [r7, #16]
    if (p) {
 8021604:	693b      	ldr	r3, [r7, #16]
 8021606:	2b00      	cmp	r3, #0
 8021608:	d017      	beq.n	802163a <nk_textedit_makeundo_delete+0x54>
        for (i=0; i < length; ++i)
 802160a:	2300      	movs	r3, #0
 802160c:	617b      	str	r3, [r7, #20]
 802160e:	e010      	b.n	8021632 <nk_textedit_makeundo_delete+0x4c>
            p[i] = nk_str_rune_at(&state->string, where+i);
 8021610:	68fb      	ldr	r3, [r7, #12]
 8021612:	f103 000c 	add.w	r0, r3, #12
 8021616:	68ba      	ldr	r2, [r7, #8]
 8021618:	697b      	ldr	r3, [r7, #20]
 802161a:	18d1      	adds	r1, r2, r3
 802161c:	697b      	ldr	r3, [r7, #20]
 802161e:	009b      	lsls	r3, r3, #2
 8021620:	693a      	ldr	r2, [r7, #16]
 8021622:	18d4      	adds	r4, r2, r3
 8021624:	f7fb fcec 	bl	801d000 <nk_str_rune_at>
 8021628:	4603      	mov	r3, r0
 802162a:	6023      	str	r3, [r4, #0]
        for (i=0; i < length; ++i)
 802162c:	697b      	ldr	r3, [r7, #20]
 802162e:	3301      	adds	r3, #1
 8021630:	617b      	str	r3, [r7, #20]
 8021632:	697a      	ldr	r2, [r7, #20]
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	429a      	cmp	r2, r3
 8021638:	dbea      	blt.n	8021610 <nk_textedit_makeundo_delete+0x2a>
    }
}
 802163a:	bf00      	nop
 802163c:	371c      	adds	r7, #28
 802163e:	46bd      	mov	sp, r7
 8021640:	bd90      	pop	{r4, r7, pc}

08021642 <nk_textedit_makeundo_replace>:
NK_INTERN void
nk_textedit_makeundo_replace(struct nk_text_edit *state, int where,
    int old_length, int new_length)
{
 8021642:	b590      	push	{r4, r7, lr}
 8021644:	b087      	sub	sp, #28
 8021646:	af00      	add	r7, sp, #0
 8021648:	60f8      	str	r0, [r7, #12]
 802164a:	60b9      	str	r1, [r7, #8]
 802164c:	607a      	str	r2, [r7, #4]
 802164e:	603b      	str	r3, [r7, #0]
    int i;
    nk_rune *p = nk_textedit_createundo(&state->undo, where, old_length, new_length);
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8021656:	683b      	ldr	r3, [r7, #0]
 8021658:	687a      	ldr	r2, [r7, #4]
 802165a:	68b9      	ldr	r1, [r7, #8]
 802165c:	f7ff fd7a 	bl	8021154 <nk_textedit_createundo>
 8021660:	6138      	str	r0, [r7, #16]
    if (p) {
 8021662:	693b      	ldr	r3, [r7, #16]
 8021664:	2b00      	cmp	r3, #0
 8021666:	d017      	beq.n	8021698 <nk_textedit_makeundo_replace+0x56>
        for (i=0; i < old_length; ++i)
 8021668:	2300      	movs	r3, #0
 802166a:	617b      	str	r3, [r7, #20]
 802166c:	e010      	b.n	8021690 <nk_textedit_makeundo_replace+0x4e>
            p[i] = nk_str_rune_at(&state->string, where+i);
 802166e:	68fb      	ldr	r3, [r7, #12]
 8021670:	f103 000c 	add.w	r0, r3, #12
 8021674:	68ba      	ldr	r2, [r7, #8]
 8021676:	697b      	ldr	r3, [r7, #20]
 8021678:	18d1      	adds	r1, r2, r3
 802167a:	697b      	ldr	r3, [r7, #20]
 802167c:	009b      	lsls	r3, r3, #2
 802167e:	693a      	ldr	r2, [r7, #16]
 8021680:	18d4      	adds	r4, r2, r3
 8021682:	f7fb fcbd 	bl	801d000 <nk_str_rune_at>
 8021686:	4603      	mov	r3, r0
 8021688:	6023      	str	r3, [r4, #0]
        for (i=0; i < old_length; ++i)
 802168a:	697b      	ldr	r3, [r7, #20]
 802168c:	3301      	adds	r3, #1
 802168e:	617b      	str	r3, [r7, #20]
 8021690:	697a      	ldr	r2, [r7, #20]
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	429a      	cmp	r2, r3
 8021696:	dbea      	blt.n	802166e <nk_textedit_makeundo_replace+0x2c>
    }
}
 8021698:	bf00      	nop
 802169a:	371c      	adds	r7, #28
 802169c:	46bd      	mov	sp, r7
 802169e:	bd90      	pop	{r4, r7, pc}

080216a0 <nk_textedit_clear_state>:
NK_LIB void
nk_textedit_clear_state(struct nk_text_edit *state, enum nk_text_edit_type type,
    nk_plugin_filter filter)
{
 80216a0:	b590      	push	{r4, r7, lr}
 80216a2:	b085      	sub	sp, #20
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	60f8      	str	r0, [r7, #12]
 80216a8:	460b      	mov	r3, r1
 80216aa:	607a      	str	r2, [r7, #4]
 80216ac:	72fb      	strb	r3, [r7, #11]
    /* reset the state to default */
   state->undo.undo_point = 0;
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216b4:	2200      	movs	r2, #0
 80216b6:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
   state->undo.undo_char_point = 0;
 80216ba:	68fb      	ldr	r3, [r7, #12]
 80216bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216c0:	2200      	movs	r2, #0
 80216c2:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
   state->undo.redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;
 80216c6:	68fb      	ldr	r3, [r7, #12]
 80216c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216cc:	2263      	movs	r2, #99	; 0x63
 80216ce:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
   state->undo.redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80216dc:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
   state->select_end = state->select_start = 0;
 80216e0:	68fb      	ldr	r3, [r7, #12]
 80216e2:	2200      	movs	r2, #0
 80216e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80216e6:	68fb      	ldr	r3, [r7, #12]
 80216e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80216ea:	68fb      	ldr	r3, [r7, #12]
 80216ec:	661a      	str	r2, [r3, #96]	; 0x60
   state->cursor = 0;
 80216ee:	68fb      	ldr	r3, [r7, #12]
 80216f0:	2200      	movs	r2, #0
 80216f2:	659a      	str	r2, [r3, #88]	; 0x58
   state->has_preferred_x = 0;
 80216f4:	68fb      	ldr	r3, [r7, #12]
 80216f6:	2200      	movs	r2, #0
 80216f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   state->preferred_x = 0;
 80216fc:	68fb      	ldr	r3, [r7, #12]
 80216fe:	f04f 0200 	mov.w	r2, #0
 8021702:	66da      	str	r2, [r3, #108]	; 0x6c
   state->cursor_at_end_of_line = 0;
 8021704:	68fb      	ldr	r3, [r7, #12]
 8021706:	2200      	movs	r2, #0
 8021708:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
   state->initialized = 1;
 802170c:	68fb      	ldr	r3, [r7, #12]
 802170e:	2201      	movs	r2, #1
 8021710:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   state->single_line = (unsigned char)(type == NK_TEXT_EDIT_SINGLE_LINE);
 8021714:	7afb      	ldrb	r3, [r7, #11]
 8021716:	2b00      	cmp	r3, #0
 8021718:	bf0c      	ite	eq
 802171a:	2301      	moveq	r3, #1
 802171c:	2300      	movne	r3, #0
 802171e:	b2db      	uxtb	r3, r3
 8021720:	461a      	mov	r2, r3
 8021722:	68fb      	ldr	r3, [r7, #12]
 8021724:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   state->mode = NK_TEXT_EDIT_MODE_VIEW;
 8021728:	68fb      	ldr	r3, [r7, #12]
 802172a:	2200      	movs	r2, #0
 802172c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   state->filter = filter;
 8021730:	68fb      	ldr	r3, [r7, #12]
 8021732:	687a      	ldr	r2, [r7, #4]
 8021734:	64da      	str	r2, [r3, #76]	; 0x4c
   state->scrollbar = nk_vec2(0,0);
 8021736:	68fc      	ldr	r4, [r7, #12]
 8021738:	eddf 0a08 	vldr	s1, [pc, #32]	; 802175c <nk_textedit_clear_state+0xbc>
 802173c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 802175c <nk_textedit_clear_state+0xbc>
 8021740:	f7f5 f926 	bl	8016990 <nk_vec2>
 8021744:	eeb0 7a40 	vmov.f32	s14, s0
 8021748:	eef0 7a60 	vmov.f32	s15, s1
 802174c:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
 8021750:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8021754:	bf00      	nop
 8021756:	3714      	adds	r7, #20
 8021758:	46bd      	mov	sp, r7
 802175a:	bd90      	pop	{r4, r7, pc}
 802175c:	00000000 	.word	0x00000000

08021760 <nk_textedit_select_all>:
    nk_str_init_default(&state->string);
}
#endif
NK_API void
nk_textedit_select_all(struct nk_text_edit *state)
{
 8021760:	b580      	push	{r7, lr}
 8021762:	b082      	sub	sp, #8
 8021764:	af00      	add	r7, sp, #0
 8021766:	6078      	str	r0, [r7, #4]
    NK_ASSERT(state);
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	2b00      	cmp	r3, #0
 802176c:	d106      	bne.n	802177c <nk_textedit_select_all+0x1c>
 802176e:	4b09      	ldr	r3, [pc, #36]	; (8021794 <nk_textedit_select_all+0x34>)
 8021770:	4a09      	ldr	r2, [pc, #36]	; (8021798 <nk_textedit_select_all+0x38>)
 8021772:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8021776:	4809      	ldr	r0, [pc, #36]	; (802179c <nk_textedit_select_all+0x3c>)
 8021778:	f003 f9ae 	bl	8024ad8 <__assert_func>
    state->select_start = 0;
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	2200      	movs	r2, #0
 8021780:	65da      	str	r2, [r3, #92]	; 0x5c
    state->select_end = state->string.len;
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021786:	687b      	ldr	r3, [r7, #4]
 8021788:	661a      	str	r2, [r3, #96]	; 0x60
}
 802178a:	bf00      	nop
 802178c:	3708      	adds	r7, #8
 802178e:	46bd      	mov	sp, r7
 8021790:	bd80      	pop	{r7, pc}
 8021792:	bf00      	nop
 8021794:	0802930c 	.word	0x0802930c
 8021798:	0802ab94 	.word	0x0802ab94
 802179c:	08029314 	.word	0x08029314

080217a0 <nk_tree_state_base>:
 *
 * ===============================================================*/
NK_INTERN int
nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states *state)
{
 80217a0:	b580      	push	{r7, lr}
 80217a2:	b0aa      	sub	sp, #168	; 0xa8
 80217a4:	af04      	add	r7, sp, #16
 80217a6:	60f8      	str	r0, [r7, #12]
 80217a8:	607a      	str	r2, [r7, #4]
 80217aa:	603b      	str	r3, [r7, #0]
 80217ac:	460b      	mov	r3, r1
 80217ae:	72fb      	strb	r3, [r7, #11]
    const struct nk_style_button *button;
    enum nk_symbol_type symbol;
    float row_height;

    struct nk_vec2 item_spacing;
    struct nk_rect header = {0,0,0,0};
 80217b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80217b4:	2200      	movs	r2, #0
 80217b6:	601a      	str	r2, [r3, #0]
 80217b8:	605a      	str	r2, [r3, #4]
 80217ba:	609a      	str	r2, [r3, #8]
 80217bc:	60da      	str	r2, [r3, #12]
    struct nk_rect sym = {0,0,0,0};
 80217be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80217c2:	2200      	movs	r2, #0
 80217c4:	601a      	str	r2, [r3, #0]
 80217c6:	605a      	str	r2, [r3, #4]
 80217c8:	609a      	str	r2, [r3, #8]
 80217ca:	60da      	str	r2, [r3, #12]
    struct nk_text text;

    nk_flags ws = 0;
 80217cc:	2300      	movs	r3, #0
 80217ce:	627b      	str	r3, [r7, #36]	; 0x24
    enum nk_widget_layout_states widget_state;

    NK_ASSERT(ctx);
 80217d0:	68fb      	ldr	r3, [r7, #12]
 80217d2:	2b00      	cmp	r3, #0
 80217d4:	d105      	bne.n	80217e2 <nk_tree_state_base+0x42>
 80217d6:	4bcf      	ldr	r3, [pc, #828]	; (8021b14 <nk_tree_state_base+0x374>)
 80217d8:	4acf      	ldr	r2, [pc, #828]	; (8021b18 <nk_tree_state_base+0x378>)
 80217da:	211e      	movs	r1, #30
 80217dc:	48cf      	ldr	r0, [pc, #828]	; (8021b1c <nk_tree_state_base+0x37c>)
 80217de:	f003 f97b 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 80217e2:	68fb      	ldr	r3, [r7, #12]
 80217e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80217e8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d105      	bne.n	80217fc <nk_tree_state_base+0x5c>
 80217f0:	4bcb      	ldr	r3, [pc, #812]	; (8021b20 <nk_tree_state_base+0x380>)
 80217f2:	4ac9      	ldr	r2, [pc, #804]	; (8021b18 <nk_tree_state_base+0x378>)
 80217f4:	211f      	movs	r1, #31
 80217f6:	48c9      	ldr	r0, [pc, #804]	; (8021b1c <nk_tree_state_base+0x37c>)
 80217f8:	f003 f96e 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80217fc:	68fb      	ldr	r3, [r7, #12]
 80217fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021802:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802180a:	2b00      	cmp	r3, #0
 802180c:	d105      	bne.n	802181a <nk_tree_state_base+0x7a>
 802180e:	4bc5      	ldr	r3, [pc, #788]	; (8021b24 <nk_tree_state_base+0x384>)
 8021810:	4ac1      	ldr	r2, [pc, #772]	; (8021b18 <nk_tree_state_base+0x378>)
 8021812:	2120      	movs	r1, #32
 8021814:	48c1      	ldr	r0, [pc, #772]	; (8021b1c <nk_tree_state_base+0x37c>)
 8021816:	f003 f95f 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 802181a:	68fb      	ldr	r3, [r7, #12]
 802181c:	2b00      	cmp	r3, #0
 802181e:	d00f      	beq.n	8021840 <nk_tree_state_base+0xa0>
 8021820:	68fb      	ldr	r3, [r7, #12]
 8021822:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021826:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802182a:	2b00      	cmp	r3, #0
 802182c:	d008      	beq.n	8021840 <nk_tree_state_base+0xa0>
 802182e:	68fb      	ldr	r3, [r7, #12]
 8021830:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021834:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802183c:	2b00      	cmp	r3, #0
 802183e:	d101      	bne.n	8021844 <nk_tree_state_base+0xa4>
        return 0;
 8021840:	2300      	movs	r3, #0
 8021842:	e2f2      	b.n	8021e2a <nk_tree_state_base+0x68a>

    /* cache some data */
    win = ctx->current;
 8021844:	68fb      	ldr	r3, [r7, #12]
 8021846:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802184a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802184e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    layout = win->layout;
 8021852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802185a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    out = &win->buffer;
 802185e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021862:	3364      	adds	r3, #100	; 0x64
 8021864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    style = &ctx->style;
 8021868:	68fb      	ldr	r3, [r7, #12]
 802186a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 802186e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    item_spacing = style->window.spacing;
 8021872:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802187a:	461a      	mov	r2, r3
 802187c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021880:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8021884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021888:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate header bounds and draw background */
    row_height = 4 + style->font->height + 2 * style->tab.padding.y;
 802188c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021890:	681b      	ldr	r3, [r3, #0]
 8021892:	edd3 7a01 	vldr	s15, [r3, #4]
 8021896:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 802189a:	ee37 7a87 	vadd.f32	s14, s15, s14
 802189e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80218a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80218a6:	f203 5374 	addw	r3, r3, #1396	; 0x574
 80218aa:	edd3 7a00 	vldr	s15, [r3]
 80218ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80218b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80218b6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    nk_layout_set_min_row_height(ctx, row_height);
 80218ba:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80218be:	68f8      	ldr	r0, [r7, #12]
 80218c0:	f7f3 feda 	bl	8015678 <nk_layout_set_min_row_height>
    nk_layout_row_dynamic(ctx, row_height, 1);
 80218c4:	2101      	movs	r1, #1
 80218c6:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80218ca:	68f8      	ldr	r0, [r7, #12]
 80218cc:	f7f4 f97e 	bl	8015bcc <nk_layout_row_dynamic>
    nk_layout_reset_min_row_height(ctx);
 80218d0:	68f8      	ldr	r0, [r7, #12]
 80218d2:	f7f3 ff2b 	bl	801572c <nk_layout_reset_min_row_height>

    widget_state = nk_widget(&header, ctx);
 80218d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80218da:	68f9      	ldr	r1, [r7, #12]
 80218dc:	4618      	mov	r0, r3
 80218de:	f001 fe15 	bl	802350c <nk_widget>
 80218e2:	4603      	mov	r3, r0
 80218e4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    if (type == NK_TREE_TAB) {
 80218e8:	7afb      	ldrb	r3, [r7, #11]
 80218ea:	2b01      	cmp	r3, #1
 80218ec:	f040 80af 	bne.w	8021a4e <nk_tree_state_base+0x2ae>
        const struct nk_style_item *background = &style->tab.background;
 80218f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80218f4:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80218f8:	331c      	adds	r3, #28
 80218fa:	677b      	str	r3, [r7, #116]	; 0x74

        switch(background->type) {
 80218fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80218fe:	781b      	ldrb	r3, [r3, #0]
 8021900:	2b02      	cmp	r3, #2
 8021902:	d021      	beq.n	8021948 <nk_tree_state_base+0x1a8>
 8021904:	2b02      	cmp	r3, #2
 8021906:	f300 80a9 	bgt.w	8021a5c <nk_tree_state_base+0x2bc>
 802190a:	2b00      	cmp	r3, #0
 802190c:	d036      	beq.n	802197c <nk_tree_state_base+0x1dc>
 802190e:	2b01      	cmp	r3, #1
 8021910:	f040 80a4 	bne.w	8021a5c <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, header, &background->data.image, nk_white);
 8021914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021916:	3304      	adds	r3, #4
 8021918:	4a83      	ldr	r2, [pc, #524]	; (8021b28 <nk_tree_state_base+0x388>)
 802191a:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 802191e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8021922:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021926:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 802192a:	6812      	ldr	r2, [r2, #0]
 802192c:	4619      	mov	r1, r3
 802192e:	eeb0 0a46 	vmov.f32	s0, s12
 8021932:	eef0 0a66 	vmov.f32	s1, s13
 8021936:	eeb0 1a47 	vmov.f32	s2, s14
 802193a:	eef0 1a67 	vmov.f32	s3, s15
 802193e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8021942:	f7f0 fc07 	bl	8012154 <nk_draw_image>
                break;
 8021946:	e089      	b.n	8021a5c <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, header, &background->data.slice, nk_white);
 8021948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802194a:	3304      	adds	r3, #4
 802194c:	4a76      	ldr	r2, [pc, #472]	; (8021b28 <nk_tree_state_base+0x388>)
 802194e:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8021952:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8021956:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 802195a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 802195e:	6812      	ldr	r2, [r2, #0]
 8021960:	4619      	mov	r1, r3
 8021962:	eeb0 0a46 	vmov.f32	s0, s12
 8021966:	eef0 0a66 	vmov.f32	s1, s13
 802196a:	eeb0 1a47 	vmov.f32	s2, s14
 802196e:	eef0 1a67 	vmov.f32	s3, s15
 8021972:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8021976:	f7f0 fcdf 	bl	8012338 <nk_draw_nine_slice>
                break;
 802197a:	e06f      	b.n	8021a5c <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, header, 0, style->tab.border_color);
 802197c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021984:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8021988:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 802198c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021990:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8021994:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 8021998:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8021b2c <nk_tree_state_base+0x38c>
 802199c:	eeb0 0a46 	vmov.f32	s0, s12
 80219a0:	eef0 0a66 	vmov.f32	s1, s13
 80219a4:	eeb0 1a47 	vmov.f32	s2, s14
 80219a8:	eef0 1a67 	vmov.f32	s3, s15
 80219ac:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80219b0:	f7f0 f876 	bl	8011aa0 <nk_fill_rect>
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 80219b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80219b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219bc:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80219c0:	edd3 5a00 	vldr	s11, [r3]
 80219c4:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 80219c8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80219cc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80219d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80219d4:	eeb0 2a65 	vmov.f32	s4, s11
 80219d8:	eeb0 0a46 	vmov.f32	s0, s12
 80219dc:	eef0 0a66 	vmov.f32	s1, s13
 80219e0:	eeb0 1a47 	vmov.f32	s2, s14
 80219e4:	eef0 1a67 	vmov.f32	s3, s15
 80219e8:	f7f4 ff52 	bl	8016890 <nk_shrink_rect>
 80219ec:	eeb0 6a40 	vmov.f32	s12, s0
 80219f0:	eef0 6a60 	vmov.f32	s13, s1
 80219f4:	eeb0 7a41 	vmov.f32	s14, s2
 80219f8:	eef0 7a61 	vmov.f32	s15, s3
 80219fc:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 8021a00:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 8021a04:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8021a08:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
                    style->tab.rounding, background->data.color);
 8021a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021a14:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8021a18:	edd3 5a00 	vldr	s11, [r3]
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 8021a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021a1e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8021a22:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8021a26:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8021a2a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8021a2e:	6859      	ldr	r1, [r3, #4]
 8021a30:	eeb0 2a65 	vmov.f32	s4, s11
 8021a34:	eeb0 0a46 	vmov.f32	s0, s12
 8021a38:	eef0 0a66 	vmov.f32	s1, s13
 8021a3c:	eeb0 1a47 	vmov.f32	s2, s14
 8021a40:	eef0 1a67 	vmov.f32	s3, s15
 8021a44:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8021a48:	f7f0 f82a 	bl	8011aa0 <nk_fill_rect>
                break;
 8021a4c:	e006      	b.n	8021a5c <nk_tree_state_base+0x2bc>
        }
    } else text.background = style->window.background;
 8021a4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021a56:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 8021a5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* update node state */
    in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;
 8021a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021a60:	685b      	ldr	r3, [r3, #4]
 8021a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d101      	bne.n	8021a6e <nk_tree_state_base+0x2ce>
 8021a6a:	68fb      	ldr	r3, [r7, #12]
 8021a6c:	e000      	b.n	8021a70 <nk_tree_state_base+0x2d0>
 8021a6e:	2300      	movs	r3, #0
 8021a70:	673b      	str	r3, [r7, #112]	; 0x70
    in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;
 8021a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d005      	beq.n	8021a84 <nk_tree_state_base+0x2e4>
 8021a78:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8021a7c:	2b01      	cmp	r3, #1
 8021a7e:	d101      	bne.n	8021a84 <nk_tree_state_base+0x2e4>
 8021a80:	68fb      	ldr	r3, [r7, #12]
 8021a82:	e000      	b.n	8021a86 <nk_tree_state_base+0x2e6>
 8021a84:	2300      	movs	r3, #0
 8021a86:	673b      	str	r3, [r7, #112]	; 0x70
    if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))
 8021a88:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8021a8c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8021a90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021a94:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8021a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8021aa0:	eeb0 0a46 	vmov.f32	s0, s12
 8021aa4:	eef0 0a66 	vmov.f32	s1, s13
 8021aa8:	eeb0 1a47 	vmov.f32	s2, s14
 8021aac:	eef0 1a67 	vmov.f32	s3, s15
 8021ab0:	4618      	mov	r0, r3
 8021ab2:	f7ed facf 	bl	800f054 <nk_button_behavior>
 8021ab6:	4603      	mov	r3, r0
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d00b      	beq.n	8021ad4 <nk_tree_state_base+0x334>
        *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;
 8021abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021ac0:	781b      	ldrb	r3, [r3, #0]
 8021ac2:	2b01      	cmp	r3, #1
 8021ac4:	bf14      	ite	ne
 8021ac6:	2301      	movne	r3, #1
 8021ac8:	2300      	moveq	r3, #0
 8021aca:	b2db      	uxtb	r3, r3
 8021acc:	461a      	mov	r2, r3
 8021ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021ad2:	701a      	strb	r2, [r3, #0]

    /* select correct button style */
    if (*state == NK_MAXIMIZED) {
 8021ad4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021ad8:	781b      	ldrb	r3, [r3, #0]
 8021ada:	2b01      	cmp	r3, #1
 8021adc:	d128      	bne.n	8021b30 <nk_tree_state_base+0x390>
        symbol = style->tab.sym_maximize;
 8021ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ae6:	f893 3561 	ldrb.w	r3, [r3, #1377]	; 0x561
 8021aea:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 8021aee:	7afb      	ldrb	r3, [r7, #11]
 8021af0:	2b01      	cmp	r3, #1
 8021af2:	d106      	bne.n	8021b02 <nk_tree_state_base+0x362>
            button = &style->tab.tab_maximize_button;
 8021af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021af8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8021afc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8021b00:	e030      	b.n	8021b64 <nk_tree_state_base+0x3c4>
        else button = &style->tab.node_maximize_button;
 8021b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b06:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8021b0a:	3310      	adds	r3, #16
 8021b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8021b10:	e028      	b.n	8021b64 <nk_tree_state_base+0x3c4>
 8021b12:	bf00      	nop
 8021b14:	08029350 	.word	0x08029350
 8021b18:	0802abb0 	.word	0x0802abb0
 8021b1c:	08029354 	.word	0x08029354
 8021b20:	08029370 	.word	0x08029370
 8021b24:	08029380 	.word	0x08029380
 8021b28:	0802abac 	.word	0x0802abac
 8021b2c:	00000000 	.word	0x00000000
    } else {
        symbol = style->tab.sym_minimize;
 8021b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b38:	f893 3560 	ldrb.w	r3, [r3, #1376]	; 0x560
 8021b3c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 8021b40:	7afb      	ldrb	r3, [r7, #11]
 8021b42:	2b01      	cmp	r3, #1
 8021b44:	d107      	bne.n	8021b56 <nk_tree_state_base+0x3b6>
            button = &style->tab.tab_minimize_button;
 8021b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b4a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8021b4e:	3318      	adds	r3, #24
 8021b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8021b54:	e006      	b.n	8021b64 <nk_tree_state_base+0x3c4>
        else button = &style->tab.node_minimize_button;
 8021b56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b5a:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8021b5e:	3308      	adds	r3, #8
 8021b60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    {/* draw triangle button */
    sym.w = sym.h = style->font->height;
 8021b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b68:	681b      	ldr	r3, [r3, #0]
 8021b6a:	685b      	ldr	r3, [r3, #4]
 8021b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8021b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021b70:	643b      	str	r3, [r7, #64]	; 0x40
    sym.y = header.y + style->tab.padding.y;
 8021b72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8021b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b7e:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8021b82:	edd3 7a00 	vldr	s15, [r3]
 8021b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021b8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sym.x = header.x + style->tab.padding.x;
 8021b8e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8021b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b9a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8021b9e:	edd3 7a00 	vldr	s15, [r3]
 8021ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021ba6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 8021baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021bae:	f103 0164 	add.w	r1, r3, #100	; 0x64
        button, 0, style->font);
 8021bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021bb6:	681b      	ldr	r3, [r3, #0]
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 8021bb8:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8021bbc:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8021bc0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8021bc4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8021bc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8021bcc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8021bd0:	9302      	str	r3, [sp, #8]
 8021bd2:	2300      	movs	r3, #0
 8021bd4:	9301      	str	r3, [sp, #4]
 8021bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8021bda:	9300      	str	r3, [sp, #0]
 8021bdc:	2300      	movs	r3, #0
 8021bde:	eeb0 0a46 	vmov.f32	s0, s12
 8021be2:	eef0 0a66 	vmov.f32	s1, s13
 8021be6:	eeb0 1a47 	vmov.f32	s2, s14
 8021bea:	eef0 1a67 	vmov.f32	s3, s15
 8021bee:	f7ed fdc3 	bl	800f778 <nk_do_button_symbol>

    if (img) {
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d039      	beq.n	8021c6c <nk_tree_state_base+0x4cc>
        /* draw optional image icon */
        sym.x = sym.x + sym.w + 4 * item_spacing.x;
 8021bf8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8021bfc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8021c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021c04:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021c08:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8021c0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021c14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_draw_image(&win->buffer, sym, img, nk_white);
 8021c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021c1c:	3364      	adds	r3, #100	; 0x64
 8021c1e:	4a85      	ldr	r2, [pc, #532]	; (8021e34 <nk_tree_state_base+0x694>)
 8021c20:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8021c24:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8021c28:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8021c2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8021c30:	6812      	ldr	r2, [r2, #0]
 8021c32:	6879      	ldr	r1, [r7, #4]
 8021c34:	eeb0 0a46 	vmov.f32	s0, s12
 8021c38:	eef0 0a66 	vmov.f32	s1, s13
 8021c3c:	eeb0 1a47 	vmov.f32	s2, s14
 8021c40:	eef0 1a67 	vmov.f32	s3, s15
 8021c44:	4618      	mov	r0, r3
 8021c46:	f7f0 fa85 	bl	8012154 <nk_draw_image>
        sym.w = style->font->height + style->tab.spacing.x;}
 8021c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021c4e:	681b      	ldr	r3, [r3, #0]
 8021c50:	ed93 7a01 	vldr	s14, [r3, #4]
 8021c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021c5c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8021c60:	edd3 7a00 	vldr	s15, [r3]
 8021c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021c68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    }

    {/* draw label */
    struct nk_rect label;
    header.w = NK_MAX(header.w, sym.w + item_spacing.x);
 8021c6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021c70:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8021c74:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c84:	d506      	bpl.n	8021c94 <nk_tree_state_base+0x4f4>
 8021c86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8021c8a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021c92:	e001      	b.n	8021c98 <nk_tree_state_base+0x4f8>
 8021c94:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8021c98:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.x = sym.x + sym.w + item_spacing.x;
 8021c9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8021ca0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8021ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021ca8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021cb0:	edc7 7a05 	vstr	s15, [r7, #20]
    label.y = sym.y;
 8021cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021cb6:	61bb      	str	r3, [r7, #24]
    label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);
 8021cb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021cbc:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8021cc0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8021cc4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8021cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021cd0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021cd4:	edd3 7a00 	vldr	s15, [r3]
 8021cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021ce0:	edc7 7a07 	vstr	s15, [r7, #28]
    label.h = style->font->height;
 8021ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	685b      	ldr	r3, [r3, #4]
 8021cec:	623b      	str	r3, [r7, #32]
    text.text = style->tab.text;
 8021cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021cf6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8021cfa:	637b      	str	r3, [r7, #52]	; 0x34
    text.padding = nk_vec2(0,0);
 8021cfc:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8021e38 <nk_tree_state_base+0x698>
 8021d00:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8021e38 <nk_tree_state_base+0x698>
 8021d04:	f7f4 fe44 	bl	8016990 <nk_vec2>
 8021d08:	eeb0 7a40 	vmov.f32	s14, s0
 8021d0c:	eef0 7a60 	vmov.f32	s15, s1
 8021d10:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8021d14:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 8021d18:	6838      	ldr	r0, [r7, #0]
 8021d1a:	f000 fcd1 	bl	80226c0 <nk_strlen>
 8021d1e:	4601      	mov	r1, r0
        NK_TEXT_LEFT, style->font);}
 8021d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021d24:	681b      	ldr	r3, [r3, #0]
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 8021d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8021d2a:	ed97 6a05 	vldr	s12, [r7, #20]
 8021d2e:	edd7 6a06 	vldr	s13, [r7, #24]
 8021d32:	ed97 7a07 	vldr	s14, [r7, #28]
 8021d36:	edd7 7a08 	vldr	s15, [r7, #32]
 8021d3a:	9301      	str	r3, [sp, #4]
 8021d3c:	2311      	movs	r3, #17
 8021d3e:	9300      	str	r3, [sp, #0]
 8021d40:	4613      	mov	r3, r2
 8021d42:	460a      	mov	r2, r1
 8021d44:	6839      	ldr	r1, [r7, #0]
 8021d46:	eeb0 0a46 	vmov.f32	s0, s12
 8021d4a:	eef0 0a66 	vmov.f32	s1, s13
 8021d4e:	eeb0 1a47 	vmov.f32	s2, s14
 8021d52:	eef0 1a67 	vmov.f32	s3, s15
 8021d56:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8021d5a:	f7fd fc07 	bl	801f56c <nk_widget_text>

    /* increase x-axis cursor widget position pointer */
    if (*state == NK_MAXIMIZED) {
 8021d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021d62:	781b      	ldrb	r3, [r3, #0]
 8021d64:	2b01      	cmp	r3, #1
 8021d66:	d15f      	bne.n	8021e28 <nk_tree_state_base+0x688>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
 8021d68:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8021d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021d70:	699b      	ldr	r3, [r3, #24]
 8021d72:	681b      	ldr	r3, [r3, #0]
 8021d74:	ee07 3a90 	vmov	s15, r3
 8021d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d88:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021d8c:	edd3 7a00 	vldr	s15, [r3]
 8021d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021d98:	edc3 7a08 	vstr	s15, [r3, #32]
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
 8021d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021da0:	ed93 7a04 	vldr	s14, [r3, #16]
 8021da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dac:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021db0:	edd3 7a00 	vldr	s15, [r3]
 8021db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dbc:	d507      	bpl.n	8021dce <nk_tree_state_base+0x62e>
 8021dbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dc6:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021dca:	681b      	ldr	r3, [r3, #0]
 8021dcc:	e002      	b.n	8021dd4 <nk_tree_state_base+0x634>
 8021dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021dd2:	691b      	ldr	r3, [r3, #16]
 8021dd4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021dd8:	6113      	str	r3, [r2, #16]
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
 8021dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021dde:	ed93 7a04 	vldr	s14, [r3, #16]
 8021de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dea:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021dee:	edd3 6a00 	vldr	s13, [r3]
 8021df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dfa:	f603 03ec 	addw	r3, r3, #2284	; 0x8ec
 8021dfe:	edd3 7a00 	vldr	s15, [r3]
 8021e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e0e:	edc3 7a04 	vstr	s15, [r3, #16]
        layout->row.tree_depth++;
 8021e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8021e1a:	1c5a      	adds	r2, r3, #1
 8021e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        return nk_true;
 8021e24:	2301      	movs	r3, #1
 8021e26:	e000      	b.n	8021e2a <nk_tree_state_base+0x68a>
    } else return nk_false;
 8021e28:	2300      	movs	r3, #0
}
 8021e2a:	4618      	mov	r0, r3
 8021e2c:	3798      	adds	r7, #152	; 0x98
 8021e2e:	46bd      	mov	sp, r7
 8021e30:	bd80      	pop	{r7, pc}
 8021e32:	bf00      	nop
 8021e34:	0802abac 	.word	0x0802abac
 8021e38:	00000000 	.word	0x00000000

08021e3c <nk_tree_base>:
NK_INTERN int
nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 8021e3c:	b580      	push	{r7, lr}
 8021e3e:	b08a      	sub	sp, #40	; 0x28
 8021e40:	af02      	add	r7, sp, #8
 8021e42:	60f8      	str	r0, [r7, #12]
 8021e44:	607a      	str	r2, [r7, #4]
 8021e46:	603b      	str	r3, [r7, #0]
 8021e48:	460b      	mov	r3, r1
 8021e4a:	72fb      	strb	r3, [r7, #11]
    struct nk_window *win = ctx->current;
 8021e4c:	68fb      	ldr	r3, [r7, #12]
 8021e4e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021e52:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021e56:	617b      	str	r3, [r7, #20]
    int title_len = 0;
 8021e58:	2300      	movs	r3, #0
 8021e5a:	613b      	str	r3, [r7, #16]
    nk_hash tree_hash = 0;
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	61fb      	str	r3, [r7, #28]
    nk_uint *state = 0;
 8021e60:	2300      	movs	r3, #0
 8021e62:	61bb      	str	r3, [r7, #24]

    /* retrieve tree state from internal widget state tables */
    if (!hash) {
 8021e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d10b      	bne.n	8021e82 <nk_tree_base+0x46>
        title_len = (int)nk_strlen(title);
 8021e6a:	6838      	ldr	r0, [r7, #0]
 8021e6c:	f000 fc28 	bl	80226c0 <nk_strlen>
 8021e70:	6138      	str	r0, [r7, #16]
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
 8021e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e74:	461a      	mov	r2, r3
 8021e76:	6939      	ldr	r1, [r7, #16]
 8021e78:	6838      	ldr	r0, [r7, #0]
 8021e7a:	f001 f899 	bl	8022fb0 <nk_murmur_hash>
 8021e7e:	61f8      	str	r0, [r7, #28]
 8021e80:	e006      	b.n	8021e90 <nk_tree_base+0x54>
    } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);
 8021e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e84:	461a      	mov	r2, r3
 8021e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021e8a:	f001 f891 	bl	8022fb0 <nk_murmur_hash>
 8021e8e:	61f8      	str	r0, [r7, #28]
    state = nk_find_value(win, tree_hash);
 8021e90:	69f9      	ldr	r1, [r7, #28]
 8021e92:	6978      	ldr	r0, [r7, #20]
 8021e94:	f7fd fb2e 	bl	801f4f4 <nk_find_value>
 8021e98:	61b8      	str	r0, [r7, #24]
    if (!state) {
 8021e9a:	69bb      	ldr	r3, [r7, #24]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d10a      	bne.n	8021eb6 <nk_tree_base+0x7a>
        state = nk_add_value(ctx, win, tree_hash, 0);
 8021ea0:	2300      	movs	r3, #0
 8021ea2:	69fa      	ldr	r2, [r7, #28]
 8021ea4:	6979      	ldr	r1, [r7, #20]
 8021ea6:	68f8      	ldr	r0, [r7, #12]
 8021ea8:	f7fd faaa 	bl	801f400 <nk_add_value>
 8021eac:	61b8      	str	r0, [r7, #24]
        *state = initial_state;
 8021eae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021eb2:	69bb      	ldr	r3, [r7, #24]
 8021eb4:	601a      	str	r2, [r3, #0]
    }
    return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);
 8021eb6:	7af9      	ldrb	r1, [r7, #11]
 8021eb8:	69bb      	ldr	r3, [r7, #24]
 8021eba:	9300      	str	r3, [sp, #0]
 8021ebc:	683b      	ldr	r3, [r7, #0]
 8021ebe:	687a      	ldr	r2, [r7, #4]
 8021ec0:	68f8      	ldr	r0, [r7, #12]
 8021ec2:	f7ff fc6d 	bl	80217a0 <nk_tree_state_base>
 8021ec6:	4603      	mov	r3, r0
}
 8021ec8:	4618      	mov	r0, r3
 8021eca:	3720      	adds	r7, #32
 8021ecc:	46bd      	mov	sp, r7
 8021ece:	bd80      	pop	{r7, pc}

08021ed0 <nk_tree_state_pop>:
{
    return nk_tree_state_base(ctx, type, &img, title, state);
}
NK_API void
nk_tree_state_pop(struct nk_context *ctx)
{
 8021ed0:	b580      	push	{r7, lr}
 8021ed2:	b084      	sub	sp, #16
 8021ed4:	af00      	add	r7, sp, #0
 8021ed6:	6078      	str	r0, [r7, #4]
    struct nk_window *win = 0;
 8021ed8:	2300      	movs	r3, #0
 8021eda:	60fb      	str	r3, [r7, #12]
    struct nk_panel *layout = 0;
 8021edc:	2300      	movs	r3, #0
 8021ede:	60bb      	str	r3, [r7, #8]

    NK_ASSERT(ctx);
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d105      	bne.n	8021ef2 <nk_tree_state_pop+0x22>
 8021ee6:	4b43      	ldr	r3, [pc, #268]	; (8021ff4 <nk_tree_state_pop+0x124>)
 8021ee8:	4a43      	ldr	r2, [pc, #268]	; (8021ff8 <nk_tree_state_pop+0x128>)
 8021eea:	21a2      	movs	r1, #162	; 0xa2
 8021eec:	4843      	ldr	r0, [pc, #268]	; (8021ffc <nk_tree_state_pop+0x12c>)
 8021eee:	f002 fdf3 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021ef8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021efc:	2b00      	cmp	r3, #0
 8021efe:	d105      	bne.n	8021f0c <nk_tree_state_pop+0x3c>
 8021f00:	4b3f      	ldr	r3, [pc, #252]	; (8022000 <nk_tree_state_pop+0x130>)
 8021f02:	4a3d      	ldr	r2, [pc, #244]	; (8021ff8 <nk_tree_state_pop+0x128>)
 8021f04:	21a3      	movs	r1, #163	; 0xa3
 8021f06:	483d      	ldr	r0, [pc, #244]	; (8021ffc <nk_tree_state_pop+0x12c>)
 8021f08:	f002 fde6 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f12:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	d105      	bne.n	8021f2a <nk_tree_state_pop+0x5a>
 8021f1e:	4b39      	ldr	r3, [pc, #228]	; (8022004 <nk_tree_state_pop+0x134>)
 8021f20:	4a35      	ldr	r2, [pc, #212]	; (8021ff8 <nk_tree_state_pop+0x128>)
 8021f22:	21a4      	movs	r1, #164	; 0xa4
 8021f24:	4835      	ldr	r0, [pc, #212]	; (8021ffc <nk_tree_state_pop+0x12c>)
 8021f26:	f002 fdd7 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d05c      	beq.n	8021fea <nk_tree_state_pop+0x11a>
 8021f30:	687b      	ldr	r3, [r7, #4]
 8021f32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f36:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d055      	beq.n	8021fea <nk_tree_state_pop+0x11a>
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f44:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d04c      	beq.n	8021fea <nk_tree_state_pop+0x11a>
        return;

    win = ctx->current;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f56:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f5a:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8021f5c:	68fb      	ldr	r3, [r7, #12]
 8021f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021f62:	60bb      	str	r3, [r7, #8]
    layout->at_x -= ctx->style.tab.indent + (float)*layout->offset_x;
 8021f64:	68bb      	ldr	r3, [r7, #8]
 8021f66:	ed93 7a08 	vldr	s14, [r3, #32]
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f70:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8021f74:	edd3 6a00 	vldr	s13, [r3]
 8021f78:	68bb      	ldr	r3, [r7, #8]
 8021f7a:	699b      	ldr	r3, [r3, #24]
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	ee07 3a90 	vmov	s15, r3
 8021f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021f8e:	68bb      	ldr	r3, [r7, #8]
 8021f90:	edc3 7a08 	vstr	s15, [r3, #32]
    layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;
 8021f94:	68bb      	ldr	r3, [r7, #8]
 8021f96:	ed93 7a04 	vldr	s14, [r3, #16]
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021fa0:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8021fa4:	edd3 6a00 	vldr	s13, [r3]
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021fae:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8021fb2:	edd3 7a00 	vldr	s15, [r3]
 8021fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021fbe:	68bb      	ldr	r3, [r7, #8]
 8021fc0:	edc3 7a04 	vstr	s15, [r3, #16]
    NK_ASSERT(layout->row.tree_depth);
 8021fc4:	68bb      	ldr	r3, [r7, #8]
 8021fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d105      	bne.n	8021fda <nk_tree_state_pop+0x10a>
 8021fce:	4b0e      	ldr	r3, [pc, #56]	; (8022008 <nk_tree_state_pop+0x138>)
 8021fd0:	4a09      	ldr	r2, [pc, #36]	; (8021ff8 <nk_tree_state_pop+0x128>)
 8021fd2:	21ac      	movs	r1, #172	; 0xac
 8021fd4:	4809      	ldr	r0, [pc, #36]	; (8021ffc <nk_tree_state_pop+0x12c>)
 8021fd6:	f002 fd7f 	bl	8024ad8 <__assert_func>
    layout->row.tree_depth--;
 8021fda:	68bb      	ldr	r3, [r7, #8]
 8021fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8021fe0:	1e5a      	subs	r2, r3, #1
 8021fe2:	68bb      	ldr	r3, [r7, #8]
 8021fe4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8021fe8:	e000      	b.n	8021fec <nk_tree_state_pop+0x11c>
        return;
 8021fea:	bf00      	nop
}
 8021fec:	3710      	adds	r7, #16
 8021fee:	46bd      	mov	sp, r7
 8021ff0:	bd80      	pop	{r7, pc}
 8021ff2:	bf00      	nop
 8021ff4:	08029350 	.word	0x08029350
 8021ff8:	0802abc4 	.word	0x0802abc4
 8021ffc:	08029354 	.word	0x08029354
 8022000:	08029370 	.word	0x08029370
 8022004:	08029380 	.word	0x08029380
 8022008:	08029398 	.word	0x08029398

0802200c <nk_tree_push_hashed>:
NK_API nk_bool
nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,
    const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 802200c:	b580      	push	{r7, lr}
 802200e:	b088      	sub	sp, #32
 8022010:	af04      	add	r7, sp, #16
 8022012:	60f8      	str	r0, [r7, #12]
 8022014:	607a      	str	r2, [r7, #4]
 8022016:	461a      	mov	r2, r3
 8022018:	460b      	mov	r3, r1
 802201a:	72fb      	strb	r3, [r7, #11]
 802201c:	4613      	mov	r3, r2
 802201e:	72bb      	strb	r3, [r7, #10]
    return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);
 8022020:	7af9      	ldrb	r1, [r7, #11]
 8022022:	6a3b      	ldr	r3, [r7, #32]
 8022024:	9303      	str	r3, [sp, #12]
 8022026:	69fb      	ldr	r3, [r7, #28]
 8022028:	9302      	str	r3, [sp, #8]
 802202a:	69bb      	ldr	r3, [r7, #24]
 802202c:	9301      	str	r3, [sp, #4]
 802202e:	7abb      	ldrb	r3, [r7, #10]
 8022030:	9300      	str	r3, [sp, #0]
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	2200      	movs	r2, #0
 8022036:	68f8      	ldr	r0, [r7, #12]
 8022038:	f7ff ff00 	bl	8021e3c <nk_tree_base>
 802203c:	4603      	mov	r3, r0
}
 802203e:	4618      	mov	r0, r3
 8022040:	3710      	adds	r7, #16
 8022042:	46bd      	mov	sp, r7
 8022044:	bd80      	pop	{r7, pc}

08022046 <nk_tree_pop>:
{
    return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);
}
NK_API void
nk_tree_pop(struct nk_context *ctx)
{
 8022046:	b580      	push	{r7, lr}
 8022048:	b082      	sub	sp, #8
 802204a:	af00      	add	r7, sp, #0
 802204c:	6078      	str	r0, [r7, #4]
    nk_tree_state_pop(ctx);
 802204e:	6878      	ldr	r0, [r7, #4]
 8022050:	f7ff ff3e 	bl	8021ed0 <nk_tree_state_pop>
}
 8022054:	bf00      	nop
 8022056:	3708      	adds	r7, #8
 8022058:	46bd      	mov	sp, r7
 802205a:	bd80      	pop	{r7, pc}

0802205c <nk_utf_validate>:
NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};
NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};

NK_INTERN int
nk_utf_validate(nk_rune *u, int i)
{
 802205c:	b580      	push	{r7, lr}
 802205e:	b082      	sub	sp, #8
 8022060:	af00      	add	r7, sp, #0
 8022062:	6078      	str	r0, [r7, #4]
 8022064:	6039      	str	r1, [r7, #0]
    NK_ASSERT(u);
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	2b00      	cmp	r3, #0
 802206a:	d105      	bne.n	8022078 <nk_utf_validate+0x1c>
 802206c:	4b1e      	ldr	r3, [pc, #120]	; (80220e8 <nk_utf_validate+0x8c>)
 802206e:	4a1f      	ldr	r2, [pc, #124]	; (80220ec <nk_utf_validate+0x90>)
 8022070:	2111      	movs	r1, #17
 8022072:	481f      	ldr	r0, [pc, #124]	; (80220f0 <nk_utf_validate+0x94>)
 8022074:	f002 fd30 	bl	8024ad8 <__assert_func>
    if (!u) return 0;
 8022078:	687b      	ldr	r3, [r7, #4]
 802207a:	2b00      	cmp	r3, #0
 802207c:	d101      	bne.n	8022082 <nk_utf_validate+0x26>
 802207e:	2300      	movs	r3, #0
 8022080:	e02d      	b.n	80220de <nk_utf_validate+0x82>
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 8022082:	4a1c      	ldr	r2, [pc, #112]	; (80220f4 <nk_utf_validate+0x98>)
 8022084:	683b      	ldr	r3, [r7, #0]
 8022086:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	681b      	ldr	r3, [r3, #0]
 802208e:	429a      	cmp	r2, r3
 8022090:	d812      	bhi.n	80220b8 <nk_utf_validate+0x5c>
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	681a      	ldr	r2, [r3, #0]
 8022096:	4918      	ldr	r1, [pc, #96]	; (80220f8 <nk_utf_validate+0x9c>)
 8022098:	683b      	ldr	r3, [r7, #0]
 802209a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802209e:	429a      	cmp	r2, r3
 80220a0:	d20a      	bcs.n	80220b8 <nk_utf_validate+0x5c>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	681b      	ldr	r3, [r3, #0]
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 80220a6:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80220aa:	d309      	bcc.n	80220c0 <nk_utf_validate+0x64>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	681b      	ldr	r3, [r3, #0]
 80220b0:	f64d 72fe 	movw	r2, #57342	; 0xdffe
 80220b4:	4293      	cmp	r3, r2
 80220b6:	d803      	bhi.n	80220c0 <nk_utf_validate+0x64>
            *u = NK_UTF_INVALID;
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80220be:	601a      	str	r2, [r3, #0]
    for (i = 1; *u > nk_utfmax[i]; ++i);
 80220c0:	2301      	movs	r3, #1
 80220c2:	603b      	str	r3, [r7, #0]
 80220c4:	e002      	b.n	80220cc <nk_utf_validate+0x70>
 80220c6:	683b      	ldr	r3, [r7, #0]
 80220c8:	3301      	adds	r3, #1
 80220ca:	603b      	str	r3, [r7, #0]
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	681a      	ldr	r2, [r3, #0]
 80220d0:	4909      	ldr	r1, [pc, #36]	; (80220f8 <nk_utf_validate+0x9c>)
 80220d2:	683b      	ldr	r3, [r7, #0]
 80220d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80220d8:	429a      	cmp	r2, r3
 80220da:	d8f4      	bhi.n	80220c6 <nk_utf_validate+0x6a>
    return i;
 80220dc:	683b      	ldr	r3, [r7, #0]
}
 80220de:	4618      	mov	r0, r3
 80220e0:	3708      	adds	r7, #8
 80220e2:	46bd      	mov	sp, r7
 80220e4:	bd80      	pop	{r7, pc}
 80220e6:	bf00      	nop
 80220e8:	080293b0 	.word	0x080293b0
 80220ec:	0802ac10 	.word	0x0802ac10
 80220f0:	080293b4 	.word	0x080293b4
 80220f4:	0802abe8 	.word	0x0802abe8
 80220f8:	0802abfc 	.word	0x0802abfc

080220fc <nk_utf_decode_byte>:
NK_INTERN nk_rune
nk_utf_decode_byte(char c, int *i)
{
 80220fc:	b580      	push	{r7, lr}
 80220fe:	b082      	sub	sp, #8
 8022100:	af00      	add	r7, sp, #0
 8022102:	4603      	mov	r3, r0
 8022104:	6039      	str	r1, [r7, #0]
 8022106:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(i);
 8022108:	683b      	ldr	r3, [r7, #0]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d105      	bne.n	802211a <nk_utf_decode_byte+0x1e>
 802210e:	4b1b      	ldr	r3, [pc, #108]	; (802217c <nk_utf_decode_byte+0x80>)
 8022110:	4a1b      	ldr	r2, [pc, #108]	; (8022180 <nk_utf_decode_byte+0x84>)
 8022112:	211c      	movs	r1, #28
 8022114:	481b      	ldr	r0, [pc, #108]	; (8022184 <nk_utf_decode_byte+0x88>)
 8022116:	f002 fcdf 	bl	8024ad8 <__assert_func>
    if (!i) return 0;
 802211a:	683b      	ldr	r3, [r7, #0]
 802211c:	2b00      	cmp	r3, #0
 802211e:	d101      	bne.n	8022124 <nk_utf_decode_byte+0x28>
 8022120:	2300      	movs	r3, #0
 8022122:	e027      	b.n	8022174 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 8022124:	683b      	ldr	r3, [r7, #0]
 8022126:	2200      	movs	r2, #0
 8022128:	601a      	str	r2, [r3, #0]
 802212a:	e01e      	b.n	802216a <nk_utf_decode_byte+0x6e>
        if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])
 802212c:	683b      	ldr	r3, [r7, #0]
 802212e:	681b      	ldr	r3, [r3, #0]
 8022130:	4a15      	ldr	r2, [pc, #84]	; (8022188 <nk_utf_decode_byte+0x8c>)
 8022132:	5cd2      	ldrb	r2, [r2, r3]
 8022134:	79fb      	ldrb	r3, [r7, #7]
 8022136:	4013      	ands	r3, r2
 8022138:	b2da      	uxtb	r2, r3
 802213a:	683b      	ldr	r3, [r7, #0]
 802213c:	681b      	ldr	r3, [r3, #0]
 802213e:	4913      	ldr	r1, [pc, #76]	; (802218c <nk_utf_decode_byte+0x90>)
 8022140:	5ccb      	ldrb	r3, [r1, r3]
 8022142:	429a      	cmp	r2, r3
 8022144:	d10c      	bne.n	8022160 <nk_utf_decode_byte+0x64>
            return (nk_byte)(c & ~nk_utfmask[*i]);
 8022146:	683b      	ldr	r3, [r7, #0]
 8022148:	681b      	ldr	r3, [r3, #0]
 802214a:	4a0f      	ldr	r2, [pc, #60]	; (8022188 <nk_utf_decode_byte+0x8c>)
 802214c:	5cd3      	ldrb	r3, [r2, r3]
 802214e:	b25b      	sxtb	r3, r3
 8022150:	43db      	mvns	r3, r3
 8022152:	b25a      	sxtb	r2, r3
 8022154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022158:	4013      	ands	r3, r2
 802215a:	b25b      	sxtb	r3, r3
 802215c:	b2db      	uxtb	r3, r3
 802215e:	e009      	b.n	8022174 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 8022160:	683b      	ldr	r3, [r7, #0]
 8022162:	681b      	ldr	r3, [r3, #0]
 8022164:	1c5a      	adds	r2, r3, #1
 8022166:	683b      	ldr	r3, [r7, #0]
 8022168:	601a      	str	r2, [r3, #0]
 802216a:	683b      	ldr	r3, [r7, #0]
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	2b04      	cmp	r3, #4
 8022170:	dddc      	ble.n	802212c <nk_utf_decode_byte+0x30>
    }
    return 0;
 8022172:	2300      	movs	r3, #0
}
 8022174:	4618      	mov	r0, r3
 8022176:	3708      	adds	r7, #8
 8022178:	46bd      	mov	sp, r7
 802217a:	bd80      	pop	{r7, pc}
 802217c:	080293d0 	.word	0x080293d0
 8022180:	0802ac20 	.word	0x0802ac20
 8022184:	080293b4 	.word	0x080293b4
 8022188:	0802abe0 	.word	0x0802abe0
 802218c:	0802abd8 	.word	0x0802abd8

08022190 <nk_utf_decode>:
NK_API int
nk_utf_decode(const char *c, nk_rune *u, int clen)
{
 8022190:	b590      	push	{r4, r7, lr}
 8022192:	b08b      	sub	sp, #44	; 0x2c
 8022194:	af00      	add	r7, sp, #0
 8022196:	60f8      	str	r0, [r7, #12]
 8022198:	60b9      	str	r1, [r7, #8]
 802219a:	607a      	str	r2, [r7, #4]
    int i, j, len, type=0;
 802219c:	2300      	movs	r3, #0
 802219e:	617b      	str	r3, [r7, #20]
    nk_rune udecoded;

    NK_ASSERT(c);
 80221a0:	68fb      	ldr	r3, [r7, #12]
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	d105      	bne.n	80221b2 <nk_utf_decode+0x22>
 80221a6:	4b35      	ldr	r3, [pc, #212]	; (802227c <nk_utf_decode+0xec>)
 80221a8:	4a35      	ldr	r2, [pc, #212]	; (8022280 <nk_utf_decode+0xf0>)
 80221aa:	212a      	movs	r1, #42	; 0x2a
 80221ac:	4835      	ldr	r0, [pc, #212]	; (8022284 <nk_utf_decode+0xf4>)
 80221ae:	f002 fc93 	bl	8024ad8 <__assert_func>
    NK_ASSERT(u);
 80221b2:	68bb      	ldr	r3, [r7, #8]
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d105      	bne.n	80221c4 <nk_utf_decode+0x34>
 80221b8:	4b33      	ldr	r3, [pc, #204]	; (8022288 <nk_utf_decode+0xf8>)
 80221ba:	4a31      	ldr	r2, [pc, #196]	; (8022280 <nk_utf_decode+0xf0>)
 80221bc:	212b      	movs	r1, #43	; 0x2b
 80221be:	4831      	ldr	r0, [pc, #196]	; (8022284 <nk_utf_decode+0xf4>)
 80221c0:	f002 fc8a 	bl	8024ad8 <__assert_func>

    if (!c || !u) return 0;
 80221c4:	68fb      	ldr	r3, [r7, #12]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d002      	beq.n	80221d0 <nk_utf_decode+0x40>
 80221ca:	68bb      	ldr	r3, [r7, #8]
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d101      	bne.n	80221d4 <nk_utf_decode+0x44>
 80221d0:	2300      	movs	r3, #0
 80221d2:	e04f      	b.n	8022274 <nk_utf_decode+0xe4>
    if (!clen) return 0;
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	d101      	bne.n	80221de <nk_utf_decode+0x4e>
 80221da:	2300      	movs	r3, #0
 80221dc:	e04a      	b.n	8022274 <nk_utf_decode+0xe4>
    *u = NK_UTF_INVALID;
 80221de:	68bb      	ldr	r3, [r7, #8]
 80221e0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80221e4:	601a      	str	r2, [r3, #0]

    udecoded = nk_utf_decode_byte(c[0], &len);
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	781b      	ldrb	r3, [r3, #0]
 80221ea:	f107 0218 	add.w	r2, r7, #24
 80221ee:	4611      	mov	r1, r2
 80221f0:	4618      	mov	r0, r3
 80221f2:	f7ff ff83 	bl	80220fc <nk_utf_decode_byte>
 80221f6:	61f8      	str	r0, [r7, #28]
    if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))
 80221f8:	69bb      	ldr	r3, [r7, #24]
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	dd02      	ble.n	8022204 <nk_utf_decode+0x74>
 80221fe:	69bb      	ldr	r3, [r7, #24]
 8022200:	2b03      	cmp	r3, #3
 8022202:	dd01      	ble.n	8022208 <nk_utf_decode+0x78>
        return 1;
 8022204:	2301      	movs	r3, #1
 8022206:	e035      	b.n	8022274 <nk_utf_decode+0xe4>

    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 8022208:	2301      	movs	r3, #1
 802220a:	627b      	str	r3, [r7, #36]	; 0x24
 802220c:	2301      	movs	r3, #1
 802220e:	623b      	str	r3, [r7, #32]
 8022210:	e019      	b.n	8022246 <nk_utf_decode+0xb6>
        udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);
 8022212:	69fb      	ldr	r3, [r7, #28]
 8022214:	019c      	lsls	r4, r3, #6
 8022216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022218:	68fa      	ldr	r2, [r7, #12]
 802221a:	4413      	add	r3, r2
 802221c:	781b      	ldrb	r3, [r3, #0]
 802221e:	f107 0214 	add.w	r2, r7, #20
 8022222:	4611      	mov	r1, r2
 8022224:	4618      	mov	r0, r3
 8022226:	f7ff ff69 	bl	80220fc <nk_utf_decode_byte>
 802222a:	4603      	mov	r3, r0
 802222c:	4323      	orrs	r3, r4
 802222e:	61fb      	str	r3, [r7, #28]
        if (type != 0)
 8022230:	697b      	ldr	r3, [r7, #20]
 8022232:	2b00      	cmp	r3, #0
 8022234:	d001      	beq.n	802223a <nk_utf_decode+0xaa>
            return j;
 8022236:	6a3b      	ldr	r3, [r7, #32]
 8022238:	e01c      	b.n	8022274 <nk_utf_decode+0xe4>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 802223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802223c:	3301      	adds	r3, #1
 802223e:	627b      	str	r3, [r7, #36]	; 0x24
 8022240:	6a3b      	ldr	r3, [r7, #32]
 8022242:	3301      	adds	r3, #1
 8022244:	623b      	str	r3, [r7, #32]
 8022246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	429a      	cmp	r2, r3
 802224c:	da03      	bge.n	8022256 <nk_utf_decode+0xc6>
 802224e:	69bb      	ldr	r3, [r7, #24]
 8022250:	6a3a      	ldr	r2, [r7, #32]
 8022252:	429a      	cmp	r2, r3
 8022254:	dbdd      	blt.n	8022212 <nk_utf_decode+0x82>
    }
    if (j < len)
 8022256:	69bb      	ldr	r3, [r7, #24]
 8022258:	6a3a      	ldr	r2, [r7, #32]
 802225a:	429a      	cmp	r2, r3
 802225c:	da01      	bge.n	8022262 <nk_utf_decode+0xd2>
        return 0;
 802225e:	2300      	movs	r3, #0
 8022260:	e008      	b.n	8022274 <nk_utf_decode+0xe4>
    *u = udecoded;
 8022262:	68bb      	ldr	r3, [r7, #8]
 8022264:	69fa      	ldr	r2, [r7, #28]
 8022266:	601a      	str	r2, [r3, #0]
    nk_utf_validate(u, len);
 8022268:	69bb      	ldr	r3, [r7, #24]
 802226a:	4619      	mov	r1, r3
 802226c:	68b8      	ldr	r0, [r7, #8]
 802226e:	f7ff fef5 	bl	802205c <nk_utf_validate>
    return len;
 8022272:	69bb      	ldr	r3, [r7, #24]
}
 8022274:	4618      	mov	r0, r3
 8022276:	372c      	adds	r7, #44	; 0x2c
 8022278:	46bd      	mov	sp, r7
 802227a:	bd90      	pop	{r4, r7, pc}
 802227c:	080293d4 	.word	0x080293d4
 8022280:	0802ac34 	.word	0x0802ac34
 8022284:	080293b4 	.word	0x080293b4
 8022288:	080293b0 	.word	0x080293b0

0802228c <nk_utf_encode_byte>:
NK_INTERN char
nk_utf_encode_byte(nk_rune u, int i)
{
 802228c:	b480      	push	{r7}
 802228e:	b083      	sub	sp, #12
 8022290:	af00      	add	r7, sp, #0
 8022292:	6078      	str	r0, [r7, #4]
 8022294:	6039      	str	r1, [r7, #0]
    return (char)((nk_utfbyte[i]) | ((nk_byte)u & ~nk_utfmask[i]));
 8022296:	4a0c      	ldr	r2, [pc, #48]	; (80222c8 <nk_utf_encode_byte+0x3c>)
 8022298:	683b      	ldr	r3, [r7, #0]
 802229a:	4413      	add	r3, r2
 802229c:	781b      	ldrb	r3, [r3, #0]
 802229e:	b25a      	sxtb	r2, r3
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	b259      	sxtb	r1, r3
 80222a4:	4809      	ldr	r0, [pc, #36]	; (80222cc <nk_utf_encode_byte+0x40>)
 80222a6:	683b      	ldr	r3, [r7, #0]
 80222a8:	4403      	add	r3, r0
 80222aa:	781b      	ldrb	r3, [r3, #0]
 80222ac:	b25b      	sxtb	r3, r3
 80222ae:	43db      	mvns	r3, r3
 80222b0:	b25b      	sxtb	r3, r3
 80222b2:	400b      	ands	r3, r1
 80222b4:	b25b      	sxtb	r3, r3
 80222b6:	4313      	orrs	r3, r2
 80222b8:	b25b      	sxtb	r3, r3
 80222ba:	b2db      	uxtb	r3, r3
}
 80222bc:	4618      	mov	r0, r3
 80222be:	370c      	adds	r7, #12
 80222c0:	46bd      	mov	sp, r7
 80222c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222c6:	4770      	bx	lr
 80222c8:	0802abd8 	.word	0x0802abd8
 80222cc:	0802abe0 	.word	0x0802abe0

080222d0 <nk_utf_encode>:
NK_API int
nk_utf_encode(nk_rune u, char *c, int clen)
{
 80222d0:	b590      	push	{r4, r7, lr}
 80222d2:	b087      	sub	sp, #28
 80222d4:	af00      	add	r7, sp, #0
 80222d6:	60f8      	str	r0, [r7, #12]
 80222d8:	60b9      	str	r1, [r7, #8]
 80222da:	607a      	str	r2, [r7, #4]
    int len, i;
    len = nk_utf_validate(&u, 0);
 80222dc:	f107 030c 	add.w	r3, r7, #12
 80222e0:	2100      	movs	r1, #0
 80222e2:	4618      	mov	r0, r3
 80222e4:	f7ff feba 	bl	802205c <nk_utf_validate>
 80222e8:	6138      	str	r0, [r7, #16]
    if (clen < len || !len || len > NK_UTF_SIZE)
 80222ea:	687a      	ldr	r2, [r7, #4]
 80222ec:	693b      	ldr	r3, [r7, #16]
 80222ee:	429a      	cmp	r2, r3
 80222f0:	db05      	blt.n	80222fe <nk_utf_encode+0x2e>
 80222f2:	693b      	ldr	r3, [r7, #16]
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d002      	beq.n	80222fe <nk_utf_encode+0x2e>
 80222f8:	693b      	ldr	r3, [r7, #16]
 80222fa:	2b04      	cmp	r3, #4
 80222fc:	dd01      	ble.n	8022302 <nk_utf_encode+0x32>
        return 0;
 80222fe:	2300      	movs	r3, #0
 8022300:	e01f      	b.n	8022342 <nk_utf_encode+0x72>

    for (i = len - 1; i != 0; --i) {
 8022302:	693b      	ldr	r3, [r7, #16]
 8022304:	3b01      	subs	r3, #1
 8022306:	617b      	str	r3, [r7, #20]
 8022308:	e00e      	b.n	8022328 <nk_utf_encode+0x58>
        c[i] = nk_utf_encode_byte(u, 0);
 802230a:	68f8      	ldr	r0, [r7, #12]
 802230c:	697b      	ldr	r3, [r7, #20]
 802230e:	68ba      	ldr	r2, [r7, #8]
 8022310:	18d4      	adds	r4, r2, r3
 8022312:	2100      	movs	r1, #0
 8022314:	f7ff ffba 	bl	802228c <nk_utf_encode_byte>
 8022318:	4603      	mov	r3, r0
 802231a:	7023      	strb	r3, [r4, #0]
        u >>= 6;
 802231c:	68fb      	ldr	r3, [r7, #12]
 802231e:	099b      	lsrs	r3, r3, #6
 8022320:	60fb      	str	r3, [r7, #12]
    for (i = len - 1; i != 0; --i) {
 8022322:	697b      	ldr	r3, [r7, #20]
 8022324:	3b01      	subs	r3, #1
 8022326:	617b      	str	r3, [r7, #20]
 8022328:	697b      	ldr	r3, [r7, #20]
 802232a:	2b00      	cmp	r3, #0
 802232c:	d1ed      	bne.n	802230a <nk_utf_encode+0x3a>
    }
    c[0] = nk_utf_encode_byte(u, len);
 802232e:	68fb      	ldr	r3, [r7, #12]
 8022330:	6939      	ldr	r1, [r7, #16]
 8022332:	4618      	mov	r0, r3
 8022334:	f7ff ffaa 	bl	802228c <nk_utf_encode_byte>
 8022338:	4603      	mov	r3, r0
 802233a:	461a      	mov	r2, r3
 802233c:	68bb      	ldr	r3, [r7, #8]
 802233e:	701a      	strb	r2, [r3, #0]
    return len;
 8022340:	693b      	ldr	r3, [r7, #16]
}
 8022342:	4618      	mov	r0, r3
 8022344:	371c      	adds	r7, #28
 8022346:	46bd      	mov	sp, r7
 8022348:	bd90      	pop	{r4, r7, pc}
	...

0802234c <nk_utf_len>:
NK_API int
nk_utf_len(const char *str, int len)
{
 802234c:	b580      	push	{r7, lr}
 802234e:	b088      	sub	sp, #32
 8022350:	af00      	add	r7, sp, #0
 8022352:	6078      	str	r0, [r7, #4]
 8022354:	6039      	str	r1, [r7, #0]
    const char *text;
    int glyphs = 0;
 8022356:	2300      	movs	r3, #0
 8022358:	61fb      	str	r3, [r7, #28]
    int text_len;
    int glyph_len;
    int src_len = 0;
 802235a:	2300      	movs	r3, #0
 802235c:	617b      	str	r3, [r7, #20]
    nk_rune unicode;

    NK_ASSERT(str);
 802235e:	687b      	ldr	r3, [r7, #4]
 8022360:	2b00      	cmp	r3, #0
 8022362:	d105      	bne.n	8022370 <nk_utf_len+0x24>
 8022364:	4b1c      	ldr	r3, [pc, #112]	; (80223d8 <nk_utf_len+0x8c>)
 8022366:	4a1d      	ldr	r2, [pc, #116]	; (80223dc <nk_utf_len+0x90>)
 8022368:	215e      	movs	r1, #94	; 0x5e
 802236a:	481d      	ldr	r0, [pc, #116]	; (80223e0 <nk_utf_len+0x94>)
 802236c:	f002 fbb4 	bl	8024ad8 <__assert_func>
    if (!str || !len) return 0;
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	2b00      	cmp	r3, #0
 8022374:	d002      	beq.n	802237c <nk_utf_len+0x30>
 8022376:	683b      	ldr	r3, [r7, #0]
 8022378:	2b00      	cmp	r3, #0
 802237a:	d101      	bne.n	8022380 <nk_utf_len+0x34>
 802237c:	2300      	movs	r3, #0
 802237e:	e027      	b.n	80223d0 <nk_utf_len+0x84>

    text = str;
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	613b      	str	r3, [r7, #16]
    text_len = len;
 8022384:	683b      	ldr	r3, [r7, #0]
 8022386:	60fb      	str	r3, [r7, #12]
    glyph_len = nk_utf_decode(text, &unicode, text_len);
 8022388:	f107 0308 	add.w	r3, r7, #8
 802238c:	68fa      	ldr	r2, [r7, #12]
 802238e:	4619      	mov	r1, r3
 8022390:	6938      	ldr	r0, [r7, #16]
 8022392:	f7ff fefd 	bl	8022190 <nk_utf_decode>
 8022396:	61b8      	str	r0, [r7, #24]
    while (glyph_len && src_len < len) {
 8022398:	e012      	b.n	80223c0 <nk_utf_len+0x74>
        glyphs++;
 802239a:	69fb      	ldr	r3, [r7, #28]
 802239c:	3301      	adds	r3, #1
 802239e:	61fb      	str	r3, [r7, #28]
        src_len = src_len + glyph_len;
 80223a0:	697a      	ldr	r2, [r7, #20]
 80223a2:	69bb      	ldr	r3, [r7, #24]
 80223a4:	4413      	add	r3, r2
 80223a6:	617b      	str	r3, [r7, #20]
        glyph_len = nk_utf_decode(text + src_len, &unicode, text_len - src_len);
 80223a8:	697b      	ldr	r3, [r7, #20]
 80223aa:	693a      	ldr	r2, [r7, #16]
 80223ac:	18d0      	adds	r0, r2, r3
 80223ae:	68fa      	ldr	r2, [r7, #12]
 80223b0:	697b      	ldr	r3, [r7, #20]
 80223b2:	1ad2      	subs	r2, r2, r3
 80223b4:	f107 0308 	add.w	r3, r7, #8
 80223b8:	4619      	mov	r1, r3
 80223ba:	f7ff fee9 	bl	8022190 <nk_utf_decode>
 80223be:	61b8      	str	r0, [r7, #24]
    while (glyph_len && src_len < len) {
 80223c0:	69bb      	ldr	r3, [r7, #24]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d003      	beq.n	80223ce <nk_utf_len+0x82>
 80223c6:	697a      	ldr	r2, [r7, #20]
 80223c8:	683b      	ldr	r3, [r7, #0]
 80223ca:	429a      	cmp	r2, r3
 80223cc:	dbe5      	blt.n	802239a <nk_utf_len+0x4e>
    }
    return glyphs;
 80223ce:	69fb      	ldr	r3, [r7, #28]
}
 80223d0:	4618      	mov	r0, r3
 80223d2:	3720      	adds	r7, #32
 80223d4:	46bd      	mov	sp, r7
 80223d6:	bd80      	pop	{r7, pc}
 80223d8:	080293d8 	.word	0x080293d8
 80223dc:	0802ac44 	.word	0x0802ac44
 80223e0:	080293b4 	.word	0x080293b4

080223e4 <nk_memcopy>:

//#ifndef NK_MEMCPY
//#define NK_MEMCPY nk_memcopy
NK_LIB void*
nk_memcopy(void *dst0, const void *src0, nk_size length)
{
 80223e4:	b480      	push	{r7}
 80223e6:	b089      	sub	sp, #36	; 0x24
 80223e8:	af00      	add	r7, sp, #0
 80223ea:	60f8      	str	r0, [r7, #12]
 80223ec:	60b9      	str	r1, [r7, #8]
 80223ee:	607a      	str	r2, [r7, #4]
    nk_ptr t;
    char *dst = (char*)dst0;
 80223f0:	68fb      	ldr	r3, [r7, #12]
 80223f2:	61bb      	str	r3, [r7, #24]
    const char *src = (const char*)src0;
 80223f4:	68bb      	ldr	r3, [r7, #8]
 80223f6:	617b      	str	r3, [r7, #20]
    if (length == 0 || dst == src)
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	f000 80c7 	beq.w	802258e <nk_memcopy+0x1aa>
 8022400:	69ba      	ldr	r2, [r7, #24]
 8022402:	697b      	ldr	r3, [r7, #20]
 8022404:	429a      	cmp	r2, r3
 8022406:	f000 80c2 	beq.w	802258e <nk_memcopy+0x1aa>
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize-1)
    #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
    #define NK_TLOOP1(s) do { s; } while (--t)

    if (dst < src) {
 802240a:	69ba      	ldr	r2, [r7, #24]
 802240c:	697b      	ldr	r3, [r7, #20]
 802240e:	429a      	cmp	r2, r3
 8022410:	d259      	bcs.n	80224c6 <nk_memcopy+0xe2>
        t = (nk_ptr)src; /* only need low bits */
 8022412:	697b      	ldr	r3, [r7, #20]
 8022414:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 8022416:	69ba      	ldr	r2, [r7, #24]
 8022418:	69fb      	ldr	r3, [r7, #28]
 802241a:	4313      	orrs	r3, r2
 802241c:	f003 0303 	and.w	r3, r3, #3
 8022420:	2b00      	cmp	r3, #0
 8022422:	d024      	beq.n	802246e <nk_memcopy+0x8a>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)
 8022424:	69ba      	ldr	r2, [r7, #24]
 8022426:	69fb      	ldr	r3, [r7, #28]
 8022428:	4053      	eors	r3, r2
 802242a:	f003 0303 	and.w	r3, r3, #3
 802242e:	2b00      	cmp	r3, #0
 8022430:	d102      	bne.n	8022438 <nk_memcopy+0x54>
 8022432:	687b      	ldr	r3, [r7, #4]
 8022434:	2b03      	cmp	r3, #3
 8022436:	d802      	bhi.n	802243e <nk_memcopy+0x5a>
                t = length;
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	61fb      	str	r3, [r7, #28]
 802243c:	e005      	b.n	802244a <nk_memcopy+0x66>
            else
                t = nk_wsize - (t & nk_wmask);
 802243e:	69fb      	ldr	r3, [r7, #28]
 8022440:	f003 0303 	and.w	r3, r3, #3
 8022444:	f1c3 0304 	rsb	r3, r3, #4
 8022448:	61fb      	str	r3, [r7, #28]
            length -= t;
 802244a:	687a      	ldr	r2, [r7, #4]
 802244c:	69fb      	ldr	r3, [r7, #28]
 802244e:	1ad3      	subs	r3, r2, r3
 8022450:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*dst++ = *src++);
 8022452:	697a      	ldr	r2, [r7, #20]
 8022454:	1c53      	adds	r3, r2, #1
 8022456:	617b      	str	r3, [r7, #20]
 8022458:	69bb      	ldr	r3, [r7, #24]
 802245a:	1c59      	adds	r1, r3, #1
 802245c:	61b9      	str	r1, [r7, #24]
 802245e:	7812      	ldrb	r2, [r2, #0]
 8022460:	701a      	strb	r2, [r3, #0]
 8022462:	69fb      	ldr	r3, [r7, #28]
 8022464:	3b01      	subs	r3, #1
 8022466:	61fb      	str	r3, [r7, #28]
 8022468:	69fb      	ldr	r3, [r7, #28]
 802246a:	2b00      	cmp	r3, #0
 802246c:	d1f1      	bne.n	8022452 <nk_memcopy+0x6e>
        }
        t = length / nk_wsize;
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	089b      	lsrs	r3, r3, #2
 8022472:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 8022474:	69fb      	ldr	r3, [r7, #28]
 8022476:	2b00      	cmp	r3, #0
 8022478:	d00f      	beq.n	802249a <nk_memcopy+0xb6>
 802247a:	697b      	ldr	r3, [r7, #20]
 802247c:	681a      	ldr	r2, [r3, #0]
 802247e:	69bb      	ldr	r3, [r7, #24]
 8022480:	601a      	str	r2, [r3, #0]
 8022482:	697b      	ldr	r3, [r7, #20]
 8022484:	3304      	adds	r3, #4
 8022486:	617b      	str	r3, [r7, #20]
 8022488:	69bb      	ldr	r3, [r7, #24]
 802248a:	3304      	adds	r3, #4
 802248c:	61bb      	str	r3, [r7, #24]
 802248e:	69fb      	ldr	r3, [r7, #28]
 8022490:	3b01      	subs	r3, #1
 8022492:	61fb      	str	r3, [r7, #28]
 8022494:	69fb      	ldr	r3, [r7, #28]
 8022496:	2b00      	cmp	r3, #0
 8022498:	d1ef      	bne.n	802247a <nk_memcopy+0x96>
            src += nk_wsize; dst += nk_wsize);
        t = length & nk_wmask;
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	f003 0303 	and.w	r3, r3, #3
 80224a0:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*dst++ = *src++);
 80224a2:	69fb      	ldr	r3, [r7, #28]
 80224a4:	2b00      	cmp	r3, #0
 80224a6:	d075      	beq.n	8022594 <nk_memcopy+0x1b0>
 80224a8:	697a      	ldr	r2, [r7, #20]
 80224aa:	1c53      	adds	r3, r2, #1
 80224ac:	617b      	str	r3, [r7, #20]
 80224ae:	69bb      	ldr	r3, [r7, #24]
 80224b0:	1c59      	adds	r1, r3, #1
 80224b2:	61b9      	str	r1, [r7, #24]
 80224b4:	7812      	ldrb	r2, [r2, #0]
 80224b6:	701a      	strb	r2, [r3, #0]
 80224b8:	69fb      	ldr	r3, [r7, #28]
 80224ba:	3b01      	subs	r3, #1
 80224bc:	61fb      	str	r3, [r7, #28]
 80224be:	69fb      	ldr	r3, [r7, #28]
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d1f1      	bne.n	80224a8 <nk_memcopy+0xc4>
 80224c4:	e066      	b.n	8022594 <nk_memcopy+0x1b0>
    } else {
        src += length;
 80224c6:	697a      	ldr	r2, [r7, #20]
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	4413      	add	r3, r2
 80224cc:	617b      	str	r3, [r7, #20]
        dst += length;
 80224ce:	69ba      	ldr	r2, [r7, #24]
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	4413      	add	r3, r2
 80224d4:	61bb      	str	r3, [r7, #24]
        t = (nk_ptr)src;
 80224d6:	697b      	ldr	r3, [r7, #20]
 80224d8:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 80224da:	69ba      	ldr	r2, [r7, #24]
 80224dc:	69fb      	ldr	r3, [r7, #28]
 80224de:	4313      	orrs	r3, r2
 80224e0:	f003 0303 	and.w	r3, r3, #3
 80224e4:	2b00      	cmp	r3, #0
 80224e6:	d024      	beq.n	8022532 <nk_memcopy+0x14e>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)
 80224e8:	69ba      	ldr	r2, [r7, #24]
 80224ea:	69fb      	ldr	r3, [r7, #28]
 80224ec:	4053      	eors	r3, r2
 80224ee:	f003 0303 	and.w	r3, r3, #3
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	d102      	bne.n	80224fc <nk_memcopy+0x118>
 80224f6:	687b      	ldr	r3, [r7, #4]
 80224f8:	2b04      	cmp	r3, #4
 80224fa:	d802      	bhi.n	8022502 <nk_memcopy+0x11e>
                t = length;
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	61fb      	str	r3, [r7, #28]
 8022500:	e003      	b.n	802250a <nk_memcopy+0x126>
            else
                t &= nk_wmask;
 8022502:	69fb      	ldr	r3, [r7, #28]
 8022504:	f003 0303 	and.w	r3, r3, #3
 8022508:	61fb      	str	r3, [r7, #28]
            length -= t;
 802250a:	687a      	ldr	r2, [r7, #4]
 802250c:	69fb      	ldr	r3, [r7, #28]
 802250e:	1ad3      	subs	r3, r2, r3
 8022510:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*--dst = *--src);
 8022512:	697b      	ldr	r3, [r7, #20]
 8022514:	3b01      	subs	r3, #1
 8022516:	617b      	str	r3, [r7, #20]
 8022518:	69bb      	ldr	r3, [r7, #24]
 802251a:	3b01      	subs	r3, #1
 802251c:	61bb      	str	r3, [r7, #24]
 802251e:	697b      	ldr	r3, [r7, #20]
 8022520:	781a      	ldrb	r2, [r3, #0]
 8022522:	69bb      	ldr	r3, [r7, #24]
 8022524:	701a      	strb	r2, [r3, #0]
 8022526:	69fb      	ldr	r3, [r7, #28]
 8022528:	3b01      	subs	r3, #1
 802252a:	61fb      	str	r3, [r7, #28]
 802252c:	69fb      	ldr	r3, [r7, #28]
 802252e:	2b00      	cmp	r3, #0
 8022530:	d1ef      	bne.n	8022512 <nk_memcopy+0x12e>
        }
        t = length / nk_wsize;
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	089b      	lsrs	r3, r3, #2
 8022536:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 8022538:	69fb      	ldr	r3, [r7, #28]
 802253a:	2b00      	cmp	r3, #0
 802253c:	d00f      	beq.n	802255e <nk_memcopy+0x17a>
 802253e:	697b      	ldr	r3, [r7, #20]
 8022540:	3b04      	subs	r3, #4
 8022542:	617b      	str	r3, [r7, #20]
 8022544:	69bb      	ldr	r3, [r7, #24]
 8022546:	3b04      	subs	r3, #4
 8022548:	61bb      	str	r3, [r7, #24]
 802254a:	697b      	ldr	r3, [r7, #20]
 802254c:	681a      	ldr	r2, [r3, #0]
 802254e:	69bb      	ldr	r3, [r7, #24]
 8022550:	601a      	str	r2, [r3, #0]
 8022552:	69fb      	ldr	r3, [r7, #28]
 8022554:	3b01      	subs	r3, #1
 8022556:	61fb      	str	r3, [r7, #28]
 8022558:	69fb      	ldr	r3, [r7, #28]
 802255a:	2b00      	cmp	r3, #0
 802255c:	d1ef      	bne.n	802253e <nk_memcopy+0x15a>
            *(nk_word*)(void*)dst = *(const nk_word*)(const void*)src);
        t = length & nk_wmask;
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	f003 0303 	and.w	r3, r3, #3
 8022564:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*--dst = *--src);
 8022566:	69fb      	ldr	r3, [r7, #28]
 8022568:	2b00      	cmp	r3, #0
 802256a:	d012      	beq.n	8022592 <nk_memcopy+0x1ae>
 802256c:	697b      	ldr	r3, [r7, #20]
 802256e:	3b01      	subs	r3, #1
 8022570:	617b      	str	r3, [r7, #20]
 8022572:	69bb      	ldr	r3, [r7, #24]
 8022574:	3b01      	subs	r3, #1
 8022576:	61bb      	str	r3, [r7, #24]
 8022578:	697b      	ldr	r3, [r7, #20]
 802257a:	781a      	ldrb	r2, [r3, #0]
 802257c:	69bb      	ldr	r3, [r7, #24]
 802257e:	701a      	strb	r2, [r3, #0]
 8022580:	69fb      	ldr	r3, [r7, #28]
 8022582:	3b01      	subs	r3, #1
 8022584:	61fb      	str	r3, [r7, #28]
 8022586:	69fb      	ldr	r3, [r7, #28]
 8022588:	2b00      	cmp	r3, #0
 802258a:	d1ef      	bne.n	802256c <nk_memcopy+0x188>
    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
    #undef NK_TLOOP
    #undef NK_TLOOP1
done:
 802258c:	e001      	b.n	8022592 <nk_memcopy+0x1ae>
        goto done;
 802258e:	bf00      	nop
 8022590:	e000      	b.n	8022594 <nk_memcopy+0x1b0>
done:
 8022592:	bf00      	nop
    return (dst0);
 8022594:	68fb      	ldr	r3, [r7, #12]
}
 8022596:	4618      	mov	r0, r3
 8022598:	3724      	adds	r7, #36	; 0x24
 802259a:	46bd      	mov	sp, r7
 802259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225a0:	4770      	bx	lr

080225a2 <nk_memset>:
//#endif
//#ifndef NK_MEMSET
//#define NK_MEMSET nk_memset
NK_LIB void
nk_memset(void *ptr, int c0, nk_size size)
{
 80225a2:	b480      	push	{r7}
 80225a4:	b089      	sub	sp, #36	; 0x24
 80225a6:	af00      	add	r7, sp, #0
 80225a8:	60f8      	str	r0, [r7, #12]
 80225aa:	60b9      	str	r1, [r7, #8]
 80225ac:	607a      	str	r2, [r7, #4]
    #define nk_word unsigned
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize - 1)
    nk_byte *dst = (nk_byte*)ptr;
 80225ae:	68fb      	ldr	r3, [r7, #12]
 80225b0:	61fb      	str	r3, [r7, #28]
    unsigned c = 0;
 80225b2:	2300      	movs	r3, #0
 80225b4:	61bb      	str	r3, [r7, #24]
    nk_size t = 0;
 80225b6:	2300      	movs	r3, #0
 80225b8:	617b      	str	r3, [r7, #20]

    if ((c = (nk_byte)c0) != 0) {
 80225ba:	68bb      	ldr	r3, [r7, #8]
 80225bc:	b2db      	uxtb	r3, r3
 80225be:	61bb      	str	r3, [r7, #24]
 80225c0:	69bb      	ldr	r3, [r7, #24]
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d009      	beq.n	80225da <nk_memset+0x38>
        c = (c << 8) | c; /* at least 16-bits  */
 80225c6:	69bb      	ldr	r3, [r7, #24]
 80225c8:	021b      	lsls	r3, r3, #8
 80225ca:	69ba      	ldr	r2, [r7, #24]
 80225cc:	4313      	orrs	r3, r2
 80225ce:	61bb      	str	r3, [r7, #24]
        if (sizeof(unsigned int) > 2)
            c = (c << 16) | c; /* at least 32-bits*/
 80225d0:	69bb      	ldr	r3, [r7, #24]
 80225d2:	041b      	lsls	r3, r3, #16
 80225d4:	69ba      	ldr	r2, [r7, #24]
 80225d6:	4313      	orrs	r3, r2
 80225d8:	61bb      	str	r3, [r7, #24]
    }

    /* too small of a word count */
    dst = (nk_byte*)ptr;
 80225da:	68fb      	ldr	r3, [r7, #12]
 80225dc:	61fb      	str	r3, [r7, #28]
    if (size < 3 * nk_wsize) {
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	2b0b      	cmp	r3, #11
 80225e2:	d80c      	bhi.n	80225fe <nk_memset+0x5c>
        while (size--) *dst++ = (nk_byte)c0;
 80225e4:	e005      	b.n	80225f2 <nk_memset+0x50>
 80225e6:	69fb      	ldr	r3, [r7, #28]
 80225e8:	1c5a      	adds	r2, r3, #1
 80225ea:	61fa      	str	r2, [r7, #28]
 80225ec:	68ba      	ldr	r2, [r7, #8]
 80225ee:	b2d2      	uxtb	r2, r2
 80225f0:	701a      	strb	r2, [r3, #0]
 80225f2:	687b      	ldr	r3, [r7, #4]
 80225f4:	1e5a      	subs	r2, r3, #1
 80225f6:	607a      	str	r2, [r7, #4]
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d1f4      	bne.n	80225e6 <nk_memset+0x44>
        return;
 80225fc:	e03c      	b.n	8022678 <nk_memset+0xd6>
    }

    /* align destination */
    if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {
 80225fe:	69fb      	ldr	r3, [r7, #28]
 8022600:	f003 0303 	and.w	r3, r3, #3
 8022604:	617b      	str	r3, [r7, #20]
 8022606:	697b      	ldr	r3, [r7, #20]
 8022608:	2b00      	cmp	r3, #0
 802260a:	d013      	beq.n	8022634 <nk_memset+0x92>
        t = nk_wsize -t;
 802260c:	697b      	ldr	r3, [r7, #20]
 802260e:	f1c3 0304 	rsb	r3, r3, #4
 8022612:	617b      	str	r3, [r7, #20]
        size -= t;
 8022614:	687a      	ldr	r2, [r7, #4]
 8022616:	697b      	ldr	r3, [r7, #20]
 8022618:	1ad3      	subs	r3, r2, r3
 802261a:	607b      	str	r3, [r7, #4]
        do {
            *dst++ = (nk_byte)c0;
 802261c:	69fb      	ldr	r3, [r7, #28]
 802261e:	1c5a      	adds	r2, r3, #1
 8022620:	61fa      	str	r2, [r7, #28]
 8022622:	68ba      	ldr	r2, [r7, #8]
 8022624:	b2d2      	uxtb	r2, r2
 8022626:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 8022628:	697b      	ldr	r3, [r7, #20]
 802262a:	3b01      	subs	r3, #1
 802262c:	617b      	str	r3, [r7, #20]
 802262e:	697b      	ldr	r3, [r7, #20]
 8022630:	2b00      	cmp	r3, #0
 8022632:	d1f3      	bne.n	802261c <nk_memset+0x7a>
    }

    /* fill word */
    t = size / nk_wsize;
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	089b      	lsrs	r3, r3, #2
 8022638:	617b      	str	r3, [r7, #20]
    do {
        *(nk_word*)((void*)dst) = c;
 802263a:	69fb      	ldr	r3, [r7, #28]
 802263c:	69ba      	ldr	r2, [r7, #24]
 802263e:	601a      	str	r2, [r3, #0]
        dst += nk_wsize;
 8022640:	69fb      	ldr	r3, [r7, #28]
 8022642:	3304      	adds	r3, #4
 8022644:	61fb      	str	r3, [r7, #28]
    } while (--t != 0);
 8022646:	697b      	ldr	r3, [r7, #20]
 8022648:	3b01      	subs	r3, #1
 802264a:	617b      	str	r3, [r7, #20]
 802264c:	697b      	ldr	r3, [r7, #20]
 802264e:	2b00      	cmp	r3, #0
 8022650:	d1f3      	bne.n	802263a <nk_memset+0x98>

    /* fill trailing bytes */
    t = (size & nk_wmask);
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	f003 0303 	and.w	r3, r3, #3
 8022658:	617b      	str	r3, [r7, #20]
    if (t != 0) {
 802265a:	697b      	ldr	r3, [r7, #20]
 802265c:	2b00      	cmp	r3, #0
 802265e:	d00b      	beq.n	8022678 <nk_memset+0xd6>
        do {
            *dst++ = (nk_byte)c0;
 8022660:	69fb      	ldr	r3, [r7, #28]
 8022662:	1c5a      	adds	r2, r3, #1
 8022664:	61fa      	str	r2, [r7, #28]
 8022666:	68ba      	ldr	r2, [r7, #8]
 8022668:	b2d2      	uxtb	r2, r2
 802266a:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 802266c:	697b      	ldr	r3, [r7, #20]
 802266e:	3b01      	subs	r3, #1
 8022670:	617b      	str	r3, [r7, #20]
 8022672:	697b      	ldr	r3, [r7, #20]
 8022674:	2b00      	cmp	r3, #0
 8022676:	d1f3      	bne.n	8022660 <nk_memset+0xbe>
    }

    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
}
 8022678:	3724      	adds	r7, #36	; 0x24
 802267a:	46bd      	mov	sp, r7
 802267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022680:	4770      	bx	lr
	...

08022684 <nk_zero>:
//#endif
NK_LIB void
nk_zero(void *ptr, nk_size size)
{
 8022684:	b580      	push	{r7, lr}
 8022686:	b082      	sub	sp, #8
 8022688:	af00      	add	r7, sp, #0
 802268a:	6078      	str	r0, [r7, #4]
 802268c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ptr);
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	2b00      	cmp	r3, #0
 8022692:	d105      	bne.n	80226a0 <nk_zero+0x1c>
 8022694:	4b07      	ldr	r3, [pc, #28]	; (80226b4 <nk_zero+0x30>)
 8022696:	4a08      	ldr	r2, [pc, #32]	; (80226b8 <nk_zero+0x34>)
 8022698:	2184      	movs	r1, #132	; 0x84
 802269a:	4808      	ldr	r0, [pc, #32]	; (80226bc <nk_zero+0x38>)
 802269c:	f002 fa1c 	bl	8024ad8 <__assert_func>
    NK_MEMSET(ptr, 0, size);
 80226a0:	683a      	ldr	r2, [r7, #0]
 80226a2:	2100      	movs	r1, #0
 80226a4:	6878      	ldr	r0, [r7, #4]
 80226a6:	f7ff ff7c 	bl	80225a2 <nk_memset>
}
 80226aa:	bf00      	nop
 80226ac:	3708      	adds	r7, #8
 80226ae:	46bd      	mov	sp, r7
 80226b0:	bd80      	pop	{r7, pc}
 80226b2:	bf00      	nop
 80226b4:	080293f0 	.word	0x080293f0
 80226b8:	0802ac50 	.word	0x0802ac50
 80226bc:	080293f4 	.word	0x080293f4

080226c0 <nk_strlen>:
NK_API int
nk_strlen(const char *str)
{
 80226c0:	b580      	push	{r7, lr}
 80226c2:	b084      	sub	sp, #16
 80226c4:	af00      	add	r7, sp, #0
 80226c6:	6078      	str	r0, [r7, #4]
    int siz = 0;
 80226c8:	2300      	movs	r3, #0
 80226ca:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(str);
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	2b00      	cmp	r3, #0
 80226d0:	d108      	bne.n	80226e4 <nk_strlen+0x24>
 80226d2:	4b0b      	ldr	r3, [pc, #44]	; (8022700 <nk_strlen+0x40>)
 80226d4:	4a0b      	ldr	r2, [pc, #44]	; (8022704 <nk_strlen+0x44>)
 80226d6:	218b      	movs	r1, #139	; 0x8b
 80226d8:	480b      	ldr	r0, [pc, #44]	; (8022708 <nk_strlen+0x48>)
 80226da:	f002 f9fd 	bl	8024ad8 <__assert_func>
    while (str && *str++ != '\0') siz++;
 80226de:	68fb      	ldr	r3, [r7, #12]
 80226e0:	3301      	adds	r3, #1
 80226e2:	60fb      	str	r3, [r7, #12]
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d005      	beq.n	80226f6 <nk_strlen+0x36>
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	1c5a      	adds	r2, r3, #1
 80226ee:	607a      	str	r2, [r7, #4]
 80226f0:	781b      	ldrb	r3, [r3, #0]
 80226f2:	2b00      	cmp	r3, #0
 80226f4:	d1f3      	bne.n	80226de <nk_strlen+0x1e>
    return siz;
 80226f6:	68fb      	ldr	r3, [r7, #12]
}
 80226f8:	4618      	mov	r0, r3
 80226fa:	3710      	adds	r7, #16
 80226fc:	46bd      	mov	sp, r7
 80226fe:	bd80      	pop	{r7, pc}
 8022700:	08029410 	.word	0x08029410
 8022704:	0802ac58 	.word	0x0802ac58
 8022708:	080293f4 	.word	0x080293f4

0802270c <nk_strtoi>:
NK_API int
nk_strtoi(const char *str, const char **endptr)
{
 802270c:	b580      	push	{r7, lr}
 802270e:	b086      	sub	sp, #24
 8022710:	af00      	add	r7, sp, #0
 8022712:	6078      	str	r0, [r7, #4]
 8022714:	6039      	str	r1, [r7, #0]
    int neg = 1;
 8022716:	2301      	movs	r3, #1
 8022718:	617b      	str	r3, [r7, #20]
    const char *p = str;
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	613b      	str	r3, [r7, #16]
    int value = 0;
 802271e:	2300      	movs	r3, #0
 8022720:	60fb      	str	r3, [r7, #12]

    NK_ASSERT(str);
 8022722:	687b      	ldr	r3, [r7, #4]
 8022724:	2b00      	cmp	r3, #0
 8022726:	d105      	bne.n	8022734 <nk_strtoi+0x28>
 8022728:	4b22      	ldr	r3, [pc, #136]	; (80227b4 <nk_strtoi+0xa8>)
 802272a:	4a23      	ldr	r2, [pc, #140]	; (80227b8 <nk_strtoi+0xac>)
 802272c:	2196      	movs	r1, #150	; 0x96
 802272e:	4823      	ldr	r0, [pc, #140]	; (80227bc <nk_strtoi+0xb0>)
 8022730:	f002 f9d2 	bl	8024ad8 <__assert_func>
    if (!str) return 0;
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	2b00      	cmp	r3, #0
 8022738:	d104      	bne.n	8022744 <nk_strtoi+0x38>
 802273a:	2300      	movs	r3, #0
 802273c:	e035      	b.n	80227aa <nk_strtoi+0x9e>

    /* skip whitespace */
    while (*p == ' ') p++;
 802273e:	693b      	ldr	r3, [r7, #16]
 8022740:	3301      	adds	r3, #1
 8022742:	613b      	str	r3, [r7, #16]
 8022744:	693b      	ldr	r3, [r7, #16]
 8022746:	781b      	ldrb	r3, [r3, #0]
 8022748:	2b20      	cmp	r3, #32
 802274a:	d0f8      	beq.n	802273e <nk_strtoi+0x32>
    if (*p == '-') {
 802274c:	693b      	ldr	r3, [r7, #16]
 802274e:	781b      	ldrb	r3, [r3, #0]
 8022750:	2b2d      	cmp	r3, #45	; 0x2d
 8022752:	d114      	bne.n	802277e <nk_strtoi+0x72>
        neg = -1;
 8022754:	f04f 33ff 	mov.w	r3, #4294967295
 8022758:	617b      	str	r3, [r7, #20]
        p++;
 802275a:	693b      	ldr	r3, [r7, #16]
 802275c:	3301      	adds	r3, #1
 802275e:	613b      	str	r3, [r7, #16]
    }
    while (*p && *p >= '0' && *p <= '9') {
 8022760:	e00d      	b.n	802277e <nk_strtoi+0x72>
        value = value * 10 + (int) (*p - '0');
 8022762:	68fa      	ldr	r2, [r7, #12]
 8022764:	4613      	mov	r3, r2
 8022766:	009b      	lsls	r3, r3, #2
 8022768:	4413      	add	r3, r2
 802276a:	005b      	lsls	r3, r3, #1
 802276c:	461a      	mov	r2, r3
 802276e:	693b      	ldr	r3, [r7, #16]
 8022770:	781b      	ldrb	r3, [r3, #0]
 8022772:	3b30      	subs	r3, #48	; 0x30
 8022774:	4413      	add	r3, r2
 8022776:	60fb      	str	r3, [r7, #12]
        p++;
 8022778:	693b      	ldr	r3, [r7, #16]
 802277a:	3301      	adds	r3, #1
 802277c:	613b      	str	r3, [r7, #16]
    while (*p && *p >= '0' && *p <= '9') {
 802277e:	693b      	ldr	r3, [r7, #16]
 8022780:	781b      	ldrb	r3, [r3, #0]
 8022782:	2b00      	cmp	r3, #0
 8022784:	d007      	beq.n	8022796 <nk_strtoi+0x8a>
 8022786:	693b      	ldr	r3, [r7, #16]
 8022788:	781b      	ldrb	r3, [r3, #0]
 802278a:	2b2f      	cmp	r3, #47	; 0x2f
 802278c:	d903      	bls.n	8022796 <nk_strtoi+0x8a>
 802278e:	693b      	ldr	r3, [r7, #16]
 8022790:	781b      	ldrb	r3, [r3, #0]
 8022792:	2b39      	cmp	r3, #57	; 0x39
 8022794:	d9e5      	bls.n	8022762 <nk_strtoi+0x56>
    }
    if (endptr)
 8022796:	683b      	ldr	r3, [r7, #0]
 8022798:	2b00      	cmp	r3, #0
 802279a:	d002      	beq.n	80227a2 <nk_strtoi+0x96>
        *endptr = p;
 802279c:	683b      	ldr	r3, [r7, #0]
 802279e:	693a      	ldr	r2, [r7, #16]
 80227a0:	601a      	str	r2, [r3, #0]
    return neg*value;
 80227a2:	697b      	ldr	r3, [r7, #20]
 80227a4:	68fa      	ldr	r2, [r7, #12]
 80227a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80227aa:	4618      	mov	r0, r3
 80227ac:	3718      	adds	r7, #24
 80227ae:	46bd      	mov	sp, r7
 80227b0:	bd80      	pop	{r7, pc}
 80227b2:	bf00      	nop
 80227b4:	08029410 	.word	0x08029410
 80227b8:	0802ac64 	.word	0x0802ac64
 80227bc:	080293f4 	.word	0x080293f4

080227c0 <nk_strtod>:
NK_API double
nk_strtod(const char *str, const char **endptr)
{
 80227c0:	b5b0      	push	{r4, r5, r7, lr}
 80227c2:	b090      	sub	sp, #64	; 0x40
 80227c4:	af00      	add	r7, sp, #0
 80227c6:	6078      	str	r0, [r7, #4]
 80227c8:	6039      	str	r1, [r7, #0]
    double m;
    double neg = 1.0;
 80227ca:	f04f 0200 	mov.w	r2, #0
 80227ce:	4b8e      	ldr	r3, [pc, #568]	; (8022a08 <nk_strtod+0x248>)
 80227d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const char *p = str;
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    double value = 0;
 80227d8:	f04f 0200 	mov.w	r2, #0
 80227dc:	f04f 0300 	mov.w	r3, #0
 80227e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double number = 0;
 80227e4:	f04f 0200 	mov.w	r2, #0
 80227e8:	f04f 0300 	mov.w	r3, #0
 80227ec:	e9c7 2302 	strd	r2, r3, [r7, #8]

    NK_ASSERT(str);
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	d105      	bne.n	8022802 <nk_strtod+0x42>
 80227f6:	4b85      	ldr	r3, [pc, #532]	; (8022a0c <nk_strtod+0x24c>)
 80227f8:	4a85      	ldr	r2, [pc, #532]	; (8022a10 <nk_strtod+0x250>)
 80227fa:	21b0      	movs	r1, #176	; 0xb0
 80227fc:	4885      	ldr	r0, [pc, #532]	; (8022a14 <nk_strtod+0x254>)
 80227fe:	f002 f96b 	bl	8024ad8 <__assert_func>
    if (!str) return 0;
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	2b00      	cmp	r3, #0
 8022806:	d107      	bne.n	8022818 <nk_strtod+0x58>
 8022808:	f04f 0200 	mov.w	r2, #0
 802280c:	f04f 0300 	mov.w	r3, #0
 8022810:	e0ea      	b.n	80229e8 <nk_strtod+0x228>

    /* skip whitespace */
    while (*p == ' ') p++;
 8022812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022814:	3301      	adds	r3, #1
 8022816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802281a:	781b      	ldrb	r3, [r3, #0]
 802281c:	2b20      	cmp	r3, #32
 802281e:	d0f8      	beq.n	8022812 <nk_strtod+0x52>
    if (*p == '-') {
 8022820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022822:	781b      	ldrb	r3, [r3, #0]
 8022824:	2b2d      	cmp	r3, #45	; 0x2d
 8022826:	d126      	bne.n	8022876 <nk_strtod+0xb6>
        neg = -1.0;
 8022828:	f04f 0200 	mov.w	r2, #0
 802282c:	4b7a      	ldr	r3, [pc, #488]	; (8022a18 <nk_strtod+0x258>)
 802282e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        p++;
 8022832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022834:	3301      	adds	r3, #1
 8022836:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    while (*p && *p != '.' && *p != 'e') {
 8022838:	e01d      	b.n	8022876 <nk_strtod+0xb6>
        value = value * 10.0 + (double) (*p - '0');
 802283a:	f04f 0200 	mov.w	r2, #0
 802283e:	4b77      	ldr	r3, [pc, #476]	; (8022a1c <nk_strtod+0x25c>)
 8022840:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022844:	f7dd ff00 	bl	8000648 <__aeabi_dmul>
 8022848:	4602      	mov	r2, r0
 802284a:	460b      	mov	r3, r1
 802284c:	4614      	mov	r4, r2
 802284e:	461d      	mov	r5, r3
 8022850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022852:	781b      	ldrb	r3, [r3, #0]
 8022854:	3b30      	subs	r3, #48	; 0x30
 8022856:	4618      	mov	r0, r3
 8022858:	f7dd fe8c 	bl	8000574 <__aeabi_i2d>
 802285c:	4602      	mov	r2, r0
 802285e:	460b      	mov	r3, r1
 8022860:	4620      	mov	r0, r4
 8022862:	4629      	mov	r1, r5
 8022864:	f7dd fd3a 	bl	80002dc <__adddf3>
 8022868:	4602      	mov	r2, r0
 802286a:	460b      	mov	r3, r1
 802286c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        p++;
 8022870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022872:	3301      	adds	r3, #1
 8022874:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (*p && *p != '.' && *p != 'e') {
 8022876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022878:	781b      	ldrb	r3, [r3, #0]
 802287a:	2b00      	cmp	r3, #0
 802287c:	d007      	beq.n	802288e <nk_strtod+0xce>
 802287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022880:	781b      	ldrb	r3, [r3, #0]
 8022882:	2b2e      	cmp	r3, #46	; 0x2e
 8022884:	d003      	beq.n	802288e <nk_strtod+0xce>
 8022886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022888:	781b      	ldrb	r3, [r3, #0]
 802288a:	2b65      	cmp	r3, #101	; 0x65
 802288c:	d1d5      	bne.n	802283a <nk_strtod+0x7a>
    }

    if (*p == '.') {
 802288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022890:	781b      	ldrb	r3, [r3, #0]
 8022892:	2b2e      	cmp	r3, #46	; 0x2e
 8022894:	d132      	bne.n	80228fc <nk_strtod+0x13c>
        p++;
 8022896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022898:	3301      	adds	r3, #1
 802289a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(m = 0.1; *p && *p != 'e'; p++ ) {
 802289c:	a358      	add	r3, pc, #352	; (adr r3, 8022a00 <nk_strtod+0x240>)
 802289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80228a6:	e021      	b.n	80228ec <nk_strtod+0x12c>
            value = value + (double) (*p - '0') * m;
 80228a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228aa:	781b      	ldrb	r3, [r3, #0]
 80228ac:	3b30      	subs	r3, #48	; 0x30
 80228ae:	4618      	mov	r0, r3
 80228b0:	f7dd fe60 	bl	8000574 <__aeabi_i2d>
 80228b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80228b8:	f7dd fec6 	bl	8000648 <__aeabi_dmul>
 80228bc:	4602      	mov	r2, r0
 80228be:	460b      	mov	r3, r1
 80228c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80228c4:	f7dd fd0a 	bl	80002dc <__adddf3>
 80228c8:	4602      	mov	r2, r0
 80228ca:	460b      	mov	r3, r1
 80228cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            m *= 0.1;
 80228d0:	a34b      	add	r3, pc, #300	; (adr r3, 8022a00 <nk_strtod+0x240>)
 80228d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80228da:	f7dd feb5 	bl	8000648 <__aeabi_dmul>
 80228de:	4602      	mov	r2, r0
 80228e0:	460b      	mov	r3, r1
 80228e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        for(m = 0.1; *p && *p != 'e'; p++ ) {
 80228e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228e8:	3301      	adds	r3, #1
 80228ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80228ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228ee:	781b      	ldrb	r3, [r3, #0]
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	d003      	beq.n	80228fc <nk_strtod+0x13c>
 80228f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228f6:	781b      	ldrb	r3, [r3, #0]
 80228f8:	2b65      	cmp	r3, #101	; 0x65
 80228fa:	d1d5      	bne.n	80228a8 <nk_strtod+0xe8>
        }
    }
    if (*p == 'e') {
 80228fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228fe:	781b      	ldrb	r3, [r3, #0]
 8022900:	2b65      	cmp	r3, #101	; 0x65
 8022902:	d15f      	bne.n	80229c4 <nk_strtod+0x204>
        int i, pow, div;
        p++;
 8022904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022906:	3301      	adds	r3, #1
 8022908:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (*p == '-') {
 802290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802290c:	781b      	ldrb	r3, [r3, #0]
 802290e:	2b2d      	cmp	r3, #45	; 0x2d
 8022910:	d105      	bne.n	802291e <nk_strtod+0x15e>
            div = nk_true;
 8022912:	2301      	movs	r3, #1
 8022914:	617b      	str	r3, [r7, #20]
            p++;
 8022916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022918:	3301      	adds	r3, #1
 802291a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802291c:	e00b      	b.n	8022936 <nk_strtod+0x176>
        } else if (*p == '+') {
 802291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022920:	781b      	ldrb	r3, [r3, #0]
 8022922:	2b2b      	cmp	r3, #43	; 0x2b
 8022924:	d105      	bne.n	8022932 <nk_strtod+0x172>
            div = nk_false;
 8022926:	2300      	movs	r3, #0
 8022928:	617b      	str	r3, [r7, #20]
            p++;
 802292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802292c:	3301      	adds	r3, #1
 802292e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022930:	e001      	b.n	8022936 <nk_strtod+0x176>
        } else div = nk_false;
 8022932:	2300      	movs	r3, #0
 8022934:	617b      	str	r3, [r7, #20]

        for (pow = 0; *p; p++)
 8022936:	2300      	movs	r3, #0
 8022938:	61bb      	str	r3, [r7, #24]
 802293a:	e00d      	b.n	8022958 <nk_strtod+0x198>
            pow = pow * 10 + (int) (*p - '0');
 802293c:	69ba      	ldr	r2, [r7, #24]
 802293e:	4613      	mov	r3, r2
 8022940:	009b      	lsls	r3, r3, #2
 8022942:	4413      	add	r3, r2
 8022944:	005b      	lsls	r3, r3, #1
 8022946:	461a      	mov	r2, r3
 8022948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802294a:	781b      	ldrb	r3, [r3, #0]
 802294c:	3b30      	subs	r3, #48	; 0x30
 802294e:	4413      	add	r3, r2
 8022950:	61bb      	str	r3, [r7, #24]
        for (pow = 0; *p; p++)
 8022952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022954:	3301      	adds	r3, #1
 8022956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802295a:	781b      	ldrb	r3, [r3, #0]
 802295c:	2b00      	cmp	r3, #0
 802295e:	d1ed      	bne.n	802293c <nk_strtod+0x17c>

        for (m = 1.0, i = 0; i < pow; i++)
 8022960:	f04f 0200 	mov.w	r2, #0
 8022964:	4b28      	ldr	r3, [pc, #160]	; (8022a08 <nk_strtod+0x248>)
 8022966:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 802296a:	2300      	movs	r3, #0
 802296c:	61fb      	str	r3, [r7, #28]
 802296e:	e00d      	b.n	802298c <nk_strtod+0x1cc>
            m *= 10.0;
 8022970:	f04f 0200 	mov.w	r2, #0
 8022974:	4b29      	ldr	r3, [pc, #164]	; (8022a1c <nk_strtod+0x25c>)
 8022976:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 802297a:	f7dd fe65 	bl	8000648 <__aeabi_dmul>
 802297e:	4602      	mov	r2, r0
 8022980:	460b      	mov	r3, r1
 8022982:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        for (m = 1.0, i = 0; i < pow; i++)
 8022986:	69fb      	ldr	r3, [r7, #28]
 8022988:	3301      	adds	r3, #1
 802298a:	61fb      	str	r3, [r7, #28]
 802298c:	69fa      	ldr	r2, [r7, #28]
 802298e:	69bb      	ldr	r3, [r7, #24]
 8022990:	429a      	cmp	r2, r3
 8022992:	dbed      	blt.n	8022970 <nk_strtod+0x1b0>

        if (div)
 8022994:	697b      	ldr	r3, [r7, #20]
 8022996:	2b00      	cmp	r3, #0
 8022998:	d00a      	beq.n	80229b0 <nk_strtod+0x1f0>
            value /= m;
 802299a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802299e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229a2:	f7dd ff7b 	bl	800089c <__aeabi_ddiv>
 80229a6:	4602      	mov	r2, r0
 80229a8:	460b      	mov	r3, r1
 80229aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80229ae:	e009      	b.n	80229c4 <nk_strtod+0x204>
        else value *= m;
 80229b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80229b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229b8:	f7dd fe46 	bl	8000648 <__aeabi_dmul>
 80229bc:	4602      	mov	r2, r0
 80229be:	460b      	mov	r3, r1
 80229c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    number = value * neg;
 80229c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80229c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229cc:	f7dd fe3c 	bl	8000648 <__aeabi_dmul>
 80229d0:	4602      	mov	r2, r0
 80229d2:	460b      	mov	r3, r1
 80229d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (endptr)
 80229d8:	683b      	ldr	r3, [r7, #0]
 80229da:	2b00      	cmp	r3, #0
 80229dc:	d002      	beq.n	80229e4 <nk_strtod+0x224>
        *endptr = p;
 80229de:	683b      	ldr	r3, [r7, #0]
 80229e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80229e2:	601a      	str	r2, [r3, #0]
    return number;
 80229e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80229e8:	ec43 2b17 	vmov	d7, r2, r3
 80229ec:	eeb0 0a47 	vmov.f32	s0, s14
 80229f0:	eef0 0a67 	vmov.f32	s1, s15
 80229f4:	3740      	adds	r7, #64	; 0x40
 80229f6:	46bd      	mov	sp, r7
 80229f8:	bdb0      	pop	{r4, r5, r7, pc}
 80229fa:	bf00      	nop
 80229fc:	f3af 8000 	nop.w
 8022a00:	9999999a 	.word	0x9999999a
 8022a04:	3fb99999 	.word	0x3fb99999
 8022a08:	3ff00000 	.word	0x3ff00000
 8022a0c:	08029410 	.word	0x08029410
 8022a10:	0802ac70 	.word	0x0802ac70
 8022a14:	080293f4 	.word	0x080293f4
 8022a18:	bff00000 	.word	0xbff00000
 8022a1c:	40240000 	.word	0x40240000

08022a20 <nk_strtof>:
NK_API float
nk_strtof(const char *str, const char **endptr)
{
 8022a20:	b580      	push	{r7, lr}
 8022a22:	b086      	sub	sp, #24
 8022a24:	af00      	add	r7, sp, #0
 8022a26:	6078      	str	r0, [r7, #4]
 8022a28:	6039      	str	r1, [r7, #0]
    float float_value;
    double double_value;
    double_value = NK_STRTOD(str, endptr);
 8022a2a:	6839      	ldr	r1, [r7, #0]
 8022a2c:	6878      	ldr	r0, [r7, #4]
 8022a2e:	f7ff fec7 	bl	80227c0 <nk_strtod>
 8022a32:	ed87 0b04 	vstr	d0, [r7, #16]
    float_value = (float)double_value;
 8022a36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022a3a:	f7de f8fd 	bl	8000c38 <__aeabi_d2f>
 8022a3e:	4603      	mov	r3, r0
 8022a40:	60fb      	str	r3, [r7, #12]
    return float_value;
 8022a42:	68fb      	ldr	r3, [r7, #12]
 8022a44:	ee07 3a90 	vmov	s15, r3
}
 8022a48:	eeb0 0a67 	vmov.f32	s0, s15
 8022a4c:	3718      	adds	r7, #24
 8022a4e:	46bd      	mov	sp, r7
 8022a50:	bd80      	pop	{r7, pc}
	...

08022a54 <nk_stricmpn>:
    } while (c1);
    return 0;
}
NK_API int
nk_stricmpn(const char *s1, const char *s2, int n)
{
 8022a54:	b580      	push	{r7, lr}
 8022a56:	b088      	sub	sp, #32
 8022a58:	af00      	add	r7, sp, #0
 8022a5a:	60f8      	str	r0, [r7, #12]
 8022a5c:	60b9      	str	r1, [r7, #8]
 8022a5e:	607a      	str	r2, [r7, #4]
    int c1,c2,d;
    NK_ASSERT(n >= 0);
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	da06      	bge.n	8022a74 <nk_stricmpn+0x20>
 8022a66:	4b25      	ldr	r3, [pc, #148]	; (8022afc <nk_stricmpn+0xa8>)
 8022a68:	4a25      	ldr	r2, [pc, #148]	; (8022b00 <nk_stricmpn+0xac>)
 8022a6a:	f240 1103 	movw	r1, #259	; 0x103
 8022a6e:	4825      	ldr	r0, [pc, #148]	; (8022b04 <nk_stricmpn+0xb0>)
 8022a70:	f002 f832 	bl	8024ad8 <__assert_func>
    do {
        c1 = *s1++;
 8022a74:	68fb      	ldr	r3, [r7, #12]
 8022a76:	1c5a      	adds	r2, r3, #1
 8022a78:	60fa      	str	r2, [r7, #12]
 8022a7a:	781b      	ldrb	r3, [r3, #0]
 8022a7c:	61bb      	str	r3, [r7, #24]
        c2 = *s2++;
 8022a7e:	68bb      	ldr	r3, [r7, #8]
 8022a80:	1c5a      	adds	r2, r3, #1
 8022a82:	60ba      	str	r2, [r7, #8]
 8022a84:	781b      	ldrb	r3, [r3, #0]
 8022a86:	617b      	str	r3, [r7, #20]
        if (!n--) return 0;
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	1e5a      	subs	r2, r3, #1
 8022a8c:	607a      	str	r2, [r7, #4]
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d101      	bne.n	8022a96 <nk_stricmpn+0x42>
 8022a92:	2300      	movs	r3, #0
 8022a94:	e02e      	b.n	8022af4 <nk_stricmpn+0xa0>

        d = c1 - c2;
 8022a96:	69ba      	ldr	r2, [r7, #24]
 8022a98:	697b      	ldr	r3, [r7, #20]
 8022a9a:	1ad3      	subs	r3, r2, r3
 8022a9c:	61fb      	str	r3, [r7, #28]
        while (d) {
 8022a9e:	bf00      	nop
 8022aa0:	69fb      	ldr	r3, [r7, #28]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d022      	beq.n	8022aec <nk_stricmpn+0x98>
            if (c1 <= 'Z' && c1 >= 'A') {
 8022aa6:	69bb      	ldr	r3, [r7, #24]
 8022aa8:	2b5a      	cmp	r3, #90	; 0x5a
 8022aaa:	dc08      	bgt.n	8022abe <nk_stricmpn+0x6a>
 8022aac:	69bb      	ldr	r3, [r7, #24]
 8022aae:	2b40      	cmp	r3, #64	; 0x40
 8022ab0:	dd05      	ble.n	8022abe <nk_stricmpn+0x6a>
                d += ('a' - 'A');
 8022ab2:	69fb      	ldr	r3, [r7, #28]
 8022ab4:	3320      	adds	r3, #32
 8022ab6:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 8022ab8:	69fb      	ldr	r3, [r7, #28]
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d013      	beq.n	8022ae6 <nk_stricmpn+0x92>
            }
            if (c2 <= 'Z' && c2 >= 'A') {
 8022abe:	697b      	ldr	r3, [r7, #20]
 8022ac0:	2b5a      	cmp	r3, #90	; 0x5a
 8022ac2:	dc08      	bgt.n	8022ad6 <nk_stricmpn+0x82>
 8022ac4:	697b      	ldr	r3, [r7, #20]
 8022ac6:	2b40      	cmp	r3, #64	; 0x40
 8022ac8:	dd05      	ble.n	8022ad6 <nk_stricmpn+0x82>
                d -= ('a' - 'A');
 8022aca:	69fb      	ldr	r3, [r7, #28]
 8022acc:	3b20      	subs	r3, #32
 8022ace:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 8022ad0:	69fb      	ldr	r3, [r7, #28]
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d009      	beq.n	8022aea <nk_stricmpn+0x96>
            }
            return ((d >= 0) << 1) - 1;
 8022ad6:	69fb      	ldr	r3, [r7, #28]
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	db01      	blt.n	8022ae0 <nk_stricmpn+0x8c>
 8022adc:	2301      	movs	r3, #1
 8022ade:	e009      	b.n	8022af4 <nk_stricmpn+0xa0>
 8022ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8022ae4:	e006      	b.n	8022af4 <nk_stricmpn+0xa0>
                if (!d) break;
 8022ae6:	bf00      	nop
 8022ae8:	e000      	b.n	8022aec <nk_stricmpn+0x98>
                if (!d) break;
 8022aea:	bf00      	nop
        }
    } while (c1);
 8022aec:	69bb      	ldr	r3, [r7, #24]
 8022aee:	2b00      	cmp	r3, #0
 8022af0:	d1c0      	bne.n	8022a74 <nk_stricmpn+0x20>
    return 0;
 8022af2:	2300      	movs	r3, #0
}
 8022af4:	4618      	mov	r0, r3
 8022af6:	3720      	adds	r7, #32
 8022af8:	46bd      	mov	sp, r7
 8022afa:	bd80      	pop	{r7, pc}
 8022afc:	08029414 	.word	0x08029414
 8022b00:	0802ac7c 	.word	0x0802ac7c
 8022b04:	080293f4 	.word	0x080293f4

08022b08 <nk_string_float_limit>:
{
    return nk_strmatch_fuzzy_text(str, nk_strlen(str), pattern, out_score);
}
NK_LIB int
nk_string_float_limit(char *string, int prec)
{
 8022b08:	b480      	push	{r7}
 8022b0a:	b085      	sub	sp, #20
 8022b0c:	af00      	add	r7, sp, #0
 8022b0e:	6078      	str	r0, [r7, #4]
 8022b10:	6039      	str	r1, [r7, #0]
    int dot = 0;
 8022b12:	2300      	movs	r3, #0
 8022b14:	60fb      	str	r3, [r7, #12]
    char *c = string;
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	60bb      	str	r3, [r7, #8]
    while (*c) {
 8022b1a:	e01b      	b.n	8022b54 <nk_string_float_limit+0x4c>
        if (*c == '.') {
 8022b1c:	68bb      	ldr	r3, [r7, #8]
 8022b1e:	781b      	ldrb	r3, [r3, #0]
 8022b20:	2b2e      	cmp	r3, #46	; 0x2e
 8022b22:	d105      	bne.n	8022b30 <nk_string_float_limit+0x28>
            dot = 1;
 8022b24:	2301      	movs	r3, #1
 8022b26:	60fb      	str	r3, [r7, #12]
            c++;
 8022b28:	68bb      	ldr	r3, [r7, #8]
 8022b2a:	3301      	adds	r3, #1
 8022b2c:	60bb      	str	r3, [r7, #8]
            continue;
 8022b2e:	e011      	b.n	8022b54 <nk_string_float_limit+0x4c>
        }
        if (dot == (prec+1)) {
 8022b30:	683b      	ldr	r3, [r7, #0]
 8022b32:	3301      	adds	r3, #1
 8022b34:	68fa      	ldr	r2, [r7, #12]
 8022b36:	429a      	cmp	r2, r3
 8022b38:	d103      	bne.n	8022b42 <nk_string_float_limit+0x3a>
            *c = 0;
 8022b3a:	68bb      	ldr	r3, [r7, #8]
 8022b3c:	2200      	movs	r2, #0
 8022b3e:	701a      	strb	r2, [r3, #0]
            break;
 8022b40:	e00c      	b.n	8022b5c <nk_string_float_limit+0x54>
        }
        if (dot > 0) dot++;
 8022b42:	68fb      	ldr	r3, [r7, #12]
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	dd02      	ble.n	8022b4e <nk_string_float_limit+0x46>
 8022b48:	68fb      	ldr	r3, [r7, #12]
 8022b4a:	3301      	adds	r3, #1
 8022b4c:	60fb      	str	r3, [r7, #12]
        c++;
 8022b4e:	68bb      	ldr	r3, [r7, #8]
 8022b50:	3301      	adds	r3, #1
 8022b52:	60bb      	str	r3, [r7, #8]
    while (*c) {
 8022b54:	68bb      	ldr	r3, [r7, #8]
 8022b56:	781b      	ldrb	r3, [r3, #0]
 8022b58:	2b00      	cmp	r3, #0
 8022b5a:	d1df      	bne.n	8022b1c <nk_string_float_limit+0x14>
    }
    return (int)(c - string);
 8022b5c:	68ba      	ldr	r2, [r7, #8]
 8022b5e:	687b      	ldr	r3, [r7, #4]
 8022b60:	1ad3      	subs	r3, r2, r3
}
 8022b62:	4618      	mov	r0, r3
 8022b64:	3714      	adds	r7, #20
 8022b66:	46bd      	mov	sp, r7
 8022b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b6c:	4770      	bx	lr

08022b6e <nk_strrev_ascii>:
NK_INTERN void
nk_strrev_ascii(char *s)
{
 8022b6e:	b580      	push	{r7, lr}
 8022b70:	b086      	sub	sp, #24
 8022b72:	af00      	add	r7, sp, #0
 8022b74:	6078      	str	r0, [r7, #4]
    int len = nk_strlen(s);
 8022b76:	6878      	ldr	r0, [r7, #4]
 8022b78:	f7ff fda2 	bl	80226c0 <nk_strlen>
 8022b7c:	6138      	str	r0, [r7, #16]
    int end = len / 2;
 8022b7e:	693b      	ldr	r3, [r7, #16]
 8022b80:	0fda      	lsrs	r2, r3, #31
 8022b82:	4413      	add	r3, r2
 8022b84:	105b      	asrs	r3, r3, #1
 8022b86:	60fb      	str	r3, [r7, #12]
    int i = 0;
 8022b88:	2300      	movs	r3, #0
 8022b8a:	617b      	str	r3, [r7, #20]
    char t;
    for (; i < end; ++i) {
 8022b8c:	e01c      	b.n	8022bc8 <nk_strrev_ascii+0x5a>
        t = s[i];
 8022b8e:	697b      	ldr	r3, [r7, #20]
 8022b90:	687a      	ldr	r2, [r7, #4]
 8022b92:	4413      	add	r3, r2
 8022b94:	781b      	ldrb	r3, [r3, #0]
 8022b96:	72fb      	strb	r3, [r7, #11]
        s[i] = s[len - 1 - i];
 8022b98:	693b      	ldr	r3, [r7, #16]
 8022b9a:	1e5a      	subs	r2, r3, #1
 8022b9c:	697b      	ldr	r3, [r7, #20]
 8022b9e:	1ad3      	subs	r3, r2, r3
 8022ba0:	461a      	mov	r2, r3
 8022ba2:	687b      	ldr	r3, [r7, #4]
 8022ba4:	441a      	add	r2, r3
 8022ba6:	697b      	ldr	r3, [r7, #20]
 8022ba8:	6879      	ldr	r1, [r7, #4]
 8022baa:	440b      	add	r3, r1
 8022bac:	7812      	ldrb	r2, [r2, #0]
 8022bae:	701a      	strb	r2, [r3, #0]
        s[len -1 - i] = t;
 8022bb0:	693b      	ldr	r3, [r7, #16]
 8022bb2:	1e5a      	subs	r2, r3, #1
 8022bb4:	697b      	ldr	r3, [r7, #20]
 8022bb6:	1ad3      	subs	r3, r2, r3
 8022bb8:	461a      	mov	r2, r3
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	4413      	add	r3, r2
 8022bbe:	7afa      	ldrb	r2, [r7, #11]
 8022bc0:	701a      	strb	r2, [r3, #0]
    for (; i < end; ++i) {
 8022bc2:	697b      	ldr	r3, [r7, #20]
 8022bc4:	3301      	adds	r3, #1
 8022bc6:	617b      	str	r3, [r7, #20]
 8022bc8:	697a      	ldr	r2, [r7, #20]
 8022bca:	68fb      	ldr	r3, [r7, #12]
 8022bcc:	429a      	cmp	r2, r3
 8022bce:	dbde      	blt.n	8022b8e <nk_strrev_ascii+0x20>
    }
}
 8022bd0:	bf00      	nop
 8022bd2:	bf00      	nop
 8022bd4:	3718      	adds	r7, #24
 8022bd6:	46bd      	mov	sp, r7
 8022bd8:	bd80      	pop	{r7, pc}
	...

08022bdc <nk_itoa>:
NK_LIB char*
nk_itoa(char *s, long n)
{
 8022bdc:	b580      	push	{r7, lr}
 8022bde:	b084      	sub	sp, #16
 8022be0:	af00      	add	r7, sp, #0
 8022be2:	6078      	str	r0, [r7, #4]
 8022be4:	6039      	str	r1, [r7, #0]
    long i = 0;
 8022be6:	2300      	movs	r3, #0
 8022be8:	60fb      	str	r3, [r7, #12]
    if (n == 0) {
 8022bea:	683b      	ldr	r3, [r7, #0]
 8022bec:	2b00      	cmp	r3, #0
 8022bee:	d10e      	bne.n	8022c0e <nk_itoa+0x32>
        s[i++] = '0';
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	1c5a      	adds	r2, r3, #1
 8022bf4:	60fa      	str	r2, [r7, #12]
 8022bf6:	461a      	mov	r2, r3
 8022bf8:	687b      	ldr	r3, [r7, #4]
 8022bfa:	4413      	add	r3, r2
 8022bfc:	2230      	movs	r2, #48	; 0x30
 8022bfe:	701a      	strb	r2, [r3, #0]
        s[i] = 0;
 8022c00:	68fb      	ldr	r3, [r7, #12]
 8022c02:	687a      	ldr	r2, [r7, #4]
 8022c04:	4413      	add	r3, r2
 8022c06:	2200      	movs	r2, #0
 8022c08:	701a      	strb	r2, [r3, #0]
        return s;
 8022c0a:	687b      	ldr	r3, [r7, #4]
 8022c0c:	e03f      	b.n	8022c8e <nk_itoa+0xb2>
    }
    if (n < 0) {
 8022c0e:	683b      	ldr	r3, [r7, #0]
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	da29      	bge.n	8022c68 <nk_itoa+0x8c>
        s[i++] = '-';
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	1c5a      	adds	r2, r3, #1
 8022c18:	60fa      	str	r2, [r7, #12]
 8022c1a:	461a      	mov	r2, r3
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	4413      	add	r3, r2
 8022c20:	222d      	movs	r2, #45	; 0x2d
 8022c22:	701a      	strb	r2, [r3, #0]
        n = -n;
 8022c24:	683b      	ldr	r3, [r7, #0]
 8022c26:	425b      	negs	r3, r3
 8022c28:	603b      	str	r3, [r7, #0]
    }
    while (n > 0) {
 8022c2a:	e01d      	b.n	8022c68 <nk_itoa+0x8c>
        s[i++] = (char)('0' + (n % 10));
 8022c2c:	683a      	ldr	r2, [r7, #0]
 8022c2e:	4b1a      	ldr	r3, [pc, #104]	; (8022c98 <nk_itoa+0xbc>)
 8022c30:	fb83 1302 	smull	r1, r3, r3, r2
 8022c34:	1099      	asrs	r1, r3, #2
 8022c36:	17d3      	asrs	r3, r2, #31
 8022c38:	1ac9      	subs	r1, r1, r3
 8022c3a:	460b      	mov	r3, r1
 8022c3c:	009b      	lsls	r3, r3, #2
 8022c3e:	440b      	add	r3, r1
 8022c40:	005b      	lsls	r3, r3, #1
 8022c42:	1ad1      	subs	r1, r2, r3
 8022c44:	b2ca      	uxtb	r2, r1
 8022c46:	68fb      	ldr	r3, [r7, #12]
 8022c48:	1c59      	adds	r1, r3, #1
 8022c4a:	60f9      	str	r1, [r7, #12]
 8022c4c:	4619      	mov	r1, r3
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	440b      	add	r3, r1
 8022c52:	3230      	adds	r2, #48	; 0x30
 8022c54:	b2d2      	uxtb	r2, r2
 8022c56:	701a      	strb	r2, [r3, #0]
        n /= 10;
 8022c58:	683b      	ldr	r3, [r7, #0]
 8022c5a:	4a0f      	ldr	r2, [pc, #60]	; (8022c98 <nk_itoa+0xbc>)
 8022c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8022c60:	1092      	asrs	r2, r2, #2
 8022c62:	17db      	asrs	r3, r3, #31
 8022c64:	1ad3      	subs	r3, r2, r3
 8022c66:	603b      	str	r3, [r7, #0]
    while (n > 0) {
 8022c68:	683b      	ldr	r3, [r7, #0]
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	dcde      	bgt.n	8022c2c <nk_itoa+0x50>
    }
    s[i] = 0;
 8022c6e:	68fb      	ldr	r3, [r7, #12]
 8022c70:	687a      	ldr	r2, [r7, #4]
 8022c72:	4413      	add	r3, r2
 8022c74:	2200      	movs	r2, #0
 8022c76:	701a      	strb	r2, [r3, #0]
    if (s[0] == '-')
 8022c78:	687b      	ldr	r3, [r7, #4]
 8022c7a:	781b      	ldrb	r3, [r3, #0]
 8022c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8022c7e:	d102      	bne.n	8022c86 <nk_itoa+0xaa>
        ++s;
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	3301      	adds	r3, #1
 8022c84:	607b      	str	r3, [r7, #4]

    nk_strrev_ascii(s);
 8022c86:	6878      	ldr	r0, [r7, #4]
 8022c88:	f7ff ff71 	bl	8022b6e <nk_strrev_ascii>
    return s;
 8022c8c:	687b      	ldr	r3, [r7, #4]
}
 8022c8e:	4618      	mov	r0, r3
 8022c90:	3710      	adds	r7, #16
 8022c92:	46bd      	mov	sp, r7
 8022c94:	bd80      	pop	{r7, pc}
 8022c96:	bf00      	nop
 8022c98:	66666667 	.word	0x66666667
 8022c9c:	00000000 	.word	0x00000000

08022ca0 <nk_dtoa>:

NK_LIB char*
nk_dtoa(char *s, double n)
{
 8022ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ca2:	b091      	sub	sp, #68	; 0x44
 8022ca4:	af00      	add	r7, sp, #0
 8022ca6:	60f8      	str	r0, [r7, #12]
 8022ca8:	ed87 0b00 	vstr	d0, [r7]
    int useExp = 0;
 8022cac:	2300      	movs	r3, #0
 8022cae:	62bb      	str	r3, [r7, #40]	; 0x28
    int digit = 0, m = 0, m1 = 0;
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8022cb4:	2300      	movs	r3, #0
 8022cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022cb8:	2300      	movs	r3, #0
 8022cba:	63bb      	str	r3, [r7, #56]	; 0x38
    char *c = s;
 8022cbc:	68fb      	ldr	r3, [r7, #12]
 8022cbe:	637b      	str	r3, [r7, #52]	; 0x34
    int neg = 0;
 8022cc0:	2300      	movs	r3, #0
 8022cc2:	623b      	str	r3, [r7, #32]

    NK_ASSERT(s);
 8022cc4:	68fb      	ldr	r3, [r7, #12]
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	d106      	bne.n	8022cd8 <nk_dtoa+0x38>
 8022cca:	4b95      	ldr	r3, [pc, #596]	; (8022f20 <nk_dtoa+0x280>)
 8022ccc:	4a95      	ldr	r2, [pc, #596]	; (8022f24 <nk_dtoa+0x284>)
 8022cce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8022cd2:	4895      	ldr	r0, [pc, #596]	; (8022f28 <nk_dtoa+0x288>)
 8022cd4:	f001 ff00 	bl	8024ad8 <__assert_func>
    if (!s) return 0;
 8022cd8:	68fb      	ldr	r3, [r7, #12]
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	d101      	bne.n	8022ce2 <nk_dtoa+0x42>
 8022cde:	2300      	movs	r3, #0
 8022ce0:	e162      	b.n	8022fa8 <nk_dtoa+0x308>

    if (n == 0.0) {
 8022ce2:	f04f 0200 	mov.w	r2, #0
 8022ce6:	f04f 0300 	mov.w	r3, #0
 8022cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022cee:	f7dd ff13 	bl	8000b18 <__aeabi_dcmpeq>
 8022cf2:	4603      	mov	r3, r0
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	d008      	beq.n	8022d0a <nk_dtoa+0x6a>
        s[0] = '0'; s[1] = '\0';
 8022cf8:	68fb      	ldr	r3, [r7, #12]
 8022cfa:	2230      	movs	r2, #48	; 0x30
 8022cfc:	701a      	strb	r2, [r3, #0]
 8022cfe:	68fb      	ldr	r3, [r7, #12]
 8022d00:	3301      	adds	r3, #1
 8022d02:	2200      	movs	r2, #0
 8022d04:	701a      	strb	r2, [r3, #0]
        return s;
 8022d06:	68fb      	ldr	r3, [r7, #12]
 8022d08:	e14e      	b.n	8022fa8 <nk_dtoa+0x308>
    }

    neg = (n < 0);
 8022d0a:	2301      	movs	r3, #1
 8022d0c:	461e      	mov	r6, r3
 8022d0e:	f04f 0200 	mov.w	r2, #0
 8022d12:	f04f 0300 	mov.w	r3, #0
 8022d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022d1a:	f7dd ff07 	bl	8000b2c <__aeabi_dcmplt>
 8022d1e:	4603      	mov	r3, r0
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	d101      	bne.n	8022d28 <nk_dtoa+0x88>
 8022d24:	2300      	movs	r3, #0
 8022d26:	461e      	mov	r6, r3
 8022d28:	b2f3      	uxtb	r3, r6
 8022d2a:	623b      	str	r3, [r7, #32]
    if (neg) n = -n;
 8022d2c:	6a3b      	ldr	r3, [r7, #32]
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	d005      	beq.n	8022d3e <nk_dtoa+0x9e>
 8022d32:	683c      	ldr	r4, [r7, #0]
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8022d3a:	e9c7 4500 	strd	r4, r5, [r7]

    /* calculate magnitude */
    m = nk_log10(n);
 8022d3e:	ed97 0b00 	vldr	d0, [r7]
 8022d42:	f7f3 fd2b 	bl	801679c <nk_log10>
 8022d46:	63f8      	str	r0, [r7, #60]	; 0x3c
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 8022d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d4a:	2b0d      	cmp	r3, #13
 8022d4c:	dc09      	bgt.n	8022d62 <nk_dtoa+0xc2>
 8022d4e:	6a3b      	ldr	r3, [r7, #32]
 8022d50:	2b00      	cmp	r3, #0
 8022d52:	d002      	beq.n	8022d5a <nk_dtoa+0xba>
 8022d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d56:	2b08      	cmp	r3, #8
 8022d58:	dc03      	bgt.n	8022d62 <nk_dtoa+0xc2>
 8022d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d5c:	f113 0f08 	cmn.w	r3, #8
 8022d60:	da01      	bge.n	8022d66 <nk_dtoa+0xc6>
 8022d62:	2301      	movs	r3, #1
 8022d64:	e000      	b.n	8022d68 <nk_dtoa+0xc8>
 8022d66:	2300      	movs	r3, #0
 8022d68:	62bb      	str	r3, [r7, #40]	; 0x28
    if (neg) *(c++) = '-';
 8022d6a:	6a3b      	ldr	r3, [r7, #32]
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	d004      	beq.n	8022d7a <nk_dtoa+0xda>
 8022d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022d72:	1c5a      	adds	r2, r3, #1
 8022d74:	637a      	str	r2, [r7, #52]	; 0x34
 8022d76:	222d      	movs	r2, #45	; 0x2d
 8022d78:	701a      	strb	r2, [r3, #0]

    /* set up for scientific notation */
    if (useExp) {
 8022d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d7c:	2b00      	cmp	r3, #0
 8022d7e:	d018      	beq.n	8022db2 <nk_dtoa+0x112>
        if (m < 0)
 8022d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	da02      	bge.n	8022d8c <nk_dtoa+0xec>
           m -= 1;
 8022d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d88:	3b01      	subs	r3, #1
 8022d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        n = n / (double)nk_pow(10.0, m);
 8022d8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8022d8e:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8022f10 <nk_dtoa+0x270>
 8022d92:	f7f3 fc83 	bl	801669c <nk_pow>
 8022d96:	ec53 2b10 	vmov	r2, r3, d0
 8022d9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022d9e:	f7dd fd7d 	bl	800089c <__aeabi_ddiv>
 8022da2:	4602      	mov	r2, r0
 8022da4:	460b      	mov	r3, r1
 8022da6:	e9c7 2300 	strd	r2, r3, [r7]
        m1 = m;
 8022daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022dac:	63bb      	str	r3, [r7, #56]	; 0x38
        m = 0;
 8022dae:	2300      	movs	r3, #0
 8022db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (m < 1.0) {
 8022db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	dc52      	bgt.n	8022e5e <nk_dtoa+0x1be>
        m = 0;
 8022db8:	2300      	movs	r3, #0
 8022dba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* convert the number */
    while (n > NK_FLOAT_PRECISION || m >= 0) {
 8022dbc:	e04f      	b.n	8022e5e <nk_dtoa+0x1be>
        double weight = nk_pow(10.0, m);
 8022dbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8022dc0:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8022f10 <nk_dtoa+0x270>
 8022dc4:	f7f3 fc6a 	bl	801669c <nk_pow>
 8022dc8:	ed87 0b06 	vstr	d0, [r7, #24]
        if (weight > 0) {
 8022dcc:	f04f 0200 	mov.w	r2, #0
 8022dd0:	f04f 0300 	mov.w	r3, #0
 8022dd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022dd8:	f7dd fec6 	bl	8000b68 <__aeabi_dcmpgt>
 8022ddc:	4603      	mov	r3, r0
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	d027      	beq.n	8022e32 <nk_dtoa+0x192>
            double t = (double)n / weight;
 8022de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022de6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022dea:	f7dd fd57 	bl	800089c <__aeabi_ddiv>
 8022dee:	4602      	mov	r2, r0
 8022df0:	460b      	mov	r3, r1
 8022df2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            digit = nk_ifloord(t);
 8022df6:	ed97 0b04 	vldr	d0, [r7, #16]
 8022dfa:	f7f3 fca3 	bl	8016744 <nk_ifloord>
 8022dfe:	6278      	str	r0, [r7, #36]	; 0x24
            n -= ((double)digit * weight);
 8022e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022e02:	f7dd fbb7 	bl	8000574 <__aeabi_i2d>
 8022e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022e0a:	f7dd fc1d 	bl	8000648 <__aeabi_dmul>
 8022e0e:	4602      	mov	r2, r0
 8022e10:	460b      	mov	r3, r1
 8022e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022e16:	f7dd fa5f 	bl	80002d8 <__aeabi_dsub>
 8022e1a:	4602      	mov	r2, r0
 8022e1c:	460b      	mov	r3, r1
 8022e1e:	e9c7 2300 	strd	r2, r3, [r7]
            *(c++) = (char)('0' + (char)digit);
 8022e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e24:	b2da      	uxtb	r2, r3
 8022e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e28:	1c59      	adds	r1, r3, #1
 8022e2a:	6379      	str	r1, [r7, #52]	; 0x34
 8022e2c:	3230      	adds	r2, #48	; 0x30
 8022e2e:	b2d2      	uxtb	r2, r2
 8022e30:	701a      	strb	r2, [r3, #0]
        }
        if (m == 0 && n > 0)
 8022e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d10f      	bne.n	8022e58 <nk_dtoa+0x1b8>
 8022e38:	f04f 0200 	mov.w	r2, #0
 8022e3c:	f04f 0300 	mov.w	r3, #0
 8022e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022e44:	f7dd fe90 	bl	8000b68 <__aeabi_dcmpgt>
 8022e48:	4603      	mov	r3, r0
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	d004      	beq.n	8022e58 <nk_dtoa+0x1b8>
            *(c++) = '.';
 8022e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e50:	1c5a      	adds	r2, r3, #1
 8022e52:	637a      	str	r2, [r7, #52]	; 0x34
 8022e54:	222e      	movs	r2, #46	; 0x2e
 8022e56:	701a      	strb	r2, [r3, #0]
        m--;
 8022e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022e5a:	3b01      	subs	r3, #1
 8022e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (n > NK_FLOAT_PRECISION || m >= 0) {
 8022e5e:	a32e      	add	r3, pc, #184	; (adr r3, 8022f18 <nk_dtoa+0x278>)
 8022e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022e68:	f7dd fe7e 	bl	8000b68 <__aeabi_dcmpgt>
 8022e6c:	4603      	mov	r3, r0
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d1a5      	bne.n	8022dbe <nk_dtoa+0x11e>
 8022e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022e74:	2b00      	cmp	r3, #0
 8022e76:	daa2      	bge.n	8022dbe <nk_dtoa+0x11e>
    }

    if (useExp) {
 8022e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e7a:	2b00      	cmp	r3, #0
 8022e7c:	f000 8090 	beq.w	8022fa0 <nk_dtoa+0x300>
        /* convert the exponent */
        int i, j;
        *(c++) = 'e';
 8022e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e82:	1c5a      	adds	r2, r3, #1
 8022e84:	637a      	str	r2, [r7, #52]	; 0x34
 8022e86:	2265      	movs	r2, #101	; 0x65
 8022e88:	701a      	strb	r2, [r3, #0]
        if (m1 > 0) {
 8022e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	dd05      	ble.n	8022e9c <nk_dtoa+0x1fc>
            *(c++) = '+';
 8022e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e92:	1c5a      	adds	r2, r3, #1
 8022e94:	637a      	str	r2, [r7, #52]	; 0x34
 8022e96:	222b      	movs	r2, #43	; 0x2b
 8022e98:	701a      	strb	r2, [r3, #0]
 8022e9a:	e007      	b.n	8022eac <nk_dtoa+0x20c>
        } else {
            *(c++) = '-';
 8022e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e9e:	1c5a      	adds	r2, r3, #1
 8022ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8022ea2:	222d      	movs	r2, #45	; 0x2d
 8022ea4:	701a      	strb	r2, [r3, #0]
            m1 = -m1;
 8022ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022ea8:	425b      	negs	r3, r3
 8022eaa:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        m = 0;
 8022eac:	2300      	movs	r3, #0
 8022eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (m1 > 0) {
 8022eb0:	e01d      	b.n	8022eee <nk_dtoa+0x24e>
            *(c++) = (char)('0' + (char)(m1 % 10));
 8022eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8022eb4:	4b1d      	ldr	r3, [pc, #116]	; (8022f2c <nk_dtoa+0x28c>)
 8022eb6:	fb83 1302 	smull	r1, r3, r3, r2
 8022eba:	1099      	asrs	r1, r3, #2
 8022ebc:	17d3      	asrs	r3, r2, #31
 8022ebe:	1ac9      	subs	r1, r1, r3
 8022ec0:	460b      	mov	r3, r1
 8022ec2:	009b      	lsls	r3, r3, #2
 8022ec4:	440b      	add	r3, r1
 8022ec6:	005b      	lsls	r3, r3, #1
 8022ec8:	1ad1      	subs	r1, r2, r3
 8022eca:	b2ca      	uxtb	r2, r1
 8022ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022ece:	1c59      	adds	r1, r3, #1
 8022ed0:	6379      	str	r1, [r7, #52]	; 0x34
 8022ed2:	3230      	adds	r2, #48	; 0x30
 8022ed4:	b2d2      	uxtb	r2, r2
 8022ed6:	701a      	strb	r2, [r3, #0]
            m1 /= 10;
 8022ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022eda:	4a14      	ldr	r2, [pc, #80]	; (8022f2c <nk_dtoa+0x28c>)
 8022edc:	fb82 1203 	smull	r1, r2, r2, r3
 8022ee0:	1092      	asrs	r2, r2, #2
 8022ee2:	17db      	asrs	r3, r3, #31
 8022ee4:	1ad3      	subs	r3, r2, r3
 8022ee6:	63bb      	str	r3, [r7, #56]	; 0x38
            m++;
 8022ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022eea:	3301      	adds	r3, #1
 8022eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (m1 > 0) {
 8022eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022ef0:	2b00      	cmp	r3, #0
 8022ef2:	dcde      	bgt.n	8022eb2 <nk_dtoa+0x212>
        }
        c -= m;
 8022ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022ef6:	425b      	negs	r3, r3
 8022ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022efa:	4413      	add	r3, r2
 8022efc:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = 0, j = m-1; i<j; i++, j--) {
 8022efe:	2300      	movs	r3, #0
 8022f00:	633b      	str	r3, [r7, #48]	; 0x30
 8022f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022f04:	3b01      	subs	r3, #1
 8022f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022f08:	e042      	b.n	8022f90 <nk_dtoa+0x2f0>
 8022f0a:	bf00      	nop
 8022f0c:	f3af 8000 	nop.w
 8022f10:	00000000 	.word	0x00000000
 8022f14:	40240000 	.word	0x40240000
 8022f18:	86a12b9b 	.word	0x86a12b9b
 8022f1c:	3d06849b 	.word	0x3d06849b
 8022f20:	08029424 	.word	0x08029424
 8022f24:	0802ac88 	.word	0x0802ac88
 8022f28:	080293f4 	.word	0x080293f4
 8022f2c:	66666667 	.word	0x66666667
            /* swap without temporary */
            c[i] ^= c[j];
 8022f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f34:	4413      	add	r3, r2
 8022f36:	7819      	ldrb	r1, [r3, #0]
 8022f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f3c:	4413      	add	r3, r2
 8022f3e:	781a      	ldrb	r2, [r3, #0]
 8022f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022f44:	4403      	add	r3, r0
 8022f46:	404a      	eors	r2, r1
 8022f48:	b2d2      	uxtb	r2, r2
 8022f4a:	701a      	strb	r2, [r3, #0]
            c[j] ^= c[i];
 8022f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f50:	4413      	add	r3, r2
 8022f52:	7819      	ldrb	r1, [r3, #0]
 8022f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f58:	4413      	add	r3, r2
 8022f5a:	781a      	ldrb	r2, [r3, #0]
 8022f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022f60:	4403      	add	r3, r0
 8022f62:	404a      	eors	r2, r1
 8022f64:	b2d2      	uxtb	r2, r2
 8022f66:	701a      	strb	r2, [r3, #0]
            c[i] ^= c[j];
 8022f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f6c:	4413      	add	r3, r2
 8022f6e:	7819      	ldrb	r1, [r3, #0]
 8022f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f74:	4413      	add	r3, r2
 8022f76:	781a      	ldrb	r2, [r3, #0]
 8022f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022f7c:	4403      	add	r3, r0
 8022f7e:	404a      	eors	r2, r1
 8022f80:	b2d2      	uxtb	r2, r2
 8022f82:	701a      	strb	r2, [r3, #0]
        for (i = 0, j = m-1; i<j; i++, j--) {
 8022f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f86:	3301      	adds	r3, #1
 8022f88:	633b      	str	r3, [r7, #48]	; 0x30
 8022f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f8c:	3b01      	subs	r3, #1
 8022f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f94:	429a      	cmp	r2, r3
 8022f96:	dbcb      	blt.n	8022f30 <nk_dtoa+0x290>
        }
        c += m;
 8022f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f9c:	4413      	add	r3, r2
 8022f9e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    *(c) = '\0';
 8022fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022fa2:	2200      	movs	r2, #0
 8022fa4:	701a      	strb	r2, [r3, #0]
    return s;
 8022fa6:	68fb      	ldr	r3, [r7, #12]
}
 8022fa8:	4618      	mov	r0, r3
 8022faa:	3744      	adds	r7, #68	; 0x44
 8022fac:	46bd      	mov	sp, r7
 8022fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022fb0 <nk_murmur_hash>:
    return result;
}
#endif
NK_API nk_hash
nk_murmur_hash(const void * key, int len, nk_hash seed)
{
 8022fb0:	b480      	push	{r7}
 8022fb2:	b091      	sub	sp, #68	; 0x44
 8022fb4:	af00      	add	r7, sp, #0
 8022fb6:	60f8      	str	r0, [r7, #12]
 8022fb8:	60b9      	str	r1, [r7, #8]
 8022fba:	607a      	str	r2, [r7, #4]
    /* 32-Bit MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3*/
    #define NK_ROTL(x,r) ((x) << (r) | ((x) >> (32 - r)))

    nk_uint h1 = seed;
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_uint k1;
    const nk_byte *data = (const nk_byte*)key;
 8022fc0:	68fb      	ldr	r3, [r7, #12]
 8022fc2:	633b      	str	r3, [r7, #48]	; 0x30
    const nk_byte *keyptr = data;
 8022fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fc6:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_byte *k1ptr;
    const int bsize = sizeof(k1);
 8022fc8:	2304      	movs	r3, #4
 8022fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int nblocks = len/4;
 8022fcc:	68bb      	ldr	r3, [r7, #8]
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	da00      	bge.n	8022fd4 <nk_murmur_hash+0x24>
 8022fd2:	3303      	adds	r3, #3
 8022fd4:	109b      	asrs	r3, r3, #2
 8022fd6:	62bb      	str	r3, [r7, #40]	; 0x28

    const nk_uint c1 = 0xcc9e2d51;
 8022fd8:	4b57      	ldr	r3, [pc, #348]	; (8023138 <nk_murmur_hash+0x188>)
 8022fda:	627b      	str	r3, [r7, #36]	; 0x24
    const nk_uint c2 = 0x1b873593;
 8022fdc:	4b57      	ldr	r3, [pc, #348]	; (802313c <nk_murmur_hash+0x18c>)
 8022fde:	623b      	str	r3, [r7, #32]
    const nk_byte *tail;
    int i;

    /* body */
    if (!key) return 0;
 8022fe0:	68fb      	ldr	r3, [r7, #12]
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	d101      	bne.n	8022fea <nk_murmur_hash+0x3a>
 8022fe6:	2300      	movs	r3, #0
 8022fe8:	e09f      	b.n	802312a <nk_murmur_hash+0x17a>
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 8022fea:	2300      	movs	r3, #0
 8022fec:	637b      	str	r3, [r7, #52]	; 0x34
 8022fee:	e03c      	b.n	802306a <nk_murmur_hash+0xba>
        k1ptr = (nk_byte*)&k1;
 8022ff0:	f107 0314 	add.w	r3, r7, #20
 8022ff4:	61bb      	str	r3, [r7, #24]
        k1ptr[0] = keyptr[0];
 8022ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022ff8:	781a      	ldrb	r2, [r3, #0]
 8022ffa:	69bb      	ldr	r3, [r7, #24]
 8022ffc:	701a      	strb	r2, [r3, #0]
        k1ptr[1] = keyptr[1];
 8022ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023000:	1c5a      	adds	r2, r3, #1
 8023002:	69bb      	ldr	r3, [r7, #24]
 8023004:	3301      	adds	r3, #1
 8023006:	7812      	ldrb	r2, [r2, #0]
 8023008:	701a      	strb	r2, [r3, #0]
        k1ptr[2] = keyptr[2];
 802300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802300c:	1c9a      	adds	r2, r3, #2
 802300e:	69bb      	ldr	r3, [r7, #24]
 8023010:	3302      	adds	r3, #2
 8023012:	7812      	ldrb	r2, [r2, #0]
 8023014:	701a      	strb	r2, [r3, #0]
        k1ptr[3] = keyptr[3];
 8023016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023018:	1cda      	adds	r2, r3, #3
 802301a:	69bb      	ldr	r3, [r7, #24]
 802301c:	3303      	adds	r3, #3
 802301e:	7812      	ldrb	r2, [r2, #0]
 8023020:	701a      	strb	r2, [r3, #0]

        k1 *= c1;
 8023022:	697b      	ldr	r3, [r7, #20]
 8023024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023026:	fb02 f303 	mul.w	r3, r2, r3
 802302a:	617b      	str	r3, [r7, #20]
        k1 = NK_ROTL(k1,15);
 802302c:	697b      	ldr	r3, [r7, #20]
 802302e:	ea4f 4373 	mov.w	r3, r3, ror #17
 8023032:	617b      	str	r3, [r7, #20]
        k1 *= c2;
 8023034:	697b      	ldr	r3, [r7, #20]
 8023036:	6a3a      	ldr	r2, [r7, #32]
 8023038:	fb02 f303 	mul.w	r3, r2, r3
 802303c:	617b      	str	r3, [r7, #20]

        h1 ^= k1;
 802303e:	697b      	ldr	r3, [r7, #20]
 8023040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023042:	4053      	eors	r3, r2
 8023044:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = NK_ROTL(h1,13);
 8023046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023048:	ea4f 43f3 	mov.w	r3, r3, ror #19
 802304c:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = h1*5+0xe6546b64;
 802304e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023050:	4613      	mov	r3, r2
 8023052:	009b      	lsls	r3, r3, #2
 8023054:	441a      	add	r2, r3
 8023056:	4b3a      	ldr	r3, [pc, #232]	; (8023140 <nk_murmur_hash+0x190>)
 8023058:	4413      	add	r3, r2
 802305a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 802305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802305e:	3301      	adds	r3, #1
 8023060:	637b      	str	r3, [r7, #52]	; 0x34
 8023062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023066:	4413      	add	r3, r2
 8023068:	63bb      	str	r3, [r7, #56]	; 0x38
 802306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802306e:	429a      	cmp	r2, r3
 8023070:	dbbe      	blt.n	8022ff0 <nk_murmur_hash+0x40>
    }

    /* tail */
    tail = (const nk_byte*)(data + nblocks*4);
 8023072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023074:	009b      	lsls	r3, r3, #2
 8023076:	461a      	mov	r2, r3
 8023078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802307a:	4413      	add	r3, r2
 802307c:	61fb      	str	r3, [r7, #28]
    k1 = 0;
 802307e:	2300      	movs	r3, #0
 8023080:	617b      	str	r3, [r7, #20]
    switch (len & 3) {
 8023082:	68bb      	ldr	r3, [r7, #8]
 8023084:	f003 0303 	and.w	r3, r3, #3
 8023088:	2b03      	cmp	r3, #3
 802308a:	d006      	beq.n	802309a <nk_murmur_hash+0xea>
 802308c:	2b03      	cmp	r3, #3
 802308e:	dc2d      	bgt.n	80230ec <nk_murmur_hash+0x13c>
 8023090:	2b01      	cmp	r3, #1
 8023092:	d012      	beq.n	80230ba <nk_murmur_hash+0x10a>
 8023094:	2b02      	cmp	r3, #2
 8023096:	d008      	beq.n	80230aa <nk_murmur_hash+0xfa>
            k1 *= c1;
            k1 = NK_ROTL(k1,15);
            k1 *= c2;
            h1 ^= k1;
            break;
        default: break;
 8023098:	e028      	b.n	80230ec <nk_murmur_hash+0x13c>
        case 3: k1 ^= (nk_uint)(tail[2] << 16); /* fallthrough */
 802309a:	69fb      	ldr	r3, [r7, #28]
 802309c:	3302      	adds	r3, #2
 802309e:	781b      	ldrb	r3, [r3, #0]
 80230a0:	041b      	lsls	r3, r3, #16
 80230a2:	461a      	mov	r2, r3
 80230a4:	697b      	ldr	r3, [r7, #20]
 80230a6:	4053      	eors	r3, r2
 80230a8:	617b      	str	r3, [r7, #20]
        case 2: k1 ^= (nk_uint)(tail[1] << 8u); /* fallthrough */
 80230aa:	69fb      	ldr	r3, [r7, #28]
 80230ac:	3301      	adds	r3, #1
 80230ae:	781b      	ldrb	r3, [r3, #0]
 80230b0:	021b      	lsls	r3, r3, #8
 80230b2:	461a      	mov	r2, r3
 80230b4:	697b      	ldr	r3, [r7, #20]
 80230b6:	4053      	eors	r3, r2
 80230b8:	617b      	str	r3, [r7, #20]
        case 1: k1 ^= tail[0];
 80230ba:	69fb      	ldr	r3, [r7, #28]
 80230bc:	781b      	ldrb	r3, [r3, #0]
 80230be:	461a      	mov	r2, r3
 80230c0:	697b      	ldr	r3, [r7, #20]
 80230c2:	4053      	eors	r3, r2
 80230c4:	617b      	str	r3, [r7, #20]
            k1 *= c1;
 80230c6:	697b      	ldr	r3, [r7, #20]
 80230c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80230ca:	fb02 f303 	mul.w	r3, r2, r3
 80230ce:	617b      	str	r3, [r7, #20]
            k1 = NK_ROTL(k1,15);
 80230d0:	697b      	ldr	r3, [r7, #20]
 80230d2:	ea4f 4373 	mov.w	r3, r3, ror #17
 80230d6:	617b      	str	r3, [r7, #20]
            k1 *= c2;
 80230d8:	697b      	ldr	r3, [r7, #20]
 80230da:	6a3a      	ldr	r2, [r7, #32]
 80230dc:	fb02 f303 	mul.w	r3, r2, r3
 80230e0:	617b      	str	r3, [r7, #20]
            h1 ^= k1;
 80230e2:	697b      	ldr	r3, [r7, #20]
 80230e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80230e6:	4053      	eors	r3, r2
 80230e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 80230ea:	e000      	b.n	80230ee <nk_murmur_hash+0x13e>
        default: break;
 80230ec:	bf00      	nop
    }

    /* finalization */
    h1 ^= (nk_uint)len;
 80230ee:	68bb      	ldr	r3, [r7, #8]
 80230f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80230f2:	4053      	eors	r3, r2
 80230f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* fmix32 */
    h1 ^= h1 >> 16;
 80230f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80230f8:	0c1b      	lsrs	r3, r3, #16
 80230fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80230fc:	4053      	eors	r3, r2
 80230fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0x85ebca6b;
 8023100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023102:	4a10      	ldr	r2, [pc, #64]	; (8023144 <nk_murmur_hash+0x194>)
 8023104:	fb02 f303 	mul.w	r3, r2, r3
 8023108:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 13;
 802310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802310c:	0b5b      	lsrs	r3, r3, #13
 802310e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023110:	4053      	eors	r3, r2
 8023112:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0xc2b2ae35;
 8023114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023116:	4a0c      	ldr	r2, [pc, #48]	; (8023148 <nk_murmur_hash+0x198>)
 8023118:	fb02 f303 	mul.w	r3, r2, r3
 802311c:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 16;
 802311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023120:	0c1b      	lsrs	r3, r3, #16
 8023122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023124:	4053      	eors	r3, r2
 8023126:	63fb      	str	r3, [r7, #60]	; 0x3c

    #undef NK_ROTL
    return h1;
 8023128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 802312a:	4618      	mov	r0, r3
 802312c:	3744      	adds	r7, #68	; 0x44
 802312e:	46bd      	mov	sp, r7
 8023130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023134:	4770      	bx	lr
 8023136:	bf00      	nop
 8023138:	cc9e2d51 	.word	0xcc9e2d51
 802313c:	1b873593 	.word	0x1b873593
 8023140:	e6546b64 	.word	0xe6546b64
 8023144:	85ebca6b 	.word	0x85ebca6b
 8023148:	c2b2ae35 	.word	0xc2b2ae35

0802314c <nk_text_clamp>:
#endif
NK_LIB int
nk_text_clamp(const struct nk_user_font *font, const char *text,
    int text_len, float space, int *glyphs, float *text_width,
    nk_rune *sep_list, int sep_count)
{
 802314c:	b580      	push	{r7, lr}
 802314e:	b092      	sub	sp, #72	; 0x48
 8023150:	af00      	add	r7, sp, #0
 8023152:	6178      	str	r0, [r7, #20]
 8023154:	6139      	str	r1, [r7, #16]
 8023156:	60fa      	str	r2, [r7, #12]
 8023158:	ed87 0a02 	vstr	s0, [r7, #8]
 802315c:	607b      	str	r3, [r7, #4]
    int i = 0;
 802315e:	2300      	movs	r3, #0
 8023160:	647b      	str	r3, [r7, #68]	; 0x44
    int glyph_len = 0;
 8023162:	2300      	movs	r3, #0
 8023164:	643b      	str	r3, [r7, #64]	; 0x40
    float last_width = 0;
 8023166:	f04f 0300 	mov.w	r3, #0
 802316a:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 802316c:	2300      	movs	r3, #0
 802316e:	61fb      	str	r3, [r7, #28]
    float width = 0;
 8023170:	f04f 0300 	mov.w	r3, #0
 8023174:	63bb      	str	r3, [r7, #56]	; 0x38
    int len = 0;
 8023176:	2300      	movs	r3, #0
 8023178:	637b      	str	r3, [r7, #52]	; 0x34
    int g = 0;
 802317a:	2300      	movs	r3, #0
 802317c:	633b      	str	r3, [r7, #48]	; 0x30
    float s;

    int sep_len = 0;
 802317e:	2300      	movs	r3, #0
 8023180:	62fb      	str	r3, [r7, #44]	; 0x2c
    int sep_g = 0;
 8023182:	2300      	movs	r3, #0
 8023184:	62bb      	str	r3, [r7, #40]	; 0x28
    float sep_width = 0;
 8023186:	f04f 0300 	mov.w	r3, #0
 802318a:	627b      	str	r3, [r7, #36]	; 0x24
    sep_count = NK_MAX(sep_count,0);
 802318c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802318e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023192:	65bb      	str	r3, [r7, #88]	; 0x58

    glyph_len = nk_utf_decode(text, &unicode, text_len);
 8023194:	f107 031c 	add.w	r3, r7, #28
 8023198:	68fa      	ldr	r2, [r7, #12]
 802319a:	4619      	mov	r1, r3
 802319c:	6938      	ldr	r0, [r7, #16]
 802319e:	f7fe fff7 	bl	8022190 <nk_utf_decode>
 80231a2:	6438      	str	r0, [r7, #64]	; 0x40
    while (glyph_len && (width < space) && (len < text_len)) {
 80231a4:	e04a      	b.n	802323c <nk_text_clamp+0xf0>
        len += glyph_len;
 80231a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80231a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80231aa:	4413      	add	r3, r2
 80231ac:	637b      	str	r3, [r7, #52]	; 0x34
        s = font->width(font->userdata, font->height, text, len);
 80231ae:	697b      	ldr	r3, [r7, #20]
 80231b0:	689b      	ldr	r3, [r3, #8]
 80231b2:	697a      	ldr	r2, [r7, #20]
 80231b4:	edd2 7a01 	vldr	s15, [r2, #4]
 80231b8:	6978      	ldr	r0, [r7, #20]
 80231ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80231bc:	6939      	ldr	r1, [r7, #16]
 80231be:	eeb0 0a67 	vmov.f32	s0, s15
 80231c2:	6800      	ldr	r0, [r0, #0]
 80231c4:	4798      	blx	r3
 80231c6:	ed87 0a08 	vstr	s0, [r7, #32]
        for (i = 0; i < sep_count; ++i) {
 80231ca:	2300      	movs	r3, #0
 80231cc:	647b      	str	r3, [r7, #68]	; 0x44
 80231ce:	e015      	b.n	80231fc <nk_text_clamp+0xb0>
            if (unicode != sep_list[i]) continue;
 80231d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80231d2:	009b      	lsls	r3, r3, #2
 80231d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80231d6:	4413      	add	r3, r2
 80231d8:	681a      	ldr	r2, [r3, #0]
 80231da:	69fb      	ldr	r3, [r7, #28]
 80231dc:	429a      	cmp	r2, r3
 80231de:	d109      	bne.n	80231f4 <nk_text_clamp+0xa8>
            sep_width = last_width = width;
 80231e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80231e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80231e6:	627b      	str	r3, [r7, #36]	; 0x24
            sep_g = g+1;
 80231e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231ea:	3301      	adds	r3, #1
 80231ec:	62bb      	str	r3, [r7, #40]	; 0x28
            sep_len = len;
 80231ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80231f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80231f2:	e007      	b.n	8023204 <nk_text_clamp+0xb8>
            if (unicode != sep_list[i]) continue;
 80231f4:	bf00      	nop
        for (i = 0; i < sep_count; ++i) {
 80231f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80231f8:	3301      	adds	r3, #1
 80231fa:	647b      	str	r3, [r7, #68]	; 0x44
 80231fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80231fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023200:	429a      	cmp	r2, r3
 8023202:	dbe5      	blt.n	80231d0 <nk_text_clamp+0x84>
        }
        if (i == sep_count){
 8023204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023208:	429a      	cmp	r2, r3
 802320a:	d106      	bne.n	802321a <nk_text_clamp+0xce>
            last_width = sep_width = width;
 802320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802320e:	627b      	str	r3, [r7, #36]	; 0x24
 8023210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023212:	63fb      	str	r3, [r7, #60]	; 0x3c
            sep_g = g+1;
 8023214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023216:	3301      	adds	r3, #1
 8023218:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        width = s;
 802321a:	6a3b      	ldr	r3, [r7, #32]
 802321c:	63bb      	str	r3, [r7, #56]	; 0x38
        glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);
 802321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023220:	693a      	ldr	r2, [r7, #16]
 8023222:	18d0      	adds	r0, r2, r3
 8023224:	68fa      	ldr	r2, [r7, #12]
 8023226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023228:	1ad2      	subs	r2, r2, r3
 802322a:	f107 031c 	add.w	r3, r7, #28
 802322e:	4619      	mov	r1, r3
 8023230:	f7fe ffae 	bl	8022190 <nk_utf_decode>
 8023234:	6438      	str	r0, [r7, #64]	; 0x40
        g++;
 8023236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023238:	3301      	adds	r3, #1
 802323a:	633b      	str	r3, [r7, #48]	; 0x30
    while (glyph_len && (width < space) && (len < text_len)) {
 802323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802323e:	2b00      	cmp	r3, #0
 8023240:	d00c      	beq.n	802325c <nk_text_clamp+0x110>
 8023242:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8023246:	edd7 7a02 	vldr	s15, [r7, #8]
 802324a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023252:	d503      	bpl.n	802325c <nk_text_clamp+0x110>
 8023254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023256:	68fb      	ldr	r3, [r7, #12]
 8023258:	429a      	cmp	r2, r3
 802325a:	dba4      	blt.n	80231a6 <nk_text_clamp+0x5a>
    }
    if (len >= text_len) {
 802325c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802325e:	68fb      	ldr	r3, [r7, #12]
 8023260:	429a      	cmp	r2, r3
 8023262:	db07      	blt.n	8023274 <nk_text_clamp+0x128>
        *glyphs = g;
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023268:	601a      	str	r2, [r3, #0]
        *text_width = last_width;
 802326a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802326c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802326e:	601a      	str	r2, [r3, #0]
        return len;
 8023270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023272:	e00b      	b.n	802328c <nk_text_clamp+0x140>
    } else {
        *glyphs = sep_g;
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023278:	601a      	str	r2, [r3, #0]
        *text_width = sep_width;
 802327a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802327e:	601a      	str	r2, [r3, #0]
        return (!sep_len) ? len: sep_len;
 8023280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023282:	2b00      	cmp	r3, #0
 8023284:	d101      	bne.n	802328a <nk_text_clamp+0x13e>
 8023286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023288:	e000      	b.n	802328c <nk_text_clamp+0x140>
 802328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
}
 802328c:	4618      	mov	r0, r3
 802328e:	3748      	adds	r7, #72	; 0x48
 8023290:	46bd      	mov	sp, r7
 8023292:	bd80      	pop	{r7, pc}

08023294 <nk_text_calculate_text_bounds>:
NK_LIB struct nk_vec2
nk_text_calculate_text_bounds(const struct nk_user_font *font,
    const char *begin, int byte_len, float row_height, const char **remaining,
    struct nk_vec2 *out_offset, int *glyphs, int op)
{
 8023294:	b580      	push	{r7, lr}
 8023296:	b092      	sub	sp, #72	; 0x48
 8023298:	af00      	add	r7, sp, #0
 802329a:	61f8      	str	r0, [r7, #28]
 802329c:	61b9      	str	r1, [r7, #24]
 802329e:	617a      	str	r2, [r7, #20]
 80232a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80232a4:	60fb      	str	r3, [r7, #12]
    float line_height = row_height;
 80232a6:	693b      	ldr	r3, [r7, #16]
 80232a8:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_vec2 text_size = nk_vec2(0,0);
 80232aa:	eddf 0a97 	vldr	s1, [pc, #604]	; 8023508 <nk_text_calculate_text_bounds+0x274>
 80232ae:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8023508 <nk_text_calculate_text_bounds+0x274>
 80232b2:	f7f3 fb6d 	bl	8016990 <nk_vec2>
 80232b6:	eeb0 7a40 	vmov.f32	s14, s0
 80232ba:	eef0 7a60 	vmov.f32	s15, s1
 80232be:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80232c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float line_width = 0.0f;
 80232c6:	f04f 0300 	mov.w	r3, #0
 80232ca:	647b      	str	r3, [r7, #68]	; 0x44

    float glyph_width;
    int glyph_len = 0;
 80232cc:	2300      	movs	r3, #0
 80232ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 80232d0:	2300      	movs	r3, #0
 80232d2:	623b      	str	r3, [r7, #32]
    int text_len = 0;
 80232d4:	2300      	movs	r3, #0
 80232d6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (!begin || byte_len <= 0 || !font)
 80232d8:	69bb      	ldr	r3, [r7, #24]
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d005      	beq.n	80232ea <nk_text_calculate_text_bounds+0x56>
 80232de:	697b      	ldr	r3, [r7, #20]
 80232e0:	2b00      	cmp	r3, #0
 80232e2:	dd02      	ble.n	80232ea <nk_text_calculate_text_bounds+0x56>
 80232e4:	69fb      	ldr	r3, [r7, #28]
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d10e      	bne.n	8023308 <nk_text_calculate_text_bounds+0x74>
        return nk_vec2(0,row_height);
 80232ea:	edd7 0a04 	vldr	s1, [r7, #16]
 80232ee:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8023508 <nk_text_calculate_text_bounds+0x274>
 80232f2:	f7f3 fb4d 	bl	8016990 <nk_vec2>
 80232f6:	eeb0 7a40 	vmov.f32	s14, s0
 80232fa:	eef0 7a60 	vmov.f32	s15, s1
 80232fe:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8023302:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8023306:	e0f1      	b.n	80234ec <nk_text_calculate_text_bounds+0x258>

    glyph_len = nk_utf_decode(begin, &unicode, byte_len);
 8023308:	f107 0320 	add.w	r3, r7, #32
 802330c:	697a      	ldr	r2, [r7, #20]
 802330e:	4619      	mov	r1, r3
 8023310:	69b8      	ldr	r0, [r7, #24]
 8023312:	f7fe ff3d 	bl	8022190 <nk_utf_decode>
 8023316:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (!glyph_len) return text_size;
 8023318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802331a:	2b00      	cmp	r3, #0
 802331c:	d108      	bne.n	8023330 <nk_text_calculate_text_bounds+0x9c>
 802331e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023322:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8023326:	e892 0003 	ldmia.w	r2, {r0, r1}
 802332a:	e883 0003 	stmia.w	r3, {r0, r1}
 802332e:	e0dd      	b.n	80234ec <nk_text_calculate_text_bounds+0x258>
    glyph_width = font->width(font->userdata, font->height, begin, glyph_len);
 8023330:	69fb      	ldr	r3, [r7, #28]
 8023332:	689b      	ldr	r3, [r3, #8]
 8023334:	69fa      	ldr	r2, [r7, #28]
 8023336:	edd2 7a01 	vldr	s15, [r2, #4]
 802333a:	69f8      	ldr	r0, [r7, #28]
 802333c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802333e:	69b9      	ldr	r1, [r7, #24]
 8023340:	eeb0 0a67 	vmov.f32	s0, s15
 8023344:	6800      	ldr	r0, [r0, #0]
 8023346:	4798      	blx	r3
 8023348:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

    *glyphs = 0;
 802334c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802334e:	2200      	movs	r2, #0
 8023350:	601a      	str	r2, [r3, #0]
    while ((text_len < byte_len) && glyph_len) {
 8023352:	e078      	b.n	8023446 <nk_text_calculate_text_bounds+0x1b2>
        if (unicode == '\n') {
 8023354:	6a3b      	ldr	r3, [r7, #32]
 8023356:	2b0a      	cmp	r3, #10
 8023358:	d12f      	bne.n	80233ba <nk_text_calculate_text_bounds+0x126>
            text_size.x = NK_MAX(text_size.x, line_width);
 802335a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802335e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8023362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802336a:	dd01      	ble.n	8023370 <nk_text_calculate_text_bounds+0xdc>
 802336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802336e:	e000      	b.n	8023372 <nk_text_calculate_text_bounds+0xde>
 8023370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023372:	627b      	str	r3, [r7, #36]	; 0x24
            text_size.y += line_height;
 8023374:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8023378:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 802337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023380:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            line_width = 0;
 8023384:	f04f 0300 	mov.w	r3, #0
 8023388:	647b      	str	r3, [r7, #68]	; 0x44
            *glyphs+=1;
 802338a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802338c:	681b      	ldr	r3, [r3, #0]
 802338e:	1c5a      	adds	r2, r3, #1
 8023390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023392:	601a      	str	r2, [r3, #0]
            if (op == NK_STOP_ON_NEW_LINE)
 8023394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023396:	2b01      	cmp	r3, #1
 8023398:	d05e      	beq.n	8023458 <nk_text_calculate_text_bounds+0x1c4>
                break;

            text_len++;
 802339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802339c:	3301      	adds	r3, #1
 802339e:	63bb      	str	r3, [r7, #56]	; 0x38
            glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 80233a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233a2:	69ba      	ldr	r2, [r7, #24]
 80233a4:	18d0      	adds	r0, r2, r3
 80233a6:	697a      	ldr	r2, [r7, #20]
 80233a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233aa:	1ad2      	subs	r2, r2, r3
 80233ac:	f107 0320 	add.w	r3, r7, #32
 80233b0:	4619      	mov	r1, r3
 80233b2:	f7fe feed 	bl	8022190 <nk_utf_decode>
 80233b6:	63f8      	str	r0, [r7, #60]	; 0x3c
            continue;
 80233b8:	e045      	b.n	8023446 <nk_text_calculate_text_bounds+0x1b2>
        }

        if (unicode == '\r') {
 80233ba:	6a3b      	ldr	r3, [r7, #32]
 80233bc:	2b0d      	cmp	r3, #13
 80233be:	d114      	bne.n	80233ea <nk_text_calculate_text_bounds+0x156>
            text_len++;
 80233c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233c2:	3301      	adds	r3, #1
 80233c4:	63bb      	str	r3, [r7, #56]	; 0x38
            *glyphs+=1;
 80233c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233c8:	681b      	ldr	r3, [r3, #0]
 80233ca:	1c5a      	adds	r2, r3, #1
 80233cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233ce:	601a      	str	r2, [r3, #0]
            glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 80233d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233d2:	69ba      	ldr	r2, [r7, #24]
 80233d4:	18d0      	adds	r0, r2, r3
 80233d6:	697a      	ldr	r2, [r7, #20]
 80233d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233da:	1ad2      	subs	r2, r2, r3
 80233dc:	f107 0320 	add.w	r3, r7, #32
 80233e0:	4619      	mov	r1, r3
 80233e2:	f7fe fed5 	bl	8022190 <nk_utf_decode>
 80233e6:	63f8      	str	r0, [r7, #60]	; 0x3c
            continue;
 80233e8:	e02d      	b.n	8023446 <nk_text_calculate_text_bounds+0x1b2>
        }

        *glyphs = *glyphs + 1;
 80233ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233ec:	681b      	ldr	r3, [r3, #0]
 80233ee:	1c5a      	adds	r2, r3, #1
 80233f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233f2:	601a      	str	r2, [r3, #0]
        text_len += glyph_len;
 80233f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80233f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80233f8:	4413      	add	r3, r2
 80233fa:	63bb      	str	r3, [r7, #56]	; 0x38
        line_width += (float)glyph_width;
 80233fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8023400:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8023404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023408:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 802340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802340e:	69ba      	ldr	r2, [r7, #24]
 8023410:	18d0      	adds	r0, r2, r3
 8023412:	697a      	ldr	r2, [r7, #20]
 8023414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023416:	1ad2      	subs	r2, r2, r3
 8023418:	f107 0320 	add.w	r3, r7, #32
 802341c:	4619      	mov	r1, r3
 802341e:	f7fe feb7 	bl	8022190 <nk_utf_decode>
 8023422:	63f8      	str	r0, [r7, #60]	; 0x3c
        glyph_width = font->width(font->userdata, font->height, begin+text_len, glyph_len);
 8023424:	69fb      	ldr	r3, [r7, #28]
 8023426:	689b      	ldr	r3, [r3, #8]
 8023428:	69fa      	ldr	r2, [r7, #28]
 802342a:	edd2 7a01 	vldr	s15, [r2, #4]
 802342e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023430:	69b9      	ldr	r1, [r7, #24]
 8023432:	4411      	add	r1, r2
 8023434:	69f8      	ldr	r0, [r7, #28]
 8023436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023438:	eeb0 0a67 	vmov.f32	s0, s15
 802343c:	6800      	ldr	r0, [r0, #0]
 802343e:	4798      	blx	r3
 8023440:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        continue;
 8023444:	bf00      	nop
    while ((text_len < byte_len) && glyph_len) {
 8023446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023448:	697b      	ldr	r3, [r7, #20]
 802344a:	429a      	cmp	r2, r3
 802344c:	da05      	bge.n	802345a <nk_text_calculate_text_bounds+0x1c6>
 802344e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023450:	2b00      	cmp	r3, #0
 8023452:	f47f af7f 	bne.w	8023354 <nk_text_calculate_text_bounds+0xc0>
 8023456:	e000      	b.n	802345a <nk_text_calculate_text_bounds+0x1c6>
                break;
 8023458:	bf00      	nop
    }

    if (text_size.x < line_width)
 802345a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802345e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8023462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802346a:	dd01      	ble.n	8023470 <nk_text_calculate_text_bounds+0x1dc>
        text_size.x = line_width;
 802346c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802346e:	627b      	str	r3, [r7, #36]	; 0x24
    if (out_offset)
 8023470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023472:	2b00      	cmp	r3, #0
 8023474:	d014      	beq.n	80234a0 <nk_text_calculate_text_bounds+0x20c>
        *out_offset = nk_vec2(line_width, text_size.y + line_height);
 8023476:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 802347a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 802347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023482:	eef0 0a67 	vmov.f32	s1, s15
 8023486:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 802348a:	f7f3 fa81 	bl	8016990 <nk_vec2>
 802348e:	eeb0 7a40 	vmov.f32	s14, s0
 8023492:	eef0 7a60 	vmov.f32	s15, s1
 8023496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023498:	ed83 7a00 	vstr	s14, [r3]
 802349c:	edc3 7a01 	vstr	s15, [r3, #4]
    if (line_width > 0 || text_size.y == 0.0f)
 80234a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80234a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80234a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234ac:	dc06      	bgt.n	80234bc <nk_text_calculate_text_bounds+0x228>
 80234ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80234b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80234b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234ba:	d107      	bne.n	80234cc <nk_text_calculate_text_bounds+0x238>
        text_size.y += line_height;
 80234bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80234c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80234c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80234c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if (remaining)
 80234cc:	68fb      	ldr	r3, [r7, #12]
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	d004      	beq.n	80234dc <nk_text_calculate_text_bounds+0x248>
        *remaining = begin+text_len;
 80234d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80234d4:	69ba      	ldr	r2, [r7, #24]
 80234d6:	441a      	add	r2, r3
 80234d8:	68fb      	ldr	r3, [r7, #12]
 80234da:	601a      	str	r2, [r3, #0]
    return text_size;
 80234dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80234e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80234e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80234e8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80234ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80234ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80234f0:	ee07 2a10 	vmov	s14, r2
 80234f4:	ee07 3a90 	vmov	s15, r3
 80234f8:	eeb0 0a47 	vmov.f32	s0, s14
 80234fc:	eef0 0a67 	vmov.f32	s1, s15
 8023500:	3748      	adds	r7, #72	; 0x48
 8023502:	46bd      	mov	sp, r7
 8023504:	bd80      	pop	{r7, pc}
 8023506:	bf00      	nop
 8023508:	00000000 	.word	0x00000000

0802350c <nk_widget>:
        return 0;
    return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);
}
NK_API enum nk_widget_layout_states
nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)
{
 802350c:	b590      	push	{r4, r7, lr}
 802350e:	b08f      	sub	sp, #60	; 0x3c
 8023510:	af00      	add	r7, sp, #0
 8023512:	6078      	str	r0, [r7, #4]
 8023514:	6039      	str	r1, [r7, #0]
    struct nk_rect c, v;
    struct nk_window *win;
    struct nk_panel *layout;
    const struct nk_input *in;

    NK_ASSERT(ctx);
 8023516:	683b      	ldr	r3, [r7, #0]
 8023518:	2b00      	cmp	r3, #0
 802351a:	d105      	bne.n	8023528 <nk_widget+0x1c>
 802351c:	4b9d      	ldr	r3, [pc, #628]	; (8023794 <nk_widget+0x288>)
 802351e:	4a9e      	ldr	r2, [pc, #632]	; (8023798 <nk_widget+0x28c>)
 8023520:	218e      	movs	r1, #142	; 0x8e
 8023522:	489e      	ldr	r0, [pc, #632]	; (802379c <nk_widget+0x290>)
 8023524:	f001 fad8 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8023528:	683b      	ldr	r3, [r7, #0]
 802352a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802352e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023532:	2b00      	cmp	r3, #0
 8023534:	d105      	bne.n	8023542 <nk_widget+0x36>
 8023536:	4b9a      	ldr	r3, [pc, #616]	; (80237a0 <nk_widget+0x294>)
 8023538:	4a97      	ldr	r2, [pc, #604]	; (8023798 <nk_widget+0x28c>)
 802353a:	218f      	movs	r1, #143	; 0x8f
 802353c:	4897      	ldr	r0, [pc, #604]	; (802379c <nk_widget+0x290>)
 802353e:	f001 facb 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8023542:	683b      	ldr	r3, [r7, #0]
 8023544:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023548:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802354c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8023550:	2b00      	cmp	r3, #0
 8023552:	d105      	bne.n	8023560 <nk_widget+0x54>
 8023554:	4b93      	ldr	r3, [pc, #588]	; (80237a4 <nk_widget+0x298>)
 8023556:	4a90      	ldr	r2, [pc, #576]	; (8023798 <nk_widget+0x28c>)
 8023558:	2190      	movs	r1, #144	; 0x90
 802355a:	4890      	ldr	r0, [pc, #576]	; (802379c <nk_widget+0x290>)
 802355c:	f001 fabc 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8023560:	683b      	ldr	r3, [r7, #0]
 8023562:	2b00      	cmp	r3, #0
 8023564:	d00f      	beq.n	8023586 <nk_widget+0x7a>
 8023566:	683b      	ldr	r3, [r7, #0]
 8023568:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802356c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023570:	2b00      	cmp	r3, #0
 8023572:	d008      	beq.n	8023586 <nk_widget+0x7a>
 8023574:	683b      	ldr	r3, [r7, #0]
 8023576:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802357a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802357e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8023582:	2b00      	cmp	r3, #0
 8023584:	d101      	bne.n	802358a <nk_widget+0x7e>
        return NK_WIDGET_INVALID;
 8023586:	2300      	movs	r3, #0
 8023588:	e167      	b.n	802385a <nk_widget+0x34e>

    /* allocate space and check if the widget needs to be updated and drawn */
    nk_panel_alloc_space(bounds, ctx);
 802358a:	6839      	ldr	r1, [r7, #0]
 802358c:	6878      	ldr	r0, [r7, #4]
 802358e:	f7f2 ffed 	bl	801656c <nk_panel_alloc_space>
    win = ctx->current;
 8023592:	683b      	ldr	r3, [r7, #0]
 8023594:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023598:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802359c:	637b      	str	r3, [r7, #52]	; 0x34
    layout = win->layout;
 802359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80235a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80235a4:	633b      	str	r3, [r7, #48]	; 0x30
    in = &ctx->input;
 80235a6:	683b      	ldr	r3, [r7, #0]
 80235a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    c = layout->clip;
 80235aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235ac:	f107 041c 	add.w	r4, r7, #28
 80235b0:	333c      	adds	r3, #60	; 0x3c
 80235b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80235b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 80235b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235ba:	685b      	ldr	r3, [r3, #4]
 80235bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80235c0:	2b00      	cmp	r3, #0
 80235c2:	d005      	beq.n	80235d0 <nk_widget+0xc4>
 80235c4:	4b78      	ldr	r3, [pc, #480]	; (80237a8 <nk_widget+0x29c>)
 80235c6:	4a74      	ldr	r2, [pc, #464]	; (8023798 <nk_widget+0x28c>)
 80235c8:	21a0      	movs	r1, #160	; 0xa0
 80235ca:	4874      	ldr	r0, [pc, #464]	; (802379c <nk_widget+0x290>)
 80235cc:	f001 fa84 	bl	8024ad8 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 80235d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235d2:	685b      	ldr	r3, [r3, #4]
 80235d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d005      	beq.n	80235e8 <nk_widget+0xdc>
 80235dc:	4b73      	ldr	r3, [pc, #460]	; (80237ac <nk_widget+0x2a0>)
 80235de:	4a6e      	ldr	r2, [pc, #440]	; (8023798 <nk_widget+0x28c>)
 80235e0:	21a1      	movs	r1, #161	; 0xa1
 80235e2:	486e      	ldr	r0, [pc, #440]	; (802379c <nk_widget+0x290>)
 80235e4:	f001 fa78 	bl	8024ad8 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 80235e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235ea:	685b      	ldr	r3, [r3, #4]
 80235ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d005      	beq.n	8023600 <nk_widget+0xf4>
 80235f4:	4b6e      	ldr	r3, [pc, #440]	; (80237b0 <nk_widget+0x2a4>)
 80235f6:	4a68      	ldr	r2, [pc, #416]	; (8023798 <nk_widget+0x28c>)
 80235f8:	21a2      	movs	r1, #162	; 0xa2
 80235fa:	4868      	ldr	r0, [pc, #416]	; (802379c <nk_widget+0x290>)
 80235fc:	f001 fa6c 	bl	8024ad8 <__assert_func>

    /* need to convert to int here to remove floating point errors */
    bounds->x = (float)((int)bounds->x);
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	edd3 7a00 	vldr	s15, [r3]
 8023606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802360a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	edc3 7a00 	vstr	s15, [r3]
    bounds->y = (float)((int)bounds->y);
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	edd3 7a01 	vldr	s15, [r3, #4]
 802361a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802361e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->w = (float)((int)bounds->w);
 8023628:	687b      	ldr	r3, [r7, #4]
 802362a:	edd3 7a02 	vldr	s15, [r3, #8]
 802362e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023636:	687b      	ldr	r3, [r7, #4]
 8023638:	edc3 7a02 	vstr	s15, [r3, #8]
    bounds->h = (float)((int)bounds->h);
 802363c:	687b      	ldr	r3, [r7, #4]
 802363e:	edd3 7a03 	vldr	s15, [r3, #12]
 8023642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	edc3 7a03 	vstr	s15, [r3, #12]

    c.x = (float)((int)c.x);
 8023650:	edd7 7a07 	vldr	s15, [r7, #28]
 8023654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802365c:	edc7 7a07 	vstr	s15, [r7, #28]
    c.y = (float)((int)c.y);
 8023660:	edd7 7a08 	vldr	s15, [r7, #32]
 8023664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802366c:	edc7 7a08 	vstr	s15, [r7, #32]
    c.w = (float)((int)c.w);
 8023670:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802367c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    c.h = (float)((int)c.h);
 8023680:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8023684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802368c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	edd3 6a00 	vldr	s13, [r3]
 8023696:	687b      	ldr	r3, [r7, #4]
 8023698:	ed93 6a01 	vldr	s12, [r3, #4]
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	ed93 7a00 	vldr	s14, [r3]
 80236a2:	687b      	ldr	r3, [r7, #4]
 80236a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80236a8:	ee77 5a27 	vadd.f32	s11, s14, s15
 80236ac:	687b      	ldr	r3, [r7, #4]
 80236ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80236b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80236bc:	f107 021c 	add.w	r2, r7, #28
 80236c0:	f107 030c 	add.w	r3, r7, #12
 80236c4:	eef0 1a67 	vmov.f32	s3, s15
 80236c8:	eeb0 1a65 	vmov.f32	s2, s11
 80236cc:	eef0 0a46 	vmov.f32	s1, s12
 80236d0:	eeb0 0a66 	vmov.f32	s0, s13
 80236d4:	4611      	mov	r1, r2
 80236d6:	4618      	mov	r0, r3
 80236d8:	f7f3 f97c 	bl	80169d4 <nk_unify>
    if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	ed93 7a00 	vldr	s14, [r3]
 80236e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80236e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80236ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80236ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80236f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236f6:	bf4c      	ite	mi
 80236f8:	2301      	movmi	r3, #1
 80236fa:	2300      	movpl	r3, #0
 80236fc:	b2db      	uxtb	r3, r3
 80236fe:	f083 0301 	eor.w	r3, r3, #1
 8023702:	b2db      	uxtb	r3, r3
 8023704:	2b00      	cmp	r3, #0
 8023706:	d143      	bne.n	8023790 <nk_widget+0x284>
 8023708:	ed97 7a07 	vldr	s14, [r7, #28]
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	edd3 6a00 	vldr	s13, [r3]
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	edd3 7a02 	vldr	s15, [r3, #8]
 8023718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802371c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023724:	bf4c      	ite	mi
 8023726:	2301      	movmi	r3, #1
 8023728:	2300      	movpl	r3, #0
 802372a:	b2db      	uxtb	r3, r3
 802372c:	f083 0301 	eor.w	r3, r3, #1
 8023730:	b2db      	uxtb	r3, r3
 8023732:	2b00      	cmp	r3, #0
 8023734:	d12c      	bne.n	8023790 <nk_widget+0x284>
 8023736:	687b      	ldr	r3, [r7, #4]
 8023738:	ed93 7a01 	vldr	s14, [r3, #4]
 802373c:	edd7 6a08 	vldr	s13, [r7, #32]
 8023740:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8023744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802374c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023750:	bf4c      	ite	mi
 8023752:	2301      	movmi	r3, #1
 8023754:	2300      	movpl	r3, #0
 8023756:	b2db      	uxtb	r3, r3
 8023758:	f083 0301 	eor.w	r3, r3, #1
 802375c:	b2db      	uxtb	r3, r3
 802375e:	2b00      	cmp	r3, #0
 8023760:	d116      	bne.n	8023790 <nk_widget+0x284>
 8023762:	ed97 7a08 	vldr	s14, [r7, #32]
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	edd3 6a01 	vldr	s13, [r3, #4]
 802376c:	687b      	ldr	r3, [r7, #4]
 802376e:	edd3 7a03 	vldr	s15, [r3, #12]
 8023772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802377e:	bf4c      	ite	mi
 8023780:	2301      	movmi	r3, #1
 8023782:	2300      	movpl	r3, #0
 8023784:	b2db      	uxtb	r3, r3
 8023786:	f083 0301 	eor.w	r3, r3, #1
 802378a:	b2db      	uxtb	r3, r3
 802378c:	2b00      	cmp	r3, #0
 802378e:	d011      	beq.n	80237b4 <nk_widget+0x2a8>
        return NK_WIDGET_INVALID;
 8023790:	2300      	movs	r3, #0
 8023792:	e062      	b.n	802385a <nk_widget+0x34e>
 8023794:	08029508 	.word	0x08029508
 8023798:	0802ac90 	.word	0x0802ac90
 802379c:	0802950c 	.word	0x0802950c
 80237a0:	08029528 	.word	0x08029528
 80237a4:	08029538 	.word	0x08029538
 80237a8:	08029550 	.word	0x08029550
 80237ac:	08029578 	.word	0x08029578
 80237b0:	0802959c 	.word	0x0802959c
    if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))
 80237b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80237b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237ba:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80237be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80237c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237c6:	bf94      	ite	ls
 80237c8:	2301      	movls	r3, #1
 80237ca:	2300      	movhi	r3, #0
 80237cc:	b2db      	uxtb	r3, r3
 80237ce:	f083 0301 	eor.w	r3, r3, #1
 80237d2:	b2db      	uxtb	r3, r3
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	d13d      	bne.n	8023854 <nk_widget+0x348>
 80237d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237da:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80237de:	edd7 6a03 	vldr	s13, [r7, #12]
 80237e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80237e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80237ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80237ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237f2:	bf4c      	ite	mi
 80237f4:	2301      	movmi	r3, #1
 80237f6:	2300      	movpl	r3, #0
 80237f8:	b2db      	uxtb	r3, r3
 80237fa:	f083 0301 	eor.w	r3, r3, #1
 80237fe:	b2db      	uxtb	r3, r3
 8023800:	2b00      	cmp	r3, #0
 8023802:	d127      	bne.n	8023854 <nk_widget+0x348>
 8023804:	ed97 7a04 	vldr	s14, [r7, #16]
 8023808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802380a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 802380e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023816:	bf94      	ite	ls
 8023818:	2301      	movls	r3, #1
 802381a:	2300      	movhi	r3, #0
 802381c:	b2db      	uxtb	r3, r3
 802381e:	f083 0301 	eor.w	r3, r3, #1
 8023822:	b2db      	uxtb	r3, r3
 8023824:	2b00      	cmp	r3, #0
 8023826:	d115      	bne.n	8023854 <nk_widget+0x348>
 8023828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802382a:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 802382e:	edd7 6a04 	vldr	s13, [r7, #16]
 8023832:	edd7 7a06 	vldr	s15, [r7, #24]
 8023836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802383a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023842:	bf4c      	ite	mi
 8023844:	2301      	movmi	r3, #1
 8023846:	2300      	movpl	r3, #0
 8023848:	b2db      	uxtb	r3, r3
 802384a:	f083 0301 	eor.w	r3, r3, #1
 802384e:	b2db      	uxtb	r3, r3
 8023850:	2b00      	cmp	r3, #0
 8023852:	d001      	beq.n	8023858 <nk_widget+0x34c>
        return NK_WIDGET_ROM;
 8023854:	2302      	movs	r3, #2
 8023856:	e000      	b.n	802385a <nk_widget+0x34e>
    return NK_WIDGET_VALID;
 8023858:	2301      	movs	r3, #1
}
 802385a:	4618      	mov	r0, r3
 802385c:	373c      	adds	r7, #60	; 0x3c
 802385e:	46bd      	mov	sp, r7
 8023860:	bd90      	pop	{r4, r7, pc}
 8023862:	bf00      	nop

08023864 <nk_widget_fitting>:
NK_API enum nk_widget_layout_states
nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,
    struct nk_vec2 item_padding)
{
 8023864:	b580      	push	{r7, lr}
 8023866:	b086      	sub	sp, #24
 8023868:	af00      	add	r7, sp, #0
 802386a:	60f8      	str	r0, [r7, #12]
 802386c:	60b9      	str	r1, [r7, #8]
 802386e:	eeb0 7a40 	vmov.f32	s14, s0
 8023872:	eef0 7a60 	vmov.f32	s15, s1
 8023876:	ed87 7a00 	vstr	s14, [r7]
 802387a:	edc7 7a01 	vstr	s15, [r7, #4]
    /* update the bounds to stand without padding  */
    enum nk_widget_layout_states state;
    NK_UNUSED(item_padding);

    NK_ASSERT(ctx);
 802387e:	68bb      	ldr	r3, [r7, #8]
 8023880:	2b00      	cmp	r3, #0
 8023882:	d105      	bne.n	8023890 <nk_widget_fitting+0x2c>
 8023884:	4b20      	ldr	r3, [pc, #128]	; (8023908 <nk_widget_fitting+0xa4>)
 8023886:	4a21      	ldr	r2, [pc, #132]	; (802390c <nk_widget_fitting+0xa8>)
 8023888:	21be      	movs	r1, #190	; 0xbe
 802388a:	4821      	ldr	r0, [pc, #132]	; (8023910 <nk_widget_fitting+0xac>)
 802388c:	f001 f924 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8023890:	68bb      	ldr	r3, [r7, #8]
 8023892:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023896:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802389a:	2b00      	cmp	r3, #0
 802389c:	d105      	bne.n	80238aa <nk_widget_fitting+0x46>
 802389e:	4b1d      	ldr	r3, [pc, #116]	; (8023914 <nk_widget_fitting+0xb0>)
 80238a0:	4a1a      	ldr	r2, [pc, #104]	; (802390c <nk_widget_fitting+0xa8>)
 80238a2:	21bf      	movs	r1, #191	; 0xbf
 80238a4:	481a      	ldr	r0, [pc, #104]	; (8023910 <nk_widget_fitting+0xac>)
 80238a6:	f001 f917 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80238aa:	68bb      	ldr	r3, [r7, #8]
 80238ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80238b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80238b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	d105      	bne.n	80238c8 <nk_widget_fitting+0x64>
 80238bc:	4b16      	ldr	r3, [pc, #88]	; (8023918 <nk_widget_fitting+0xb4>)
 80238be:	4a13      	ldr	r2, [pc, #76]	; (802390c <nk_widget_fitting+0xa8>)
 80238c0:	21c0      	movs	r1, #192	; 0xc0
 80238c2:	4813      	ldr	r0, [pc, #76]	; (8023910 <nk_widget_fitting+0xac>)
 80238c4:	f001 f908 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80238c8:	68bb      	ldr	r3, [r7, #8]
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	d00f      	beq.n	80238ee <nk_widget_fitting+0x8a>
 80238ce:	68bb      	ldr	r3, [r7, #8]
 80238d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80238d4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80238d8:	2b00      	cmp	r3, #0
 80238da:	d008      	beq.n	80238ee <nk_widget_fitting+0x8a>
 80238dc:	68bb      	ldr	r3, [r7, #8]
 80238de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80238e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80238e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	d101      	bne.n	80238f2 <nk_widget_fitting+0x8e>
        return NK_WIDGET_INVALID;
 80238ee:	2300      	movs	r3, #0
 80238f0:	e006      	b.n	8023900 <nk_widget_fitting+0x9c>

    state = nk_widget(bounds, ctx);
 80238f2:	68b9      	ldr	r1, [r7, #8]
 80238f4:	68f8      	ldr	r0, [r7, #12]
 80238f6:	f7ff fe09 	bl	802350c <nk_widget>
 80238fa:	4603      	mov	r3, r0
 80238fc:	75fb      	strb	r3, [r7, #23]
    return state;
 80238fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8023900:	4618      	mov	r0, r3
 8023902:	3718      	adds	r7, #24
 8023904:	46bd      	mov	sp, r7
 8023906:	bd80      	pop	{r7, pc}
 8023908:	08029508 	.word	0x08029508
 802390c:	0802ac9c 	.word	0x0802ac9c
 8023910:	0802950c 	.word	0x0802950c
 8023914:	08029528 	.word	0x08029528
 8023918:	08029538 	.word	0x08029538

0802391c <nk_create_window>:
 *                              WINDOW
 *
 * ===============================================================*/
NK_LIB void*
nk_create_window(struct nk_context *ctx)
{
 802391c:	b580      	push	{r7, lr}
 802391e:	b084      	sub	sp, #16
 8023920:	af00      	add	r7, sp, #0
 8023922:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8023924:	6878      	ldr	r0, [r7, #4]
 8023926:	f7f3 fac7 	bl	8016eb8 <nk_create_page_element>
 802392a:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 802392c:	68fb      	ldr	r3, [r7, #12]
 802392e:	2b00      	cmp	r3, #0
 8023930:	d101      	bne.n	8023936 <nk_create_window+0x1a>
 8023932:	2300      	movs	r3, #0
 8023934:	e007      	b.n	8023946 <nk_create_window+0x2a>
    elem->data.win.seq = ctx->seq;
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802393c:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8023940:	68fb      	ldr	r3, [r7, #12]
 8023942:	601a      	str	r2, [r3, #0]
    return &elem->data.win;
 8023944:	68fb      	ldr	r3, [r7, #12]
}
 8023946:	4618      	mov	r0, r3
 8023948:	3710      	adds	r7, #16
 802394a:	46bd      	mov	sp, r7
 802394c:	bd80      	pop	{r7, pc}

0802394e <nk_free_window>:
NK_LIB void
nk_free_window(struct nk_context *ctx, struct nk_window *win)
{
 802394e:	b580      	push	{r7, lr}
 8023950:	b086      	sub	sp, #24
 8023952:	af00      	add	r7, sp, #0
 8023954:	6078      	str	r0, [r7, #4]
 8023956:	6039      	str	r1, [r7, #0]
    /* unlink windows from list */
    struct nk_table *it = win->tables;
 8023958:	683b      	ldr	r3, [r7, #0]
 802395a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 802395e:	617b      	str	r3, [r7, #20]
    if (win->popup.win) {
 8023960:	683b      	ldr	r3, [r7, #0]
 8023962:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8023966:	2b00      	cmp	r3, #0
 8023968:	d00a      	beq.n	8023980 <nk_free_window+0x32>
        nk_free_window(ctx, win->popup.win);
 802396a:	683b      	ldr	r3, [r7, #0]
 802396c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8023970:	4619      	mov	r1, r3
 8023972:	6878      	ldr	r0, [r7, #4]
 8023974:	f7ff ffeb 	bl	802394e <nk_free_window>
        win->popup.win = 0;
 8023978:	683b      	ldr	r3, [r7, #0]
 802397a:	2200      	movs	r2, #0
 802397c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    }
    win->next = 0;
 8023980:	683b      	ldr	r3, [r7, #0]
 8023982:	2200      	movs	r2, #0
 8023984:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 8023988:	683b      	ldr	r3, [r7, #0]
 802398a:	2200      	movs	r2, #0
 802398c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    while (it) {
 8023990:	e017      	b.n	80239c2 <nk_free_window+0x74>
        /*free window state tables */
        struct nk_table *n = it->next;
 8023992:	697b      	ldr	r3, [r7, #20]
 8023994:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8023998:	60bb      	str	r3, [r7, #8]
        nk_remove_table(win, it);
 802399a:	6979      	ldr	r1, [r7, #20]
 802399c:	6838      	ldr	r0, [r7, #0]
 802399e:	f7fb fcf6 	bl	801f38e <nk_remove_table>
        nk_free_table(ctx, it);
 80239a2:	6979      	ldr	r1, [r7, #20]
 80239a4:	6878      	ldr	r0, [r7, #4]
 80239a6:	f7fb fca0 	bl	801f2ea <nk_free_table>
        if (it == win->tables)
 80239aa:	683b      	ldr	r3, [r7, #0]
 80239ac:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80239b0:	697a      	ldr	r2, [r7, #20]
 80239b2:	429a      	cmp	r2, r3
 80239b4:	d103      	bne.n	80239be <nk_free_window+0x70>
            win->tables = n;
 80239b6:	683b      	ldr	r3, [r7, #0]
 80239b8:	68ba      	ldr	r2, [r7, #8]
 80239ba:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        it = n;
 80239be:	68bb      	ldr	r3, [r7, #8]
 80239c0:	617b      	str	r3, [r7, #20]
    while (it) {
 80239c2:	697b      	ldr	r3, [r7, #20]
 80239c4:	2b00      	cmp	r3, #0
 80239c6:	d1e4      	bne.n	8023992 <nk_free_window+0x44>
    }

    /* link windows into freelist */
    {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);
 80239c8:	683b      	ldr	r3, [r7, #0]
 80239ca:	613b      	str	r3, [r7, #16]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 80239cc:	693b      	ldr	r3, [r7, #16]
 80239ce:	60fb      	str	r3, [r7, #12]
    nk_free_page_element(ctx, pe);}
 80239d0:	68f9      	ldr	r1, [r7, #12]
 80239d2:	6878      	ldr	r0, [r7, #4]
 80239d4:	f7f3 fb07 	bl	8016fe6 <nk_free_page_element>
}
 80239d8:	bf00      	nop
 80239da:	3718      	adds	r7, #24
 80239dc:	46bd      	mov	sp, r7
 80239de:	bd80      	pop	{r7, pc}

080239e0 <nk_find_window>:
NK_LIB struct nk_window*
nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)
{
 80239e0:	b580      	push	{r7, lr}
 80239e2:	b086      	sub	sp, #24
 80239e4:	af00      	add	r7, sp, #0
 80239e6:	60f8      	str	r0, [r7, #12]
 80239e8:	60b9      	str	r1, [r7, #8]
 80239ea:	607a      	str	r2, [r7, #4]
    struct nk_window *iter;
    iter = ctx->begin;
 80239ec:	68fb      	ldr	r3, [r7, #12]
 80239ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80239f2:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 80239f6:	617b      	str	r3, [r7, #20]
    while (iter) {
 80239f8:	e026      	b.n	8023a48 <nk_find_window+0x68>
        NK_ASSERT(iter != iter->next);
 80239fa:	697b      	ldr	r3, [r7, #20]
 80239fc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023a00:	697a      	ldr	r2, [r7, #20]
 8023a02:	429a      	cmp	r2, r3
 8023a04:	d105      	bne.n	8023a12 <nk_find_window+0x32>
 8023a06:	4b14      	ldr	r3, [pc, #80]	; (8023a58 <nk_find_window+0x78>)
 8023a08:	4a14      	ldr	r2, [pc, #80]	; (8023a5c <nk_find_window+0x7c>)
 8023a0a:	2133      	movs	r1, #51	; 0x33
 8023a0c:	4814      	ldr	r0, [pc, #80]	; (8023a60 <nk_find_window+0x80>)
 8023a0e:	f001 f863 	bl	8024ad8 <__assert_func>
        if (iter->name == hash) {
 8023a12:	697b      	ldr	r3, [r7, #20]
 8023a14:	685b      	ldr	r3, [r3, #4]
 8023a16:	68ba      	ldr	r2, [r7, #8]
 8023a18:	429a      	cmp	r2, r3
 8023a1a:	d111      	bne.n	8023a40 <nk_find_window+0x60>
            int max_len = nk_strlen(iter->name_string);
 8023a1c:	697b      	ldr	r3, [r7, #20]
 8023a1e:	3308      	adds	r3, #8
 8023a20:	4618      	mov	r0, r3
 8023a22:	f7fe fe4d 	bl	80226c0 <nk_strlen>
 8023a26:	6138      	str	r0, [r7, #16]
            if (!nk_stricmpn(iter->name_string, name, max_len))
 8023a28:	697b      	ldr	r3, [r7, #20]
 8023a2a:	3308      	adds	r3, #8
 8023a2c:	693a      	ldr	r2, [r7, #16]
 8023a2e:	6879      	ldr	r1, [r7, #4]
 8023a30:	4618      	mov	r0, r3
 8023a32:	f7ff f80f 	bl	8022a54 <nk_stricmpn>
 8023a36:	4603      	mov	r3, r0
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	d101      	bne.n	8023a40 <nk_find_window+0x60>
                return iter;
 8023a3c:	697b      	ldr	r3, [r7, #20]
 8023a3e:	e007      	b.n	8023a50 <nk_find_window+0x70>
        }
        iter = iter->next;
 8023a40:	697b      	ldr	r3, [r7, #20]
 8023a42:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023a46:	617b      	str	r3, [r7, #20]
    while (iter) {
 8023a48:	697b      	ldr	r3, [r7, #20]
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	d1d5      	bne.n	80239fa <nk_find_window+0x1a>
    }
    return 0;
 8023a4e:	2300      	movs	r3, #0
}
 8023a50:	4618      	mov	r0, r3
 8023a52:	3718      	adds	r7, #24
 8023a54:	46bd      	mov	sp, r7
 8023a56:	bd80      	pop	{r7, pc}
 8023a58:	080295c0 	.word	0x080295c0
 8023a5c:	0802acb0 	.word	0x0802acb0
 8023a60:	080295d4 	.word	0x080295d4

08023a64 <nk_insert_window>:
NK_LIB void
nk_insert_window(struct nk_context *ctx, struct nk_window *win,
    enum nk_window_insert_location loc)
{
 8023a64:	b580      	push	{r7, lr}
 8023a66:	b086      	sub	sp, #24
 8023a68:	af00      	add	r7, sp, #0
 8023a6a:	60f8      	str	r0, [r7, #12]
 8023a6c:	60b9      	str	r1, [r7, #8]
 8023a6e:	4613      	mov	r3, r2
 8023a70:	71fb      	strb	r3, [r7, #7]
    const struct nk_window *iter;
    NK_ASSERT(ctx);
 8023a72:	68fb      	ldr	r3, [r7, #12]
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d105      	bne.n	8023a84 <nk_insert_window+0x20>
 8023a78:	4b6f      	ldr	r3, [pc, #444]	; (8023c38 <nk_insert_window+0x1d4>)
 8023a7a:	4a70      	ldr	r2, [pc, #448]	; (8023c3c <nk_insert_window+0x1d8>)
 8023a7c:	2142      	movs	r1, #66	; 0x42
 8023a7e:	4870      	ldr	r0, [pc, #448]	; (8023c40 <nk_insert_window+0x1dc>)
 8023a80:	f001 f82a 	bl	8024ad8 <__assert_func>
    NK_ASSERT(win);
 8023a84:	68bb      	ldr	r3, [r7, #8]
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d105      	bne.n	8023a96 <nk_insert_window+0x32>
 8023a8a:	4b6e      	ldr	r3, [pc, #440]	; (8023c44 <nk_insert_window+0x1e0>)
 8023a8c:	4a6b      	ldr	r2, [pc, #428]	; (8023c3c <nk_insert_window+0x1d8>)
 8023a8e:	2143      	movs	r1, #67	; 0x43
 8023a90:	486b      	ldr	r0, [pc, #428]	; (8023c40 <nk_insert_window+0x1dc>)
 8023a92:	f001 f821 	bl	8024ad8 <__assert_func>
    if (!win || !ctx) return;
 8023a96:	68bb      	ldr	r3, [r7, #8]
 8023a98:	2b00      	cmp	r3, #0
 8023a9a:	f000 80c6 	beq.w	8023c2a <nk_insert_window+0x1c6>
 8023a9e:	68fb      	ldr	r3, [r7, #12]
 8023aa0:	2b00      	cmp	r3, #0
 8023aa2:	f000 80c2 	beq.w	8023c2a <nk_insert_window+0x1c6>

    iter = ctx->begin;
 8023aa6:	68fb      	ldr	r3, [r7, #12]
 8023aa8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023aac:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023ab0:	617b      	str	r3, [r7, #20]
    while (iter) {
 8023ab2:	e01e      	b.n	8023af2 <nk_insert_window+0x8e>
        NK_ASSERT(iter != iter->next);
 8023ab4:	697b      	ldr	r3, [r7, #20]
 8023ab6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023aba:	697a      	ldr	r2, [r7, #20]
 8023abc:	429a      	cmp	r2, r3
 8023abe:	d105      	bne.n	8023acc <nk_insert_window+0x68>
 8023ac0:	4b61      	ldr	r3, [pc, #388]	; (8023c48 <nk_insert_window+0x1e4>)
 8023ac2:	4a5e      	ldr	r2, [pc, #376]	; (8023c3c <nk_insert_window+0x1d8>)
 8023ac4:	2148      	movs	r1, #72	; 0x48
 8023ac6:	485e      	ldr	r0, [pc, #376]	; (8023c40 <nk_insert_window+0x1dc>)
 8023ac8:	f001 f806 	bl	8024ad8 <__assert_func>
        NK_ASSERT(iter != win);
 8023acc:	697a      	ldr	r2, [r7, #20]
 8023ace:	68bb      	ldr	r3, [r7, #8]
 8023ad0:	429a      	cmp	r2, r3
 8023ad2:	d105      	bne.n	8023ae0 <nk_insert_window+0x7c>
 8023ad4:	4b5d      	ldr	r3, [pc, #372]	; (8023c4c <nk_insert_window+0x1e8>)
 8023ad6:	4a59      	ldr	r2, [pc, #356]	; (8023c3c <nk_insert_window+0x1d8>)
 8023ad8:	2149      	movs	r1, #73	; 0x49
 8023ada:	4859      	ldr	r0, [pc, #356]	; (8023c40 <nk_insert_window+0x1dc>)
 8023adc:	f000 fffc 	bl	8024ad8 <__assert_func>
        if (iter == win) return;
 8023ae0:	697a      	ldr	r2, [r7, #20]
 8023ae2:	68bb      	ldr	r3, [r7, #8]
 8023ae4:	429a      	cmp	r2, r3
 8023ae6:	f000 80a2 	beq.w	8023c2e <nk_insert_window+0x1ca>
        iter = iter->next;
 8023aea:	697b      	ldr	r3, [r7, #20]
 8023aec:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023af0:	617b      	str	r3, [r7, #20]
    while (iter) {
 8023af2:	697b      	ldr	r3, [r7, #20]
 8023af4:	2b00      	cmp	r3, #0
 8023af6:	d1dd      	bne.n	8023ab4 <nk_insert_window+0x50>
    }

    if (!ctx->begin) {
 8023af8:	68fb      	ldr	r3, [r7, #12]
 8023afa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023afe:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d11d      	bne.n	8023b42 <nk_insert_window+0xde>
        win->next = 0;
 8023b06:	68bb      	ldr	r3, [r7, #8]
 8023b08:	2200      	movs	r2, #0
 8023b0a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 8023b0e:	68bb      	ldr	r3, [r7, #8]
 8023b10:	2200      	movs	r2, #0
 8023b12:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 8023b16:	68fb      	ldr	r3, [r7, #12]
 8023b18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b1c:	461a      	mov	r2, r3
 8023b1e:	68bb      	ldr	r3, [r7, #8]
 8023b20:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->end = win;
 8023b24:	68fb      	ldr	r3, [r7, #12]
 8023b26:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b2a:	461a      	mov	r2, r3
 8023b2c:	68bb      	ldr	r3, [r7, #8]
 8023b2e:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->count = 1;
 8023b32:	68fb      	ldr	r3, [r7, #12]
 8023b34:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b38:	461a      	mov	r2, r3
 8023b3a:	2301      	movs	r3, #1
 8023b3c:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
        return;
 8023b40:	e076      	b.n	8023c30 <nk_insert_window+0x1cc>
    }
    if (loc == NK_INSERT_BACK) {
 8023b42:	79fb      	ldrb	r3, [r7, #7]
 8023b44:	2b00      	cmp	r3, #0
 8023b46:	d13b      	bne.n	8023bc0 <nk_insert_window+0x15c>
        struct nk_window *end;
        end = ctx->end;
 8023b48:	68fb      	ldr	r3, [r7, #12]
 8023b4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b4e:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023b52:	613b      	str	r3, [r7, #16]
        end->flags |= NK_WINDOW_ROM;
 8023b54:	693b      	ldr	r3, [r7, #16]
 8023b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023b58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8023b5c:	693b      	ldr	r3, [r7, #16]
 8023b5e:	649a      	str	r2, [r3, #72]	; 0x48
        end->next = win;
 8023b60:	693b      	ldr	r3, [r7, #16]
 8023b62:	68ba      	ldr	r2, [r7, #8]
 8023b64:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = ctx->end;
 8023b68:	68fb      	ldr	r3, [r7, #12]
 8023b6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b6e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
 8023b72:	68bb      	ldr	r3, [r7, #8]
 8023b74:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = 0;
 8023b78:	68bb      	ldr	r3, [r7, #8]
 8023b7a:	2200      	movs	r2, #0
 8023b7c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ctx->end = win;
 8023b80:	68fb      	ldr	r3, [r7, #12]
 8023b82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b86:	461a      	mov	r2, r3
 8023b88:	68bb      	ldr	r3, [r7, #8]
 8023b8a:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->active = ctx->end;
 8023b8e:	68fb      	ldr	r3, [r7, #12]
 8023b90:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b94:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023b98:	68fa      	ldr	r2, [r7, #12]
 8023b9a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023b9e:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023ba8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023bae:	68fb      	ldr	r3, [r7, #12]
 8023bb0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bb4:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023bbc:	649a      	str	r2, [r3, #72]	; 0x48
 8023bbe:	e028      	b.n	8023c12 <nk_insert_window+0x1ae>
    } else {
        /*ctx->end->flags |= NK_WINDOW_ROM;*/
        ctx->begin->prev = win;
 8023bc0:	68fb      	ldr	r3, [r7, #12]
 8023bc2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bc6:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023bca:	68ba      	ldr	r2, [r7, #8]
 8023bcc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = ctx->begin;
 8023bd0:	68fb      	ldr	r3, [r7, #12]
 8023bd2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bd6:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
 8023bda:	68bb      	ldr	r3, [r7, #8]
 8023bdc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 8023be0:	68bb      	ldr	r3, [r7, #8]
 8023be2:	2200      	movs	r2, #0
 8023be4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 8023be8:	68fb      	ldr	r3, [r7, #12]
 8023bea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bee:	461a      	mov	r2, r3
 8023bf0:	68bb      	ldr	r3, [r7, #8]
 8023bf2:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8023bf6:	68fb      	ldr	r3, [r7, #12]
 8023bf8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bfc:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023c02:	68fb      	ldr	r3, [r7, #12]
 8023c04:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c08:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023c10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    ctx->count++;
 8023c12:	68fb      	ldr	r3, [r7, #12]
 8023c14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c18:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8023c1c:	3301      	adds	r3, #1
 8023c1e:	68fa      	ldr	r2, [r7, #12]
 8023c20:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023c24:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
 8023c28:	e002      	b.n	8023c30 <nk_insert_window+0x1cc>
    if (!win || !ctx) return;
 8023c2a:	bf00      	nop
 8023c2c:	e000      	b.n	8023c30 <nk_insert_window+0x1cc>
        if (iter == win) return;
 8023c2e:	bf00      	nop
}
 8023c30:	3718      	adds	r7, #24
 8023c32:	46bd      	mov	sp, r7
 8023c34:	bd80      	pop	{r7, pc}
 8023c36:	bf00      	nop
 8023c38:	080295f0 	.word	0x080295f0
 8023c3c:	0802acc0 	.word	0x0802acc0
 8023c40:	080295d4 	.word	0x080295d4
 8023c44:	080295f4 	.word	0x080295f4
 8023c48:	080295c0 	.word	0x080295c0
 8023c4c:	080295f8 	.word	0x080295f8

08023c50 <nk_remove_window>:
NK_LIB void
nk_remove_window(struct nk_context *ctx, struct nk_window *win)
{
 8023c50:	b480      	push	{r7}
 8023c52:	b083      	sub	sp, #12
 8023c54:	af00      	add	r7, sp, #0
 8023c56:	6078      	str	r0, [r7, #4]
 8023c58:	6039      	str	r1, [r7, #0]
    if (win == ctx->begin || win == ctx->end) {
 8023c5a:	687b      	ldr	r3, [r7, #4]
 8023c5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c60:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c64:	683a      	ldr	r2, [r7, #0]
 8023c66:	429a      	cmp	r2, r3
 8023c68:	d007      	beq.n	8023c7a <nk_remove_window+0x2a>
 8023c6a:	687b      	ldr	r3, [r7, #4]
 8023c6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c70:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023c74:	683a      	ldr	r2, [r7, #0]
 8023c76:	429a      	cmp	r2, r3
 8023c78:	d136      	bne.n	8023ce8 <nk_remove_window+0x98>
        if (win == ctx->begin) {
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c80:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c84:	683a      	ldr	r2, [r7, #0]
 8023c86:	429a      	cmp	r2, r3
 8023c88:	d112      	bne.n	8023cb0 <nk_remove_window+0x60>
            ctx->begin = win->next;
 8023c8a:	683b      	ldr	r3, [r7, #0]
 8023c8c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023c90:	687a      	ldr	r2, [r7, #4]
 8023c92:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023c96:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (win->next)
 8023c9a:	683b      	ldr	r3, [r7, #0]
 8023c9c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023ca0:	2b00      	cmp	r3, #0
 8023ca2:	d005      	beq.n	8023cb0 <nk_remove_window+0x60>
                win->next->prev = 0;
 8023ca4:	683b      	ldr	r3, [r7, #0]
 8023ca6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023caa:	2200      	movs	r2, #0
 8023cac:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        }
        if (win == ctx->end) {
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023cb6:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023cba:	683a      	ldr	r2, [r7, #0]
 8023cbc:	429a      	cmp	r2, r3
 8023cbe:	d12e      	bne.n	8023d1e <nk_remove_window+0xce>
            ctx->end = win->prev;
 8023cc0:	683b      	ldr	r3, [r7, #0]
 8023cc2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023cc6:	687a      	ldr	r2, [r7, #4]
 8023cc8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023ccc:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (win->prev)
 8023cd0:	683b      	ldr	r3, [r7, #0]
 8023cd2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023cd6:	2b00      	cmp	r3, #0
 8023cd8:	d021      	beq.n	8023d1e <nk_remove_window+0xce>
                win->prev->next = 0;
 8023cda:	683b      	ldr	r3, [r7, #0]
 8023cdc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023ce0:	2200      	movs	r2, #0
 8023ce2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        if (win == ctx->end) {
 8023ce6:	e01a      	b.n	8023d1e <nk_remove_window+0xce>
        }
    } else {
        if (win->next)
 8023ce8:	683b      	ldr	r3, [r7, #0]
 8023cea:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d007      	beq.n	8023d02 <nk_remove_window+0xb2>
            win->next->prev = win->prev;
 8023cf2:	683b      	ldr	r3, [r7, #0]
 8023cf4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023cf8:	683a      	ldr	r2, [r7, #0]
 8023cfa:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 8023cfe:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win->prev)
 8023d02:	683b      	ldr	r3, [r7, #0]
 8023d04:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	d009      	beq.n	8023d20 <nk_remove_window+0xd0>
            win->prev->next = win->next;
 8023d0c:	683b      	ldr	r3, [r7, #0]
 8023d0e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023d12:	683a      	ldr	r2, [r7, #0]
 8023d14:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 8023d18:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8023d1c:	e000      	b.n	8023d20 <nk_remove_window+0xd0>
        if (win == ctx->end) {
 8023d1e:	bf00      	nop
    }
    if (win == ctx->active || !ctx->active) {
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d26:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8023d2a:	683a      	ldr	r2, [r7, #0]
 8023d2c:	429a      	cmp	r2, r3
 8023d2e:	d006      	beq.n	8023d3e <nk_remove_window+0xee>
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d36:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8023d3a:	2b00      	cmp	r3, #0
 8023d3c:	d11e      	bne.n	8023d7c <nk_remove_window+0x12c>
        ctx->active = ctx->end;
 8023d3e:	687b      	ldr	r3, [r7, #4]
 8023d40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d44:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d48:	687a      	ldr	r2, [r7, #4]
 8023d4a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023d4e:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        if (ctx->end)
 8023d52:	687b      	ldr	r3, [r7, #4]
 8023d54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d58:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d5c:	2b00      	cmp	r3, #0
 8023d5e:	d00d      	beq.n	8023d7c <nk_remove_window+0x12c>
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d66:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d72:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023d7a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    win->next = 0;
 8023d7c:	683b      	ldr	r3, [r7, #0]
 8023d7e:	2200      	movs	r2, #0
 8023d80:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 8023d84:	683b      	ldr	r3, [r7, #0]
 8023d86:	2200      	movs	r2, #0
 8023d88:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    ctx->count--;
 8023d8c:	687b      	ldr	r3, [r7, #4]
 8023d8e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d92:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8023d96:	3b01      	subs	r3, #1
 8023d98:	687a      	ldr	r2, [r7, #4]
 8023d9a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023d9e:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
}
 8023da2:	bf00      	nop
 8023da4:	370c      	adds	r7, #12
 8023da6:	46bd      	mov	sp, r7
 8023da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dac:	4770      	bx	lr

08023dae <nk_begin>:
NK_API nk_bool
nk_begin(struct nk_context *ctx, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 8023dae:	b580      	push	{r7, lr}
 8023db0:	b088      	sub	sp, #32
 8023db2:	af00      	add	r7, sp, #0
 8023db4:	61f8      	str	r0, [r7, #28]
 8023db6:	61b9      	str	r1, [r7, #24]
 8023db8:	eeb0 6a40 	vmov.f32	s12, s0
 8023dbc:	eef0 6a60 	vmov.f32	s13, s1
 8023dc0:	eeb0 7a41 	vmov.f32	s14, s2
 8023dc4:	eef0 7a61 	vmov.f32	s15, s3
 8023dc8:	607a      	str	r2, [r7, #4]
 8023dca:	ed87 6a02 	vstr	s12, [r7, #8]
 8023dce:	edc7 6a03 	vstr	s13, [r7, #12]
 8023dd2:	ed87 7a04 	vstr	s14, [r7, #16]
 8023dd6:	edc7 7a05 	vstr	s15, [r7, #20]
    return nk_begin_titled(ctx, title, title, bounds, flags);
 8023dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8023dde:	edd7 6a03 	vldr	s13, [r7, #12]
 8023de2:	ed97 7a04 	vldr	s14, [r7, #16]
 8023de6:	edd7 7a05 	vldr	s15, [r7, #20]
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	eeb0 0a46 	vmov.f32	s0, s12
 8023df0:	eef0 0a66 	vmov.f32	s1, s13
 8023df4:	eeb0 1a47 	vmov.f32	s2, s14
 8023df8:	eef0 1a67 	vmov.f32	s3, s15
 8023dfc:	69ba      	ldr	r2, [r7, #24]
 8023dfe:	69b9      	ldr	r1, [r7, #24]
 8023e00:	69f8      	ldr	r0, [r7, #28]
 8023e02:	f000 f805 	bl	8023e10 <nk_begin_titled>
 8023e06:	4603      	mov	r3, r0
}
 8023e08:	4618      	mov	r0, r3
 8023e0a:	3720      	adds	r7, #32
 8023e0c:	46bd      	mov	sp, r7
 8023e0e:	bd80      	pop	{r7, pc}

08023e10 <nk_begin_titled>:
NK_API nk_bool
nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 8023e10:	b590      	push	{r4, r7, lr}
 8023e12:	b09f      	sub	sp, #124	; 0x7c
 8023e14:	af00      	add	r7, sp, #0
 8023e16:	61f8      	str	r0, [r7, #28]
 8023e18:	61b9      	str	r1, [r7, #24]
 8023e1a:	617a      	str	r2, [r7, #20]
 8023e1c:	eeb0 6a40 	vmov.f32	s12, s0
 8023e20:	eef0 6a60 	vmov.f32	s13, s1
 8023e24:	eeb0 7a41 	vmov.f32	s14, s2
 8023e28:	eef0 7a61 	vmov.f32	s15, s3
 8023e2c:	603b      	str	r3, [r7, #0]
 8023e2e:	ed87 6a01 	vstr	s12, [r7, #4]
 8023e32:	edc7 6a02 	vstr	s13, [r7, #8]
 8023e36:	ed87 7a03 	vstr	s14, [r7, #12]
 8023e3a:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *win;
    struct nk_style *style;
    nk_hash name_hash;
    int name_len;
    int ret = 0;
 8023e3e:	2300      	movs	r3, #0
 8023e40:	66fb      	str	r3, [r7, #108]	; 0x6c

    NK_ASSERT(ctx);
 8023e42:	69fb      	ldr	r3, [r7, #28]
 8023e44:	2b00      	cmp	r3, #0
 8023e46:	d105      	bne.n	8023e54 <nk_begin_titled+0x44>
 8023e48:	4b8f      	ldr	r3, [pc, #572]	; (8024088 <nk_begin_titled+0x278>)
 8023e4a:	4a90      	ldr	r2, [pc, #576]	; (802408c <nk_begin_titled+0x27c>)
 8023e4c:	2197      	movs	r1, #151	; 0x97
 8023e4e:	4890      	ldr	r0, [pc, #576]	; (8024090 <nk_begin_titled+0x280>)
 8023e50:	f000 fe42 	bl	8024ad8 <__assert_func>
    NK_ASSERT(name);
 8023e54:	69bb      	ldr	r3, [r7, #24]
 8023e56:	2b00      	cmp	r3, #0
 8023e58:	d105      	bne.n	8023e66 <nk_begin_titled+0x56>
 8023e5a:	4b8e      	ldr	r3, [pc, #568]	; (8024094 <nk_begin_titled+0x284>)
 8023e5c:	4a8b      	ldr	r2, [pc, #556]	; (802408c <nk_begin_titled+0x27c>)
 8023e5e:	2198      	movs	r1, #152	; 0x98
 8023e60:	488b      	ldr	r0, [pc, #556]	; (8024090 <nk_begin_titled+0x280>)
 8023e62:	f000 fe39 	bl	8024ad8 <__assert_func>
    NK_ASSERT(title);
 8023e66:	697b      	ldr	r3, [r7, #20]
 8023e68:	2b00      	cmp	r3, #0
 8023e6a:	d105      	bne.n	8023e78 <nk_begin_titled+0x68>
 8023e6c:	4b8a      	ldr	r3, [pc, #552]	; (8024098 <nk_begin_titled+0x288>)
 8023e6e:	4a87      	ldr	r2, [pc, #540]	; (802408c <nk_begin_titled+0x27c>)
 8023e70:	2199      	movs	r1, #153	; 0x99
 8023e72:	4887      	ldr	r0, [pc, #540]	; (8024090 <nk_begin_titled+0x280>)
 8023e74:	f000 fe30 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 8023e78:	69fb      	ldr	r3, [r7, #28]
 8023e7a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8023e7e:	2b00      	cmp	r3, #0
 8023e80:	d005      	beq.n	8023e8e <nk_begin_titled+0x7e>
 8023e82:	69fb      	ldr	r3, [r7, #28]
 8023e84:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8023e88:	689b      	ldr	r3, [r3, #8]
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d105      	bne.n	8023e9a <nk_begin_titled+0x8a>
 8023e8e:	4b83      	ldr	r3, [pc, #524]	; (802409c <nk_begin_titled+0x28c>)
 8023e90:	4a7e      	ldr	r2, [pc, #504]	; (802408c <nk_begin_titled+0x27c>)
 8023e92:	219a      	movs	r1, #154	; 0x9a
 8023e94:	487e      	ldr	r0, [pc, #504]	; (8024090 <nk_begin_titled+0x280>)
 8023e96:	f000 fe1f 	bl	8024ad8 <__assert_func>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 8023e9a:	69fb      	ldr	r3, [r7, #28]
 8023e9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023ea0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	d005      	beq.n	8023eb4 <nk_begin_titled+0xa4>
 8023ea8:	4b7d      	ldr	r3, [pc, #500]	; (80240a0 <nk_begin_titled+0x290>)
 8023eaa:	4a78      	ldr	r2, [pc, #480]	; (802408c <nk_begin_titled+0x27c>)
 8023eac:	219b      	movs	r1, #155	; 0x9b
 8023eae:	4878      	ldr	r0, [pc, #480]	; (8024090 <nk_begin_titled+0x280>)
 8023eb0:	f000 fe12 	bl	8024ad8 <__assert_func>
    if (!ctx || ctx->current || !title || !name)
 8023eb4:	69fb      	ldr	r3, [r7, #28]
 8023eb6:	2b00      	cmp	r3, #0
 8023eb8:	d00c      	beq.n	8023ed4 <nk_begin_titled+0xc4>
 8023eba:	69fb      	ldr	r3, [r7, #28]
 8023ebc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023ec0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	d105      	bne.n	8023ed4 <nk_begin_titled+0xc4>
 8023ec8:	697b      	ldr	r3, [r7, #20]
 8023eca:	2b00      	cmp	r3, #0
 8023ecc:	d002      	beq.n	8023ed4 <nk_begin_titled+0xc4>
 8023ece:	69bb      	ldr	r3, [r7, #24]
 8023ed0:	2b00      	cmp	r3, #0
 8023ed2:	d101      	bne.n	8023ed8 <nk_begin_titled+0xc8>
        return 0;
 8023ed4:	2300      	movs	r3, #0
 8023ed6:	e3d7      	b.n	8024688 <nk_begin_titled+0x878>

    /* find or create window */
    style = &ctx->style;
 8023ed8:	69fb      	ldr	r3, [r7, #28]
 8023eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8023ede:	66bb      	str	r3, [r7, #104]	; 0x68
    name_len = (int)nk_strlen(name);
 8023ee0:	69b8      	ldr	r0, [r7, #24]
 8023ee2:	f7fe fbed 	bl	80226c0 <nk_strlen>
 8023ee6:	6678      	str	r0, [r7, #100]	; 0x64
    name_hash = nk_murmur_hash(name, (int)name_len, NK_WINDOW_TITLE);
 8023ee8:	2240      	movs	r2, #64	; 0x40
 8023eea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8023eec:	69b8      	ldr	r0, [r7, #24]
 8023eee:	f7ff f85f 	bl	8022fb0 <nk_murmur_hash>
 8023ef2:	6638      	str	r0, [r7, #96]	; 0x60
    win = nk_find_window(ctx, name_hash, name);
 8023ef4:	69ba      	ldr	r2, [r7, #24]
 8023ef6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8023ef8:	69f8      	ldr	r0, [r7, #28]
 8023efa:	f7ff fd71 	bl	80239e0 <nk_find_window>
 8023efe:	6778      	str	r0, [r7, #116]	; 0x74
    if (!win) {
 8023f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d160      	bne.n	8023fc8 <nk_begin_titled+0x1b8>
        /* create new window */
        nk_size name_length = (nk_size)name_len;
 8023f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023f08:	65fb      	str	r3, [r7, #92]	; 0x5c
        win = (struct nk_window*)nk_create_window(ctx);
 8023f0a:	69f8      	ldr	r0, [r7, #28]
 8023f0c:	f7ff fd06 	bl	802391c <nk_create_window>
 8023f10:	6778      	str	r0, [r7, #116]	; 0x74
        NK_ASSERT(win);
 8023f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	d105      	bne.n	8023f24 <nk_begin_titled+0x114>
 8023f18:	4b62      	ldr	r3, [pc, #392]	; (80240a4 <nk_begin_titled+0x294>)
 8023f1a:	4a5c      	ldr	r2, [pc, #368]	; (802408c <nk_begin_titled+0x27c>)
 8023f1c:	21a8      	movs	r1, #168	; 0xa8
 8023f1e:	485c      	ldr	r0, [pc, #368]	; (8024090 <nk_begin_titled+0x280>)
 8023f20:	f000 fdda 	bl	8024ad8 <__assert_func>
        if (!win) return 0;
 8023f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	d101      	bne.n	8023f2e <nk_begin_titled+0x11e>
 8023f2a:	2300      	movs	r3, #0
 8023f2c:	e3ac      	b.n	8024688 <nk_begin_titled+0x878>

        if (flags & NK_WINDOW_BACKGROUND)
 8023f2e:	683b      	ldr	r3, [r7, #0]
 8023f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d005      	beq.n	8023f44 <nk_begin_titled+0x134>
            nk_insert_window(ctx, win, NK_INSERT_FRONT);
 8023f38:	2201      	movs	r2, #1
 8023f3a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8023f3c:	69f8      	ldr	r0, [r7, #28]
 8023f3e:	f7ff fd91 	bl	8023a64 <nk_insert_window>
 8023f42:	e004      	b.n	8023f4e <nk_begin_titled+0x13e>
        else nk_insert_window(ctx, win, NK_INSERT_BACK);
 8023f44:	2200      	movs	r2, #0
 8023f46:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8023f48:	69f8      	ldr	r0, [r7, #28]
 8023f4a:	f7ff fd8b 	bl	8023a64 <nk_insert_window>
        nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);
 8023f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f50:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8023f54:	69fb      	ldr	r3, [r7, #28]
 8023f56:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8023f5a:	330c      	adds	r3, #12
 8023f5c:	2201      	movs	r2, #1
 8023f5e:	4619      	mov	r1, r3
 8023f60:	f7ed fb4c 	bl	80115fc <nk_command_buffer_init>

        win->flags = flags;
 8023f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f66:	683a      	ldr	r2, [r7, #0]
 8023f68:	649a      	str	r2, [r3, #72]	; 0x48
        win->bounds = bounds;
 8023f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f6c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8023f70:	1d3b      	adds	r3, r7, #4
 8023f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        win->name = name_hash;
 8023f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8023f7c:	605a      	str	r2, [r3, #4]
        name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);
 8023f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023f80:	2b3f      	cmp	r3, #63	; 0x3f
 8023f82:	bf28      	it	cs
 8023f84:	233f      	movcs	r3, #63	; 0x3f
 8023f86:	65fb      	str	r3, [r7, #92]	; 0x5c
        NK_MEMCPY(win->name_string, name, name_length);
 8023f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f8a:	3308      	adds	r3, #8
 8023f8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8023f8e:	69b9      	ldr	r1, [r7, #24]
 8023f90:	4618      	mov	r0, r3
 8023f92:	f7fe fa27 	bl	80223e4 <nk_memcopy>
        win->name_string[name_length] = 0;
 8023f96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8023f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023f9a:	4413      	add	r3, r2
 8023f9c:	3308      	adds	r3, #8
 8023f9e:	2200      	movs	r2, #0
 8023fa0:	701a      	strb	r2, [r3, #0]
        win->popup.win = 0;
 8023fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fa4:	2200      	movs	r2, #0
 8023fa6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        if (!ctx->active)
 8023faa:	69fb      	ldr	r3, [r7, #28]
 8023fac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023fb0:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	d153      	bne.n	8024060 <nk_begin_titled+0x250>
            ctx->active = win;
 8023fb8:	69fb      	ldr	r3, [r7, #28]
 8023fba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023fbe:	461a      	mov	r2, r3
 8023fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fc2:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
 8023fc6:	e04b      	b.n	8024060 <nk_begin_titled+0x250>
    } else {
        /* update window */
        win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);
 8023fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023fcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023fd0:	f023 0307 	bic.w	r3, r3, #7
 8023fd4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8023fd6:	6493      	str	r3, [r2, #72]	; 0x48
        win->flags |= flags;
 8023fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023fdc:	683b      	ldr	r3, [r7, #0]
 8023fde:	431a      	orrs	r2, r3
 8023fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fe2:	649a      	str	r2, [r3, #72]	; 0x48
        if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))
 8023fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023fe8:	f003 0306 	and.w	r3, r3, #6
 8023fec:	2b00      	cmp	r3, #0
 8023fee:	d106      	bne.n	8023ffe <nk_begin_titled+0x1ee>
            win->bounds = bounds;
 8023ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023ff2:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8023ff6:	1d3b      	adds	r3, r7, #4
 8023ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023ffa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         * I.) Have more than one window with the same name or
         * II.) You forgot to actually draw the window.
         *      More specific you did not call `nk_clear` (nk_clear will be
         *      automatically called for you if you are using one of the
         *      provided demo backends). */
        NK_ASSERT(win->seq != ctx->seq);
 8023ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024000:	681a      	ldr	r2, [r3, #0]
 8024002:	69fb      	ldr	r3, [r7, #28]
 8024004:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024008:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 802400c:	429a      	cmp	r2, r3
 802400e:	d105      	bne.n	802401c <nk_begin_titled+0x20c>
 8024010:	4b25      	ldr	r3, [pc, #148]	; (80240a8 <nk_begin_titled+0x298>)
 8024012:	4a1e      	ldr	r2, [pc, #120]	; (802408c <nk_begin_titled+0x27c>)
 8024014:	21c6      	movs	r1, #198	; 0xc6
 8024016:	481e      	ldr	r0, [pc, #120]	; (8024090 <nk_begin_titled+0x280>)
 8024018:	f000 fd5e 	bl	8024ad8 <__assert_func>
        win->seq = ctx->seq;
 802401c:	69fb      	ldr	r3, [r7, #28]
 802401e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024022:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8024026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024028:	601a      	str	r2, [r3, #0]
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 802402a:	69fb      	ldr	r3, [r7, #28]
 802402c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024030:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8024034:	2b00      	cmp	r3, #0
 8024036:	d113      	bne.n	8024060 <nk_begin_titled+0x250>
 8024038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802403c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024040:	2b00      	cmp	r3, #0
 8024042:	d10d      	bne.n	8024060 <nk_begin_titled+0x250>
            ctx->active = win;
 8024044:	69fb      	ldr	r3, [r7, #28]
 8024046:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802404a:	461a      	mov	r2, r3
 802404c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802404e:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = win;
 8024052:	69fb      	ldr	r3, [r7, #28]
 8024054:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024058:	461a      	mov	r2, r3
 802405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802405c:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        }
    }
    if (win->flags & NK_WINDOW_HIDDEN) {
 8024060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024068:	2b00      	cmp	r3, #0
 802406a:	d01f      	beq.n	80240ac <nk_begin_titled+0x29c>
        ctx->current = win;
 802406c:	69fb      	ldr	r3, [r7, #28]
 802406e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024072:	461a      	mov	r2, r3
 8024074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024076:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        win->layout = 0;
 802407a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802407c:	2200      	movs	r2, #0
 802407e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 8024082:	2300      	movs	r3, #0
 8024084:	e300      	b.n	8024688 <nk_begin_titled+0x878>
 8024086:	bf00      	nop
 8024088:	080295f0 	.word	0x080295f0
 802408c:	0802acd4 	.word	0x0802acd4
 8024090:	080295d4 	.word	0x080295d4
 8024094:	08029604 	.word	0x08029604
 8024098:	0802960c 	.word	0x0802960c
 802409c:	08029614 	.word	0x08029614
 80240a0:	08029670 	.word	0x08029670
 80240a4:	080295f4 	.word	0x080295f4
 80240a8:	080296b0 	.word	0x080296b0
    } else nk_start(ctx, win);
 80240ac:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80240ae:	69f8      	ldr	r0, [r7, #28]
 80240b0:	f7ec fdba 	bl	8010c28 <nk_start>

    /* window overlapping */
    if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))
 80240b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80240b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80240bc:	2b00      	cmp	r3, #0
 80240be:	f040 82c2 	bne.w	8024646 <nk_begin_titled+0x836>
 80240c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80240c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	f040 82bb 	bne.w	8024646 <nk_begin_titled+0x836>
    {
        int inpanel, ishovered;
        struct nk_window *iter = win;
 80240d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240d2:	673b      	str	r3, [r7, #112]	; 0x70
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 80240d4:	69fb      	ldr	r3, [r7, #28]
 80240d6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80240da:	ed93 7a01 	vldr	s14, [r3, #4]
 80240de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80240e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80240e4:	f603 0344 	addw	r3, r3, #2116	; 0x844
 80240e8:	edd3 7a00 	vldr	s15, [r3]
 80240ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80240f0:	ee37 7a27 	vadd.f32	s14, s14, s15
            (2.0f * style->window.header.label_padding.y);
 80240f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80240f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80240fa:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80240fe:	edd3 7a00 	vldr	s15, [r3]
 8024102:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 8024106:	ee77 7a27 	vadd.f32	s15, s14, s15
 802410a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
 802410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024116:	2b00      	cmp	r3, #0
 8024118:	d107      	bne.n	802412a <nk_begin_titled+0x31a>
 802411a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802411c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8024120:	334c      	adds	r3, #76	; 0x4c
 8024122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8024128:	e022      	b.n	8024170 <nk_begin_titled+0x360>
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);
 802412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802412c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8024130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024132:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8024136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024138:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 802413c:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 8024140:	eeb0 1a66 	vmov.f32	s2, s13
 8024144:	eef0 0a47 	vmov.f32	s1, s14
 8024148:	eeb0 0a67 	vmov.f32	s0, s15
 802414c:	f7f2 fb6e 	bl	801682c <nk_rect>
 8024150:	eeb0 6a40 	vmov.f32	s12, s0
 8024154:	eef0 6a60 	vmov.f32	s13, s1
 8024158:	eeb0 7a41 	vmov.f32	s14, s2
 802415c:	eef0 7a61 	vmov.f32	s15, s3
 8024160:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 8024164:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8024168:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 802416c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        /* activate window if hovered and no other window is overlapping this window */
        inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);
 8024170:	69fb      	ldr	r3, [r7, #28]
 8024172:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8024176:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 802417a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 802417e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8024182:	2201      	movs	r2, #1
 8024184:	eeb0 0a46 	vmov.f32	s0, s12
 8024188:	eef0 0a66 	vmov.f32	s1, s13
 802418c:	eeb0 1a47 	vmov.f32	s2, s14
 8024190:	eef0 1a67 	vmov.f32	s3, s15
 8024194:	2100      	movs	r1, #0
 8024196:	4618      	mov	r0, r3
 8024198:	f7f1 f8d8 	bl	801534c <nk_input_has_mouse_click_down_in_rect>
 802419c:	6578      	str	r0, [r7, #84]	; 0x54
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 802419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	d006      	beq.n	80241b2 <nk_begin_titled+0x3a2>
 80241a4:	69fb      	ldr	r3, [r7, #28]
 80241a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80241aa:	2b00      	cmp	r3, #0
 80241ac:	d001      	beq.n	80241b2 <nk_begin_titled+0x3a2>
 80241ae:	2301      	movs	r3, #1
 80241b0:	e000      	b.n	80241b4 <nk_begin_titled+0x3a4>
 80241b2:	2300      	movs	r3, #0
 80241b4:	657b      	str	r3, [r7, #84]	; 0x54
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 80241b6:	69fb      	ldr	r3, [r7, #28]
 80241b8:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80241bc:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80241c0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80241c4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80241c8:	eeb0 0a46 	vmov.f32	s0, s12
 80241cc:	eef0 0a66 	vmov.f32	s1, s13
 80241d0:	eeb0 1a47 	vmov.f32	s2, s14
 80241d4:	eef0 1a67 	vmov.f32	s3, s15
 80241d8:	4618      	mov	r0, r3
 80241da:	f7f1 f945 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 80241de:	6538      	str	r0, [r7, #80]	; 0x50
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 80241e0:	69fb      	ldr	r3, [r7, #28]
 80241e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80241e6:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80241ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80241ec:	429a      	cmp	r2, r3
 80241ee:	f000 80de 	beq.w	80243ae <nk_begin_titled+0x59e>
 80241f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80241f4:	2b00      	cmp	r3, #0
 80241f6:	f000 80da 	beq.w	80243ae <nk_begin_titled+0x59e>
 80241fa:	69fb      	ldr	r3, [r7, #28]
 80241fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8024200:	2b00      	cmp	r3, #0
 8024202:	f040 80d4 	bne.w	80243ae <nk_begin_titled+0x59e>
            iter = win->next;
 8024206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024208:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 802420c:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 802420e:	e0c6      	b.n	802439e <nk_begin_titled+0x58e>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 8024210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024218:	2b00      	cmp	r3, #0
 802421a:	d107      	bne.n	802422c <nk_begin_titled+0x41c>
 802421c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802421e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8024222:	334c      	adds	r3, #76	; 0x4c
 8024224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802422a:	e022      	b.n	8024272 <nk_begin_titled+0x462>
                    iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 802422c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802422e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8024232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024234:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8024238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802423a:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 802423e:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 8024242:	eeb0 1a66 	vmov.f32	s2, s13
 8024246:	eef0 0a47 	vmov.f32	s1, s14
 802424a:	eeb0 0a67 	vmov.f32	s0, s15
 802424e:	f7f2 faed 	bl	801682c <nk_rect>
 8024252:	eeb0 6a40 	vmov.f32	s12, s0
 8024256:	eef0 6a60 	vmov.f32	s13, s1
 802425a:	eeb0 7a41 	vmov.f32	s14, s2
 802425e:	eef0 7a61 	vmov.f32	s15, s3
 8024262:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 8024266:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 802426a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 802426e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8024272:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8024276:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 802427a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802427e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802428a:	d52c      	bpl.n	80242e6 <nk_begin_titled+0x4d6>
 802428c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8024290:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8024294:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8024298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802429c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80242a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242a4:	d51f      	bpl.n	80242e6 <nk_begin_titled+0x4d6>
 80242a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80242aa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80242ae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80242b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80242b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80242ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242be:	d512      	bpl.n	80242e6 <nk_begin_titled+0x4d6>
 80242c0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80242c4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80242c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80242cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80242d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80242d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242d8:	d505      	bpl.n	80242e6 <nk_begin_titled+0x4d6>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    (!(iter->flags & NK_WINDOW_HIDDEN)))
 80242da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80242dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80242de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	d060      	beq.n	80243a8 <nk_begin_titled+0x598>
                    break;

                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 80242e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80242e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	d052      	beq.n	8024396 <nk_begin_titled+0x586>
 80242f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80242f2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d04d      	beq.n	8024396 <nk_begin_titled+0x586>
 80242fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80242fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80242fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024302:	2b00      	cmp	r3, #0
 8024304:	d147      	bne.n	8024396 <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8024306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024308:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802430c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8024310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024312:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8024316:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 802431e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024326:	d536      	bpl.n	8024396 <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8024328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802432a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 802432e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024330:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024334:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8024338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802433a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802433e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8024342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802434e:	d522      	bpl.n	8024396 <nk_begin_titled+0x586>
 8024350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024352:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024356:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 802435a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 802435e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8024362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802436e:	d512      	bpl.n	8024396 <nk_begin_titled+0x586>
 8024370:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8024374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024376:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802437a:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 802437e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024380:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024384:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8024388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802438c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024394:	d40a      	bmi.n	80243ac <nk_begin_titled+0x59c>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 8024396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024398:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 802439c:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 802439e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243a0:	2b00      	cmp	r3, #0
 80243a2:	f47f af35 	bne.w	8024210 <nk_begin_titled+0x400>
 80243a6:	e002      	b.n	80243ae <nk_begin_titled+0x59e>
                    break;
 80243a8:	bf00      	nop
 80243aa:	e000      	b.n	80243ae <nk_begin_titled+0x59e>
                    break;
 80243ac:	bf00      	nop
            }
        }

        /* activate window if clicked */
        if (iter && inpanel && (win != ctx->end)) {
 80243ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243b0:	2b00      	cmp	r3, #0
 80243b2:	f000 80db 	beq.w	802456c <nk_begin_titled+0x75c>
 80243b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80243b8:	2b00      	cmp	r3, #0
 80243ba:	f000 80d7 	beq.w	802456c <nk_begin_titled+0x75c>
 80243be:	69fb      	ldr	r3, [r7, #28]
 80243c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80243c4:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 80243c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80243ca:	429a      	cmp	r2, r3
 80243cc:	f000 80ce 	beq.w	802456c <nk_begin_titled+0x75c>
            iter = win->next;
 80243d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80243d2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80243d6:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 80243d8:	e0c0      	b.n	802455c <nk_begin_titled+0x74c>
                /* try to find a panel with higher priority in the same position */
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 80243da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80243de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d107      	bne.n	80243f6 <nk_begin_titled+0x5e6>
 80243e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243e8:	f107 0420 	add.w	r4, r7, #32
 80243ec:	334c      	adds	r3, #76	; 0x4c
 80243ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80243f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80243f4:	e022      	b.n	802443c <nk_begin_titled+0x62c>
                iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 80243f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243f8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80243fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243fe:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8024402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024404:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8024408:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 802440c:	eeb0 1a66 	vmov.f32	s2, s13
 8024410:	eef0 0a47 	vmov.f32	s1, s14
 8024414:	eeb0 0a67 	vmov.f32	s0, s15
 8024418:	f7f2 fa08 	bl	801682c <nk_rect>
 802441c:	eeb0 6a40 	vmov.f32	s12, s0
 8024420:	eef0 6a60 	vmov.f32	s13, s1
 8024424:	eeb0 7a41 	vmov.f32	s14, s2
 8024428:	eef0 7a61 	vmov.f32	s15, s3
 802442c:	ed87 6a08 	vstr	s12, [r7, #32]
 8024430:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8024434:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8024438:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
 802443c:	ed97 7a08 	vldr	s14, [r7, #32]
 8024440:	69fb      	ldr	r3, [r7, #28]
 8024442:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8024446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802444e:	d82b      	bhi.n	80244a8 <nk_begin_titled+0x698>
 8024450:	69fb      	ldr	r3, [r7, #28]
 8024452:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8024456:	edd7 6a08 	vldr	s13, [r7, #32]
 802445a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802446a:	d51d      	bpl.n	80244a8 <nk_begin_titled+0x698>
 802446c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8024470:	69fb      	ldr	r3, [r7, #28]
 8024472:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8024476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802447e:	d813      	bhi.n	80244a8 <nk_begin_titled+0x698>
 8024480:	69fb      	ldr	r3, [r7, #28]
 8024482:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8024486:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 802448a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802449a:	d505      	bpl.n	80244a8 <nk_begin_titled+0x698>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    !(iter->flags & NK_WINDOW_HIDDEN))
 802449c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80244a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 80244a4:	2b00      	cmp	r3, #0
 80244a6:	d05e      	beq.n	8024566 <nk_begin_titled+0x756>
                    break;
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 80244a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80244ae:	2b00      	cmp	r3, #0
 80244b0:	d050      	beq.n	8024554 <nk_begin_titled+0x744>
 80244b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244b4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	d04b      	beq.n	8024554 <nk_begin_titled+0x744>
 80244bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80244c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80244c4:	2b00      	cmp	r3, #0
 80244c6:	d145      	bne.n	8024554 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 80244c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80244ce:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80244d2:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80244d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80244da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 80244de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80244e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244e6:	d535      	bpl.n	8024554 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 80244e8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80244ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80244f2:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80244f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80244fc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8024500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802450c:	d522      	bpl.n	8024554 <nk_begin_titled+0x744>
 802450e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024510:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024514:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8024518:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 802451c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8024520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802452c:	d512      	bpl.n	8024554 <nk_begin_titled+0x744>
 802452e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8024532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024534:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024538:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 802453c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802453e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024542:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8024546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802454a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024552:	d40a      	bmi.n	802456a <nk_begin_titled+0x75a>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 8024554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024556:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 802455a:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 802455c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802455e:	2b00      	cmp	r3, #0
 8024560:	f47f af3b 	bne.w	80243da <nk_begin_titled+0x5ca>
 8024564:	e002      	b.n	802456c <nk_begin_titled+0x75c>
                    break;
 8024566:	bf00      	nop
 8024568:	e000      	b.n	802456c <nk_begin_titled+0x75c>
                    break;
 802456a:	bf00      	nop
            }
        }
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 802456c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802456e:	2b00      	cmp	r3, #0
 8024570:	d02e      	beq.n	80245d0 <nk_begin_titled+0x7c0>
 8024572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802457a:	2b00      	cmp	r3, #0
 802457c:	d128      	bne.n	80245d0 <nk_begin_titled+0x7c0>
 802457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024586:	2b00      	cmp	r3, #0
 8024588:	d022      	beq.n	80245d0 <nk_begin_titled+0x7c0>
            win->flags |= (nk_flags)NK_WINDOW_ROM;
 802458a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802458c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802458e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8024592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024594:	649a      	str	r2, [r3, #72]	; 0x48
            iter->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8024596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802459a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802459e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245a0:	649a      	str	r2, [r3, #72]	; 0x48
            ctx->active = iter;
 80245a2:	69fb      	ldr	r3, [r7, #28]
 80245a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80245a8:	461a      	mov	r2, r3
 80245aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245ac:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 80245b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80245b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d144      	bne.n	8024646 <nk_begin_titled+0x836>
                /* current window is active in that position so transfer to top
                 * at the highest priority in stack */
                nk_remove_window(ctx, iter);
 80245bc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80245be:	69f8      	ldr	r0, [r7, #28]
 80245c0:	f7ff fb46 	bl	8023c50 <nk_remove_window>
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
 80245c4:	2200      	movs	r2, #0
 80245c6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80245c8:	69f8      	ldr	r0, [r7, #28]
 80245ca:	f7ff fa4b 	bl	8023a64 <nk_insert_window>
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 80245ce:	e03a      	b.n	8024646 <nk_begin_titled+0x836>
            }
        } else {
            if (!iter && ctx->end != win) {
 80245d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	d123      	bne.n	802461e <nk_begin_titled+0x80e>
 80245d6:	69fb      	ldr	r3, [r7, #28]
 80245d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80245dc:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 80245e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80245e2:	429a      	cmp	r2, r3
 80245e4:	d01b      	beq.n	802461e <nk_begin_titled+0x80e>
                if (!(win->flags & NK_WINDOW_BACKGROUND)) {
 80245e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80245e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80245ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80245ee:	2b00      	cmp	r3, #0
 80245f0:	d108      	bne.n	8024604 <nk_begin_titled+0x7f4>
                    /* current window is active in that position so transfer to top
                     * at the highest priority in stack */
                    nk_remove_window(ctx, win);
 80245f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80245f4:	69f8      	ldr	r0, [r7, #28]
 80245f6:	f7ff fb2b 	bl	8023c50 <nk_remove_window>
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
 80245fa:	2200      	movs	r2, #0
 80245fc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80245fe:	69f8      	ldr	r0, [r7, #28]
 8024600:	f7ff fa30 	bl	8023a64 <nk_insert_window>
                }
                win->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8024604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024608:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802460c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802460e:	649a      	str	r2, [r3, #72]	; 0x48
                ctx->active = win;
 8024610:	69fb      	ldr	r3, [r7, #28]
 8024612:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024616:	461a      	mov	r2, r3
 8024618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802461a:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            }
            if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))
 802461e:	69fb      	ldr	r3, [r7, #28]
 8024620:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024624:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8024628:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802462a:	429a      	cmp	r2, r3
 802462c:	d00b      	beq.n	8024646 <nk_begin_titled+0x836>
 802462e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024636:	2b00      	cmp	r3, #0
 8024638:	d105      	bne.n	8024646 <nk_begin_titled+0x836>
                win->flags |= NK_WINDOW_ROM;
 802463a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802463e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8024642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024644:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    win->layout = (struct nk_panel*)nk_create_panel(ctx);
 8024646:	69f8      	ldr	r0, [r7, #28]
 8024648:	f7f2 fd06 	bl	8017058 <nk_create_panel>
 802464c:	4602      	mov	r2, r0
 802464e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    ctx->current = win;
 8024654:	69fb      	ldr	r3, [r7, #28]
 8024656:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802465a:	461a      	mov	r2, r3
 802465c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802465e:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
 8024662:	2201      	movs	r2, #1
 8024664:	6979      	ldr	r1, [r7, #20]
 8024666:	69f8      	ldr	r0, [r7, #28]
 8024668:	f7f2 ff64 	bl	8017534 <nk_panel_begin>
 802466c:	66f8      	str	r0, [r7, #108]	; 0x6c
    win->layout->offset_x = &win->scrollbar.x;
 802466e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8024674:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8024676:	325c      	adds	r2, #92	; 0x5c
 8024678:	619a      	str	r2, [r3, #24]
    win->layout->offset_y = &win->scrollbar.y;
 802467a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8024680:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8024682:	3260      	adds	r2, #96	; 0x60
 8024684:	61da      	str	r2, [r3, #28]
    return ret;
 8024686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8024688:	4618      	mov	r0, r3
 802468a:	377c      	adds	r7, #124	; 0x7c
 802468c:	46bd      	mov	sp, r7
 802468e:	bd90      	pop	{r4, r7, pc}

08024690 <nk_end>:
NK_API void
nk_end(struct nk_context *ctx)
{
 8024690:	b580      	push	{r7, lr}
 8024692:	b084      	sub	sp, #16
 8024694:	af00      	add	r7, sp, #0
 8024696:	6078      	str	r0, [r7, #4]
    struct nk_panel *layout;
    NK_ASSERT(ctx);
 8024698:	687b      	ldr	r3, [r7, #4]
 802469a:	2b00      	cmp	r3, #0
 802469c:	d106      	bne.n	80246ac <nk_end+0x1c>
 802469e:	4b2d      	ldr	r3, [pc, #180]	; (8024754 <nk_end+0xc4>)
 80246a0:	4a2d      	ldr	r2, [pc, #180]	; (8024758 <nk_end+0xc8>)
 80246a2:	f240 112b 	movw	r1, #299	; 0x12b
 80246a6:	482d      	ldr	r0, [pc, #180]	; (802475c <nk_end+0xcc>)
 80246a8:	f000 fa16 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 80246ac:	687b      	ldr	r3, [r7, #4]
 80246ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80246b2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d106      	bne.n	80246c8 <nk_end+0x38>
 80246ba:	4b29      	ldr	r3, [pc, #164]	; (8024760 <nk_end+0xd0>)
 80246bc:	4a26      	ldr	r2, [pc, #152]	; (8024758 <nk_end+0xc8>)
 80246be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80246c2:	4826      	ldr	r0, [pc, #152]	; (802475c <nk_end+0xcc>)
 80246c4:	f000 fa08 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current)
 80246c8:	687b      	ldr	r3, [r7, #4]
 80246ca:	2b00      	cmp	r3, #0
 80246cc:	d03d      	beq.n	802474a <nk_end+0xba>
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80246d4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80246d8:	2b00      	cmp	r3, #0
 80246da:	d036      	beq.n	802474a <nk_end+0xba>
        return;

    layout = ctx->current->layout;
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80246e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80246e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80246ea:	60fb      	str	r3, [r7, #12]
    if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {
 80246ec:	68fb      	ldr	r3, [r7, #12]
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	d00d      	beq.n	802470e <nk_end+0x7e>
 80246f2:	68fb      	ldr	r3, [r7, #12]
 80246f4:	781b      	ldrb	r3, [r3, #0]
 80246f6:	2b01      	cmp	r3, #1
 80246f8:	d111      	bne.n	802471e <nk_end+0x8e>
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024700:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8024704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802470a:	2b00      	cmp	r3, #0
 802470c:	d007      	beq.n	802471e <nk_end+0x8e>
        ctx->current = 0;
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024714:	461a      	mov	r2, r3
 8024716:	2300      	movs	r3, #0
 8024718:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        return;
 802471c:	e016      	b.n	802474c <nk_end+0xbc>
    }
    nk_panel_end(ctx);
 802471e:	6878      	ldr	r0, [r7, #4]
 8024720:	f7f3 fe4a 	bl	80183b8 <nk_panel_end>
    nk_free_panel(ctx, ctx->current->layout);
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802472a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802472e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8024732:	4619      	mov	r1, r3
 8024734:	6878      	ldr	r0, [r7, #4]
 8024736:	f7f2 fca6 	bl	8017086 <nk_free_panel>
    ctx->current = 0;
 802473a:	687b      	ldr	r3, [r7, #4]
 802473c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024740:	461a      	mov	r2, r3
 8024742:	2300      	movs	r3, #0
 8024744:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
 8024748:	e000      	b.n	802474c <nk_end+0xbc>
        return;
 802474a:	bf00      	nop
}
 802474c:	3710      	adds	r7, #16
 802474e:	46bd      	mov	sp, r7
 8024750:	bd80      	pop	{r7, pc}
 8024752:	bf00      	nop
 8024754:	080295f0 	.word	0x080295f0
 8024758:	0802ace4 	.word	0x0802ace4
 802475c:	080295d4 	.word	0x080295d4
 8024760:	080296c8 	.word	0x080296c8

08024764 <nk_window_is_hovered>:
    if (!ctx || !ctx->current) return 0;
    return ctx->current == ctx->active;
}
NK_API nk_bool
nk_window_is_hovered(struct nk_context *ctx)
{
 8024764:	b590      	push	{r4, r7, lr}
 8024766:	b087      	sub	sp, #28
 8024768:	af00      	add	r7, sp, #0
 802476a:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 802476c:	687b      	ldr	r3, [r7, #4]
 802476e:	2b00      	cmp	r3, #0
 8024770:	d106      	bne.n	8024780 <nk_window_is_hovered+0x1c>
 8024772:	4b31      	ldr	r3, [pc, #196]	; (8024838 <nk_window_is_hovered+0xd4>)
 8024774:	4a31      	ldr	r2, [pc, #196]	; (802483c <nk_window_is_hovered+0xd8>)
 8024776:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 802477a:	4831      	ldr	r0, [pc, #196]	; (8024840 <nk_window_is_hovered+0xdc>)
 802477c:	f000 f9ac 	bl	8024ad8 <__assert_func>
    NK_ASSERT(ctx->current);
 8024780:	687b      	ldr	r3, [r7, #4]
 8024782:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024786:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802478a:	2b00      	cmp	r3, #0
 802478c:	d106      	bne.n	802479c <nk_window_is_hovered+0x38>
 802478e:	4b2d      	ldr	r3, [pc, #180]	; (8024844 <nk_window_is_hovered+0xe0>)
 8024790:	4a2a      	ldr	r2, [pc, #168]	; (802483c <nk_window_is_hovered+0xd8>)
 8024792:	f240 11b1 	movw	r1, #433	; 0x1b1
 8024796:	482a      	ldr	r0, [pc, #168]	; (8024840 <nk_window_is_hovered+0xdc>)
 8024798:	f000 f99e 	bl	8024ad8 <__assert_func>
    if (!ctx || !ctx->current || (ctx->current->flags & NK_WINDOW_HIDDEN))
 802479c:	687b      	ldr	r3, [r7, #4]
 802479e:	2b00      	cmp	r3, #0
 80247a0:	d010      	beq.n	80247c4 <nk_window_is_hovered+0x60>
 80247a2:	687b      	ldr	r3, [r7, #4]
 80247a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247a8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247ac:	2b00      	cmp	r3, #0
 80247ae:	d009      	beq.n	80247c4 <nk_window_is_hovered+0x60>
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247b6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80247bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80247c0:	2b00      	cmp	r3, #0
 80247c2:	d001      	beq.n	80247c8 <nk_window_is_hovered+0x64>
        return 0;
 80247c4:	2300      	movs	r3, #0
 80247c6:	e032      	b.n	802482e <nk_window_is_hovered+0xca>
    else {
        struct nk_rect actual_bounds = ctx->current->bounds;
 80247c8:	687b      	ldr	r3, [r7, #4]
 80247ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247ce:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247d2:	f107 0408 	add.w	r4, r7, #8
 80247d6:	334c      	adds	r3, #76	; 0x4c
 80247d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80247da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (ctx->begin->flags & NK_WINDOW_MINIMIZED) {
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247e4:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 80247e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80247ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80247ee:	2b00      	cmp	r3, #0
 80247f0:	d008      	beq.n	8024804 <nk_window_is_hovered+0xa0>
            actual_bounds.h = ctx->current->layout->header_height;
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247f8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8024800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024802:	617b      	str	r3, [r7, #20]
        }
        return nk_input_is_mouse_hovering_rect(&ctx->input, actual_bounds);
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	ed97 6a02 	vldr	s12, [r7, #8]
 802480a:	edd7 6a03 	vldr	s13, [r7, #12]
 802480e:	ed97 7a04 	vldr	s14, [r7, #16]
 8024812:	edd7 7a05 	vldr	s15, [r7, #20]
 8024816:	eeb0 0a46 	vmov.f32	s0, s12
 802481a:	eef0 0a66 	vmov.f32	s1, s13
 802481e:	eeb0 1a47 	vmov.f32	s2, s14
 8024822:	eef0 1a67 	vmov.f32	s3, s15
 8024826:	4618      	mov	r0, r3
 8024828:	f7f0 fe1e 	bl	8015468 <nk_input_is_mouse_hovering_rect>
 802482c:	4603      	mov	r3, r0
    }
}
 802482e:	4618      	mov	r0, r3
 8024830:	371c      	adds	r7, #28
 8024832:	46bd      	mov	sp, r7
 8024834:	bd90      	pop	{r4, r7, pc}
 8024836:	bf00      	nop
 8024838:	080295f0 	.word	0x080295f0
 802483c:	0802acec 	.word	0x0802acec
 8024840:	080295d4 	.word	0x080295d4
 8024844:	0802970c 	.word	0x0802970c

08024848 <nk_window_is_collapsed>:
    int any_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
    return any_hovered || any_active;
}
NK_API nk_bool
nk_window_is_collapsed(struct nk_context *ctx, const char *name)
{
 8024848:	b580      	push	{r7, lr}
 802484a:	b086      	sub	sp, #24
 802484c:	af00      	add	r7, sp, #0
 802484e:	6078      	str	r0, [r7, #4]
 8024850:	6039      	str	r1, [r7, #0]
    int title_len;
    nk_hash title_hash;
    struct nk_window *win;
    NK_ASSERT(ctx);
 8024852:	687b      	ldr	r3, [r7, #4]
 8024854:	2b00      	cmp	r3, #0
 8024856:	d106      	bne.n	8024866 <nk_window_is_collapsed+0x1e>
 8024858:	4b14      	ldr	r3, [pc, #80]	; (80248ac <nk_window_is_collapsed+0x64>)
 802485a:	4a15      	ldr	r2, [pc, #84]	; (80248b0 <nk_window_is_collapsed+0x68>)
 802485c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8024860:	4814      	ldr	r0, [pc, #80]	; (80248b4 <nk_window_is_collapsed+0x6c>)
 8024862:	f000 f939 	bl	8024ad8 <__assert_func>
    if (!ctx) return 0;
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	2b00      	cmp	r3, #0
 802486a:	d101      	bne.n	8024870 <nk_window_is_collapsed+0x28>
 802486c:	2300      	movs	r3, #0
 802486e:	e018      	b.n	80248a2 <nk_window_is_collapsed+0x5a>

    title_len = (int)nk_strlen(name);
 8024870:	6838      	ldr	r0, [r7, #0]
 8024872:	f7fd ff25 	bl	80226c0 <nk_strlen>
 8024876:	6178      	str	r0, [r7, #20]
    title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);
 8024878:	2240      	movs	r2, #64	; 0x40
 802487a:	6979      	ldr	r1, [r7, #20]
 802487c:	6838      	ldr	r0, [r7, #0]
 802487e:	f7fe fb97 	bl	8022fb0 <nk_murmur_hash>
 8024882:	6138      	str	r0, [r7, #16]
    win = nk_find_window(ctx, title_hash, name);
 8024884:	683a      	ldr	r2, [r7, #0]
 8024886:	6939      	ldr	r1, [r7, #16]
 8024888:	6878      	ldr	r0, [r7, #4]
 802488a:	f7ff f8a9 	bl	80239e0 <nk_find_window>
 802488e:	60f8      	str	r0, [r7, #12]
    if (!win) return 0;
 8024890:	68fb      	ldr	r3, [r7, #12]
 8024892:	2b00      	cmp	r3, #0
 8024894:	d101      	bne.n	802489a <nk_window_is_collapsed+0x52>
 8024896:	2300      	movs	r3, #0
 8024898:	e003      	b.n	80248a2 <nk_window_is_collapsed+0x5a>
    return win->flags & NK_WINDOW_MINIMIZED;
 802489a:	68fb      	ldr	r3, [r7, #12]
 802489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802489e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
}
 80248a2:	4618      	mov	r0, r3
 80248a4:	3718      	adds	r7, #24
 80248a6:	46bd      	mov	sp, r7
 80248a8:	bd80      	pop	{r7, pc}
 80248aa:	bf00      	nop
 80248ac:	080295f0 	.word	0x080295f0
 80248b0:	0802ad04 	.word	0x0802ad04
 80248b4:	080295d4 	.word	0x080295d4

080248b8 <tsc2046_init>:
#include <stdint.h>
#include "tsc2046.h"


void tsc2046_init(tTsc2046* tsc, SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin, float ax, float bx, float ay, float by, int avg )
{
 80248b8:	b580      	push	{r7, lr}
 80248ba:	b088      	sub	sp, #32
 80248bc:	af00      	add	r7, sp, #0
 80248be:	61f8      	str	r0, [r7, #28]
 80248c0:	61b9      	str	r1, [r7, #24]
 80248c2:	617a      	str	r2, [r7, #20]
 80248c4:	ed87 0a03 	vstr	s0, [r7, #12]
 80248c8:	edc7 0a02 	vstr	s1, [r7, #8]
 80248cc:	ed87 1a01 	vstr	s2, [r7, #4]
 80248d0:	edc7 1a00 	vstr	s3, [r7]
 80248d4:	827b      	strh	r3, [r7, #18]
	tsc->spi = spi;
 80248d6:	69fb      	ldr	r3, [r7, #28]
 80248d8:	69ba      	ldr	r2, [r7, #24]
 80248da:	601a      	str	r2, [r3, #0]
	tsc->cs_port = cs_port;
 80248dc:	69fb      	ldr	r3, [r7, #28]
 80248de:	697a      	ldr	r2, [r7, #20]
 80248e0:	605a      	str	r2, [r3, #4]
	tsc->cs_pin = cs_pin;
 80248e2:	69fb      	ldr	r3, [r7, #28]
 80248e4:	8a7a      	ldrh	r2, [r7, #18]
 80248e6:	811a      	strh	r2, [r3, #8]
	tsc->ax = ax;
 80248e8:	69fb      	ldr	r3, [r7, #28]
 80248ea:	68fa      	ldr	r2, [r7, #12]
 80248ec:	60da      	str	r2, [r3, #12]
	tsc->bx = bx;
 80248ee:	69fb      	ldr	r3, [r7, #28]
 80248f0:	68ba      	ldr	r2, [r7, #8]
 80248f2:	611a      	str	r2, [r3, #16]
	tsc->ay = ay;
 80248f4:	69fb      	ldr	r3, [r7, #28]
 80248f6:	687a      	ldr	r2, [r7, #4]
 80248f8:	615a      	str	r2, [r3, #20]
	tsc->by = by;
 80248fa:	69fb      	ldr	r3, [r7, #28]
 80248fc:	683a      	ldr	r2, [r7, #0]
 80248fe:	619a      	str	r2, [r3, #24]
	tsc->avg = avg;
 8024900:	69fb      	ldr	r3, [r7, #28]
 8024902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024904:	61da      	str	r2, [r3, #28]
    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 8024906:	69fb      	ldr	r3, [r7, #28]
 8024908:	6858      	ldr	r0, [r3, #4]
 802490a:	69fb      	ldr	r3, [r7, #28]
 802490c:	891b      	ldrh	r3, [r3, #8]
 802490e:	2201      	movs	r2, #1
 8024910:	4619      	mov	r1, r3
 8024912:	f7e5 fdff 	bl	800a514 <HAL_GPIO_WritePin>
}
 8024916:	bf00      	nop
 8024918:	3720      	adds	r7, #32
 802491a:	46bd      	mov	sp, r7
 802491c:	bd80      	pop	{r7, pc}
	...

08024920 <tsc2046_read_ll>:

void tsc2046_read_ll( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 8024920:	b580      	push	{r7, lr}
 8024922:	b088      	sub	sp, #32
 8024924:	af02      	add	r7, sp, #8
 8024926:	60f8      	str	r0, [r7, #12]
 8024928:	60b9      	str	r1, [r7, #8]
 802492a:	607a      	str	r2, [r7, #4]
	uint8_t buf_tx[3] = {0};
 802492c:	4b2d      	ldr	r3, [pc, #180]	; (80249e4 <tsc2046_read_ll+0xc4>)
 802492e:	881b      	ldrh	r3, [r3, #0]
 8024930:	82bb      	strh	r3, [r7, #20]
 8024932:	2300      	movs	r3, #0
 8024934:	75bb      	strb	r3, [r7, #22]
	uint8_t buf_rx[3] = {0};
 8024936:	4b2b      	ldr	r3, [pc, #172]	; (80249e4 <tsc2046_read_ll+0xc4>)
 8024938:	881b      	ldrh	r3, [r3, #0]
 802493a:	823b      	strh	r3, [r7, #16]
 802493c:	2300      	movs	r3, #0
 802493e:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_RESET);
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	6858      	ldr	r0, [r3, #4]
 8024944:	68fb      	ldr	r3, [r7, #12]
 8024946:	891b      	ldrh	r3, [r3, #8]
 8024948:	2200      	movs	r2, #0
 802494a:	4619      	mov	r1, r3
 802494c:	f7e5 fde2 	bl	800a514 <HAL_GPIO_WritePin>

    buf_tx[0] = TSC2046_CHANNEL_X;
 8024950:	2390      	movs	r3, #144	; 0x90
 8024952:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 8024954:	68fb      	ldr	r3, [r7, #12]
 8024956:	6818      	ldr	r0, [r3, #0]
 8024958:	f107 0210 	add.w	r2, r7, #16
 802495c:	f107 0114 	add.w	r1, r7, #20
 8024960:	f04f 33ff 	mov.w	r3, #4294967295
 8024964:	9300      	str	r3, [sp, #0]
 8024966:	2303      	movs	r3, #3
 8024968:	f7e7 fa7d 	bl	800be66 <HAL_SPI_TransmitReceive>
    *x = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 802496c:	7c7b      	ldrb	r3, [r7, #17]
 802496e:	011b      	lsls	r3, r3, #4
 8024970:	b21a      	sxth	r2, r3
 8024972:	7cbb      	ldrb	r3, [r7, #18]
 8024974:	091b      	lsrs	r3, r3, #4
 8024976:	b2db      	uxtb	r3, r3
 8024978:	b21b      	sxth	r3, r3
 802497a:	4313      	orrs	r3, r2
 802497c:	b21b      	sxth	r3, r3
 802497e:	b29a      	uxth	r2, r3
 8024980:	68bb      	ldr	r3, [r7, #8]
 8024982:	801a      	strh	r2, [r3, #0]

    buf_tx[0] = TSC2046_CHANNEL_Y;
 8024984:	23d0      	movs	r3, #208	; 0xd0
 8024986:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 8024988:	68fb      	ldr	r3, [r7, #12]
 802498a:	6818      	ldr	r0, [r3, #0]
 802498c:	f107 0210 	add.w	r2, r7, #16
 8024990:	f107 0114 	add.w	r1, r7, #20
 8024994:	f04f 33ff 	mov.w	r3, #4294967295
 8024998:	9300      	str	r3, [sp, #0]
 802499a:	2303      	movs	r3, #3
 802499c:	f7e7 fa63 	bl	800be66 <HAL_SPI_TransmitReceive>
    *y = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 80249a0:	7c7b      	ldrb	r3, [r7, #17]
 80249a2:	011b      	lsls	r3, r3, #4
 80249a4:	b21a      	sxth	r2, r3
 80249a6:	7cbb      	ldrb	r3, [r7, #18]
 80249a8:	091b      	lsrs	r3, r3, #4
 80249aa:	b2db      	uxtb	r3, r3
 80249ac:	b21b      	sxth	r3, r3
 80249ae:	4313      	orrs	r3, r2
 80249b0:	b21b      	sxth	r3, r3
 80249b2:	b29a      	uxth	r2, r3
 80249b4:	687b      	ldr	r3, [r7, #4]
 80249b6:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 80249b8:	68fb      	ldr	r3, [r7, #12]
 80249ba:	6858      	ldr	r0, [r3, #4]
 80249bc:	68fb      	ldr	r3, [r7, #12]
 80249be:	891b      	ldrh	r3, [r3, #8]
 80249c0:	2201      	movs	r2, #1
 80249c2:	4619      	mov	r1, r3
 80249c4:	f7e5 fda6 	bl	800a514 <HAL_GPIO_WritePin>

    if (*x == 2047) {
 80249c8:	68bb      	ldr	r3, [r7, #8]
 80249ca:	881b      	ldrh	r3, [r3, #0]
 80249cc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80249d0:	4293      	cmp	r3, r2
 80249d2:	d102      	bne.n	80249da <tsc2046_read_ll+0xba>
        *x = 0;
 80249d4:	68bb      	ldr	r3, [r7, #8]
 80249d6:	2200      	movs	r2, #0
 80249d8:	801a      	strh	r2, [r3, #0]
    }
}
 80249da:	bf00      	nop
 80249dc:	3718      	adds	r7, #24
 80249de:	46bd      	mov	sp, r7
 80249e0:	bd80      	pop	{r7, pc}
 80249e2:	bf00      	nop
 80249e4:	080297c4 	.word	0x080297c4

080249e8 <tsc2046_read>:

void tsc2046_read( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 80249e8:	b580      	push	{r7, lr}
 80249ea:	b088      	sub	sp, #32
 80249ec:	af00      	add	r7, sp, #0
 80249ee:	60f8      	str	r0, [r7, #12]
 80249f0:	60b9      	str	r1, [r7, #8]
 80249f2:	607a      	str	r2, [r7, #4]
    int32_t x_acc = 0;
 80249f4:	2300      	movs	r3, #0
 80249f6:	61fb      	str	r3, [r7, #28]
    int32_t y_acc = 0;
 80249f8:	2300      	movs	r3, #0
 80249fa:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < tsc->avg; i++) {
 80249fc:	2300      	movs	r3, #0
 80249fe:	617b      	str	r3, [r7, #20]
 8024a00:	e023      	b.n	8024a4a <tsc2046_read+0x62>
    	tsc2046_read_ll(tsc, x, y);
 8024a02:	687a      	ldr	r2, [r7, #4]
 8024a04:	68b9      	ldr	r1, [r7, #8]
 8024a06:	68f8      	ldr	r0, [r7, #12]
 8024a08:	f7ff ff8a 	bl	8024920 <tsc2046_read_ll>
        if (*x && *y) {
 8024a0c:	68bb      	ldr	r3, [r7, #8]
 8024a0e:	881b      	ldrh	r3, [r3, #0]
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	d013      	beq.n	8024a3c <tsc2046_read+0x54>
 8024a14:	687b      	ldr	r3, [r7, #4]
 8024a16:	881b      	ldrh	r3, [r3, #0]
 8024a18:	2b00      	cmp	r3, #0
 8024a1a:	d00f      	beq.n	8024a3c <tsc2046_read+0x54>
            x_acc += *x;
 8024a1c:	68bb      	ldr	r3, [r7, #8]
 8024a1e:	881b      	ldrh	r3, [r3, #0]
 8024a20:	461a      	mov	r2, r3
 8024a22:	69fb      	ldr	r3, [r7, #28]
 8024a24:	4413      	add	r3, r2
 8024a26:	61fb      	str	r3, [r7, #28]
            y_acc += *y;
 8024a28:	687b      	ldr	r3, [r7, #4]
 8024a2a:	881b      	ldrh	r3, [r3, #0]
 8024a2c:	461a      	mov	r2, r3
 8024a2e:	69bb      	ldr	r3, [r7, #24]
 8024a30:	4413      	add	r3, r2
 8024a32:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < tsc->avg; i++) {
 8024a34:	697b      	ldr	r3, [r7, #20]
 8024a36:	3301      	adds	r3, #1
 8024a38:	617b      	str	r3, [r7, #20]
 8024a3a:	e006      	b.n	8024a4a <tsc2046_read+0x62>
        } else {
            *x = 0;
 8024a3c:	68bb      	ldr	r3, [r7, #8]
 8024a3e:	2200      	movs	r2, #0
 8024a40:	801a      	strh	r2, [r3, #0]
            *y = 0;
 8024a42:	687b      	ldr	r3, [r7, #4]
 8024a44:	2200      	movs	r2, #0
 8024a46:	801a      	strh	r2, [r3, #0]
            return;
 8024a48:	e042      	b.n	8024ad0 <tsc2046_read+0xe8>
    for (int i = 0; i < tsc->avg; i++) {
 8024a4a:	68fb      	ldr	r3, [r7, #12]
 8024a4c:	69db      	ldr	r3, [r3, #28]
 8024a4e:	697a      	ldr	r2, [r7, #20]
 8024a50:	429a      	cmp	r2, r3
 8024a52:	dbd6      	blt.n	8024a02 <tsc2046_read+0x1a>
        }
        //HAL_Delay(1);
    }
    *x = x_acc / tsc->avg;
 8024a54:	68fb      	ldr	r3, [r7, #12]
 8024a56:	69db      	ldr	r3, [r3, #28]
 8024a58:	69fa      	ldr	r2, [r7, #28]
 8024a5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a5e:	b29a      	uxth	r2, r3
 8024a60:	68bb      	ldr	r3, [r7, #8]
 8024a62:	801a      	strh	r2, [r3, #0]
    *y = y_acc / tsc->avg;
 8024a64:	68fb      	ldr	r3, [r7, #12]
 8024a66:	69db      	ldr	r3, [r3, #28]
 8024a68:	69ba      	ldr	r2, [r7, #24]
 8024a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a6e:	b29a      	uxth	r2, r3
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	801a      	strh	r2, [r3, #0]
    *x = tsc->ax * *x + tsc->bx;
 8024a74:	68fb      	ldr	r3, [r7, #12]
 8024a76:	ed93 7a03 	vldr	s14, [r3, #12]
 8024a7a:	68bb      	ldr	r3, [r7, #8]
 8024a7c:	881b      	ldrh	r3, [r3, #0]
 8024a7e:	ee07 3a90 	vmov	s15, r3
 8024a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024a8a:	68fb      	ldr	r3, [r7, #12]
 8024a8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8024a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024a98:	ee17 3a90 	vmov	r3, s15
 8024a9c:	b29a      	uxth	r2, r3
 8024a9e:	68bb      	ldr	r3, [r7, #8]
 8024aa0:	801a      	strh	r2, [r3, #0]
    *y = tsc->ay * *y + tsc->by;
 8024aa2:	68fb      	ldr	r3, [r7, #12]
 8024aa4:	ed93 7a05 	vldr	s14, [r3, #20]
 8024aa8:	687b      	ldr	r3, [r7, #4]
 8024aaa:	881b      	ldrh	r3, [r3, #0]
 8024aac:	ee07 3a90 	vmov	s15, r3
 8024ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024ab8:	68fb      	ldr	r3, [r7, #12]
 8024aba:	edd3 7a06 	vldr	s15, [r3, #24]
 8024abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024ac6:	ee17 3a90 	vmov	r3, s15
 8024aca:	b29a      	uxth	r2, r3
 8024acc:	687b      	ldr	r3, [r7, #4]
 8024ace:	801a      	strh	r2, [r3, #0]
}
 8024ad0:	3720      	adds	r7, #32
 8024ad2:	46bd      	mov	sp, r7
 8024ad4:	bd80      	pop	{r7, pc}
	...

08024ad8 <__assert_func>:
 8024ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024ada:	4614      	mov	r4, r2
 8024adc:	461a      	mov	r2, r3
 8024ade:	4b09      	ldr	r3, [pc, #36]	; (8024b04 <__assert_func+0x2c>)
 8024ae0:	681b      	ldr	r3, [r3, #0]
 8024ae2:	4605      	mov	r5, r0
 8024ae4:	68d8      	ldr	r0, [r3, #12]
 8024ae6:	b14c      	cbz	r4, 8024afc <__assert_func+0x24>
 8024ae8:	4b07      	ldr	r3, [pc, #28]	; (8024b08 <__assert_func+0x30>)
 8024aea:	9100      	str	r1, [sp, #0]
 8024aec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024af0:	4906      	ldr	r1, [pc, #24]	; (8024b0c <__assert_func+0x34>)
 8024af2:	462b      	mov	r3, r5
 8024af4:	f000 fd06 	bl	8025504 <fiprintf>
 8024af8:	f000 fe24 	bl	8025744 <abort>
 8024afc:	4b04      	ldr	r3, [pc, #16]	; (8024b10 <__assert_func+0x38>)
 8024afe:	461c      	mov	r4, r3
 8024b00:	e7f3      	b.n	8024aea <__assert_func+0x12>
 8024b02:	bf00      	nop
 8024b04:	200001f8 	.word	0x200001f8
 8024b08:	0802ad1b 	.word	0x0802ad1b
 8024b0c:	0802ad28 	.word	0x0802ad28
 8024b10:	0802ad56 	.word	0x0802ad56

08024b14 <__cvt>:
 8024b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024b18:	ec55 4b10 	vmov	r4, r5, d0
 8024b1c:	2d00      	cmp	r5, #0
 8024b1e:	460e      	mov	r6, r1
 8024b20:	4619      	mov	r1, r3
 8024b22:	462b      	mov	r3, r5
 8024b24:	bfbb      	ittet	lt
 8024b26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8024b2a:	461d      	movlt	r5, r3
 8024b2c:	2300      	movge	r3, #0
 8024b2e:	232d      	movlt	r3, #45	; 0x2d
 8024b30:	700b      	strb	r3, [r1, #0]
 8024b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024b34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024b38:	4691      	mov	r9, r2
 8024b3a:	f023 0820 	bic.w	r8, r3, #32
 8024b3e:	bfbc      	itt	lt
 8024b40:	4622      	movlt	r2, r4
 8024b42:	4614      	movlt	r4, r2
 8024b44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024b48:	d005      	beq.n	8024b56 <__cvt+0x42>
 8024b4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024b4e:	d100      	bne.n	8024b52 <__cvt+0x3e>
 8024b50:	3601      	adds	r6, #1
 8024b52:	2102      	movs	r1, #2
 8024b54:	e000      	b.n	8024b58 <__cvt+0x44>
 8024b56:	2103      	movs	r1, #3
 8024b58:	ab03      	add	r3, sp, #12
 8024b5a:	9301      	str	r3, [sp, #4]
 8024b5c:	ab02      	add	r3, sp, #8
 8024b5e:	9300      	str	r3, [sp, #0]
 8024b60:	ec45 4b10 	vmov	d0, r4, r5
 8024b64:	4653      	mov	r3, sl
 8024b66:	4632      	mov	r2, r6
 8024b68:	f000 fe7e 	bl	8025868 <_dtoa_r>
 8024b6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8024b70:	4607      	mov	r7, r0
 8024b72:	d102      	bne.n	8024b7a <__cvt+0x66>
 8024b74:	f019 0f01 	tst.w	r9, #1
 8024b78:	d022      	beq.n	8024bc0 <__cvt+0xac>
 8024b7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024b7e:	eb07 0906 	add.w	r9, r7, r6
 8024b82:	d110      	bne.n	8024ba6 <__cvt+0x92>
 8024b84:	783b      	ldrb	r3, [r7, #0]
 8024b86:	2b30      	cmp	r3, #48	; 0x30
 8024b88:	d10a      	bne.n	8024ba0 <__cvt+0x8c>
 8024b8a:	2200      	movs	r2, #0
 8024b8c:	2300      	movs	r3, #0
 8024b8e:	4620      	mov	r0, r4
 8024b90:	4629      	mov	r1, r5
 8024b92:	f7db ffc1 	bl	8000b18 <__aeabi_dcmpeq>
 8024b96:	b918      	cbnz	r0, 8024ba0 <__cvt+0x8c>
 8024b98:	f1c6 0601 	rsb	r6, r6, #1
 8024b9c:	f8ca 6000 	str.w	r6, [sl]
 8024ba0:	f8da 3000 	ldr.w	r3, [sl]
 8024ba4:	4499      	add	r9, r3
 8024ba6:	2200      	movs	r2, #0
 8024ba8:	2300      	movs	r3, #0
 8024baa:	4620      	mov	r0, r4
 8024bac:	4629      	mov	r1, r5
 8024bae:	f7db ffb3 	bl	8000b18 <__aeabi_dcmpeq>
 8024bb2:	b108      	cbz	r0, 8024bb8 <__cvt+0xa4>
 8024bb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8024bb8:	2230      	movs	r2, #48	; 0x30
 8024bba:	9b03      	ldr	r3, [sp, #12]
 8024bbc:	454b      	cmp	r3, r9
 8024bbe:	d307      	bcc.n	8024bd0 <__cvt+0xbc>
 8024bc0:	9b03      	ldr	r3, [sp, #12]
 8024bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024bc4:	1bdb      	subs	r3, r3, r7
 8024bc6:	4638      	mov	r0, r7
 8024bc8:	6013      	str	r3, [r2, #0]
 8024bca:	b004      	add	sp, #16
 8024bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024bd0:	1c59      	adds	r1, r3, #1
 8024bd2:	9103      	str	r1, [sp, #12]
 8024bd4:	701a      	strb	r2, [r3, #0]
 8024bd6:	e7f0      	b.n	8024bba <__cvt+0xa6>

08024bd8 <__exponent>:
 8024bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024bda:	4603      	mov	r3, r0
 8024bdc:	2900      	cmp	r1, #0
 8024bde:	bfb8      	it	lt
 8024be0:	4249      	neglt	r1, r1
 8024be2:	f803 2b02 	strb.w	r2, [r3], #2
 8024be6:	bfb4      	ite	lt
 8024be8:	222d      	movlt	r2, #45	; 0x2d
 8024bea:	222b      	movge	r2, #43	; 0x2b
 8024bec:	2909      	cmp	r1, #9
 8024bee:	7042      	strb	r2, [r0, #1]
 8024bf0:	dd2a      	ble.n	8024c48 <__exponent+0x70>
 8024bf2:	f10d 0207 	add.w	r2, sp, #7
 8024bf6:	4617      	mov	r7, r2
 8024bf8:	260a      	movs	r6, #10
 8024bfa:	4694      	mov	ip, r2
 8024bfc:	fb91 f5f6 	sdiv	r5, r1, r6
 8024c00:	fb06 1415 	mls	r4, r6, r5, r1
 8024c04:	3430      	adds	r4, #48	; 0x30
 8024c06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8024c0a:	460c      	mov	r4, r1
 8024c0c:	2c63      	cmp	r4, #99	; 0x63
 8024c0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8024c12:	4629      	mov	r1, r5
 8024c14:	dcf1      	bgt.n	8024bfa <__exponent+0x22>
 8024c16:	3130      	adds	r1, #48	; 0x30
 8024c18:	f1ac 0402 	sub.w	r4, ip, #2
 8024c1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8024c20:	1c41      	adds	r1, r0, #1
 8024c22:	4622      	mov	r2, r4
 8024c24:	42ba      	cmp	r2, r7
 8024c26:	d30a      	bcc.n	8024c3e <__exponent+0x66>
 8024c28:	f10d 0209 	add.w	r2, sp, #9
 8024c2c:	eba2 020c 	sub.w	r2, r2, ip
 8024c30:	42bc      	cmp	r4, r7
 8024c32:	bf88      	it	hi
 8024c34:	2200      	movhi	r2, #0
 8024c36:	4413      	add	r3, r2
 8024c38:	1a18      	subs	r0, r3, r0
 8024c3a:	b003      	add	sp, #12
 8024c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024c42:	f801 5f01 	strb.w	r5, [r1, #1]!
 8024c46:	e7ed      	b.n	8024c24 <__exponent+0x4c>
 8024c48:	2330      	movs	r3, #48	; 0x30
 8024c4a:	3130      	adds	r1, #48	; 0x30
 8024c4c:	7083      	strb	r3, [r0, #2]
 8024c4e:	70c1      	strb	r1, [r0, #3]
 8024c50:	1d03      	adds	r3, r0, #4
 8024c52:	e7f1      	b.n	8024c38 <__exponent+0x60>

08024c54 <_printf_float>:
 8024c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c58:	ed2d 8b02 	vpush	{d8}
 8024c5c:	b08d      	sub	sp, #52	; 0x34
 8024c5e:	460c      	mov	r4, r1
 8024c60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8024c64:	4616      	mov	r6, r2
 8024c66:	461f      	mov	r7, r3
 8024c68:	4605      	mov	r5, r0
 8024c6a:	f000 fce7 	bl	802563c <_localeconv_r>
 8024c6e:	f8d0 a000 	ldr.w	sl, [r0]
 8024c72:	4650      	mov	r0, sl
 8024c74:	f7db fb24 	bl	80002c0 <strlen>
 8024c78:	2300      	movs	r3, #0
 8024c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8024c7c:	6823      	ldr	r3, [r4, #0]
 8024c7e:	9305      	str	r3, [sp, #20]
 8024c80:	f8d8 3000 	ldr.w	r3, [r8]
 8024c84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8024c88:	3307      	adds	r3, #7
 8024c8a:	f023 0307 	bic.w	r3, r3, #7
 8024c8e:	f103 0208 	add.w	r2, r3, #8
 8024c92:	f8c8 2000 	str.w	r2, [r8]
 8024c96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024c9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8024c9e:	9307      	str	r3, [sp, #28]
 8024ca0:	f8cd 8018 	str.w	r8, [sp, #24]
 8024ca4:	ee08 0a10 	vmov	s16, r0
 8024ca8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8024cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024cb0:	4b9e      	ldr	r3, [pc, #632]	; (8024f2c <_printf_float+0x2d8>)
 8024cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8024cb6:	f7db ff61 	bl	8000b7c <__aeabi_dcmpun>
 8024cba:	bb88      	cbnz	r0, 8024d20 <_printf_float+0xcc>
 8024cbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024cc0:	4b9a      	ldr	r3, [pc, #616]	; (8024f2c <_printf_float+0x2d8>)
 8024cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8024cc6:	f7db ff3b 	bl	8000b40 <__aeabi_dcmple>
 8024cca:	bb48      	cbnz	r0, 8024d20 <_printf_float+0xcc>
 8024ccc:	2200      	movs	r2, #0
 8024cce:	2300      	movs	r3, #0
 8024cd0:	4640      	mov	r0, r8
 8024cd2:	4649      	mov	r1, r9
 8024cd4:	f7db ff2a 	bl	8000b2c <__aeabi_dcmplt>
 8024cd8:	b110      	cbz	r0, 8024ce0 <_printf_float+0x8c>
 8024cda:	232d      	movs	r3, #45	; 0x2d
 8024cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024ce0:	4a93      	ldr	r2, [pc, #588]	; (8024f30 <_printf_float+0x2dc>)
 8024ce2:	4b94      	ldr	r3, [pc, #592]	; (8024f34 <_printf_float+0x2e0>)
 8024ce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8024ce8:	bf94      	ite	ls
 8024cea:	4690      	movls	r8, r2
 8024cec:	4698      	movhi	r8, r3
 8024cee:	2303      	movs	r3, #3
 8024cf0:	6123      	str	r3, [r4, #16]
 8024cf2:	9b05      	ldr	r3, [sp, #20]
 8024cf4:	f023 0304 	bic.w	r3, r3, #4
 8024cf8:	6023      	str	r3, [r4, #0]
 8024cfa:	f04f 0900 	mov.w	r9, #0
 8024cfe:	9700      	str	r7, [sp, #0]
 8024d00:	4633      	mov	r3, r6
 8024d02:	aa0b      	add	r2, sp, #44	; 0x2c
 8024d04:	4621      	mov	r1, r4
 8024d06:	4628      	mov	r0, r5
 8024d08:	f000 f9da 	bl	80250c0 <_printf_common>
 8024d0c:	3001      	adds	r0, #1
 8024d0e:	f040 8090 	bne.w	8024e32 <_printf_float+0x1de>
 8024d12:	f04f 30ff 	mov.w	r0, #4294967295
 8024d16:	b00d      	add	sp, #52	; 0x34
 8024d18:	ecbd 8b02 	vpop	{d8}
 8024d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d20:	4642      	mov	r2, r8
 8024d22:	464b      	mov	r3, r9
 8024d24:	4640      	mov	r0, r8
 8024d26:	4649      	mov	r1, r9
 8024d28:	f7db ff28 	bl	8000b7c <__aeabi_dcmpun>
 8024d2c:	b140      	cbz	r0, 8024d40 <_printf_float+0xec>
 8024d2e:	464b      	mov	r3, r9
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	bfbc      	itt	lt
 8024d34:	232d      	movlt	r3, #45	; 0x2d
 8024d36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024d3a:	4a7f      	ldr	r2, [pc, #508]	; (8024f38 <_printf_float+0x2e4>)
 8024d3c:	4b7f      	ldr	r3, [pc, #508]	; (8024f3c <_printf_float+0x2e8>)
 8024d3e:	e7d1      	b.n	8024ce4 <_printf_float+0x90>
 8024d40:	6863      	ldr	r3, [r4, #4]
 8024d42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8024d46:	9206      	str	r2, [sp, #24]
 8024d48:	1c5a      	adds	r2, r3, #1
 8024d4a:	d13f      	bne.n	8024dcc <_printf_float+0x178>
 8024d4c:	2306      	movs	r3, #6
 8024d4e:	6063      	str	r3, [r4, #4]
 8024d50:	9b05      	ldr	r3, [sp, #20]
 8024d52:	6861      	ldr	r1, [r4, #4]
 8024d54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8024d58:	2300      	movs	r3, #0
 8024d5a:	9303      	str	r3, [sp, #12]
 8024d5c:	ab0a      	add	r3, sp, #40	; 0x28
 8024d5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8024d62:	ab09      	add	r3, sp, #36	; 0x24
 8024d64:	ec49 8b10 	vmov	d0, r8, r9
 8024d68:	9300      	str	r3, [sp, #0]
 8024d6a:	6022      	str	r2, [r4, #0]
 8024d6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8024d70:	4628      	mov	r0, r5
 8024d72:	f7ff fecf 	bl	8024b14 <__cvt>
 8024d76:	9b06      	ldr	r3, [sp, #24]
 8024d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024d7a:	2b47      	cmp	r3, #71	; 0x47
 8024d7c:	4680      	mov	r8, r0
 8024d7e:	d108      	bne.n	8024d92 <_printf_float+0x13e>
 8024d80:	1cc8      	adds	r0, r1, #3
 8024d82:	db02      	blt.n	8024d8a <_printf_float+0x136>
 8024d84:	6863      	ldr	r3, [r4, #4]
 8024d86:	4299      	cmp	r1, r3
 8024d88:	dd41      	ble.n	8024e0e <_printf_float+0x1ba>
 8024d8a:	f1ab 0302 	sub.w	r3, fp, #2
 8024d8e:	fa5f fb83 	uxtb.w	fp, r3
 8024d92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024d96:	d820      	bhi.n	8024dda <_printf_float+0x186>
 8024d98:	3901      	subs	r1, #1
 8024d9a:	465a      	mov	r2, fp
 8024d9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8024da0:	9109      	str	r1, [sp, #36]	; 0x24
 8024da2:	f7ff ff19 	bl	8024bd8 <__exponent>
 8024da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024da8:	1813      	adds	r3, r2, r0
 8024daa:	2a01      	cmp	r2, #1
 8024dac:	4681      	mov	r9, r0
 8024dae:	6123      	str	r3, [r4, #16]
 8024db0:	dc02      	bgt.n	8024db8 <_printf_float+0x164>
 8024db2:	6822      	ldr	r2, [r4, #0]
 8024db4:	07d2      	lsls	r2, r2, #31
 8024db6:	d501      	bpl.n	8024dbc <_printf_float+0x168>
 8024db8:	3301      	adds	r3, #1
 8024dba:	6123      	str	r3, [r4, #16]
 8024dbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8024dc0:	2b00      	cmp	r3, #0
 8024dc2:	d09c      	beq.n	8024cfe <_printf_float+0xaa>
 8024dc4:	232d      	movs	r3, #45	; 0x2d
 8024dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024dca:	e798      	b.n	8024cfe <_printf_float+0xaa>
 8024dcc:	9a06      	ldr	r2, [sp, #24]
 8024dce:	2a47      	cmp	r2, #71	; 0x47
 8024dd0:	d1be      	bne.n	8024d50 <_printf_float+0xfc>
 8024dd2:	2b00      	cmp	r3, #0
 8024dd4:	d1bc      	bne.n	8024d50 <_printf_float+0xfc>
 8024dd6:	2301      	movs	r3, #1
 8024dd8:	e7b9      	b.n	8024d4e <_printf_float+0xfa>
 8024dda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8024dde:	d118      	bne.n	8024e12 <_printf_float+0x1be>
 8024de0:	2900      	cmp	r1, #0
 8024de2:	6863      	ldr	r3, [r4, #4]
 8024de4:	dd0b      	ble.n	8024dfe <_printf_float+0x1aa>
 8024de6:	6121      	str	r1, [r4, #16]
 8024de8:	b913      	cbnz	r3, 8024df0 <_printf_float+0x19c>
 8024dea:	6822      	ldr	r2, [r4, #0]
 8024dec:	07d0      	lsls	r0, r2, #31
 8024dee:	d502      	bpl.n	8024df6 <_printf_float+0x1a2>
 8024df0:	3301      	adds	r3, #1
 8024df2:	440b      	add	r3, r1
 8024df4:	6123      	str	r3, [r4, #16]
 8024df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8024df8:	f04f 0900 	mov.w	r9, #0
 8024dfc:	e7de      	b.n	8024dbc <_printf_float+0x168>
 8024dfe:	b913      	cbnz	r3, 8024e06 <_printf_float+0x1b2>
 8024e00:	6822      	ldr	r2, [r4, #0]
 8024e02:	07d2      	lsls	r2, r2, #31
 8024e04:	d501      	bpl.n	8024e0a <_printf_float+0x1b6>
 8024e06:	3302      	adds	r3, #2
 8024e08:	e7f4      	b.n	8024df4 <_printf_float+0x1a0>
 8024e0a:	2301      	movs	r3, #1
 8024e0c:	e7f2      	b.n	8024df4 <_printf_float+0x1a0>
 8024e0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8024e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e14:	4299      	cmp	r1, r3
 8024e16:	db05      	blt.n	8024e24 <_printf_float+0x1d0>
 8024e18:	6823      	ldr	r3, [r4, #0]
 8024e1a:	6121      	str	r1, [r4, #16]
 8024e1c:	07d8      	lsls	r0, r3, #31
 8024e1e:	d5ea      	bpl.n	8024df6 <_printf_float+0x1a2>
 8024e20:	1c4b      	adds	r3, r1, #1
 8024e22:	e7e7      	b.n	8024df4 <_printf_float+0x1a0>
 8024e24:	2900      	cmp	r1, #0
 8024e26:	bfd4      	ite	le
 8024e28:	f1c1 0202 	rsble	r2, r1, #2
 8024e2c:	2201      	movgt	r2, #1
 8024e2e:	4413      	add	r3, r2
 8024e30:	e7e0      	b.n	8024df4 <_printf_float+0x1a0>
 8024e32:	6823      	ldr	r3, [r4, #0]
 8024e34:	055a      	lsls	r2, r3, #21
 8024e36:	d407      	bmi.n	8024e48 <_printf_float+0x1f4>
 8024e38:	6923      	ldr	r3, [r4, #16]
 8024e3a:	4642      	mov	r2, r8
 8024e3c:	4631      	mov	r1, r6
 8024e3e:	4628      	mov	r0, r5
 8024e40:	47b8      	blx	r7
 8024e42:	3001      	adds	r0, #1
 8024e44:	d12c      	bne.n	8024ea0 <_printf_float+0x24c>
 8024e46:	e764      	b.n	8024d12 <_printf_float+0xbe>
 8024e48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024e4c:	f240 80e0 	bls.w	8025010 <_printf_float+0x3bc>
 8024e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8024e54:	2200      	movs	r2, #0
 8024e56:	2300      	movs	r3, #0
 8024e58:	f7db fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 8024e5c:	2800      	cmp	r0, #0
 8024e5e:	d034      	beq.n	8024eca <_printf_float+0x276>
 8024e60:	4a37      	ldr	r2, [pc, #220]	; (8024f40 <_printf_float+0x2ec>)
 8024e62:	2301      	movs	r3, #1
 8024e64:	4631      	mov	r1, r6
 8024e66:	4628      	mov	r0, r5
 8024e68:	47b8      	blx	r7
 8024e6a:	3001      	adds	r0, #1
 8024e6c:	f43f af51 	beq.w	8024d12 <_printf_float+0xbe>
 8024e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024e74:	429a      	cmp	r2, r3
 8024e76:	db02      	blt.n	8024e7e <_printf_float+0x22a>
 8024e78:	6823      	ldr	r3, [r4, #0]
 8024e7a:	07d8      	lsls	r0, r3, #31
 8024e7c:	d510      	bpl.n	8024ea0 <_printf_float+0x24c>
 8024e7e:	ee18 3a10 	vmov	r3, s16
 8024e82:	4652      	mov	r2, sl
 8024e84:	4631      	mov	r1, r6
 8024e86:	4628      	mov	r0, r5
 8024e88:	47b8      	blx	r7
 8024e8a:	3001      	adds	r0, #1
 8024e8c:	f43f af41 	beq.w	8024d12 <_printf_float+0xbe>
 8024e90:	f04f 0800 	mov.w	r8, #0
 8024e94:	f104 091a 	add.w	r9, r4, #26
 8024e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e9a:	3b01      	subs	r3, #1
 8024e9c:	4543      	cmp	r3, r8
 8024e9e:	dc09      	bgt.n	8024eb4 <_printf_float+0x260>
 8024ea0:	6823      	ldr	r3, [r4, #0]
 8024ea2:	079b      	lsls	r3, r3, #30
 8024ea4:	f100 8107 	bmi.w	80250b6 <_printf_float+0x462>
 8024ea8:	68e0      	ldr	r0, [r4, #12]
 8024eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024eac:	4298      	cmp	r0, r3
 8024eae:	bfb8      	it	lt
 8024eb0:	4618      	movlt	r0, r3
 8024eb2:	e730      	b.n	8024d16 <_printf_float+0xc2>
 8024eb4:	2301      	movs	r3, #1
 8024eb6:	464a      	mov	r2, r9
 8024eb8:	4631      	mov	r1, r6
 8024eba:	4628      	mov	r0, r5
 8024ebc:	47b8      	blx	r7
 8024ebe:	3001      	adds	r0, #1
 8024ec0:	f43f af27 	beq.w	8024d12 <_printf_float+0xbe>
 8024ec4:	f108 0801 	add.w	r8, r8, #1
 8024ec8:	e7e6      	b.n	8024e98 <_printf_float+0x244>
 8024eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	dc39      	bgt.n	8024f44 <_printf_float+0x2f0>
 8024ed0:	4a1b      	ldr	r2, [pc, #108]	; (8024f40 <_printf_float+0x2ec>)
 8024ed2:	2301      	movs	r3, #1
 8024ed4:	4631      	mov	r1, r6
 8024ed6:	4628      	mov	r0, r5
 8024ed8:	47b8      	blx	r7
 8024eda:	3001      	adds	r0, #1
 8024edc:	f43f af19 	beq.w	8024d12 <_printf_float+0xbe>
 8024ee0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8024ee4:	4313      	orrs	r3, r2
 8024ee6:	d102      	bne.n	8024eee <_printf_float+0x29a>
 8024ee8:	6823      	ldr	r3, [r4, #0]
 8024eea:	07d9      	lsls	r1, r3, #31
 8024eec:	d5d8      	bpl.n	8024ea0 <_printf_float+0x24c>
 8024eee:	ee18 3a10 	vmov	r3, s16
 8024ef2:	4652      	mov	r2, sl
 8024ef4:	4631      	mov	r1, r6
 8024ef6:	4628      	mov	r0, r5
 8024ef8:	47b8      	blx	r7
 8024efa:	3001      	adds	r0, #1
 8024efc:	f43f af09 	beq.w	8024d12 <_printf_float+0xbe>
 8024f00:	f04f 0900 	mov.w	r9, #0
 8024f04:	f104 0a1a 	add.w	sl, r4, #26
 8024f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f0a:	425b      	negs	r3, r3
 8024f0c:	454b      	cmp	r3, r9
 8024f0e:	dc01      	bgt.n	8024f14 <_printf_float+0x2c0>
 8024f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f12:	e792      	b.n	8024e3a <_printf_float+0x1e6>
 8024f14:	2301      	movs	r3, #1
 8024f16:	4652      	mov	r2, sl
 8024f18:	4631      	mov	r1, r6
 8024f1a:	4628      	mov	r0, r5
 8024f1c:	47b8      	blx	r7
 8024f1e:	3001      	adds	r0, #1
 8024f20:	f43f aef7 	beq.w	8024d12 <_printf_float+0xbe>
 8024f24:	f109 0901 	add.w	r9, r9, #1
 8024f28:	e7ee      	b.n	8024f08 <_printf_float+0x2b4>
 8024f2a:	bf00      	nop
 8024f2c:	7fefffff 	.word	0x7fefffff
 8024f30:	0802ad57 	.word	0x0802ad57
 8024f34:	0802ad5b 	.word	0x0802ad5b
 8024f38:	0802ad5f 	.word	0x0802ad5f
 8024f3c:	0802ad63 	.word	0x0802ad63
 8024f40:	0802ad67 	.word	0x0802ad67
 8024f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024f48:	429a      	cmp	r2, r3
 8024f4a:	bfa8      	it	ge
 8024f4c:	461a      	movge	r2, r3
 8024f4e:	2a00      	cmp	r2, #0
 8024f50:	4691      	mov	r9, r2
 8024f52:	dc37      	bgt.n	8024fc4 <_printf_float+0x370>
 8024f54:	f04f 0b00 	mov.w	fp, #0
 8024f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024f5c:	f104 021a 	add.w	r2, r4, #26
 8024f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024f62:	9305      	str	r3, [sp, #20]
 8024f64:	eba3 0309 	sub.w	r3, r3, r9
 8024f68:	455b      	cmp	r3, fp
 8024f6a:	dc33      	bgt.n	8024fd4 <_printf_float+0x380>
 8024f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024f70:	429a      	cmp	r2, r3
 8024f72:	db3b      	blt.n	8024fec <_printf_float+0x398>
 8024f74:	6823      	ldr	r3, [r4, #0]
 8024f76:	07da      	lsls	r2, r3, #31
 8024f78:	d438      	bmi.n	8024fec <_printf_float+0x398>
 8024f7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8024f7e:	eba2 0903 	sub.w	r9, r2, r3
 8024f82:	9b05      	ldr	r3, [sp, #20]
 8024f84:	1ad2      	subs	r2, r2, r3
 8024f86:	4591      	cmp	r9, r2
 8024f88:	bfa8      	it	ge
 8024f8a:	4691      	movge	r9, r2
 8024f8c:	f1b9 0f00 	cmp.w	r9, #0
 8024f90:	dc35      	bgt.n	8024ffe <_printf_float+0x3aa>
 8024f92:	f04f 0800 	mov.w	r8, #0
 8024f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024f9a:	f104 0a1a 	add.w	sl, r4, #26
 8024f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024fa2:	1a9b      	subs	r3, r3, r2
 8024fa4:	eba3 0309 	sub.w	r3, r3, r9
 8024fa8:	4543      	cmp	r3, r8
 8024faa:	f77f af79 	ble.w	8024ea0 <_printf_float+0x24c>
 8024fae:	2301      	movs	r3, #1
 8024fb0:	4652      	mov	r2, sl
 8024fb2:	4631      	mov	r1, r6
 8024fb4:	4628      	mov	r0, r5
 8024fb6:	47b8      	blx	r7
 8024fb8:	3001      	adds	r0, #1
 8024fba:	f43f aeaa 	beq.w	8024d12 <_printf_float+0xbe>
 8024fbe:	f108 0801 	add.w	r8, r8, #1
 8024fc2:	e7ec      	b.n	8024f9e <_printf_float+0x34a>
 8024fc4:	4613      	mov	r3, r2
 8024fc6:	4631      	mov	r1, r6
 8024fc8:	4642      	mov	r2, r8
 8024fca:	4628      	mov	r0, r5
 8024fcc:	47b8      	blx	r7
 8024fce:	3001      	adds	r0, #1
 8024fd0:	d1c0      	bne.n	8024f54 <_printf_float+0x300>
 8024fd2:	e69e      	b.n	8024d12 <_printf_float+0xbe>
 8024fd4:	2301      	movs	r3, #1
 8024fd6:	4631      	mov	r1, r6
 8024fd8:	4628      	mov	r0, r5
 8024fda:	9205      	str	r2, [sp, #20]
 8024fdc:	47b8      	blx	r7
 8024fde:	3001      	adds	r0, #1
 8024fe0:	f43f ae97 	beq.w	8024d12 <_printf_float+0xbe>
 8024fe4:	9a05      	ldr	r2, [sp, #20]
 8024fe6:	f10b 0b01 	add.w	fp, fp, #1
 8024fea:	e7b9      	b.n	8024f60 <_printf_float+0x30c>
 8024fec:	ee18 3a10 	vmov	r3, s16
 8024ff0:	4652      	mov	r2, sl
 8024ff2:	4631      	mov	r1, r6
 8024ff4:	4628      	mov	r0, r5
 8024ff6:	47b8      	blx	r7
 8024ff8:	3001      	adds	r0, #1
 8024ffa:	d1be      	bne.n	8024f7a <_printf_float+0x326>
 8024ffc:	e689      	b.n	8024d12 <_printf_float+0xbe>
 8024ffe:	9a05      	ldr	r2, [sp, #20]
 8025000:	464b      	mov	r3, r9
 8025002:	4442      	add	r2, r8
 8025004:	4631      	mov	r1, r6
 8025006:	4628      	mov	r0, r5
 8025008:	47b8      	blx	r7
 802500a:	3001      	adds	r0, #1
 802500c:	d1c1      	bne.n	8024f92 <_printf_float+0x33e>
 802500e:	e680      	b.n	8024d12 <_printf_float+0xbe>
 8025010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025012:	2a01      	cmp	r2, #1
 8025014:	dc01      	bgt.n	802501a <_printf_float+0x3c6>
 8025016:	07db      	lsls	r3, r3, #31
 8025018:	d53a      	bpl.n	8025090 <_printf_float+0x43c>
 802501a:	2301      	movs	r3, #1
 802501c:	4642      	mov	r2, r8
 802501e:	4631      	mov	r1, r6
 8025020:	4628      	mov	r0, r5
 8025022:	47b8      	blx	r7
 8025024:	3001      	adds	r0, #1
 8025026:	f43f ae74 	beq.w	8024d12 <_printf_float+0xbe>
 802502a:	ee18 3a10 	vmov	r3, s16
 802502e:	4652      	mov	r2, sl
 8025030:	4631      	mov	r1, r6
 8025032:	4628      	mov	r0, r5
 8025034:	47b8      	blx	r7
 8025036:	3001      	adds	r0, #1
 8025038:	f43f ae6b 	beq.w	8024d12 <_printf_float+0xbe>
 802503c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025040:	2200      	movs	r2, #0
 8025042:	2300      	movs	r3, #0
 8025044:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8025048:	f7db fd66 	bl	8000b18 <__aeabi_dcmpeq>
 802504c:	b9d8      	cbnz	r0, 8025086 <_printf_float+0x432>
 802504e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8025052:	f108 0201 	add.w	r2, r8, #1
 8025056:	4631      	mov	r1, r6
 8025058:	4628      	mov	r0, r5
 802505a:	47b8      	blx	r7
 802505c:	3001      	adds	r0, #1
 802505e:	d10e      	bne.n	802507e <_printf_float+0x42a>
 8025060:	e657      	b.n	8024d12 <_printf_float+0xbe>
 8025062:	2301      	movs	r3, #1
 8025064:	4652      	mov	r2, sl
 8025066:	4631      	mov	r1, r6
 8025068:	4628      	mov	r0, r5
 802506a:	47b8      	blx	r7
 802506c:	3001      	adds	r0, #1
 802506e:	f43f ae50 	beq.w	8024d12 <_printf_float+0xbe>
 8025072:	f108 0801 	add.w	r8, r8, #1
 8025076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025078:	3b01      	subs	r3, #1
 802507a:	4543      	cmp	r3, r8
 802507c:	dcf1      	bgt.n	8025062 <_printf_float+0x40e>
 802507e:	464b      	mov	r3, r9
 8025080:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025084:	e6da      	b.n	8024e3c <_printf_float+0x1e8>
 8025086:	f04f 0800 	mov.w	r8, #0
 802508a:	f104 0a1a 	add.w	sl, r4, #26
 802508e:	e7f2      	b.n	8025076 <_printf_float+0x422>
 8025090:	2301      	movs	r3, #1
 8025092:	4642      	mov	r2, r8
 8025094:	e7df      	b.n	8025056 <_printf_float+0x402>
 8025096:	2301      	movs	r3, #1
 8025098:	464a      	mov	r2, r9
 802509a:	4631      	mov	r1, r6
 802509c:	4628      	mov	r0, r5
 802509e:	47b8      	blx	r7
 80250a0:	3001      	adds	r0, #1
 80250a2:	f43f ae36 	beq.w	8024d12 <_printf_float+0xbe>
 80250a6:	f108 0801 	add.w	r8, r8, #1
 80250aa:	68e3      	ldr	r3, [r4, #12]
 80250ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80250ae:	1a5b      	subs	r3, r3, r1
 80250b0:	4543      	cmp	r3, r8
 80250b2:	dcf0      	bgt.n	8025096 <_printf_float+0x442>
 80250b4:	e6f8      	b.n	8024ea8 <_printf_float+0x254>
 80250b6:	f04f 0800 	mov.w	r8, #0
 80250ba:	f104 0919 	add.w	r9, r4, #25
 80250be:	e7f4      	b.n	80250aa <_printf_float+0x456>

080250c0 <_printf_common>:
 80250c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80250c4:	4616      	mov	r6, r2
 80250c6:	4699      	mov	r9, r3
 80250c8:	688a      	ldr	r2, [r1, #8]
 80250ca:	690b      	ldr	r3, [r1, #16]
 80250cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80250d0:	4293      	cmp	r3, r2
 80250d2:	bfb8      	it	lt
 80250d4:	4613      	movlt	r3, r2
 80250d6:	6033      	str	r3, [r6, #0]
 80250d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80250dc:	4607      	mov	r7, r0
 80250de:	460c      	mov	r4, r1
 80250e0:	b10a      	cbz	r2, 80250e6 <_printf_common+0x26>
 80250e2:	3301      	adds	r3, #1
 80250e4:	6033      	str	r3, [r6, #0]
 80250e6:	6823      	ldr	r3, [r4, #0]
 80250e8:	0699      	lsls	r1, r3, #26
 80250ea:	bf42      	ittt	mi
 80250ec:	6833      	ldrmi	r3, [r6, #0]
 80250ee:	3302      	addmi	r3, #2
 80250f0:	6033      	strmi	r3, [r6, #0]
 80250f2:	6825      	ldr	r5, [r4, #0]
 80250f4:	f015 0506 	ands.w	r5, r5, #6
 80250f8:	d106      	bne.n	8025108 <_printf_common+0x48>
 80250fa:	f104 0a19 	add.w	sl, r4, #25
 80250fe:	68e3      	ldr	r3, [r4, #12]
 8025100:	6832      	ldr	r2, [r6, #0]
 8025102:	1a9b      	subs	r3, r3, r2
 8025104:	42ab      	cmp	r3, r5
 8025106:	dc26      	bgt.n	8025156 <_printf_common+0x96>
 8025108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802510c:	1e13      	subs	r3, r2, #0
 802510e:	6822      	ldr	r2, [r4, #0]
 8025110:	bf18      	it	ne
 8025112:	2301      	movne	r3, #1
 8025114:	0692      	lsls	r2, r2, #26
 8025116:	d42b      	bmi.n	8025170 <_printf_common+0xb0>
 8025118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802511c:	4649      	mov	r1, r9
 802511e:	4638      	mov	r0, r7
 8025120:	47c0      	blx	r8
 8025122:	3001      	adds	r0, #1
 8025124:	d01e      	beq.n	8025164 <_printf_common+0xa4>
 8025126:	6823      	ldr	r3, [r4, #0]
 8025128:	6922      	ldr	r2, [r4, #16]
 802512a:	f003 0306 	and.w	r3, r3, #6
 802512e:	2b04      	cmp	r3, #4
 8025130:	bf02      	ittt	eq
 8025132:	68e5      	ldreq	r5, [r4, #12]
 8025134:	6833      	ldreq	r3, [r6, #0]
 8025136:	1aed      	subeq	r5, r5, r3
 8025138:	68a3      	ldr	r3, [r4, #8]
 802513a:	bf0c      	ite	eq
 802513c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025140:	2500      	movne	r5, #0
 8025142:	4293      	cmp	r3, r2
 8025144:	bfc4      	itt	gt
 8025146:	1a9b      	subgt	r3, r3, r2
 8025148:	18ed      	addgt	r5, r5, r3
 802514a:	2600      	movs	r6, #0
 802514c:	341a      	adds	r4, #26
 802514e:	42b5      	cmp	r5, r6
 8025150:	d11a      	bne.n	8025188 <_printf_common+0xc8>
 8025152:	2000      	movs	r0, #0
 8025154:	e008      	b.n	8025168 <_printf_common+0xa8>
 8025156:	2301      	movs	r3, #1
 8025158:	4652      	mov	r2, sl
 802515a:	4649      	mov	r1, r9
 802515c:	4638      	mov	r0, r7
 802515e:	47c0      	blx	r8
 8025160:	3001      	adds	r0, #1
 8025162:	d103      	bne.n	802516c <_printf_common+0xac>
 8025164:	f04f 30ff 	mov.w	r0, #4294967295
 8025168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802516c:	3501      	adds	r5, #1
 802516e:	e7c6      	b.n	80250fe <_printf_common+0x3e>
 8025170:	18e1      	adds	r1, r4, r3
 8025172:	1c5a      	adds	r2, r3, #1
 8025174:	2030      	movs	r0, #48	; 0x30
 8025176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802517a:	4422      	add	r2, r4
 802517c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025184:	3302      	adds	r3, #2
 8025186:	e7c7      	b.n	8025118 <_printf_common+0x58>
 8025188:	2301      	movs	r3, #1
 802518a:	4622      	mov	r2, r4
 802518c:	4649      	mov	r1, r9
 802518e:	4638      	mov	r0, r7
 8025190:	47c0      	blx	r8
 8025192:	3001      	adds	r0, #1
 8025194:	d0e6      	beq.n	8025164 <_printf_common+0xa4>
 8025196:	3601      	adds	r6, #1
 8025198:	e7d9      	b.n	802514e <_printf_common+0x8e>
	...

0802519c <_printf_i>:
 802519c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80251a0:	7e0f      	ldrb	r7, [r1, #24]
 80251a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80251a4:	2f78      	cmp	r7, #120	; 0x78
 80251a6:	4691      	mov	r9, r2
 80251a8:	4680      	mov	r8, r0
 80251aa:	460c      	mov	r4, r1
 80251ac:	469a      	mov	sl, r3
 80251ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80251b2:	d807      	bhi.n	80251c4 <_printf_i+0x28>
 80251b4:	2f62      	cmp	r7, #98	; 0x62
 80251b6:	d80a      	bhi.n	80251ce <_printf_i+0x32>
 80251b8:	2f00      	cmp	r7, #0
 80251ba:	f000 80d4 	beq.w	8025366 <_printf_i+0x1ca>
 80251be:	2f58      	cmp	r7, #88	; 0x58
 80251c0:	f000 80c0 	beq.w	8025344 <_printf_i+0x1a8>
 80251c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80251c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80251cc:	e03a      	b.n	8025244 <_printf_i+0xa8>
 80251ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80251d2:	2b15      	cmp	r3, #21
 80251d4:	d8f6      	bhi.n	80251c4 <_printf_i+0x28>
 80251d6:	a101      	add	r1, pc, #4	; (adr r1, 80251dc <_printf_i+0x40>)
 80251d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80251dc:	08025235 	.word	0x08025235
 80251e0:	08025249 	.word	0x08025249
 80251e4:	080251c5 	.word	0x080251c5
 80251e8:	080251c5 	.word	0x080251c5
 80251ec:	080251c5 	.word	0x080251c5
 80251f0:	080251c5 	.word	0x080251c5
 80251f4:	08025249 	.word	0x08025249
 80251f8:	080251c5 	.word	0x080251c5
 80251fc:	080251c5 	.word	0x080251c5
 8025200:	080251c5 	.word	0x080251c5
 8025204:	080251c5 	.word	0x080251c5
 8025208:	0802534d 	.word	0x0802534d
 802520c:	08025275 	.word	0x08025275
 8025210:	08025307 	.word	0x08025307
 8025214:	080251c5 	.word	0x080251c5
 8025218:	080251c5 	.word	0x080251c5
 802521c:	0802536f 	.word	0x0802536f
 8025220:	080251c5 	.word	0x080251c5
 8025224:	08025275 	.word	0x08025275
 8025228:	080251c5 	.word	0x080251c5
 802522c:	080251c5 	.word	0x080251c5
 8025230:	0802530f 	.word	0x0802530f
 8025234:	682b      	ldr	r3, [r5, #0]
 8025236:	1d1a      	adds	r2, r3, #4
 8025238:	681b      	ldr	r3, [r3, #0]
 802523a:	602a      	str	r2, [r5, #0]
 802523c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025244:	2301      	movs	r3, #1
 8025246:	e09f      	b.n	8025388 <_printf_i+0x1ec>
 8025248:	6820      	ldr	r0, [r4, #0]
 802524a:	682b      	ldr	r3, [r5, #0]
 802524c:	0607      	lsls	r7, r0, #24
 802524e:	f103 0104 	add.w	r1, r3, #4
 8025252:	6029      	str	r1, [r5, #0]
 8025254:	d501      	bpl.n	802525a <_printf_i+0xbe>
 8025256:	681e      	ldr	r6, [r3, #0]
 8025258:	e003      	b.n	8025262 <_printf_i+0xc6>
 802525a:	0646      	lsls	r6, r0, #25
 802525c:	d5fb      	bpl.n	8025256 <_printf_i+0xba>
 802525e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025262:	2e00      	cmp	r6, #0
 8025264:	da03      	bge.n	802526e <_printf_i+0xd2>
 8025266:	232d      	movs	r3, #45	; 0x2d
 8025268:	4276      	negs	r6, r6
 802526a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802526e:	485a      	ldr	r0, [pc, #360]	; (80253d8 <_printf_i+0x23c>)
 8025270:	230a      	movs	r3, #10
 8025272:	e012      	b.n	802529a <_printf_i+0xfe>
 8025274:	682b      	ldr	r3, [r5, #0]
 8025276:	6820      	ldr	r0, [r4, #0]
 8025278:	1d19      	adds	r1, r3, #4
 802527a:	6029      	str	r1, [r5, #0]
 802527c:	0605      	lsls	r5, r0, #24
 802527e:	d501      	bpl.n	8025284 <_printf_i+0xe8>
 8025280:	681e      	ldr	r6, [r3, #0]
 8025282:	e002      	b.n	802528a <_printf_i+0xee>
 8025284:	0641      	lsls	r1, r0, #25
 8025286:	d5fb      	bpl.n	8025280 <_printf_i+0xe4>
 8025288:	881e      	ldrh	r6, [r3, #0]
 802528a:	4853      	ldr	r0, [pc, #332]	; (80253d8 <_printf_i+0x23c>)
 802528c:	2f6f      	cmp	r7, #111	; 0x6f
 802528e:	bf0c      	ite	eq
 8025290:	2308      	moveq	r3, #8
 8025292:	230a      	movne	r3, #10
 8025294:	2100      	movs	r1, #0
 8025296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802529a:	6865      	ldr	r5, [r4, #4]
 802529c:	60a5      	str	r5, [r4, #8]
 802529e:	2d00      	cmp	r5, #0
 80252a0:	bfa2      	ittt	ge
 80252a2:	6821      	ldrge	r1, [r4, #0]
 80252a4:	f021 0104 	bicge.w	r1, r1, #4
 80252a8:	6021      	strge	r1, [r4, #0]
 80252aa:	b90e      	cbnz	r6, 80252b0 <_printf_i+0x114>
 80252ac:	2d00      	cmp	r5, #0
 80252ae:	d04b      	beq.n	8025348 <_printf_i+0x1ac>
 80252b0:	4615      	mov	r5, r2
 80252b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80252b6:	fb03 6711 	mls	r7, r3, r1, r6
 80252ba:	5dc7      	ldrb	r7, [r0, r7]
 80252bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80252c0:	4637      	mov	r7, r6
 80252c2:	42bb      	cmp	r3, r7
 80252c4:	460e      	mov	r6, r1
 80252c6:	d9f4      	bls.n	80252b2 <_printf_i+0x116>
 80252c8:	2b08      	cmp	r3, #8
 80252ca:	d10b      	bne.n	80252e4 <_printf_i+0x148>
 80252cc:	6823      	ldr	r3, [r4, #0]
 80252ce:	07de      	lsls	r6, r3, #31
 80252d0:	d508      	bpl.n	80252e4 <_printf_i+0x148>
 80252d2:	6923      	ldr	r3, [r4, #16]
 80252d4:	6861      	ldr	r1, [r4, #4]
 80252d6:	4299      	cmp	r1, r3
 80252d8:	bfde      	ittt	le
 80252da:	2330      	movle	r3, #48	; 0x30
 80252dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80252e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80252e4:	1b52      	subs	r2, r2, r5
 80252e6:	6122      	str	r2, [r4, #16]
 80252e8:	f8cd a000 	str.w	sl, [sp]
 80252ec:	464b      	mov	r3, r9
 80252ee:	aa03      	add	r2, sp, #12
 80252f0:	4621      	mov	r1, r4
 80252f2:	4640      	mov	r0, r8
 80252f4:	f7ff fee4 	bl	80250c0 <_printf_common>
 80252f8:	3001      	adds	r0, #1
 80252fa:	d14a      	bne.n	8025392 <_printf_i+0x1f6>
 80252fc:	f04f 30ff 	mov.w	r0, #4294967295
 8025300:	b004      	add	sp, #16
 8025302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025306:	6823      	ldr	r3, [r4, #0]
 8025308:	f043 0320 	orr.w	r3, r3, #32
 802530c:	6023      	str	r3, [r4, #0]
 802530e:	4833      	ldr	r0, [pc, #204]	; (80253dc <_printf_i+0x240>)
 8025310:	2778      	movs	r7, #120	; 0x78
 8025312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025316:	6823      	ldr	r3, [r4, #0]
 8025318:	6829      	ldr	r1, [r5, #0]
 802531a:	061f      	lsls	r7, r3, #24
 802531c:	f851 6b04 	ldr.w	r6, [r1], #4
 8025320:	d402      	bmi.n	8025328 <_printf_i+0x18c>
 8025322:	065f      	lsls	r7, r3, #25
 8025324:	bf48      	it	mi
 8025326:	b2b6      	uxthmi	r6, r6
 8025328:	07df      	lsls	r7, r3, #31
 802532a:	bf48      	it	mi
 802532c:	f043 0320 	orrmi.w	r3, r3, #32
 8025330:	6029      	str	r1, [r5, #0]
 8025332:	bf48      	it	mi
 8025334:	6023      	strmi	r3, [r4, #0]
 8025336:	b91e      	cbnz	r6, 8025340 <_printf_i+0x1a4>
 8025338:	6823      	ldr	r3, [r4, #0]
 802533a:	f023 0320 	bic.w	r3, r3, #32
 802533e:	6023      	str	r3, [r4, #0]
 8025340:	2310      	movs	r3, #16
 8025342:	e7a7      	b.n	8025294 <_printf_i+0xf8>
 8025344:	4824      	ldr	r0, [pc, #144]	; (80253d8 <_printf_i+0x23c>)
 8025346:	e7e4      	b.n	8025312 <_printf_i+0x176>
 8025348:	4615      	mov	r5, r2
 802534a:	e7bd      	b.n	80252c8 <_printf_i+0x12c>
 802534c:	682b      	ldr	r3, [r5, #0]
 802534e:	6826      	ldr	r6, [r4, #0]
 8025350:	6961      	ldr	r1, [r4, #20]
 8025352:	1d18      	adds	r0, r3, #4
 8025354:	6028      	str	r0, [r5, #0]
 8025356:	0635      	lsls	r5, r6, #24
 8025358:	681b      	ldr	r3, [r3, #0]
 802535a:	d501      	bpl.n	8025360 <_printf_i+0x1c4>
 802535c:	6019      	str	r1, [r3, #0]
 802535e:	e002      	b.n	8025366 <_printf_i+0x1ca>
 8025360:	0670      	lsls	r0, r6, #25
 8025362:	d5fb      	bpl.n	802535c <_printf_i+0x1c0>
 8025364:	8019      	strh	r1, [r3, #0]
 8025366:	2300      	movs	r3, #0
 8025368:	6123      	str	r3, [r4, #16]
 802536a:	4615      	mov	r5, r2
 802536c:	e7bc      	b.n	80252e8 <_printf_i+0x14c>
 802536e:	682b      	ldr	r3, [r5, #0]
 8025370:	1d1a      	adds	r2, r3, #4
 8025372:	602a      	str	r2, [r5, #0]
 8025374:	681d      	ldr	r5, [r3, #0]
 8025376:	6862      	ldr	r2, [r4, #4]
 8025378:	2100      	movs	r1, #0
 802537a:	4628      	mov	r0, r5
 802537c:	f7da ff50 	bl	8000220 <memchr>
 8025380:	b108      	cbz	r0, 8025386 <_printf_i+0x1ea>
 8025382:	1b40      	subs	r0, r0, r5
 8025384:	6060      	str	r0, [r4, #4]
 8025386:	6863      	ldr	r3, [r4, #4]
 8025388:	6123      	str	r3, [r4, #16]
 802538a:	2300      	movs	r3, #0
 802538c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025390:	e7aa      	b.n	80252e8 <_printf_i+0x14c>
 8025392:	6923      	ldr	r3, [r4, #16]
 8025394:	462a      	mov	r2, r5
 8025396:	4649      	mov	r1, r9
 8025398:	4640      	mov	r0, r8
 802539a:	47d0      	blx	sl
 802539c:	3001      	adds	r0, #1
 802539e:	d0ad      	beq.n	80252fc <_printf_i+0x160>
 80253a0:	6823      	ldr	r3, [r4, #0]
 80253a2:	079b      	lsls	r3, r3, #30
 80253a4:	d413      	bmi.n	80253ce <_printf_i+0x232>
 80253a6:	68e0      	ldr	r0, [r4, #12]
 80253a8:	9b03      	ldr	r3, [sp, #12]
 80253aa:	4298      	cmp	r0, r3
 80253ac:	bfb8      	it	lt
 80253ae:	4618      	movlt	r0, r3
 80253b0:	e7a6      	b.n	8025300 <_printf_i+0x164>
 80253b2:	2301      	movs	r3, #1
 80253b4:	4632      	mov	r2, r6
 80253b6:	4649      	mov	r1, r9
 80253b8:	4640      	mov	r0, r8
 80253ba:	47d0      	blx	sl
 80253bc:	3001      	adds	r0, #1
 80253be:	d09d      	beq.n	80252fc <_printf_i+0x160>
 80253c0:	3501      	adds	r5, #1
 80253c2:	68e3      	ldr	r3, [r4, #12]
 80253c4:	9903      	ldr	r1, [sp, #12]
 80253c6:	1a5b      	subs	r3, r3, r1
 80253c8:	42ab      	cmp	r3, r5
 80253ca:	dcf2      	bgt.n	80253b2 <_printf_i+0x216>
 80253cc:	e7eb      	b.n	80253a6 <_printf_i+0x20a>
 80253ce:	2500      	movs	r5, #0
 80253d0:	f104 0619 	add.w	r6, r4, #25
 80253d4:	e7f5      	b.n	80253c2 <_printf_i+0x226>
 80253d6:	bf00      	nop
 80253d8:	0802ad69 	.word	0x0802ad69
 80253dc:	0802ad7a 	.word	0x0802ad7a

080253e0 <std>:
 80253e0:	2300      	movs	r3, #0
 80253e2:	b510      	push	{r4, lr}
 80253e4:	4604      	mov	r4, r0
 80253e6:	e9c0 3300 	strd	r3, r3, [r0]
 80253ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80253ee:	6083      	str	r3, [r0, #8]
 80253f0:	8181      	strh	r1, [r0, #12]
 80253f2:	6643      	str	r3, [r0, #100]	; 0x64
 80253f4:	81c2      	strh	r2, [r0, #14]
 80253f6:	6183      	str	r3, [r0, #24]
 80253f8:	4619      	mov	r1, r3
 80253fa:	2208      	movs	r2, #8
 80253fc:	305c      	adds	r0, #92	; 0x5c
 80253fe:	f000 f914 	bl	802562a <memset>
 8025402:	4b05      	ldr	r3, [pc, #20]	; (8025418 <std+0x38>)
 8025404:	6263      	str	r3, [r4, #36]	; 0x24
 8025406:	4b05      	ldr	r3, [pc, #20]	; (802541c <std+0x3c>)
 8025408:	62a3      	str	r3, [r4, #40]	; 0x28
 802540a:	4b05      	ldr	r3, [pc, #20]	; (8025420 <std+0x40>)
 802540c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802540e:	4b05      	ldr	r3, [pc, #20]	; (8025424 <std+0x44>)
 8025410:	6224      	str	r4, [r4, #32]
 8025412:	6323      	str	r3, [r4, #48]	; 0x30
 8025414:	bd10      	pop	{r4, pc}
 8025416:	bf00      	nop
 8025418:	080255a5 	.word	0x080255a5
 802541c:	080255c7 	.word	0x080255c7
 8025420:	080255ff 	.word	0x080255ff
 8025424:	08025623 	.word	0x08025623

08025428 <stdio_exit_handler>:
 8025428:	4a02      	ldr	r2, [pc, #8]	; (8025434 <stdio_exit_handler+0xc>)
 802542a:	4903      	ldr	r1, [pc, #12]	; (8025438 <stdio_exit_handler+0x10>)
 802542c:	4803      	ldr	r0, [pc, #12]	; (802543c <stdio_exit_handler+0x14>)
 802542e:	f000 b87b 	b.w	8025528 <_fwalk_sglue>
 8025432:	bf00      	nop
 8025434:	200001a0 	.word	0x200001a0
 8025438:	08027389 	.word	0x08027389
 802543c:	200001ac 	.word	0x200001ac

08025440 <cleanup_stdio>:
 8025440:	6841      	ldr	r1, [r0, #4]
 8025442:	4b0c      	ldr	r3, [pc, #48]	; (8025474 <cleanup_stdio+0x34>)
 8025444:	4299      	cmp	r1, r3
 8025446:	b510      	push	{r4, lr}
 8025448:	4604      	mov	r4, r0
 802544a:	d001      	beq.n	8025450 <cleanup_stdio+0x10>
 802544c:	f001 ff9c 	bl	8027388 <_fflush_r>
 8025450:	68a1      	ldr	r1, [r4, #8]
 8025452:	4b09      	ldr	r3, [pc, #36]	; (8025478 <cleanup_stdio+0x38>)
 8025454:	4299      	cmp	r1, r3
 8025456:	d002      	beq.n	802545e <cleanup_stdio+0x1e>
 8025458:	4620      	mov	r0, r4
 802545a:	f001 ff95 	bl	8027388 <_fflush_r>
 802545e:	68e1      	ldr	r1, [r4, #12]
 8025460:	4b06      	ldr	r3, [pc, #24]	; (802547c <cleanup_stdio+0x3c>)
 8025462:	4299      	cmp	r1, r3
 8025464:	d004      	beq.n	8025470 <cleanup_stdio+0x30>
 8025466:	4620      	mov	r0, r4
 8025468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802546c:	f001 bf8c 	b.w	8027388 <_fflush_r>
 8025470:	bd10      	pop	{r4, pc}
 8025472:	bf00      	nop
 8025474:	20016958 	.word	0x20016958
 8025478:	200169c0 	.word	0x200169c0
 802547c:	20016a28 	.word	0x20016a28

08025480 <global_stdio_init.part.0>:
 8025480:	b510      	push	{r4, lr}
 8025482:	4b0b      	ldr	r3, [pc, #44]	; (80254b0 <global_stdio_init.part.0+0x30>)
 8025484:	4c0b      	ldr	r4, [pc, #44]	; (80254b4 <global_stdio_init.part.0+0x34>)
 8025486:	4a0c      	ldr	r2, [pc, #48]	; (80254b8 <global_stdio_init.part.0+0x38>)
 8025488:	601a      	str	r2, [r3, #0]
 802548a:	4620      	mov	r0, r4
 802548c:	2200      	movs	r2, #0
 802548e:	2104      	movs	r1, #4
 8025490:	f7ff ffa6 	bl	80253e0 <std>
 8025494:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025498:	2201      	movs	r2, #1
 802549a:	2109      	movs	r1, #9
 802549c:	f7ff ffa0 	bl	80253e0 <std>
 80254a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80254a4:	2202      	movs	r2, #2
 80254a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254aa:	2112      	movs	r1, #18
 80254ac:	f7ff bf98 	b.w	80253e0 <std>
 80254b0:	20016a90 	.word	0x20016a90
 80254b4:	20016958 	.word	0x20016958
 80254b8:	08025429 	.word	0x08025429

080254bc <__sfp_lock_acquire>:
 80254bc:	4801      	ldr	r0, [pc, #4]	; (80254c4 <__sfp_lock_acquire+0x8>)
 80254be:	f000 b931 	b.w	8025724 <__retarget_lock_acquire_recursive>
 80254c2:	bf00      	nop
 80254c4:	20016a99 	.word	0x20016a99

080254c8 <__sfp_lock_release>:
 80254c8:	4801      	ldr	r0, [pc, #4]	; (80254d0 <__sfp_lock_release+0x8>)
 80254ca:	f000 b92c 	b.w	8025726 <__retarget_lock_release_recursive>
 80254ce:	bf00      	nop
 80254d0:	20016a99 	.word	0x20016a99

080254d4 <__sinit>:
 80254d4:	b510      	push	{r4, lr}
 80254d6:	4604      	mov	r4, r0
 80254d8:	f7ff fff0 	bl	80254bc <__sfp_lock_acquire>
 80254dc:	6a23      	ldr	r3, [r4, #32]
 80254de:	b11b      	cbz	r3, 80254e8 <__sinit+0x14>
 80254e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254e4:	f7ff bff0 	b.w	80254c8 <__sfp_lock_release>
 80254e8:	4b04      	ldr	r3, [pc, #16]	; (80254fc <__sinit+0x28>)
 80254ea:	6223      	str	r3, [r4, #32]
 80254ec:	4b04      	ldr	r3, [pc, #16]	; (8025500 <__sinit+0x2c>)
 80254ee:	681b      	ldr	r3, [r3, #0]
 80254f0:	2b00      	cmp	r3, #0
 80254f2:	d1f5      	bne.n	80254e0 <__sinit+0xc>
 80254f4:	f7ff ffc4 	bl	8025480 <global_stdio_init.part.0>
 80254f8:	e7f2      	b.n	80254e0 <__sinit+0xc>
 80254fa:	bf00      	nop
 80254fc:	08025441 	.word	0x08025441
 8025500:	20016a90 	.word	0x20016a90

08025504 <fiprintf>:
 8025504:	b40e      	push	{r1, r2, r3}
 8025506:	b503      	push	{r0, r1, lr}
 8025508:	4601      	mov	r1, r0
 802550a:	ab03      	add	r3, sp, #12
 802550c:	4805      	ldr	r0, [pc, #20]	; (8025524 <fiprintf+0x20>)
 802550e:	f853 2b04 	ldr.w	r2, [r3], #4
 8025512:	6800      	ldr	r0, [r0, #0]
 8025514:	9301      	str	r3, [sp, #4]
 8025516:	f001 fd97 	bl	8027048 <_vfiprintf_r>
 802551a:	b002      	add	sp, #8
 802551c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025520:	b003      	add	sp, #12
 8025522:	4770      	bx	lr
 8025524:	200001f8 	.word	0x200001f8

08025528 <_fwalk_sglue>:
 8025528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802552c:	4607      	mov	r7, r0
 802552e:	4688      	mov	r8, r1
 8025530:	4614      	mov	r4, r2
 8025532:	2600      	movs	r6, #0
 8025534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025538:	f1b9 0901 	subs.w	r9, r9, #1
 802553c:	d505      	bpl.n	802554a <_fwalk_sglue+0x22>
 802553e:	6824      	ldr	r4, [r4, #0]
 8025540:	2c00      	cmp	r4, #0
 8025542:	d1f7      	bne.n	8025534 <_fwalk_sglue+0xc>
 8025544:	4630      	mov	r0, r6
 8025546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802554a:	89ab      	ldrh	r3, [r5, #12]
 802554c:	2b01      	cmp	r3, #1
 802554e:	d907      	bls.n	8025560 <_fwalk_sglue+0x38>
 8025550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025554:	3301      	adds	r3, #1
 8025556:	d003      	beq.n	8025560 <_fwalk_sglue+0x38>
 8025558:	4629      	mov	r1, r5
 802555a:	4638      	mov	r0, r7
 802555c:	47c0      	blx	r8
 802555e:	4306      	orrs	r6, r0
 8025560:	3568      	adds	r5, #104	; 0x68
 8025562:	e7e9      	b.n	8025538 <_fwalk_sglue+0x10>

08025564 <siprintf>:
 8025564:	b40e      	push	{r1, r2, r3}
 8025566:	b500      	push	{lr}
 8025568:	b09c      	sub	sp, #112	; 0x70
 802556a:	ab1d      	add	r3, sp, #116	; 0x74
 802556c:	9002      	str	r0, [sp, #8]
 802556e:	9006      	str	r0, [sp, #24]
 8025570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025574:	4809      	ldr	r0, [pc, #36]	; (802559c <siprintf+0x38>)
 8025576:	9107      	str	r1, [sp, #28]
 8025578:	9104      	str	r1, [sp, #16]
 802557a:	4909      	ldr	r1, [pc, #36]	; (80255a0 <siprintf+0x3c>)
 802557c:	f853 2b04 	ldr.w	r2, [r3], #4
 8025580:	9105      	str	r1, [sp, #20]
 8025582:	6800      	ldr	r0, [r0, #0]
 8025584:	9301      	str	r3, [sp, #4]
 8025586:	a902      	add	r1, sp, #8
 8025588:	f001 fc36 	bl	8026df8 <_svfiprintf_r>
 802558c:	9b02      	ldr	r3, [sp, #8]
 802558e:	2200      	movs	r2, #0
 8025590:	701a      	strb	r2, [r3, #0]
 8025592:	b01c      	add	sp, #112	; 0x70
 8025594:	f85d eb04 	ldr.w	lr, [sp], #4
 8025598:	b003      	add	sp, #12
 802559a:	4770      	bx	lr
 802559c:	200001f8 	.word	0x200001f8
 80255a0:	ffff0208 	.word	0xffff0208

080255a4 <__sread>:
 80255a4:	b510      	push	{r4, lr}
 80255a6:	460c      	mov	r4, r1
 80255a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255ac:	f000 f86c 	bl	8025688 <_read_r>
 80255b0:	2800      	cmp	r0, #0
 80255b2:	bfab      	itete	ge
 80255b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80255b6:	89a3      	ldrhlt	r3, [r4, #12]
 80255b8:	181b      	addge	r3, r3, r0
 80255ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80255be:	bfac      	ite	ge
 80255c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80255c2:	81a3      	strhlt	r3, [r4, #12]
 80255c4:	bd10      	pop	{r4, pc}

080255c6 <__swrite>:
 80255c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255ca:	461f      	mov	r7, r3
 80255cc:	898b      	ldrh	r3, [r1, #12]
 80255ce:	05db      	lsls	r3, r3, #23
 80255d0:	4605      	mov	r5, r0
 80255d2:	460c      	mov	r4, r1
 80255d4:	4616      	mov	r6, r2
 80255d6:	d505      	bpl.n	80255e4 <__swrite+0x1e>
 80255d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255dc:	2302      	movs	r3, #2
 80255de:	2200      	movs	r2, #0
 80255e0:	f000 f840 	bl	8025664 <_lseek_r>
 80255e4:	89a3      	ldrh	r3, [r4, #12]
 80255e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80255ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80255ee:	81a3      	strh	r3, [r4, #12]
 80255f0:	4632      	mov	r2, r6
 80255f2:	463b      	mov	r3, r7
 80255f4:	4628      	mov	r0, r5
 80255f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80255fa:	f000 b857 	b.w	80256ac <_write_r>

080255fe <__sseek>:
 80255fe:	b510      	push	{r4, lr}
 8025600:	460c      	mov	r4, r1
 8025602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025606:	f000 f82d 	bl	8025664 <_lseek_r>
 802560a:	1c43      	adds	r3, r0, #1
 802560c:	89a3      	ldrh	r3, [r4, #12]
 802560e:	bf15      	itete	ne
 8025610:	6560      	strne	r0, [r4, #84]	; 0x54
 8025612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802561a:	81a3      	strheq	r3, [r4, #12]
 802561c:	bf18      	it	ne
 802561e:	81a3      	strhne	r3, [r4, #12]
 8025620:	bd10      	pop	{r4, pc}

08025622 <__sclose>:
 8025622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025626:	f000 b80d 	b.w	8025644 <_close_r>

0802562a <memset>:
 802562a:	4402      	add	r2, r0
 802562c:	4603      	mov	r3, r0
 802562e:	4293      	cmp	r3, r2
 8025630:	d100      	bne.n	8025634 <memset+0xa>
 8025632:	4770      	bx	lr
 8025634:	f803 1b01 	strb.w	r1, [r3], #1
 8025638:	e7f9      	b.n	802562e <memset+0x4>
	...

0802563c <_localeconv_r>:
 802563c:	4800      	ldr	r0, [pc, #0]	; (8025640 <_localeconv_r+0x4>)
 802563e:	4770      	bx	lr
 8025640:	200002ec 	.word	0x200002ec

08025644 <_close_r>:
 8025644:	b538      	push	{r3, r4, r5, lr}
 8025646:	4d06      	ldr	r5, [pc, #24]	; (8025660 <_close_r+0x1c>)
 8025648:	2300      	movs	r3, #0
 802564a:	4604      	mov	r4, r0
 802564c:	4608      	mov	r0, r1
 802564e:	602b      	str	r3, [r5, #0]
 8025650:	f7e1 f817 	bl	8006682 <_close>
 8025654:	1c43      	adds	r3, r0, #1
 8025656:	d102      	bne.n	802565e <_close_r+0x1a>
 8025658:	682b      	ldr	r3, [r5, #0]
 802565a:	b103      	cbz	r3, 802565e <_close_r+0x1a>
 802565c:	6023      	str	r3, [r4, #0]
 802565e:	bd38      	pop	{r3, r4, r5, pc}
 8025660:	20016a94 	.word	0x20016a94

08025664 <_lseek_r>:
 8025664:	b538      	push	{r3, r4, r5, lr}
 8025666:	4d07      	ldr	r5, [pc, #28]	; (8025684 <_lseek_r+0x20>)
 8025668:	4604      	mov	r4, r0
 802566a:	4608      	mov	r0, r1
 802566c:	4611      	mov	r1, r2
 802566e:	2200      	movs	r2, #0
 8025670:	602a      	str	r2, [r5, #0]
 8025672:	461a      	mov	r2, r3
 8025674:	f7e1 f82c 	bl	80066d0 <_lseek>
 8025678:	1c43      	adds	r3, r0, #1
 802567a:	d102      	bne.n	8025682 <_lseek_r+0x1e>
 802567c:	682b      	ldr	r3, [r5, #0]
 802567e:	b103      	cbz	r3, 8025682 <_lseek_r+0x1e>
 8025680:	6023      	str	r3, [r4, #0]
 8025682:	bd38      	pop	{r3, r4, r5, pc}
 8025684:	20016a94 	.word	0x20016a94

08025688 <_read_r>:
 8025688:	b538      	push	{r3, r4, r5, lr}
 802568a:	4d07      	ldr	r5, [pc, #28]	; (80256a8 <_read_r+0x20>)
 802568c:	4604      	mov	r4, r0
 802568e:	4608      	mov	r0, r1
 8025690:	4611      	mov	r1, r2
 8025692:	2200      	movs	r2, #0
 8025694:	602a      	str	r2, [r5, #0]
 8025696:	461a      	mov	r2, r3
 8025698:	f7e0 ffd6 	bl	8006648 <_read>
 802569c:	1c43      	adds	r3, r0, #1
 802569e:	d102      	bne.n	80256a6 <_read_r+0x1e>
 80256a0:	682b      	ldr	r3, [r5, #0]
 80256a2:	b103      	cbz	r3, 80256a6 <_read_r+0x1e>
 80256a4:	6023      	str	r3, [r4, #0]
 80256a6:	bd38      	pop	{r3, r4, r5, pc}
 80256a8:	20016a94 	.word	0x20016a94

080256ac <_write_r>:
 80256ac:	b538      	push	{r3, r4, r5, lr}
 80256ae:	4d07      	ldr	r5, [pc, #28]	; (80256cc <_write_r+0x20>)
 80256b0:	4604      	mov	r4, r0
 80256b2:	4608      	mov	r0, r1
 80256b4:	4611      	mov	r1, r2
 80256b6:	2200      	movs	r2, #0
 80256b8:	602a      	str	r2, [r5, #0]
 80256ba:	461a      	mov	r2, r3
 80256bc:	f7dc f99d 	bl	80019fa <_write>
 80256c0:	1c43      	adds	r3, r0, #1
 80256c2:	d102      	bne.n	80256ca <_write_r+0x1e>
 80256c4:	682b      	ldr	r3, [r5, #0]
 80256c6:	b103      	cbz	r3, 80256ca <_write_r+0x1e>
 80256c8:	6023      	str	r3, [r4, #0]
 80256ca:	bd38      	pop	{r3, r4, r5, pc}
 80256cc:	20016a94 	.word	0x20016a94

080256d0 <__errno>:
 80256d0:	4b01      	ldr	r3, [pc, #4]	; (80256d8 <__errno+0x8>)
 80256d2:	6818      	ldr	r0, [r3, #0]
 80256d4:	4770      	bx	lr
 80256d6:	bf00      	nop
 80256d8:	200001f8 	.word	0x200001f8

080256dc <__libc_init_array>:
 80256dc:	b570      	push	{r4, r5, r6, lr}
 80256de:	4d0d      	ldr	r5, [pc, #52]	; (8025714 <__libc_init_array+0x38>)
 80256e0:	4c0d      	ldr	r4, [pc, #52]	; (8025718 <__libc_init_array+0x3c>)
 80256e2:	1b64      	subs	r4, r4, r5
 80256e4:	10a4      	asrs	r4, r4, #2
 80256e6:	2600      	movs	r6, #0
 80256e8:	42a6      	cmp	r6, r4
 80256ea:	d109      	bne.n	8025700 <__libc_init_array+0x24>
 80256ec:	4d0b      	ldr	r5, [pc, #44]	; (802571c <__libc_init_array+0x40>)
 80256ee:	4c0c      	ldr	r4, [pc, #48]	; (8025720 <__libc_init_array+0x44>)
 80256f0:	f002 fda0 	bl	8028234 <_init>
 80256f4:	1b64      	subs	r4, r4, r5
 80256f6:	10a4      	asrs	r4, r4, #2
 80256f8:	2600      	movs	r6, #0
 80256fa:	42a6      	cmp	r6, r4
 80256fc:	d105      	bne.n	802570a <__libc_init_array+0x2e>
 80256fe:	bd70      	pop	{r4, r5, r6, pc}
 8025700:	f855 3b04 	ldr.w	r3, [r5], #4
 8025704:	4798      	blx	r3
 8025706:	3601      	adds	r6, #1
 8025708:	e7ee      	b.n	80256e8 <__libc_init_array+0xc>
 802570a:	f855 3b04 	ldr.w	r3, [r5], #4
 802570e:	4798      	blx	r3
 8025710:	3601      	adds	r6, #1
 8025712:	e7f2      	b.n	80256fa <__libc_init_array+0x1e>
 8025714:	0802b460 	.word	0x0802b460
 8025718:	0802b460 	.word	0x0802b460
 802571c:	0802b460 	.word	0x0802b460
 8025720:	0802b464 	.word	0x0802b464

08025724 <__retarget_lock_acquire_recursive>:
 8025724:	4770      	bx	lr

08025726 <__retarget_lock_release_recursive>:
 8025726:	4770      	bx	lr

08025728 <memcpy>:
 8025728:	440a      	add	r2, r1
 802572a:	4291      	cmp	r1, r2
 802572c:	f100 33ff 	add.w	r3, r0, #4294967295
 8025730:	d100      	bne.n	8025734 <memcpy+0xc>
 8025732:	4770      	bx	lr
 8025734:	b510      	push	{r4, lr}
 8025736:	f811 4b01 	ldrb.w	r4, [r1], #1
 802573a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802573e:	4291      	cmp	r1, r2
 8025740:	d1f9      	bne.n	8025736 <memcpy+0xe>
 8025742:	bd10      	pop	{r4, pc}

08025744 <abort>:
 8025744:	b508      	push	{r3, lr}
 8025746:	2006      	movs	r0, #6
 8025748:	f001 ff1e 	bl	8027588 <raise>
 802574c:	2001      	movs	r0, #1
 802574e:	f7e0 ff71 	bl	8006634 <_exit>

08025752 <quorem>:
 8025752:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025756:	6903      	ldr	r3, [r0, #16]
 8025758:	690c      	ldr	r4, [r1, #16]
 802575a:	42a3      	cmp	r3, r4
 802575c:	4607      	mov	r7, r0
 802575e:	db7e      	blt.n	802585e <quorem+0x10c>
 8025760:	3c01      	subs	r4, #1
 8025762:	f101 0814 	add.w	r8, r1, #20
 8025766:	f100 0514 	add.w	r5, r0, #20
 802576a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802576e:	9301      	str	r3, [sp, #4]
 8025770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025778:	3301      	adds	r3, #1
 802577a:	429a      	cmp	r2, r3
 802577c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025784:	fbb2 f6f3 	udiv	r6, r2, r3
 8025788:	d331      	bcc.n	80257ee <quorem+0x9c>
 802578a:	f04f 0e00 	mov.w	lr, #0
 802578e:	4640      	mov	r0, r8
 8025790:	46ac      	mov	ip, r5
 8025792:	46f2      	mov	sl, lr
 8025794:	f850 2b04 	ldr.w	r2, [r0], #4
 8025798:	b293      	uxth	r3, r2
 802579a:	fb06 e303 	mla	r3, r6, r3, lr
 802579e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80257a2:	0c1a      	lsrs	r2, r3, #16
 80257a4:	b29b      	uxth	r3, r3
 80257a6:	ebaa 0303 	sub.w	r3, sl, r3
 80257aa:	f8dc a000 	ldr.w	sl, [ip]
 80257ae:	fa13 f38a 	uxtah	r3, r3, sl
 80257b2:	fb06 220e 	mla	r2, r6, lr, r2
 80257b6:	9300      	str	r3, [sp, #0]
 80257b8:	9b00      	ldr	r3, [sp, #0]
 80257ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80257be:	b292      	uxth	r2, r2
 80257c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80257c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80257c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80257cc:	4581      	cmp	r9, r0
 80257ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80257d2:	f84c 3b04 	str.w	r3, [ip], #4
 80257d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80257da:	d2db      	bcs.n	8025794 <quorem+0x42>
 80257dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80257e0:	b92b      	cbnz	r3, 80257ee <quorem+0x9c>
 80257e2:	9b01      	ldr	r3, [sp, #4]
 80257e4:	3b04      	subs	r3, #4
 80257e6:	429d      	cmp	r5, r3
 80257e8:	461a      	mov	r2, r3
 80257ea:	d32c      	bcc.n	8025846 <quorem+0xf4>
 80257ec:	613c      	str	r4, [r7, #16]
 80257ee:	4638      	mov	r0, r7
 80257f0:	f001 f9a8 	bl	8026b44 <__mcmp>
 80257f4:	2800      	cmp	r0, #0
 80257f6:	db22      	blt.n	802583e <quorem+0xec>
 80257f8:	3601      	adds	r6, #1
 80257fa:	4629      	mov	r1, r5
 80257fc:	2000      	movs	r0, #0
 80257fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8025802:	f8d1 c000 	ldr.w	ip, [r1]
 8025806:	b293      	uxth	r3, r2
 8025808:	1ac3      	subs	r3, r0, r3
 802580a:	0c12      	lsrs	r2, r2, #16
 802580c:	fa13 f38c 	uxtah	r3, r3, ip
 8025810:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8025814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025818:	b29b      	uxth	r3, r3
 802581a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802581e:	45c1      	cmp	r9, r8
 8025820:	f841 3b04 	str.w	r3, [r1], #4
 8025824:	ea4f 4022 	mov.w	r0, r2, asr #16
 8025828:	d2e9      	bcs.n	80257fe <quorem+0xac>
 802582a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802582e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025832:	b922      	cbnz	r2, 802583e <quorem+0xec>
 8025834:	3b04      	subs	r3, #4
 8025836:	429d      	cmp	r5, r3
 8025838:	461a      	mov	r2, r3
 802583a:	d30a      	bcc.n	8025852 <quorem+0x100>
 802583c:	613c      	str	r4, [r7, #16]
 802583e:	4630      	mov	r0, r6
 8025840:	b003      	add	sp, #12
 8025842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025846:	6812      	ldr	r2, [r2, #0]
 8025848:	3b04      	subs	r3, #4
 802584a:	2a00      	cmp	r2, #0
 802584c:	d1ce      	bne.n	80257ec <quorem+0x9a>
 802584e:	3c01      	subs	r4, #1
 8025850:	e7c9      	b.n	80257e6 <quorem+0x94>
 8025852:	6812      	ldr	r2, [r2, #0]
 8025854:	3b04      	subs	r3, #4
 8025856:	2a00      	cmp	r2, #0
 8025858:	d1f0      	bne.n	802583c <quorem+0xea>
 802585a:	3c01      	subs	r4, #1
 802585c:	e7eb      	b.n	8025836 <quorem+0xe4>
 802585e:	2000      	movs	r0, #0
 8025860:	e7ee      	b.n	8025840 <quorem+0xee>
 8025862:	0000      	movs	r0, r0
 8025864:	0000      	movs	r0, r0
	...

08025868 <_dtoa_r>:
 8025868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802586c:	ed2d 8b04 	vpush	{d8-d9}
 8025870:	69c5      	ldr	r5, [r0, #28]
 8025872:	b093      	sub	sp, #76	; 0x4c
 8025874:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025878:	ec57 6b10 	vmov	r6, r7, d0
 802587c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025880:	9107      	str	r1, [sp, #28]
 8025882:	4604      	mov	r4, r0
 8025884:	920a      	str	r2, [sp, #40]	; 0x28
 8025886:	930d      	str	r3, [sp, #52]	; 0x34
 8025888:	b975      	cbnz	r5, 80258a8 <_dtoa_r+0x40>
 802588a:	2010      	movs	r0, #16
 802588c:	f000 fe2a 	bl	80264e4 <malloc>
 8025890:	4602      	mov	r2, r0
 8025892:	61e0      	str	r0, [r4, #28]
 8025894:	b920      	cbnz	r0, 80258a0 <_dtoa_r+0x38>
 8025896:	4bae      	ldr	r3, [pc, #696]	; (8025b50 <_dtoa_r+0x2e8>)
 8025898:	21ef      	movs	r1, #239	; 0xef
 802589a:	48ae      	ldr	r0, [pc, #696]	; (8025b54 <_dtoa_r+0x2ec>)
 802589c:	f7ff f91c 	bl	8024ad8 <__assert_func>
 80258a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80258a4:	6005      	str	r5, [r0, #0]
 80258a6:	60c5      	str	r5, [r0, #12]
 80258a8:	69e3      	ldr	r3, [r4, #28]
 80258aa:	6819      	ldr	r1, [r3, #0]
 80258ac:	b151      	cbz	r1, 80258c4 <_dtoa_r+0x5c>
 80258ae:	685a      	ldr	r2, [r3, #4]
 80258b0:	604a      	str	r2, [r1, #4]
 80258b2:	2301      	movs	r3, #1
 80258b4:	4093      	lsls	r3, r2
 80258b6:	608b      	str	r3, [r1, #8]
 80258b8:	4620      	mov	r0, r4
 80258ba:	f000 ff07 	bl	80266cc <_Bfree>
 80258be:	69e3      	ldr	r3, [r4, #28]
 80258c0:	2200      	movs	r2, #0
 80258c2:	601a      	str	r2, [r3, #0]
 80258c4:	1e3b      	subs	r3, r7, #0
 80258c6:	bfbb      	ittet	lt
 80258c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80258cc:	9303      	strlt	r3, [sp, #12]
 80258ce:	2300      	movge	r3, #0
 80258d0:	2201      	movlt	r2, #1
 80258d2:	bfac      	ite	ge
 80258d4:	f8c8 3000 	strge.w	r3, [r8]
 80258d8:	f8c8 2000 	strlt.w	r2, [r8]
 80258dc:	4b9e      	ldr	r3, [pc, #632]	; (8025b58 <_dtoa_r+0x2f0>)
 80258de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80258e2:	ea33 0308 	bics.w	r3, r3, r8
 80258e6:	d11b      	bne.n	8025920 <_dtoa_r+0xb8>
 80258e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80258ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80258ee:	6013      	str	r3, [r2, #0]
 80258f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80258f4:	4333      	orrs	r3, r6
 80258f6:	f000 8593 	beq.w	8026420 <_dtoa_r+0xbb8>
 80258fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80258fc:	b963      	cbnz	r3, 8025918 <_dtoa_r+0xb0>
 80258fe:	4b97      	ldr	r3, [pc, #604]	; (8025b5c <_dtoa_r+0x2f4>)
 8025900:	e027      	b.n	8025952 <_dtoa_r+0xea>
 8025902:	4b97      	ldr	r3, [pc, #604]	; (8025b60 <_dtoa_r+0x2f8>)
 8025904:	9300      	str	r3, [sp, #0]
 8025906:	3308      	adds	r3, #8
 8025908:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802590a:	6013      	str	r3, [r2, #0]
 802590c:	9800      	ldr	r0, [sp, #0]
 802590e:	b013      	add	sp, #76	; 0x4c
 8025910:	ecbd 8b04 	vpop	{d8-d9}
 8025914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025918:	4b90      	ldr	r3, [pc, #576]	; (8025b5c <_dtoa_r+0x2f4>)
 802591a:	9300      	str	r3, [sp, #0]
 802591c:	3303      	adds	r3, #3
 802591e:	e7f3      	b.n	8025908 <_dtoa_r+0xa0>
 8025920:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025924:	2200      	movs	r2, #0
 8025926:	ec51 0b17 	vmov	r0, r1, d7
 802592a:	eeb0 8a47 	vmov.f32	s16, s14
 802592e:	eef0 8a67 	vmov.f32	s17, s15
 8025932:	2300      	movs	r3, #0
 8025934:	f7db f8f0 	bl	8000b18 <__aeabi_dcmpeq>
 8025938:	4681      	mov	r9, r0
 802593a:	b160      	cbz	r0, 8025956 <_dtoa_r+0xee>
 802593c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802593e:	2301      	movs	r3, #1
 8025940:	6013      	str	r3, [r2, #0]
 8025942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025944:	2b00      	cmp	r3, #0
 8025946:	f000 8568 	beq.w	802641a <_dtoa_r+0xbb2>
 802594a:	4b86      	ldr	r3, [pc, #536]	; (8025b64 <_dtoa_r+0x2fc>)
 802594c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802594e:	6013      	str	r3, [r2, #0]
 8025950:	3b01      	subs	r3, #1
 8025952:	9300      	str	r3, [sp, #0]
 8025954:	e7da      	b.n	802590c <_dtoa_r+0xa4>
 8025956:	aa10      	add	r2, sp, #64	; 0x40
 8025958:	a911      	add	r1, sp, #68	; 0x44
 802595a:	4620      	mov	r0, r4
 802595c:	eeb0 0a48 	vmov.f32	s0, s16
 8025960:	eef0 0a68 	vmov.f32	s1, s17
 8025964:	f001 f994 	bl	8026c90 <__d2b>
 8025968:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802596c:	4682      	mov	sl, r0
 802596e:	2d00      	cmp	r5, #0
 8025970:	d07f      	beq.n	8025a72 <_dtoa_r+0x20a>
 8025972:	ee18 3a90 	vmov	r3, s17
 8025976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802597a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802597e:	ec51 0b18 	vmov	r0, r1, d8
 8025982:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8025986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802598a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802598e:	4619      	mov	r1, r3
 8025990:	2200      	movs	r2, #0
 8025992:	4b75      	ldr	r3, [pc, #468]	; (8025b68 <_dtoa_r+0x300>)
 8025994:	f7da fca0 	bl	80002d8 <__aeabi_dsub>
 8025998:	a367      	add	r3, pc, #412	; (adr r3, 8025b38 <_dtoa_r+0x2d0>)
 802599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802599e:	f7da fe53 	bl	8000648 <__aeabi_dmul>
 80259a2:	a367      	add	r3, pc, #412	; (adr r3, 8025b40 <_dtoa_r+0x2d8>)
 80259a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259a8:	f7da fc98 	bl	80002dc <__adddf3>
 80259ac:	4606      	mov	r6, r0
 80259ae:	4628      	mov	r0, r5
 80259b0:	460f      	mov	r7, r1
 80259b2:	f7da fddf 	bl	8000574 <__aeabi_i2d>
 80259b6:	a364      	add	r3, pc, #400	; (adr r3, 8025b48 <_dtoa_r+0x2e0>)
 80259b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259bc:	f7da fe44 	bl	8000648 <__aeabi_dmul>
 80259c0:	4602      	mov	r2, r0
 80259c2:	460b      	mov	r3, r1
 80259c4:	4630      	mov	r0, r6
 80259c6:	4639      	mov	r1, r7
 80259c8:	f7da fc88 	bl	80002dc <__adddf3>
 80259cc:	4606      	mov	r6, r0
 80259ce:	460f      	mov	r7, r1
 80259d0:	f7db f8ea 	bl	8000ba8 <__aeabi_d2iz>
 80259d4:	2200      	movs	r2, #0
 80259d6:	4683      	mov	fp, r0
 80259d8:	2300      	movs	r3, #0
 80259da:	4630      	mov	r0, r6
 80259dc:	4639      	mov	r1, r7
 80259de:	f7db f8a5 	bl	8000b2c <__aeabi_dcmplt>
 80259e2:	b148      	cbz	r0, 80259f8 <_dtoa_r+0x190>
 80259e4:	4658      	mov	r0, fp
 80259e6:	f7da fdc5 	bl	8000574 <__aeabi_i2d>
 80259ea:	4632      	mov	r2, r6
 80259ec:	463b      	mov	r3, r7
 80259ee:	f7db f893 	bl	8000b18 <__aeabi_dcmpeq>
 80259f2:	b908      	cbnz	r0, 80259f8 <_dtoa_r+0x190>
 80259f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80259f8:	f1bb 0f16 	cmp.w	fp, #22
 80259fc:	d857      	bhi.n	8025aae <_dtoa_r+0x246>
 80259fe:	4b5b      	ldr	r3, [pc, #364]	; (8025b6c <_dtoa_r+0x304>)
 8025a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a08:	ec51 0b18 	vmov	r0, r1, d8
 8025a0c:	f7db f88e 	bl	8000b2c <__aeabi_dcmplt>
 8025a10:	2800      	cmp	r0, #0
 8025a12:	d04e      	beq.n	8025ab2 <_dtoa_r+0x24a>
 8025a14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025a18:	2300      	movs	r3, #0
 8025a1a:	930c      	str	r3, [sp, #48]	; 0x30
 8025a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025a1e:	1b5b      	subs	r3, r3, r5
 8025a20:	1e5a      	subs	r2, r3, #1
 8025a22:	bf45      	ittet	mi
 8025a24:	f1c3 0301 	rsbmi	r3, r3, #1
 8025a28:	9305      	strmi	r3, [sp, #20]
 8025a2a:	2300      	movpl	r3, #0
 8025a2c:	2300      	movmi	r3, #0
 8025a2e:	9206      	str	r2, [sp, #24]
 8025a30:	bf54      	ite	pl
 8025a32:	9305      	strpl	r3, [sp, #20]
 8025a34:	9306      	strmi	r3, [sp, #24]
 8025a36:	f1bb 0f00 	cmp.w	fp, #0
 8025a3a:	db3c      	blt.n	8025ab6 <_dtoa_r+0x24e>
 8025a3c:	9b06      	ldr	r3, [sp, #24]
 8025a3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8025a42:	445b      	add	r3, fp
 8025a44:	9306      	str	r3, [sp, #24]
 8025a46:	2300      	movs	r3, #0
 8025a48:	9308      	str	r3, [sp, #32]
 8025a4a:	9b07      	ldr	r3, [sp, #28]
 8025a4c:	2b09      	cmp	r3, #9
 8025a4e:	d868      	bhi.n	8025b22 <_dtoa_r+0x2ba>
 8025a50:	2b05      	cmp	r3, #5
 8025a52:	bfc4      	itt	gt
 8025a54:	3b04      	subgt	r3, #4
 8025a56:	9307      	strgt	r3, [sp, #28]
 8025a58:	9b07      	ldr	r3, [sp, #28]
 8025a5a:	f1a3 0302 	sub.w	r3, r3, #2
 8025a5e:	bfcc      	ite	gt
 8025a60:	2500      	movgt	r5, #0
 8025a62:	2501      	movle	r5, #1
 8025a64:	2b03      	cmp	r3, #3
 8025a66:	f200 8085 	bhi.w	8025b74 <_dtoa_r+0x30c>
 8025a6a:	e8df f003 	tbb	[pc, r3]
 8025a6e:	3b2e      	.short	0x3b2e
 8025a70:	5839      	.short	0x5839
 8025a72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8025a76:	441d      	add	r5, r3
 8025a78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8025a7c:	2b20      	cmp	r3, #32
 8025a7e:	bfc1      	itttt	gt
 8025a80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025a84:	fa08 f803 	lslgt.w	r8, r8, r3
 8025a88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8025a8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8025a90:	bfd6      	itet	le
 8025a92:	f1c3 0320 	rsble	r3, r3, #32
 8025a96:	ea48 0003 	orrgt.w	r0, r8, r3
 8025a9a:	fa06 f003 	lslle.w	r0, r6, r3
 8025a9e:	f7da fd59 	bl	8000554 <__aeabi_ui2d>
 8025aa2:	2201      	movs	r2, #1
 8025aa4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8025aa8:	3d01      	subs	r5, #1
 8025aaa:	920e      	str	r2, [sp, #56]	; 0x38
 8025aac:	e76f      	b.n	802598e <_dtoa_r+0x126>
 8025aae:	2301      	movs	r3, #1
 8025ab0:	e7b3      	b.n	8025a1a <_dtoa_r+0x1b2>
 8025ab2:	900c      	str	r0, [sp, #48]	; 0x30
 8025ab4:	e7b2      	b.n	8025a1c <_dtoa_r+0x1b4>
 8025ab6:	9b05      	ldr	r3, [sp, #20]
 8025ab8:	eba3 030b 	sub.w	r3, r3, fp
 8025abc:	9305      	str	r3, [sp, #20]
 8025abe:	f1cb 0300 	rsb	r3, fp, #0
 8025ac2:	9308      	str	r3, [sp, #32]
 8025ac4:	2300      	movs	r3, #0
 8025ac6:	930b      	str	r3, [sp, #44]	; 0x2c
 8025ac8:	e7bf      	b.n	8025a4a <_dtoa_r+0x1e2>
 8025aca:	2300      	movs	r3, #0
 8025acc:	9309      	str	r3, [sp, #36]	; 0x24
 8025ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ad0:	2b00      	cmp	r3, #0
 8025ad2:	dc52      	bgt.n	8025b7a <_dtoa_r+0x312>
 8025ad4:	2301      	movs	r3, #1
 8025ad6:	9301      	str	r3, [sp, #4]
 8025ad8:	9304      	str	r3, [sp, #16]
 8025ada:	461a      	mov	r2, r3
 8025adc:	920a      	str	r2, [sp, #40]	; 0x28
 8025ade:	e00b      	b.n	8025af8 <_dtoa_r+0x290>
 8025ae0:	2301      	movs	r3, #1
 8025ae2:	e7f3      	b.n	8025acc <_dtoa_r+0x264>
 8025ae4:	2300      	movs	r3, #0
 8025ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8025ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025aea:	445b      	add	r3, fp
 8025aec:	9301      	str	r3, [sp, #4]
 8025aee:	3301      	adds	r3, #1
 8025af0:	2b01      	cmp	r3, #1
 8025af2:	9304      	str	r3, [sp, #16]
 8025af4:	bfb8      	it	lt
 8025af6:	2301      	movlt	r3, #1
 8025af8:	69e0      	ldr	r0, [r4, #28]
 8025afa:	2100      	movs	r1, #0
 8025afc:	2204      	movs	r2, #4
 8025afe:	f102 0614 	add.w	r6, r2, #20
 8025b02:	429e      	cmp	r6, r3
 8025b04:	d93d      	bls.n	8025b82 <_dtoa_r+0x31a>
 8025b06:	6041      	str	r1, [r0, #4]
 8025b08:	4620      	mov	r0, r4
 8025b0a:	f000 fd9f 	bl	802664c <_Balloc>
 8025b0e:	9000      	str	r0, [sp, #0]
 8025b10:	2800      	cmp	r0, #0
 8025b12:	d139      	bne.n	8025b88 <_dtoa_r+0x320>
 8025b14:	4b16      	ldr	r3, [pc, #88]	; (8025b70 <_dtoa_r+0x308>)
 8025b16:	4602      	mov	r2, r0
 8025b18:	f240 11af 	movw	r1, #431	; 0x1af
 8025b1c:	e6bd      	b.n	802589a <_dtoa_r+0x32>
 8025b1e:	2301      	movs	r3, #1
 8025b20:	e7e1      	b.n	8025ae6 <_dtoa_r+0x27e>
 8025b22:	2501      	movs	r5, #1
 8025b24:	2300      	movs	r3, #0
 8025b26:	9307      	str	r3, [sp, #28]
 8025b28:	9509      	str	r5, [sp, #36]	; 0x24
 8025b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8025b2e:	9301      	str	r3, [sp, #4]
 8025b30:	9304      	str	r3, [sp, #16]
 8025b32:	2200      	movs	r2, #0
 8025b34:	2312      	movs	r3, #18
 8025b36:	e7d1      	b.n	8025adc <_dtoa_r+0x274>
 8025b38:	636f4361 	.word	0x636f4361
 8025b3c:	3fd287a7 	.word	0x3fd287a7
 8025b40:	8b60c8b3 	.word	0x8b60c8b3
 8025b44:	3fc68a28 	.word	0x3fc68a28
 8025b48:	509f79fb 	.word	0x509f79fb
 8025b4c:	3fd34413 	.word	0x3fd34413
 8025b50:	0802ad98 	.word	0x0802ad98
 8025b54:	0802adaf 	.word	0x0802adaf
 8025b58:	7ff00000 	.word	0x7ff00000
 8025b5c:	0802ad94 	.word	0x0802ad94
 8025b60:	0802ad8b 	.word	0x0802ad8b
 8025b64:	0802ad68 	.word	0x0802ad68
 8025b68:	3ff80000 	.word	0x3ff80000
 8025b6c:	0802aea0 	.word	0x0802aea0
 8025b70:	0802ae07 	.word	0x0802ae07
 8025b74:	2301      	movs	r3, #1
 8025b76:	9309      	str	r3, [sp, #36]	; 0x24
 8025b78:	e7d7      	b.n	8025b2a <_dtoa_r+0x2c2>
 8025b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b7c:	9301      	str	r3, [sp, #4]
 8025b7e:	9304      	str	r3, [sp, #16]
 8025b80:	e7ba      	b.n	8025af8 <_dtoa_r+0x290>
 8025b82:	3101      	adds	r1, #1
 8025b84:	0052      	lsls	r2, r2, #1
 8025b86:	e7ba      	b.n	8025afe <_dtoa_r+0x296>
 8025b88:	69e3      	ldr	r3, [r4, #28]
 8025b8a:	9a00      	ldr	r2, [sp, #0]
 8025b8c:	601a      	str	r2, [r3, #0]
 8025b8e:	9b04      	ldr	r3, [sp, #16]
 8025b90:	2b0e      	cmp	r3, #14
 8025b92:	f200 80a8 	bhi.w	8025ce6 <_dtoa_r+0x47e>
 8025b96:	2d00      	cmp	r5, #0
 8025b98:	f000 80a5 	beq.w	8025ce6 <_dtoa_r+0x47e>
 8025b9c:	f1bb 0f00 	cmp.w	fp, #0
 8025ba0:	dd38      	ble.n	8025c14 <_dtoa_r+0x3ac>
 8025ba2:	4bc0      	ldr	r3, [pc, #768]	; (8025ea4 <_dtoa_r+0x63c>)
 8025ba4:	f00b 020f 	and.w	r2, fp, #15
 8025ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025bac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8025bb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8025bb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8025bb8:	d019      	beq.n	8025bee <_dtoa_r+0x386>
 8025bba:	4bbb      	ldr	r3, [pc, #748]	; (8025ea8 <_dtoa_r+0x640>)
 8025bbc:	ec51 0b18 	vmov	r0, r1, d8
 8025bc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025bc4:	f7da fe6a 	bl	800089c <__aeabi_ddiv>
 8025bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025bcc:	f008 080f 	and.w	r8, r8, #15
 8025bd0:	2503      	movs	r5, #3
 8025bd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8025ea8 <_dtoa_r+0x640>
 8025bd6:	f1b8 0f00 	cmp.w	r8, #0
 8025bda:	d10a      	bne.n	8025bf2 <_dtoa_r+0x38a>
 8025bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025be0:	4632      	mov	r2, r6
 8025be2:	463b      	mov	r3, r7
 8025be4:	f7da fe5a 	bl	800089c <__aeabi_ddiv>
 8025be8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025bec:	e02b      	b.n	8025c46 <_dtoa_r+0x3de>
 8025bee:	2502      	movs	r5, #2
 8025bf0:	e7ef      	b.n	8025bd2 <_dtoa_r+0x36a>
 8025bf2:	f018 0f01 	tst.w	r8, #1
 8025bf6:	d008      	beq.n	8025c0a <_dtoa_r+0x3a2>
 8025bf8:	4630      	mov	r0, r6
 8025bfa:	4639      	mov	r1, r7
 8025bfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8025c00:	f7da fd22 	bl	8000648 <__aeabi_dmul>
 8025c04:	3501      	adds	r5, #1
 8025c06:	4606      	mov	r6, r0
 8025c08:	460f      	mov	r7, r1
 8025c0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8025c0e:	f109 0908 	add.w	r9, r9, #8
 8025c12:	e7e0      	b.n	8025bd6 <_dtoa_r+0x36e>
 8025c14:	f000 809f 	beq.w	8025d56 <_dtoa_r+0x4ee>
 8025c18:	f1cb 0600 	rsb	r6, fp, #0
 8025c1c:	4ba1      	ldr	r3, [pc, #644]	; (8025ea4 <_dtoa_r+0x63c>)
 8025c1e:	4fa2      	ldr	r7, [pc, #648]	; (8025ea8 <_dtoa_r+0x640>)
 8025c20:	f006 020f 	and.w	r2, r6, #15
 8025c24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c2c:	ec51 0b18 	vmov	r0, r1, d8
 8025c30:	f7da fd0a 	bl	8000648 <__aeabi_dmul>
 8025c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025c38:	1136      	asrs	r6, r6, #4
 8025c3a:	2300      	movs	r3, #0
 8025c3c:	2502      	movs	r5, #2
 8025c3e:	2e00      	cmp	r6, #0
 8025c40:	d17e      	bne.n	8025d40 <_dtoa_r+0x4d8>
 8025c42:	2b00      	cmp	r3, #0
 8025c44:	d1d0      	bne.n	8025be8 <_dtoa_r+0x380>
 8025c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8025c4c:	2b00      	cmp	r3, #0
 8025c4e:	f000 8084 	beq.w	8025d5a <_dtoa_r+0x4f2>
 8025c52:	4b96      	ldr	r3, [pc, #600]	; (8025eac <_dtoa_r+0x644>)
 8025c54:	2200      	movs	r2, #0
 8025c56:	4640      	mov	r0, r8
 8025c58:	4649      	mov	r1, r9
 8025c5a:	f7da ff67 	bl	8000b2c <__aeabi_dcmplt>
 8025c5e:	2800      	cmp	r0, #0
 8025c60:	d07b      	beq.n	8025d5a <_dtoa_r+0x4f2>
 8025c62:	9b04      	ldr	r3, [sp, #16]
 8025c64:	2b00      	cmp	r3, #0
 8025c66:	d078      	beq.n	8025d5a <_dtoa_r+0x4f2>
 8025c68:	9b01      	ldr	r3, [sp, #4]
 8025c6a:	2b00      	cmp	r3, #0
 8025c6c:	dd39      	ble.n	8025ce2 <_dtoa_r+0x47a>
 8025c6e:	4b90      	ldr	r3, [pc, #576]	; (8025eb0 <_dtoa_r+0x648>)
 8025c70:	2200      	movs	r2, #0
 8025c72:	4640      	mov	r0, r8
 8025c74:	4649      	mov	r1, r9
 8025c76:	f7da fce7 	bl	8000648 <__aeabi_dmul>
 8025c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025c7e:	9e01      	ldr	r6, [sp, #4]
 8025c80:	f10b 37ff 	add.w	r7, fp, #4294967295
 8025c84:	3501      	adds	r5, #1
 8025c86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8025c8a:	4628      	mov	r0, r5
 8025c8c:	f7da fc72 	bl	8000574 <__aeabi_i2d>
 8025c90:	4642      	mov	r2, r8
 8025c92:	464b      	mov	r3, r9
 8025c94:	f7da fcd8 	bl	8000648 <__aeabi_dmul>
 8025c98:	4b86      	ldr	r3, [pc, #536]	; (8025eb4 <_dtoa_r+0x64c>)
 8025c9a:	2200      	movs	r2, #0
 8025c9c:	f7da fb1e 	bl	80002dc <__adddf3>
 8025ca0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8025ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ca8:	9303      	str	r3, [sp, #12]
 8025caa:	2e00      	cmp	r6, #0
 8025cac:	d158      	bne.n	8025d60 <_dtoa_r+0x4f8>
 8025cae:	4b82      	ldr	r3, [pc, #520]	; (8025eb8 <_dtoa_r+0x650>)
 8025cb0:	2200      	movs	r2, #0
 8025cb2:	4640      	mov	r0, r8
 8025cb4:	4649      	mov	r1, r9
 8025cb6:	f7da fb0f 	bl	80002d8 <__aeabi_dsub>
 8025cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025cbe:	4680      	mov	r8, r0
 8025cc0:	4689      	mov	r9, r1
 8025cc2:	f7da ff51 	bl	8000b68 <__aeabi_dcmpgt>
 8025cc6:	2800      	cmp	r0, #0
 8025cc8:	f040 8296 	bne.w	80261f8 <_dtoa_r+0x990>
 8025ccc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8025cd0:	4640      	mov	r0, r8
 8025cd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025cd6:	4649      	mov	r1, r9
 8025cd8:	f7da ff28 	bl	8000b2c <__aeabi_dcmplt>
 8025cdc:	2800      	cmp	r0, #0
 8025cde:	f040 8289 	bne.w	80261f4 <_dtoa_r+0x98c>
 8025ce2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8025ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025ce8:	2b00      	cmp	r3, #0
 8025cea:	f2c0 814e 	blt.w	8025f8a <_dtoa_r+0x722>
 8025cee:	f1bb 0f0e 	cmp.w	fp, #14
 8025cf2:	f300 814a 	bgt.w	8025f8a <_dtoa_r+0x722>
 8025cf6:	4b6b      	ldr	r3, [pc, #428]	; (8025ea4 <_dtoa_r+0x63c>)
 8025cf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d02:	2b00      	cmp	r3, #0
 8025d04:	f280 80dc 	bge.w	8025ec0 <_dtoa_r+0x658>
 8025d08:	9b04      	ldr	r3, [sp, #16]
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	f300 80d8 	bgt.w	8025ec0 <_dtoa_r+0x658>
 8025d10:	f040 826f 	bne.w	80261f2 <_dtoa_r+0x98a>
 8025d14:	4b68      	ldr	r3, [pc, #416]	; (8025eb8 <_dtoa_r+0x650>)
 8025d16:	2200      	movs	r2, #0
 8025d18:	4640      	mov	r0, r8
 8025d1a:	4649      	mov	r1, r9
 8025d1c:	f7da fc94 	bl	8000648 <__aeabi_dmul>
 8025d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025d24:	f7da ff16 	bl	8000b54 <__aeabi_dcmpge>
 8025d28:	9e04      	ldr	r6, [sp, #16]
 8025d2a:	4637      	mov	r7, r6
 8025d2c:	2800      	cmp	r0, #0
 8025d2e:	f040 8245 	bne.w	80261bc <_dtoa_r+0x954>
 8025d32:	9d00      	ldr	r5, [sp, #0]
 8025d34:	2331      	movs	r3, #49	; 0x31
 8025d36:	f805 3b01 	strb.w	r3, [r5], #1
 8025d3a:	f10b 0b01 	add.w	fp, fp, #1
 8025d3e:	e241      	b.n	80261c4 <_dtoa_r+0x95c>
 8025d40:	07f2      	lsls	r2, r6, #31
 8025d42:	d505      	bpl.n	8025d50 <_dtoa_r+0x4e8>
 8025d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025d48:	f7da fc7e 	bl	8000648 <__aeabi_dmul>
 8025d4c:	3501      	adds	r5, #1
 8025d4e:	2301      	movs	r3, #1
 8025d50:	1076      	asrs	r6, r6, #1
 8025d52:	3708      	adds	r7, #8
 8025d54:	e773      	b.n	8025c3e <_dtoa_r+0x3d6>
 8025d56:	2502      	movs	r5, #2
 8025d58:	e775      	b.n	8025c46 <_dtoa_r+0x3de>
 8025d5a:	9e04      	ldr	r6, [sp, #16]
 8025d5c:	465f      	mov	r7, fp
 8025d5e:	e792      	b.n	8025c86 <_dtoa_r+0x41e>
 8025d60:	9900      	ldr	r1, [sp, #0]
 8025d62:	4b50      	ldr	r3, [pc, #320]	; (8025ea4 <_dtoa_r+0x63c>)
 8025d64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025d68:	4431      	add	r1, r6
 8025d6a:	9102      	str	r1, [sp, #8]
 8025d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025d6e:	eeb0 9a47 	vmov.f32	s18, s14
 8025d72:	eef0 9a67 	vmov.f32	s19, s15
 8025d76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025d7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025d7e:	2900      	cmp	r1, #0
 8025d80:	d044      	beq.n	8025e0c <_dtoa_r+0x5a4>
 8025d82:	494e      	ldr	r1, [pc, #312]	; (8025ebc <_dtoa_r+0x654>)
 8025d84:	2000      	movs	r0, #0
 8025d86:	f7da fd89 	bl	800089c <__aeabi_ddiv>
 8025d8a:	ec53 2b19 	vmov	r2, r3, d9
 8025d8e:	f7da faa3 	bl	80002d8 <__aeabi_dsub>
 8025d92:	9d00      	ldr	r5, [sp, #0]
 8025d94:	ec41 0b19 	vmov	d9, r0, r1
 8025d98:	4649      	mov	r1, r9
 8025d9a:	4640      	mov	r0, r8
 8025d9c:	f7da ff04 	bl	8000ba8 <__aeabi_d2iz>
 8025da0:	4606      	mov	r6, r0
 8025da2:	f7da fbe7 	bl	8000574 <__aeabi_i2d>
 8025da6:	4602      	mov	r2, r0
 8025da8:	460b      	mov	r3, r1
 8025daa:	4640      	mov	r0, r8
 8025dac:	4649      	mov	r1, r9
 8025dae:	f7da fa93 	bl	80002d8 <__aeabi_dsub>
 8025db2:	3630      	adds	r6, #48	; 0x30
 8025db4:	f805 6b01 	strb.w	r6, [r5], #1
 8025db8:	ec53 2b19 	vmov	r2, r3, d9
 8025dbc:	4680      	mov	r8, r0
 8025dbe:	4689      	mov	r9, r1
 8025dc0:	f7da feb4 	bl	8000b2c <__aeabi_dcmplt>
 8025dc4:	2800      	cmp	r0, #0
 8025dc6:	d164      	bne.n	8025e92 <_dtoa_r+0x62a>
 8025dc8:	4642      	mov	r2, r8
 8025dca:	464b      	mov	r3, r9
 8025dcc:	4937      	ldr	r1, [pc, #220]	; (8025eac <_dtoa_r+0x644>)
 8025dce:	2000      	movs	r0, #0
 8025dd0:	f7da fa82 	bl	80002d8 <__aeabi_dsub>
 8025dd4:	ec53 2b19 	vmov	r2, r3, d9
 8025dd8:	f7da fea8 	bl	8000b2c <__aeabi_dcmplt>
 8025ddc:	2800      	cmp	r0, #0
 8025dde:	f040 80b6 	bne.w	8025f4e <_dtoa_r+0x6e6>
 8025de2:	9b02      	ldr	r3, [sp, #8]
 8025de4:	429d      	cmp	r5, r3
 8025de6:	f43f af7c 	beq.w	8025ce2 <_dtoa_r+0x47a>
 8025dea:	4b31      	ldr	r3, [pc, #196]	; (8025eb0 <_dtoa_r+0x648>)
 8025dec:	ec51 0b19 	vmov	r0, r1, d9
 8025df0:	2200      	movs	r2, #0
 8025df2:	f7da fc29 	bl	8000648 <__aeabi_dmul>
 8025df6:	4b2e      	ldr	r3, [pc, #184]	; (8025eb0 <_dtoa_r+0x648>)
 8025df8:	ec41 0b19 	vmov	d9, r0, r1
 8025dfc:	2200      	movs	r2, #0
 8025dfe:	4640      	mov	r0, r8
 8025e00:	4649      	mov	r1, r9
 8025e02:	f7da fc21 	bl	8000648 <__aeabi_dmul>
 8025e06:	4680      	mov	r8, r0
 8025e08:	4689      	mov	r9, r1
 8025e0a:	e7c5      	b.n	8025d98 <_dtoa_r+0x530>
 8025e0c:	ec51 0b17 	vmov	r0, r1, d7
 8025e10:	f7da fc1a 	bl	8000648 <__aeabi_dmul>
 8025e14:	9b02      	ldr	r3, [sp, #8]
 8025e16:	9d00      	ldr	r5, [sp, #0]
 8025e18:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e1a:	ec41 0b19 	vmov	d9, r0, r1
 8025e1e:	4649      	mov	r1, r9
 8025e20:	4640      	mov	r0, r8
 8025e22:	f7da fec1 	bl	8000ba8 <__aeabi_d2iz>
 8025e26:	4606      	mov	r6, r0
 8025e28:	f7da fba4 	bl	8000574 <__aeabi_i2d>
 8025e2c:	3630      	adds	r6, #48	; 0x30
 8025e2e:	4602      	mov	r2, r0
 8025e30:	460b      	mov	r3, r1
 8025e32:	4640      	mov	r0, r8
 8025e34:	4649      	mov	r1, r9
 8025e36:	f7da fa4f 	bl	80002d8 <__aeabi_dsub>
 8025e3a:	f805 6b01 	strb.w	r6, [r5], #1
 8025e3e:	9b02      	ldr	r3, [sp, #8]
 8025e40:	429d      	cmp	r5, r3
 8025e42:	4680      	mov	r8, r0
 8025e44:	4689      	mov	r9, r1
 8025e46:	f04f 0200 	mov.w	r2, #0
 8025e4a:	d124      	bne.n	8025e96 <_dtoa_r+0x62e>
 8025e4c:	4b1b      	ldr	r3, [pc, #108]	; (8025ebc <_dtoa_r+0x654>)
 8025e4e:	ec51 0b19 	vmov	r0, r1, d9
 8025e52:	f7da fa43 	bl	80002dc <__adddf3>
 8025e56:	4602      	mov	r2, r0
 8025e58:	460b      	mov	r3, r1
 8025e5a:	4640      	mov	r0, r8
 8025e5c:	4649      	mov	r1, r9
 8025e5e:	f7da fe83 	bl	8000b68 <__aeabi_dcmpgt>
 8025e62:	2800      	cmp	r0, #0
 8025e64:	d173      	bne.n	8025f4e <_dtoa_r+0x6e6>
 8025e66:	ec53 2b19 	vmov	r2, r3, d9
 8025e6a:	4914      	ldr	r1, [pc, #80]	; (8025ebc <_dtoa_r+0x654>)
 8025e6c:	2000      	movs	r0, #0
 8025e6e:	f7da fa33 	bl	80002d8 <__aeabi_dsub>
 8025e72:	4602      	mov	r2, r0
 8025e74:	460b      	mov	r3, r1
 8025e76:	4640      	mov	r0, r8
 8025e78:	4649      	mov	r1, r9
 8025e7a:	f7da fe57 	bl	8000b2c <__aeabi_dcmplt>
 8025e7e:	2800      	cmp	r0, #0
 8025e80:	f43f af2f 	beq.w	8025ce2 <_dtoa_r+0x47a>
 8025e84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025e86:	1e6b      	subs	r3, r5, #1
 8025e88:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025e8e:	2b30      	cmp	r3, #48	; 0x30
 8025e90:	d0f8      	beq.n	8025e84 <_dtoa_r+0x61c>
 8025e92:	46bb      	mov	fp, r7
 8025e94:	e04a      	b.n	8025f2c <_dtoa_r+0x6c4>
 8025e96:	4b06      	ldr	r3, [pc, #24]	; (8025eb0 <_dtoa_r+0x648>)
 8025e98:	f7da fbd6 	bl	8000648 <__aeabi_dmul>
 8025e9c:	4680      	mov	r8, r0
 8025e9e:	4689      	mov	r9, r1
 8025ea0:	e7bd      	b.n	8025e1e <_dtoa_r+0x5b6>
 8025ea2:	bf00      	nop
 8025ea4:	0802aea0 	.word	0x0802aea0
 8025ea8:	0802ae78 	.word	0x0802ae78
 8025eac:	3ff00000 	.word	0x3ff00000
 8025eb0:	40240000 	.word	0x40240000
 8025eb4:	401c0000 	.word	0x401c0000
 8025eb8:	40140000 	.word	0x40140000
 8025ebc:	3fe00000 	.word	0x3fe00000
 8025ec0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025ec4:	9d00      	ldr	r5, [sp, #0]
 8025ec6:	4642      	mov	r2, r8
 8025ec8:	464b      	mov	r3, r9
 8025eca:	4630      	mov	r0, r6
 8025ecc:	4639      	mov	r1, r7
 8025ece:	f7da fce5 	bl	800089c <__aeabi_ddiv>
 8025ed2:	f7da fe69 	bl	8000ba8 <__aeabi_d2iz>
 8025ed6:	9001      	str	r0, [sp, #4]
 8025ed8:	f7da fb4c 	bl	8000574 <__aeabi_i2d>
 8025edc:	4642      	mov	r2, r8
 8025ede:	464b      	mov	r3, r9
 8025ee0:	f7da fbb2 	bl	8000648 <__aeabi_dmul>
 8025ee4:	4602      	mov	r2, r0
 8025ee6:	460b      	mov	r3, r1
 8025ee8:	4630      	mov	r0, r6
 8025eea:	4639      	mov	r1, r7
 8025eec:	f7da f9f4 	bl	80002d8 <__aeabi_dsub>
 8025ef0:	9e01      	ldr	r6, [sp, #4]
 8025ef2:	9f04      	ldr	r7, [sp, #16]
 8025ef4:	3630      	adds	r6, #48	; 0x30
 8025ef6:	f805 6b01 	strb.w	r6, [r5], #1
 8025efa:	9e00      	ldr	r6, [sp, #0]
 8025efc:	1bae      	subs	r6, r5, r6
 8025efe:	42b7      	cmp	r7, r6
 8025f00:	4602      	mov	r2, r0
 8025f02:	460b      	mov	r3, r1
 8025f04:	d134      	bne.n	8025f70 <_dtoa_r+0x708>
 8025f06:	f7da f9e9 	bl	80002dc <__adddf3>
 8025f0a:	4642      	mov	r2, r8
 8025f0c:	464b      	mov	r3, r9
 8025f0e:	4606      	mov	r6, r0
 8025f10:	460f      	mov	r7, r1
 8025f12:	f7da fe29 	bl	8000b68 <__aeabi_dcmpgt>
 8025f16:	b9c8      	cbnz	r0, 8025f4c <_dtoa_r+0x6e4>
 8025f18:	4642      	mov	r2, r8
 8025f1a:	464b      	mov	r3, r9
 8025f1c:	4630      	mov	r0, r6
 8025f1e:	4639      	mov	r1, r7
 8025f20:	f7da fdfa 	bl	8000b18 <__aeabi_dcmpeq>
 8025f24:	b110      	cbz	r0, 8025f2c <_dtoa_r+0x6c4>
 8025f26:	9b01      	ldr	r3, [sp, #4]
 8025f28:	07db      	lsls	r3, r3, #31
 8025f2a:	d40f      	bmi.n	8025f4c <_dtoa_r+0x6e4>
 8025f2c:	4651      	mov	r1, sl
 8025f2e:	4620      	mov	r0, r4
 8025f30:	f000 fbcc 	bl	80266cc <_Bfree>
 8025f34:	2300      	movs	r3, #0
 8025f36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025f38:	702b      	strb	r3, [r5, #0]
 8025f3a:	f10b 0301 	add.w	r3, fp, #1
 8025f3e:	6013      	str	r3, [r2, #0]
 8025f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025f42:	2b00      	cmp	r3, #0
 8025f44:	f43f ace2 	beq.w	802590c <_dtoa_r+0xa4>
 8025f48:	601d      	str	r5, [r3, #0]
 8025f4a:	e4df      	b.n	802590c <_dtoa_r+0xa4>
 8025f4c:	465f      	mov	r7, fp
 8025f4e:	462b      	mov	r3, r5
 8025f50:	461d      	mov	r5, r3
 8025f52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025f56:	2a39      	cmp	r2, #57	; 0x39
 8025f58:	d106      	bne.n	8025f68 <_dtoa_r+0x700>
 8025f5a:	9a00      	ldr	r2, [sp, #0]
 8025f5c:	429a      	cmp	r2, r3
 8025f5e:	d1f7      	bne.n	8025f50 <_dtoa_r+0x6e8>
 8025f60:	9900      	ldr	r1, [sp, #0]
 8025f62:	2230      	movs	r2, #48	; 0x30
 8025f64:	3701      	adds	r7, #1
 8025f66:	700a      	strb	r2, [r1, #0]
 8025f68:	781a      	ldrb	r2, [r3, #0]
 8025f6a:	3201      	adds	r2, #1
 8025f6c:	701a      	strb	r2, [r3, #0]
 8025f6e:	e790      	b.n	8025e92 <_dtoa_r+0x62a>
 8025f70:	4ba3      	ldr	r3, [pc, #652]	; (8026200 <_dtoa_r+0x998>)
 8025f72:	2200      	movs	r2, #0
 8025f74:	f7da fb68 	bl	8000648 <__aeabi_dmul>
 8025f78:	2200      	movs	r2, #0
 8025f7a:	2300      	movs	r3, #0
 8025f7c:	4606      	mov	r6, r0
 8025f7e:	460f      	mov	r7, r1
 8025f80:	f7da fdca 	bl	8000b18 <__aeabi_dcmpeq>
 8025f84:	2800      	cmp	r0, #0
 8025f86:	d09e      	beq.n	8025ec6 <_dtoa_r+0x65e>
 8025f88:	e7d0      	b.n	8025f2c <_dtoa_r+0x6c4>
 8025f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f8c:	2a00      	cmp	r2, #0
 8025f8e:	f000 80ca 	beq.w	8026126 <_dtoa_r+0x8be>
 8025f92:	9a07      	ldr	r2, [sp, #28]
 8025f94:	2a01      	cmp	r2, #1
 8025f96:	f300 80ad 	bgt.w	80260f4 <_dtoa_r+0x88c>
 8025f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f9c:	2a00      	cmp	r2, #0
 8025f9e:	f000 80a5 	beq.w	80260ec <_dtoa_r+0x884>
 8025fa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025fa6:	9e08      	ldr	r6, [sp, #32]
 8025fa8:	9d05      	ldr	r5, [sp, #20]
 8025faa:	9a05      	ldr	r2, [sp, #20]
 8025fac:	441a      	add	r2, r3
 8025fae:	9205      	str	r2, [sp, #20]
 8025fb0:	9a06      	ldr	r2, [sp, #24]
 8025fb2:	2101      	movs	r1, #1
 8025fb4:	441a      	add	r2, r3
 8025fb6:	4620      	mov	r0, r4
 8025fb8:	9206      	str	r2, [sp, #24]
 8025fba:	f000 fc3d 	bl	8026838 <__i2b>
 8025fbe:	4607      	mov	r7, r0
 8025fc0:	b165      	cbz	r5, 8025fdc <_dtoa_r+0x774>
 8025fc2:	9b06      	ldr	r3, [sp, #24]
 8025fc4:	2b00      	cmp	r3, #0
 8025fc6:	dd09      	ble.n	8025fdc <_dtoa_r+0x774>
 8025fc8:	42ab      	cmp	r3, r5
 8025fca:	9a05      	ldr	r2, [sp, #20]
 8025fcc:	bfa8      	it	ge
 8025fce:	462b      	movge	r3, r5
 8025fd0:	1ad2      	subs	r2, r2, r3
 8025fd2:	9205      	str	r2, [sp, #20]
 8025fd4:	9a06      	ldr	r2, [sp, #24]
 8025fd6:	1aed      	subs	r5, r5, r3
 8025fd8:	1ad3      	subs	r3, r2, r3
 8025fda:	9306      	str	r3, [sp, #24]
 8025fdc:	9b08      	ldr	r3, [sp, #32]
 8025fde:	b1f3      	cbz	r3, 802601e <_dtoa_r+0x7b6>
 8025fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	f000 80a3 	beq.w	802612e <_dtoa_r+0x8c6>
 8025fe8:	2e00      	cmp	r6, #0
 8025fea:	dd10      	ble.n	802600e <_dtoa_r+0x7a6>
 8025fec:	4639      	mov	r1, r7
 8025fee:	4632      	mov	r2, r6
 8025ff0:	4620      	mov	r0, r4
 8025ff2:	f000 fce1 	bl	80269b8 <__pow5mult>
 8025ff6:	4652      	mov	r2, sl
 8025ff8:	4601      	mov	r1, r0
 8025ffa:	4607      	mov	r7, r0
 8025ffc:	4620      	mov	r0, r4
 8025ffe:	f000 fc31 	bl	8026864 <__multiply>
 8026002:	4651      	mov	r1, sl
 8026004:	4680      	mov	r8, r0
 8026006:	4620      	mov	r0, r4
 8026008:	f000 fb60 	bl	80266cc <_Bfree>
 802600c:	46c2      	mov	sl, r8
 802600e:	9b08      	ldr	r3, [sp, #32]
 8026010:	1b9a      	subs	r2, r3, r6
 8026012:	d004      	beq.n	802601e <_dtoa_r+0x7b6>
 8026014:	4651      	mov	r1, sl
 8026016:	4620      	mov	r0, r4
 8026018:	f000 fcce 	bl	80269b8 <__pow5mult>
 802601c:	4682      	mov	sl, r0
 802601e:	2101      	movs	r1, #1
 8026020:	4620      	mov	r0, r4
 8026022:	f000 fc09 	bl	8026838 <__i2b>
 8026026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026028:	2b00      	cmp	r3, #0
 802602a:	4606      	mov	r6, r0
 802602c:	f340 8081 	ble.w	8026132 <_dtoa_r+0x8ca>
 8026030:	461a      	mov	r2, r3
 8026032:	4601      	mov	r1, r0
 8026034:	4620      	mov	r0, r4
 8026036:	f000 fcbf 	bl	80269b8 <__pow5mult>
 802603a:	9b07      	ldr	r3, [sp, #28]
 802603c:	2b01      	cmp	r3, #1
 802603e:	4606      	mov	r6, r0
 8026040:	dd7a      	ble.n	8026138 <_dtoa_r+0x8d0>
 8026042:	f04f 0800 	mov.w	r8, #0
 8026046:	6933      	ldr	r3, [r6, #16]
 8026048:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802604c:	6918      	ldr	r0, [r3, #16]
 802604e:	f000 fba5 	bl	802679c <__hi0bits>
 8026052:	f1c0 0020 	rsb	r0, r0, #32
 8026056:	9b06      	ldr	r3, [sp, #24]
 8026058:	4418      	add	r0, r3
 802605a:	f010 001f 	ands.w	r0, r0, #31
 802605e:	f000 8094 	beq.w	802618a <_dtoa_r+0x922>
 8026062:	f1c0 0320 	rsb	r3, r0, #32
 8026066:	2b04      	cmp	r3, #4
 8026068:	f340 8085 	ble.w	8026176 <_dtoa_r+0x90e>
 802606c:	9b05      	ldr	r3, [sp, #20]
 802606e:	f1c0 001c 	rsb	r0, r0, #28
 8026072:	4403      	add	r3, r0
 8026074:	9305      	str	r3, [sp, #20]
 8026076:	9b06      	ldr	r3, [sp, #24]
 8026078:	4403      	add	r3, r0
 802607a:	4405      	add	r5, r0
 802607c:	9306      	str	r3, [sp, #24]
 802607e:	9b05      	ldr	r3, [sp, #20]
 8026080:	2b00      	cmp	r3, #0
 8026082:	dd05      	ble.n	8026090 <_dtoa_r+0x828>
 8026084:	4651      	mov	r1, sl
 8026086:	461a      	mov	r2, r3
 8026088:	4620      	mov	r0, r4
 802608a:	f000 fcef 	bl	8026a6c <__lshift>
 802608e:	4682      	mov	sl, r0
 8026090:	9b06      	ldr	r3, [sp, #24]
 8026092:	2b00      	cmp	r3, #0
 8026094:	dd05      	ble.n	80260a2 <_dtoa_r+0x83a>
 8026096:	4631      	mov	r1, r6
 8026098:	461a      	mov	r2, r3
 802609a:	4620      	mov	r0, r4
 802609c:	f000 fce6 	bl	8026a6c <__lshift>
 80260a0:	4606      	mov	r6, r0
 80260a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80260a4:	2b00      	cmp	r3, #0
 80260a6:	d072      	beq.n	802618e <_dtoa_r+0x926>
 80260a8:	4631      	mov	r1, r6
 80260aa:	4650      	mov	r0, sl
 80260ac:	f000 fd4a 	bl	8026b44 <__mcmp>
 80260b0:	2800      	cmp	r0, #0
 80260b2:	da6c      	bge.n	802618e <_dtoa_r+0x926>
 80260b4:	2300      	movs	r3, #0
 80260b6:	4651      	mov	r1, sl
 80260b8:	220a      	movs	r2, #10
 80260ba:	4620      	mov	r0, r4
 80260bc:	f000 fb28 	bl	8026710 <__multadd>
 80260c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80260c6:	4682      	mov	sl, r0
 80260c8:	2b00      	cmp	r3, #0
 80260ca:	f000 81b0 	beq.w	802642e <_dtoa_r+0xbc6>
 80260ce:	2300      	movs	r3, #0
 80260d0:	4639      	mov	r1, r7
 80260d2:	220a      	movs	r2, #10
 80260d4:	4620      	mov	r0, r4
 80260d6:	f000 fb1b 	bl	8026710 <__multadd>
 80260da:	9b01      	ldr	r3, [sp, #4]
 80260dc:	2b00      	cmp	r3, #0
 80260de:	4607      	mov	r7, r0
 80260e0:	f300 8096 	bgt.w	8026210 <_dtoa_r+0x9a8>
 80260e4:	9b07      	ldr	r3, [sp, #28]
 80260e6:	2b02      	cmp	r3, #2
 80260e8:	dc59      	bgt.n	802619e <_dtoa_r+0x936>
 80260ea:	e091      	b.n	8026210 <_dtoa_r+0x9a8>
 80260ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80260ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80260f2:	e758      	b.n	8025fa6 <_dtoa_r+0x73e>
 80260f4:	9b04      	ldr	r3, [sp, #16]
 80260f6:	1e5e      	subs	r6, r3, #1
 80260f8:	9b08      	ldr	r3, [sp, #32]
 80260fa:	42b3      	cmp	r3, r6
 80260fc:	bfbf      	itttt	lt
 80260fe:	9b08      	ldrlt	r3, [sp, #32]
 8026100:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8026102:	9608      	strlt	r6, [sp, #32]
 8026104:	1af3      	sublt	r3, r6, r3
 8026106:	bfb4      	ite	lt
 8026108:	18d2      	addlt	r2, r2, r3
 802610a:	1b9e      	subge	r6, r3, r6
 802610c:	9b04      	ldr	r3, [sp, #16]
 802610e:	bfbc      	itt	lt
 8026110:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8026112:	2600      	movlt	r6, #0
 8026114:	2b00      	cmp	r3, #0
 8026116:	bfb7      	itett	lt
 8026118:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802611c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8026120:	1a9d      	sublt	r5, r3, r2
 8026122:	2300      	movlt	r3, #0
 8026124:	e741      	b.n	8025faa <_dtoa_r+0x742>
 8026126:	9e08      	ldr	r6, [sp, #32]
 8026128:	9d05      	ldr	r5, [sp, #20]
 802612a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802612c:	e748      	b.n	8025fc0 <_dtoa_r+0x758>
 802612e:	9a08      	ldr	r2, [sp, #32]
 8026130:	e770      	b.n	8026014 <_dtoa_r+0x7ac>
 8026132:	9b07      	ldr	r3, [sp, #28]
 8026134:	2b01      	cmp	r3, #1
 8026136:	dc19      	bgt.n	802616c <_dtoa_r+0x904>
 8026138:	9b02      	ldr	r3, [sp, #8]
 802613a:	b9bb      	cbnz	r3, 802616c <_dtoa_r+0x904>
 802613c:	9b03      	ldr	r3, [sp, #12]
 802613e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026142:	b99b      	cbnz	r3, 802616c <_dtoa_r+0x904>
 8026144:	9b03      	ldr	r3, [sp, #12]
 8026146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802614a:	0d1b      	lsrs	r3, r3, #20
 802614c:	051b      	lsls	r3, r3, #20
 802614e:	b183      	cbz	r3, 8026172 <_dtoa_r+0x90a>
 8026150:	9b05      	ldr	r3, [sp, #20]
 8026152:	3301      	adds	r3, #1
 8026154:	9305      	str	r3, [sp, #20]
 8026156:	9b06      	ldr	r3, [sp, #24]
 8026158:	3301      	adds	r3, #1
 802615a:	9306      	str	r3, [sp, #24]
 802615c:	f04f 0801 	mov.w	r8, #1
 8026160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026162:	2b00      	cmp	r3, #0
 8026164:	f47f af6f 	bne.w	8026046 <_dtoa_r+0x7de>
 8026168:	2001      	movs	r0, #1
 802616a:	e774      	b.n	8026056 <_dtoa_r+0x7ee>
 802616c:	f04f 0800 	mov.w	r8, #0
 8026170:	e7f6      	b.n	8026160 <_dtoa_r+0x8f8>
 8026172:	4698      	mov	r8, r3
 8026174:	e7f4      	b.n	8026160 <_dtoa_r+0x8f8>
 8026176:	d082      	beq.n	802607e <_dtoa_r+0x816>
 8026178:	9a05      	ldr	r2, [sp, #20]
 802617a:	331c      	adds	r3, #28
 802617c:	441a      	add	r2, r3
 802617e:	9205      	str	r2, [sp, #20]
 8026180:	9a06      	ldr	r2, [sp, #24]
 8026182:	441a      	add	r2, r3
 8026184:	441d      	add	r5, r3
 8026186:	9206      	str	r2, [sp, #24]
 8026188:	e779      	b.n	802607e <_dtoa_r+0x816>
 802618a:	4603      	mov	r3, r0
 802618c:	e7f4      	b.n	8026178 <_dtoa_r+0x910>
 802618e:	9b04      	ldr	r3, [sp, #16]
 8026190:	2b00      	cmp	r3, #0
 8026192:	dc37      	bgt.n	8026204 <_dtoa_r+0x99c>
 8026194:	9b07      	ldr	r3, [sp, #28]
 8026196:	2b02      	cmp	r3, #2
 8026198:	dd34      	ble.n	8026204 <_dtoa_r+0x99c>
 802619a:	9b04      	ldr	r3, [sp, #16]
 802619c:	9301      	str	r3, [sp, #4]
 802619e:	9b01      	ldr	r3, [sp, #4]
 80261a0:	b963      	cbnz	r3, 80261bc <_dtoa_r+0x954>
 80261a2:	4631      	mov	r1, r6
 80261a4:	2205      	movs	r2, #5
 80261a6:	4620      	mov	r0, r4
 80261a8:	f000 fab2 	bl	8026710 <__multadd>
 80261ac:	4601      	mov	r1, r0
 80261ae:	4606      	mov	r6, r0
 80261b0:	4650      	mov	r0, sl
 80261b2:	f000 fcc7 	bl	8026b44 <__mcmp>
 80261b6:	2800      	cmp	r0, #0
 80261b8:	f73f adbb 	bgt.w	8025d32 <_dtoa_r+0x4ca>
 80261bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80261be:	9d00      	ldr	r5, [sp, #0]
 80261c0:	ea6f 0b03 	mvn.w	fp, r3
 80261c4:	f04f 0800 	mov.w	r8, #0
 80261c8:	4631      	mov	r1, r6
 80261ca:	4620      	mov	r0, r4
 80261cc:	f000 fa7e 	bl	80266cc <_Bfree>
 80261d0:	2f00      	cmp	r7, #0
 80261d2:	f43f aeab 	beq.w	8025f2c <_dtoa_r+0x6c4>
 80261d6:	f1b8 0f00 	cmp.w	r8, #0
 80261da:	d005      	beq.n	80261e8 <_dtoa_r+0x980>
 80261dc:	45b8      	cmp	r8, r7
 80261de:	d003      	beq.n	80261e8 <_dtoa_r+0x980>
 80261e0:	4641      	mov	r1, r8
 80261e2:	4620      	mov	r0, r4
 80261e4:	f000 fa72 	bl	80266cc <_Bfree>
 80261e8:	4639      	mov	r1, r7
 80261ea:	4620      	mov	r0, r4
 80261ec:	f000 fa6e 	bl	80266cc <_Bfree>
 80261f0:	e69c      	b.n	8025f2c <_dtoa_r+0x6c4>
 80261f2:	2600      	movs	r6, #0
 80261f4:	4637      	mov	r7, r6
 80261f6:	e7e1      	b.n	80261bc <_dtoa_r+0x954>
 80261f8:	46bb      	mov	fp, r7
 80261fa:	4637      	mov	r7, r6
 80261fc:	e599      	b.n	8025d32 <_dtoa_r+0x4ca>
 80261fe:	bf00      	nop
 8026200:	40240000 	.word	0x40240000
 8026204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026206:	2b00      	cmp	r3, #0
 8026208:	f000 80c8 	beq.w	802639c <_dtoa_r+0xb34>
 802620c:	9b04      	ldr	r3, [sp, #16]
 802620e:	9301      	str	r3, [sp, #4]
 8026210:	2d00      	cmp	r5, #0
 8026212:	dd05      	ble.n	8026220 <_dtoa_r+0x9b8>
 8026214:	4639      	mov	r1, r7
 8026216:	462a      	mov	r2, r5
 8026218:	4620      	mov	r0, r4
 802621a:	f000 fc27 	bl	8026a6c <__lshift>
 802621e:	4607      	mov	r7, r0
 8026220:	f1b8 0f00 	cmp.w	r8, #0
 8026224:	d05b      	beq.n	80262de <_dtoa_r+0xa76>
 8026226:	6879      	ldr	r1, [r7, #4]
 8026228:	4620      	mov	r0, r4
 802622a:	f000 fa0f 	bl	802664c <_Balloc>
 802622e:	4605      	mov	r5, r0
 8026230:	b928      	cbnz	r0, 802623e <_dtoa_r+0x9d6>
 8026232:	4b83      	ldr	r3, [pc, #524]	; (8026440 <_dtoa_r+0xbd8>)
 8026234:	4602      	mov	r2, r0
 8026236:	f240 21ef 	movw	r1, #751	; 0x2ef
 802623a:	f7ff bb2e 	b.w	802589a <_dtoa_r+0x32>
 802623e:	693a      	ldr	r2, [r7, #16]
 8026240:	3202      	adds	r2, #2
 8026242:	0092      	lsls	r2, r2, #2
 8026244:	f107 010c 	add.w	r1, r7, #12
 8026248:	300c      	adds	r0, #12
 802624a:	f7ff fa6d 	bl	8025728 <memcpy>
 802624e:	2201      	movs	r2, #1
 8026250:	4629      	mov	r1, r5
 8026252:	4620      	mov	r0, r4
 8026254:	f000 fc0a 	bl	8026a6c <__lshift>
 8026258:	9b00      	ldr	r3, [sp, #0]
 802625a:	3301      	adds	r3, #1
 802625c:	9304      	str	r3, [sp, #16]
 802625e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026262:	4413      	add	r3, r2
 8026264:	9308      	str	r3, [sp, #32]
 8026266:	9b02      	ldr	r3, [sp, #8]
 8026268:	f003 0301 	and.w	r3, r3, #1
 802626c:	46b8      	mov	r8, r7
 802626e:	9306      	str	r3, [sp, #24]
 8026270:	4607      	mov	r7, r0
 8026272:	9b04      	ldr	r3, [sp, #16]
 8026274:	4631      	mov	r1, r6
 8026276:	3b01      	subs	r3, #1
 8026278:	4650      	mov	r0, sl
 802627a:	9301      	str	r3, [sp, #4]
 802627c:	f7ff fa69 	bl	8025752 <quorem>
 8026280:	4641      	mov	r1, r8
 8026282:	9002      	str	r0, [sp, #8]
 8026284:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8026288:	4650      	mov	r0, sl
 802628a:	f000 fc5b 	bl	8026b44 <__mcmp>
 802628e:	463a      	mov	r2, r7
 8026290:	9005      	str	r0, [sp, #20]
 8026292:	4631      	mov	r1, r6
 8026294:	4620      	mov	r0, r4
 8026296:	f000 fc71 	bl	8026b7c <__mdiff>
 802629a:	68c2      	ldr	r2, [r0, #12]
 802629c:	4605      	mov	r5, r0
 802629e:	bb02      	cbnz	r2, 80262e2 <_dtoa_r+0xa7a>
 80262a0:	4601      	mov	r1, r0
 80262a2:	4650      	mov	r0, sl
 80262a4:	f000 fc4e 	bl	8026b44 <__mcmp>
 80262a8:	4602      	mov	r2, r0
 80262aa:	4629      	mov	r1, r5
 80262ac:	4620      	mov	r0, r4
 80262ae:	9209      	str	r2, [sp, #36]	; 0x24
 80262b0:	f000 fa0c 	bl	80266cc <_Bfree>
 80262b4:	9b07      	ldr	r3, [sp, #28]
 80262b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80262b8:	9d04      	ldr	r5, [sp, #16]
 80262ba:	ea43 0102 	orr.w	r1, r3, r2
 80262be:	9b06      	ldr	r3, [sp, #24]
 80262c0:	4319      	orrs	r1, r3
 80262c2:	d110      	bne.n	80262e6 <_dtoa_r+0xa7e>
 80262c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80262c8:	d029      	beq.n	802631e <_dtoa_r+0xab6>
 80262ca:	9b05      	ldr	r3, [sp, #20]
 80262cc:	2b00      	cmp	r3, #0
 80262ce:	dd02      	ble.n	80262d6 <_dtoa_r+0xa6e>
 80262d0:	9b02      	ldr	r3, [sp, #8]
 80262d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80262d6:	9b01      	ldr	r3, [sp, #4]
 80262d8:	f883 9000 	strb.w	r9, [r3]
 80262dc:	e774      	b.n	80261c8 <_dtoa_r+0x960>
 80262de:	4638      	mov	r0, r7
 80262e0:	e7ba      	b.n	8026258 <_dtoa_r+0x9f0>
 80262e2:	2201      	movs	r2, #1
 80262e4:	e7e1      	b.n	80262aa <_dtoa_r+0xa42>
 80262e6:	9b05      	ldr	r3, [sp, #20]
 80262e8:	2b00      	cmp	r3, #0
 80262ea:	db04      	blt.n	80262f6 <_dtoa_r+0xa8e>
 80262ec:	9907      	ldr	r1, [sp, #28]
 80262ee:	430b      	orrs	r3, r1
 80262f0:	9906      	ldr	r1, [sp, #24]
 80262f2:	430b      	orrs	r3, r1
 80262f4:	d120      	bne.n	8026338 <_dtoa_r+0xad0>
 80262f6:	2a00      	cmp	r2, #0
 80262f8:	dded      	ble.n	80262d6 <_dtoa_r+0xa6e>
 80262fa:	4651      	mov	r1, sl
 80262fc:	2201      	movs	r2, #1
 80262fe:	4620      	mov	r0, r4
 8026300:	f000 fbb4 	bl	8026a6c <__lshift>
 8026304:	4631      	mov	r1, r6
 8026306:	4682      	mov	sl, r0
 8026308:	f000 fc1c 	bl	8026b44 <__mcmp>
 802630c:	2800      	cmp	r0, #0
 802630e:	dc03      	bgt.n	8026318 <_dtoa_r+0xab0>
 8026310:	d1e1      	bne.n	80262d6 <_dtoa_r+0xa6e>
 8026312:	f019 0f01 	tst.w	r9, #1
 8026316:	d0de      	beq.n	80262d6 <_dtoa_r+0xa6e>
 8026318:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802631c:	d1d8      	bne.n	80262d0 <_dtoa_r+0xa68>
 802631e:	9a01      	ldr	r2, [sp, #4]
 8026320:	2339      	movs	r3, #57	; 0x39
 8026322:	7013      	strb	r3, [r2, #0]
 8026324:	462b      	mov	r3, r5
 8026326:	461d      	mov	r5, r3
 8026328:	3b01      	subs	r3, #1
 802632a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802632e:	2a39      	cmp	r2, #57	; 0x39
 8026330:	d06c      	beq.n	802640c <_dtoa_r+0xba4>
 8026332:	3201      	adds	r2, #1
 8026334:	701a      	strb	r2, [r3, #0]
 8026336:	e747      	b.n	80261c8 <_dtoa_r+0x960>
 8026338:	2a00      	cmp	r2, #0
 802633a:	dd07      	ble.n	802634c <_dtoa_r+0xae4>
 802633c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026340:	d0ed      	beq.n	802631e <_dtoa_r+0xab6>
 8026342:	9a01      	ldr	r2, [sp, #4]
 8026344:	f109 0301 	add.w	r3, r9, #1
 8026348:	7013      	strb	r3, [r2, #0]
 802634a:	e73d      	b.n	80261c8 <_dtoa_r+0x960>
 802634c:	9b04      	ldr	r3, [sp, #16]
 802634e:	9a08      	ldr	r2, [sp, #32]
 8026350:	f803 9c01 	strb.w	r9, [r3, #-1]
 8026354:	4293      	cmp	r3, r2
 8026356:	d043      	beq.n	80263e0 <_dtoa_r+0xb78>
 8026358:	4651      	mov	r1, sl
 802635a:	2300      	movs	r3, #0
 802635c:	220a      	movs	r2, #10
 802635e:	4620      	mov	r0, r4
 8026360:	f000 f9d6 	bl	8026710 <__multadd>
 8026364:	45b8      	cmp	r8, r7
 8026366:	4682      	mov	sl, r0
 8026368:	f04f 0300 	mov.w	r3, #0
 802636c:	f04f 020a 	mov.w	r2, #10
 8026370:	4641      	mov	r1, r8
 8026372:	4620      	mov	r0, r4
 8026374:	d107      	bne.n	8026386 <_dtoa_r+0xb1e>
 8026376:	f000 f9cb 	bl	8026710 <__multadd>
 802637a:	4680      	mov	r8, r0
 802637c:	4607      	mov	r7, r0
 802637e:	9b04      	ldr	r3, [sp, #16]
 8026380:	3301      	adds	r3, #1
 8026382:	9304      	str	r3, [sp, #16]
 8026384:	e775      	b.n	8026272 <_dtoa_r+0xa0a>
 8026386:	f000 f9c3 	bl	8026710 <__multadd>
 802638a:	4639      	mov	r1, r7
 802638c:	4680      	mov	r8, r0
 802638e:	2300      	movs	r3, #0
 8026390:	220a      	movs	r2, #10
 8026392:	4620      	mov	r0, r4
 8026394:	f000 f9bc 	bl	8026710 <__multadd>
 8026398:	4607      	mov	r7, r0
 802639a:	e7f0      	b.n	802637e <_dtoa_r+0xb16>
 802639c:	9b04      	ldr	r3, [sp, #16]
 802639e:	9301      	str	r3, [sp, #4]
 80263a0:	9d00      	ldr	r5, [sp, #0]
 80263a2:	4631      	mov	r1, r6
 80263a4:	4650      	mov	r0, sl
 80263a6:	f7ff f9d4 	bl	8025752 <quorem>
 80263aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80263ae:	9b00      	ldr	r3, [sp, #0]
 80263b0:	f805 9b01 	strb.w	r9, [r5], #1
 80263b4:	1aea      	subs	r2, r5, r3
 80263b6:	9b01      	ldr	r3, [sp, #4]
 80263b8:	4293      	cmp	r3, r2
 80263ba:	dd07      	ble.n	80263cc <_dtoa_r+0xb64>
 80263bc:	4651      	mov	r1, sl
 80263be:	2300      	movs	r3, #0
 80263c0:	220a      	movs	r2, #10
 80263c2:	4620      	mov	r0, r4
 80263c4:	f000 f9a4 	bl	8026710 <__multadd>
 80263c8:	4682      	mov	sl, r0
 80263ca:	e7ea      	b.n	80263a2 <_dtoa_r+0xb3a>
 80263cc:	9b01      	ldr	r3, [sp, #4]
 80263ce:	2b00      	cmp	r3, #0
 80263d0:	bfc8      	it	gt
 80263d2:	461d      	movgt	r5, r3
 80263d4:	9b00      	ldr	r3, [sp, #0]
 80263d6:	bfd8      	it	le
 80263d8:	2501      	movle	r5, #1
 80263da:	441d      	add	r5, r3
 80263dc:	f04f 0800 	mov.w	r8, #0
 80263e0:	4651      	mov	r1, sl
 80263e2:	2201      	movs	r2, #1
 80263e4:	4620      	mov	r0, r4
 80263e6:	f000 fb41 	bl	8026a6c <__lshift>
 80263ea:	4631      	mov	r1, r6
 80263ec:	4682      	mov	sl, r0
 80263ee:	f000 fba9 	bl	8026b44 <__mcmp>
 80263f2:	2800      	cmp	r0, #0
 80263f4:	dc96      	bgt.n	8026324 <_dtoa_r+0xabc>
 80263f6:	d102      	bne.n	80263fe <_dtoa_r+0xb96>
 80263f8:	f019 0f01 	tst.w	r9, #1
 80263fc:	d192      	bne.n	8026324 <_dtoa_r+0xabc>
 80263fe:	462b      	mov	r3, r5
 8026400:	461d      	mov	r5, r3
 8026402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026406:	2a30      	cmp	r2, #48	; 0x30
 8026408:	d0fa      	beq.n	8026400 <_dtoa_r+0xb98>
 802640a:	e6dd      	b.n	80261c8 <_dtoa_r+0x960>
 802640c:	9a00      	ldr	r2, [sp, #0]
 802640e:	429a      	cmp	r2, r3
 8026410:	d189      	bne.n	8026326 <_dtoa_r+0xabe>
 8026412:	f10b 0b01 	add.w	fp, fp, #1
 8026416:	2331      	movs	r3, #49	; 0x31
 8026418:	e796      	b.n	8026348 <_dtoa_r+0xae0>
 802641a:	4b0a      	ldr	r3, [pc, #40]	; (8026444 <_dtoa_r+0xbdc>)
 802641c:	f7ff ba99 	b.w	8025952 <_dtoa_r+0xea>
 8026420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026422:	2b00      	cmp	r3, #0
 8026424:	f47f aa6d 	bne.w	8025902 <_dtoa_r+0x9a>
 8026428:	4b07      	ldr	r3, [pc, #28]	; (8026448 <_dtoa_r+0xbe0>)
 802642a:	f7ff ba92 	b.w	8025952 <_dtoa_r+0xea>
 802642e:	9b01      	ldr	r3, [sp, #4]
 8026430:	2b00      	cmp	r3, #0
 8026432:	dcb5      	bgt.n	80263a0 <_dtoa_r+0xb38>
 8026434:	9b07      	ldr	r3, [sp, #28]
 8026436:	2b02      	cmp	r3, #2
 8026438:	f73f aeb1 	bgt.w	802619e <_dtoa_r+0x936>
 802643c:	e7b0      	b.n	80263a0 <_dtoa_r+0xb38>
 802643e:	bf00      	nop
 8026440:	0802ae07 	.word	0x0802ae07
 8026444:	0802ad67 	.word	0x0802ad67
 8026448:	0802ad8b 	.word	0x0802ad8b

0802644c <_free_r>:
 802644c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802644e:	2900      	cmp	r1, #0
 8026450:	d044      	beq.n	80264dc <_free_r+0x90>
 8026452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026456:	9001      	str	r0, [sp, #4]
 8026458:	2b00      	cmp	r3, #0
 802645a:	f1a1 0404 	sub.w	r4, r1, #4
 802645e:	bfb8      	it	lt
 8026460:	18e4      	addlt	r4, r4, r3
 8026462:	f000 f8e7 	bl	8026634 <__malloc_lock>
 8026466:	4a1e      	ldr	r2, [pc, #120]	; (80264e0 <_free_r+0x94>)
 8026468:	9801      	ldr	r0, [sp, #4]
 802646a:	6813      	ldr	r3, [r2, #0]
 802646c:	b933      	cbnz	r3, 802647c <_free_r+0x30>
 802646e:	6063      	str	r3, [r4, #4]
 8026470:	6014      	str	r4, [r2, #0]
 8026472:	b003      	add	sp, #12
 8026474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026478:	f000 b8e2 	b.w	8026640 <__malloc_unlock>
 802647c:	42a3      	cmp	r3, r4
 802647e:	d908      	bls.n	8026492 <_free_r+0x46>
 8026480:	6825      	ldr	r5, [r4, #0]
 8026482:	1961      	adds	r1, r4, r5
 8026484:	428b      	cmp	r3, r1
 8026486:	bf01      	itttt	eq
 8026488:	6819      	ldreq	r1, [r3, #0]
 802648a:	685b      	ldreq	r3, [r3, #4]
 802648c:	1949      	addeq	r1, r1, r5
 802648e:	6021      	streq	r1, [r4, #0]
 8026490:	e7ed      	b.n	802646e <_free_r+0x22>
 8026492:	461a      	mov	r2, r3
 8026494:	685b      	ldr	r3, [r3, #4]
 8026496:	b10b      	cbz	r3, 802649c <_free_r+0x50>
 8026498:	42a3      	cmp	r3, r4
 802649a:	d9fa      	bls.n	8026492 <_free_r+0x46>
 802649c:	6811      	ldr	r1, [r2, #0]
 802649e:	1855      	adds	r5, r2, r1
 80264a0:	42a5      	cmp	r5, r4
 80264a2:	d10b      	bne.n	80264bc <_free_r+0x70>
 80264a4:	6824      	ldr	r4, [r4, #0]
 80264a6:	4421      	add	r1, r4
 80264a8:	1854      	adds	r4, r2, r1
 80264aa:	42a3      	cmp	r3, r4
 80264ac:	6011      	str	r1, [r2, #0]
 80264ae:	d1e0      	bne.n	8026472 <_free_r+0x26>
 80264b0:	681c      	ldr	r4, [r3, #0]
 80264b2:	685b      	ldr	r3, [r3, #4]
 80264b4:	6053      	str	r3, [r2, #4]
 80264b6:	440c      	add	r4, r1
 80264b8:	6014      	str	r4, [r2, #0]
 80264ba:	e7da      	b.n	8026472 <_free_r+0x26>
 80264bc:	d902      	bls.n	80264c4 <_free_r+0x78>
 80264be:	230c      	movs	r3, #12
 80264c0:	6003      	str	r3, [r0, #0]
 80264c2:	e7d6      	b.n	8026472 <_free_r+0x26>
 80264c4:	6825      	ldr	r5, [r4, #0]
 80264c6:	1961      	adds	r1, r4, r5
 80264c8:	428b      	cmp	r3, r1
 80264ca:	bf04      	itt	eq
 80264cc:	6819      	ldreq	r1, [r3, #0]
 80264ce:	685b      	ldreq	r3, [r3, #4]
 80264d0:	6063      	str	r3, [r4, #4]
 80264d2:	bf04      	itt	eq
 80264d4:	1949      	addeq	r1, r1, r5
 80264d6:	6021      	streq	r1, [r4, #0]
 80264d8:	6054      	str	r4, [r2, #4]
 80264da:	e7ca      	b.n	8026472 <_free_r+0x26>
 80264dc:	b003      	add	sp, #12
 80264de:	bd30      	pop	{r4, r5, pc}
 80264e0:	20016a9c 	.word	0x20016a9c

080264e4 <malloc>:
 80264e4:	4b02      	ldr	r3, [pc, #8]	; (80264f0 <malloc+0xc>)
 80264e6:	4601      	mov	r1, r0
 80264e8:	6818      	ldr	r0, [r3, #0]
 80264ea:	f000 b823 	b.w	8026534 <_malloc_r>
 80264ee:	bf00      	nop
 80264f0:	200001f8 	.word	0x200001f8

080264f4 <sbrk_aligned>:
 80264f4:	b570      	push	{r4, r5, r6, lr}
 80264f6:	4e0e      	ldr	r6, [pc, #56]	; (8026530 <sbrk_aligned+0x3c>)
 80264f8:	460c      	mov	r4, r1
 80264fa:	6831      	ldr	r1, [r6, #0]
 80264fc:	4605      	mov	r5, r0
 80264fe:	b911      	cbnz	r1, 8026506 <sbrk_aligned+0x12>
 8026500:	f001 f85e 	bl	80275c0 <_sbrk_r>
 8026504:	6030      	str	r0, [r6, #0]
 8026506:	4621      	mov	r1, r4
 8026508:	4628      	mov	r0, r5
 802650a:	f001 f859 	bl	80275c0 <_sbrk_r>
 802650e:	1c43      	adds	r3, r0, #1
 8026510:	d00a      	beq.n	8026528 <sbrk_aligned+0x34>
 8026512:	1cc4      	adds	r4, r0, #3
 8026514:	f024 0403 	bic.w	r4, r4, #3
 8026518:	42a0      	cmp	r0, r4
 802651a:	d007      	beq.n	802652c <sbrk_aligned+0x38>
 802651c:	1a21      	subs	r1, r4, r0
 802651e:	4628      	mov	r0, r5
 8026520:	f001 f84e 	bl	80275c0 <_sbrk_r>
 8026524:	3001      	adds	r0, #1
 8026526:	d101      	bne.n	802652c <sbrk_aligned+0x38>
 8026528:	f04f 34ff 	mov.w	r4, #4294967295
 802652c:	4620      	mov	r0, r4
 802652e:	bd70      	pop	{r4, r5, r6, pc}
 8026530:	20016aa0 	.word	0x20016aa0

08026534 <_malloc_r>:
 8026534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026538:	1ccd      	adds	r5, r1, #3
 802653a:	f025 0503 	bic.w	r5, r5, #3
 802653e:	3508      	adds	r5, #8
 8026540:	2d0c      	cmp	r5, #12
 8026542:	bf38      	it	cc
 8026544:	250c      	movcc	r5, #12
 8026546:	2d00      	cmp	r5, #0
 8026548:	4607      	mov	r7, r0
 802654a:	db01      	blt.n	8026550 <_malloc_r+0x1c>
 802654c:	42a9      	cmp	r1, r5
 802654e:	d905      	bls.n	802655c <_malloc_r+0x28>
 8026550:	230c      	movs	r3, #12
 8026552:	603b      	str	r3, [r7, #0]
 8026554:	2600      	movs	r6, #0
 8026556:	4630      	mov	r0, r6
 8026558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802655c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8026630 <_malloc_r+0xfc>
 8026560:	f000 f868 	bl	8026634 <__malloc_lock>
 8026564:	f8d8 3000 	ldr.w	r3, [r8]
 8026568:	461c      	mov	r4, r3
 802656a:	bb5c      	cbnz	r4, 80265c4 <_malloc_r+0x90>
 802656c:	4629      	mov	r1, r5
 802656e:	4638      	mov	r0, r7
 8026570:	f7ff ffc0 	bl	80264f4 <sbrk_aligned>
 8026574:	1c43      	adds	r3, r0, #1
 8026576:	4604      	mov	r4, r0
 8026578:	d155      	bne.n	8026626 <_malloc_r+0xf2>
 802657a:	f8d8 4000 	ldr.w	r4, [r8]
 802657e:	4626      	mov	r6, r4
 8026580:	2e00      	cmp	r6, #0
 8026582:	d145      	bne.n	8026610 <_malloc_r+0xdc>
 8026584:	2c00      	cmp	r4, #0
 8026586:	d048      	beq.n	802661a <_malloc_r+0xe6>
 8026588:	6823      	ldr	r3, [r4, #0]
 802658a:	4631      	mov	r1, r6
 802658c:	4638      	mov	r0, r7
 802658e:	eb04 0903 	add.w	r9, r4, r3
 8026592:	f001 f815 	bl	80275c0 <_sbrk_r>
 8026596:	4581      	cmp	r9, r0
 8026598:	d13f      	bne.n	802661a <_malloc_r+0xe6>
 802659a:	6821      	ldr	r1, [r4, #0]
 802659c:	1a6d      	subs	r5, r5, r1
 802659e:	4629      	mov	r1, r5
 80265a0:	4638      	mov	r0, r7
 80265a2:	f7ff ffa7 	bl	80264f4 <sbrk_aligned>
 80265a6:	3001      	adds	r0, #1
 80265a8:	d037      	beq.n	802661a <_malloc_r+0xe6>
 80265aa:	6823      	ldr	r3, [r4, #0]
 80265ac:	442b      	add	r3, r5
 80265ae:	6023      	str	r3, [r4, #0]
 80265b0:	f8d8 3000 	ldr.w	r3, [r8]
 80265b4:	2b00      	cmp	r3, #0
 80265b6:	d038      	beq.n	802662a <_malloc_r+0xf6>
 80265b8:	685a      	ldr	r2, [r3, #4]
 80265ba:	42a2      	cmp	r2, r4
 80265bc:	d12b      	bne.n	8026616 <_malloc_r+0xe2>
 80265be:	2200      	movs	r2, #0
 80265c0:	605a      	str	r2, [r3, #4]
 80265c2:	e00f      	b.n	80265e4 <_malloc_r+0xb0>
 80265c4:	6822      	ldr	r2, [r4, #0]
 80265c6:	1b52      	subs	r2, r2, r5
 80265c8:	d41f      	bmi.n	802660a <_malloc_r+0xd6>
 80265ca:	2a0b      	cmp	r2, #11
 80265cc:	d917      	bls.n	80265fe <_malloc_r+0xca>
 80265ce:	1961      	adds	r1, r4, r5
 80265d0:	42a3      	cmp	r3, r4
 80265d2:	6025      	str	r5, [r4, #0]
 80265d4:	bf18      	it	ne
 80265d6:	6059      	strne	r1, [r3, #4]
 80265d8:	6863      	ldr	r3, [r4, #4]
 80265da:	bf08      	it	eq
 80265dc:	f8c8 1000 	streq.w	r1, [r8]
 80265e0:	5162      	str	r2, [r4, r5]
 80265e2:	604b      	str	r3, [r1, #4]
 80265e4:	4638      	mov	r0, r7
 80265e6:	f104 060b 	add.w	r6, r4, #11
 80265ea:	f000 f829 	bl	8026640 <__malloc_unlock>
 80265ee:	f026 0607 	bic.w	r6, r6, #7
 80265f2:	1d23      	adds	r3, r4, #4
 80265f4:	1af2      	subs	r2, r6, r3
 80265f6:	d0ae      	beq.n	8026556 <_malloc_r+0x22>
 80265f8:	1b9b      	subs	r3, r3, r6
 80265fa:	50a3      	str	r3, [r4, r2]
 80265fc:	e7ab      	b.n	8026556 <_malloc_r+0x22>
 80265fe:	42a3      	cmp	r3, r4
 8026600:	6862      	ldr	r2, [r4, #4]
 8026602:	d1dd      	bne.n	80265c0 <_malloc_r+0x8c>
 8026604:	f8c8 2000 	str.w	r2, [r8]
 8026608:	e7ec      	b.n	80265e4 <_malloc_r+0xb0>
 802660a:	4623      	mov	r3, r4
 802660c:	6864      	ldr	r4, [r4, #4]
 802660e:	e7ac      	b.n	802656a <_malloc_r+0x36>
 8026610:	4634      	mov	r4, r6
 8026612:	6876      	ldr	r6, [r6, #4]
 8026614:	e7b4      	b.n	8026580 <_malloc_r+0x4c>
 8026616:	4613      	mov	r3, r2
 8026618:	e7cc      	b.n	80265b4 <_malloc_r+0x80>
 802661a:	230c      	movs	r3, #12
 802661c:	603b      	str	r3, [r7, #0]
 802661e:	4638      	mov	r0, r7
 8026620:	f000 f80e 	bl	8026640 <__malloc_unlock>
 8026624:	e797      	b.n	8026556 <_malloc_r+0x22>
 8026626:	6025      	str	r5, [r4, #0]
 8026628:	e7dc      	b.n	80265e4 <_malloc_r+0xb0>
 802662a:	605b      	str	r3, [r3, #4]
 802662c:	deff      	udf	#255	; 0xff
 802662e:	bf00      	nop
 8026630:	20016a9c 	.word	0x20016a9c

08026634 <__malloc_lock>:
 8026634:	4801      	ldr	r0, [pc, #4]	; (802663c <__malloc_lock+0x8>)
 8026636:	f7ff b875 	b.w	8025724 <__retarget_lock_acquire_recursive>
 802663a:	bf00      	nop
 802663c:	20016a98 	.word	0x20016a98

08026640 <__malloc_unlock>:
 8026640:	4801      	ldr	r0, [pc, #4]	; (8026648 <__malloc_unlock+0x8>)
 8026642:	f7ff b870 	b.w	8025726 <__retarget_lock_release_recursive>
 8026646:	bf00      	nop
 8026648:	20016a98 	.word	0x20016a98

0802664c <_Balloc>:
 802664c:	b570      	push	{r4, r5, r6, lr}
 802664e:	69c6      	ldr	r6, [r0, #28]
 8026650:	4604      	mov	r4, r0
 8026652:	460d      	mov	r5, r1
 8026654:	b976      	cbnz	r6, 8026674 <_Balloc+0x28>
 8026656:	2010      	movs	r0, #16
 8026658:	f7ff ff44 	bl	80264e4 <malloc>
 802665c:	4602      	mov	r2, r0
 802665e:	61e0      	str	r0, [r4, #28]
 8026660:	b920      	cbnz	r0, 802666c <_Balloc+0x20>
 8026662:	4b18      	ldr	r3, [pc, #96]	; (80266c4 <_Balloc+0x78>)
 8026664:	4818      	ldr	r0, [pc, #96]	; (80266c8 <_Balloc+0x7c>)
 8026666:	216b      	movs	r1, #107	; 0x6b
 8026668:	f7fe fa36 	bl	8024ad8 <__assert_func>
 802666c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026670:	6006      	str	r6, [r0, #0]
 8026672:	60c6      	str	r6, [r0, #12]
 8026674:	69e6      	ldr	r6, [r4, #28]
 8026676:	68f3      	ldr	r3, [r6, #12]
 8026678:	b183      	cbz	r3, 802669c <_Balloc+0x50>
 802667a:	69e3      	ldr	r3, [r4, #28]
 802667c:	68db      	ldr	r3, [r3, #12]
 802667e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026682:	b9b8      	cbnz	r0, 80266b4 <_Balloc+0x68>
 8026684:	2101      	movs	r1, #1
 8026686:	fa01 f605 	lsl.w	r6, r1, r5
 802668a:	1d72      	adds	r2, r6, #5
 802668c:	0092      	lsls	r2, r2, #2
 802668e:	4620      	mov	r0, r4
 8026690:	f000 ffa6 	bl	80275e0 <_calloc_r>
 8026694:	b160      	cbz	r0, 80266b0 <_Balloc+0x64>
 8026696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802669a:	e00e      	b.n	80266ba <_Balloc+0x6e>
 802669c:	2221      	movs	r2, #33	; 0x21
 802669e:	2104      	movs	r1, #4
 80266a0:	4620      	mov	r0, r4
 80266a2:	f000 ff9d 	bl	80275e0 <_calloc_r>
 80266a6:	69e3      	ldr	r3, [r4, #28]
 80266a8:	60f0      	str	r0, [r6, #12]
 80266aa:	68db      	ldr	r3, [r3, #12]
 80266ac:	2b00      	cmp	r3, #0
 80266ae:	d1e4      	bne.n	802667a <_Balloc+0x2e>
 80266b0:	2000      	movs	r0, #0
 80266b2:	bd70      	pop	{r4, r5, r6, pc}
 80266b4:	6802      	ldr	r2, [r0, #0]
 80266b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80266ba:	2300      	movs	r3, #0
 80266bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80266c0:	e7f7      	b.n	80266b2 <_Balloc+0x66>
 80266c2:	bf00      	nop
 80266c4:	0802ad98 	.word	0x0802ad98
 80266c8:	0802ae18 	.word	0x0802ae18

080266cc <_Bfree>:
 80266cc:	b570      	push	{r4, r5, r6, lr}
 80266ce:	69c6      	ldr	r6, [r0, #28]
 80266d0:	4605      	mov	r5, r0
 80266d2:	460c      	mov	r4, r1
 80266d4:	b976      	cbnz	r6, 80266f4 <_Bfree+0x28>
 80266d6:	2010      	movs	r0, #16
 80266d8:	f7ff ff04 	bl	80264e4 <malloc>
 80266dc:	4602      	mov	r2, r0
 80266de:	61e8      	str	r0, [r5, #28]
 80266e0:	b920      	cbnz	r0, 80266ec <_Bfree+0x20>
 80266e2:	4b09      	ldr	r3, [pc, #36]	; (8026708 <_Bfree+0x3c>)
 80266e4:	4809      	ldr	r0, [pc, #36]	; (802670c <_Bfree+0x40>)
 80266e6:	218f      	movs	r1, #143	; 0x8f
 80266e8:	f7fe f9f6 	bl	8024ad8 <__assert_func>
 80266ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80266f0:	6006      	str	r6, [r0, #0]
 80266f2:	60c6      	str	r6, [r0, #12]
 80266f4:	b13c      	cbz	r4, 8026706 <_Bfree+0x3a>
 80266f6:	69eb      	ldr	r3, [r5, #28]
 80266f8:	6862      	ldr	r2, [r4, #4]
 80266fa:	68db      	ldr	r3, [r3, #12]
 80266fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026700:	6021      	str	r1, [r4, #0]
 8026702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026706:	bd70      	pop	{r4, r5, r6, pc}
 8026708:	0802ad98 	.word	0x0802ad98
 802670c:	0802ae18 	.word	0x0802ae18

08026710 <__multadd>:
 8026710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026714:	690d      	ldr	r5, [r1, #16]
 8026716:	4607      	mov	r7, r0
 8026718:	460c      	mov	r4, r1
 802671a:	461e      	mov	r6, r3
 802671c:	f101 0c14 	add.w	ip, r1, #20
 8026720:	2000      	movs	r0, #0
 8026722:	f8dc 3000 	ldr.w	r3, [ip]
 8026726:	b299      	uxth	r1, r3
 8026728:	fb02 6101 	mla	r1, r2, r1, r6
 802672c:	0c1e      	lsrs	r6, r3, #16
 802672e:	0c0b      	lsrs	r3, r1, #16
 8026730:	fb02 3306 	mla	r3, r2, r6, r3
 8026734:	b289      	uxth	r1, r1
 8026736:	3001      	adds	r0, #1
 8026738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802673c:	4285      	cmp	r5, r0
 802673e:	f84c 1b04 	str.w	r1, [ip], #4
 8026742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026746:	dcec      	bgt.n	8026722 <__multadd+0x12>
 8026748:	b30e      	cbz	r6, 802678e <__multadd+0x7e>
 802674a:	68a3      	ldr	r3, [r4, #8]
 802674c:	42ab      	cmp	r3, r5
 802674e:	dc19      	bgt.n	8026784 <__multadd+0x74>
 8026750:	6861      	ldr	r1, [r4, #4]
 8026752:	4638      	mov	r0, r7
 8026754:	3101      	adds	r1, #1
 8026756:	f7ff ff79 	bl	802664c <_Balloc>
 802675a:	4680      	mov	r8, r0
 802675c:	b928      	cbnz	r0, 802676a <__multadd+0x5a>
 802675e:	4602      	mov	r2, r0
 8026760:	4b0c      	ldr	r3, [pc, #48]	; (8026794 <__multadd+0x84>)
 8026762:	480d      	ldr	r0, [pc, #52]	; (8026798 <__multadd+0x88>)
 8026764:	21ba      	movs	r1, #186	; 0xba
 8026766:	f7fe f9b7 	bl	8024ad8 <__assert_func>
 802676a:	6922      	ldr	r2, [r4, #16]
 802676c:	3202      	adds	r2, #2
 802676e:	f104 010c 	add.w	r1, r4, #12
 8026772:	0092      	lsls	r2, r2, #2
 8026774:	300c      	adds	r0, #12
 8026776:	f7fe ffd7 	bl	8025728 <memcpy>
 802677a:	4621      	mov	r1, r4
 802677c:	4638      	mov	r0, r7
 802677e:	f7ff ffa5 	bl	80266cc <_Bfree>
 8026782:	4644      	mov	r4, r8
 8026784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026788:	3501      	adds	r5, #1
 802678a:	615e      	str	r6, [r3, #20]
 802678c:	6125      	str	r5, [r4, #16]
 802678e:	4620      	mov	r0, r4
 8026790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026794:	0802ae07 	.word	0x0802ae07
 8026798:	0802ae18 	.word	0x0802ae18

0802679c <__hi0bits>:
 802679c:	0c03      	lsrs	r3, r0, #16
 802679e:	041b      	lsls	r3, r3, #16
 80267a0:	b9d3      	cbnz	r3, 80267d8 <__hi0bits+0x3c>
 80267a2:	0400      	lsls	r0, r0, #16
 80267a4:	2310      	movs	r3, #16
 80267a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80267aa:	bf04      	itt	eq
 80267ac:	0200      	lsleq	r0, r0, #8
 80267ae:	3308      	addeq	r3, #8
 80267b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80267b4:	bf04      	itt	eq
 80267b6:	0100      	lsleq	r0, r0, #4
 80267b8:	3304      	addeq	r3, #4
 80267ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80267be:	bf04      	itt	eq
 80267c0:	0080      	lsleq	r0, r0, #2
 80267c2:	3302      	addeq	r3, #2
 80267c4:	2800      	cmp	r0, #0
 80267c6:	db05      	blt.n	80267d4 <__hi0bits+0x38>
 80267c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80267cc:	f103 0301 	add.w	r3, r3, #1
 80267d0:	bf08      	it	eq
 80267d2:	2320      	moveq	r3, #32
 80267d4:	4618      	mov	r0, r3
 80267d6:	4770      	bx	lr
 80267d8:	2300      	movs	r3, #0
 80267da:	e7e4      	b.n	80267a6 <__hi0bits+0xa>

080267dc <__lo0bits>:
 80267dc:	6803      	ldr	r3, [r0, #0]
 80267de:	f013 0207 	ands.w	r2, r3, #7
 80267e2:	d00c      	beq.n	80267fe <__lo0bits+0x22>
 80267e4:	07d9      	lsls	r1, r3, #31
 80267e6:	d422      	bmi.n	802682e <__lo0bits+0x52>
 80267e8:	079a      	lsls	r2, r3, #30
 80267ea:	bf49      	itett	mi
 80267ec:	085b      	lsrmi	r3, r3, #1
 80267ee:	089b      	lsrpl	r3, r3, #2
 80267f0:	6003      	strmi	r3, [r0, #0]
 80267f2:	2201      	movmi	r2, #1
 80267f4:	bf5c      	itt	pl
 80267f6:	6003      	strpl	r3, [r0, #0]
 80267f8:	2202      	movpl	r2, #2
 80267fa:	4610      	mov	r0, r2
 80267fc:	4770      	bx	lr
 80267fe:	b299      	uxth	r1, r3
 8026800:	b909      	cbnz	r1, 8026806 <__lo0bits+0x2a>
 8026802:	0c1b      	lsrs	r3, r3, #16
 8026804:	2210      	movs	r2, #16
 8026806:	b2d9      	uxtb	r1, r3
 8026808:	b909      	cbnz	r1, 802680e <__lo0bits+0x32>
 802680a:	3208      	adds	r2, #8
 802680c:	0a1b      	lsrs	r3, r3, #8
 802680e:	0719      	lsls	r1, r3, #28
 8026810:	bf04      	itt	eq
 8026812:	091b      	lsreq	r3, r3, #4
 8026814:	3204      	addeq	r2, #4
 8026816:	0799      	lsls	r1, r3, #30
 8026818:	bf04      	itt	eq
 802681a:	089b      	lsreq	r3, r3, #2
 802681c:	3202      	addeq	r2, #2
 802681e:	07d9      	lsls	r1, r3, #31
 8026820:	d403      	bmi.n	802682a <__lo0bits+0x4e>
 8026822:	085b      	lsrs	r3, r3, #1
 8026824:	f102 0201 	add.w	r2, r2, #1
 8026828:	d003      	beq.n	8026832 <__lo0bits+0x56>
 802682a:	6003      	str	r3, [r0, #0]
 802682c:	e7e5      	b.n	80267fa <__lo0bits+0x1e>
 802682e:	2200      	movs	r2, #0
 8026830:	e7e3      	b.n	80267fa <__lo0bits+0x1e>
 8026832:	2220      	movs	r2, #32
 8026834:	e7e1      	b.n	80267fa <__lo0bits+0x1e>
	...

08026838 <__i2b>:
 8026838:	b510      	push	{r4, lr}
 802683a:	460c      	mov	r4, r1
 802683c:	2101      	movs	r1, #1
 802683e:	f7ff ff05 	bl	802664c <_Balloc>
 8026842:	4602      	mov	r2, r0
 8026844:	b928      	cbnz	r0, 8026852 <__i2b+0x1a>
 8026846:	4b05      	ldr	r3, [pc, #20]	; (802685c <__i2b+0x24>)
 8026848:	4805      	ldr	r0, [pc, #20]	; (8026860 <__i2b+0x28>)
 802684a:	f240 1145 	movw	r1, #325	; 0x145
 802684e:	f7fe f943 	bl	8024ad8 <__assert_func>
 8026852:	2301      	movs	r3, #1
 8026854:	6144      	str	r4, [r0, #20]
 8026856:	6103      	str	r3, [r0, #16]
 8026858:	bd10      	pop	{r4, pc}
 802685a:	bf00      	nop
 802685c:	0802ae07 	.word	0x0802ae07
 8026860:	0802ae18 	.word	0x0802ae18

08026864 <__multiply>:
 8026864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026868:	4691      	mov	r9, r2
 802686a:	690a      	ldr	r2, [r1, #16]
 802686c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026870:	429a      	cmp	r2, r3
 8026872:	bfb8      	it	lt
 8026874:	460b      	movlt	r3, r1
 8026876:	460c      	mov	r4, r1
 8026878:	bfbc      	itt	lt
 802687a:	464c      	movlt	r4, r9
 802687c:	4699      	movlt	r9, r3
 802687e:	6927      	ldr	r7, [r4, #16]
 8026880:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8026884:	68a3      	ldr	r3, [r4, #8]
 8026886:	6861      	ldr	r1, [r4, #4]
 8026888:	eb07 060a 	add.w	r6, r7, sl
 802688c:	42b3      	cmp	r3, r6
 802688e:	b085      	sub	sp, #20
 8026890:	bfb8      	it	lt
 8026892:	3101      	addlt	r1, #1
 8026894:	f7ff feda 	bl	802664c <_Balloc>
 8026898:	b930      	cbnz	r0, 80268a8 <__multiply+0x44>
 802689a:	4602      	mov	r2, r0
 802689c:	4b44      	ldr	r3, [pc, #272]	; (80269b0 <__multiply+0x14c>)
 802689e:	4845      	ldr	r0, [pc, #276]	; (80269b4 <__multiply+0x150>)
 80268a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80268a4:	f7fe f918 	bl	8024ad8 <__assert_func>
 80268a8:	f100 0514 	add.w	r5, r0, #20
 80268ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80268b0:	462b      	mov	r3, r5
 80268b2:	2200      	movs	r2, #0
 80268b4:	4543      	cmp	r3, r8
 80268b6:	d321      	bcc.n	80268fc <__multiply+0x98>
 80268b8:	f104 0314 	add.w	r3, r4, #20
 80268bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80268c0:	f109 0314 	add.w	r3, r9, #20
 80268c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80268c8:	9202      	str	r2, [sp, #8]
 80268ca:	1b3a      	subs	r2, r7, r4
 80268cc:	3a15      	subs	r2, #21
 80268ce:	f022 0203 	bic.w	r2, r2, #3
 80268d2:	3204      	adds	r2, #4
 80268d4:	f104 0115 	add.w	r1, r4, #21
 80268d8:	428f      	cmp	r7, r1
 80268da:	bf38      	it	cc
 80268dc:	2204      	movcc	r2, #4
 80268de:	9201      	str	r2, [sp, #4]
 80268e0:	9a02      	ldr	r2, [sp, #8]
 80268e2:	9303      	str	r3, [sp, #12]
 80268e4:	429a      	cmp	r2, r3
 80268e6:	d80c      	bhi.n	8026902 <__multiply+0x9e>
 80268e8:	2e00      	cmp	r6, #0
 80268ea:	dd03      	ble.n	80268f4 <__multiply+0x90>
 80268ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80268f0:	2b00      	cmp	r3, #0
 80268f2:	d05b      	beq.n	80269ac <__multiply+0x148>
 80268f4:	6106      	str	r6, [r0, #16]
 80268f6:	b005      	add	sp, #20
 80268f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268fc:	f843 2b04 	str.w	r2, [r3], #4
 8026900:	e7d8      	b.n	80268b4 <__multiply+0x50>
 8026902:	f8b3 a000 	ldrh.w	sl, [r3]
 8026906:	f1ba 0f00 	cmp.w	sl, #0
 802690a:	d024      	beq.n	8026956 <__multiply+0xf2>
 802690c:	f104 0e14 	add.w	lr, r4, #20
 8026910:	46a9      	mov	r9, r5
 8026912:	f04f 0c00 	mov.w	ip, #0
 8026916:	f85e 2b04 	ldr.w	r2, [lr], #4
 802691a:	f8d9 1000 	ldr.w	r1, [r9]
 802691e:	fa1f fb82 	uxth.w	fp, r2
 8026922:	b289      	uxth	r1, r1
 8026924:	fb0a 110b 	mla	r1, sl, fp, r1
 8026928:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802692c:	f8d9 2000 	ldr.w	r2, [r9]
 8026930:	4461      	add	r1, ip
 8026932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8026936:	fb0a c20b 	mla	r2, sl, fp, ip
 802693a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802693e:	b289      	uxth	r1, r1
 8026940:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8026944:	4577      	cmp	r7, lr
 8026946:	f849 1b04 	str.w	r1, [r9], #4
 802694a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802694e:	d8e2      	bhi.n	8026916 <__multiply+0xb2>
 8026950:	9a01      	ldr	r2, [sp, #4]
 8026952:	f845 c002 	str.w	ip, [r5, r2]
 8026956:	9a03      	ldr	r2, [sp, #12]
 8026958:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802695c:	3304      	adds	r3, #4
 802695e:	f1b9 0f00 	cmp.w	r9, #0
 8026962:	d021      	beq.n	80269a8 <__multiply+0x144>
 8026964:	6829      	ldr	r1, [r5, #0]
 8026966:	f104 0c14 	add.w	ip, r4, #20
 802696a:	46ae      	mov	lr, r5
 802696c:	f04f 0a00 	mov.w	sl, #0
 8026970:	f8bc b000 	ldrh.w	fp, [ip]
 8026974:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026978:	fb09 220b 	mla	r2, r9, fp, r2
 802697c:	4452      	add	r2, sl
 802697e:	b289      	uxth	r1, r1
 8026980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8026984:	f84e 1b04 	str.w	r1, [lr], #4
 8026988:	f85c 1b04 	ldr.w	r1, [ip], #4
 802698c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8026990:	f8be 1000 	ldrh.w	r1, [lr]
 8026994:	fb09 110a 	mla	r1, r9, sl, r1
 8026998:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802699c:	4567      	cmp	r7, ip
 802699e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80269a2:	d8e5      	bhi.n	8026970 <__multiply+0x10c>
 80269a4:	9a01      	ldr	r2, [sp, #4]
 80269a6:	50a9      	str	r1, [r5, r2]
 80269a8:	3504      	adds	r5, #4
 80269aa:	e799      	b.n	80268e0 <__multiply+0x7c>
 80269ac:	3e01      	subs	r6, #1
 80269ae:	e79b      	b.n	80268e8 <__multiply+0x84>
 80269b0:	0802ae07 	.word	0x0802ae07
 80269b4:	0802ae18 	.word	0x0802ae18

080269b8 <__pow5mult>:
 80269b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269bc:	4615      	mov	r5, r2
 80269be:	f012 0203 	ands.w	r2, r2, #3
 80269c2:	4606      	mov	r6, r0
 80269c4:	460f      	mov	r7, r1
 80269c6:	d007      	beq.n	80269d8 <__pow5mult+0x20>
 80269c8:	4c25      	ldr	r4, [pc, #148]	; (8026a60 <__pow5mult+0xa8>)
 80269ca:	3a01      	subs	r2, #1
 80269cc:	2300      	movs	r3, #0
 80269ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80269d2:	f7ff fe9d 	bl	8026710 <__multadd>
 80269d6:	4607      	mov	r7, r0
 80269d8:	10ad      	asrs	r5, r5, #2
 80269da:	d03d      	beq.n	8026a58 <__pow5mult+0xa0>
 80269dc:	69f4      	ldr	r4, [r6, #28]
 80269de:	b97c      	cbnz	r4, 8026a00 <__pow5mult+0x48>
 80269e0:	2010      	movs	r0, #16
 80269e2:	f7ff fd7f 	bl	80264e4 <malloc>
 80269e6:	4602      	mov	r2, r0
 80269e8:	61f0      	str	r0, [r6, #28]
 80269ea:	b928      	cbnz	r0, 80269f8 <__pow5mult+0x40>
 80269ec:	4b1d      	ldr	r3, [pc, #116]	; (8026a64 <__pow5mult+0xac>)
 80269ee:	481e      	ldr	r0, [pc, #120]	; (8026a68 <__pow5mult+0xb0>)
 80269f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80269f4:	f7fe f870 	bl	8024ad8 <__assert_func>
 80269f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80269fc:	6004      	str	r4, [r0, #0]
 80269fe:	60c4      	str	r4, [r0, #12]
 8026a00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8026a04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026a08:	b94c      	cbnz	r4, 8026a1e <__pow5mult+0x66>
 8026a0a:	f240 2171 	movw	r1, #625	; 0x271
 8026a0e:	4630      	mov	r0, r6
 8026a10:	f7ff ff12 	bl	8026838 <__i2b>
 8026a14:	2300      	movs	r3, #0
 8026a16:	f8c8 0008 	str.w	r0, [r8, #8]
 8026a1a:	4604      	mov	r4, r0
 8026a1c:	6003      	str	r3, [r0, #0]
 8026a1e:	f04f 0900 	mov.w	r9, #0
 8026a22:	07eb      	lsls	r3, r5, #31
 8026a24:	d50a      	bpl.n	8026a3c <__pow5mult+0x84>
 8026a26:	4639      	mov	r1, r7
 8026a28:	4622      	mov	r2, r4
 8026a2a:	4630      	mov	r0, r6
 8026a2c:	f7ff ff1a 	bl	8026864 <__multiply>
 8026a30:	4639      	mov	r1, r7
 8026a32:	4680      	mov	r8, r0
 8026a34:	4630      	mov	r0, r6
 8026a36:	f7ff fe49 	bl	80266cc <_Bfree>
 8026a3a:	4647      	mov	r7, r8
 8026a3c:	106d      	asrs	r5, r5, #1
 8026a3e:	d00b      	beq.n	8026a58 <__pow5mult+0xa0>
 8026a40:	6820      	ldr	r0, [r4, #0]
 8026a42:	b938      	cbnz	r0, 8026a54 <__pow5mult+0x9c>
 8026a44:	4622      	mov	r2, r4
 8026a46:	4621      	mov	r1, r4
 8026a48:	4630      	mov	r0, r6
 8026a4a:	f7ff ff0b 	bl	8026864 <__multiply>
 8026a4e:	6020      	str	r0, [r4, #0]
 8026a50:	f8c0 9000 	str.w	r9, [r0]
 8026a54:	4604      	mov	r4, r0
 8026a56:	e7e4      	b.n	8026a22 <__pow5mult+0x6a>
 8026a58:	4638      	mov	r0, r7
 8026a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a5e:	bf00      	nop
 8026a60:	0802af68 	.word	0x0802af68
 8026a64:	0802ad98 	.word	0x0802ad98
 8026a68:	0802ae18 	.word	0x0802ae18

08026a6c <__lshift>:
 8026a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026a70:	460c      	mov	r4, r1
 8026a72:	6849      	ldr	r1, [r1, #4]
 8026a74:	6923      	ldr	r3, [r4, #16]
 8026a76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026a7a:	68a3      	ldr	r3, [r4, #8]
 8026a7c:	4607      	mov	r7, r0
 8026a7e:	4691      	mov	r9, r2
 8026a80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026a84:	f108 0601 	add.w	r6, r8, #1
 8026a88:	42b3      	cmp	r3, r6
 8026a8a:	db0b      	blt.n	8026aa4 <__lshift+0x38>
 8026a8c:	4638      	mov	r0, r7
 8026a8e:	f7ff fddd 	bl	802664c <_Balloc>
 8026a92:	4605      	mov	r5, r0
 8026a94:	b948      	cbnz	r0, 8026aaa <__lshift+0x3e>
 8026a96:	4602      	mov	r2, r0
 8026a98:	4b28      	ldr	r3, [pc, #160]	; (8026b3c <__lshift+0xd0>)
 8026a9a:	4829      	ldr	r0, [pc, #164]	; (8026b40 <__lshift+0xd4>)
 8026a9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8026aa0:	f7fe f81a 	bl	8024ad8 <__assert_func>
 8026aa4:	3101      	adds	r1, #1
 8026aa6:	005b      	lsls	r3, r3, #1
 8026aa8:	e7ee      	b.n	8026a88 <__lshift+0x1c>
 8026aaa:	2300      	movs	r3, #0
 8026aac:	f100 0114 	add.w	r1, r0, #20
 8026ab0:	f100 0210 	add.w	r2, r0, #16
 8026ab4:	4618      	mov	r0, r3
 8026ab6:	4553      	cmp	r3, sl
 8026ab8:	db33      	blt.n	8026b22 <__lshift+0xb6>
 8026aba:	6920      	ldr	r0, [r4, #16]
 8026abc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026ac0:	f104 0314 	add.w	r3, r4, #20
 8026ac4:	f019 091f 	ands.w	r9, r9, #31
 8026ac8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026acc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026ad0:	d02b      	beq.n	8026b2a <__lshift+0xbe>
 8026ad2:	f1c9 0e20 	rsb	lr, r9, #32
 8026ad6:	468a      	mov	sl, r1
 8026ad8:	2200      	movs	r2, #0
 8026ada:	6818      	ldr	r0, [r3, #0]
 8026adc:	fa00 f009 	lsl.w	r0, r0, r9
 8026ae0:	4310      	orrs	r0, r2
 8026ae2:	f84a 0b04 	str.w	r0, [sl], #4
 8026ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8026aea:	459c      	cmp	ip, r3
 8026aec:	fa22 f20e 	lsr.w	r2, r2, lr
 8026af0:	d8f3      	bhi.n	8026ada <__lshift+0x6e>
 8026af2:	ebac 0304 	sub.w	r3, ip, r4
 8026af6:	3b15      	subs	r3, #21
 8026af8:	f023 0303 	bic.w	r3, r3, #3
 8026afc:	3304      	adds	r3, #4
 8026afe:	f104 0015 	add.w	r0, r4, #21
 8026b02:	4584      	cmp	ip, r0
 8026b04:	bf38      	it	cc
 8026b06:	2304      	movcc	r3, #4
 8026b08:	50ca      	str	r2, [r1, r3]
 8026b0a:	b10a      	cbz	r2, 8026b10 <__lshift+0xa4>
 8026b0c:	f108 0602 	add.w	r6, r8, #2
 8026b10:	3e01      	subs	r6, #1
 8026b12:	4638      	mov	r0, r7
 8026b14:	612e      	str	r6, [r5, #16]
 8026b16:	4621      	mov	r1, r4
 8026b18:	f7ff fdd8 	bl	80266cc <_Bfree>
 8026b1c:	4628      	mov	r0, r5
 8026b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026b22:	f842 0f04 	str.w	r0, [r2, #4]!
 8026b26:	3301      	adds	r3, #1
 8026b28:	e7c5      	b.n	8026ab6 <__lshift+0x4a>
 8026b2a:	3904      	subs	r1, #4
 8026b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8026b30:	f841 2f04 	str.w	r2, [r1, #4]!
 8026b34:	459c      	cmp	ip, r3
 8026b36:	d8f9      	bhi.n	8026b2c <__lshift+0xc0>
 8026b38:	e7ea      	b.n	8026b10 <__lshift+0xa4>
 8026b3a:	bf00      	nop
 8026b3c:	0802ae07 	.word	0x0802ae07
 8026b40:	0802ae18 	.word	0x0802ae18

08026b44 <__mcmp>:
 8026b44:	b530      	push	{r4, r5, lr}
 8026b46:	6902      	ldr	r2, [r0, #16]
 8026b48:	690c      	ldr	r4, [r1, #16]
 8026b4a:	1b12      	subs	r2, r2, r4
 8026b4c:	d10e      	bne.n	8026b6c <__mcmp+0x28>
 8026b4e:	f100 0314 	add.w	r3, r0, #20
 8026b52:	3114      	adds	r1, #20
 8026b54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026b58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026b5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026b60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026b64:	42a5      	cmp	r5, r4
 8026b66:	d003      	beq.n	8026b70 <__mcmp+0x2c>
 8026b68:	d305      	bcc.n	8026b76 <__mcmp+0x32>
 8026b6a:	2201      	movs	r2, #1
 8026b6c:	4610      	mov	r0, r2
 8026b6e:	bd30      	pop	{r4, r5, pc}
 8026b70:	4283      	cmp	r3, r0
 8026b72:	d3f3      	bcc.n	8026b5c <__mcmp+0x18>
 8026b74:	e7fa      	b.n	8026b6c <__mcmp+0x28>
 8026b76:	f04f 32ff 	mov.w	r2, #4294967295
 8026b7a:	e7f7      	b.n	8026b6c <__mcmp+0x28>

08026b7c <__mdiff>:
 8026b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b80:	460c      	mov	r4, r1
 8026b82:	4606      	mov	r6, r0
 8026b84:	4611      	mov	r1, r2
 8026b86:	4620      	mov	r0, r4
 8026b88:	4690      	mov	r8, r2
 8026b8a:	f7ff ffdb 	bl	8026b44 <__mcmp>
 8026b8e:	1e05      	subs	r5, r0, #0
 8026b90:	d110      	bne.n	8026bb4 <__mdiff+0x38>
 8026b92:	4629      	mov	r1, r5
 8026b94:	4630      	mov	r0, r6
 8026b96:	f7ff fd59 	bl	802664c <_Balloc>
 8026b9a:	b930      	cbnz	r0, 8026baa <__mdiff+0x2e>
 8026b9c:	4b3a      	ldr	r3, [pc, #232]	; (8026c88 <__mdiff+0x10c>)
 8026b9e:	4602      	mov	r2, r0
 8026ba0:	f240 2137 	movw	r1, #567	; 0x237
 8026ba4:	4839      	ldr	r0, [pc, #228]	; (8026c8c <__mdiff+0x110>)
 8026ba6:	f7fd ff97 	bl	8024ad8 <__assert_func>
 8026baa:	2301      	movs	r3, #1
 8026bac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bb4:	bfa4      	itt	ge
 8026bb6:	4643      	movge	r3, r8
 8026bb8:	46a0      	movge	r8, r4
 8026bba:	4630      	mov	r0, r6
 8026bbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026bc0:	bfa6      	itte	ge
 8026bc2:	461c      	movge	r4, r3
 8026bc4:	2500      	movge	r5, #0
 8026bc6:	2501      	movlt	r5, #1
 8026bc8:	f7ff fd40 	bl	802664c <_Balloc>
 8026bcc:	b920      	cbnz	r0, 8026bd8 <__mdiff+0x5c>
 8026bce:	4b2e      	ldr	r3, [pc, #184]	; (8026c88 <__mdiff+0x10c>)
 8026bd0:	4602      	mov	r2, r0
 8026bd2:	f240 2145 	movw	r1, #581	; 0x245
 8026bd6:	e7e5      	b.n	8026ba4 <__mdiff+0x28>
 8026bd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8026bdc:	6926      	ldr	r6, [r4, #16]
 8026bde:	60c5      	str	r5, [r0, #12]
 8026be0:	f104 0914 	add.w	r9, r4, #20
 8026be4:	f108 0514 	add.w	r5, r8, #20
 8026be8:	f100 0e14 	add.w	lr, r0, #20
 8026bec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8026bf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8026bf4:	f108 0210 	add.w	r2, r8, #16
 8026bf8:	46f2      	mov	sl, lr
 8026bfa:	2100      	movs	r1, #0
 8026bfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8026c00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026c04:	fa11 f88b 	uxtah	r8, r1, fp
 8026c08:	b299      	uxth	r1, r3
 8026c0a:	0c1b      	lsrs	r3, r3, #16
 8026c0c:	eba8 0801 	sub.w	r8, r8, r1
 8026c10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8026c14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8026c18:	fa1f f888 	uxth.w	r8, r8
 8026c1c:	1419      	asrs	r1, r3, #16
 8026c1e:	454e      	cmp	r6, r9
 8026c20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8026c24:	f84a 3b04 	str.w	r3, [sl], #4
 8026c28:	d8e8      	bhi.n	8026bfc <__mdiff+0x80>
 8026c2a:	1b33      	subs	r3, r6, r4
 8026c2c:	3b15      	subs	r3, #21
 8026c2e:	f023 0303 	bic.w	r3, r3, #3
 8026c32:	3304      	adds	r3, #4
 8026c34:	3415      	adds	r4, #21
 8026c36:	42a6      	cmp	r6, r4
 8026c38:	bf38      	it	cc
 8026c3a:	2304      	movcc	r3, #4
 8026c3c:	441d      	add	r5, r3
 8026c3e:	4473      	add	r3, lr
 8026c40:	469e      	mov	lr, r3
 8026c42:	462e      	mov	r6, r5
 8026c44:	4566      	cmp	r6, ip
 8026c46:	d30e      	bcc.n	8026c66 <__mdiff+0xea>
 8026c48:	f10c 0203 	add.w	r2, ip, #3
 8026c4c:	1b52      	subs	r2, r2, r5
 8026c4e:	f022 0203 	bic.w	r2, r2, #3
 8026c52:	3d03      	subs	r5, #3
 8026c54:	45ac      	cmp	ip, r5
 8026c56:	bf38      	it	cc
 8026c58:	2200      	movcc	r2, #0
 8026c5a:	4413      	add	r3, r2
 8026c5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8026c60:	b17a      	cbz	r2, 8026c82 <__mdiff+0x106>
 8026c62:	6107      	str	r7, [r0, #16]
 8026c64:	e7a4      	b.n	8026bb0 <__mdiff+0x34>
 8026c66:	f856 8b04 	ldr.w	r8, [r6], #4
 8026c6a:	fa11 f288 	uxtah	r2, r1, r8
 8026c6e:	1414      	asrs	r4, r2, #16
 8026c70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8026c74:	b292      	uxth	r2, r2
 8026c76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8026c7a:	f84e 2b04 	str.w	r2, [lr], #4
 8026c7e:	1421      	asrs	r1, r4, #16
 8026c80:	e7e0      	b.n	8026c44 <__mdiff+0xc8>
 8026c82:	3f01      	subs	r7, #1
 8026c84:	e7ea      	b.n	8026c5c <__mdiff+0xe0>
 8026c86:	bf00      	nop
 8026c88:	0802ae07 	.word	0x0802ae07
 8026c8c:	0802ae18 	.word	0x0802ae18

08026c90 <__d2b>:
 8026c90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026c94:	460f      	mov	r7, r1
 8026c96:	2101      	movs	r1, #1
 8026c98:	ec59 8b10 	vmov	r8, r9, d0
 8026c9c:	4616      	mov	r6, r2
 8026c9e:	f7ff fcd5 	bl	802664c <_Balloc>
 8026ca2:	4604      	mov	r4, r0
 8026ca4:	b930      	cbnz	r0, 8026cb4 <__d2b+0x24>
 8026ca6:	4602      	mov	r2, r0
 8026ca8:	4b24      	ldr	r3, [pc, #144]	; (8026d3c <__d2b+0xac>)
 8026caa:	4825      	ldr	r0, [pc, #148]	; (8026d40 <__d2b+0xb0>)
 8026cac:	f240 310f 	movw	r1, #783	; 0x30f
 8026cb0:	f7fd ff12 	bl	8024ad8 <__assert_func>
 8026cb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026cbc:	bb2d      	cbnz	r5, 8026d0a <__d2b+0x7a>
 8026cbe:	9301      	str	r3, [sp, #4]
 8026cc0:	f1b8 0300 	subs.w	r3, r8, #0
 8026cc4:	d026      	beq.n	8026d14 <__d2b+0x84>
 8026cc6:	4668      	mov	r0, sp
 8026cc8:	9300      	str	r3, [sp, #0]
 8026cca:	f7ff fd87 	bl	80267dc <__lo0bits>
 8026cce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026cd2:	b1e8      	cbz	r0, 8026d10 <__d2b+0x80>
 8026cd4:	f1c0 0320 	rsb	r3, r0, #32
 8026cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8026cdc:	430b      	orrs	r3, r1
 8026cde:	40c2      	lsrs	r2, r0
 8026ce0:	6163      	str	r3, [r4, #20]
 8026ce2:	9201      	str	r2, [sp, #4]
 8026ce4:	9b01      	ldr	r3, [sp, #4]
 8026ce6:	61a3      	str	r3, [r4, #24]
 8026ce8:	2b00      	cmp	r3, #0
 8026cea:	bf14      	ite	ne
 8026cec:	2202      	movne	r2, #2
 8026cee:	2201      	moveq	r2, #1
 8026cf0:	6122      	str	r2, [r4, #16]
 8026cf2:	b1bd      	cbz	r5, 8026d24 <__d2b+0x94>
 8026cf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8026cf8:	4405      	add	r5, r0
 8026cfa:	603d      	str	r5, [r7, #0]
 8026cfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026d00:	6030      	str	r0, [r6, #0]
 8026d02:	4620      	mov	r0, r4
 8026d04:	b003      	add	sp, #12
 8026d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026d0e:	e7d6      	b.n	8026cbe <__d2b+0x2e>
 8026d10:	6161      	str	r1, [r4, #20]
 8026d12:	e7e7      	b.n	8026ce4 <__d2b+0x54>
 8026d14:	a801      	add	r0, sp, #4
 8026d16:	f7ff fd61 	bl	80267dc <__lo0bits>
 8026d1a:	9b01      	ldr	r3, [sp, #4]
 8026d1c:	6163      	str	r3, [r4, #20]
 8026d1e:	3020      	adds	r0, #32
 8026d20:	2201      	movs	r2, #1
 8026d22:	e7e5      	b.n	8026cf0 <__d2b+0x60>
 8026d24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026d28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026d2c:	6038      	str	r0, [r7, #0]
 8026d2e:	6918      	ldr	r0, [r3, #16]
 8026d30:	f7ff fd34 	bl	802679c <__hi0bits>
 8026d34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026d38:	e7e2      	b.n	8026d00 <__d2b+0x70>
 8026d3a:	bf00      	nop
 8026d3c:	0802ae07 	.word	0x0802ae07
 8026d40:	0802ae18 	.word	0x0802ae18

08026d44 <__ssputs_r>:
 8026d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026d48:	688e      	ldr	r6, [r1, #8]
 8026d4a:	461f      	mov	r7, r3
 8026d4c:	42be      	cmp	r6, r7
 8026d4e:	680b      	ldr	r3, [r1, #0]
 8026d50:	4682      	mov	sl, r0
 8026d52:	460c      	mov	r4, r1
 8026d54:	4690      	mov	r8, r2
 8026d56:	d82c      	bhi.n	8026db2 <__ssputs_r+0x6e>
 8026d58:	898a      	ldrh	r2, [r1, #12]
 8026d5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026d5e:	d026      	beq.n	8026dae <__ssputs_r+0x6a>
 8026d60:	6965      	ldr	r5, [r4, #20]
 8026d62:	6909      	ldr	r1, [r1, #16]
 8026d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026d68:	eba3 0901 	sub.w	r9, r3, r1
 8026d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026d70:	1c7b      	adds	r3, r7, #1
 8026d72:	444b      	add	r3, r9
 8026d74:	106d      	asrs	r5, r5, #1
 8026d76:	429d      	cmp	r5, r3
 8026d78:	bf38      	it	cc
 8026d7a:	461d      	movcc	r5, r3
 8026d7c:	0553      	lsls	r3, r2, #21
 8026d7e:	d527      	bpl.n	8026dd0 <__ssputs_r+0x8c>
 8026d80:	4629      	mov	r1, r5
 8026d82:	f7ff fbd7 	bl	8026534 <_malloc_r>
 8026d86:	4606      	mov	r6, r0
 8026d88:	b360      	cbz	r0, 8026de4 <__ssputs_r+0xa0>
 8026d8a:	6921      	ldr	r1, [r4, #16]
 8026d8c:	464a      	mov	r2, r9
 8026d8e:	f7fe fccb 	bl	8025728 <memcpy>
 8026d92:	89a3      	ldrh	r3, [r4, #12]
 8026d94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026d9c:	81a3      	strh	r3, [r4, #12]
 8026d9e:	6126      	str	r6, [r4, #16]
 8026da0:	6165      	str	r5, [r4, #20]
 8026da2:	444e      	add	r6, r9
 8026da4:	eba5 0509 	sub.w	r5, r5, r9
 8026da8:	6026      	str	r6, [r4, #0]
 8026daa:	60a5      	str	r5, [r4, #8]
 8026dac:	463e      	mov	r6, r7
 8026dae:	42be      	cmp	r6, r7
 8026db0:	d900      	bls.n	8026db4 <__ssputs_r+0x70>
 8026db2:	463e      	mov	r6, r7
 8026db4:	6820      	ldr	r0, [r4, #0]
 8026db6:	4632      	mov	r2, r6
 8026db8:	4641      	mov	r1, r8
 8026dba:	f000 fba3 	bl	8027504 <memmove>
 8026dbe:	68a3      	ldr	r3, [r4, #8]
 8026dc0:	1b9b      	subs	r3, r3, r6
 8026dc2:	60a3      	str	r3, [r4, #8]
 8026dc4:	6823      	ldr	r3, [r4, #0]
 8026dc6:	4433      	add	r3, r6
 8026dc8:	6023      	str	r3, [r4, #0]
 8026dca:	2000      	movs	r0, #0
 8026dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026dd0:	462a      	mov	r2, r5
 8026dd2:	f000 fc2d 	bl	8027630 <_realloc_r>
 8026dd6:	4606      	mov	r6, r0
 8026dd8:	2800      	cmp	r0, #0
 8026dda:	d1e0      	bne.n	8026d9e <__ssputs_r+0x5a>
 8026ddc:	6921      	ldr	r1, [r4, #16]
 8026dde:	4650      	mov	r0, sl
 8026de0:	f7ff fb34 	bl	802644c <_free_r>
 8026de4:	230c      	movs	r3, #12
 8026de6:	f8ca 3000 	str.w	r3, [sl]
 8026dea:	89a3      	ldrh	r3, [r4, #12]
 8026dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026df0:	81a3      	strh	r3, [r4, #12]
 8026df2:	f04f 30ff 	mov.w	r0, #4294967295
 8026df6:	e7e9      	b.n	8026dcc <__ssputs_r+0x88>

08026df8 <_svfiprintf_r>:
 8026df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dfc:	4698      	mov	r8, r3
 8026dfe:	898b      	ldrh	r3, [r1, #12]
 8026e00:	061b      	lsls	r3, r3, #24
 8026e02:	b09d      	sub	sp, #116	; 0x74
 8026e04:	4607      	mov	r7, r0
 8026e06:	460d      	mov	r5, r1
 8026e08:	4614      	mov	r4, r2
 8026e0a:	d50e      	bpl.n	8026e2a <_svfiprintf_r+0x32>
 8026e0c:	690b      	ldr	r3, [r1, #16]
 8026e0e:	b963      	cbnz	r3, 8026e2a <_svfiprintf_r+0x32>
 8026e10:	2140      	movs	r1, #64	; 0x40
 8026e12:	f7ff fb8f 	bl	8026534 <_malloc_r>
 8026e16:	6028      	str	r0, [r5, #0]
 8026e18:	6128      	str	r0, [r5, #16]
 8026e1a:	b920      	cbnz	r0, 8026e26 <_svfiprintf_r+0x2e>
 8026e1c:	230c      	movs	r3, #12
 8026e1e:	603b      	str	r3, [r7, #0]
 8026e20:	f04f 30ff 	mov.w	r0, #4294967295
 8026e24:	e0d0      	b.n	8026fc8 <_svfiprintf_r+0x1d0>
 8026e26:	2340      	movs	r3, #64	; 0x40
 8026e28:	616b      	str	r3, [r5, #20]
 8026e2a:	2300      	movs	r3, #0
 8026e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8026e2e:	2320      	movs	r3, #32
 8026e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8026e38:	2330      	movs	r3, #48	; 0x30
 8026e3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8026fe0 <_svfiprintf_r+0x1e8>
 8026e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026e42:	f04f 0901 	mov.w	r9, #1
 8026e46:	4623      	mov	r3, r4
 8026e48:	469a      	mov	sl, r3
 8026e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026e4e:	b10a      	cbz	r2, 8026e54 <_svfiprintf_r+0x5c>
 8026e50:	2a25      	cmp	r2, #37	; 0x25
 8026e52:	d1f9      	bne.n	8026e48 <_svfiprintf_r+0x50>
 8026e54:	ebba 0b04 	subs.w	fp, sl, r4
 8026e58:	d00b      	beq.n	8026e72 <_svfiprintf_r+0x7a>
 8026e5a:	465b      	mov	r3, fp
 8026e5c:	4622      	mov	r2, r4
 8026e5e:	4629      	mov	r1, r5
 8026e60:	4638      	mov	r0, r7
 8026e62:	f7ff ff6f 	bl	8026d44 <__ssputs_r>
 8026e66:	3001      	adds	r0, #1
 8026e68:	f000 80a9 	beq.w	8026fbe <_svfiprintf_r+0x1c6>
 8026e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e6e:	445a      	add	r2, fp
 8026e70:	9209      	str	r2, [sp, #36]	; 0x24
 8026e72:	f89a 3000 	ldrb.w	r3, [sl]
 8026e76:	2b00      	cmp	r3, #0
 8026e78:	f000 80a1 	beq.w	8026fbe <_svfiprintf_r+0x1c6>
 8026e7c:	2300      	movs	r3, #0
 8026e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8026e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026e86:	f10a 0a01 	add.w	sl, sl, #1
 8026e8a:	9304      	str	r3, [sp, #16]
 8026e8c:	9307      	str	r3, [sp, #28]
 8026e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026e92:	931a      	str	r3, [sp, #104]	; 0x68
 8026e94:	4654      	mov	r4, sl
 8026e96:	2205      	movs	r2, #5
 8026e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e9c:	4850      	ldr	r0, [pc, #320]	; (8026fe0 <_svfiprintf_r+0x1e8>)
 8026e9e:	f7d9 f9bf 	bl	8000220 <memchr>
 8026ea2:	9a04      	ldr	r2, [sp, #16]
 8026ea4:	b9d8      	cbnz	r0, 8026ede <_svfiprintf_r+0xe6>
 8026ea6:	06d0      	lsls	r0, r2, #27
 8026ea8:	bf44      	itt	mi
 8026eaa:	2320      	movmi	r3, #32
 8026eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026eb0:	0711      	lsls	r1, r2, #28
 8026eb2:	bf44      	itt	mi
 8026eb4:	232b      	movmi	r3, #43	; 0x2b
 8026eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026eba:	f89a 3000 	ldrb.w	r3, [sl]
 8026ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8026ec0:	d015      	beq.n	8026eee <_svfiprintf_r+0xf6>
 8026ec2:	9a07      	ldr	r2, [sp, #28]
 8026ec4:	4654      	mov	r4, sl
 8026ec6:	2000      	movs	r0, #0
 8026ec8:	f04f 0c0a 	mov.w	ip, #10
 8026ecc:	4621      	mov	r1, r4
 8026ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026ed2:	3b30      	subs	r3, #48	; 0x30
 8026ed4:	2b09      	cmp	r3, #9
 8026ed6:	d94d      	bls.n	8026f74 <_svfiprintf_r+0x17c>
 8026ed8:	b1b0      	cbz	r0, 8026f08 <_svfiprintf_r+0x110>
 8026eda:	9207      	str	r2, [sp, #28]
 8026edc:	e014      	b.n	8026f08 <_svfiprintf_r+0x110>
 8026ede:	eba0 0308 	sub.w	r3, r0, r8
 8026ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8026ee6:	4313      	orrs	r3, r2
 8026ee8:	9304      	str	r3, [sp, #16]
 8026eea:	46a2      	mov	sl, r4
 8026eec:	e7d2      	b.n	8026e94 <_svfiprintf_r+0x9c>
 8026eee:	9b03      	ldr	r3, [sp, #12]
 8026ef0:	1d19      	adds	r1, r3, #4
 8026ef2:	681b      	ldr	r3, [r3, #0]
 8026ef4:	9103      	str	r1, [sp, #12]
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	bfbb      	ittet	lt
 8026efa:	425b      	neglt	r3, r3
 8026efc:	f042 0202 	orrlt.w	r2, r2, #2
 8026f00:	9307      	strge	r3, [sp, #28]
 8026f02:	9307      	strlt	r3, [sp, #28]
 8026f04:	bfb8      	it	lt
 8026f06:	9204      	strlt	r2, [sp, #16]
 8026f08:	7823      	ldrb	r3, [r4, #0]
 8026f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8026f0c:	d10c      	bne.n	8026f28 <_svfiprintf_r+0x130>
 8026f0e:	7863      	ldrb	r3, [r4, #1]
 8026f10:	2b2a      	cmp	r3, #42	; 0x2a
 8026f12:	d134      	bne.n	8026f7e <_svfiprintf_r+0x186>
 8026f14:	9b03      	ldr	r3, [sp, #12]
 8026f16:	1d1a      	adds	r2, r3, #4
 8026f18:	681b      	ldr	r3, [r3, #0]
 8026f1a:	9203      	str	r2, [sp, #12]
 8026f1c:	2b00      	cmp	r3, #0
 8026f1e:	bfb8      	it	lt
 8026f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8026f24:	3402      	adds	r4, #2
 8026f26:	9305      	str	r3, [sp, #20]
 8026f28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8026ff0 <_svfiprintf_r+0x1f8>
 8026f2c:	7821      	ldrb	r1, [r4, #0]
 8026f2e:	2203      	movs	r2, #3
 8026f30:	4650      	mov	r0, sl
 8026f32:	f7d9 f975 	bl	8000220 <memchr>
 8026f36:	b138      	cbz	r0, 8026f48 <_svfiprintf_r+0x150>
 8026f38:	9b04      	ldr	r3, [sp, #16]
 8026f3a:	eba0 000a 	sub.w	r0, r0, sl
 8026f3e:	2240      	movs	r2, #64	; 0x40
 8026f40:	4082      	lsls	r2, r0
 8026f42:	4313      	orrs	r3, r2
 8026f44:	3401      	adds	r4, #1
 8026f46:	9304      	str	r3, [sp, #16]
 8026f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026f4c:	4825      	ldr	r0, [pc, #148]	; (8026fe4 <_svfiprintf_r+0x1ec>)
 8026f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026f52:	2206      	movs	r2, #6
 8026f54:	f7d9 f964 	bl	8000220 <memchr>
 8026f58:	2800      	cmp	r0, #0
 8026f5a:	d038      	beq.n	8026fce <_svfiprintf_r+0x1d6>
 8026f5c:	4b22      	ldr	r3, [pc, #136]	; (8026fe8 <_svfiprintf_r+0x1f0>)
 8026f5e:	bb1b      	cbnz	r3, 8026fa8 <_svfiprintf_r+0x1b0>
 8026f60:	9b03      	ldr	r3, [sp, #12]
 8026f62:	3307      	adds	r3, #7
 8026f64:	f023 0307 	bic.w	r3, r3, #7
 8026f68:	3308      	adds	r3, #8
 8026f6a:	9303      	str	r3, [sp, #12]
 8026f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f6e:	4433      	add	r3, r6
 8026f70:	9309      	str	r3, [sp, #36]	; 0x24
 8026f72:	e768      	b.n	8026e46 <_svfiprintf_r+0x4e>
 8026f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8026f78:	460c      	mov	r4, r1
 8026f7a:	2001      	movs	r0, #1
 8026f7c:	e7a6      	b.n	8026ecc <_svfiprintf_r+0xd4>
 8026f7e:	2300      	movs	r3, #0
 8026f80:	3401      	adds	r4, #1
 8026f82:	9305      	str	r3, [sp, #20]
 8026f84:	4619      	mov	r1, r3
 8026f86:	f04f 0c0a 	mov.w	ip, #10
 8026f8a:	4620      	mov	r0, r4
 8026f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026f90:	3a30      	subs	r2, #48	; 0x30
 8026f92:	2a09      	cmp	r2, #9
 8026f94:	d903      	bls.n	8026f9e <_svfiprintf_r+0x1a6>
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	d0c6      	beq.n	8026f28 <_svfiprintf_r+0x130>
 8026f9a:	9105      	str	r1, [sp, #20]
 8026f9c:	e7c4      	b.n	8026f28 <_svfiprintf_r+0x130>
 8026f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026fa2:	4604      	mov	r4, r0
 8026fa4:	2301      	movs	r3, #1
 8026fa6:	e7f0      	b.n	8026f8a <_svfiprintf_r+0x192>
 8026fa8:	ab03      	add	r3, sp, #12
 8026faa:	9300      	str	r3, [sp, #0]
 8026fac:	462a      	mov	r2, r5
 8026fae:	4b0f      	ldr	r3, [pc, #60]	; (8026fec <_svfiprintf_r+0x1f4>)
 8026fb0:	a904      	add	r1, sp, #16
 8026fb2:	4638      	mov	r0, r7
 8026fb4:	f7fd fe4e 	bl	8024c54 <_printf_float>
 8026fb8:	1c42      	adds	r2, r0, #1
 8026fba:	4606      	mov	r6, r0
 8026fbc:	d1d6      	bne.n	8026f6c <_svfiprintf_r+0x174>
 8026fbe:	89ab      	ldrh	r3, [r5, #12]
 8026fc0:	065b      	lsls	r3, r3, #25
 8026fc2:	f53f af2d 	bmi.w	8026e20 <_svfiprintf_r+0x28>
 8026fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026fc8:	b01d      	add	sp, #116	; 0x74
 8026fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fce:	ab03      	add	r3, sp, #12
 8026fd0:	9300      	str	r3, [sp, #0]
 8026fd2:	462a      	mov	r2, r5
 8026fd4:	4b05      	ldr	r3, [pc, #20]	; (8026fec <_svfiprintf_r+0x1f4>)
 8026fd6:	a904      	add	r1, sp, #16
 8026fd8:	4638      	mov	r0, r7
 8026fda:	f7fe f8df 	bl	802519c <_printf_i>
 8026fde:	e7eb      	b.n	8026fb8 <_svfiprintf_r+0x1c0>
 8026fe0:	0802af74 	.word	0x0802af74
 8026fe4:	0802af7e 	.word	0x0802af7e
 8026fe8:	08024c55 	.word	0x08024c55
 8026fec:	08026d45 	.word	0x08026d45
 8026ff0:	0802af7a 	.word	0x0802af7a

08026ff4 <__sfputc_r>:
 8026ff4:	6893      	ldr	r3, [r2, #8]
 8026ff6:	3b01      	subs	r3, #1
 8026ff8:	2b00      	cmp	r3, #0
 8026ffa:	b410      	push	{r4}
 8026ffc:	6093      	str	r3, [r2, #8]
 8026ffe:	da08      	bge.n	8027012 <__sfputc_r+0x1e>
 8027000:	6994      	ldr	r4, [r2, #24]
 8027002:	42a3      	cmp	r3, r4
 8027004:	db01      	blt.n	802700a <__sfputc_r+0x16>
 8027006:	290a      	cmp	r1, #10
 8027008:	d103      	bne.n	8027012 <__sfputc_r+0x1e>
 802700a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802700e:	f000 b9e3 	b.w	80273d8 <__swbuf_r>
 8027012:	6813      	ldr	r3, [r2, #0]
 8027014:	1c58      	adds	r0, r3, #1
 8027016:	6010      	str	r0, [r2, #0]
 8027018:	7019      	strb	r1, [r3, #0]
 802701a:	4608      	mov	r0, r1
 802701c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027020:	4770      	bx	lr

08027022 <__sfputs_r>:
 8027022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027024:	4606      	mov	r6, r0
 8027026:	460f      	mov	r7, r1
 8027028:	4614      	mov	r4, r2
 802702a:	18d5      	adds	r5, r2, r3
 802702c:	42ac      	cmp	r4, r5
 802702e:	d101      	bne.n	8027034 <__sfputs_r+0x12>
 8027030:	2000      	movs	r0, #0
 8027032:	e007      	b.n	8027044 <__sfputs_r+0x22>
 8027034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027038:	463a      	mov	r2, r7
 802703a:	4630      	mov	r0, r6
 802703c:	f7ff ffda 	bl	8026ff4 <__sfputc_r>
 8027040:	1c43      	adds	r3, r0, #1
 8027042:	d1f3      	bne.n	802702c <__sfputs_r+0xa>
 8027044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027048 <_vfiprintf_r>:
 8027048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802704c:	460d      	mov	r5, r1
 802704e:	b09d      	sub	sp, #116	; 0x74
 8027050:	4614      	mov	r4, r2
 8027052:	4698      	mov	r8, r3
 8027054:	4606      	mov	r6, r0
 8027056:	b118      	cbz	r0, 8027060 <_vfiprintf_r+0x18>
 8027058:	6a03      	ldr	r3, [r0, #32]
 802705a:	b90b      	cbnz	r3, 8027060 <_vfiprintf_r+0x18>
 802705c:	f7fe fa3a 	bl	80254d4 <__sinit>
 8027060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027062:	07d9      	lsls	r1, r3, #31
 8027064:	d405      	bmi.n	8027072 <_vfiprintf_r+0x2a>
 8027066:	89ab      	ldrh	r3, [r5, #12]
 8027068:	059a      	lsls	r2, r3, #22
 802706a:	d402      	bmi.n	8027072 <_vfiprintf_r+0x2a>
 802706c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802706e:	f7fe fb59 	bl	8025724 <__retarget_lock_acquire_recursive>
 8027072:	89ab      	ldrh	r3, [r5, #12]
 8027074:	071b      	lsls	r3, r3, #28
 8027076:	d501      	bpl.n	802707c <_vfiprintf_r+0x34>
 8027078:	692b      	ldr	r3, [r5, #16]
 802707a:	b99b      	cbnz	r3, 80270a4 <_vfiprintf_r+0x5c>
 802707c:	4629      	mov	r1, r5
 802707e:	4630      	mov	r0, r6
 8027080:	f000 f9e8 	bl	8027454 <__swsetup_r>
 8027084:	b170      	cbz	r0, 80270a4 <_vfiprintf_r+0x5c>
 8027086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027088:	07dc      	lsls	r4, r3, #31
 802708a:	d504      	bpl.n	8027096 <_vfiprintf_r+0x4e>
 802708c:	f04f 30ff 	mov.w	r0, #4294967295
 8027090:	b01d      	add	sp, #116	; 0x74
 8027092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027096:	89ab      	ldrh	r3, [r5, #12]
 8027098:	0598      	lsls	r0, r3, #22
 802709a:	d4f7      	bmi.n	802708c <_vfiprintf_r+0x44>
 802709c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802709e:	f7fe fb42 	bl	8025726 <__retarget_lock_release_recursive>
 80270a2:	e7f3      	b.n	802708c <_vfiprintf_r+0x44>
 80270a4:	2300      	movs	r3, #0
 80270a6:	9309      	str	r3, [sp, #36]	; 0x24
 80270a8:	2320      	movs	r3, #32
 80270aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80270ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80270b2:	2330      	movs	r3, #48	; 0x30
 80270b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8027268 <_vfiprintf_r+0x220>
 80270b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80270bc:	f04f 0901 	mov.w	r9, #1
 80270c0:	4623      	mov	r3, r4
 80270c2:	469a      	mov	sl, r3
 80270c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80270c8:	b10a      	cbz	r2, 80270ce <_vfiprintf_r+0x86>
 80270ca:	2a25      	cmp	r2, #37	; 0x25
 80270cc:	d1f9      	bne.n	80270c2 <_vfiprintf_r+0x7a>
 80270ce:	ebba 0b04 	subs.w	fp, sl, r4
 80270d2:	d00b      	beq.n	80270ec <_vfiprintf_r+0xa4>
 80270d4:	465b      	mov	r3, fp
 80270d6:	4622      	mov	r2, r4
 80270d8:	4629      	mov	r1, r5
 80270da:	4630      	mov	r0, r6
 80270dc:	f7ff ffa1 	bl	8027022 <__sfputs_r>
 80270e0:	3001      	adds	r0, #1
 80270e2:	f000 80a9 	beq.w	8027238 <_vfiprintf_r+0x1f0>
 80270e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80270e8:	445a      	add	r2, fp
 80270ea:	9209      	str	r2, [sp, #36]	; 0x24
 80270ec:	f89a 3000 	ldrb.w	r3, [sl]
 80270f0:	2b00      	cmp	r3, #0
 80270f2:	f000 80a1 	beq.w	8027238 <_vfiprintf_r+0x1f0>
 80270f6:	2300      	movs	r3, #0
 80270f8:	f04f 32ff 	mov.w	r2, #4294967295
 80270fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027100:	f10a 0a01 	add.w	sl, sl, #1
 8027104:	9304      	str	r3, [sp, #16]
 8027106:	9307      	str	r3, [sp, #28]
 8027108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802710c:	931a      	str	r3, [sp, #104]	; 0x68
 802710e:	4654      	mov	r4, sl
 8027110:	2205      	movs	r2, #5
 8027112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027116:	4854      	ldr	r0, [pc, #336]	; (8027268 <_vfiprintf_r+0x220>)
 8027118:	f7d9 f882 	bl	8000220 <memchr>
 802711c:	9a04      	ldr	r2, [sp, #16]
 802711e:	b9d8      	cbnz	r0, 8027158 <_vfiprintf_r+0x110>
 8027120:	06d1      	lsls	r1, r2, #27
 8027122:	bf44      	itt	mi
 8027124:	2320      	movmi	r3, #32
 8027126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802712a:	0713      	lsls	r3, r2, #28
 802712c:	bf44      	itt	mi
 802712e:	232b      	movmi	r3, #43	; 0x2b
 8027130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027134:	f89a 3000 	ldrb.w	r3, [sl]
 8027138:	2b2a      	cmp	r3, #42	; 0x2a
 802713a:	d015      	beq.n	8027168 <_vfiprintf_r+0x120>
 802713c:	9a07      	ldr	r2, [sp, #28]
 802713e:	4654      	mov	r4, sl
 8027140:	2000      	movs	r0, #0
 8027142:	f04f 0c0a 	mov.w	ip, #10
 8027146:	4621      	mov	r1, r4
 8027148:	f811 3b01 	ldrb.w	r3, [r1], #1
 802714c:	3b30      	subs	r3, #48	; 0x30
 802714e:	2b09      	cmp	r3, #9
 8027150:	d94d      	bls.n	80271ee <_vfiprintf_r+0x1a6>
 8027152:	b1b0      	cbz	r0, 8027182 <_vfiprintf_r+0x13a>
 8027154:	9207      	str	r2, [sp, #28]
 8027156:	e014      	b.n	8027182 <_vfiprintf_r+0x13a>
 8027158:	eba0 0308 	sub.w	r3, r0, r8
 802715c:	fa09 f303 	lsl.w	r3, r9, r3
 8027160:	4313      	orrs	r3, r2
 8027162:	9304      	str	r3, [sp, #16]
 8027164:	46a2      	mov	sl, r4
 8027166:	e7d2      	b.n	802710e <_vfiprintf_r+0xc6>
 8027168:	9b03      	ldr	r3, [sp, #12]
 802716a:	1d19      	adds	r1, r3, #4
 802716c:	681b      	ldr	r3, [r3, #0]
 802716e:	9103      	str	r1, [sp, #12]
 8027170:	2b00      	cmp	r3, #0
 8027172:	bfbb      	ittet	lt
 8027174:	425b      	neglt	r3, r3
 8027176:	f042 0202 	orrlt.w	r2, r2, #2
 802717a:	9307      	strge	r3, [sp, #28]
 802717c:	9307      	strlt	r3, [sp, #28]
 802717e:	bfb8      	it	lt
 8027180:	9204      	strlt	r2, [sp, #16]
 8027182:	7823      	ldrb	r3, [r4, #0]
 8027184:	2b2e      	cmp	r3, #46	; 0x2e
 8027186:	d10c      	bne.n	80271a2 <_vfiprintf_r+0x15a>
 8027188:	7863      	ldrb	r3, [r4, #1]
 802718a:	2b2a      	cmp	r3, #42	; 0x2a
 802718c:	d134      	bne.n	80271f8 <_vfiprintf_r+0x1b0>
 802718e:	9b03      	ldr	r3, [sp, #12]
 8027190:	1d1a      	adds	r2, r3, #4
 8027192:	681b      	ldr	r3, [r3, #0]
 8027194:	9203      	str	r2, [sp, #12]
 8027196:	2b00      	cmp	r3, #0
 8027198:	bfb8      	it	lt
 802719a:	f04f 33ff 	movlt.w	r3, #4294967295
 802719e:	3402      	adds	r4, #2
 80271a0:	9305      	str	r3, [sp, #20]
 80271a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8027278 <_vfiprintf_r+0x230>
 80271a6:	7821      	ldrb	r1, [r4, #0]
 80271a8:	2203      	movs	r2, #3
 80271aa:	4650      	mov	r0, sl
 80271ac:	f7d9 f838 	bl	8000220 <memchr>
 80271b0:	b138      	cbz	r0, 80271c2 <_vfiprintf_r+0x17a>
 80271b2:	9b04      	ldr	r3, [sp, #16]
 80271b4:	eba0 000a 	sub.w	r0, r0, sl
 80271b8:	2240      	movs	r2, #64	; 0x40
 80271ba:	4082      	lsls	r2, r0
 80271bc:	4313      	orrs	r3, r2
 80271be:	3401      	adds	r4, #1
 80271c0:	9304      	str	r3, [sp, #16]
 80271c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80271c6:	4829      	ldr	r0, [pc, #164]	; (802726c <_vfiprintf_r+0x224>)
 80271c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80271cc:	2206      	movs	r2, #6
 80271ce:	f7d9 f827 	bl	8000220 <memchr>
 80271d2:	2800      	cmp	r0, #0
 80271d4:	d03f      	beq.n	8027256 <_vfiprintf_r+0x20e>
 80271d6:	4b26      	ldr	r3, [pc, #152]	; (8027270 <_vfiprintf_r+0x228>)
 80271d8:	bb1b      	cbnz	r3, 8027222 <_vfiprintf_r+0x1da>
 80271da:	9b03      	ldr	r3, [sp, #12]
 80271dc:	3307      	adds	r3, #7
 80271de:	f023 0307 	bic.w	r3, r3, #7
 80271e2:	3308      	adds	r3, #8
 80271e4:	9303      	str	r3, [sp, #12]
 80271e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80271e8:	443b      	add	r3, r7
 80271ea:	9309      	str	r3, [sp, #36]	; 0x24
 80271ec:	e768      	b.n	80270c0 <_vfiprintf_r+0x78>
 80271ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80271f2:	460c      	mov	r4, r1
 80271f4:	2001      	movs	r0, #1
 80271f6:	e7a6      	b.n	8027146 <_vfiprintf_r+0xfe>
 80271f8:	2300      	movs	r3, #0
 80271fa:	3401      	adds	r4, #1
 80271fc:	9305      	str	r3, [sp, #20]
 80271fe:	4619      	mov	r1, r3
 8027200:	f04f 0c0a 	mov.w	ip, #10
 8027204:	4620      	mov	r0, r4
 8027206:	f810 2b01 	ldrb.w	r2, [r0], #1
 802720a:	3a30      	subs	r2, #48	; 0x30
 802720c:	2a09      	cmp	r2, #9
 802720e:	d903      	bls.n	8027218 <_vfiprintf_r+0x1d0>
 8027210:	2b00      	cmp	r3, #0
 8027212:	d0c6      	beq.n	80271a2 <_vfiprintf_r+0x15a>
 8027214:	9105      	str	r1, [sp, #20]
 8027216:	e7c4      	b.n	80271a2 <_vfiprintf_r+0x15a>
 8027218:	fb0c 2101 	mla	r1, ip, r1, r2
 802721c:	4604      	mov	r4, r0
 802721e:	2301      	movs	r3, #1
 8027220:	e7f0      	b.n	8027204 <_vfiprintf_r+0x1bc>
 8027222:	ab03      	add	r3, sp, #12
 8027224:	9300      	str	r3, [sp, #0]
 8027226:	462a      	mov	r2, r5
 8027228:	4b12      	ldr	r3, [pc, #72]	; (8027274 <_vfiprintf_r+0x22c>)
 802722a:	a904      	add	r1, sp, #16
 802722c:	4630      	mov	r0, r6
 802722e:	f7fd fd11 	bl	8024c54 <_printf_float>
 8027232:	4607      	mov	r7, r0
 8027234:	1c78      	adds	r0, r7, #1
 8027236:	d1d6      	bne.n	80271e6 <_vfiprintf_r+0x19e>
 8027238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802723a:	07d9      	lsls	r1, r3, #31
 802723c:	d405      	bmi.n	802724a <_vfiprintf_r+0x202>
 802723e:	89ab      	ldrh	r3, [r5, #12]
 8027240:	059a      	lsls	r2, r3, #22
 8027242:	d402      	bmi.n	802724a <_vfiprintf_r+0x202>
 8027244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027246:	f7fe fa6e 	bl	8025726 <__retarget_lock_release_recursive>
 802724a:	89ab      	ldrh	r3, [r5, #12]
 802724c:	065b      	lsls	r3, r3, #25
 802724e:	f53f af1d 	bmi.w	802708c <_vfiprintf_r+0x44>
 8027252:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027254:	e71c      	b.n	8027090 <_vfiprintf_r+0x48>
 8027256:	ab03      	add	r3, sp, #12
 8027258:	9300      	str	r3, [sp, #0]
 802725a:	462a      	mov	r2, r5
 802725c:	4b05      	ldr	r3, [pc, #20]	; (8027274 <_vfiprintf_r+0x22c>)
 802725e:	a904      	add	r1, sp, #16
 8027260:	4630      	mov	r0, r6
 8027262:	f7fd ff9b 	bl	802519c <_printf_i>
 8027266:	e7e4      	b.n	8027232 <_vfiprintf_r+0x1ea>
 8027268:	0802af74 	.word	0x0802af74
 802726c:	0802af7e 	.word	0x0802af7e
 8027270:	08024c55 	.word	0x08024c55
 8027274:	08027023 	.word	0x08027023
 8027278:	0802af7a 	.word	0x0802af7a

0802727c <__sflush_r>:
 802727c:	898a      	ldrh	r2, [r1, #12]
 802727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027282:	4605      	mov	r5, r0
 8027284:	0710      	lsls	r0, r2, #28
 8027286:	460c      	mov	r4, r1
 8027288:	d458      	bmi.n	802733c <__sflush_r+0xc0>
 802728a:	684b      	ldr	r3, [r1, #4]
 802728c:	2b00      	cmp	r3, #0
 802728e:	dc05      	bgt.n	802729c <__sflush_r+0x20>
 8027290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027292:	2b00      	cmp	r3, #0
 8027294:	dc02      	bgt.n	802729c <__sflush_r+0x20>
 8027296:	2000      	movs	r0, #0
 8027298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802729c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802729e:	2e00      	cmp	r6, #0
 80272a0:	d0f9      	beq.n	8027296 <__sflush_r+0x1a>
 80272a2:	2300      	movs	r3, #0
 80272a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80272a8:	682f      	ldr	r7, [r5, #0]
 80272aa:	6a21      	ldr	r1, [r4, #32]
 80272ac:	602b      	str	r3, [r5, #0]
 80272ae:	d032      	beq.n	8027316 <__sflush_r+0x9a>
 80272b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80272b2:	89a3      	ldrh	r3, [r4, #12]
 80272b4:	075a      	lsls	r2, r3, #29
 80272b6:	d505      	bpl.n	80272c4 <__sflush_r+0x48>
 80272b8:	6863      	ldr	r3, [r4, #4]
 80272ba:	1ac0      	subs	r0, r0, r3
 80272bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80272be:	b10b      	cbz	r3, 80272c4 <__sflush_r+0x48>
 80272c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80272c2:	1ac0      	subs	r0, r0, r3
 80272c4:	2300      	movs	r3, #0
 80272c6:	4602      	mov	r2, r0
 80272c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80272ca:	6a21      	ldr	r1, [r4, #32]
 80272cc:	4628      	mov	r0, r5
 80272ce:	47b0      	blx	r6
 80272d0:	1c43      	adds	r3, r0, #1
 80272d2:	89a3      	ldrh	r3, [r4, #12]
 80272d4:	d106      	bne.n	80272e4 <__sflush_r+0x68>
 80272d6:	6829      	ldr	r1, [r5, #0]
 80272d8:	291d      	cmp	r1, #29
 80272da:	d82b      	bhi.n	8027334 <__sflush_r+0xb8>
 80272dc:	4a29      	ldr	r2, [pc, #164]	; (8027384 <__sflush_r+0x108>)
 80272de:	410a      	asrs	r2, r1
 80272e0:	07d6      	lsls	r6, r2, #31
 80272e2:	d427      	bmi.n	8027334 <__sflush_r+0xb8>
 80272e4:	2200      	movs	r2, #0
 80272e6:	6062      	str	r2, [r4, #4]
 80272e8:	04d9      	lsls	r1, r3, #19
 80272ea:	6922      	ldr	r2, [r4, #16]
 80272ec:	6022      	str	r2, [r4, #0]
 80272ee:	d504      	bpl.n	80272fa <__sflush_r+0x7e>
 80272f0:	1c42      	adds	r2, r0, #1
 80272f2:	d101      	bne.n	80272f8 <__sflush_r+0x7c>
 80272f4:	682b      	ldr	r3, [r5, #0]
 80272f6:	b903      	cbnz	r3, 80272fa <__sflush_r+0x7e>
 80272f8:	6560      	str	r0, [r4, #84]	; 0x54
 80272fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80272fc:	602f      	str	r7, [r5, #0]
 80272fe:	2900      	cmp	r1, #0
 8027300:	d0c9      	beq.n	8027296 <__sflush_r+0x1a>
 8027302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027306:	4299      	cmp	r1, r3
 8027308:	d002      	beq.n	8027310 <__sflush_r+0x94>
 802730a:	4628      	mov	r0, r5
 802730c:	f7ff f89e 	bl	802644c <_free_r>
 8027310:	2000      	movs	r0, #0
 8027312:	6360      	str	r0, [r4, #52]	; 0x34
 8027314:	e7c0      	b.n	8027298 <__sflush_r+0x1c>
 8027316:	2301      	movs	r3, #1
 8027318:	4628      	mov	r0, r5
 802731a:	47b0      	blx	r6
 802731c:	1c41      	adds	r1, r0, #1
 802731e:	d1c8      	bne.n	80272b2 <__sflush_r+0x36>
 8027320:	682b      	ldr	r3, [r5, #0]
 8027322:	2b00      	cmp	r3, #0
 8027324:	d0c5      	beq.n	80272b2 <__sflush_r+0x36>
 8027326:	2b1d      	cmp	r3, #29
 8027328:	d001      	beq.n	802732e <__sflush_r+0xb2>
 802732a:	2b16      	cmp	r3, #22
 802732c:	d101      	bne.n	8027332 <__sflush_r+0xb6>
 802732e:	602f      	str	r7, [r5, #0]
 8027330:	e7b1      	b.n	8027296 <__sflush_r+0x1a>
 8027332:	89a3      	ldrh	r3, [r4, #12]
 8027334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027338:	81a3      	strh	r3, [r4, #12]
 802733a:	e7ad      	b.n	8027298 <__sflush_r+0x1c>
 802733c:	690f      	ldr	r7, [r1, #16]
 802733e:	2f00      	cmp	r7, #0
 8027340:	d0a9      	beq.n	8027296 <__sflush_r+0x1a>
 8027342:	0793      	lsls	r3, r2, #30
 8027344:	680e      	ldr	r6, [r1, #0]
 8027346:	bf08      	it	eq
 8027348:	694b      	ldreq	r3, [r1, #20]
 802734a:	600f      	str	r7, [r1, #0]
 802734c:	bf18      	it	ne
 802734e:	2300      	movne	r3, #0
 8027350:	eba6 0807 	sub.w	r8, r6, r7
 8027354:	608b      	str	r3, [r1, #8]
 8027356:	f1b8 0f00 	cmp.w	r8, #0
 802735a:	dd9c      	ble.n	8027296 <__sflush_r+0x1a>
 802735c:	6a21      	ldr	r1, [r4, #32]
 802735e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027360:	4643      	mov	r3, r8
 8027362:	463a      	mov	r2, r7
 8027364:	4628      	mov	r0, r5
 8027366:	47b0      	blx	r6
 8027368:	2800      	cmp	r0, #0
 802736a:	dc06      	bgt.n	802737a <__sflush_r+0xfe>
 802736c:	89a3      	ldrh	r3, [r4, #12]
 802736e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027372:	81a3      	strh	r3, [r4, #12]
 8027374:	f04f 30ff 	mov.w	r0, #4294967295
 8027378:	e78e      	b.n	8027298 <__sflush_r+0x1c>
 802737a:	4407      	add	r7, r0
 802737c:	eba8 0800 	sub.w	r8, r8, r0
 8027380:	e7e9      	b.n	8027356 <__sflush_r+0xda>
 8027382:	bf00      	nop
 8027384:	dfbffffe 	.word	0xdfbffffe

08027388 <_fflush_r>:
 8027388:	b538      	push	{r3, r4, r5, lr}
 802738a:	690b      	ldr	r3, [r1, #16]
 802738c:	4605      	mov	r5, r0
 802738e:	460c      	mov	r4, r1
 8027390:	b913      	cbnz	r3, 8027398 <_fflush_r+0x10>
 8027392:	2500      	movs	r5, #0
 8027394:	4628      	mov	r0, r5
 8027396:	bd38      	pop	{r3, r4, r5, pc}
 8027398:	b118      	cbz	r0, 80273a2 <_fflush_r+0x1a>
 802739a:	6a03      	ldr	r3, [r0, #32]
 802739c:	b90b      	cbnz	r3, 80273a2 <_fflush_r+0x1a>
 802739e:	f7fe f899 	bl	80254d4 <__sinit>
 80273a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	d0f3      	beq.n	8027392 <_fflush_r+0xa>
 80273aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80273ac:	07d0      	lsls	r0, r2, #31
 80273ae:	d404      	bmi.n	80273ba <_fflush_r+0x32>
 80273b0:	0599      	lsls	r1, r3, #22
 80273b2:	d402      	bmi.n	80273ba <_fflush_r+0x32>
 80273b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80273b6:	f7fe f9b5 	bl	8025724 <__retarget_lock_acquire_recursive>
 80273ba:	4628      	mov	r0, r5
 80273bc:	4621      	mov	r1, r4
 80273be:	f7ff ff5d 	bl	802727c <__sflush_r>
 80273c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80273c4:	07da      	lsls	r2, r3, #31
 80273c6:	4605      	mov	r5, r0
 80273c8:	d4e4      	bmi.n	8027394 <_fflush_r+0xc>
 80273ca:	89a3      	ldrh	r3, [r4, #12]
 80273cc:	059b      	lsls	r3, r3, #22
 80273ce:	d4e1      	bmi.n	8027394 <_fflush_r+0xc>
 80273d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80273d2:	f7fe f9a8 	bl	8025726 <__retarget_lock_release_recursive>
 80273d6:	e7dd      	b.n	8027394 <_fflush_r+0xc>

080273d8 <__swbuf_r>:
 80273d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273da:	460e      	mov	r6, r1
 80273dc:	4614      	mov	r4, r2
 80273de:	4605      	mov	r5, r0
 80273e0:	b118      	cbz	r0, 80273ea <__swbuf_r+0x12>
 80273e2:	6a03      	ldr	r3, [r0, #32]
 80273e4:	b90b      	cbnz	r3, 80273ea <__swbuf_r+0x12>
 80273e6:	f7fe f875 	bl	80254d4 <__sinit>
 80273ea:	69a3      	ldr	r3, [r4, #24]
 80273ec:	60a3      	str	r3, [r4, #8]
 80273ee:	89a3      	ldrh	r3, [r4, #12]
 80273f0:	071a      	lsls	r2, r3, #28
 80273f2:	d525      	bpl.n	8027440 <__swbuf_r+0x68>
 80273f4:	6923      	ldr	r3, [r4, #16]
 80273f6:	b31b      	cbz	r3, 8027440 <__swbuf_r+0x68>
 80273f8:	6823      	ldr	r3, [r4, #0]
 80273fa:	6922      	ldr	r2, [r4, #16]
 80273fc:	1a98      	subs	r0, r3, r2
 80273fe:	6963      	ldr	r3, [r4, #20]
 8027400:	b2f6      	uxtb	r6, r6
 8027402:	4283      	cmp	r3, r0
 8027404:	4637      	mov	r7, r6
 8027406:	dc04      	bgt.n	8027412 <__swbuf_r+0x3a>
 8027408:	4621      	mov	r1, r4
 802740a:	4628      	mov	r0, r5
 802740c:	f7ff ffbc 	bl	8027388 <_fflush_r>
 8027410:	b9e0      	cbnz	r0, 802744c <__swbuf_r+0x74>
 8027412:	68a3      	ldr	r3, [r4, #8]
 8027414:	3b01      	subs	r3, #1
 8027416:	60a3      	str	r3, [r4, #8]
 8027418:	6823      	ldr	r3, [r4, #0]
 802741a:	1c5a      	adds	r2, r3, #1
 802741c:	6022      	str	r2, [r4, #0]
 802741e:	701e      	strb	r6, [r3, #0]
 8027420:	6962      	ldr	r2, [r4, #20]
 8027422:	1c43      	adds	r3, r0, #1
 8027424:	429a      	cmp	r2, r3
 8027426:	d004      	beq.n	8027432 <__swbuf_r+0x5a>
 8027428:	89a3      	ldrh	r3, [r4, #12]
 802742a:	07db      	lsls	r3, r3, #31
 802742c:	d506      	bpl.n	802743c <__swbuf_r+0x64>
 802742e:	2e0a      	cmp	r6, #10
 8027430:	d104      	bne.n	802743c <__swbuf_r+0x64>
 8027432:	4621      	mov	r1, r4
 8027434:	4628      	mov	r0, r5
 8027436:	f7ff ffa7 	bl	8027388 <_fflush_r>
 802743a:	b938      	cbnz	r0, 802744c <__swbuf_r+0x74>
 802743c:	4638      	mov	r0, r7
 802743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027440:	4621      	mov	r1, r4
 8027442:	4628      	mov	r0, r5
 8027444:	f000 f806 	bl	8027454 <__swsetup_r>
 8027448:	2800      	cmp	r0, #0
 802744a:	d0d5      	beq.n	80273f8 <__swbuf_r+0x20>
 802744c:	f04f 37ff 	mov.w	r7, #4294967295
 8027450:	e7f4      	b.n	802743c <__swbuf_r+0x64>
	...

08027454 <__swsetup_r>:
 8027454:	b538      	push	{r3, r4, r5, lr}
 8027456:	4b2a      	ldr	r3, [pc, #168]	; (8027500 <__swsetup_r+0xac>)
 8027458:	4605      	mov	r5, r0
 802745a:	6818      	ldr	r0, [r3, #0]
 802745c:	460c      	mov	r4, r1
 802745e:	b118      	cbz	r0, 8027468 <__swsetup_r+0x14>
 8027460:	6a03      	ldr	r3, [r0, #32]
 8027462:	b90b      	cbnz	r3, 8027468 <__swsetup_r+0x14>
 8027464:	f7fe f836 	bl	80254d4 <__sinit>
 8027468:	89a3      	ldrh	r3, [r4, #12]
 802746a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802746e:	0718      	lsls	r0, r3, #28
 8027470:	d422      	bmi.n	80274b8 <__swsetup_r+0x64>
 8027472:	06d9      	lsls	r1, r3, #27
 8027474:	d407      	bmi.n	8027486 <__swsetup_r+0x32>
 8027476:	2309      	movs	r3, #9
 8027478:	602b      	str	r3, [r5, #0]
 802747a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802747e:	81a3      	strh	r3, [r4, #12]
 8027480:	f04f 30ff 	mov.w	r0, #4294967295
 8027484:	e034      	b.n	80274f0 <__swsetup_r+0x9c>
 8027486:	0758      	lsls	r0, r3, #29
 8027488:	d512      	bpl.n	80274b0 <__swsetup_r+0x5c>
 802748a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802748c:	b141      	cbz	r1, 80274a0 <__swsetup_r+0x4c>
 802748e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027492:	4299      	cmp	r1, r3
 8027494:	d002      	beq.n	802749c <__swsetup_r+0x48>
 8027496:	4628      	mov	r0, r5
 8027498:	f7fe ffd8 	bl	802644c <_free_r>
 802749c:	2300      	movs	r3, #0
 802749e:	6363      	str	r3, [r4, #52]	; 0x34
 80274a0:	89a3      	ldrh	r3, [r4, #12]
 80274a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80274a6:	81a3      	strh	r3, [r4, #12]
 80274a8:	2300      	movs	r3, #0
 80274aa:	6063      	str	r3, [r4, #4]
 80274ac:	6923      	ldr	r3, [r4, #16]
 80274ae:	6023      	str	r3, [r4, #0]
 80274b0:	89a3      	ldrh	r3, [r4, #12]
 80274b2:	f043 0308 	orr.w	r3, r3, #8
 80274b6:	81a3      	strh	r3, [r4, #12]
 80274b8:	6923      	ldr	r3, [r4, #16]
 80274ba:	b94b      	cbnz	r3, 80274d0 <__swsetup_r+0x7c>
 80274bc:	89a3      	ldrh	r3, [r4, #12]
 80274be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80274c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80274c6:	d003      	beq.n	80274d0 <__swsetup_r+0x7c>
 80274c8:	4621      	mov	r1, r4
 80274ca:	4628      	mov	r0, r5
 80274cc:	f000 f912 	bl	80276f4 <__smakebuf_r>
 80274d0:	89a0      	ldrh	r0, [r4, #12]
 80274d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80274d6:	f010 0301 	ands.w	r3, r0, #1
 80274da:	d00a      	beq.n	80274f2 <__swsetup_r+0x9e>
 80274dc:	2300      	movs	r3, #0
 80274de:	60a3      	str	r3, [r4, #8]
 80274e0:	6963      	ldr	r3, [r4, #20]
 80274e2:	425b      	negs	r3, r3
 80274e4:	61a3      	str	r3, [r4, #24]
 80274e6:	6923      	ldr	r3, [r4, #16]
 80274e8:	b943      	cbnz	r3, 80274fc <__swsetup_r+0xa8>
 80274ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80274ee:	d1c4      	bne.n	802747a <__swsetup_r+0x26>
 80274f0:	bd38      	pop	{r3, r4, r5, pc}
 80274f2:	0781      	lsls	r1, r0, #30
 80274f4:	bf58      	it	pl
 80274f6:	6963      	ldrpl	r3, [r4, #20]
 80274f8:	60a3      	str	r3, [r4, #8]
 80274fa:	e7f4      	b.n	80274e6 <__swsetup_r+0x92>
 80274fc:	2000      	movs	r0, #0
 80274fe:	e7f7      	b.n	80274f0 <__swsetup_r+0x9c>
 8027500:	200001f8 	.word	0x200001f8

08027504 <memmove>:
 8027504:	4288      	cmp	r0, r1
 8027506:	b510      	push	{r4, lr}
 8027508:	eb01 0402 	add.w	r4, r1, r2
 802750c:	d902      	bls.n	8027514 <memmove+0x10>
 802750e:	4284      	cmp	r4, r0
 8027510:	4623      	mov	r3, r4
 8027512:	d807      	bhi.n	8027524 <memmove+0x20>
 8027514:	1e43      	subs	r3, r0, #1
 8027516:	42a1      	cmp	r1, r4
 8027518:	d008      	beq.n	802752c <memmove+0x28>
 802751a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802751e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8027522:	e7f8      	b.n	8027516 <memmove+0x12>
 8027524:	4402      	add	r2, r0
 8027526:	4601      	mov	r1, r0
 8027528:	428a      	cmp	r2, r1
 802752a:	d100      	bne.n	802752e <memmove+0x2a>
 802752c:	bd10      	pop	{r4, pc}
 802752e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8027532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8027536:	e7f7      	b.n	8027528 <memmove+0x24>

08027538 <_raise_r>:
 8027538:	291f      	cmp	r1, #31
 802753a:	b538      	push	{r3, r4, r5, lr}
 802753c:	4604      	mov	r4, r0
 802753e:	460d      	mov	r5, r1
 8027540:	d904      	bls.n	802754c <_raise_r+0x14>
 8027542:	2316      	movs	r3, #22
 8027544:	6003      	str	r3, [r0, #0]
 8027546:	f04f 30ff 	mov.w	r0, #4294967295
 802754a:	bd38      	pop	{r3, r4, r5, pc}
 802754c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802754e:	b112      	cbz	r2, 8027556 <_raise_r+0x1e>
 8027550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027554:	b94b      	cbnz	r3, 802756a <_raise_r+0x32>
 8027556:	4620      	mov	r0, r4
 8027558:	f000 f830 	bl	80275bc <_getpid_r>
 802755c:	462a      	mov	r2, r5
 802755e:	4601      	mov	r1, r0
 8027560:	4620      	mov	r0, r4
 8027562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027566:	f000 b817 	b.w	8027598 <_kill_r>
 802756a:	2b01      	cmp	r3, #1
 802756c:	d00a      	beq.n	8027584 <_raise_r+0x4c>
 802756e:	1c59      	adds	r1, r3, #1
 8027570:	d103      	bne.n	802757a <_raise_r+0x42>
 8027572:	2316      	movs	r3, #22
 8027574:	6003      	str	r3, [r0, #0]
 8027576:	2001      	movs	r0, #1
 8027578:	e7e7      	b.n	802754a <_raise_r+0x12>
 802757a:	2400      	movs	r4, #0
 802757c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027580:	4628      	mov	r0, r5
 8027582:	4798      	blx	r3
 8027584:	2000      	movs	r0, #0
 8027586:	e7e0      	b.n	802754a <_raise_r+0x12>

08027588 <raise>:
 8027588:	4b02      	ldr	r3, [pc, #8]	; (8027594 <raise+0xc>)
 802758a:	4601      	mov	r1, r0
 802758c:	6818      	ldr	r0, [r3, #0]
 802758e:	f7ff bfd3 	b.w	8027538 <_raise_r>
 8027592:	bf00      	nop
 8027594:	200001f8 	.word	0x200001f8

08027598 <_kill_r>:
 8027598:	b538      	push	{r3, r4, r5, lr}
 802759a:	4d07      	ldr	r5, [pc, #28]	; (80275b8 <_kill_r+0x20>)
 802759c:	2300      	movs	r3, #0
 802759e:	4604      	mov	r4, r0
 80275a0:	4608      	mov	r0, r1
 80275a2:	4611      	mov	r1, r2
 80275a4:	602b      	str	r3, [r5, #0]
 80275a6:	f7df f835 	bl	8006614 <_kill>
 80275aa:	1c43      	adds	r3, r0, #1
 80275ac:	d102      	bne.n	80275b4 <_kill_r+0x1c>
 80275ae:	682b      	ldr	r3, [r5, #0]
 80275b0:	b103      	cbz	r3, 80275b4 <_kill_r+0x1c>
 80275b2:	6023      	str	r3, [r4, #0]
 80275b4:	bd38      	pop	{r3, r4, r5, pc}
 80275b6:	bf00      	nop
 80275b8:	20016a94 	.word	0x20016a94

080275bc <_getpid_r>:
 80275bc:	f7df b822 	b.w	8006604 <_getpid>

080275c0 <_sbrk_r>:
 80275c0:	b538      	push	{r3, r4, r5, lr}
 80275c2:	4d06      	ldr	r5, [pc, #24]	; (80275dc <_sbrk_r+0x1c>)
 80275c4:	2300      	movs	r3, #0
 80275c6:	4604      	mov	r4, r0
 80275c8:	4608      	mov	r0, r1
 80275ca:	602b      	str	r3, [r5, #0]
 80275cc:	f7df f88e 	bl	80066ec <_sbrk>
 80275d0:	1c43      	adds	r3, r0, #1
 80275d2:	d102      	bne.n	80275da <_sbrk_r+0x1a>
 80275d4:	682b      	ldr	r3, [r5, #0]
 80275d6:	b103      	cbz	r3, 80275da <_sbrk_r+0x1a>
 80275d8:	6023      	str	r3, [r4, #0]
 80275da:	bd38      	pop	{r3, r4, r5, pc}
 80275dc:	20016a94 	.word	0x20016a94

080275e0 <_calloc_r>:
 80275e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80275e2:	fba1 2402 	umull	r2, r4, r1, r2
 80275e6:	b94c      	cbnz	r4, 80275fc <_calloc_r+0x1c>
 80275e8:	4611      	mov	r1, r2
 80275ea:	9201      	str	r2, [sp, #4]
 80275ec:	f7fe ffa2 	bl	8026534 <_malloc_r>
 80275f0:	9a01      	ldr	r2, [sp, #4]
 80275f2:	4605      	mov	r5, r0
 80275f4:	b930      	cbnz	r0, 8027604 <_calloc_r+0x24>
 80275f6:	4628      	mov	r0, r5
 80275f8:	b003      	add	sp, #12
 80275fa:	bd30      	pop	{r4, r5, pc}
 80275fc:	220c      	movs	r2, #12
 80275fe:	6002      	str	r2, [r0, #0]
 8027600:	2500      	movs	r5, #0
 8027602:	e7f8      	b.n	80275f6 <_calloc_r+0x16>
 8027604:	4621      	mov	r1, r4
 8027606:	f7fe f810 	bl	802562a <memset>
 802760a:	e7f4      	b.n	80275f6 <_calloc_r+0x16>

0802760c <__ascii_mbtowc>:
 802760c:	b082      	sub	sp, #8
 802760e:	b901      	cbnz	r1, 8027612 <__ascii_mbtowc+0x6>
 8027610:	a901      	add	r1, sp, #4
 8027612:	b142      	cbz	r2, 8027626 <__ascii_mbtowc+0x1a>
 8027614:	b14b      	cbz	r3, 802762a <__ascii_mbtowc+0x1e>
 8027616:	7813      	ldrb	r3, [r2, #0]
 8027618:	600b      	str	r3, [r1, #0]
 802761a:	7812      	ldrb	r2, [r2, #0]
 802761c:	1e10      	subs	r0, r2, #0
 802761e:	bf18      	it	ne
 8027620:	2001      	movne	r0, #1
 8027622:	b002      	add	sp, #8
 8027624:	4770      	bx	lr
 8027626:	4610      	mov	r0, r2
 8027628:	e7fb      	b.n	8027622 <__ascii_mbtowc+0x16>
 802762a:	f06f 0001 	mvn.w	r0, #1
 802762e:	e7f8      	b.n	8027622 <__ascii_mbtowc+0x16>

08027630 <_realloc_r>:
 8027630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027634:	4680      	mov	r8, r0
 8027636:	4614      	mov	r4, r2
 8027638:	460e      	mov	r6, r1
 802763a:	b921      	cbnz	r1, 8027646 <_realloc_r+0x16>
 802763c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027640:	4611      	mov	r1, r2
 8027642:	f7fe bf77 	b.w	8026534 <_malloc_r>
 8027646:	b92a      	cbnz	r2, 8027654 <_realloc_r+0x24>
 8027648:	f7fe ff00 	bl	802644c <_free_r>
 802764c:	4625      	mov	r5, r4
 802764e:	4628      	mov	r0, r5
 8027650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027654:	f000 f8ac 	bl	80277b0 <_malloc_usable_size_r>
 8027658:	4284      	cmp	r4, r0
 802765a:	4607      	mov	r7, r0
 802765c:	d802      	bhi.n	8027664 <_realloc_r+0x34>
 802765e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8027662:	d812      	bhi.n	802768a <_realloc_r+0x5a>
 8027664:	4621      	mov	r1, r4
 8027666:	4640      	mov	r0, r8
 8027668:	f7fe ff64 	bl	8026534 <_malloc_r>
 802766c:	4605      	mov	r5, r0
 802766e:	2800      	cmp	r0, #0
 8027670:	d0ed      	beq.n	802764e <_realloc_r+0x1e>
 8027672:	42bc      	cmp	r4, r7
 8027674:	4622      	mov	r2, r4
 8027676:	4631      	mov	r1, r6
 8027678:	bf28      	it	cs
 802767a:	463a      	movcs	r2, r7
 802767c:	f7fe f854 	bl	8025728 <memcpy>
 8027680:	4631      	mov	r1, r6
 8027682:	4640      	mov	r0, r8
 8027684:	f7fe fee2 	bl	802644c <_free_r>
 8027688:	e7e1      	b.n	802764e <_realloc_r+0x1e>
 802768a:	4635      	mov	r5, r6
 802768c:	e7df      	b.n	802764e <_realloc_r+0x1e>

0802768e <__ascii_wctomb>:
 802768e:	b149      	cbz	r1, 80276a4 <__ascii_wctomb+0x16>
 8027690:	2aff      	cmp	r2, #255	; 0xff
 8027692:	bf85      	ittet	hi
 8027694:	238a      	movhi	r3, #138	; 0x8a
 8027696:	6003      	strhi	r3, [r0, #0]
 8027698:	700a      	strbls	r2, [r1, #0]
 802769a:	f04f 30ff 	movhi.w	r0, #4294967295
 802769e:	bf98      	it	ls
 80276a0:	2001      	movls	r0, #1
 80276a2:	4770      	bx	lr
 80276a4:	4608      	mov	r0, r1
 80276a6:	4770      	bx	lr

080276a8 <__swhatbuf_r>:
 80276a8:	b570      	push	{r4, r5, r6, lr}
 80276aa:	460c      	mov	r4, r1
 80276ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276b0:	2900      	cmp	r1, #0
 80276b2:	b096      	sub	sp, #88	; 0x58
 80276b4:	4615      	mov	r5, r2
 80276b6:	461e      	mov	r6, r3
 80276b8:	da0d      	bge.n	80276d6 <__swhatbuf_r+0x2e>
 80276ba:	89a3      	ldrh	r3, [r4, #12]
 80276bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80276c0:	f04f 0100 	mov.w	r1, #0
 80276c4:	bf0c      	ite	eq
 80276c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80276ca:	2340      	movne	r3, #64	; 0x40
 80276cc:	2000      	movs	r0, #0
 80276ce:	6031      	str	r1, [r6, #0]
 80276d0:	602b      	str	r3, [r5, #0]
 80276d2:	b016      	add	sp, #88	; 0x58
 80276d4:	bd70      	pop	{r4, r5, r6, pc}
 80276d6:	466a      	mov	r2, sp
 80276d8:	f000 f848 	bl	802776c <_fstat_r>
 80276dc:	2800      	cmp	r0, #0
 80276de:	dbec      	blt.n	80276ba <__swhatbuf_r+0x12>
 80276e0:	9901      	ldr	r1, [sp, #4]
 80276e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80276e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80276ea:	4259      	negs	r1, r3
 80276ec:	4159      	adcs	r1, r3
 80276ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80276f2:	e7eb      	b.n	80276cc <__swhatbuf_r+0x24>

080276f4 <__smakebuf_r>:
 80276f4:	898b      	ldrh	r3, [r1, #12]
 80276f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80276f8:	079d      	lsls	r5, r3, #30
 80276fa:	4606      	mov	r6, r0
 80276fc:	460c      	mov	r4, r1
 80276fe:	d507      	bpl.n	8027710 <__smakebuf_r+0x1c>
 8027700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027704:	6023      	str	r3, [r4, #0]
 8027706:	6123      	str	r3, [r4, #16]
 8027708:	2301      	movs	r3, #1
 802770a:	6163      	str	r3, [r4, #20]
 802770c:	b002      	add	sp, #8
 802770e:	bd70      	pop	{r4, r5, r6, pc}
 8027710:	ab01      	add	r3, sp, #4
 8027712:	466a      	mov	r2, sp
 8027714:	f7ff ffc8 	bl	80276a8 <__swhatbuf_r>
 8027718:	9900      	ldr	r1, [sp, #0]
 802771a:	4605      	mov	r5, r0
 802771c:	4630      	mov	r0, r6
 802771e:	f7fe ff09 	bl	8026534 <_malloc_r>
 8027722:	b948      	cbnz	r0, 8027738 <__smakebuf_r+0x44>
 8027724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027728:	059a      	lsls	r2, r3, #22
 802772a:	d4ef      	bmi.n	802770c <__smakebuf_r+0x18>
 802772c:	f023 0303 	bic.w	r3, r3, #3
 8027730:	f043 0302 	orr.w	r3, r3, #2
 8027734:	81a3      	strh	r3, [r4, #12]
 8027736:	e7e3      	b.n	8027700 <__smakebuf_r+0xc>
 8027738:	89a3      	ldrh	r3, [r4, #12]
 802773a:	6020      	str	r0, [r4, #0]
 802773c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027740:	81a3      	strh	r3, [r4, #12]
 8027742:	9b00      	ldr	r3, [sp, #0]
 8027744:	6163      	str	r3, [r4, #20]
 8027746:	9b01      	ldr	r3, [sp, #4]
 8027748:	6120      	str	r0, [r4, #16]
 802774a:	b15b      	cbz	r3, 8027764 <__smakebuf_r+0x70>
 802774c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027750:	4630      	mov	r0, r6
 8027752:	f000 f81d 	bl	8027790 <_isatty_r>
 8027756:	b128      	cbz	r0, 8027764 <__smakebuf_r+0x70>
 8027758:	89a3      	ldrh	r3, [r4, #12]
 802775a:	f023 0303 	bic.w	r3, r3, #3
 802775e:	f043 0301 	orr.w	r3, r3, #1
 8027762:	81a3      	strh	r3, [r4, #12]
 8027764:	89a3      	ldrh	r3, [r4, #12]
 8027766:	431d      	orrs	r5, r3
 8027768:	81a5      	strh	r5, [r4, #12]
 802776a:	e7cf      	b.n	802770c <__smakebuf_r+0x18>

0802776c <_fstat_r>:
 802776c:	b538      	push	{r3, r4, r5, lr}
 802776e:	4d07      	ldr	r5, [pc, #28]	; (802778c <_fstat_r+0x20>)
 8027770:	2300      	movs	r3, #0
 8027772:	4604      	mov	r4, r0
 8027774:	4608      	mov	r0, r1
 8027776:	4611      	mov	r1, r2
 8027778:	602b      	str	r3, [r5, #0]
 802777a:	f7de ff8e 	bl	800669a <_fstat>
 802777e:	1c43      	adds	r3, r0, #1
 8027780:	d102      	bne.n	8027788 <_fstat_r+0x1c>
 8027782:	682b      	ldr	r3, [r5, #0]
 8027784:	b103      	cbz	r3, 8027788 <_fstat_r+0x1c>
 8027786:	6023      	str	r3, [r4, #0]
 8027788:	bd38      	pop	{r3, r4, r5, pc}
 802778a:	bf00      	nop
 802778c:	20016a94 	.word	0x20016a94

08027790 <_isatty_r>:
 8027790:	b538      	push	{r3, r4, r5, lr}
 8027792:	4d06      	ldr	r5, [pc, #24]	; (80277ac <_isatty_r+0x1c>)
 8027794:	2300      	movs	r3, #0
 8027796:	4604      	mov	r4, r0
 8027798:	4608      	mov	r0, r1
 802779a:	602b      	str	r3, [r5, #0]
 802779c:	f7de ff8d 	bl	80066ba <_isatty>
 80277a0:	1c43      	adds	r3, r0, #1
 80277a2:	d102      	bne.n	80277aa <_isatty_r+0x1a>
 80277a4:	682b      	ldr	r3, [r5, #0]
 80277a6:	b103      	cbz	r3, 80277aa <_isatty_r+0x1a>
 80277a8:	6023      	str	r3, [r4, #0]
 80277aa:	bd38      	pop	{r3, r4, r5, pc}
 80277ac:	20016a94 	.word	0x20016a94

080277b0 <_malloc_usable_size_r>:
 80277b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80277b4:	1f18      	subs	r0, r3, #4
 80277b6:	2b00      	cmp	r3, #0
 80277b8:	bfbc      	itt	lt
 80277ba:	580b      	ldrlt	r3, [r1, r0]
 80277bc:	18c0      	addlt	r0, r0, r3
 80277be:	4770      	bx	lr

080277c0 <sinf>:
 80277c0:	ee10 3a10 	vmov	r3, s0
 80277c4:	b507      	push	{r0, r1, r2, lr}
 80277c6:	4a1f      	ldr	r2, [pc, #124]	; (8027844 <sinf+0x84>)
 80277c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80277cc:	4293      	cmp	r3, r2
 80277ce:	dc07      	bgt.n	80277e0 <sinf+0x20>
 80277d0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8027848 <sinf+0x88>
 80277d4:	2000      	movs	r0, #0
 80277d6:	b003      	add	sp, #12
 80277d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80277dc:	f000 b894 	b.w	8027908 <__kernel_sinf>
 80277e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80277e4:	db04      	blt.n	80277f0 <sinf+0x30>
 80277e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80277ea:	b003      	add	sp, #12
 80277ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80277f0:	4668      	mov	r0, sp
 80277f2:	f000 f8d1 	bl	8027998 <__ieee754_rem_pio2f>
 80277f6:	f000 0003 	and.w	r0, r0, #3
 80277fa:	2801      	cmp	r0, #1
 80277fc:	d00a      	beq.n	8027814 <sinf+0x54>
 80277fe:	2802      	cmp	r0, #2
 8027800:	d00f      	beq.n	8027822 <sinf+0x62>
 8027802:	b9c0      	cbnz	r0, 8027836 <sinf+0x76>
 8027804:	eddd 0a01 	vldr	s1, [sp, #4]
 8027808:	ed9d 0a00 	vldr	s0, [sp]
 802780c:	2001      	movs	r0, #1
 802780e:	f000 f87b 	bl	8027908 <__kernel_sinf>
 8027812:	e7ea      	b.n	80277ea <sinf+0x2a>
 8027814:	eddd 0a01 	vldr	s1, [sp, #4]
 8027818:	ed9d 0a00 	vldr	s0, [sp]
 802781c:	f000 f816 	bl	802784c <__kernel_cosf>
 8027820:	e7e3      	b.n	80277ea <sinf+0x2a>
 8027822:	eddd 0a01 	vldr	s1, [sp, #4]
 8027826:	ed9d 0a00 	vldr	s0, [sp]
 802782a:	2001      	movs	r0, #1
 802782c:	f000 f86c 	bl	8027908 <__kernel_sinf>
 8027830:	eeb1 0a40 	vneg.f32	s0, s0
 8027834:	e7d9      	b.n	80277ea <sinf+0x2a>
 8027836:	eddd 0a01 	vldr	s1, [sp, #4]
 802783a:	ed9d 0a00 	vldr	s0, [sp]
 802783e:	f000 f805 	bl	802784c <__kernel_cosf>
 8027842:	e7f5      	b.n	8027830 <sinf+0x70>
 8027844:	3f490fd8 	.word	0x3f490fd8
 8027848:	00000000 	.word	0x00000000

0802784c <__kernel_cosf>:
 802784c:	ee10 3a10 	vmov	r3, s0
 8027850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027854:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8027858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802785c:	da05      	bge.n	802786a <__kernel_cosf+0x1e>
 802785e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027862:	ee17 2a90 	vmov	r2, s15
 8027866:	2a00      	cmp	r2, #0
 8027868:	d03b      	beq.n	80278e2 <__kernel_cosf+0x96>
 802786a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802786e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80278e8 <__kernel_cosf+0x9c>
 8027872:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80278ec <__kernel_cosf+0xa0>
 8027876:	4a1e      	ldr	r2, [pc, #120]	; (80278f0 <__kernel_cosf+0xa4>)
 8027878:	eea7 6a27 	vfma.f32	s12, s14, s15
 802787c:	4293      	cmp	r3, r2
 802787e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80278f4 <__kernel_cosf+0xa8>
 8027882:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027886:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80278f8 <__kernel_cosf+0xac>
 802788a:	eea7 6a87 	vfma.f32	s12, s15, s14
 802788e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80278fc <__kernel_cosf+0xb0>
 8027892:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027896:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8027900 <__kernel_cosf+0xb4>
 802789a:	eea7 6a87 	vfma.f32	s12, s15, s14
 802789e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80278a2:	ee26 6a07 	vmul.f32	s12, s12, s14
 80278a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80278aa:	eee7 0a06 	vfma.f32	s1, s14, s12
 80278ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80278b2:	dc04      	bgt.n	80278be <__kernel_cosf+0x72>
 80278b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80278b8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80278bc:	4770      	bx	lr
 80278be:	4a11      	ldr	r2, [pc, #68]	; (8027904 <__kernel_cosf+0xb8>)
 80278c0:	4293      	cmp	r3, r2
 80278c2:	bfda      	itte	le
 80278c4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80278c8:	ee07 3a10 	vmovle	s14, r3
 80278cc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80278d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80278d4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80278d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80278dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80278e0:	4770      	bx	lr
 80278e2:	eeb0 0a66 	vmov.f32	s0, s13
 80278e6:	4770      	bx	lr
 80278e8:	ad47d74e 	.word	0xad47d74e
 80278ec:	310f74f6 	.word	0x310f74f6
 80278f0:	3e999999 	.word	0x3e999999
 80278f4:	b493f27c 	.word	0xb493f27c
 80278f8:	37d00d01 	.word	0x37d00d01
 80278fc:	bab60b61 	.word	0xbab60b61
 8027900:	3d2aaaab 	.word	0x3d2aaaab
 8027904:	3f480000 	.word	0x3f480000

08027908 <__kernel_sinf>:
 8027908:	ee10 3a10 	vmov	r3, s0
 802790c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027910:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8027914:	da04      	bge.n	8027920 <__kernel_sinf+0x18>
 8027916:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802791a:	ee17 3a90 	vmov	r3, s15
 802791e:	b35b      	cbz	r3, 8027978 <__kernel_sinf+0x70>
 8027920:	ee20 7a00 	vmul.f32	s14, s0, s0
 8027924:	eddf 7a15 	vldr	s15, [pc, #84]	; 802797c <__kernel_sinf+0x74>
 8027928:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8027980 <__kernel_sinf+0x78>
 802792c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027930:	eddf 7a14 	vldr	s15, [pc, #80]	; 8027984 <__kernel_sinf+0x7c>
 8027934:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027938:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8027988 <__kernel_sinf+0x80>
 802793c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027940:	eddf 7a12 	vldr	s15, [pc, #72]	; 802798c <__kernel_sinf+0x84>
 8027944:	ee60 6a07 	vmul.f32	s13, s0, s14
 8027948:	eee6 7a07 	vfma.f32	s15, s12, s14
 802794c:	b930      	cbnz	r0, 802795c <__kernel_sinf+0x54>
 802794e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8027990 <__kernel_sinf+0x88>
 8027952:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027956:	eea6 0a26 	vfma.f32	s0, s12, s13
 802795a:	4770      	bx	lr
 802795c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8027960:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8027964:	eee0 7a86 	vfma.f32	s15, s1, s12
 8027968:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802796c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8027994 <__kernel_sinf+0x8c>
 8027970:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8027974:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027978:	4770      	bx	lr
 802797a:	bf00      	nop
 802797c:	2f2ec9d3 	.word	0x2f2ec9d3
 8027980:	b2d72f34 	.word	0xb2d72f34
 8027984:	3638ef1b 	.word	0x3638ef1b
 8027988:	b9500d01 	.word	0xb9500d01
 802798c:	3c088889 	.word	0x3c088889
 8027990:	be2aaaab 	.word	0xbe2aaaab
 8027994:	3e2aaaab 	.word	0x3e2aaaab

08027998 <__ieee754_rem_pio2f>:
 8027998:	b5f0      	push	{r4, r5, r6, r7, lr}
 802799a:	ee10 6a10 	vmov	r6, s0
 802799e:	4b86      	ldr	r3, [pc, #536]	; (8027bb8 <__ieee754_rem_pio2f+0x220>)
 80279a0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80279a4:	429d      	cmp	r5, r3
 80279a6:	b087      	sub	sp, #28
 80279a8:	4604      	mov	r4, r0
 80279aa:	dc05      	bgt.n	80279b8 <__ieee754_rem_pio2f+0x20>
 80279ac:	2300      	movs	r3, #0
 80279ae:	ed80 0a00 	vstr	s0, [r0]
 80279b2:	6043      	str	r3, [r0, #4]
 80279b4:	2000      	movs	r0, #0
 80279b6:	e020      	b.n	80279fa <__ieee754_rem_pio2f+0x62>
 80279b8:	4b80      	ldr	r3, [pc, #512]	; (8027bbc <__ieee754_rem_pio2f+0x224>)
 80279ba:	429d      	cmp	r5, r3
 80279bc:	dc38      	bgt.n	8027a30 <__ieee754_rem_pio2f+0x98>
 80279be:	2e00      	cmp	r6, #0
 80279c0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8027bc0 <__ieee754_rem_pio2f+0x228>
 80279c4:	4b7f      	ldr	r3, [pc, #508]	; (8027bc4 <__ieee754_rem_pio2f+0x22c>)
 80279c6:	f025 050f 	bic.w	r5, r5, #15
 80279ca:	dd18      	ble.n	80279fe <__ieee754_rem_pio2f+0x66>
 80279cc:	429d      	cmp	r5, r3
 80279ce:	ee70 7a47 	vsub.f32	s15, s0, s14
 80279d2:	bf09      	itett	eq
 80279d4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8027bc8 <__ieee754_rem_pio2f+0x230>
 80279d8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8027bcc <__ieee754_rem_pio2f+0x234>
 80279dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80279e0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8027bd0 <__ieee754_rem_pio2f+0x238>
 80279e4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80279e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80279ec:	edc0 6a00 	vstr	s13, [r0]
 80279f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80279f4:	edc0 7a01 	vstr	s15, [r0, #4]
 80279f8:	2001      	movs	r0, #1
 80279fa:	b007      	add	sp, #28
 80279fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80279fe:	429d      	cmp	r5, r3
 8027a00:	ee70 7a07 	vadd.f32	s15, s0, s14
 8027a04:	bf09      	itett	eq
 8027a06:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8027bc8 <__ieee754_rem_pio2f+0x230>
 8027a0a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8027bcc <__ieee754_rem_pio2f+0x234>
 8027a0e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8027a12:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8027bd0 <__ieee754_rem_pio2f+0x238>
 8027a16:	ee77 6a87 	vadd.f32	s13, s15, s14
 8027a1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027a1e:	edc0 6a00 	vstr	s13, [r0]
 8027a22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027a26:	edc0 7a01 	vstr	s15, [r0, #4]
 8027a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8027a2e:	e7e4      	b.n	80279fa <__ieee754_rem_pio2f+0x62>
 8027a30:	4b68      	ldr	r3, [pc, #416]	; (8027bd4 <__ieee754_rem_pio2f+0x23c>)
 8027a32:	429d      	cmp	r5, r3
 8027a34:	dc71      	bgt.n	8027b1a <__ieee754_rem_pio2f+0x182>
 8027a36:	f000 f8db 	bl	8027bf0 <fabsf>
 8027a3a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8027bd8 <__ieee754_rem_pio2f+0x240>
 8027a3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027a42:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027a4e:	ee17 0a90 	vmov	r0, s15
 8027a52:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027bc0 <__ieee754_rem_pio2f+0x228>
 8027a56:	eea7 0a67 	vfms.f32	s0, s14, s15
 8027a5a:	281f      	cmp	r0, #31
 8027a5c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027bcc <__ieee754_rem_pio2f+0x234>
 8027a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027a64:	eeb1 6a47 	vneg.f32	s12, s14
 8027a68:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027a6c:	ee16 2a90 	vmov	r2, s13
 8027a70:	dc1c      	bgt.n	8027aac <__ieee754_rem_pio2f+0x114>
 8027a72:	495a      	ldr	r1, [pc, #360]	; (8027bdc <__ieee754_rem_pio2f+0x244>)
 8027a74:	1e47      	subs	r7, r0, #1
 8027a76:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8027a7a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027a7e:	428b      	cmp	r3, r1
 8027a80:	d014      	beq.n	8027aac <__ieee754_rem_pio2f+0x114>
 8027a82:	6022      	str	r2, [r4, #0]
 8027a84:	ed94 7a00 	vldr	s14, [r4]
 8027a88:	ee30 0a47 	vsub.f32	s0, s0, s14
 8027a8c:	2e00      	cmp	r6, #0
 8027a8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027a92:	ed84 0a01 	vstr	s0, [r4, #4]
 8027a96:	dab0      	bge.n	80279fa <__ieee754_rem_pio2f+0x62>
 8027a98:	eeb1 7a47 	vneg.f32	s14, s14
 8027a9c:	eeb1 0a40 	vneg.f32	s0, s0
 8027aa0:	ed84 7a00 	vstr	s14, [r4]
 8027aa4:	ed84 0a01 	vstr	s0, [r4, #4]
 8027aa8:	4240      	negs	r0, r0
 8027aaa:	e7a6      	b.n	80279fa <__ieee754_rem_pio2f+0x62>
 8027aac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027ab0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8027ab4:	2908      	cmp	r1, #8
 8027ab6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8027aba:	dde2      	ble.n	8027a82 <__ieee754_rem_pio2f+0xea>
 8027abc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8027bc8 <__ieee754_rem_pio2f+0x230>
 8027ac0:	eef0 6a40 	vmov.f32	s13, s0
 8027ac4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027ac8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8027acc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027ad0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8027bd0 <__ieee754_rem_pio2f+0x238>
 8027ad4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8027ad8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8027adc:	ee15 2a90 	vmov	r2, s11
 8027ae0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027ae4:	1a5b      	subs	r3, r3, r1
 8027ae6:	2b19      	cmp	r3, #25
 8027ae8:	dc04      	bgt.n	8027af4 <__ieee754_rem_pio2f+0x15c>
 8027aea:	edc4 5a00 	vstr	s11, [r4]
 8027aee:	eeb0 0a66 	vmov.f32	s0, s13
 8027af2:	e7c7      	b.n	8027a84 <__ieee754_rem_pio2f+0xec>
 8027af4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8027be0 <__ieee754_rem_pio2f+0x248>
 8027af8:	eeb0 0a66 	vmov.f32	s0, s13
 8027afc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8027b00:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8027b04:	eddf 6a37 	vldr	s13, [pc, #220]	; 8027be4 <__ieee754_rem_pio2f+0x24c>
 8027b08:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027b0c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8027b10:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027b14:	ed84 7a00 	vstr	s14, [r4]
 8027b18:	e7b4      	b.n	8027a84 <__ieee754_rem_pio2f+0xec>
 8027b1a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8027b1e:	db06      	blt.n	8027b2e <__ieee754_rem_pio2f+0x196>
 8027b20:	ee70 7a40 	vsub.f32	s15, s0, s0
 8027b24:	edc0 7a01 	vstr	s15, [r0, #4]
 8027b28:	edc0 7a00 	vstr	s15, [r0]
 8027b2c:	e742      	b.n	80279b4 <__ieee754_rem_pio2f+0x1c>
 8027b2e:	15ea      	asrs	r2, r5, #23
 8027b30:	3a86      	subs	r2, #134	; 0x86
 8027b32:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8027b36:	ee07 3a90 	vmov	s15, r3
 8027b3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027b3e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8027be8 <__ieee754_rem_pio2f+0x250>
 8027b42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027b4a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8027b4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027b52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027b5e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8027b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027b66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8027b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b6e:	edcd 7a05 	vstr	s15, [sp, #20]
 8027b72:	d11e      	bne.n	8027bb2 <__ieee754_rem_pio2f+0x21a>
 8027b74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8027b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b7c:	bf14      	ite	ne
 8027b7e:	2302      	movne	r3, #2
 8027b80:	2301      	moveq	r3, #1
 8027b82:	491a      	ldr	r1, [pc, #104]	; (8027bec <__ieee754_rem_pio2f+0x254>)
 8027b84:	9101      	str	r1, [sp, #4]
 8027b86:	2102      	movs	r1, #2
 8027b88:	9100      	str	r1, [sp, #0]
 8027b8a:	a803      	add	r0, sp, #12
 8027b8c:	4621      	mov	r1, r4
 8027b8e:	f000 f837 	bl	8027c00 <__kernel_rem_pio2f>
 8027b92:	2e00      	cmp	r6, #0
 8027b94:	f6bf af31 	bge.w	80279fa <__ieee754_rem_pio2f+0x62>
 8027b98:	edd4 7a00 	vldr	s15, [r4]
 8027b9c:	eef1 7a67 	vneg.f32	s15, s15
 8027ba0:	edc4 7a00 	vstr	s15, [r4]
 8027ba4:	edd4 7a01 	vldr	s15, [r4, #4]
 8027ba8:	eef1 7a67 	vneg.f32	s15, s15
 8027bac:	edc4 7a01 	vstr	s15, [r4, #4]
 8027bb0:	e77a      	b.n	8027aa8 <__ieee754_rem_pio2f+0x110>
 8027bb2:	2303      	movs	r3, #3
 8027bb4:	e7e5      	b.n	8027b82 <__ieee754_rem_pio2f+0x1ea>
 8027bb6:	bf00      	nop
 8027bb8:	3f490fd8 	.word	0x3f490fd8
 8027bbc:	4016cbe3 	.word	0x4016cbe3
 8027bc0:	3fc90f80 	.word	0x3fc90f80
 8027bc4:	3fc90fd0 	.word	0x3fc90fd0
 8027bc8:	37354400 	.word	0x37354400
 8027bcc:	37354443 	.word	0x37354443
 8027bd0:	2e85a308 	.word	0x2e85a308
 8027bd4:	43490f80 	.word	0x43490f80
 8027bd8:	3f22f984 	.word	0x3f22f984
 8027bdc:	0802b090 	.word	0x0802b090
 8027be0:	2e85a300 	.word	0x2e85a300
 8027be4:	248d3132 	.word	0x248d3132
 8027be8:	43800000 	.word	0x43800000
 8027bec:	0802b110 	.word	0x0802b110

08027bf0 <fabsf>:
 8027bf0:	ee10 3a10 	vmov	r3, s0
 8027bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027bf8:	ee00 3a10 	vmov	s0, r3
 8027bfc:	4770      	bx	lr
	...

08027c00 <__kernel_rem_pio2f>:
 8027c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c04:	ed2d 8b04 	vpush	{d8-d9}
 8027c08:	b0d9      	sub	sp, #356	; 0x164
 8027c0a:	4688      	mov	r8, r1
 8027c0c:	9002      	str	r0, [sp, #8]
 8027c0e:	49b8      	ldr	r1, [pc, #736]	; (8027ef0 <__kernel_rem_pio2f+0x2f0>)
 8027c10:	9866      	ldr	r0, [sp, #408]	; 0x198
 8027c12:	9301      	str	r3, [sp, #4]
 8027c14:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8027c18:	9901      	ldr	r1, [sp, #4]
 8027c1a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8027c1c:	f101 3bff 	add.w	fp, r1, #4294967295
 8027c20:	1d11      	adds	r1, r2, #4
 8027c22:	db25      	blt.n	8027c70 <__kernel_rem_pio2f+0x70>
 8027c24:	1ed0      	subs	r0, r2, #3
 8027c26:	bf48      	it	mi
 8027c28:	1d10      	addmi	r0, r2, #4
 8027c2a:	10c0      	asrs	r0, r0, #3
 8027c2c:	1c45      	adds	r5, r0, #1
 8027c2e:	00e9      	lsls	r1, r5, #3
 8027c30:	eba0 070b 	sub.w	r7, r0, fp
 8027c34:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8027f00 <__kernel_rem_pio2f+0x300>
 8027c38:	9103      	str	r1, [sp, #12]
 8027c3a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8027c3e:	eb0a 0c0b 	add.w	ip, sl, fp
 8027c42:	ae1c      	add	r6, sp, #112	; 0x70
 8027c44:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8027c48:	2400      	movs	r4, #0
 8027c4a:	4564      	cmp	r4, ip
 8027c4c:	dd12      	ble.n	8027c74 <__kernel_rem_pio2f+0x74>
 8027c4e:	9901      	ldr	r1, [sp, #4]
 8027c50:	ac1c      	add	r4, sp, #112	; 0x70
 8027c52:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8027c56:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8027c5a:	f04f 0c00 	mov.w	ip, #0
 8027c5e:	45d4      	cmp	ip, sl
 8027c60:	dc27      	bgt.n	8027cb2 <__kernel_rem_pio2f+0xb2>
 8027c62:	f8dd e008 	ldr.w	lr, [sp, #8]
 8027c66:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8027f00 <__kernel_rem_pio2f+0x300>
 8027c6a:	4627      	mov	r7, r4
 8027c6c:	2600      	movs	r6, #0
 8027c6e:	e016      	b.n	8027c9e <__kernel_rem_pio2f+0x9e>
 8027c70:	2000      	movs	r0, #0
 8027c72:	e7db      	b.n	8027c2c <__kernel_rem_pio2f+0x2c>
 8027c74:	42e7      	cmn	r7, r4
 8027c76:	bf5d      	ittte	pl
 8027c78:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8027c7c:	ee07 1a90 	vmovpl	s15, r1
 8027c80:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8027c84:	eef0 7a47 	vmovmi.f32	s15, s14
 8027c88:	ece6 7a01 	vstmia	r6!, {s15}
 8027c8c:	3401      	adds	r4, #1
 8027c8e:	e7dc      	b.n	8027c4a <__kernel_rem_pio2f+0x4a>
 8027c90:	ecfe 6a01 	vldmia	lr!, {s13}
 8027c94:	ed97 7a00 	vldr	s14, [r7]
 8027c98:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027c9c:	3601      	adds	r6, #1
 8027c9e:	455e      	cmp	r6, fp
 8027ca0:	f1a7 0704 	sub.w	r7, r7, #4
 8027ca4:	ddf4      	ble.n	8027c90 <__kernel_rem_pio2f+0x90>
 8027ca6:	ece9 7a01 	vstmia	r9!, {s15}
 8027caa:	f10c 0c01 	add.w	ip, ip, #1
 8027cae:	3404      	adds	r4, #4
 8027cb0:	e7d5      	b.n	8027c5e <__kernel_rem_pio2f+0x5e>
 8027cb2:	a908      	add	r1, sp, #32
 8027cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027cb8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8027cbc:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8027efc <__kernel_rem_pio2f+0x2fc>
 8027cc0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8027ef8 <__kernel_rem_pio2f+0x2f8>
 8027cc4:	9105      	str	r1, [sp, #20]
 8027cc6:	9304      	str	r3, [sp, #16]
 8027cc8:	4656      	mov	r6, sl
 8027cca:	00b3      	lsls	r3, r6, #2
 8027ccc:	9306      	str	r3, [sp, #24]
 8027cce:	ab58      	add	r3, sp, #352	; 0x160
 8027cd0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8027cd4:	ac08      	add	r4, sp, #32
 8027cd6:	ab44      	add	r3, sp, #272	; 0x110
 8027cd8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8027cdc:	46a4      	mov	ip, r4
 8027cde:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8027ce2:	4637      	mov	r7, r6
 8027ce4:	2f00      	cmp	r7, #0
 8027ce6:	f1a0 0004 	sub.w	r0, r0, #4
 8027cea:	dc4a      	bgt.n	8027d82 <__kernel_rem_pio2f+0x182>
 8027cec:	4628      	mov	r0, r5
 8027cee:	9207      	str	r2, [sp, #28]
 8027cf0:	f000 f9f8 	bl	80280e4 <scalbnf>
 8027cf4:	eeb0 8a40 	vmov.f32	s16, s0
 8027cf8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8027cfc:	ee28 0a00 	vmul.f32	s0, s16, s0
 8027d00:	f000 fa56 	bl	80281b0 <floorf>
 8027d04:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8027d08:	eea0 8a67 	vfms.f32	s16, s0, s15
 8027d0c:	2d00      	cmp	r5, #0
 8027d0e:	9a07      	ldr	r2, [sp, #28]
 8027d10:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8027d14:	ee17 9a90 	vmov	r9, s15
 8027d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027d1c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8027d20:	dd41      	ble.n	8027da6 <__kernel_rem_pio2f+0x1a6>
 8027d22:	f106 3cff 	add.w	ip, r6, #4294967295
 8027d26:	ab08      	add	r3, sp, #32
 8027d28:	f1c5 0e08 	rsb	lr, r5, #8
 8027d2c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8027d30:	fa47 f00e 	asr.w	r0, r7, lr
 8027d34:	4481      	add	r9, r0
 8027d36:	fa00 f00e 	lsl.w	r0, r0, lr
 8027d3a:	1a3f      	subs	r7, r7, r0
 8027d3c:	f1c5 0007 	rsb	r0, r5, #7
 8027d40:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8027d44:	4107      	asrs	r7, r0
 8027d46:	2f00      	cmp	r7, #0
 8027d48:	dd3c      	ble.n	8027dc4 <__kernel_rem_pio2f+0x1c4>
 8027d4a:	f04f 0e00 	mov.w	lr, #0
 8027d4e:	f109 0901 	add.w	r9, r9, #1
 8027d52:	4671      	mov	r1, lr
 8027d54:	4576      	cmp	r6, lr
 8027d56:	dc67      	bgt.n	8027e28 <__kernel_rem_pio2f+0x228>
 8027d58:	2d00      	cmp	r5, #0
 8027d5a:	dd03      	ble.n	8027d64 <__kernel_rem_pio2f+0x164>
 8027d5c:	2d01      	cmp	r5, #1
 8027d5e:	d074      	beq.n	8027e4a <__kernel_rem_pio2f+0x24a>
 8027d60:	2d02      	cmp	r5, #2
 8027d62:	d07b      	beq.n	8027e5c <__kernel_rem_pio2f+0x25c>
 8027d64:	2f02      	cmp	r7, #2
 8027d66:	d12d      	bne.n	8027dc4 <__kernel_rem_pio2f+0x1c4>
 8027d68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027d6c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8027d70:	b341      	cbz	r1, 8027dc4 <__kernel_rem_pio2f+0x1c4>
 8027d72:	4628      	mov	r0, r5
 8027d74:	9207      	str	r2, [sp, #28]
 8027d76:	f000 f9b5 	bl	80280e4 <scalbnf>
 8027d7a:	9a07      	ldr	r2, [sp, #28]
 8027d7c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8027d80:	e020      	b.n	8027dc4 <__kernel_rem_pio2f+0x1c4>
 8027d82:	ee60 7a28 	vmul.f32	s15, s0, s17
 8027d86:	3f01      	subs	r7, #1
 8027d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027d90:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8027d94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027d98:	ecac 0a01 	vstmia	ip!, {s0}
 8027d9c:	ed90 0a00 	vldr	s0, [r0]
 8027da0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8027da4:	e79e      	b.n	8027ce4 <__kernel_rem_pio2f+0xe4>
 8027da6:	d105      	bne.n	8027db4 <__kernel_rem_pio2f+0x1b4>
 8027da8:	1e70      	subs	r0, r6, #1
 8027daa:	ab08      	add	r3, sp, #32
 8027dac:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8027db0:	11ff      	asrs	r7, r7, #7
 8027db2:	e7c8      	b.n	8027d46 <__kernel_rem_pio2f+0x146>
 8027db4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027db8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8027dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dc0:	da30      	bge.n	8027e24 <__kernel_rem_pio2f+0x224>
 8027dc2:	2700      	movs	r7, #0
 8027dc4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8027dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dcc:	f040 809a 	bne.w	8027f04 <__kernel_rem_pio2f+0x304>
 8027dd0:	1e74      	subs	r4, r6, #1
 8027dd2:	46a4      	mov	ip, r4
 8027dd4:	2100      	movs	r1, #0
 8027dd6:	45d4      	cmp	ip, sl
 8027dd8:	da47      	bge.n	8027e6a <__kernel_rem_pio2f+0x26a>
 8027dda:	2900      	cmp	r1, #0
 8027ddc:	d063      	beq.n	8027ea6 <__kernel_rem_pio2f+0x2a6>
 8027dde:	ab08      	add	r3, sp, #32
 8027de0:	3d08      	subs	r5, #8
 8027de2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8027de6:	2b00      	cmp	r3, #0
 8027de8:	d07f      	beq.n	8027eea <__kernel_rem_pio2f+0x2ea>
 8027dea:	4628      	mov	r0, r5
 8027dec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027df0:	f000 f978 	bl	80280e4 <scalbnf>
 8027df4:	1c63      	adds	r3, r4, #1
 8027df6:	aa44      	add	r2, sp, #272	; 0x110
 8027df8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8027efc <__kernel_rem_pio2f+0x2fc>
 8027dfc:	0099      	lsls	r1, r3, #2
 8027dfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8027e02:	4623      	mov	r3, r4
 8027e04:	2b00      	cmp	r3, #0
 8027e06:	f280 80ad 	bge.w	8027f64 <__kernel_rem_pio2f+0x364>
 8027e0a:	4623      	mov	r3, r4
 8027e0c:	2b00      	cmp	r3, #0
 8027e0e:	f2c0 80cb 	blt.w	8027fa8 <__kernel_rem_pio2f+0x3a8>
 8027e12:	aa44      	add	r2, sp, #272	; 0x110
 8027e14:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8027e18:	4e36      	ldr	r6, [pc, #216]	; (8027ef4 <__kernel_rem_pio2f+0x2f4>)
 8027e1a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8027f00 <__kernel_rem_pio2f+0x300>
 8027e1e:	2000      	movs	r0, #0
 8027e20:	1ae2      	subs	r2, r4, r3
 8027e22:	e0b6      	b.n	8027f92 <__kernel_rem_pio2f+0x392>
 8027e24:	2702      	movs	r7, #2
 8027e26:	e790      	b.n	8027d4a <__kernel_rem_pio2f+0x14a>
 8027e28:	6820      	ldr	r0, [r4, #0]
 8027e2a:	b949      	cbnz	r1, 8027e40 <__kernel_rem_pio2f+0x240>
 8027e2c:	b118      	cbz	r0, 8027e36 <__kernel_rem_pio2f+0x236>
 8027e2e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8027e32:	6020      	str	r0, [r4, #0]
 8027e34:	2001      	movs	r0, #1
 8027e36:	f10e 0e01 	add.w	lr, lr, #1
 8027e3a:	3404      	adds	r4, #4
 8027e3c:	4601      	mov	r1, r0
 8027e3e:	e789      	b.n	8027d54 <__kernel_rem_pio2f+0x154>
 8027e40:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8027e44:	6020      	str	r0, [r4, #0]
 8027e46:	4608      	mov	r0, r1
 8027e48:	e7f5      	b.n	8027e36 <__kernel_rem_pio2f+0x236>
 8027e4a:	1e74      	subs	r4, r6, #1
 8027e4c:	ab08      	add	r3, sp, #32
 8027e4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8027e52:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8027e56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027e5a:	e783      	b.n	8027d64 <__kernel_rem_pio2f+0x164>
 8027e5c:	1e74      	subs	r4, r6, #1
 8027e5e:	ab08      	add	r3, sp, #32
 8027e60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8027e64:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8027e68:	e7f5      	b.n	8027e56 <__kernel_rem_pio2f+0x256>
 8027e6a:	ab08      	add	r3, sp, #32
 8027e6c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8027e70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027e74:	4301      	orrs	r1, r0
 8027e76:	e7ae      	b.n	8027dd6 <__kernel_rem_pio2f+0x1d6>
 8027e78:	3001      	adds	r0, #1
 8027e7a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8027e7e:	2f00      	cmp	r7, #0
 8027e80:	d0fa      	beq.n	8027e78 <__kernel_rem_pio2f+0x278>
 8027e82:	9b06      	ldr	r3, [sp, #24]
 8027e84:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8027e88:	eb0d 0403 	add.w	r4, sp, r3
 8027e8c:	9b01      	ldr	r3, [sp, #4]
 8027e8e:	18f7      	adds	r7, r6, r3
 8027e90:	ab1c      	add	r3, sp, #112	; 0x70
 8027e92:	f106 0c01 	add.w	ip, r6, #1
 8027e96:	3c4c      	subs	r4, #76	; 0x4c
 8027e98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027e9c:	4430      	add	r0, r6
 8027e9e:	4560      	cmp	r0, ip
 8027ea0:	da04      	bge.n	8027eac <__kernel_rem_pio2f+0x2ac>
 8027ea2:	4606      	mov	r6, r0
 8027ea4:	e711      	b.n	8027cca <__kernel_rem_pio2f+0xca>
 8027ea6:	9c05      	ldr	r4, [sp, #20]
 8027ea8:	2001      	movs	r0, #1
 8027eaa:	e7e6      	b.n	8027e7a <__kernel_rem_pio2f+0x27a>
 8027eac:	9b04      	ldr	r3, [sp, #16]
 8027eae:	f8dd e008 	ldr.w	lr, [sp, #8]
 8027eb2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8027eb6:	9306      	str	r3, [sp, #24]
 8027eb8:	ee07 3a90 	vmov	s15, r3
 8027ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027ec0:	2600      	movs	r6, #0
 8027ec2:	ece7 7a01 	vstmia	r7!, {s15}
 8027ec6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8027f00 <__kernel_rem_pio2f+0x300>
 8027eca:	46b9      	mov	r9, r7
 8027ecc:	455e      	cmp	r6, fp
 8027ece:	dd04      	ble.n	8027eda <__kernel_rem_pio2f+0x2da>
 8027ed0:	ece4 7a01 	vstmia	r4!, {s15}
 8027ed4:	f10c 0c01 	add.w	ip, ip, #1
 8027ed8:	e7e1      	b.n	8027e9e <__kernel_rem_pio2f+0x29e>
 8027eda:	ecfe 6a01 	vldmia	lr!, {s13}
 8027ede:	ed39 7a01 	vldmdb	r9!, {s14}
 8027ee2:	3601      	adds	r6, #1
 8027ee4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027ee8:	e7f0      	b.n	8027ecc <__kernel_rem_pio2f+0x2cc>
 8027eea:	3c01      	subs	r4, #1
 8027eec:	e777      	b.n	8027dde <__kernel_rem_pio2f+0x1de>
 8027eee:	bf00      	nop
 8027ef0:	0802b454 	.word	0x0802b454
 8027ef4:	0802b428 	.word	0x0802b428
 8027ef8:	43800000 	.word	0x43800000
 8027efc:	3b800000 	.word	0x3b800000
 8027f00:	00000000 	.word	0x00000000
 8027f04:	9b03      	ldr	r3, [sp, #12]
 8027f06:	eeb0 0a48 	vmov.f32	s0, s16
 8027f0a:	1a98      	subs	r0, r3, r2
 8027f0c:	f000 f8ea 	bl	80280e4 <scalbnf>
 8027f10:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8027ef8 <__kernel_rem_pio2f+0x2f8>
 8027f14:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8027f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f1c:	db19      	blt.n	8027f52 <__kernel_rem_pio2f+0x352>
 8027f1e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8027efc <__kernel_rem_pio2f+0x2fc>
 8027f22:	ee60 7a27 	vmul.f32	s15, s0, s15
 8027f26:	aa08      	add	r2, sp, #32
 8027f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027f2c:	1c74      	adds	r4, r6, #1
 8027f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027f32:	3508      	adds	r5, #8
 8027f34:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8027f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027f3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027f40:	ee10 3a10 	vmov	r3, s0
 8027f44:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8027f48:	ee17 3a90 	vmov	r3, s15
 8027f4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8027f50:	e74b      	b.n	8027dea <__kernel_rem_pio2f+0x1ea>
 8027f52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027f56:	aa08      	add	r2, sp, #32
 8027f58:	ee10 3a10 	vmov	r3, s0
 8027f5c:	4634      	mov	r4, r6
 8027f5e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8027f62:	e742      	b.n	8027dea <__kernel_rem_pio2f+0x1ea>
 8027f64:	a808      	add	r0, sp, #32
 8027f66:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8027f6a:	9001      	str	r0, [sp, #4]
 8027f6c:	ee07 0a90 	vmov	s15, r0
 8027f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027f74:	3b01      	subs	r3, #1
 8027f76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027f7a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8027f7e:	ed62 7a01 	vstmdb	r2!, {s15}
 8027f82:	e73f      	b.n	8027e04 <__kernel_rem_pio2f+0x204>
 8027f84:	ecf6 6a01 	vldmia	r6!, {s13}
 8027f88:	ecb5 7a01 	vldmia	r5!, {s14}
 8027f8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027f90:	3001      	adds	r0, #1
 8027f92:	4550      	cmp	r0, sl
 8027f94:	dc01      	bgt.n	8027f9a <__kernel_rem_pio2f+0x39a>
 8027f96:	4290      	cmp	r0, r2
 8027f98:	ddf4      	ble.n	8027f84 <__kernel_rem_pio2f+0x384>
 8027f9a:	a858      	add	r0, sp, #352	; 0x160
 8027f9c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8027fa0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8027fa4:	3b01      	subs	r3, #1
 8027fa6:	e731      	b.n	8027e0c <__kernel_rem_pio2f+0x20c>
 8027fa8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8027faa:	2b02      	cmp	r3, #2
 8027fac:	dc09      	bgt.n	8027fc2 <__kernel_rem_pio2f+0x3c2>
 8027fae:	2b00      	cmp	r3, #0
 8027fb0:	dc2b      	bgt.n	802800a <__kernel_rem_pio2f+0x40a>
 8027fb2:	d044      	beq.n	802803e <__kernel_rem_pio2f+0x43e>
 8027fb4:	f009 0007 	and.w	r0, r9, #7
 8027fb8:	b059      	add	sp, #356	; 0x164
 8027fba:	ecbd 8b04 	vpop	{d8-d9}
 8027fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027fc2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8027fc4:	2b03      	cmp	r3, #3
 8027fc6:	d1f5      	bne.n	8027fb4 <__kernel_rem_pio2f+0x3b4>
 8027fc8:	aa30      	add	r2, sp, #192	; 0xc0
 8027fca:	1f0b      	subs	r3, r1, #4
 8027fcc:	4413      	add	r3, r2
 8027fce:	461a      	mov	r2, r3
 8027fd0:	4620      	mov	r0, r4
 8027fd2:	2800      	cmp	r0, #0
 8027fd4:	f1a2 0204 	sub.w	r2, r2, #4
 8027fd8:	dc52      	bgt.n	8028080 <__kernel_rem_pio2f+0x480>
 8027fda:	4622      	mov	r2, r4
 8027fdc:	2a01      	cmp	r2, #1
 8027fde:	f1a3 0304 	sub.w	r3, r3, #4
 8027fe2:	dc5d      	bgt.n	80280a0 <__kernel_rem_pio2f+0x4a0>
 8027fe4:	ab30      	add	r3, sp, #192	; 0xc0
 8027fe6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8027f00 <__kernel_rem_pio2f+0x300>
 8027fea:	440b      	add	r3, r1
 8027fec:	2c01      	cmp	r4, #1
 8027fee:	dc67      	bgt.n	80280c0 <__kernel_rem_pio2f+0x4c0>
 8027ff0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8027ff4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8027ff8:	2f00      	cmp	r7, #0
 8027ffa:	d167      	bne.n	80280cc <__kernel_rem_pio2f+0x4cc>
 8027ffc:	edc8 6a00 	vstr	s13, [r8]
 8028000:	ed88 7a01 	vstr	s14, [r8, #4]
 8028004:	edc8 7a02 	vstr	s15, [r8, #8]
 8028008:	e7d4      	b.n	8027fb4 <__kernel_rem_pio2f+0x3b4>
 802800a:	ab30      	add	r3, sp, #192	; 0xc0
 802800c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8027f00 <__kernel_rem_pio2f+0x300>
 8028010:	440b      	add	r3, r1
 8028012:	4622      	mov	r2, r4
 8028014:	2a00      	cmp	r2, #0
 8028016:	da24      	bge.n	8028062 <__kernel_rem_pio2f+0x462>
 8028018:	b34f      	cbz	r7, 802806e <__kernel_rem_pio2f+0x46e>
 802801a:	eef1 7a47 	vneg.f32	s15, s14
 802801e:	edc8 7a00 	vstr	s15, [r8]
 8028022:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8028026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802802a:	aa31      	add	r2, sp, #196	; 0xc4
 802802c:	2301      	movs	r3, #1
 802802e:	429c      	cmp	r4, r3
 8028030:	da20      	bge.n	8028074 <__kernel_rem_pio2f+0x474>
 8028032:	b10f      	cbz	r7, 8028038 <__kernel_rem_pio2f+0x438>
 8028034:	eef1 7a67 	vneg.f32	s15, s15
 8028038:	edc8 7a01 	vstr	s15, [r8, #4]
 802803c:	e7ba      	b.n	8027fb4 <__kernel_rem_pio2f+0x3b4>
 802803e:	ab30      	add	r3, sp, #192	; 0xc0
 8028040:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8027f00 <__kernel_rem_pio2f+0x300>
 8028044:	440b      	add	r3, r1
 8028046:	2c00      	cmp	r4, #0
 8028048:	da05      	bge.n	8028056 <__kernel_rem_pio2f+0x456>
 802804a:	b10f      	cbz	r7, 8028050 <__kernel_rem_pio2f+0x450>
 802804c:	eef1 7a67 	vneg.f32	s15, s15
 8028050:	edc8 7a00 	vstr	s15, [r8]
 8028054:	e7ae      	b.n	8027fb4 <__kernel_rem_pio2f+0x3b4>
 8028056:	ed33 7a01 	vldmdb	r3!, {s14}
 802805a:	3c01      	subs	r4, #1
 802805c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028060:	e7f1      	b.n	8028046 <__kernel_rem_pio2f+0x446>
 8028062:	ed73 7a01 	vldmdb	r3!, {s15}
 8028066:	3a01      	subs	r2, #1
 8028068:	ee37 7a27 	vadd.f32	s14, s14, s15
 802806c:	e7d2      	b.n	8028014 <__kernel_rem_pio2f+0x414>
 802806e:	eef0 7a47 	vmov.f32	s15, s14
 8028072:	e7d4      	b.n	802801e <__kernel_rem_pio2f+0x41e>
 8028074:	ecb2 7a01 	vldmia	r2!, {s14}
 8028078:	3301      	adds	r3, #1
 802807a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802807e:	e7d6      	b.n	802802e <__kernel_rem_pio2f+0x42e>
 8028080:	edd2 7a00 	vldr	s15, [r2]
 8028084:	edd2 6a01 	vldr	s13, [r2, #4]
 8028088:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802808c:	3801      	subs	r0, #1
 802808e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028092:	ed82 7a00 	vstr	s14, [r2]
 8028096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802809a:	edc2 7a01 	vstr	s15, [r2, #4]
 802809e:	e798      	b.n	8027fd2 <__kernel_rem_pio2f+0x3d2>
 80280a0:	edd3 7a00 	vldr	s15, [r3]
 80280a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80280a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80280ac:	3a01      	subs	r2, #1
 80280ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80280b2:	ed83 7a00 	vstr	s14, [r3]
 80280b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80280ba:	edc3 7a01 	vstr	s15, [r3, #4]
 80280be:	e78d      	b.n	8027fdc <__kernel_rem_pio2f+0x3dc>
 80280c0:	ed33 7a01 	vldmdb	r3!, {s14}
 80280c4:	3c01      	subs	r4, #1
 80280c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80280ca:	e78f      	b.n	8027fec <__kernel_rem_pio2f+0x3ec>
 80280cc:	eef1 6a66 	vneg.f32	s13, s13
 80280d0:	eeb1 7a47 	vneg.f32	s14, s14
 80280d4:	edc8 6a00 	vstr	s13, [r8]
 80280d8:	ed88 7a01 	vstr	s14, [r8, #4]
 80280dc:	eef1 7a67 	vneg.f32	s15, s15
 80280e0:	e790      	b.n	8028004 <__kernel_rem_pio2f+0x404>
 80280e2:	bf00      	nop

080280e4 <scalbnf>:
 80280e4:	ee10 3a10 	vmov	r3, s0
 80280e8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80280ec:	d02b      	beq.n	8028146 <scalbnf+0x62>
 80280ee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80280f2:	d302      	bcc.n	80280fa <scalbnf+0x16>
 80280f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80280f8:	4770      	bx	lr
 80280fa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80280fe:	d123      	bne.n	8028148 <scalbnf+0x64>
 8028100:	4b24      	ldr	r3, [pc, #144]	; (8028194 <scalbnf+0xb0>)
 8028102:	eddf 7a25 	vldr	s15, [pc, #148]	; 8028198 <scalbnf+0xb4>
 8028106:	4298      	cmp	r0, r3
 8028108:	ee20 0a27 	vmul.f32	s0, s0, s15
 802810c:	db17      	blt.n	802813e <scalbnf+0x5a>
 802810e:	ee10 3a10 	vmov	r3, s0
 8028112:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8028116:	3a19      	subs	r2, #25
 8028118:	f24c 3150 	movw	r1, #50000	; 0xc350
 802811c:	4288      	cmp	r0, r1
 802811e:	dd15      	ble.n	802814c <scalbnf+0x68>
 8028120:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802819c <scalbnf+0xb8>
 8028124:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80281a0 <scalbnf+0xbc>
 8028128:	ee10 3a10 	vmov	r3, s0
 802812c:	eeb0 7a67 	vmov.f32	s14, s15
 8028130:	2b00      	cmp	r3, #0
 8028132:	bfb8      	it	lt
 8028134:	eef0 7a66 	vmovlt.f32	s15, s13
 8028138:	ee27 0a87 	vmul.f32	s0, s15, s14
 802813c:	4770      	bx	lr
 802813e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80281a4 <scalbnf+0xc0>
 8028142:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028146:	4770      	bx	lr
 8028148:	0dd2      	lsrs	r2, r2, #23
 802814a:	e7e5      	b.n	8028118 <scalbnf+0x34>
 802814c:	4410      	add	r0, r2
 802814e:	28fe      	cmp	r0, #254	; 0xfe
 8028150:	dce6      	bgt.n	8028120 <scalbnf+0x3c>
 8028152:	2800      	cmp	r0, #0
 8028154:	dd06      	ble.n	8028164 <scalbnf+0x80>
 8028156:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802815a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802815e:	ee00 3a10 	vmov	s0, r3
 8028162:	4770      	bx	lr
 8028164:	f110 0f16 	cmn.w	r0, #22
 8028168:	da09      	bge.n	802817e <scalbnf+0x9a>
 802816a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80281a4 <scalbnf+0xc0>
 802816e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80281a8 <scalbnf+0xc4>
 8028172:	ee10 3a10 	vmov	r3, s0
 8028176:	eeb0 7a67 	vmov.f32	s14, s15
 802817a:	2b00      	cmp	r3, #0
 802817c:	e7d9      	b.n	8028132 <scalbnf+0x4e>
 802817e:	3019      	adds	r0, #25
 8028180:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8028184:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028188:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80281ac <scalbnf+0xc8>
 802818c:	ee07 3a90 	vmov	s15, r3
 8028190:	e7d7      	b.n	8028142 <scalbnf+0x5e>
 8028192:	bf00      	nop
 8028194:	ffff3cb0 	.word	0xffff3cb0
 8028198:	4c000000 	.word	0x4c000000
 802819c:	7149f2ca 	.word	0x7149f2ca
 80281a0:	f149f2ca 	.word	0xf149f2ca
 80281a4:	0da24260 	.word	0x0da24260
 80281a8:	8da24260 	.word	0x8da24260
 80281ac:	33000000 	.word	0x33000000

080281b0 <floorf>:
 80281b0:	ee10 3a10 	vmov	r3, s0
 80281b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80281b8:	3a7f      	subs	r2, #127	; 0x7f
 80281ba:	2a16      	cmp	r2, #22
 80281bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80281c0:	dc2a      	bgt.n	8028218 <floorf+0x68>
 80281c2:	2a00      	cmp	r2, #0
 80281c4:	da11      	bge.n	80281ea <floorf+0x3a>
 80281c6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8028228 <floorf+0x78>
 80281ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80281ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80281d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281d6:	dd05      	ble.n	80281e4 <floorf+0x34>
 80281d8:	2b00      	cmp	r3, #0
 80281da:	da23      	bge.n	8028224 <floorf+0x74>
 80281dc:	4a13      	ldr	r2, [pc, #76]	; (802822c <floorf+0x7c>)
 80281de:	2900      	cmp	r1, #0
 80281e0:	bf18      	it	ne
 80281e2:	4613      	movne	r3, r2
 80281e4:	ee00 3a10 	vmov	s0, r3
 80281e8:	4770      	bx	lr
 80281ea:	4911      	ldr	r1, [pc, #68]	; (8028230 <floorf+0x80>)
 80281ec:	4111      	asrs	r1, r2
 80281ee:	420b      	tst	r3, r1
 80281f0:	d0fa      	beq.n	80281e8 <floorf+0x38>
 80281f2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8028228 <floorf+0x78>
 80281f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80281fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80281fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028202:	ddef      	ble.n	80281e4 <floorf+0x34>
 8028204:	2b00      	cmp	r3, #0
 8028206:	bfbe      	ittt	lt
 8028208:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802820c:	fa40 f202 	asrlt.w	r2, r0, r2
 8028210:	189b      	addlt	r3, r3, r2
 8028212:	ea23 0301 	bic.w	r3, r3, r1
 8028216:	e7e5      	b.n	80281e4 <floorf+0x34>
 8028218:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802821c:	d3e4      	bcc.n	80281e8 <floorf+0x38>
 802821e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028222:	4770      	bx	lr
 8028224:	2300      	movs	r3, #0
 8028226:	e7dd      	b.n	80281e4 <floorf+0x34>
 8028228:	7149f2ca 	.word	0x7149f2ca
 802822c:	bf800000 	.word	0xbf800000
 8028230:	007fffff 	.word	0x007fffff

08028234 <_init>:
 8028234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028236:	bf00      	nop
 8028238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802823a:	bc08      	pop	{r3}
 802823c:	469e      	mov	lr, r3
 802823e:	4770      	bx	lr

08028240 <_fini>:
 8028240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028242:	bf00      	nop
 8028244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028246:	bc08      	pop	{r3}
 8028248:	469e      	mov	lr, r3
 802824a:	4770      	bx	lr
